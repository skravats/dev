// system_bd_altera_mm_interconnect_181_lokqtjy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_bd_altera_mm_interconnect_181_lokqtjy (
		output wire [11:0] ad9144_jesd204_link_management_awaddr,                //                 ad9144_jesd204_link_management.awaddr
		output wire [2:0]  ad9144_jesd204_link_management_awprot,                //                                               .awprot
		output wire        ad9144_jesd204_link_management_awvalid,               //                                               .awvalid
		input  wire        ad9144_jesd204_link_management_awready,               //                                               .awready
		output wire [31:0] ad9144_jesd204_link_management_wdata,                 //                                               .wdata
		output wire [3:0]  ad9144_jesd204_link_management_wstrb,                 //                                               .wstrb
		output wire        ad9144_jesd204_link_management_wvalid,                //                                               .wvalid
		input  wire        ad9144_jesd204_link_management_wready,                //                                               .wready
		input  wire [1:0]  ad9144_jesd204_link_management_bresp,                 //                                               .bresp
		input  wire        ad9144_jesd204_link_management_bvalid,                //                                               .bvalid
		output wire        ad9144_jesd204_link_management_bready,                //                                               .bready
		output wire [11:0] ad9144_jesd204_link_management_araddr,                //                                               .araddr
		output wire [2:0]  ad9144_jesd204_link_management_arprot,                //                                               .arprot
		output wire        ad9144_jesd204_link_management_arvalid,               //                                               .arvalid
		input  wire        ad9144_jesd204_link_management_arready,               //                                               .arready
		input  wire [31:0] ad9144_jesd204_link_management_rdata,                 //                                               .rdata
		input  wire [1:0]  ad9144_jesd204_link_management_rresp,                 //                                               .rresp
		input  wire        ad9144_jesd204_link_management_rvalid,                //                                               .rvalid
		output wire        ad9144_jesd204_link_management_rready,                //                                               .rready
		output wire [13:0] ad9144_jesd204_link_reconfig_awaddr,                  //                   ad9144_jesd204_link_reconfig.awaddr
		output wire [2:0]  ad9144_jesd204_link_reconfig_awprot,                  //                                               .awprot
		output wire        ad9144_jesd204_link_reconfig_awvalid,                 //                                               .awvalid
		input  wire        ad9144_jesd204_link_reconfig_awready,                 //                                               .awready
		output wire [31:0] ad9144_jesd204_link_reconfig_wdata,                   //                                               .wdata
		output wire [3:0]  ad9144_jesd204_link_reconfig_wstrb,                   //                                               .wstrb
		output wire        ad9144_jesd204_link_reconfig_wvalid,                  //                                               .wvalid
		input  wire        ad9144_jesd204_link_reconfig_wready,                  //                                               .wready
		input  wire [1:0]  ad9144_jesd204_link_reconfig_bresp,                   //                                               .bresp
		input  wire        ad9144_jesd204_link_reconfig_bvalid,                  //                                               .bvalid
		output wire        ad9144_jesd204_link_reconfig_bready,                  //                                               .bready
		output wire [13:0] ad9144_jesd204_link_reconfig_araddr,                  //                                               .araddr
		output wire [2:0]  ad9144_jesd204_link_reconfig_arprot,                  //                                               .arprot
		output wire        ad9144_jesd204_link_reconfig_arvalid,                 //                                               .arvalid
		input  wire        ad9144_jesd204_link_reconfig_arready,                 //                                               .arready
		input  wire [31:0] ad9144_jesd204_link_reconfig_rdata,                   //                                               .rdata
		input  wire [1:0]  ad9144_jesd204_link_reconfig_rresp,                   //                                               .rresp
		input  wire        ad9144_jesd204_link_reconfig_rvalid,                  //                                               .rvalid
		output wire        ad9144_jesd204_link_reconfig_rready,                  //                                               .rready
		output wire [11:0] ad9680_jesd204_link_management_awaddr,                //                 ad9680_jesd204_link_management.awaddr
		output wire [2:0]  ad9680_jesd204_link_management_awprot,                //                                               .awprot
		output wire        ad9680_jesd204_link_management_awvalid,               //                                               .awvalid
		input  wire        ad9680_jesd204_link_management_awready,               //                                               .awready
		output wire [31:0] ad9680_jesd204_link_management_wdata,                 //                                               .wdata
		output wire [3:0]  ad9680_jesd204_link_management_wstrb,                 //                                               .wstrb
		output wire        ad9680_jesd204_link_management_wvalid,                //                                               .wvalid
		input  wire        ad9680_jesd204_link_management_wready,                //                                               .wready
		input  wire [1:0]  ad9680_jesd204_link_management_bresp,                 //                                               .bresp
		input  wire        ad9680_jesd204_link_management_bvalid,                //                                               .bvalid
		output wire        ad9680_jesd204_link_management_bready,                //                                               .bready
		output wire [11:0] ad9680_jesd204_link_management_araddr,                //                                               .araddr
		output wire [2:0]  ad9680_jesd204_link_management_arprot,                //                                               .arprot
		output wire        ad9680_jesd204_link_management_arvalid,               //                                               .arvalid
		input  wire        ad9680_jesd204_link_management_arready,               //                                               .arready
		input  wire [31:0] ad9680_jesd204_link_management_rdata,                 //                                               .rdata
		input  wire [1:0]  ad9680_jesd204_link_management_rresp,                 //                                               .rresp
		input  wire        ad9680_jesd204_link_management_rvalid,                //                                               .rvalid
		output wire        ad9680_jesd204_link_management_rready,                //                                               .rready
		output wire [13:0] ad9680_jesd204_link_reconfig_awaddr,                  //                   ad9680_jesd204_link_reconfig.awaddr
		output wire [2:0]  ad9680_jesd204_link_reconfig_awprot,                  //                                               .awprot
		output wire        ad9680_jesd204_link_reconfig_awvalid,                 //                                               .awvalid
		input  wire        ad9680_jesd204_link_reconfig_awready,                 //                                               .awready
		output wire [31:0] ad9680_jesd204_link_reconfig_wdata,                   //                                               .wdata
		output wire [3:0]  ad9680_jesd204_link_reconfig_wstrb,                   //                                               .wstrb
		output wire        ad9680_jesd204_link_reconfig_wvalid,                  //                                               .wvalid
		input  wire        ad9680_jesd204_link_reconfig_wready,                  //                                               .wready
		input  wire [1:0]  ad9680_jesd204_link_reconfig_bresp,                   //                                               .bresp
		input  wire        ad9680_jesd204_link_reconfig_bvalid,                  //                                               .bvalid
		output wire        ad9680_jesd204_link_reconfig_bready,                  //                                               .bready
		output wire [13:0] ad9680_jesd204_link_reconfig_araddr,                  //                                               .araddr
		output wire [2:0]  ad9680_jesd204_link_reconfig_arprot,                  //                                               .arprot
		output wire        ad9680_jesd204_link_reconfig_arvalid,                 //                                               .arvalid
		input  wire        ad9680_jesd204_link_reconfig_arready,                 //                                               .arready
		input  wire [31:0] ad9680_jesd204_link_reconfig_rdata,                   //                                               .rdata
		input  wire [1:0]  ad9680_jesd204_link_reconfig_rresp,                   //                                               .rresp
		input  wire        ad9680_jesd204_link_reconfig_rvalid,                  //                                               .rvalid
		output wire        ad9680_jesd204_link_reconfig_rready,                  //                                               .rready
		output wire [15:0] axi_ad9144_core_s_axi_awaddr,                         //                          axi_ad9144_core_s_axi.awaddr
		output wire [2:0]  axi_ad9144_core_s_axi_awprot,                         //                                               .awprot
		output wire        axi_ad9144_core_s_axi_awvalid,                        //                                               .awvalid
		input  wire        axi_ad9144_core_s_axi_awready,                        //                                               .awready
		output wire [31:0] axi_ad9144_core_s_axi_wdata,                          //                                               .wdata
		output wire [3:0]  axi_ad9144_core_s_axi_wstrb,                          //                                               .wstrb
		output wire        axi_ad9144_core_s_axi_wvalid,                         //                                               .wvalid
		input  wire        axi_ad9144_core_s_axi_wready,                         //                                               .wready
		input  wire [1:0]  axi_ad9144_core_s_axi_bresp,                          //                                               .bresp
		input  wire        axi_ad9144_core_s_axi_bvalid,                         //                                               .bvalid
		output wire        axi_ad9144_core_s_axi_bready,                         //                                               .bready
		output wire [15:0] axi_ad9144_core_s_axi_araddr,                         //                                               .araddr
		output wire [2:0]  axi_ad9144_core_s_axi_arprot,                         //                                               .arprot
		output wire        axi_ad9144_core_s_axi_arvalid,                        //                                               .arvalid
		input  wire        axi_ad9144_core_s_axi_arready,                        //                                               .arready
		input  wire [31:0] axi_ad9144_core_s_axi_rdata,                          //                                               .rdata
		input  wire [1:0]  axi_ad9144_core_s_axi_rresp,                          //                                               .rresp
		input  wire        axi_ad9144_core_s_axi_rvalid,                         //                                               .rvalid
		output wire        axi_ad9144_core_s_axi_rready,                         //                                               .rready
		output wire [11:0] axi_ad9144_dma_s_axi_awaddr,                          //                           axi_ad9144_dma_s_axi.awaddr
		output wire [2:0]  axi_ad9144_dma_s_axi_awprot,                          //                                               .awprot
		output wire        axi_ad9144_dma_s_axi_awvalid,                         //                                               .awvalid
		input  wire        axi_ad9144_dma_s_axi_awready,                         //                                               .awready
		output wire [31:0] axi_ad9144_dma_s_axi_wdata,                           //                                               .wdata
		output wire [3:0]  axi_ad9144_dma_s_axi_wstrb,                           //                                               .wstrb
		output wire        axi_ad9144_dma_s_axi_wvalid,                          //                                               .wvalid
		input  wire        axi_ad9144_dma_s_axi_wready,                          //                                               .wready
		input  wire [1:0]  axi_ad9144_dma_s_axi_bresp,                           //                                               .bresp
		input  wire        axi_ad9144_dma_s_axi_bvalid,                          //                                               .bvalid
		output wire        axi_ad9144_dma_s_axi_bready,                          //                                               .bready
		output wire [11:0] axi_ad9144_dma_s_axi_araddr,                          //                                               .araddr
		output wire [2:0]  axi_ad9144_dma_s_axi_arprot,                          //                                               .arprot
		output wire        axi_ad9144_dma_s_axi_arvalid,                         //                                               .arvalid
		input  wire        axi_ad9144_dma_s_axi_arready,                         //                                               .arready
		input  wire [31:0] axi_ad9144_dma_s_axi_rdata,                           //                                               .rdata
		input  wire [1:0]  axi_ad9144_dma_s_axi_rresp,                           //                                               .rresp
		input  wire        axi_ad9144_dma_s_axi_rvalid,                          //                                               .rvalid
		output wire        axi_ad9144_dma_s_axi_rready,                          //                                               .rready
		output wire [15:0] axi_ad9680_core_s_axi_awaddr,                         //                          axi_ad9680_core_s_axi.awaddr
		output wire [2:0]  axi_ad9680_core_s_axi_awprot,                         //                                               .awprot
		output wire        axi_ad9680_core_s_axi_awvalid,                        //                                               .awvalid
		input  wire        axi_ad9680_core_s_axi_awready,                        //                                               .awready
		output wire [31:0] axi_ad9680_core_s_axi_wdata,                          //                                               .wdata
		output wire [3:0]  axi_ad9680_core_s_axi_wstrb,                          //                                               .wstrb
		output wire        axi_ad9680_core_s_axi_wvalid,                         //                                               .wvalid
		input  wire        axi_ad9680_core_s_axi_wready,                         //                                               .wready
		input  wire [1:0]  axi_ad9680_core_s_axi_bresp,                          //                                               .bresp
		input  wire        axi_ad9680_core_s_axi_bvalid,                         //                                               .bvalid
		output wire        axi_ad9680_core_s_axi_bready,                         //                                               .bready
		output wire [15:0] axi_ad9680_core_s_axi_araddr,                         //                                               .araddr
		output wire [2:0]  axi_ad9680_core_s_axi_arprot,                         //                                               .arprot
		output wire        axi_ad9680_core_s_axi_arvalid,                        //                                               .arvalid
		input  wire        axi_ad9680_core_s_axi_arready,                        //                                               .arready
		input  wire [31:0] axi_ad9680_core_s_axi_rdata,                          //                                               .rdata
		input  wire [1:0]  axi_ad9680_core_s_axi_rresp,                          //                                               .rresp
		input  wire        axi_ad9680_core_s_axi_rvalid,                         //                                               .rvalid
		output wire        axi_ad9680_core_s_axi_rready,                         //                                               .rready
		output wire [11:0] axi_ad9680_dma_s_axi_awaddr,                          //                           axi_ad9680_dma_s_axi.awaddr
		output wire [2:0]  axi_ad9680_dma_s_axi_awprot,                          //                                               .awprot
		output wire        axi_ad9680_dma_s_axi_awvalid,                         //                                               .awvalid
		input  wire        axi_ad9680_dma_s_axi_awready,                         //                                               .awready
		output wire [31:0] axi_ad9680_dma_s_axi_wdata,                           //                                               .wdata
		output wire [3:0]  axi_ad9680_dma_s_axi_wstrb,                           //                                               .wstrb
		output wire        axi_ad9680_dma_s_axi_wvalid,                          //                                               .wvalid
		input  wire        axi_ad9680_dma_s_axi_wready,                          //                                               .wready
		input  wire [1:0]  axi_ad9680_dma_s_axi_bresp,                           //                                               .bresp
		input  wire        axi_ad9680_dma_s_axi_bvalid,                          //                                               .bvalid
		output wire        axi_ad9680_dma_s_axi_bready,                          //                                               .bready
		output wire [11:0] axi_ad9680_dma_s_axi_araddr,                          //                                               .araddr
		output wire [2:0]  axi_ad9680_dma_s_axi_arprot,                          //                                               .arprot
		output wire        axi_ad9680_dma_s_axi_arvalid,                         //                                               .arvalid
		input  wire        axi_ad9680_dma_s_axi_arready,                         //                                               .arready
		input  wire [31:0] axi_ad9680_dma_s_axi_rdata,                           //                                               .rdata
		input  wire [1:0]  axi_ad9680_dma_s_axi_rresp,                           //                                               .rresp
		input  wire        axi_ad9680_dma_s_axi_rvalid,                          //                                               .rvalid
		output wire        axi_ad9680_dma_s_axi_rready,                          //                                               .rready
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_awid,                       //                      sys_hps_h2f_lw_axi_master.awid
		input  wire [20:0] sys_hps_h2f_lw_axi_master_awaddr,                     //                                               .awaddr
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_awlen,                      //                                               .awlen
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_awsize,                     //                                               .awsize
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_awburst,                    //                                               .awburst
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_awlock,                     //                                               .awlock
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_awcache,                    //                                               .awcache
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_awprot,                     //                                               .awprot
		input  wire [4:0]  sys_hps_h2f_lw_axi_master_awuser,                     //                                               .awuser
		input  wire        sys_hps_h2f_lw_axi_master_awvalid,                    //                                               .awvalid
		output wire        sys_hps_h2f_lw_axi_master_awready,                    //                                               .awready
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_wid,                        //                                               .wid
		input  wire [31:0] sys_hps_h2f_lw_axi_master_wdata,                      //                                               .wdata
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_wstrb,                      //                                               .wstrb
		input  wire        sys_hps_h2f_lw_axi_master_wlast,                      //                                               .wlast
		input  wire        sys_hps_h2f_lw_axi_master_wvalid,                     //                                               .wvalid
		output wire        sys_hps_h2f_lw_axi_master_wready,                     //                                               .wready
		output wire [3:0]  sys_hps_h2f_lw_axi_master_bid,                        //                                               .bid
		output wire [1:0]  sys_hps_h2f_lw_axi_master_bresp,                      //                                               .bresp
		output wire        sys_hps_h2f_lw_axi_master_bvalid,                     //                                               .bvalid
		input  wire        sys_hps_h2f_lw_axi_master_bready,                     //                                               .bready
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_arid,                       //                                               .arid
		input  wire [20:0] sys_hps_h2f_lw_axi_master_araddr,                     //                                               .araddr
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_arlen,                      //                                               .arlen
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_arsize,                     //                                               .arsize
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_arburst,                    //                                               .arburst
		input  wire [1:0]  sys_hps_h2f_lw_axi_master_arlock,                     //                                               .arlock
		input  wire [3:0]  sys_hps_h2f_lw_axi_master_arcache,                    //                                               .arcache
		input  wire [2:0]  sys_hps_h2f_lw_axi_master_arprot,                     //                                               .arprot
		input  wire [4:0]  sys_hps_h2f_lw_axi_master_aruser,                     //                                               .aruser
		input  wire        sys_hps_h2f_lw_axi_master_arvalid,                    //                                               .arvalid
		output wire        sys_hps_h2f_lw_axi_master_arready,                    //                                               .arready
		output wire [3:0]  sys_hps_h2f_lw_axi_master_rid,                        //                                               .rid
		output wire [31:0] sys_hps_h2f_lw_axi_master_rdata,                      //                                               .rdata
		output wire [1:0]  sys_hps_h2f_lw_axi_master_rresp,                      //                                               .rresp
		output wire        sys_hps_h2f_lw_axi_master_rlast,                      //                                               .rlast
		output wire        sys_hps_h2f_lw_axi_master_rvalid,                     //                                               .rvalid
		input  wire        sys_hps_h2f_lw_axi_master_rready,                     //                                               .rready
		input  wire        sys_clk_clk_clk,                                      //                                    sys_clk_clk.clk
		input  wire        sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, // sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		output wire [9:0]  ad9144_jesd204_lane_pll_reconfig_address,             //               ad9144_jesd204_lane_pll_reconfig.address
		output wire        ad9144_jesd204_lane_pll_reconfig_write,               //                                               .write
		output wire        ad9144_jesd204_lane_pll_reconfig_read,                //                                               .read
		input  wire [31:0] ad9144_jesd204_lane_pll_reconfig_readdata,            //                                               .readdata
		output wire [31:0] ad9144_jesd204_lane_pll_reconfig_writedata,           //                                               .writedata
		input  wire        ad9144_jesd204_lane_pll_reconfig_waitrequest,         //                                               .waitrequest
		output wire [9:0]  ad9144_jesd204_link_pll_reconfig_address,             //               ad9144_jesd204_link_pll_reconfig.address
		output wire        ad9144_jesd204_link_pll_reconfig_write,               //                                               .write
		output wire        ad9144_jesd204_link_pll_reconfig_read,                //                                               .read
		input  wire [31:0] ad9144_jesd204_link_pll_reconfig_readdata,            //                                               .readdata
		output wire [31:0] ad9144_jesd204_link_pll_reconfig_writedata,           //                                               .writedata
		input  wire        ad9144_jesd204_link_pll_reconfig_waitrequest,         //                                               .waitrequest
		output wire [9:0]  ad9680_jesd204_link_pll_reconfig_address,             //               ad9680_jesd204_link_pll_reconfig.address
		output wire        ad9680_jesd204_link_pll_reconfig_write,               //                                               .write
		output wire        ad9680_jesd204_link_pll_reconfig_read,                //                                               .read
		input  wire [31:0] ad9680_jesd204_link_pll_reconfig_readdata,            //                                               .readdata
		output wire [31:0] ad9680_jesd204_link_pll_reconfig_writedata,           //                                               .writedata
		input  wire        ad9680_jesd204_link_pll_reconfig_waitrequest,         //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_0_rcfg_s0_address,                         //                           avl_adxcfg_0_rcfg_s0.address
		output wire        avl_adxcfg_0_rcfg_s0_write,                           //                                               .write
		output wire        avl_adxcfg_0_rcfg_s0_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_0_rcfg_s0_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_0_rcfg_s0_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_0_rcfg_s0_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_0_rcfg_s1_address,                         //                           avl_adxcfg_0_rcfg_s1.address
		output wire        avl_adxcfg_0_rcfg_s1_write,                           //                                               .write
		output wire        avl_adxcfg_0_rcfg_s1_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_0_rcfg_s1_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_0_rcfg_s1_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_0_rcfg_s1_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_1_rcfg_s0_address,                         //                           avl_adxcfg_1_rcfg_s0.address
		output wire        avl_adxcfg_1_rcfg_s0_write,                           //                                               .write
		output wire        avl_adxcfg_1_rcfg_s0_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_1_rcfg_s0_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_1_rcfg_s0_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_1_rcfg_s0_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_1_rcfg_s1_address,                         //                           avl_adxcfg_1_rcfg_s1.address
		output wire        avl_adxcfg_1_rcfg_s1_write,                           //                                               .write
		output wire        avl_adxcfg_1_rcfg_s1_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_1_rcfg_s1_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_1_rcfg_s1_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_1_rcfg_s1_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_2_rcfg_s0_address,                         //                           avl_adxcfg_2_rcfg_s0.address
		output wire        avl_adxcfg_2_rcfg_s0_write,                           //                                               .write
		output wire        avl_adxcfg_2_rcfg_s0_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_2_rcfg_s0_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_2_rcfg_s0_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_2_rcfg_s0_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_2_rcfg_s1_address,                         //                           avl_adxcfg_2_rcfg_s1.address
		output wire        avl_adxcfg_2_rcfg_s1_write,                           //                                               .write
		output wire        avl_adxcfg_2_rcfg_s1_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_2_rcfg_s1_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_2_rcfg_s1_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_2_rcfg_s1_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_3_rcfg_s0_address,                         //                           avl_adxcfg_3_rcfg_s0.address
		output wire        avl_adxcfg_3_rcfg_s0_write,                           //                                               .write
		output wire        avl_adxcfg_3_rcfg_s0_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_3_rcfg_s0_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_3_rcfg_s0_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_3_rcfg_s0_waitrequest,                     //                                               .waitrequest
		output wire [9:0]  avl_adxcfg_3_rcfg_s1_address,                         //                           avl_adxcfg_3_rcfg_s1.address
		output wire        avl_adxcfg_3_rcfg_s1_write,                           //                                               .write
		output wire        avl_adxcfg_3_rcfg_s1_read,                            //                                               .read
		input  wire [31:0] avl_adxcfg_3_rcfg_s1_readdata,                        //                                               .readdata
		output wire [31:0] avl_adxcfg_3_rcfg_s1_writedata,                       //                                               .writedata
		input  wire        avl_adxcfg_3_rcfg_s1_waitrequest,                     //                                               .waitrequest
		output wire [1:0]  sys_gpio_bd_s1_address,                               //                                 sys_gpio_bd_s1.address
		output wire        sys_gpio_bd_s1_write,                                 //                                               .write
		input  wire [31:0] sys_gpio_bd_s1_readdata,                              //                                               .readdata
		output wire [31:0] sys_gpio_bd_s1_writedata,                             //                                               .writedata
		output wire        sys_gpio_bd_s1_chipselect,                            //                                               .chipselect
		output wire [1:0]  sys_gpio_in_s1_address,                               //                                 sys_gpio_in_s1.address
		output wire        sys_gpio_in_s1_write,                                 //                                               .write
		input  wire [31:0] sys_gpio_in_s1_readdata,                              //                                               .readdata
		output wire [31:0] sys_gpio_in_s1_writedata,                             //                                               .writedata
		output wire        sys_gpio_in_s1_chipselect,                            //                                               .chipselect
		output wire [1:0]  sys_gpio_out_s1_address,                              //                                sys_gpio_out_s1.address
		output wire        sys_gpio_out_s1_write,                                //                                               .write
		input  wire [31:0] sys_gpio_out_s1_readdata,                             //                                               .readdata
		output wire [31:0] sys_gpio_out_s1_writedata,                            //                                               .writedata
		output wire        sys_gpio_out_s1_chipselect,                           //                                               .chipselect
		output wire [2:0]  sys_spi_spi_control_port_address,                     //                       sys_spi_spi_control_port.address
		output wire        sys_spi_spi_control_port_write,                       //                                               .write
		output wire        sys_spi_spi_control_port_read,                        //                                               .read
		input  wire [15:0] sys_spi_spi_control_port_readdata,                    //                                               .readdata
		output wire [15:0] sys_spi_spi_control_port_writedata,                   //                                               .writedata
		output wire        sys_spi_spi_control_port_chipselect                   //                                               .chipselect
	);

	wire   [31:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata;                    // ad9144_jesd204_lane_pll_reconfig_translator:uav_readdata -> ad9144_jesd204_lane_pll_reconfig_agent:m0_readdata
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest;                 // ad9144_jesd204_lane_pll_reconfig_translator:uav_waitrequest -> ad9144_jesd204_lane_pll_reconfig_agent:m0_waitrequest
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess;                 // ad9144_jesd204_lane_pll_reconfig_agent:m0_debugaccess -> ad9144_jesd204_lane_pll_reconfig_translator:uav_debugaccess
	wire   [20:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_address;                     // ad9144_jesd204_lane_pll_reconfig_agent:m0_address -> ad9144_jesd204_lane_pll_reconfig_translator:uav_address
	wire    [3:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable;                  // ad9144_jesd204_lane_pll_reconfig_agent:m0_byteenable -> ad9144_jesd204_lane_pll_reconfig_translator:uav_byteenable
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_read;                        // ad9144_jesd204_lane_pll_reconfig_agent:m0_read -> ad9144_jesd204_lane_pll_reconfig_translator:uav_read
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid;               // ad9144_jesd204_lane_pll_reconfig_translator:uav_readdatavalid -> ad9144_jesd204_lane_pll_reconfig_agent:m0_readdatavalid
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_lock;                        // ad9144_jesd204_lane_pll_reconfig_agent:m0_lock -> ad9144_jesd204_lane_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata;                   // ad9144_jesd204_lane_pll_reconfig_agent:m0_writedata -> ad9144_jesd204_lane_pll_reconfig_translator:uav_writedata
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_write;                       // ad9144_jesd204_lane_pll_reconfig_agent:m0_write -> ad9144_jesd204_lane_pll_reconfig_translator:uav_write
	wire    [2:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount;                  // ad9144_jesd204_lane_pll_reconfig_agent:m0_burstcount -> ad9144_jesd204_lane_pll_reconfig_translator:uav_burstcount
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid;                // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_valid -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [116:0] ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data;                 // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_data -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready;                // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rf_source_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket;        // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket;          // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid;             // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_valid -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_valid
	wire  [116:0] ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data;              // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_data -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready;             // ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_ready -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket;     // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket;       // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid;           // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_valid -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data;            // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_data -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready;           // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_ready
	wire   [31:0] ad9144_jesd204_link_pll_reconfig_agent_m0_readdata;                    // ad9144_jesd204_link_pll_reconfig_translator:uav_readdata -> ad9144_jesd204_link_pll_reconfig_agent:m0_readdata
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest;                 // ad9144_jesd204_link_pll_reconfig_translator:uav_waitrequest -> ad9144_jesd204_link_pll_reconfig_agent:m0_waitrequest
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess;                 // ad9144_jesd204_link_pll_reconfig_agent:m0_debugaccess -> ad9144_jesd204_link_pll_reconfig_translator:uav_debugaccess
	wire   [20:0] ad9144_jesd204_link_pll_reconfig_agent_m0_address;                     // ad9144_jesd204_link_pll_reconfig_agent:m0_address -> ad9144_jesd204_link_pll_reconfig_translator:uav_address
	wire    [3:0] ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable;                  // ad9144_jesd204_link_pll_reconfig_agent:m0_byteenable -> ad9144_jesd204_link_pll_reconfig_translator:uav_byteenable
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_read;                        // ad9144_jesd204_link_pll_reconfig_agent:m0_read -> ad9144_jesd204_link_pll_reconfig_translator:uav_read
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid;               // ad9144_jesd204_link_pll_reconfig_translator:uav_readdatavalid -> ad9144_jesd204_link_pll_reconfig_agent:m0_readdatavalid
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_lock;                        // ad9144_jesd204_link_pll_reconfig_agent:m0_lock -> ad9144_jesd204_link_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9144_jesd204_link_pll_reconfig_agent_m0_writedata;                   // ad9144_jesd204_link_pll_reconfig_agent:m0_writedata -> ad9144_jesd204_link_pll_reconfig_translator:uav_writedata
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_write;                       // ad9144_jesd204_link_pll_reconfig_agent:m0_write -> ad9144_jesd204_link_pll_reconfig_translator:uav_write
	wire    [2:0] ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount;                  // ad9144_jesd204_link_pll_reconfig_agent:m0_burstcount -> ad9144_jesd204_link_pll_reconfig_translator:uav_burstcount
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid;                // ad9144_jesd204_link_pll_reconfig_agent:rf_source_valid -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [116:0] ad9144_jesd204_link_pll_reconfig_agent_rf_source_data;                 // ad9144_jesd204_link_pll_reconfig_agent:rf_source_data -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready;                // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_ready -> ad9144_jesd204_link_pll_reconfig_agent:rf_source_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket;        // ad9144_jesd204_link_pll_reconfig_agent:rf_source_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket;          // ad9144_jesd204_link_pll_reconfig_agent:rf_source_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid;             // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_valid -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_valid
	wire  [116:0] ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data;              // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_data -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready;             // ad9144_jesd204_link_pll_reconfig_agent:rf_sink_ready -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket;     // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket;       // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid;           // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_valid -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data;            // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_data -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready;           // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_ready -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_ready
	wire   [31:0] ad9680_jesd204_link_pll_reconfig_agent_m0_readdata;                    // ad9680_jesd204_link_pll_reconfig_translator:uav_readdata -> ad9680_jesd204_link_pll_reconfig_agent:m0_readdata
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest;                 // ad9680_jesd204_link_pll_reconfig_translator:uav_waitrequest -> ad9680_jesd204_link_pll_reconfig_agent:m0_waitrequest
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess;                 // ad9680_jesd204_link_pll_reconfig_agent:m0_debugaccess -> ad9680_jesd204_link_pll_reconfig_translator:uav_debugaccess
	wire   [20:0] ad9680_jesd204_link_pll_reconfig_agent_m0_address;                     // ad9680_jesd204_link_pll_reconfig_agent:m0_address -> ad9680_jesd204_link_pll_reconfig_translator:uav_address
	wire    [3:0] ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable;                  // ad9680_jesd204_link_pll_reconfig_agent:m0_byteenable -> ad9680_jesd204_link_pll_reconfig_translator:uav_byteenable
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_read;                        // ad9680_jesd204_link_pll_reconfig_agent:m0_read -> ad9680_jesd204_link_pll_reconfig_translator:uav_read
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid;               // ad9680_jesd204_link_pll_reconfig_translator:uav_readdatavalid -> ad9680_jesd204_link_pll_reconfig_agent:m0_readdatavalid
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_lock;                        // ad9680_jesd204_link_pll_reconfig_agent:m0_lock -> ad9680_jesd204_link_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9680_jesd204_link_pll_reconfig_agent_m0_writedata;                   // ad9680_jesd204_link_pll_reconfig_agent:m0_writedata -> ad9680_jesd204_link_pll_reconfig_translator:uav_writedata
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_write;                       // ad9680_jesd204_link_pll_reconfig_agent:m0_write -> ad9680_jesd204_link_pll_reconfig_translator:uav_write
	wire    [2:0] ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount;                  // ad9680_jesd204_link_pll_reconfig_agent:m0_burstcount -> ad9680_jesd204_link_pll_reconfig_translator:uav_burstcount
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid;                // ad9680_jesd204_link_pll_reconfig_agent:rf_source_valid -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [116:0] ad9680_jesd204_link_pll_reconfig_agent_rf_source_data;                 // ad9680_jesd204_link_pll_reconfig_agent:rf_source_data -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready;                // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_ready -> ad9680_jesd204_link_pll_reconfig_agent:rf_source_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket;        // ad9680_jesd204_link_pll_reconfig_agent:rf_source_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket;          // ad9680_jesd204_link_pll_reconfig_agent:rf_source_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid;             // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_valid -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_valid
	wire  [116:0] ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data;              // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_data -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready;             // ad9680_jesd204_link_pll_reconfig_agent:rf_sink_ready -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket;     // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket;       // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid;           // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_valid -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data;            // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_data -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready;           // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_ready -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_0_rcfg_s0_agent_m0_readdata;                                // avl_adxcfg_0_rcfg_s0_translator:uav_readdata -> avl_adxcfg_0_rcfg_s0_agent:m0_readdata
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_waitrequest;                             // avl_adxcfg_0_rcfg_s0_translator:uav_waitrequest -> avl_adxcfg_0_rcfg_s0_agent:m0_waitrequest
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_debugaccess;                             // avl_adxcfg_0_rcfg_s0_agent:m0_debugaccess -> avl_adxcfg_0_rcfg_s0_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_0_rcfg_s0_agent_m0_address;                                 // avl_adxcfg_0_rcfg_s0_agent:m0_address -> avl_adxcfg_0_rcfg_s0_translator:uav_address
	wire    [3:0] avl_adxcfg_0_rcfg_s0_agent_m0_byteenable;                              // avl_adxcfg_0_rcfg_s0_agent:m0_byteenable -> avl_adxcfg_0_rcfg_s0_translator:uav_byteenable
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_read;                                    // avl_adxcfg_0_rcfg_s0_agent:m0_read -> avl_adxcfg_0_rcfg_s0_translator:uav_read
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_readdatavalid;                           // avl_adxcfg_0_rcfg_s0_translator:uav_readdatavalid -> avl_adxcfg_0_rcfg_s0_agent:m0_readdatavalid
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_lock;                                    // avl_adxcfg_0_rcfg_s0_agent:m0_lock -> avl_adxcfg_0_rcfg_s0_translator:uav_lock
	wire   [31:0] avl_adxcfg_0_rcfg_s0_agent_m0_writedata;                               // avl_adxcfg_0_rcfg_s0_agent:m0_writedata -> avl_adxcfg_0_rcfg_s0_translator:uav_writedata
	wire          avl_adxcfg_0_rcfg_s0_agent_m0_write;                                   // avl_adxcfg_0_rcfg_s0_agent:m0_write -> avl_adxcfg_0_rcfg_s0_translator:uav_write
	wire    [2:0] avl_adxcfg_0_rcfg_s0_agent_m0_burstcount;                              // avl_adxcfg_0_rcfg_s0_agent:m0_burstcount -> avl_adxcfg_0_rcfg_s0_translator:uav_burstcount
	wire          avl_adxcfg_0_rcfg_s0_agent_rf_source_valid;                            // avl_adxcfg_0_rcfg_s0_agent:rf_source_valid -> avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_0_rcfg_s0_agent_rf_source_data;                             // avl_adxcfg_0_rcfg_s0_agent:rf_source_data -> avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:in_data
	wire          avl_adxcfg_0_rcfg_s0_agent_rf_source_ready;                            // avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:in_ready -> avl_adxcfg_0_rcfg_s0_agent:rf_source_ready
	wire          avl_adxcfg_0_rcfg_s0_agent_rf_source_startofpacket;                    // avl_adxcfg_0_rcfg_s0_agent:rf_source_startofpacket -> avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rf_source_endofpacket;                      // avl_adxcfg_0_rcfg_s0_agent:rf_source_endofpacket -> avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_valid;                         // avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:out_valid -> avl_adxcfg_0_rcfg_s0_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_data;                          // avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:out_data -> avl_adxcfg_0_rcfg_s0_agent:rf_sink_data
	wire          avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_ready;                         // avl_adxcfg_0_rcfg_s0_agent:rf_sink_ready -> avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_0_rcfg_s0_agent:rf_sink_startofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_0_rcfg_s0_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_0_rcfg_s0_agent:rf_sink_endofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_valid;                       // avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_src_valid -> avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_data;                        // avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_src_data -> avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:in_data
	wire          avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_ready;                       // avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:in_ready -> avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_1_rcfg_s0_agent_m0_readdata;                                // avl_adxcfg_1_rcfg_s0_translator:uav_readdata -> avl_adxcfg_1_rcfg_s0_agent:m0_readdata
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_waitrequest;                             // avl_adxcfg_1_rcfg_s0_translator:uav_waitrequest -> avl_adxcfg_1_rcfg_s0_agent:m0_waitrequest
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_debugaccess;                             // avl_adxcfg_1_rcfg_s0_agent:m0_debugaccess -> avl_adxcfg_1_rcfg_s0_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_1_rcfg_s0_agent_m0_address;                                 // avl_adxcfg_1_rcfg_s0_agent:m0_address -> avl_adxcfg_1_rcfg_s0_translator:uav_address
	wire    [3:0] avl_adxcfg_1_rcfg_s0_agent_m0_byteenable;                              // avl_adxcfg_1_rcfg_s0_agent:m0_byteenable -> avl_adxcfg_1_rcfg_s0_translator:uav_byteenable
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_read;                                    // avl_adxcfg_1_rcfg_s0_agent:m0_read -> avl_adxcfg_1_rcfg_s0_translator:uav_read
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_readdatavalid;                           // avl_adxcfg_1_rcfg_s0_translator:uav_readdatavalid -> avl_adxcfg_1_rcfg_s0_agent:m0_readdatavalid
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_lock;                                    // avl_adxcfg_1_rcfg_s0_agent:m0_lock -> avl_adxcfg_1_rcfg_s0_translator:uav_lock
	wire   [31:0] avl_adxcfg_1_rcfg_s0_agent_m0_writedata;                               // avl_adxcfg_1_rcfg_s0_agent:m0_writedata -> avl_adxcfg_1_rcfg_s0_translator:uav_writedata
	wire          avl_adxcfg_1_rcfg_s0_agent_m0_write;                                   // avl_adxcfg_1_rcfg_s0_agent:m0_write -> avl_adxcfg_1_rcfg_s0_translator:uav_write
	wire    [2:0] avl_adxcfg_1_rcfg_s0_agent_m0_burstcount;                              // avl_adxcfg_1_rcfg_s0_agent:m0_burstcount -> avl_adxcfg_1_rcfg_s0_translator:uav_burstcount
	wire          avl_adxcfg_1_rcfg_s0_agent_rf_source_valid;                            // avl_adxcfg_1_rcfg_s0_agent:rf_source_valid -> avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_1_rcfg_s0_agent_rf_source_data;                             // avl_adxcfg_1_rcfg_s0_agent:rf_source_data -> avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:in_data
	wire          avl_adxcfg_1_rcfg_s0_agent_rf_source_ready;                            // avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:in_ready -> avl_adxcfg_1_rcfg_s0_agent:rf_source_ready
	wire          avl_adxcfg_1_rcfg_s0_agent_rf_source_startofpacket;                    // avl_adxcfg_1_rcfg_s0_agent:rf_source_startofpacket -> avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rf_source_endofpacket;                      // avl_adxcfg_1_rcfg_s0_agent:rf_source_endofpacket -> avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_valid;                         // avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:out_valid -> avl_adxcfg_1_rcfg_s0_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_data;                          // avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:out_data -> avl_adxcfg_1_rcfg_s0_agent:rf_sink_data
	wire          avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_ready;                         // avl_adxcfg_1_rcfg_s0_agent:rf_sink_ready -> avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_1_rcfg_s0_agent:rf_sink_startofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_1_rcfg_s0_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_1_rcfg_s0_agent:rf_sink_endofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_valid;                       // avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_src_valid -> avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_data;                        // avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_src_data -> avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:in_data
	wire          avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_ready;                       // avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:in_ready -> avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_2_rcfg_s0_agent_m0_readdata;                                // avl_adxcfg_2_rcfg_s0_translator:uav_readdata -> avl_adxcfg_2_rcfg_s0_agent:m0_readdata
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_waitrequest;                             // avl_adxcfg_2_rcfg_s0_translator:uav_waitrequest -> avl_adxcfg_2_rcfg_s0_agent:m0_waitrequest
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_debugaccess;                             // avl_adxcfg_2_rcfg_s0_agent:m0_debugaccess -> avl_adxcfg_2_rcfg_s0_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_2_rcfg_s0_agent_m0_address;                                 // avl_adxcfg_2_rcfg_s0_agent:m0_address -> avl_adxcfg_2_rcfg_s0_translator:uav_address
	wire    [3:0] avl_adxcfg_2_rcfg_s0_agent_m0_byteenable;                              // avl_adxcfg_2_rcfg_s0_agent:m0_byteenable -> avl_adxcfg_2_rcfg_s0_translator:uav_byteenable
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_read;                                    // avl_adxcfg_2_rcfg_s0_agent:m0_read -> avl_adxcfg_2_rcfg_s0_translator:uav_read
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_readdatavalid;                           // avl_adxcfg_2_rcfg_s0_translator:uav_readdatavalid -> avl_adxcfg_2_rcfg_s0_agent:m0_readdatavalid
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_lock;                                    // avl_adxcfg_2_rcfg_s0_agent:m0_lock -> avl_adxcfg_2_rcfg_s0_translator:uav_lock
	wire   [31:0] avl_adxcfg_2_rcfg_s0_agent_m0_writedata;                               // avl_adxcfg_2_rcfg_s0_agent:m0_writedata -> avl_adxcfg_2_rcfg_s0_translator:uav_writedata
	wire          avl_adxcfg_2_rcfg_s0_agent_m0_write;                                   // avl_adxcfg_2_rcfg_s0_agent:m0_write -> avl_adxcfg_2_rcfg_s0_translator:uav_write
	wire    [2:0] avl_adxcfg_2_rcfg_s0_agent_m0_burstcount;                              // avl_adxcfg_2_rcfg_s0_agent:m0_burstcount -> avl_adxcfg_2_rcfg_s0_translator:uav_burstcount
	wire          avl_adxcfg_2_rcfg_s0_agent_rf_source_valid;                            // avl_adxcfg_2_rcfg_s0_agent:rf_source_valid -> avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_2_rcfg_s0_agent_rf_source_data;                             // avl_adxcfg_2_rcfg_s0_agent:rf_source_data -> avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:in_data
	wire          avl_adxcfg_2_rcfg_s0_agent_rf_source_ready;                            // avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:in_ready -> avl_adxcfg_2_rcfg_s0_agent:rf_source_ready
	wire          avl_adxcfg_2_rcfg_s0_agent_rf_source_startofpacket;                    // avl_adxcfg_2_rcfg_s0_agent:rf_source_startofpacket -> avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rf_source_endofpacket;                      // avl_adxcfg_2_rcfg_s0_agent:rf_source_endofpacket -> avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_valid;                         // avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:out_valid -> avl_adxcfg_2_rcfg_s0_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_data;                          // avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:out_data -> avl_adxcfg_2_rcfg_s0_agent:rf_sink_data
	wire          avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_ready;                         // avl_adxcfg_2_rcfg_s0_agent:rf_sink_ready -> avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_2_rcfg_s0_agent:rf_sink_startofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_2_rcfg_s0_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_2_rcfg_s0_agent:rf_sink_endofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_valid;                       // avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_src_valid -> avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_data;                        // avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_src_data -> avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:in_data
	wire          avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_ready;                       // avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:in_ready -> avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_3_rcfg_s0_agent_m0_readdata;                                // avl_adxcfg_3_rcfg_s0_translator:uav_readdata -> avl_adxcfg_3_rcfg_s0_agent:m0_readdata
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_waitrequest;                             // avl_adxcfg_3_rcfg_s0_translator:uav_waitrequest -> avl_adxcfg_3_rcfg_s0_agent:m0_waitrequest
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_debugaccess;                             // avl_adxcfg_3_rcfg_s0_agent:m0_debugaccess -> avl_adxcfg_3_rcfg_s0_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_3_rcfg_s0_agent_m0_address;                                 // avl_adxcfg_3_rcfg_s0_agent:m0_address -> avl_adxcfg_3_rcfg_s0_translator:uav_address
	wire    [3:0] avl_adxcfg_3_rcfg_s0_agent_m0_byteenable;                              // avl_adxcfg_3_rcfg_s0_agent:m0_byteenable -> avl_adxcfg_3_rcfg_s0_translator:uav_byteenable
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_read;                                    // avl_adxcfg_3_rcfg_s0_agent:m0_read -> avl_adxcfg_3_rcfg_s0_translator:uav_read
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_readdatavalid;                           // avl_adxcfg_3_rcfg_s0_translator:uav_readdatavalid -> avl_adxcfg_3_rcfg_s0_agent:m0_readdatavalid
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_lock;                                    // avl_adxcfg_3_rcfg_s0_agent:m0_lock -> avl_adxcfg_3_rcfg_s0_translator:uav_lock
	wire   [31:0] avl_adxcfg_3_rcfg_s0_agent_m0_writedata;                               // avl_adxcfg_3_rcfg_s0_agent:m0_writedata -> avl_adxcfg_3_rcfg_s0_translator:uav_writedata
	wire          avl_adxcfg_3_rcfg_s0_agent_m0_write;                                   // avl_adxcfg_3_rcfg_s0_agent:m0_write -> avl_adxcfg_3_rcfg_s0_translator:uav_write
	wire    [2:0] avl_adxcfg_3_rcfg_s0_agent_m0_burstcount;                              // avl_adxcfg_3_rcfg_s0_agent:m0_burstcount -> avl_adxcfg_3_rcfg_s0_translator:uav_burstcount
	wire          avl_adxcfg_3_rcfg_s0_agent_rf_source_valid;                            // avl_adxcfg_3_rcfg_s0_agent:rf_source_valid -> avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_3_rcfg_s0_agent_rf_source_data;                             // avl_adxcfg_3_rcfg_s0_agent:rf_source_data -> avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:in_data
	wire          avl_adxcfg_3_rcfg_s0_agent_rf_source_ready;                            // avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:in_ready -> avl_adxcfg_3_rcfg_s0_agent:rf_source_ready
	wire          avl_adxcfg_3_rcfg_s0_agent_rf_source_startofpacket;                    // avl_adxcfg_3_rcfg_s0_agent:rf_source_startofpacket -> avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rf_source_endofpacket;                      // avl_adxcfg_3_rcfg_s0_agent:rf_source_endofpacket -> avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_valid;                         // avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:out_valid -> avl_adxcfg_3_rcfg_s0_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_data;                          // avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:out_data -> avl_adxcfg_3_rcfg_s0_agent:rf_sink_data
	wire          avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_ready;                         // avl_adxcfg_3_rcfg_s0_agent:rf_sink_ready -> avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_3_rcfg_s0_agent:rf_sink_startofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_3_rcfg_s0_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_3_rcfg_s0_agent:rf_sink_endofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_valid;                       // avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_src_valid -> avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_data;                        // avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_src_data -> avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:in_data
	wire          avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_ready;                       // avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:in_ready -> avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_0_rcfg_s1_agent_m0_readdata;                                // avl_adxcfg_0_rcfg_s1_translator:uav_readdata -> avl_adxcfg_0_rcfg_s1_agent:m0_readdata
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_waitrequest;                             // avl_adxcfg_0_rcfg_s1_translator:uav_waitrequest -> avl_adxcfg_0_rcfg_s1_agent:m0_waitrequest
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_debugaccess;                             // avl_adxcfg_0_rcfg_s1_agent:m0_debugaccess -> avl_adxcfg_0_rcfg_s1_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_0_rcfg_s1_agent_m0_address;                                 // avl_adxcfg_0_rcfg_s1_agent:m0_address -> avl_adxcfg_0_rcfg_s1_translator:uav_address
	wire    [3:0] avl_adxcfg_0_rcfg_s1_agent_m0_byteenable;                              // avl_adxcfg_0_rcfg_s1_agent:m0_byteenable -> avl_adxcfg_0_rcfg_s1_translator:uav_byteenable
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_read;                                    // avl_adxcfg_0_rcfg_s1_agent:m0_read -> avl_adxcfg_0_rcfg_s1_translator:uav_read
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_readdatavalid;                           // avl_adxcfg_0_rcfg_s1_translator:uav_readdatavalid -> avl_adxcfg_0_rcfg_s1_agent:m0_readdatavalid
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_lock;                                    // avl_adxcfg_0_rcfg_s1_agent:m0_lock -> avl_adxcfg_0_rcfg_s1_translator:uav_lock
	wire   [31:0] avl_adxcfg_0_rcfg_s1_agent_m0_writedata;                               // avl_adxcfg_0_rcfg_s1_agent:m0_writedata -> avl_adxcfg_0_rcfg_s1_translator:uav_writedata
	wire          avl_adxcfg_0_rcfg_s1_agent_m0_write;                                   // avl_adxcfg_0_rcfg_s1_agent:m0_write -> avl_adxcfg_0_rcfg_s1_translator:uav_write
	wire    [2:0] avl_adxcfg_0_rcfg_s1_agent_m0_burstcount;                              // avl_adxcfg_0_rcfg_s1_agent:m0_burstcount -> avl_adxcfg_0_rcfg_s1_translator:uav_burstcount
	wire          avl_adxcfg_0_rcfg_s1_agent_rf_source_valid;                            // avl_adxcfg_0_rcfg_s1_agent:rf_source_valid -> avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_0_rcfg_s1_agent_rf_source_data;                             // avl_adxcfg_0_rcfg_s1_agent:rf_source_data -> avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:in_data
	wire          avl_adxcfg_0_rcfg_s1_agent_rf_source_ready;                            // avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:in_ready -> avl_adxcfg_0_rcfg_s1_agent:rf_source_ready
	wire          avl_adxcfg_0_rcfg_s1_agent_rf_source_startofpacket;                    // avl_adxcfg_0_rcfg_s1_agent:rf_source_startofpacket -> avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rf_source_endofpacket;                      // avl_adxcfg_0_rcfg_s1_agent:rf_source_endofpacket -> avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_valid;                         // avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:out_valid -> avl_adxcfg_0_rcfg_s1_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_data;                          // avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:out_data -> avl_adxcfg_0_rcfg_s1_agent:rf_sink_data
	wire          avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_ready;                         // avl_adxcfg_0_rcfg_s1_agent:rf_sink_ready -> avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_0_rcfg_s1_agent:rf_sink_startofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_0_rcfg_s1_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_0_rcfg_s1_agent:rf_sink_endofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_valid;                       // avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_src_valid -> avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_data;                        // avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_src_data -> avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:in_data
	wire          avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_ready;                       // avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:in_ready -> avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_1_rcfg_s1_agent_m0_readdata;                                // avl_adxcfg_1_rcfg_s1_translator:uav_readdata -> avl_adxcfg_1_rcfg_s1_agent:m0_readdata
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_waitrequest;                             // avl_adxcfg_1_rcfg_s1_translator:uav_waitrequest -> avl_adxcfg_1_rcfg_s1_agent:m0_waitrequest
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_debugaccess;                             // avl_adxcfg_1_rcfg_s1_agent:m0_debugaccess -> avl_adxcfg_1_rcfg_s1_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_1_rcfg_s1_agent_m0_address;                                 // avl_adxcfg_1_rcfg_s1_agent:m0_address -> avl_adxcfg_1_rcfg_s1_translator:uav_address
	wire    [3:0] avl_adxcfg_1_rcfg_s1_agent_m0_byteenable;                              // avl_adxcfg_1_rcfg_s1_agent:m0_byteenable -> avl_adxcfg_1_rcfg_s1_translator:uav_byteenable
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_read;                                    // avl_adxcfg_1_rcfg_s1_agent:m0_read -> avl_adxcfg_1_rcfg_s1_translator:uav_read
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_readdatavalid;                           // avl_adxcfg_1_rcfg_s1_translator:uav_readdatavalid -> avl_adxcfg_1_rcfg_s1_agent:m0_readdatavalid
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_lock;                                    // avl_adxcfg_1_rcfg_s1_agent:m0_lock -> avl_adxcfg_1_rcfg_s1_translator:uav_lock
	wire   [31:0] avl_adxcfg_1_rcfg_s1_agent_m0_writedata;                               // avl_adxcfg_1_rcfg_s1_agent:m0_writedata -> avl_adxcfg_1_rcfg_s1_translator:uav_writedata
	wire          avl_adxcfg_1_rcfg_s1_agent_m0_write;                                   // avl_adxcfg_1_rcfg_s1_agent:m0_write -> avl_adxcfg_1_rcfg_s1_translator:uav_write
	wire    [2:0] avl_adxcfg_1_rcfg_s1_agent_m0_burstcount;                              // avl_adxcfg_1_rcfg_s1_agent:m0_burstcount -> avl_adxcfg_1_rcfg_s1_translator:uav_burstcount
	wire          avl_adxcfg_1_rcfg_s1_agent_rf_source_valid;                            // avl_adxcfg_1_rcfg_s1_agent:rf_source_valid -> avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_1_rcfg_s1_agent_rf_source_data;                             // avl_adxcfg_1_rcfg_s1_agent:rf_source_data -> avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:in_data
	wire          avl_adxcfg_1_rcfg_s1_agent_rf_source_ready;                            // avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:in_ready -> avl_adxcfg_1_rcfg_s1_agent:rf_source_ready
	wire          avl_adxcfg_1_rcfg_s1_agent_rf_source_startofpacket;                    // avl_adxcfg_1_rcfg_s1_agent:rf_source_startofpacket -> avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rf_source_endofpacket;                      // avl_adxcfg_1_rcfg_s1_agent:rf_source_endofpacket -> avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_valid;                         // avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:out_valid -> avl_adxcfg_1_rcfg_s1_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_data;                          // avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:out_data -> avl_adxcfg_1_rcfg_s1_agent:rf_sink_data
	wire          avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_ready;                         // avl_adxcfg_1_rcfg_s1_agent:rf_sink_ready -> avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_1_rcfg_s1_agent:rf_sink_startofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_1_rcfg_s1_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_1_rcfg_s1_agent:rf_sink_endofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_valid;                       // avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_src_valid -> avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_data;                        // avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_src_data -> avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:in_data
	wire          avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_ready;                       // avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:in_ready -> avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_2_rcfg_s1_agent_m0_readdata;                                // avl_adxcfg_2_rcfg_s1_translator:uav_readdata -> avl_adxcfg_2_rcfg_s1_agent:m0_readdata
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_waitrequest;                             // avl_adxcfg_2_rcfg_s1_translator:uav_waitrequest -> avl_adxcfg_2_rcfg_s1_agent:m0_waitrequest
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_debugaccess;                             // avl_adxcfg_2_rcfg_s1_agent:m0_debugaccess -> avl_adxcfg_2_rcfg_s1_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_2_rcfg_s1_agent_m0_address;                                 // avl_adxcfg_2_rcfg_s1_agent:m0_address -> avl_adxcfg_2_rcfg_s1_translator:uav_address
	wire    [3:0] avl_adxcfg_2_rcfg_s1_agent_m0_byteenable;                              // avl_adxcfg_2_rcfg_s1_agent:m0_byteenable -> avl_adxcfg_2_rcfg_s1_translator:uav_byteenable
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_read;                                    // avl_adxcfg_2_rcfg_s1_agent:m0_read -> avl_adxcfg_2_rcfg_s1_translator:uav_read
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_readdatavalid;                           // avl_adxcfg_2_rcfg_s1_translator:uav_readdatavalid -> avl_adxcfg_2_rcfg_s1_agent:m0_readdatavalid
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_lock;                                    // avl_adxcfg_2_rcfg_s1_agent:m0_lock -> avl_adxcfg_2_rcfg_s1_translator:uav_lock
	wire   [31:0] avl_adxcfg_2_rcfg_s1_agent_m0_writedata;                               // avl_adxcfg_2_rcfg_s1_agent:m0_writedata -> avl_adxcfg_2_rcfg_s1_translator:uav_writedata
	wire          avl_adxcfg_2_rcfg_s1_agent_m0_write;                                   // avl_adxcfg_2_rcfg_s1_agent:m0_write -> avl_adxcfg_2_rcfg_s1_translator:uav_write
	wire    [2:0] avl_adxcfg_2_rcfg_s1_agent_m0_burstcount;                              // avl_adxcfg_2_rcfg_s1_agent:m0_burstcount -> avl_adxcfg_2_rcfg_s1_translator:uav_burstcount
	wire          avl_adxcfg_2_rcfg_s1_agent_rf_source_valid;                            // avl_adxcfg_2_rcfg_s1_agent:rf_source_valid -> avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_2_rcfg_s1_agent_rf_source_data;                             // avl_adxcfg_2_rcfg_s1_agent:rf_source_data -> avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:in_data
	wire          avl_adxcfg_2_rcfg_s1_agent_rf_source_ready;                            // avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:in_ready -> avl_adxcfg_2_rcfg_s1_agent:rf_source_ready
	wire          avl_adxcfg_2_rcfg_s1_agent_rf_source_startofpacket;                    // avl_adxcfg_2_rcfg_s1_agent:rf_source_startofpacket -> avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rf_source_endofpacket;                      // avl_adxcfg_2_rcfg_s1_agent:rf_source_endofpacket -> avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_valid;                         // avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:out_valid -> avl_adxcfg_2_rcfg_s1_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_data;                          // avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:out_data -> avl_adxcfg_2_rcfg_s1_agent:rf_sink_data
	wire          avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_ready;                         // avl_adxcfg_2_rcfg_s1_agent:rf_sink_ready -> avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_2_rcfg_s1_agent:rf_sink_startofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_2_rcfg_s1_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_2_rcfg_s1_agent:rf_sink_endofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_valid;                       // avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_src_valid -> avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_data;                        // avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_src_data -> avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:in_data
	wire          avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_ready;                       // avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:in_ready -> avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] avl_adxcfg_3_rcfg_s1_agent_m0_readdata;                                // avl_adxcfg_3_rcfg_s1_translator:uav_readdata -> avl_adxcfg_3_rcfg_s1_agent:m0_readdata
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_waitrequest;                             // avl_adxcfg_3_rcfg_s1_translator:uav_waitrequest -> avl_adxcfg_3_rcfg_s1_agent:m0_waitrequest
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_debugaccess;                             // avl_adxcfg_3_rcfg_s1_agent:m0_debugaccess -> avl_adxcfg_3_rcfg_s1_translator:uav_debugaccess
	wire   [20:0] avl_adxcfg_3_rcfg_s1_agent_m0_address;                                 // avl_adxcfg_3_rcfg_s1_agent:m0_address -> avl_adxcfg_3_rcfg_s1_translator:uav_address
	wire    [3:0] avl_adxcfg_3_rcfg_s1_agent_m0_byteenable;                              // avl_adxcfg_3_rcfg_s1_agent:m0_byteenable -> avl_adxcfg_3_rcfg_s1_translator:uav_byteenable
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_read;                                    // avl_adxcfg_3_rcfg_s1_agent:m0_read -> avl_adxcfg_3_rcfg_s1_translator:uav_read
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_readdatavalid;                           // avl_adxcfg_3_rcfg_s1_translator:uav_readdatavalid -> avl_adxcfg_3_rcfg_s1_agent:m0_readdatavalid
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_lock;                                    // avl_adxcfg_3_rcfg_s1_agent:m0_lock -> avl_adxcfg_3_rcfg_s1_translator:uav_lock
	wire   [31:0] avl_adxcfg_3_rcfg_s1_agent_m0_writedata;                               // avl_adxcfg_3_rcfg_s1_agent:m0_writedata -> avl_adxcfg_3_rcfg_s1_translator:uav_writedata
	wire          avl_adxcfg_3_rcfg_s1_agent_m0_write;                                   // avl_adxcfg_3_rcfg_s1_agent:m0_write -> avl_adxcfg_3_rcfg_s1_translator:uav_write
	wire    [2:0] avl_adxcfg_3_rcfg_s1_agent_m0_burstcount;                              // avl_adxcfg_3_rcfg_s1_agent:m0_burstcount -> avl_adxcfg_3_rcfg_s1_translator:uav_burstcount
	wire          avl_adxcfg_3_rcfg_s1_agent_rf_source_valid;                            // avl_adxcfg_3_rcfg_s1_agent:rf_source_valid -> avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:in_valid
	wire  [116:0] avl_adxcfg_3_rcfg_s1_agent_rf_source_data;                             // avl_adxcfg_3_rcfg_s1_agent:rf_source_data -> avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:in_data
	wire          avl_adxcfg_3_rcfg_s1_agent_rf_source_ready;                            // avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:in_ready -> avl_adxcfg_3_rcfg_s1_agent:rf_source_ready
	wire          avl_adxcfg_3_rcfg_s1_agent_rf_source_startofpacket;                    // avl_adxcfg_3_rcfg_s1_agent:rf_source_startofpacket -> avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rf_source_endofpacket;                      // avl_adxcfg_3_rcfg_s1_agent:rf_source_endofpacket -> avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:in_endofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_valid;                         // avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:out_valid -> avl_adxcfg_3_rcfg_s1_agent:rf_sink_valid
	wire  [116:0] avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_data;                          // avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:out_data -> avl_adxcfg_3_rcfg_s1_agent:rf_sink_data
	wire          avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_ready;                         // avl_adxcfg_3_rcfg_s1_agent:rf_sink_ready -> avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:out_ready
	wire          avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_startofpacket;                 // avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:out_startofpacket -> avl_adxcfg_3_rcfg_s1_agent:rf_sink_startofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_endofpacket;                   // avl_adxcfg_3_rcfg_s1_agent_rsp_fifo:out_endofpacket -> avl_adxcfg_3_rcfg_s1_agent:rf_sink_endofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_valid;                       // avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_src_valid -> avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_data;                        // avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_src_data -> avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:in_data
	wire          avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_ready;                       // avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:in_ready -> avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_bd_s1_agent_m0_readdata;                                      // sys_gpio_bd_s1_translator:uav_readdata -> sys_gpio_bd_s1_agent:m0_readdata
	wire          sys_gpio_bd_s1_agent_m0_waitrequest;                                   // sys_gpio_bd_s1_translator:uav_waitrequest -> sys_gpio_bd_s1_agent:m0_waitrequest
	wire          sys_gpio_bd_s1_agent_m0_debugaccess;                                   // sys_gpio_bd_s1_agent:m0_debugaccess -> sys_gpio_bd_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_bd_s1_agent_m0_address;                                       // sys_gpio_bd_s1_agent:m0_address -> sys_gpio_bd_s1_translator:uav_address
	wire    [3:0] sys_gpio_bd_s1_agent_m0_byteenable;                                    // sys_gpio_bd_s1_agent:m0_byteenable -> sys_gpio_bd_s1_translator:uav_byteenable
	wire          sys_gpio_bd_s1_agent_m0_read;                                          // sys_gpio_bd_s1_agent:m0_read -> sys_gpio_bd_s1_translator:uav_read
	wire          sys_gpio_bd_s1_agent_m0_readdatavalid;                                 // sys_gpio_bd_s1_translator:uav_readdatavalid -> sys_gpio_bd_s1_agent:m0_readdatavalid
	wire          sys_gpio_bd_s1_agent_m0_lock;                                          // sys_gpio_bd_s1_agent:m0_lock -> sys_gpio_bd_s1_translator:uav_lock
	wire   [31:0] sys_gpio_bd_s1_agent_m0_writedata;                                     // sys_gpio_bd_s1_agent:m0_writedata -> sys_gpio_bd_s1_translator:uav_writedata
	wire          sys_gpio_bd_s1_agent_m0_write;                                         // sys_gpio_bd_s1_agent:m0_write -> sys_gpio_bd_s1_translator:uav_write
	wire    [2:0] sys_gpio_bd_s1_agent_m0_burstcount;                                    // sys_gpio_bd_s1_agent:m0_burstcount -> sys_gpio_bd_s1_translator:uav_burstcount
	wire          sys_gpio_bd_s1_agent_rf_source_valid;                                  // sys_gpio_bd_s1_agent:rf_source_valid -> sys_gpio_bd_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_bd_s1_agent_rf_source_data;                                   // sys_gpio_bd_s1_agent:rf_source_data -> sys_gpio_bd_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_bd_s1_agent_rf_source_ready;                                  // sys_gpio_bd_s1_agent_rsp_fifo:in_ready -> sys_gpio_bd_s1_agent:rf_source_ready
	wire          sys_gpio_bd_s1_agent_rf_source_startofpacket;                          // sys_gpio_bd_s1_agent:rf_source_startofpacket -> sys_gpio_bd_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_bd_s1_agent_rf_source_endofpacket;                            // sys_gpio_bd_s1_agent:rf_source_endofpacket -> sys_gpio_bd_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_valid;                               // sys_gpio_bd_s1_agent_rsp_fifo:out_valid -> sys_gpio_bd_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_bd_s1_agent_rsp_fifo_out_data;                                // sys_gpio_bd_s1_agent_rsp_fifo:out_data -> sys_gpio_bd_s1_agent:rf_sink_data
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_ready;                               // sys_gpio_bd_s1_agent:rf_sink_ready -> sys_gpio_bd_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket;                       // sys_gpio_bd_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_bd_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket;                         // sys_gpio_bd_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_bd_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_bd_s1_agent_rdata_fifo_src_valid;                             // sys_gpio_bd_s1_agent:rdata_fifo_src_valid -> sys_gpio_bd_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_bd_s1_agent_rdata_fifo_src_data;                              // sys_gpio_bd_s1_agent:rdata_fifo_src_data -> sys_gpio_bd_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_bd_s1_agent_rdata_fifo_src_ready;                             // sys_gpio_bd_s1_agent_rdata_fifo:in_ready -> sys_gpio_bd_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_in_s1_agent_m0_readdata;                                      // sys_gpio_in_s1_translator:uav_readdata -> sys_gpio_in_s1_agent:m0_readdata
	wire          sys_gpio_in_s1_agent_m0_waitrequest;                                   // sys_gpio_in_s1_translator:uav_waitrequest -> sys_gpio_in_s1_agent:m0_waitrequest
	wire          sys_gpio_in_s1_agent_m0_debugaccess;                                   // sys_gpio_in_s1_agent:m0_debugaccess -> sys_gpio_in_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_in_s1_agent_m0_address;                                       // sys_gpio_in_s1_agent:m0_address -> sys_gpio_in_s1_translator:uav_address
	wire    [3:0] sys_gpio_in_s1_agent_m0_byteenable;                                    // sys_gpio_in_s1_agent:m0_byteenable -> sys_gpio_in_s1_translator:uav_byteenable
	wire          sys_gpio_in_s1_agent_m0_read;                                          // sys_gpio_in_s1_agent:m0_read -> sys_gpio_in_s1_translator:uav_read
	wire          sys_gpio_in_s1_agent_m0_readdatavalid;                                 // sys_gpio_in_s1_translator:uav_readdatavalid -> sys_gpio_in_s1_agent:m0_readdatavalid
	wire          sys_gpio_in_s1_agent_m0_lock;                                          // sys_gpio_in_s1_agent:m0_lock -> sys_gpio_in_s1_translator:uav_lock
	wire   [31:0] sys_gpio_in_s1_agent_m0_writedata;                                     // sys_gpio_in_s1_agent:m0_writedata -> sys_gpio_in_s1_translator:uav_writedata
	wire          sys_gpio_in_s1_agent_m0_write;                                         // sys_gpio_in_s1_agent:m0_write -> sys_gpio_in_s1_translator:uav_write
	wire    [2:0] sys_gpio_in_s1_agent_m0_burstcount;                                    // sys_gpio_in_s1_agent:m0_burstcount -> sys_gpio_in_s1_translator:uav_burstcount
	wire          sys_gpio_in_s1_agent_rf_source_valid;                                  // sys_gpio_in_s1_agent:rf_source_valid -> sys_gpio_in_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_in_s1_agent_rf_source_data;                                   // sys_gpio_in_s1_agent:rf_source_data -> sys_gpio_in_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_in_s1_agent_rf_source_ready;                                  // sys_gpio_in_s1_agent_rsp_fifo:in_ready -> sys_gpio_in_s1_agent:rf_source_ready
	wire          sys_gpio_in_s1_agent_rf_source_startofpacket;                          // sys_gpio_in_s1_agent:rf_source_startofpacket -> sys_gpio_in_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_in_s1_agent_rf_source_endofpacket;                            // sys_gpio_in_s1_agent:rf_source_endofpacket -> sys_gpio_in_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_valid;                               // sys_gpio_in_s1_agent_rsp_fifo:out_valid -> sys_gpio_in_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_in_s1_agent_rsp_fifo_out_data;                                // sys_gpio_in_s1_agent_rsp_fifo:out_data -> sys_gpio_in_s1_agent:rf_sink_data
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_ready;                               // sys_gpio_in_s1_agent:rf_sink_ready -> sys_gpio_in_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket;                       // sys_gpio_in_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_in_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket;                         // sys_gpio_in_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_in_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_in_s1_agent_rdata_fifo_src_valid;                             // sys_gpio_in_s1_agent:rdata_fifo_src_valid -> sys_gpio_in_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_in_s1_agent_rdata_fifo_src_data;                              // sys_gpio_in_s1_agent:rdata_fifo_src_data -> sys_gpio_in_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_in_s1_agent_rdata_fifo_src_ready;                             // sys_gpio_in_s1_agent_rdata_fifo:in_ready -> sys_gpio_in_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_gpio_out_s1_agent_m0_readdata;                                     // sys_gpio_out_s1_translator:uav_readdata -> sys_gpio_out_s1_agent:m0_readdata
	wire          sys_gpio_out_s1_agent_m0_waitrequest;                                  // sys_gpio_out_s1_translator:uav_waitrequest -> sys_gpio_out_s1_agent:m0_waitrequest
	wire          sys_gpio_out_s1_agent_m0_debugaccess;                                  // sys_gpio_out_s1_agent:m0_debugaccess -> sys_gpio_out_s1_translator:uav_debugaccess
	wire   [20:0] sys_gpio_out_s1_agent_m0_address;                                      // sys_gpio_out_s1_agent:m0_address -> sys_gpio_out_s1_translator:uav_address
	wire    [3:0] sys_gpio_out_s1_agent_m0_byteenable;                                   // sys_gpio_out_s1_agent:m0_byteenable -> sys_gpio_out_s1_translator:uav_byteenable
	wire          sys_gpio_out_s1_agent_m0_read;                                         // sys_gpio_out_s1_agent:m0_read -> sys_gpio_out_s1_translator:uav_read
	wire          sys_gpio_out_s1_agent_m0_readdatavalid;                                // sys_gpio_out_s1_translator:uav_readdatavalid -> sys_gpio_out_s1_agent:m0_readdatavalid
	wire          sys_gpio_out_s1_agent_m0_lock;                                         // sys_gpio_out_s1_agent:m0_lock -> sys_gpio_out_s1_translator:uav_lock
	wire   [31:0] sys_gpio_out_s1_agent_m0_writedata;                                    // sys_gpio_out_s1_agent:m0_writedata -> sys_gpio_out_s1_translator:uav_writedata
	wire          sys_gpio_out_s1_agent_m0_write;                                        // sys_gpio_out_s1_agent:m0_write -> sys_gpio_out_s1_translator:uav_write
	wire    [2:0] sys_gpio_out_s1_agent_m0_burstcount;                                   // sys_gpio_out_s1_agent:m0_burstcount -> sys_gpio_out_s1_translator:uav_burstcount
	wire          sys_gpio_out_s1_agent_rf_source_valid;                                 // sys_gpio_out_s1_agent:rf_source_valid -> sys_gpio_out_s1_agent_rsp_fifo:in_valid
	wire  [116:0] sys_gpio_out_s1_agent_rf_source_data;                                  // sys_gpio_out_s1_agent:rf_source_data -> sys_gpio_out_s1_agent_rsp_fifo:in_data
	wire          sys_gpio_out_s1_agent_rf_source_ready;                                 // sys_gpio_out_s1_agent_rsp_fifo:in_ready -> sys_gpio_out_s1_agent:rf_source_ready
	wire          sys_gpio_out_s1_agent_rf_source_startofpacket;                         // sys_gpio_out_s1_agent:rf_source_startofpacket -> sys_gpio_out_s1_agent_rsp_fifo:in_startofpacket
	wire          sys_gpio_out_s1_agent_rf_source_endofpacket;                           // sys_gpio_out_s1_agent:rf_source_endofpacket -> sys_gpio_out_s1_agent_rsp_fifo:in_endofpacket
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_valid;                              // sys_gpio_out_s1_agent_rsp_fifo:out_valid -> sys_gpio_out_s1_agent:rf_sink_valid
	wire  [116:0] sys_gpio_out_s1_agent_rsp_fifo_out_data;                               // sys_gpio_out_s1_agent_rsp_fifo:out_data -> sys_gpio_out_s1_agent:rf_sink_data
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_ready;                              // sys_gpio_out_s1_agent:rf_sink_ready -> sys_gpio_out_s1_agent_rsp_fifo:out_ready
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket;                      // sys_gpio_out_s1_agent_rsp_fifo:out_startofpacket -> sys_gpio_out_s1_agent:rf_sink_startofpacket
	wire          sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket;                        // sys_gpio_out_s1_agent_rsp_fifo:out_endofpacket -> sys_gpio_out_s1_agent:rf_sink_endofpacket
	wire          sys_gpio_out_s1_agent_rdata_fifo_src_valid;                            // sys_gpio_out_s1_agent:rdata_fifo_src_valid -> sys_gpio_out_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sys_gpio_out_s1_agent_rdata_fifo_src_data;                             // sys_gpio_out_s1_agent:rdata_fifo_src_data -> sys_gpio_out_s1_agent_rdata_fifo:in_data
	wire          sys_gpio_out_s1_agent_rdata_fifo_src_ready;                            // sys_gpio_out_s1_agent_rdata_fifo:in_ready -> sys_gpio_out_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sys_spi_spi_control_port_agent_m0_readdata;                            // sys_spi_spi_control_port_translator:uav_readdata -> sys_spi_spi_control_port_agent:m0_readdata
	wire          sys_spi_spi_control_port_agent_m0_waitrequest;                         // sys_spi_spi_control_port_translator:uav_waitrequest -> sys_spi_spi_control_port_agent:m0_waitrequest
	wire          sys_spi_spi_control_port_agent_m0_debugaccess;                         // sys_spi_spi_control_port_agent:m0_debugaccess -> sys_spi_spi_control_port_translator:uav_debugaccess
	wire   [20:0] sys_spi_spi_control_port_agent_m0_address;                             // sys_spi_spi_control_port_agent:m0_address -> sys_spi_spi_control_port_translator:uav_address
	wire    [3:0] sys_spi_spi_control_port_agent_m0_byteenable;                          // sys_spi_spi_control_port_agent:m0_byteenable -> sys_spi_spi_control_port_translator:uav_byteenable
	wire          sys_spi_spi_control_port_agent_m0_read;                                // sys_spi_spi_control_port_agent:m0_read -> sys_spi_spi_control_port_translator:uav_read
	wire          sys_spi_spi_control_port_agent_m0_readdatavalid;                       // sys_spi_spi_control_port_translator:uav_readdatavalid -> sys_spi_spi_control_port_agent:m0_readdatavalid
	wire          sys_spi_spi_control_port_agent_m0_lock;                                // sys_spi_spi_control_port_agent:m0_lock -> sys_spi_spi_control_port_translator:uav_lock
	wire   [31:0] sys_spi_spi_control_port_agent_m0_writedata;                           // sys_spi_spi_control_port_agent:m0_writedata -> sys_spi_spi_control_port_translator:uav_writedata
	wire          sys_spi_spi_control_port_agent_m0_write;                               // sys_spi_spi_control_port_agent:m0_write -> sys_spi_spi_control_port_translator:uav_write
	wire    [2:0] sys_spi_spi_control_port_agent_m0_burstcount;                          // sys_spi_spi_control_port_agent:m0_burstcount -> sys_spi_spi_control_port_translator:uav_burstcount
	wire          sys_spi_spi_control_port_agent_rf_source_valid;                        // sys_spi_spi_control_port_agent:rf_source_valid -> sys_spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [116:0] sys_spi_spi_control_port_agent_rf_source_data;                         // sys_spi_spi_control_port_agent:rf_source_data -> sys_spi_spi_control_port_agent_rsp_fifo:in_data
	wire          sys_spi_spi_control_port_agent_rf_source_ready;                        // sys_spi_spi_control_port_agent_rsp_fifo:in_ready -> sys_spi_spi_control_port_agent:rf_source_ready
	wire          sys_spi_spi_control_port_agent_rf_source_startofpacket;                // sys_spi_spi_control_port_agent:rf_source_startofpacket -> sys_spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          sys_spi_spi_control_port_agent_rf_source_endofpacket;                  // sys_spi_spi_control_port_agent:rf_source_endofpacket -> sys_spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          sys_spi_spi_control_port_agent_rsp_fifo_out_valid;                     // sys_spi_spi_control_port_agent_rsp_fifo:out_valid -> sys_spi_spi_control_port_agent:rf_sink_valid
	wire  [116:0] sys_spi_spi_control_port_agent_rsp_fifo_out_data;                      // sys_spi_spi_control_port_agent_rsp_fifo:out_data -> sys_spi_spi_control_port_agent:rf_sink_data
	wire          sys_spi_spi_control_port_agent_rsp_fifo_out_ready;                     // sys_spi_spi_control_port_agent:rf_sink_ready -> sys_spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          sys_spi_spi_control_port_agent_rsp_fifo_out_startofpacket;             // sys_spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> sys_spi_spi_control_port_agent:rf_sink_startofpacket
	wire          sys_spi_spi_control_port_agent_rsp_fifo_out_endofpacket;               // sys_spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> sys_spi_spi_control_port_agent:rf_sink_endofpacket
	wire          sys_spi_spi_control_port_agent_rdata_fifo_src_valid;                   // sys_spi_spi_control_port_agent:rdata_fifo_src_valid -> sys_spi_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] sys_spi_spi_control_port_agent_rdata_fifo_src_data;                    // sys_spi_spi_control_port_agent:rdata_fifo_src_data -> sys_spi_spi_control_port_agent_rdata_fifo:in_data
	wire          sys_spi_spi_control_port_agent_rdata_fifo_src_ready;                   // sys_spi_spi_control_port_agent_rdata_fifo:in_ready -> sys_spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_valid;                        // sys_hps_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_agent_write_cp_data;                         // sys_hps_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_ready;                        // router:sink_ready -> sys_hps_h2f_lw_axi_master_agent:write_cp_ready
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                // sys_hps_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                  // sys_hps_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_valid;                         // sys_hps_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_agent_read_cp_data;                          // sys_hps_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_ready;                         // router_001:sink_ready -> sys_hps_h2f_lw_axi_master_agent:read_cp_ready
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                 // sys_hps_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                   // sys_hps_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_002_src_data;                                                   // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire   [30:0] router_002_src_channel;                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_003_src_data;                                                   // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                  // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [30:0] router_003_src_channel;                                                // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                  // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_004_src_data;                                                   // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                  // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [30:0] router_004_src_channel;                                                // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                          // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                            // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                  // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_005_src_data;                                                   // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                  // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [30:0] router_005_src_channel;                                                // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                          // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                            // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                  // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_006_src_data;                                                   // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                  // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [30:0] router_006_src_channel;                                                // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                          // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                            // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                  // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_007_src_data;                                                   // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                  // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [30:0] router_007_src_channel;                                                // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                          // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                            // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                                  // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_008_src_data;                                                   // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                  // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [30:0] router_008_src_channel;                                                // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                          // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                            // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                                  // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [115:0] router_009_src_data;                                                   // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                  // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [30:0] router_009_src_channel;                                                // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                          // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                            // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                                  // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [115:0] router_010_src_data;                                                   // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                  // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [30:0] router_010_src_channel;                                                // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                          // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                            // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                                  // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [115:0] router_011_src_data;                                                   // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                  // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [30:0] router_011_src_channel;                                                // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                          // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                            // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                                  // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [115:0] router_012_src_data;                                                   // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                  // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [30:0] router_012_src_channel;                                                // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                          // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                            // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                                  // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [115:0] router_013_src_data;                                                   // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                  // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [30:0] router_013_src_channel;                                                // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                          // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                            // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                                  // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [115:0] router_014_src_data;                                                   // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                  // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [30:0] router_014_src_channel;                                                // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                          // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                            // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                                  // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [115:0] router_015_src_data;                                                   // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                  // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [30:0] router_015_src_channel;                                                // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                          // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                            // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                                  // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [115:0] router_016_src_data;                                                   // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                  // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [30:0] router_016_src_channel;                                                // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                          // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                            // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                                  // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [115:0] router_017_src_data;                                                   // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                  // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [30:0] router_017_src_channel;                                                // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                          // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                            // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                                  // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [115:0] router_018_src_data;                                                   // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                  // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [30:0] router_018_src_channel;                                                // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                          // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                            // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_019_src_valid;                                                  // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [115:0] router_019_src_data;                                                   // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                  // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [30:0] router_019_src_channel;                                                // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                          // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                            // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_020_src_valid;                                                  // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [115:0] router_020_src_data;                                                   // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                  // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [30:0] router_020_src_channel;                                                // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                          // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                            // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_021_src_valid;                                                  // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [115:0] router_021_src_data;                                                   // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                  // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [30:0] router_021_src_channel;                                                // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                          // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                            // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_022_src_valid;                                                  // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [115:0] router_022_src_data;                                                   // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                  // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [30:0] router_022_src_channel;                                                // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                          // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                            // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_023_src_valid;                                                  // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [115:0] router_023_src_data;                                                   // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                  // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [30:0] router_023_src_channel;                                                // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                          // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                            // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_024_src_valid;                                                  // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [115:0] router_024_src_data;                                                   // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                  // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [30:0] router_024_src_channel;                                                // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                          // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                            // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          router_025_src_valid;                                                  // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [115:0] router_025_src_data;                                                   // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                  // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [30:0] router_025_src_channel;                                                // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                          // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                            // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_026_src_valid;                                                  // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [115:0] router_026_src_data;                                                   // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                  // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [30:0] router_026_src_channel;                                                // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                          // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                            // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          router_027_src_valid;                                                  // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [115:0] router_027_src_data;                                                   // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                  // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [30:0] router_027_src_channel;                                                // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                          // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                            // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          router_028_src_valid;                                                  // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [115:0] router_028_src_data;                                                   // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                  // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [30:0] router_028_src_channel;                                                // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                          // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                            // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_029_src_valid;                                                  // router_029:src_valid -> rsp_demux_027:sink_valid
	wire  [115:0] router_029_src_data;                                                   // router_029:src_data -> rsp_demux_027:sink_data
	wire          router_029_src_ready;                                                  // rsp_demux_027:sink_ready -> router_029:src_ready
	wire   [30:0] router_029_src_channel;                                                // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_startofpacket;                                          // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_029_src_endofpacket;                                            // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          router_030_src_valid;                                                  // router_030:src_valid -> rsp_demux_028:sink_valid
	wire  [115:0] router_030_src_data;                                                   // router_030:src_data -> rsp_demux_028:sink_data
	wire          router_030_src_ready;                                                  // rsp_demux_028:sink_ready -> router_030:src_ready
	wire   [30:0] router_030_src_channel;                                                // router_030:src_channel -> rsp_demux_028:sink_channel
	wire          router_030_src_startofpacket;                                          // router_030:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_030_src_endofpacket;                                            // router_030:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          router_031_src_valid;                                                  // router_031:src_valid -> rsp_demux_029:sink_valid
	wire  [115:0] router_031_src_data;                                                   // router_031:src_data -> rsp_demux_029:sink_data
	wire          router_031_src_ready;                                                  // rsp_demux_029:sink_ready -> router_031:src_ready
	wire   [30:0] router_031_src_channel;                                                // router_031:src_channel -> rsp_demux_029:sink_channel
	wire          router_031_src_startofpacket;                                          // router_031:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_031_src_endofpacket;                                            // router_031:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          router_032_src_valid;                                                  // router_032:src_valid -> rsp_demux_030:sink_valid
	wire  [115:0] router_032_src_data;                                                   // router_032:src_data -> rsp_demux_030:sink_data
	wire          router_032_src_ready;                                                  // rsp_demux_030:sink_ready -> router_032:src_ready
	wire   [30:0] router_032_src_channel;                                                // router_032:src_channel -> rsp_demux_030:sink_channel
	wire          router_032_src_startofpacket;                                          // router_032:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_032_src_endofpacket;                                            // router_032:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [115:0] router_src_data;                                                       // router:src_data -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                      // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [30:0] router_src_channel;                                                    // router:src_channel -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                    // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> sys_hps_h2f_lw_axi_master_agent:write_rp_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                     // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_data -> sys_hps_h2f_lw_axi_master_agent:write_rp_data
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                    // sys_hps_h2f_lw_axi_master_agent:write_rp_ready -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [30:0] sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                  // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> sys_hps_h2f_lw_axi_master_agent:write_rp_channel
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;            // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> sys_hps_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;              // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> sys_hps_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [115:0] router_001_src_data;                                                   // router_001:src_data -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                  // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [30:0] router_001_src_channel;                                                // router_001:src_channel -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                    // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> sys_hps_h2f_lw_axi_master_agent:read_rp_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                     // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_data -> sys_hps_h2f_lw_axi_master_agent:read_rp_data
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                    // sys_hps_h2f_lw_axi_master_agent:read_rp_ready -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [30:0] sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                  // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> sys_hps_h2f_lw_axi_master_agent:read_rp_channel
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;            // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> sys_hps_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;              // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> sys_hps_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> ad9144_jesd204_link_management_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> ad9144_jesd204_link_management_wr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                     // ad9144_jesd204_link_management_wr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [30:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> ad9144_jesd204_link_management_wr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> ad9144_jesd204_link_management_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> ad9144_jesd204_link_management_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                 // cmd_mux_001:src_valid -> ad9144_jesd204_link_management_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_001_src_data;                                                  // cmd_mux_001:src_data -> ad9144_jesd204_link_management_rd_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                 // ad9144_jesd204_link_management_rd_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [30:0] cmd_mux_001_src_channel;                                               // cmd_mux_001:src_channel -> ad9144_jesd204_link_management_rd_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                         // cmd_mux_001:src_startofpacket -> ad9144_jesd204_link_management_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                           // cmd_mux_001:src_endofpacket -> ad9144_jesd204_link_management_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                 // cmd_mux_002:src_valid -> ad9680_jesd204_link_management_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_002_src_data;                                                  // cmd_mux_002:src_data -> ad9680_jesd204_link_management_wr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                 // ad9680_jesd204_link_management_wr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [30:0] cmd_mux_002_src_channel;                                               // cmd_mux_002:src_channel -> ad9680_jesd204_link_management_wr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                         // cmd_mux_002:src_startofpacket -> ad9680_jesd204_link_management_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                           // cmd_mux_002:src_endofpacket -> ad9680_jesd204_link_management_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                 // cmd_mux_003:src_valid -> ad9680_jesd204_link_management_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_003_src_data;                                                  // cmd_mux_003:src_data -> ad9680_jesd204_link_management_rd_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                 // ad9680_jesd204_link_management_rd_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [30:0] cmd_mux_003_src_channel;                                               // cmd_mux_003:src_channel -> ad9680_jesd204_link_management_rd_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                         // cmd_mux_003:src_startofpacket -> ad9680_jesd204_link_management_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                           // cmd_mux_003:src_endofpacket -> ad9680_jesd204_link_management_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                 // cmd_mux_004:src_valid -> ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_004_src_data;                                                  // cmd_mux_004:src_data -> ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                 // ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [30:0] cmd_mux_004_src_channel;                                               // cmd_mux_004:src_channel -> ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                         // cmd_mux_004:src_startofpacket -> ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                           // cmd_mux_004:src_endofpacket -> ad9144_jesd204_link_reconfig_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                 // cmd_mux_005:src_valid -> ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_005_src_data;                                                  // cmd_mux_005:src_data -> ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                 // ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [30:0] cmd_mux_005_src_channel;                                               // cmd_mux_005:src_channel -> ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                         // cmd_mux_005:src_startofpacket -> ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                           // cmd_mux_005:src_endofpacket -> ad9144_jesd204_link_reconfig_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                 // cmd_mux_006:src_valid -> ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_006_src_data;                                                  // cmd_mux_006:src_data -> ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                 // ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [30:0] cmd_mux_006_src_channel;                                               // cmd_mux_006:src_channel -> ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                         // cmd_mux_006:src_startofpacket -> ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                           // cmd_mux_006:src_endofpacket -> ad9680_jesd204_link_reconfig_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                 // cmd_mux_007:src_valid -> ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_007_src_data;                                                  // cmd_mux_007:src_data -> ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                 // ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [30:0] cmd_mux_007_src_channel;                                               // cmd_mux_007:src_channel -> ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                         // cmd_mux_007:src_startofpacket -> ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                           // cmd_mux_007:src_endofpacket -> ad9680_jesd204_link_reconfig_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                                 // cmd_mux_008:src_valid -> axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_008_src_data;                                                  // cmd_mux_008:src_data -> axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                 // axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [30:0] cmd_mux_008_src_channel;                                               // cmd_mux_008:src_channel -> axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                         // cmd_mux_008:src_startofpacket -> axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                           // cmd_mux_008:src_endofpacket -> axi_ad9144_dma_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                 // cmd_mux_009:src_valid -> axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_009_src_data;                                                  // cmd_mux_009:src_data -> axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                 // axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [30:0] cmd_mux_009_src_channel;                                               // cmd_mux_009:src_channel -> axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                         // cmd_mux_009:src_startofpacket -> axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                           // cmd_mux_009:src_endofpacket -> axi_ad9144_dma_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                                 // cmd_mux_010:src_valid -> axi_ad9144_core_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_010_src_data;                                                  // cmd_mux_010:src_data -> axi_ad9144_core_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                 // axi_ad9144_core_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [30:0] cmd_mux_010_src_channel;                                               // cmd_mux_010:src_channel -> axi_ad9144_core_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                         // cmd_mux_010:src_startofpacket -> axi_ad9144_core_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                           // cmd_mux_010:src_endofpacket -> axi_ad9144_core_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                                 // cmd_mux_011:src_valid -> axi_ad9144_core_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_011_src_data;                                                  // cmd_mux_011:src_data -> axi_ad9144_core_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                 // axi_ad9144_core_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [30:0] cmd_mux_011_src_channel;                                               // cmd_mux_011:src_channel -> axi_ad9144_core_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                         // cmd_mux_011:src_startofpacket -> axi_ad9144_core_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                           // cmd_mux_011:src_endofpacket -> axi_ad9144_core_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                                 // cmd_mux_012:src_valid -> axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_012_src_data;                                                  // cmd_mux_012:src_data -> axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                 // axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [30:0] cmd_mux_012_src_channel;                                               // cmd_mux_012:src_channel -> axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                         // cmd_mux_012:src_startofpacket -> axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                           // cmd_mux_012:src_endofpacket -> axi_ad9680_dma_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                                 // cmd_mux_013:src_valid -> axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_013_src_data;                                                  // cmd_mux_013:src_data -> axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                 // axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [30:0] cmd_mux_013_src_channel;                                               // cmd_mux_013:src_channel -> axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                         // cmd_mux_013:src_startofpacket -> axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                           // cmd_mux_013:src_endofpacket -> axi_ad9680_dma_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                                 // cmd_mux_014:src_valid -> axi_ad9680_core_s_axi_wr_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_014_src_data;                                                  // cmd_mux_014:src_data -> axi_ad9680_core_s_axi_wr_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                 // axi_ad9680_core_s_axi_wr_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [30:0] cmd_mux_014_src_channel;                                               // cmd_mux_014:src_channel -> axi_ad9680_core_s_axi_wr_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                         // cmd_mux_014:src_startofpacket -> axi_ad9680_core_s_axi_wr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                           // cmd_mux_014:src_endofpacket -> axi_ad9680_core_s_axi_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                                 // cmd_mux_015:src_valid -> axi_ad9680_core_s_axi_rd_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_015_src_data;                                                  // cmd_mux_015:src_data -> axi_ad9680_core_s_axi_rd_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                 // axi_ad9680_core_s_axi_rd_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [30:0] cmd_mux_015_src_channel;                                               // cmd_mux_015:src_channel -> axi_ad9680_core_s_axi_rd_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                         // cmd_mux_015:src_startofpacket -> axi_ad9680_core_s_axi_rd_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                           // cmd_mux_015:src_endofpacket -> axi_ad9680_core_s_axi_rd_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                                 // cmd_mux_016:src_valid -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_016_src_data;                                                  // cmd_mux_016:src_data -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                 // ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [30:0] cmd_mux_016_src_channel;                                               // cmd_mux_016:src_channel -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                         // cmd_mux_016:src_startofpacket -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                           // cmd_mux_016:src_endofpacket -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                 // cmd_mux_017:src_valid -> ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_017_src_data;                                                  // cmd_mux_017:src_data -> ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                 // ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [30:0] cmd_mux_017_src_channel;                                               // cmd_mux_017:src_channel -> ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                         // cmd_mux_017:src_startofpacket -> ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                           // cmd_mux_017:src_endofpacket -> ad9144_jesd204_link_pll_reconfig_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                                 // cmd_mux_018:src_valid -> ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_018_src_data;                                                  // cmd_mux_018:src_data -> ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                 // ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [30:0] cmd_mux_018_src_channel;                                               // cmd_mux_018:src_channel -> ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                         // cmd_mux_018:src_startofpacket -> ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                           // cmd_mux_018:src_endofpacket -> ad9680_jesd204_link_pll_reconfig_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                                 // cmd_mux_019:src_valid -> avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_019_src_data;                                                  // cmd_mux_019:src_data -> avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                 // avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [30:0] cmd_mux_019_src_channel;                                               // cmd_mux_019:src_channel -> avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                         // cmd_mux_019:src_startofpacket -> avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                           // cmd_mux_019:src_endofpacket -> avl_adxcfg_0_rcfg_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_020_src_valid;                                                 // cmd_mux_020:src_valid -> avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_020_src_data;                                                  // cmd_mux_020:src_data -> avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                 // avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [30:0] cmd_mux_020_src_channel;                                               // cmd_mux_020:src_channel -> avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                         // cmd_mux_020:src_startofpacket -> avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                           // cmd_mux_020:src_endofpacket -> avl_adxcfg_1_rcfg_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_021_src_valid;                                                 // cmd_mux_021:src_valid -> avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_021_src_data;                                                  // cmd_mux_021:src_data -> avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                 // avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [30:0] cmd_mux_021_src_channel;                                               // cmd_mux_021:src_channel -> avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                         // cmd_mux_021:src_startofpacket -> avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                           // cmd_mux_021:src_endofpacket -> avl_adxcfg_2_rcfg_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_022_src_valid;                                                 // cmd_mux_022:src_valid -> avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_022_src_data;                                                  // cmd_mux_022:src_data -> avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                 // avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [30:0] cmd_mux_022_src_channel;                                               // cmd_mux_022:src_channel -> avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                         // cmd_mux_022:src_startofpacket -> avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                           // cmd_mux_022:src_endofpacket -> avl_adxcfg_3_rcfg_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_023_src_valid;                                                 // cmd_mux_023:src_valid -> avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_023_src_data;                                                  // cmd_mux_023:src_data -> avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                 // avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [30:0] cmd_mux_023_src_channel;                                               // cmd_mux_023:src_channel -> avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                         // cmd_mux_023:src_startofpacket -> avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                           // cmd_mux_023:src_endofpacket -> avl_adxcfg_0_rcfg_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_024_src_valid;                                                 // cmd_mux_024:src_valid -> avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_024_src_data;                                                  // cmd_mux_024:src_data -> avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_data
	wire          cmd_mux_024_src_ready;                                                 // avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire   [30:0] cmd_mux_024_src_channel;                                               // cmd_mux_024:src_channel -> avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_startofpacket;                                         // cmd_mux_024:src_startofpacket -> avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                           // cmd_mux_024:src_endofpacket -> avl_adxcfg_1_rcfg_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_025_src_valid;                                                 // cmd_mux_025:src_valid -> avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_025_src_data;                                                  // cmd_mux_025:src_data -> avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                 // avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [30:0] cmd_mux_025_src_channel;                                               // cmd_mux_025:src_channel -> avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                         // cmd_mux_025:src_startofpacket -> avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                           // cmd_mux_025:src_endofpacket -> avl_adxcfg_2_rcfg_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_026_src_valid;                                                 // cmd_mux_026:src_valid -> avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_026_src_data;                                                  // cmd_mux_026:src_data -> avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                 // avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [30:0] cmd_mux_026_src_channel;                                               // cmd_mux_026:src_channel -> avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                         // cmd_mux_026:src_startofpacket -> avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                           // cmd_mux_026:src_endofpacket -> avl_adxcfg_3_rcfg_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_027_src_valid;                                                 // cmd_mux_027:src_valid -> sys_gpio_bd_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_027_src_data;                                                  // cmd_mux_027:src_data -> sys_gpio_bd_s1_burst_adapter:sink0_data
	wire          cmd_mux_027_src_ready;                                                 // sys_gpio_bd_s1_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire   [30:0] cmd_mux_027_src_channel;                                               // cmd_mux_027:src_channel -> sys_gpio_bd_s1_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_startofpacket;                                         // cmd_mux_027:src_startofpacket -> sys_gpio_bd_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                           // cmd_mux_027:src_endofpacket -> sys_gpio_bd_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_028_src_valid;                                                 // cmd_mux_028:src_valid -> sys_gpio_in_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_028_src_data;                                                  // cmd_mux_028:src_data -> sys_gpio_in_s1_burst_adapter:sink0_data
	wire          cmd_mux_028_src_ready;                                                 // sys_gpio_in_s1_burst_adapter:sink0_ready -> cmd_mux_028:src_ready
	wire   [30:0] cmd_mux_028_src_channel;                                               // cmd_mux_028:src_channel -> sys_gpio_in_s1_burst_adapter:sink0_channel
	wire          cmd_mux_028_src_startofpacket;                                         // cmd_mux_028:src_startofpacket -> sys_gpio_in_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                           // cmd_mux_028:src_endofpacket -> sys_gpio_in_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_029_src_valid;                                                 // cmd_mux_029:src_valid -> sys_gpio_out_s1_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_029_src_data;                                                  // cmd_mux_029:src_data -> sys_gpio_out_s1_burst_adapter:sink0_data
	wire          cmd_mux_029_src_ready;                                                 // sys_gpio_out_s1_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire   [30:0] cmd_mux_029_src_channel;                                               // cmd_mux_029:src_channel -> sys_gpio_out_s1_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_startofpacket;                                         // cmd_mux_029:src_startofpacket -> sys_gpio_out_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                           // cmd_mux_029:src_endofpacket -> sys_gpio_out_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_030_src_valid;                                                 // cmd_mux_030:src_valid -> sys_spi_spi_control_port_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_030_src_data;                                                  // cmd_mux_030:src_data -> sys_spi_spi_control_port_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                 // sys_spi_spi_control_port_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [30:0] cmd_mux_030_src_channel;                                               // cmd_mux_030:src_channel -> sys_spi_spi_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                         // cmd_mux_030:src_startofpacket -> sys_spi_spi_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                           // cmd_mux_030:src_endofpacket -> sys_spi_spi_control_port_burst_adapter:sink0_endofpacket
	wire    [0:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid;                    // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                     // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                    // limiter_pipeline:in_ready -> sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [30:0] sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                  // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;            // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;              // sys_hps_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                        // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [115:0] limiter_pipeline_source0_data;                                         // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                        // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [30:0] limiter_pipeline_source0_channel;                                      // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                  // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [115:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                     // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [30:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                    // limiter_pipeline_001:out_valid -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [115:0] limiter_pipeline_001_source0_data;                                     // limiter_pipeline_001:out_data -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                    // sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [30:0] limiter_pipeline_001_source0_channel;                                  // limiter_pipeline_001:out_channel -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                            // limiter_pipeline_001:out_startofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                              // limiter_pipeline_001:out_endofpacket -> sys_hps_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid;                    // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [115:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                     // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                    // limiter_pipeline_002:in_ready -> sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [30:0] sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                  // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;            // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;              // sys_hps_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                    // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [115:0] limiter_pipeline_002_source0_data;                                     // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                    // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire   [30:0] limiter_pipeline_002_source0_channel;                                  // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                            // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                              // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                 // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [115:0] rsp_mux_001_src_data;                                                  // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                 // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire   [30:0] rsp_mux_001_src_channel;                                               // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                         // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                           // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                    // limiter_pipeline_003:out_valid -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [115:0] limiter_pipeline_003_source0_data;                                     // limiter_pipeline_003:out_data -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                    // sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire   [30:0] limiter_pipeline_003_source0_channel;                                  // limiter_pipeline_003:out_channel -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                            // limiter_pipeline_003:out_startofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                              // limiter_pipeline_003:out_endofpacket -> sys_hps_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          ad9144_jesd204_link_management_wr_burst_adapter_source0_valid;         // ad9144_jesd204_link_management_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [115:0] ad9144_jesd204_link_management_wr_burst_adapter_source0_data;          // ad9144_jesd204_link_management_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          ad9144_jesd204_link_management_wr_burst_adapter_source0_ready;         // agent_pipeline:in_ready -> ad9144_jesd204_link_management_wr_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_link_management_wr_burst_adapter_source0_channel;       // ad9144_jesd204_link_management_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          ad9144_jesd204_link_management_wr_burst_adapter_source0_startofpacket; // ad9144_jesd204_link_management_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          ad9144_jesd204_link_management_wr_burst_adapter_source0_endofpacket;   // ad9144_jesd204_link_management_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                          // agent_pipeline:out_valid -> ad9144_jesd204_link_management_agent:write_cp_valid
	wire  [115:0] agent_pipeline_source0_data;                                           // agent_pipeline:out_data -> ad9144_jesd204_link_management_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                          // ad9144_jesd204_link_management_agent:write_cp_ready -> agent_pipeline:out_ready
	wire   [30:0] agent_pipeline_source0_channel;                                        // agent_pipeline:out_channel -> ad9144_jesd204_link_management_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                  // agent_pipeline:out_startofpacket -> ad9144_jesd204_link_management_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                    // agent_pipeline:out_endofpacket -> ad9144_jesd204_link_management_agent:write_cp_endofpacket
	wire          ad9144_jesd204_link_management_rd_burst_adapter_source0_valid;         // ad9144_jesd204_link_management_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [115:0] ad9144_jesd204_link_management_rd_burst_adapter_source0_data;          // ad9144_jesd204_link_management_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          ad9144_jesd204_link_management_rd_burst_adapter_source0_ready;         // agent_pipeline_001:in_ready -> ad9144_jesd204_link_management_rd_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_link_management_rd_burst_adapter_source0_channel;       // ad9144_jesd204_link_management_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          ad9144_jesd204_link_management_rd_burst_adapter_source0_startofpacket; // ad9144_jesd204_link_management_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          ad9144_jesd204_link_management_rd_burst_adapter_source0_endofpacket;   // ad9144_jesd204_link_management_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                      // agent_pipeline_001:out_valid -> ad9144_jesd204_link_management_agent:read_cp_valid
	wire  [115:0] agent_pipeline_001_source0_data;                                       // agent_pipeline_001:out_data -> ad9144_jesd204_link_management_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                      // ad9144_jesd204_link_management_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire   [30:0] agent_pipeline_001_source0_channel;                                    // agent_pipeline_001:out_channel -> ad9144_jesd204_link_management_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                              // agent_pipeline_001:out_startofpacket -> ad9144_jesd204_link_management_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                // agent_pipeline_001:out_endofpacket -> ad9144_jesd204_link_management_agent:read_cp_endofpacket
	wire          ad9144_jesd204_link_management_agent_write_rp_valid;                   // ad9144_jesd204_link_management_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [115:0] ad9144_jesd204_link_management_agent_write_rp_data;                    // ad9144_jesd204_link_management_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          ad9144_jesd204_link_management_agent_write_rp_ready;                   // agent_pipeline_002:in_ready -> ad9144_jesd204_link_management_agent:write_rp_ready
	wire          ad9144_jesd204_link_management_agent_write_rp_startofpacket;           // ad9144_jesd204_link_management_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          ad9144_jesd204_link_management_agent_write_rp_endofpacket;             // ad9144_jesd204_link_management_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                      // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [115:0] agent_pipeline_002_source0_data;                                       // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                                      // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                              // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          ad9144_jesd204_link_management_agent_read_rp_valid;                    // ad9144_jesd204_link_management_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [115:0] ad9144_jesd204_link_management_agent_read_rp_data;                     // ad9144_jesd204_link_management_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          ad9144_jesd204_link_management_agent_read_rp_ready;                    // agent_pipeline_003:in_ready -> ad9144_jesd204_link_management_agent:read_rp_ready
	wire          ad9144_jesd204_link_management_agent_read_rp_startofpacket;            // ad9144_jesd204_link_management_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          ad9144_jesd204_link_management_agent_read_rp_endofpacket;              // ad9144_jesd204_link_management_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                      // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [115:0] agent_pipeline_003_source0_data;                                       // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                      // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                              // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          ad9680_jesd204_link_management_wr_burst_adapter_source0_valid;         // ad9680_jesd204_link_management_wr_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [115:0] ad9680_jesd204_link_management_wr_burst_adapter_source0_data;          // ad9680_jesd204_link_management_wr_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          ad9680_jesd204_link_management_wr_burst_adapter_source0_ready;         // agent_pipeline_004:in_ready -> ad9680_jesd204_link_management_wr_burst_adapter:source0_ready
	wire   [30:0] ad9680_jesd204_link_management_wr_burst_adapter_source0_channel;       // ad9680_jesd204_link_management_wr_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          ad9680_jesd204_link_management_wr_burst_adapter_source0_startofpacket; // ad9680_jesd204_link_management_wr_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          ad9680_jesd204_link_management_wr_burst_adapter_source0_endofpacket;   // ad9680_jesd204_link_management_wr_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                      // agent_pipeline_004:out_valid -> ad9680_jesd204_link_management_agent:write_cp_valid
	wire  [115:0] agent_pipeline_004_source0_data;                                       // agent_pipeline_004:out_data -> ad9680_jesd204_link_management_agent:write_cp_data
	wire          agent_pipeline_004_source0_ready;                                      // ad9680_jesd204_link_management_agent:write_cp_ready -> agent_pipeline_004:out_ready
	wire   [30:0] agent_pipeline_004_source0_channel;                                    // agent_pipeline_004:out_channel -> ad9680_jesd204_link_management_agent:write_cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                              // agent_pipeline_004:out_startofpacket -> ad9680_jesd204_link_management_agent:write_cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                // agent_pipeline_004:out_endofpacket -> ad9680_jesd204_link_management_agent:write_cp_endofpacket
	wire          ad9680_jesd204_link_management_rd_burst_adapter_source0_valid;         // ad9680_jesd204_link_management_rd_burst_adapter:source0_valid -> agent_pipeline_005:in_valid
	wire  [115:0] ad9680_jesd204_link_management_rd_burst_adapter_source0_data;          // ad9680_jesd204_link_management_rd_burst_adapter:source0_data -> agent_pipeline_005:in_data
	wire          ad9680_jesd204_link_management_rd_burst_adapter_source0_ready;         // agent_pipeline_005:in_ready -> ad9680_jesd204_link_management_rd_burst_adapter:source0_ready
	wire   [30:0] ad9680_jesd204_link_management_rd_burst_adapter_source0_channel;       // ad9680_jesd204_link_management_rd_burst_adapter:source0_channel -> agent_pipeline_005:in_channel
	wire          ad9680_jesd204_link_management_rd_burst_adapter_source0_startofpacket; // ad9680_jesd204_link_management_rd_burst_adapter:source0_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          ad9680_jesd204_link_management_rd_burst_adapter_source0_endofpacket;   // ad9680_jesd204_link_management_rd_burst_adapter:source0_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                      // agent_pipeline_005:out_valid -> ad9680_jesd204_link_management_agent:read_cp_valid
	wire  [115:0] agent_pipeline_005_source0_data;                                       // agent_pipeline_005:out_data -> ad9680_jesd204_link_management_agent:read_cp_data
	wire          agent_pipeline_005_source0_ready;                                      // ad9680_jesd204_link_management_agent:read_cp_ready -> agent_pipeline_005:out_ready
	wire   [30:0] agent_pipeline_005_source0_channel;                                    // agent_pipeline_005:out_channel -> ad9680_jesd204_link_management_agent:read_cp_channel
	wire          agent_pipeline_005_source0_startofpacket;                              // agent_pipeline_005:out_startofpacket -> ad9680_jesd204_link_management_agent:read_cp_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                // agent_pipeline_005:out_endofpacket -> ad9680_jesd204_link_management_agent:read_cp_endofpacket
	wire          ad9680_jesd204_link_management_agent_write_rp_valid;                   // ad9680_jesd204_link_management_agent:write_rp_valid -> agent_pipeline_006:in_valid
	wire  [115:0] ad9680_jesd204_link_management_agent_write_rp_data;                    // ad9680_jesd204_link_management_agent:write_rp_data -> agent_pipeline_006:in_data
	wire          ad9680_jesd204_link_management_agent_write_rp_ready;                   // agent_pipeline_006:in_ready -> ad9680_jesd204_link_management_agent:write_rp_ready
	wire          ad9680_jesd204_link_management_agent_write_rp_startofpacket;           // ad9680_jesd204_link_management_agent:write_rp_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          ad9680_jesd204_link_management_agent_write_rp_endofpacket;             // ad9680_jesd204_link_management_agent:write_rp_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                      // agent_pipeline_006:out_valid -> router_004:sink_valid
	wire  [115:0] agent_pipeline_006_source0_data;                                       // agent_pipeline_006:out_data -> router_004:sink_data
	wire          agent_pipeline_006_source0_ready;                                      // router_004:sink_ready -> agent_pipeline_006:out_ready
	wire          agent_pipeline_006_source0_startofpacket;                              // agent_pipeline_006:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                // agent_pipeline_006:out_endofpacket -> router_004:sink_endofpacket
	wire          ad9680_jesd204_link_management_agent_read_rp_valid;                    // ad9680_jesd204_link_management_agent:read_rp_valid -> agent_pipeline_007:in_valid
	wire  [115:0] ad9680_jesd204_link_management_agent_read_rp_data;                     // ad9680_jesd204_link_management_agent:read_rp_data -> agent_pipeline_007:in_data
	wire          ad9680_jesd204_link_management_agent_read_rp_ready;                    // agent_pipeline_007:in_ready -> ad9680_jesd204_link_management_agent:read_rp_ready
	wire          ad9680_jesd204_link_management_agent_read_rp_startofpacket;            // ad9680_jesd204_link_management_agent:read_rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          ad9680_jesd204_link_management_agent_read_rp_endofpacket;              // ad9680_jesd204_link_management_agent:read_rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                      // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire  [115:0] agent_pipeline_007_source0_data;                                       // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                                      // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                              // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_valid;           // ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [115:0] ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_data;            // ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_ready;           // agent_pipeline_008:in_ready -> ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_channel;         // ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket;   // ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket;     // ad9144_jesd204_link_reconfig_wr_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                      // agent_pipeline_008:out_valid -> ad9144_jesd204_link_reconfig_agent:write_cp_valid
	wire  [115:0] agent_pipeline_008_source0_data;                                       // agent_pipeline_008:out_data -> ad9144_jesd204_link_reconfig_agent:write_cp_data
	wire          agent_pipeline_008_source0_ready;                                      // ad9144_jesd204_link_reconfig_agent:write_cp_ready -> agent_pipeline_008:out_ready
	wire   [30:0] agent_pipeline_008_source0_channel;                                    // agent_pipeline_008:out_channel -> ad9144_jesd204_link_reconfig_agent:write_cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                              // agent_pipeline_008:out_startofpacket -> ad9144_jesd204_link_reconfig_agent:write_cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                // agent_pipeline_008:out_endofpacket -> ad9144_jesd204_link_reconfig_agent:write_cp_endofpacket
	wire          ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_valid;           // ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_valid -> agent_pipeline_009:in_valid
	wire  [115:0] ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_data;            // ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_data -> agent_pipeline_009:in_data
	wire          ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_ready;           // agent_pipeline_009:in_ready -> ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_channel;         // ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_channel -> agent_pipeline_009:in_channel
	wire          ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket;   // ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket;     // ad9144_jesd204_link_reconfig_rd_burst_adapter:source0_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                      // agent_pipeline_009:out_valid -> ad9144_jesd204_link_reconfig_agent:read_cp_valid
	wire  [115:0] agent_pipeline_009_source0_data;                                       // agent_pipeline_009:out_data -> ad9144_jesd204_link_reconfig_agent:read_cp_data
	wire          agent_pipeline_009_source0_ready;                                      // ad9144_jesd204_link_reconfig_agent:read_cp_ready -> agent_pipeline_009:out_ready
	wire   [30:0] agent_pipeline_009_source0_channel;                                    // agent_pipeline_009:out_channel -> ad9144_jesd204_link_reconfig_agent:read_cp_channel
	wire          agent_pipeline_009_source0_startofpacket;                              // agent_pipeline_009:out_startofpacket -> ad9144_jesd204_link_reconfig_agent:read_cp_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                // agent_pipeline_009:out_endofpacket -> ad9144_jesd204_link_reconfig_agent:read_cp_endofpacket
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_valid;                     // ad9144_jesd204_link_reconfig_agent:write_rp_valid -> agent_pipeline_010:in_valid
	wire  [115:0] ad9144_jesd204_link_reconfig_agent_write_rp_data;                      // ad9144_jesd204_link_reconfig_agent:write_rp_data -> agent_pipeline_010:in_data
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_ready;                     // agent_pipeline_010:in_ready -> ad9144_jesd204_link_reconfig_agent:write_rp_ready
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket;             // ad9144_jesd204_link_reconfig_agent:write_rp_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket;               // ad9144_jesd204_link_reconfig_agent:write_rp_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                      // agent_pipeline_010:out_valid -> router_006:sink_valid
	wire  [115:0] agent_pipeline_010_source0_data;                                       // agent_pipeline_010:out_data -> router_006:sink_data
	wire          agent_pipeline_010_source0_ready;                                      // router_006:sink_ready -> agent_pipeline_010:out_ready
	wire          agent_pipeline_010_source0_startofpacket;                              // agent_pipeline_010:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                // agent_pipeline_010:out_endofpacket -> router_006:sink_endofpacket
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_valid;                      // ad9144_jesd204_link_reconfig_agent:read_rp_valid -> agent_pipeline_011:in_valid
	wire  [115:0] ad9144_jesd204_link_reconfig_agent_read_rp_data;                       // ad9144_jesd204_link_reconfig_agent:read_rp_data -> agent_pipeline_011:in_data
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_ready;                      // agent_pipeline_011:in_ready -> ad9144_jesd204_link_reconfig_agent:read_rp_ready
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket;              // ad9144_jesd204_link_reconfig_agent:read_rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket;                // ad9144_jesd204_link_reconfig_agent:read_rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                      // agent_pipeline_011:out_valid -> router_007:sink_valid
	wire  [115:0] agent_pipeline_011_source0_data;                                       // agent_pipeline_011:out_data -> router_007:sink_data
	wire          agent_pipeline_011_source0_ready;                                      // router_007:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                              // agent_pipeline_011:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                // agent_pipeline_011:out_endofpacket -> router_007:sink_endofpacket
	wire          ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_valid;           // ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_valid -> agent_pipeline_012:in_valid
	wire  [115:0] ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_data;            // ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_data -> agent_pipeline_012:in_data
	wire          ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_ready;           // agent_pipeline_012:in_ready -> ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_ready
	wire   [30:0] ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_channel;         // ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_channel -> agent_pipeline_012:in_channel
	wire          ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket;   // ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket;     // ad9680_jesd204_link_reconfig_wr_burst_adapter:source0_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                      // agent_pipeline_012:out_valid -> ad9680_jesd204_link_reconfig_agent:write_cp_valid
	wire  [115:0] agent_pipeline_012_source0_data;                                       // agent_pipeline_012:out_data -> ad9680_jesd204_link_reconfig_agent:write_cp_data
	wire          agent_pipeline_012_source0_ready;                                      // ad9680_jesd204_link_reconfig_agent:write_cp_ready -> agent_pipeline_012:out_ready
	wire   [30:0] agent_pipeline_012_source0_channel;                                    // agent_pipeline_012:out_channel -> ad9680_jesd204_link_reconfig_agent:write_cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                              // agent_pipeline_012:out_startofpacket -> ad9680_jesd204_link_reconfig_agent:write_cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                // agent_pipeline_012:out_endofpacket -> ad9680_jesd204_link_reconfig_agent:write_cp_endofpacket
	wire          ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_valid;           // ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_valid -> agent_pipeline_013:in_valid
	wire  [115:0] ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_data;            // ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_data -> agent_pipeline_013:in_data
	wire          ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_ready;           // agent_pipeline_013:in_ready -> ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_ready
	wire   [30:0] ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_channel;         // ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_channel -> agent_pipeline_013:in_channel
	wire          ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket;   // ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket;     // ad9680_jesd204_link_reconfig_rd_burst_adapter:source0_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                      // agent_pipeline_013:out_valid -> ad9680_jesd204_link_reconfig_agent:read_cp_valid
	wire  [115:0] agent_pipeline_013_source0_data;                                       // agent_pipeline_013:out_data -> ad9680_jesd204_link_reconfig_agent:read_cp_data
	wire          agent_pipeline_013_source0_ready;                                      // ad9680_jesd204_link_reconfig_agent:read_cp_ready -> agent_pipeline_013:out_ready
	wire   [30:0] agent_pipeline_013_source0_channel;                                    // agent_pipeline_013:out_channel -> ad9680_jesd204_link_reconfig_agent:read_cp_channel
	wire          agent_pipeline_013_source0_startofpacket;                              // agent_pipeline_013:out_startofpacket -> ad9680_jesd204_link_reconfig_agent:read_cp_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                // agent_pipeline_013:out_endofpacket -> ad9680_jesd204_link_reconfig_agent:read_cp_endofpacket
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_valid;                     // ad9680_jesd204_link_reconfig_agent:write_rp_valid -> agent_pipeline_014:in_valid
	wire  [115:0] ad9680_jesd204_link_reconfig_agent_write_rp_data;                      // ad9680_jesd204_link_reconfig_agent:write_rp_data -> agent_pipeline_014:in_data
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_ready;                     // agent_pipeline_014:in_ready -> ad9680_jesd204_link_reconfig_agent:write_rp_ready
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket;             // ad9680_jesd204_link_reconfig_agent:write_rp_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket;               // ad9680_jesd204_link_reconfig_agent:write_rp_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                      // agent_pipeline_014:out_valid -> router_008:sink_valid
	wire  [115:0] agent_pipeline_014_source0_data;                                       // agent_pipeline_014:out_data -> router_008:sink_data
	wire          agent_pipeline_014_source0_ready;                                      // router_008:sink_ready -> agent_pipeline_014:out_ready
	wire          agent_pipeline_014_source0_startofpacket;                              // agent_pipeline_014:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                // agent_pipeline_014:out_endofpacket -> router_008:sink_endofpacket
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_valid;                      // ad9680_jesd204_link_reconfig_agent:read_rp_valid -> agent_pipeline_015:in_valid
	wire  [115:0] ad9680_jesd204_link_reconfig_agent_read_rp_data;                       // ad9680_jesd204_link_reconfig_agent:read_rp_data -> agent_pipeline_015:in_data
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_ready;                      // agent_pipeline_015:in_ready -> ad9680_jesd204_link_reconfig_agent:read_rp_ready
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket;              // ad9680_jesd204_link_reconfig_agent:read_rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket;                // ad9680_jesd204_link_reconfig_agent:read_rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                      // agent_pipeline_015:out_valid -> router_009:sink_valid
	wire  [115:0] agent_pipeline_015_source0_data;                                       // agent_pipeline_015:out_data -> router_009:sink_data
	wire          agent_pipeline_015_source0_ready;                                      // router_009:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                              // agent_pipeline_015:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                // agent_pipeline_015:out_endofpacket -> router_009:sink_endofpacket
	wire          axi_ad9144_dma_s_axi_wr_burst_adapter_source0_valid;                   // axi_ad9144_dma_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_016:in_valid
	wire  [115:0] axi_ad9144_dma_s_axi_wr_burst_adapter_source0_data;                    // axi_ad9144_dma_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_016:in_data
	wire          axi_ad9144_dma_s_axi_wr_burst_adapter_source0_ready;                   // agent_pipeline_016:in_ready -> axi_ad9144_dma_s_axi_wr_burst_adapter:source0_ready
	wire   [30:0] axi_ad9144_dma_s_axi_wr_burst_adapter_source0_channel;                 // axi_ad9144_dma_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_016:in_channel
	wire          axi_ad9144_dma_s_axi_wr_burst_adapter_source0_startofpacket;           // axi_ad9144_dma_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          axi_ad9144_dma_s_axi_wr_burst_adapter_source0_endofpacket;             // axi_ad9144_dma_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                      // agent_pipeline_016:out_valid -> axi_ad9144_dma_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_016_source0_data;                                       // agent_pipeline_016:out_data -> axi_ad9144_dma_s_axi_agent:write_cp_data
	wire          agent_pipeline_016_source0_ready;                                      // axi_ad9144_dma_s_axi_agent:write_cp_ready -> agent_pipeline_016:out_ready
	wire   [30:0] agent_pipeline_016_source0_channel;                                    // agent_pipeline_016:out_channel -> axi_ad9144_dma_s_axi_agent:write_cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                              // agent_pipeline_016:out_startofpacket -> axi_ad9144_dma_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                // agent_pipeline_016:out_endofpacket -> axi_ad9144_dma_s_axi_agent:write_cp_endofpacket
	wire          axi_ad9144_dma_s_axi_rd_burst_adapter_source0_valid;                   // axi_ad9144_dma_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_017:in_valid
	wire  [115:0] axi_ad9144_dma_s_axi_rd_burst_adapter_source0_data;                    // axi_ad9144_dma_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_017:in_data
	wire          axi_ad9144_dma_s_axi_rd_burst_adapter_source0_ready;                   // agent_pipeline_017:in_ready -> axi_ad9144_dma_s_axi_rd_burst_adapter:source0_ready
	wire   [30:0] axi_ad9144_dma_s_axi_rd_burst_adapter_source0_channel;                 // axi_ad9144_dma_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_017:in_channel
	wire          axi_ad9144_dma_s_axi_rd_burst_adapter_source0_startofpacket;           // axi_ad9144_dma_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          axi_ad9144_dma_s_axi_rd_burst_adapter_source0_endofpacket;             // axi_ad9144_dma_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                      // agent_pipeline_017:out_valid -> axi_ad9144_dma_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_017_source0_data;                                       // agent_pipeline_017:out_data -> axi_ad9144_dma_s_axi_agent:read_cp_data
	wire          agent_pipeline_017_source0_ready;                                      // axi_ad9144_dma_s_axi_agent:read_cp_ready -> agent_pipeline_017:out_ready
	wire   [30:0] agent_pipeline_017_source0_channel;                                    // agent_pipeline_017:out_channel -> axi_ad9144_dma_s_axi_agent:read_cp_channel
	wire          agent_pipeline_017_source0_startofpacket;                              // agent_pipeline_017:out_startofpacket -> axi_ad9144_dma_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                // agent_pipeline_017:out_endofpacket -> axi_ad9144_dma_s_axi_agent:read_cp_endofpacket
	wire          axi_ad9144_dma_s_axi_agent_write_rp_valid;                             // axi_ad9144_dma_s_axi_agent:write_rp_valid -> agent_pipeline_018:in_valid
	wire  [115:0] axi_ad9144_dma_s_axi_agent_write_rp_data;                              // axi_ad9144_dma_s_axi_agent:write_rp_data -> agent_pipeline_018:in_data
	wire          axi_ad9144_dma_s_axi_agent_write_rp_ready;                             // agent_pipeline_018:in_ready -> axi_ad9144_dma_s_axi_agent:write_rp_ready
	wire          axi_ad9144_dma_s_axi_agent_write_rp_startofpacket;                     // axi_ad9144_dma_s_axi_agent:write_rp_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          axi_ad9144_dma_s_axi_agent_write_rp_endofpacket;                       // axi_ad9144_dma_s_axi_agent:write_rp_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                      // agent_pipeline_018:out_valid -> router_010:sink_valid
	wire  [115:0] agent_pipeline_018_source0_data;                                       // agent_pipeline_018:out_data -> router_010:sink_data
	wire          agent_pipeline_018_source0_ready;                                      // router_010:sink_ready -> agent_pipeline_018:out_ready
	wire          agent_pipeline_018_source0_startofpacket;                              // agent_pipeline_018:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                // agent_pipeline_018:out_endofpacket -> router_010:sink_endofpacket
	wire          axi_ad9144_dma_s_axi_agent_read_rp_valid;                              // axi_ad9144_dma_s_axi_agent:read_rp_valid -> agent_pipeline_019:in_valid
	wire  [115:0] axi_ad9144_dma_s_axi_agent_read_rp_data;                               // axi_ad9144_dma_s_axi_agent:read_rp_data -> agent_pipeline_019:in_data
	wire          axi_ad9144_dma_s_axi_agent_read_rp_ready;                              // agent_pipeline_019:in_ready -> axi_ad9144_dma_s_axi_agent:read_rp_ready
	wire          axi_ad9144_dma_s_axi_agent_read_rp_startofpacket;                      // axi_ad9144_dma_s_axi_agent:read_rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          axi_ad9144_dma_s_axi_agent_read_rp_endofpacket;                        // axi_ad9144_dma_s_axi_agent:read_rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                      // agent_pipeline_019:out_valid -> router_011:sink_valid
	wire  [115:0] agent_pipeline_019_source0_data;                                       // agent_pipeline_019:out_data -> router_011:sink_data
	wire          agent_pipeline_019_source0_ready;                                      // router_011:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                              // agent_pipeline_019:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                // agent_pipeline_019:out_endofpacket -> router_011:sink_endofpacket
	wire          axi_ad9144_core_s_axi_wr_burst_adapter_source0_valid;                  // axi_ad9144_core_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_020:in_valid
	wire  [115:0] axi_ad9144_core_s_axi_wr_burst_adapter_source0_data;                   // axi_ad9144_core_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_020:in_data
	wire          axi_ad9144_core_s_axi_wr_burst_adapter_source0_ready;                  // agent_pipeline_020:in_ready -> axi_ad9144_core_s_axi_wr_burst_adapter:source0_ready
	wire   [30:0] axi_ad9144_core_s_axi_wr_burst_adapter_source0_channel;                // axi_ad9144_core_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_020:in_channel
	wire          axi_ad9144_core_s_axi_wr_burst_adapter_source0_startofpacket;          // axi_ad9144_core_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          axi_ad9144_core_s_axi_wr_burst_adapter_source0_endofpacket;            // axi_ad9144_core_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                                      // agent_pipeline_020:out_valid -> axi_ad9144_core_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_020_source0_data;                                       // agent_pipeline_020:out_data -> axi_ad9144_core_s_axi_agent:write_cp_data
	wire          agent_pipeline_020_source0_ready;                                      // axi_ad9144_core_s_axi_agent:write_cp_ready -> agent_pipeline_020:out_ready
	wire   [30:0] agent_pipeline_020_source0_channel;                                    // agent_pipeline_020:out_channel -> axi_ad9144_core_s_axi_agent:write_cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                              // agent_pipeline_020:out_startofpacket -> axi_ad9144_core_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                                // agent_pipeline_020:out_endofpacket -> axi_ad9144_core_s_axi_agent:write_cp_endofpacket
	wire          axi_ad9144_core_s_axi_rd_burst_adapter_source0_valid;                  // axi_ad9144_core_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_021:in_valid
	wire  [115:0] axi_ad9144_core_s_axi_rd_burst_adapter_source0_data;                   // axi_ad9144_core_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_021:in_data
	wire          axi_ad9144_core_s_axi_rd_burst_adapter_source0_ready;                  // agent_pipeline_021:in_ready -> axi_ad9144_core_s_axi_rd_burst_adapter:source0_ready
	wire   [30:0] axi_ad9144_core_s_axi_rd_burst_adapter_source0_channel;                // axi_ad9144_core_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_021:in_channel
	wire          axi_ad9144_core_s_axi_rd_burst_adapter_source0_startofpacket;          // axi_ad9144_core_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          axi_ad9144_core_s_axi_rd_burst_adapter_source0_endofpacket;            // axi_ad9144_core_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                                      // agent_pipeline_021:out_valid -> axi_ad9144_core_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_021_source0_data;                                       // agent_pipeline_021:out_data -> axi_ad9144_core_s_axi_agent:read_cp_data
	wire          agent_pipeline_021_source0_ready;                                      // axi_ad9144_core_s_axi_agent:read_cp_ready -> agent_pipeline_021:out_ready
	wire   [30:0] agent_pipeline_021_source0_channel;                                    // agent_pipeline_021:out_channel -> axi_ad9144_core_s_axi_agent:read_cp_channel
	wire          agent_pipeline_021_source0_startofpacket;                              // agent_pipeline_021:out_startofpacket -> axi_ad9144_core_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                                // agent_pipeline_021:out_endofpacket -> axi_ad9144_core_s_axi_agent:read_cp_endofpacket
	wire          axi_ad9144_core_s_axi_agent_write_rp_valid;                            // axi_ad9144_core_s_axi_agent:write_rp_valid -> agent_pipeline_022:in_valid
	wire  [115:0] axi_ad9144_core_s_axi_agent_write_rp_data;                             // axi_ad9144_core_s_axi_agent:write_rp_data -> agent_pipeline_022:in_data
	wire          axi_ad9144_core_s_axi_agent_write_rp_ready;                            // agent_pipeline_022:in_ready -> axi_ad9144_core_s_axi_agent:write_rp_ready
	wire          axi_ad9144_core_s_axi_agent_write_rp_startofpacket;                    // axi_ad9144_core_s_axi_agent:write_rp_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          axi_ad9144_core_s_axi_agent_write_rp_endofpacket;                      // axi_ad9144_core_s_axi_agent:write_rp_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                                      // agent_pipeline_022:out_valid -> router_012:sink_valid
	wire  [115:0] agent_pipeline_022_source0_data;                                       // agent_pipeline_022:out_data -> router_012:sink_data
	wire          agent_pipeline_022_source0_ready;                                      // router_012:sink_ready -> agent_pipeline_022:out_ready
	wire          agent_pipeline_022_source0_startofpacket;                              // agent_pipeline_022:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                                // agent_pipeline_022:out_endofpacket -> router_012:sink_endofpacket
	wire          axi_ad9144_core_s_axi_agent_read_rp_valid;                             // axi_ad9144_core_s_axi_agent:read_rp_valid -> agent_pipeline_023:in_valid
	wire  [115:0] axi_ad9144_core_s_axi_agent_read_rp_data;                              // axi_ad9144_core_s_axi_agent:read_rp_data -> agent_pipeline_023:in_data
	wire          axi_ad9144_core_s_axi_agent_read_rp_ready;                             // agent_pipeline_023:in_ready -> axi_ad9144_core_s_axi_agent:read_rp_ready
	wire          axi_ad9144_core_s_axi_agent_read_rp_startofpacket;                     // axi_ad9144_core_s_axi_agent:read_rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          axi_ad9144_core_s_axi_agent_read_rp_endofpacket;                       // axi_ad9144_core_s_axi_agent:read_rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                                      // agent_pipeline_023:out_valid -> router_013:sink_valid
	wire  [115:0] agent_pipeline_023_source0_data;                                       // agent_pipeline_023:out_data -> router_013:sink_data
	wire          agent_pipeline_023_source0_ready;                                      // router_013:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                              // agent_pipeline_023:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                                // agent_pipeline_023:out_endofpacket -> router_013:sink_endofpacket
	wire          axi_ad9680_dma_s_axi_wr_burst_adapter_source0_valid;                   // axi_ad9680_dma_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_024:in_valid
	wire  [115:0] axi_ad9680_dma_s_axi_wr_burst_adapter_source0_data;                    // axi_ad9680_dma_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_024:in_data
	wire          axi_ad9680_dma_s_axi_wr_burst_adapter_source0_ready;                   // agent_pipeline_024:in_ready -> axi_ad9680_dma_s_axi_wr_burst_adapter:source0_ready
	wire   [30:0] axi_ad9680_dma_s_axi_wr_burst_adapter_source0_channel;                 // axi_ad9680_dma_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_024:in_channel
	wire          axi_ad9680_dma_s_axi_wr_burst_adapter_source0_startofpacket;           // axi_ad9680_dma_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_024:in_startofpacket
	wire          axi_ad9680_dma_s_axi_wr_burst_adapter_source0_endofpacket;             // axi_ad9680_dma_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_024:in_endofpacket
	wire          agent_pipeline_024_source0_valid;                                      // agent_pipeline_024:out_valid -> axi_ad9680_dma_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_024_source0_data;                                       // agent_pipeline_024:out_data -> axi_ad9680_dma_s_axi_agent:write_cp_data
	wire          agent_pipeline_024_source0_ready;                                      // axi_ad9680_dma_s_axi_agent:write_cp_ready -> agent_pipeline_024:out_ready
	wire   [30:0] agent_pipeline_024_source0_channel;                                    // agent_pipeline_024:out_channel -> axi_ad9680_dma_s_axi_agent:write_cp_channel
	wire          agent_pipeline_024_source0_startofpacket;                              // agent_pipeline_024:out_startofpacket -> axi_ad9680_dma_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_024_source0_endofpacket;                                // agent_pipeline_024:out_endofpacket -> axi_ad9680_dma_s_axi_agent:write_cp_endofpacket
	wire          axi_ad9680_dma_s_axi_rd_burst_adapter_source0_valid;                   // axi_ad9680_dma_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_025:in_valid
	wire  [115:0] axi_ad9680_dma_s_axi_rd_burst_adapter_source0_data;                    // axi_ad9680_dma_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_025:in_data
	wire          axi_ad9680_dma_s_axi_rd_burst_adapter_source0_ready;                   // agent_pipeline_025:in_ready -> axi_ad9680_dma_s_axi_rd_burst_adapter:source0_ready
	wire   [30:0] axi_ad9680_dma_s_axi_rd_burst_adapter_source0_channel;                 // axi_ad9680_dma_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_025:in_channel
	wire          axi_ad9680_dma_s_axi_rd_burst_adapter_source0_startofpacket;           // axi_ad9680_dma_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_025:in_startofpacket
	wire          axi_ad9680_dma_s_axi_rd_burst_adapter_source0_endofpacket;             // axi_ad9680_dma_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_025:in_endofpacket
	wire          agent_pipeline_025_source0_valid;                                      // agent_pipeline_025:out_valid -> axi_ad9680_dma_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_025_source0_data;                                       // agent_pipeline_025:out_data -> axi_ad9680_dma_s_axi_agent:read_cp_data
	wire          agent_pipeline_025_source0_ready;                                      // axi_ad9680_dma_s_axi_agent:read_cp_ready -> agent_pipeline_025:out_ready
	wire   [30:0] agent_pipeline_025_source0_channel;                                    // agent_pipeline_025:out_channel -> axi_ad9680_dma_s_axi_agent:read_cp_channel
	wire          agent_pipeline_025_source0_startofpacket;                              // agent_pipeline_025:out_startofpacket -> axi_ad9680_dma_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_025_source0_endofpacket;                                // agent_pipeline_025:out_endofpacket -> axi_ad9680_dma_s_axi_agent:read_cp_endofpacket
	wire          axi_ad9680_dma_s_axi_agent_write_rp_valid;                             // axi_ad9680_dma_s_axi_agent:write_rp_valid -> agent_pipeline_026:in_valid
	wire  [115:0] axi_ad9680_dma_s_axi_agent_write_rp_data;                              // axi_ad9680_dma_s_axi_agent:write_rp_data -> agent_pipeline_026:in_data
	wire          axi_ad9680_dma_s_axi_agent_write_rp_ready;                             // agent_pipeline_026:in_ready -> axi_ad9680_dma_s_axi_agent:write_rp_ready
	wire          axi_ad9680_dma_s_axi_agent_write_rp_startofpacket;                     // axi_ad9680_dma_s_axi_agent:write_rp_startofpacket -> agent_pipeline_026:in_startofpacket
	wire          axi_ad9680_dma_s_axi_agent_write_rp_endofpacket;                       // axi_ad9680_dma_s_axi_agent:write_rp_endofpacket -> agent_pipeline_026:in_endofpacket
	wire          agent_pipeline_026_source0_valid;                                      // agent_pipeline_026:out_valid -> router_014:sink_valid
	wire  [115:0] agent_pipeline_026_source0_data;                                       // agent_pipeline_026:out_data -> router_014:sink_data
	wire          agent_pipeline_026_source0_ready;                                      // router_014:sink_ready -> agent_pipeline_026:out_ready
	wire          agent_pipeline_026_source0_startofpacket;                              // agent_pipeline_026:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_026_source0_endofpacket;                                // agent_pipeline_026:out_endofpacket -> router_014:sink_endofpacket
	wire          axi_ad9680_dma_s_axi_agent_read_rp_valid;                              // axi_ad9680_dma_s_axi_agent:read_rp_valid -> agent_pipeline_027:in_valid
	wire  [115:0] axi_ad9680_dma_s_axi_agent_read_rp_data;                               // axi_ad9680_dma_s_axi_agent:read_rp_data -> agent_pipeline_027:in_data
	wire          axi_ad9680_dma_s_axi_agent_read_rp_ready;                              // agent_pipeline_027:in_ready -> axi_ad9680_dma_s_axi_agent:read_rp_ready
	wire          axi_ad9680_dma_s_axi_agent_read_rp_startofpacket;                      // axi_ad9680_dma_s_axi_agent:read_rp_startofpacket -> agent_pipeline_027:in_startofpacket
	wire          axi_ad9680_dma_s_axi_agent_read_rp_endofpacket;                        // axi_ad9680_dma_s_axi_agent:read_rp_endofpacket -> agent_pipeline_027:in_endofpacket
	wire          agent_pipeline_027_source0_valid;                                      // agent_pipeline_027:out_valid -> router_015:sink_valid
	wire  [115:0] agent_pipeline_027_source0_data;                                       // agent_pipeline_027:out_data -> router_015:sink_data
	wire          agent_pipeline_027_source0_ready;                                      // router_015:sink_ready -> agent_pipeline_027:out_ready
	wire          agent_pipeline_027_source0_startofpacket;                              // agent_pipeline_027:out_startofpacket -> router_015:sink_startofpacket
	wire          agent_pipeline_027_source0_endofpacket;                                // agent_pipeline_027:out_endofpacket -> router_015:sink_endofpacket
	wire          axi_ad9680_core_s_axi_wr_burst_adapter_source0_valid;                  // axi_ad9680_core_s_axi_wr_burst_adapter:source0_valid -> agent_pipeline_028:in_valid
	wire  [115:0] axi_ad9680_core_s_axi_wr_burst_adapter_source0_data;                   // axi_ad9680_core_s_axi_wr_burst_adapter:source0_data -> agent_pipeline_028:in_data
	wire          axi_ad9680_core_s_axi_wr_burst_adapter_source0_ready;                  // agent_pipeline_028:in_ready -> axi_ad9680_core_s_axi_wr_burst_adapter:source0_ready
	wire   [30:0] axi_ad9680_core_s_axi_wr_burst_adapter_source0_channel;                // axi_ad9680_core_s_axi_wr_burst_adapter:source0_channel -> agent_pipeline_028:in_channel
	wire          axi_ad9680_core_s_axi_wr_burst_adapter_source0_startofpacket;          // axi_ad9680_core_s_axi_wr_burst_adapter:source0_startofpacket -> agent_pipeline_028:in_startofpacket
	wire          axi_ad9680_core_s_axi_wr_burst_adapter_source0_endofpacket;            // axi_ad9680_core_s_axi_wr_burst_adapter:source0_endofpacket -> agent_pipeline_028:in_endofpacket
	wire          agent_pipeline_028_source0_valid;                                      // agent_pipeline_028:out_valid -> axi_ad9680_core_s_axi_agent:write_cp_valid
	wire  [115:0] agent_pipeline_028_source0_data;                                       // agent_pipeline_028:out_data -> axi_ad9680_core_s_axi_agent:write_cp_data
	wire          agent_pipeline_028_source0_ready;                                      // axi_ad9680_core_s_axi_agent:write_cp_ready -> agent_pipeline_028:out_ready
	wire   [30:0] agent_pipeline_028_source0_channel;                                    // agent_pipeline_028:out_channel -> axi_ad9680_core_s_axi_agent:write_cp_channel
	wire          agent_pipeline_028_source0_startofpacket;                              // agent_pipeline_028:out_startofpacket -> axi_ad9680_core_s_axi_agent:write_cp_startofpacket
	wire          agent_pipeline_028_source0_endofpacket;                                // agent_pipeline_028:out_endofpacket -> axi_ad9680_core_s_axi_agent:write_cp_endofpacket
	wire          axi_ad9680_core_s_axi_rd_burst_adapter_source0_valid;                  // axi_ad9680_core_s_axi_rd_burst_adapter:source0_valid -> agent_pipeline_029:in_valid
	wire  [115:0] axi_ad9680_core_s_axi_rd_burst_adapter_source0_data;                   // axi_ad9680_core_s_axi_rd_burst_adapter:source0_data -> agent_pipeline_029:in_data
	wire          axi_ad9680_core_s_axi_rd_burst_adapter_source0_ready;                  // agent_pipeline_029:in_ready -> axi_ad9680_core_s_axi_rd_burst_adapter:source0_ready
	wire   [30:0] axi_ad9680_core_s_axi_rd_burst_adapter_source0_channel;                // axi_ad9680_core_s_axi_rd_burst_adapter:source0_channel -> agent_pipeline_029:in_channel
	wire          axi_ad9680_core_s_axi_rd_burst_adapter_source0_startofpacket;          // axi_ad9680_core_s_axi_rd_burst_adapter:source0_startofpacket -> agent_pipeline_029:in_startofpacket
	wire          axi_ad9680_core_s_axi_rd_burst_adapter_source0_endofpacket;            // axi_ad9680_core_s_axi_rd_burst_adapter:source0_endofpacket -> agent_pipeline_029:in_endofpacket
	wire          agent_pipeline_029_source0_valid;                                      // agent_pipeline_029:out_valid -> axi_ad9680_core_s_axi_agent:read_cp_valid
	wire  [115:0] agent_pipeline_029_source0_data;                                       // agent_pipeline_029:out_data -> axi_ad9680_core_s_axi_agent:read_cp_data
	wire          agent_pipeline_029_source0_ready;                                      // axi_ad9680_core_s_axi_agent:read_cp_ready -> agent_pipeline_029:out_ready
	wire   [30:0] agent_pipeline_029_source0_channel;                                    // agent_pipeline_029:out_channel -> axi_ad9680_core_s_axi_agent:read_cp_channel
	wire          agent_pipeline_029_source0_startofpacket;                              // agent_pipeline_029:out_startofpacket -> axi_ad9680_core_s_axi_agent:read_cp_startofpacket
	wire          agent_pipeline_029_source0_endofpacket;                                // agent_pipeline_029:out_endofpacket -> axi_ad9680_core_s_axi_agent:read_cp_endofpacket
	wire          axi_ad9680_core_s_axi_agent_write_rp_valid;                            // axi_ad9680_core_s_axi_agent:write_rp_valid -> agent_pipeline_030:in_valid
	wire  [115:0] axi_ad9680_core_s_axi_agent_write_rp_data;                             // axi_ad9680_core_s_axi_agent:write_rp_data -> agent_pipeline_030:in_data
	wire          axi_ad9680_core_s_axi_agent_write_rp_ready;                            // agent_pipeline_030:in_ready -> axi_ad9680_core_s_axi_agent:write_rp_ready
	wire          axi_ad9680_core_s_axi_agent_write_rp_startofpacket;                    // axi_ad9680_core_s_axi_agent:write_rp_startofpacket -> agent_pipeline_030:in_startofpacket
	wire          axi_ad9680_core_s_axi_agent_write_rp_endofpacket;                      // axi_ad9680_core_s_axi_agent:write_rp_endofpacket -> agent_pipeline_030:in_endofpacket
	wire          agent_pipeline_030_source0_valid;                                      // agent_pipeline_030:out_valid -> router_016:sink_valid
	wire  [115:0] agent_pipeline_030_source0_data;                                       // agent_pipeline_030:out_data -> router_016:sink_data
	wire          agent_pipeline_030_source0_ready;                                      // router_016:sink_ready -> agent_pipeline_030:out_ready
	wire          agent_pipeline_030_source0_startofpacket;                              // agent_pipeline_030:out_startofpacket -> router_016:sink_startofpacket
	wire          agent_pipeline_030_source0_endofpacket;                                // agent_pipeline_030:out_endofpacket -> router_016:sink_endofpacket
	wire          axi_ad9680_core_s_axi_agent_read_rp_valid;                             // axi_ad9680_core_s_axi_agent:read_rp_valid -> agent_pipeline_031:in_valid
	wire  [115:0] axi_ad9680_core_s_axi_agent_read_rp_data;                              // axi_ad9680_core_s_axi_agent:read_rp_data -> agent_pipeline_031:in_data
	wire          axi_ad9680_core_s_axi_agent_read_rp_ready;                             // agent_pipeline_031:in_ready -> axi_ad9680_core_s_axi_agent:read_rp_ready
	wire          axi_ad9680_core_s_axi_agent_read_rp_startofpacket;                     // axi_ad9680_core_s_axi_agent:read_rp_startofpacket -> agent_pipeline_031:in_startofpacket
	wire          axi_ad9680_core_s_axi_agent_read_rp_endofpacket;                       // axi_ad9680_core_s_axi_agent:read_rp_endofpacket -> agent_pipeline_031:in_endofpacket
	wire          agent_pipeline_031_source0_valid;                                      // agent_pipeline_031:out_valid -> router_017:sink_valid
	wire  [115:0] agent_pipeline_031_source0_data;                                       // agent_pipeline_031:out_data -> router_017:sink_data
	wire          agent_pipeline_031_source0_ready;                                      // router_017:sink_ready -> agent_pipeline_031:out_ready
	wire          agent_pipeline_031_source0_startofpacket;                              // agent_pipeline_031:out_startofpacket -> router_017:sink_startofpacket
	wire          agent_pipeline_031_source0_endofpacket;                                // agent_pipeline_031:out_endofpacket -> router_017:sink_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_valid;          // ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_valid -> agent_pipeline_032:in_valid
	wire  [115:0] ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_data;           // ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_data -> agent_pipeline_032:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_ready;          // agent_pipeline_032:in_ready -> ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_channel;        // ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_channel -> agent_pipeline_032:in_channel
	wire          ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_startofpacket;  // ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_startofpacket -> agent_pipeline_032:in_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_endofpacket;    // ad9144_jesd204_lane_pll_reconfig_burst_adapter:source0_endofpacket -> agent_pipeline_032:in_endofpacket
	wire          agent_pipeline_032_source0_valid;                                      // agent_pipeline_032:out_valid -> ad9144_jesd204_lane_pll_reconfig_agent:cp_valid
	wire  [115:0] agent_pipeline_032_source0_data;                                       // agent_pipeline_032:out_data -> ad9144_jesd204_lane_pll_reconfig_agent:cp_data
	wire          agent_pipeline_032_source0_ready;                                      // ad9144_jesd204_lane_pll_reconfig_agent:cp_ready -> agent_pipeline_032:out_ready
	wire   [30:0] agent_pipeline_032_source0_channel;                                    // agent_pipeline_032:out_channel -> ad9144_jesd204_lane_pll_reconfig_agent:cp_channel
	wire          agent_pipeline_032_source0_startofpacket;                              // agent_pipeline_032:out_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:cp_startofpacket
	wire          agent_pipeline_032_source0_endofpacket;                                // agent_pipeline_032:out_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:cp_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_valid;                       // ad9144_jesd204_lane_pll_reconfig_agent:rp_valid -> agent_pipeline_033:in_valid
	wire  [115:0] ad9144_jesd204_lane_pll_reconfig_agent_rp_data;                        // ad9144_jesd204_lane_pll_reconfig_agent:rp_data -> agent_pipeline_033:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_ready;                       // agent_pipeline_033:in_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rp_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket;               // ad9144_jesd204_lane_pll_reconfig_agent:rp_startofpacket -> agent_pipeline_033:in_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket;                 // ad9144_jesd204_lane_pll_reconfig_agent:rp_endofpacket -> agent_pipeline_033:in_endofpacket
	wire          agent_pipeline_033_source0_valid;                                      // agent_pipeline_033:out_valid -> router_018:sink_valid
	wire  [115:0] agent_pipeline_033_source0_data;                                       // agent_pipeline_033:out_data -> router_018:sink_data
	wire          agent_pipeline_033_source0_ready;                                      // router_018:sink_ready -> agent_pipeline_033:out_ready
	wire          agent_pipeline_033_source0_startofpacket;                              // agent_pipeline_033:out_startofpacket -> router_018:sink_startofpacket
	wire          agent_pipeline_033_source0_endofpacket;                                // agent_pipeline_033:out_endofpacket -> router_018:sink_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_valid;          // ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_valid -> agent_pipeline_034:in_valid
	wire  [115:0] ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_data;           // ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_data -> agent_pipeline_034:in_data
	wire          ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_ready;          // agent_pipeline_034:in_ready -> ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_ready
	wire   [30:0] ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_channel;        // ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_channel -> agent_pipeline_034:in_channel
	wire          ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket;  // ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_startofpacket -> agent_pipeline_034:in_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket;    // ad9144_jesd204_link_pll_reconfig_burst_adapter:source0_endofpacket -> agent_pipeline_034:in_endofpacket
	wire          agent_pipeline_034_source0_valid;                                      // agent_pipeline_034:out_valid -> ad9144_jesd204_link_pll_reconfig_agent:cp_valid
	wire  [115:0] agent_pipeline_034_source0_data;                                       // agent_pipeline_034:out_data -> ad9144_jesd204_link_pll_reconfig_agent:cp_data
	wire          agent_pipeline_034_source0_ready;                                      // ad9144_jesd204_link_pll_reconfig_agent:cp_ready -> agent_pipeline_034:out_ready
	wire   [30:0] agent_pipeline_034_source0_channel;                                    // agent_pipeline_034:out_channel -> ad9144_jesd204_link_pll_reconfig_agent:cp_channel
	wire          agent_pipeline_034_source0_startofpacket;                              // agent_pipeline_034:out_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent:cp_startofpacket
	wire          agent_pipeline_034_source0_endofpacket;                                // agent_pipeline_034:out_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent:cp_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_valid;                       // ad9144_jesd204_link_pll_reconfig_agent:rp_valid -> agent_pipeline_035:in_valid
	wire  [115:0] ad9144_jesd204_link_pll_reconfig_agent_rp_data;                        // ad9144_jesd204_link_pll_reconfig_agent:rp_data -> agent_pipeline_035:in_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_ready;                       // agent_pipeline_035:in_ready -> ad9144_jesd204_link_pll_reconfig_agent:rp_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket;               // ad9144_jesd204_link_pll_reconfig_agent:rp_startofpacket -> agent_pipeline_035:in_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket;                 // ad9144_jesd204_link_pll_reconfig_agent:rp_endofpacket -> agent_pipeline_035:in_endofpacket
	wire          agent_pipeline_035_source0_valid;                                      // agent_pipeline_035:out_valid -> router_019:sink_valid
	wire  [115:0] agent_pipeline_035_source0_data;                                       // agent_pipeline_035:out_data -> router_019:sink_data
	wire          agent_pipeline_035_source0_ready;                                      // router_019:sink_ready -> agent_pipeline_035:out_ready
	wire          agent_pipeline_035_source0_startofpacket;                              // agent_pipeline_035:out_startofpacket -> router_019:sink_startofpacket
	wire          agent_pipeline_035_source0_endofpacket;                                // agent_pipeline_035:out_endofpacket -> router_019:sink_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_valid;          // ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_valid -> agent_pipeline_036:in_valid
	wire  [115:0] ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_data;           // ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_data -> agent_pipeline_036:in_data
	wire          ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_ready;          // agent_pipeline_036:in_ready -> ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_ready
	wire   [30:0] ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_channel;        // ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_channel -> agent_pipeline_036:in_channel
	wire          ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket;  // ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_startofpacket -> agent_pipeline_036:in_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket;    // ad9680_jesd204_link_pll_reconfig_burst_adapter:source0_endofpacket -> agent_pipeline_036:in_endofpacket
	wire          agent_pipeline_036_source0_valid;                                      // agent_pipeline_036:out_valid -> ad9680_jesd204_link_pll_reconfig_agent:cp_valid
	wire  [115:0] agent_pipeline_036_source0_data;                                       // agent_pipeline_036:out_data -> ad9680_jesd204_link_pll_reconfig_agent:cp_data
	wire          agent_pipeline_036_source0_ready;                                      // ad9680_jesd204_link_pll_reconfig_agent:cp_ready -> agent_pipeline_036:out_ready
	wire   [30:0] agent_pipeline_036_source0_channel;                                    // agent_pipeline_036:out_channel -> ad9680_jesd204_link_pll_reconfig_agent:cp_channel
	wire          agent_pipeline_036_source0_startofpacket;                              // agent_pipeline_036:out_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent:cp_startofpacket
	wire          agent_pipeline_036_source0_endofpacket;                                // agent_pipeline_036:out_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent:cp_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_valid;                       // ad9680_jesd204_link_pll_reconfig_agent:rp_valid -> agent_pipeline_037:in_valid
	wire  [115:0] ad9680_jesd204_link_pll_reconfig_agent_rp_data;                        // ad9680_jesd204_link_pll_reconfig_agent:rp_data -> agent_pipeline_037:in_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_ready;                       // agent_pipeline_037:in_ready -> ad9680_jesd204_link_pll_reconfig_agent:rp_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket;               // ad9680_jesd204_link_pll_reconfig_agent:rp_startofpacket -> agent_pipeline_037:in_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket;                 // ad9680_jesd204_link_pll_reconfig_agent:rp_endofpacket -> agent_pipeline_037:in_endofpacket
	wire          agent_pipeline_037_source0_valid;                                      // agent_pipeline_037:out_valid -> router_020:sink_valid
	wire  [115:0] agent_pipeline_037_source0_data;                                       // agent_pipeline_037:out_data -> router_020:sink_data
	wire          agent_pipeline_037_source0_ready;                                      // router_020:sink_ready -> agent_pipeline_037:out_ready
	wire          agent_pipeline_037_source0_startofpacket;                              // agent_pipeline_037:out_startofpacket -> router_020:sink_startofpacket
	wire          agent_pipeline_037_source0_endofpacket;                                // agent_pipeline_037:out_endofpacket -> router_020:sink_endofpacket
	wire          avl_adxcfg_0_rcfg_s0_burst_adapter_source0_valid;                      // avl_adxcfg_0_rcfg_s0_burst_adapter:source0_valid -> agent_pipeline_038:in_valid
	wire  [115:0] avl_adxcfg_0_rcfg_s0_burst_adapter_source0_data;                       // avl_adxcfg_0_rcfg_s0_burst_adapter:source0_data -> agent_pipeline_038:in_data
	wire          avl_adxcfg_0_rcfg_s0_burst_adapter_source0_ready;                      // agent_pipeline_038:in_ready -> avl_adxcfg_0_rcfg_s0_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_0_rcfg_s0_burst_adapter_source0_channel;                    // avl_adxcfg_0_rcfg_s0_burst_adapter:source0_channel -> agent_pipeline_038:in_channel
	wire          avl_adxcfg_0_rcfg_s0_burst_adapter_source0_startofpacket;              // avl_adxcfg_0_rcfg_s0_burst_adapter:source0_startofpacket -> agent_pipeline_038:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s0_burst_adapter_source0_endofpacket;                // avl_adxcfg_0_rcfg_s0_burst_adapter:source0_endofpacket -> agent_pipeline_038:in_endofpacket
	wire          agent_pipeline_038_source0_valid;                                      // agent_pipeline_038:out_valid -> avl_adxcfg_0_rcfg_s0_agent:cp_valid
	wire  [115:0] agent_pipeline_038_source0_data;                                       // agent_pipeline_038:out_data -> avl_adxcfg_0_rcfg_s0_agent:cp_data
	wire          agent_pipeline_038_source0_ready;                                      // avl_adxcfg_0_rcfg_s0_agent:cp_ready -> agent_pipeline_038:out_ready
	wire   [30:0] agent_pipeline_038_source0_channel;                                    // agent_pipeline_038:out_channel -> avl_adxcfg_0_rcfg_s0_agent:cp_channel
	wire          agent_pipeline_038_source0_startofpacket;                              // agent_pipeline_038:out_startofpacket -> avl_adxcfg_0_rcfg_s0_agent:cp_startofpacket
	wire          agent_pipeline_038_source0_endofpacket;                                // agent_pipeline_038:out_endofpacket -> avl_adxcfg_0_rcfg_s0_agent:cp_endofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rp_valid;                                   // avl_adxcfg_0_rcfg_s0_agent:rp_valid -> agent_pipeline_039:in_valid
	wire  [115:0] avl_adxcfg_0_rcfg_s0_agent_rp_data;                                    // avl_adxcfg_0_rcfg_s0_agent:rp_data -> agent_pipeline_039:in_data
	wire          avl_adxcfg_0_rcfg_s0_agent_rp_ready;                                   // agent_pipeline_039:in_ready -> avl_adxcfg_0_rcfg_s0_agent:rp_ready
	wire          avl_adxcfg_0_rcfg_s0_agent_rp_startofpacket;                           // avl_adxcfg_0_rcfg_s0_agent:rp_startofpacket -> agent_pipeline_039:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s0_agent_rp_endofpacket;                             // avl_adxcfg_0_rcfg_s0_agent:rp_endofpacket -> agent_pipeline_039:in_endofpacket
	wire          agent_pipeline_039_source0_valid;                                      // agent_pipeline_039:out_valid -> router_021:sink_valid
	wire  [115:0] agent_pipeline_039_source0_data;                                       // agent_pipeline_039:out_data -> router_021:sink_data
	wire          agent_pipeline_039_source0_ready;                                      // router_021:sink_ready -> agent_pipeline_039:out_ready
	wire          agent_pipeline_039_source0_startofpacket;                              // agent_pipeline_039:out_startofpacket -> router_021:sink_startofpacket
	wire          agent_pipeline_039_source0_endofpacket;                                // agent_pipeline_039:out_endofpacket -> router_021:sink_endofpacket
	wire          avl_adxcfg_1_rcfg_s0_burst_adapter_source0_valid;                      // avl_adxcfg_1_rcfg_s0_burst_adapter:source0_valid -> agent_pipeline_040:in_valid
	wire  [115:0] avl_adxcfg_1_rcfg_s0_burst_adapter_source0_data;                       // avl_adxcfg_1_rcfg_s0_burst_adapter:source0_data -> agent_pipeline_040:in_data
	wire          avl_adxcfg_1_rcfg_s0_burst_adapter_source0_ready;                      // agent_pipeline_040:in_ready -> avl_adxcfg_1_rcfg_s0_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_1_rcfg_s0_burst_adapter_source0_channel;                    // avl_adxcfg_1_rcfg_s0_burst_adapter:source0_channel -> agent_pipeline_040:in_channel
	wire          avl_adxcfg_1_rcfg_s0_burst_adapter_source0_startofpacket;              // avl_adxcfg_1_rcfg_s0_burst_adapter:source0_startofpacket -> agent_pipeline_040:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s0_burst_adapter_source0_endofpacket;                // avl_adxcfg_1_rcfg_s0_burst_adapter:source0_endofpacket -> agent_pipeline_040:in_endofpacket
	wire          agent_pipeline_040_source0_valid;                                      // agent_pipeline_040:out_valid -> avl_adxcfg_1_rcfg_s0_agent:cp_valid
	wire  [115:0] agent_pipeline_040_source0_data;                                       // agent_pipeline_040:out_data -> avl_adxcfg_1_rcfg_s0_agent:cp_data
	wire          agent_pipeline_040_source0_ready;                                      // avl_adxcfg_1_rcfg_s0_agent:cp_ready -> agent_pipeline_040:out_ready
	wire   [30:0] agent_pipeline_040_source0_channel;                                    // agent_pipeline_040:out_channel -> avl_adxcfg_1_rcfg_s0_agent:cp_channel
	wire          agent_pipeline_040_source0_startofpacket;                              // agent_pipeline_040:out_startofpacket -> avl_adxcfg_1_rcfg_s0_agent:cp_startofpacket
	wire          agent_pipeline_040_source0_endofpacket;                                // agent_pipeline_040:out_endofpacket -> avl_adxcfg_1_rcfg_s0_agent:cp_endofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rp_valid;                                   // avl_adxcfg_1_rcfg_s0_agent:rp_valid -> agent_pipeline_041:in_valid
	wire  [115:0] avl_adxcfg_1_rcfg_s0_agent_rp_data;                                    // avl_adxcfg_1_rcfg_s0_agent:rp_data -> agent_pipeline_041:in_data
	wire          avl_adxcfg_1_rcfg_s0_agent_rp_ready;                                   // agent_pipeline_041:in_ready -> avl_adxcfg_1_rcfg_s0_agent:rp_ready
	wire          avl_adxcfg_1_rcfg_s0_agent_rp_startofpacket;                           // avl_adxcfg_1_rcfg_s0_agent:rp_startofpacket -> agent_pipeline_041:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s0_agent_rp_endofpacket;                             // avl_adxcfg_1_rcfg_s0_agent:rp_endofpacket -> agent_pipeline_041:in_endofpacket
	wire          agent_pipeline_041_source0_valid;                                      // agent_pipeline_041:out_valid -> router_022:sink_valid
	wire  [115:0] agent_pipeline_041_source0_data;                                       // agent_pipeline_041:out_data -> router_022:sink_data
	wire          agent_pipeline_041_source0_ready;                                      // router_022:sink_ready -> agent_pipeline_041:out_ready
	wire          agent_pipeline_041_source0_startofpacket;                              // agent_pipeline_041:out_startofpacket -> router_022:sink_startofpacket
	wire          agent_pipeline_041_source0_endofpacket;                                // agent_pipeline_041:out_endofpacket -> router_022:sink_endofpacket
	wire          avl_adxcfg_2_rcfg_s0_burst_adapter_source0_valid;                      // avl_adxcfg_2_rcfg_s0_burst_adapter:source0_valid -> agent_pipeline_042:in_valid
	wire  [115:0] avl_adxcfg_2_rcfg_s0_burst_adapter_source0_data;                       // avl_adxcfg_2_rcfg_s0_burst_adapter:source0_data -> agent_pipeline_042:in_data
	wire          avl_adxcfg_2_rcfg_s0_burst_adapter_source0_ready;                      // agent_pipeline_042:in_ready -> avl_adxcfg_2_rcfg_s0_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_2_rcfg_s0_burst_adapter_source0_channel;                    // avl_adxcfg_2_rcfg_s0_burst_adapter:source0_channel -> agent_pipeline_042:in_channel
	wire          avl_adxcfg_2_rcfg_s0_burst_adapter_source0_startofpacket;              // avl_adxcfg_2_rcfg_s0_burst_adapter:source0_startofpacket -> agent_pipeline_042:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s0_burst_adapter_source0_endofpacket;                // avl_adxcfg_2_rcfg_s0_burst_adapter:source0_endofpacket -> agent_pipeline_042:in_endofpacket
	wire          agent_pipeline_042_source0_valid;                                      // agent_pipeline_042:out_valid -> avl_adxcfg_2_rcfg_s0_agent:cp_valid
	wire  [115:0] agent_pipeline_042_source0_data;                                       // agent_pipeline_042:out_data -> avl_adxcfg_2_rcfg_s0_agent:cp_data
	wire          agent_pipeline_042_source0_ready;                                      // avl_adxcfg_2_rcfg_s0_agent:cp_ready -> agent_pipeline_042:out_ready
	wire   [30:0] agent_pipeline_042_source0_channel;                                    // agent_pipeline_042:out_channel -> avl_adxcfg_2_rcfg_s0_agent:cp_channel
	wire          agent_pipeline_042_source0_startofpacket;                              // agent_pipeline_042:out_startofpacket -> avl_adxcfg_2_rcfg_s0_agent:cp_startofpacket
	wire          agent_pipeline_042_source0_endofpacket;                                // agent_pipeline_042:out_endofpacket -> avl_adxcfg_2_rcfg_s0_agent:cp_endofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rp_valid;                                   // avl_adxcfg_2_rcfg_s0_agent:rp_valid -> agent_pipeline_043:in_valid
	wire  [115:0] avl_adxcfg_2_rcfg_s0_agent_rp_data;                                    // avl_adxcfg_2_rcfg_s0_agent:rp_data -> agent_pipeline_043:in_data
	wire          avl_adxcfg_2_rcfg_s0_agent_rp_ready;                                   // agent_pipeline_043:in_ready -> avl_adxcfg_2_rcfg_s0_agent:rp_ready
	wire          avl_adxcfg_2_rcfg_s0_agent_rp_startofpacket;                           // avl_adxcfg_2_rcfg_s0_agent:rp_startofpacket -> agent_pipeline_043:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s0_agent_rp_endofpacket;                             // avl_adxcfg_2_rcfg_s0_agent:rp_endofpacket -> agent_pipeline_043:in_endofpacket
	wire          agent_pipeline_043_source0_valid;                                      // agent_pipeline_043:out_valid -> router_023:sink_valid
	wire  [115:0] agent_pipeline_043_source0_data;                                       // agent_pipeline_043:out_data -> router_023:sink_data
	wire          agent_pipeline_043_source0_ready;                                      // router_023:sink_ready -> agent_pipeline_043:out_ready
	wire          agent_pipeline_043_source0_startofpacket;                              // agent_pipeline_043:out_startofpacket -> router_023:sink_startofpacket
	wire          agent_pipeline_043_source0_endofpacket;                                // agent_pipeline_043:out_endofpacket -> router_023:sink_endofpacket
	wire          avl_adxcfg_3_rcfg_s0_burst_adapter_source0_valid;                      // avl_adxcfg_3_rcfg_s0_burst_adapter:source0_valid -> agent_pipeline_044:in_valid
	wire  [115:0] avl_adxcfg_3_rcfg_s0_burst_adapter_source0_data;                       // avl_adxcfg_3_rcfg_s0_burst_adapter:source0_data -> agent_pipeline_044:in_data
	wire          avl_adxcfg_3_rcfg_s0_burst_adapter_source0_ready;                      // agent_pipeline_044:in_ready -> avl_adxcfg_3_rcfg_s0_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_3_rcfg_s0_burst_adapter_source0_channel;                    // avl_adxcfg_3_rcfg_s0_burst_adapter:source0_channel -> agent_pipeline_044:in_channel
	wire          avl_adxcfg_3_rcfg_s0_burst_adapter_source0_startofpacket;              // avl_adxcfg_3_rcfg_s0_burst_adapter:source0_startofpacket -> agent_pipeline_044:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s0_burst_adapter_source0_endofpacket;                // avl_adxcfg_3_rcfg_s0_burst_adapter:source0_endofpacket -> agent_pipeline_044:in_endofpacket
	wire          agent_pipeline_044_source0_valid;                                      // agent_pipeline_044:out_valid -> avl_adxcfg_3_rcfg_s0_agent:cp_valid
	wire  [115:0] agent_pipeline_044_source0_data;                                       // agent_pipeline_044:out_data -> avl_adxcfg_3_rcfg_s0_agent:cp_data
	wire          agent_pipeline_044_source0_ready;                                      // avl_adxcfg_3_rcfg_s0_agent:cp_ready -> agent_pipeline_044:out_ready
	wire   [30:0] agent_pipeline_044_source0_channel;                                    // agent_pipeline_044:out_channel -> avl_adxcfg_3_rcfg_s0_agent:cp_channel
	wire          agent_pipeline_044_source0_startofpacket;                              // agent_pipeline_044:out_startofpacket -> avl_adxcfg_3_rcfg_s0_agent:cp_startofpacket
	wire          agent_pipeline_044_source0_endofpacket;                                // agent_pipeline_044:out_endofpacket -> avl_adxcfg_3_rcfg_s0_agent:cp_endofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rp_valid;                                   // avl_adxcfg_3_rcfg_s0_agent:rp_valid -> agent_pipeline_045:in_valid
	wire  [115:0] avl_adxcfg_3_rcfg_s0_agent_rp_data;                                    // avl_adxcfg_3_rcfg_s0_agent:rp_data -> agent_pipeline_045:in_data
	wire          avl_adxcfg_3_rcfg_s0_agent_rp_ready;                                   // agent_pipeline_045:in_ready -> avl_adxcfg_3_rcfg_s0_agent:rp_ready
	wire          avl_adxcfg_3_rcfg_s0_agent_rp_startofpacket;                           // avl_adxcfg_3_rcfg_s0_agent:rp_startofpacket -> agent_pipeline_045:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s0_agent_rp_endofpacket;                             // avl_adxcfg_3_rcfg_s0_agent:rp_endofpacket -> agent_pipeline_045:in_endofpacket
	wire          agent_pipeline_045_source0_valid;                                      // agent_pipeline_045:out_valid -> router_024:sink_valid
	wire  [115:0] agent_pipeline_045_source0_data;                                       // agent_pipeline_045:out_data -> router_024:sink_data
	wire          agent_pipeline_045_source0_ready;                                      // router_024:sink_ready -> agent_pipeline_045:out_ready
	wire          agent_pipeline_045_source0_startofpacket;                              // agent_pipeline_045:out_startofpacket -> router_024:sink_startofpacket
	wire          agent_pipeline_045_source0_endofpacket;                                // agent_pipeline_045:out_endofpacket -> router_024:sink_endofpacket
	wire          avl_adxcfg_0_rcfg_s1_burst_adapter_source0_valid;                      // avl_adxcfg_0_rcfg_s1_burst_adapter:source0_valid -> agent_pipeline_046:in_valid
	wire  [115:0] avl_adxcfg_0_rcfg_s1_burst_adapter_source0_data;                       // avl_adxcfg_0_rcfg_s1_burst_adapter:source0_data -> agent_pipeline_046:in_data
	wire          avl_adxcfg_0_rcfg_s1_burst_adapter_source0_ready;                      // agent_pipeline_046:in_ready -> avl_adxcfg_0_rcfg_s1_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_0_rcfg_s1_burst_adapter_source0_channel;                    // avl_adxcfg_0_rcfg_s1_burst_adapter:source0_channel -> agent_pipeline_046:in_channel
	wire          avl_adxcfg_0_rcfg_s1_burst_adapter_source0_startofpacket;              // avl_adxcfg_0_rcfg_s1_burst_adapter:source0_startofpacket -> agent_pipeline_046:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s1_burst_adapter_source0_endofpacket;                // avl_adxcfg_0_rcfg_s1_burst_adapter:source0_endofpacket -> agent_pipeline_046:in_endofpacket
	wire          agent_pipeline_046_source0_valid;                                      // agent_pipeline_046:out_valid -> avl_adxcfg_0_rcfg_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_046_source0_data;                                       // agent_pipeline_046:out_data -> avl_adxcfg_0_rcfg_s1_agent:cp_data
	wire          agent_pipeline_046_source0_ready;                                      // avl_adxcfg_0_rcfg_s1_agent:cp_ready -> agent_pipeline_046:out_ready
	wire   [30:0] agent_pipeline_046_source0_channel;                                    // agent_pipeline_046:out_channel -> avl_adxcfg_0_rcfg_s1_agent:cp_channel
	wire          agent_pipeline_046_source0_startofpacket;                              // agent_pipeline_046:out_startofpacket -> avl_adxcfg_0_rcfg_s1_agent:cp_startofpacket
	wire          agent_pipeline_046_source0_endofpacket;                                // agent_pipeline_046:out_endofpacket -> avl_adxcfg_0_rcfg_s1_agent:cp_endofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rp_valid;                                   // avl_adxcfg_0_rcfg_s1_agent:rp_valid -> agent_pipeline_047:in_valid
	wire  [115:0] avl_adxcfg_0_rcfg_s1_agent_rp_data;                                    // avl_adxcfg_0_rcfg_s1_agent:rp_data -> agent_pipeline_047:in_data
	wire          avl_adxcfg_0_rcfg_s1_agent_rp_ready;                                   // agent_pipeline_047:in_ready -> avl_adxcfg_0_rcfg_s1_agent:rp_ready
	wire          avl_adxcfg_0_rcfg_s1_agent_rp_startofpacket;                           // avl_adxcfg_0_rcfg_s1_agent:rp_startofpacket -> agent_pipeline_047:in_startofpacket
	wire          avl_adxcfg_0_rcfg_s1_agent_rp_endofpacket;                             // avl_adxcfg_0_rcfg_s1_agent:rp_endofpacket -> agent_pipeline_047:in_endofpacket
	wire          agent_pipeline_047_source0_valid;                                      // agent_pipeline_047:out_valid -> router_025:sink_valid
	wire  [115:0] agent_pipeline_047_source0_data;                                       // agent_pipeline_047:out_data -> router_025:sink_data
	wire          agent_pipeline_047_source0_ready;                                      // router_025:sink_ready -> agent_pipeline_047:out_ready
	wire          agent_pipeline_047_source0_startofpacket;                              // agent_pipeline_047:out_startofpacket -> router_025:sink_startofpacket
	wire          agent_pipeline_047_source0_endofpacket;                                // agent_pipeline_047:out_endofpacket -> router_025:sink_endofpacket
	wire          avl_adxcfg_1_rcfg_s1_burst_adapter_source0_valid;                      // avl_adxcfg_1_rcfg_s1_burst_adapter:source0_valid -> agent_pipeline_048:in_valid
	wire  [115:0] avl_adxcfg_1_rcfg_s1_burst_adapter_source0_data;                       // avl_adxcfg_1_rcfg_s1_burst_adapter:source0_data -> agent_pipeline_048:in_data
	wire          avl_adxcfg_1_rcfg_s1_burst_adapter_source0_ready;                      // agent_pipeline_048:in_ready -> avl_adxcfg_1_rcfg_s1_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_1_rcfg_s1_burst_adapter_source0_channel;                    // avl_adxcfg_1_rcfg_s1_burst_adapter:source0_channel -> agent_pipeline_048:in_channel
	wire          avl_adxcfg_1_rcfg_s1_burst_adapter_source0_startofpacket;              // avl_adxcfg_1_rcfg_s1_burst_adapter:source0_startofpacket -> agent_pipeline_048:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s1_burst_adapter_source0_endofpacket;                // avl_adxcfg_1_rcfg_s1_burst_adapter:source0_endofpacket -> agent_pipeline_048:in_endofpacket
	wire          agent_pipeline_048_source0_valid;                                      // agent_pipeline_048:out_valid -> avl_adxcfg_1_rcfg_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_048_source0_data;                                       // agent_pipeline_048:out_data -> avl_adxcfg_1_rcfg_s1_agent:cp_data
	wire          agent_pipeline_048_source0_ready;                                      // avl_adxcfg_1_rcfg_s1_agent:cp_ready -> agent_pipeline_048:out_ready
	wire   [30:0] agent_pipeline_048_source0_channel;                                    // agent_pipeline_048:out_channel -> avl_adxcfg_1_rcfg_s1_agent:cp_channel
	wire          agent_pipeline_048_source0_startofpacket;                              // agent_pipeline_048:out_startofpacket -> avl_adxcfg_1_rcfg_s1_agent:cp_startofpacket
	wire          agent_pipeline_048_source0_endofpacket;                                // agent_pipeline_048:out_endofpacket -> avl_adxcfg_1_rcfg_s1_agent:cp_endofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rp_valid;                                   // avl_adxcfg_1_rcfg_s1_agent:rp_valid -> agent_pipeline_049:in_valid
	wire  [115:0] avl_adxcfg_1_rcfg_s1_agent_rp_data;                                    // avl_adxcfg_1_rcfg_s1_agent:rp_data -> agent_pipeline_049:in_data
	wire          avl_adxcfg_1_rcfg_s1_agent_rp_ready;                                   // agent_pipeline_049:in_ready -> avl_adxcfg_1_rcfg_s1_agent:rp_ready
	wire          avl_adxcfg_1_rcfg_s1_agent_rp_startofpacket;                           // avl_adxcfg_1_rcfg_s1_agent:rp_startofpacket -> agent_pipeline_049:in_startofpacket
	wire          avl_adxcfg_1_rcfg_s1_agent_rp_endofpacket;                             // avl_adxcfg_1_rcfg_s1_agent:rp_endofpacket -> agent_pipeline_049:in_endofpacket
	wire          agent_pipeline_049_source0_valid;                                      // agent_pipeline_049:out_valid -> router_026:sink_valid
	wire  [115:0] agent_pipeline_049_source0_data;                                       // agent_pipeline_049:out_data -> router_026:sink_data
	wire          agent_pipeline_049_source0_ready;                                      // router_026:sink_ready -> agent_pipeline_049:out_ready
	wire          agent_pipeline_049_source0_startofpacket;                              // agent_pipeline_049:out_startofpacket -> router_026:sink_startofpacket
	wire          agent_pipeline_049_source0_endofpacket;                                // agent_pipeline_049:out_endofpacket -> router_026:sink_endofpacket
	wire          avl_adxcfg_2_rcfg_s1_burst_adapter_source0_valid;                      // avl_adxcfg_2_rcfg_s1_burst_adapter:source0_valid -> agent_pipeline_050:in_valid
	wire  [115:0] avl_adxcfg_2_rcfg_s1_burst_adapter_source0_data;                       // avl_adxcfg_2_rcfg_s1_burst_adapter:source0_data -> agent_pipeline_050:in_data
	wire          avl_adxcfg_2_rcfg_s1_burst_adapter_source0_ready;                      // agent_pipeline_050:in_ready -> avl_adxcfg_2_rcfg_s1_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_2_rcfg_s1_burst_adapter_source0_channel;                    // avl_adxcfg_2_rcfg_s1_burst_adapter:source0_channel -> agent_pipeline_050:in_channel
	wire          avl_adxcfg_2_rcfg_s1_burst_adapter_source0_startofpacket;              // avl_adxcfg_2_rcfg_s1_burst_adapter:source0_startofpacket -> agent_pipeline_050:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s1_burst_adapter_source0_endofpacket;                // avl_adxcfg_2_rcfg_s1_burst_adapter:source0_endofpacket -> agent_pipeline_050:in_endofpacket
	wire          agent_pipeline_050_source0_valid;                                      // agent_pipeline_050:out_valid -> avl_adxcfg_2_rcfg_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_050_source0_data;                                       // agent_pipeline_050:out_data -> avl_adxcfg_2_rcfg_s1_agent:cp_data
	wire          agent_pipeline_050_source0_ready;                                      // avl_adxcfg_2_rcfg_s1_agent:cp_ready -> agent_pipeline_050:out_ready
	wire   [30:0] agent_pipeline_050_source0_channel;                                    // agent_pipeline_050:out_channel -> avl_adxcfg_2_rcfg_s1_agent:cp_channel
	wire          agent_pipeline_050_source0_startofpacket;                              // agent_pipeline_050:out_startofpacket -> avl_adxcfg_2_rcfg_s1_agent:cp_startofpacket
	wire          agent_pipeline_050_source0_endofpacket;                                // agent_pipeline_050:out_endofpacket -> avl_adxcfg_2_rcfg_s1_agent:cp_endofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rp_valid;                                   // avl_adxcfg_2_rcfg_s1_agent:rp_valid -> agent_pipeline_051:in_valid
	wire  [115:0] avl_adxcfg_2_rcfg_s1_agent_rp_data;                                    // avl_adxcfg_2_rcfg_s1_agent:rp_data -> agent_pipeline_051:in_data
	wire          avl_adxcfg_2_rcfg_s1_agent_rp_ready;                                   // agent_pipeline_051:in_ready -> avl_adxcfg_2_rcfg_s1_agent:rp_ready
	wire          avl_adxcfg_2_rcfg_s1_agent_rp_startofpacket;                           // avl_adxcfg_2_rcfg_s1_agent:rp_startofpacket -> agent_pipeline_051:in_startofpacket
	wire          avl_adxcfg_2_rcfg_s1_agent_rp_endofpacket;                             // avl_adxcfg_2_rcfg_s1_agent:rp_endofpacket -> agent_pipeline_051:in_endofpacket
	wire          agent_pipeline_051_source0_valid;                                      // agent_pipeline_051:out_valid -> router_027:sink_valid
	wire  [115:0] agent_pipeline_051_source0_data;                                       // agent_pipeline_051:out_data -> router_027:sink_data
	wire          agent_pipeline_051_source0_ready;                                      // router_027:sink_ready -> agent_pipeline_051:out_ready
	wire          agent_pipeline_051_source0_startofpacket;                              // agent_pipeline_051:out_startofpacket -> router_027:sink_startofpacket
	wire          agent_pipeline_051_source0_endofpacket;                                // agent_pipeline_051:out_endofpacket -> router_027:sink_endofpacket
	wire          avl_adxcfg_3_rcfg_s1_burst_adapter_source0_valid;                      // avl_adxcfg_3_rcfg_s1_burst_adapter:source0_valid -> agent_pipeline_052:in_valid
	wire  [115:0] avl_adxcfg_3_rcfg_s1_burst_adapter_source0_data;                       // avl_adxcfg_3_rcfg_s1_burst_adapter:source0_data -> agent_pipeline_052:in_data
	wire          avl_adxcfg_3_rcfg_s1_burst_adapter_source0_ready;                      // agent_pipeline_052:in_ready -> avl_adxcfg_3_rcfg_s1_burst_adapter:source0_ready
	wire   [30:0] avl_adxcfg_3_rcfg_s1_burst_adapter_source0_channel;                    // avl_adxcfg_3_rcfg_s1_burst_adapter:source0_channel -> agent_pipeline_052:in_channel
	wire          avl_adxcfg_3_rcfg_s1_burst_adapter_source0_startofpacket;              // avl_adxcfg_3_rcfg_s1_burst_adapter:source0_startofpacket -> agent_pipeline_052:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s1_burst_adapter_source0_endofpacket;                // avl_adxcfg_3_rcfg_s1_burst_adapter:source0_endofpacket -> agent_pipeline_052:in_endofpacket
	wire          agent_pipeline_052_source0_valid;                                      // agent_pipeline_052:out_valid -> avl_adxcfg_3_rcfg_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_052_source0_data;                                       // agent_pipeline_052:out_data -> avl_adxcfg_3_rcfg_s1_agent:cp_data
	wire          agent_pipeline_052_source0_ready;                                      // avl_adxcfg_3_rcfg_s1_agent:cp_ready -> agent_pipeline_052:out_ready
	wire   [30:0] agent_pipeline_052_source0_channel;                                    // agent_pipeline_052:out_channel -> avl_adxcfg_3_rcfg_s1_agent:cp_channel
	wire          agent_pipeline_052_source0_startofpacket;                              // agent_pipeline_052:out_startofpacket -> avl_adxcfg_3_rcfg_s1_agent:cp_startofpacket
	wire          agent_pipeline_052_source0_endofpacket;                                // agent_pipeline_052:out_endofpacket -> avl_adxcfg_3_rcfg_s1_agent:cp_endofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rp_valid;                                   // avl_adxcfg_3_rcfg_s1_agent:rp_valid -> agent_pipeline_053:in_valid
	wire  [115:0] avl_adxcfg_3_rcfg_s1_agent_rp_data;                                    // avl_adxcfg_3_rcfg_s1_agent:rp_data -> agent_pipeline_053:in_data
	wire          avl_adxcfg_3_rcfg_s1_agent_rp_ready;                                   // agent_pipeline_053:in_ready -> avl_adxcfg_3_rcfg_s1_agent:rp_ready
	wire          avl_adxcfg_3_rcfg_s1_agent_rp_startofpacket;                           // avl_adxcfg_3_rcfg_s1_agent:rp_startofpacket -> agent_pipeline_053:in_startofpacket
	wire          avl_adxcfg_3_rcfg_s1_agent_rp_endofpacket;                             // avl_adxcfg_3_rcfg_s1_agent:rp_endofpacket -> agent_pipeline_053:in_endofpacket
	wire          agent_pipeline_053_source0_valid;                                      // agent_pipeline_053:out_valid -> router_028:sink_valid
	wire  [115:0] agent_pipeline_053_source0_data;                                       // agent_pipeline_053:out_data -> router_028:sink_data
	wire          agent_pipeline_053_source0_ready;                                      // router_028:sink_ready -> agent_pipeline_053:out_ready
	wire          agent_pipeline_053_source0_startofpacket;                              // agent_pipeline_053:out_startofpacket -> router_028:sink_startofpacket
	wire          agent_pipeline_053_source0_endofpacket;                                // agent_pipeline_053:out_endofpacket -> router_028:sink_endofpacket
	wire          sys_gpio_bd_s1_burst_adapter_source0_valid;                            // sys_gpio_bd_s1_burst_adapter:source0_valid -> agent_pipeline_054:in_valid
	wire  [115:0] sys_gpio_bd_s1_burst_adapter_source0_data;                             // sys_gpio_bd_s1_burst_adapter:source0_data -> agent_pipeline_054:in_data
	wire          sys_gpio_bd_s1_burst_adapter_source0_ready;                            // agent_pipeline_054:in_ready -> sys_gpio_bd_s1_burst_adapter:source0_ready
	wire   [30:0] sys_gpio_bd_s1_burst_adapter_source0_channel;                          // sys_gpio_bd_s1_burst_adapter:source0_channel -> agent_pipeline_054:in_channel
	wire          sys_gpio_bd_s1_burst_adapter_source0_startofpacket;                    // sys_gpio_bd_s1_burst_adapter:source0_startofpacket -> agent_pipeline_054:in_startofpacket
	wire          sys_gpio_bd_s1_burst_adapter_source0_endofpacket;                      // sys_gpio_bd_s1_burst_adapter:source0_endofpacket -> agent_pipeline_054:in_endofpacket
	wire          agent_pipeline_054_source0_valid;                                      // agent_pipeline_054:out_valid -> sys_gpio_bd_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_054_source0_data;                                       // agent_pipeline_054:out_data -> sys_gpio_bd_s1_agent:cp_data
	wire          agent_pipeline_054_source0_ready;                                      // sys_gpio_bd_s1_agent:cp_ready -> agent_pipeline_054:out_ready
	wire   [30:0] agent_pipeline_054_source0_channel;                                    // agent_pipeline_054:out_channel -> sys_gpio_bd_s1_agent:cp_channel
	wire          agent_pipeline_054_source0_startofpacket;                              // agent_pipeline_054:out_startofpacket -> sys_gpio_bd_s1_agent:cp_startofpacket
	wire          agent_pipeline_054_source0_endofpacket;                                // agent_pipeline_054:out_endofpacket -> sys_gpio_bd_s1_agent:cp_endofpacket
	wire          sys_gpio_bd_s1_agent_rp_valid;                                         // sys_gpio_bd_s1_agent:rp_valid -> agent_pipeline_055:in_valid
	wire  [115:0] sys_gpio_bd_s1_agent_rp_data;                                          // sys_gpio_bd_s1_agent:rp_data -> agent_pipeline_055:in_data
	wire          sys_gpio_bd_s1_agent_rp_ready;                                         // agent_pipeline_055:in_ready -> sys_gpio_bd_s1_agent:rp_ready
	wire          sys_gpio_bd_s1_agent_rp_startofpacket;                                 // sys_gpio_bd_s1_agent:rp_startofpacket -> agent_pipeline_055:in_startofpacket
	wire          sys_gpio_bd_s1_agent_rp_endofpacket;                                   // sys_gpio_bd_s1_agent:rp_endofpacket -> agent_pipeline_055:in_endofpacket
	wire          agent_pipeline_055_source0_valid;                                      // agent_pipeline_055:out_valid -> router_029:sink_valid
	wire  [115:0] agent_pipeline_055_source0_data;                                       // agent_pipeline_055:out_data -> router_029:sink_data
	wire          agent_pipeline_055_source0_ready;                                      // router_029:sink_ready -> agent_pipeline_055:out_ready
	wire          agent_pipeline_055_source0_startofpacket;                              // agent_pipeline_055:out_startofpacket -> router_029:sink_startofpacket
	wire          agent_pipeline_055_source0_endofpacket;                                // agent_pipeline_055:out_endofpacket -> router_029:sink_endofpacket
	wire          sys_gpio_in_s1_burst_adapter_source0_valid;                            // sys_gpio_in_s1_burst_adapter:source0_valid -> agent_pipeline_056:in_valid
	wire  [115:0] sys_gpio_in_s1_burst_adapter_source0_data;                             // sys_gpio_in_s1_burst_adapter:source0_data -> agent_pipeline_056:in_data
	wire          sys_gpio_in_s1_burst_adapter_source0_ready;                            // agent_pipeline_056:in_ready -> sys_gpio_in_s1_burst_adapter:source0_ready
	wire   [30:0] sys_gpio_in_s1_burst_adapter_source0_channel;                          // sys_gpio_in_s1_burst_adapter:source0_channel -> agent_pipeline_056:in_channel
	wire          sys_gpio_in_s1_burst_adapter_source0_startofpacket;                    // sys_gpio_in_s1_burst_adapter:source0_startofpacket -> agent_pipeline_056:in_startofpacket
	wire          sys_gpio_in_s1_burst_adapter_source0_endofpacket;                      // sys_gpio_in_s1_burst_adapter:source0_endofpacket -> agent_pipeline_056:in_endofpacket
	wire          agent_pipeline_056_source0_valid;                                      // agent_pipeline_056:out_valid -> sys_gpio_in_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_056_source0_data;                                       // agent_pipeline_056:out_data -> sys_gpio_in_s1_agent:cp_data
	wire          agent_pipeline_056_source0_ready;                                      // sys_gpio_in_s1_agent:cp_ready -> agent_pipeline_056:out_ready
	wire   [30:0] agent_pipeline_056_source0_channel;                                    // agent_pipeline_056:out_channel -> sys_gpio_in_s1_agent:cp_channel
	wire          agent_pipeline_056_source0_startofpacket;                              // agent_pipeline_056:out_startofpacket -> sys_gpio_in_s1_agent:cp_startofpacket
	wire          agent_pipeline_056_source0_endofpacket;                                // agent_pipeline_056:out_endofpacket -> sys_gpio_in_s1_agent:cp_endofpacket
	wire          sys_gpio_in_s1_agent_rp_valid;                                         // sys_gpio_in_s1_agent:rp_valid -> agent_pipeline_057:in_valid
	wire  [115:0] sys_gpio_in_s1_agent_rp_data;                                          // sys_gpio_in_s1_agent:rp_data -> agent_pipeline_057:in_data
	wire          sys_gpio_in_s1_agent_rp_ready;                                         // agent_pipeline_057:in_ready -> sys_gpio_in_s1_agent:rp_ready
	wire          sys_gpio_in_s1_agent_rp_startofpacket;                                 // sys_gpio_in_s1_agent:rp_startofpacket -> agent_pipeline_057:in_startofpacket
	wire          sys_gpio_in_s1_agent_rp_endofpacket;                                   // sys_gpio_in_s1_agent:rp_endofpacket -> agent_pipeline_057:in_endofpacket
	wire          agent_pipeline_057_source0_valid;                                      // agent_pipeline_057:out_valid -> router_030:sink_valid
	wire  [115:0] agent_pipeline_057_source0_data;                                       // agent_pipeline_057:out_data -> router_030:sink_data
	wire          agent_pipeline_057_source0_ready;                                      // router_030:sink_ready -> agent_pipeline_057:out_ready
	wire          agent_pipeline_057_source0_startofpacket;                              // agent_pipeline_057:out_startofpacket -> router_030:sink_startofpacket
	wire          agent_pipeline_057_source0_endofpacket;                                // agent_pipeline_057:out_endofpacket -> router_030:sink_endofpacket
	wire          sys_gpio_out_s1_burst_adapter_source0_valid;                           // sys_gpio_out_s1_burst_adapter:source0_valid -> agent_pipeline_058:in_valid
	wire  [115:0] sys_gpio_out_s1_burst_adapter_source0_data;                            // sys_gpio_out_s1_burst_adapter:source0_data -> agent_pipeline_058:in_data
	wire          sys_gpio_out_s1_burst_adapter_source0_ready;                           // agent_pipeline_058:in_ready -> sys_gpio_out_s1_burst_adapter:source0_ready
	wire   [30:0] sys_gpio_out_s1_burst_adapter_source0_channel;                         // sys_gpio_out_s1_burst_adapter:source0_channel -> agent_pipeline_058:in_channel
	wire          sys_gpio_out_s1_burst_adapter_source0_startofpacket;                   // sys_gpio_out_s1_burst_adapter:source0_startofpacket -> agent_pipeline_058:in_startofpacket
	wire          sys_gpio_out_s1_burst_adapter_source0_endofpacket;                     // sys_gpio_out_s1_burst_adapter:source0_endofpacket -> agent_pipeline_058:in_endofpacket
	wire          agent_pipeline_058_source0_valid;                                      // agent_pipeline_058:out_valid -> sys_gpio_out_s1_agent:cp_valid
	wire  [115:0] agent_pipeline_058_source0_data;                                       // agent_pipeline_058:out_data -> sys_gpio_out_s1_agent:cp_data
	wire          agent_pipeline_058_source0_ready;                                      // sys_gpio_out_s1_agent:cp_ready -> agent_pipeline_058:out_ready
	wire   [30:0] agent_pipeline_058_source0_channel;                                    // agent_pipeline_058:out_channel -> sys_gpio_out_s1_agent:cp_channel
	wire          agent_pipeline_058_source0_startofpacket;                              // agent_pipeline_058:out_startofpacket -> sys_gpio_out_s1_agent:cp_startofpacket
	wire          agent_pipeline_058_source0_endofpacket;                                // agent_pipeline_058:out_endofpacket -> sys_gpio_out_s1_agent:cp_endofpacket
	wire          sys_gpio_out_s1_agent_rp_valid;                                        // sys_gpio_out_s1_agent:rp_valid -> agent_pipeline_059:in_valid
	wire  [115:0] sys_gpio_out_s1_agent_rp_data;                                         // sys_gpio_out_s1_agent:rp_data -> agent_pipeline_059:in_data
	wire          sys_gpio_out_s1_agent_rp_ready;                                        // agent_pipeline_059:in_ready -> sys_gpio_out_s1_agent:rp_ready
	wire          sys_gpio_out_s1_agent_rp_startofpacket;                                // sys_gpio_out_s1_agent:rp_startofpacket -> agent_pipeline_059:in_startofpacket
	wire          sys_gpio_out_s1_agent_rp_endofpacket;                                  // sys_gpio_out_s1_agent:rp_endofpacket -> agent_pipeline_059:in_endofpacket
	wire          agent_pipeline_059_source0_valid;                                      // agent_pipeline_059:out_valid -> router_031:sink_valid
	wire  [115:0] agent_pipeline_059_source0_data;                                       // agent_pipeline_059:out_data -> router_031:sink_data
	wire          agent_pipeline_059_source0_ready;                                      // router_031:sink_ready -> agent_pipeline_059:out_ready
	wire          agent_pipeline_059_source0_startofpacket;                              // agent_pipeline_059:out_startofpacket -> router_031:sink_startofpacket
	wire          agent_pipeline_059_source0_endofpacket;                                // agent_pipeline_059:out_endofpacket -> router_031:sink_endofpacket
	wire          sys_spi_spi_control_port_burst_adapter_source0_valid;                  // sys_spi_spi_control_port_burst_adapter:source0_valid -> agent_pipeline_060:in_valid
	wire  [115:0] sys_spi_spi_control_port_burst_adapter_source0_data;                   // sys_spi_spi_control_port_burst_adapter:source0_data -> agent_pipeline_060:in_data
	wire          sys_spi_spi_control_port_burst_adapter_source0_ready;                  // agent_pipeline_060:in_ready -> sys_spi_spi_control_port_burst_adapter:source0_ready
	wire   [30:0] sys_spi_spi_control_port_burst_adapter_source0_channel;                // sys_spi_spi_control_port_burst_adapter:source0_channel -> agent_pipeline_060:in_channel
	wire          sys_spi_spi_control_port_burst_adapter_source0_startofpacket;          // sys_spi_spi_control_port_burst_adapter:source0_startofpacket -> agent_pipeline_060:in_startofpacket
	wire          sys_spi_spi_control_port_burst_adapter_source0_endofpacket;            // sys_spi_spi_control_port_burst_adapter:source0_endofpacket -> agent_pipeline_060:in_endofpacket
	wire          agent_pipeline_060_source0_valid;                                      // agent_pipeline_060:out_valid -> sys_spi_spi_control_port_agent:cp_valid
	wire  [115:0] agent_pipeline_060_source0_data;                                       // agent_pipeline_060:out_data -> sys_spi_spi_control_port_agent:cp_data
	wire          agent_pipeline_060_source0_ready;                                      // sys_spi_spi_control_port_agent:cp_ready -> agent_pipeline_060:out_ready
	wire   [30:0] agent_pipeline_060_source0_channel;                                    // agent_pipeline_060:out_channel -> sys_spi_spi_control_port_agent:cp_channel
	wire          agent_pipeline_060_source0_startofpacket;                              // agent_pipeline_060:out_startofpacket -> sys_spi_spi_control_port_agent:cp_startofpacket
	wire          agent_pipeline_060_source0_endofpacket;                                // agent_pipeline_060:out_endofpacket -> sys_spi_spi_control_port_agent:cp_endofpacket
	wire          sys_spi_spi_control_port_agent_rp_valid;                               // sys_spi_spi_control_port_agent:rp_valid -> agent_pipeline_061:in_valid
	wire  [115:0] sys_spi_spi_control_port_agent_rp_data;                                // sys_spi_spi_control_port_agent:rp_data -> agent_pipeline_061:in_data
	wire          sys_spi_spi_control_port_agent_rp_ready;                               // agent_pipeline_061:in_ready -> sys_spi_spi_control_port_agent:rp_ready
	wire          sys_spi_spi_control_port_agent_rp_startofpacket;                       // sys_spi_spi_control_port_agent:rp_startofpacket -> agent_pipeline_061:in_startofpacket
	wire          sys_spi_spi_control_port_agent_rp_endofpacket;                         // sys_spi_spi_control_port_agent:rp_endofpacket -> agent_pipeline_061:in_endofpacket
	wire          agent_pipeline_061_source0_valid;                                      // agent_pipeline_061:out_valid -> router_032:sink_valid
	wire  [115:0] agent_pipeline_061_source0_data;                                       // agent_pipeline_061:out_data -> router_032:sink_data
	wire          agent_pipeline_061_source0_ready;                                      // router_032:sink_ready -> agent_pipeline_061:out_ready
	wire          agent_pipeline_061_source0_startofpacket;                              // agent_pipeline_061:out_startofpacket -> router_032:sink_startofpacket
	wire          agent_pipeline_061_source0_endofpacket;                                // agent_pipeline_061:out_endofpacket -> router_032:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [115:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                  // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire   [30:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                            // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [115:0] mux_pipeline_source0_data;                                             // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                            // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [30:0] mux_pipeline_source0_channel;                                          // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                    // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                      // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                              // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [115:0] cmd_demux_001_src0_data;                                               // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                              // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire   [30:0] cmd_demux_001_src0_channel;                                            // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                      // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                        // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                        // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] mux_pipeline_001_source0_data;                                         // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                        // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire   [30:0] mux_pipeline_001_source0_channel;                                      // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                  // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                  // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [115:0] cmd_demux_src1_data;                                                   // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                                  // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire   [30:0] cmd_demux_src1_channel;                                                // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                          // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                            // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                        // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] mux_pipeline_002_source0_data;                                         // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                        // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire   [30:0] mux_pipeline_002_source0_channel;                                      // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                  // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                              // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [115:0] cmd_demux_001_src1_data;                                               // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                              // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire   [30:0] cmd_demux_001_src1_channel;                                            // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                      // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                        // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                        // mux_pipeline_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] mux_pipeline_003_source0_data;                                         // mux_pipeline_003:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_003_source0_ready;                                        // cmd_mux_003:sink0_ready -> mux_pipeline_003:out_ready
	wire   [30:0] mux_pipeline_003_source0_channel;                                      // mux_pipeline_003:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                // mux_pipeline_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                  // mux_pipeline_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                  // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [115:0] cmd_demux_src2_data;                                                   // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                  // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire   [30:0] cmd_demux_src2_channel;                                                // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                          // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                            // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                        // mux_pipeline_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] mux_pipeline_004_source0_data;                                         // mux_pipeline_004:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_004_source0_ready;                                        // cmd_mux_004:sink0_ready -> mux_pipeline_004:out_ready
	wire   [30:0] mux_pipeline_004_source0_channel;                                      // mux_pipeline_004:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                // mux_pipeline_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                  // mux_pipeline_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                              // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [115:0] cmd_demux_001_src2_data;                                               // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                              // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire   [30:0] cmd_demux_001_src2_channel;                                            // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                      // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                        // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                        // mux_pipeline_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] mux_pipeline_005_source0_data;                                         // mux_pipeline_005:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_005_source0_ready;                                        // cmd_mux_005:sink0_ready -> mux_pipeline_005:out_ready
	wire   [30:0] mux_pipeline_005_source0_channel;                                      // mux_pipeline_005:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                // mux_pipeline_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                  // mux_pipeline_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                  // cmd_demux:src3_valid -> mux_pipeline_006:in_valid
	wire  [115:0] cmd_demux_src3_data;                                                   // cmd_demux:src3_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src3_ready;                                                  // mux_pipeline_006:in_ready -> cmd_demux:src3_ready
	wire   [30:0] cmd_demux_src3_channel;                                                // cmd_demux:src3_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src3_startofpacket;                                          // cmd_demux:src3_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                            // cmd_demux:src3_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                        // mux_pipeline_006:out_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] mux_pipeline_006_source0_data;                                         // mux_pipeline_006:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_006_source0_ready;                                        // cmd_mux_006:sink0_ready -> mux_pipeline_006:out_ready
	wire   [30:0] mux_pipeline_006_source0_channel;                                      // mux_pipeline_006:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                // mux_pipeline_006:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                  // mux_pipeline_006:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                              // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire  [115:0] cmd_demux_001_src3_data;                                               // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                              // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire   [30:0] cmd_demux_001_src3_channel;                                            // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                      // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                        // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                        // mux_pipeline_007:out_valid -> cmd_mux_007:sink0_valid
	wire  [115:0] mux_pipeline_007_source0_data;                                         // mux_pipeline_007:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_007_source0_ready;                                        // cmd_mux_007:sink0_ready -> mux_pipeline_007:out_ready
	wire   [30:0] mux_pipeline_007_source0_channel;                                      // mux_pipeline_007:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                // mux_pipeline_007:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                  // mux_pipeline_007:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                  // cmd_demux:src4_valid -> mux_pipeline_008:in_valid
	wire  [115:0] cmd_demux_src4_data;                                                   // cmd_demux:src4_data -> mux_pipeline_008:in_data
	wire          cmd_demux_src4_ready;                                                  // mux_pipeline_008:in_ready -> cmd_demux:src4_ready
	wire   [30:0] cmd_demux_src4_channel;                                                // cmd_demux:src4_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_src4_startofpacket;                                          // cmd_demux:src4_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                            // cmd_demux:src4_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                        // mux_pipeline_008:out_valid -> cmd_mux_008:sink0_valid
	wire  [115:0] mux_pipeline_008_source0_data;                                         // mux_pipeline_008:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_008_source0_ready;                                        // cmd_mux_008:sink0_ready -> mux_pipeline_008:out_ready
	wire   [30:0] mux_pipeline_008_source0_channel;                                      // mux_pipeline_008:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                // mux_pipeline_008:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                  // mux_pipeline_008:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                              // cmd_demux_001:src4_valid -> mux_pipeline_009:in_valid
	wire  [115:0] cmd_demux_001_src4_data;                                               // cmd_demux_001:src4_data -> mux_pipeline_009:in_data
	wire          cmd_demux_001_src4_ready;                                              // mux_pipeline_009:in_ready -> cmd_demux_001:src4_ready
	wire   [30:0] cmd_demux_001_src4_channel;                                            // cmd_demux_001:src4_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                      // cmd_demux_001:src4_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                        // cmd_demux_001:src4_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                        // mux_pipeline_009:out_valid -> cmd_mux_009:sink0_valid
	wire  [115:0] mux_pipeline_009_source0_data;                                         // mux_pipeline_009:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_009_source0_ready;                                        // cmd_mux_009:sink0_ready -> mux_pipeline_009:out_ready
	wire   [30:0] mux_pipeline_009_source0_channel;                                      // mux_pipeline_009:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_009_source0_startofpacket;                                // mux_pipeline_009:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                  // mux_pipeline_009:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                  // cmd_demux:src5_valid -> mux_pipeline_010:in_valid
	wire  [115:0] cmd_demux_src5_data;                                                   // cmd_demux:src5_data -> mux_pipeline_010:in_data
	wire          cmd_demux_src5_ready;                                                  // mux_pipeline_010:in_ready -> cmd_demux:src5_ready
	wire   [30:0] cmd_demux_src5_channel;                                                // cmd_demux:src5_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_src5_startofpacket;                                          // cmd_demux:src5_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                            // cmd_demux:src5_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                        // mux_pipeline_010:out_valid -> cmd_mux_010:sink0_valid
	wire  [115:0] mux_pipeline_010_source0_data;                                         // mux_pipeline_010:out_data -> cmd_mux_010:sink0_data
	wire          mux_pipeline_010_source0_ready;                                        // cmd_mux_010:sink0_ready -> mux_pipeline_010:out_ready
	wire   [30:0] mux_pipeline_010_source0_channel;                                      // mux_pipeline_010:out_channel -> cmd_mux_010:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                // mux_pipeline_010:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                  // mux_pipeline_010:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                              // cmd_demux_001:src5_valid -> mux_pipeline_011:in_valid
	wire  [115:0] cmd_demux_001_src5_data;                                               // cmd_demux_001:src5_data -> mux_pipeline_011:in_data
	wire          cmd_demux_001_src5_ready;                                              // mux_pipeline_011:in_ready -> cmd_demux_001:src5_ready
	wire   [30:0] cmd_demux_001_src5_channel;                                            // cmd_demux_001:src5_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                      // cmd_demux_001:src5_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                        // cmd_demux_001:src5_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                        // mux_pipeline_011:out_valid -> cmd_mux_011:sink0_valid
	wire  [115:0] mux_pipeline_011_source0_data;                                         // mux_pipeline_011:out_data -> cmd_mux_011:sink0_data
	wire          mux_pipeline_011_source0_ready;                                        // cmd_mux_011:sink0_ready -> mux_pipeline_011:out_ready
	wire   [30:0] mux_pipeline_011_source0_channel;                                      // mux_pipeline_011:out_channel -> cmd_mux_011:sink0_channel
	wire          mux_pipeline_011_source0_startofpacket;                                // mux_pipeline_011:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                  // mux_pipeline_011:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                  // cmd_demux:src6_valid -> mux_pipeline_012:in_valid
	wire  [115:0] cmd_demux_src6_data;                                                   // cmd_demux:src6_data -> mux_pipeline_012:in_data
	wire          cmd_demux_src6_ready;                                                  // mux_pipeline_012:in_ready -> cmd_demux:src6_ready
	wire   [30:0] cmd_demux_src6_channel;                                                // cmd_demux:src6_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_src6_startofpacket;                                          // cmd_demux:src6_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                            // cmd_demux:src6_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                        // mux_pipeline_012:out_valid -> cmd_mux_012:sink0_valid
	wire  [115:0] mux_pipeline_012_source0_data;                                         // mux_pipeline_012:out_data -> cmd_mux_012:sink0_data
	wire          mux_pipeline_012_source0_ready;                                        // cmd_mux_012:sink0_ready -> mux_pipeline_012:out_ready
	wire   [30:0] mux_pipeline_012_source0_channel;                                      // mux_pipeline_012:out_channel -> cmd_mux_012:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                                // mux_pipeline_012:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                  // mux_pipeline_012:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                              // cmd_demux_001:src6_valid -> mux_pipeline_013:in_valid
	wire  [115:0] cmd_demux_001_src6_data;                                               // cmd_demux_001:src6_data -> mux_pipeline_013:in_data
	wire          cmd_demux_001_src6_ready;                                              // mux_pipeline_013:in_ready -> cmd_demux_001:src6_ready
	wire   [30:0] cmd_demux_001_src6_channel;                                            // cmd_demux_001:src6_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                      // cmd_demux_001:src6_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                        // cmd_demux_001:src6_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                        // mux_pipeline_013:out_valid -> cmd_mux_013:sink0_valid
	wire  [115:0] mux_pipeline_013_source0_data;                                         // mux_pipeline_013:out_data -> cmd_mux_013:sink0_data
	wire          mux_pipeline_013_source0_ready;                                        // cmd_mux_013:sink0_ready -> mux_pipeline_013:out_ready
	wire   [30:0] mux_pipeline_013_source0_channel;                                      // mux_pipeline_013:out_channel -> cmd_mux_013:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                // mux_pipeline_013:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                  // mux_pipeline_013:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                  // cmd_demux:src7_valid -> mux_pipeline_014:in_valid
	wire  [115:0] cmd_demux_src7_data;                                                   // cmd_demux:src7_data -> mux_pipeline_014:in_data
	wire          cmd_demux_src7_ready;                                                  // mux_pipeline_014:in_ready -> cmd_demux:src7_ready
	wire   [30:0] cmd_demux_src7_channel;                                                // cmd_demux:src7_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_src7_startofpacket;                                          // cmd_demux:src7_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                            // cmd_demux:src7_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                        // mux_pipeline_014:out_valid -> cmd_mux_014:sink0_valid
	wire  [115:0] mux_pipeline_014_source0_data;                                         // mux_pipeline_014:out_data -> cmd_mux_014:sink0_data
	wire          mux_pipeline_014_source0_ready;                                        // cmd_mux_014:sink0_ready -> mux_pipeline_014:out_ready
	wire   [30:0] mux_pipeline_014_source0_channel;                                      // mux_pipeline_014:out_channel -> cmd_mux_014:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                // mux_pipeline_014:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                  // mux_pipeline_014:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                              // cmd_demux_001:src7_valid -> mux_pipeline_015:in_valid
	wire  [115:0] cmd_demux_001_src7_data;                                               // cmd_demux_001:src7_data -> mux_pipeline_015:in_data
	wire          cmd_demux_001_src7_ready;                                              // mux_pipeline_015:in_ready -> cmd_demux_001:src7_ready
	wire   [30:0] cmd_demux_001_src7_channel;                                            // cmd_demux_001:src7_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_001_src7_startofpacket;                                      // cmd_demux_001:src7_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                        // cmd_demux_001:src7_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                        // mux_pipeline_015:out_valid -> cmd_mux_015:sink0_valid
	wire  [115:0] mux_pipeline_015_source0_data;                                         // mux_pipeline_015:out_data -> cmd_mux_015:sink0_data
	wire          mux_pipeline_015_source0_ready;                                        // cmd_mux_015:sink0_ready -> mux_pipeline_015:out_ready
	wire   [30:0] mux_pipeline_015_source0_channel;                                      // mux_pipeline_015:out_channel -> cmd_mux_015:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                // mux_pipeline_015:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                  // mux_pipeline_015:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                  // cmd_demux:src8_valid -> mux_pipeline_016:in_valid
	wire  [115:0] cmd_demux_src8_data;                                                   // cmd_demux:src8_data -> mux_pipeline_016:in_data
	wire          cmd_demux_src8_ready;                                                  // mux_pipeline_016:in_ready -> cmd_demux:src8_ready
	wire   [30:0] cmd_demux_src8_channel;                                                // cmd_demux:src8_channel -> mux_pipeline_016:in_channel
	wire          cmd_demux_src8_startofpacket;                                          // cmd_demux:src8_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                            // cmd_demux:src8_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                        // mux_pipeline_016:out_valid -> cmd_mux_016:sink0_valid
	wire  [115:0] mux_pipeline_016_source0_data;                                         // mux_pipeline_016:out_data -> cmd_mux_016:sink0_data
	wire          mux_pipeline_016_source0_ready;                                        // cmd_mux_016:sink0_ready -> mux_pipeline_016:out_ready
	wire   [30:0] mux_pipeline_016_source0_channel;                                      // mux_pipeline_016:out_channel -> cmd_mux_016:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                                // mux_pipeline_016:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                  // mux_pipeline_016:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                              // cmd_demux_001:src8_valid -> mux_pipeline_017:in_valid
	wire  [115:0] cmd_demux_001_src8_data;                                               // cmd_demux_001:src8_data -> mux_pipeline_017:in_data
	wire          cmd_demux_001_src8_ready;                                              // mux_pipeline_017:in_ready -> cmd_demux_001:src8_ready
	wire   [30:0] cmd_demux_001_src8_channel;                                            // cmd_demux_001:src8_channel -> mux_pipeline_017:in_channel
	wire          cmd_demux_001_src8_startofpacket;                                      // cmd_demux_001:src8_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                        // cmd_demux_001:src8_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                        // mux_pipeline_017:out_valid -> cmd_mux_016:sink1_valid
	wire  [115:0] mux_pipeline_017_source0_data;                                         // mux_pipeline_017:out_data -> cmd_mux_016:sink1_data
	wire          mux_pipeline_017_source0_ready;                                        // cmd_mux_016:sink1_ready -> mux_pipeline_017:out_ready
	wire   [30:0] mux_pipeline_017_source0_channel;                                      // mux_pipeline_017:out_channel -> cmd_mux_016:sink1_channel
	wire          mux_pipeline_017_source0_startofpacket;                                // mux_pipeline_017:out_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                  // mux_pipeline_017:out_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_src9_valid;                                                  // cmd_demux:src9_valid -> mux_pipeline_018:in_valid
	wire  [115:0] cmd_demux_src9_data;                                                   // cmd_demux:src9_data -> mux_pipeline_018:in_data
	wire          cmd_demux_src9_ready;                                                  // mux_pipeline_018:in_ready -> cmd_demux:src9_ready
	wire   [30:0] cmd_demux_src9_channel;                                                // cmd_demux:src9_channel -> mux_pipeline_018:in_channel
	wire          cmd_demux_src9_startofpacket;                                          // cmd_demux:src9_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                            // cmd_demux:src9_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                        // mux_pipeline_018:out_valid -> cmd_mux_017:sink0_valid
	wire  [115:0] mux_pipeline_018_source0_data;                                         // mux_pipeline_018:out_data -> cmd_mux_017:sink0_data
	wire          mux_pipeline_018_source0_ready;                                        // cmd_mux_017:sink0_ready -> mux_pipeline_018:out_ready
	wire   [30:0] mux_pipeline_018_source0_channel;                                      // mux_pipeline_018:out_channel -> cmd_mux_017:sink0_channel
	wire          mux_pipeline_018_source0_startofpacket;                                // mux_pipeline_018:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                  // mux_pipeline_018:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                              // cmd_demux_001:src9_valid -> mux_pipeline_019:in_valid
	wire  [115:0] cmd_demux_001_src9_data;                                               // cmd_demux_001:src9_data -> mux_pipeline_019:in_data
	wire          cmd_demux_001_src9_ready;                                              // mux_pipeline_019:in_ready -> cmd_demux_001:src9_ready
	wire   [30:0] cmd_demux_001_src9_channel;                                            // cmd_demux_001:src9_channel -> mux_pipeline_019:in_channel
	wire          cmd_demux_001_src9_startofpacket;                                      // cmd_demux_001:src9_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                        // cmd_demux_001:src9_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                        // mux_pipeline_019:out_valid -> cmd_mux_017:sink1_valid
	wire  [115:0] mux_pipeline_019_source0_data;                                         // mux_pipeline_019:out_data -> cmd_mux_017:sink1_data
	wire          mux_pipeline_019_source0_ready;                                        // cmd_mux_017:sink1_ready -> mux_pipeline_019:out_ready
	wire   [30:0] mux_pipeline_019_source0_channel;                                      // mux_pipeline_019:out_channel -> cmd_mux_017:sink1_channel
	wire          mux_pipeline_019_source0_startofpacket;                                // mux_pipeline_019:out_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                  // mux_pipeline_019:out_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_src10_valid;                                                 // cmd_demux:src10_valid -> mux_pipeline_020:in_valid
	wire  [115:0] cmd_demux_src10_data;                                                  // cmd_demux:src10_data -> mux_pipeline_020:in_data
	wire          cmd_demux_src10_ready;                                                 // mux_pipeline_020:in_ready -> cmd_demux:src10_ready
	wire   [30:0] cmd_demux_src10_channel;                                               // cmd_demux:src10_channel -> mux_pipeline_020:in_channel
	wire          cmd_demux_src10_startofpacket;                                         // cmd_demux:src10_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                           // cmd_demux:src10_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                        // mux_pipeline_020:out_valid -> cmd_mux_018:sink0_valid
	wire  [115:0] mux_pipeline_020_source0_data;                                         // mux_pipeline_020:out_data -> cmd_mux_018:sink0_data
	wire          mux_pipeline_020_source0_ready;                                        // cmd_mux_018:sink0_ready -> mux_pipeline_020:out_ready
	wire   [30:0] mux_pipeline_020_source0_channel;                                      // mux_pipeline_020:out_channel -> cmd_mux_018:sink0_channel
	wire          mux_pipeline_020_source0_startofpacket;                                // mux_pipeline_020:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                                  // mux_pipeline_020:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                             // cmd_demux_001:src10_valid -> mux_pipeline_021:in_valid
	wire  [115:0] cmd_demux_001_src10_data;                                              // cmd_demux_001:src10_data -> mux_pipeline_021:in_data
	wire          cmd_demux_001_src10_ready;                                             // mux_pipeline_021:in_ready -> cmd_demux_001:src10_ready
	wire   [30:0] cmd_demux_001_src10_channel;                                           // cmd_demux_001:src10_channel -> mux_pipeline_021:in_channel
	wire          cmd_demux_001_src10_startofpacket;                                     // cmd_demux_001:src10_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                       // cmd_demux_001:src10_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                        // mux_pipeline_021:out_valid -> cmd_mux_018:sink1_valid
	wire  [115:0] mux_pipeline_021_source0_data;                                         // mux_pipeline_021:out_data -> cmd_mux_018:sink1_data
	wire          mux_pipeline_021_source0_ready;                                        // cmd_mux_018:sink1_ready -> mux_pipeline_021:out_ready
	wire   [30:0] mux_pipeline_021_source0_channel;                                      // mux_pipeline_021:out_channel -> cmd_mux_018:sink1_channel
	wire          mux_pipeline_021_source0_startofpacket;                                // mux_pipeline_021:out_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                                  // mux_pipeline_021:out_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_src11_valid;                                                 // cmd_demux:src11_valid -> mux_pipeline_022:in_valid
	wire  [115:0] cmd_demux_src11_data;                                                  // cmd_demux:src11_data -> mux_pipeline_022:in_data
	wire          cmd_demux_src11_ready;                                                 // mux_pipeline_022:in_ready -> cmd_demux:src11_ready
	wire   [30:0] cmd_demux_src11_channel;                                               // cmd_demux:src11_channel -> mux_pipeline_022:in_channel
	wire          cmd_demux_src11_startofpacket;                                         // cmd_demux:src11_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                           // cmd_demux:src11_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                        // mux_pipeline_022:out_valid -> cmd_mux_019:sink0_valid
	wire  [115:0] mux_pipeline_022_source0_data;                                         // mux_pipeline_022:out_data -> cmd_mux_019:sink0_data
	wire          mux_pipeline_022_source0_ready;                                        // cmd_mux_019:sink0_ready -> mux_pipeline_022:out_ready
	wire   [30:0] mux_pipeline_022_source0_channel;                                      // mux_pipeline_022:out_channel -> cmd_mux_019:sink0_channel
	wire          mux_pipeline_022_source0_startofpacket;                                // mux_pipeline_022:out_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                                  // mux_pipeline_022:out_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                             // cmd_demux_001:src11_valid -> mux_pipeline_023:in_valid
	wire  [115:0] cmd_demux_001_src11_data;                                              // cmd_demux_001:src11_data -> mux_pipeline_023:in_data
	wire          cmd_demux_001_src11_ready;                                             // mux_pipeline_023:in_ready -> cmd_demux_001:src11_ready
	wire   [30:0] cmd_demux_001_src11_channel;                                           // cmd_demux_001:src11_channel -> mux_pipeline_023:in_channel
	wire          cmd_demux_001_src11_startofpacket;                                     // cmd_demux_001:src11_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                       // cmd_demux_001:src11_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                        // mux_pipeline_023:out_valid -> cmd_mux_019:sink1_valid
	wire  [115:0] mux_pipeline_023_source0_data;                                         // mux_pipeline_023:out_data -> cmd_mux_019:sink1_data
	wire          mux_pipeline_023_source0_ready;                                        // cmd_mux_019:sink1_ready -> mux_pipeline_023:out_ready
	wire   [30:0] mux_pipeline_023_source0_channel;                                      // mux_pipeline_023:out_channel -> cmd_mux_019:sink1_channel
	wire          mux_pipeline_023_source0_startofpacket;                                // mux_pipeline_023:out_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                                  // mux_pipeline_023:out_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_src12_valid;                                                 // cmd_demux:src12_valid -> mux_pipeline_024:in_valid
	wire  [115:0] cmd_demux_src12_data;                                                  // cmd_demux:src12_data -> mux_pipeline_024:in_data
	wire          cmd_demux_src12_ready;                                                 // mux_pipeline_024:in_ready -> cmd_demux:src12_ready
	wire   [30:0] cmd_demux_src12_channel;                                               // cmd_demux:src12_channel -> mux_pipeline_024:in_channel
	wire          cmd_demux_src12_startofpacket;                                         // cmd_demux:src12_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                           // cmd_demux:src12_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                        // mux_pipeline_024:out_valid -> cmd_mux_020:sink0_valid
	wire  [115:0] mux_pipeline_024_source0_data;                                         // mux_pipeline_024:out_data -> cmd_mux_020:sink0_data
	wire          mux_pipeline_024_source0_ready;                                        // cmd_mux_020:sink0_ready -> mux_pipeline_024:out_ready
	wire   [30:0] mux_pipeline_024_source0_channel;                                      // mux_pipeline_024:out_channel -> cmd_mux_020:sink0_channel
	wire          mux_pipeline_024_source0_startofpacket;                                // mux_pipeline_024:out_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                                  // mux_pipeline_024:out_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                             // cmd_demux_001:src12_valid -> mux_pipeline_025:in_valid
	wire  [115:0] cmd_demux_001_src12_data;                                              // cmd_demux_001:src12_data -> mux_pipeline_025:in_data
	wire          cmd_demux_001_src12_ready;                                             // mux_pipeline_025:in_ready -> cmd_demux_001:src12_ready
	wire   [30:0] cmd_demux_001_src12_channel;                                           // cmd_demux_001:src12_channel -> mux_pipeline_025:in_channel
	wire          cmd_demux_001_src12_startofpacket;                                     // cmd_demux_001:src12_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                       // cmd_demux_001:src12_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                        // mux_pipeline_025:out_valid -> cmd_mux_020:sink1_valid
	wire  [115:0] mux_pipeline_025_source0_data;                                         // mux_pipeline_025:out_data -> cmd_mux_020:sink1_data
	wire          mux_pipeline_025_source0_ready;                                        // cmd_mux_020:sink1_ready -> mux_pipeline_025:out_ready
	wire   [30:0] mux_pipeline_025_source0_channel;                                      // mux_pipeline_025:out_channel -> cmd_mux_020:sink1_channel
	wire          mux_pipeline_025_source0_startofpacket;                                // mux_pipeline_025:out_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                                  // mux_pipeline_025:out_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_src13_valid;                                                 // cmd_demux:src13_valid -> mux_pipeline_026:in_valid
	wire  [115:0] cmd_demux_src13_data;                                                  // cmd_demux:src13_data -> mux_pipeline_026:in_data
	wire          cmd_demux_src13_ready;                                                 // mux_pipeline_026:in_ready -> cmd_demux:src13_ready
	wire   [30:0] cmd_demux_src13_channel;                                               // cmd_demux:src13_channel -> mux_pipeline_026:in_channel
	wire          cmd_demux_src13_startofpacket;                                         // cmd_demux:src13_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                           // cmd_demux:src13_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                        // mux_pipeline_026:out_valid -> cmd_mux_021:sink0_valid
	wire  [115:0] mux_pipeline_026_source0_data;                                         // mux_pipeline_026:out_data -> cmd_mux_021:sink0_data
	wire          mux_pipeline_026_source0_ready;                                        // cmd_mux_021:sink0_ready -> mux_pipeline_026:out_ready
	wire   [30:0] mux_pipeline_026_source0_channel;                                      // mux_pipeline_026:out_channel -> cmd_mux_021:sink0_channel
	wire          mux_pipeline_026_source0_startofpacket;                                // mux_pipeline_026:out_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                                  // mux_pipeline_026:out_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                             // cmd_demux_001:src13_valid -> mux_pipeline_027:in_valid
	wire  [115:0] cmd_demux_001_src13_data;                                              // cmd_demux_001:src13_data -> mux_pipeline_027:in_data
	wire          cmd_demux_001_src13_ready;                                             // mux_pipeline_027:in_ready -> cmd_demux_001:src13_ready
	wire   [30:0] cmd_demux_001_src13_channel;                                           // cmd_demux_001:src13_channel -> mux_pipeline_027:in_channel
	wire          cmd_demux_001_src13_startofpacket;                                     // cmd_demux_001:src13_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                       // cmd_demux_001:src13_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                        // mux_pipeline_027:out_valid -> cmd_mux_021:sink1_valid
	wire  [115:0] mux_pipeline_027_source0_data;                                         // mux_pipeline_027:out_data -> cmd_mux_021:sink1_data
	wire          mux_pipeline_027_source0_ready;                                        // cmd_mux_021:sink1_ready -> mux_pipeline_027:out_ready
	wire   [30:0] mux_pipeline_027_source0_channel;                                      // mux_pipeline_027:out_channel -> cmd_mux_021:sink1_channel
	wire          mux_pipeline_027_source0_startofpacket;                                // mux_pipeline_027:out_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                                  // mux_pipeline_027:out_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_src14_valid;                                                 // cmd_demux:src14_valid -> mux_pipeline_028:in_valid
	wire  [115:0] cmd_demux_src14_data;                                                  // cmd_demux:src14_data -> mux_pipeline_028:in_data
	wire          cmd_demux_src14_ready;                                                 // mux_pipeline_028:in_ready -> cmd_demux:src14_ready
	wire   [30:0] cmd_demux_src14_channel;                                               // cmd_demux:src14_channel -> mux_pipeline_028:in_channel
	wire          cmd_demux_src14_startofpacket;                                         // cmd_demux:src14_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                           // cmd_demux:src14_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                        // mux_pipeline_028:out_valid -> cmd_mux_022:sink0_valid
	wire  [115:0] mux_pipeline_028_source0_data;                                         // mux_pipeline_028:out_data -> cmd_mux_022:sink0_data
	wire          mux_pipeline_028_source0_ready;                                        // cmd_mux_022:sink0_ready -> mux_pipeline_028:out_ready
	wire   [30:0] mux_pipeline_028_source0_channel;                                      // mux_pipeline_028:out_channel -> cmd_mux_022:sink0_channel
	wire          mux_pipeline_028_source0_startofpacket;                                // mux_pipeline_028:out_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                                  // mux_pipeline_028:out_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                             // cmd_demux_001:src14_valid -> mux_pipeline_029:in_valid
	wire  [115:0] cmd_demux_001_src14_data;                                              // cmd_demux_001:src14_data -> mux_pipeline_029:in_data
	wire          cmd_demux_001_src14_ready;                                             // mux_pipeline_029:in_ready -> cmd_demux_001:src14_ready
	wire   [30:0] cmd_demux_001_src14_channel;                                           // cmd_demux_001:src14_channel -> mux_pipeline_029:in_channel
	wire          cmd_demux_001_src14_startofpacket;                                     // cmd_demux_001:src14_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                       // cmd_demux_001:src14_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                        // mux_pipeline_029:out_valid -> cmd_mux_022:sink1_valid
	wire  [115:0] mux_pipeline_029_source0_data;                                         // mux_pipeline_029:out_data -> cmd_mux_022:sink1_data
	wire          mux_pipeline_029_source0_ready;                                        // cmd_mux_022:sink1_ready -> mux_pipeline_029:out_ready
	wire   [30:0] mux_pipeline_029_source0_channel;                                      // mux_pipeline_029:out_channel -> cmd_mux_022:sink1_channel
	wire          mux_pipeline_029_source0_startofpacket;                                // mux_pipeline_029:out_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                                  // mux_pipeline_029:out_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_src15_valid;                                                 // cmd_demux:src15_valid -> mux_pipeline_030:in_valid
	wire  [115:0] cmd_demux_src15_data;                                                  // cmd_demux:src15_data -> mux_pipeline_030:in_data
	wire          cmd_demux_src15_ready;                                                 // mux_pipeline_030:in_ready -> cmd_demux:src15_ready
	wire   [30:0] cmd_demux_src15_channel;                                               // cmd_demux:src15_channel -> mux_pipeline_030:in_channel
	wire          cmd_demux_src15_startofpacket;                                         // cmd_demux:src15_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                           // cmd_demux:src15_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                        // mux_pipeline_030:out_valid -> cmd_mux_023:sink0_valid
	wire  [115:0] mux_pipeline_030_source0_data;                                         // mux_pipeline_030:out_data -> cmd_mux_023:sink0_data
	wire          mux_pipeline_030_source0_ready;                                        // cmd_mux_023:sink0_ready -> mux_pipeline_030:out_ready
	wire   [30:0] mux_pipeline_030_source0_channel;                                      // mux_pipeline_030:out_channel -> cmd_mux_023:sink0_channel
	wire          mux_pipeline_030_source0_startofpacket;                                // mux_pipeline_030:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                                  // mux_pipeline_030:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                             // cmd_demux_001:src15_valid -> mux_pipeline_031:in_valid
	wire  [115:0] cmd_demux_001_src15_data;                                              // cmd_demux_001:src15_data -> mux_pipeline_031:in_data
	wire          cmd_demux_001_src15_ready;                                             // mux_pipeline_031:in_ready -> cmd_demux_001:src15_ready
	wire   [30:0] cmd_demux_001_src15_channel;                                           // cmd_demux_001:src15_channel -> mux_pipeline_031:in_channel
	wire          cmd_demux_001_src15_startofpacket;                                     // cmd_demux_001:src15_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                       // cmd_demux_001:src15_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                        // mux_pipeline_031:out_valid -> cmd_mux_023:sink1_valid
	wire  [115:0] mux_pipeline_031_source0_data;                                         // mux_pipeline_031:out_data -> cmd_mux_023:sink1_data
	wire          mux_pipeline_031_source0_ready;                                        // cmd_mux_023:sink1_ready -> mux_pipeline_031:out_ready
	wire   [30:0] mux_pipeline_031_source0_channel;                                      // mux_pipeline_031:out_channel -> cmd_mux_023:sink1_channel
	wire          mux_pipeline_031_source0_startofpacket;                                // mux_pipeline_031:out_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                                  // mux_pipeline_031:out_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_src16_valid;                                                 // cmd_demux:src16_valid -> mux_pipeline_032:in_valid
	wire  [115:0] cmd_demux_src16_data;                                                  // cmd_demux:src16_data -> mux_pipeline_032:in_data
	wire          cmd_demux_src16_ready;                                                 // mux_pipeline_032:in_ready -> cmd_demux:src16_ready
	wire   [30:0] cmd_demux_src16_channel;                                               // cmd_demux:src16_channel -> mux_pipeline_032:in_channel
	wire          cmd_demux_src16_startofpacket;                                         // cmd_demux:src16_startofpacket -> mux_pipeline_032:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                           // cmd_demux:src16_endofpacket -> mux_pipeline_032:in_endofpacket
	wire          mux_pipeline_032_source0_valid;                                        // mux_pipeline_032:out_valid -> cmd_mux_024:sink0_valid
	wire  [115:0] mux_pipeline_032_source0_data;                                         // mux_pipeline_032:out_data -> cmd_mux_024:sink0_data
	wire          mux_pipeline_032_source0_ready;                                        // cmd_mux_024:sink0_ready -> mux_pipeline_032:out_ready
	wire   [30:0] mux_pipeline_032_source0_channel;                                      // mux_pipeline_032:out_channel -> cmd_mux_024:sink0_channel
	wire          mux_pipeline_032_source0_startofpacket;                                // mux_pipeline_032:out_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          mux_pipeline_032_source0_endofpacket;                                  // mux_pipeline_032:out_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                             // cmd_demux_001:src16_valid -> mux_pipeline_033:in_valid
	wire  [115:0] cmd_demux_001_src16_data;                                              // cmd_demux_001:src16_data -> mux_pipeline_033:in_data
	wire          cmd_demux_001_src16_ready;                                             // mux_pipeline_033:in_ready -> cmd_demux_001:src16_ready
	wire   [30:0] cmd_demux_001_src16_channel;                                           // cmd_demux_001:src16_channel -> mux_pipeline_033:in_channel
	wire          cmd_demux_001_src16_startofpacket;                                     // cmd_demux_001:src16_startofpacket -> mux_pipeline_033:in_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                       // cmd_demux_001:src16_endofpacket -> mux_pipeline_033:in_endofpacket
	wire          mux_pipeline_033_source0_valid;                                        // mux_pipeline_033:out_valid -> cmd_mux_024:sink1_valid
	wire  [115:0] mux_pipeline_033_source0_data;                                         // mux_pipeline_033:out_data -> cmd_mux_024:sink1_data
	wire          mux_pipeline_033_source0_ready;                                        // cmd_mux_024:sink1_ready -> mux_pipeline_033:out_ready
	wire   [30:0] mux_pipeline_033_source0_channel;                                      // mux_pipeline_033:out_channel -> cmd_mux_024:sink1_channel
	wire          mux_pipeline_033_source0_startofpacket;                                // mux_pipeline_033:out_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          mux_pipeline_033_source0_endofpacket;                                  // mux_pipeline_033:out_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_src17_valid;                                                 // cmd_demux:src17_valid -> mux_pipeline_034:in_valid
	wire  [115:0] cmd_demux_src17_data;                                                  // cmd_demux:src17_data -> mux_pipeline_034:in_data
	wire          cmd_demux_src17_ready;                                                 // mux_pipeline_034:in_ready -> cmd_demux:src17_ready
	wire   [30:0] cmd_demux_src17_channel;                                               // cmd_demux:src17_channel -> mux_pipeline_034:in_channel
	wire          cmd_demux_src17_startofpacket;                                         // cmd_demux:src17_startofpacket -> mux_pipeline_034:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                                           // cmd_demux:src17_endofpacket -> mux_pipeline_034:in_endofpacket
	wire          mux_pipeline_034_source0_valid;                                        // mux_pipeline_034:out_valid -> cmd_mux_025:sink0_valid
	wire  [115:0] mux_pipeline_034_source0_data;                                         // mux_pipeline_034:out_data -> cmd_mux_025:sink0_data
	wire          mux_pipeline_034_source0_ready;                                        // cmd_mux_025:sink0_ready -> mux_pipeline_034:out_ready
	wire   [30:0] mux_pipeline_034_source0_channel;                                      // mux_pipeline_034:out_channel -> cmd_mux_025:sink0_channel
	wire          mux_pipeline_034_source0_startofpacket;                                // mux_pipeline_034:out_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          mux_pipeline_034_source0_endofpacket;                                  // mux_pipeline_034:out_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                             // cmd_demux_001:src17_valid -> mux_pipeline_035:in_valid
	wire  [115:0] cmd_demux_001_src17_data;                                              // cmd_demux_001:src17_data -> mux_pipeline_035:in_data
	wire          cmd_demux_001_src17_ready;                                             // mux_pipeline_035:in_ready -> cmd_demux_001:src17_ready
	wire   [30:0] cmd_demux_001_src17_channel;                                           // cmd_demux_001:src17_channel -> mux_pipeline_035:in_channel
	wire          cmd_demux_001_src17_startofpacket;                                     // cmd_demux_001:src17_startofpacket -> mux_pipeline_035:in_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                       // cmd_demux_001:src17_endofpacket -> mux_pipeline_035:in_endofpacket
	wire          mux_pipeline_035_source0_valid;                                        // mux_pipeline_035:out_valid -> cmd_mux_025:sink1_valid
	wire  [115:0] mux_pipeline_035_source0_data;                                         // mux_pipeline_035:out_data -> cmd_mux_025:sink1_data
	wire          mux_pipeline_035_source0_ready;                                        // cmd_mux_025:sink1_ready -> mux_pipeline_035:out_ready
	wire   [30:0] mux_pipeline_035_source0_channel;                                      // mux_pipeline_035:out_channel -> cmd_mux_025:sink1_channel
	wire          mux_pipeline_035_source0_startofpacket;                                // mux_pipeline_035:out_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          mux_pipeline_035_source0_endofpacket;                                  // mux_pipeline_035:out_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_src18_valid;                                                 // cmd_demux:src18_valid -> mux_pipeline_036:in_valid
	wire  [115:0] cmd_demux_src18_data;                                                  // cmd_demux:src18_data -> mux_pipeline_036:in_data
	wire          cmd_demux_src18_ready;                                                 // mux_pipeline_036:in_ready -> cmd_demux:src18_ready
	wire   [30:0] cmd_demux_src18_channel;                                               // cmd_demux:src18_channel -> mux_pipeline_036:in_channel
	wire          cmd_demux_src18_startofpacket;                                         // cmd_demux:src18_startofpacket -> mux_pipeline_036:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                                           // cmd_demux:src18_endofpacket -> mux_pipeline_036:in_endofpacket
	wire          mux_pipeline_036_source0_valid;                                        // mux_pipeline_036:out_valid -> cmd_mux_026:sink0_valid
	wire  [115:0] mux_pipeline_036_source0_data;                                         // mux_pipeline_036:out_data -> cmd_mux_026:sink0_data
	wire          mux_pipeline_036_source0_ready;                                        // cmd_mux_026:sink0_ready -> mux_pipeline_036:out_ready
	wire   [30:0] mux_pipeline_036_source0_channel;                                      // mux_pipeline_036:out_channel -> cmd_mux_026:sink0_channel
	wire          mux_pipeline_036_source0_startofpacket;                                // mux_pipeline_036:out_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          mux_pipeline_036_source0_endofpacket;                                  // mux_pipeline_036:out_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                             // cmd_demux_001:src18_valid -> mux_pipeline_037:in_valid
	wire  [115:0] cmd_demux_001_src18_data;                                              // cmd_demux_001:src18_data -> mux_pipeline_037:in_data
	wire          cmd_demux_001_src18_ready;                                             // mux_pipeline_037:in_ready -> cmd_demux_001:src18_ready
	wire   [30:0] cmd_demux_001_src18_channel;                                           // cmd_demux_001:src18_channel -> mux_pipeline_037:in_channel
	wire          cmd_demux_001_src18_startofpacket;                                     // cmd_demux_001:src18_startofpacket -> mux_pipeline_037:in_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                       // cmd_demux_001:src18_endofpacket -> mux_pipeline_037:in_endofpacket
	wire          mux_pipeline_037_source0_valid;                                        // mux_pipeline_037:out_valid -> cmd_mux_026:sink1_valid
	wire  [115:0] mux_pipeline_037_source0_data;                                         // mux_pipeline_037:out_data -> cmd_mux_026:sink1_data
	wire          mux_pipeline_037_source0_ready;                                        // cmd_mux_026:sink1_ready -> mux_pipeline_037:out_ready
	wire   [30:0] mux_pipeline_037_source0_channel;                                      // mux_pipeline_037:out_channel -> cmd_mux_026:sink1_channel
	wire          mux_pipeline_037_source0_startofpacket;                                // mux_pipeline_037:out_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          mux_pipeline_037_source0_endofpacket;                                  // mux_pipeline_037:out_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          cmd_demux_src19_valid;                                                 // cmd_demux:src19_valid -> mux_pipeline_038:in_valid
	wire  [115:0] cmd_demux_src19_data;                                                  // cmd_demux:src19_data -> mux_pipeline_038:in_data
	wire          cmd_demux_src19_ready;                                                 // mux_pipeline_038:in_ready -> cmd_demux:src19_ready
	wire   [30:0] cmd_demux_src19_channel;                                               // cmd_demux:src19_channel -> mux_pipeline_038:in_channel
	wire          cmd_demux_src19_startofpacket;                                         // cmd_demux:src19_startofpacket -> mux_pipeline_038:in_startofpacket
	wire          cmd_demux_src19_endofpacket;                                           // cmd_demux:src19_endofpacket -> mux_pipeline_038:in_endofpacket
	wire          mux_pipeline_038_source0_valid;                                        // mux_pipeline_038:out_valid -> cmd_mux_027:sink0_valid
	wire  [115:0] mux_pipeline_038_source0_data;                                         // mux_pipeline_038:out_data -> cmd_mux_027:sink0_data
	wire          mux_pipeline_038_source0_ready;                                        // cmd_mux_027:sink0_ready -> mux_pipeline_038:out_ready
	wire   [30:0] mux_pipeline_038_source0_channel;                                      // mux_pipeline_038:out_channel -> cmd_mux_027:sink0_channel
	wire          mux_pipeline_038_source0_startofpacket;                                // mux_pipeline_038:out_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          mux_pipeline_038_source0_endofpacket;                                  // mux_pipeline_038:out_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                             // cmd_demux_001:src19_valid -> mux_pipeline_039:in_valid
	wire  [115:0] cmd_demux_001_src19_data;                                              // cmd_demux_001:src19_data -> mux_pipeline_039:in_data
	wire          cmd_demux_001_src19_ready;                                             // mux_pipeline_039:in_ready -> cmd_demux_001:src19_ready
	wire   [30:0] cmd_demux_001_src19_channel;                                           // cmd_demux_001:src19_channel -> mux_pipeline_039:in_channel
	wire          cmd_demux_001_src19_startofpacket;                                     // cmd_demux_001:src19_startofpacket -> mux_pipeline_039:in_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                       // cmd_demux_001:src19_endofpacket -> mux_pipeline_039:in_endofpacket
	wire          mux_pipeline_039_source0_valid;                                        // mux_pipeline_039:out_valid -> cmd_mux_027:sink1_valid
	wire  [115:0] mux_pipeline_039_source0_data;                                         // mux_pipeline_039:out_data -> cmd_mux_027:sink1_data
	wire          mux_pipeline_039_source0_ready;                                        // cmd_mux_027:sink1_ready -> mux_pipeline_039:out_ready
	wire   [30:0] mux_pipeline_039_source0_channel;                                      // mux_pipeline_039:out_channel -> cmd_mux_027:sink1_channel
	wire          mux_pipeline_039_source0_startofpacket;                                // mux_pipeline_039:out_startofpacket -> cmd_mux_027:sink1_startofpacket
	wire          mux_pipeline_039_source0_endofpacket;                                  // mux_pipeline_039:out_endofpacket -> cmd_mux_027:sink1_endofpacket
	wire          cmd_demux_src20_valid;                                                 // cmd_demux:src20_valid -> mux_pipeline_040:in_valid
	wire  [115:0] cmd_demux_src20_data;                                                  // cmd_demux:src20_data -> mux_pipeline_040:in_data
	wire          cmd_demux_src20_ready;                                                 // mux_pipeline_040:in_ready -> cmd_demux:src20_ready
	wire   [30:0] cmd_demux_src20_channel;                                               // cmd_demux:src20_channel -> mux_pipeline_040:in_channel
	wire          cmd_demux_src20_startofpacket;                                         // cmd_demux:src20_startofpacket -> mux_pipeline_040:in_startofpacket
	wire          cmd_demux_src20_endofpacket;                                           // cmd_demux:src20_endofpacket -> mux_pipeline_040:in_endofpacket
	wire          mux_pipeline_040_source0_valid;                                        // mux_pipeline_040:out_valid -> cmd_mux_028:sink0_valid
	wire  [115:0] mux_pipeline_040_source0_data;                                         // mux_pipeline_040:out_data -> cmd_mux_028:sink0_data
	wire          mux_pipeline_040_source0_ready;                                        // cmd_mux_028:sink0_ready -> mux_pipeline_040:out_ready
	wire   [30:0] mux_pipeline_040_source0_channel;                                      // mux_pipeline_040:out_channel -> cmd_mux_028:sink0_channel
	wire          mux_pipeline_040_source0_startofpacket;                                // mux_pipeline_040:out_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          mux_pipeline_040_source0_endofpacket;                                  // mux_pipeline_040:out_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                             // cmd_demux_001:src20_valid -> mux_pipeline_041:in_valid
	wire  [115:0] cmd_demux_001_src20_data;                                              // cmd_demux_001:src20_data -> mux_pipeline_041:in_data
	wire          cmd_demux_001_src20_ready;                                             // mux_pipeline_041:in_ready -> cmd_demux_001:src20_ready
	wire   [30:0] cmd_demux_001_src20_channel;                                           // cmd_demux_001:src20_channel -> mux_pipeline_041:in_channel
	wire          cmd_demux_001_src20_startofpacket;                                     // cmd_demux_001:src20_startofpacket -> mux_pipeline_041:in_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                       // cmd_demux_001:src20_endofpacket -> mux_pipeline_041:in_endofpacket
	wire          mux_pipeline_041_source0_valid;                                        // mux_pipeline_041:out_valid -> cmd_mux_028:sink1_valid
	wire  [115:0] mux_pipeline_041_source0_data;                                         // mux_pipeline_041:out_data -> cmd_mux_028:sink1_data
	wire          mux_pipeline_041_source0_ready;                                        // cmd_mux_028:sink1_ready -> mux_pipeline_041:out_ready
	wire   [30:0] mux_pipeline_041_source0_channel;                                      // mux_pipeline_041:out_channel -> cmd_mux_028:sink1_channel
	wire          mux_pipeline_041_source0_startofpacket;                                // mux_pipeline_041:out_startofpacket -> cmd_mux_028:sink1_startofpacket
	wire          mux_pipeline_041_source0_endofpacket;                                  // mux_pipeline_041:out_endofpacket -> cmd_mux_028:sink1_endofpacket
	wire          cmd_demux_src21_valid;                                                 // cmd_demux:src21_valid -> mux_pipeline_042:in_valid
	wire  [115:0] cmd_demux_src21_data;                                                  // cmd_demux:src21_data -> mux_pipeline_042:in_data
	wire          cmd_demux_src21_ready;                                                 // mux_pipeline_042:in_ready -> cmd_demux:src21_ready
	wire   [30:0] cmd_demux_src21_channel;                                               // cmd_demux:src21_channel -> mux_pipeline_042:in_channel
	wire          cmd_demux_src21_startofpacket;                                         // cmd_demux:src21_startofpacket -> mux_pipeline_042:in_startofpacket
	wire          cmd_demux_src21_endofpacket;                                           // cmd_demux:src21_endofpacket -> mux_pipeline_042:in_endofpacket
	wire          mux_pipeline_042_source0_valid;                                        // mux_pipeline_042:out_valid -> cmd_mux_029:sink0_valid
	wire  [115:0] mux_pipeline_042_source0_data;                                         // mux_pipeline_042:out_data -> cmd_mux_029:sink0_data
	wire          mux_pipeline_042_source0_ready;                                        // cmd_mux_029:sink0_ready -> mux_pipeline_042:out_ready
	wire   [30:0] mux_pipeline_042_source0_channel;                                      // mux_pipeline_042:out_channel -> cmd_mux_029:sink0_channel
	wire          mux_pipeline_042_source0_startofpacket;                                // mux_pipeline_042:out_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          mux_pipeline_042_source0_endofpacket;                                  // mux_pipeline_042:out_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                             // cmd_demux_001:src21_valid -> mux_pipeline_043:in_valid
	wire  [115:0] cmd_demux_001_src21_data;                                              // cmd_demux_001:src21_data -> mux_pipeline_043:in_data
	wire          cmd_demux_001_src21_ready;                                             // mux_pipeline_043:in_ready -> cmd_demux_001:src21_ready
	wire   [30:0] cmd_demux_001_src21_channel;                                           // cmd_demux_001:src21_channel -> mux_pipeline_043:in_channel
	wire          cmd_demux_001_src21_startofpacket;                                     // cmd_demux_001:src21_startofpacket -> mux_pipeline_043:in_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                       // cmd_demux_001:src21_endofpacket -> mux_pipeline_043:in_endofpacket
	wire          mux_pipeline_043_source0_valid;                                        // mux_pipeline_043:out_valid -> cmd_mux_029:sink1_valid
	wire  [115:0] mux_pipeline_043_source0_data;                                         // mux_pipeline_043:out_data -> cmd_mux_029:sink1_data
	wire          mux_pipeline_043_source0_ready;                                        // cmd_mux_029:sink1_ready -> mux_pipeline_043:out_ready
	wire   [30:0] mux_pipeline_043_source0_channel;                                      // mux_pipeline_043:out_channel -> cmd_mux_029:sink1_channel
	wire          mux_pipeline_043_source0_startofpacket;                                // mux_pipeline_043:out_startofpacket -> cmd_mux_029:sink1_startofpacket
	wire          mux_pipeline_043_source0_endofpacket;                                  // mux_pipeline_043:out_endofpacket -> cmd_mux_029:sink1_endofpacket
	wire          cmd_demux_src22_valid;                                                 // cmd_demux:src22_valid -> mux_pipeline_044:in_valid
	wire  [115:0] cmd_demux_src22_data;                                                  // cmd_demux:src22_data -> mux_pipeline_044:in_data
	wire          cmd_demux_src22_ready;                                                 // mux_pipeline_044:in_ready -> cmd_demux:src22_ready
	wire   [30:0] cmd_demux_src22_channel;                                               // cmd_demux:src22_channel -> mux_pipeline_044:in_channel
	wire          cmd_demux_src22_startofpacket;                                         // cmd_demux:src22_startofpacket -> mux_pipeline_044:in_startofpacket
	wire          cmd_demux_src22_endofpacket;                                           // cmd_demux:src22_endofpacket -> mux_pipeline_044:in_endofpacket
	wire          mux_pipeline_044_source0_valid;                                        // mux_pipeline_044:out_valid -> cmd_mux_030:sink0_valid
	wire  [115:0] mux_pipeline_044_source0_data;                                         // mux_pipeline_044:out_data -> cmd_mux_030:sink0_data
	wire          mux_pipeline_044_source0_ready;                                        // cmd_mux_030:sink0_ready -> mux_pipeline_044:out_ready
	wire   [30:0] mux_pipeline_044_source0_channel;                                      // mux_pipeline_044:out_channel -> cmd_mux_030:sink0_channel
	wire          mux_pipeline_044_source0_startofpacket;                                // mux_pipeline_044:out_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          mux_pipeline_044_source0_endofpacket;                                  // mux_pipeline_044:out_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                             // cmd_demux_001:src22_valid -> mux_pipeline_045:in_valid
	wire  [115:0] cmd_demux_001_src22_data;                                              // cmd_demux_001:src22_data -> mux_pipeline_045:in_data
	wire          cmd_demux_001_src22_ready;                                             // mux_pipeline_045:in_ready -> cmd_demux_001:src22_ready
	wire   [30:0] cmd_demux_001_src22_channel;                                           // cmd_demux_001:src22_channel -> mux_pipeline_045:in_channel
	wire          cmd_demux_001_src22_startofpacket;                                     // cmd_demux_001:src22_startofpacket -> mux_pipeline_045:in_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                       // cmd_demux_001:src22_endofpacket -> mux_pipeline_045:in_endofpacket
	wire          mux_pipeline_045_source0_valid;                                        // mux_pipeline_045:out_valid -> cmd_mux_030:sink1_valid
	wire  [115:0] mux_pipeline_045_source0_data;                                         // mux_pipeline_045:out_data -> cmd_mux_030:sink1_data
	wire          mux_pipeline_045_source0_ready;                                        // cmd_mux_030:sink1_ready -> mux_pipeline_045:out_ready
	wire   [30:0] mux_pipeline_045_source0_channel;                                      // mux_pipeline_045:out_channel -> cmd_mux_030:sink1_channel
	wire          mux_pipeline_045_source0_startofpacket;                                // mux_pipeline_045:out_startofpacket -> cmd_mux_030:sink1_startofpacket
	wire          mux_pipeline_045_source0_endofpacket;                                  // mux_pipeline_045:out_endofpacket -> cmd_mux_030:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> mux_pipeline_046:in_valid
	wire  [115:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> mux_pipeline_046:in_data
	wire          rsp_demux_src0_ready;                                                  // mux_pipeline_046:in_ready -> rsp_demux:src0_ready
	wire   [30:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> mux_pipeline_046:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> mux_pipeline_046:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> mux_pipeline_046:in_endofpacket
	wire          mux_pipeline_046_source0_valid;                                        // mux_pipeline_046:out_valid -> rsp_mux:sink0_valid
	wire  [115:0] mux_pipeline_046_source0_data;                                         // mux_pipeline_046:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_046_source0_ready;                                        // rsp_mux:sink0_ready -> mux_pipeline_046:out_ready
	wire   [30:0] mux_pipeline_046_source0_channel;                                      // mux_pipeline_046:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_046_source0_startofpacket;                                // mux_pipeline_046:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_046_source0_endofpacket;                                  // mux_pipeline_046:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                              // rsp_demux_002:src0_valid -> mux_pipeline_047:in_valid
	wire  [115:0] rsp_demux_002_src0_data;                                               // rsp_demux_002:src0_data -> mux_pipeline_047:in_data
	wire          rsp_demux_002_src0_ready;                                              // mux_pipeline_047:in_ready -> rsp_demux_002:src0_ready
	wire   [30:0] rsp_demux_002_src0_channel;                                            // rsp_demux_002:src0_channel -> mux_pipeline_047:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                      // rsp_demux_002:src0_startofpacket -> mux_pipeline_047:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                        // rsp_demux_002:src0_endofpacket -> mux_pipeline_047:in_endofpacket
	wire          mux_pipeline_047_source0_valid;                                        // mux_pipeline_047:out_valid -> rsp_mux:sink1_valid
	wire  [115:0] mux_pipeline_047_source0_data;                                         // mux_pipeline_047:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_047_source0_ready;                                        // rsp_mux:sink1_ready -> mux_pipeline_047:out_ready
	wire   [30:0] mux_pipeline_047_source0_channel;                                      // mux_pipeline_047:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_047_source0_startofpacket;                                // mux_pipeline_047:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_047_source0_endofpacket;                                  // mux_pipeline_047:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                              // rsp_demux_004:src0_valid -> mux_pipeline_048:in_valid
	wire  [115:0] rsp_demux_004_src0_data;                                               // rsp_demux_004:src0_data -> mux_pipeline_048:in_data
	wire          rsp_demux_004_src0_ready;                                              // mux_pipeline_048:in_ready -> rsp_demux_004:src0_ready
	wire   [30:0] rsp_demux_004_src0_channel;                                            // rsp_demux_004:src0_channel -> mux_pipeline_048:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                      // rsp_demux_004:src0_startofpacket -> mux_pipeline_048:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                        // rsp_demux_004:src0_endofpacket -> mux_pipeline_048:in_endofpacket
	wire          mux_pipeline_048_source0_valid;                                        // mux_pipeline_048:out_valid -> rsp_mux:sink2_valid
	wire  [115:0] mux_pipeline_048_source0_data;                                         // mux_pipeline_048:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_048_source0_ready;                                        // rsp_mux:sink2_ready -> mux_pipeline_048:out_ready
	wire   [30:0] mux_pipeline_048_source0_channel;                                      // mux_pipeline_048:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_048_source0_startofpacket;                                // mux_pipeline_048:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_048_source0_endofpacket;                                  // mux_pipeline_048:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                              // rsp_demux_006:src0_valid -> mux_pipeline_049:in_valid
	wire  [115:0] rsp_demux_006_src0_data;                                               // rsp_demux_006:src0_data -> mux_pipeline_049:in_data
	wire          rsp_demux_006_src0_ready;                                              // mux_pipeline_049:in_ready -> rsp_demux_006:src0_ready
	wire   [30:0] rsp_demux_006_src0_channel;                                            // rsp_demux_006:src0_channel -> mux_pipeline_049:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                      // rsp_demux_006:src0_startofpacket -> mux_pipeline_049:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                        // rsp_demux_006:src0_endofpacket -> mux_pipeline_049:in_endofpacket
	wire          mux_pipeline_049_source0_valid;                                        // mux_pipeline_049:out_valid -> rsp_mux:sink3_valid
	wire  [115:0] mux_pipeline_049_source0_data;                                         // mux_pipeline_049:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_049_source0_ready;                                        // rsp_mux:sink3_ready -> mux_pipeline_049:out_ready
	wire   [30:0] mux_pipeline_049_source0_channel;                                      // mux_pipeline_049:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_049_source0_startofpacket;                                // mux_pipeline_049:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_049_source0_endofpacket;                                  // mux_pipeline_049:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_008_src0_valid;                                              // rsp_demux_008:src0_valid -> mux_pipeline_050:in_valid
	wire  [115:0] rsp_demux_008_src0_data;                                               // rsp_demux_008:src0_data -> mux_pipeline_050:in_data
	wire          rsp_demux_008_src0_ready;                                              // mux_pipeline_050:in_ready -> rsp_demux_008:src0_ready
	wire   [30:0] rsp_demux_008_src0_channel;                                            // rsp_demux_008:src0_channel -> mux_pipeline_050:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                      // rsp_demux_008:src0_startofpacket -> mux_pipeline_050:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                        // rsp_demux_008:src0_endofpacket -> mux_pipeline_050:in_endofpacket
	wire          mux_pipeline_050_source0_valid;                                        // mux_pipeline_050:out_valid -> rsp_mux:sink4_valid
	wire  [115:0] mux_pipeline_050_source0_data;                                         // mux_pipeline_050:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_050_source0_ready;                                        // rsp_mux:sink4_ready -> mux_pipeline_050:out_ready
	wire   [30:0] mux_pipeline_050_source0_channel;                                      // mux_pipeline_050:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_050_source0_startofpacket;                                // mux_pipeline_050:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_050_source0_endofpacket;                                  // mux_pipeline_050:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_010_src0_valid;                                              // rsp_demux_010:src0_valid -> mux_pipeline_051:in_valid
	wire  [115:0] rsp_demux_010_src0_data;                                               // rsp_demux_010:src0_data -> mux_pipeline_051:in_data
	wire          rsp_demux_010_src0_ready;                                              // mux_pipeline_051:in_ready -> rsp_demux_010:src0_ready
	wire   [30:0] rsp_demux_010_src0_channel;                                            // rsp_demux_010:src0_channel -> mux_pipeline_051:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                      // rsp_demux_010:src0_startofpacket -> mux_pipeline_051:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                        // rsp_demux_010:src0_endofpacket -> mux_pipeline_051:in_endofpacket
	wire          mux_pipeline_051_source0_valid;                                        // mux_pipeline_051:out_valid -> rsp_mux:sink5_valid
	wire  [115:0] mux_pipeline_051_source0_data;                                         // mux_pipeline_051:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_051_source0_ready;                                        // rsp_mux:sink5_ready -> mux_pipeline_051:out_ready
	wire   [30:0] mux_pipeline_051_source0_channel;                                      // mux_pipeline_051:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_051_source0_startofpacket;                                // mux_pipeline_051:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_051_source0_endofpacket;                                  // mux_pipeline_051:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_012_src0_valid;                                              // rsp_demux_012:src0_valid -> mux_pipeline_052:in_valid
	wire  [115:0] rsp_demux_012_src0_data;                                               // rsp_demux_012:src0_data -> mux_pipeline_052:in_data
	wire          rsp_demux_012_src0_ready;                                              // mux_pipeline_052:in_ready -> rsp_demux_012:src0_ready
	wire   [30:0] rsp_demux_012_src0_channel;                                            // rsp_demux_012:src0_channel -> mux_pipeline_052:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                      // rsp_demux_012:src0_startofpacket -> mux_pipeline_052:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                        // rsp_demux_012:src0_endofpacket -> mux_pipeline_052:in_endofpacket
	wire          mux_pipeline_052_source0_valid;                                        // mux_pipeline_052:out_valid -> rsp_mux:sink6_valid
	wire  [115:0] mux_pipeline_052_source0_data;                                         // mux_pipeline_052:out_data -> rsp_mux:sink6_data
	wire          mux_pipeline_052_source0_ready;                                        // rsp_mux:sink6_ready -> mux_pipeline_052:out_ready
	wire   [30:0] mux_pipeline_052_source0_channel;                                      // mux_pipeline_052:out_channel -> rsp_mux:sink6_channel
	wire          mux_pipeline_052_source0_startofpacket;                                // mux_pipeline_052:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          mux_pipeline_052_source0_endofpacket;                                  // mux_pipeline_052:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_014_src0_valid;                                              // rsp_demux_014:src0_valid -> mux_pipeline_053:in_valid
	wire  [115:0] rsp_demux_014_src0_data;                                               // rsp_demux_014:src0_data -> mux_pipeline_053:in_data
	wire          rsp_demux_014_src0_ready;                                              // mux_pipeline_053:in_ready -> rsp_demux_014:src0_ready
	wire   [30:0] rsp_demux_014_src0_channel;                                            // rsp_demux_014:src0_channel -> mux_pipeline_053:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                      // rsp_demux_014:src0_startofpacket -> mux_pipeline_053:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                        // rsp_demux_014:src0_endofpacket -> mux_pipeline_053:in_endofpacket
	wire          mux_pipeline_053_source0_valid;                                        // mux_pipeline_053:out_valid -> rsp_mux:sink7_valid
	wire  [115:0] mux_pipeline_053_source0_data;                                         // mux_pipeline_053:out_data -> rsp_mux:sink7_data
	wire          mux_pipeline_053_source0_ready;                                        // rsp_mux:sink7_ready -> mux_pipeline_053:out_ready
	wire   [30:0] mux_pipeline_053_source0_channel;                                      // mux_pipeline_053:out_channel -> rsp_mux:sink7_channel
	wire          mux_pipeline_053_source0_startofpacket;                                // mux_pipeline_053:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          mux_pipeline_053_source0_endofpacket;                                  // mux_pipeline_053:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_016_src0_valid;                                              // rsp_demux_016:src0_valid -> mux_pipeline_054:in_valid
	wire  [115:0] rsp_demux_016_src0_data;                                               // rsp_demux_016:src0_data -> mux_pipeline_054:in_data
	wire          rsp_demux_016_src0_ready;                                              // mux_pipeline_054:in_ready -> rsp_demux_016:src0_ready
	wire   [30:0] rsp_demux_016_src0_channel;                                            // rsp_demux_016:src0_channel -> mux_pipeline_054:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                      // rsp_demux_016:src0_startofpacket -> mux_pipeline_054:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                        // rsp_demux_016:src0_endofpacket -> mux_pipeline_054:in_endofpacket
	wire          mux_pipeline_054_source0_valid;                                        // mux_pipeline_054:out_valid -> rsp_mux:sink8_valid
	wire  [115:0] mux_pipeline_054_source0_data;                                         // mux_pipeline_054:out_data -> rsp_mux:sink8_data
	wire          mux_pipeline_054_source0_ready;                                        // rsp_mux:sink8_ready -> mux_pipeline_054:out_ready
	wire   [30:0] mux_pipeline_054_source0_channel;                                      // mux_pipeline_054:out_channel -> rsp_mux:sink8_channel
	wire          mux_pipeline_054_source0_startofpacket;                                // mux_pipeline_054:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          mux_pipeline_054_source0_endofpacket;                                  // mux_pipeline_054:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_017_src0_valid;                                              // rsp_demux_017:src0_valid -> mux_pipeline_055:in_valid
	wire  [115:0] rsp_demux_017_src0_data;                                               // rsp_demux_017:src0_data -> mux_pipeline_055:in_data
	wire          rsp_demux_017_src0_ready;                                              // mux_pipeline_055:in_ready -> rsp_demux_017:src0_ready
	wire   [30:0] rsp_demux_017_src0_channel;                                            // rsp_demux_017:src0_channel -> mux_pipeline_055:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                      // rsp_demux_017:src0_startofpacket -> mux_pipeline_055:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                        // rsp_demux_017:src0_endofpacket -> mux_pipeline_055:in_endofpacket
	wire          mux_pipeline_055_source0_valid;                                        // mux_pipeline_055:out_valid -> rsp_mux:sink9_valid
	wire  [115:0] mux_pipeline_055_source0_data;                                         // mux_pipeline_055:out_data -> rsp_mux:sink9_data
	wire          mux_pipeline_055_source0_ready;                                        // rsp_mux:sink9_ready -> mux_pipeline_055:out_ready
	wire   [30:0] mux_pipeline_055_source0_channel;                                      // mux_pipeline_055:out_channel -> rsp_mux:sink9_channel
	wire          mux_pipeline_055_source0_startofpacket;                                // mux_pipeline_055:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          mux_pipeline_055_source0_endofpacket;                                  // mux_pipeline_055:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_018_src0_valid;                                              // rsp_demux_018:src0_valid -> mux_pipeline_056:in_valid
	wire  [115:0] rsp_demux_018_src0_data;                                               // rsp_demux_018:src0_data -> mux_pipeline_056:in_data
	wire          rsp_demux_018_src0_ready;                                              // mux_pipeline_056:in_ready -> rsp_demux_018:src0_ready
	wire   [30:0] rsp_demux_018_src0_channel;                                            // rsp_demux_018:src0_channel -> mux_pipeline_056:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                      // rsp_demux_018:src0_startofpacket -> mux_pipeline_056:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                        // rsp_demux_018:src0_endofpacket -> mux_pipeline_056:in_endofpacket
	wire          mux_pipeline_056_source0_valid;                                        // mux_pipeline_056:out_valid -> rsp_mux:sink10_valid
	wire  [115:0] mux_pipeline_056_source0_data;                                         // mux_pipeline_056:out_data -> rsp_mux:sink10_data
	wire          mux_pipeline_056_source0_ready;                                        // rsp_mux:sink10_ready -> mux_pipeline_056:out_ready
	wire   [30:0] mux_pipeline_056_source0_channel;                                      // mux_pipeline_056:out_channel -> rsp_mux:sink10_channel
	wire          mux_pipeline_056_source0_startofpacket;                                // mux_pipeline_056:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          mux_pipeline_056_source0_endofpacket;                                  // mux_pipeline_056:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_019_src0_valid;                                              // rsp_demux_019:src0_valid -> mux_pipeline_057:in_valid
	wire  [115:0] rsp_demux_019_src0_data;                                               // rsp_demux_019:src0_data -> mux_pipeline_057:in_data
	wire          rsp_demux_019_src0_ready;                                              // mux_pipeline_057:in_ready -> rsp_demux_019:src0_ready
	wire   [30:0] rsp_demux_019_src0_channel;                                            // rsp_demux_019:src0_channel -> mux_pipeline_057:in_channel
	wire          rsp_demux_019_src0_startofpacket;                                      // rsp_demux_019:src0_startofpacket -> mux_pipeline_057:in_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                        // rsp_demux_019:src0_endofpacket -> mux_pipeline_057:in_endofpacket
	wire          mux_pipeline_057_source0_valid;                                        // mux_pipeline_057:out_valid -> rsp_mux:sink11_valid
	wire  [115:0] mux_pipeline_057_source0_data;                                         // mux_pipeline_057:out_data -> rsp_mux:sink11_data
	wire          mux_pipeline_057_source0_ready;                                        // rsp_mux:sink11_ready -> mux_pipeline_057:out_ready
	wire   [30:0] mux_pipeline_057_source0_channel;                                      // mux_pipeline_057:out_channel -> rsp_mux:sink11_channel
	wire          mux_pipeline_057_source0_startofpacket;                                // mux_pipeline_057:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          mux_pipeline_057_source0_endofpacket;                                  // mux_pipeline_057:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_020_src0_valid;                                              // rsp_demux_020:src0_valid -> mux_pipeline_058:in_valid
	wire  [115:0] rsp_demux_020_src0_data;                                               // rsp_demux_020:src0_data -> mux_pipeline_058:in_data
	wire          rsp_demux_020_src0_ready;                                              // mux_pipeline_058:in_ready -> rsp_demux_020:src0_ready
	wire   [30:0] rsp_demux_020_src0_channel;                                            // rsp_demux_020:src0_channel -> mux_pipeline_058:in_channel
	wire          rsp_demux_020_src0_startofpacket;                                      // rsp_demux_020:src0_startofpacket -> mux_pipeline_058:in_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                        // rsp_demux_020:src0_endofpacket -> mux_pipeline_058:in_endofpacket
	wire          mux_pipeline_058_source0_valid;                                        // mux_pipeline_058:out_valid -> rsp_mux:sink12_valid
	wire  [115:0] mux_pipeline_058_source0_data;                                         // mux_pipeline_058:out_data -> rsp_mux:sink12_data
	wire          mux_pipeline_058_source0_ready;                                        // rsp_mux:sink12_ready -> mux_pipeline_058:out_ready
	wire   [30:0] mux_pipeline_058_source0_channel;                                      // mux_pipeline_058:out_channel -> rsp_mux:sink12_channel
	wire          mux_pipeline_058_source0_startofpacket;                                // mux_pipeline_058:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          mux_pipeline_058_source0_endofpacket;                                  // mux_pipeline_058:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_021_src0_valid;                                              // rsp_demux_021:src0_valid -> mux_pipeline_059:in_valid
	wire  [115:0] rsp_demux_021_src0_data;                                               // rsp_demux_021:src0_data -> mux_pipeline_059:in_data
	wire          rsp_demux_021_src0_ready;                                              // mux_pipeline_059:in_ready -> rsp_demux_021:src0_ready
	wire   [30:0] rsp_demux_021_src0_channel;                                            // rsp_demux_021:src0_channel -> mux_pipeline_059:in_channel
	wire          rsp_demux_021_src0_startofpacket;                                      // rsp_demux_021:src0_startofpacket -> mux_pipeline_059:in_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                        // rsp_demux_021:src0_endofpacket -> mux_pipeline_059:in_endofpacket
	wire          mux_pipeline_059_source0_valid;                                        // mux_pipeline_059:out_valid -> rsp_mux:sink13_valid
	wire  [115:0] mux_pipeline_059_source0_data;                                         // mux_pipeline_059:out_data -> rsp_mux:sink13_data
	wire          mux_pipeline_059_source0_ready;                                        // rsp_mux:sink13_ready -> mux_pipeline_059:out_ready
	wire   [30:0] mux_pipeline_059_source0_channel;                                      // mux_pipeline_059:out_channel -> rsp_mux:sink13_channel
	wire          mux_pipeline_059_source0_startofpacket;                                // mux_pipeline_059:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          mux_pipeline_059_source0_endofpacket;                                  // mux_pipeline_059:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_022_src0_valid;                                              // rsp_demux_022:src0_valid -> mux_pipeline_060:in_valid
	wire  [115:0] rsp_demux_022_src0_data;                                               // rsp_demux_022:src0_data -> mux_pipeline_060:in_data
	wire          rsp_demux_022_src0_ready;                                              // mux_pipeline_060:in_ready -> rsp_demux_022:src0_ready
	wire   [30:0] rsp_demux_022_src0_channel;                                            // rsp_demux_022:src0_channel -> mux_pipeline_060:in_channel
	wire          rsp_demux_022_src0_startofpacket;                                      // rsp_demux_022:src0_startofpacket -> mux_pipeline_060:in_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                        // rsp_demux_022:src0_endofpacket -> mux_pipeline_060:in_endofpacket
	wire          mux_pipeline_060_source0_valid;                                        // mux_pipeline_060:out_valid -> rsp_mux:sink14_valid
	wire  [115:0] mux_pipeline_060_source0_data;                                         // mux_pipeline_060:out_data -> rsp_mux:sink14_data
	wire          mux_pipeline_060_source0_ready;                                        // rsp_mux:sink14_ready -> mux_pipeline_060:out_ready
	wire   [30:0] mux_pipeline_060_source0_channel;                                      // mux_pipeline_060:out_channel -> rsp_mux:sink14_channel
	wire          mux_pipeline_060_source0_startofpacket;                                // mux_pipeline_060:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          mux_pipeline_060_source0_endofpacket;                                  // mux_pipeline_060:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_023_src0_valid;                                              // rsp_demux_023:src0_valid -> mux_pipeline_061:in_valid
	wire  [115:0] rsp_demux_023_src0_data;                                               // rsp_demux_023:src0_data -> mux_pipeline_061:in_data
	wire          rsp_demux_023_src0_ready;                                              // mux_pipeline_061:in_ready -> rsp_demux_023:src0_ready
	wire   [30:0] rsp_demux_023_src0_channel;                                            // rsp_demux_023:src0_channel -> mux_pipeline_061:in_channel
	wire          rsp_demux_023_src0_startofpacket;                                      // rsp_demux_023:src0_startofpacket -> mux_pipeline_061:in_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                        // rsp_demux_023:src0_endofpacket -> mux_pipeline_061:in_endofpacket
	wire          mux_pipeline_061_source0_valid;                                        // mux_pipeline_061:out_valid -> rsp_mux:sink15_valid
	wire  [115:0] mux_pipeline_061_source0_data;                                         // mux_pipeline_061:out_data -> rsp_mux:sink15_data
	wire          mux_pipeline_061_source0_ready;                                        // rsp_mux:sink15_ready -> mux_pipeline_061:out_ready
	wire   [30:0] mux_pipeline_061_source0_channel;                                      // mux_pipeline_061:out_channel -> rsp_mux:sink15_channel
	wire          mux_pipeline_061_source0_startofpacket;                                // mux_pipeline_061:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          mux_pipeline_061_source0_endofpacket;                                  // mux_pipeline_061:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_024_src0_valid;                                              // rsp_demux_024:src0_valid -> mux_pipeline_062:in_valid
	wire  [115:0] rsp_demux_024_src0_data;                                               // rsp_demux_024:src0_data -> mux_pipeline_062:in_data
	wire          rsp_demux_024_src0_ready;                                              // mux_pipeline_062:in_ready -> rsp_demux_024:src0_ready
	wire   [30:0] rsp_demux_024_src0_channel;                                            // rsp_demux_024:src0_channel -> mux_pipeline_062:in_channel
	wire          rsp_demux_024_src0_startofpacket;                                      // rsp_demux_024:src0_startofpacket -> mux_pipeline_062:in_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                        // rsp_demux_024:src0_endofpacket -> mux_pipeline_062:in_endofpacket
	wire          mux_pipeline_062_source0_valid;                                        // mux_pipeline_062:out_valid -> rsp_mux:sink16_valid
	wire  [115:0] mux_pipeline_062_source0_data;                                         // mux_pipeline_062:out_data -> rsp_mux:sink16_data
	wire          mux_pipeline_062_source0_ready;                                        // rsp_mux:sink16_ready -> mux_pipeline_062:out_ready
	wire   [30:0] mux_pipeline_062_source0_channel;                                      // mux_pipeline_062:out_channel -> rsp_mux:sink16_channel
	wire          mux_pipeline_062_source0_startofpacket;                                // mux_pipeline_062:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          mux_pipeline_062_source0_endofpacket;                                  // mux_pipeline_062:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_025_src0_valid;                                              // rsp_demux_025:src0_valid -> mux_pipeline_063:in_valid
	wire  [115:0] rsp_demux_025_src0_data;                                               // rsp_demux_025:src0_data -> mux_pipeline_063:in_data
	wire          rsp_demux_025_src0_ready;                                              // mux_pipeline_063:in_ready -> rsp_demux_025:src0_ready
	wire   [30:0] rsp_demux_025_src0_channel;                                            // rsp_demux_025:src0_channel -> mux_pipeline_063:in_channel
	wire          rsp_demux_025_src0_startofpacket;                                      // rsp_demux_025:src0_startofpacket -> mux_pipeline_063:in_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                        // rsp_demux_025:src0_endofpacket -> mux_pipeline_063:in_endofpacket
	wire          mux_pipeline_063_source0_valid;                                        // mux_pipeline_063:out_valid -> rsp_mux:sink17_valid
	wire  [115:0] mux_pipeline_063_source0_data;                                         // mux_pipeline_063:out_data -> rsp_mux:sink17_data
	wire          mux_pipeline_063_source0_ready;                                        // rsp_mux:sink17_ready -> mux_pipeline_063:out_ready
	wire   [30:0] mux_pipeline_063_source0_channel;                                      // mux_pipeline_063:out_channel -> rsp_mux:sink17_channel
	wire          mux_pipeline_063_source0_startofpacket;                                // mux_pipeline_063:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          mux_pipeline_063_source0_endofpacket;                                  // mux_pipeline_063:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_026_src0_valid;                                              // rsp_demux_026:src0_valid -> mux_pipeline_064:in_valid
	wire  [115:0] rsp_demux_026_src0_data;                                               // rsp_demux_026:src0_data -> mux_pipeline_064:in_data
	wire          rsp_demux_026_src0_ready;                                              // mux_pipeline_064:in_ready -> rsp_demux_026:src0_ready
	wire   [30:0] rsp_demux_026_src0_channel;                                            // rsp_demux_026:src0_channel -> mux_pipeline_064:in_channel
	wire          rsp_demux_026_src0_startofpacket;                                      // rsp_demux_026:src0_startofpacket -> mux_pipeline_064:in_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                        // rsp_demux_026:src0_endofpacket -> mux_pipeline_064:in_endofpacket
	wire          mux_pipeline_064_source0_valid;                                        // mux_pipeline_064:out_valid -> rsp_mux:sink18_valid
	wire  [115:0] mux_pipeline_064_source0_data;                                         // mux_pipeline_064:out_data -> rsp_mux:sink18_data
	wire          mux_pipeline_064_source0_ready;                                        // rsp_mux:sink18_ready -> mux_pipeline_064:out_ready
	wire   [30:0] mux_pipeline_064_source0_channel;                                      // mux_pipeline_064:out_channel -> rsp_mux:sink18_channel
	wire          mux_pipeline_064_source0_startofpacket;                                // mux_pipeline_064:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          mux_pipeline_064_source0_endofpacket;                                  // mux_pipeline_064:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_027_src0_valid;                                              // rsp_demux_027:src0_valid -> mux_pipeline_065:in_valid
	wire  [115:0] rsp_demux_027_src0_data;                                               // rsp_demux_027:src0_data -> mux_pipeline_065:in_data
	wire          rsp_demux_027_src0_ready;                                              // mux_pipeline_065:in_ready -> rsp_demux_027:src0_ready
	wire   [30:0] rsp_demux_027_src0_channel;                                            // rsp_demux_027:src0_channel -> mux_pipeline_065:in_channel
	wire          rsp_demux_027_src0_startofpacket;                                      // rsp_demux_027:src0_startofpacket -> mux_pipeline_065:in_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                        // rsp_demux_027:src0_endofpacket -> mux_pipeline_065:in_endofpacket
	wire          mux_pipeline_065_source0_valid;                                        // mux_pipeline_065:out_valid -> rsp_mux:sink19_valid
	wire  [115:0] mux_pipeline_065_source0_data;                                         // mux_pipeline_065:out_data -> rsp_mux:sink19_data
	wire          mux_pipeline_065_source0_ready;                                        // rsp_mux:sink19_ready -> mux_pipeline_065:out_ready
	wire   [30:0] mux_pipeline_065_source0_channel;                                      // mux_pipeline_065:out_channel -> rsp_mux:sink19_channel
	wire          mux_pipeline_065_source0_startofpacket;                                // mux_pipeline_065:out_startofpacket -> rsp_mux:sink19_startofpacket
	wire          mux_pipeline_065_source0_endofpacket;                                  // mux_pipeline_065:out_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_028_src0_valid;                                              // rsp_demux_028:src0_valid -> mux_pipeline_066:in_valid
	wire  [115:0] rsp_demux_028_src0_data;                                               // rsp_demux_028:src0_data -> mux_pipeline_066:in_data
	wire          rsp_demux_028_src0_ready;                                              // mux_pipeline_066:in_ready -> rsp_demux_028:src0_ready
	wire   [30:0] rsp_demux_028_src0_channel;                                            // rsp_demux_028:src0_channel -> mux_pipeline_066:in_channel
	wire          rsp_demux_028_src0_startofpacket;                                      // rsp_demux_028:src0_startofpacket -> mux_pipeline_066:in_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                        // rsp_demux_028:src0_endofpacket -> mux_pipeline_066:in_endofpacket
	wire          mux_pipeline_066_source0_valid;                                        // mux_pipeline_066:out_valid -> rsp_mux:sink20_valid
	wire  [115:0] mux_pipeline_066_source0_data;                                         // mux_pipeline_066:out_data -> rsp_mux:sink20_data
	wire          mux_pipeline_066_source0_ready;                                        // rsp_mux:sink20_ready -> mux_pipeline_066:out_ready
	wire   [30:0] mux_pipeline_066_source0_channel;                                      // mux_pipeline_066:out_channel -> rsp_mux:sink20_channel
	wire          mux_pipeline_066_source0_startofpacket;                                // mux_pipeline_066:out_startofpacket -> rsp_mux:sink20_startofpacket
	wire          mux_pipeline_066_source0_endofpacket;                                  // mux_pipeline_066:out_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_029_src0_valid;                                              // rsp_demux_029:src0_valid -> mux_pipeline_067:in_valid
	wire  [115:0] rsp_demux_029_src0_data;                                               // rsp_demux_029:src0_data -> mux_pipeline_067:in_data
	wire          rsp_demux_029_src0_ready;                                              // mux_pipeline_067:in_ready -> rsp_demux_029:src0_ready
	wire   [30:0] rsp_demux_029_src0_channel;                                            // rsp_demux_029:src0_channel -> mux_pipeline_067:in_channel
	wire          rsp_demux_029_src0_startofpacket;                                      // rsp_demux_029:src0_startofpacket -> mux_pipeline_067:in_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                        // rsp_demux_029:src0_endofpacket -> mux_pipeline_067:in_endofpacket
	wire          mux_pipeline_067_source0_valid;                                        // mux_pipeline_067:out_valid -> rsp_mux:sink21_valid
	wire  [115:0] mux_pipeline_067_source0_data;                                         // mux_pipeline_067:out_data -> rsp_mux:sink21_data
	wire          mux_pipeline_067_source0_ready;                                        // rsp_mux:sink21_ready -> mux_pipeline_067:out_ready
	wire   [30:0] mux_pipeline_067_source0_channel;                                      // mux_pipeline_067:out_channel -> rsp_mux:sink21_channel
	wire          mux_pipeline_067_source0_startofpacket;                                // mux_pipeline_067:out_startofpacket -> rsp_mux:sink21_startofpacket
	wire          mux_pipeline_067_source0_endofpacket;                                  // mux_pipeline_067:out_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_030_src0_valid;                                              // rsp_demux_030:src0_valid -> mux_pipeline_068:in_valid
	wire  [115:0] rsp_demux_030_src0_data;                                               // rsp_demux_030:src0_data -> mux_pipeline_068:in_data
	wire          rsp_demux_030_src0_ready;                                              // mux_pipeline_068:in_ready -> rsp_demux_030:src0_ready
	wire   [30:0] rsp_demux_030_src0_channel;                                            // rsp_demux_030:src0_channel -> mux_pipeline_068:in_channel
	wire          rsp_demux_030_src0_startofpacket;                                      // rsp_demux_030:src0_startofpacket -> mux_pipeline_068:in_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                        // rsp_demux_030:src0_endofpacket -> mux_pipeline_068:in_endofpacket
	wire          mux_pipeline_068_source0_valid;                                        // mux_pipeline_068:out_valid -> rsp_mux:sink22_valid
	wire  [115:0] mux_pipeline_068_source0_data;                                         // mux_pipeline_068:out_data -> rsp_mux:sink22_data
	wire          mux_pipeline_068_source0_ready;                                        // rsp_mux:sink22_ready -> mux_pipeline_068:out_ready
	wire   [30:0] mux_pipeline_068_source0_channel;                                      // mux_pipeline_068:out_channel -> rsp_mux:sink22_channel
	wire          mux_pipeline_068_source0_startofpacket;                                // mux_pipeline_068:out_startofpacket -> rsp_mux:sink22_startofpacket
	wire          mux_pipeline_068_source0_endofpacket;                                  // mux_pipeline_068:out_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_001_src0_valid;                                              // rsp_demux_001:src0_valid -> mux_pipeline_069:in_valid
	wire  [115:0] rsp_demux_001_src0_data;                                               // rsp_demux_001:src0_data -> mux_pipeline_069:in_data
	wire          rsp_demux_001_src0_ready;                                              // mux_pipeline_069:in_ready -> rsp_demux_001:src0_ready
	wire   [30:0] rsp_demux_001_src0_channel;                                            // rsp_demux_001:src0_channel -> mux_pipeline_069:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                      // rsp_demux_001:src0_startofpacket -> mux_pipeline_069:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                        // rsp_demux_001:src0_endofpacket -> mux_pipeline_069:in_endofpacket
	wire          mux_pipeline_069_source0_valid;                                        // mux_pipeline_069:out_valid -> rsp_mux_001:sink0_valid
	wire  [115:0] mux_pipeline_069_source0_data;                                         // mux_pipeline_069:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_069_source0_ready;                                        // rsp_mux_001:sink0_ready -> mux_pipeline_069:out_ready
	wire   [30:0] mux_pipeline_069_source0_channel;                                      // mux_pipeline_069:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_069_source0_startofpacket;                                // mux_pipeline_069:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_069_source0_endofpacket;                                  // mux_pipeline_069:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                              // rsp_demux_003:src0_valid -> mux_pipeline_070:in_valid
	wire  [115:0] rsp_demux_003_src0_data;                                               // rsp_demux_003:src0_data -> mux_pipeline_070:in_data
	wire          rsp_demux_003_src0_ready;                                              // mux_pipeline_070:in_ready -> rsp_demux_003:src0_ready
	wire   [30:0] rsp_demux_003_src0_channel;                                            // rsp_demux_003:src0_channel -> mux_pipeline_070:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                      // rsp_demux_003:src0_startofpacket -> mux_pipeline_070:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                        // rsp_demux_003:src0_endofpacket -> mux_pipeline_070:in_endofpacket
	wire          mux_pipeline_070_source0_valid;                                        // mux_pipeline_070:out_valid -> rsp_mux_001:sink1_valid
	wire  [115:0] mux_pipeline_070_source0_data;                                         // mux_pipeline_070:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_070_source0_ready;                                        // rsp_mux_001:sink1_ready -> mux_pipeline_070:out_ready
	wire   [30:0] mux_pipeline_070_source0_channel;                                      // mux_pipeline_070:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_070_source0_startofpacket;                                // mux_pipeline_070:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_070_source0_endofpacket;                                  // mux_pipeline_070:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                              // rsp_demux_005:src0_valid -> mux_pipeline_071:in_valid
	wire  [115:0] rsp_demux_005_src0_data;                                               // rsp_demux_005:src0_data -> mux_pipeline_071:in_data
	wire          rsp_demux_005_src0_ready;                                              // mux_pipeline_071:in_ready -> rsp_demux_005:src0_ready
	wire   [30:0] rsp_demux_005_src0_channel;                                            // rsp_demux_005:src0_channel -> mux_pipeline_071:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                      // rsp_demux_005:src0_startofpacket -> mux_pipeline_071:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                        // rsp_demux_005:src0_endofpacket -> mux_pipeline_071:in_endofpacket
	wire          mux_pipeline_071_source0_valid;                                        // mux_pipeline_071:out_valid -> rsp_mux_001:sink2_valid
	wire  [115:0] mux_pipeline_071_source0_data;                                         // mux_pipeline_071:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_071_source0_ready;                                        // rsp_mux_001:sink2_ready -> mux_pipeline_071:out_ready
	wire   [30:0] mux_pipeline_071_source0_channel;                                      // mux_pipeline_071:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_071_source0_startofpacket;                                // mux_pipeline_071:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_071_source0_endofpacket;                                  // mux_pipeline_071:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_007_src0_valid;                                              // rsp_demux_007:src0_valid -> mux_pipeline_072:in_valid
	wire  [115:0] rsp_demux_007_src0_data;                                               // rsp_demux_007:src0_data -> mux_pipeline_072:in_data
	wire          rsp_demux_007_src0_ready;                                              // mux_pipeline_072:in_ready -> rsp_demux_007:src0_ready
	wire   [30:0] rsp_demux_007_src0_channel;                                            // rsp_demux_007:src0_channel -> mux_pipeline_072:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                      // rsp_demux_007:src0_startofpacket -> mux_pipeline_072:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                        // rsp_demux_007:src0_endofpacket -> mux_pipeline_072:in_endofpacket
	wire          mux_pipeline_072_source0_valid;                                        // mux_pipeline_072:out_valid -> rsp_mux_001:sink3_valid
	wire  [115:0] mux_pipeline_072_source0_data;                                         // mux_pipeline_072:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_072_source0_ready;                                        // rsp_mux_001:sink3_ready -> mux_pipeline_072:out_ready
	wire   [30:0] mux_pipeline_072_source0_channel;                                      // mux_pipeline_072:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_072_source0_startofpacket;                                // mux_pipeline_072:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_072_source0_endofpacket;                                  // mux_pipeline_072:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_009_src0_valid;                                              // rsp_demux_009:src0_valid -> mux_pipeline_073:in_valid
	wire  [115:0] rsp_demux_009_src0_data;                                               // rsp_demux_009:src0_data -> mux_pipeline_073:in_data
	wire          rsp_demux_009_src0_ready;                                              // mux_pipeline_073:in_ready -> rsp_demux_009:src0_ready
	wire   [30:0] rsp_demux_009_src0_channel;                                            // rsp_demux_009:src0_channel -> mux_pipeline_073:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                      // rsp_demux_009:src0_startofpacket -> mux_pipeline_073:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                        // rsp_demux_009:src0_endofpacket -> mux_pipeline_073:in_endofpacket
	wire          mux_pipeline_073_source0_valid;                                        // mux_pipeline_073:out_valid -> rsp_mux_001:sink4_valid
	wire  [115:0] mux_pipeline_073_source0_data;                                         // mux_pipeline_073:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_073_source0_ready;                                        // rsp_mux_001:sink4_ready -> mux_pipeline_073:out_ready
	wire   [30:0] mux_pipeline_073_source0_channel;                                      // mux_pipeline_073:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_073_source0_startofpacket;                                // mux_pipeline_073:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_073_source0_endofpacket;                                  // mux_pipeline_073:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_011_src0_valid;                                              // rsp_demux_011:src0_valid -> mux_pipeline_074:in_valid
	wire  [115:0] rsp_demux_011_src0_data;                                               // rsp_demux_011:src0_data -> mux_pipeline_074:in_data
	wire          rsp_demux_011_src0_ready;                                              // mux_pipeline_074:in_ready -> rsp_demux_011:src0_ready
	wire   [30:0] rsp_demux_011_src0_channel;                                            // rsp_demux_011:src0_channel -> mux_pipeline_074:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                      // rsp_demux_011:src0_startofpacket -> mux_pipeline_074:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                        // rsp_demux_011:src0_endofpacket -> mux_pipeline_074:in_endofpacket
	wire          mux_pipeline_074_source0_valid;                                        // mux_pipeline_074:out_valid -> rsp_mux_001:sink5_valid
	wire  [115:0] mux_pipeline_074_source0_data;                                         // mux_pipeline_074:out_data -> rsp_mux_001:sink5_data
	wire          mux_pipeline_074_source0_ready;                                        // rsp_mux_001:sink5_ready -> mux_pipeline_074:out_ready
	wire   [30:0] mux_pipeline_074_source0_channel;                                      // mux_pipeline_074:out_channel -> rsp_mux_001:sink5_channel
	wire          mux_pipeline_074_source0_startofpacket;                                // mux_pipeline_074:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          mux_pipeline_074_source0_endofpacket;                                  // mux_pipeline_074:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_013_src0_valid;                                              // rsp_demux_013:src0_valid -> mux_pipeline_075:in_valid
	wire  [115:0] rsp_demux_013_src0_data;                                               // rsp_demux_013:src0_data -> mux_pipeline_075:in_data
	wire          rsp_demux_013_src0_ready;                                              // mux_pipeline_075:in_ready -> rsp_demux_013:src0_ready
	wire   [30:0] rsp_demux_013_src0_channel;                                            // rsp_demux_013:src0_channel -> mux_pipeline_075:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                      // rsp_demux_013:src0_startofpacket -> mux_pipeline_075:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                        // rsp_demux_013:src0_endofpacket -> mux_pipeline_075:in_endofpacket
	wire          mux_pipeline_075_source0_valid;                                        // mux_pipeline_075:out_valid -> rsp_mux_001:sink6_valid
	wire  [115:0] mux_pipeline_075_source0_data;                                         // mux_pipeline_075:out_data -> rsp_mux_001:sink6_data
	wire          mux_pipeline_075_source0_ready;                                        // rsp_mux_001:sink6_ready -> mux_pipeline_075:out_ready
	wire   [30:0] mux_pipeline_075_source0_channel;                                      // mux_pipeline_075:out_channel -> rsp_mux_001:sink6_channel
	wire          mux_pipeline_075_source0_startofpacket;                                // mux_pipeline_075:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          mux_pipeline_075_source0_endofpacket;                                  // mux_pipeline_075:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_015_src0_valid;                                              // rsp_demux_015:src0_valid -> mux_pipeline_076:in_valid
	wire  [115:0] rsp_demux_015_src0_data;                                               // rsp_demux_015:src0_data -> mux_pipeline_076:in_data
	wire          rsp_demux_015_src0_ready;                                              // mux_pipeline_076:in_ready -> rsp_demux_015:src0_ready
	wire   [30:0] rsp_demux_015_src0_channel;                                            // rsp_demux_015:src0_channel -> mux_pipeline_076:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                      // rsp_demux_015:src0_startofpacket -> mux_pipeline_076:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                        // rsp_demux_015:src0_endofpacket -> mux_pipeline_076:in_endofpacket
	wire          mux_pipeline_076_source0_valid;                                        // mux_pipeline_076:out_valid -> rsp_mux_001:sink7_valid
	wire  [115:0] mux_pipeline_076_source0_data;                                         // mux_pipeline_076:out_data -> rsp_mux_001:sink7_data
	wire          mux_pipeline_076_source0_ready;                                        // rsp_mux_001:sink7_ready -> mux_pipeline_076:out_ready
	wire   [30:0] mux_pipeline_076_source0_channel;                                      // mux_pipeline_076:out_channel -> rsp_mux_001:sink7_channel
	wire          mux_pipeline_076_source0_startofpacket;                                // mux_pipeline_076:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          mux_pipeline_076_source0_endofpacket;                                  // mux_pipeline_076:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_016_src1_valid;                                              // rsp_demux_016:src1_valid -> mux_pipeline_077:in_valid
	wire  [115:0] rsp_demux_016_src1_data;                                               // rsp_demux_016:src1_data -> mux_pipeline_077:in_data
	wire          rsp_demux_016_src1_ready;                                              // mux_pipeline_077:in_ready -> rsp_demux_016:src1_ready
	wire   [30:0] rsp_demux_016_src1_channel;                                            // rsp_demux_016:src1_channel -> mux_pipeline_077:in_channel
	wire          rsp_demux_016_src1_startofpacket;                                      // rsp_demux_016:src1_startofpacket -> mux_pipeline_077:in_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                        // rsp_demux_016:src1_endofpacket -> mux_pipeline_077:in_endofpacket
	wire          mux_pipeline_077_source0_valid;                                        // mux_pipeline_077:out_valid -> rsp_mux_001:sink8_valid
	wire  [115:0] mux_pipeline_077_source0_data;                                         // mux_pipeline_077:out_data -> rsp_mux_001:sink8_data
	wire          mux_pipeline_077_source0_ready;                                        // rsp_mux_001:sink8_ready -> mux_pipeline_077:out_ready
	wire   [30:0] mux_pipeline_077_source0_channel;                                      // mux_pipeline_077:out_channel -> rsp_mux_001:sink8_channel
	wire          mux_pipeline_077_source0_startofpacket;                                // mux_pipeline_077:out_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          mux_pipeline_077_source0_endofpacket;                                  // mux_pipeline_077:out_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_017_src1_valid;                                              // rsp_demux_017:src1_valid -> mux_pipeline_078:in_valid
	wire  [115:0] rsp_demux_017_src1_data;                                               // rsp_demux_017:src1_data -> mux_pipeline_078:in_data
	wire          rsp_demux_017_src1_ready;                                              // mux_pipeline_078:in_ready -> rsp_demux_017:src1_ready
	wire   [30:0] rsp_demux_017_src1_channel;                                            // rsp_demux_017:src1_channel -> mux_pipeline_078:in_channel
	wire          rsp_demux_017_src1_startofpacket;                                      // rsp_demux_017:src1_startofpacket -> mux_pipeline_078:in_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                        // rsp_demux_017:src1_endofpacket -> mux_pipeline_078:in_endofpacket
	wire          mux_pipeline_078_source0_valid;                                        // mux_pipeline_078:out_valid -> rsp_mux_001:sink9_valid
	wire  [115:0] mux_pipeline_078_source0_data;                                         // mux_pipeline_078:out_data -> rsp_mux_001:sink9_data
	wire          mux_pipeline_078_source0_ready;                                        // rsp_mux_001:sink9_ready -> mux_pipeline_078:out_ready
	wire   [30:0] mux_pipeline_078_source0_channel;                                      // mux_pipeline_078:out_channel -> rsp_mux_001:sink9_channel
	wire          mux_pipeline_078_source0_startofpacket;                                // mux_pipeline_078:out_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          mux_pipeline_078_source0_endofpacket;                                  // mux_pipeline_078:out_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_018_src1_valid;                                              // rsp_demux_018:src1_valid -> mux_pipeline_079:in_valid
	wire  [115:0] rsp_demux_018_src1_data;                                               // rsp_demux_018:src1_data -> mux_pipeline_079:in_data
	wire          rsp_demux_018_src1_ready;                                              // mux_pipeline_079:in_ready -> rsp_demux_018:src1_ready
	wire   [30:0] rsp_demux_018_src1_channel;                                            // rsp_demux_018:src1_channel -> mux_pipeline_079:in_channel
	wire          rsp_demux_018_src1_startofpacket;                                      // rsp_demux_018:src1_startofpacket -> mux_pipeline_079:in_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                        // rsp_demux_018:src1_endofpacket -> mux_pipeline_079:in_endofpacket
	wire          mux_pipeline_079_source0_valid;                                        // mux_pipeline_079:out_valid -> rsp_mux_001:sink10_valid
	wire  [115:0] mux_pipeline_079_source0_data;                                         // mux_pipeline_079:out_data -> rsp_mux_001:sink10_data
	wire          mux_pipeline_079_source0_ready;                                        // rsp_mux_001:sink10_ready -> mux_pipeline_079:out_ready
	wire   [30:0] mux_pipeline_079_source0_channel;                                      // mux_pipeline_079:out_channel -> rsp_mux_001:sink10_channel
	wire          mux_pipeline_079_source0_startofpacket;                                // mux_pipeline_079:out_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          mux_pipeline_079_source0_endofpacket;                                  // mux_pipeline_079:out_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_019_src1_valid;                                              // rsp_demux_019:src1_valid -> mux_pipeline_080:in_valid
	wire  [115:0] rsp_demux_019_src1_data;                                               // rsp_demux_019:src1_data -> mux_pipeline_080:in_data
	wire          rsp_demux_019_src1_ready;                                              // mux_pipeline_080:in_ready -> rsp_demux_019:src1_ready
	wire   [30:0] rsp_demux_019_src1_channel;                                            // rsp_demux_019:src1_channel -> mux_pipeline_080:in_channel
	wire          rsp_demux_019_src1_startofpacket;                                      // rsp_demux_019:src1_startofpacket -> mux_pipeline_080:in_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                        // rsp_demux_019:src1_endofpacket -> mux_pipeline_080:in_endofpacket
	wire          mux_pipeline_080_source0_valid;                                        // mux_pipeline_080:out_valid -> rsp_mux_001:sink11_valid
	wire  [115:0] mux_pipeline_080_source0_data;                                         // mux_pipeline_080:out_data -> rsp_mux_001:sink11_data
	wire          mux_pipeline_080_source0_ready;                                        // rsp_mux_001:sink11_ready -> mux_pipeline_080:out_ready
	wire   [30:0] mux_pipeline_080_source0_channel;                                      // mux_pipeline_080:out_channel -> rsp_mux_001:sink11_channel
	wire          mux_pipeline_080_source0_startofpacket;                                // mux_pipeline_080:out_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          mux_pipeline_080_source0_endofpacket;                                  // mux_pipeline_080:out_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_020_src1_valid;                                              // rsp_demux_020:src1_valid -> mux_pipeline_081:in_valid
	wire  [115:0] rsp_demux_020_src1_data;                                               // rsp_demux_020:src1_data -> mux_pipeline_081:in_data
	wire          rsp_demux_020_src1_ready;                                              // mux_pipeline_081:in_ready -> rsp_demux_020:src1_ready
	wire   [30:0] rsp_demux_020_src1_channel;                                            // rsp_demux_020:src1_channel -> mux_pipeline_081:in_channel
	wire          rsp_demux_020_src1_startofpacket;                                      // rsp_demux_020:src1_startofpacket -> mux_pipeline_081:in_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                        // rsp_demux_020:src1_endofpacket -> mux_pipeline_081:in_endofpacket
	wire          mux_pipeline_081_source0_valid;                                        // mux_pipeline_081:out_valid -> rsp_mux_001:sink12_valid
	wire  [115:0] mux_pipeline_081_source0_data;                                         // mux_pipeline_081:out_data -> rsp_mux_001:sink12_data
	wire          mux_pipeline_081_source0_ready;                                        // rsp_mux_001:sink12_ready -> mux_pipeline_081:out_ready
	wire   [30:0] mux_pipeline_081_source0_channel;                                      // mux_pipeline_081:out_channel -> rsp_mux_001:sink12_channel
	wire          mux_pipeline_081_source0_startofpacket;                                // mux_pipeline_081:out_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          mux_pipeline_081_source0_endofpacket;                                  // mux_pipeline_081:out_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_021_src1_valid;                                              // rsp_demux_021:src1_valid -> mux_pipeline_082:in_valid
	wire  [115:0] rsp_demux_021_src1_data;                                               // rsp_demux_021:src1_data -> mux_pipeline_082:in_data
	wire          rsp_demux_021_src1_ready;                                              // mux_pipeline_082:in_ready -> rsp_demux_021:src1_ready
	wire   [30:0] rsp_demux_021_src1_channel;                                            // rsp_demux_021:src1_channel -> mux_pipeline_082:in_channel
	wire          rsp_demux_021_src1_startofpacket;                                      // rsp_demux_021:src1_startofpacket -> mux_pipeline_082:in_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                        // rsp_demux_021:src1_endofpacket -> mux_pipeline_082:in_endofpacket
	wire          mux_pipeline_082_source0_valid;                                        // mux_pipeline_082:out_valid -> rsp_mux_001:sink13_valid
	wire  [115:0] mux_pipeline_082_source0_data;                                         // mux_pipeline_082:out_data -> rsp_mux_001:sink13_data
	wire          mux_pipeline_082_source0_ready;                                        // rsp_mux_001:sink13_ready -> mux_pipeline_082:out_ready
	wire   [30:0] mux_pipeline_082_source0_channel;                                      // mux_pipeline_082:out_channel -> rsp_mux_001:sink13_channel
	wire          mux_pipeline_082_source0_startofpacket;                                // mux_pipeline_082:out_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          mux_pipeline_082_source0_endofpacket;                                  // mux_pipeline_082:out_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_022_src1_valid;                                              // rsp_demux_022:src1_valid -> mux_pipeline_083:in_valid
	wire  [115:0] rsp_demux_022_src1_data;                                               // rsp_demux_022:src1_data -> mux_pipeline_083:in_data
	wire          rsp_demux_022_src1_ready;                                              // mux_pipeline_083:in_ready -> rsp_demux_022:src1_ready
	wire   [30:0] rsp_demux_022_src1_channel;                                            // rsp_demux_022:src1_channel -> mux_pipeline_083:in_channel
	wire          rsp_demux_022_src1_startofpacket;                                      // rsp_demux_022:src1_startofpacket -> mux_pipeline_083:in_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                        // rsp_demux_022:src1_endofpacket -> mux_pipeline_083:in_endofpacket
	wire          mux_pipeline_083_source0_valid;                                        // mux_pipeline_083:out_valid -> rsp_mux_001:sink14_valid
	wire  [115:0] mux_pipeline_083_source0_data;                                         // mux_pipeline_083:out_data -> rsp_mux_001:sink14_data
	wire          mux_pipeline_083_source0_ready;                                        // rsp_mux_001:sink14_ready -> mux_pipeline_083:out_ready
	wire   [30:0] mux_pipeline_083_source0_channel;                                      // mux_pipeline_083:out_channel -> rsp_mux_001:sink14_channel
	wire          mux_pipeline_083_source0_startofpacket;                                // mux_pipeline_083:out_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          mux_pipeline_083_source0_endofpacket;                                  // mux_pipeline_083:out_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_023_src1_valid;                                              // rsp_demux_023:src1_valid -> mux_pipeline_084:in_valid
	wire  [115:0] rsp_demux_023_src1_data;                                               // rsp_demux_023:src1_data -> mux_pipeline_084:in_data
	wire          rsp_demux_023_src1_ready;                                              // mux_pipeline_084:in_ready -> rsp_demux_023:src1_ready
	wire   [30:0] rsp_demux_023_src1_channel;                                            // rsp_demux_023:src1_channel -> mux_pipeline_084:in_channel
	wire          rsp_demux_023_src1_startofpacket;                                      // rsp_demux_023:src1_startofpacket -> mux_pipeline_084:in_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                        // rsp_demux_023:src1_endofpacket -> mux_pipeline_084:in_endofpacket
	wire          mux_pipeline_084_source0_valid;                                        // mux_pipeline_084:out_valid -> rsp_mux_001:sink15_valid
	wire  [115:0] mux_pipeline_084_source0_data;                                         // mux_pipeline_084:out_data -> rsp_mux_001:sink15_data
	wire          mux_pipeline_084_source0_ready;                                        // rsp_mux_001:sink15_ready -> mux_pipeline_084:out_ready
	wire   [30:0] mux_pipeline_084_source0_channel;                                      // mux_pipeline_084:out_channel -> rsp_mux_001:sink15_channel
	wire          mux_pipeline_084_source0_startofpacket;                                // mux_pipeline_084:out_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          mux_pipeline_084_source0_endofpacket;                                  // mux_pipeline_084:out_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_024_src1_valid;                                              // rsp_demux_024:src1_valid -> mux_pipeline_085:in_valid
	wire  [115:0] rsp_demux_024_src1_data;                                               // rsp_demux_024:src1_data -> mux_pipeline_085:in_data
	wire          rsp_demux_024_src1_ready;                                              // mux_pipeline_085:in_ready -> rsp_demux_024:src1_ready
	wire   [30:0] rsp_demux_024_src1_channel;                                            // rsp_demux_024:src1_channel -> mux_pipeline_085:in_channel
	wire          rsp_demux_024_src1_startofpacket;                                      // rsp_demux_024:src1_startofpacket -> mux_pipeline_085:in_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                        // rsp_demux_024:src1_endofpacket -> mux_pipeline_085:in_endofpacket
	wire          mux_pipeline_085_source0_valid;                                        // mux_pipeline_085:out_valid -> rsp_mux_001:sink16_valid
	wire  [115:0] mux_pipeline_085_source0_data;                                         // mux_pipeline_085:out_data -> rsp_mux_001:sink16_data
	wire          mux_pipeline_085_source0_ready;                                        // rsp_mux_001:sink16_ready -> mux_pipeline_085:out_ready
	wire   [30:0] mux_pipeline_085_source0_channel;                                      // mux_pipeline_085:out_channel -> rsp_mux_001:sink16_channel
	wire          mux_pipeline_085_source0_startofpacket;                                // mux_pipeline_085:out_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          mux_pipeline_085_source0_endofpacket;                                  // mux_pipeline_085:out_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_025_src1_valid;                                              // rsp_demux_025:src1_valid -> mux_pipeline_086:in_valid
	wire  [115:0] rsp_demux_025_src1_data;                                               // rsp_demux_025:src1_data -> mux_pipeline_086:in_data
	wire          rsp_demux_025_src1_ready;                                              // mux_pipeline_086:in_ready -> rsp_demux_025:src1_ready
	wire   [30:0] rsp_demux_025_src1_channel;                                            // rsp_demux_025:src1_channel -> mux_pipeline_086:in_channel
	wire          rsp_demux_025_src1_startofpacket;                                      // rsp_demux_025:src1_startofpacket -> mux_pipeline_086:in_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                        // rsp_demux_025:src1_endofpacket -> mux_pipeline_086:in_endofpacket
	wire          mux_pipeline_086_source0_valid;                                        // mux_pipeline_086:out_valid -> rsp_mux_001:sink17_valid
	wire  [115:0] mux_pipeline_086_source0_data;                                         // mux_pipeline_086:out_data -> rsp_mux_001:sink17_data
	wire          mux_pipeline_086_source0_ready;                                        // rsp_mux_001:sink17_ready -> mux_pipeline_086:out_ready
	wire   [30:0] mux_pipeline_086_source0_channel;                                      // mux_pipeline_086:out_channel -> rsp_mux_001:sink17_channel
	wire          mux_pipeline_086_source0_startofpacket;                                // mux_pipeline_086:out_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          mux_pipeline_086_source0_endofpacket;                                  // mux_pipeline_086:out_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_026_src1_valid;                                              // rsp_demux_026:src1_valid -> mux_pipeline_087:in_valid
	wire  [115:0] rsp_demux_026_src1_data;                                               // rsp_demux_026:src1_data -> mux_pipeline_087:in_data
	wire          rsp_demux_026_src1_ready;                                              // mux_pipeline_087:in_ready -> rsp_demux_026:src1_ready
	wire   [30:0] rsp_demux_026_src1_channel;                                            // rsp_demux_026:src1_channel -> mux_pipeline_087:in_channel
	wire          rsp_demux_026_src1_startofpacket;                                      // rsp_demux_026:src1_startofpacket -> mux_pipeline_087:in_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                        // rsp_demux_026:src1_endofpacket -> mux_pipeline_087:in_endofpacket
	wire          mux_pipeline_087_source0_valid;                                        // mux_pipeline_087:out_valid -> rsp_mux_001:sink18_valid
	wire  [115:0] mux_pipeline_087_source0_data;                                         // mux_pipeline_087:out_data -> rsp_mux_001:sink18_data
	wire          mux_pipeline_087_source0_ready;                                        // rsp_mux_001:sink18_ready -> mux_pipeline_087:out_ready
	wire   [30:0] mux_pipeline_087_source0_channel;                                      // mux_pipeline_087:out_channel -> rsp_mux_001:sink18_channel
	wire          mux_pipeline_087_source0_startofpacket;                                // mux_pipeline_087:out_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          mux_pipeline_087_source0_endofpacket;                                  // mux_pipeline_087:out_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_027_src1_valid;                                              // rsp_demux_027:src1_valid -> mux_pipeline_088:in_valid
	wire  [115:0] rsp_demux_027_src1_data;                                               // rsp_demux_027:src1_data -> mux_pipeline_088:in_data
	wire          rsp_demux_027_src1_ready;                                              // mux_pipeline_088:in_ready -> rsp_demux_027:src1_ready
	wire   [30:0] rsp_demux_027_src1_channel;                                            // rsp_demux_027:src1_channel -> mux_pipeline_088:in_channel
	wire          rsp_demux_027_src1_startofpacket;                                      // rsp_demux_027:src1_startofpacket -> mux_pipeline_088:in_startofpacket
	wire          rsp_demux_027_src1_endofpacket;                                        // rsp_demux_027:src1_endofpacket -> mux_pipeline_088:in_endofpacket
	wire          mux_pipeline_088_source0_valid;                                        // mux_pipeline_088:out_valid -> rsp_mux_001:sink19_valid
	wire  [115:0] mux_pipeline_088_source0_data;                                         // mux_pipeline_088:out_data -> rsp_mux_001:sink19_data
	wire          mux_pipeline_088_source0_ready;                                        // rsp_mux_001:sink19_ready -> mux_pipeline_088:out_ready
	wire   [30:0] mux_pipeline_088_source0_channel;                                      // mux_pipeline_088:out_channel -> rsp_mux_001:sink19_channel
	wire          mux_pipeline_088_source0_startofpacket;                                // mux_pipeline_088:out_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          mux_pipeline_088_source0_endofpacket;                                  // mux_pipeline_088:out_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_028_src1_valid;                                              // rsp_demux_028:src1_valid -> mux_pipeline_089:in_valid
	wire  [115:0] rsp_demux_028_src1_data;                                               // rsp_demux_028:src1_data -> mux_pipeline_089:in_data
	wire          rsp_demux_028_src1_ready;                                              // mux_pipeline_089:in_ready -> rsp_demux_028:src1_ready
	wire   [30:0] rsp_demux_028_src1_channel;                                            // rsp_demux_028:src1_channel -> mux_pipeline_089:in_channel
	wire          rsp_demux_028_src1_startofpacket;                                      // rsp_demux_028:src1_startofpacket -> mux_pipeline_089:in_startofpacket
	wire          rsp_demux_028_src1_endofpacket;                                        // rsp_demux_028:src1_endofpacket -> mux_pipeline_089:in_endofpacket
	wire          mux_pipeline_089_source0_valid;                                        // mux_pipeline_089:out_valid -> rsp_mux_001:sink20_valid
	wire  [115:0] mux_pipeline_089_source0_data;                                         // mux_pipeline_089:out_data -> rsp_mux_001:sink20_data
	wire          mux_pipeline_089_source0_ready;                                        // rsp_mux_001:sink20_ready -> mux_pipeline_089:out_ready
	wire   [30:0] mux_pipeline_089_source0_channel;                                      // mux_pipeline_089:out_channel -> rsp_mux_001:sink20_channel
	wire          mux_pipeline_089_source0_startofpacket;                                // mux_pipeline_089:out_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          mux_pipeline_089_source0_endofpacket;                                  // mux_pipeline_089:out_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_029_src1_valid;                                              // rsp_demux_029:src1_valid -> mux_pipeline_090:in_valid
	wire  [115:0] rsp_demux_029_src1_data;                                               // rsp_demux_029:src1_data -> mux_pipeline_090:in_data
	wire          rsp_demux_029_src1_ready;                                              // mux_pipeline_090:in_ready -> rsp_demux_029:src1_ready
	wire   [30:0] rsp_demux_029_src1_channel;                                            // rsp_demux_029:src1_channel -> mux_pipeline_090:in_channel
	wire          rsp_demux_029_src1_startofpacket;                                      // rsp_demux_029:src1_startofpacket -> mux_pipeline_090:in_startofpacket
	wire          rsp_demux_029_src1_endofpacket;                                        // rsp_demux_029:src1_endofpacket -> mux_pipeline_090:in_endofpacket
	wire          mux_pipeline_090_source0_valid;                                        // mux_pipeline_090:out_valid -> rsp_mux_001:sink21_valid
	wire  [115:0] mux_pipeline_090_source0_data;                                         // mux_pipeline_090:out_data -> rsp_mux_001:sink21_data
	wire          mux_pipeline_090_source0_ready;                                        // rsp_mux_001:sink21_ready -> mux_pipeline_090:out_ready
	wire   [30:0] mux_pipeline_090_source0_channel;                                      // mux_pipeline_090:out_channel -> rsp_mux_001:sink21_channel
	wire          mux_pipeline_090_source0_startofpacket;                                // mux_pipeline_090:out_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          mux_pipeline_090_source0_endofpacket;                                  // mux_pipeline_090:out_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_030_src1_valid;                                              // rsp_demux_030:src1_valid -> mux_pipeline_091:in_valid
	wire  [115:0] rsp_demux_030_src1_data;                                               // rsp_demux_030:src1_data -> mux_pipeline_091:in_data
	wire          rsp_demux_030_src1_ready;                                              // mux_pipeline_091:in_ready -> rsp_demux_030:src1_ready
	wire   [30:0] rsp_demux_030_src1_channel;                                            // rsp_demux_030:src1_channel -> mux_pipeline_091:in_channel
	wire          rsp_demux_030_src1_startofpacket;                                      // rsp_demux_030:src1_startofpacket -> mux_pipeline_091:in_startofpacket
	wire          rsp_demux_030_src1_endofpacket;                                        // rsp_demux_030:src1_endofpacket -> mux_pipeline_091:in_endofpacket
	wire          mux_pipeline_091_source0_valid;                                        // mux_pipeline_091:out_valid -> rsp_mux_001:sink22_valid
	wire  [115:0] mux_pipeline_091_source0_data;                                         // mux_pipeline_091:out_data -> rsp_mux_001:sink22_data
	wire          mux_pipeline_091_source0_ready;                                        // rsp_mux_001:sink22_ready -> mux_pipeline_091:out_ready
	wire   [30:0] mux_pipeline_091_source0_channel;                                      // mux_pipeline_091:out_channel -> rsp_mux_001:sink22_channel
	wire          mux_pipeline_091_source0_startofpacket;                                // mux_pipeline_091:out_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          mux_pipeline_091_source0_endofpacket;                                  // mux_pipeline_091:out_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid;           // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data;            // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready;           // avalon_st_adapter:in_0_ready -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                         // avalon_st_adapter:out_0_valid -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                          // avalon_st_adapter:out_0_data -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                         // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                         // avalon_st_adapter:out_0_error -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_error
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid;           // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data;            // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready;           // avalon_st_adapter_001:in_0_ready -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                     // avalon_st_adapter_001:out_0_valid -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                      // avalon_st_adapter_001:out_0_data -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                     // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                     // avalon_st_adapter_001:out_0_error -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_error
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid;           // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data;            // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready;           // avalon_st_adapter_002:in_0_ready -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                     // avalon_st_adapter_002:out_0_valid -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                      // avalon_st_adapter_002:out_0_data -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                     // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                     // avalon_st_adapter_002:out_0_error -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_valid;                       // avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_data;                        // avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_003:in_0_ready -> avl_adxcfg_0_rcfg_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                     // avalon_st_adapter_003:out_0_valid -> avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                      // avalon_st_adapter_003:out_0_data -> avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                     // avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                     // avalon_st_adapter_003:out_0_error -> avl_adxcfg_0_rcfg_s0_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_valid;                       // avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_data;                        // avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_004:in_0_ready -> avl_adxcfg_1_rcfg_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                     // avalon_st_adapter_004:out_0_valid -> avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                      // avalon_st_adapter_004:out_0_data -> avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                     // avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                     // avalon_st_adapter_004:out_0_error -> avl_adxcfg_1_rcfg_s0_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_valid;                       // avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_data;                        // avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_005:in_0_ready -> avl_adxcfg_2_rcfg_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                     // avalon_st_adapter_005:out_0_valid -> avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                      // avalon_st_adapter_005:out_0_data -> avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                     // avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                     // avalon_st_adapter_005:out_0_error -> avl_adxcfg_2_rcfg_s0_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_valid;                       // avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_data;                        // avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_006:in_0_ready -> avl_adxcfg_3_rcfg_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                     // avalon_st_adapter_006:out_0_valid -> avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                      // avalon_st_adapter_006:out_0_data -> avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                     // avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                     // avalon_st_adapter_006:out_0_error -> avl_adxcfg_3_rcfg_s0_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_valid;                       // avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_data;                        // avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_007:in_0_ready -> avl_adxcfg_0_rcfg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                     // avalon_st_adapter_007:out_0_valid -> avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                      // avalon_st_adapter_007:out_0_data -> avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                     // avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                     // avalon_st_adapter_007:out_0_error -> avl_adxcfg_0_rcfg_s1_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_valid;                       // avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_data;                        // avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_008:in_0_ready -> avl_adxcfg_1_rcfg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                     // avalon_st_adapter_008:out_0_valid -> avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                      // avalon_st_adapter_008:out_0_data -> avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                     // avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                     // avalon_st_adapter_008:out_0_error -> avl_adxcfg_1_rcfg_s1_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_valid;                       // avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_data;                        // avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_009:in_0_ready -> avl_adxcfg_2_rcfg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                     // avalon_st_adapter_009:out_0_valid -> avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                      // avalon_st_adapter_009:out_0_data -> avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                     // avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                     // avalon_st_adapter_009:out_0_error -> avl_adxcfg_2_rcfg_s1_agent:rdata_fifo_sink_error
	wire          avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_valid;                       // avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_data;                        // avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_010:in_0_ready -> avl_adxcfg_3_rcfg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                     // avalon_st_adapter_010:out_0_valid -> avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                      // avalon_st_adapter_010:out_0_data -> avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                     // avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                     // avalon_st_adapter_010:out_0_error -> avl_adxcfg_3_rcfg_s1_agent:rdata_fifo_sink_error
	wire          sys_gpio_bd_s1_agent_rdata_fifo_out_valid;                             // sys_gpio_bd_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] sys_gpio_bd_s1_agent_rdata_fifo_out_data;                              // sys_gpio_bd_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          sys_gpio_bd_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_011:in_0_ready -> sys_gpio_bd_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                     // avalon_st_adapter_011:out_0_valid -> sys_gpio_bd_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                      // avalon_st_adapter_011:out_0_data -> sys_gpio_bd_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                     // sys_gpio_bd_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                     // avalon_st_adapter_011:out_0_error -> sys_gpio_bd_s1_agent:rdata_fifo_sink_error
	wire          sys_gpio_in_s1_agent_rdata_fifo_out_valid;                             // sys_gpio_in_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] sys_gpio_in_s1_agent_rdata_fifo_out_data;                              // sys_gpio_in_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          sys_gpio_in_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_012:in_0_ready -> sys_gpio_in_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                     // avalon_st_adapter_012:out_0_valid -> sys_gpio_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                      // avalon_st_adapter_012:out_0_data -> sys_gpio_in_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                     // sys_gpio_in_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                     // avalon_st_adapter_012:out_0_error -> sys_gpio_in_s1_agent:rdata_fifo_sink_error
	wire          sys_gpio_out_s1_agent_rdata_fifo_out_valid;                            // sys_gpio_out_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] sys_gpio_out_s1_agent_rdata_fifo_out_data;                             // sys_gpio_out_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          sys_gpio_out_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_013:in_0_ready -> sys_gpio_out_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                     // avalon_st_adapter_013:out_0_valid -> sys_gpio_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                      // avalon_st_adapter_013:out_0_data -> sys_gpio_out_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                     // sys_gpio_out_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                     // avalon_st_adapter_013:out_0_error -> sys_gpio_out_s1_agent:rdata_fifo_sink_error
	wire          sys_spi_spi_control_port_agent_rdata_fifo_out_valid;                   // sys_spi_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] sys_spi_spi_control_port_agent_rdata_fifo_out_data;                    // sys_spi_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          sys_spi_spi_control_port_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_014:in_0_ready -> sys_spi_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                     // avalon_st_adapter_014:out_0_valid -> sys_spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                      // avalon_st_adapter_014:out_0_data -> sys_spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                     // sys_spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                     // avalon_st_adapter_014:out_0_error -> sys_spi_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ad9144_jesd204_lane_pll_reconfig_translator (
		.clk                    (sys_clk_clk_clk),                                         //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (ad9144_jesd204_lane_pll_reconfig_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ad9144_jesd204_lane_pll_reconfig_agent_m0_read),          //                         .read
		.uav_write              (ad9144_jesd204_lane_pll_reconfig_agent_m0_write),         //                         .write
		.uav_waitrequest        (ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ad9144_jesd204_lane_pll_reconfig_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (ad9144_jesd204_lane_pll_reconfig_address),                //      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_lane_pll_reconfig_write),                  //                         .write
		.av_read                (ad9144_jesd204_lane_pll_reconfig_read),                   //                         .read
		.av_readdata            (ad9144_jesd204_lane_pll_reconfig_readdata),               //                         .readdata
		.av_writedata           (ad9144_jesd204_lane_pll_reconfig_writedata),              //                         .writedata
		.av_waitrequest         (ad9144_jesd204_lane_pll_reconfig_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ad9144_jesd204_link_pll_reconfig_translator (
		.clk                    (sys_clk_clk_clk),                                         //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (ad9144_jesd204_link_pll_reconfig_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ad9144_jesd204_link_pll_reconfig_agent_m0_read),          //                         .read
		.uav_write              (ad9144_jesd204_link_pll_reconfig_agent_m0_write),         //                         .write
		.uav_waitrequest        (ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ad9144_jesd204_link_pll_reconfig_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ad9144_jesd204_link_pll_reconfig_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ad9144_jesd204_link_pll_reconfig_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (ad9144_jesd204_link_pll_reconfig_address),                //      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_link_pll_reconfig_write),                  //                         .write
		.av_read                (ad9144_jesd204_link_pll_reconfig_read),                   //                         .read
		.av_readdata            (ad9144_jesd204_link_pll_reconfig_readdata),               //                         .readdata
		.av_writedata           (ad9144_jesd204_link_pll_reconfig_writedata),              //                         .writedata
		.av_waitrequest         (ad9144_jesd204_link_pll_reconfig_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ad9680_jesd204_link_pll_reconfig_translator (
		.clk                    (sys_clk_clk_clk),                                         //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (ad9680_jesd204_link_pll_reconfig_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (ad9680_jesd204_link_pll_reconfig_agent_m0_read),          //                         .read
		.uav_write              (ad9680_jesd204_link_pll_reconfig_agent_m0_write),         //                         .write
		.uav_waitrequest        (ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (ad9680_jesd204_link_pll_reconfig_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (ad9680_jesd204_link_pll_reconfig_agent_m0_writedata),     //                         .writedata
		.uav_lock               (ad9680_jesd204_link_pll_reconfig_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (ad9680_jesd204_link_pll_reconfig_address),                //      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_link_pll_reconfig_write),                  //                         .write
		.av_read                (ad9680_jesd204_link_pll_reconfig_read),                   //                         .read
		.av_readdata            (ad9680_jesd204_link_pll_reconfig_readdata),               //                         .readdata
		.av_writedata           (ad9680_jesd204_link_pll_reconfig_writedata),              //                         .writedata
		.av_waitrequest         (ad9680_jesd204_link_pll_reconfig_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_0_rcfg_s0_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_0_rcfg_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_0_rcfg_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_0_rcfg_s0_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_0_rcfg_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_0_rcfg_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_0_rcfg_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_0_rcfg_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_0_rcfg_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_0_rcfg_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_0_rcfg_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_0_rcfg_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_0_rcfg_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_0_rcfg_s0_write),                           //                         .write
		.av_read                (avl_adxcfg_0_rcfg_s0_read),                            //                         .read
		.av_readdata            (avl_adxcfg_0_rcfg_s0_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_0_rcfg_s0_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_0_rcfg_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_1_rcfg_s0_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_1_rcfg_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_1_rcfg_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_1_rcfg_s0_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_1_rcfg_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_1_rcfg_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_1_rcfg_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_1_rcfg_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_1_rcfg_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_1_rcfg_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_1_rcfg_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_1_rcfg_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_1_rcfg_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_1_rcfg_s0_write),                           //                         .write
		.av_read                (avl_adxcfg_1_rcfg_s0_read),                            //                         .read
		.av_readdata            (avl_adxcfg_1_rcfg_s0_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_1_rcfg_s0_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_1_rcfg_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_2_rcfg_s0_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_2_rcfg_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_2_rcfg_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_2_rcfg_s0_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_2_rcfg_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_2_rcfg_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_2_rcfg_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_2_rcfg_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_2_rcfg_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_2_rcfg_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_2_rcfg_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_2_rcfg_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_2_rcfg_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_2_rcfg_s0_write),                           //                         .write
		.av_read                (avl_adxcfg_2_rcfg_s0_read),                            //                         .read
		.av_readdata            (avl_adxcfg_2_rcfg_s0_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_2_rcfg_s0_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_2_rcfg_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_3_rcfg_s0_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_3_rcfg_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_3_rcfg_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_3_rcfg_s0_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_3_rcfg_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_3_rcfg_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_3_rcfg_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_3_rcfg_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_3_rcfg_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_3_rcfg_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_3_rcfg_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_3_rcfg_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_3_rcfg_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_3_rcfg_s0_write),                           //                         .write
		.av_read                (avl_adxcfg_3_rcfg_s0_read),                            //                         .read
		.av_readdata            (avl_adxcfg_3_rcfg_s0_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_3_rcfg_s0_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_3_rcfg_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_0_rcfg_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_0_rcfg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_0_rcfg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_0_rcfg_s1_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_0_rcfg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_0_rcfg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_0_rcfg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_0_rcfg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_0_rcfg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_0_rcfg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_0_rcfg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_0_rcfg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_0_rcfg_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_0_rcfg_s1_write),                           //                         .write
		.av_read                (avl_adxcfg_0_rcfg_s1_read),                            //                         .read
		.av_readdata            (avl_adxcfg_0_rcfg_s1_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_0_rcfg_s1_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_0_rcfg_s1_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_1_rcfg_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_1_rcfg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_1_rcfg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_1_rcfg_s1_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_1_rcfg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_1_rcfg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_1_rcfg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_1_rcfg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_1_rcfg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_1_rcfg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_1_rcfg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_1_rcfg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_1_rcfg_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_1_rcfg_s1_write),                           //                         .write
		.av_read                (avl_adxcfg_1_rcfg_s1_read),                            //                         .read
		.av_readdata            (avl_adxcfg_1_rcfg_s1_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_1_rcfg_s1_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_1_rcfg_s1_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_2_rcfg_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_2_rcfg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_2_rcfg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_2_rcfg_s1_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_2_rcfg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_2_rcfg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_2_rcfg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_2_rcfg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_2_rcfg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_2_rcfg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_2_rcfg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_2_rcfg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_2_rcfg_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_2_rcfg_s1_write),                           //                         .write
		.av_read                (avl_adxcfg_2_rcfg_s1_read),                            //                         .read
		.av_readdata            (avl_adxcfg_2_rcfg_s1_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_2_rcfg_s1_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_2_rcfg_s1_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avl_adxcfg_3_rcfg_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avl_adxcfg_3_rcfg_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (avl_adxcfg_3_rcfg_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (avl_adxcfg_3_rcfg_s1_agent_m0_read),                   //                         .read
		.uav_write              (avl_adxcfg_3_rcfg_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (avl_adxcfg_3_rcfg_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (avl_adxcfg_3_rcfg_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (avl_adxcfg_3_rcfg_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (avl_adxcfg_3_rcfg_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (avl_adxcfg_3_rcfg_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (avl_adxcfg_3_rcfg_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (avl_adxcfg_3_rcfg_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (avl_adxcfg_3_rcfg_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (avl_adxcfg_3_rcfg_s1_write),                           //                         .write
		.av_read                (avl_adxcfg_3_rcfg_s1_read),                            //                         .read
		.av_readdata            (avl_adxcfg_3_rcfg_s1_readdata),                        //                         .readdata
		.av_writedata           (avl_adxcfg_3_rcfg_s1_writedata),                       //                         .writedata
		.av_waitrequest         (avl_adxcfg_3_rcfg_s1_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_bd_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_bd_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_bd_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (sys_gpio_bd_s1_agent_m0_read),                         //                         .read
		.uav_write              (sys_gpio_bd_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (sys_gpio_bd_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_bd_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (sys_gpio_bd_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (sys_gpio_bd_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (sys_gpio_bd_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (sys_gpio_bd_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (sys_gpio_bd_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (sys_gpio_bd_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_bd_s1_write),                                 //                         .write
		.av_readdata            (sys_gpio_bd_s1_readdata),                              //                         .readdata
		.av_writedata           (sys_gpio_bd_s1_writedata),                             //                         .writedata
		.av_chipselect          (sys_gpio_bd_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_in_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_in_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_in_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (sys_gpio_in_s1_agent_m0_read),                         //                         .read
		.uav_write              (sys_gpio_in_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (sys_gpio_in_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_in_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (sys_gpio_in_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (sys_gpio_in_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (sys_gpio_in_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (sys_gpio_in_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (sys_gpio_in_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (sys_gpio_in_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_in_s1_write),                                 //                         .write
		.av_readdata            (sys_gpio_in_s1_readdata),                              //                         .readdata
		.av_writedata           (sys_gpio_in_s1_writedata),                             //                         .writedata
		.av_chipselect          (sys_gpio_in_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_gpio_out_s1_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_gpio_out_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sys_gpio_out_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sys_gpio_out_s1_agent_m0_read),                        //                         .read
		.uav_write              (sys_gpio_out_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sys_gpio_out_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sys_gpio_out_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sys_gpio_out_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sys_gpio_out_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sys_gpio_out_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sys_gpio_out_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sys_gpio_out_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (sys_gpio_out_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (sys_gpio_out_s1_write),                                //                         .write
		.av_readdata            (sys_gpio_out_s1_readdata),                             //                         .readdata
		.av_writedata           (sys_gpio_out_s1_writedata),                            //                         .writedata
		.av_chipselect          (sys_gpio_out_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_spi_spi_control_port_translator (
		.clk                    (sys_clk_clk_clk),                                      //                      clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sys_spi_spi_control_port_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sys_spi_spi_control_port_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sys_spi_spi_control_port_agent_m0_read),               //                         .read
		.uav_write              (sys_spi_spi_control_port_agent_m0_write),              //                         .write
		.uav_waitrequest        (sys_spi_spi_control_port_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sys_spi_spi_control_port_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sys_spi_spi_control_port_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sys_spi_spi_control_port_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sys_spi_spi_control_port_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sys_spi_spi_control_port_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sys_spi_spi_control_port_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sys_spi_spi_control_port_address),                     //      avalon_anti_slave_0.address
		.av_write               (sys_spi_spi_control_port_write),                       //                         .write
		.av_read                (sys_spi_spi_control_port_read),                        //                         .read
		.av_readdata            (sys_spi_spi_control_port_readdata),                    //                         .readdata
		.av_writedata           (sys_spi_spi_control_port_writedata),                   //                         .writedata
		.av_chipselect          (sys_spi_spi_control_port_chipselect),                  //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (88),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (86),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (100),
		.PKT_QOS_L                 (89),
		.PKT_QOS_H                 (89),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (87),
		.PKT_DATA_SIDEBAND_L       (87),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.ID                        (0)
	) sys_hps_h2f_lw_axi_master_agent (
		.aclk                   (sys_clk_clk_clk),                                            //              clk.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      //        clk_reset.reset_n
		.write_cp_valid         (sys_hps_h2f_lw_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (sys_hps_h2f_lw_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (sys_hps_h2f_lw_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (sys_hps_h2f_lw_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (sys_hps_h2f_lw_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (sys_hps_h2f_lw_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (sys_hps_h2f_lw_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (sys_hps_h2f_lw_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (sys_hps_h2f_lw_axi_master_awlen),                            //                 .awlen
		.awsize                 (sys_hps_h2f_lw_axi_master_awsize),                           //                 .awsize
		.awburst                (sys_hps_h2f_lw_axi_master_awburst),                          //                 .awburst
		.awlock                 (sys_hps_h2f_lw_axi_master_awlock),                           //                 .awlock
		.awcache                (sys_hps_h2f_lw_axi_master_awcache),                          //                 .awcache
		.awprot                 (sys_hps_h2f_lw_axi_master_awprot),                           //                 .awprot
		.awuser                 (sys_hps_h2f_lw_axi_master_awuser),                           //                 .awuser
		.awvalid                (sys_hps_h2f_lw_axi_master_awvalid),                          //                 .awvalid
		.awready                (sys_hps_h2f_lw_axi_master_awready),                          //                 .awready
		.wid                    (sys_hps_h2f_lw_axi_master_wid),                              //                 .wid
		.wdata                  (sys_hps_h2f_lw_axi_master_wdata),                            //                 .wdata
		.wstrb                  (sys_hps_h2f_lw_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (sys_hps_h2f_lw_axi_master_wlast),                            //                 .wlast
		.wvalid                 (sys_hps_h2f_lw_axi_master_wvalid),                           //                 .wvalid
		.wready                 (sys_hps_h2f_lw_axi_master_wready),                           //                 .wready
		.bid                    (sys_hps_h2f_lw_axi_master_bid),                              //                 .bid
		.bresp                  (sys_hps_h2f_lw_axi_master_bresp),                            //                 .bresp
		.bvalid                 (sys_hps_h2f_lw_axi_master_bvalid),                           //                 .bvalid
		.bready                 (sys_hps_h2f_lw_axi_master_bready),                           //                 .bready
		.arid                   (sys_hps_h2f_lw_axi_master_arid),                             //                 .arid
		.araddr                 (sys_hps_h2f_lw_axi_master_araddr),                           //                 .araddr
		.arlen                  (sys_hps_h2f_lw_axi_master_arlen),                            //                 .arlen
		.arsize                 (sys_hps_h2f_lw_axi_master_arsize),                           //                 .arsize
		.arburst                (sys_hps_h2f_lw_axi_master_arburst),                          //                 .arburst
		.arlock                 (sys_hps_h2f_lw_axi_master_arlock),                           //                 .arlock
		.arcache                (sys_hps_h2f_lw_axi_master_arcache),                          //                 .arcache
		.arprot                 (sys_hps_h2f_lw_axi_master_arprot),                           //                 .arprot
		.aruser                 (sys_hps_h2f_lw_axi_master_aruser),                           //                 .aruser
		.arvalid                (sys_hps_h2f_lw_axi_master_arvalid),                          //                 .arvalid
		.arready                (sys_hps_h2f_lw_axi_master_arready),                          //                 .arready
		.rid                    (sys_hps_h2f_lw_axi_master_rid),                              //                 .rid
		.rdata                  (sys_hps_h2f_lw_axi_master_rdata),                            //                 .rdata
		.rresp                  (sys_hps_h2f_lw_axi_master_rresp),                            //                 .rresp
		.rlast                  (sys_hps_h2f_lw_axi_master_rlast),                            //                 .rlast
		.rvalid                 (sys_hps_h2f_lw_axi_master_rvalid),                           //                 .rvalid
		.rready                 (sys_hps_h2f_lw_axi_master_rready),                           //                 .rready
		.awqos                  (4'b0000),                                                    //      (terminated)
		.arqos                  (4'b0000),                                                    //      (terminated)
		.awregion               (4'b0000),                                                    //      (terminated)
		.arregion               (4'b0000),                                                    //      (terminated)
		.wuser                  (1'b0),                                                       //      (terminated)
		.ruser                  (),                                                           //      (terminated)
		.buser                  ()                                                            //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) ad9144_jesd204_link_management_agent (
		.aclk                   (sys_clk_clk_clk),                                             //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                            //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                            //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                             //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                          //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                    //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                      //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                 //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                              //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                        //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                          //                  .endofpacket
		.read_rp_ready          (ad9144_jesd204_link_management_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (ad9144_jesd204_link_management_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (ad9144_jesd204_link_management_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (ad9144_jesd204_link_management_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (ad9144_jesd204_link_management_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (ad9144_jesd204_link_management_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (ad9144_jesd204_link_management_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (ad9144_jesd204_link_management_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (ad9144_jesd204_link_management_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (ad9144_jesd204_link_management_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (ad9144_jesd204_link_management_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (ad9144_jesd204_link_management_awprot),                       //                  .awprot
		.awvalid                (ad9144_jesd204_link_management_awvalid),                      //                  .awvalid
		.awready                (ad9144_jesd204_link_management_awready),                      //                  .awready
		.wdata                  (ad9144_jesd204_link_management_wdata),                        //                  .wdata
		.wstrb                  (ad9144_jesd204_link_management_wstrb),                        //                  .wstrb
		.wvalid                 (ad9144_jesd204_link_management_wvalid),                       //                  .wvalid
		.wready                 (ad9144_jesd204_link_management_wready),                       //                  .wready
		.bresp                  (ad9144_jesd204_link_management_bresp),                        //                  .bresp
		.bvalid                 (ad9144_jesd204_link_management_bvalid),                       //                  .bvalid
		.bready                 (ad9144_jesd204_link_management_bready),                       //                  .bready
		.araddr                 (ad9144_jesd204_link_management_araddr),                       //                  .araddr
		.arprot                 (ad9144_jesd204_link_management_arprot),                       //                  .arprot
		.arvalid                (ad9144_jesd204_link_management_arvalid),                      //                  .arvalid
		.arready                (ad9144_jesd204_link_management_arready),                      //                  .arready
		.rdata                  (ad9144_jesd204_link_management_rdata),                        //                  .rdata
		.rresp                  (ad9144_jesd204_link_management_rresp),                        //                  .rresp
		.rvalid                 (ad9144_jesd204_link_management_rvalid),                       //                  .rvalid
		.rready                 (ad9144_jesd204_link_management_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) ad9680_jesd204_link_management_agent (
		.aclk                   (sys_clk_clk_clk),                                             //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_005_source0_valid),                            //           read_cp.valid
		.read_cp_ready          (agent_pipeline_005_source0_ready),                            //                  .ready
		.read_cp_data           (agent_pipeline_005_source0_data),                             //                  .data
		.read_cp_channel        (agent_pipeline_005_source0_channel),                          //                  .channel
		.read_cp_startofpacket  (agent_pipeline_005_source0_startofpacket),                    //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_005_source0_endofpacket),                      //                  .endofpacket
		.write_cp_ready         (agent_pipeline_004_source0_ready),                            //          write_cp.ready
		.write_cp_valid         (agent_pipeline_004_source0_valid),                            //                  .valid
		.write_cp_data          (agent_pipeline_004_source0_data),                             //                  .data
		.write_cp_channel       (agent_pipeline_004_source0_channel),                          //                  .channel
		.write_cp_startofpacket (agent_pipeline_004_source0_startofpacket),                    //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_004_source0_endofpacket),                      //                  .endofpacket
		.read_rp_ready          (ad9680_jesd204_link_management_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (ad9680_jesd204_link_management_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (ad9680_jesd204_link_management_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (ad9680_jesd204_link_management_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (ad9680_jesd204_link_management_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (ad9680_jesd204_link_management_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (ad9680_jesd204_link_management_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (ad9680_jesd204_link_management_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (ad9680_jesd204_link_management_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (ad9680_jesd204_link_management_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (ad9680_jesd204_link_management_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (ad9680_jesd204_link_management_awprot),                       //                  .awprot
		.awvalid                (ad9680_jesd204_link_management_awvalid),                      //                  .awvalid
		.awready                (ad9680_jesd204_link_management_awready),                      //                  .awready
		.wdata                  (ad9680_jesd204_link_management_wdata),                        //                  .wdata
		.wstrb                  (ad9680_jesd204_link_management_wstrb),                        //                  .wstrb
		.wvalid                 (ad9680_jesd204_link_management_wvalid),                       //                  .wvalid
		.wready                 (ad9680_jesd204_link_management_wready),                       //                  .wready
		.bresp                  (ad9680_jesd204_link_management_bresp),                        //                  .bresp
		.bvalid                 (ad9680_jesd204_link_management_bvalid),                       //                  .bvalid
		.bready                 (ad9680_jesd204_link_management_bready),                       //                  .bready
		.araddr                 (ad9680_jesd204_link_management_araddr),                       //                  .araddr
		.arprot                 (ad9680_jesd204_link_management_arprot),                       //                  .arprot
		.arvalid                (ad9680_jesd204_link_management_arvalid),                      //                  .arvalid
		.arready                (ad9680_jesd204_link_management_arready),                      //                  .arready
		.rdata                  (ad9680_jesd204_link_management_rdata),                        //                  .rdata
		.rresp                  (ad9680_jesd204_link_management_rresp),                        //                  .rresp
		.rvalid                 (ad9680_jesd204_link_management_rvalid),                       //                  .rvalid
		.rready                 (ad9680_jesd204_link_management_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) ad9144_jesd204_link_reconfig_agent (
		.aclk                   (sys_clk_clk_clk),                                           //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_009_source0_valid),                          //           read_cp.valid
		.read_cp_ready          (agent_pipeline_009_source0_ready),                          //                  .ready
		.read_cp_data           (agent_pipeline_009_source0_data),                           //                  .data
		.read_cp_channel        (agent_pipeline_009_source0_channel),                        //                  .channel
		.read_cp_startofpacket  (agent_pipeline_009_source0_startofpacket),                  //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_009_source0_endofpacket),                    //                  .endofpacket
		.write_cp_ready         (agent_pipeline_008_source0_ready),                          //          write_cp.ready
		.write_cp_valid         (agent_pipeline_008_source0_valid),                          //                  .valid
		.write_cp_data          (agent_pipeline_008_source0_data),                           //                  .data
		.write_cp_channel       (agent_pipeline_008_source0_channel),                        //                  .channel
		.write_cp_startofpacket (agent_pipeline_008_source0_startofpacket),                  //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_008_source0_endofpacket),                    //                  .endofpacket
		.read_rp_ready          (ad9144_jesd204_link_reconfig_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (ad9144_jesd204_link_reconfig_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (ad9144_jesd204_link_reconfig_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (ad9144_jesd204_link_reconfig_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (ad9144_jesd204_link_reconfig_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (ad9144_jesd204_link_reconfig_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (ad9144_jesd204_link_reconfig_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (ad9144_jesd204_link_reconfig_awprot),                       //                  .awprot
		.awvalid                (ad9144_jesd204_link_reconfig_awvalid),                      //                  .awvalid
		.awready                (ad9144_jesd204_link_reconfig_awready),                      //                  .awready
		.wdata                  (ad9144_jesd204_link_reconfig_wdata),                        //                  .wdata
		.wstrb                  (ad9144_jesd204_link_reconfig_wstrb),                        //                  .wstrb
		.wvalid                 (ad9144_jesd204_link_reconfig_wvalid),                       //                  .wvalid
		.wready                 (ad9144_jesd204_link_reconfig_wready),                       //                  .wready
		.bresp                  (ad9144_jesd204_link_reconfig_bresp),                        //                  .bresp
		.bvalid                 (ad9144_jesd204_link_reconfig_bvalid),                       //                  .bvalid
		.bready                 (ad9144_jesd204_link_reconfig_bready),                       //                  .bready
		.araddr                 (ad9144_jesd204_link_reconfig_araddr),                       //                  .araddr
		.arprot                 (ad9144_jesd204_link_reconfig_arprot),                       //                  .arprot
		.arvalid                (ad9144_jesd204_link_reconfig_arvalid),                      //                  .arvalid
		.arready                (ad9144_jesd204_link_reconfig_arready),                      //                  .arready
		.rdata                  (ad9144_jesd204_link_reconfig_rdata),                        //                  .rdata
		.rresp                  (ad9144_jesd204_link_reconfig_rresp),                        //                  .rresp
		.rvalid                 (ad9144_jesd204_link_reconfig_rvalid),                       //                  .rvalid
		.rready                 (ad9144_jesd204_link_reconfig_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) ad9680_jesd204_link_reconfig_agent (
		.aclk                   (sys_clk_clk_clk),                                           //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_013_source0_valid),                          //           read_cp.valid
		.read_cp_ready          (agent_pipeline_013_source0_ready),                          //                  .ready
		.read_cp_data           (agent_pipeline_013_source0_data),                           //                  .data
		.read_cp_channel        (agent_pipeline_013_source0_channel),                        //                  .channel
		.read_cp_startofpacket  (agent_pipeline_013_source0_startofpacket),                  //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_013_source0_endofpacket),                    //                  .endofpacket
		.write_cp_ready         (agent_pipeline_012_source0_ready),                          //          write_cp.ready
		.write_cp_valid         (agent_pipeline_012_source0_valid),                          //                  .valid
		.write_cp_data          (agent_pipeline_012_source0_data),                           //                  .data
		.write_cp_channel       (agent_pipeline_012_source0_channel),                        //                  .channel
		.write_cp_startofpacket (agent_pipeline_012_source0_startofpacket),                  //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_012_source0_endofpacket),                    //                  .endofpacket
		.read_rp_ready          (ad9680_jesd204_link_reconfig_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (ad9680_jesd204_link_reconfig_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (ad9680_jesd204_link_reconfig_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (ad9680_jesd204_link_reconfig_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (ad9680_jesd204_link_reconfig_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (ad9680_jesd204_link_reconfig_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (ad9680_jesd204_link_reconfig_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (ad9680_jesd204_link_reconfig_awprot),                       //                  .awprot
		.awvalid                (ad9680_jesd204_link_reconfig_awvalid),                      //                  .awvalid
		.awready                (ad9680_jesd204_link_reconfig_awready),                      //                  .awready
		.wdata                  (ad9680_jesd204_link_reconfig_wdata),                        //                  .wdata
		.wstrb                  (ad9680_jesd204_link_reconfig_wstrb),                        //                  .wstrb
		.wvalid                 (ad9680_jesd204_link_reconfig_wvalid),                       //                  .wvalid
		.wready                 (ad9680_jesd204_link_reconfig_wready),                       //                  .wready
		.bresp                  (ad9680_jesd204_link_reconfig_bresp),                        //                  .bresp
		.bvalid                 (ad9680_jesd204_link_reconfig_bvalid),                       //                  .bvalid
		.bready                 (ad9680_jesd204_link_reconfig_bready),                       //                  .bready
		.araddr                 (ad9680_jesd204_link_reconfig_araddr),                       //                  .araddr
		.arprot                 (ad9680_jesd204_link_reconfig_arprot),                       //                  .arprot
		.arvalid                (ad9680_jesd204_link_reconfig_arvalid),                      //                  .arvalid
		.arready                (ad9680_jesd204_link_reconfig_arready),                      //                  .arready
		.rdata                  (ad9680_jesd204_link_reconfig_rdata),                        //                  .rdata
		.rresp                  (ad9680_jesd204_link_reconfig_rresp),                        //                  .rresp
		.rvalid                 (ad9680_jesd204_link_reconfig_rvalid),                       //                  .rvalid
		.rready                 (ad9680_jesd204_link_reconfig_rready)                        //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_ad9144_dma_s_axi_agent (
		.aclk                   (sys_clk_clk_clk),                                       //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_017_source0_valid),                      //           read_cp.valid
		.read_cp_ready          (agent_pipeline_017_source0_ready),                      //                  .ready
		.read_cp_data           (agent_pipeline_017_source0_data),                       //                  .data
		.read_cp_channel        (agent_pipeline_017_source0_channel),                    //                  .channel
		.read_cp_startofpacket  (agent_pipeline_017_source0_startofpacket),              //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_017_source0_endofpacket),                //                  .endofpacket
		.write_cp_ready         (agent_pipeline_016_source0_ready),                      //          write_cp.ready
		.write_cp_valid         (agent_pipeline_016_source0_valid),                      //                  .valid
		.write_cp_data          (agent_pipeline_016_source0_data),                       //                  .data
		.write_cp_channel       (agent_pipeline_016_source0_channel),                    //                  .channel
		.write_cp_startofpacket (agent_pipeline_016_source0_startofpacket),              //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_016_source0_endofpacket),                //                  .endofpacket
		.read_rp_ready          (axi_ad9144_dma_s_axi_agent_read_rp_ready),              //           read_rp.ready
		.read_rp_valid          (axi_ad9144_dma_s_axi_agent_read_rp_valid),              //                  .valid
		.read_rp_data           (axi_ad9144_dma_s_axi_agent_read_rp_data),               //                  .data
		.read_rp_startofpacket  (axi_ad9144_dma_s_axi_agent_read_rp_startofpacket),      //                  .startofpacket
		.read_rp_endofpacket    (axi_ad9144_dma_s_axi_agent_read_rp_endofpacket),        //                  .endofpacket
		.write_rp_ready         (axi_ad9144_dma_s_axi_agent_write_rp_ready),             //          write_rp.ready
		.write_rp_valid         (axi_ad9144_dma_s_axi_agent_write_rp_valid),             //                  .valid
		.write_rp_data          (axi_ad9144_dma_s_axi_agent_write_rp_data),              //                  .data
		.write_rp_startofpacket (axi_ad9144_dma_s_axi_agent_write_rp_startofpacket),     //                  .startofpacket
		.write_rp_endofpacket   (axi_ad9144_dma_s_axi_agent_write_rp_endofpacket),       //                  .endofpacket
		.awaddr                 (axi_ad9144_dma_s_axi_awaddr),                           // altera_axi_master.awaddr
		.awprot                 (axi_ad9144_dma_s_axi_awprot),                           //                  .awprot
		.awvalid                (axi_ad9144_dma_s_axi_awvalid),                          //                  .awvalid
		.awready                (axi_ad9144_dma_s_axi_awready),                          //                  .awready
		.wdata                  (axi_ad9144_dma_s_axi_wdata),                            //                  .wdata
		.wstrb                  (axi_ad9144_dma_s_axi_wstrb),                            //                  .wstrb
		.wvalid                 (axi_ad9144_dma_s_axi_wvalid),                           //                  .wvalid
		.wready                 (axi_ad9144_dma_s_axi_wready),                           //                  .wready
		.bresp                  (axi_ad9144_dma_s_axi_bresp),                            //                  .bresp
		.bvalid                 (axi_ad9144_dma_s_axi_bvalid),                           //                  .bvalid
		.bready                 (axi_ad9144_dma_s_axi_bready),                           //                  .bready
		.araddr                 (axi_ad9144_dma_s_axi_araddr),                           //                  .araddr
		.arprot                 (axi_ad9144_dma_s_axi_arprot),                           //                  .arprot
		.arvalid                (axi_ad9144_dma_s_axi_arvalid),                          //                  .arvalid
		.arready                (axi_ad9144_dma_s_axi_arready),                          //                  .arready
		.rdata                  (axi_ad9144_dma_s_axi_rdata),                            //                  .rdata
		.rresp                  (axi_ad9144_dma_s_axi_rresp),                            //                  .rresp
		.rvalid                 (axi_ad9144_dma_s_axi_rvalid),                           //                  .rvalid
		.rready                 (axi_ad9144_dma_s_axi_rready)                            //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_ad9144_core_s_axi_agent (
		.aclk                   (sys_clk_clk_clk),                                       //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_021_source0_valid),                      //           read_cp.valid
		.read_cp_ready          (agent_pipeline_021_source0_ready),                      //                  .ready
		.read_cp_data           (agent_pipeline_021_source0_data),                       //                  .data
		.read_cp_channel        (agent_pipeline_021_source0_channel),                    //                  .channel
		.read_cp_startofpacket  (agent_pipeline_021_source0_startofpacket),              //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_021_source0_endofpacket),                //                  .endofpacket
		.write_cp_ready         (agent_pipeline_020_source0_ready),                      //          write_cp.ready
		.write_cp_valid         (agent_pipeline_020_source0_valid),                      //                  .valid
		.write_cp_data          (agent_pipeline_020_source0_data),                       //                  .data
		.write_cp_channel       (agent_pipeline_020_source0_channel),                    //                  .channel
		.write_cp_startofpacket (agent_pipeline_020_source0_startofpacket),              //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_020_source0_endofpacket),                //                  .endofpacket
		.read_rp_ready          (axi_ad9144_core_s_axi_agent_read_rp_ready),             //           read_rp.ready
		.read_rp_valid          (axi_ad9144_core_s_axi_agent_read_rp_valid),             //                  .valid
		.read_rp_data           (axi_ad9144_core_s_axi_agent_read_rp_data),              //                  .data
		.read_rp_startofpacket  (axi_ad9144_core_s_axi_agent_read_rp_startofpacket),     //                  .startofpacket
		.read_rp_endofpacket    (axi_ad9144_core_s_axi_agent_read_rp_endofpacket),       //                  .endofpacket
		.write_rp_ready         (axi_ad9144_core_s_axi_agent_write_rp_ready),            //          write_rp.ready
		.write_rp_valid         (axi_ad9144_core_s_axi_agent_write_rp_valid),            //                  .valid
		.write_rp_data          (axi_ad9144_core_s_axi_agent_write_rp_data),             //                  .data
		.write_rp_startofpacket (axi_ad9144_core_s_axi_agent_write_rp_startofpacket),    //                  .startofpacket
		.write_rp_endofpacket   (axi_ad9144_core_s_axi_agent_write_rp_endofpacket),      //                  .endofpacket
		.awaddr                 (axi_ad9144_core_s_axi_awaddr),                          // altera_axi_master.awaddr
		.awprot                 (axi_ad9144_core_s_axi_awprot),                          //                  .awprot
		.awvalid                (axi_ad9144_core_s_axi_awvalid),                         //                  .awvalid
		.awready                (axi_ad9144_core_s_axi_awready),                         //                  .awready
		.wdata                  (axi_ad9144_core_s_axi_wdata),                           //                  .wdata
		.wstrb                  (axi_ad9144_core_s_axi_wstrb),                           //                  .wstrb
		.wvalid                 (axi_ad9144_core_s_axi_wvalid),                          //                  .wvalid
		.wready                 (axi_ad9144_core_s_axi_wready),                          //                  .wready
		.bresp                  (axi_ad9144_core_s_axi_bresp),                           //                  .bresp
		.bvalid                 (axi_ad9144_core_s_axi_bvalid),                          //                  .bvalid
		.bready                 (axi_ad9144_core_s_axi_bready),                          //                  .bready
		.araddr                 (axi_ad9144_core_s_axi_araddr),                          //                  .araddr
		.arprot                 (axi_ad9144_core_s_axi_arprot),                          //                  .arprot
		.arvalid                (axi_ad9144_core_s_axi_arvalid),                         //                  .arvalid
		.arready                (axi_ad9144_core_s_axi_arready),                         //                  .arready
		.rdata                  (axi_ad9144_core_s_axi_rdata),                           //                  .rdata
		.rresp                  (axi_ad9144_core_s_axi_rresp),                           //                  .rresp
		.rvalid                 (axi_ad9144_core_s_axi_rvalid),                          //                  .rvalid
		.rready                 (axi_ad9144_core_s_axi_rready)                           //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_ad9680_dma_s_axi_agent (
		.aclk                   (sys_clk_clk_clk),                                       //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_025_source0_valid),                      //           read_cp.valid
		.read_cp_ready          (agent_pipeline_025_source0_ready),                      //                  .ready
		.read_cp_data           (agent_pipeline_025_source0_data),                       //                  .data
		.read_cp_channel        (agent_pipeline_025_source0_channel),                    //                  .channel
		.read_cp_startofpacket  (agent_pipeline_025_source0_startofpacket),              //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_025_source0_endofpacket),                //                  .endofpacket
		.write_cp_ready         (agent_pipeline_024_source0_ready),                      //          write_cp.ready
		.write_cp_valid         (agent_pipeline_024_source0_valid),                      //                  .valid
		.write_cp_data          (agent_pipeline_024_source0_data),                       //                  .data
		.write_cp_channel       (agent_pipeline_024_source0_channel),                    //                  .channel
		.write_cp_startofpacket (agent_pipeline_024_source0_startofpacket),              //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_024_source0_endofpacket),                //                  .endofpacket
		.read_rp_ready          (axi_ad9680_dma_s_axi_agent_read_rp_ready),              //           read_rp.ready
		.read_rp_valid          (axi_ad9680_dma_s_axi_agent_read_rp_valid),              //                  .valid
		.read_rp_data           (axi_ad9680_dma_s_axi_agent_read_rp_data),               //                  .data
		.read_rp_startofpacket  (axi_ad9680_dma_s_axi_agent_read_rp_startofpacket),      //                  .startofpacket
		.read_rp_endofpacket    (axi_ad9680_dma_s_axi_agent_read_rp_endofpacket),        //                  .endofpacket
		.write_rp_ready         (axi_ad9680_dma_s_axi_agent_write_rp_ready),             //          write_rp.ready
		.write_rp_valid         (axi_ad9680_dma_s_axi_agent_write_rp_valid),             //                  .valid
		.write_rp_data          (axi_ad9680_dma_s_axi_agent_write_rp_data),              //                  .data
		.write_rp_startofpacket (axi_ad9680_dma_s_axi_agent_write_rp_startofpacket),     //                  .startofpacket
		.write_rp_endofpacket   (axi_ad9680_dma_s_axi_agent_write_rp_endofpacket),       //                  .endofpacket
		.awaddr                 (axi_ad9680_dma_s_axi_awaddr),                           // altera_axi_master.awaddr
		.awprot                 (axi_ad9680_dma_s_axi_awprot),                           //                  .awprot
		.awvalid                (axi_ad9680_dma_s_axi_awvalid),                          //                  .awvalid
		.awready                (axi_ad9680_dma_s_axi_awready),                          //                  .awready
		.wdata                  (axi_ad9680_dma_s_axi_wdata),                            //                  .wdata
		.wstrb                  (axi_ad9680_dma_s_axi_wstrb),                            //                  .wstrb
		.wvalid                 (axi_ad9680_dma_s_axi_wvalid),                           //                  .wvalid
		.wready                 (axi_ad9680_dma_s_axi_wready),                           //                  .wready
		.bresp                  (axi_ad9680_dma_s_axi_bresp),                            //                  .bresp
		.bvalid                 (axi_ad9680_dma_s_axi_bvalid),                           //                  .bvalid
		.bready                 (axi_ad9680_dma_s_axi_bready),                           //                  .bready
		.araddr                 (axi_ad9680_dma_s_axi_araddr),                           //                  .araddr
		.arprot                 (axi_ad9680_dma_s_axi_arprot),                           //                  .arprot
		.arvalid                (axi_ad9680_dma_s_axi_arvalid),                          //                  .arvalid
		.arready                (axi_ad9680_dma_s_axi_arready),                          //                  .arready
		.rdata                  (axi_ad9680_dma_s_axi_rdata),                            //                  .rdata
		.rresp                  (axi_ad9680_dma_s_axi_rresp),                            //                  .rresp
		.rvalid                 (axi_ad9680_dma_s_axi_rvalid),                           //                  .rvalid
		.rready                 (axi_ad9680_dma_s_axi_rready)                            //                  .rready
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (89),
		.PKT_QOS_L                   (89),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (100),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (88),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (87),
		.PKT_DATA_SIDEBAND_L         (87),
		.PKT_ADDR_SIDEBAND_H         (86),
		.PKT_ADDR_SIDEBAND_L         (82),
		.PKT_BURST_TYPE_H            (81),
		.PKT_BURST_TYPE_L            (80),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (79),
		.PKT_BURST_SIZE_L            (77),
		.PKT_BURSTWRAP_H             (76),
		.PKT_BURSTWRAP_L             (70),
		.PKT_BYTE_CNT_H              (69),
		.PKT_BYTE_CNT_L              (63),
		.PKT_ADDR_H                  (56),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (62),
		.PKT_TRANS_LOCK              (61),
		.PKT_TRANS_COMPRESSED_READ   (57),
		.PKT_TRANS_POSTED            (58),
		.PKT_TRANS_WRITE             (59),
		.PKT_TRANS_READ              (60),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (94),
		.PKT_SRC_ID_L                (90),
		.PKT_DEST_ID_H               (99),
		.PKT_DEST_ID_L               (95),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (116),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (31),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_ad9680_core_s_axi_agent (
		.aclk                   (sys_clk_clk_clk),                                       //        clock_sink.clk
		.aresetn                (~sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_029_source0_valid),                      //           read_cp.valid
		.read_cp_ready          (agent_pipeline_029_source0_ready),                      //                  .ready
		.read_cp_data           (agent_pipeline_029_source0_data),                       //                  .data
		.read_cp_channel        (agent_pipeline_029_source0_channel),                    //                  .channel
		.read_cp_startofpacket  (agent_pipeline_029_source0_startofpacket),              //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_029_source0_endofpacket),                //                  .endofpacket
		.write_cp_ready         (agent_pipeline_028_source0_ready),                      //          write_cp.ready
		.write_cp_valid         (agent_pipeline_028_source0_valid),                      //                  .valid
		.write_cp_data          (agent_pipeline_028_source0_data),                       //                  .data
		.write_cp_channel       (agent_pipeline_028_source0_channel),                    //                  .channel
		.write_cp_startofpacket (agent_pipeline_028_source0_startofpacket),              //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_028_source0_endofpacket),                //                  .endofpacket
		.read_rp_ready          (axi_ad9680_core_s_axi_agent_read_rp_ready),             //           read_rp.ready
		.read_rp_valid          (axi_ad9680_core_s_axi_agent_read_rp_valid),             //                  .valid
		.read_rp_data           (axi_ad9680_core_s_axi_agent_read_rp_data),              //                  .data
		.read_rp_startofpacket  (axi_ad9680_core_s_axi_agent_read_rp_startofpacket),     //                  .startofpacket
		.read_rp_endofpacket    (axi_ad9680_core_s_axi_agent_read_rp_endofpacket),       //                  .endofpacket
		.write_rp_ready         (axi_ad9680_core_s_axi_agent_write_rp_ready),            //          write_rp.ready
		.write_rp_valid         (axi_ad9680_core_s_axi_agent_write_rp_valid),            //                  .valid
		.write_rp_data          (axi_ad9680_core_s_axi_agent_write_rp_data),             //                  .data
		.write_rp_startofpacket (axi_ad9680_core_s_axi_agent_write_rp_startofpacket),    //                  .startofpacket
		.write_rp_endofpacket   (axi_ad9680_core_s_axi_agent_write_rp_endofpacket),      //                  .endofpacket
		.awaddr                 (axi_ad9680_core_s_axi_awaddr),                          // altera_axi_master.awaddr
		.awprot                 (axi_ad9680_core_s_axi_awprot),                          //                  .awprot
		.awvalid                (axi_ad9680_core_s_axi_awvalid),                         //                  .awvalid
		.awready                (axi_ad9680_core_s_axi_awready),                         //                  .awready
		.wdata                  (axi_ad9680_core_s_axi_wdata),                           //                  .wdata
		.wstrb                  (axi_ad9680_core_s_axi_wstrb),                           //                  .wstrb
		.wvalid                 (axi_ad9680_core_s_axi_wvalid),                          //                  .wvalid
		.wready                 (axi_ad9680_core_s_axi_wready),                          //                  .wready
		.bresp                  (axi_ad9680_core_s_axi_bresp),                           //                  .bresp
		.bvalid                 (axi_ad9680_core_s_axi_bvalid),                          //                  .bvalid
		.bready                 (axi_ad9680_core_s_axi_bready),                          //                  .bready
		.araddr                 (axi_ad9680_core_s_axi_araddr),                          //                  .araddr
		.arprot                 (axi_ad9680_core_s_axi_arprot),                          //                  .arprot
		.arvalid                (axi_ad9680_core_s_axi_arvalid),                         //                  .arvalid
		.arready                (axi_ad9680_core_s_axi_arready),                         //                  .arready
		.rdata                  (axi_ad9680_core_s_axi_rdata),                           //                  .rdata
		.rresp                  (axi_ad9680_core_s_axi_rresp),                           //                  .rresp
		.rvalid                 (axi_ad9680_core_s_axi_rvalid),                          //                  .rvalid
		.rready                 (axi_ad9680_core_s_axi_rready)                           //                  .rready
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ad9144_jesd204_lane_pll_reconfig_agent (
		.clk                     (sys_clk_clk_clk),                                                   //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (ad9144_jesd204_lane_pll_reconfig_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ad9144_jesd204_lane_pll_reconfig_agent_m0_lock),                    //                .lock
		.m0_readdata             (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ad9144_jesd204_lane_pll_reconfig_agent_m0_read),                    //                .read
		.m0_waitrequest          (ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata),               //                .writedata
		.m0_write                (ad9144_jesd204_lane_pll_reconfig_agent_m0_write),                   //                .write
		.rp_endofpacket          (ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ad9144_jesd204_lane_pll_reconfig_agent_rp_ready),                   //                .ready
		.rp_valid                (ad9144_jesd204_lane_pll_reconfig_agent_rp_valid),                   //                .valid
		.rp_data                 (ad9144_jesd204_lane_pll_reconfig_agent_rp_data),                    //                .data
		.rp_startofpacket        (ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_032_source0_ready),                                  //              cp.ready
		.cp_valid                (agent_pipeline_032_source0_valid),                                  //                .valid
		.cp_data                 (agent_pipeline_032_source0_data),                                   //                .data
		.cp_startofpacket        (agent_pipeline_032_source0_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_032_source0_endofpacket),                            //                .endofpacket
		.cp_channel              (agent_pipeline_032_source0_channel),                                //                .channel
		.rf_sink_ready           (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                                   //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data),             //        in.data
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid),            //          .valid
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                             //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ad9144_jesd204_link_pll_reconfig_agent (
		.clk                     (sys_clk_clk_clk),                                                   //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (ad9144_jesd204_link_pll_reconfig_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ad9144_jesd204_link_pll_reconfig_agent_m0_lock),                    //                .lock
		.m0_readdata             (ad9144_jesd204_link_pll_reconfig_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ad9144_jesd204_link_pll_reconfig_agent_m0_read),                    //                .read
		.m0_waitrequest          (ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ad9144_jesd204_link_pll_reconfig_agent_m0_writedata),               //                .writedata
		.m0_write                (ad9144_jesd204_link_pll_reconfig_agent_m0_write),                   //                .write
		.rp_endofpacket          (ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ad9144_jesd204_link_pll_reconfig_agent_rp_ready),                   //                .ready
		.rp_valid                (ad9144_jesd204_link_pll_reconfig_agent_rp_valid),                   //                .valid
		.rp_data                 (ad9144_jesd204_link_pll_reconfig_agent_rp_data),                    //                .data
		.rp_startofpacket        (ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_034_source0_ready),                                  //              cp.ready
		.cp_valid                (agent_pipeline_034_source0_valid),                                  //                .valid
		.cp_data                 (agent_pipeline_034_source0_data),                                   //                .data
		.cp_startofpacket        (agent_pipeline_034_source0_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_034_source0_endofpacket),                            //                .endofpacket
		.cp_channel              (agent_pipeline_034_source0_channel),                                //                .channel
		.rf_sink_ready           (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                                   //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (ad9144_jesd204_link_pll_reconfig_agent_rf_source_data),             //        in.data
		.in_valid          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid),            //          .valid
		.in_ready          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                             //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ad9680_jesd204_link_pll_reconfig_agent (
		.clk                     (sys_clk_clk_clk),                                                   //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (ad9680_jesd204_link_pll_reconfig_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ad9680_jesd204_link_pll_reconfig_agent_m0_lock),                    //                .lock
		.m0_readdata             (ad9680_jesd204_link_pll_reconfig_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ad9680_jesd204_link_pll_reconfig_agent_m0_read),                    //                .read
		.m0_waitrequest          (ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ad9680_jesd204_link_pll_reconfig_agent_m0_writedata),               //                .writedata
		.m0_write                (ad9680_jesd204_link_pll_reconfig_agent_m0_write),                   //                .write
		.rp_endofpacket          (ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ad9680_jesd204_link_pll_reconfig_agent_rp_ready),                   //                .ready
		.rp_valid                (ad9680_jesd204_link_pll_reconfig_agent_rp_valid),                   //                .valid
		.rp_data                 (ad9680_jesd204_link_pll_reconfig_agent_rp_data),                    //                .data
		.rp_startofpacket        (ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_036_source0_ready),                                  //              cp.ready
		.cp_valid                (agent_pipeline_036_source0_valid),                                  //                .valid
		.cp_data                 (agent_pipeline_036_source0_data),                                   //                .data
		.cp_startofpacket        (agent_pipeline_036_source0_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (agent_pipeline_036_source0_endofpacket),                            //                .endofpacket
		.cp_channel              (agent_pipeline_036_source0_channel),                                //                .channel
		.rf_sink_ready           (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                                   //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (ad9680_jesd204_link_pll_reconfig_agent_rf_source_data),             //        in.data
		.in_valid          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid),            //          .valid
		.in_ready          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                             //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_0_rcfg_s0_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_0_rcfg_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_0_rcfg_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_0_rcfg_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_0_rcfg_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_0_rcfg_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_0_rcfg_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_0_rcfg_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_0_rcfg_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_0_rcfg_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_0_rcfg_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_0_rcfg_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_0_rcfg_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_0_rcfg_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_0_rcfg_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_0_rcfg_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_0_rcfg_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_038_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_038_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_038_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_038_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_038_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_038_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_0_rcfg_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_0_rcfg_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_0_rcfg_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_0_rcfg_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_0_rcfg_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_0_rcfg_s0_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_0_rcfg_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_0_rcfg_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_0_rcfg_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_0_rcfg_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_0_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_0_rcfg_s0_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_1_rcfg_s0_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_1_rcfg_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_1_rcfg_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_1_rcfg_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_1_rcfg_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_1_rcfg_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_1_rcfg_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_1_rcfg_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_1_rcfg_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_1_rcfg_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_1_rcfg_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_1_rcfg_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_1_rcfg_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_1_rcfg_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_1_rcfg_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_1_rcfg_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_1_rcfg_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_040_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_040_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_040_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_040_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_040_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_040_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_1_rcfg_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_1_rcfg_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_1_rcfg_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_1_rcfg_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_1_rcfg_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_1_rcfg_s0_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_1_rcfg_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_1_rcfg_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_1_rcfg_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_1_rcfg_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_1_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_1_rcfg_s0_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_2_rcfg_s0_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_2_rcfg_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_2_rcfg_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_2_rcfg_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_2_rcfg_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_2_rcfg_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_2_rcfg_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_2_rcfg_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_2_rcfg_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_2_rcfg_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_2_rcfg_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_2_rcfg_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_2_rcfg_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_2_rcfg_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_2_rcfg_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_2_rcfg_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_2_rcfg_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_042_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_042_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_042_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_042_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_042_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_042_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_2_rcfg_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_2_rcfg_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_2_rcfg_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_2_rcfg_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_2_rcfg_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_2_rcfg_s0_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_2_rcfg_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_2_rcfg_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_2_rcfg_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_2_rcfg_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_2_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_2_rcfg_s0_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_3_rcfg_s0_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_3_rcfg_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_3_rcfg_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_3_rcfg_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_3_rcfg_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_3_rcfg_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_3_rcfg_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_3_rcfg_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_3_rcfg_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_3_rcfg_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_3_rcfg_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_3_rcfg_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_3_rcfg_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_3_rcfg_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_3_rcfg_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_3_rcfg_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_3_rcfg_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_044_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_044_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_044_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_044_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_044_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_044_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_3_rcfg_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_3_rcfg_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_3_rcfg_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_3_rcfg_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_3_rcfg_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_3_rcfg_s0_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_3_rcfg_s0_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_3_rcfg_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_3_rcfg_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_3_rcfg_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_3_rcfg_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_3_rcfg_s0_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_0_rcfg_s1_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_0_rcfg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_0_rcfg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_0_rcfg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_0_rcfg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_0_rcfg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_0_rcfg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_0_rcfg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_0_rcfg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_0_rcfg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_0_rcfg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_0_rcfg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_0_rcfg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_0_rcfg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_0_rcfg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_0_rcfg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_0_rcfg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_046_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_046_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_046_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_046_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_046_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_046_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_0_rcfg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_0_rcfg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_0_rcfg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_0_rcfg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_0_rcfg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_0_rcfg_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_0_rcfg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_0_rcfg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_0_rcfg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_0_rcfg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_0_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_0_rcfg_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_1_rcfg_s1_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_1_rcfg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_1_rcfg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_1_rcfg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_1_rcfg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_1_rcfg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_1_rcfg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_1_rcfg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_1_rcfg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_1_rcfg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_1_rcfg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_1_rcfg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_1_rcfg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_1_rcfg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_1_rcfg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_1_rcfg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_1_rcfg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_048_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_048_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_048_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_048_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_048_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_048_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_1_rcfg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_1_rcfg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_1_rcfg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_1_rcfg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_1_rcfg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_1_rcfg_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_1_rcfg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_1_rcfg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_1_rcfg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_1_rcfg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_1_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_1_rcfg_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_2_rcfg_s1_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_2_rcfg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_2_rcfg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_2_rcfg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_2_rcfg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_2_rcfg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_2_rcfg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_2_rcfg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_2_rcfg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_2_rcfg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_2_rcfg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_2_rcfg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_2_rcfg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_2_rcfg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_2_rcfg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_2_rcfg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_2_rcfg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_050_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_050_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_050_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_050_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_050_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_050_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_2_rcfg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_2_rcfg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_2_rcfg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_2_rcfg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_2_rcfg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_2_rcfg_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_2_rcfg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_2_rcfg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_2_rcfg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_2_rcfg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_2_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_2_rcfg_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avl_adxcfg_3_rcfg_s1_agent (
		.clk                     (sys_clk_clk_clk),                                       //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (avl_adxcfg_3_rcfg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avl_adxcfg_3_rcfg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avl_adxcfg_3_rcfg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avl_adxcfg_3_rcfg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avl_adxcfg_3_rcfg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (avl_adxcfg_3_rcfg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avl_adxcfg_3_rcfg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avl_adxcfg_3_rcfg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (avl_adxcfg_3_rcfg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avl_adxcfg_3_rcfg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (avl_adxcfg_3_rcfg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (avl_adxcfg_3_rcfg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avl_adxcfg_3_rcfg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (avl_adxcfg_3_rcfg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (avl_adxcfg_3_rcfg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (avl_adxcfg_3_rcfg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_052_source0_ready),                      //              cp.ready
		.cp_valid                (agent_pipeline_052_source0_valid),                      //                .valid
		.cp_data                 (agent_pipeline_052_source0_data),                       //                .data
		.cp_startofpacket        (agent_pipeline_052_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (agent_pipeline_052_source0_endofpacket),                //                .endofpacket
		.cp_channel              (agent_pipeline_052_source0_channel),                    //                .channel
		.rf_sink_ready           (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avl_adxcfg_3_rcfg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avl_adxcfg_3_rcfg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avl_adxcfg_3_rcfg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avl_adxcfg_3_rcfg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avl_adxcfg_3_rcfg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_3_rcfg_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                       //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (avl_adxcfg_3_rcfg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (avl_adxcfg_3_rcfg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (avl_adxcfg_3_rcfg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avl_adxcfg_3_rcfg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avl_adxcfg_3_rcfg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avl_adxcfg_3_rcfg_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_bd_s1_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_gpio_bd_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (sys_gpio_bd_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (sys_gpio_bd_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (sys_gpio_bd_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (sys_gpio_bd_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (sys_gpio_bd_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (sys_gpio_bd_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (sys_gpio_bd_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (sys_gpio_bd_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (sys_gpio_bd_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (sys_gpio_bd_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (sys_gpio_bd_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (sys_gpio_bd_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (sys_gpio_bd_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (sys_gpio_bd_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (sys_gpio_bd_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (agent_pipeline_054_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_054_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_054_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_054_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_054_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_054_source0_channel),                   //                .channel
		.rf_sink_ready           (sys_gpio_bd_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_bd_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (sys_gpio_bd_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (sys_gpio_bd_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (sys_gpio_bd_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (sys_gpio_bd_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_bd_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (sys_gpio_bd_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sys_gpio_bd_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_bd_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (sys_gpio_bd_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_bd_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_bd_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (sys_gpio_bd_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (sys_gpio_bd_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (sys_gpio_bd_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (sys_gpio_bd_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (sys_gpio_bd_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (sys_gpio_bd_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (sys_gpio_bd_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (sys_gpio_bd_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_bd_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_bd_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (sys_gpio_bd_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (sys_gpio_bd_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (sys_gpio_bd_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (sys_gpio_bd_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (sys_gpio_bd_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_in_s1_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_gpio_in_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (sys_gpio_in_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (sys_gpio_in_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (sys_gpio_in_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (sys_gpio_in_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (sys_gpio_in_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (sys_gpio_in_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (sys_gpio_in_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (sys_gpio_in_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (sys_gpio_in_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (sys_gpio_in_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (sys_gpio_in_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (sys_gpio_in_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (sys_gpio_in_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (sys_gpio_in_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (sys_gpio_in_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (agent_pipeline_056_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_056_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_056_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_056_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_056_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_056_source0_channel),                   //                .channel
		.rf_sink_ready           (sys_gpio_in_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_in_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (sys_gpio_in_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (sys_gpio_in_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (sys_gpio_in_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (sys_gpio_in_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_in_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (sys_gpio_in_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sys_gpio_in_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_in_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (sys_gpio_in_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_in_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_in_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (sys_gpio_in_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (sys_gpio_in_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (sys_gpio_in_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (sys_gpio_in_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (sys_gpio_in_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (sys_gpio_in_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (sys_gpio_in_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (sys_gpio_in_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_in_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_in_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (sys_gpio_in_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (sys_gpio_in_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (sys_gpio_in_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (sys_gpio_in_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (sys_gpio_in_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_gpio_out_s1_agent (
		.clk                     (sys_clk_clk_clk),                                      //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sys_gpio_out_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sys_gpio_out_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sys_gpio_out_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sys_gpio_out_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sys_gpio_out_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sys_gpio_out_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sys_gpio_out_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sys_gpio_out_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sys_gpio_out_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sys_gpio_out_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sys_gpio_out_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sys_gpio_out_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sys_gpio_out_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sys_gpio_out_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sys_gpio_out_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sys_gpio_out_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (agent_pipeline_058_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_058_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_058_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_058_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_058_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_058_source0_channel),                   //                .channel
		.rf_sink_ready           (sys_gpio_out_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sys_gpio_out_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sys_gpio_out_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sys_gpio_out_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sys_gpio_out_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sys_gpio_out_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sys_gpio_out_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sys_gpio_out_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sys_gpio_out_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_gpio_out_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sys_gpio_out_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_out_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_out_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sys_gpio_out_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sys_gpio_out_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sys_gpio_out_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sys_gpio_out_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sys_gpio_out_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sys_gpio_out_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sys_gpio_out_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sys_gpio_out_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_gpio_out_s1_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_gpio_out_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (sys_gpio_out_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (sys_gpio_out_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (sys_gpio_out_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (sys_gpio_out_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (sys_gpio_out_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (88),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (31),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sys_spi_spi_control_port_agent (
		.clk                     (sys_clk_clk_clk),                                           //             clk.clk
		.reset                   (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sys_spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_060_source0_ready),                          //              cp.ready
		.cp_valid                (agent_pipeline_060_source0_valid),                          //                .valid
		.cp_data                 (agent_pipeline_060_source0_data),                           //                .data
		.cp_startofpacket        (agent_pipeline_060_source0_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (agent_pipeline_060_source0_endofpacket),                    //                .endofpacket
		.cp_channel              (agent_pipeline_060_source0_channel),                        //                .channel
		.rf_sink_ready           (sys_spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sys_spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_spi_spi_control_port_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                           //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sys_spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (sys_spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_spi_spi_control_port_agent_rdata_fifo (
		.clk               (sys_clk_clk_clk),                                      //       clk.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sys_spi_spi_control_port_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (sys_spi_spi_control_port_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (sys_spi_spi_control_port_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (sys_spi_spi_control_port_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (sys_spi_spi_control_port_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (sys_spi_spi_control_port_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	system_bd_altera_merlin_router_181_7r73xsq router (
		.sink_ready         (sys_hps_h2f_lw_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (sys_hps_h2f_lw_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (sys_hps_h2f_lw_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (sys_hps_h2f_lw_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sys_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                        //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	system_bd_altera_merlin_router_181_5jv4g3i router_001 (
		.sink_ready         (sys_hps_h2f_lw_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (sys_hps_h2f_lw_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (sys_hps_h2f_lw_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (sys_hps_h2f_lw_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sys_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                       //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                 //       src.ready
		.src_valid          (router_003_src_valid),                                 //          .valid
		.src_data           (router_003_src_data),                                  //          .data
		.src_channel        (router_003_src_channel),                               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_004 (
		.sink_ready         (agent_pipeline_006_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_006_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_006_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_006_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_006_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_006 (
		.sink_ready         (agent_pipeline_010_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_010_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_010_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_010_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_010_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                 //       src.ready
		.src_valid          (router_006_src_valid),                                 //          .valid
		.src_data           (router_006_src_data),                                  //          .data
		.src_channel        (router_006_src_channel),                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_007 (
		.sink_ready         (agent_pipeline_011_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_011_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                 //       src.ready
		.src_valid          (router_007_src_valid),                                 //          .valid
		.src_data           (router_007_src_data),                                  //          .data
		.src_channel        (router_007_src_channel),                               //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_008 (
		.sink_ready         (agent_pipeline_014_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_014_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_014_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_014_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_014_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_009 (
		.sink_ready         (agent_pipeline_015_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_015_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                 //       src.ready
		.src_valid          (router_009_src_valid),                                 //          .valid
		.src_data           (router_009_src_data),                                  //          .data
		.src_channel        (router_009_src_channel),                               //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_010 (
		.sink_ready         (agent_pipeline_018_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_018_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_018_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_018_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_018_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                 //       src.ready
		.src_valid          (router_010_src_valid),                                 //          .valid
		.src_data           (router_010_src_data),                                  //          .data
		.src_channel        (router_010_src_channel),                               //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_011 (
		.sink_ready         (agent_pipeline_019_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_019_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_012 (
		.sink_ready         (agent_pipeline_022_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_022_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_022_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_022_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_022_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_013 (
		.sink_ready         (agent_pipeline_023_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_023_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                 //       src.ready
		.src_valid          (router_013_src_valid),                                 //          .valid
		.src_data           (router_013_src_data),                                  //          .data
		.src_channel        (router_013_src_channel),                               //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_014 (
		.sink_ready         (agent_pipeline_026_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_026_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_026_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_026_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_026_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                 //       src.ready
		.src_valid          (router_014_src_valid),                                 //          .valid
		.src_data           (router_014_src_data),                                  //          .data
		.src_channel        (router_014_src_channel),                               //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_015 (
		.sink_ready         (agent_pipeline_027_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_027_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_027_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_027_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_027_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                 //       src.ready
		.src_valid          (router_015_src_valid),                                 //          .valid
		.src_data           (router_015_src_data),                                  //          .data
		.src_channel        (router_015_src_channel),                               //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_vid2ffq router_016 (
		.sink_ready         (agent_pipeline_030_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_030_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_030_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_030_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_030_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                 //       src.ready
		.src_valid          (router_016_src_valid),                                 //          .valid
		.src_data           (router_016_src_data),                                  //          .data
		.src_channel        (router_016_src_channel),                               //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_is25pci router_017 (
		.sink_ready         (agent_pipeline_031_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_031_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_031_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_031_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_031_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                 //       src.ready
		.src_valid          (router_017_src_valid),                                 //          .valid
		.src_data           (router_017_src_data),                                  //          .data
		.src_channel        (router_017_src_channel),                               //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_018 (
		.sink_ready         (agent_pipeline_033_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_033_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_033_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_033_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_033_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                 //       src.ready
		.src_valid          (router_018_src_valid),                                 //          .valid
		.src_data           (router_018_src_data),                                  //          .data
		.src_channel        (router_018_src_channel),                               //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_019 (
		.sink_ready         (agent_pipeline_035_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_035_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_035_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_035_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_035_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                 //       src.ready
		.src_valid          (router_019_src_valid),                                 //          .valid
		.src_data           (router_019_src_data),                                  //          .data
		.src_channel        (router_019_src_channel),                               //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_020 (
		.sink_ready         (agent_pipeline_037_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_037_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_037_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_037_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_037_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                 //       src.ready
		.src_valid          (router_020_src_valid),                                 //          .valid
		.src_data           (router_020_src_data),                                  //          .data
		.src_channel        (router_020_src_channel),                               //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_021 (
		.sink_ready         (agent_pipeline_039_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_039_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_039_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_039_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_039_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                 //       src.ready
		.src_valid          (router_021_src_valid),                                 //          .valid
		.src_data           (router_021_src_data),                                  //          .data
		.src_channel        (router_021_src_channel),                               //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_022 (
		.sink_ready         (agent_pipeline_041_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_041_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_041_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_041_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_041_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                 //       src.ready
		.src_valid          (router_022_src_valid),                                 //          .valid
		.src_data           (router_022_src_data),                                  //          .data
		.src_channel        (router_022_src_channel),                               //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_023 (
		.sink_ready         (agent_pipeline_043_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_043_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_043_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_043_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_043_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                 //       src.ready
		.src_valid          (router_023_src_valid),                                 //          .valid
		.src_data           (router_023_src_data),                                  //          .data
		.src_channel        (router_023_src_channel),                               //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_024 (
		.sink_ready         (agent_pipeline_045_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_045_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_045_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_045_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_045_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                 //       src.ready
		.src_valid          (router_024_src_valid),                                 //          .valid
		.src_data           (router_024_src_data),                                  //          .data
		.src_channel        (router_024_src_channel),                               //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_025 (
		.sink_ready         (agent_pipeline_047_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_047_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_047_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_047_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_047_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                 //       src.ready
		.src_valid          (router_025_src_valid),                                 //          .valid
		.src_data           (router_025_src_data),                                  //          .data
		.src_channel        (router_025_src_channel),                               //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_026 (
		.sink_ready         (agent_pipeline_049_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_049_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_049_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_049_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_049_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                 //       src.ready
		.src_valid          (router_026_src_valid),                                 //          .valid
		.src_data           (router_026_src_data),                                  //          .data
		.src_channel        (router_026_src_channel),                               //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_027 (
		.sink_ready         (agent_pipeline_051_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_051_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_051_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_051_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_051_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                 //       src.ready
		.src_valid          (router_027_src_valid),                                 //          .valid
		.src_data           (router_027_src_data),                                  //          .data
		.src_channel        (router_027_src_channel),                               //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_028 (
		.sink_ready         (agent_pipeline_053_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_053_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_053_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_053_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_053_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                                 //       src.ready
		.src_valid          (router_028_src_valid),                                 //          .valid
		.src_data           (router_028_src_data),                                  //          .data
		.src_channel        (router_028_src_channel),                               //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_029 (
		.sink_ready         (agent_pipeline_055_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_055_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_055_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_055_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_055_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                                 //       src.ready
		.src_valid          (router_029_src_valid),                                 //          .valid
		.src_data           (router_029_src_data),                                  //          .data
		.src_channel        (router_029_src_channel),                               //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_030 (
		.sink_ready         (agent_pipeline_057_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_057_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_057_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_057_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_057_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                                 //       src.ready
		.src_valid          (router_030_src_valid),                                 //          .valid
		.src_data           (router_030_src_data),                                  //          .data
		.src_channel        (router_030_src_channel),                               //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_031 (
		.sink_ready         (agent_pipeline_059_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_059_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_059_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_059_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_059_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                                 //       src.ready
		.src_valid          (router_031_src_valid),                                 //          .valid
		.src_data           (router_031_src_data),                                  //          .data
		.src_channel        (router_031_src_channel),                               //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_router_181_bwzjejy router_032 (
		.sink_ready         (agent_pipeline_061_source0_ready),                     //      sink.ready
		.sink_valid         (agent_pipeline_061_source0_valid),                     //          .valid
		.sink_data          (agent_pipeline_061_source0_data),                      //          .data
		.sink_startofpacket (agent_pipeline_061_source0_startofpacket),             //          .startofpacket
		.sink_endofpacket   (agent_pipeline_061_source0_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                                 //       src.ready
		.src_valid          (router_032_src_valid),                                 //          .valid
		.src_data           (router_032_src_data),                                  //          .data
		.src_channel        (router_032_src_channel),                               //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                            //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (sys_clk_clk_clk),                                            //       clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //          .valid
		.cmd_sink_data          (router_src_data),                                            //          .data
		.cmd_sink_channel       (router_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                         //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                       //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                          //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (95),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (90),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sys_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (sys_clk_clk_clk),                                            //       clk.clk
		.reset                  (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                         //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                       //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                          //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_link_management_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                     //          .ready
		.source0_valid         (ad9144_jesd204_link_management_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_link_management_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_link_management_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_link_management_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_link_management_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_link_management_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_link_management_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                 //          .ready
		.source0_valid         (ad9144_jesd204_link_management_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_link_management_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_link_management_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_link_management_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_link_management_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_link_management_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9680_jesd204_link_management_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                 //          .ready
		.source0_valid         (ad9680_jesd204_link_management_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9680_jesd204_link_management_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9680_jesd204_link_management_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9680_jesd204_link_management_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9680_jesd204_link_management_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9680_jesd204_link_management_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9680_jesd204_link_management_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                 //          .ready
		.source0_valid         (ad9680_jesd204_link_management_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9680_jesd204_link_management_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9680_jesd204_link_management_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9680_jesd204_link_management_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9680_jesd204_link_management_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9680_jesd204_link_management_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_link_reconfig_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                               //          .ready
		.source0_valid         (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_link_reconfig_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                               //          .ready
		.source0_valid         (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9680_jesd204_link_reconfig_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                               //          .ready
		.source0_valid         (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9680_jesd204_link_reconfig_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                               //          .ready
		.source0_valid         (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9144_dma_s_axi_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                             //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                       //          .ready
		.source0_valid         (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9144_dma_s_axi_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                             //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                       //          .ready
		.source0_valid         (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9144_core_s_axi_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                              //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                        //          .ready
		.source0_valid         (axi_ad9144_core_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9144_core_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9144_core_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9144_core_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9144_core_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9144_core_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9144_core_s_axi_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                              //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                        //          .ready
		.source0_valid         (axi_ad9144_core_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9144_core_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9144_core_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9144_core_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9144_core_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9144_core_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9680_dma_s_axi_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                             //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                       //          .ready
		.source0_valid         (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9680_dma_s_axi_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                             //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                       //          .ready
		.source0_valid         (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9680_core_s_axi_wr_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                              //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                        //          .ready
		.source0_valid         (axi_ad9680_core_s_axi_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9680_core_s_axi_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9680_core_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9680_core_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9680_core_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9680_core_s_axi_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) axi_ad9680_core_s_axi_rd_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                              //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                        //          .ready
		.source0_valid         (axi_ad9680_core_s_axi_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_ad9680_core_s_axi_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_ad9680_core_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_ad9680_core_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_ad9680_core_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_ad9680_core_s_axi_rd_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_lane_pll_reconfig_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                                                //          .ready
		.source0_valid         (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9144_jesd204_link_pll_reconfig_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                                //          .ready
		.source0_valid         (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) ad9680_jesd204_link_pll_reconfig_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                                //          .ready
		.source0_valid         (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_data),          //          .data
		.source0_channel       (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_0_rcfg_s0_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_1_rcfg_s0_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_2_rcfg_s0_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_3_rcfg_s0_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_0_rcfg_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_1_rcfg_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_024_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_2_rcfg_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) avl_adxcfg_3_rcfg_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                          //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                    //          .ready
		.source0_valid         (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_bd_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_027_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                                //          .ready
		.source0_valid         (sys_gpio_bd_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (sys_gpio_bd_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (sys_gpio_bd_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (sys_gpio_bd_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (sys_gpio_bd_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (sys_gpio_bd_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_in_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_028_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_028_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_028_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_028_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_028_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_028_src_ready),                                //          .ready
		.source0_valid         (sys_gpio_in_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (sys_gpio_in_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (sys_gpio_in_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (sys_gpio_in_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (sys_gpio_in_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (sys_gpio_in_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_gpio_out_s1_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                      //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_029_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                                //          .ready
		.source0_valid         (sys_gpio_out_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (sys_gpio_out_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (sys_gpio_out_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (sys_gpio_out_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (sys_gpio_out_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (sys_gpio_out_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (31),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("new")
	) sys_spi_spi_control_port_burst_adapter (
		.clk                   (sys_clk_clk_clk),                                              //       cr0.clk
		.reset                 (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                        //          .ready
		.source0_valid         (sys_spi_spi_control_port_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sys_spi_spi_control_port_burst_adapter_source0_data),          //          .data
		.source0_channel       (sys_spi_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sys_spi_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sys_spi_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sys_spi_spi_control_port_burst_adapter_source0_ready)          //          .ready
	);

	system_bd_altera_merlin_demultiplexer_181_cex433a cmd_demux (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (limiter_pipeline_source0_ready),                       //      sink.ready
		.sink_channel        (limiter_pipeline_source0_channel),                     //          .channel
		.sink_data           (limiter_pipeline_source0_data),                        //          .data
		.sink_startofpacket  (limiter_pipeline_source0_startofpacket),               //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_source0_endofpacket),                 //          .endofpacket
		.sink_valid          (limiter_pipeline_source0_valid),                       //          .valid
		.src0_ready          (cmd_demux_src0_ready),                                 //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                 //          .valid
		.src0_data           (cmd_demux_src0_data),                                  //          .data
		.src0_channel        (cmd_demux_src0_channel),                               //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                           //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                 //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                 //          .valid
		.src1_data           (cmd_demux_src1_data),                                  //          .data
		.src1_channel        (cmd_demux_src1_channel),                               //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                           //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                 //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                 //          .valid
		.src2_data           (cmd_demux_src2_data),                                  //          .data
		.src2_channel        (cmd_demux_src2_channel),                               //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                           //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                 //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                 //          .valid
		.src3_data           (cmd_demux_src3_data),                                  //          .data
		.src3_channel        (cmd_demux_src3_channel),                               //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                         //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                           //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                 //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                 //          .valid
		.src4_data           (cmd_demux_src4_data),                                  //          .data
		.src4_channel        (cmd_demux_src4_channel),                               //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                         //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                           //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                 //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                 //          .valid
		.src5_data           (cmd_demux_src5_data),                                  //          .data
		.src5_channel        (cmd_demux_src5_channel),                               //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                         //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                           //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                 //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                 //          .valid
		.src6_data           (cmd_demux_src6_data),                                  //          .data
		.src6_channel        (cmd_demux_src6_channel),                               //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                         //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                           //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                 //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                 //          .valid
		.src7_data           (cmd_demux_src7_data),                                  //          .data
		.src7_channel        (cmd_demux_src7_channel),                               //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                         //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                           //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                 //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                 //          .valid
		.src8_data           (cmd_demux_src8_data),                                  //          .data
		.src8_channel        (cmd_demux_src8_channel),                               //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                         //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                           //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                 //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                 //          .valid
		.src9_data           (cmd_demux_src9_data),                                  //          .data
		.src9_channel        (cmd_demux_src9_channel),                               //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                         //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                           //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                //          .valid
		.src10_data          (cmd_demux_src10_data),                                 //          .data
		.src10_channel       (cmd_demux_src10_channel),                              //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                        //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                          //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                //          .valid
		.src11_data          (cmd_demux_src11_data),                                 //          .data
		.src11_channel       (cmd_demux_src11_channel),                              //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                        //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                          //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                //          .valid
		.src12_data          (cmd_demux_src12_data),                                 //          .data
		.src12_channel       (cmd_demux_src12_channel),                              //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                        //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                          //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                //          .valid
		.src13_data          (cmd_demux_src13_data),                                 //          .data
		.src13_channel       (cmd_demux_src13_channel),                              //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                        //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                          //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                //          .valid
		.src14_data          (cmd_demux_src14_data),                                 //          .data
		.src14_channel       (cmd_demux_src14_channel),                              //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                        //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                          //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                //          .valid
		.src15_data          (cmd_demux_src15_data),                                 //          .data
		.src15_channel       (cmd_demux_src15_channel),                              //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                        //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                          //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                //          .valid
		.src16_data          (cmd_demux_src16_data),                                 //          .data
		.src16_channel       (cmd_demux_src16_channel),                              //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                        //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                          //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                //          .valid
		.src17_data          (cmd_demux_src17_data),                                 //          .data
		.src17_channel       (cmd_demux_src17_channel),                              //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                        //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                          //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                //          .valid
		.src18_data          (cmd_demux_src18_data),                                 //          .data
		.src18_channel       (cmd_demux_src18_channel),                              //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                        //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                          //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                //          .valid
		.src19_data          (cmd_demux_src19_data),                                 //          .data
		.src19_channel       (cmd_demux_src19_channel),                              //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                        //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                          //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                //          .valid
		.src20_data          (cmd_demux_src20_data),                                 //          .data
		.src20_channel       (cmd_demux_src20_channel),                              //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                        //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                          //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                //          .valid
		.src21_data          (cmd_demux_src21_data),                                 //          .data
		.src21_channel       (cmd_demux_src21_channel),                              //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                        //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                          //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                //          .valid
		.src22_data          (cmd_demux_src22_data),                                 //          .data
		.src22_channel       (cmd_demux_src22_channel),                              //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                        //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket)                           //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_cex433a cmd_demux_001 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (limiter_pipeline_002_source0_ready),                   //      sink.ready
		.sink_channel        (limiter_pipeline_002_source0_channel),                 //          .channel
		.sink_data           (limiter_pipeline_002_source0_data),                    //          .data
		.sink_startofpacket  (limiter_pipeline_002_source0_startofpacket),           //          .startofpacket
		.sink_endofpacket    (limiter_pipeline_002_source0_endofpacket),             //          .endofpacket
		.sink_valid          (limiter_pipeline_002_source0_valid),                   //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_001_src0_data),                              //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_001_src1_data),                              //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_001_src2_data),                              //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_001_src3_data),                              //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_001_src4_data),                              //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_001_src5_data),                              //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_001_src6_data),                              //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_001_src7_data),                              //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_001_src8_data),                              //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_001_src9_data),                              //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_001_src10_data),                             //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_001_src11_data),                             //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                      //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                            //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                            //          .valid
		.src12_data          (cmd_demux_001_src12_data),                             //          .data
		.src12_channel       (cmd_demux_001_src12_channel),                          //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                    //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                      //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                            //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                            //          .valid
		.src13_data          (cmd_demux_001_src13_data),                             //          .data
		.src13_channel       (cmd_demux_001_src13_channel),                          //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                    //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                      //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                            //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                            //          .valid
		.src14_data          (cmd_demux_001_src14_data),                             //          .data
		.src14_channel       (cmd_demux_001_src14_channel),                          //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                    //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                      //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                            //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                            //          .valid
		.src15_data          (cmd_demux_001_src15_data),                             //          .data
		.src15_channel       (cmd_demux_001_src15_channel),                          //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                    //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                      //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                            //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                            //          .valid
		.src16_data          (cmd_demux_001_src16_data),                             //          .data
		.src16_channel       (cmd_demux_001_src16_channel),                          //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                    //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                      //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                            //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                            //          .valid
		.src17_data          (cmd_demux_001_src17_data),                             //          .data
		.src17_channel       (cmd_demux_001_src17_channel),                          //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                    //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                      //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                            //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                            //          .valid
		.src18_data          (cmd_demux_001_src18_data),                             //          .data
		.src18_channel       (cmd_demux_001_src18_channel),                          //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                    //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                      //          .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                            //     src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                            //          .valid
		.src19_data          (cmd_demux_001_src19_data),                             //          .data
		.src19_channel       (cmd_demux_001_src19_channel),                          //          .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                    //          .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                      //          .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                            //     src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                            //          .valid
		.src20_data          (cmd_demux_001_src20_data),                             //          .data
		.src20_channel       (cmd_demux_001_src20_channel),                          //          .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                    //          .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                      //          .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                            //     src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                            //          .valid
		.src21_data          (cmd_demux_001_src21_data),                             //          .data
		.src21_channel       (cmd_demux_001_src21_channel),                          //          .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                    //          .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),                      //          .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                            //     src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                            //          .valid
		.src22_data          (cmd_demux_001_src22_data),                             //          .data
		.src22_channel       (cmd_demux_001_src22_channel),                          //          .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),                    //          .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket)                       //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //          .valid
		.src_data            (cmd_mux_src_data),                                     //          .data
		.src_channel         (cmd_mux_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                           //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                           //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                         //          .channel
		.sink0_data          (mux_pipeline_source0_data),                            //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                      //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_001 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                //          .valid
		.src_data            (cmd_mux_001_src_data),                                 //          .data
		.src_channel         (cmd_mux_001_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_002 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                //          .valid
		.src_data            (cmd_mux_002_src_data),                                 //          .data
		.src_channel         (cmd_mux_002_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_003 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                //          .valid
		.src_data            (cmd_mux_003_src_data),                                 //          .data
		.src_channel         (cmd_mux_003_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_004 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                //          .valid
		.src_data            (cmd_mux_004_src_data),                                 //          .data
		.src_channel         (cmd_mux_004_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_005 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                //          .valid
		.src_data            (cmd_mux_005_src_data),                                 //          .data
		.src_channel         (cmd_mux_005_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_006 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                //          .valid
		.src_data            (cmd_mux_006_src_data),                                 //          .data
		.src_channel         (cmd_mux_006_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_007 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                //          .valid
		.src_data            (cmd_mux_007_src_data),                                 //          .data
		.src_channel         (cmd_mux_007_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_008 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_009 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                //          .valid
		.src_data            (cmd_mux_009_src_data),                                 //          .data
		.src_channel         (cmd_mux_009_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_010 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                //          .valid
		.src_data            (cmd_mux_010_src_data),                                 //          .data
		.src_channel         (cmd_mux_010_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_011 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                //          .valid
		.src_data            (cmd_mux_011_src_data),                                 //          .data
		.src_channel         (cmd_mux_011_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_011_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_011_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_011_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_011_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_011_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_011_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_012 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                //          .valid
		.src_data            (cmd_mux_012_src_data),                                 //          .data
		.src_channel         (cmd_mux_012_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_013 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                //          .valid
		.src_data            (cmd_mux_013_src_data),                                 //          .data
		.src_channel         (cmd_mux_013_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_014 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                //          .valid
		.src_data            (cmd_mux_014_src_data),                                 //          .data
		.src_channel         (cmd_mux_014_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_gzx6zvy cmd_mux_015 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                //          .valid
		.src_data            (cmd_mux_015_src_data),                                 //          .data
		.src_channel         (cmd_mux_015_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_016 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                //          .valid
		.src_data            (cmd_mux_016_src_data),                                 //          .data
		.src_channel         (cmd_mux_016_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_017_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_017_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_017_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_017_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_017_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_017_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_017 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                //          .valid
		.src_data            (cmd_mux_017_src_data),                                 //          .data
		.src_channel         (cmd_mux_017_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_018_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_018_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_018_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_018_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_018_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_018_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_019_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_019_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_019_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_019_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_019_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_019_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_018 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                //          .valid
		.src_data            (cmd_mux_018_src_data),                                 //          .data
		.src_channel         (cmd_mux_018_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_020_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_020_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_020_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_020_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_020_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_020_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_021_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_021_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_021_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_021_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_021_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_021_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_019 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                //          .valid
		.src_data            (cmd_mux_019_src_data),                                 //          .data
		.src_channel         (cmd_mux_019_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_022_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_022_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_022_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_022_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_022_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_022_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_023_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_023_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_023_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_023_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_023_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_023_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_020 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                //          .valid
		.src_data            (cmd_mux_020_src_data),                                 //          .data
		.src_channel         (cmd_mux_020_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_024_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_024_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_024_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_024_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_024_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_024_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_025_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_025_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_025_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_025_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_025_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_025_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_021 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                //          .valid
		.src_data            (cmd_mux_021_src_data),                                 //          .data
		.src_channel         (cmd_mux_021_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_026_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_026_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_026_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_026_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_026_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_026_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_027_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_027_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_027_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_027_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_027_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_027_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_022 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                //          .valid
		.src_data            (cmd_mux_022_src_data),                                 //          .data
		.src_channel         (cmd_mux_022_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_028_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_028_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_028_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_028_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_028_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_028_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_029_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_029_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_029_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_029_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_029_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_029_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_023 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                //          .valid
		.src_data            (cmd_mux_023_src_data),                                 //          .data
		.src_channel         (cmd_mux_023_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_030_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_030_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_030_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_030_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_030_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_030_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_031_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_031_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_031_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_031_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_031_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_031_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_024 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                //          .valid
		.src_data            (cmd_mux_024_src_data),                                 //          .data
		.src_channel         (cmd_mux_024_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_032_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_032_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_032_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_032_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_032_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_032_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_033_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_033_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_033_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_033_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_033_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_033_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_025 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                //          .valid
		.src_data            (cmd_mux_025_src_data),                                 //          .data
		.src_channel         (cmd_mux_025_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_034_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_034_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_034_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_034_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_034_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_034_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_035_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_035_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_035_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_035_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_035_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_035_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_026 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                //          .valid
		.src_data            (cmd_mux_026_src_data),                                 //          .data
		.src_channel         (cmd_mux_026_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_036_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_036_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_036_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_036_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_036_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_036_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_037_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_037_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_037_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_037_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_037_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_037_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_027 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                //          .valid
		.src_data            (cmd_mux_027_src_data),                                 //          .data
		.src_channel         (cmd_mux_027_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_038_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_038_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_038_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_038_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_038_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_038_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_039_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_039_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_039_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_039_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_039_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_039_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_028 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                                //          .valid
		.src_data            (cmd_mux_028_src_data),                                 //          .data
		.src_channel         (cmd_mux_028_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_040_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_040_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_040_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_040_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_040_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_040_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_041_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_041_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_041_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_041_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_041_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_041_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_029 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                //          .valid
		.src_data            (cmd_mux_029_src_data),                                 //          .data
		.src_channel         (cmd_mux_029_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_042_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_042_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_042_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_042_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_042_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_042_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_043_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_043_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_043_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_043_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_043_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_043_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_fd5j6cy cmd_mux_030 (
		.clk                 (sys_clk_clk_clk),                                      //       clk.clk
		.reset               (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                //          .valid
		.src_data            (cmd_mux_030_src_data),                                 //          .data
		.src_channel         (cmd_mux_030_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_044_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_044_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_044_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_044_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_044_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_044_source0_endofpacket),                 //          .endofpacket
		.sink1_ready         (mux_pipeline_045_source0_ready),                       //     sink1.ready
		.sink1_valid         (mux_pipeline_045_source0_valid),                       //          .valid
		.sink1_channel       (mux_pipeline_045_source0_channel),                     //          .channel
		.sink1_data          (mux_pipeline_045_source0_data),                        //          .data
		.sink1_startofpacket (mux_pipeline_045_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_045_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                 //      sink.ready
		.sink_channel       (router_002_src_channel),                               //          .channel
		.sink_data          (router_002_src_data),                                  //          .data
		.sink_startofpacket (router_002_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_002_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                            //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_001 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                 //      sink.ready
		.sink_channel       (router_003_src_channel),                               //          .channel
		.sink_data          (router_003_src_data),                                  //          .data
		.sink_startofpacket (router_003_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_003_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_001_src0_data),                              //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_002 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                 //      sink.ready
		.sink_channel       (router_004_src_channel),                               //          .channel
		.sink_data          (router_004_src_data),                                  //          .data
		.sink_startofpacket (router_004_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_004_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_002_src0_data),                              //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_003 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                 //      sink.ready
		.sink_channel       (router_005_src_channel),                               //          .channel
		.sink_data          (router_005_src_data),                                  //          .data
		.sink_startofpacket (router_005_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_005_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_004 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                 //      sink.ready
		.sink_channel       (router_006_src_channel),                               //          .channel
		.sink_data          (router_006_src_data),                                  //          .data
		.sink_startofpacket (router_006_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_006_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_004_src0_data),                              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_005 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                 //      sink.ready
		.sink_channel       (router_007_src_channel),                               //          .channel
		.sink_data          (router_007_src_data),                                  //          .data
		.sink_startofpacket (router_007_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_007_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_005_src0_data),                              //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_006 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                 //      sink.ready
		.sink_channel       (router_008_src_channel),                               //          .channel
		.sink_data          (router_008_src_data),                                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_008_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_006_src0_data),                              //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_007 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                 //      sink.ready
		.sink_channel       (router_009_src_channel),                               //          .channel
		.sink_data          (router_009_src_data),                                  //          .data
		.sink_startofpacket (router_009_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_009_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_007_src0_data),                              //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_008 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                 //      sink.ready
		.sink_channel       (router_010_src_channel),                               //          .channel
		.sink_data          (router_010_src_data),                                  //          .data
		.sink_startofpacket (router_010_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_010_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_008_src0_data),                              //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_009 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                 //      sink.ready
		.sink_channel       (router_011_src_channel),                               //          .channel
		.sink_data          (router_011_src_data),                                  //          .data
		.sink_startofpacket (router_011_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_011_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_009_src0_data),                              //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_010 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                 //      sink.ready
		.sink_channel       (router_012_src_channel),                               //          .channel
		.sink_data          (router_012_src_data),                                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_012_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_010_src0_data),                              //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_011 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                 //      sink.ready
		.sink_channel       (router_013_src_channel),                               //          .channel
		.sink_data          (router_013_src_data),                                  //          .data
		.sink_startofpacket (router_013_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_013_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_011_src0_data),                              //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_012 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                 //      sink.ready
		.sink_channel       (router_014_src_channel),                               //          .channel
		.sink_data          (router_014_src_data),                                  //          .data
		.sink_startofpacket (router_014_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_014_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_012_src0_data),                              //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_013 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                 //      sink.ready
		.sink_channel       (router_015_src_channel),                               //          .channel
		.sink_data          (router_015_src_data),                                  //          .data
		.sink_startofpacket (router_015_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_015_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_013_src0_data),                              //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_014 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                 //      sink.ready
		.sink_channel       (router_016_src_channel),                               //          .channel
		.sink_data          (router_016_src_data),                                  //          .data
		.sink_startofpacket (router_016_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_016_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_014_src0_data),                              //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_ujpdosq rsp_demux_015 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                 //      sink.ready
		.sink_channel       (router_017_src_channel),                               //          .channel
		.sink_data          (router_017_src_data),                                  //          .data
		.sink_startofpacket (router_017_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_017_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_015_src0_data),                              //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_016 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                 //      sink.ready
		.sink_channel       (router_018_src_channel),                               //          .channel
		.sink_data          (router_018_src_data),                                  //          .data
		.sink_startofpacket (router_018_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_018_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_016_src0_data),                              //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_016_src1_data),                              //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_017 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                 //      sink.ready
		.sink_channel       (router_019_src_channel),                               //          .channel
		.sink_data          (router_019_src_data),                                  //          .data
		.sink_startofpacket (router_019_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_019_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_017_src0_data),                              //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_017_src1_data),                              //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_018 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                 //      sink.ready
		.sink_channel       (router_020_src_channel),                               //          .channel
		.sink_data          (router_020_src_data),                                  //          .data
		.sink_startofpacket (router_020_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_020_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_018_src0_data),                              //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_018_src1_data),                              //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_019 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                 //      sink.ready
		.sink_channel       (router_021_src_channel),                               //          .channel
		.sink_data          (router_021_src_data),                                  //          .data
		.sink_startofpacket (router_021_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_021_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_019_src0_data),                              //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_019_src1_data),                              //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_020 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                 //      sink.ready
		.sink_channel       (router_022_src_channel),                               //          .channel
		.sink_data          (router_022_src_data),                                  //          .data
		.sink_startofpacket (router_022_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_022_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_020_src0_data),                              //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_020_src1_data),                              //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_021 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                 //      sink.ready
		.sink_channel       (router_023_src_channel),                               //          .channel
		.sink_data          (router_023_src_data),                                  //          .data
		.sink_startofpacket (router_023_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_023_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_021_src0_data),                              //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_021_src1_data),                              //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_022 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                 //      sink.ready
		.sink_channel       (router_024_src_channel),                               //          .channel
		.sink_data          (router_024_src_data),                                  //          .data
		.sink_startofpacket (router_024_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_024_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_022_src0_data),                              //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_022_src1_data),                              //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_023 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                                 //      sink.ready
		.sink_channel       (router_025_src_channel),                               //          .channel
		.sink_data          (router_025_src_data),                                  //          .data
		.sink_startofpacket (router_025_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_025_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_023_src0_data),                              //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_023_src1_data),                              //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_024 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                                 //      sink.ready
		.sink_channel       (router_026_src_channel),                               //          .channel
		.sink_data          (router_026_src_data),                                  //          .data
		.sink_startofpacket (router_026_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_026_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_024_src0_data),                              //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_024_src1_data),                              //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_025 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                 //      sink.ready
		.sink_channel       (router_027_src_channel),                               //          .channel
		.sink_data          (router_027_src_data),                                  //          .data
		.sink_startofpacket (router_027_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_027_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_025_src0_data),                              //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_025_src1_data),                              //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_026 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                                 //      sink.ready
		.sink_channel       (router_028_src_channel),                               //          .channel
		.sink_data          (router_028_src_data),                                  //          .data
		.sink_startofpacket (router_028_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_028_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_026_src0_data),                              //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_026_src1_data),                              //          .data
		.src1_channel       (rsp_demux_026_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_027 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                                 //      sink.ready
		.sink_channel       (router_029_src_channel),                               //          .channel
		.sink_data          (router_029_src_data),                                  //          .data
		.sink_startofpacket (router_029_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_029_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_027_src0_data),                              //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_027_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_027_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_027_src1_data),                              //          .data
		.src1_channel       (rsp_demux_027_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_027_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_027_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_028 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                                 //      sink.ready
		.sink_channel       (router_030_src_channel),                               //          .channel
		.sink_data          (router_030_src_data),                                  //          .data
		.sink_startofpacket (router_030_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_030_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_028_src0_data),                              //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_028_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_028_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_028_src1_data),                              //          .data
		.src1_channel       (rsp_demux_028_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_028_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_028_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_029 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                                 //      sink.ready
		.sink_channel       (router_031_src_channel),                               //          .channel
		.sink_data          (router_031_src_data),                                  //          .data
		.sink_startofpacket (router_031_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_031_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_029_src0_data),                              //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_029_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_029_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_029_src1_data),                              //          .data
		.src1_channel       (rsp_demux_029_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_029_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_029_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_demultiplexer_181_bamevga rsp_demux_030 (
		.clk                (sys_clk_clk_clk),                                      //       clk.clk
		.reset              (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                                 //      sink.ready
		.sink_channel       (router_032_src_channel),                               //          .channel
		.sink_data          (router_032_src_data),                                  //          .data
		.sink_startofpacket (router_032_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_032_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_030_src0_data),                              //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_030_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_030_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_030_src1_data),                              //          .data
		.src1_channel       (rsp_demux_030_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_030_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_030_src1_endofpacket)                        //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_icq7jyi rsp_mux (
		.clk                  (sys_clk_clk_clk),                                      //       clk.clk
		.reset                (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                    //       src.ready
		.src_valid            (rsp_mux_src_valid),                                    //          .valid
		.src_data             (rsp_mux_src_data),                                     //          .data
		.src_channel          (rsp_mux_src_channel),                                  //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready          (mux_pipeline_046_source0_ready),                       //     sink0.ready
		.sink0_valid          (mux_pipeline_046_source0_valid),                       //          .valid
		.sink0_channel        (mux_pipeline_046_source0_channel),                     //          .channel
		.sink0_data           (mux_pipeline_046_source0_data),                        //          .data
		.sink0_startofpacket  (mux_pipeline_046_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket    (mux_pipeline_046_source0_endofpacket),                 //          .endofpacket
		.sink1_ready          (mux_pipeline_047_source0_ready),                       //     sink1.ready
		.sink1_valid          (mux_pipeline_047_source0_valid),                       //          .valid
		.sink1_channel        (mux_pipeline_047_source0_channel),                     //          .channel
		.sink1_data           (mux_pipeline_047_source0_data),                        //          .data
		.sink1_startofpacket  (mux_pipeline_047_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (mux_pipeline_047_source0_endofpacket),                 //          .endofpacket
		.sink2_ready          (mux_pipeline_048_source0_ready),                       //     sink2.ready
		.sink2_valid          (mux_pipeline_048_source0_valid),                       //          .valid
		.sink2_channel        (mux_pipeline_048_source0_channel),                     //          .channel
		.sink2_data           (mux_pipeline_048_source0_data),                        //          .data
		.sink2_startofpacket  (mux_pipeline_048_source0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (mux_pipeline_048_source0_endofpacket),                 //          .endofpacket
		.sink3_ready          (mux_pipeline_049_source0_ready),                       //     sink3.ready
		.sink3_valid          (mux_pipeline_049_source0_valid),                       //          .valid
		.sink3_channel        (mux_pipeline_049_source0_channel),                     //          .channel
		.sink3_data           (mux_pipeline_049_source0_data),                        //          .data
		.sink3_startofpacket  (mux_pipeline_049_source0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (mux_pipeline_049_source0_endofpacket),                 //          .endofpacket
		.sink4_ready          (mux_pipeline_050_source0_ready),                       //     sink4.ready
		.sink4_valid          (mux_pipeline_050_source0_valid),                       //          .valid
		.sink4_channel        (mux_pipeline_050_source0_channel),                     //          .channel
		.sink4_data           (mux_pipeline_050_source0_data),                        //          .data
		.sink4_startofpacket  (mux_pipeline_050_source0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (mux_pipeline_050_source0_endofpacket),                 //          .endofpacket
		.sink5_ready          (mux_pipeline_051_source0_ready),                       //     sink5.ready
		.sink5_valid          (mux_pipeline_051_source0_valid),                       //          .valid
		.sink5_channel        (mux_pipeline_051_source0_channel),                     //          .channel
		.sink5_data           (mux_pipeline_051_source0_data),                        //          .data
		.sink5_startofpacket  (mux_pipeline_051_source0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (mux_pipeline_051_source0_endofpacket),                 //          .endofpacket
		.sink6_ready          (mux_pipeline_052_source0_ready),                       //     sink6.ready
		.sink6_valid          (mux_pipeline_052_source0_valid),                       //          .valid
		.sink6_channel        (mux_pipeline_052_source0_channel),                     //          .channel
		.sink6_data           (mux_pipeline_052_source0_data),                        //          .data
		.sink6_startofpacket  (mux_pipeline_052_source0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (mux_pipeline_052_source0_endofpacket),                 //          .endofpacket
		.sink7_ready          (mux_pipeline_053_source0_ready),                       //     sink7.ready
		.sink7_valid          (mux_pipeline_053_source0_valid),                       //          .valid
		.sink7_channel        (mux_pipeline_053_source0_channel),                     //          .channel
		.sink7_data           (mux_pipeline_053_source0_data),                        //          .data
		.sink7_startofpacket  (mux_pipeline_053_source0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (mux_pipeline_053_source0_endofpacket),                 //          .endofpacket
		.sink8_ready          (mux_pipeline_054_source0_ready),                       //     sink8.ready
		.sink8_valid          (mux_pipeline_054_source0_valid),                       //          .valid
		.sink8_channel        (mux_pipeline_054_source0_channel),                     //          .channel
		.sink8_data           (mux_pipeline_054_source0_data),                        //          .data
		.sink8_startofpacket  (mux_pipeline_054_source0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (mux_pipeline_054_source0_endofpacket),                 //          .endofpacket
		.sink9_ready          (mux_pipeline_055_source0_ready),                       //     sink9.ready
		.sink9_valid          (mux_pipeline_055_source0_valid),                       //          .valid
		.sink9_channel        (mux_pipeline_055_source0_channel),                     //          .channel
		.sink9_data           (mux_pipeline_055_source0_data),                        //          .data
		.sink9_startofpacket  (mux_pipeline_055_source0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (mux_pipeline_055_source0_endofpacket),                 //          .endofpacket
		.sink10_ready         (mux_pipeline_056_source0_ready),                       //    sink10.ready
		.sink10_valid         (mux_pipeline_056_source0_valid),                       //          .valid
		.sink10_channel       (mux_pipeline_056_source0_channel),                     //          .channel
		.sink10_data          (mux_pipeline_056_source0_data),                        //          .data
		.sink10_startofpacket (mux_pipeline_056_source0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (mux_pipeline_056_source0_endofpacket),                 //          .endofpacket
		.sink11_ready         (mux_pipeline_057_source0_ready),                       //    sink11.ready
		.sink11_valid         (mux_pipeline_057_source0_valid),                       //          .valid
		.sink11_channel       (mux_pipeline_057_source0_channel),                     //          .channel
		.sink11_data          (mux_pipeline_057_source0_data),                        //          .data
		.sink11_startofpacket (mux_pipeline_057_source0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (mux_pipeline_057_source0_endofpacket),                 //          .endofpacket
		.sink12_ready         (mux_pipeline_058_source0_ready),                       //    sink12.ready
		.sink12_valid         (mux_pipeline_058_source0_valid),                       //          .valid
		.sink12_channel       (mux_pipeline_058_source0_channel),                     //          .channel
		.sink12_data          (mux_pipeline_058_source0_data),                        //          .data
		.sink12_startofpacket (mux_pipeline_058_source0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (mux_pipeline_058_source0_endofpacket),                 //          .endofpacket
		.sink13_ready         (mux_pipeline_059_source0_ready),                       //    sink13.ready
		.sink13_valid         (mux_pipeline_059_source0_valid),                       //          .valid
		.sink13_channel       (mux_pipeline_059_source0_channel),                     //          .channel
		.sink13_data          (mux_pipeline_059_source0_data),                        //          .data
		.sink13_startofpacket (mux_pipeline_059_source0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (mux_pipeline_059_source0_endofpacket),                 //          .endofpacket
		.sink14_ready         (mux_pipeline_060_source0_ready),                       //    sink14.ready
		.sink14_valid         (mux_pipeline_060_source0_valid),                       //          .valid
		.sink14_channel       (mux_pipeline_060_source0_channel),                     //          .channel
		.sink14_data          (mux_pipeline_060_source0_data),                        //          .data
		.sink14_startofpacket (mux_pipeline_060_source0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (mux_pipeline_060_source0_endofpacket),                 //          .endofpacket
		.sink15_ready         (mux_pipeline_061_source0_ready),                       //    sink15.ready
		.sink15_valid         (mux_pipeline_061_source0_valid),                       //          .valid
		.sink15_channel       (mux_pipeline_061_source0_channel),                     //          .channel
		.sink15_data          (mux_pipeline_061_source0_data),                        //          .data
		.sink15_startofpacket (mux_pipeline_061_source0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (mux_pipeline_061_source0_endofpacket),                 //          .endofpacket
		.sink16_ready         (mux_pipeline_062_source0_ready),                       //    sink16.ready
		.sink16_valid         (mux_pipeline_062_source0_valid),                       //          .valid
		.sink16_channel       (mux_pipeline_062_source0_channel),                     //          .channel
		.sink16_data          (mux_pipeline_062_source0_data),                        //          .data
		.sink16_startofpacket (mux_pipeline_062_source0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (mux_pipeline_062_source0_endofpacket),                 //          .endofpacket
		.sink17_ready         (mux_pipeline_063_source0_ready),                       //    sink17.ready
		.sink17_valid         (mux_pipeline_063_source0_valid),                       //          .valid
		.sink17_channel       (mux_pipeline_063_source0_channel),                     //          .channel
		.sink17_data          (mux_pipeline_063_source0_data),                        //          .data
		.sink17_startofpacket (mux_pipeline_063_source0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (mux_pipeline_063_source0_endofpacket),                 //          .endofpacket
		.sink18_ready         (mux_pipeline_064_source0_ready),                       //    sink18.ready
		.sink18_valid         (mux_pipeline_064_source0_valid),                       //          .valid
		.sink18_channel       (mux_pipeline_064_source0_channel),                     //          .channel
		.sink18_data          (mux_pipeline_064_source0_data),                        //          .data
		.sink18_startofpacket (mux_pipeline_064_source0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (mux_pipeline_064_source0_endofpacket),                 //          .endofpacket
		.sink19_ready         (mux_pipeline_065_source0_ready),                       //    sink19.ready
		.sink19_valid         (mux_pipeline_065_source0_valid),                       //          .valid
		.sink19_channel       (mux_pipeline_065_source0_channel),                     //          .channel
		.sink19_data          (mux_pipeline_065_source0_data),                        //          .data
		.sink19_startofpacket (mux_pipeline_065_source0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (mux_pipeline_065_source0_endofpacket),                 //          .endofpacket
		.sink20_ready         (mux_pipeline_066_source0_ready),                       //    sink20.ready
		.sink20_valid         (mux_pipeline_066_source0_valid),                       //          .valid
		.sink20_channel       (mux_pipeline_066_source0_channel),                     //          .channel
		.sink20_data          (mux_pipeline_066_source0_data),                        //          .data
		.sink20_startofpacket (mux_pipeline_066_source0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (mux_pipeline_066_source0_endofpacket),                 //          .endofpacket
		.sink21_ready         (mux_pipeline_067_source0_ready),                       //    sink21.ready
		.sink21_valid         (mux_pipeline_067_source0_valid),                       //          .valid
		.sink21_channel       (mux_pipeline_067_source0_channel),                     //          .channel
		.sink21_data          (mux_pipeline_067_source0_data),                        //          .data
		.sink21_startofpacket (mux_pipeline_067_source0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (mux_pipeline_067_source0_endofpacket),                 //          .endofpacket
		.sink22_ready         (mux_pipeline_068_source0_ready),                       //    sink22.ready
		.sink22_valid         (mux_pipeline_068_source0_valid),                       //          .valid
		.sink22_channel       (mux_pipeline_068_source0_channel),                     //          .channel
		.sink22_data          (mux_pipeline_068_source0_data),                        //          .data
		.sink22_startofpacket (mux_pipeline_068_source0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (mux_pipeline_068_source0_endofpacket)                  //          .endofpacket
	);

	system_bd_altera_merlin_multiplexer_181_icq7jyi rsp_mux_001 (
		.clk                  (sys_clk_clk_clk),                                      //       clk.clk
		.reset                (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                //          .valid
		.src_data             (rsp_mux_001_src_data),                                 //          .data
		.src_channel          (rsp_mux_001_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (mux_pipeline_069_source0_ready),                       //     sink0.ready
		.sink0_valid          (mux_pipeline_069_source0_valid),                       //          .valid
		.sink0_channel        (mux_pipeline_069_source0_channel),                     //          .channel
		.sink0_data           (mux_pipeline_069_source0_data),                        //          .data
		.sink0_startofpacket  (mux_pipeline_069_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket    (mux_pipeline_069_source0_endofpacket),                 //          .endofpacket
		.sink1_ready          (mux_pipeline_070_source0_ready),                       //     sink1.ready
		.sink1_valid          (mux_pipeline_070_source0_valid),                       //          .valid
		.sink1_channel        (mux_pipeline_070_source0_channel),                     //          .channel
		.sink1_data           (mux_pipeline_070_source0_data),                        //          .data
		.sink1_startofpacket  (mux_pipeline_070_source0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (mux_pipeline_070_source0_endofpacket),                 //          .endofpacket
		.sink2_ready          (mux_pipeline_071_source0_ready),                       //     sink2.ready
		.sink2_valid          (mux_pipeline_071_source0_valid),                       //          .valid
		.sink2_channel        (mux_pipeline_071_source0_channel),                     //          .channel
		.sink2_data           (mux_pipeline_071_source0_data),                        //          .data
		.sink2_startofpacket  (mux_pipeline_071_source0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (mux_pipeline_071_source0_endofpacket),                 //          .endofpacket
		.sink3_ready          (mux_pipeline_072_source0_ready),                       //     sink3.ready
		.sink3_valid          (mux_pipeline_072_source0_valid),                       //          .valid
		.sink3_channel        (mux_pipeline_072_source0_channel),                     //          .channel
		.sink3_data           (mux_pipeline_072_source0_data),                        //          .data
		.sink3_startofpacket  (mux_pipeline_072_source0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (mux_pipeline_072_source0_endofpacket),                 //          .endofpacket
		.sink4_ready          (mux_pipeline_073_source0_ready),                       //     sink4.ready
		.sink4_valid          (mux_pipeline_073_source0_valid),                       //          .valid
		.sink4_channel        (mux_pipeline_073_source0_channel),                     //          .channel
		.sink4_data           (mux_pipeline_073_source0_data),                        //          .data
		.sink4_startofpacket  (mux_pipeline_073_source0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (mux_pipeline_073_source0_endofpacket),                 //          .endofpacket
		.sink5_ready          (mux_pipeline_074_source0_ready),                       //     sink5.ready
		.sink5_valid          (mux_pipeline_074_source0_valid),                       //          .valid
		.sink5_channel        (mux_pipeline_074_source0_channel),                     //          .channel
		.sink5_data           (mux_pipeline_074_source0_data),                        //          .data
		.sink5_startofpacket  (mux_pipeline_074_source0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (mux_pipeline_074_source0_endofpacket),                 //          .endofpacket
		.sink6_ready          (mux_pipeline_075_source0_ready),                       //     sink6.ready
		.sink6_valid          (mux_pipeline_075_source0_valid),                       //          .valid
		.sink6_channel        (mux_pipeline_075_source0_channel),                     //          .channel
		.sink6_data           (mux_pipeline_075_source0_data),                        //          .data
		.sink6_startofpacket  (mux_pipeline_075_source0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (mux_pipeline_075_source0_endofpacket),                 //          .endofpacket
		.sink7_ready          (mux_pipeline_076_source0_ready),                       //     sink7.ready
		.sink7_valid          (mux_pipeline_076_source0_valid),                       //          .valid
		.sink7_channel        (mux_pipeline_076_source0_channel),                     //          .channel
		.sink7_data           (mux_pipeline_076_source0_data),                        //          .data
		.sink7_startofpacket  (mux_pipeline_076_source0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (mux_pipeline_076_source0_endofpacket),                 //          .endofpacket
		.sink8_ready          (mux_pipeline_077_source0_ready),                       //     sink8.ready
		.sink8_valid          (mux_pipeline_077_source0_valid),                       //          .valid
		.sink8_channel        (mux_pipeline_077_source0_channel),                     //          .channel
		.sink8_data           (mux_pipeline_077_source0_data),                        //          .data
		.sink8_startofpacket  (mux_pipeline_077_source0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (mux_pipeline_077_source0_endofpacket),                 //          .endofpacket
		.sink9_ready          (mux_pipeline_078_source0_ready),                       //     sink9.ready
		.sink9_valid          (mux_pipeline_078_source0_valid),                       //          .valid
		.sink9_channel        (mux_pipeline_078_source0_channel),                     //          .channel
		.sink9_data           (mux_pipeline_078_source0_data),                        //          .data
		.sink9_startofpacket  (mux_pipeline_078_source0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (mux_pipeline_078_source0_endofpacket),                 //          .endofpacket
		.sink10_ready         (mux_pipeline_079_source0_ready),                       //    sink10.ready
		.sink10_valid         (mux_pipeline_079_source0_valid),                       //          .valid
		.sink10_channel       (mux_pipeline_079_source0_channel),                     //          .channel
		.sink10_data          (mux_pipeline_079_source0_data),                        //          .data
		.sink10_startofpacket (mux_pipeline_079_source0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (mux_pipeline_079_source0_endofpacket),                 //          .endofpacket
		.sink11_ready         (mux_pipeline_080_source0_ready),                       //    sink11.ready
		.sink11_valid         (mux_pipeline_080_source0_valid),                       //          .valid
		.sink11_channel       (mux_pipeline_080_source0_channel),                     //          .channel
		.sink11_data          (mux_pipeline_080_source0_data),                        //          .data
		.sink11_startofpacket (mux_pipeline_080_source0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (mux_pipeline_080_source0_endofpacket),                 //          .endofpacket
		.sink12_ready         (mux_pipeline_081_source0_ready),                       //    sink12.ready
		.sink12_valid         (mux_pipeline_081_source0_valid),                       //          .valid
		.sink12_channel       (mux_pipeline_081_source0_channel),                     //          .channel
		.sink12_data          (mux_pipeline_081_source0_data),                        //          .data
		.sink12_startofpacket (mux_pipeline_081_source0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (mux_pipeline_081_source0_endofpacket),                 //          .endofpacket
		.sink13_ready         (mux_pipeline_082_source0_ready),                       //    sink13.ready
		.sink13_valid         (mux_pipeline_082_source0_valid),                       //          .valid
		.sink13_channel       (mux_pipeline_082_source0_channel),                     //          .channel
		.sink13_data          (mux_pipeline_082_source0_data),                        //          .data
		.sink13_startofpacket (mux_pipeline_082_source0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (mux_pipeline_082_source0_endofpacket),                 //          .endofpacket
		.sink14_ready         (mux_pipeline_083_source0_ready),                       //    sink14.ready
		.sink14_valid         (mux_pipeline_083_source0_valid),                       //          .valid
		.sink14_channel       (mux_pipeline_083_source0_channel),                     //          .channel
		.sink14_data          (mux_pipeline_083_source0_data),                        //          .data
		.sink14_startofpacket (mux_pipeline_083_source0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (mux_pipeline_083_source0_endofpacket),                 //          .endofpacket
		.sink15_ready         (mux_pipeline_084_source0_ready),                       //    sink15.ready
		.sink15_valid         (mux_pipeline_084_source0_valid),                       //          .valid
		.sink15_channel       (mux_pipeline_084_source0_channel),                     //          .channel
		.sink15_data          (mux_pipeline_084_source0_data),                        //          .data
		.sink15_startofpacket (mux_pipeline_084_source0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (mux_pipeline_084_source0_endofpacket),                 //          .endofpacket
		.sink16_ready         (mux_pipeline_085_source0_ready),                       //    sink16.ready
		.sink16_valid         (mux_pipeline_085_source0_valid),                       //          .valid
		.sink16_channel       (mux_pipeline_085_source0_channel),                     //          .channel
		.sink16_data          (mux_pipeline_085_source0_data),                        //          .data
		.sink16_startofpacket (mux_pipeline_085_source0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (mux_pipeline_085_source0_endofpacket),                 //          .endofpacket
		.sink17_ready         (mux_pipeline_086_source0_ready),                       //    sink17.ready
		.sink17_valid         (mux_pipeline_086_source0_valid),                       //          .valid
		.sink17_channel       (mux_pipeline_086_source0_channel),                     //          .channel
		.sink17_data          (mux_pipeline_086_source0_data),                        //          .data
		.sink17_startofpacket (mux_pipeline_086_source0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (mux_pipeline_086_source0_endofpacket),                 //          .endofpacket
		.sink18_ready         (mux_pipeline_087_source0_ready),                       //    sink18.ready
		.sink18_valid         (mux_pipeline_087_source0_valid),                       //          .valid
		.sink18_channel       (mux_pipeline_087_source0_channel),                     //          .channel
		.sink18_data          (mux_pipeline_087_source0_data),                        //          .data
		.sink18_startofpacket (mux_pipeline_087_source0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (mux_pipeline_087_source0_endofpacket),                 //          .endofpacket
		.sink19_ready         (mux_pipeline_088_source0_ready),                       //    sink19.ready
		.sink19_valid         (mux_pipeline_088_source0_valid),                       //          .valid
		.sink19_channel       (mux_pipeline_088_source0_channel),                     //          .channel
		.sink19_data          (mux_pipeline_088_source0_data),                        //          .data
		.sink19_startofpacket (mux_pipeline_088_source0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (mux_pipeline_088_source0_endofpacket),                 //          .endofpacket
		.sink20_ready         (mux_pipeline_089_source0_ready),                       //    sink20.ready
		.sink20_valid         (mux_pipeline_089_source0_valid),                       //          .valid
		.sink20_channel       (mux_pipeline_089_source0_channel),                     //          .channel
		.sink20_data          (mux_pipeline_089_source0_data),                        //          .data
		.sink20_startofpacket (mux_pipeline_089_source0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (mux_pipeline_089_source0_endofpacket),                 //          .endofpacket
		.sink21_ready         (mux_pipeline_090_source0_ready),                       //    sink21.ready
		.sink21_valid         (mux_pipeline_090_source0_valid),                       //          .valid
		.sink21_channel       (mux_pipeline_090_source0_channel),                     //          .channel
		.sink21_data          (mux_pipeline_090_source0_data),                        //          .data
		.sink21_startofpacket (mux_pipeline_090_source0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (mux_pipeline_090_source0_endofpacket),                 //          .endofpacket
		.sink22_ready         (mux_pipeline_091_source0_ready),                       //    sink22.ready
		.sink22_valid         (mux_pipeline_091_source0_valid),                       //          .valid
		.sink22_channel       (mux_pipeline_091_source0_channel),                     //          .channel
		.sink22_data          (mux_pipeline_091_source0_data),                        //          .data
		.sink22_startofpacket (mux_pipeline_091_source0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (mux_pipeline_091_source0_endofpacket)                  //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (sys_clk_clk_clk),                                            //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),          //          .data
		.in_channel        (sys_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                             //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                             //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                       //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                              //          .data
		.out_channel       (limiter_pipeline_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                    //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                    //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                            //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                              //          .endofpacket
		.in_data           (rsp_mux_src_data),                                     //          .data
		.in_channel        (rsp_mux_src_channel),                                  //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (sys_clk_clk_clk),                                            //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),          //          .data
		.in_channel        (sys_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                         //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                         //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                   //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                          //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                 //          .data
		.in_channel        (rsp_mux_001_src_channel),                              //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_management_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_management_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_management_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_management_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_management_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_link_management_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                          //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                          //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                    //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                           //          .data
		.out_channel       (agent_pipeline_source0_channel),                                        //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_management_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_management_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_management_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_management_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_management_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_link_management_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                      //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                      //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                                //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                       //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_management_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_management_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_management_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_management_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_management_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                             //          .data
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_channel       (),                                                            // (terminated)
		.in_channel        (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (sys_clk_clk_clk),                                            //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_management_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_management_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_management_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_management_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_management_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_management_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_management_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_management_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_management_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_management_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9680_jesd204_link_management_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                                      //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                                      //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                                //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                                       //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (sys_clk_clk_clk),                                                       //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_management_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_management_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_management_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_management_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_management_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9680_jesd204_link_management_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_005_source0_ready),                                      //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                                      //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                                //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                                       //          .data
		.out_channel       (agent_pipeline_005_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_error          (1'b0)                                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_management_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_management_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_management_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_management_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_management_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_006_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                             //          .data
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_channel       (),                                                            // (terminated)
		.in_channel        (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (sys_clk_clk_clk),                                            //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_management_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_management_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_management_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_management_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_management_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                           //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                           //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                     //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                            //          .data
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_channel       (),                                                           // (terminated)
		.in_channel        (1'b0)                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_link_reconfig_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_link_reconfig_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_009_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_009_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (sys_clk_clk_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_reconfig_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_reconfig_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_reconfig_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_010_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_reconfig_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_reconfig_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_reconfig_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9680_jesd204_link_reconfig_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (sys_clk_clk_clk),                                                     //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9680_jesd204_link_reconfig_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_013_source0_ready),                                    //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                                    //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),                              //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                                     //          .data
		.out_channel       (agent_pipeline_013_source0_channel),                                  //          .channel
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_error          (1'b0)                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (sys_clk_clk_clk),                                           //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_reconfig_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_reconfig_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_reconfig_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_014_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_reconfig_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_reconfig_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_reconfig_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_015_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                          //          .data
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_channel       (),                                                         // (terminated)
		.in_channel        (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9144_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),                             //          .data
		.out_channel       (agent_pipeline_016_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9144_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_017_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),                             //          .data
		.out_channel       (agent_pipeline_017_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9144_dma_s_axi_agent_write_rp_ready),            //     sink0.ready
		.in_valid          (axi_ad9144_dma_s_axi_agent_write_rp_valid),            //          .valid
		.in_startofpacket  (axi_ad9144_dma_s_axi_agent_write_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (axi_ad9144_dma_s_axi_agent_write_rp_endofpacket),      //          .endofpacket
		.in_data           (axi_ad9144_dma_s_axi_agent_write_rp_data),             //          .data
		.out_ready         (agent_pipeline_018_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9144_dma_s_axi_agent_read_rp_ready),             //     sink0.ready
		.in_valid          (axi_ad9144_dma_s_axi_agent_read_rp_valid),             //          .valid
		.in_startofpacket  (axi_ad9144_dma_s_axi_agent_read_rp_startofpacket),     //          .startofpacket
		.in_endofpacket    (axi_ad9144_dma_s_axi_agent_read_rp_endofpacket),       //          .endofpacket
		.in_data           (axi_ad9144_dma_s_axi_agent_read_rp_data),              //          .data
		.out_ready         (agent_pipeline_019_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (sys_clk_clk_clk),                                              //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (axi_ad9144_core_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9144_core_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9144_core_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9144_core_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9144_core_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9144_core_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),                              //          .data
		.out_channel       (agent_pipeline_020_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (sys_clk_clk_clk),                                              //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (axi_ad9144_core_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9144_core_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9144_core_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9144_core_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9144_core_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9144_core_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_021_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),                              //          .data
		.out_channel       (agent_pipeline_021_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9144_core_s_axi_agent_write_rp_ready),           //     sink0.ready
		.in_valid          (axi_ad9144_core_s_axi_agent_write_rp_valid),           //          .valid
		.in_startofpacket  (axi_ad9144_core_s_axi_agent_write_rp_startofpacket),   //          .startofpacket
		.in_endofpacket    (axi_ad9144_core_s_axi_agent_write_rp_endofpacket),     //          .endofpacket
		.in_data           (axi_ad9144_core_s_axi_agent_write_rp_data),            //          .data
		.out_ready         (agent_pipeline_022_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9144_core_s_axi_agent_read_rp_ready),            //     sink0.ready
		.in_valid          (axi_ad9144_core_s_axi_agent_read_rp_valid),            //          .valid
		.in_startofpacket  (axi_ad9144_core_s_axi_agent_read_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (axi_ad9144_core_s_axi_agent_read_rp_endofpacket),      //          .endofpacket
		.in_data           (axi_ad9144_core_s_axi_agent_read_rp_data),             //          .data
		.out_ready         (agent_pipeline_023_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_024 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9680_dma_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_024_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_024_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_024_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_024_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_024_source0_data),                             //          .data
		.out_channel       (agent_pipeline_024_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_025 (
		.clk               (sys_clk_clk_clk),                                             //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9680_dma_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_025_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_025_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_025_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_025_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_025_source0_data),                             //          .data
		.out_channel       (agent_pipeline_025_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_026 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9680_dma_s_axi_agent_write_rp_ready),            //     sink0.ready
		.in_valid          (axi_ad9680_dma_s_axi_agent_write_rp_valid),            //          .valid
		.in_startofpacket  (axi_ad9680_dma_s_axi_agent_write_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (axi_ad9680_dma_s_axi_agent_write_rp_endofpacket),      //          .endofpacket
		.in_data           (axi_ad9680_dma_s_axi_agent_write_rp_data),             //          .data
		.out_ready         (agent_pipeline_026_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_026_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_026_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_026_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_026_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_027 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9680_dma_s_axi_agent_read_rp_ready),             //     sink0.ready
		.in_valid          (axi_ad9680_dma_s_axi_agent_read_rp_valid),             //          .valid
		.in_startofpacket  (axi_ad9680_dma_s_axi_agent_read_rp_startofpacket),     //          .startofpacket
		.in_endofpacket    (axi_ad9680_dma_s_axi_agent_read_rp_endofpacket),       //          .endofpacket
		.in_data           (axi_ad9680_dma_s_axi_agent_read_rp_data),              //          .data
		.out_ready         (agent_pipeline_027_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_027_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_027_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_027_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_027_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_028 (
		.clk               (sys_clk_clk_clk),                                              //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (axi_ad9680_core_s_axi_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9680_core_s_axi_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9680_core_s_axi_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9680_core_s_axi_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9680_core_s_axi_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9680_core_s_axi_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_028_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_028_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_028_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_028_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_028_source0_data),                              //          .data
		.out_channel       (agent_pipeline_028_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_029 (
		.clk               (sys_clk_clk_clk),                                              //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (axi_ad9680_core_s_axi_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_ad9680_core_s_axi_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_ad9680_core_s_axi_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_ad9680_core_s_axi_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_ad9680_core_s_axi_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_ad9680_core_s_axi_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_029_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_029_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_029_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_029_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_029_source0_data),                              //          .data
		.out_channel       (agent_pipeline_029_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_030 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9680_core_s_axi_agent_write_rp_ready),           //     sink0.ready
		.in_valid          (axi_ad9680_core_s_axi_agent_write_rp_valid),           //          .valid
		.in_startofpacket  (axi_ad9680_core_s_axi_agent_write_rp_startofpacket),   //          .startofpacket
		.in_endofpacket    (axi_ad9680_core_s_axi_agent_write_rp_endofpacket),     //          .endofpacket
		.in_data           (axi_ad9680_core_s_axi_agent_write_rp_data),            //          .data
		.out_ready         (agent_pipeline_030_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_030_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_030_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_030_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_030_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_031 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (axi_ad9680_core_s_axi_agent_read_rp_ready),            //     sink0.ready
		.in_valid          (axi_ad9680_core_s_axi_agent_read_rp_valid),            //          .valid
		.in_startofpacket  (axi_ad9680_core_s_axi_agent_read_rp_startofpacket),    //          .startofpacket
		.in_endofpacket    (axi_ad9680_core_s_axi_agent_read_rp_endofpacket),      //          .endofpacket
		.in_data           (axi_ad9680_core_s_axi_agent_read_rp_data),             //          .data
		.out_ready         (agent_pipeline_031_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_031_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_031_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_031_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_031_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_032 (
		.clk               (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_lane_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_032_source0_ready),                                     //   source0.ready
		.out_valid         (agent_pipeline_032_source0_valid),                                     //          .valid
		.out_startofpacket (agent_pipeline_032_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (agent_pipeline_032_source0_endofpacket),                               //          .endofpacket
		.out_data          (agent_pipeline_032_source0_data),                                      //          .data
		.out_channel       (agent_pipeline_032_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_error          (1'b0)                                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_033 (
		.clk               (sys_clk_clk_clk),                                         //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_agent_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_agent_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_lane_pll_reconfig_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_033_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_033_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_033_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_033_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_033_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_034 (
		.clk               (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9144_jesd204_link_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_034_source0_ready),                                     //   source0.ready
		.out_valid         (agent_pipeline_034_source0_valid),                                     //          .valid
		.out_startofpacket (agent_pipeline_034_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (agent_pipeline_034_source0_endofpacket),                               //          .endofpacket
		.out_data          (agent_pipeline_034_source0_data),                                      //          .data
		.out_channel       (agent_pipeline_034_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_error          (1'b0)                                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_035 (
		.clk               (sys_clk_clk_clk),                                         //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (ad9144_jesd204_link_pll_reconfig_agent_rp_ready),         //     sink0.ready
		.in_valid          (ad9144_jesd204_link_pll_reconfig_agent_rp_valid),         //          .valid
		.in_startofpacket  (ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9144_jesd204_link_pll_reconfig_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_035_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_035_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_035_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_035_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_035_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_036 (
		.clk               (sys_clk_clk_clk),                                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_data),          //          .data
		.in_channel        (ad9680_jesd204_link_pll_reconfig_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_036_source0_ready),                                     //   source0.ready
		.out_valid         (agent_pipeline_036_source0_valid),                                     //          .valid
		.out_startofpacket (agent_pipeline_036_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (agent_pipeline_036_source0_endofpacket),                               //          .endofpacket
		.out_data          (agent_pipeline_036_source0_data),                                      //          .data
		.out_channel       (agent_pipeline_036_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_error          (1'b0)                                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_037 (
		.clk               (sys_clk_clk_clk),                                         //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (ad9680_jesd204_link_pll_reconfig_agent_rp_ready),         //     sink0.ready
		.in_valid          (ad9680_jesd204_link_pll_reconfig_agent_rp_valid),         //          .valid
		.in_startofpacket  (ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (ad9680_jesd204_link_pll_reconfig_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_037_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_037_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_037_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_037_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_037_source0_data),                         //          .data
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_channel       (),                                                        // (terminated)
		.in_channel        (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_038 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_0_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_038_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_038_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_038_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_038_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_038_source0_data),                          //          .data
		.out_channel       (agent_pipeline_038_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_039 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_0_rcfg_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_0_rcfg_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_0_rcfg_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_0_rcfg_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_039_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_039_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_039_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_039_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_039_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_040 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_1_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_040_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_040_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_040_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_040_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_040_source0_data),                          //          .data
		.out_channel       (agent_pipeline_040_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_041 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_1_rcfg_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_1_rcfg_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_1_rcfg_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_1_rcfg_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_041_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_041_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_041_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_041_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_041_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_042 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_2_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_042_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_042_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_042_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_042_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_042_source0_data),                          //          .data
		.out_channel       (agent_pipeline_042_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_043 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_2_rcfg_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_2_rcfg_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_2_rcfg_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_2_rcfg_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_043_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_043_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_043_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_043_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_043_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_044 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_3_rcfg_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_044_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_044_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_044_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_044_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_044_source0_data),                          //          .data
		.out_channel       (agent_pipeline_044_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_045 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_3_rcfg_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_3_rcfg_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_3_rcfg_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_3_rcfg_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_045_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_045_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_045_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_045_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_045_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_046 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_0_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_046_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_046_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_046_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_046_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_046_source0_data),                          //          .data
		.out_channel       (agent_pipeline_046_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_047 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_0_rcfg_s1_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_0_rcfg_s1_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_0_rcfg_s1_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_0_rcfg_s1_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_0_rcfg_s1_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_047_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_047_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_047_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_047_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_047_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_048 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_1_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_048_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_048_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_048_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_048_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_048_source0_data),                          //          .data
		.out_channel       (agent_pipeline_048_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_049 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_1_rcfg_s1_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_1_rcfg_s1_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_1_rcfg_s1_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_1_rcfg_s1_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_1_rcfg_s1_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_049_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_049_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_049_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_049_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_049_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_050 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_2_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_050_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_050_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_050_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_050_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_050_source0_data),                          //          .data
		.out_channel       (agent_pipeline_050_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_051 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_2_rcfg_s1_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_2_rcfg_s1_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_2_rcfg_s1_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_2_rcfg_s1_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_2_rcfg_s1_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_051_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_051_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_051_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_051_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_051_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_052 (
		.clk               (sys_clk_clk_clk),                                          //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_data),          //          .data
		.in_channel        (avl_adxcfg_3_rcfg_s1_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_052_source0_ready),                         //   source0.ready
		.out_valid         (agent_pipeline_052_source0_valid),                         //          .valid
		.out_startofpacket (agent_pipeline_052_source0_startofpacket),                 //          .startofpacket
		.out_endofpacket   (agent_pipeline_052_source0_endofpacket),                   //          .endofpacket
		.out_data          (agent_pipeline_052_source0_data),                          //          .data
		.out_channel       (agent_pipeline_052_source0_channel),                       //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_053 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (avl_adxcfg_3_rcfg_s1_agent_rp_ready),                  //     sink0.ready
		.in_valid          (avl_adxcfg_3_rcfg_s1_agent_rp_valid),                  //          .valid
		.in_startofpacket  (avl_adxcfg_3_rcfg_s1_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (avl_adxcfg_3_rcfg_s1_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (avl_adxcfg_3_rcfg_s1_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_053_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_053_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_053_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_053_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_053_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_054 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_bd_s1_burst_adapter_source0_ready),           //     sink0.ready
		.in_valid          (sys_gpio_bd_s1_burst_adapter_source0_valid),           //          .valid
		.in_startofpacket  (sys_gpio_bd_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.in_data           (sys_gpio_bd_s1_burst_adapter_source0_data),            //          .data
		.in_channel        (sys_gpio_bd_s1_burst_adapter_source0_channel),         //          .channel
		.out_ready         (agent_pipeline_054_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_054_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_054_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_054_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_054_source0_data),                      //          .data
		.out_channel       (agent_pipeline_054_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_055 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_bd_s1_agent_rp_ready),                        //     sink0.ready
		.in_valid          (sys_gpio_bd_s1_agent_rp_valid),                        //          .valid
		.in_startofpacket  (sys_gpio_bd_s1_agent_rp_startofpacket),                //          .startofpacket
		.in_endofpacket    (sys_gpio_bd_s1_agent_rp_endofpacket),                  //          .endofpacket
		.in_data           (sys_gpio_bd_s1_agent_rp_data),                         //          .data
		.out_ready         (agent_pipeline_055_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_055_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_055_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_055_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_055_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_056 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_in_s1_burst_adapter_source0_ready),           //     sink0.ready
		.in_valid          (sys_gpio_in_s1_burst_adapter_source0_valid),           //          .valid
		.in_startofpacket  (sys_gpio_in_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.in_data           (sys_gpio_in_s1_burst_adapter_source0_data),            //          .data
		.in_channel        (sys_gpio_in_s1_burst_adapter_source0_channel),         //          .channel
		.out_ready         (agent_pipeline_056_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_056_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_056_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_056_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_056_source0_data),                      //          .data
		.out_channel       (agent_pipeline_056_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_057 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_in_s1_agent_rp_ready),                        //     sink0.ready
		.in_valid          (sys_gpio_in_s1_agent_rp_valid),                        //          .valid
		.in_startofpacket  (sys_gpio_in_s1_agent_rp_startofpacket),                //          .startofpacket
		.in_endofpacket    (sys_gpio_in_s1_agent_rp_endofpacket),                  //          .endofpacket
		.in_data           (sys_gpio_in_s1_agent_rp_data),                         //          .data
		.out_ready         (agent_pipeline_057_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_057_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_057_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_057_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_057_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_058 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_out_s1_burst_adapter_source0_ready),          //     sink0.ready
		.in_valid          (sys_gpio_out_s1_burst_adapter_source0_valid),          //          .valid
		.in_startofpacket  (sys_gpio_out_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.in_data           (sys_gpio_out_s1_burst_adapter_source0_data),           //          .data
		.in_channel        (sys_gpio_out_s1_burst_adapter_source0_channel),        //          .channel
		.out_ready         (agent_pipeline_058_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_058_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_058_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_058_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_058_source0_data),                      //          .data
		.out_channel       (agent_pipeline_058_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_059 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_gpio_out_s1_agent_rp_ready),                       //     sink0.ready
		.in_valid          (sys_gpio_out_s1_agent_rp_valid),                       //          .valid
		.in_startofpacket  (sys_gpio_out_s1_agent_rp_startofpacket),               //          .startofpacket
		.in_endofpacket    (sys_gpio_out_s1_agent_rp_endofpacket),                 //          .endofpacket
		.in_data           (sys_gpio_out_s1_agent_rp_data),                        //          .data
		.out_ready         (agent_pipeline_059_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_059_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_059_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_059_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_059_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_060 (
		.clk               (sys_clk_clk_clk),                                              //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (sys_spi_spi_control_port_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sys_spi_spi_control_port_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sys_spi_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sys_spi_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sys_spi_spi_control_port_burst_adapter_source0_data),          //          .data
		.in_channel        (sys_spi_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_060_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_060_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_060_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_060_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_060_source0_data),                              //          .data
		.out_channel       (agent_pipeline_060_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_061 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sys_spi_spi_control_port_agent_rp_ready),              //     sink0.ready
		.in_valid          (sys_spi_spi_control_port_agent_rp_valid),              //          .valid
		.in_startofpacket  (sys_spi_spi_control_port_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (sys_spi_spi_control_port_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (sys_spi_spi_control_port_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_061_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_061_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_061_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_061_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_061_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                  //          .data
		.in_channel        (cmd_demux_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_source0_ready),                           //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                           //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                     //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                            //          .data
		.out_channel       (mux_pipeline_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                              //          .data
		.in_channel        (cmd_demux_001_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                        //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                  //          .data
		.in_channel        (cmd_demux_src1_channel),                               //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                        //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                              //          .data
		.in_channel        (cmd_demux_001_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                        //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src2_data),                                  //          .data
		.in_channel        (cmd_demux_src2_channel),                               //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                        //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                              //          .data
		.in_channel        (cmd_demux_001_src2_channel),                           //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                        //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src3_data),                                  //          .data
		.in_channel        (cmd_demux_src3_channel),                               //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                        //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                              //          .data
		.in_channel        (cmd_demux_001_src3_channel),                           //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                        //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src4_data),                                  //          .data
		.in_channel        (cmd_demux_src4_channel),                               //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                        //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                              //          .data
		.in_channel        (cmd_demux_001_src4_channel),                           //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                        //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src5_data),                                  //          .data
		.in_channel        (cmd_demux_src5_channel),                               //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                        //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src5_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src5_data),                              //          .data
		.in_channel        (cmd_demux_001_src5_channel),                           //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                        //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src6_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src6_data),                                  //          .data
		.in_channel        (cmd_demux_src6_channel),                               //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                        //          .data
		.out_channel       (mux_pipeline_012_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src6_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src6_data),                              //          .data
		.in_channel        (cmd_demux_001_src6_channel),                           //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                        //          .data
		.out_channel       (mux_pipeline_013_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src7_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src7_data),                                  //          .data
		.in_channel        (cmd_demux_src7_channel),                               //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                        //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src7_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src7_data),                              //          .data
		.in_channel        (cmd_demux_001_src7_channel),                           //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                        //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src8_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src8_data),                                  //          .data
		.in_channel        (cmd_demux_src8_channel),                               //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                        //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src8_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src8_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src8_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src8_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src8_data),                              //          .data
		.in_channel        (cmd_demux_001_src8_channel),                           //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                        //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                 //     sink0.ready
		.in_valid          (cmd_demux_src9_valid),                                 //          .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                         //          .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                           //          .endofpacket
		.in_data           (cmd_demux_src9_data),                                  //          .data
		.in_channel        (cmd_demux_src9_channel),                               //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                        //          .data
		.out_channel       (mux_pipeline_018_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src9_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_001_src9_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_001_src9_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src9_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_001_src9_data),                              //          .data
		.in_channel        (cmd_demux_001_src9_channel),                           //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                        //          .data
		.out_channel       (mux_pipeline_019_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src10_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src10_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src10_data),                                 //          .data
		.in_channel        (cmd_demux_src10_channel),                              //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),                        //          .data
		.out_channel       (mux_pipeline_020_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src10_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src10_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src10_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src10_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src10_data),                             //          .data
		.in_channel        (cmd_demux_001_src10_channel),                          //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),                        //          .data
		.out_channel       (mux_pipeline_021_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src11_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src11_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src11_data),                                 //          .data
		.in_channel        (cmd_demux_src11_channel),                              //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),                        //          .data
		.out_channel       (mux_pipeline_022_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src11_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src11_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src11_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src11_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src11_data),                             //          .data
		.in_channel        (cmd_demux_001_src11_channel),                          //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),                        //          .data
		.out_channel       (mux_pipeline_023_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src12_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src12_data),                                 //          .data
		.in_channel        (cmd_demux_src12_channel),                              //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),                        //          .data
		.out_channel       (mux_pipeline_024_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src12_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src12_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src12_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src12_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src12_data),                             //          .data
		.in_channel        (cmd_demux_001_src12_channel),                          //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),                        //          .data
		.out_channel       (mux_pipeline_025_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src13_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src13_data),                                 //          .data
		.in_channel        (cmd_demux_src13_channel),                              //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),                        //          .data
		.out_channel       (mux_pipeline_026_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src13_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src13_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src13_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src13_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src13_data),                             //          .data
		.in_channel        (cmd_demux_001_src13_channel),                          //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),                        //          .data
		.out_channel       (mux_pipeline_027_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src14_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src14_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src14_data),                                 //          .data
		.in_channel        (cmd_demux_src14_channel),                              //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),                        //          .data
		.out_channel       (mux_pipeline_028_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src14_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src14_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src14_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src14_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src14_data),                             //          .data
		.in_channel        (cmd_demux_001_src14_channel),                          //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),                        //          .data
		.out_channel       (mux_pipeline_029_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src15_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src15_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src15_data),                                 //          .data
		.in_channel        (cmd_demux_src15_channel),                              //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),                        //          .data
		.out_channel       (mux_pipeline_030_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src15_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src15_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src15_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src15_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src15_data),                             //          .data
		.in_channel        (cmd_demux_001_src15_channel),                          //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),                        //          .data
		.out_channel       (mux_pipeline_031_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_032 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src16_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src16_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src16_data),                                 //          .data
		.in_channel        (cmd_demux_src16_channel),                              //          .channel
		.out_ready         (mux_pipeline_032_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_032_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_032_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_032_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_032_source0_data),                        //          .data
		.out_channel       (mux_pipeline_032_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_033 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src16_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src16_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src16_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src16_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src16_data),                             //          .data
		.in_channel        (cmd_demux_001_src16_channel),                          //          .channel
		.out_ready         (mux_pipeline_033_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_033_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_033_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_033_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_033_source0_data),                        //          .data
		.out_channel       (mux_pipeline_033_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_034 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src17_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src17_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src17_data),                                 //          .data
		.in_channel        (cmd_demux_src17_channel),                              //          .channel
		.out_ready         (mux_pipeline_034_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_034_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_034_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_034_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_034_source0_data),                        //          .data
		.out_channel       (mux_pipeline_034_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_035 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src17_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src17_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src17_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src17_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src17_data),                             //          .data
		.in_channel        (cmd_demux_001_src17_channel),                          //          .channel
		.out_ready         (mux_pipeline_035_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_035_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_035_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_035_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_035_source0_data),                        //          .data
		.out_channel       (mux_pipeline_035_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_036 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src18_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src18_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src18_data),                                 //          .data
		.in_channel        (cmd_demux_src18_channel),                              //          .channel
		.out_ready         (mux_pipeline_036_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_036_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_036_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_036_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_036_source0_data),                        //          .data
		.out_channel       (mux_pipeline_036_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_037 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src18_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src18_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src18_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src18_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src18_data),                             //          .data
		.in_channel        (cmd_demux_001_src18_channel),                          //          .channel
		.out_ready         (mux_pipeline_037_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_037_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_037_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_037_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_037_source0_data),                        //          .data
		.out_channel       (mux_pipeline_037_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_038 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src19_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src19_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src19_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src19_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src19_data),                                 //          .data
		.in_channel        (cmd_demux_src19_channel),                              //          .channel
		.out_ready         (mux_pipeline_038_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_038_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_038_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_038_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_038_source0_data),                        //          .data
		.out_channel       (mux_pipeline_038_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_039 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src19_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src19_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src19_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src19_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src19_data),                             //          .data
		.in_channel        (cmd_demux_001_src19_channel),                          //          .channel
		.out_ready         (mux_pipeline_039_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_039_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_039_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_039_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_039_source0_data),                        //          .data
		.out_channel       (mux_pipeline_039_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_040 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src20_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src20_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src20_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src20_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src20_data),                                 //          .data
		.in_channel        (cmd_demux_src20_channel),                              //          .channel
		.out_ready         (mux_pipeline_040_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_040_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_040_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_040_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_040_source0_data),                        //          .data
		.out_channel       (mux_pipeline_040_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_041 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src20_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src20_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src20_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src20_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src20_data),                             //          .data
		.in_channel        (cmd_demux_001_src20_channel),                          //          .channel
		.out_ready         (mux_pipeline_041_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_041_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_041_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_041_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_041_source0_data),                        //          .data
		.out_channel       (mux_pipeline_041_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_042 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src21_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src21_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src21_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src21_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src21_data),                                 //          .data
		.in_channel        (cmd_demux_src21_channel),                              //          .channel
		.out_ready         (mux_pipeline_042_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_042_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_042_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_042_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_042_source0_data),                        //          .data
		.out_channel       (mux_pipeline_042_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_043 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src21_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src21_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src21_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src21_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src21_data),                             //          .data
		.in_channel        (cmd_demux_001_src21_channel),                          //          .channel
		.out_ready         (mux_pipeline_043_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_043_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_043_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_043_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_043_source0_data),                        //          .data
		.out_channel       (mux_pipeline_043_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_044 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src22_ready),                                //     sink0.ready
		.in_valid          (cmd_demux_src22_valid),                                //          .valid
		.in_startofpacket  (cmd_demux_src22_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src22_endofpacket),                          //          .endofpacket
		.in_data           (cmd_demux_src22_data),                                 //          .data
		.in_channel        (cmd_demux_src22_channel),                              //          .channel
		.out_ready         (mux_pipeline_044_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_044_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_044_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_044_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_044_source0_data),                        //          .data
		.out_channel       (mux_pipeline_044_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_045 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src22_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_001_src22_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_001_src22_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src22_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_001_src22_data),                             //          .data
		.in_channel        (cmd_demux_001_src22_channel),                          //          .channel
		.out_ready         (mux_pipeline_045_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_045_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_045_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_045_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_045_source0_data),                        //          .data
		.out_channel       (mux_pipeline_045_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_046 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                 //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                 //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                           //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                  //          .data
		.in_channel        (rsp_demux_src0_channel),                               //          .channel
		.out_ready         (mux_pipeline_046_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_046_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_046_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_046_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_046_source0_data),                        //          .data
		.out_channel       (mux_pipeline_046_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_047 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                              //          .data
		.in_channel        (rsp_demux_002_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_047_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_047_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_047_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_047_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_047_source0_data),                        //          .data
		.out_channel       (mux_pipeline_047_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_048 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                              //          .data
		.in_channel        (rsp_demux_004_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_048_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_048_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_048_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_048_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_048_source0_data),                        //          .data
		.out_channel       (mux_pipeline_048_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_049 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                              //          .data
		.in_channel        (rsp_demux_006_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_049_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_049_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_049_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_049_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_049_source0_data),                        //          .data
		.out_channel       (mux_pipeline_049_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_050 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                              //          .data
		.in_channel        (rsp_demux_008_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_050_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_050_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_050_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_050_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_050_source0_data),                        //          .data
		.out_channel       (mux_pipeline_050_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_051 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_010_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_010_src0_data),                              //          .data
		.in_channel        (rsp_demux_010_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_051_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_051_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_051_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_051_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_051_source0_data),                        //          .data
		.out_channel       (mux_pipeline_051_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_052 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_012_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_012_src0_data),                              //          .data
		.in_channel        (rsp_demux_012_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_052_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_052_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_052_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_052_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_052_source0_data),                        //          .data
		.out_channel       (mux_pipeline_052_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_053 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_014_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_014_src0_data),                              //          .data
		.in_channel        (rsp_demux_014_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_053_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_053_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_053_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_053_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_053_source0_data),                        //          .data
		.out_channel       (mux_pipeline_053_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_054 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_016_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_016_src0_data),                              //          .data
		.in_channel        (rsp_demux_016_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_054_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_054_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_054_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_054_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_054_source0_data),                        //          .data
		.out_channel       (mux_pipeline_054_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_055 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_017_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_017_src0_data),                              //          .data
		.in_channel        (rsp_demux_017_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_055_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_055_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_055_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_055_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_055_source0_data),                        //          .data
		.out_channel       (mux_pipeline_055_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_056 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_018_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_018_src0_data),                              //          .data
		.in_channel        (rsp_demux_018_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_056_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_056_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_056_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_056_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_056_source0_data),                        //          .data
		.out_channel       (mux_pipeline_056_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_057 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_019_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_019_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_019_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_019_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_019_src0_data),                              //          .data
		.in_channel        (rsp_demux_019_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_057_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_057_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_057_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_057_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_057_source0_data),                        //          .data
		.out_channel       (mux_pipeline_057_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_058 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_020_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_020_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_020_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_020_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_020_src0_data),                              //          .data
		.in_channel        (rsp_demux_020_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_058_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_058_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_058_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_058_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_058_source0_data),                        //          .data
		.out_channel       (mux_pipeline_058_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_059 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_021_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_021_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_021_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_021_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_021_src0_data),                              //          .data
		.in_channel        (rsp_demux_021_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_059_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_059_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_059_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_059_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_059_source0_data),                        //          .data
		.out_channel       (mux_pipeline_059_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_060 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_022_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_022_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_022_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_022_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_022_src0_data),                              //          .data
		.in_channel        (rsp_demux_022_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_060_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_060_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_060_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_060_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_060_source0_data),                        //          .data
		.out_channel       (mux_pipeline_060_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_061 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_023_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_023_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_023_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_023_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_023_src0_data),                              //          .data
		.in_channel        (rsp_demux_023_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_061_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_061_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_061_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_061_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_061_source0_data),                        //          .data
		.out_channel       (mux_pipeline_061_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_062 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_024_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_024_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_024_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_024_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_024_src0_data),                              //          .data
		.in_channel        (rsp_demux_024_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_062_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_062_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_062_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_062_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_062_source0_data),                        //          .data
		.out_channel       (mux_pipeline_062_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_063 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_025_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_025_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_025_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_025_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_025_src0_data),                              //          .data
		.in_channel        (rsp_demux_025_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_063_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_063_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_063_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_063_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_063_source0_data),                        //          .data
		.out_channel       (mux_pipeline_063_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_064 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_026_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_026_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_026_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_026_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_026_src0_data),                              //          .data
		.in_channel        (rsp_demux_026_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_064_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_064_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_064_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_064_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_064_source0_data),                        //          .data
		.out_channel       (mux_pipeline_064_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_065 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_027_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_027_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_027_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_027_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_027_src0_data),                              //          .data
		.in_channel        (rsp_demux_027_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_065_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_065_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_065_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_065_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_065_source0_data),                        //          .data
		.out_channel       (mux_pipeline_065_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_066 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_028_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_028_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_028_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_028_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_028_src0_data),                              //          .data
		.in_channel        (rsp_demux_028_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_066_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_066_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_066_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_066_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_066_source0_data),                        //          .data
		.out_channel       (mux_pipeline_066_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_067 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_029_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_029_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_029_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_029_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_029_src0_data),                              //          .data
		.in_channel        (rsp_demux_029_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_067_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_067_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_067_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_067_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_067_source0_data),                        //          .data
		.out_channel       (mux_pipeline_067_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_068 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_030_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_030_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_030_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_030_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_030_src0_data),                              //          .data
		.in_channel        (rsp_demux_030_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_068_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_068_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_068_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_068_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_068_source0_data),                        //          .data
		.out_channel       (mux_pipeline_068_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_069 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                              //          .data
		.in_channel        (rsp_demux_001_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_069_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_069_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_069_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_069_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_069_source0_data),                        //          .data
		.out_channel       (mux_pipeline_069_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_070 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                              //          .data
		.in_channel        (rsp_demux_003_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_070_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_070_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_070_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_070_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_070_source0_data),                        //          .data
		.out_channel       (mux_pipeline_070_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_071 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                              //          .data
		.in_channel        (rsp_demux_005_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_071_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_071_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_071_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_071_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_071_source0_data),                        //          .data
		.out_channel       (mux_pipeline_071_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_072 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                              //          .data
		.in_channel        (rsp_demux_007_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_072_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_072_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_072_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_072_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_072_source0_data),                        //          .data
		.out_channel       (mux_pipeline_072_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_073 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                              //          .data
		.in_channel        (rsp_demux_009_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_073_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_073_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_073_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_073_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_073_source0_data),                        //          .data
		.out_channel       (mux_pipeline_073_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_074 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_011_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_011_src0_data),                              //          .data
		.in_channel        (rsp_demux_011_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_074_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_074_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_074_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_074_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_074_source0_data),                        //          .data
		.out_channel       (mux_pipeline_074_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_075 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_013_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_013_src0_data),                              //          .data
		.in_channel        (rsp_demux_013_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_075_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_075_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_075_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_075_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_075_source0_data),                        //          .data
		.out_channel       (mux_pipeline_075_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_076 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_015_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_015_src0_data),                              //          .data
		.in_channel        (rsp_demux_015_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_076_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_076_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_076_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_076_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_076_source0_data),                        //          .data
		.out_channel       (mux_pipeline_076_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_077 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_016_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_016_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_016_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_016_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_016_src1_data),                              //          .data
		.in_channel        (rsp_demux_016_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_077_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_077_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_077_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_077_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_077_source0_data),                        //          .data
		.out_channel       (mux_pipeline_077_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_078 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_017_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_017_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_017_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_017_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_017_src1_data),                              //          .data
		.in_channel        (rsp_demux_017_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_078_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_078_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_078_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_078_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_078_source0_data),                        //          .data
		.out_channel       (mux_pipeline_078_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_079 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_018_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_018_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_018_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_018_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_018_src1_data),                              //          .data
		.in_channel        (rsp_demux_018_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_079_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_079_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_079_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_079_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_079_source0_data),                        //          .data
		.out_channel       (mux_pipeline_079_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_080 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_019_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_019_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_019_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_019_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_019_src1_data),                              //          .data
		.in_channel        (rsp_demux_019_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_080_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_080_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_080_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_080_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_080_source0_data),                        //          .data
		.out_channel       (mux_pipeline_080_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_081 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_020_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_020_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_020_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_020_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_020_src1_data),                              //          .data
		.in_channel        (rsp_demux_020_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_081_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_081_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_081_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_081_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_081_source0_data),                        //          .data
		.out_channel       (mux_pipeline_081_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_082 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_021_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_021_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_021_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_021_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_021_src1_data),                              //          .data
		.in_channel        (rsp_demux_021_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_082_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_082_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_082_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_082_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_082_source0_data),                        //          .data
		.out_channel       (mux_pipeline_082_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_083 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_022_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_022_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_022_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_022_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_022_src1_data),                              //          .data
		.in_channel        (rsp_demux_022_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_083_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_083_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_083_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_083_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_083_source0_data),                        //          .data
		.out_channel       (mux_pipeline_083_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_084 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_023_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_023_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_023_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_023_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_023_src1_data),                              //          .data
		.in_channel        (rsp_demux_023_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_084_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_084_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_084_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_084_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_084_source0_data),                        //          .data
		.out_channel       (mux_pipeline_084_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_085 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_024_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_024_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_024_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_024_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_024_src1_data),                              //          .data
		.in_channel        (rsp_demux_024_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_085_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_085_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_085_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_085_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_085_source0_data),                        //          .data
		.out_channel       (mux_pipeline_085_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_086 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_025_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_025_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_025_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_025_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_025_src1_data),                              //          .data
		.in_channel        (rsp_demux_025_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_086_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_086_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_086_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_086_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_086_source0_data),                        //          .data
		.out_channel       (mux_pipeline_086_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_087 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_026_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_026_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_026_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_026_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_026_src1_data),                              //          .data
		.in_channel        (rsp_demux_026_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_087_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_087_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_087_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_087_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_087_source0_data),                        //          .data
		.out_channel       (mux_pipeline_087_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_088 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_027_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_027_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_027_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_027_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_027_src1_data),                              //          .data
		.in_channel        (rsp_demux_027_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_088_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_088_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_088_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_088_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_088_source0_data),                        //          .data
		.out_channel       (mux_pipeline_088_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_089 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_028_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_028_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_028_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_028_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_028_src1_data),                              //          .data
		.in_channel        (rsp_demux_028_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_089_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_089_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_089_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_089_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_089_source0_data),                        //          .data
		.out_channel       (mux_pipeline_089_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_090 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_029_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_029_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_029_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_029_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_029_src1_data),                              //          .data
		.in_channel        (rsp_demux_029_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_090_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_090_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_090_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_090_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_090_source0_data),                        //          .data
		.out_channel       (mux_pipeline_090_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (116),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (31),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_091 (
		.clk               (sys_clk_clk_clk),                                      //       cr0.clk
		.reset             (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_030_src1_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_030_src1_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_030_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_030_src1_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_030_src1_data),                              //          .data
		.in_channel        (rsp_demux_030_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_091_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_091_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_091_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_091_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_091_source0_data),                        //          .data
		.out_channel       (mux_pipeline_091_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0)                                                  // (terminated)
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_clk_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                            //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_0_rcfg_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_1_rcfg_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_2_rcfg_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_3_rcfg_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_0_rcfg_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_1_rcfg_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_2_rcfg_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (avl_adxcfg_3_rcfg_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_gpio_bd_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (sys_gpio_bd_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (sys_gpio_bd_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_gpio_in_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (sys_gpio_in_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (sys_gpio_in_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_gpio_out_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (sys_gpio_out_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (sys_gpio_out_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                     //         .error
	);

	system_bd_altera_avalon_st_adapter_181_yil4cga #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (sys_clk_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (sys_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sys_spi_spi_control_port_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (sys_spi_spi_control_port_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (sys_spi_spi_control_port_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                     //         .error
	);

endmodule
