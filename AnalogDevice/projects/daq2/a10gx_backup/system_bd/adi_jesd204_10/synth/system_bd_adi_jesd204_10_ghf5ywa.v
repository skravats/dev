// system_bd_adi_jesd204_10_ghf5ywa.v

// This file was auto-generated from adi_jesd204_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_bd_adi_jesd204_10_ghf5ywa (
		input  wire         sys_clk_clk,                   //           sys_clk.clk
		input  wire         sys_resetn_reset_n,            //        sys_resetn.reset_n
		input  wire         ref_clk_clk,                   //           ref_clk.clk
		output wire         link_clk_clk,                  //          link_clk.clk
		output wire         link_reset_reset,              //        link_reset.reset
		input  wire         link_management_awvalid,       //   link_management.awvalid
		input  wire [11:0]  link_management_awaddr,        //                  .awaddr
		input  wire [2:0]   link_management_awprot,        //                  .awprot
		output wire         link_management_awready,       //                  .awready
		input  wire         link_management_wvalid,        //                  .wvalid
		input  wire [31:0]  link_management_wdata,         //                  .wdata
		input  wire [3:0]   link_management_wstrb,         //                  .wstrb
		output wire         link_management_wready,        //                  .wready
		output wire         link_management_bvalid,        //                  .bvalid
		output wire [1:0]   link_management_bresp,         //                  .bresp
		input  wire         link_management_bready,        //                  .bready
		input  wire         link_management_arvalid,       //                  .arvalid
		input  wire [11:0]  link_management_araddr,        //                  .araddr
		input  wire [2:0]   link_management_arprot,        //                  .arprot
		output wire         link_management_arready,       //                  .arready
		output wire         link_management_rvalid,        //                  .rvalid
		output wire [1:0]   link_management_rresp,         //                  .rresp
		output wire [31:0]  link_management_rdata,         //                  .rdata
		input  wire         link_management_rready,        //                  .rready
		input  wire         link_pll_reconfig_write,       // link_pll_reconfig.write
		input  wire         link_pll_reconfig_read,        //                  .read
		input  wire [9:0]   link_pll_reconfig_address,     //                  .address
		input  wire [31:0]  link_pll_reconfig_writedata,   //                  .writedata
		output wire [31:0]  link_pll_reconfig_readdata,    //                  .readdata
		output wire         link_pll_reconfig_waitrequest, //                  .waitrequest
		input  wire         lane_pll_reconfig_write,       // lane_pll_reconfig.write
		input  wire         lane_pll_reconfig_read,        //                  .read
		input  wire [9:0]   lane_pll_reconfig_address,     //                  .address
		input  wire [31:0]  lane_pll_reconfig_writedata,   //                  .writedata
		output wire [31:0]  lane_pll_reconfig_readdata,    //                  .readdata
		output wire         lane_pll_reconfig_waitrequest, //                  .waitrequest
		input  wire [9:0]   phy_reconfig_0_address,        //    phy_reconfig_0.address
		input  wire         phy_reconfig_0_read,           //                  .read
		output wire [31:0]  phy_reconfig_0_readdata,       //                  .readdata
		output wire         phy_reconfig_0_waitrequest,    //                  .waitrequest
		input  wire         phy_reconfig_0_write,          //                  .write
		input  wire [31:0]  phy_reconfig_0_writedata,      //                  .writedata
		input  wire [9:0]   phy_reconfig_1_address,        //    phy_reconfig_1.address
		input  wire         phy_reconfig_1_read,           //                  .read
		output wire [31:0]  phy_reconfig_1_readdata,       //                  .readdata
		output wire         phy_reconfig_1_waitrequest,    //                  .waitrequest
		input  wire         phy_reconfig_1_write,          //                  .write
		input  wire [31:0]  phy_reconfig_1_writedata,      //                  .writedata
		input  wire [9:0]   phy_reconfig_2_address,        //    phy_reconfig_2.address
		input  wire         phy_reconfig_2_read,           //                  .read
		output wire [31:0]  phy_reconfig_2_readdata,       //                  .readdata
		output wire         phy_reconfig_2_waitrequest,    //                  .waitrequest
		input  wire         phy_reconfig_2_write,          //                  .write
		input  wire [31:0]  phy_reconfig_2_writedata,      //                  .writedata
		input  wire [9:0]   phy_reconfig_3_address,        //    phy_reconfig_3.address
		input  wire         phy_reconfig_3_read,           //                  .read
		output wire [31:0]  phy_reconfig_3_readdata,       //                  .readdata
		output wire         phy_reconfig_3_waitrequest,    //                  .waitrequest
		input  wire         phy_reconfig_3_write,          //                  .write
		input  wire [31:0]  phy_reconfig_3_writedata,      //                  .writedata
		output wire         interrupt_irq,                 //         interrupt.irq
		input  wire         link_reconfig_awvalid,         //     link_reconfig.awvalid
		input  wire [13:0]  link_reconfig_awaddr,          //                  .awaddr
		input  wire [2:0]   link_reconfig_awprot,          //                  .awprot
		output wire         link_reconfig_awready,         //                  .awready
		input  wire         link_reconfig_wvalid,          //                  .wvalid
		input  wire [31:0]  link_reconfig_wdata,           //                  .wdata
		input  wire [3:0]   link_reconfig_wstrb,           //                  .wstrb
		output wire         link_reconfig_wready,          //                  .wready
		output wire         link_reconfig_bvalid,          //                  .bvalid
		output wire [1:0]   link_reconfig_bresp,           //                  .bresp
		input  wire         link_reconfig_bready,          //                  .bready
		input  wire         link_reconfig_arvalid,         //                  .arvalid
		input  wire [13:0]  link_reconfig_araddr,          //                  .araddr
		input  wire [2:0]   link_reconfig_arprot,          //                  .arprot
		output wire         link_reconfig_arready,         //                  .arready
		output wire         link_reconfig_rvalid,          //                  .rvalid
		output wire [1:0]   link_reconfig_rresp,           //                  .rresp
		output wire [31:0]  link_reconfig_rdata,           //                  .rdata
		input  wire         link_reconfig_rready,          //                  .rready
		input  wire [127:0] link_data_data,                //         link_data.data
		output wire         link_data_ready,               //                  .ready
		input  wire         link_data_valid,               //                  .valid
		input  wire         sysref_export,                 //            sysref.export
		input  wire         sync_export,                   //              sync.export
		output wire [3:0]   serial_data_tx_serial_data     //       serial_data.tx_serial_data
	);

	wire          link_pll_pll_locked_pll_locked;                     // link_pll:pll_locked -> axi_xcvr:up_pll_locked
	wire    [0:0] link_pll_reset_control_pll_powerdown_pll_powerdown; // link_pll_reset_control:pll_powerdown -> link_pll:pll_powerdown
	wire    [3:0] phy_reset_control_tx_ready_tx_ready;                // phy_reset_control:tx_ready -> axi_xcvr:up_ready
	wire    [0:0] phy_reset_control_pll_powerdown_pll_powerdown;      // phy_reset_control:pll_powerdown -> lane_pll:pll_powerdown
	wire          lane_pll_pll_locked_pll_locked;                     // lane_pll:pll_locked -> phy_reset_control:pll_locked
	wire          lane_pll_pll_cal_busy_pll_cal_busy;                 // lane_pll:pll_cal_busy -> phy_reset_control:pll_cal_busy
	wire          lane_pll_tx_serial_clk_clk;                         // lane_pll:tx_serial_clk -> phy:serial_clk_clk
	wire          axi_jesd204_tx_core_reset_reset;                    // axi_jesd204_tx:core_reset -> jesd204_tx:reset
	wire          axi_jesd204_tx_config_skip_ilas;                    // axi_jesd204_tx:core_cfg_skip_ilas -> jesd204_tx:cfg_skip_ilas
	wire    [0:0] axi_jesd204_tx_config_links_disable;                // axi_jesd204_tx:core_cfg_links_disable -> jesd204_tx:cfg_links_disable
	wire          axi_jesd204_tx_config_disable_scrambler;            // axi_jesd204_tx:core_cfg_disable_scrambler -> jesd204_tx:cfg_disable_scrambler
	wire          axi_jesd204_tx_config_continuous_cgs;               // axi_jesd204_tx:core_cfg_continuous_cgs -> jesd204_tx:cfg_continuous_cgs
	wire          axi_jesd204_tx_config_sysref_oneshot;               // axi_jesd204_tx:core_cfg_sysref_oneshot -> jesd204_tx:cfg_sysref_oneshot
	wire          axi_jesd204_tx_config_sysref_disable;               // axi_jesd204_tx:core_cfg_sysref_disable -> jesd204_tx:cfg_sysref_disable
	wire    [3:0] axi_jesd204_tx_config_lanes_disable;                // axi_jesd204_tx:core_cfg_lanes_disable -> jesd204_tx:cfg_lanes_disable
	wire          axi_jesd204_tx_config_continuous_ilas;              // axi_jesd204_tx:core_cfg_continuous_ilas -> jesd204_tx:cfg_continuous_ilas
	wire          axi_jesd204_tx_config_disable_char_replacement;     // axi_jesd204_tx:core_cfg_disable_char_replacement -> jesd204_tx:cfg_disable_char_replacement
	wire    [7:0] axi_jesd204_tx_config_octets_per_frame;             // axi_jesd204_tx:core_cfg_octets_per_frame -> jesd204_tx:cfg_octets_per_frame
	wire    [7:0] axi_jesd204_tx_config_lmfc_offset;                  // axi_jesd204_tx:core_cfg_lmfc_offset -> jesd204_tx:cfg_lmfc_offset
	wire    [7:0] axi_jesd204_tx_config_beats_per_multiframe;         // axi_jesd204_tx:core_cfg_beats_per_multiframe -> jesd204_tx:cfg_beats_per_multiframe
	wire    [7:0] axi_jesd204_tx_config_mframes_per_ilas;             // axi_jesd204_tx:core_cfg_mframes_per_ilas -> jesd204_tx:cfg_mframes_per_ilas
	wire          axi_jesd204_tx_control_manual_sync_request;         // axi_jesd204_tx:core_ctrl_manual_sync_request -> jesd204_tx:ctrl_manual_sync_request
	wire          jesd204_tx_ilas_config_rd;                          // jesd204_tx:ilas_config_rd -> axi_jesd204_tx:core_ilas_config_rd
	wire  [127:0] axi_jesd204_tx_ilas_config_data;                    // axi_jesd204_tx:core_ilas_config_data -> jesd204_tx:ilas_config_data
	wire    [1:0] jesd204_tx_ilas_config_addr;                        // jesd204_tx:ilas_config_addr -> axi_jesd204_tx:core_ilas_config_addr
	wire          jesd204_tx_event_sysref_edge;                       // jesd204_tx:event_sysref_edge -> axi_jesd204_tx:core_event_sysref_edge
	wire          jesd204_tx_event_sysref_alignment_error;            // jesd204_tx:event_sysref_alignment_error -> axi_jesd204_tx:core_event_sysref_alignment_error
	wire    [1:0] jesd204_tx_status_state;                            // jesd204_tx:status_state -> axi_jesd204_tx:core_status_state
	wire          jesd204_tx_status_sync;                             // jesd204_tx:status_sync -> axi_jesd204_tx:core_status_sync
	wire    [3:0] phy_reset_control_tx_analogreset_tx_analogreset;    // phy_reset_control:tx_analogreset -> phy:analogreset_tx_analogreset
	wire    [3:0] phy_reset_control_tx_digitalreset_tx_digitalreset;  // phy_reset_control:tx_digitalreset -> phy:digitalreset_tx_digitalreset
	wire    [3:0] phy_cal_busy_tx_cal_busy;                           // phy:cal_busy_tx_cal_busy -> phy_reset_control:tx_cal_busy
	wire    [3:0] jesd204_tx_tx_phy0_charisk;                         // jesd204_tx:tx_phy0_charisk -> phy:phy_0_charisk
	wire   [31:0] jesd204_tx_tx_phy0_char;                            // jesd204_tx:tx_phy0_data -> phy:phy_0_char
	wire    [3:0] jesd204_tx_tx_phy3_charisk;                         // jesd204_tx:tx_phy3_charisk -> phy:phy_1_charisk
	wire   [31:0] jesd204_tx_tx_phy3_char;                            // jesd204_tx:tx_phy3_data -> phy:phy_1_char
	wire    [3:0] jesd204_tx_tx_phy1_charisk;                         // jesd204_tx:tx_phy1_charisk -> phy:phy_2_charisk
	wire   [31:0] jesd204_tx_tx_phy1_char;                            // jesd204_tx:tx_phy1_data -> phy:phy_2_char
	wire    [3:0] jesd204_tx_tx_phy2_charisk;                         // jesd204_tx:tx_phy2_charisk -> phy:phy_3_charisk
	wire   [31:0] jesd204_tx_tx_phy2_char;                            // jesd204_tx:tx_phy2_data -> phy:phy_3_char
	wire          rst_controller_reset_out_reset;                     // rst_controller:reset_out -> link_pll_reset_control:reset
	wire          rst_controller_001_reset_out_reset;                 // rst_controller_001:reset_out -> phy_reset_control:reset
	wire          rst_controller_002_reset_out_reset;                 // rst_controller_002:reset_out -> axi_jesd204_tx:core_reset_ext
	wire   [15:0] jesd204_tx_phy_charisk;                             // port fragment
	wire  [127:0] jesd204_tx_phy_data;                                // port fragment

	altera_xcvr_fpll_a10 #(
		.enable_pll_reconfig                                                          (1),
		.rcfg_jtag_enable                                                             (0),
		.rcfg_separate_avmm_busy                                                      (1),
		.dbg_embedded_debug_enable                                                    (1),
		.dbg_capability_reg_enable                                                    (1),
		.dbg_user_identifier                                                          (0),
		.dbg_stat_soft_logic_enable                                                   (1),
		.dbg_ctrl_soft_logic_enable                                                   (1),
		.cmu_fpll_silicon_rev                                                         ("20nm5"),
		.cmu_fpll_is_otn                                                              ("false"),
		.cmu_fpll_is_sdi                                                              ("false"),
		.cmu_fpll_f_max_vco                                                           ("14150000000"),
		.cmu_fpll_f_min_vco                                                           ("6000000000"),
		.cmu_fpll_feedback                                                            ("normal"),
		.cmu_fpll_fpll_cas_out_enable                                                 ("fpll_cas_out_disable"),
		.cmu_fpll_fpll_hclk_out_enable                                                ("fpll_hclk_out_disable"),
		.cmu_fpll_fpll_iqtxrxclk_out_enable                                           ("fpll_iqtxrxclk_out_disable"),
		.cmu_fpll_l_counter                                                           (1),
		.cmu_fpll_m_counter                                                           (12),
		.cmu_fpll_n_counter                                                           (1),
		.cmu_fpll_out_freq_hz                                                         ("0 hz"),
		.cmu_fpll_out_freq                                                            ("000000000000000000000000000000000000"),
		.cmu_fpll_pll_vco_freq_band_0                                                 ("pll_freq_band0"),
		.cmu_fpll_pll_vco_freq_band_1                                                 ("pll_freq_band0_1"),
		.cmu_fpll_primary_use                                                         ("core"),
		.cmu_fpll_prot_mode                                                           ("basic_tx"),
		.cmu_fpll_reference_clock_frequency_scratch                                   ("0 hz"),
		.cmu_fpll_side                                                                ("side_unknown"),
		.cmu_fpll_top_or_bottom                                                       ("tb_unknown"),
		.cmu_fpll_vco_freq_hz                                                         ("7999999991"),
		.cmu_fpll_vco_freq                                                            ("000111011100110101100100111111110111"),
		.cmu_fpll_pll_bw_mode                                                         ("hi_bw"),
		.cmu_fpll_datarate                                                            ("0 Mbps"),
		.cmu_fpll_pll_cmu_rstn_value                                                  ("true"),
		.cmu_fpll_pll_lpf_rstn_value                                                  ("lpf_normal"),
		.cmu_fpll_pll_ppm_clk0_src                                                    ("ppm_clk0_vss"),
		.cmu_fpll_pll_ppm_clk1_src                                                    ("ppm_clk1_vss"),
		.cmu_fpll_pll_rstn_override                                                   ("false"),
		.cmu_fpll_pll_op_mode                                                         ("false"),
		.cmu_fpll_pll_optimal                                                         ("true"),
		.cmu_fpll_is_pa_core                                                          ("false"),
		.cmu_fpll_pll_powerdown_mode                                                  ("false"),
		.cmu_fpll_pll_sup_mode                                                        ("user_mode"),
		.cmu_fpll_pll_c0_pllcout_enable                                               ("true"),
		.cmu_fpll_pll_c_counter_0                                                     (8),
		.cmu_fpll_pll_c_counter_0_min_tco_enable                                      ("true"),
		.cmu_fpll_pll_c_counter_0_in_src                                              ("m_cnt_in_src_ph_mux_clk"),
		.cmu_fpll_pll_c_counter_0_ph_mux_prst                                         (0),
		.cmu_fpll_pll_c_counter_0_prst                                                (1),
		.cmu_fpll_pll_c_counter_0_coarse_dly                                          ("0 ps"),
		.cmu_fpll_pll_c_counter_0_fine_dly                                            ("0 ps"),
		.cmu_fpll_pll_c1_pllcout_enable                                               ("false"),
		.cmu_fpll_pll_c_counter_1                                                     (1),
		.cmu_fpll_pll_c_counter_1_min_tco_enable                                      ("true"),
		.cmu_fpll_pll_c_counter_1_in_src                                              ("m_cnt_in_src_ph_mux_clk"),
		.cmu_fpll_pll_c_counter_1_ph_mux_prst                                         (0),
		.cmu_fpll_pll_c_counter_1_prst                                                (1),
		.cmu_fpll_pll_c_counter_1_coarse_dly                                          ("0 ps"),
		.cmu_fpll_pll_c_counter_1_fine_dly                                            ("0 ps"),
		.cmu_fpll_pll_c2_pllcout_enable                                               ("false"),
		.cmu_fpll_pll_c_counter_2                                                     (1),
		.cmu_fpll_pll_c_counter_2_min_tco_enable                                      ("true"),
		.cmu_fpll_pll_c_counter_2_in_src                                              ("m_cnt_in_src_ph_mux_clk"),
		.cmu_fpll_pll_c_counter_2_ph_mux_prst                                         (0),
		.cmu_fpll_pll_c_counter_2_prst                                                (1),
		.cmu_fpll_pll_c_counter_2_coarse_dly                                          ("0 ps"),
		.cmu_fpll_pll_c_counter_2_fine_dly                                            ("0 ps"),
		.cmu_fpll_pll_c3_pllcout_enable                                               ("false"),
		.cmu_fpll_pll_c_counter_3                                                     (1),
		.cmu_fpll_pll_c_counter_3_min_tco_enable                                      ("true"),
		.cmu_fpll_pll_c_counter_3_in_src                                              ("m_cnt_in_src_ph_mux_clk"),
		.cmu_fpll_pll_c_counter_3_ph_mux_prst                                         (0),
		.cmu_fpll_pll_c_counter_3_prst                                                (1),
		.cmu_fpll_pll_c_counter_3_coarse_dly                                          ("0 ps"),
		.cmu_fpll_pll_c_counter_3_fine_dly                                            ("0 ps"),
		.cmu_fpll_pll_atb                                                             ("atb_selectdisable"),
		.cmu_fpll_pll_fbclk_mux_1                                                     ("pll_fbclk_mux_1_glb"),
		.cmu_fpll_pll_fbclk_mux_2                                                     ("pll_fbclk_mux_2_m_cnt"),
		.cmu_fpll_pll_iqclk_mux_sel                                                   ("power_down"),
		.cmu_fpll_pll_cp_compensation                                                 ("true"),
		.cmu_fpll_pll_cp_current_setting                                              ("cp_current_setting26"),
		.cmu_fpll_pll_cp_testmode                                                     ("cp_normal"),
		.cmu_fpll_pll_cp_lf_3rd_pole_freq                                             ("lf_3rd_pole_setting0"),
		.cmu_fpll_pll_lf_cbig                                                         ("lf_cbig_setting4"),
		.cmu_fpll_pll_cp_lf_order                                                     ("lf_2nd_order"),
		.cmu_fpll_pll_lf_resistance                                                   ("lf_res_setting2"),
		.cmu_fpll_pll_lf_ripplecap                                                    ("lf_no_ripple"),
		.cmu_fpll_pll_vco_ph0_en                                                      ("true"),
		.cmu_fpll_pll_vco_ph0_value                                                   ("pll_vco_ph0_vss"),
		.cmu_fpll_pll_vco_ph1_en                                                      ("true"),
		.cmu_fpll_pll_vco_ph1_value                                                   ("pll_vco_ph1_vss"),
		.cmu_fpll_pll_vco_ph2_en                                                      ("true"),
		.cmu_fpll_pll_vco_ph2_value                                                   ("pll_vco_ph2_vss"),
		.cmu_fpll_pll_vco_ph3_en                                                      ("true"),
		.cmu_fpll_pll_vco_ph3_value                                                   ("pll_vco_ph3_vss"),
		.cmu_fpll_pll_dsm_mode                                                        ("dsm_mode_integer"),
		.cmu_fpll_pll_dsm_out_sel                                                     ("pll_dsm_disable"),
		.cmu_fpll_pll_dsm_ecn_bypass                                                  ("false"),
		.cmu_fpll_pll_dsm_ecn_test_en                                                 ("false"),
		.cmu_fpll_pll_dsm_fractional_division                                         ("1"),
		.cmu_fpll_pll_dsm_fractional_value_ready                                      ("pll_k_ready"),
		.cmu_fpll_pll_l_counter_bypass                                                ("false"),
		.cmu_fpll_pll_l_counter                                                       (1),
		.cmu_fpll_pll_l_counter_enable                                                ("false"),
		.cmu_fpll_pll_lock_fltr_cfg                                                   (25),
		.cmu_fpll_pll_lock_fltr_test                                                  ("pll_lock_fltr_nrm"),
		.cmu_fpll_pll_unlock_fltr_cfg                                                 (2),
		.cmu_fpll_pll_m_counter                                                       (12),
		.cmu_fpll_pll_m_counter_min_tco_enable                                        ("false"),
		.cmu_fpll_pll_m_counter_in_src                                                ("m_cnt_in_src_ph_mux_clk"),
		.cmu_fpll_pll_n_counter                                                       (1),
		.cmu_fpll_pll_tclk_mux_en                                                     ("false"),
		.cmu_fpll_pll_tclk_sel                                                        ("pll_tclk_m_src"),
		.cmu_fpll_pll_dprio_base_addr                                                 (256),
		.cmu_fpll_pll_dprio_broadcast_en                                              ("false"),
		.cmu_fpll_pll_dprio_cvp_inter_sel                                             ("false"),
		.cmu_fpll_pll_dprio_force_inter_sel                                           ("false"),
		.cmu_fpll_pll_dprio_power_iso_en                                              ("false"),
		.cmu_fpll_pll_dprio_status_select                                             ("dprio_normal_status"),
		.cmu_fpll_pll_extra_csr                                                       (0),
		.cmu_fpll_pll_nreset_invert                                                   ("false"),
		.cmu_fpll_pll_ctrl_override_setting                                           ("true"),
		.cmu_fpll_pll_enable                                                          ("true"),
		.cmu_fpll_pll_test_enable                                                     ("false"),
		.cmu_fpll_pll_ctrl_plniotri_override                                          ("false"),
		.cmu_fpll_pll_vccr_pd_en                                                      ("true"),
		.cmu_fpll_bw_sel                                                              ("high"),
		.cmu_fpll_compensation_mode                                                   ("direct"),
		.cmu_fpll_duty_cycle_0                                                        (50),
		.cmu_fpll_duty_cycle_1                                                        (50),
		.cmu_fpll_duty_cycle_2                                                        (50),
		.cmu_fpll_duty_cycle_3                                                        (50),
		.cmu_fpll_hssi_output_clock_frequency                                         ("0 ps"),
		.cmu_fpll_is_cascaded_pll                                                     ("false"),
		.cmu_fpll_output_clock_frequency_0                                            ("250.0 MHz"),
		.cmu_fpll_output_clock_frequency_1                                            ("0 ps"),
		.cmu_fpll_output_clock_frequency_2                                            ("0 ps"),
		.cmu_fpll_output_clock_frequency_3                                            ("0 ps"),
		.cmu_fpll_phase_shift_0                                                       ("0.0 ps"),
		.cmu_fpll_phase_shift_1                                                       ("0 ps"),
		.cmu_fpll_phase_shift_2                                                       ("0 ps"),
		.cmu_fpll_phase_shift_3                                                       ("0 ps"),
		.cmu_fpll_reference_clock_frequency                                           ("333.333333 MHz"),
		.cmu_fpll_vco_frequency                                                       ("7999.999991 MHz"),
		.cmu_fpll_cgb_div                                                             (1),
		.cmu_fpll_pma_width                                                           (64),
		.cmu_fpll_f_out_c3_hz                                                         ("0 hz"),
		.cmu_fpll_f_out_c1_hz                                                         ("0 hz"),
		.cmu_fpll_f_out_c0_hz                                                         ("0 hz"),
		.cmu_fpll_f_out_c2_hz                                                         ("0 hz"),
		.cmu_fpll_f_out_c3                                                            ("000000000000000000000000000000000000"),
		.cmu_fpll_f_out_c1                                                            ("000000000000000000000000000000000000"),
		.cmu_fpll_f_out_c0                                                            ("000000001110111001101011001010000000"),
		.cmu_fpll_f_out_c2                                                            ("000000000000000000000000000000000000"),
		.cmu_fpll_initial_settings                                                    ("true"),
		.cmu_fpll_m_counter_c2                                                        (1),
		.cmu_fpll_m_counter_c3                                                        (1),
		.cmu_fpll_m_counter_c0                                                        (1),
		.cmu_fpll_m_counter_c1                                                        (1),
		.cmu_fpll_pfd_freq                                                            ("000000010011110111100100001101010101"),
		.cmu_fpll_pll_vco_freq_band_0_fix_high                                        ("pll_vco_freq_band_0_fix_high_0"),
		.cmu_fpll_pll_vco_freq_band_1_fix_high                                        ("pll_vco_freq_band_1_fix_high_0"),
		.cmu_fpll_xpm_cmu_fpll_core_cal_vco_count_length                              ("sel_8b_count"),
		.cmu_fpll_xpm_cmu_fpll_core_pfd_pulse_width                                   ("pulse_width_setting0"),
		.cmu_fpll_pll_vco_freq_band_1_dyn_high_bits                                   (0),
		.cmu_fpll_set_fpll_input_freq_range                                           (0),
		.cmu_fpll_pll_vco_freq_band_0_fix                                             (1),
		.cmu_fpll_pll_vco_freq_band_0_dyn_high_bits                                   (0),
		.cmu_fpll_pll_vco_freq_band_1_fix                                             (1),
		.cmu_fpll_xpm_cmu_fpll_core_xpm_cpvco_fpll_xpm_chgpmplf_fpll_cp_current_boost ("normal_setting"),
		.cmu_fpll_xpm_cmu_fpll_core_fpll_refclk_source                                ("normal_refclk"),
		.cmu_fpll_pll_vco_freq_band_0_dyn_low_bits                                    (0),
		.cmu_fpll_xpm_cmu_fpll_core_pfd_delay_compensation                            ("normal_delay"),
		.cmu_fpll_pll_vco_freq_band_1_dyn_low_bits                                    (0),
		.cmu_fpll_refclk_select_mux_pll_clk_sel_override                              ("normal"),
		.cmu_fpll_refclk_select_mux_pll_clk_sel_override_value                        ("select_clk0"),
		.cmu_fpll_refclk_select_mux_pll_auto_clk_sw_en                                ("false"),
		.cmu_fpll_refclk_select_mux_pll_clk_loss_edge                                 ("pll_clk_loss_both_edges"),
		.cmu_fpll_refclk_select_mux_pll_clk_loss_sw_en                                ("false"),
		.cmu_fpll_refclk_select_mux_pll_clk_sw_dly                                    (0),
		.cmu_fpll_refclk_select_mux_pll_manu_clk_sw_en                                ("false"),
		.cmu_fpll_refclk_select_mux_pll_sw_refclk_src                                 ("pll_sw_refclk_src_clk_0"),
		.cmu_fpll_refclk_select_mux_silicon_rev                                       ("20nm5es"),
		.cmu_fpll_refclk_select_mux_refclk_select0                                    ("lvpecl"),
		.cmu_fpll_refclk_select_mux_refclk_select1                                    ("ref_iqclk0"),
		.cmu_fpll_refclk_select_mux_mux0_inclk0_logical_to_physical_mapping           ("lvpecl"),
		.cmu_fpll_refclk_select_mux_mux0_inclk1_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux0_inclk2_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux0_inclk3_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux0_inclk4_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux1_inclk0_logical_to_physical_mapping           ("lvpecl"),
		.cmu_fpll_refclk_select_mux_mux1_inclk1_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux1_inclk2_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux1_inclk3_logical_to_physical_mapping           ("power_down"),
		.cmu_fpll_refclk_select_mux_mux1_inclk4_logical_to_physical_mapping           ("power_down"),
		.enable_analog_resets                                                         (0),
		.hip_cal_en                                                                   ("disable"),
		.cmu_fpll_reconfig_en                                                         ("1"),
		.cmu_fpll_dps_en                                                              ("false"),
		.cmu_fpll_calibration_en                                                      ("enable"),
		.cmu_fpll_refclk_freq                                                         ("000000010011110111100100001101010101"),
		.enable_mcgb                                                                  (0),
		.enable_mcgb_debug_ports_parameters                                           (0),
		.hssi_pma_cgb_master_prot_mode                                                ("basic_tx"),
		.hssi_pma_cgb_master_silicon_rev                                              ("20nm5"),
		.hssi_pma_cgb_master_x1_div_m_sel                                             ("divbypass"),
		.hssi_pma_cgb_master_cgb_enable_iqtxrxclk                                     ("disable_iqtxrxclk"),
		.hssi_pma_cgb_master_ser_mode                                                 ("sixty_four_bit"),
		.hssi_pma_cgb_master_datarate                                                 ("0 bps"),
		.hssi_pma_cgb_master_cgb_power_down                                           ("normal_cgb"),
		.hssi_pma_cgb_master_observe_cgb_clocks                                       ("observe_nothing"),
		.hssi_pma_cgb_master_op_mode                                                  ("enabled"),
		.hssi_pma_cgb_master_tx_ucontrol_reset_pcie                                   ("pcscorehip_controls_mcgb"),
		.hssi_pma_cgb_master_vccdreg_output                                           ("vccdreg_nominal"),
		.hssi_pma_cgb_master_input_select                                             ("fpll_top"),
		.hssi_pma_cgb_master_input_select_gen3                                        ("unused")
	) link_pll (
		.pll_refclk0              (ref_clk_clk),                                        //     pll_refclk0.clk
		.pll_powerdown            (link_pll_reset_control_pll_powerdown_pll_powerdown), //   pll_powerdown.pll_powerdown
		.pll_locked               (link_pll_pll_locked_pll_locked),                     //      pll_locked.pll_locked
		.outclk0                  (link_clk_clk),                                       //         outclk0.clk
		.reconfig_clk0            (sys_clk_clk),                                        //   reconfig_clk0.clk
		.reconfig_reset0          (~sys_resetn_reset_n),                                // reconfig_reset0.reset
		.reconfig_write0          (link_pll_reconfig_write),                            //  reconfig_avmm0.write
		.reconfig_read0           (link_pll_reconfig_read),                             //                .read
		.reconfig_address0        (link_pll_reconfig_address),                          //                .address
		.reconfig_writedata0      (link_pll_reconfig_writedata),                        //                .writedata
		.reconfig_readdata0       (link_pll_reconfig_readdata),                         //                .readdata
		.reconfig_waitrequest0    (link_pll_reconfig_waitrequest),                      //                .waitrequest
		.pll_cal_busy             (),                                                   //    pll_cal_busy.pll_cal_busy
		.pll_refclk1              (1'b0),                                               //     (terminated)
		.pll_refclk2              (1'b0),                                               //     (terminated)
		.pll_refclk3              (1'b0),                                               //     (terminated)
		.pll_refclk4              (1'b0),                                               //     (terminated)
		.tx_serial_clk            (),                                                   //     (terminated)
		.outclk1                  (),                                                   //     (terminated)
		.outclk2                  (),                                                   //     (terminated)
		.outclk3                  (),                                                   //     (terminated)
		.pll_pcie_clk             (),                                                   //     (terminated)
		.fpll_to_fpll_cascade_clk (),                                                   //     (terminated)
		.hssi_pll_cascade_clk     (),                                                   //     (terminated)
		.atx_to_fpll_cascade_clk  (1'b0),                                               //     (terminated)
		.avmm_busy0               (),                                                   //     (terminated)
		.hip_cal_done             (),                                                   //     (terminated)
		.phase_reset              (1'b0),                                               //     (terminated)
		.phase_en                 (1'b0),                                               //     (terminated)
		.updn                     (1'b0),                                               //     (terminated)
		.cntsel                   (4'b0000),                                            //     (terminated)
		.phase_done               (),                                                   //     (terminated)
		.extswitch                (1'b0),                                               //     (terminated)
		.activeclk                (),                                                   //     (terminated)
		.clkbad                   (),                                                   //     (terminated)
		.clklow                   (),                                                   //     (terminated)
		.fref                     (),                                                   //     (terminated)
		.mcgb_rst                 (1'b0),                                               //     (terminated)
		.mcgb_aux_clk0            (1'b0),                                               //     (terminated)
		.mcgb_aux_clk1            (1'b0),                                               //     (terminated)
		.mcgb_aux_clk2            (1'b0),                                               //     (terminated)
		.tx_bonding_clocks        (),                                                   //     (terminated)
		.mcgb_serial_clk          (),                                                   //     (terminated)
		.pcie_sw                  (2'b00),                                              //     (terminated)
		.pcie_sw_done             (),                                                   //     (terminated)
		.reconfig_clk1            (1'b0),                                               //     (terminated)
		.reconfig_reset1          (1'b0),                                               //     (terminated)
		.reconfig_write1          (1'b0),                                               //     (terminated)
		.reconfig_read1           (1'b0),                                               //     (terminated)
		.reconfig_address1        (10'b0000000000),                                     //     (terminated)
		.reconfig_writedata1      (32'b00000000000000000000000000000000),               //     (terminated)
		.reconfig_readdata1       (),                                                   //     (terminated)
		.reconfig_waitrequest1    (),                                                   //     (terminated)
		.mcgb_cal_busy            (),                                                   //     (terminated)
		.mcgb_hip_cal_done        ()                                                    //     (terminated)
	);

	axi_adxcvr #(
		.ID           (0),
		.TX_OR_RX_N   (1),
		.NUM_OF_LANES (4)
	) axi_xcvr (
		.s_axi_aclk    (sys_clk_clk),                         //     s_axi_clock.clk
		.s_axi_aresetn (sys_resetn_reset_n),                  //     s_axi_reset.reset_n
		.s_axi_awvalid (link_management_awvalid),             //           s_axi.awvalid
		.s_axi_awaddr  (link_management_awaddr),              //                .awaddr
		.s_axi_awprot  (link_management_awprot),              //                .awprot
		.s_axi_awready (link_management_awready),             //                .awready
		.s_axi_wvalid  (link_management_wvalid),              //                .wvalid
		.s_axi_wdata   (link_management_wdata),               //                .wdata
		.s_axi_wstrb   (link_management_wstrb),               //                .wstrb
		.s_axi_wready  (link_management_wready),              //                .wready
		.s_axi_bvalid  (link_management_bvalid),              //                .bvalid
		.s_axi_bresp   (link_management_bresp),               //                .bresp
		.s_axi_bready  (link_management_bready),              //                .bready
		.s_axi_arvalid (link_management_arvalid),             //                .arvalid
		.s_axi_araddr  (link_management_araddr),              //                .araddr
		.s_axi_arprot  (link_management_arprot),              //                .arprot
		.s_axi_arready (link_management_arready),             //                .arready
		.s_axi_rvalid  (link_management_rvalid),              //                .rvalid
		.s_axi_rresp   (link_management_rresp),               //                .rresp
		.s_axi_rdata   (link_management_rdata),               //                .rdata
		.s_axi_rready  (link_management_rready),              //                .rready
		.up_rst        (link_reset_reset),                    //       if_up_rst.reset
		.up_pll_locked (link_pll_pll_locked_pll_locked),      // core_pll_locked.pll_locked
		.up_ready      (phy_reset_control_tx_ready_tx_ready)  //           ready.tx_ready
	);

	altera_xcvr_reset_control #(
		.CHANNELS              (1),
		.PLLS                  (1),
		.SYS_CLK_IN_MHZ        (100),
		.SYNCHRONIZE_RESET     (0),
		.REDUCED_SIM_TIME      (1),
		.TX_PLL_ENABLE         (1),
		.T_PLL_POWERDOWN       (1000),
		.SYNCHRONIZE_PLL_RESET (0),
		.TX_ENABLE             (0),
		.TX_PER_CHANNEL        (0),
		.T_TX_ANALOGRESET      (0),
		.T_TX_DIGITALRESET     (20),
		.T_PLL_LOCK_HYST       (0),
		.EN_PLL_CAL_BUSY       (0),
		.RX_ENABLE             (0),
		.RX_PER_CHANNEL        (0),
		.T_RX_ANALOGRESET      (40),
		.T_RX_DIGITALRESET     (4000)
	) link_pll_reset_control (
		.clock              (sys_clk_clk),                                        //         clock.clk
		.reset              (rst_controller_reset_out_reset),                     //         reset.reset
		.pll_powerdown      (link_pll_reset_control_pll_powerdown_pll_powerdown), // pll_powerdown.pll_powerdown
		.tx_analogreset     (),                                                   //   (terminated)
		.tx_digitalreset    (),                                                   //   (terminated)
		.tx_ready           (),                                                   //   (terminated)
		.pll_locked         (1'b0),                                               //   (terminated)
		.pll_select         (1'b0),                                               //   (terminated)
		.tx_cal_busy        (1'b0),                                               //   (terminated)
		.pll_cal_busy       (1'b0),                                               //   (terminated)
		.tx_manual          (1'b0),                                               //   (terminated)
		.rx_analogreset     (),                                                   //   (terminated)
		.rx_digitalreset    (),                                                   //   (terminated)
		.rx_ready           (),                                                   //   (terminated)
		.rx_is_lockedtodata (1'b0),                                               //   (terminated)
		.rx_cal_busy        (1'b0),                                               //   (terminated)
		.rx_manual          (1'b0),                                               //   (terminated)
		.tx_digitalreset_or (1'b0),                                               //   (terminated)
		.rx_digitalreset_or (1'b0)                                                //   (terminated)
	);

	altera_xcvr_reset_control #(
		.CHANNELS              (4),
		.PLLS                  (1),
		.SYS_CLK_IN_MHZ        (100),
		.SYNCHRONIZE_RESET     (0),
		.REDUCED_SIM_TIME      (1),
		.TX_PLL_ENABLE         (1),
		.T_PLL_POWERDOWN       (1000),
		.SYNCHRONIZE_PLL_RESET (0),
		.TX_ENABLE             (1),
		.TX_PER_CHANNEL        (0),
		.T_TX_ANALOGRESET      (70000),
		.T_TX_DIGITALRESET     (70000),
		.T_PLL_LOCK_HYST       (0),
		.EN_PLL_CAL_BUSY       (1),
		.RX_ENABLE             (0),
		.RX_PER_CHANNEL        (0),
		.T_RX_ANALOGRESET      (40),
		.T_RX_DIGITALRESET     (4000)
	) phy_reset_control (
		.clock              (sys_clk_clk),                                       //           clock.clk
		.reset              (rst_controller_001_reset_out_reset),                //           reset.reset
		.pll_powerdown      (phy_reset_control_pll_powerdown_pll_powerdown),     //   pll_powerdown.pll_powerdown
		.tx_analogreset     (phy_reset_control_tx_analogreset_tx_analogreset),   //  tx_analogreset.tx_analogreset
		.tx_digitalreset    (phy_reset_control_tx_digitalreset_tx_digitalreset), // tx_digitalreset.tx_digitalreset
		.tx_ready           (phy_reset_control_tx_ready_tx_ready),               //        tx_ready.tx_ready
		.pll_locked         (lane_pll_pll_locked_pll_locked),                    //      pll_locked.pll_locked
		.pll_select         (),                                                  //      pll_select.pll_select
		.tx_cal_busy        (phy_cal_busy_tx_cal_busy),                          //     tx_cal_busy.tx_cal_busy
		.pll_cal_busy       (lane_pll_pll_cal_busy_pll_cal_busy),                //    pll_cal_busy.pll_cal_busy
		.tx_manual          (4'b0000),                                           //     (terminated)
		.rx_analogreset     (),                                                  //     (terminated)
		.rx_digitalreset    (),                                                  //     (terminated)
		.rx_ready           (),                                                  //     (terminated)
		.rx_is_lockedtodata (4'b0000),                                           //     (terminated)
		.rx_cal_busy        (4'b0000),                                           //     (terminated)
		.rx_manual          (4'b0000),                                           //     (terminated)
		.tx_digitalreset_or (4'b0000),                                           //     (terminated)
		.rx_digitalreset_or (4'b0000)                                            //     (terminated)
	);

	system_bd_jesd204_phy_10_oucwlmy phy (
		.link_clk_clk                 (link_clk_clk),                                      //        link_clk.clk
		.link_reset_reset_n           (~link_reset_reset),                                 //      link_reset.reset_n
		.reconfig_clk_clk             (sys_clk_clk),                                       //    reconfig_clk.clk
		.reconfig_reset_reset         (~sys_resetn_reset_n),                               //  reconfig_reset.reset
		.serial_clk_clk               (lane_pll_tx_serial_clk_clk),                        //      serial_clk.clk
		.serial_data_tx_serial_data   (serial_data_tx_serial_data),                        //     serial_data.tx_serial_data
		.analogreset_tx_analogreset   (phy_reset_control_tx_analogreset_tx_analogreset),   //     analogreset.tx_analogreset
		.digitalreset_tx_digitalreset (phy_reset_control_tx_digitalreset_tx_digitalreset), //    digitalreset.tx_digitalreset
		.cal_busy_tx_cal_busy         (phy_cal_busy_tx_cal_busy),                          //        cal_busy.tx_cal_busy
		.reconfig_avmm_0_address      (phy_reconfig_0_address),                            // reconfig_avmm_0.address
		.reconfig_avmm_0_read         (phy_reconfig_0_read),                               //                .read
		.reconfig_avmm_0_readdata     (phy_reconfig_0_readdata),                           //                .readdata
		.reconfig_avmm_0_waitrequest  (phy_reconfig_0_waitrequest),                        //                .waitrequest
		.reconfig_avmm_0_write        (phy_reconfig_0_write),                              //                .write
		.reconfig_avmm_0_writedata    (phy_reconfig_0_writedata),                          //                .writedata
		.phy_0_char                   (jesd204_tx_tx_phy0_char),                           //           phy_0.char
		.phy_0_charisk                (jesd204_tx_tx_phy0_charisk),                        //                .charisk
		.reconfig_avmm_1_address      (phy_reconfig_1_address),                            // reconfig_avmm_1.address
		.reconfig_avmm_1_read         (phy_reconfig_1_read),                               //                .read
		.reconfig_avmm_1_readdata     (phy_reconfig_1_readdata),                           //                .readdata
		.reconfig_avmm_1_waitrequest  (phy_reconfig_1_waitrequest),                        //                .waitrequest
		.reconfig_avmm_1_write        (phy_reconfig_1_write),                              //                .write
		.reconfig_avmm_1_writedata    (phy_reconfig_1_writedata),                          //                .writedata
		.phy_1_char                   (jesd204_tx_tx_phy3_char),                           //           phy_1.char
		.phy_1_charisk                (jesd204_tx_tx_phy3_charisk),                        //                .charisk
		.reconfig_avmm_2_address      (phy_reconfig_2_address),                            // reconfig_avmm_2.address
		.reconfig_avmm_2_read         (phy_reconfig_2_read),                               //                .read
		.reconfig_avmm_2_readdata     (phy_reconfig_2_readdata),                           //                .readdata
		.reconfig_avmm_2_waitrequest  (phy_reconfig_2_waitrequest),                        //                .waitrequest
		.reconfig_avmm_2_write        (phy_reconfig_2_write),                              //                .write
		.reconfig_avmm_2_writedata    (phy_reconfig_2_writedata),                          //                .writedata
		.phy_2_char                   (jesd204_tx_tx_phy1_char),                           //           phy_2.char
		.phy_2_charisk                (jesd204_tx_tx_phy1_charisk),                        //                .charisk
		.reconfig_avmm_3_address      (phy_reconfig_3_address),                            // reconfig_avmm_3.address
		.reconfig_avmm_3_read         (phy_reconfig_3_read),                               //                .read
		.reconfig_avmm_3_readdata     (phy_reconfig_3_readdata),                           //                .readdata
		.reconfig_avmm_3_waitrequest  (phy_reconfig_3_waitrequest),                        //                .waitrequest
		.reconfig_avmm_3_write        (phy_reconfig_3_write),                              //                .write
		.reconfig_avmm_3_writedata    (phy_reconfig_3_writedata),                          //                .writedata
		.phy_3_char                   (jesd204_tx_tx_phy2_char),                           //           phy_3.char
		.phy_3_charisk                (jesd204_tx_tx_phy2_charisk)                         //                .charisk
	);

	system_bd_altera_xcvr_atx_pll_a10_181_cgkorxq #(
		.enable_pll_reconfig                                              (1),
		.rcfg_jtag_enable                                                 (0),
		.rcfg_separate_avmm_busy                                          (1),
		.dbg_embedded_debug_enable                                        (1),
		.dbg_capability_reg_enable                                        (1),
		.dbg_user_identifier                                              (0),
		.dbg_stat_soft_logic_enable                                       (1),
		.dbg_ctrl_soft_logic_enable                                       (1),
		.rcfg_emb_strm_enable                                             (0),
		.rcfg_profile_cnt                                                 (2),
		.hssi_pma_lc_refclk_select_mux_powerdown_mode                     ("powerup"),
		.hssi_pma_lc_refclk_select_mux_refclk_select                      ("ref_iqclk0"),
		.hssi_pma_lc_refclk_select_mux_silicon_rev                        ("20nm5"),
		.hssi_pma_lc_refclk_select_mux_inclk0_logical_to_physical_mapping ("ref_iqclk0"),
		.hssi_pma_lc_refclk_select_mux_inclk1_logical_to_physical_mapping ("power_down"),
		.hssi_pma_lc_refclk_select_mux_inclk2_logical_to_physical_mapping ("power_down"),
		.hssi_pma_lc_refclk_select_mux_inclk3_logical_to_physical_mapping ("power_down"),
		.hssi_pma_lc_refclk_select_mux_inclk4_logical_to_physical_mapping ("power_down"),
		.hssi_refclk_divider_silicon_rev                                  ("20nm5"),
		.atx_pll_silicon_rev                                              ("20nm5"),
		.atx_pll_is_cascaded_pll                                          ("false"),
		.atx_pll_cgb_div                                                  (1),
		.atx_pll_pma_width                                                (64),
		.atx_pll_cp_compensation_enable                                   ("true"),
		.atx_pll_cp_current_setting                                       ("cp_current_setting23"),
		.atx_pll_cp_testmode                                              ("cp_normal"),
		.atx_pll_cp_lf_3rd_pole_freq                                      ("lf_3rd_pole_setting1"),
		.atx_pll_lf_cbig_size                                             ("lf_cbig_setting4"),
		.atx_pll_cp_lf_order                                              ("lf_3rd_order"),
		.atx_pll_lf_resistance                                            ("lf_setting1"),
		.atx_pll_lf_ripplecap                                             ("lf_ripple_cap_0"),
		.atx_pll_tank_sel                                                 ("lctank1"),
		.atx_pll_tank_band                                                ("lc_band4"),
		.atx_pll_tank_voltage_coarse                                      ("vreg_setting_coarse0"),
		.atx_pll_tank_voltage_fine                                        ("vreg_setting5"),
		.atx_pll_output_regulator_supply                                  ("vreg1v_setting0"),
		.atx_pll_overrange_voltage                                        ("over_setting0"),
		.atx_pll_underrange_voltage                                       ("under_setting4"),
		.atx_pll_fb_select                                                ("direct_fb"),
		.atx_pll_d2a_voltage                                              ("d2a_setting_4"),
		.atx_pll_dsm_mode                                                 ("dsm_mode_integer"),
		.atx_pll_dsm_out_sel                                              ("pll_dsm_disable"),
		.atx_pll_dsm_ecn_bypass                                           ("false"),
		.atx_pll_dsm_ecn_test_en                                          ("false"),
		.atx_pll_dsm_fractional_division                                  ("1"),
		.atx_pll_dsm_fractional_value_ready                               ("pll_k_ready"),
		.atx_pll_iqclk_mux_sel                                            ("iqtxrxclk0"),
		.atx_pll_vco_bypass_enable                                        ("false"),
		.atx_pll_l_counter                                                (2),
		.atx_pll_l_counter_enable                                         ("true"),
		.atx_pll_cascadeclk_test                                          ("cascadetest_off"),
		.atx_pll_hclk_divide                                              (1),
		.atx_pll_enable_hclk                                              ("hclk_disabled"),
		.atx_pll_m_counter                                                (15),
		.atx_pll_ref_clk_div                                              (1),
		.atx_pll_bw_sel                                                   ("medium"),
		.atx_pll_datarate                                                 ("10000000000 bps"),
		.atx_pll_device_variant                                           ("device1"),
		.atx_pll_initial_settings                                         ("true"),
		.atx_pll_lc_mode                                                  ("lccmu_normal"),
		.atx_pll_output_clock_frequency                                   ("5000000000 Hz"),
		.atx_pll_powerdown_mode                                           ("powerup"),
		.atx_pll_prot_mode                                                ("basic_tx"),
		.atx_pll_reference_clock_frequency                                ("333333333 Hz"),
		.atx_pll_sup_mode                                                 ("user_mode"),
		.atx_pll_regulator_bypass                                         ("reg_enable"),
		.atx_pll_vco_freq                                                 ("10000000000 Hz"),
		.atx_pll_is_otn                                                   ("false"),
		.atx_pll_is_sdi                                                   ("false"),
		.atx_pll_primary_use                                              ("hssi_x1"),
		.atx_pll_fpll_refclk_selection                                    ("select_vco_output"),
		.atx_pll_lc_to_fpll_l_counter_scratch                             (1),
		.atx_pll_lc_to_fpll_l_counter                                     ("lcounter_setting0"),
		.atx_pll_pfd_delay_compensation                                   ("normal_delay"),
		.atx_pll_xcpvco_xchgpmplf_cp_current_boost                        ("normal_setting"),
		.atx_pll_pfd_pulse_width                                          ("pulse_width_setting0"),
		.hip_cal_en                                                       ("disable"),
		.calibration_en                                                   ("enable"),
		.enable_analog_resets                                             (0),
		.atx_pll_bonding_mode                                             ("cpri_bonding"),
		.enable_mcgb                                                      (0),
		.enable_mcgb_debug_ports_parameters                               (0),
		.hssi_pma_cgb_master_prot_mode                                    ("basic_tx"),
		.hssi_pma_cgb_master_silicon_rev                                  ("20nm5"),
		.hssi_pma_cgb_master_x1_div_m_sel                                 ("divbypass"),
		.hssi_pma_cgb_master_cgb_enable_iqtxrxclk                         ("disable_iqtxrxclk"),
		.hssi_pma_cgb_master_ser_mode                                     ("sixty_four_bit"),
		.hssi_pma_cgb_master_datarate                                     ("10000000000 bps"),
		.hssi_pma_cgb_master_cgb_power_down                               ("normal_cgb"),
		.hssi_pma_cgb_master_observe_cgb_clocks                           ("observe_nothing"),
		.hssi_pma_cgb_master_op_mode                                      ("enabled"),
		.hssi_pma_cgb_master_tx_ucontrol_reset_pcie                       ("pcscorehip_controls_mcgb"),
		.hssi_pma_cgb_master_vccdreg_output                               ("vccdreg_nominal"),
		.hssi_pma_cgb_master_input_select                                 ("lcpll_top"),
		.hssi_pma_cgb_master_input_select_gen3                            ("unused")
	) lane_pll (
		.pll_powerdown           (phy_reset_control_pll_powerdown_pll_powerdown), //   pll_powerdown.pll_powerdown
		.pll_refclk0             (ref_clk_clk),                                   //     pll_refclk0.clk
		.tx_serial_clk           (lane_pll_tx_serial_clk_clk),                    //   tx_serial_clk.clk
		.pll_locked              (lane_pll_pll_locked_pll_locked),                //      pll_locked.pll_locked
		.reconfig_clk0           (sys_clk_clk),                                   //   reconfig_clk0.clk
		.reconfig_reset0         (~sys_resetn_reset_n),                           // reconfig_reset0.reset
		.reconfig_write0         (lane_pll_reconfig_write),                       //  reconfig_avmm0.write
		.reconfig_read0          (lane_pll_reconfig_read),                        //                .read
		.reconfig_address0       (lane_pll_reconfig_address),                     //                .address
		.reconfig_writedata0     (lane_pll_reconfig_writedata),                   //                .writedata
		.reconfig_readdata0      (lane_pll_reconfig_readdata),                    //                .readdata
		.reconfig_waitrequest0   (lane_pll_reconfig_waitrequest),                 //                .waitrequest
		.pll_cal_busy            (lane_pll_pll_cal_busy_pll_cal_busy),            //    pll_cal_busy.pll_cal_busy
		.pll_refclk1             (1'b0),                                          //     (terminated)
		.pll_refclk2             (1'b0),                                          //     (terminated)
		.pll_refclk3             (1'b0),                                          //     (terminated)
		.pll_refclk4             (1'b0),                                          //     (terminated)
		.tx_serial_clk_gt        (),                                              //     (terminated)
		.pll_pcie_clk            (),                                              //     (terminated)
		.pll_cascade_clk         (),                                              //     (terminated)
		.atx_to_fpll_cascade_clk (),                                              //     (terminated)
		.avmm_busy0              (),                                              //     (terminated)
		.hip_cal_done            (),                                              //     (terminated)
		.clklow                  (),                                              //     (terminated)
		.fref                    (),                                              //     (terminated)
		.overrange               (),                                              //     (terminated)
		.underrange              (),                                              //     (terminated)
		.mcgb_rst                (1'b0),                                          //     (terminated)
		.mcgb_aux_clk0           (1'b0),                                          //     (terminated)
		.mcgb_aux_clk1           (1'b0),                                          //     (terminated)
		.mcgb_aux_clk2           (1'b0),                                          //     (terminated)
		.tx_bonding_clocks       (),                                              //     (terminated)
		.mcgb_serial_clk         (),                                              //     (terminated)
		.pcie_sw                 (2'b00),                                         //     (terminated)
		.pcie_sw_done            (),                                              //     (terminated)
		.reconfig_clk1           (1'b0),                                          //     (terminated)
		.reconfig_reset1         (1'b0),                                          //     (terminated)
		.reconfig_write1         (1'b0),                                          //     (terminated)
		.reconfig_read1          (1'b0),                                          //     (terminated)
		.reconfig_address1       (10'b0000000000),                                //     (terminated)
		.reconfig_writedata1     (32'b00000000000000000000000000000000),          //     (terminated)
		.reconfig_readdata1      (),                                              //     (terminated)
		.reconfig_waitrequest1   (),                                              //     (terminated)
		.mcgb_cal_busy           (),                                              //     (terminated)
		.mcgb_hip_cal_done       ()                                               //     (terminated)
	);

	axi_jesd204_tx #(
		.ID        (0),
		.NUM_LANES (4),
		.NUM_LINKS (1)
	) axi_jesd204_tx (
		.s_axi_aclk                        (sys_clk_clk),                                    //    s_axi_clock.clk
		.s_axi_aresetn                     (sys_resetn_reset_n),                             //    s_axi_reset.reset_n
		.s_axi_awvalid                     (link_reconfig_awvalid),                          //          s_axi.awvalid
		.s_axi_awaddr                      (link_reconfig_awaddr),                           //               .awaddr
		.s_axi_awprot                      (link_reconfig_awprot),                           //               .awprot
		.s_axi_awready                     (link_reconfig_awready),                          //               .awready
		.s_axi_wvalid                      (link_reconfig_wvalid),                           //               .wvalid
		.s_axi_wdata                       (link_reconfig_wdata),                            //               .wdata
		.s_axi_wstrb                       (link_reconfig_wstrb),                            //               .wstrb
		.s_axi_wready                      (link_reconfig_wready),                           //               .wready
		.s_axi_bvalid                      (link_reconfig_bvalid),                           //               .bvalid
		.s_axi_bresp                       (link_reconfig_bresp),                            //               .bresp
		.s_axi_bready                      (link_reconfig_bready),                           //               .bready
		.s_axi_arvalid                     (link_reconfig_arvalid),                          //               .arvalid
		.s_axi_araddr                      (link_reconfig_araddr),                           //               .araddr
		.s_axi_arprot                      (link_reconfig_arprot),                           //               .arprot
		.s_axi_arready                     (link_reconfig_arready),                          //               .arready
		.s_axi_rvalid                      (link_reconfig_rvalid),                           //               .rvalid
		.s_axi_rresp                       (link_reconfig_rresp),                            //               .rresp
		.s_axi_rdata                       (link_reconfig_rdata),                            //               .rdata
		.s_axi_rready                      (link_reconfig_rready),                           //               .rready
		.irq                               (interrupt_irq),                                  //      interrupt.irq
		.core_clk                          (link_clk_clk),                                   //     core_clock.clk
		.core_reset_ext                    (rst_controller_002_reset_out_reset),             // core_reset_ext.reset
		.core_reset                        (axi_jesd204_tx_core_reset_reset),                //     core_reset.reset
		.core_cfg_beats_per_multiframe     (axi_jesd204_tx_config_beats_per_multiframe),     //         config.beats_per_multiframe
		.core_cfg_continuous_cgs           (axi_jesd204_tx_config_continuous_cgs),           //               .continuous_cgs
		.core_cfg_continuous_ilas          (axi_jesd204_tx_config_continuous_ilas),          //               .continuous_ilas
		.core_cfg_disable_char_replacement (axi_jesd204_tx_config_disable_char_replacement), //               .disable_char_replacement
		.core_cfg_disable_scrambler        (axi_jesd204_tx_config_disable_scrambler),        //               .disable_scrambler
		.core_cfg_lanes_disable            (axi_jesd204_tx_config_lanes_disable),            //               .lanes_disable
		.core_cfg_links_disable            (axi_jesd204_tx_config_links_disable),            //               .links_disable
		.core_cfg_lmfc_offset              (axi_jesd204_tx_config_lmfc_offset),              //               .lmfc_offset
		.core_cfg_mframes_per_ilas         (axi_jesd204_tx_config_mframes_per_ilas),         //               .mframes_per_ilas
		.core_cfg_octets_per_frame         (axi_jesd204_tx_config_octets_per_frame),         //               .octets_per_frame
		.core_cfg_skip_ilas                (axi_jesd204_tx_config_skip_ilas),                //               .skip_ilas
		.core_cfg_sysref_disable           (axi_jesd204_tx_config_sysref_disable),           //               .sysref_disable
		.core_cfg_sysref_oneshot           (axi_jesd204_tx_config_sysref_oneshot),           //               .sysref_oneshot
		.core_ctrl_manual_sync_request     (axi_jesd204_tx_control_manual_sync_request),     //        control.manual_sync_request
		.core_ilas_config_addr             (jesd204_tx_ilas_config_addr),                    //    ilas_config.addr
		.core_ilas_config_data             (axi_jesd204_tx_ilas_config_data),                //               .data
		.core_ilas_config_rd               (jesd204_tx_ilas_config_rd),                      //               .rd
		.core_event_sysref_alignment_error (jesd204_tx_event_sysref_alignment_error),        //          event.sysref_alignment_error
		.core_event_sysref_edge            (jesd204_tx_event_sysref_edge),                   //               .sysref_edge
		.core_status_state                 (jesd204_tx_status_state),                        //         status.state
		.core_status_sync                  (jesd204_tx_status_sync)                          //               .sync
	);

	jesd204_tx #(
		.NUM_LANES (4),
		.NUM_LINKS (1)
	) jesd204_tx (
		.clk                          (link_clk_clk),                                                                                                         //       clock.clk
		.reset                        (axi_jesd204_tx_core_reset_reset),                                                                                      //       reset.reset
		.sysref                       (sysref_export),                                                                                                        //      sysref.export
		.sync                         (sync_export),                                                                                                          //        sync.export
		.ilas_config_addr             (jesd204_tx_ilas_config_addr),                                                                                          // ilas_config.addr
		.ilas_config_data             (axi_jesd204_tx_ilas_config_data),                                                                                      //            .data
		.ilas_config_rd               (jesd204_tx_ilas_config_rd),                                                                                            //            .rd
		.event_sysref_alignment_error (jesd204_tx_event_sysref_alignment_error),                                                                              //       event.sysref_alignment_error
		.event_sysref_edge            (jesd204_tx_event_sysref_edge),                                                                                         //            .sysref_edge
		.ctrl_manual_sync_request     (axi_jesd204_tx_control_manual_sync_request),                                                                           //     control.manual_sync_request
		.cfg_beats_per_multiframe     (axi_jesd204_tx_config_beats_per_multiframe),                                                                           //      config.beats_per_multiframe
		.cfg_continuous_cgs           (axi_jesd204_tx_config_continuous_cgs),                                                                                 //            .continuous_cgs
		.cfg_continuous_ilas          (axi_jesd204_tx_config_continuous_ilas),                                                                                //            .continuous_ilas
		.cfg_disable_char_replacement (axi_jesd204_tx_config_disable_char_replacement),                                                                       //            .disable_char_replacement
		.cfg_disable_scrambler        (axi_jesd204_tx_config_disable_scrambler),                                                                              //            .disable_scrambler
		.cfg_lanes_disable            (axi_jesd204_tx_config_lanes_disable),                                                                                  //            .lanes_disable
		.cfg_links_disable            (axi_jesd204_tx_config_links_disable),                                                                                  //            .links_disable
		.cfg_lmfc_offset              (axi_jesd204_tx_config_lmfc_offset),                                                                                    //            .lmfc_offset
		.cfg_mframes_per_ilas         (axi_jesd204_tx_config_mframes_per_ilas),                                                                               //            .mframes_per_ilas
		.cfg_octets_per_frame         (axi_jesd204_tx_config_octets_per_frame),                                                                               //            .octets_per_frame
		.cfg_skip_ilas                (axi_jesd204_tx_config_skip_ilas),                                                                                      //            .skip_ilas
		.cfg_sysref_disable           (axi_jesd204_tx_config_sysref_disable),                                                                                 //            .sysref_disable
		.cfg_sysref_oneshot           (axi_jesd204_tx_config_sysref_oneshot),                                                                                 //            .sysref_oneshot
		.status_state                 (jesd204_tx_status_state),                                                                                              //      status.state
		.status_sync                  (jesd204_tx_status_sync),                                                                                               //            .sync
		.tx_data                      (link_data_data),                                                                                                       //     tx_data.data
		.tx_ready                     (link_data_ready),                                                                                                      //            .ready
		.tx_valid                     (link_data_valid),                                                                                                      //            .valid
		.phy_data                     ({jesd204_tx_phy_data[127:96],jesd204_tx_phy_data[95:64],jesd204_tx_phy_data[63:32],jesd204_tx_phy_data[31:0]}),        //     tx_phy0.char
		.phy_charisk                  ({jesd204_tx_phy_charisk[15:12],jesd204_tx_phy_charisk[11:8],jesd204_tx_phy_charisk[7:4],jesd204_tx_phy_charisk[3:0]}), //            .charisk
		.lmfc_clk                     (),                                                                                                                     // (terminated)
		.lmfc_edge                    ()                                                                                                                      // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (link_reset_reset),               // reset_in0.reset
		.reset_in1      (~sys_resetn_reset_n),            // reset_in1.reset
		.clk            (),                               //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (link_reset_reset),                   // reset_in0.reset
		.reset_in1      (~sys_resetn_reset_n),                // reset_in1.reset
		.clk            (),                                   //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (link_reset_reset),                   // reset_in0.reset
		.clk            (link_clk_clk),                       //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	assign jesd204_tx_tx_phy0_charisk = { jesd204_tx_phy_charisk[3:0] };

	assign jesd204_tx_tx_phy0_char = { jesd204_tx_phy_data[31:0] };

	assign jesd204_tx_tx_phy3_charisk = { jesd204_tx_phy_charisk[15:12] };

	assign jesd204_tx_tx_phy3_char = { jesd204_tx_phy_data[127:96] };

	assign jesd204_tx_tx_phy1_charisk = { jesd204_tx_phy_charisk[7:4] };

	assign jesd204_tx_tx_phy1_char = { jesd204_tx_phy_data[63:32] };

	assign jesd204_tx_tx_phy2_charisk = { jesd204_tx_phy_charisk[11:8] };

	assign jesd204_tx_tx_phy2_char = { jesd204_tx_phy_data[95:64] };

endmodule
