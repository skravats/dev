
C10GX_SoM_Max10.elf:     file format elf32-littlenios2
C10GX_SoM_Max10.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008180

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002e00 memsz 0x00002e00 flags r-x
    LOAD off    0x00003e20 vaddr 0x0000ae20 paddr 0x0000ae6c align 2**12
         filesz 0x0000004c memsz 0x0000004c flags rw-
    LOAD off    0x00003eb8 vaddr 0x0000aeb8 paddr 0x0000aeb8 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001be0  00008180  00008180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000010c0  00009d60  00009d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000004c  0000ae20  0000ae6c  00003e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000aeb8  0000aeb8  00003eb8  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  0000afd4  0000afd4  00003e6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003e6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003c0  00000000  00000000  00003e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000046b9  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018b8  00000000  00000000  00008909  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001a00  00000000  00000000  0000a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000918  00000000  00000000  0000bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001af8  00000000  00000000  0000c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000024d2  00000000  00000000  0000dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000104a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001215a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001215d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012160  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012161  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00012162  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00012166  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001216a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0001216e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  00012178  2**0
                  CONTENTS, READONLY
 26 .jdi          000046d3  00000000  00000000  0001219f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032c6a  00000000  00000000  00016872  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008180 l    d  .text	00000000 .text
00009d60 l    d  .rodata	00000000 .rodata
0000ae20 l    d  .rwdata	00000000 .rwdata
0000aeb8 l    d  .bss	00000000 .bss
0000afd4 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../C10GX_SoM_Max10_bsp//obj/HAL/src/crt0.o
000081b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ae20 l     O .rwdata	00000038 i2c
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00008f70 l     F .text	000000b8 optional_irq_callback
00008ec8 l     F .text	00000060 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
0000aecc g     O .bss	00000004 alt_instruction_exception_handler
00008648 g     F .text	0000002c alt_main
0000aed4 g     O .bss	00000100 alt_irq
0000ae6c g       *ABS*	00000000 __flash_rwdata_start
00008930 g     F .text	00000080 alt_avalon_i2c_rx_read
00008e68 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00008810 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
000094bc g     F .text	0000017c alt_avalon_i2c_master_transmit_using_interrupts
00008674 g     F .text	00000038 alt_putstr
00009abc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000aed0 g     O .bss	00000004 errno
0000aec0 g     O .bss	00000004 alt_argv
00012e58 g       *ABS*	00000000 _gp
000086ac g     F .text	00000004 usleep
00009114 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
0000ae58 g     O .rwdata	00000004 jtag
00009d60 g     O .rodata	00001070 si5345_revd_registers
000088e8 g     F .text	00000010 alt_avalon_i2c_is_busy
00008270 g     F .text	000000cc get_register
000087b8 g     F .text	00000058 alt_avalon_i2c_master_config_set
00009950 g     F .text	00000074 alt_find_dev
00008b3c g     F .text	00000144 alt_avalon_i2c_master_transmit
00009ac4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009c7c g     F .text	00000064 .hidden __udivsi3
00008710 g     F .text	00000048 alt_avalon_i2c_enable
00008e7c g     F .text	0000004c alt_avalon_i2c_int_disable
00008000 g       *ABS*	00000000 __alt_mem_ram
00008c80 g     F .text	000001b4 alt_avalon_i2c_master_receive
00008f28 g     F .text	00000048 alt_avalon_i2c_int_enable
0000afd4 g       *ABS*	00000000 __bss_end
00009a54 g     F .text	00000068 alt_iic_isr_register
00008e34 g     F .text	00000018 alt_avalon_i2c_int_status_get
00009a3c g     F .text	00000018 alt_ic_irq_enabled
000086f8 g     F .text	00000010 alt_avalon_i2c_register_callback
0000aec8 g     O .bss	00000004 alt_irq_active
0000940c g     F .text	000000b0 alt_avalon_i2c_init
000080fc g     F .exceptions	00000060 alt_irq_handler
000098e0 g     F .text	00000004 alt_dcache_flush_all
0000ae6c g       *ABS*	00000000 __ram_rwdata_end
000089e0 g     F .text	0000001c alt_avalon_i2c_check_arblost
00008e5c g     F .text	0000000c alt_avalon_i2c_int_clear
0000ae20 g       *ABS*	00000000 __ram_rodata_end
0000ae5c g     O .rwdata	00000008 alt_avalon_i2c_list
00009ce0 g     F .text	00000058 .hidden __umodsi3
0000afd4 g       *ABS*	00000000 end
0000815c g     F .exceptions	00000024 alt_instruction_exception_entry
00008708 g     F .text	00000008 alt_avalon_i2c_open
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009638 g     F .text	000000c4 alt_avalon_i2c_master_tx
00009834 g     F .text	00000034 altera_avalon_jtag_uart_write
000086dc g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00008180 g     F .text	0000003c _start
00009154 g     F .text	0000018c alt_avalon_i2c_master_receive_using_interrupts
0000912c g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
000086d0 g     F .text	0000000c alt_sys_init
000096fc g     F .text	00000138 alt_avalon_i2c_master_tx_rx
00009d38 g     F .text	00000028 .hidden __mulsi3
0000ae20 g       *ABS*	00000000 __ram_rwdata_start
00009d60 g       *ABS*	00000000 __ram_rodata_start
00009868 g     F .text	00000078 alt_busy_sleep
00009b38 g     F .text	00000030 memcmp
000088f8 g     F .text	00000038 alt_avalon_i2c_rx_read_available
0000afd4 g       *ABS*	00000000 __alt_stack_base
0000aeb8 g     O .bss	00000004 i2c_dev
000098e4 g     F .text	0000006c alt_dev_llist_insert
000081bc g     F .text	000000b4 set_register
00009028 g     F .text	000000ec alt_avalon_i2c_interrupt_transaction_status
000089c4 g     F .text	0000001c alt_avalon_i2c_check_nack
0000aeb8 g       *ABS*	00000000 __bss_start
00008548 g     F .text	00000020 memset
00008420 g     F .text	00000128 main
000089bc g     F .text	00000008 alt_avalon_i2c_master_target_set
0000aebc g     O .bss	00000004 alt_envp
00008e4c g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
0000ae64 g     O .rwdata	00000004 alt_errno
00009b84 g     F .text	00000084 .hidden __divsi3
00009d60 g       *ABS*	00000000 __flash_rodata_start
000086b0 g     F .text	00000020 alt_irq_init
0000aec4 g     O .bss	00000004 alt_argc
000089b0 g     F .text	0000000c alt_avalon_i2c_master_target_get
00008ac4 g     F .text	00000078 alt_avalon_i2c_send_address
0000833c g     F .text	000000e4 i2c_init
00008020 g       .exceptions	00000000 alt_irq_entry
00008020 g       *ABS*	00000000 __ram_exceptions_start
000093e0 g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
000099c8 g     F .text	00000004 alt_ic_isr_register
00008758 g     F .text	0000001c alt_avalon_i2c_disable
0000ae6c g       *ABS*	00000000 _edata
0000afd4 g       *ABS*	00000000 _end
00008180 g       *ABS*	00000000 __ram_exceptions_end
00008774 g     F .text	00000044 alt_avalon_i2c_master_config_get
00009a04 g     F .text	00000038 alt_ic_irq_disable
00009c08 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000885c g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
000089fc g     F .text	000000c8 alt_avalon_i2c_cmd_write
0000800c g       .entry	00000000 _exit
00009b68 g     F .text	0000001c strlen
000099c4 g     F .text	00000004 alt_icache_flush_all
0000ae68 g     O .rwdata	00000004 alt_priority_mask
000099cc g     F .text	00000038 alt_ic_irq_enable
000093c8 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00008568 g     F .text	000000e0 alt_load
000092e0 g     F .text	000000e8 alt_avalon_i2c_master_rx



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606014 	ori	at,at,33152
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	000815c0 	call	815c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    810c:	04000074 	movhi	r16,1
    8110:	842bb504 	addi	r16,r16,-20780

  active = alt_irq_pending ();

  do
  {
    i = 0;
    8114:	0005883a 	mov	r2,zero
    mask = 1;
    8118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	20ca703a 	and	r5,r4,r3
    8120:	28000b26 	beq	r5,zero,8150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8124:	100490fa 	slli	r2,r2,3
    8128:	8085883a 	add	r2,r16,r2
    812c:	10c00017 	ldw	r3,0(r2)
    8130:	11000117 	ldw	r4,4(r2)
    8134:	183ee83a 	callr	r3
    8138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    813c:	203ff51e 	bne	r4,zero,8114 <_gp+0xffff52bc>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8150:	18c7883a 	add	r3,r3,r3
      i++;
    8154:	10800044 	addi	r2,r2,1

    } while (1);
    8158:	003ff006 	br	811c <_gp+0xffff52c4>

0000815c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    815c:	d0a01d17 	ldw	r2,-32652(gp)
    8160:	10000426 	beq	r2,zero,8174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8164:	200b883a 	mov	r5,r4
    8168:	000d883a 	mov	r6,zero
    816c:	013fffc4 	movi	r4,-1
    8170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    8178:	0005883a 	mov	r2,zero
    817c:	f800283a 	ret

Disassembly of section .text:

00008180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    818c:	d68b9614 	ori	gp,gp,11864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8194:	10abae14 	ori	r2,r2,44728

    movhi r3, %hi(__bss_end)
    8198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    819c:	18ebf514 	ori	r3,r3,45012

    beq r2, r3, 1f
    81a0:	10c00326 	beq	r2,r3,81b0 <_start+0x30>

0:
    stw zero, (r2)
    81a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81ac:	10fffd36 	bltu	r2,r3,81a4 <_gp+0xffff534c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81b0:	00085680 	call	8568 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81b4:	00086480 	call	8648 <alt_main>

000081b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81b8:	003fff06 	br	81b8 <_gp+0xffff5360>

000081bc <set_register>:
#pragma GCC optimize ("O0")

ALT_AVALON_I2C_DEV_t *i2c_dev = NULL;

int set_register(ALT_AVALON_I2C_DEV_t *dev, unsigned char address, unsigned int reg, unsigned int value)
{
    81bc:	defff704 	addi	sp,sp,-36
    81c0:	dfc00815 	stw	ra,32(sp)
    81c4:	df000715 	stw	fp,28(sp)
    81c8:	df000704 	addi	fp,sp,28
    81cc:	e13ffc15 	stw	r4,-16(fp)
    81d0:	2805883a 	mov	r2,r5
    81d4:	e1bffe15 	stw	r6,-8(fp)
    81d8:	e1ffff15 	stw	r7,-4(fp)
    81dc:	e0bffd05 	stb	r2,-12(fp)
   int result = 0;
    81e0:	e03ff915 	stw	zero,-28(fp)
   unsigned char txbuffer[8];
   alt_avalon_i2c_master_target_set(dev, address);
    81e4:	e0bffd03 	ldbu	r2,-12(fp)
    81e8:	100b883a 	mov	r5,r2
    81ec:	e13ffc17 	ldw	r4,-16(fp)
    81f0:	00089bc0 	call	89bc <alt_avalon_i2c_master_target_set>

   // set page
   txbuffer[0] = 0x01;
    81f4:	00800044 	movi	r2,1
    81f8:	e0bffa05 	stb	r2,-24(fp)
   txbuffer[1] = ((unsigned char)((reg >> 8) & 0x00ff));
    81fc:	e0bffe17 	ldw	r2,-8(fp)
    8200:	1004d23a 	srli	r2,r2,8
    8204:	e0bffa45 	stb	r2,-23(fp)
   result = alt_avalon_i2c_master_tx(dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
    8208:	e0bffa04 	addi	r2,fp,-24
    820c:	000f883a 	mov	r7,zero
    8210:	01800084 	movi	r6,2
    8214:	100b883a 	mov	r5,r2
    8218:	e13ffc17 	ldw	r4,-16(fp)
    821c:	00096380 	call	9638 <alt_avalon_i2c_master_tx>
    8220:	e0bff915 	stw	r2,-28(fp)
   if(result == 0)
    8224:	e0bff917 	ldw	r2,-28(fp)
    8228:	10000b1e 	bne	r2,zero,8258 <set_register+0x9c>
   {
      txbuffer[0] = (unsigned char)(reg & 0x00ff);
    822c:	e0bffe17 	ldw	r2,-8(fp)
    8230:	e0bffa05 	stb	r2,-24(fp)
      txbuffer[1] = (unsigned char)(value & 0x00ff);
    8234:	e0bfff17 	ldw	r2,-4(fp)
    8238:	e0bffa45 	stb	r2,-23(fp)
      result = alt_avalon_i2c_master_tx(dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
    823c:	e0bffa04 	addi	r2,fp,-24
    8240:	000f883a 	mov	r7,zero
    8244:	01800084 	movi	r6,2
    8248:	100b883a 	mov	r5,r2
    824c:	e13ffc17 	ldw	r4,-16(fp)
    8250:	00096380 	call	9638 <alt_avalon_i2c_master_tx>
    8254:	e0bff915 	stw	r2,-28(fp)
   }
   return result;
    8258:	e0bff917 	ldw	r2,-28(fp)
}
    825c:	e037883a 	mov	sp,fp
    8260:	dfc00117 	ldw	ra,4(sp)
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00204 	addi	sp,sp,8
    826c:	f800283a 	ret

00008270 <get_register>:

int get_register(ALT_AVALON_I2C_DEV_t *dev, unsigned int address, unsigned int reg, unsigned int *value)
{
    8270:	defff304 	addi	sp,sp,-52
    8274:	dfc00c15 	stw	ra,48(sp)
    8278:	df000b15 	stw	fp,44(sp)
    827c:	df000b04 	addi	fp,sp,44
    8280:	e13ffc15 	stw	r4,-16(fp)
    8284:	e17ffd15 	stw	r5,-12(fp)
    8288:	e1bffe15 	stw	r6,-8(fp)
    828c:	e1ffff15 	stw	r7,-4(fp)
   int result = 0;
    8290:	e03ff715 	stw	zero,-36(fp)
   unsigned char txbuffer[8];
   unsigned char rxbuffer[8];
   alt_avalon_i2c_master_target_set(dev, address);
    8294:	e17ffd17 	ldw	r5,-12(fp)
    8298:	e13ffc17 	ldw	r4,-16(fp)
    829c:	00089bc0 	call	89bc <alt_avalon_i2c_master_target_set>

   // set page
   txbuffer[0] = 0x01;
    82a0:	00800044 	movi	r2,1
    82a4:	e0bff805 	stb	r2,-32(fp)
   txbuffer[1] = ((unsigned char)((reg >> 8) & 0x00ff));
    82a8:	e0bffe17 	ldw	r2,-8(fp)
    82ac:	1004d23a 	srli	r2,r2,8
    82b0:	e0bff845 	stb	r2,-31(fp)
   result = alt_avalon_i2c_master_tx(dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
    82b4:	e0bff804 	addi	r2,fp,-32
    82b8:	000f883a 	mov	r7,zero
    82bc:	01800084 	movi	r6,2
    82c0:	100b883a 	mov	r5,r2
    82c4:	e13ffc17 	ldw	r4,-16(fp)
    82c8:	00096380 	call	9638 <alt_avalon_i2c_master_tx>
    82cc:	e0bff715 	stw	r2,-36(fp)
   if(result == 0)
    82d0:	e0bff717 	ldw	r2,-36(fp)
    82d4:	1000131e 	bne	r2,zero,8324 <get_register+0xb4>
   {
      // get register
      txbuffer[0] = ((unsigned char)(reg & 0x00ff));
    82d8:	e0bffe17 	ldw	r2,-8(fp)
    82dc:	e0bff805 	stb	r2,-32(fp)
      result = alt_avalon_i2c_master_tx_rx(dev, txbuffer, 1, rxbuffer, 1, ALT_AVALON_I2C_NO_INTERRUPTS);
    82e0:	e13ffa04 	addi	r4,fp,-24
    82e4:	e0fff804 	addi	r3,fp,-32
    82e8:	d8000115 	stw	zero,4(sp)
    82ec:	00800044 	movi	r2,1
    82f0:	d8800015 	stw	r2,0(sp)
    82f4:	200f883a 	mov	r7,r4
    82f8:	01800044 	movi	r6,1
    82fc:	180b883a 	mov	r5,r3
    8300:	e13ffc17 	ldw	r4,-16(fp)
    8304:	00096fc0 	call	96fc <alt_avalon_i2c_master_tx_rx>
    8308:	e0bff715 	stw	r2,-36(fp)
      if(result == 0)
    830c:	e0bff717 	ldw	r2,-36(fp)
    8310:	1000041e 	bne	r2,zero,8324 <get_register+0xb4>
      {
         *value = (unsigned int)rxbuffer[0];
    8314:	e0bffa03 	ldbu	r2,-24(fp)
    8318:	10c03fcc 	andi	r3,r2,255
    831c:	e0bfff17 	ldw	r2,-4(fp)
    8320:	10c00015 	stw	r3,0(r2)
      }
   }
   return result;
    8324:	e0bff717 	ldw	r2,-36(fp)
}
    8328:	e037883a 	mov	sp,fp
    832c:	dfc00117 	ldw	ra,4(sp)
    8330:	df000017 	ldw	fp,0(sp)
    8334:	dec00204 	addi	sp,sp,8
    8338:	f800283a 	ret

0000833c <i2c_init>:


int i2c_init()
{
    833c:	deffb804 	addi	sp,sp,-288
    8340:	dfc04715 	stw	ra,284(sp)
    8344:	df004615 	stw	fp,280(sp)
    8348:	df004604 	addi	fp,sp,280
   unsigned char txbuffer[128] = { 0x00, 0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0x9a };
    834c:	e0bfbb04 	addi	r2,fp,-276
    8350:	00c02004 	movi	r3,128
    8354:	180d883a 	mov	r6,r3
    8358:	000b883a 	mov	r5,zero
    835c:	1009883a 	mov	r4,r2
    8360:	00085480 	call	8548 <memset>
    8364:	00800484 	movi	r2,18
    8368:	e0bfbbc5 	stb	r2,-273(fp)
    836c:	00800d04 	movi	r2,52
    8370:	e0bfbc05 	stb	r2,-272(fp)
    8374:	00801584 	movi	r2,86
    8378:	e0bfbc45 	stb	r2,-271(fp)
    837c:	00801e04 	movi	r2,120
    8380:	e0bfbc85 	stb	r2,-270(fp)
    8384:	00bfe684 	movi	r2,-102
    8388:	e0bfbcc5 	stb	r2,-269(fp)
   unsigned char rxbuffer[128] = { 0x00, 0x00, 0x00, 0x00};
    838c:	e0bfdb04 	addi	r2,fp,-148
    8390:	00c02004 	movi	r3,128
    8394:	180d883a 	mov	r6,r3
    8398:	000b883a 	mov	r5,zero
    839c:	1009883a 	mov	r4,r2
    83a0:	00085480 	call	8548 <memset>
   int result = -1;
    83a4:	00bfffc4 	movi	r2,-1
    83a8:	e0bfba15 	stw	r2,-280(fp)
   ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
   unsigned int speed;
   i2c_dev = alt_avalon_i2c_open("/dev/i2c");
    83ac:	01000074 	movhi	r4,1
    83b0:	212b7404 	addi	r4,r4,-21040
    83b4:	00087080 	call	8708 <alt_avalon_i2c_open>
    83b8:	d0a01815 	stw	r2,-32672(gp)
   if(i2c_dev)
    83bc:	d0a01817 	ldw	r2,-32672(gp)
    83c0:	10001126 	beq	r2,zero,8408 <i2c_init+0xcc>
   {
      alt_avalon_i2c_master_config_get(i2c_dev, &cfg);
    83c4:	d0a01817 	ldw	r2,-32672(gp)
    83c8:	e0fffb04 	addi	r3,fp,-20
    83cc:	180b883a 	mov	r5,r3
    83d0:	1009883a 	mov	r4,r2
    83d4:	00087740 	call	8774 <alt_avalon_i2c_master_config_get>
      //cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
      //cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
      result = alt_avalon_i2c_master_config_speed_get(i2c_dev, &cfg, &speed);
    83d8:	d0a01817 	ldw	r2,-32672(gp)
    83dc:	e13fff04 	addi	r4,fp,-4
    83e0:	e0fffb04 	addi	r3,fp,-20
    83e4:	200d883a 	mov	r6,r4
    83e8:	180b883a 	mov	r5,r3
    83ec:	1009883a 	mov	r4,r2
    83f0:	00088100 	call	8810 <alt_avalon_i2c_master_config_speed_get>
    83f4:	e0bfba15 	stw	r2,-280(fp)

      alt_avalon_i2c_master_target_set(i2c_dev, 0x69);
    83f8:	d0a01817 	ldw	r2,-32672(gp)
    83fc:	01401a44 	movi	r5,105
    8400:	1009883a 	mov	r4,r2
    8404:	00089bc0 	call	89bc <alt_avalon_i2c_master_target_set>
      //txbuffer[0] = 0x01;
      //txbuffer[1] = 0x00;
      //result = alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 2, 0, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
      //result += alt_avalon_i2c_master_tx_rx(i2c_dev, txbuffer, 1, rxbuffer, 0x40, ALT_AVALON_I2C_NO_INTERRUPTS);
   }
   return result;
    8408:	e0bfba17 	ldw	r2,-280(fp)
}
    840c:	e037883a 	mov	sp,fp
    8410:	dfc00117 	ldw	ra,4(sp)
    8414:	df000017 	ldw	fp,0(sp)
    8418:	dec00204 	addi	sp,sp,8
    841c:	f800283a 	ret

00008420 <main>:

int main()
{
    8420:	defffa04 	addi	sp,sp,-24
    8424:	dfc00515 	stw	ra,20(sp)
    8428:	df000415 	stw	fp,16(sp)
    842c:	df000404 	addi	fp,sp,16
   unsigned int value = 0;
    8430:	e03fff15 	stw	zero,-4(fp)
   unsigned int reg = 0;
    8434:	e03ffe15 	stw	zero,-8(fp)
   int result = 0, i;
    8438:	e03ffc15 	stw	zero,-16(fp)
   result = i2c_init();
    843c:	000833c0 	call	833c <i2c_init>
    8440:	e0bffc15 	stw	r2,-16(fp)
   if(result == 0)
    8444:	e0bffc17 	ldw	r2,-16(fp)
    8448:	1000351e 	bne	r2,zero,8520 <main+0x100>
   {
      result += get_register(i2c_dev, 0x69, 0x0b, &value);
    844c:	d0a01817 	ldw	r2,-32672(gp)
    8450:	e0ffff04 	addi	r3,fp,-4
    8454:	180f883a 	mov	r7,r3
    8458:	018002c4 	movi	r6,11
    845c:	01401a44 	movi	r5,105
    8460:	1009883a 	mov	r4,r2
    8464:	00082700 	call	8270 <get_register>
    8468:	1007883a 	mov	r3,r2
    846c:	e0bffc17 	ldw	r2,-16(fp)
    8470:	10c5883a 	add	r2,r2,r3
    8474:	e0bffc15 	stw	r2,-16(fp)
      for(i = 0; i < SI5345_REVD_REG_CONFIG_NUM_REGS; i++)
    8478:	e03ffd15 	stw	zero,-12(fp)
    847c:	00002306 	br	850c <main+0xec>
      {
         reg = si5345_revd_registers[i].address;
    8480:	00800074 	movhi	r2,1
    8484:	10a75804 	addi	r2,r2,-25248
    8488:	e0fffd17 	ldw	r3,-12(fp)
    848c:	180690fa 	slli	r3,r3,3
    8490:	10c5883a 	add	r2,r2,r3
    8494:	10800017 	ldw	r2,0(r2)
    8498:	e0bffe15 	stw	r2,-8(fp)
         value = si5345_revd_registers[i].value;
    849c:	00800074 	movhi	r2,1
    84a0:	10a75804 	addi	r2,r2,-25248
    84a4:	e0fffd17 	ldw	r3,-12(fp)
    84a8:	180690fa 	slli	r3,r3,3
    84ac:	10c5883a 	add	r2,r2,r3
    84b0:	10800104 	addi	r2,r2,4
    84b4:	10800003 	ldbu	r2,0(r2)
    84b8:	10803fcc 	andi	r2,r2,255
    84bc:	e0bfff15 	stw	r2,-4(fp)
         result = set_register(i2c_dev, 0x69, reg, value);
    84c0:	d0a01817 	ldw	r2,-32672(gp)
    84c4:	e0ffff17 	ldw	r3,-4(fp)
    84c8:	180f883a 	mov	r7,r3
    84cc:	e1bffe17 	ldw	r6,-8(fp)
    84d0:	01401a44 	movi	r5,105
    84d4:	1009883a 	mov	r4,r2
    84d8:	00081bc0 	call	81bc <set_register>
    84dc:	e0bffc15 	stw	r2,-16(fp)
         if(result != 0)
    84e0:	e0bffc17 	ldw	r2,-16(fp)
    84e4:	10000d1e 	bne	r2,zero,851c <main+0xfc>
         {
            break;
         }
         if(i == 2)
    84e8:	e0bffd17 	ldw	r2,-12(fp)
    84ec:	10800098 	cmpnei	r2,r2,2
    84f0:	1000031e 	bne	r2,zero,8500 <main+0xe0>
         {
            ALT_USLEEP(300000);
    84f4:	01000174 	movhi	r4,5
    84f8:	2124f804 	addi	r4,r4,-27680
    84fc:	00086ac0 	call	86ac <usleep>
   int result = 0, i;
   result = i2c_init();
   if(result == 0)
   {
      result += get_register(i2c_dev, 0x69, 0x0b, &value);
      for(i = 0; i < SI5345_REVD_REG_CONFIG_NUM_REGS; i++)
    8500:	e0bffd17 	ldw	r2,-12(fp)
    8504:	10800044 	addi	r2,r2,1
    8508:	e0bffd15 	stw	r2,-12(fp)
    850c:	e0bffd17 	ldw	r2,-12(fp)
    8510:	10808390 	cmplti	r2,r2,526
    8514:	103fda1e 	bne	r2,zero,8480 <_gp+0xffff5628>
    8518:	00000106 	br	8520 <main+0x100>
         reg = si5345_revd_registers[i].address;
         value = si5345_revd_registers[i].value;
         result = set_register(i2c_dev, 0x69, reg, value);
         if(result != 0)
         {
            break;
    851c:	0001883a 	nop
   }
   else
   {
      // error
   }
   if(result == 0)
    8520:	e0bffc17 	ldw	r2,-16(fp)
    8524:	1000041e 	bne	r2,zero,8538 <main+0x118>
   {
      alt_putstr("PLL configuration done!\n");
    8528:	01000074 	movhi	r4,1
    852c:	212b7704 	addi	r4,r4,-21028
    8530:	00086740 	call	8674 <alt_putstr>
    8534:	00000306 	br	8544 <main+0x124>
   }
   else
   {
      alt_putstr("PLL configuration faied!\n");
    8538:	01000074 	movhi	r4,1
    853c:	212b7e04 	addi	r4,r4,-21000
    8540:	00086740 	call	8674 <alt_putstr>
   }

   /* Event loop never exits. */
   while (1);
    8544:	003fff06 	br	8544 <_gp+0xffff56ec>

00008548 <memset>:
    8548:	2005883a 	mov	r2,r4
    854c:	2007883a 	mov	r3,r4
    8550:	218d883a 	add	r6,r4,r6
    8554:	19800326 	beq	r3,r6,8564 <memset+0x1c>
    8558:	19400005 	stb	r5,0(r3)
    855c:	18c00044 	addi	r3,r3,1
    8560:	003ffc06 	br	8554 <_gp+0xffff56fc>
    8564:	f800283a 	ret

00008568 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8568:	deffff04 	addi	sp,sp,-4
    856c:	01000074 	movhi	r4,1
    8570:	01400074 	movhi	r5,1
    8574:	dfc00015 	stw	ra,0(sp)
    8578:	212b8804 	addi	r4,r4,-20960
    857c:	296b9b04 	addi	r5,r5,-20884

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8580:	2140061e 	bne	r4,r5,859c <alt_load+0x34>
    8584:	01000074 	movhi	r4,1
    8588:	01400074 	movhi	r5,1
    858c:	21200804 	addi	r4,r4,-32736
    8590:	29600804 	addi	r5,r5,-32736
    8594:	2140121e 	bne	r4,r5,85e0 <alt_load+0x78>
    8598:	00000b06 	br	85c8 <alt_load+0x60>
    859c:	00c00074 	movhi	r3,1
    85a0:	18eb9b04 	addi	r3,r3,-20884
    85a4:	1907c83a 	sub	r3,r3,r4
    85a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    85ac:	10fff526 	beq	r2,r3,8584 <_gp+0xffff572c>
    {
      *to++ = *from++;
    85b0:	114f883a 	add	r7,r2,r5
    85b4:	39c00017 	ldw	r7,0(r7)
    85b8:	110d883a 	add	r6,r2,r4
    85bc:	10800104 	addi	r2,r2,4
    85c0:	31c00015 	stw	r7,0(r6)
    85c4:	003ff906 	br	85ac <_gp+0xffff5754>
    85c8:	01000074 	movhi	r4,1
    85cc:	01400074 	movhi	r5,1
    85d0:	21275804 	addi	r4,r4,-25248
    85d4:	29675804 	addi	r5,r5,-25248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    85d8:	2140101e 	bne	r4,r5,861c <alt_load+0xb4>
    85dc:	00000b06 	br	860c <alt_load+0xa4>
    85e0:	00c00074 	movhi	r3,1
    85e4:	18e06004 	addi	r3,r3,-32384
    85e8:	1907c83a 	sub	r3,r3,r4
    85ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
    85f0:	10fff526 	beq	r2,r3,85c8 <_gp+0xffff5770>
    {
      *to++ = *from++;
    85f4:	114f883a 	add	r7,r2,r5
    85f8:	39c00017 	ldw	r7,0(r7)
    85fc:	110d883a 	add	r6,r2,r4
    8600:	10800104 	addi	r2,r2,4
    8604:	31c00015 	stw	r7,0(r6)
    8608:	003ff906 	br	85f0 <_gp+0xffff5798>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    860c:	00098e00 	call	98e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8610:	dfc00017 	ldw	ra,0(sp)
    8614:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8618:	00099c41 	jmpi	99c4 <alt_icache_flush_all>
    861c:	00c00074 	movhi	r3,1
    8620:	18eb8804 	addi	r3,r3,-20960
    8624:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8628:	0005883a 	mov	r2,zero
  {
    while( to != end )
    862c:	18bff726 	beq	r3,r2,860c <_gp+0xffff57b4>
    {
      *to++ = *from++;
    8630:	114f883a 	add	r7,r2,r5
    8634:	39c00017 	ldw	r7,0(r7)
    8638:	110d883a 	add	r6,r2,r4
    863c:	10800104 	addi	r2,r2,4
    8640:	31c00015 	stw	r7,0(r6)
    8644:	003ff906 	br	862c <_gp+0xffff57d4>

00008648 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8648:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    864c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8650:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8654:	00086b00 	call	86b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8658:	00086d00 	call	86d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    865c:	d1a01917 	ldw	r6,-32668(gp)
    8660:	d1601a17 	ldw	r5,-32664(gp)
    8664:	d1201b17 	ldw	r4,-32660(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8668:	dfc00017 	ldw	ra,0(sp)
    866c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8670:	00084201 	jmpi	8420 <main>

00008674 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8674:	defffe04 	addi	sp,sp,-8
    8678:	dc000015 	stw	r16,0(sp)
    867c:	dfc00115 	stw	ra,4(sp)
    8680:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8684:	0009b680 	call	9b68 <strlen>
    8688:	01000074 	movhi	r4,1
    868c:	000f883a 	mov	r7,zero
    8690:	100d883a 	mov	r6,r2
    8694:	800b883a 	mov	r5,r16
    8698:	212b9604 	addi	r4,r4,-20904
#else
    return fputs(str, stdout);
#endif
#endif
}
    869c:	dfc00117 	ldw	ra,4(sp)
    86a0:	dc000017 	ldw	r16,0(sp)
    86a4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    86a8:	00098341 	jmpi	9834 <altera_avalon_jtag_uart_write>

000086ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    86ac:	00098681 	jmpi	9868 <alt_busy_sleep>

000086b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    86b0:	deffff04 	addi	sp,sp,-4
    86b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    86b8:	0009abc0 	call	9abc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    86bc:	00800044 	movi	r2,1
    86c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    86c4:	dfc00017 	ldw	ra,0(sp)
    86c8:	dec00104 	addi	sp,sp,4
    86cc:	f800283a 	ret

000086d0 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C, i2c);
    86d0:	01000074 	movhi	r4,1
    86d4:	212b8804 	addi	r4,r4,-20960
    86d8:	000940c1 	jmpi	940c <alt_avalon_i2c_init>

000086dc <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    86dc:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
    86e0:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    86e4:	10a3dc04 	addi	r2,r2,-28816
    86e8:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
    86ec:	21400715 	stw	r5,28(r4)
    dev->control          = control;
    86f0:	20000815 	stw	zero,32(r4)
    86f4:	f800283a 	ret

000086f8 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    86f8:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
    86fc:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
    8700:	21800815 	stw	r6,32(r4)
    8704:	f800283a 	ret

00008708 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
    8708:	d1600104 	addi	r5,gp,-32764
    870c:	00099501 	jmpi	9950 <alt_find_dev>

00008710 <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    8710:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
    8714:	20800317 	ldw	r2,12(r4)
    8718:	10c00237 	ldwio	r3,8(r2)
   if (enable_status)
    871c:	18c0004c 	andi	r3,r3,1
    8720:	18000b1e 	bne	r3,zero,8750 <alt_avalon_i2c_enable+0x40>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
    8724:	21000617 	ldw	r4,24(r4)
    8728:	00c00074 	movhi	r3,1
    872c:	18e3dc04 	addi	r3,r3,-28816
    8730:	20c0011e 	bne	r4,r3,8738 <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
    8734:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
    8738:	10800204 	addi	r2,r2,8
    873c:	10c00037 	ldwio	r3,0(r2)
    8740:	18c00054 	ori	r3,r3,1
    8744:	10c00035 	stwio	r3,0(r2)
    8748:	0005883a 	mov	r2,zero
    874c:	f800283a 	ret
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   if (enable_status)
   {
     return ALT_AVALON_I2C_BUSY;
    8750:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
    8754:	f800283a 	ret

00008758 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    8758:	20800317 	ldw	r2,12(r4)
    875c:	10800204 	addi	r2,r2,8
    8760:	11000037 	ldwio	r4,0(r2)
    8764:	00ffff84 	movi	r3,-2
    8768:	20c6703a 	and	r3,r4,r3
    876c:	10c00035 	stwio	r3,0(r2)
    8770:	f800283a 	ret

00008774 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    8774:	20800d17 	ldw	r2,52(r4)
    8778:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    877c:	20800317 	ldw	r2,12(r4)
    8780:	10800237 	ldwio	r2,8(r2)
    8784:	1080008c 	andi	r2,r2,2
    8788:	1005d07a 	srai	r2,r2,1
    878c:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    8790:	20800317 	ldw	r2,12(r4)
    8794:	10800937 	ldwio	r2,36(r2)
    8798:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    879c:	20800317 	ldw	r2,12(r4)
    87a0:	10800837 	ldwio	r2,32(r2)
    87a4:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
    87a8:	20800317 	ldw	r2,12(r4)
    87ac:	10800a37 	ldwio	r2,40(r2)
    87b0:	2880030d 	sth	r2,12(r5)
    87b4:	f800283a 	ret

000087b8 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    87b8:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    87bc:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    87c0:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    87c4:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    87c8:	31c00037 	ldwio	r7,0(r6)
    87cc:	00ffff44 	movi	r3,-3
    87d0:	28800117 	ldw	r2,4(r5)
    87d4:	38c6703a 	and	r3,r7,r3
    87d8:	1085883a 	add	r2,r2,r2
    87dc:	1080008c 	andi	r2,r2,2
    87e0:	10c4b03a 	or	r2,r2,r3
    87e4:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
    87e8:	20800317 	ldw	r2,12(r4)
    87ec:	28c0020b 	ldhu	r3,8(r5)
    87f0:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
    87f4:	20800317 	ldw	r2,12(r4)
    87f8:	28c0028b 	ldhu	r3,10(r5)
    87fc:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
    8800:	20800317 	ldw	r2,12(r4)
    8804:	28c0030b 	ldhu	r3,12(r5)
    8808:	10c00a35 	stwio	r3,40(r2)
    880c:	f800283a 	ret

00008810 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
    8810:	28c0028b 	ldhu	r3,10(r5)
    8814:	18000f26 	beq	r3,zero,8854 <alt_avalon_i2c_master_config_speed_get+0x44>
    8818:	2940020b 	ldhu	r5,8(r5)
    881c:	28000d26 	beq	r5,zero,8854 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    8820:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    8824:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    8828:	194b883a 	add	r5,r3,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    882c:	dc000015 	stw	r16,0(sp)
    8830:	dfc00115 	stw	ra,4(sp)
    8834:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    8838:	0009c7c0 	call	9c7c <__udivsi3>
    883c:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
    8840:	0005883a 	mov	r2,zero
}
    8844:	dfc00117 	ldw	ra,4(sp)
    8848:	dc000017 	ldw	r16,0(sp)
    884c:	dec00204 	addi	sp,sp,8
    8850:	f800283a 	ret
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
    8854:	00bfff44 	movi	r2,-3
    8858:	f800283a 	ret

0000885c <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    885c:	00c001b4 	movhi	r3,6
    8860:	30bfffc4 	addi	r2,r6,-1
    8864:	18c69fc4 	addi	r3,r3,6783
    8868:	18801d36 	bltu	r3,r2,88e0 <alt_avalon_i2c_master_config_speed_set+0x84>
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    886c:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    8870:	defffd04 	addi	sp,sp,-12
    8874:	dc000015 	stw	r16,0(sp)
    8878:	2821883a 	mov	r16,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    887c:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    8880:	dc400115 	stw	r17,4(sp)
    8884:	dfc00215 	stw	ra,8(sp)
    8888:	3023883a 	mov	r17,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    888c:	0009c7c0 	call	9c7c <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    8890:	010000b4 	movhi	r4,2
    8894:	2121a804 	addi	r4,r4,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    8898:	10c00f04 	addi	r3,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    889c:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    88a0:	2440032e 	bgeu	r4,r17,88b0 <alt_avalon_i2c_master_config_speed_set+0x54>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    88a4:	01000044 	movi	r4,1
    88a8:	81000115 	stw	r4,4(r16)
    88ac:	00000106 	br	88b4 <alt_avalon_i2c_master_config_speed_set+0x58>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    88b0:	80000115 	stw	zero,4(r16)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    88b4:	80c0020d 	sth	r3,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    88b8:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    88bc:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    88c0:	10c5c83a 	sub	r2,r2,r3
    88c4:	8080030d 	sth	r2,12(r16)
    88c8:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
    88cc:	dfc00217 	ldw	ra,8(sp)
    88d0:	dc400117 	ldw	r17,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00304 	addi	sp,sp,12
    88dc:	f800283a 	ret
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    {
        return ALT_AVALON_I2C_RANGE;
    88e0:	00bfff04 	movi	r2,-4
    88e4:	f800283a 	ret

000088e8 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    88e8:	20800317 	ldw	r2,12(r4)
    88ec:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
    88f0:	1080004c 	andi	r2,r2,1
    88f4:	f800283a 	ret

000088f8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    88f8:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    88fc:	20c00317 	ldw	r3,12(r4)
    8900:	18800737 	ldwio	r2,28(r3)
    8904:	10000926 	beq	r2,zero,892c <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    8908:	38800017 	ldw	r2,0(r7)
    890c:	2885883a 	add	r2,r5,r2
    8910:	18c00137 	ldwio	r3,4(r3)
    8914:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
    8918:	38800017 	ldw	r2,0(r7)
    891c:	10800044 	addi	r2,r2,1
    8920:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    8924:	11bff51e 	bne	r2,r6,88fc <_gp+0xffff5aa4>
    8928:	303ff426 	beq	r6,zero,88fc <_gp+0xffff5aa4>
    892c:	f800283a 	ret

00008930 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    8930:	defffb04 	addi	sp,sp,-20
    8934:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    8938:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    893c:	dcc00315 	stw	r19,12(sp)
    8940:	dc800215 	stw	r18,8(sp)
    8944:	dc400115 	stw	r17,4(sp)
    8948:	dfc00415 	stw	ra,16(sp)
    894c:	2023883a 	mov	r17,r4
    8950:	2825883a 	mov	r18,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    8954:	8421a804 	addi	r16,r16,-31072
    {
      if (timeout<10) alt_busy_sleep(10000);
    8958:	04c00244 	movi	r19,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    895c:	88800317 	ldw	r2,12(r17)
    8960:	10800737 	ldwio	r2,28(r2)
    8964:	1000071e 	bne	r2,zero,8984 <alt_avalon_i2c_rx_read+0x54>
    {
      if (timeout<10) alt_busy_sleep(10000);
    8968:	9c000236 	bltu	r19,r16,8974 <alt_avalon_i2c_rx_read+0x44>
    896c:	0109c404 	movi	r4,10000
    8970:	00098680 	call	9868 <alt_busy_sleep>
    8974:	843fffc4 	addi	r16,r16,-1
      if (--timeout == 0)
    8978:	803ff81e 	bne	r16,zero,895c <_gp+0xffff5b04>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
    897c:	00bfff84 	movi	r2,-2
    8980:	00000106 	br	8988 <alt_avalon_i2c_rx_read+0x58>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    8984:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    8988:	88c00317 	ldw	r3,12(r17)
    898c:	18c00137 	ldwio	r3,4(r3)
    8990:	90c00005 	stb	r3,0(r18)
        
    return status;
}
    8994:	dfc00417 	ldw	ra,16(sp)
    8998:	dcc00317 	ldw	r19,12(sp)
    899c:	dc800217 	ldw	r18,8(sp)
    89a0:	dc400117 	ldw	r17,4(sp)
    89a4:	dc000017 	ldw	r16,0(sp)
    89a8:	dec00504 	addi	sp,sp,20
    89ac:	f800283a 	ret

000089b0 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
    89b0:	20800917 	ldw	r2,36(r4)
    89b4:	28800015 	stw	r2,0(r5)
    89b8:	f800283a 	ret

000089bc <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
    89bc:	21400915 	stw	r5,36(r4)
    89c0:	f800283a 	ret

000089c4 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    89c4:	20800317 	ldw	r2,12(r4)
    89c8:	10800437 	ldwio	r2,16(r2)
    89cc:	1080010c 	andi	r2,r2,4
    89d0:	10000226 	beq	r2,zero,89dc <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    89d4:	00bffec4 	movi	r2,-5
    89d8:	28800015 	stw	r2,0(r5)
    89dc:	f800283a 	ret

000089e0 <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
    89e0:	20800317 	ldw	r2,12(r4)
    89e4:	10800437 	ldwio	r2,16(r2)
    89e8:	1080020c 	andi	r2,r2,8
    89ec:	10000226 	beq	r2,zero,89f8 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    89f0:	00bffe84 	movi	r2,-6
    89f4:	28800015 	stw	r2,0(r5)
    89f8:	f800283a 	ret

000089fc <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    89fc:	defff804 	addi	sp,sp,-32
    8a00:	dd400615 	stw	r21,24(sp)
    8a04:	dd000515 	stw	r20,20(sp)
    8a08:	dcc00415 	stw	r19,16(sp)
    8a0c:	dc800315 	stw	r18,12(sp)
    8a10:	dc400215 	stw	r17,8(sp)
    8a14:	dc000115 	stw	r16,4(sp)
    8a18:	dfc00715 	stw	ra,28(sp)
    8a1c:	2029883a 	mov	r20,r4
    8a20:	2823883a 	mov	r17,r5
    8a24:	3025883a 	mov	r18,r6
    8a28:	3821883a 	mov	r16,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    8a2c:	d8000015 	stw	zero,0(sp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    8a30:	04c9c404 	movi	r19,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
    8a34:	05400244 	movi	r21,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    8a38:	a0c00317 	ldw	r3,12(r20)
    8a3c:	18800437 	ldwio	r2,16(r3)
    8a40:	1080004c 	andi	r2,r2,1
    8a44:	1000071e 	bne	r2,zero,8a64 <alt_avalon_i2c_cmd_write+0x68>
    {
      if (timeout<10) alt_busy_sleep(10000);    
    8a48:	acc00236 	bltu	r21,r19,8a54 <alt_avalon_i2c_cmd_write+0x58>
    8a4c:	0109c404 	movi	r4,10000
    8a50:	00098680 	call	9868 <alt_busy_sleep>
    8a54:	9cffffc4 	addi	r19,r19,-1
      if (--timeout == 0)
    8a58:	983ff71e 	bne	r19,zero,8a38 <_gp+0xffff5be0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
    8a5c:	00bfff84 	movi	r2,-2
    8a60:	00000f06 	br	8aa0 <alt_avalon_i2c_cmd_write+0xa4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
    8a64:	94803fcc 	andi	r18,r18,255
    8a68:	9024927a 	slli	r18,r18,9
    8a6c:	84003fcc 	andi	r16,r16,255
    8a70:	8020923a 	slli	r16,r16,8
    8a74:	8c403fcc 	andi	r17,r17,255
    8a78:	9462b03a 	or	r17,r18,r17
    8a7c:	8c20b03a 	or	r16,r17,r16
    8a80:	1c000035 	stwio	r16,0(r3)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    8a84:	d80b883a 	mov	r5,sp
    8a88:	a009883a 	mov	r4,r20
    8a8c:	00089c40 	call	89c4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    8a90:	d80b883a 	mov	r5,sp
    8a94:	a009883a 	mov	r4,r20
    8a98:	00089e00 	call	89e0 <alt_avalon_i2c_check_arblost>
    
    return status;
    8a9c:	d8800017 	ldw	r2,0(sp)
}
    8aa0:	dfc00717 	ldw	ra,28(sp)
    8aa4:	dd400617 	ldw	r21,24(sp)
    8aa8:	dd000517 	ldw	r20,20(sp)
    8aac:	dcc00417 	ldw	r19,16(sp)
    8ab0:	dc800317 	ldw	r18,12(sp)
    8ab4:	dc400217 	ldw	r17,8(sp)
    8ab8:	dc000117 	ldw	r16,4(sp)
    8abc:	dec00804 	addi	sp,sp,32
    8ac0:	f800283a 	ret

00008ac4 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    8ac4:	22000d17 	ldw	r8,52(r4)
    8ac8:	01c00044 	movi	r7,1
    8acc:	31803fcc 	andi	r6,r6,255
    8ad0:	20800917 	ldw	r2,36(r4)
    8ad4:	41c0141e 	bne	r8,r7,8b28 <alt_avalon_i2c_send_address+0x64>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    8ad8:	10de0014 	ori	r3,r2,30720
    8adc:	1806d1fa 	srli	r3,r3,7
    8ae0:	00bfff84 	movi	r2,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    8ae4:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    8ae8:	1886703a 	and	r3,r3,r2
    8aec:	194ab03a 	or	r5,r3,r5
    8af0:	000f883a 	mov	r7,zero
    8af4:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    8af8:	dc000015 	stw	r16,0(sp)
    8afc:	dfc00115 	stw	ra,4(sp)
    8b00:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    8b04:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    8b08:	81400903 	ldbu	r5,36(r16)
    8b0c:	000f883a 	mov	r7,zero
    8b10:	000d883a 	mov	r6,zero
    8b14:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
    8b18:	dfc00117 	ldw	ra,4(sp)
    8b1c:	dc000017 	ldw	r16,0(sp)
    8b20:	dec00204 	addi	sp,sp,8
    8b24:	00000406 	br	8b38 <alt_avalon_i2c_send_address+0x74>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    8b28:	1085883a 	add	r2,r2,r2
    8b2c:	114ab03a 	or	r5,r2,r5
    8b30:	000f883a 	mov	r7,zero
    8b34:	29403fcc 	andi	r5,r5,255
    8b38:	00089fc1 	jmpi	89fc <alt_avalon_i2c_cmd_write>

00008b3c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    8b3c:	defff904 	addi	sp,sp,-28
    8b40:	dc800315 	stw	r18,12(sp)
    8b44:	dfc00615 	stw	ra,24(sp)
    8b48:	dd000515 	stw	r20,20(sp)
    8b4c:	dcc00415 	stw	r19,16(sp)
    8b50:	dc400215 	stw	r17,8(sp)
    8b54:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    8b58:	d8000015 	stw	zero,0(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    8b5c:	dc800717 	ldw	r18,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    8b60:	30003e26 	beq	r6,zero,8c5c <alt_avalon_i2c_master_transmit+0x120>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    8b64:	3cc03fcc 	andi	r19,r7,255
    8b68:	2021883a 	mov	r16,r4
    8b6c:	2823883a 	mov	r17,r5
    8b70:	3029883a 	mov	r20,r6
    8b74:	9800061e 	bne	r19,zero,8b90 <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    8b78:	00087100 	call	8710 <alt_avalon_i2c_enable>
    8b7c:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    8b80:	1000371e 	bne	r2,zero,8c60 <alt_avalon_i2c_master_transmit+0x124>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    8b84:	80800317 	ldw	r2,12(r16)
    8b88:	00c00704 	movi	r3,28
    8b8c:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    8b90:	980d883a 	mov	r6,r19
    8b94:	000b883a 	mov	r5,zero
    8b98:	8009883a 	mov	r4,r16
    8b9c:	0008ac40 	call	8ac4 <alt_avalon_i2c_send_address>
    8ba0:	d8800015 	stw	r2,0(sp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    8ba4:	1000171e 	bne	r2,zero,8c04 <alt_avalon_i2c_master_transmit+0xc8>
    8ba8:	a4ffffc4 	addi	r19,r20,-1
    8bac:	8ce7883a 	add	r19,r17,r19
    8bb0:	d8800017 	ldw	r2,0(sp)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    8bb4:	8cc00926 	beq	r17,r19,8bdc <alt_avalon_i2c_master_transmit+0xa0>
    8bb8:	1000081e 	bne	r2,zero,8bdc <alt_avalon_i2c_master_transmit+0xa0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    8bbc:	89400003 	ldbu	r5,0(r17)
    8bc0:	000f883a 	mov	r7,zero
    8bc4:	000d883a 	mov	r6,zero
    8bc8:	8009883a 	mov	r4,r16
    8bcc:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    8bd0:	d8800015 	stw	r2,0(sp)
            
            ++buffer;
    8bd4:	8c400044 	addi	r17,r17,1
    8bd8:	003ff506 	br	8bb0 <_gp+0xffff5d58>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    8bdc:	1000091e 	bne	r2,zero,8c04 <alt_avalon_i2c_master_transmit+0xc8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    8be0:	89400003 	ldbu	r5,0(r17)
    8be4:	94803fcc 	andi	r18,r18,255
    8be8:	900f883a 	mov	r7,r18
    8bec:	000d883a 	mov	r6,zero
    8bf0:	8009883a 	mov	r4,r16
    8bf4:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    8bf8:	d8800015 	stw	r2,0(sp)
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    8bfc:	9000011e 	bne	r18,zero,8c04 <alt_avalon_i2c_master_transmit+0xc8>
    8c00:	10001426 	beq	r2,zero,8c54 <alt_avalon_i2c_master_transmit+0x118>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    8c04:	0149c404 	movi	r5,10000
    8c08:	a009883a 	mov	r4,r20
    8c0c:	0009d380 	call	9d38 <__mulsi3>
    8c10:	1023883a 	mov	r17,r2
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    8c14:	04800244 	movi	r18,9
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
    8c18:	8009883a 	mov	r4,r16
    8c1c:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    8c20:	10000726 	beq	r2,zero,8c40 <alt_avalon_i2c_master_transmit+0x104>
        {
            if (timeout<10) alt_busy_sleep(10000);
    8c24:	94400236 	bltu	r18,r17,8c30 <alt_avalon_i2c_master_transmit+0xf4>
    8c28:	0109c404 	movi	r4,10000
    8c2c:	00098680 	call	9868 <alt_busy_sleep>
            if (--timeout == 0)
    8c30:	8c7fffc4 	addi	r17,r17,-1
    8c34:	883ff81e 	bne	r17,zero,8c18 <_gp+0xffff5dc0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    8c38:	00bfff84 	movi	r2,-2
    8c3c:	d8800015 	stw	r2,0(sp)
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
    8c40:	8009883a 	mov	r4,r16
    8c44:	d80b883a 	mov	r5,sp
    8c48:	00089c40 	call	89c4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    8c4c:	8009883a 	mov	r4,r16
    8c50:	00087580 	call	8758 <alt_avalon_i2c_disable>
    }


    return status;
    8c54:	d8800017 	ldw	r2,0(sp)
    8c58:	00000106 	br	8c60 <alt_avalon_i2c_master_transmit+0x124>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    8c5c:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
    8c60:	dfc00617 	ldw	ra,24(sp)
    8c64:	dd000517 	ldw	r20,20(sp)
    8c68:	dcc00417 	ldw	r19,16(sp)
    8c6c:	dc800317 	ldw	r18,12(sp)
    8c70:	dc400217 	ldw	r17,8(sp)
    8c74:	dc000117 	ldw	r16,4(sp)
    8c78:	dec00704 	addi	sp,sp,28
    8c7c:	f800283a 	ret

00008c80 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    8c80:	defff604 	addi	sp,sp,-40
    8c84:	dd000615 	stw	r20,24(sp)
    8c88:	dfc00915 	stw	ra,36(sp)
    8c8c:	dd800815 	stw	r22,32(sp)
    8c90:	dd400715 	stw	r21,28(sp)
    8c94:	dcc00515 	stw	r19,20(sp)
    8c98:	dc800415 	stw	r18,16(sp)
    8c9c:	dc400315 	stw	r17,12(sp)
    8ca0:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    8ca4:	d8000115 	stw	zero,4(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    8ca8:	dd000a17 	ldw	r20,40(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    8cac:	30005626 	beq	r6,zero,8e08 <alt_avalon_i2c_master_receive+0x188>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    8cb0:	3c803fcc 	andi	r18,r7,255
    8cb4:	2023883a 	mov	r17,r4
    8cb8:	2821883a 	mov	r16,r5
    8cbc:	3027883a 	mov	r19,r6
    8cc0:	9000061e 	bne	r18,zero,8cdc <alt_avalon_i2c_master_receive+0x5c>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    8cc4:	00087100 	call	8710 <alt_avalon_i2c_enable>
    8cc8:	d8800115 	stw	r2,4(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    8ccc:	10004f1e 	bne	r2,zero,8e0c <alt_avalon_i2c_master_receive+0x18c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    8cd0:	88800317 	ldw	r2,12(r17)
    8cd4:	00c00704 	movi	r3,28
    8cd8:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    8cdc:	900d883a 	mov	r6,r18
    8ce0:	01400044 	movi	r5,1
    8ce4:	8809883a 	mov	r4,r17
    8ce8:	0008ac40 	call	8ac4 <alt_avalon_i2c_send_address>
    8cec:	d8800115 	stw	r2,4(sp)

    if (status == ALT_AVALON_I2C_SUCCESS)
    8cf0:	10001f1e 	bne	r2,zero,8d70 <alt_avalon_i2c_master_receive+0xf0>
    8cf4:	002b883a 	mov	r21,zero
    8cf8:	0025883a 	mov	r18,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    8cfc:	9dbfffc4 	addi	r22,r19,-1
    8d00:	d8800117 	ldw	r2,4(sp)
    8d04:	ad800836 	bltu	r21,r22,8d28 <alt_avalon_i2c_master_receive+0xa8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    8d08:	10001a1e 	bne	r2,zero,8d74 <alt_avalon_i2c_master_receive+0xf4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    8d0c:	a1c03fcc 	andi	r7,r20,255
    8d10:	000d883a 	mov	r6,zero
    8d14:	000b883a 	mov	r5,zero
    8d18:	8809883a 	mov	r4,r17
    8d1c:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    8d20:	d8800115 	stw	r2,4(sp)
    8d24:	00001306 	br	8d74 <alt_avalon_i2c_master_receive+0xf4>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    8d28:	103ff71e 	bne	r2,zero,8d08 <_gp+0xffff5eb0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    8d2c:	000f883a 	mov	r7,zero
    8d30:	000d883a 	mov	r6,zero
    8d34:	000b883a 	mov	r5,zero
    8d38:	8809883a 	mov	r4,r17
    8d3c:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    8d40:	d8800115 	stw	r2,4(sp)
            bytes_written++;
    8d44:	ad400044 	addi	r21,r21,1
            if (status == ALT_AVALON_I2C_SUCCESS)
    8d48:	103fed1e 	bne	r2,zero,8d00 <_gp+0xffff5ea8>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
    8d4c:	800b883a 	mov	r5,r16
    8d50:	d80f883a 	mov	r7,sp
    8d54:	000d883a 	mov	r6,zero
    8d58:	8809883a 	mov	r4,r17
    8d5c:	00088f80 	call	88f8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
    8d60:	d8800017 	ldw	r2,0(sp)
    8d64:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
    8d68:	90a5883a 	add	r18,r18,r2
    8d6c:	003fe406 	br	8d00 <_gp+0xffff5ea8>
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    8d70:	0025883a 	mov	r18,zero
    8d74:	9425c83a 	sub	r18,r18,r16
    8d78:	8485883a 	add	r2,r16,r18
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
    8d7c:	14c0082e 	bgeu	r2,r19,8da0 <alt_avalon_i2c_master_receive+0x120>
    8d80:	d8800117 	ldw	r2,4(sp)
    8d84:	10000a1e 	bne	r2,zero,8db0 <alt_avalon_i2c_master_receive+0x130>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
    8d88:	800b883a 	mov	r5,r16
    8d8c:	8809883a 	mov	r4,r17
    8d90:	00089300 	call	8930 <alt_avalon_i2c_rx_read>
    8d94:	d8800115 	stw	r2,4(sp)
        buffer++;
    8d98:	84000044 	addi	r16,r16,1
    8d9c:	003ff606 	br	8d78 <_gp+0xffff5f20>
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    8da0:	a5003fcc 	andi	r20,r20,255
    8da4:	a000021e 	bne	r20,zero,8db0 <alt_avalon_i2c_master_receive+0x130>
    8da8:	d8800117 	ldw	r2,4(sp)
    8dac:	10001426 	beq	r2,zero,8e00 <alt_avalon_i2c_master_receive+0x180>
    {
        timeout=10000 * size;
    8db0:	0149c404 	movi	r5,10000
    8db4:	9809883a 	mov	r4,r19
    8db8:	0009d380 	call	9d38 <__mulsi3>
    8dbc:	1021883a 	mov	r16,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    8dc0:	04800244 	movi	r18,9

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    8dc4:	8809883a 	mov	r4,r17
    8dc8:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    8dcc:	10000726 	beq	r2,zero,8dec <alt_avalon_i2c_master_receive+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
    8dd0:	94000236 	bltu	r18,r16,8ddc <alt_avalon_i2c_master_receive+0x15c>
    8dd4:	0109c404 	movi	r4,10000
    8dd8:	00098680 	call	9868 <alt_busy_sleep>
            if (--timeout == 0)
    8ddc:	843fffc4 	addi	r16,r16,-1
    8de0:	803ff81e 	bne	r16,zero,8dc4 <_gp+0xffff5f6c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    8de4:	00bfff84 	movi	r2,-2
    8de8:	d8800115 	stw	r2,4(sp)
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
    8dec:	8809883a 	mov	r4,r17
    8df0:	d9400104 	addi	r5,sp,4
    8df4:	00089c40 	call	89c4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    8df8:	8809883a 	mov	r4,r17
    8dfc:	00087580 	call	8758 <alt_avalon_i2c_disable>
    }

    return status;
    8e00:	d8800117 	ldw	r2,4(sp)
    8e04:	00000106 	br	8e0c <alt_avalon_i2c_master_receive+0x18c>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    8e08:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
    8e0c:	dfc00917 	ldw	ra,36(sp)
    8e10:	dd800817 	ldw	r22,32(sp)
    8e14:	dd400717 	ldw	r21,28(sp)
    8e18:	dd000617 	ldw	r20,24(sp)
    8e1c:	dcc00517 	ldw	r19,20(sp)
    8e20:	dc800417 	ldw	r18,16(sp)
    8e24:	dc400317 	ldw	r17,12(sp)
    8e28:	dc000217 	ldw	r16,8(sp)
    8e2c:	dec00a04 	addi	sp,sp,40
    8e30:	f800283a 	ret

00008e34 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
    8e34:	20c00317 	ldw	r3,12(r4)
    8e38:	19000437 	ldwio	r4,16(r3)
    8e3c:	18800337 	ldwio	r2,12(r3)
    8e40:	2084703a 	and	r2,r4,r2
    8e44:	28800015 	stw	r2,0(r5)
    8e48:	f800283a 	ret

00008e4c <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
    8e4c:	20800317 	ldw	r2,12(r4)
    8e50:	10800437 	ldwio	r2,16(r2)
    8e54:	28800015 	stw	r2,0(r5)
    8e58:	f800283a 	ret

00008e5c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    8e5c:	20800317 	ldw	r2,12(r4)
    8e60:	11400435 	stwio	r5,16(r2)
    8e64:	f800283a 	ret

00008e68 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    8e68:	20800317 	ldw	r2,12(r4)
    8e6c:	10800337 	ldwio	r2,12(r2)
    8e70:	108007cc 	andi	r2,r2,31
    8e74:	28800015 	stw	r2,0(r5)
    8e78:	f800283a 	ret

00008e7c <alt_avalon_i2c_int_disable>:
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    8e7c:	defffc04 	addi	sp,sp,-16
    8e80:	dc000115 	stw	r16,4(sp)
    8e84:	2821883a 	mov	r16,r5
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    8e88:	d80b883a 	mov	r5,sp
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    8e8c:	dc400215 	stw	r17,8(sp)
    8e90:	dfc00315 	stw	ra,12(sp)
    8e94:	2023883a 	mov	r17,r4
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    8e98:	0008e680 	call	8e68 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
    8e9c:	d8800017 	ldw	r2,0(sp)
    8ea0:	040a303a 	nor	r5,zero,r16
    8ea4:	288a703a 	and	r5,r5,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    8ea8:	88800317 	ldw	r2,12(r17)
    8eac:	294007cc 	andi	r5,r5,31
    8eb0:	11400335 	stwio	r5,12(r2)
}
    8eb4:	dfc00317 	ldw	ra,12(sp)
    8eb8:	dc400217 	ldw	r17,8(sp)
    8ebc:	dc000117 	ldw	r16,4(sp)
    8ec0:	dec00404 	addi	sp,sp,16
    8ec4:	f800283a 	ret

00008ec8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    8ec8:	defffd04 	addi	sp,sp,-12
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    8ecc:	014007c4 	movi	r5,31
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    8ed0:	dc000015 	stw	r16,0(sp)
    8ed4:	dfc00215 	stw	ra,8(sp)
    8ed8:	2021883a 	mov	r16,r4
    8edc:	dc400115 	stw	r17,4(sp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    8ee0:	0008e7c0 	call	8e7c <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    8ee4:	80800317 	ldw	r2,12(r16)
    8ee8:	00c00704 	movi	r3,28
    8eec:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    8ef0:	80c00617 	ldw	r3,24(r16)
    8ef4:	18000726 	beq	r3,zero,8f14 <alt_avalon_i2c_irq+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ef8:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8efc:	00bfff84 	movi	r2,-2
    8f00:	8884703a 	and	r2,r17,r2
    8f04:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
    8f08:	8009883a 	mov	r4,r16
    8f0c:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f10:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
    8f14:	dfc00217 	ldw	ra,8(sp)
    8f18:	dc400117 	ldw	r17,4(sp)
    8f1c:	dc000017 	ldw	r16,0(sp)
    8f20:	dec00304 	addi	sp,sp,12
    8f24:	f800283a 	ret

00008f28 <alt_avalon_i2c_int_enable>:
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    8f28:	defffc04 	addi	sp,sp,-16
    8f2c:	dc400215 	stw	r17,8(sp)
    8f30:	2823883a 	mov	r17,r5
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    8f34:	d80b883a 	mov	r5,sp
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    8f38:	dc000115 	stw	r16,4(sp)
    8f3c:	dfc00315 	stw	ra,12(sp)
    8f40:	2021883a 	mov	r16,r4
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    8f44:	0008e680 	call	8e68 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
    8f48:	d9400017 	ldw	r5,0(sp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    8f4c:	80800317 	ldw	r2,12(r16)
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    8f50:	894ab03a 	or	r5,r17,r5
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    8f54:	294007cc 	andi	r5,r5,31
    8f58:	11400335 	stwio	r5,12(r2)
}
    8f5c:	dfc00317 	ldw	ra,12(sp)
    8f60:	dc400217 	ldw	r17,8(sp)
    8f64:	dc000117 	ldw	r16,4(sp)
    8f68:	dec00404 	addi	sp,sp,16
    8f6c:	f800283a 	ret

00008f70 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    8f70:	defffb04 	addi	sp,sp,-20
    8f74:	dc000115 	stw	r16,4(sp)
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
    8f78:	24000717 	ldw	r16,28(r4)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    8f7c:	dc800315 	stw	r18,12(sp)
    8f80:	dc400215 	stw	r17,8(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    8f84:	84800217 	ldw	r18,8(r16)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    8f88:	dfc00415 	stw	ra,16(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    8f8c:	00800084 	movi	r2,2

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    8f90:	2023883a 	mov	r17,r4
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    8f94:	90800326 	beq	r18,r2,8fa4 <optional_irq_callback+0x34>

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    8f98:	048000b4 	movhi	r18,2
    8f9c:	94a1a804 	addi	r18,r18,-31072
    8fa0:	00001506 	br	8ff8 <optional_irq_callback+0x88>
   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
    8fa4:	81800117 	ldw	r6,4(r16)
    8fa8:	81400017 	ldw	r5,0(r16)
    8fac:	d80f883a 	mov	r7,sp
    8fb0:	00088f80 	call	88f8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
    8fb4:	d8c00017 	ldw	r3,0(sp)
    8fb8:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
    8fbc:	81000017 	ldw	r4,0(r16)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    8fc0:	10c5c83a 	sub	r2,r2,r3
       irq->buffer+=bytes_read;
    8fc4:	20c7883a 	add	r3,r4,r3
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    8fc8:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
    8fcc:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
    8fd0:	103ff126 	beq	r2,zero,8f98 <_gp+0xffff6140>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    8fd4:	88800317 	ldw	r2,12(r17)
    8fd8:	00c00704 	movi	r3,28
    8fdc:	10c00435 	stwio	r3,16(r2)
       if (irq->size > 0)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
    8fe0:	900b883a 	mov	r5,r18
    8fe4:	8809883a 	mov	r4,r17
    8fe8:	0008f280 	call	8f28 <alt_avalon_i2c_int_enable>
    8fec:	00000806 	br	9010 <optional_irq_callback+0xa0>
    8ff0:	94bfffc4 	addi	r18,r18,-1
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
    8ff4:	90000326 	beq	r18,zero,9004 <optional_irq_callback+0x94>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    8ff8:	8809883a 	mov	r4,r17
    8ffc:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    9000:	103ffb1e 	bne	r2,zero,8ff0 <_gp+0xffff6198>
         break;
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
    9004:	8809883a 	mov	r4,r17
    9008:	00087580 	call	8758 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
    900c:	80000215 	stw	zero,8(r16)
}
    9010:	dfc00417 	ldw	ra,16(sp)
    9014:	dc800317 	ldw	r18,12(sp)
    9018:	dc400217 	ldw	r17,8(sp)
    901c:	dc000117 	ldw	r16,4(sp)
    9020:	dec00504 	addi	sp,sp,20
    9024:	f800283a 	ret

00009028 <alt_avalon_i2c_interrupt_transaction_status>:
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    9028:	defff804 	addi	sp,sp,-32
    902c:	dc400415 	stw	r17,16(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    9030:	24400717 	ldw	r17,28(r4)
    alt_u32 timeout=10000 * irq_data->size + 10000;
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    9034:	d9400104 	addi	r5,sp,4
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    9038:	dfc00715 	stw	ra,28(sp)
    903c:	dc800515 	stw	r18,20(sp)
    9040:	dc000315 	stw	r16,12(sp)
    9044:	dcc00615 	stw	r19,24(sp)
    9048:	2021883a 	mov	r16,r4
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    904c:	d8000215 	stw	zero,8(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    9050:	8c800117 	ldw	r18,4(r17)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    9054:	0008e680 	call	8e68 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
    9058:	d9400117 	ldw	r5,4(sp)
    905c:	8009883a 	mov	r4,r16
    9060:	0008e7c0 	call	8e7c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    9064:	d9400204 	addi	r5,sp,8
    9068:	8009883a 	mov	r4,r16
    906c:	00089c40 	call	89c4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    9070:	d8c00217 	ldw	r3,8(sp)
    9074:	88800217 	ldw	r2,8(r17)
    9078:	18001a26 	beq	r3,zero,90e4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
    {
      if (irq_data->irq_busy)
    907c:	10001726 	beq	r2,zero,90dc <alt_avalon_i2c_interrupt_transaction_status+0xb4>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    9080:	91000044 	addi	r4,r18,1
    9084:	0149c404 	movi	r5,10000
    9088:	0009d380 	call	9d38 <__mulsi3>
    908c:	1025883a 	mov	r18,r2
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    9090:	04c00244 	movi	r19,9

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
    9094:	8009883a 	mov	r4,r16
    9098:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    909c:	10000726 	beq	r2,zero,90bc <alt_avalon_i2c_interrupt_transaction_status+0x94>
        {
              if (timeout<10) alt_busy_sleep(10000);
    90a0:	9c800236 	bltu	r19,r18,90ac <alt_avalon_i2c_interrupt_transaction_status+0x84>
    90a4:	0109c404 	movi	r4,10000
    90a8:	00098680 	call	9868 <alt_busy_sleep>
              if (--timeout == 0)
    90ac:	94bfffc4 	addi	r18,r18,-1
    90b0:	903ff81e 	bne	r18,zero,9094 <_gp+0xffff623c>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
    90b4:	00bfff84 	movi	r2,-2
    90b8:	d8800215 	stw	r2,8(sp)
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
    90bc:	89400017 	ldw	r5,0(r17)
    90c0:	d80f883a 	mov	r7,sp
    90c4:	000d883a 	mov	r6,zero
    90c8:	8009883a 	mov	r4,r16
    90cc:	00088f80 	call	88f8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
    90d0:	8009883a 	mov	r4,r16
    90d4:	00087580 	call	8758 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
    90d8:	88000215 	stw	zero,8(r17)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
    90dc:	d8800217 	ldw	r2,8(sp)
    90e0:	00000506 	br	90f8 <alt_avalon_i2c_interrupt_transaction_status+0xd0>
    }
    
    if (irq_data->irq_busy)
    90e4:	10000426 	beq	r2,zero,90f8 <alt_avalon_i2c_interrupt_transaction_status+0xd0>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
    90e8:	d9400117 	ldw	r5,4(sp)
    90ec:	8009883a 	mov	r4,r16
    90f0:	0008f280 	call	8f28 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
    90f4:	00bffe44 	movi	r2,-7
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
    90f8:	dfc00717 	ldw	ra,28(sp)
    90fc:	dcc00617 	ldw	r19,24(sp)
    9100:	dc800517 	ldw	r18,20(sp)
    9104:	dc400417 	ldw	r17,16(sp)
    9108:	dc000317 	ldw	r16,12(sp)
    910c:	dec00804 	addi	sp,sp,32
    9110:	f800283a 	ret

00009114 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
    9114:	20800317 	ldw	r2,12(r4)
    9118:	10800237 	ldwio	r2,8(r2)
    911c:	10800c0c 	andi	r2,r2,48
    9120:	1005d13a 	srai	r2,r2,4
    9124:	28800015 	stw	r2,0(r5)
    9128:	f800283a 	ret

0000912c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    912c:	20c00317 	ldw	r3,12(r4)
    9130:	18c00204 	addi	r3,r3,8
    9134:	19000037 	ldwio	r4,0(r3)
    9138:	00bff3c4 	movi	r2,-49
    913c:	280a913a 	slli	r5,r5,4
    9140:	2084703a 	and	r2,r4,r2
    9144:	29400c0c 	andi	r5,r5,48
    9148:	288ab03a 	or	r5,r5,r2
    914c:	19400035 	stwio	r5,0(r3)
    9150:	f800283a 	ret

00009154 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    9154:	defff704 	addi	sp,sp,-36
    9158:	dcc00315 	stw	r19,12(sp)
    915c:	dfc00815 	stw	ra,32(sp)
    9160:	ddc00715 	stw	r23,28(sp)
    9164:	dd800615 	stw	r22,24(sp)
    9168:	dd400515 	stw	r21,20(sp)
    916c:	dd000415 	stw	r20,16(sp)
    9170:	dc800215 	stw	r18,8(sp)
    9174:	dc400115 	stw	r17,4(sp)
    9178:	dc000015 	stw	r16,0(sp)
    917c:	dcc00917 	ldw	r19,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
    9180:	30004926 	beq	r6,zero,92a8 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    9184:	20c00617 	ldw	r3,24(r4)
    9188:	00800074 	movhi	r2,1
    918c:	10a3dc04 	addi	r2,r2,-28816
    9190:	2023883a 	mov	r17,r4
    9194:	1880461e 	bne	r3,r2,92b0 <alt_avalon_i2c_master_receive_using_interrupts+0x15c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    9198:	3c003fcc 	andi	r16,r7,255
    919c:	3025883a 	mov	r18,r6
    91a0:	282b883a 	mov	r21,r5
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    91a4:	25000717 	ldw	r20,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    91a8:	8000051e 	bne	r16,zero,91c0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    91ac:	00087100 	call	8710 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    91b0:	1000401e 	bne	r2,zero,92b4 <alt_avalon_i2c_master_receive_using_interrupts+0x160>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    91b4:	88800317 	ldw	r2,12(r17)
    91b8:	00c00704 	movi	r3,28
    91bc:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    91c0:	800d883a 	mov	r6,r16
    91c4:	01400044 	movi	r5,1
    91c8:	8809883a 	mov	r4,r17
    91cc:	0008ac40 	call	8ac4 <alt_avalon_i2c_send_address>
    91d0:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
    91d4:	1000151e 	bne	r2,zero,922c <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
    91d8:	002d883a 	mov	r22,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    91dc:	95ffffc4 	addi	r23,r18,-1
    91e0:	b5c0092e 	bgeu	r22,r23,9208 <alt_avalon_i2c_master_receive_using_interrupts+0xb4>
    91e4:	8000111e 	bne	r16,zero,922c <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    91e8:	000f883a 	mov	r7,zero
    91ec:	000d883a 	mov	r6,zero
    91f0:	000b883a 	mov	r5,zero
    91f4:	8809883a 	mov	r4,r17
    91f8:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    91fc:	1021883a 	mov	r16,r2
            bytes_written++;
    9200:	b5800044 	addi	r22,r22,1
    9204:	003ff606 	br	91e0 <_gp+0xffff6388>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    9208:	8000081e 	bne	r16,zero,922c <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    920c:	9cc03fcc 	andi	r19,r19,255
    9210:	980f883a 	mov	r7,r19
    9214:	000d883a 	mov	r6,zero
    9218:	000b883a 	mov	r5,zero
    921c:	8809883a 	mov	r4,r17
    9220:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    9224:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    9228:	10001226 	beq	r2,zero,9274 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        timeout=10000 * size;
    922c:	9009883a 	mov	r4,r18
    9230:	0149c404 	movi	r5,10000
    9234:	0009d380 	call	9d38 <__mulsi3>
    9238:	1025883a 	mov	r18,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    923c:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    9240:	8809883a 	mov	r4,r17
    9244:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    9248:	10000626 	beq	r2,zero,9264 <alt_avalon_i2c_master_receive_using_interrupts+0x110>
        {
            if (timeout<10) alt_busy_sleep(10000);
    924c:	9c800236 	bltu	r19,r18,9258 <alt_avalon_i2c_master_receive_using_interrupts+0x104>
    9250:	0109c404 	movi	r4,10000
    9254:	00098680 	call	9868 <alt_busy_sleep>
            if (--timeout == 0)
    9258:	94bfffc4 	addi	r18,r18,-1
    925c:	903ff81e 	bne	r18,zero,9240 <_gp+0xffff63e8>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    9260:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    9264:	8809883a 	mov	r4,r17
    9268:	00087580 	call	8758 <alt_avalon_i2c_disable>
    926c:	8005883a 	mov	r2,r16
    9270:	00001006 	br	92b4 <alt_avalon_i2c_master_receive_using_interrupts+0x160>
    }
    else
    {
       if (issue_stop)
    9274:	98000c26 	beq	r19,zero,92a8 <alt_avalon_i2c_master_receive_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9278:	88800317 	ldw	r2,12(r17)
    927c:	00c00704 	movi	r3,28
    9280:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
    9284:	000b883a 	mov	r5,zero
    9288:	8809883a 	mov	r4,r17
    928c:	000912c0 	call	912c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
    9290:	01400084 	movi	r5,2
    9294:	a1400215 	stw	r5,8(r20)
         
         irq_data->buffer = buffer;
    9298:	a5400015 	stw	r21,0(r20)
         irq_data->size = size;
    929c:	a4800115 	stw	r18,4(r20)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
    92a0:	8809883a 	mov	r4,r17
    92a4:	0008f280 	call	8f28 <alt_avalon_i2c_int_enable>
    92a8:	0005883a 	mov	r2,zero
    92ac:	00000106 	br	92b4 <alt_avalon_i2c_master_receive_using_interrupts+0x160>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    92b0:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
    92b4:	dfc00817 	ldw	ra,32(sp)
    92b8:	ddc00717 	ldw	r23,28(sp)
    92bc:	dd800617 	ldw	r22,24(sp)
    92c0:	dd400517 	ldw	r21,20(sp)
    92c4:	dd000417 	ldw	r20,16(sp)
    92c8:	dcc00317 	ldw	r19,12(sp)
    92cc:	dc800217 	ldw	r18,8(sp)
    92d0:	dc400117 	ldw	r17,4(sp)
    92d4:	dc000017 	ldw	r16,0(sp)
    92d8:	dec00904 	addi	sp,sp,36
    92dc:	f800283a 	ret

000092e0 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    92e0:	defff604 	addi	sp,sp,-40
    92e4:	ddc00815 	stw	r23,32(sp)
    92e8:	dd800715 	stw	r22,28(sp)
    92ec:	dd400615 	stw	r21,24(sp)
    92f0:	dd000515 	stw	r20,20(sp)
    92f4:	dcc00415 	stw	r19,16(sp)
    92f8:	dc800315 	stw	r18,12(sp)
    92fc:	dc400215 	stw	r17,8(sp)
    9300:	dc000115 	stw	r16,4(sp)
    9304:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    9308:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    930c:	2023883a 	mov	r17,r4
    9310:	2825883a 	mov	r18,r5
    9314:	3027883a 	mov	r19,r6
    9318:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
    931c:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    9320:	05400244 	movi	r21,9
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    9324:	05800044 	movi	r22,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9328:	05c00084 	movi	r23,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    932c:	38001926 	beq	r7,zero,9394 <alt_avalon_i2c_master_rx+0xb4>
    {
      while (retry--) 
    9330:	843fffc4 	addi	r16,r16,-1
    9334:	85001926 	beq	r16,r20,939c <alt_avalon_i2c_master_rx+0xbc>
      {
        if (retry<10) alt_busy_sleep(10000);      
    9338:	ac000236 	bltu	r21,r16,9344 <alt_avalon_i2c_master_rx+0x64>
    933c:	0109c404 	movi	r4,10000
    9340:	00098680 	call	9868 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    9344:	dd800015 	stw	r22,0(sp)
    9348:	000f883a 	mov	r7,zero
    934c:	980d883a 	mov	r6,r19
    9350:	900b883a 	mov	r5,r18
    9354:	8809883a 	mov	r4,r17
    9358:	00091540 	call	9154 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    935c:	10c001c4 	addi	r3,r2,7
    9360:	b8fff32e 	bgeu	r23,r3,9330 <_gp+0xffff64d8>
    9364:	00000d06 	br	939c <alt_avalon_i2c_master_rx+0xbc>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    9368:	ac000236 	bltu	r21,r16,9374 <alt_avalon_i2c_master_rx+0x94>
    936c:	0109c404 	movi	r4,10000
    9370:	00098680 	call	9868 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    9374:	dd800015 	stw	r22,0(sp)
    9378:	000f883a 	mov	r7,zero
    937c:	980d883a 	mov	r6,r19
    9380:	900b883a 	mov	r5,r18
    9384:	8809883a 	mov	r4,r17
    9388:	0008c800 	call	8c80 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    938c:	10c001c4 	addi	r3,r2,7
    9390:	b8c00236 	bltu	r23,r3,939c <alt_avalon_i2c_master_rx+0xbc>
        break;
      }
    }
    else
    {
      while (retry--) 
    9394:	843fffc4 	addi	r16,r16,-1
    9398:	853ff31e 	bne	r16,r20,9368 <_gp+0xffff6510>
        break;
      }
    }
    
    return status;
}        
    939c:	dfc00917 	ldw	ra,36(sp)
    93a0:	ddc00817 	ldw	r23,32(sp)
    93a4:	dd800717 	ldw	r22,28(sp)
    93a8:	dd400617 	ldw	r21,24(sp)
    93ac:	dd000517 	ldw	r20,20(sp)
    93b0:	dcc00417 	ldw	r19,16(sp)
    93b4:	dc800317 	ldw	r18,12(sp)
    93b8:	dc400217 	ldw	r17,8(sp)
    93bc:	dc000117 	ldw	r16,4(sp)
    93c0:	dec00a04 	addi	sp,sp,40
    93c4:	f800283a 	ret

000093c8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
    93c8:	20800317 	ldw	r2,12(r4)
    93cc:	10800237 	ldwio	r2,8(r2)
    93d0:	1080030c 	andi	r2,r2,12
    93d4:	1005d0ba 	srai	r2,r2,2
    93d8:	28800015 	stw	r2,0(r5)
    93dc:	f800283a 	ret

000093e0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
    93e0:	20c00317 	ldw	r3,12(r4)
    93e4:	18c00204 	addi	r3,r3,8
    93e8:	19000037 	ldwio	r4,0(r3)
    93ec:	00bffcc4 	movi	r2,-13
    93f0:	294b883a 	add	r5,r5,r5
    93f4:	294b883a 	add	r5,r5,r5
    93f8:	2084703a 	and	r2,r4,r2
    93fc:	2940030c 	andi	r5,r5,12
    9400:	288ab03a 	or	r5,r5,r2
    9404:	19400035 	stwio	r5,0(r3)
    9408:	f800283a 	ret

0000940c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
    940c:	defff804 	addi	sp,sp,-32
    9410:	dfc00715 	stw	ra,28(sp)
    9414:	dc000515 	stw	r16,20(sp)
    9418:	dc400615 	stw	r17,24(sp)
    941c:	2021883a 	mov	r16,r4
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
    9420:	00087580 	call	8758 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    9424:	014007c4 	movi	r5,31
    9428:	8009883a 	mov	r4,r16
    942c:	0008e7c0 	call	8e7c <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9430:	80800317 	ldw	r2,12(r16)
    9434:	00c00704 	movi	r3,28
    9438:	10c00435 	stwio	r3,16(r2)

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
    943c:	044000c4 	movi	r17,3
    9440:	880b883a 	mov	r5,r17
    9444:	8009883a 	mov	r4,r16
    9448:	00093e00 	call	93e0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    944c:	880b883a 	mov	r5,r17
    9450:	8009883a 	mov	r4,r16
    9454:	000912c0 	call	912c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    9458:	018000b4 	movhi	r6,2
    945c:	31a1a804 	addi	r6,r6,-31072
    9460:	d9400104 	addi	r5,sp,4
    9464:	8009883a 	mov	r4,r16
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
    9468:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    946c:	d8000115 	stw	zero,4(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    9470:	000885c0 	call	885c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
    9474:	d9400104 	addi	r5,sp,4
    9478:	8009883a 	mov	r4,r16
    947c:	00087b80 	call	87b8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
    9480:	8009883a 	mov	r4,r16
    9484:	d1600104 	addi	r5,gp,-32764
    9488:	00098e40 	call	98e4 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    948c:	81400517 	ldw	r5,20(r16)
    9490:	81000417 	ldw	r4,16(r16)
    9494:	01800074 	movhi	r6,1
    9498:	d8000015 	stw	zero,0(sp)
    949c:	800f883a 	mov	r7,r16
    94a0:	31a3b204 	addi	r6,r6,-28984
    94a4:	00099c80 	call	99c8 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
    94a8:	dfc00717 	ldw	ra,28(sp)
    94ac:	dc400617 	ldw	r17,24(sp)
    94b0:	dc000517 	ldw	r16,20(sp)
    94b4:	dec00804 	addi	sp,sp,32
    94b8:	f800283a 	ret

000094bc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    94bc:	defff804 	addi	sp,sp,-32
    94c0:	dcc00315 	stw	r19,12(sp)
    94c4:	dfc00715 	stw	ra,28(sp)
    94c8:	dd800615 	stw	r22,24(sp)
    94cc:	dd400515 	stw	r21,20(sp)
    94d0:	dd000415 	stw	r20,16(sp)
    94d4:	dc800215 	stw	r18,8(sp)
    94d8:	dc400115 	stw	r17,4(sp)
    94dc:	dc000015 	stw	r16,0(sp)
    94e0:	dcc00817 	ldw	r19,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
    94e4:	30004726 	beq	r6,zero,9604 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    94e8:	20c00617 	ldw	r3,24(r4)
    94ec:	00800074 	movhi	r2,1
    94f0:	10a3dc04 	addi	r2,r2,-28816
    94f4:	2023883a 	mov	r17,r4
    94f8:	1880441e 	bne	r3,r2,960c <alt_avalon_i2c_master_transmit_using_interrupts+0x150>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    94fc:	3c003fcc 	andi	r16,r7,255
    9500:	2825883a 	mov	r18,r5
    9504:	3029883a 	mov	r20,r6
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    9508:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    950c:	8000051e 	bne	r16,zero,9524 <alt_avalon_i2c_master_transmit_using_interrupts+0x68>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    9510:	00087100 	call	8710 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    9514:	10003e1e 	bne	r2,zero,9610 <alt_avalon_i2c_master_transmit_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    9518:	88800317 	ldw	r2,12(r17)
    951c:	00c00704 	movi	r3,28
    9520:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    9524:	800d883a 	mov	r6,r16
    9528:	000b883a 	mov	r5,zero
    952c:	8809883a 	mov	r4,r17
    9530:	0008ac40 	call	8ac4 <alt_avalon_i2c_send_address>
    9534:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    9538:	1000151e 	bne	r2,zero,9590 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
    953c:	a5bfffc4 	addi	r22,r20,-1
    9540:	95ad883a 	add	r22,r18,r22
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    9544:	95800926 	beq	r18,r22,956c <alt_avalon_i2c_master_transmit_using_interrupts+0xb0>
    9548:	8000111e 	bne	r16,zero,9590 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    954c:	91400003 	ldbu	r5,0(r18)
    9550:	000f883a 	mov	r7,zero
    9554:	000d883a 	mov	r6,zero
    9558:	8809883a 	mov	r4,r17
    955c:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    9560:	1021883a 	mov	r16,r2
            
            ++buffer;
    9564:	94800044 	addi	r18,r18,1
    9568:	003ff606 	br	9544 <_gp+0xffff66ec>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    956c:	8000081e 	bne	r16,zero,9590 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    9570:	91400003 	ldbu	r5,0(r18)
    9574:	9cc03fcc 	andi	r19,r19,255
    9578:	980f883a 	mov	r7,r19
    957c:	000d883a 	mov	r6,zero
    9580:	8809883a 	mov	r4,r17
    9584:	00089fc0 	call	89fc <alt_avalon_i2c_cmd_write>
    9588:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    958c:	10001226 	beq	r2,zero,95d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    9590:	0149c404 	movi	r5,10000
    9594:	a009883a 	mov	r4,r20
    9598:	0009d380 	call	9d38 <__mulsi3>
    959c:	1025883a 	mov	r18,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
    95a0:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
    95a4:	8809883a 	mov	r4,r17
    95a8:	00088e80 	call	88e8 <alt_avalon_i2c_is_busy>
    95ac:	10000626 	beq	r2,zero,95c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x10c>
        {
            if (timeout<10) alt_busy_sleep(10000);        
    95b0:	9c800236 	bltu	r19,r18,95bc <alt_avalon_i2c_master_transmit_using_interrupts+0x100>
    95b4:	0109c404 	movi	r4,10000
    95b8:	00098680 	call	9868 <alt_busy_sleep>
            if (--timeout == 0)
    95bc:	94bfffc4 	addi	r18,r18,-1
    95c0:	903ff81e 	bne	r18,zero,95a4 <_gp+0xffff674c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    95c4:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    95c8:	8809883a 	mov	r4,r17
    95cc:	00087580 	call	8758 <alt_avalon_i2c_disable>
    95d0:	8005883a 	mov	r2,r16
    95d4:	00000e06 	br	9610 <alt_avalon_i2c_master_transmit_using_interrupts+0x154>
    }
    else
    {
       if (issue_stop)
    95d8:	98000a26 	beq	r19,zero,9604 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    95dc:	88800317 	ldw	r2,12(r17)
    95e0:	00c00704 	movi	r3,28
    95e4:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
    95e8:	000b883a 	mov	r5,zero
    95ec:	8809883a 	mov	r4,r17
    95f0:	00093e00 	call	93e0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
    95f4:	01400044 	movi	r5,1
    95f8:	a9400215 	stw	r5,8(r21)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
    95fc:	8809883a 	mov	r4,r17
    9600:	0008f280 	call	8f28 <alt_avalon_i2c_int_enable>
    9604:	0005883a 	mov	r2,zero
    9608:	00000106 	br	9610 <alt_avalon_i2c_master_transmit_using_interrupts+0x154>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    960c:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
    9610:	dfc00717 	ldw	ra,28(sp)
    9614:	dd800617 	ldw	r22,24(sp)
    9618:	dd400517 	ldw	r21,20(sp)
    961c:	dd000417 	ldw	r20,16(sp)
    9620:	dcc00317 	ldw	r19,12(sp)
    9624:	dc800217 	ldw	r18,8(sp)
    9628:	dc400117 	ldw	r17,4(sp)
    962c:	dc000017 	ldw	r16,0(sp)
    9630:	dec00804 	addi	sp,sp,32
    9634:	f800283a 	ret

00009638 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    9638:	defff504 	addi	sp,sp,-44
    963c:	df000915 	stw	fp,36(sp)
    9640:	ddc00815 	stw	r23,32(sp)
    9644:	dd800715 	stw	r22,28(sp)
    9648:	dd400615 	stw	r21,24(sp)
    964c:	dd000515 	stw	r20,20(sp)
    9650:	dcc00415 	stw	r19,16(sp)
    9654:	dc800315 	stw	r18,12(sp)
    9658:	dc400215 	stw	r17,8(sp)
    965c:	dc000115 	stw	r16,4(sp)
    9660:	dfc00a15 	stw	ra,40(sp)
    9664:	2023883a 	mov	r17,r4
    9668:	2825883a 	mov	r18,r5
    966c:	3027883a 	mov	r19,r6
    9670:	382d883a 	mov	r22,r7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    9674:	0409c404 	movi	r16,10000
    
    while (retry--)
    9678:	057fffc4 	movi	r21,-1
    {
      if (retry<10) alt_busy_sleep(10000);
    967c:	05c00244 	movi	r23,9
    9680:	05000044 	movi	r20,1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9684:	07000084 	movi	fp,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    9688:	843fffc4 	addi	r16,r16,-1
    968c:	85400f26 	beq	r16,r21,96cc <alt_avalon_i2c_master_tx+0x94>
    {
      if (retry<10) alt_busy_sleep(10000);
    9690:	bc000236 	bltu	r23,r16,969c <alt_avalon_i2c_master_tx+0x64>
    9694:	0109c404 	movi	r4,10000
    9698:	00098680 	call	9868 <alt_busy_sleep>
      if (use_interrupts)
    969c:	b0803fcc 	andi	r2,r22,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    96a0:	dd000015 	stw	r20,0(sp)
    96a4:	000f883a 	mov	r7,zero
    96a8:	980d883a 	mov	r6,r19
    96ac:	900b883a 	mov	r5,r18
    96b0:	8809883a 	mov	r4,r17
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
    96b4:	10000226 	beq	r2,zero,96c0 <alt_avalon_i2c_master_tx+0x88>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    96b8:	00094bc0 	call	94bc <alt_avalon_i2c_master_transmit_using_interrupts>
    96bc:	00000106 	br	96c4 <alt_avalon_i2c_master_tx+0x8c>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
    96c0:	0008b3c0 	call	8b3c <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    96c4:	10c001c4 	addi	r3,r2,7
    96c8:	e0ffef2e 	bgeu	fp,r3,9688 <_gp+0xffff6830>
      break;
    }

    return status;
}        
    96cc:	dfc00a17 	ldw	ra,40(sp)
    96d0:	df000917 	ldw	fp,36(sp)
    96d4:	ddc00817 	ldw	r23,32(sp)
    96d8:	dd800717 	ldw	r22,28(sp)
    96dc:	dd400617 	ldw	r21,24(sp)
    96e0:	dd000517 	ldw	r20,20(sp)
    96e4:	dcc00417 	ldw	r19,16(sp)
    96e8:	dc800317 	ldw	r18,12(sp)
    96ec:	dc400217 	ldw	r17,8(sp)
    96f0:	dc000117 	ldw	r16,4(sp)
    96f4:	dec00b04 	addi	sp,sp,44
    96f8:	f800283a 	ret

000096fc <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    96fc:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    9700:	d8c00c03 	ldbu	r3,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    9704:	df000915 	stw	fp,36(sp)
    9708:	ddc00815 	stw	r23,32(sp)
    970c:	dd800715 	stw	r22,28(sp)
    9710:	dd400615 	stw	r21,24(sp)
    9714:	dd000515 	stw	r20,20(sp)
    9718:	dcc00415 	stw	r19,16(sp)
    971c:	dc800315 	stw	r18,12(sp)
    9720:	dc400215 	stw	r17,8(sp)
    9724:	dc000115 	stw	r16,4(sp)
    9728:	dfc00a15 	stw	ra,40(sp)
    972c:	2023883a 	mov	r17,r4
    9730:	2825883a 	mov	r18,r5
    9734:	3027883a 	mov	r19,r6
    9738:	3829883a 	mov	r20,r7
    973c:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
    9740:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    9744:	05c00244 	movi	r23,9
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9748:	05400084 	movi	r21,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    974c:	07000044 	movi	fp,1
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    9750:	18002126 	beq	r3,zero,97d8 <alt_avalon_i2c_master_tx_rx+0xdc>
    {
      while (retry--) 
    9754:	843fffc4 	addi	r16,r16,-1
    9758:	85802a26 	beq	r16,r22,9804 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
    975c:	bc000236 	bltu	r23,r16,9768 <alt_avalon_i2c_master_tx_rx+0x6c>
    9760:	0109c404 	movi	r4,10000
    9764:	00098680 	call	9868 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    9768:	d8000015 	stw	zero,0(sp)
    976c:	000f883a 	mov	r7,zero
    9770:	980d883a 	mov	r6,r19
    9774:	900b883a 	mov	r5,r18
    9778:	8809883a 	mov	r4,r17
    977c:	00094bc0 	call	94bc <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    9780:	10c001c4 	addi	r3,r2,7
    9784:	a8fff32e 	bgeu	r21,r3,9754 <_gp+0xffff68fc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    9788:	d9800b17 	ldw	r6,44(sp)
    978c:	df000015 	stw	fp,0(sp)
    9790:	01c00044 	movi	r7,1
    9794:	a00b883a 	mov	r5,r20
    9798:	8809883a 	mov	r4,r17
    979c:	00091540 	call	9154 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    97a0:	10c001c4 	addi	r3,r2,7
    97a4:	a8ffeb2e 	bgeu	r21,r3,9754 <_gp+0xffff68fc>
    97a8:	00001606 	br	9804 <alt_avalon_i2c_master_tx_rx+0x108>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    97ac:	bc000236 	bltu	r23,r16,97b8 <alt_avalon_i2c_master_tx_rx+0xbc>
    97b0:	0109c404 	movi	r4,10000
    97b4:	00098680 	call	9868 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    97b8:	d8000015 	stw	zero,0(sp)
    97bc:	000f883a 	mov	r7,zero
    97c0:	980d883a 	mov	r6,r19
    97c4:	900b883a 	mov	r5,r18
    97c8:	8809883a 	mov	r4,r17
    97cc:	0008b3c0 	call	8b3c <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    97d0:	10c001c4 	addi	r3,r2,7
    97d4:	a8c00336 	bltu	r21,r3,97e4 <alt_avalon_i2c_master_tx_rx+0xe8>
        break;
      }
    }
    else 
    {
      while (retry--) 
    97d8:	843fffc4 	addi	r16,r16,-1
    97dc:	85bff31e 	bne	r16,r22,97ac <_gp+0xffff6954>
    97e0:	00000806 	br	9804 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    97e4:	d9800b17 	ldw	r6,44(sp)
    97e8:	df000015 	stw	fp,0(sp)
    97ec:	01c00044 	movi	r7,1
    97f0:	a00b883a 	mov	r5,r20
    97f4:	8809883a 	mov	r4,r17
    97f8:	0008c800 	call	8c80 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    97fc:	10c001c4 	addi	r3,r2,7
    9800:	a8fff52e 	bgeu	r21,r3,97d8 <_gp+0xffff6980>
        break;
      }
    }
    
    return status;
}                                       
    9804:	dfc00a17 	ldw	ra,40(sp)
    9808:	df000917 	ldw	fp,36(sp)
    980c:	ddc00817 	ldw	r23,32(sp)
    9810:	dd800717 	ldw	r22,28(sp)
    9814:	dd400617 	ldw	r21,24(sp)
    9818:	dd000517 	ldw	r20,20(sp)
    981c:	dcc00417 	ldw	r19,16(sp)
    9820:	dc800317 	ldw	r18,12(sp)
    9824:	dc400217 	ldw	r17,8(sp)
    9828:	dc000117 	ldw	r16,4(sp)
    982c:	dec00b04 	addi	sp,sp,44
    9830:	f800283a 	ret

00009834 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    9834:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9838:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    983c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9840:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9844:	2980072e 	bgeu	r5,r6,9864 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9848:	38c00037 	ldwio	r3,0(r7)
    984c:	18ffffec 	andhi	r3,r3,65535
    9850:	183ffc26 	beq	r3,zero,9844 <_gp+0xffff69ec>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9854:	28c00007 	ldb	r3,0(r5)
    9858:	20c00035 	stwio	r3,0(r4)
    985c:	29400044 	addi	r5,r5,1
    9860:	003ff806 	br	9844 <_gp+0xffff69ec>

  return count;
}
    9864:	f800283a 	ret

00009868 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9868:	01500034 	movhi	r5,16384
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    986c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9870:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9874:	dc000015 	stw	r16,0(sp)
    9878:	dfc00115 	stw	ra,4(sp)
    987c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9880:	0009c7c0 	call	9c7c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9884:	10000e26 	beq	r2,zero,98c0 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9888:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    988c:	01300034 	movhi	r4,49152
    9890:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9894:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9898:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    989c:	297fffc4 	addi	r5,r5,-1
    98a0:	283ffe1e 	bne	r5,zero,989c <_gp+0xffff6a44>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    98a4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    98a8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    98ac:	18bffb16 	blt	r3,r2,989c <_gp+0xffff6a44>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    98b0:	8421883a 	add	r16,r16,r16
    98b4:	843fffc4 	addi	r16,r16,-1
    98b8:	803ffe1e 	bne	r16,zero,98b4 <_gp+0xffff6a5c>
    98bc:	00000306 	br	98cc <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    98c0:	8421883a 	add	r16,r16,r16
    98c4:	843fffc4 	addi	r16,r16,-1
    98c8:	043ffe16 	blt	zero,r16,98c4 <_gp+0xffff6a6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    98cc:	0005883a 	mov	r2,zero
    98d0:	dfc00117 	ldw	ra,4(sp)
    98d4:	dc000017 	ldw	r16,0(sp)
    98d8:	dec00204 	addi	sp,sp,8
    98dc:	f800283a 	ret

000098e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    98e0:	f800283a 	ret

000098e4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    98e4:	20000226 	beq	r4,zero,98f0 <alt_dev_llist_insert+0xc>
    98e8:	20800217 	ldw	r2,8(r4)
    98ec:	1000101e 	bne	r2,zero,9930 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    98f0:	d0a00317 	ldw	r2,-32756(gp)
    98f4:	10000926 	beq	r2,zero,991c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    98f8:	deffff04 	addi	sp,sp,-4
    98fc:	dfc00015 	stw	ra,0(sp)
    9900:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    9904:	00c00584 	movi	r3,22
    9908:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    990c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    9910:	dfc00017 	ldw	ra,0(sp)
    9914:	dec00104 	addi	sp,sp,4
    9918:	f800283a 	ret
    991c:	d0a01e04 	addi	r2,gp,-32648
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    9920:	00c00584 	movi	r3,22
    9924:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9928:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    992c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    9930:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9934:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    9938:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    993c:	28800017 	ldw	r2,0(r5)
    9940:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    9944:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    9948:	0005883a 	mov	r2,zero
    994c:	f800283a 	ret

00009950 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9950:	defffb04 	addi	sp,sp,-20
    9954:	dcc00315 	stw	r19,12(sp)
    9958:	dc800215 	stw	r18,8(sp)
    995c:	dc400115 	stw	r17,4(sp)
    9960:	dc000015 	stw	r16,0(sp)
    9964:	dfc00415 	stw	ra,16(sp)
    9968:	2027883a 	mov	r19,r4
    996c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    9970:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    9974:	0009b680 	call	9b68 <strlen>
    9978:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    997c:	84400726 	beq	r16,r17,999c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9980:	81000217 	ldw	r4,8(r16)
    9984:	900d883a 	mov	r6,r18
    9988:	980b883a 	mov	r5,r19
    998c:	0009b380 	call	9b38 <memcmp>
    9990:	10000426 	beq	r2,zero,99a4 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    9994:	84000017 	ldw	r16,0(r16)
    9998:	003ff806 	br	997c <_gp+0xffff6b24>
  }
  
  /* No match found */
  
  return NULL;
    999c:	0005883a 	mov	r2,zero
    99a0:	00000106 	br	99a8 <alt_find_dev+0x58>
    99a4:	8005883a 	mov	r2,r16
}
    99a8:	dfc00417 	ldw	ra,16(sp)
    99ac:	dcc00317 	ldw	r19,12(sp)
    99b0:	dc800217 	ldw	r18,8(sp)
    99b4:	dc400117 	ldw	r17,4(sp)
    99b8:	dc000017 	ldw	r16,0(sp)
    99bc:	dec00504 	addi	sp,sp,20
    99c0:	f800283a 	ret

000099c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    99c4:	f800283a 	ret

000099c8 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    99c8:	0009a541 	jmpi	9a54 <alt_iic_isr_register>

000099cc <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99cc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99d0:	00bfff84 	movi	r2,-2
    99d4:	2084703a 	and	r2,r4,r2
    99d8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    99dc:	00c00044 	movi	r3,1
    99e0:	d0a01c17 	ldw	r2,-32656(gp)
    99e4:	194a983a 	sll	r5,r3,r5
    99e8:	288ab03a 	or	r5,r5,r2
    99ec:	d1601c15 	stw	r5,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    99f0:	d0a01c17 	ldw	r2,-32656(gp)
    99f4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99f8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    99fc:	0005883a 	mov	r2,zero
    9a00:	f800283a 	ret

00009a04 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a04:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a08:	00bfff84 	movi	r2,-2
    9a0c:	2084703a 	and	r2,r4,r2
    9a10:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    9a14:	00ffff84 	movi	r3,-2
    9a18:	d0a01c17 	ldw	r2,-32656(gp)
    9a1c:	194a183a 	rol	r5,r3,r5
    9a20:	288a703a 	and	r5,r5,r2
    9a24:	d1601c15 	stw	r5,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9a28:	d0a01c17 	ldw	r2,-32656(gp)
    9a2c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a30:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    9a34:	0005883a 	mov	r2,zero
    9a38:	f800283a 	ret

00009a3c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9a3c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9a40:	00800044 	movi	r2,1
    9a44:	1144983a 	sll	r2,r2,r5
    9a48:	10c4703a 	and	r2,r2,r3
}
    9a4c:	1004c03a 	cmpne	r2,r2,zero
    9a50:	f800283a 	ret

00009a54 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9a54:	00c007c4 	movi	r3,31
    9a58:	19401616 	blt	r3,r5,9ab4 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9a5c:	defffe04 	addi	sp,sp,-8
    9a60:	dfc00115 	stw	ra,4(sp)
    9a64:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a68:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a6c:	00ffff84 	movi	r3,-2
    9a70:	80c6703a 	and	r3,r16,r3
    9a74:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    9a78:	280490fa 	slli	r2,r5,3
    9a7c:	00c00074 	movhi	r3,1
    9a80:	18ebb504 	addi	r3,r3,-20780
    9a84:	1885883a 	add	r2,r3,r2
    9a88:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    9a8c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9a90:	30000226 	beq	r6,zero,9a9c <alt_iic_isr_register+0x48>
    9a94:	00099cc0 	call	99cc <alt_ic_irq_enable>
    9a98:	00000106 	br	9aa0 <alt_iic_isr_register+0x4c>
    9a9c:	0009a040 	call	9a04 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9aa0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    9aa4:	dfc00117 	ldw	ra,4(sp)
    9aa8:	dc000017 	ldw	r16,0(sp)
    9aac:	dec00204 	addi	sp,sp,8
    9ab0:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    9ab4:	00bffa84 	movi	r2,-22
    9ab8:	f800283a 	ret

00009abc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9abc:	000170fa 	wrctl	ienable,zero
    9ac0:	f800283a 	ret

00009ac4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    9ac4:	213ffe84 	addi	r4,r4,-6
    9ac8:	008003c4 	movi	r2,15
    9acc:	11001636 	bltu	r2,r4,9b28 <alt_exception_cause_generated_bad_addr+0x64>
    9ad0:	200890ba 	slli	r4,r4,2
    9ad4:	00800074 	movhi	r2,1
    9ad8:	10a6ba04 	addi	r2,r2,-25880
    9adc:	2089883a 	add	r4,r4,r2
    9ae0:	20800017 	ldw	r2,0(r4)
    9ae4:	1000683a 	jmp	r2
    9ae8:	00009b30 	cmpltui	zero,zero,620
    9aec:	00009b30 	cmpltui	zero,zero,620
    9af0:	00009b28 	cmpgeui	zero,zero,620
    9af4:	00009b28 	cmpgeui	zero,zero,620
    9af8:	00009b28 	cmpgeui	zero,zero,620
    9afc:	00009b30 	cmpltui	zero,zero,620
    9b00:	00009b28 	cmpgeui	zero,zero,620
    9b04:	00009b28 	cmpgeui	zero,zero,620
    9b08:	00009b30 	cmpltui	zero,zero,620
    9b0c:	00009b30 	cmpltui	zero,zero,620
    9b10:	00009b28 	cmpgeui	zero,zero,620
    9b14:	00009b30 	cmpltui	zero,zero,620
    9b18:	00009b28 	cmpgeui	zero,zero,620
    9b1c:	00009b28 	cmpgeui	zero,zero,620
    9b20:	00009b28 	cmpgeui	zero,zero,620
    9b24:	00009b30 	cmpltui	zero,zero,620
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9b28:	0005883a 	mov	r2,zero
    9b2c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    9b30:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    9b34:	f800283a 	ret

00009b38 <memcmp>:
    9b38:	218d883a 	add	r6,r4,r6
    9b3c:	21800826 	beq	r4,r6,9b60 <memcmp+0x28>
    9b40:	20800003 	ldbu	r2,0(r4)
    9b44:	28c00003 	ldbu	r3,0(r5)
    9b48:	10c00226 	beq	r2,r3,9b54 <memcmp+0x1c>
    9b4c:	10c5c83a 	sub	r2,r2,r3
    9b50:	f800283a 	ret
    9b54:	21000044 	addi	r4,r4,1
    9b58:	29400044 	addi	r5,r5,1
    9b5c:	003ff706 	br	9b3c <_gp+0xffff6ce4>
    9b60:	0005883a 	mov	r2,zero
    9b64:	f800283a 	ret

00009b68 <strlen>:
    9b68:	2005883a 	mov	r2,r4
    9b6c:	10c00007 	ldb	r3,0(r2)
    9b70:	18000226 	beq	r3,zero,9b7c <strlen+0x14>
    9b74:	10800044 	addi	r2,r2,1
    9b78:	003ffc06 	br	9b6c <_gp+0xffff6d14>
    9b7c:	1105c83a 	sub	r2,r2,r4
    9b80:	f800283a 	ret

00009b84 <__divsi3>:
    9b84:	20001b16 	blt	r4,zero,9bf4 <__divsi3+0x70>
    9b88:	000f883a 	mov	r7,zero
    9b8c:	28001616 	blt	r5,zero,9be8 <__divsi3+0x64>
    9b90:	200d883a 	mov	r6,r4
    9b94:	29001a2e 	bgeu	r5,r4,9c00 <__divsi3+0x7c>
    9b98:	00800804 	movi	r2,32
    9b9c:	00c00044 	movi	r3,1
    9ba0:	00000106 	br	9ba8 <__divsi3+0x24>
    9ba4:	10000d26 	beq	r2,zero,9bdc <__divsi3+0x58>
    9ba8:	294b883a 	add	r5,r5,r5
    9bac:	10bfffc4 	addi	r2,r2,-1
    9bb0:	18c7883a 	add	r3,r3,r3
    9bb4:	293ffb36 	bltu	r5,r4,9ba4 <_gp+0xffff6d4c>
    9bb8:	0005883a 	mov	r2,zero
    9bbc:	18000726 	beq	r3,zero,9bdc <__divsi3+0x58>
    9bc0:	0005883a 	mov	r2,zero
    9bc4:	31400236 	bltu	r6,r5,9bd0 <__divsi3+0x4c>
    9bc8:	314dc83a 	sub	r6,r6,r5
    9bcc:	10c4b03a 	or	r2,r2,r3
    9bd0:	1806d07a 	srli	r3,r3,1
    9bd4:	280ad07a 	srli	r5,r5,1
    9bd8:	183ffa1e 	bne	r3,zero,9bc4 <_gp+0xffff6d6c>
    9bdc:	38000126 	beq	r7,zero,9be4 <__divsi3+0x60>
    9be0:	0085c83a 	sub	r2,zero,r2
    9be4:	f800283a 	ret
    9be8:	014bc83a 	sub	r5,zero,r5
    9bec:	39c0005c 	xori	r7,r7,1
    9bf0:	003fe706 	br	9b90 <_gp+0xffff6d38>
    9bf4:	0109c83a 	sub	r4,zero,r4
    9bf8:	01c00044 	movi	r7,1
    9bfc:	003fe306 	br	9b8c <_gp+0xffff6d34>
    9c00:	00c00044 	movi	r3,1
    9c04:	003fee06 	br	9bc0 <_gp+0xffff6d68>

00009c08 <__modsi3>:
    9c08:	20001716 	blt	r4,zero,9c68 <__modsi3+0x60>
    9c0c:	000f883a 	mov	r7,zero
    9c10:	2005883a 	mov	r2,r4
    9c14:	28001216 	blt	r5,zero,9c60 <__modsi3+0x58>
    9c18:	2900162e 	bgeu	r5,r4,9c74 <__modsi3+0x6c>
    9c1c:	01800804 	movi	r6,32
    9c20:	00c00044 	movi	r3,1
    9c24:	00000106 	br	9c2c <__modsi3+0x24>
    9c28:	30000a26 	beq	r6,zero,9c54 <__modsi3+0x4c>
    9c2c:	294b883a 	add	r5,r5,r5
    9c30:	31bfffc4 	addi	r6,r6,-1
    9c34:	18c7883a 	add	r3,r3,r3
    9c38:	293ffb36 	bltu	r5,r4,9c28 <_gp+0xffff6dd0>
    9c3c:	18000526 	beq	r3,zero,9c54 <__modsi3+0x4c>
    9c40:	1806d07a 	srli	r3,r3,1
    9c44:	11400136 	bltu	r2,r5,9c4c <__modsi3+0x44>
    9c48:	1145c83a 	sub	r2,r2,r5
    9c4c:	280ad07a 	srli	r5,r5,1
    9c50:	183ffb1e 	bne	r3,zero,9c40 <_gp+0xffff6de8>
    9c54:	38000126 	beq	r7,zero,9c5c <__modsi3+0x54>
    9c58:	0085c83a 	sub	r2,zero,r2
    9c5c:	f800283a 	ret
    9c60:	014bc83a 	sub	r5,zero,r5
    9c64:	003fec06 	br	9c18 <_gp+0xffff6dc0>
    9c68:	0109c83a 	sub	r4,zero,r4
    9c6c:	01c00044 	movi	r7,1
    9c70:	003fe706 	br	9c10 <_gp+0xffff6db8>
    9c74:	00c00044 	movi	r3,1
    9c78:	003ff106 	br	9c40 <_gp+0xffff6de8>

00009c7c <__udivsi3>:
    9c7c:	200d883a 	mov	r6,r4
    9c80:	2900152e 	bgeu	r5,r4,9cd8 <__udivsi3+0x5c>
    9c84:	28001416 	blt	r5,zero,9cd8 <__udivsi3+0x5c>
    9c88:	00800804 	movi	r2,32
    9c8c:	00c00044 	movi	r3,1
    9c90:	00000206 	br	9c9c <__udivsi3+0x20>
    9c94:	10000e26 	beq	r2,zero,9cd0 <__udivsi3+0x54>
    9c98:	28000516 	blt	r5,zero,9cb0 <__udivsi3+0x34>
    9c9c:	294b883a 	add	r5,r5,r5
    9ca0:	10bfffc4 	addi	r2,r2,-1
    9ca4:	18c7883a 	add	r3,r3,r3
    9ca8:	293ffa36 	bltu	r5,r4,9c94 <_gp+0xffff6e3c>
    9cac:	18000826 	beq	r3,zero,9cd0 <__udivsi3+0x54>
    9cb0:	0005883a 	mov	r2,zero
    9cb4:	31400236 	bltu	r6,r5,9cc0 <__udivsi3+0x44>
    9cb8:	314dc83a 	sub	r6,r6,r5
    9cbc:	10c4b03a 	or	r2,r2,r3
    9cc0:	1806d07a 	srli	r3,r3,1
    9cc4:	280ad07a 	srli	r5,r5,1
    9cc8:	183ffa1e 	bne	r3,zero,9cb4 <_gp+0xffff6e5c>
    9ccc:	f800283a 	ret
    9cd0:	0005883a 	mov	r2,zero
    9cd4:	f800283a 	ret
    9cd8:	00c00044 	movi	r3,1
    9cdc:	003ff406 	br	9cb0 <_gp+0xffff6e58>

00009ce0 <__umodsi3>:
    9ce0:	2005883a 	mov	r2,r4
    9ce4:	2900122e 	bgeu	r5,r4,9d30 <__umodsi3+0x50>
    9ce8:	28001116 	blt	r5,zero,9d30 <__umodsi3+0x50>
    9cec:	01800804 	movi	r6,32
    9cf0:	00c00044 	movi	r3,1
    9cf4:	00000206 	br	9d00 <__umodsi3+0x20>
    9cf8:	30000c26 	beq	r6,zero,9d2c <__umodsi3+0x4c>
    9cfc:	28000516 	blt	r5,zero,9d14 <__umodsi3+0x34>
    9d00:	294b883a 	add	r5,r5,r5
    9d04:	31bfffc4 	addi	r6,r6,-1
    9d08:	18c7883a 	add	r3,r3,r3
    9d0c:	293ffa36 	bltu	r5,r4,9cf8 <_gp+0xffff6ea0>
    9d10:	18000626 	beq	r3,zero,9d2c <__umodsi3+0x4c>
    9d14:	1806d07a 	srli	r3,r3,1
    9d18:	11400136 	bltu	r2,r5,9d20 <__umodsi3+0x40>
    9d1c:	1145c83a 	sub	r2,r2,r5
    9d20:	280ad07a 	srli	r5,r5,1
    9d24:	183ffb1e 	bne	r3,zero,9d14 <_gp+0xffff6ebc>
    9d28:	f800283a 	ret
    9d2c:	f800283a 	ret
    9d30:	00c00044 	movi	r3,1
    9d34:	003ff706 	br	9d14 <_gp+0xffff6ebc>

00009d38 <__mulsi3>:
    9d38:	0005883a 	mov	r2,zero
    9d3c:	20000726 	beq	r4,zero,9d5c <__mulsi3+0x24>
    9d40:	20c0004c 	andi	r3,r4,1
    9d44:	2008d07a 	srli	r4,r4,1
    9d48:	18000126 	beq	r3,zero,9d50 <__mulsi3+0x18>
    9d4c:	1145883a 	add	r2,r2,r5
    9d50:	294b883a 	add	r5,r5,r5
    9d54:	203ffa1e 	bne	r4,zero,9d40 <_gp+0xffff6ee8>
    9d58:	f800283a 	ret
    9d5c:	f800283a 	ret
