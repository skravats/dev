
Cyclone10GX_Demo.elf:     file format elf32-littlenios2
Cyclone10GX_Demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000238

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002717c memsz 0x0002717c flags r-x
    LOAD off    0x0002819c vaddr 0x0002719c paddr 0x00028f14 align 2**12
         filesz 0x00001d78 memsz 0x00001d78 flags rw-
    LOAD off    0x0002ac8c vaddr 0x0002ac8c paddr 0x0002ac8c align 2**12
         filesz 0x00000000 memsz 0x08000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024cf0  00000238  00000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002274  00024f28  00024f28  00025f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d78  0002719c  00028f14  0002819c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          08000205  0002ac8c  0002ac8c  0002ac8c  2**2
                  ALLOC, SMALL_DATA
  6 .ddr3_ctrl_amm_0 00000000  0802ae10  0802ae10  00029f14  2**0
                  CONTENTS
  7 .qspi_controller2_0_avl_mem 00000000  80000000  80000000  00029f14  2**0
                  CONTENTS
  8 .mcu_subsystem_ram_0 00000000  88020000  88020000  00029f14  2**0
                  CONTENTS
  9 .comment      0000002c  00000000  00000000  00029f14  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001788  00000000  00000000  00029f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000717a4  00000000  00000000  0002b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00015688  00000000  00000000  0009ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019f57  00000000  00000000  000b24f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004b7c  00000000  00000000  000cc44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007a18  00000000  00000000  000d0fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020273  00000000  00000000  000d89e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000f8c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002108  00000000  00000000  000f8cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00100e79  2**0
                  CONTENTS, READONLY
 20 .cpu          00000013  00000000  00000000  00100e7c  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00100e8f  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00100e90  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00100e91  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00100e9c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00100ea7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  00100eb2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000039  00000000  00000000  00100ebf  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     003bb2f8  00000000  00000000  00100ef8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000238 l    d  .text	00000000 .text
00024f28 l    d  .rodata	00000000 .rodata
0002719c l    d  .rwdata	00000000 .rwdata
0002ac8c l    d  .bss	00000000 .bss
0802ae10 l    d  .ddr3_ctrl_amm_0	00000000 .ddr3_ctrl_amm_0
80000000 l    d  .qspi_controller2_0_avl_mem	00000000 .qspi_controller2_0_avl_mem
88020000 l    d  .mcu_subsystem_ram_0	00000000 .mcu_subsystem_ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Developer/fpga/ArrowESC/Cyclone10GX_Demo/software/Cyclone10GX_Demo_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ad9144.c
00024f28 l     O .rodata	00000032 ad9144_jesd204_link_modes
00024f5a l     O .rodata	00000014 ad9144_required_device_config
00024f6e l     O .rodata	0000003c ad9144_optimal_serdes_settings
00024faa l     O .rodata	00000034 ad9144_pll_fixed_writes
000007f4 l     F .text	000002b0 ad9144_pll_setup
000251c4 l     O .rodata	00000011 __func__.3521
000251d8 l     O .rodata	0000000d __func__.3533
000251e8 l     O .rodata	00000015 __func__.3545
00025200 l     O .rodata	0000000e __func__.3559
00025210 l     O .rodata	0000001a __func__.3568
0002522c l     O .rodata	0000001a __func__.3581
00000000 l    df *ABS*	00000000 ad9523.c
00000000 l    df *ABS*	00000000 ad9680.c
00000000 l    df *ABS*	00000000 adc_core.c
00025448 l     O .rodata	0000000a __func__.3463
00025454 l     O .rodata	00000014 __func__.3496
00025468 l     O .rodata	0000000e __func__.3546
00000000 l    df *ABS*	00000000 Communication.c
00000000 l    df *ABS*	00000000 dac_buffer.c
00025478 l     O .rodata	00000800 sine_lut
00000000 l    df *ABS*	00000000 dac_core.c
00025d00 l     O .rodata	0000000e __func__.3489
00025d10 l     O .rodata	0000000a __func__.3506
00000000 l    df *ABS*	00000000 dmac_core.c
00025d3c l     O .rodata	00000017 __func__.3436
00000000 l    df *ABS*	00000000 fru_tools.c
0002632c l     O .rodata	0000000a __func__.3336
00006740 l     F .text	00000268 insert_str
00000000 l    df *ABS*	00000000 jesd_core.c
0002719c l     O .rwdata	00000010 axi_jesd204_rx_link_status_label
000271ac l     O .rwdata	00000010 axi_jesd204_tx_link_status_label
000271bc l     O .rwdata	00000010 axi_jesd204_rx_lane_status_label
00026618 l     O .rodata	0000000c __func__.3470
00000000 l    df *ABS*	00000000 platform_drivers.c
00000000 l    df *ABS*	00000000 xcvr_core.c
00026668 l     O .rodata	0000000b __func__.3555
00000000 l    df *ABS*	00000000 altera_a10_atx_pll.c
00000000 l    df *ABS*	00000000 altera_a10_fpll.c
00000000 l    df *ABS*	00000000 altera_a10_xcvr_channel.c
00000000 l    df *ABS*	00000000 altera_pll_common.c
000267b8 l     O .rodata	0000001f __func__.3466
000267d8 l     O .rodata	00000016 __func__.3487
000267f0 l     O .rodata	0000000f __func__.3498
00026800 l     O .rodata	0000000b __func__.3509
0002680c l     O .rodata	0000000c __func__.3519
00000000 l    df *ABS*	00000000 xilinx_qpll.c
00000000 l    df *ABS*	00000000 xilinx_xcvr_channel.c
00000000 l    df *ABS*	00000000 main.c
0002acd0 l     O .bss	04000000 rx_xfer_buf
0402acd0 l     O .bss	04000000 tx_xfer_buf
00026a4c l     O .rodata	0000000a __func__.4222
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
000271cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mktime.c
00010824 l     F .text	000002b0 validate_structure
00026b98 l     O .rodata	00000030 DAYS_IN_MONTH
00026b68 l     O .rodata	00000030 _DAYS_BEFORE_MONTH
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00026c1e l     O .rodata	00000010 blanks.4636
00026c0e l     O .rodata	00000010 zeroes.4637
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzset.c
00000000 l    df *ABS*	00000000 tzset_r.c
0002ac9c l     O .bss	00000004 prev_tzenv
0802ad03 l     O .bss	0000000b __tzname_std
0802acf8 l     O .bss	0000000b __tzname_dst
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015a60 l     F .text	000000c0 __sbprintf
00026c93 l     O .rodata	00000010 blanks.4651
00026c83 l     O .rodata	00000010 zeroes.4652
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 div.c
00000000 l    df *ABS*	00000000 dtoa.c
00015d3c l     F .text	000001f8 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00017884 l     F .text	00000008 __fp_lock
00017898 l     F .text	00000184 __sinit.part.0
00017a1c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 gettzinfo.c
00027b64 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 mprec.c
00026f94 l     O .rodata	0000000c p05.3456
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0001a1ac l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 siscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtoul.c
0001a680 l     F .text	00000254 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000270c8 l     O .rodata	00000010 blanks.4616
000270b8 l     O .rodata	00000010 zeroes.4617
00000000 l    df *ABS*	00000000 vfscanf.c
000270d8 l     O .rodata	00000022 basefix.4209
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001cf64 l     F .text	000000f4 __sprint_r.part.0
0002710a l     O .rodata	00000010 blanks.4632
000270fa l     O .rodata	00000010 zeroes.4633
0001e2a8 l     F .text	000000c0 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
0002acac l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtol.c
0001ec7c l     F .text	00000230 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 strtoll.c
0001ef54 l     F .text	000002d4 _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
0001f2d0 l     F .text	00000318 _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001fa60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001fb6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001fbcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001fcf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001fe14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001fef8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001ffe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00020414 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028ef4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00020684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00027d4c l     O .rwdata	00000038 i2c
00027d84 l     O .rwdata	00001060 jtag_uart_0
00028de4 l     O .rwdata	000000dc qspi_controller2_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0002086c l     F .text	00000110 optional_irq_callback
000209cc l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022680 l     F .text	00000210 altera_avalon_jtag_uart_irq
00022890 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022ed0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_generic_quad_spi_controller2.c
00023aa0 l     F .text	0000007c alt_qspi_poll_for_write_in_progress
00023a04 l     F .text	0000009c alt_qspi_validate_read_write_arguments
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024418 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024544 l     F .text	0000003c alt_get_errno
00024580 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002accc g     O .bss	00000004 alt_instruction_exception_handler
00010f04 g     F .text	00000018 putchar
0000b650 g     F .text	000000e8 altera_a10_acquire_arbitration
00019934 g     F .text	00000074 _mprec_log10
00003f8c g     F .text	00000044 I2C_Read
00019a14 g     F .text	00000074 __any_on
0001e8e4 g     F .text	00000058 _isatty_r
00026fa0 g     O .rodata	00000028 __mprec_tinytens
000077c4 g     F .text	000003c0 axi_jesd204_rx_laneinfo_read
000200f4 g     F .text	0000007c alt_main
00011258 g     F .text	0000008c strcpy
00010f1c g     F .text	000000cc _puts_r
0802ad10 g     O .bss	00000100 alt_irq
000073d4 g     F .text	000001f8 axi_jesd204_rx_status_read
0001e97c g     F .text	00000064 _lseek_r
000065dc g     F .text	00000164 free_FRU
00002db8 g     F .text	00000088 ad9680_spi_read
00028f14 g       *ABS*	00000000 __flash_rwdata_start
000089c0 g     F .text	00000214 atx_lookup_cp_current
0000b5cc g     F .text	00000084 pll_update
0001f7e4 g     F .text	00000080 .hidden __eqdf2
00000000 g       *ABS*	00000000 __alt_mem_ddr3_ctrl_amm_0
0802ae10 g       *ABS*	00000000 __alt_heap_start
00001d88 g     F .text	000000e4 ad9523_sync
00008768 g     F .text	000000c0 xcvr_reset
000072d0 g     F .text	00000104 jesd_status
00010ec4 g     F .text	00000038 printf
0001f690 g     F .text	000000a8 _wcrtomb_r
0001a558 g     F .text	0000005c __sseek
00017b9c g     F .text	00000010 __sinit
0001e368 g     F .text	00000148 __swbuf_r
0002aca4 g     O .bss	00000004 _daylight
0000fcfc g     F .text	0000007c _setlocale_r
00017a24 g     F .text	00000068 __sfmoreglue
000210a8 g     F .text	000000a8 alt_avalon_i2c_rx_read
0001cf50 g     F .text	00000014 ungetc
00013a70 g     F .text	00000024 _tzset_r
00020194 g     F .text	00000024 __malloc_unlock
0001f61c g     F .text	00000030 strtoull_l
00006408 g     F .text	000001d4 parse_FRU
00008bd4 g     F .text	00000184 atx_lookup_lf_resistance
00009358 g     F .text	000001b0 atx_pll_recalc_rate
000222b8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00020e48 g     F .text	00000084 alt_avalon_i2c_master_config_speed_get
00022fc4 g     F .text	000000fc alt_qspi_controller2_lock
0001bcc0 g     F .text	000000f8 _sfread_r
00018a10 g     F .text	0000011c memmove
00017b88 g     F .text	00000014 _cleanup
00026674 g     O .rodata	00000050 atx_bands
0000fda0 g     F .text	00000020 __locale_ctype_ptr
00021b0c g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
00018b2c g     F .text	000000a4 _Balloc
00008494 g     F .text	00000048 xcvr_write
0000e920 g     F .text	000000e0 .hidden __gtdf2
00024954 g     F .text	00000024 altera_nios2_gen2_irq_init
00007bd0 g     F .text	0000003c i2c_write
00000000 g     F .entry	0000001c __reset
00018710 g     F .text	00000008 __localeconv_l
00001b58 g     F .text	000000dc ad9523_calibrate
00004aa4 g     F .text	0000020c dac_data_setup
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001e884 g     F .text	00000060 _fstat_r
0002aca8 g     O .bss	00000004 errno
0001106c g     F .text	00000010 __srget
0001a4d4 g     F .text	00000008 __seofread
0001ab3c g     F .text	00001024 ___svfiprintf_internal_r
0002acb4 g     O .bss	00000004 alt_argv
00030ec0 g       *ABS*	00000000 _gp
00020654 g     F .text	00000030 usleep
000222fc g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0000c9c0 g     F .text	00000028 .hidden __bswapsi2
00020fb8 g     F .text	00000044 alt_avalon_i2c_is_busy
0000158c g     F .text	0000017c ad9144_datapath_prbs_test
00027bcc g     O .rwdata	00000180 alt_fd_list
000031dc g     F .text	00000184 adc_setup
00007d0c g     F .text	00000034 spi_remove
0000fbf0 g     F .text	0000007c _getc_r
00005138 g     F .text	00000074 min2date
0000fc6c g     F .text	00000090 getc
000037f8 g     F .text	000000b8 adc_set_pnsel
00010efc g     F .text	00000008 _putchar_r
00020d7c g     F .text	000000cc alt_avalon_i2c_master_config_set
00023ea4 g     F .text	00000160 alt_find_dev
0000a1bc g     F .text	000001cc fpll_recalc_rate
00010638 g     F .text	000000f0 memcpy
000230c0 g     F .text	0000008c alt_qspi_controller2_get_info
0001788c g     F .text	0000000c _cleanup_r
0001f998 g     F .text	000000c8 .hidden __floatsidf
000244c8 g     F .text	0000007c alt_io_redirect
0001f864 g     F .text	000000e0 .hidden __ltdf2
000030e4 g     F .text	00000048 ad9680_remove
0001f25c g     F .text	00000030 strtoll_l
00024f28 g       *ABS*	00000000 __DTOR_END__
00021950 g     F .text	000001bc alt_avalon_i2c_master_transmit
00010fe8 g     F .text	00000010 puts
00024b9c g     F .text	00000098 alt_exception_cause_generated_bad_addr
88020000 g       *ABS*	00000000 __alt_mem_mcu_subsystem_ram_0
0000b520 g     F .text	00000058 a10_pll_read
0001ea90 g     F .text	000000b8 mbrtowc
0001988c g     F .text	000000a8 __ratio
0001e290 g     F .text	00000018 __vfiprintf_internal
00022a90 g     F .text	0000021c altera_avalon_jtag_uart_read
0000fdd4 g     F .text	00000010 malloc
00010e94 g     F .text	00000030 _printf_r
0000d6d8 g     F .text	00000064 .hidden __udivsi3
0001fe50 g     F .text	000000a8 isatty
0001e93c g     F .text	00000040 iswspace
00007c48 g     F .text	000000c4 spi_init
00026ff0 g     O .rodata	000000c8 __mprec_tens
0001f28c g     F .text	00000044 strtoll
0000c9e8 g     F .text	00000074 .hidden __fixunsdfsi
00003a34 g     F .text	000004f0 adc_ramp_test
000240f4 g     F .text	00000090 alt_icache_flush
00020be8 g     F .text	00000098 alt_avalon_i2c_enable
0002ac98 g     O .bss	00000004 __malloc_top_pad
0001bc50 g     F .text	00000070 __ssrefill_r
0001a938 g     F .text	00000044 strtoul
000221e4 g     F .text	0000006c alt_avalon_i2c_int_disable
00007bac g     F .text	00000024 i2c_remove
00018718 g     F .text	00000020 _localeconv_r
0001f5e8 g     F .text	00000034 _strtoull_r
00018f2c g     F .text	00000034 __i2b
00017ff0 g     F .text	000004a0 __sfvwrite_r
00001c34 g     F .text	00000154 ad9523_status
0001107c g     F .text	00000058 _sbrk_r
00009b5c g     F .text	0000034c fpll_calc_params
0001eb48 g     F .text	00000064 _read_r
00028eec g     O .rwdata	00000004 alt_max_fd
0000a750 g     F .text	0000039c altera_a10_cdr_lookup_cp_current_pfd
0000b8f8 g     F .text	0000009c pll_is_enabled
0001e580 g     F .text	000000f0 _fclose_r
0001785c g     F .text	00000028 fflush
000084dc g     F .text	00000178 xcvr_setup
0002ac94 g     O .bss	00000004 __malloc_max_sbrked_mem
00021d14 g     F .text	0000020c alt_avalon_i2c_master_receive
0000d794 g     F .text	000008c0 .hidden __adddf3
00019640 g     F .text	00000104 __b2d
0000d084 g     F .text	00000554 .hidden __umoddi3
00020020 g     F .text	000000d4 lseek
00022250 g     F .text	00000068 alt_avalon_i2c_int_enable
00007150 g     F .text	00000048 jesd_write
00028ec0 g     O .rwdata	00000004 _global_impure_ptr
00019c34 g     F .text	00000578 _realloc_r
0802ae10 g       *ABS*	00000000 __bss_end
00024334 g     F .text	000000e4 alt_iic_isr_register
000043b0 g     F .text	000001f8 dds_set_frequency
0001eee0 g     F .text	00000030 strtol_l
000232b4 g     F .text	0000026c alt_qspi_controller2_write_block
00024828 g     F .text	0000012c alt_tick
00008f6c g     F .text	00000138 atx_pll_round_rate
0000caec g     F .text	00000598 .hidden __udivdi3
00009fd4 g     F .text	000001e8 fpll_set_rate
0002210c g     F .text	00000058 alt_avalon_i2c_int_status_get
0001e7e4 g     F .text	00000024 _fputwc_r
00026fc8 g     O .rodata	00000028 __mprec_bigtens
00018d08 g     F .text	00000110 __s2b
0000fa30 g     F .text	0000009c .hidden __floatunsidf
000193c4 g     F .text	00000058 __mcmp
00002ebc g     F .text	00000074 ad9680_test
00017bbc g     F .text	00000014 __fp_lock_all
00005a84 g     F .text	000004a8 parse_board_area
000242e8 g     F .text	0000004c alt_ic_irq_enabled
00003f48 g     F .text	00000044 I2C_Write
0000a550 g     F .text	0000008c altera_a10_cdr_lookup_lf_resistor_pd
0002478c g     F .text	0000009c alt_alarm_stop
0001ef10 g     F .text	00000044 strtol
00008370 g     F .text	00000038 ad_platform_close
00020a68 g     F .text	00000054 alt_avalon_i2c_register_callback
0002acbc g     O .bss	00000004 alt_irq_active
00020abc g     F .text	000000ec alt_avalon_i2c_init
00003f24 g     F .text	00000024 I2C_Init
00000434 g     F .text	00000094 ad9144_spi_write_seq
0000c824 g     F .text	0000007c mem_reading
000000fc g     F .exceptions	000000c8 alt_irq_handler
00027ba4 g     O .rwdata	00000028 alt_dev_null
0002314c g     F .text	00000168 alt_qspi_controller2_erase_block
00007104 g     F .text	0000004c jesd_read
00013554 g     F .text	00000004 __tz_unlock
00023d9c g     F .text	00000048 alt_dcache_flush_all
00018e18 g     F .text	00000064 __hi0bits
0000f9b0 g     F .text	00000080 .hidden __fixdfsi
0000fb20 g     F .text	00000014 calloc
0000312c g     F .text	00000068 adc_read
00028f14 g       *ABS*	00000000 __ram_rwdata_end
00028ee4 g     O .rwdata	00000008 alt_dev_list
000206c0 g     F .text	000000f8 write
00019a88 g     F .text	000000cc _putc_r
000213e4 g     F .text	0000004c alt_avalon_i2c_check_arblost
00028ed0 g     O .rwdata	00000008 _tzname
000221a8 g     F .text	0000003c alt_avalon_i2c_int_clear
00028ed8 g     O .rwdata	00000004 environ
0002719c g       *ABS*	00000000 __ram_rodata_end
0001fd30 g     F .text	000000b0 fstat
0001f864 g     F .text	000000e0 .hidden __ledf2
00028ef8 g     O .rwdata	00000008 alt_avalon_i2c_list
0001915c g     F .text	00000124 __pow5mult
0001d070 g     F .text	00001220 ___vfiprintf_internal_r
0000d73c g     F .text	00000058 .hidden __umodsi3
00001708 g     F .text	000000f0 ad9523_spi_read
00007f40 g     F .text	00000028 gpio_get_direction
0802ae10 g       *ABS*	00000000 end
0000b40c g     F .text	00000114 altera_a10_calib_tx_pll
0001fb98 g     F .text	00000034 alt_dev_reg
0001a408 g     F .text	00000078 _siscanf_r
00008d58 g     F .text	00000214 atx_calc_params
0000b790 g     F .text	00000168 pll_calibration_check
00001364 g     F .text	00000228 ad9144_short_pattern_test
00002e40 g     F .text	0000007c ad9680_spi_write
000225c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00020ba8 g     F .text	00000040 alt_avalon_i2c_open
00024f28 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
00021564 g     F .text	000000e8 alt_avalon_i2c_master_tx
00022f48 g     F .text	0000007c alt_avalon_timer_sc_init
0000facc g     F .text	00000054 .hidden __clzsi2
00022cac g     F .text	00000224 altera_avalon_jtag_uart_write
00017bac g     F .text	00000004 __sfp_lock_acquire
00018928 g     F .text	000000e8 memchr
00013a94 g     F .text	00001fb4 ___vfprintf_internal_r
000110d4 g     F .text	00000054 _sprintf_r
00017d00 g     F .text	000002f0 _free_r
000201b8 g     F .text	0000022c alt_printf
00007e2c g     F .text	00000090 gpio_get
00004cfc g     F .text	00000048 dmac_write
00026da4 g     O .rodata	00000180 _ctype_b
00003360 g     F .text	0000011c adc_set_delay
0000fd78 g     F .text	00000020 __locale_mb_cur_max
00024d88 g     F .text	0000016c __call_exitprocs
00010ff8 g     F .text	00000074 __srget_r
00008350 g     F .text	00000020 ad_platform_init
0000aaec g     F .text	00000290 altera_a10_cdr_calc_params
000042f8 g     F .text	0000006c dac_read
0001bb60 g     F .text	000000f0 _sungetc_r
0002097c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00010ad4 g     F .text	000003c0 mktime
00028ec8 g     O .rwdata	00000004 __malloc_sbrk_base
00000238 g     F .text	0000004c _start
000069a8 g     F .text	0000075c build_FRU_blob
0002acc0 g     O .bss	00000004 _alt_tick_rate
0001f228 g     F .text	00000034 _strtoll_r
00021f20 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
00022348 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00019280 g     F .text	00000144 __lshift
0000c8a0 g     F .text	00000048 mem_testing
0000213c g     F .text	00000c34 ad9523_setup
0002acc4 g     O .bss	00000008 _alt_nticks
00020450 g     F .text	000000fc read
000207f0 g     F .text	0000007c alt_sys_init
0001a97c g     F .text	000001c0 __ssprint_r
000088e0 g     F .text	0000008c atx_lookup_band
0000bf70 g     F .text	00000834 daq2_init
00024c7c g     F .text	0000010c __register_exitproc
0001a5bc g     F .text	000000c4 strncmp
00002f30 g     F .text	000001b4 ad9680_setup
00021788 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0000815c g     F .text	000000a8 ad_gpio_get_range
00018f60 g     F .text	000001fc __multiply
00007f14 g     F .text	0000002c gpio_direction_output
00022938 g     F .text	00000068 altera_avalon_jtag_uart_close
00007f68 g     F .text	000000ac gpio_set_value
0002719c g       *ABS*	00000000 __ram_rwdata_start
00024f28 g       *ABS*	00000000 __ram_rodata_start
00026f34 g     O .rodata	00000060 __month_lengths
0000809c g     F .text	000000c0 ad_gpio_set_range
0802acd0 g     O .bss	00000028 __malloc_current_mallinfo
00019744 g     F .text	00000148 __d2b
00004084 g     F .text	00000274 dac_buffer_load
000017f8 g     F .text	000000d4 ad9523_spi_write
0002245c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001a8d4 g     F .text	00000034 _strtoul_r
00024afc g     F .text	000000a0 alt_get_fd
0000c7a4 g     F .text	00000080 mem_writing
00023c74 g     F .text	00000128 alt_busy_sleep
0001e528 g     F .text	00000058 _close_r
00004cb0 g     F .text	0000004c dmac_read
00001908 g     F .text	00000250 ad9523_vco_out_map
00020ffc g     F .text	000000ac alt_avalon_i2c_rx_read_available
0002251c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802ae10 g       *ABS*	00000000 __alt_stack_base
0002256c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000075cc g     F .text	000001f8 axi_jesd204_tx_status_read
00015b70 g     F .text	00000158 __swsetup_r
0000e054 g     F .text	000008cc .hidden __divdf3
00017a8c g     F .text	000000fc __sfp
000199a8 g     F .text	0000006c __copybits
0002775c g     O .rwdata	00000408 __malloc_av_
00017bb8 g     F .text	00000004 __sinit_lock_release
0000ea00 g     F .text	000006dc .hidden __muldf3
0001a480 g     F .text	00000054 __sread
00007ef0 g     F .text	00000024 gpio_direction_input
00008204 g     F .text	000000bc do_div
00024978 g     F .text	00000184 alt_find_file
0001fc08 g     F .text	000000a4 alt_dev_llist_insert
00020170 g     F .text	00000024 __malloc_lock
000205a4 g     F .text	000000b0 sbrk
00011374 g     F .text	00001fb4 ___svfprintf_internal_r
00021430 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
00021398 g     F .text	0000004c alt_avalon_i2c_check_nack
000177fc g     F .text	00000060 _fflush_r
000240c0 g     F .text	00000034 alt_flash_device_register
0000a388 g     F .text	00000054 altera_a10_cdr_lookup_vco_speed
0000fb34 g     F .text	000000bc _calloc_r
00028f00 g     O .rwdata	00000008 alt_flash_dev_list
0001f64c g     F .text	00000044 strtoull
00013550 g     F .text	00000004 __tz_lock
0000b578 g     F .text	00000054 a10_pll_write
0002ac8c g       *ABS*	00000000 __bss_start
00010728 g     F .text	000000fc memset
0000c8e8 g     F .text	000000d8 main
00021364 g     F .text	00000034 alt_avalon_i2c_master_target_set
0002acb8 g     O .bss	00000004 alt_envp
0002ac90 g     O .bss	00000004 __malloc_max_total_mem
000224bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00007c0c g     F .text	0000003c i2c_read
0001e4b0 g     F .text	00000014 __swbuf
00008448 g     F .text	0000004c xcvr_read
00022164 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0000a490 g     F .text	0000004c altera_a10_cdr_lookup_cp_current_pd
0000b738 g     F .text	00000058 altera_a10_release_arbitration
0001a5b4 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
000045a8 g     F .text	00000168 dds_set_phase
0001e670 g     F .text	00000010 fclose
0001eeac g     F .text	00000034 _strtol_r
000185e8 g     F .text	00000100 _findenv_r
00015f34 g     F .text	000016a8 _dtoa_r
0000fdf4 g     F .text	000007d8 _malloc_r
00015b40 g     F .text	00000030 __ascii_wctomb
0000ba24 g     F .text	00000090 pll_disable
00004890 g     F .text	00000114 dac_data_src_sel
00028ef0 g     O .rwdata	00000004 alt_errno
00005490 g     F .text	00000244 six2ascii
0001ccf8 g     F .text	000000d4 __submore
000090a4 g     F .text	000002b4 atx_pll_set_rate
0001fcd0 g     F .text	00000024 __env_unlock
00018490 g     F .text	000000a4 _fwalk
000105cc g     F .text	00000028 _mbtowc_r
00019b54 g     F .text	000000e0 putc
0000d5d8 g     F .text	00000088 .hidden __divsi3
00017be4 g     F .text	0000011c _malloc_trim_r
00024f28 g       *ABS*	00000000 __CTOR_END__
00000284 g     F .text	00000088 ad9144_spi_read
00013558 g     F .text	0000000c _tzset_unlocked
0001118c g     F .text	000000cc strcmp
00008014 g     F .text	00000088 gpio_get_value
0001a390 g     F .text	00000078 siscanf
00024f28 g       *ABS*	00000000 __flash_rodata_start
000004c8 g     F .text	0000032c ad9144_setup_jesd204_link
00024f28 g       *ABS*	00000000 __DTOR_LIST__
0001a908 g     F .text	00000030 strtoul_l
0000a4dc g     F .text	0000003c altera_a10_cdr_lookup_clklow_div
0001f7e4 g     F .text	00000080 .hidden __nedf2
0000ca5c g     F .text	00000090 .hidden __fixunsdfdi
000207b8 g     F .text	00000038 alt_irq_init
0002054c g     F .text	00000058 alt_release_fd
000018cc g     F .text	0000003c ad9523_io_update
0000404c g     F .text	00000038 SPI_Write
00011128 g     F .text	00000064 sprintf
00026a56 g     O .rodata	00000100 .hidden __clz_tab
00008654 g     F .text	00000114 xcvr_getconfig
0002ac8c g     O .bss	00000004 _PathLocale
00024c34 g     F .text	00000014 atexit
00004710 g     F .text	00000180 dds_set_scale
0001e4c4 g     F .text	00000064 _write_r
0000fdc0 g     F .text	00000014 setlocale
0000ad7c g     F .text	00000150 altera_a10_cdr_pll_round_rate
00001e6c g     F .text	000002d0 ad9523_init
00028ec4 g     O .rwdata	00000004 _impure_ptr
00004d44 g     F .text	0000038c dmac_start_transaction
0002acb0 g     O .bss	00000004 alt_argc
000175dc g     F .text	00000220 __sflush_r
0001e9e0 g     F .text	000000b0 _mbrtowc_r
00023e44 g     F .text	00000060 _do_dtors
0002132c g     F .text	00000038 alt_avalon_i2c_master_target_get
00000aa4 g     F .text	000005bc ad9144_setup
0002123c g     F .text	000000f0 alt_avalon_i2c_send_address
00007b84 g     F .text	00000028 i2c_init
0001a1c8 g     F .text	000001c8 __srefill_r
0000030c g     F .text	0000007c ad9144_spi_write
00000020 g       .exceptions	00000000 alt_irq_entry
000105f4 g     F .text	00000044 __ascii_mbtowc
00001060 g     F .text	0000013c ad9144_dac_calibrate
000195dc g     F .text	00000064 __ulp
00017bd0 g     F .text	00000014 __fp_unlock_all
00028edc g     O .rwdata	00000008 alt_fs_list
00023700 g     F .text	000000ac alt_qspi_controller2_read
00007238 g     F .text	00000098 jesd_sysref_control
0002aca0 g     O .bss	00000004 _timezone
00002d70 g     F .text	00000048 ad9523_remove
0000bab4 g     F .text	000004bc fmcdaq2_reconfig
0001bdb8 g     F .text	00000f40 __ssvfiscanf_r
00000020 g       *ABS*	00000000 __ram_exceptions_start
00018738 g     F .text	00000020 localeconv
00004364 g     F .text	0000004c dac_write
0000b994 g     F .text	00000090 pll_enable
00005f2c g     F .text	000004dc parse_multiboard_area
00018758 g     F .text	00000094 __swhatbuf_r
000223f8 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00024184 g     F .text	00000050 alt_ic_isr_register
00020c80 g     F .text	0000004c alt_avalon_i2c_disable
00007d40 g     F .text	000000ec spi_write_and_read
00000388 g     F .text	000000ac ad9144_spi_check_status
00028f14 g       *ABS*	00000000 _edata
00007198 g     F .text	000000a0 jesd_setup
000082c0 g     F .text	00000090 ad_reg_write_16
0802ae10 g       *ABS*	00000000 _end
00024004 g     F .text	00000068 alt_flash_open_dev
0001e680 g     F .text	00000164 __fputwc
00000238 g       *ABS*	00000000 __ram_exceptions_end
000229a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00013588 g     F .text	000004e8 _tzset_unlocked_r
000083e8 g     F .text	00000060 ad_pow2
0000a5dc g     F .text	00000174 altera_a10_cdr_lookup_lf_resistor_pfd
00020ccc g     F .text	000000b0 alt_avalon_i2c_master_config_get
0000347c g     F .text	0000037c adc_delay_calibrate
0002425c g     F .text	0000008c alt_ic_irq_disable
00023520 g     F .text	000001e0 alt_qspi_controller2_write
0001a4dc g     F .text	0000007c __swrite
00028ecc g     O .rwdata	00000004 __malloc_trim_threshold
00024c48 g     F .text	00000034 exit
00018534 g     F .text	000000b4 _fwalk_reent
0001941c g     F .text	000001c0 __mdiff
0000896c g     F .text	00000054 atx_lookup_tank
0002406c g     F .text	00000054 alt_flash_close_dev
0000d660 g     F .text	00000078 .hidden __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00017bb0 g     F .text	00000004 __sfp_lock_release
0001ebac g     F .text	000000d0 __sccl
00020ecc g     F .text	000000ec alt_avalon_i2c_master_config_speed_set
00007ebc g     F .text	00000034 gpio_remove
00026ca3 g     O .rodata	00000101 _ctype_
000050d0 g     F .text	00000068 calc_zero_checksum
00021150 g     F .text	000000ec alt_avalon_i2c_cmd_write
0001f944 g     F .text	00000054 .hidden __unorddf2
000237ac g     F .text	00000258 altera_qspi_controller2_init
0000aecc g     F .text	00000540 altera_a10_cdr_pll_set_rate
0000a518 g     F .text	00000038 altera_a10_cdr_lookup_fastlock
00024ef4 g     F .text	00000034 _exit
000083a8 g     F .text	00000040 ad_uart_read
00023b1c g     F .text	00000158 alt_alarm_start
80000000 g       *ABS*	00000000 __alt_mem_qspi_controller2_0_avl_mem
00009600 g     F .text	0000055c fpll_lookup_cp_current
000187ec g     F .text	0000013c __smakebuf_r
000112e4 g     F .text	00000090 strlen
0000fd98 g     F .text	00000008 __locale_ctype_ptr_l
00024638 g     F .text	00000154 open
0000e920 g     F .text	000000e0 .hidden __gedf2
00009508 g     F .text	000000f8 fpll_lookup_lf_resistance
000203e4 g     F .text	00000030 alt_putchar
000049a4 g     F .text	00000100 dac_setup
00015cc8 g     F .text	00000074 div
000011e4 g     F .text	00000180 ad9144_status
0001d058 g     F .text	00000018 __sprint_r
0001fde0 g     F .text	00000034 alt_icache_flush_all
00003fd0 g     F .text	00000044 SPI_Init
000051ac g     F .text	000002e4 ascii2six
00028f08 g     O .rwdata	00000004 alt_priority_mask
000241d4 g     F .text	00000088 alt_ic_irq_enable
00015a48 g     F .text	00000018 __vfprintf_internal
0000a3dc g     F .text	000000b4 altera_a10_cdr_lookup_vco_speed_fix
000038b0 g     F .text	00000184 adc_pn_mon
00015b20 g     F .text	00000020 _wctomb_r
0001fcac g     F .text	00000024 __env_lock
0000f0dc g     F .text	000008d4 .hidden __subdf3
000056d4 g     F .text	000003b0 parse_string
00013564 g     F .text	00000024 tzset
00004014 g     F .text	00000038 SPI_Read
00009ea8 g     F .text	0000012c fpll_round_rate
00018e7c g     F .text	000000b0 __lo0bits
0000119c g     F .text	00000048 ad9144_remove
00013328 g     F .text	00000228 __tzcalc_limits
00028f0c g     O .rwdata	00000008 alt_alarm_list
0001cdcc g     F .text	00000184 _ungetc_r
00023de4 g     F .text	00000060 _do_ctors
0001f738 g     F .text	000000ac wcrtomb
0001fa9c g     F .text	000000d0 close
000275f0 g     O .rwdata	0000016c __global_locale
000223ac g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00003194 g     F .text	00000048 adc_write
0001ff60 g     F .text	00000084 alt_load
0002164c g     F .text	0000013c alt_avalon_i2c_master_rx
0001e808 g     F .text	0000007c fputwc
00018704 g     F .text	0000000c __gettzinfo
0000fde4 g     F .text	00000010 free
00017bb4 g     F .text	00000004 __sinit_lock_acquire
00018bf4 g     F .text	00000114 __multadd
00018bd0 g     F .text	00000024 _Bfree
000186e8 g     F .text	0000001c _getenv_r
00008828 g     F .text	000000b8 xcvr_finalize_lane_rate_change



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_mcu_subsystem_ram_0+0x77fe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408e14 	ori	at,at,568
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c40 	call	1c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001126 	beq	r2,zero,180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008200f4 	movhi	r2,2051
 148:	1885883a 	add	r2,r3,r2
 14c:	10eb4417 	ldw	r3,-21232(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008200f4 	movhi	r2,2051
 15c:	2085883a 	add	r2,r4,r2
 160:	10ab4517 	ldw	r2,-21228(r2)
 164:	1009883a 	mov	r4,r2
 168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 16c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 178:	e0bffb17 	ldw	r2,-20(fp)
 17c:	00000706 	br	19c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 180:	e0bffe17 	ldw	r2,-8(fp)
 184:	1085883a 	add	r2,r2,r2
 188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 18c:	e0bffd17 	ldw	r2,-12(fp)
 190:	10800044 	addi	r2,r2,1
 194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 198:	003fe406 	br	12c <__alt_mem_mcu_subsystem_ram_0+0x77fe012c>

    } while (1);

    active = alt_irq_pending ();
 19c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a0:	e0bfff17 	ldw	r2,-4(fp)
 1a4:	103fde1e 	bne	r2,zero,120 <__alt_mem_mcu_subsystem_ram_0+0x77fe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a8:	0001883a 	nop
}
 1ac:	0001883a 	nop
 1b0:	e037883a 	mov	sp,fp
 1b4:	dfc00117 	ldw	ra,4(sp)
 1b8:	df000017 	ldw	fp,0(sp)
 1bc:	dec00204 	addi	sp,sp,8
 1c0:	f800283a 	ret

000001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c4:	defffb04 	addi	sp,sp,-20
 1c8:	dfc00415 	stw	ra,16(sp)
 1cc:	df000315 	stw	fp,12(sp)
 1d0:	df000304 	addi	fp,sp,12
 1d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1d8:	000531fa 	rdctl	r2,exception
 1dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e0:	e0bfff17 	ldw	r2,-4(fp)
 1e4:	1004d0ba 	srli	r2,r2,2
 1e8:	108007cc 	andi	r2,r2,31
 1ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f0:	0005333a 	rdctl	r2,badaddr
 1f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f8:	d0a78317 	ldw	r2,-25076(gp)
 1fc:	10000726 	beq	r2,zero,21c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200:	d0a78317 	ldw	r2,-25076(gp)
 204:	e0ffff17 	ldw	r3,-4(fp)
 208:	e1bffe17 	ldw	r6,-8(fp)
 20c:	e17ffd17 	ldw	r5,-12(fp)
 210:	1809883a 	mov	r4,r3
 214:	103ee83a 	callr	r2
 218:	00000206 	br	224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 21c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 220:	0005883a 	mov	r2,zero
}
 224:	e037883a 	mov	sp,fp
 228:	dfc00117 	ldw	ra,4(sp)
 22c:	df000017 	ldw	fp,0(sp)
 230:	dec00204 	addi	sp,sp,8
 234:	f800283a 	ret

Disassembly of section .text:

00000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     23c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     244:	00bffd16 	blt	zero,r2,23c <__alt_mem_mcu_subsystem_ram_0+0x77fe023c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     254:	d683b014 	ori	gp,gp,3776
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10ab2314 	ori	r2,r2,44172

    movhi r3, %hi(__bss_end)
     260:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
     264:	18eb8414 	ori	r3,r3,44560

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x40>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_mcu_subsystem_ram_0+0x77fe026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	001ff600 	call	1ff60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00200f40 	call	200f4 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_mcu_subsystem_ram_0+0x77fe0280>

00000284 <ad9144_spi_read>:
 * @brief ad9144_spi_read
 *******************************************************************************/
int32_t ad9144_spi_read(struct ad9144_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
     284:	defff904 	addi	sp,sp,-28
     288:	dfc00615 	stw	ra,24(sp)
     28c:	df000515 	stw	fp,20(sp)
     290:	df000504 	addi	fp,sp,20
     294:	e13ffd15 	stw	r4,-12(fp)
     298:	2805883a 	mov	r2,r5
     29c:	e1bffb15 	stw	r6,-20(fp)
     2a0:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
     2a4:	e0bffc0b 	ldhu	r2,-16(fp)
     2a8:	1004d23a 	srli	r2,r2,8
     2ac:	1007883a 	mov	r3,r2
     2b0:	00bfe004 	movi	r2,-128
     2b4:	1884b03a 	or	r2,r3,r2
     2b8:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
     2bc:	e0bffc0b 	ldhu	r2,-16(fp)
     2c0:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
     2c4:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
     2c8:	e0bffd17 	ldw	r2,-12(fp)
     2cc:	10800017 	ldw	r2,0(r2)
     2d0:	e0fffe44 	addi	r3,fp,-7
     2d4:	018000c4 	movi	r6,3
     2d8:	180b883a 	mov	r5,r3
     2dc:	1009883a 	mov	r4,r2
     2e0:	0007d400 	call	7d40 <spi_write_and_read>
     2e4:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
     2e8:	e0fffec3 	ldbu	r3,-5(fp)
     2ec:	e0bffb17 	ldw	r2,-20(fp)
     2f0:	10c00005 	stb	r3,0(r2)

	return ret;
     2f4:	e0bfff17 	ldw	r2,-4(fp)
}
     2f8:	e037883a 	mov	sp,fp
     2fc:	dfc00117 	ldw	ra,4(sp)
     300:	df000017 	ldw	fp,0(sp)
     304:	dec00204 	addi	sp,sp,8
     308:	f800283a 	ret

0000030c <ad9144_spi_write>:
 * @brief ad9144_spi_write
 *******************************************************************************/
int32_t ad9144_spi_write(struct ad9144_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
     30c:	defff904 	addi	sp,sp,-28
     310:	dfc00615 	stw	ra,24(sp)
     314:	df000515 	stw	fp,20(sp)
     318:	df000504 	addi	fp,sp,20
     31c:	e13ffd15 	stw	r4,-12(fp)
     320:	2805883a 	mov	r2,r5
     324:	3007883a 	mov	r3,r6
     328:	e0bffc0d 	sth	r2,-16(fp)
     32c:	1805883a 	mov	r2,r3
     330:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
     334:	e0bffc0b 	ldhu	r2,-16(fp)
     338:	1004d23a 	srli	r2,r2,8
     33c:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
     340:	e0bffc0b 	ldhu	r2,-16(fp)
     344:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
     348:	e0bffb03 	ldbu	r2,-20(fp)
     34c:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	10800017 	ldw	r2,0(r2)
     358:	e0fffe44 	addi	r3,fp,-7
     35c:	018000c4 	movi	r6,3
     360:	180b883a 	mov	r5,r3
     364:	1009883a 	mov	r4,r2
     368:	0007d400 	call	7d40 <spi_write_and_read>
     36c:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
     370:	e0bfff17 	ldw	r2,-4(fp)
}
     374:	e037883a 	mov	sp,fp
     378:	dfc00117 	ldw	ra,4(sp)
     37c:	df000017 	ldw	fp,0(sp)
     380:	dec00204 	addi	sp,sp,8
     384:	f800283a 	ret

00000388 <ad9144_spi_check_status>:
 *******************************************************************************/
int32_t ad9144_spi_check_status(struct ad9144_dev *dev,
				uint16_t reg_addr,
				uint8_t reg_mask,
				uint8_t exp_reg_data)
{
     388:	defff904 	addi	sp,sp,-28
     38c:	dfc00615 	stw	ra,24(sp)
     390:	df000515 	stw	fp,20(sp)
     394:	df000504 	addi	fp,sp,20
     398:	e13ffe15 	stw	r4,-8(fp)
     39c:	2805883a 	mov	r2,r5
     3a0:	3009883a 	mov	r4,r6
     3a4:	3807883a 	mov	r3,r7
     3a8:	e0bffd0d 	sth	r2,-12(fp)
     3ac:	2005883a 	mov	r2,r4
     3b0:	e0bffc05 	stb	r2,-16(fp)
     3b4:	1805883a 	mov	r2,r3
     3b8:	e0bffb05 	stb	r2,-20(fp)
	uint16_t timeout = 0;
     3bc:	e03fff8d 	sth	zero,-2(fp)
	uint8_t status = 0;
     3c0:	e03fff45 	stb	zero,-3(fp)
	do {
		ad9144_spi_read(dev,
     3c4:	e0bffd0b 	ldhu	r2,-12(fp)
     3c8:	e0ffff44 	addi	r3,fp,-3
     3cc:	180d883a 	mov	r6,r3
     3d0:	100b883a 	mov	r5,r2
     3d4:	e13ffe17 	ldw	r4,-8(fp)
     3d8:	00002840 	call	284 <ad9144_spi_read>
				reg_addr,
				&status);
		if ((status & reg_mask) == exp_reg_data) {
     3dc:	e0bfff43 	ldbu	r2,-3(fp)
     3e0:	e0fffc03 	ldbu	r3,-16(fp)
     3e4:	1884703a 	and	r2,r3,r2
     3e8:	e0fffb03 	ldbu	r3,-20(fp)
     3ec:	10803fcc 	andi	r2,r2,255
     3f0:	1880021e 	bne	r3,r2,3fc <ad9144_spi_check_status+0x74>
			return 0;
     3f4:	0005883a 	mov	r2,zero
     3f8:	00000906 	br	420 <ad9144_spi_check_status+0x98>
		} else {
			timeout++;
     3fc:	e0bfff8b 	ldhu	r2,-2(fp)
     400:	10800044 	addi	r2,r2,1
     404:	e0bfff8d 	sth	r2,-2(fp)
			mdelay(1);
     408:	0100fa04 	movi	r4,1000
     40c:	00206540 	call	20654 <usleep>
		}
	} while(timeout < 100);
     410:	e0bfff8b 	ldhu	r2,-2(fp)
     414:	10801930 	cmpltui	r2,r2,100
     418:	103fea1e 	bne	r2,zero,3c4 <__alt_mem_mcu_subsystem_ram_0+0x77fe03c4>

	return -1;
     41c:	00bfffc4 	movi	r2,-1
}
     420:	e037883a 	mov	sp,fp
     424:	dfc00117 	ldw	ra,4(sp)
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00204 	addi	sp,sp,8
     430:	f800283a 	ret

00000434 <ad9144_spi_write_seq>:
	uint16_t val;
};

int32_t ad9144_spi_write_seq(struct ad9144_dev *dev,
	const struct ad9144_reg_seq *seq, uint32_t num)
{
     434:	defffa04 	addi	sp,sp,-24
     438:	dfc00515 	stw	ra,20(sp)
     43c:	df000415 	stw	fp,16(sp)
     440:	df000404 	addi	fp,sp,16
     444:	e13ffe15 	stw	r4,-8(fp)
     448:	e17ffd15 	stw	r5,-12(fp)
     44c:	e1bffc15 	stw	r6,-16(fp)
	int32_t ret = 0;
     450:	e03fff15 	stw	zero,-4(fp)

	while (num) {
     454:	00001406 	br	4a8 <ad9144_spi_write_seq+0x74>
		ret |= ad9144_spi_write(dev, seq->reg, seq->val);
     458:	e0bffd17 	ldw	r2,-12(fp)
     45c:	1080000b 	ldhu	r2,0(r2)
     460:	10ffffcc 	andi	r3,r2,65535
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	1080008b 	ldhu	r2,2(r2)
     46c:	10803fcc 	andi	r2,r2,255
     470:	100d883a 	mov	r6,r2
     474:	180b883a 	mov	r5,r3
     478:	e13ffe17 	ldw	r4,-8(fp)
     47c:	000030c0 	call	30c <ad9144_spi_write>
     480:	1007883a 	mov	r3,r2
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10c4b03a 	or	r2,r2,r3
     48c:	e0bfff15 	stw	r2,-4(fp)
		num--;
     490:	e0bffc17 	ldw	r2,-16(fp)
     494:	10bfffc4 	addi	r2,r2,-1
     498:	e0bffc15 	stw	r2,-16(fp)
		seq++;
     49c:	e0bffd17 	ldw	r2,-12(fp)
     4a0:	10800104 	addi	r2,r2,4
     4a4:	e0bffd15 	stw	r2,-12(fp)
	while (num) {
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	103fea1e 	bne	r2,zero,458 <__alt_mem_mcu_subsystem_ram_0+0x77fe0458>
	}

	return 0;
     4b0:	0005883a 	mov	r2,zero
}
     4b4:	e037883a 	mov	sp,fp
     4b8:	dfc00117 	ldw	ra,4(sp)
     4bc:	df000017 	ldw	fp,0(sp)
     4c0:	dec00204 	addi	sp,sp,8
     4c4:	f800283a 	ret

000004c8 <ad9144_setup_jesd204_link>:
	{ 0x2a0, 0x06 },
};

int32_t ad9144_setup_jesd204_link(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
     4c8:	defff804 	addi	sp,sp,-32
     4cc:	dfc00715 	stw	ra,28(sp)
     4d0:	df000615 	stw	fp,24(sp)
     4d4:	df000604 	addi	fp,sp,24
     4d8:	e13ffb15 	stw	r4,-20(fp)
     4dc:	e17ffa15 	stw	r5,-24(fp)
	const struct ad9144_jesd204_link_mode *link_mode = NULL;
     4e0:	e03fff15 	stw	zero,-4(fp)
	unsigned int lane_mask;
	unsigned int val;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
     4e4:	e03ffd15 	stw	zero,-12(fp)
     4e8:	00001406 	br	53c <ad9144_setup_jesd204_link+0x74>
		if (ad9144_jesd204_link_modes[i].id == init_param->jesd204_mode) {
     4ec:	e0bffd17 	ldw	r2,-12(fp)
     4f0:	10c00164 	muli	r3,r2,5
     4f4:	008000b4 	movhi	r2,2
     4f8:	1885883a 	add	r2,r3,r2
     4fc:	10d3ca03 	ldbu	r3,20264(r2)
     500:	e0bffa17 	ldw	r2,-24(fp)
     504:	10801703 	ldbu	r2,92(r2)
     508:	18c03fcc 	andi	r3,r3,255
     50c:	10803fcc 	andi	r2,r2,255
     510:	1880071e 	bne	r3,r2,530 <ad9144_setup_jesd204_link+0x68>
			link_mode = &ad9144_jesd204_link_modes[i];
     514:	e0bffd17 	ldw	r2,-12(fp)
     518:	10c00164 	muli	r3,r2,5
     51c:	008000b4 	movhi	r2,2
     520:	1093ca04 	addi	r2,r2,20264
     524:	1885883a 	add	r2,r3,r2
     528:	e0bfff15 	stw	r2,-4(fp)
			break;
     52c:	00000606 	br	548 <ad9144_setup_jesd204_link+0x80>
	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	10800044 	addi	r2,r2,1
     538:	e0bffd15 	stw	r2,-12(fp)
     53c:	e0bffd17 	ldw	r2,-12(fp)
     540:	108002b0 	cmpltui	r2,r2,10
     544:	103fe91e 	bne	r2,zero,4ec <__alt_mem_mcu_subsystem_ram_0+0x77fe04ec>
		}
	}

	if (!link_mode)
     548:	e0bfff17 	ldw	r2,-4(fp)
     54c:	1000021e 	bne	r2,zero,558 <ad9144_setup_jesd204_link+0x90>
		return -1;
     550:	00bfffc4 	movi	r2,-1
     554:	0000a206 	br	7e0 <ad9144_setup_jesd204_link+0x318>

	lane_mask = (1 << link_mode->L) - 1;
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10800083 	ldbu	r2,2(r2)
     560:	10803fcc 	andi	r2,r2,255
     564:	00c00044 	movi	r3,1
     568:	1884983a 	sll	r2,r3,r2
     56c:	10bfffc4 	addi	r2,r2,-1
     570:	e0bffc15 	stw	r2,-16(fp)

	ad9144_spi_write(dev, REG_ILS_DID, 0x00);
     574:	000d883a 	mov	r6,zero
     578:	01411404 	movi	r5,1104
     57c:	e13ffb17 	ldw	r4,-20(fp)
     580:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_BID, 0x00);
     584:	000d883a 	mov	r6,zero
     588:	01411444 	movi	r5,1105
     58c:	e13ffb17 	ldw	r4,-20(fp)
     590:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_LID0, 0x00);
     594:	000d883a 	mov	r6,zero
     598:	01411484 	movi	r5,1106
     59c:	e13ffb17 	ldw	r4,-20(fp)
     5a0:	000030c0 	call	30c <ad9144_spi_write>

	val = link_mode->L - 1;
     5a4:	e0bfff17 	ldw	r2,-4(fp)
     5a8:	10800083 	ldbu	r2,2(r2)
     5ac:	10803fcc 	andi	r2,r2,255
     5b0:	10bfffc4 	addi	r2,r2,-1
     5b4:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_scrambling)
     5b8:	e0bffa17 	ldw	r2,-24(fp)
     5bc:	10801783 	ldbu	r2,94(r2)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	10000326 	beq	r2,zero,5d4 <ad9144_setup_jesd204_link+0x10c>
		val |= 0x80;
     5c8:	e0bffe17 	ldw	r2,-8(fp)
     5cc:	10802014 	ori	r2,r2,128
     5d0:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_SCR_L, val);
     5d4:	e0bffe17 	ldw	r2,-8(fp)
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	100d883a 	mov	r6,r2
     5e0:	014114c4 	movi	r5,1107
     5e4:	e13ffb17 	ldw	r4,-20(fp)
     5e8:	000030c0 	call	30c <ad9144_spi_write>

	val = link_mode->F - 1;
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	108000c3 	ldbu	r2,3(r2)
     5f4:	10803fcc 	andi	r2,r2,255
     5f8:	10bfffc4 	addi	r2,r2,-1
     5fc:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_F, val);
     600:	e0bffe17 	ldw	r2,-8(fp)
     604:	10803fcc 	andi	r2,r2,255
     608:	100d883a 	mov	r6,r2
     60c:	01411504 	movi	r5,1108
     610:	e13ffb17 	ldw	r4,-20(fp)
     614:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_K, 0x1f);
     618:	018007c4 	movi	r6,31
     61c:	01411544 	movi	r5,1109
     620:	e13ffb17 	ldw	r4,-20(fp)
     624:	000030c0 	call	30c <ad9144_spi_write>

	val = link_mode->M - 1;
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	10800043 	ldbu	r2,1(r2)
     630:	10803fcc 	andi	r2,r2,255
     634:	10bfffc4 	addi	r2,r2,-1
     638:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_M, val);
     63c:	e0bffe17 	ldw	r2,-8(fp)
     640:	10803fcc 	andi	r2,r2,255
     644:	100d883a 	mov	r6,r2
     648:	01411584 	movi	r5,1110
     64c:	e13ffb17 	ldw	r4,-20(fp)
     650:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_CS_N, 0x0f); // 16 bits per sample
     654:	018003c4 	movi	r6,15
     658:	014115c4 	movi	r5,1111
     65c:	e13ffb17 	ldw	r4,-20(fp)
     660:	000030c0 	call	30c <ad9144_spi_write>

	val = 0x0f; // 16 bits per sample
     664:	008003c4 	movi	r2,15
     668:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_subclass == 1)
     66c:	e0bffa17 	ldw	r2,-24(fp)
     670:	10801743 	ldbu	r2,93(r2)
     674:	10803fcc 	andi	r2,r2,255
     678:	10800058 	cmpnei	r2,r2,1
     67c:	1000031e 	bne	r2,zero,68c <ad9144_setup_jesd204_link+0x1c4>
		val |= 0x20;
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	10800814 	ori	r2,r2,32
     688:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_NP, val);
     68c:	e0bffe17 	ldw	r2,-8(fp)
     690:	10803fcc 	andi	r2,r2,255
     694:	100d883a 	mov	r6,r2
     698:	01411604 	movi	r5,1112
     69c:	e13ffb17 	ldw	r4,-20(fp)
     6a0:	000030c0 	call	30c <ad9144_spi_write>

	val = link_mode->S - 1;
     6a4:	e0bfff17 	ldw	r2,-4(fp)
     6a8:	10800103 	ldbu	r2,4(r2)
     6ac:	10803fcc 	andi	r2,r2,255
     6b0:	10bfffc4 	addi	r2,r2,-1
     6b4:	e0bffe15 	stw	r2,-8(fp)
	val |= 0x20; /* JESD204 version B */
     6b8:	e0bffe17 	ldw	r2,-8(fp)
     6bc:	10800814 	ori	r2,r2,32
     6c0:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_S, val);
     6c4:	e0bffe17 	ldw	r2,-8(fp)
     6c8:	10803fcc 	andi	r2,r2,255
     6cc:	100d883a 	mov	r6,r2
     6d0:	01411644 	movi	r5,1113
     6d4:	e13ffb17 	ldw	r4,-20(fp)
     6d8:	000030c0 	call	30c <ad9144_spi_write>

	val = link_mode->F == 0 ? 0x80 : 0x00;
     6dc:	e0bfff17 	ldw	r2,-4(fp)
     6e0:	108000c3 	ldbu	r2,3(r2)
     6e4:	10803fcc 	andi	r2,r2,255
     6e8:	1000021e 	bne	r2,zero,6f4 <ad9144_setup_jesd204_link+0x22c>
     6ec:	00802004 	movi	r2,128
     6f0:	00000106 	br	6f8 <ad9144_setup_jesd204_link+0x230>
     6f4:	0005883a 	mov	r2,zero
     6f8:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_HD_CF, val);
     6fc:	e0bffe17 	ldw	r2,-8(fp)
     700:	10803fcc 	andi	r2,r2,255
     704:	100d883a 	mov	r6,r2
     708:	01411684 	movi	r5,1114
     70c:	e13ffb17 	ldw	r4,-20(fp)
     710:	000030c0 	call	30c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_LANEDESKEW, lane_mask);
     714:	e0bffc17 	ldw	r2,-16(fp)
     718:	10803fcc 	andi	r2,r2,255
     71c:	100d883a 	mov	r6,r2
     720:	01411b04 	movi	r5,1132
     724:	e13ffb17 	ldw	r4,-20(fp)
     728:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CTRLREG1, link_mode->F);
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	108000c3 	ldbu	r2,3(r2)
     734:	10803fcc 	andi	r2,r2,255
     738:	100d883a 	mov	r6,r2
     73c:	01411d84 	movi	r5,1142
     740:	e13ffb17 	ldw	r4,-20(fp)
     744:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LANEENABLE, lane_mask);
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	10803fcc 	andi	r2,r2,255
     750:	100d883a 	mov	r6,r2
     754:	01411f44 	movi	r5,1149
     758:	e13ffb17 	ldw	r4,-20(fp)
     75c:	000030c0 	call	30c <ad9144_spi_write>
	 * JESD204 standard the pulse length should be two frame clock cycles.
	 *
	 * 1 PCLK cycle = 4 octets
	 *   => SYNC~ pulse length = 2 * octets_per_frame / 4
	 */
	switch (link_mode->F) {
     760:	e0bfff17 	ldw	r2,-4(fp)
     764:	108000c3 	ldbu	r2,3(r2)
     768:	10803fcc 	andi	r2,r2,255
     76c:	10c00060 	cmpeqi	r3,r2,1
     770:	1800031e 	bne	r3,zero,780 <ad9144_setup_jesd204_link+0x2b8>
     774:	108000a0 	cmpeqi	r2,r2,2
     778:	1000031e 	bne	r2,zero,788 <ad9144_setup_jesd204_link+0x2c0>
     77c:	00000506 	br	794 <ad9144_setup_jesd204_link+0x2cc>
	case 1:
		/* 0.5 PCLK cycles */
		val = 0x0;
     780:	e03ffe15 	stw	zero,-8(fp)
		break;
     784:	00000606 	br	7a0 <ad9144_setup_jesd204_link+0x2d8>
	case 2:
		/* 1 PCLK cycle */
		val = 0x1;
     788:	00800044 	movi	r2,1
     78c:	e0bffe15 	stw	r2,-8(fp)
		break;
     790:	00000306 	br	7a0 <ad9144_setup_jesd204_link+0x2d8>
	default:
		/* 2 PCLK cycles */
		val = 0x2;
     794:	00800084 	movi	r2,2
     798:	e0bffe15 	stw	r2,-8(fp)
		break;
     79c:	0001883a 	nop
	}
	ad9144_spi_write(dev, REG_SYNCB_GEN_1, val << 4);
     7a0:	e0bffe17 	ldw	r2,-8(fp)
     7a4:	1004913a 	slli	r2,r2,4
     7a8:	10803fcc 	andi	r2,r2,255
     7ac:	100d883a 	mov	r6,r2
     7b0:	0140c484 	movi	r5,786
     7b4:	e13ffb17 	ldw	r4,-20(fp)
     7b8:	000030c0 	call	30c <ad9144_spi_write>

	dev->num_converters = link_mode->M;
     7bc:	e0bfff17 	ldw	r2,-4(fp)
     7c0:	10c00043 	ldbu	r3,1(r2)
     7c4:	e0bffb17 	ldw	r2,-20(fp)
     7c8:	10c00105 	stb	r3,4(r2)
	dev->num_lanes = link_mode->L;
     7cc:	e0bfff17 	ldw	r2,-4(fp)
     7d0:	10c00083 	ldbu	r3,2(r2)
     7d4:	e0bffb17 	ldw	r2,-20(fp)
     7d8:	10c00145 	stb	r3,5(r2)

	return 0;
     7dc:	0005883a 	mov	r2,zero
}
     7e0:	e037883a 	mov	sp,fp
     7e4:	dfc00117 	ldw	ra,4(sp)
     7e8:	df000017 	ldw	fp,0(sp)
     7ec:	dec00204 	addi	sp,sp,8
     7f0:	f800283a 	ret

000007f4 <ad9144_pll_setup>:
	{ 0x1c4, 0x7e },
};

static int32_t ad9144_pll_setup(struct ad9144_dev *dev,
				const struct ad9144_init_param *init_param)
{
     7f4:	defff404 	addi	sp,sp,-48
     7f8:	dfc00b15 	stw	ra,44(sp)
     7fc:	df000a15 	stw	fp,40(sp)
     800:	df000a04 	addi	fp,sp,40
     804:	e13ff715 	stw	r4,-36(fp)
     808:	e17ff615 	stw	r5,-40(fp)
	uint32_t fref, fdac;
	uint32_t lo_div_mode;
	uint32_t ref_div_mode = 0;
     80c:	e03ffd15 	stw	zero,-12(fp)
	uint8_t vco_param[3];
	uint32_t bcount;
	uint32_t fvco;
	int32_t ret;

	fref = init_param->pll_ref_frequency_khz;
     810:	e0bff617 	ldw	r2,-40(fp)
     814:	10801a17 	ldw	r2,104(r2)
     818:	e0bfff15 	stw	r2,-4(fp)
	fdac = init_param->pll_dac_frequency_khz;
     81c:	e0bff617 	ldw	r2,-40(fp)
     820:	10801b17 	ldw	r2,108(r2)
     824:	e0bffb15 	stw	r2,-20(fp)

	if (fref > 1000000 || fref < 35000)
     828:	e0ffff17 	ldw	r3,-4(fp)
     82c:	008003f4 	movhi	r2,15
     830:	10909004 	addi	r2,r2,16960
     834:	10c00336 	bltu	r2,r3,844 <ad9144_pll_setup+0x50>
     838:	e0bfff17 	ldw	r2,-4(fp)
     83c:	10a22e28 	cmpgeui	r2,r2,35000
     840:	1000021e 	bne	r2,zero,84c <ad9144_pll_setup+0x58>
		return -1;
     844:	00bfffc4 	movi	r2,-1
     848:	00009106 	br	a90 <ad9144_pll_setup+0x29c>

	if (fdac > 2800000 || fdac < 420000)
     84c:	e0fffb17 	ldw	r3,-20(fp)
     850:	00800af4 	movhi	r2,43
     854:	10ae6004 	addi	r2,r2,-18048
     858:	10c00436 	bltu	r2,r3,86c <ad9144_pll_setup+0x78>
     85c:	e0fffb17 	ldw	r3,-20(fp)
     860:	008001b4 	movhi	r2,6
     864:	109a27c4 	addi	r2,r2,26783
     868:	10c00236 	bltu	r2,r3,874 <ad9144_pll_setup+0x80>
		return -1;
     86c:	00bfffc4 	movi	r2,-1
     870:	00008706 	br	a90 <ad9144_pll_setup+0x29c>

	if (fdac >= 1500000)
     874:	e0fffb17 	ldw	r3,-20(fp)
     878:	008005f4 	movhi	r2,23
     87c:	10b8d7c4 	addi	r2,r2,-7329
     880:	10c0032e 	bgeu	r2,r3,890 <ad9144_pll_setup+0x9c>
		lo_div_mode = 1;
     884:	00800044 	movi	r2,1
     888:	e0bffe15 	stw	r2,-8(fp)
     88c:	00001006 	br	8d0 <ad9144_pll_setup+0xdc>
	else if (fdac >= 750000)
     890:	e0fffb17 	ldw	r3,-20(fp)
     894:	008002f4 	movhi	r2,11
     898:	109c6bc4 	addi	r2,r2,29103
     89c:	10c0032e 	bgeu	r2,r3,8ac <ad9144_pll_setup+0xb8>
		lo_div_mode = 2;
     8a0:	00800084 	movi	r2,2
     8a4:	e0bffe15 	stw	r2,-8(fp)
     8a8:	00000906 	br	8d0 <ad9144_pll_setup+0xdc>
	else
		lo_div_mode = 3;
     8ac:	008000c4 	movi	r2,3
     8b0:	e0bffe15 	stw	r2,-8(fp)

	while (fref > 80000) {
     8b4:	00000606 	br	8d0 <ad9144_pll_setup+0xdc>
		ref_div_mode++;
     8b8:	e0bffd17 	ldw	r2,-12(fp)
     8bc:	10800044 	addi	r2,r2,1
     8c0:	e0bffd15 	stw	r2,-12(fp)
		fref /= 2;
     8c4:	e0bfff17 	ldw	r2,-4(fp)
     8c8:	1004d07a 	srli	r2,r2,1
     8cc:	e0bfff15 	stw	r2,-4(fp)
	while (fref > 80000) {
     8d0:	e0ffff17 	ldw	r3,-4(fp)
     8d4:	00800074 	movhi	r2,1
     8d8:	108e2004 	addi	r2,r2,14464
     8dc:	10fff636 	bltu	r2,r3,8b8 <__alt_mem_mcu_subsystem_ram_0+0x77fe08b8>
	}

	fvco = fdac << (lo_div_mode + 1);
     8e0:	e0bffe17 	ldw	r2,-8(fp)
     8e4:	10800044 	addi	r2,r2,1
     8e8:	e0fffb17 	ldw	r3,-20(fp)
     8ec:	1884983a 	sll	r2,r3,r2
     8f0:	e0bffa15 	stw	r2,-24(fp)
	bcount = fdac / (2 * fref);
     8f4:	e0bfff17 	ldw	r2,-4(fp)
     8f8:	1085883a 	add	r2,r2,r2
     8fc:	1007883a 	mov	r3,r2
     900:	e0bffb17 	ldw	r2,-20(fp)
     904:	10c5203a 	divu	r2,r2,r3
     908:	e0bffc15 	stw	r2,-16(fp)
	if (bcount < 6) {
     90c:	e0bffc17 	ldw	r2,-16(fp)
     910:	108001a8 	cmpgeui	r2,r2,6
     914:	1000061e 	bne	r2,zero,930 <ad9144_pll_setup+0x13c>
		bcount *= 2;
     918:	e0bffc17 	ldw	r2,-16(fp)
     91c:	1085883a 	add	r2,r2,r2
     920:	e0bffc15 	stw	r2,-16(fp)
		ref_div_mode++;
     924:	e0bffd17 	ldw	r2,-12(fp)
     928:	10800044 	addi	r2,r2,1
     92c:	e0bffd15 	stw	r2,-12(fp)
	}

	if (fvco < 6300000) {
     930:	e0fffa17 	ldw	r3,-24(fp)
     934:	00801834 	movhi	r2,96
     938:	108857c4 	addi	r2,r2,8543
     93c:	10c00736 	bltu	r2,r3,95c <ad9144_pll_setup+0x168>
		vco_param[0] = 0x08;
     940:	00800204 	movi	r2,8
     944:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
     948:	008000c4 	movi	r2,3
     94c:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x07;
     950:	008001c4 	movi	r2,7
     954:	e0bff8c5 	stb	r2,-29(fp)
     958:	00001106 	br	9a0 <ad9144_pll_setup+0x1ac>
	} else if (fvco < 7250000) {
     95c:	e0fffa17 	ldw	r3,-24(fp)
     960:	00801bf4 	movhi	r2,111
     964:	10a813c4 	addi	r2,r2,-24497
     968:	10c00736 	bltu	r2,r3,988 <ad9144_pll_setup+0x194>
		vco_param[0] = 0x09;
     96c:	00800244 	movi	r2,9
     970:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
     974:	008000c4 	movi	r2,3
     978:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
     97c:	00800184 	movi	r2,6
     980:	e0bff8c5 	stb	r2,-29(fp)
     984:	00000606 	br	9a0 <ad9144_pll_setup+0x1ac>
	} else {
		vco_param[0] = 0x09;
     988:	00800244 	movi	r2,9
     98c:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x13;
     990:	008004c4 	movi	r2,19
     994:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
     998:	00800184 	movi	r2,6
     99c:	e0bff8c5 	stb	r2,-29(fp)
	}

	ad9144_spi_write_seq(dev, ad9144_pll_fixed_writes,
     9a0:	01800344 	movi	r6,13
     9a4:	014000b4 	movhi	r5,2
     9a8:	2953ea84 	addi	r5,r5,20394
     9ac:	e13ff717 	ldw	r4,-36(fp)
     9b0:	00004340 	call	434 <ad9144_spi_write_seq>
		ARRAY_SIZE(ad9144_pll_fixed_writes));

	ad9144_spi_write(dev, REG_DACLOGENCNTRL, lo_div_mode);
     9b4:	e0bffe17 	ldw	r2,-8(fp)
     9b8:	10803fcc 	andi	r2,r2,255
     9bc:	100d883a 	mov	r6,r2
     9c0:	014022c4 	movi	r5,139
     9c4:	e13ff717 	ldw	r4,-36(fp)
     9c8:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACLDOCNTRL1, ref_div_mode);
     9cc:	e0bffd17 	ldw	r2,-12(fp)
     9d0:	10803fcc 	andi	r2,r2,255
     9d4:	100d883a 	mov	r6,r2
     9d8:	01402304 	movi	r5,140
     9dc:	e13ff717 	ldw	r4,-36(fp)
     9e0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACINTEGERWORD0, bcount);
     9e4:	e0bffc17 	ldw	r2,-16(fp)
     9e8:	10803fcc 	andi	r2,r2,255
     9ec:	100d883a 	mov	r6,r2
     9f0:	01402144 	movi	r5,133
     9f4:	e13ff717 	ldw	r4,-36(fp)
     9f8:	000030c0 	call	30c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLT5, vco_param[0]);
     9fc:	e0bff843 	ldbu	r2,-31(fp)
     a00:	10803fcc 	andi	r2,r2,255
     a04:	100d883a 	mov	r6,r2
     a08:	01406d44 	movi	r5,437
     a0c:	e13ff717 	ldw	r4,-36(fp)
     a10:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLTB, vco_param[1]);
     a14:	e0bff883 	ldbu	r2,-30(fp)
     a18:	10803fcc 	andi	r2,r2,255
     a1c:	100d883a 	mov	r6,r2
     a20:	01406ec4 	movi	r5,443
     a24:	e13ff717 	ldw	r4,-36(fp)
     a28:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLT18, vco_param[2]);
     a2c:	e0bff8c3 	ldbu	r2,-29(fp)
     a30:	10803fcc 	andi	r2,r2,255
     a34:	100d883a 	mov	r6,r2
     a38:	01407144 	movi	r5,453
     a3c:	e13ff717 	ldw	r4,-36(fp)
     a40:	000030c0 	call	30c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLCNTRL, 0x10);
     a44:	01800404 	movi	r6,16
     a48:	014020c4 	movi	r5,131
     a4c:	e13ff717 	ldw	r4,-36(fp)
     a50:	000030c0 	call	30c <ad9144_spi_write>

	ret = ad9144_spi_check_status(dev, REG_DACPLLSTATUS, 0x22, 0x22);
     a54:	01c00884 	movi	r7,34
     a58:	01800884 	movi	r6,34
     a5c:	01402104 	movi	r5,132
     a60:	e13ff717 	ldw	r4,-36(fp)
     a64:	00003880 	call	388 <ad9144_spi_check_status>
     a68:	e0bff915 	stw	r2,-28(fp)
	if (ret == -1)
     a6c:	e0bff917 	ldw	r2,-28(fp)
     a70:	10bfffd8 	cmpnei	r2,r2,-1
     a74:	1000051e 	bne	r2,zero,a8c <ad9144_pll_setup+0x298>
		printf("%s : DAC PLL NOT locked!.\n", __func__);
     a78:	014000b4 	movhi	r5,2
     a7c:	29547104 	addi	r5,r5,20932
     a80:	010000b4 	movhi	r4,2
     a84:	2113f804 	addi	r4,r4,20448
     a88:	0010ec40 	call	10ec4 <printf>

	return ret;
     a8c:	e0bff917 	ldw	r2,-28(fp)
}
     a90:	e037883a 	mov	sp,fp
     a94:	dfc00117 	ldw	ra,4(sp)
     a98:	df000017 	ldw	fp,0(sp)
     a9c:	dec00204 	addi	sp,sp,8
     aa0:	f800283a 	ret

00000aa4 <ad9144_setup>:
/***************************************************************************//**
 * @brief ad9144_setup
********************************************************************************/
int32_t ad9144_setup(struct ad9144_dev **device,
		     const struct ad9144_init_param *init_param)
{
     aa4:	defff604 	addi	sp,sp,-40
     aa8:	dfc00915 	stw	ra,36(sp)
     aac:	df000815 	stw	fp,32(sp)
     ab0:	df000804 	addi	fp,sp,32
     ab4:	e13ff915 	stw	r4,-28(fp)
     ab8:	e17ff815 	stw	r5,-32(fp)
	uint8_t scratchpad;
	uint32_t val;
	int32_t ret;
	struct ad9144_dev *dev;

	dev = (struct ad9144_dev *)malloc(sizeof(*dev));
     abc:	01000204 	movi	r4,8
     ac0:	000fdd40 	call	fdd4 <malloc>
     ac4:	e0bffc15 	stw	r2,-16(fp)
	if (!dev)
     ac8:	e0bffc17 	ldw	r2,-16(fp)
     acc:	1000021e 	bne	r2,zero,ad8 <ad9144_setup+0x34>
		return -1;
     ad0:	00bfffc4 	movi	r2,-1
     ad4:	00015d06 	br	104c <ad9144_setup+0x5a8>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
     ad8:	e0bffc17 	ldw	r2,-16(fp)
     adc:	e0fff817 	ldw	r3,-32(fp)
     ae0:	180b883a 	mov	r5,r3
     ae4:	1009883a 	mov	r4,r2
     ae8:	0007c480 	call	7c48 <spi_init>
     aec:	e0bffb15 	stw	r2,-20(fp)
	if (ret == -1)
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	10bfffd8 	cmpnei	r2,r2,-1
     af8:	1000051e 	bne	r2,zero,b10 <ad9144_setup+0x6c>
		printf("%s : Device descriptor failed!\n", __func__);
     afc:	014000b4 	movhi	r5,2
     b00:	29547604 	addi	r5,r5,20952
     b04:	010000b4 	movhi	r4,2
     b08:	2113ff04 	addi	r4,r4,20476
     b0c:	0010ec40 	call	10ec4 <printf>

	// reset
	ad9144_spi_write(dev, REG_SPI_INTFCONFA, SOFTRESET_M | SOFTRESET);
     b10:	01802044 	movi	r6,129
     b14:	000b883a 	mov	r5,zero
     b18:	e13ffc17 	ldw	r4,-16(fp)
     b1c:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SPI_INTFCONFA, init_param->spi3wire ? 0x00 : 0x18);
     b20:	e0bff817 	ldw	r2,-32(fp)
     b24:	10800403 	ldbu	r2,16(r2)
     b28:	10803fcc 	andi	r2,r2,255
     b2c:	10000226 	beq	r2,zero,b38 <ad9144_setup+0x94>
     b30:	0005883a 	mov	r2,zero
     b34:	00000106 	br	b3c <ad9144_setup+0x98>
     b38:	00800604 	movi	r2,24
     b3c:	100d883a 	mov	r6,r2
     b40:	000b883a 	mov	r5,zero
     b44:	e13ffc17 	ldw	r4,-16(fp)
     b48:	000030c0 	call	30c <ad9144_spi_write>
	mdelay(1);
     b4c:	0100fa04 	movi	r4,1000
     b50:	00206540 	call	20654 <usleep>

	ad9144_spi_read(dev, REG_SPI_PRODIDL, &chip_id);
     b54:	e0bffac4 	addi	r2,fp,-21
     b58:	100d883a 	mov	r6,r2
     b5c:	01400104 	movi	r5,4
     b60:	e13ffc17 	ldw	r4,-16(fp)
     b64:	00002840 	call	284 <ad9144_spi_read>
	if(chip_id != AD9144_CHIP_ID) {
     b68:	e0bffac3 	ldbu	r2,-21(fp)
     b6c:	10803fcc 	andi	r2,r2,255
     b70:	10801120 	cmpeqi	r2,r2,68
     b74:	10000a1e 	bne	r2,zero,ba0 <ad9144_setup+0xfc>
		printf("%s : Invalid CHIP ID (0x%x).\n", __func__, chip_id);
     b78:	e0bffac3 	ldbu	r2,-21(fp)
     b7c:	10803fcc 	andi	r2,r2,255
     b80:	100d883a 	mov	r6,r2
     b84:	014000b4 	movhi	r5,2
     b88:	29547604 	addi	r5,r5,20952
     b8c:	010000b4 	movhi	r4,2
     b90:	21140704 	addi	r4,r4,20508
     b94:	0010ec40 	call	10ec4 <printf>
		return -1;
     b98:	00bfffc4 	movi	r2,-1
     b9c:	00012b06 	br	104c <ad9144_setup+0x5a8>
	}

	ad9144_spi_write(dev, REG_SPI_SCRATCHPAD, 0xAD);
     ba0:	01802b44 	movi	r6,173
     ba4:	01400284 	movi	r5,10
     ba8:	e13ffc17 	ldw	r4,-16(fp)
     bac:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_read(dev, REG_SPI_SCRATCHPAD, &scratchpad);
     bb0:	e0bffa84 	addi	r2,fp,-22
     bb4:	100d883a 	mov	r6,r2
     bb8:	01400284 	movi	r5,10
     bbc:	e13ffc17 	ldw	r4,-16(fp)
     bc0:	00002840 	call	284 <ad9144_spi_read>
	if(scratchpad != 0xAD) {
     bc4:	e0bffa83 	ldbu	r2,-22(fp)
     bc8:	10803fcc 	andi	r2,r2,255
     bcc:	10802b60 	cmpeqi	r2,r2,173
     bd0:	10000a1e 	bne	r2,zero,bfc <ad9144_setup+0x158>
		printf("%s : scratchpad read-write failed (0x%x)!\n", __func__,
     bd4:	e0bffa83 	ldbu	r2,-22(fp)
     bd8:	10803fcc 	andi	r2,r2,255
     bdc:	100d883a 	mov	r6,r2
     be0:	014000b4 	movhi	r5,2
     be4:	29547604 	addi	r5,r5,20952
     be8:	010000b4 	movhi	r4,2
     bec:	21140f04 	addi	r4,r4,20540
     bf0:	0010ec40 	call	10ec4 <printf>
		       scratchpad);
		return -1;
     bf4:	00bfffc4 	movi	r2,-1
     bf8:	00011406 	br	104c <ad9144_setup+0x5a8>
	}

	// power-up and dac initialization
	ad9144_spi_write(dev, REG_PWRCNTRL0, 0x00);	// dacs - power up everything
     bfc:	000d883a 	mov	r6,zero
     c00:	01400444 	movi	r5,17
     c04:	e13ffc17 	ldw	r4,-16(fp)
     c08:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CLKCFG0, 0x00);	// clocks - power up everything
     c0c:	000d883a 	mov	r6,zero
     c10:	01402004 	movi	r5,128
     c14:	e13ffc17 	ldw	r4,-16(fp)
     c18:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYSREF_ACTRL0, 0x00);	// sysref - power up/falling edge
     c1c:	000d883a 	mov	r6,zero
     c20:	01402044 	movi	r5,129
     c24:	e13ffc17 	ldw	r4,-16(fp)
     c28:	000030c0 	call	30c <ad9144_spi_write>

	// required device configurations
	ad9144_spi_write_seq(dev, ad9144_required_device_config, ARRAY_SIZE(ad9144_required_device_config));
     c2c:	01800144 	movi	r6,5
     c30:	014000b4 	movhi	r5,2
     c34:	2953d684 	addi	r5,r5,20314
     c38:	e13ffc17 	ldw	r4,-16(fp)
     c3c:	00004340 	call	434 <ad9144_spi_write_seq>
	ad9144_spi_write_seq(dev, ad9144_optimal_serdes_settings, ARRAY_SIZE(ad9144_optimal_serdes_settings));
     c40:	018003c4 	movi	r6,15
     c44:	014000b4 	movhi	r5,2
     c48:	2953db84 	addi	r5,r5,20334
     c4c:	e13ffc17 	ldw	r4,-16(fp)
     c50:	00004340 	call	434 <ad9144_spi_write_seq>

	if (init_param->pll_enable)
     c54:	e0bff817 	ldw	r2,-32(fp)
     c58:	108019c3 	ldbu	r2,103(r2)
     c5c:	10803fcc 	andi	r2,r2,255
     c60:	10000326 	beq	r2,zero,c70 <ad9144_setup+0x1cc>
		ad9144_pll_setup(dev, init_param);
     c64:	e17ff817 	ldw	r5,-32(fp)
     c68:	e13ffc17 	ldw	r4,-16(fp)
     c6c:	00007f40 	call	7f4 <ad9144_pll_setup>

	// digital data path

	switch (init_param->interpolation) {
     c70:	e0bff817 	ldw	r2,-32(fp)
     c74:	10800443 	ldbu	r2,17(r2)
     c78:	10803fcc 	andi	r2,r2,255
     c7c:	10c00120 	cmpeqi	r3,r2,4
     c80:	1800071e 	bne	r3,zero,ca0 <ad9144_setup+0x1fc>
     c84:	10c00220 	cmpeqi	r3,r2,8
     c88:	1800081e 	bne	r3,zero,cac <ad9144_setup+0x208>
     c8c:	108000a0 	cmpeqi	r2,r2,2
     c90:	10000926 	beq	r2,zero,cb8 <ad9144_setup+0x214>
	case 2:
		val = 0x01;
     c94:	00800044 	movi	r2,1
     c98:	e0bffd15 	stw	r2,-12(fp)
		break;
     c9c:	00000806 	br	cc0 <ad9144_setup+0x21c>
	case 4:
		val = 0x03;
     ca0:	008000c4 	movi	r2,3
     ca4:	e0bffd15 	stw	r2,-12(fp)
		break;
     ca8:	00000506 	br	cc0 <ad9144_setup+0x21c>
	case 8:
		val = 0x04;
     cac:	00800104 	movi	r2,4
     cb0:	e0bffd15 	stw	r2,-12(fp)
		break;
     cb4:	00000206 	br	cc0 <ad9144_setup+0x21c>
	default:
		val = 0x00;
     cb8:	e03ffd15 	stw	zero,-12(fp)
		break;
     cbc:	0001883a 	nop
	}

	ad9144_spi_write(dev, REG_INTERP_MODE, val);
     cc0:	e0bffd17 	ldw	r2,-12(fp)
     cc4:	10803fcc 	andi	r2,r2,255
     cc8:	100d883a 	mov	r6,r2
     ccc:	01404484 	movi	r5,274
     cd0:	e13ffc17 	ldw	r4,-16(fp)
     cd4:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DATA_FORMAT, 0x00);	// 2's complement
     cd8:	000d883a 	mov	r6,zero
     cdc:	01404404 	movi	r5,272
     ce0:	e13ffc17 	ldw	r4,-16(fp)
     ce4:	000030c0 	call	30c <ad9144_spi_write>

	// transport layer

	ad9144_spi_write(dev, REG_MASTER_PD, 0x00);	// phy - power up
     ce8:	000d883a 	mov	r6,zero
     cec:	01408004 	movi	r5,512
     cf0:	e13ffc17 	ldw	r4,-16(fp)
     cf4:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PHY_PD, 0x00);	// phy - power up
     cf8:	000d883a 	mov	r6,zero
     cfc:	01408044 	movi	r5,513
     d00:	e13ffc17 	ldw	r4,-16(fp)
     d04:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x00);	// single link - link 0
     d08:	000d883a 	mov	r6,zero
     d0c:	0140c004 	movi	r5,768
     d10:	e13ffc17 	ldw	r4,-16(fp)
     d14:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_setup_jesd204_link(dev, init_param);
     d18:	e17ff817 	ldw	r5,-32(fp)
     d1c:	e13ffc17 	ldw	r4,-16(fp)
     d20:	00004c80 	call	4c8 <ad9144_setup_jesd204_link>

	// physical layer

	if (init_param->lane_rate_kbps < 2880000) {
     d24:	e0bff817 	ldw	r2,-32(fp)
     d28:	10c01517 	ldw	r3,84(r2)
     d2c:	00800b34 	movhi	r2,44
     d30:	10bc7fc4 	addi	r2,r2,-3585
     d34:	10c00536 	bltu	r2,r3,d4c <ad9144_setup+0x2a8>
		serdes_cdr = 0x0a;
     d38:	00800284 	movi	r2,10
     d3c:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x06;
     d40:	00800184 	movi	r2,6
     d44:	e0bfff15 	stw	r2,-4(fp)
     d48:	00000e06 	br	d84 <ad9144_setup+0x2e0>
	} else if (init_param->lane_rate_kbps < 5750000) {
     d4c:	e0bff817 	ldw	r2,-32(fp)
     d50:	10c01517 	ldw	r3,84(r2)
     d54:	00801634 	movhi	r2,88
     d58:	10af3bc4 	addi	r2,r2,-17169
     d5c:	10c00536 	bltu	r2,r3,d74 <ad9144_setup+0x2d0>
		serdes_cdr = 0x08;
     d60:	00800204 	movi	r2,8
     d64:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x05;
     d68:	00800144 	movi	r2,5
     d6c:	e0bfff15 	stw	r2,-4(fp)
     d70:	00000406 	br	d84 <ad9144_setup+0x2e0>
	} else {
		serdes_cdr = 0x28;
     d74:	00800a04 	movi	r2,40
     d78:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x04;
     d7c:	00800104 	movi	r2,4
     d80:	e0bfff15 	stw	r2,-4(fp)
	}

	ad9144_spi_write(dev, REG_DEV_CONFIG_9, 0xb7);		// jesd termination
     d84:	01802dc4 	movi	r6,183
     d88:	0140aa84 	movi	r5,682
     d8c:	e13ffc17 	ldw	r4,-16(fp)
     d90:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_10, 0x87);		// jesd termination
     d94:	018021c4 	movi	r6,135
     d98:	0140aac4 	movi	r5,683
     d9c:	e13ffc17 	ldw	r4,-16(fp)
     da0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_11, 0xb7);		// jesd termination
     da4:	01802dc4 	movi	r6,183
     da8:	0140ac44 	movi	r5,689
     dac:	e13ffc17 	ldw	r4,-16(fp)
     db0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_12, 0x87);		// jesd termination
     db4:	018021c4 	movi	r6,135
     db8:	0140ac84 	movi	r5,690
     dbc:	e13ffc17 	ldw	r4,-16(fp)
     dc0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK1_CTRLREG0, 0x01);	// input termination calibration
     dc4:	01800044 	movi	r6,1
     dc8:	0140a9c4 	movi	r5,679
     dcc:	e13ffc17 	ldw	r4,-16(fp)
     dd0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK2_CTRLREG0, 0x01);	// input termination calibration
     dd4:	01800044 	movi	r6,1
     dd8:	0140ab84 	movi	r5,686
     ddc:	e13ffc17 	ldw	r4,-16(fp)
     de0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SERDES_SPI_REG, 0x01);	// pclk == qbd master clock
     de4:	01800044 	movi	r6,1
     de8:	0140c504 	movi	r5,788
     dec:	e13ffc17 	ldw	r4,-16(fp)
     df0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_OPERATING_MODE_REG_0, serdes_cdr);
     df4:	e0bffe17 	ldw	r2,-8(fp)
     df8:	10803fcc 	andi	r2,r2,255
     dfc:	100d883a 	mov	r6,r2
     e00:	01408c04 	movi	r5,560
     e04:	e13ffc17 	ldw	r4,-16(fp)
     e08:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x00);	// cdr reset
     e0c:	000d883a 	mov	r6,zero
     e10:	01408184 	movi	r5,518
     e14:	e13ffc17 	ldw	r4,-16(fp)
     e18:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x01);	// cdr reset
     e1c:	01800044 	movi	r6,1
     e20:	01408184 	movi	r5,518
     e24:	e13ffc17 	ldw	r4,-16(fp)
     e28:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_REF_CLK_DIVIDER_LDO, serdes_plldiv);
     e2c:	e0bfff17 	ldw	r2,-4(fp)
     e30:	10803fcc 	andi	r2,r2,255
     e34:	100d883a 	mov	r6,r2
     e38:	0140a244 	movi	r5,649
     e3c:	e13ffc17 	ldw	r4,-16(fp)
     e40:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x01);	// enable serdes pll
     e44:	01800044 	movi	r6,1
     e48:	0140a004 	movi	r5,640
     e4c:	e13ffc17 	ldw	r4,-16(fp)
     e50:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x05);	// enable serdes calibration
     e54:	01800144 	movi	r6,5
     e58:	0140a004 	movi	r5,640
     e5c:	e13ffc17 	ldw	r4,-16(fp)
     e60:	000030c0 	call	30c <ad9144_spi_write>
	mdelay(20);
     e64:	01138804 	movi	r4,20000
     e68:	00206540 	call	20654 <usleep>

	ret = ad9144_spi_check_status(dev, REG_PLL_STATUS, 0x01, 0x01);
     e6c:	01c00044 	movi	r7,1
     e70:	01800044 	movi	r6,1
     e74:	0140a044 	movi	r5,641
     e78:	e13ffc17 	ldw	r4,-16(fp)
     e7c:	00003880 	call	388 <ad9144_spi_check_status>
     e80:	e0bffb15 	stw	r2,-20(fp)
	if (ret == -1)
     e84:	e0bffb17 	ldw	r2,-20(fp)
     e88:	10bfffd8 	cmpnei	r2,r2,-1
     e8c:	1000051e 	bne	r2,zero,ea4 <ad9144_setup+0x400>
		printf("%s : PLL NOT locked!.\n", __func__);
     e90:	014000b4 	movhi	r5,2
     e94:	29547604 	addi	r5,r5,20952
     e98:	010000b4 	movhi	r4,2
     e9c:	21141a04 	addi	r4,r4,20584
     ea0:	0010ec40 	call	10ec4 <printf>

	ad9144_spi_write(dev, REG_EQ_BIAS_REG, 0x62);	// equalizer
     ea4:	01801884 	movi	r6,98
     ea8:	01409a04 	movi	r5,616
     eac:	e13ffc17 	ldw	r4,-16(fp)
     eb0:	000030c0 	call	30c <ad9144_spi_write>

	// data link layer

	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_1, 0x01);	// subclass-1
     eb4:	01800044 	movi	r6,1
     eb8:	0140c044 	movi	r5,769
     ebc:	e13ffc17 	ldw	r4,-16(fp)
     ec0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_0, 0x00);	// lmfc delay
     ec4:	000d883a 	mov	r6,zero
     ec8:	0140c104 	movi	r5,772
     ecc:	e13ffc17 	ldw	r4,-16(fp)
     ed0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_1, 0x00);	// lmfc delay
     ed4:	000d883a 	mov	r6,zero
     ed8:	0140c144 	movi	r5,773
     edc:	e13ffc17 	ldw	r4,-16(fp)
     ee0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_0, 0x0a);	// receive buffer delay
     ee4:	01800284 	movi	r6,10
     ee8:	0140c184 	movi	r5,774
     eec:	e13ffc17 	ldw	r4,-16(fp)
     ef0:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_1, 0x0a);	// receive buffer delay
     ef4:	01800284 	movi	r6,10
     ef8:	0140c1c4 	movi	r5,775
     efc:	e13ffc17 	ldw	r4,-16(fp)
     f00:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x01);	// sync-oneshot mode
     f04:	01800044 	movi	r6,1
     f08:	01400e84 	movi	r5,58
     f0c:	e13ffc17 	ldw	r4,-16(fp)
     f10:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x81);	// sync-enable
     f14:	01802044 	movi	r6,129
     f18:	01400e84 	movi	r5,58
     f1c:	e13ffc17 	ldw	r4,-16(fp)
     f20:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0xc1);	// sysref-armed
     f24:	01803044 	movi	r6,193
     f28:	01400e84 	movi	r5,58
     f2c:	e13ffc17 	ldw	r4,-16(fp)
     f30:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
     f34:	e0bff817 	ldw	r2,-32(fp)
     f38:	108017c3 	ldbu	r2,95(r2)
     f3c:	108001cc 	andi	r2,r2,7
     f40:	1007883a 	mov	r3,r2
			 SRC_LANE1(init_param->jesd204_lane_xbar[1]));
     f44:	e0bff817 	ldw	r2,-32(fp)
     f48:	10801803 	ldbu	r2,96(r2)
     f4c:	10803fcc 	andi	r2,r2,255
     f50:	100490fa 	slli	r2,r2,3
     f54:	10800e0c 	andi	r2,r2,56
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
     f58:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
     f5c:	10803fcc 	andi	r2,r2,255
     f60:	100d883a 	mov	r6,r2
     f64:	0140c204 	movi	r5,776
     f68:	e13ffc17 	ldw	r4,-16(fp)
     f6c:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
     f70:	e0bff817 	ldw	r2,-32(fp)
     f74:	10801843 	ldbu	r2,97(r2)
     f78:	108001cc 	andi	r2,r2,7
     f7c:	1007883a 	mov	r3,r2
			 SRC_LANE3(init_param->jesd204_lane_xbar[3]));
     f80:	e0bff817 	ldw	r2,-32(fp)
     f84:	10801883 	ldbu	r2,98(r2)
     f88:	10803fcc 	andi	r2,r2,255
     f8c:	100490fa 	slli	r2,r2,3
     f90:	10800e0c 	andi	r2,r2,56
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
     f94:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
     f98:	10803fcc 	andi	r2,r2,255
     f9c:	100d883a 	mov	r6,r2
     fa0:	0140c244 	movi	r5,777
     fa4:	e13ffc17 	ldw	r4,-16(fp)
     fa8:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
     fac:	e0bff817 	ldw	r2,-32(fp)
     fb0:	108018c3 	ldbu	r2,99(r2)
     fb4:	108001cc 	andi	r2,r2,7
     fb8:	1007883a 	mov	r3,r2
			 SRC_LANE5(init_param->jesd204_lane_xbar[5]));
     fbc:	e0bff817 	ldw	r2,-32(fp)
     fc0:	10801903 	ldbu	r2,100(r2)
     fc4:	10803fcc 	andi	r2,r2,255
     fc8:	100490fa 	slli	r2,r2,3
     fcc:	10800e0c 	andi	r2,r2,56
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
     fd0:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
     fd4:	10803fcc 	andi	r2,r2,255
     fd8:	100d883a 	mov	r6,r2
     fdc:	0140c284 	movi	r5,778
     fe0:	e13ffc17 	ldw	r4,-16(fp)
     fe4:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
     fe8:	e0bff817 	ldw	r2,-32(fp)
     fec:	10801943 	ldbu	r2,101(r2)
     ff0:	108001cc 	andi	r2,r2,7
     ff4:	1007883a 	mov	r3,r2
			 SRC_LANE7(init_param->jesd204_lane_xbar[7]));
     ff8:	e0bff817 	ldw	r2,-32(fp)
     ffc:	10801983 	ldbu	r2,102(r2)
    1000:	10803fcc 	andi	r2,r2,255
    1004:	100490fa 	slli	r2,r2,3
    1008:	10800e0c 	andi	r2,r2,56
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
    100c:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
    1010:	10803fcc 	andi	r2,r2,255
    1014:	100d883a 	mov	r6,r2
    1018:	0140c2c4 	movi	r5,779
    101c:	e13ffc17 	ldw	r4,-16(fp)
    1020:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x01);	// enable link
    1024:	01800044 	movi	r6,1
    1028:	0140c004 	movi	r5,768
    102c:	e13ffc17 	ldw	r4,-16(fp)
    1030:	000030c0 	call	30c <ad9144_spi_write>

	// dac calibration
	ad9144_dac_calibrate(dev);
    1034:	e13ffc17 	ldw	r4,-16(fp)
    1038:	00010600 	call	1060 <ad9144_dac_calibrate>

	*device = dev;
    103c:	e0bff917 	ldw	r2,-28(fp)
    1040:	e0fffc17 	ldw	r3,-16(fp)
    1044:	10c00015 	stw	r3,0(r2)

	return ret;
    1048:	e0bffb17 	ldw	r2,-20(fp)
}
    104c:	e037883a 	mov	sp,fp
    1050:	dfc00117 	ldw	ra,4(sp)
    1054:	df000017 	ldw	fp,0(sp)
    1058:	dec00204 	addi	sp,sp,8
    105c:	f800283a 	ret

00001060 <ad9144_dac_calibrate>:

int32_t ad9144_dac_calibrate(struct ad9144_dev *dev)
{
    1060:	defffa04 	addi	sp,sp,-24
    1064:	dfc00515 	stw	ra,20(sp)
    1068:	df000415 	stw	fp,16(sp)
    106c:	df000404 	addi	fp,sp,16
    1070:	e13ffc15 	stw	r4,-16(fp)
	uint32_t dac_mask;
	unsigned int i;
	int ret;

	dac_mask = (1 << dev->num_converters) - 1;
    1074:	e0bffc17 	ldw	r2,-16(fp)
    1078:	10800103 	ldbu	r2,4(r2)
    107c:	10803fcc 	andi	r2,r2,255
    1080:	00c00044 	movi	r3,1
    1084:	1884983a 	sll	r2,r3,r2
    1088:	10bfffc4 	addi	r2,r2,-1
    108c:	e0bffe15 	stw	r2,-8(fp)

	/*
	 * DAC calibration sequence as per table 86 AD9144 datasheet Rev B.
	 */
	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x38);	// set calibration clock to 1m
    1090:	01800e04 	movi	r6,56
    1094:	014039c4 	movi	r5,231
    1098:	e13ffc17 	ldw	r4,-16(fp)
    109c:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INIT, 0xa6);	// use isb reference of 38 to set cal
    10a0:	01802984 	movi	r6,166
    10a4:	01403b44 	movi	r5,237
    10a8:	e13ffc17 	ldw	r4,-16(fp)
    10ac:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INDX, dac_mask);	// select all active DACs
    10b0:	e0bffe17 	ldw	r2,-8(fp)
    10b4:	10803fcc 	andi	r2,r2,255
    10b8:	100d883a 	mov	r6,r2
    10bc:	01403a04 	movi	r5,232
    10c0:	e13ffc17 	ldw	r4,-16(fp)
    10c4:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x01);	// single cal enable
    10c8:	01800044 	movi	r6,1
    10cc:	01403a44 	movi	r5,233
    10d0:	e13ffc17 	ldw	r4,-16(fp)
    10d4:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x03);	// single cal start
    10d8:	018000c4 	movi	r6,3
    10dc:	01403a44 	movi	r5,233
    10e0:	e13ffc17 	ldw	r4,-16(fp)
    10e4:	000030c0 	call	30c <ad9144_spi_write>
	mdelay(10);
    10e8:	0109c404 	movi	r4,10000
    10ec:	00206540 	call	20654 <usleep>

	for (i = 0; i < dev->num_converters; i++) {
    10f0:	e03fff15 	stw	zero,-4(fp)
    10f4:	00001a06 	br	1160 <ad9144_dac_calibrate+0x100>
		ad9144_spi_write(dev, REG_CAL_INDX, BIT(i));	// read dac-i
    10f8:	00c00044 	movi	r3,1
    10fc:	e0bfff17 	ldw	r2,-4(fp)
    1100:	1884983a 	sll	r2,r3,r2
    1104:	10803fcc 	andi	r2,r2,255
    1108:	100d883a 	mov	r6,r2
    110c:	01403a04 	movi	r5,232
    1110:	e13ffc17 	ldw	r4,-16(fp)
    1114:	000030c0 	call	30c <ad9144_spi_write>

		ret = ad9144_spi_check_status(dev, REG_CAL_CTRL, 0xc0, 0x80);
    1118:	01c02004 	movi	r7,128
    111c:	01803004 	movi	r6,192
    1120:	01403a44 	movi	r5,233
    1124:	e13ffc17 	ldw	r4,-16(fp)
    1128:	00003880 	call	388 <ad9144_spi_check_status>
    112c:	e0bffd15 	stw	r2,-12(fp)
		if (ret == -1)
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	10bfffd8 	cmpnei	r2,r2,-1
    1138:	1000061e 	bne	r2,zero,1154 <ad9144_dac_calibrate+0xf4>
			printf("%s: dac-%d calibration failed!\n", __func__, i);
    113c:	e1bfff17 	ldw	r6,-4(fp)
    1140:	014000b4 	movhi	r5,2
    1144:	29547a04 	addi	r5,r5,20968
    1148:	010000b4 	movhi	r4,2
    114c:	21142004 	addi	r4,r4,20608
    1150:	0010ec40 	call	10ec4 <printf>
	for (i = 0; i < dev->num_converters; i++) {
    1154:	e0bfff17 	ldw	r2,-4(fp)
    1158:	10800044 	addi	r2,r2,1
    115c:	e0bfff15 	stw	r2,-4(fp)
    1160:	e0bffc17 	ldw	r2,-16(fp)
    1164:	10800103 	ldbu	r2,4(r2)
    1168:	10803fcc 	andi	r2,r2,255
    116c:	e0ffff17 	ldw	r3,-4(fp)
    1170:	18bfe136 	bltu	r3,r2,10f8 <__alt_mem_mcu_subsystem_ram_0+0x77fe10f8>
	}

	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x30);	// turn off cal clock
    1174:	01800c04 	movi	r6,48
    1178:	014039c4 	movi	r5,231
    117c:	e13ffc17 	ldw	r4,-16(fp)
    1180:	000030c0 	call	30c <ad9144_spi_write>

	return 0;
    1184:	0005883a 	mov	r2,zero
}
    1188:	e037883a 	mov	sp,fp
    118c:	dfc00117 	ldw	ra,4(sp)
    1190:	df000017 	ldw	fp,0(sp)
    1194:	dec00204 	addi	sp,sp,8
    1198:	f800283a 	ret

0000119c <ad9144_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9144_remove(struct ad9144_dev *dev)
{
    119c:	defffc04 	addi	sp,sp,-16
    11a0:	dfc00315 	stw	ra,12(sp)
    11a4:	df000215 	stw	fp,8(sp)
    11a8:	df000204 	addi	fp,sp,8
    11ac:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    11b0:	e0bffe17 	ldw	r2,-8(fp)
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	1009883a 	mov	r4,r2
    11bc:	0007d0c0 	call	7d0c <spi_remove>
    11c0:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    11c4:	e13ffe17 	ldw	r4,-8(fp)
    11c8:	000fde40 	call	fde4 <free>

	return ret;
    11cc:	e0bfff17 	ldw	r2,-4(fp)
}
    11d0:	e037883a 	mov	sp,fp
    11d4:	dfc00117 	ldw	ra,4(sp)
    11d8:	df000017 	ldw	fp,0(sp)
    11dc:	dec00204 	addi	sp,sp,8
    11e0:	f800283a 	ret

000011e4 <ad9144_status>:

/***************************************************************************//**
 * @brief ad9144_status - return the status of the JESD interface
 *******************************************************************************/
int32_t ad9144_status(struct ad9144_dev *dev)
{
    11e4:	defffa04 	addi	sp,sp,-24
    11e8:	dfc00515 	stw	ra,20(sp)
    11ec:	df000415 	stw	fp,16(sp)
    11f0:	df000404 	addi	fp,sp,16
    11f4:	e13ffc15 	stw	r4,-16(fp)

	uint8_t status = 0;
    11f8:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
    11fc:	e03fff15 	stw	zero,-4(fp)
	uint32_t lane_mask;

	lane_mask = (1 << dev->num_lanes) - 1;
    1200:	e0bffc17 	ldw	r2,-16(fp)
    1204:	10800143 	ldbu	r2,5(r2)
    1208:	10803fcc 	andi	r2,r2,255
    120c:	00c00044 	movi	r3,1
    1210:	1884983a 	sll	r2,r3,r2
    1214:	10bfffc4 	addi	r2,r2,-1
    1218:	e0bffe15 	stw	r2,-8(fp)

	// check for jesd status on all lanes
	// failures on top are 100% guaranteed to make subsequent status checks fail

	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
    121c:	e0bffdc4 	addi	r2,fp,-9
    1220:	100d883a 	mov	r6,r2
    1224:	01411c04 	movi	r5,1136
    1228:	e13ffc17 	ldw	r4,-16(fp)
    122c:	00002840 	call	284 <ad9144_spi_read>
	if (status != lane_mask) {
    1230:	e0bffdc3 	ldbu	r2,-9(fp)
    1234:	10803fcc 	andi	r2,r2,255
    1238:	e0fffe17 	ldw	r3,-8(fp)
    123c:	18800a26 	beq	r3,r2,1268 <ad9144_status+0x84>
		printf("%s : CGS NOT received (%x)!.\n", __func__, status);
    1240:	e0bffdc3 	ldbu	r2,-9(fp)
    1244:	10803fcc 	andi	r2,r2,255
    1248:	100d883a 	mov	r6,r2
    124c:	014000b4 	movhi	r5,2
    1250:	29548004 	addi	r5,r5,20992
    1254:	010000b4 	movhi	r4,2
    1258:	21142804 	addi	r4,r4,20640
    125c:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    1260:	00bfffc4 	movi	r2,-1
    1264:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_INITLANESYNCFLG, &status);
    1268:	e0bffdc4 	addi	r2,fp,-9
    126c:	100d883a 	mov	r6,r2
    1270:	01411cc4 	movi	r5,1139
    1274:	e13ffc17 	ldw	r4,-16(fp)
    1278:	00002840 	call	284 <ad9144_spi_read>
	if (status != lane_mask) {
    127c:	e0bffdc3 	ldbu	r2,-9(fp)
    1280:	10803fcc 	andi	r2,r2,255
    1284:	e0fffe17 	ldw	r3,-8(fp)
    1288:	18800a26 	beq	r3,r2,12b4 <ad9144_status+0xd0>
		printf("%s : ILAS NOT received (%x)!.\n", __func__, status);
    128c:	e0bffdc3 	ldbu	r2,-9(fp)
    1290:	10803fcc 	andi	r2,r2,255
    1294:	100d883a 	mov	r6,r2
    1298:	014000b4 	movhi	r5,2
    129c:	29548004 	addi	r5,r5,20992
    12a0:	010000b4 	movhi	r4,2
    12a4:	21143004 	addi	r4,r4,20672
    12a8:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    12ac:	00bfffc4 	movi	r2,-1
    12b0:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_FRAMESYNCFLG, &status);
    12b4:	e0bffdc4 	addi	r2,fp,-9
    12b8:	100d883a 	mov	r6,r2
    12bc:	01411c44 	movi	r5,1137
    12c0:	e13ffc17 	ldw	r4,-16(fp)
    12c4:	00002840 	call	284 <ad9144_spi_read>
	if (status != lane_mask) {
    12c8:	e0bffdc3 	ldbu	r2,-9(fp)
    12cc:	10803fcc 	andi	r2,r2,255
    12d0:	e0fffe17 	ldw	r3,-8(fp)
    12d4:	18800a26 	beq	r3,r2,1300 <ad9144_status+0x11c>
		printf("%s : framer OUT OF SYNC (%x)!.\n", __func__, status);
    12d8:	e0bffdc3 	ldbu	r2,-9(fp)
    12dc:	10803fcc 	andi	r2,r2,255
    12e0:	100d883a 	mov	r6,r2
    12e4:	014000b4 	movhi	r5,2
    12e8:	29548004 	addi	r5,r5,20992
    12ec:	010000b4 	movhi	r4,2
    12f0:	21143804 	addi	r4,r4,20704
    12f4:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    12f8:	00bfffc4 	movi	r2,-1
    12fc:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_GOODCHKSUMFLG, &status);
    1300:	e0bffdc4 	addi	r2,fp,-9
    1304:	100d883a 	mov	r6,r2
    1308:	01411c84 	movi	r5,1138
    130c:	e13ffc17 	ldw	r4,-16(fp)
    1310:	00002840 	call	284 <ad9144_spi_read>
	if (status != lane_mask) {
    1314:	e0bffdc3 	ldbu	r2,-9(fp)
    1318:	10803fcc 	andi	r2,r2,255
    131c:	e0fffe17 	ldw	r3,-8(fp)
    1320:	18800a26 	beq	r3,r2,134c <ad9144_status+0x168>
		printf("%s : check-sum MISMATCH (%x)!.\n", __func__, status);
    1324:	e0bffdc3 	ldbu	r2,-9(fp)
    1328:	10803fcc 	andi	r2,r2,255
    132c:	100d883a 	mov	r6,r2
    1330:	014000b4 	movhi	r5,2
    1334:	29548004 	addi	r5,r5,20992
    1338:	010000b4 	movhi	r4,2
    133c:	21144004 	addi	r4,r4,20736
    1340:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    1344:	00bfffc4 	movi	r2,-1
    1348:	e0bfff15 	stw	r2,-4(fp)
	}

	return ret;
    134c:	e0bfff17 	ldw	r2,-4(fp)
}
    1350:	e037883a 	mov	sp,fp
    1354:	dfc00117 	ldw	ra,4(sp)
    1358:	df000017 	ldw	fp,0(sp)
    135c:	dec00204 	addi	sp,sp,8
    1360:	f800283a 	ret

00001364 <ad9144_short_pattern_test>:
/***************************************************************************//**
 * @brief ad9144_short_pattern_test
 *******************************************************************************/
int32_t ad9144_short_pattern_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
    1364:	defff604 	addi	sp,sp,-40
    1368:	dfc00915 	stw	ra,36(sp)
    136c:	df000815 	stw	fp,32(sp)
    1370:	df000804 	addi	fp,sp,32
    1374:	e13ffb15 	stw	r4,-20(fp)
    1378:	e17ffa15 	stw	r5,-24(fp)

	uint32_t dac = 0;
    137c:	e03fff15 	stw	zero,-4(fp)
	uint32_t sample = 0;
    1380:	e03ffe15 	stw	zero,-8(fp)
	uint8_t status = 0;
    1384:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
    1388:	e03ffc15 	stw	zero,-16(fp)

	for (dac = 0; dac < dev->num_converters; dac++) {
    138c:	e03fff15 	stw	zero,-4(fp)
    1390:	00007306 	br	1560 <ad9144_short_pattern_test+0x1fc>
		for (sample = 0; sample < 4; sample++) {
    1394:	e03ffe15 	stw	zero,-8(fp)
    1398:	00006b06 	br	1548 <ad9144_short_pattern_test+0x1e4>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x00));
    139c:	e0bffe17 	ldw	r2,-8(fp)
    13a0:	1004913a 	slli	r2,r2,4
    13a4:	1007883a 	mov	r3,r2
    13a8:	e0bfff17 	ldw	r2,-4(fp)
    13ac:	100490ba 	slli	r2,r2,2
    13b0:	1884b03a 	or	r2,r3,r2
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    13b4:	10803fcc 	andi	r2,r2,255
    13b8:	100d883a 	mov	r6,r2
    13bc:	0140cb04 	movi	r5,812
    13c0:	e13ffb17 	ldw	r4,-20(fp)
    13c4:	000030c0 	call	30c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
					 (init_param->stpl_samples[dac][sample]>>8));
    13c8:	e0fffa17 	ldw	r3,-24(fp)
    13cc:	e0bfff17 	ldw	r2,-4(fp)
    13d0:	100890ba 	slli	r4,r2,2
    13d4:	e0bffe17 	ldw	r2,-8(fp)
    13d8:	2085883a 	add	r2,r4,r2
    13dc:	10800144 	addi	r2,r2,5
    13e0:	100490ba 	slli	r2,r2,2
    13e4:	1885883a 	add	r2,r3,r2
    13e8:	10800017 	ldw	r2,0(r2)
    13ec:	1004d23a 	srli	r2,r2,8
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
    13f0:	10803fcc 	andi	r2,r2,255
    13f4:	100d883a 	mov	r6,r2
    13f8:	0140cb84 	movi	r5,814
    13fc:	e13ffb17 	ldw	r4,-20(fp)
    1400:	000030c0 	call	30c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
					 (init_param->stpl_samples[dac][sample]>>0));
    1404:	e0fffa17 	ldw	r3,-24(fp)
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	100890ba 	slli	r4,r2,2
    1410:	e0bffe17 	ldw	r2,-8(fp)
    1414:	2085883a 	add	r2,r4,r2
    1418:	10800144 	addi	r2,r2,5
    141c:	100490ba 	slli	r2,r2,2
    1420:	1885883a 	add	r2,r3,r2
    1424:	10800017 	ldw	r2,0(r2)
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
    1428:	10803fcc 	andi	r2,r2,255
    142c:	100d883a 	mov	r6,r2
    1430:	0140cb44 	movi	r5,813
    1434:	e13ffb17 	ldw	r4,-20(fp)
    1438:	000030c0 	call	30c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
    143c:	e0bffe17 	ldw	r2,-8(fp)
    1440:	1004913a 	slli	r2,r2,4
    1444:	1007883a 	mov	r3,r2
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	100490ba 	slli	r2,r2,2
    1450:	1884b03a 	or	r2,r3,r2
    1454:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    1458:	10803fcc 	andi	r2,r2,255
    145c:	100d883a 	mov	r6,r2
    1460:	0140cb04 	movi	r5,812
    1464:	e13ffb17 	ldw	r4,-20(fp)
    1468:	000030c0 	call	30c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x03));
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	1004913a 	slli	r2,r2,4
    1474:	1007883a 	mov	r3,r2
    1478:	e0bfff17 	ldw	r2,-4(fp)
    147c:	100490ba 	slli	r2,r2,2
    1480:	1884b03a 	or	r2,r3,r2
    1484:	108000d4 	ori	r2,r2,3
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    1488:	10803fcc 	andi	r2,r2,255
    148c:	100d883a 	mov	r6,r2
    1490:	0140cb04 	movi	r5,812
    1494:	e13ffb17 	ldw	r4,-20(fp)
    1498:	000030c0 	call	30c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
    149c:	e0bffe17 	ldw	r2,-8(fp)
    14a0:	1004913a 	slli	r2,r2,4
    14a4:	1007883a 	mov	r3,r2
    14a8:	e0bfff17 	ldw	r2,-4(fp)
    14ac:	100490ba 	slli	r2,r2,2
    14b0:	1884b03a 	or	r2,r3,r2
    14b4:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
    14b8:	10803fcc 	andi	r2,r2,255
    14bc:	100d883a 	mov	r6,r2
    14c0:	0140cb04 	movi	r5,812
    14c4:	e13ffb17 	ldw	r4,-20(fp)
    14c8:	000030c0 	call	30c <ad9144_spi_write>

			ret = ad9144_spi_check_status(dev,
    14cc:	000f883a 	mov	r7,zero
    14d0:	01800044 	movi	r6,1
    14d4:	0140cbc4 	movi	r5,815
    14d8:	e13ffb17 	ldw	r4,-20(fp)
    14dc:	00003880 	call	388 <ad9144_spi_check_status>
    14e0:	e0bffc15 	stw	r2,-16(fp)
						      REG_SHORT_TPL_TEST_3,
						      0x01, 0x00);
			if (ret == -1)
    14e4:	e0bffc17 	ldw	r2,-16(fp)
    14e8:	10bfffd8 	cmpnei	r2,r2,-1
    14ec:	1000131e 	bne	r2,zero,153c <ad9144_short_pattern_test+0x1d8>
				printf("%s : short-pattern-test mismatch (0x%x, 0x%x 0x%x, 0x%x)!.\n",
    14f0:	e0fffa17 	ldw	r3,-24(fp)
    14f4:	e0bfff17 	ldw	r2,-4(fp)
    14f8:	100890ba 	slli	r4,r2,2
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	2085883a 	add	r2,r4,r2
    1504:	10800144 	addi	r2,r2,5
    1508:	100490ba 	slli	r2,r2,2
    150c:	1885883a 	add	r2,r3,r2
    1510:	10800017 	ldw	r2,0(r2)
    1514:	e0fffdc3 	ldbu	r3,-9(fp)
    1518:	d8c00115 	stw	r3,4(sp)
    151c:	d8800015 	stw	r2,0(sp)
    1520:	e1fffe17 	ldw	r7,-8(fp)
    1524:	e1bfff17 	ldw	r6,-4(fp)
    1528:	014000b4 	movhi	r5,2
    152c:	29548404 	addi	r5,r5,21008
    1530:	010000b4 	movhi	r4,2
    1534:	21144804 	addi	r4,r4,20768
    1538:	0010ec40 	call	10ec4 <printf>
		for (sample = 0; sample < 4; sample++) {
    153c:	e0bffe17 	ldw	r2,-8(fp)
    1540:	10800044 	addi	r2,r2,1
    1544:	e0bffe15 	stw	r2,-8(fp)
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10800130 	cmpltui	r2,r2,4
    1550:	103f921e 	bne	r2,zero,139c <__alt_mem_mcu_subsystem_ram_0+0x77fe139c>
	for (dac = 0; dac < dev->num_converters; dac++) {
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	10800044 	addi	r2,r2,1
    155c:	e0bfff15 	stw	r2,-4(fp)
    1560:	e0bffb17 	ldw	r2,-20(fp)
    1564:	10800103 	ldbu	r2,4(r2)
    1568:	10803fcc 	andi	r2,r2,255
    156c:	e0ffff17 	ldw	r3,-4(fp)
    1570:	18bf8836 	bltu	r3,r2,1394 <__alt_mem_mcu_subsystem_ram_0+0x77fe1394>
				       __func__, dac, sample,
				       init_param->stpl_samples[dac][sample],
				       status);
		}
	}
	return 0;
    1574:	0005883a 	mov	r2,zero
}
    1578:	e037883a 	mov	sp,fp
    157c:	dfc00117 	ldw	ra,4(sp)
    1580:	df000017 	ldw	fp,0(sp)
    1584:	dec00204 	addi	sp,sp,8
    1588:	f800283a 	ret

0000158c <ad9144_datapath_prbs_test>:
/***************************************************************************//**
 * @brief ad9144_datapath_prbs_test
 *******************************************************************************/
int32_t ad9144_datapath_prbs_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
    158c:	defffa04 	addi	sp,sp,-24
    1590:	dfc00515 	stw	ra,20(sp)
    1594:	df000415 	stw	fp,16(sp)
    1598:	df000404 	addi	fp,sp,16
    159c:	e13ffd15 	stw	r4,-12(fp)
    15a0:	e17ffc15 	stw	r5,-16(fp)

	uint8_t status = 0;
    15a4:	e03ffec5 	stb	zero,-5(fp)
	int32_t ret = 0;
    15a8:	e03fff15 	stw	zero,-4(fp)


	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x03));
    15ac:	e0bffc17 	ldw	r2,-16(fp)
    15b0:	10801617 	ldw	r2,88(r2)
    15b4:	100490ba 	slli	r2,r2,2
    15b8:	108000d4 	ori	r2,r2,3
    15bc:	10803fcc 	andi	r2,r2,255
    15c0:	100d883a 	mov	r6,r2
    15c4:	014052c4 	movi	r5,331
    15c8:	e13ffd17 	ldw	r4,-12(fp)
    15cc:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x01));
    15d0:	e0bffc17 	ldw	r2,-16(fp)
    15d4:	10801617 	ldw	r2,88(r2)
    15d8:	100490ba 	slli	r2,r2,2
    15dc:	10800054 	ori	r2,r2,1
    15e0:	10803fcc 	andi	r2,r2,255
    15e4:	100d883a 	mov	r6,r2
    15e8:	014052c4 	movi	r5,331
    15ec:	e13ffd17 	ldw	r4,-12(fp)
    15f0:	000030c0 	call	30c <ad9144_spi_write>
	mdelay(500);
    15f4:	01000234 	movhi	r4,8
    15f8:	21284804 	addi	r4,r4,-24288
    15fc:	00206540 	call	20654 <usleep>

	ad9144_spi_write(dev, REG_SPI_PAGEINDX, 0x01);
    1600:	01800044 	movi	r6,1
    1604:	01400204 	movi	r5,8
    1608:	e13ffd17 	ldw	r4,-12(fp)
    160c:	000030c0 	call	30c <ad9144_spi_write>
	ad9144_spi_read(dev, REG_PRBS, &status);
    1610:	e0bffec4 	addi	r2,fp,-5
    1614:	100d883a 	mov	r6,r2
    1618:	014052c4 	movi	r5,331
    161c:	e13ffd17 	ldw	r4,-12(fp)
    1620:	00002840 	call	284 <ad9144_spi_read>
	if ((status & 0xc0) != 0xc0) {
    1624:	e0bffec3 	ldbu	r2,-5(fp)
    1628:	10803fcc 	andi	r2,r2,255
    162c:	1080300c 	andi	r2,r2,192
    1630:	10803020 	cmpeqi	r2,r2,192
    1634:	10000a1e 	bne	r2,zero,1660 <ad9144_datapath_prbs_test+0xd4>
		printf("%s : PRBS OUT OF SYNC (%x)!.\n", __func__, status);
    1638:	e0bffec3 	ldbu	r2,-5(fp)
    163c:	10803fcc 	andi	r2,r2,255
    1640:	100d883a 	mov	r6,r2
    1644:	014000b4 	movhi	r5,2
    1648:	29548b04 	addi	r5,r5,21036
    164c:	010000b4 	movhi	r4,2
    1650:	21145704 	addi	r4,r4,20828
    1654:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    1658:	00bfffc4 	movi	r2,-1
    165c:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_I, &status);
    1660:	e0bffec4 	addi	r2,fp,-5
    1664:	100d883a 	mov	r6,r2
    1668:	01405304 	movi	r5,332
    166c:	e13ffd17 	ldw	r4,-12(fp)
    1670:	00002840 	call	284 <ad9144_spi_read>
	if (status != 0x00) {
    1674:	e0bffec3 	ldbu	r2,-5(fp)
    1678:	10803fcc 	andi	r2,r2,255
    167c:	10000a26 	beq	r2,zero,16a8 <ad9144_datapath_prbs_test+0x11c>
		printf("%s : PRBS I channel ERRORS (%x)!.\n", __func__,
    1680:	e0bffec3 	ldbu	r2,-5(fp)
    1684:	10803fcc 	andi	r2,r2,255
    1688:	100d883a 	mov	r6,r2
    168c:	014000b4 	movhi	r5,2
    1690:	29548b04 	addi	r5,r5,21036
    1694:	010000b4 	movhi	r4,2
    1698:	21145f04 	addi	r4,r4,20860
    169c:	0010ec40 	call	10ec4 <printf>
		       status);
		ret = -1;
    16a0:	00bfffc4 	movi	r2,-1
    16a4:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_Q, &status);
    16a8:	e0bffec4 	addi	r2,fp,-5
    16ac:	100d883a 	mov	r6,r2
    16b0:	01405344 	movi	r5,333
    16b4:	e13ffd17 	ldw	r4,-12(fp)
    16b8:	00002840 	call	284 <ad9144_spi_read>
	if (status != 0x00) {
    16bc:	e0bffec3 	ldbu	r2,-5(fp)
    16c0:	10803fcc 	andi	r2,r2,255
    16c4:	10000a26 	beq	r2,zero,16f0 <ad9144_datapath_prbs_test+0x164>
		printf("%s : PRBS Q channel ERRORS (%x)!.\n", __func__,
    16c8:	e0bffec3 	ldbu	r2,-5(fp)
    16cc:	10803fcc 	andi	r2,r2,255
    16d0:	100d883a 	mov	r6,r2
    16d4:	014000b4 	movhi	r5,2
    16d8:	29548b04 	addi	r5,r5,21036
    16dc:	010000b4 	movhi	r4,2
    16e0:	21146804 	addi	r4,r4,20896
    16e4:	0010ec40 	call	10ec4 <printf>
		       status);
		ret = -1;
    16e8:	00bfffc4 	movi	r2,-1
    16ec:	e0bfff15 	stw	r2,-4(fp)
	}

	return ret;
    16f0:	e0bfff17 	ldw	r2,-4(fp)
}
    16f4:	e037883a 	mov	sp,fp
    16f8:	dfc00117 	ldw	ra,4(sp)
    16fc:	df000017 	ldw	fp,0(sp)
    1700:	dec00204 	addi	sp,sp,8
    1704:	f800283a 	ret

00001708 <ad9523_spi_read>:
 * @return registerValue - The register's value or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_read(struct ad9523_dev *dev,
			uint32_t reg_addr,
			uint32_t *reg_data)
{
    1708:	defff904 	addi	sp,sp,-28
    170c:	dfc00615 	stw	ra,24(sp)
    1710:	df000515 	stw	fp,20(sp)
    1714:	df000504 	addi	fp,sp,20
    1718:	e13ffd15 	stw	r4,-12(fp)
    171c:	e17ffc15 	stw	r5,-16(fp)
    1720:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
    1724:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	*reg_data = 0;
    1728:	e0bffb17 	ldw	r2,-20(fp)
    172c:	10000015 	stw	zero,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    1730:	e03ffec5 	stb	zero,-5(fp)
    1734:	00002606 	br	17d0 <ad9523_spi_read+0xc8>
		buf[0] = 0x80 | (reg_addr >> 8);
    1738:	e0bffc17 	ldw	r2,-16(fp)
    173c:	1004d23a 	srli	r2,r2,8
    1740:	1007883a 	mov	r3,r2
    1744:	00bfe004 	movi	r2,-128
    1748:	1884b03a 	or	r2,r3,r2
    174c:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
    1750:	e0bffc17 	ldw	r2,-16(fp)
    1754:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = 0x00;
    1758:	e03ffe85 	stb	zero,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
    175c:	e0bffd17 	ldw	r2,-12(fp)
    1760:	10800017 	ldw	r2,0(r2)
    1764:	e0fffe04 	addi	r3,fp,-8
    1768:	018000c4 	movi	r6,3
    176c:	180b883a 	mov	r5,r3
    1770:	1009883a 	mov	r4,r2
    1774:	0007d400 	call	7d40 <spi_write_and_read>
    1778:	1007883a 	mov	r3,r2
    177c:	e0bfff17 	ldw	r2,-4(fp)
    1780:	10c4b03a 	or	r2,r2,r3
    1784:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
    1788:	e0bffc17 	ldw	r2,-16(fp)
    178c:	10bfffc4 	addi	r2,r2,-1
    1790:	e0bffc15 	stw	r2,-16(fp)
		*reg_data <<= 8;
    1794:	e0bffb17 	ldw	r2,-20(fp)
    1798:	10800017 	ldw	r2,0(r2)
    179c:	1006923a 	slli	r3,r2,8
    17a0:	e0bffb17 	ldw	r2,-20(fp)
    17a4:	10c00015 	stw	r3,0(r2)
		*reg_data |= buf[2];
    17a8:	e0bffb17 	ldw	r2,-20(fp)
    17ac:	10c00017 	ldw	r3,0(r2)
    17b0:	e0bffe83 	ldbu	r2,-6(fp)
    17b4:	10803fcc 	andi	r2,r2,255
    17b8:	1886b03a 	or	r3,r3,r2
    17bc:	e0bffb17 	ldw	r2,-20(fp)
    17c0:	10c00015 	stw	r3,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    17c4:	e0bffec3 	ldbu	r2,-5(fp)
    17c8:	10800044 	addi	r2,r2,1
    17cc:	e0bffec5 	stb	r2,-5(fp)
    17d0:	e0fffec3 	ldbu	r3,-5(fp)
    17d4:	e0bffc17 	ldw	r2,-16(fp)
    17d8:	1004d43a 	srli	r2,r2,16
    17dc:	18bfd636 	bltu	r3,r2,1738 <__alt_mem_mcu_subsystem_ram_0+0x77fe1738>
	}

	return ret;
    17e0:	e0bfff17 	ldw	r2,-4(fp)
}
    17e4:	e037883a 	mov	sp,fp
    17e8:	dfc00117 	ldw	ra,4(sp)
    17ec:	df000017 	ldw	fp,0(sp)
    17f0:	dec00204 	addi	sp,sp,8
    17f4:	f800283a 	ret

000017f8 <ad9523_spi_write>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_write(struct ad9523_dev *dev,
			 uint32_t reg_addr,
			 uint32_t reg_data)
{
    17f8:	defff904 	addi	sp,sp,-28
    17fc:	dfc00615 	stw	ra,24(sp)
    1800:	df000515 	stw	fp,20(sp)
    1804:	df000504 	addi	fp,sp,20
    1808:	e13ffd15 	stw	r4,-12(fp)
    180c:	e17ffc15 	stw	r5,-16(fp)
    1810:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
    1814:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    1818:	e03ffec5 	stb	zero,-5(fp)
    181c:	00002106 	br	18a4 <ad9523_spi_write+0xac>
		buf[0] = reg_addr >> 8;
    1820:	e0bffc17 	ldw	r2,-16(fp)
    1824:	1004d23a 	srli	r2,r2,8
    1828:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
    182c:	e0bffc17 	ldw	r2,-16(fp)
    1830:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = (reg_data >> ((AD9523_TRANSF_LEN(reg_addr) - index - 1) * 8)) & 0xFF;
    1834:	e0bffc17 	ldw	r2,-16(fp)
    1838:	1006d43a 	srli	r3,r2,16
    183c:	e0bffec3 	ldbu	r2,-5(fp)
    1840:	1887c83a 	sub	r3,r3,r2
    1844:	00880034 	movhi	r2,8192
    1848:	10bfffc4 	addi	r2,r2,-1
    184c:	1885883a 	add	r2,r3,r2
    1850:	100490fa 	slli	r2,r2,3
    1854:	e0fffb17 	ldw	r3,-20(fp)
    1858:	1884d83a 	srl	r2,r3,r2
    185c:	e0bffe85 	stb	r2,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
    1860:	e0bffd17 	ldw	r2,-12(fp)
    1864:	10800017 	ldw	r2,0(r2)
    1868:	e0fffe04 	addi	r3,fp,-8
    186c:	018000c4 	movi	r6,3
    1870:	180b883a 	mov	r5,r3
    1874:	1009883a 	mov	r4,r2
    1878:	0007d400 	call	7d40 <spi_write_and_read>
    187c:	1007883a 	mov	r3,r2
    1880:	e0bfff17 	ldw	r2,-4(fp)
    1884:	10c4b03a 	or	r2,r2,r3
    1888:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
    188c:	e0bffc17 	ldw	r2,-16(fp)
    1890:	10bfffc4 	addi	r2,r2,-1
    1894:	e0bffc15 	stw	r2,-16(fp)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
    1898:	e0bffec3 	ldbu	r2,-5(fp)
    189c:	10800044 	addi	r2,r2,1
    18a0:	e0bffec5 	stb	r2,-5(fp)
    18a4:	e0fffec3 	ldbu	r3,-5(fp)
    18a8:	e0bffc17 	ldw	r2,-16(fp)
    18ac:	1004d43a 	srli	r2,r2,16
    18b0:	18bfdb36 	bltu	r3,r2,1820 <__alt_mem_mcu_subsystem_ram_0+0x77fe1820>
	}

	return ret;
    18b4:	e0bfff17 	ldw	r2,-4(fp)
}
    18b8:	e037883a 	mov	sp,fp
    18bc:	dfc00117 	ldw	ra,4(sp)
    18c0:	df000017 	ldw	fp,0(sp)
    18c4:	dec00204 	addi	sp,sp,8
    18c8:	f800283a 	ret

000018cc <ad9523_io_update>:
 * @brief Updates the AD9523 configuration
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_io_update(struct ad9523_dev *dev)
{
    18cc:	defffd04 	addi	sp,sp,-12
    18d0:	dfc00215 	stw	ra,8(sp)
    18d4:	df000115 	stw	fp,4(sp)
    18d8:	df000104 	addi	fp,sp,4
    18dc:	e13fff15 	stw	r4,-4(fp)
	return ad9523_spi_write(dev,
    18e0:	01800044 	movi	r6,1
    18e4:	01400074 	movhi	r5,1
    18e8:	29408d04 	addi	r5,r5,564
    18ec:	e13fff17 	ldw	r4,-4(fp)
    18f0:	00017f80 	call	17f8 <ad9523_spi_write>
				AD9523_IO_UPDATE,
				AD9523_IO_UPDATE_EN);
}
    18f4:	e037883a 	mov	sp,fp
    18f8:	dfc00117 	ldw	ra,4(sp)
    18fc:	df000017 	ldw	fp,0(sp)
    1900:	dec00204 	addi	sp,sp,8
    1904:	f800283a 	ret

00001908 <ad9523_vco_out_map>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_vco_out_map(struct ad9523_dev *dev,
			   uint32_t ch,
			   uint32_t out)
{
    1908:	defff804 	addi	sp,sp,-32
    190c:	dfc00715 	stw	ra,28(sp)
    1910:	df000615 	stw	fp,24(sp)
    1914:	df000604 	addi	fp,sp,24
    1918:	e13ffc15 	stw	r4,-16(fp)
    191c:	e17ffb15 	stw	r5,-20(fp)
    1920:	e1bffa15 	stw	r6,-24(fp)
	int32_t ret;
	uint32_t mask;
	uint32_t reg_data;

	switch (ch) {
    1924:	e0bffb17 	ldw	r2,-20(fp)
    1928:	108002a8 	cmpgeui	r2,r2,10
    192c:	1000771e 	bne	r2,zero,1b0c <ad9523_vco_out_map+0x204>
    1930:	e0bffb17 	ldw	r2,-20(fp)
    1934:	100690ba 	slli	r3,r2,2
    1938:	00800034 	movhi	r2,0
    193c:	1885883a 	add	r2,r3,r2
    1940:	10865217 	ldw	r2,6472(r2)
    1944:	1000683a 	jmp	r2
    1948:	00001970 	cmpltui	zero,zero,101
    194c:	00001970 	cmpltui	zero,zero,101
    1950:	00001970 	cmpltui	zero,zero,101
    1954:	00001970 	cmpltui	zero,zero,101
    1958:	000019fc 	xorhi	zero,zero,103
    195c:	000019fc 	xorhi	zero,zero,103
    1960:	000019fc 	xorhi	zero,zero,103
    1964:	00001a84 	movi	zero,106
    1968:	00001a84 	movi	zero,106
    196c:	00001a84 	movi	zero,106
	case 0 ... 3:
		ret = ad9523_spi_read(dev,
    1970:	e0bffd04 	addi	r2,fp,-12
    1974:	100d883a 	mov	r6,r2
    1978:	01400074 	movhi	r5,1
    197c:	29406ec4 	addi	r5,r5,443
    1980:	e13ffc17 	ldw	r4,-16(fp)
    1984:	00017080 	call	1708 <ad9523_spi_read>
    1988:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
    198c:	e0bfff17 	ldw	r2,-4(fp)
    1990:	10006016 	blt	r2,zero,1b14 <ad9523_vco_out_map+0x20c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCXO_SRC_SEL_CH0 << ch;
    1994:	00c00044 	movi	r3,1
    1998:	e0bffb17 	ldw	r2,-20(fp)
    199c:	1884983a 	sll	r2,r3,r2
    19a0:	e0bffe15 	stw	r2,-8(fp)
		if (out) {
    19a4:	e0bffa17 	ldw	r2,-24(fp)
    19a8:	10000726 	beq	r2,zero,19c8 <ad9523_vco_out_map+0xc0>
			reg_data |= mask;
    19ac:	e0fffd17 	ldw	r3,-12(fp)
    19b0:	e0bffe17 	ldw	r2,-8(fp)
    19b4:	1884b03a 	or	r2,r3,r2
    19b8:	e0bffd15 	stw	r2,-12(fp)
			out = AD9523_VCXO;
    19bc:	00800084 	movi	r2,2
    19c0:	e0bffa15 	stw	r2,-24(fp)
    19c4:	00000506 	br	19dc <ad9523_vco_out_map+0xd4>
		} else {
			reg_data &= ~mask;
    19c8:	e0bffe17 	ldw	r2,-8(fp)
    19cc:	0086303a 	nor	r3,zero,r2
    19d0:	e0bffd17 	ldw	r2,-12(fp)
    19d4:	1884703a 	and	r2,r3,r2
    19d8:	e0bffd15 	stw	r2,-12(fp)
		}
		ret = ad9523_spi_write(dev,
    19dc:	e0bffd17 	ldw	r2,-12(fp)
    19e0:	100d883a 	mov	r6,r2
    19e4:	01400074 	movhi	r5,1
    19e8:	29406ec4 	addi	r5,r5,443
    19ec:	e13ffc17 	ldw	r4,-16(fp)
    19f0:	00017f80 	call	17f8 <ad9523_spi_write>
    19f4:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
    19f8:	00004b06 	br	1b28 <ad9523_vco_out_map+0x220>
	case 4 ... 6:
		ret = ad9523_spi_read(dev,
    19fc:	e0bffd04 	addi	r2,fp,-12
    1a00:	100d883a 	mov	r6,r2
    1a04:	01400074 	movhi	r5,1
    1a08:	29406e84 	addi	r5,r5,442
    1a0c:	e13ffc17 	ldw	r4,-16(fp)
    1a10:	00017080 	call	1708 <ad9523_spi_read>
    1a14:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CTRL,
				      &reg_data);
		if (ret < 0)
    1a18:	e0bfff17 	ldw	r2,-4(fp)
    1a1c:	10003f16 	blt	r2,zero,1b1c <ad9523_vco_out_map+0x214>
			break;
		mask = AD9523_PLL1_OUTP_CTRL_VCO_DIV_SEL_CH4_M2 << (ch - 4);
    1a20:	e0bffb17 	ldw	r2,-20(fp)
    1a24:	10bfff04 	addi	r2,r2,-4
    1a28:	00c00804 	movi	r3,32
    1a2c:	1884983a 	sll	r2,r3,r2
    1a30:	e0bffe15 	stw	r2,-8(fp)
		if (out)
    1a34:	e0bffa17 	ldw	r2,-24(fp)
    1a38:	10000526 	beq	r2,zero,1a50 <ad9523_vco_out_map+0x148>
			reg_data |= mask;
    1a3c:	e0fffd17 	ldw	r3,-12(fp)
    1a40:	e0bffe17 	ldw	r2,-8(fp)
    1a44:	1884b03a 	or	r2,r3,r2
    1a48:	e0bffd15 	stw	r2,-12(fp)
    1a4c:	00000506 	br	1a64 <ad9523_vco_out_map+0x15c>
		else
			reg_data &= ~mask;
    1a50:	e0bffe17 	ldw	r2,-8(fp)
    1a54:	0086303a 	nor	r3,zero,r2
    1a58:	e0bffd17 	ldw	r2,-12(fp)
    1a5c:	1884703a 	and	r2,r3,r2
    1a60:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
    1a64:	e0bffd17 	ldw	r2,-12(fp)
    1a68:	100d883a 	mov	r6,r2
    1a6c:	01400074 	movhi	r5,1
    1a70:	29406e84 	addi	r5,r5,442
    1a74:	e13ffc17 	ldw	r4,-16(fp)
    1a78:	00017f80 	call	17f8 <ad9523_spi_write>
    1a7c:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CTRL,
				       reg_data);
		break;
    1a80:	00002906 	br	1b28 <ad9523_vco_out_map+0x220>
	case 7 ... 9:
		ret = ad9523_spi_read(dev,
    1a84:	e0bffd04 	addi	r2,fp,-12
    1a88:	100d883a 	mov	r6,r2
    1a8c:	01400074 	movhi	r5,1
    1a90:	29406ec4 	addi	r5,r5,443
    1a94:	e13ffc17 	ldw	r4,-16(fp)
    1a98:	00017080 	call	1708 <ad9523_spi_read>
    1a9c:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
    1aa0:	e0bfff17 	ldw	r2,-4(fp)
    1aa4:	10001f16 	blt	r2,zero,1b24 <ad9523_vco_out_map+0x21c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCO_DIV_SEL_CH7_M2 << (ch - 7);
    1aa8:	e0bffb17 	ldw	r2,-20(fp)
    1aac:	10bffe44 	addi	r2,r2,-7
    1ab0:	00c00404 	movi	r3,16
    1ab4:	1884983a 	sll	r2,r3,r2
    1ab8:	e0bffe15 	stw	r2,-8(fp)
		if (out)
    1abc:	e0bffa17 	ldw	r2,-24(fp)
    1ac0:	10000526 	beq	r2,zero,1ad8 <ad9523_vco_out_map+0x1d0>
			reg_data |= mask;
    1ac4:	e0fffd17 	ldw	r3,-12(fp)
    1ac8:	e0bffe17 	ldw	r2,-8(fp)
    1acc:	1884b03a 	or	r2,r3,r2
    1ad0:	e0bffd15 	stw	r2,-12(fp)
    1ad4:	00000506 	br	1aec <ad9523_vco_out_map+0x1e4>
		else
			reg_data &= ~mask;
    1ad8:	e0bffe17 	ldw	r2,-8(fp)
    1adc:	0086303a 	nor	r3,zero,r2
    1ae0:	e0bffd17 	ldw	r2,-12(fp)
    1ae4:	1884703a 	and	r2,r3,r2
    1ae8:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
    1aec:	e0bffd17 	ldw	r2,-12(fp)
    1af0:	100d883a 	mov	r6,r2
    1af4:	01400074 	movhi	r5,1
    1af8:	29406ec4 	addi	r5,r5,443
    1afc:	e13ffc17 	ldw	r4,-16(fp)
    1b00:	00017f80 	call	17f8 <ad9523_spi_write>
    1b04:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
    1b08:	00000706 	br	1b28 <ad9523_vco_out_map+0x220>
	default:
		return 0;
    1b0c:	0005883a 	mov	r2,zero
    1b10:	00000c06 	br	1b44 <ad9523_vco_out_map+0x23c>
			break;
    1b14:	0001883a 	nop
    1b18:	00000306 	br	1b28 <ad9523_vco_out_map+0x220>
			break;
    1b1c:	0001883a 	nop
    1b20:	00000106 	br	1b28 <ad9523_vco_out_map+0x220>
			break;
    1b24:	0001883a 	nop
	}

	dev->ad9523_st.vco_out_map[ch] = out;
    1b28:	e0bffa17 	ldw	r2,-24(fp)
    1b2c:	1009883a 	mov	r4,r2
    1b30:	e0fffc17 	ldw	r3,-16(fp)
    1b34:	e0bffb17 	ldw	r2,-20(fp)
    1b38:	1885883a 	add	r2,r3,r2
    1b3c:	11000705 	stb	r4,28(r2)

	return ret;
    1b40:	e0bfff17 	ldw	r2,-4(fp)
}
    1b44:	e037883a 	mov	sp,fp
    1b48:	dfc00117 	ldw	ra,4(sp)
    1b4c:	df000017 	ldw	fp,0(sp)
    1b50:	dec00204 	addi	sp,sp,8
    1b54:	f800283a 	ret

00001b58 <ad9523_calibrate>:

// vco calibration on default setup may not work (as it is a buffered write)
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_calibrate(struct ad9523_dev *dev)
{
    1b58:	defffb04 	addi	sp,sp,-20
    1b5c:	dfc00415 	stw	ra,16(sp)
    1b60:	df000315 	stw	fp,12(sp)
    1b64:	df000304 	addi	fp,sp,12
    1b68:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t timeout;

	ad9523_spi_write(dev,
    1b6c:	01800084 	movi	r6,2
    1b70:	01400074 	movhi	r5,1
    1b74:	29403cc4 	addi	r5,r5,243
    1b78:	e13ffd17 	ldw	r4,-12(fp)
    1b7c:	00017f80 	call	17f8 <ad9523_spi_write>
			 AD9523_PLL2_VCO_CTRL,
			 AD9523_PLL2_VCO_CALIBRATE);
	ad9523_io_update(dev);
    1b80:	e13ffd17 	ldw	r4,-12(fp)
    1b84:	00018cc0 	call	18cc <ad9523_io_update>

	timeout = 0;
    1b88:	e03fff15 	stw	zero,-4(fp)
	while (timeout < 100) {
    1b8c:	00000e06 	br	1bc8 <ad9523_calibrate+0x70>
		mdelay(1);
    1b90:	0100fa04 	movi	r4,1000
    1b94:	00206540 	call	20654 <usleep>
		timeout = timeout + 1;
    1b98:	e0bfff17 	ldw	r2,-4(fp)
    1b9c:	10800044 	addi	r2,r2,1
    1ba0:	e0bfff15 	stw	r2,-4(fp)
		ad9523_spi_read(dev,
    1ba4:	e0bffe04 	addi	r2,fp,-8
    1ba8:	100d883a 	mov	r6,r2
    1bac:	01400074 	movhi	r5,1
    1bb0:	29408b44 	addi	r5,r5,557
    1bb4:	e13ffd17 	ldw	r4,-12(fp)
    1bb8:	00017080 	call	1708 <ad9523_spi_read>
				AD9523_READBACK_1,
				&reg_data);
		if ((reg_data & 0x1) == 0x0)
    1bbc:	e0bffe17 	ldw	r2,-8(fp)
    1bc0:	1080004c 	andi	r2,r2,1
    1bc4:	10000426 	beq	r2,zero,1bd8 <ad9523_calibrate+0x80>
	while (timeout < 100) {
    1bc8:	e0bfff17 	ldw	r2,-4(fp)
    1bcc:	10801930 	cmpltui	r2,r2,100
    1bd0:	103fef1e 	bne	r2,zero,1b90 <__alt_mem_mcu_subsystem_ram_0+0x77fe1b90>
    1bd4:	00000106 	br	1bdc <ad9523_calibrate+0x84>
			break;
    1bd8:	0001883a 	nop
	}
	ad9523_spi_read(dev,
    1bdc:	e0bffe04 	addi	r2,fp,-8
    1be0:	100d883a 	mov	r6,r2
    1be4:	01400074 	movhi	r5,1
    1be8:	29408b44 	addi	r5,r5,557
    1bec:	e13ffd17 	ldw	r4,-12(fp)
    1bf0:	00017080 	call	1708 <ad9523_spi_read>
			AD9523_READBACK_1,
			&reg_data);
	if ((reg_data & 0x1) != 0x0) {
    1bf4:	e0bffe17 	ldw	r2,-8(fp)
    1bf8:	1080004c 	andi	r2,r2,1
    1bfc:	10000726 	beq	r2,zero,1c1c <ad9523_calibrate+0xc4>
		printf("AD9523: VCO calibration failed (%x)!\n", reg_data);
    1c00:	e0bffe17 	ldw	r2,-8(fp)
    1c04:	100b883a 	mov	r5,r2
    1c08:	010000b4 	movhi	r4,2
    1c0c:	21149204 	addi	r4,r4,21064
    1c10:	0010ec40 	call	10ec4 <printf>
		return(-1);
    1c14:	00bfffc4 	movi	r2,-1
    1c18:	00000106 	br	1c20 <ad9523_calibrate+0xc8>
	}

	return(0);
    1c1c:	0005883a 	mov	r2,zero
}
    1c20:	e037883a 	mov	sp,fp
    1c24:	dfc00117 	ldw	ra,4(sp)
    1c28:	df000017 	ldw	fp,0(sp)
    1c2c:	dec00204 	addi	sp,sp,8
    1c30:	f800283a 	ret

00001c34 <ad9523_status>:

// status
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_status(struct ad9523_dev *dev)
{
    1c34:	defff904 	addi	sp,sp,-28
    1c38:	dfc00615 	stw	ra,24(sp)
    1c3c:	df000515 	stw	fp,20(sp)
    1c40:	df000504 	addi	fp,sp,20
    1c44:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret;
	uint32_t reg_data;
	uint32_t status;
	uint32_t timeout;

	status = 0;
    1c48:	e03ffe15 	stw	zero,-8(fp)

	// vcxo + pll2 must always be okay- (is it not?)

	status = status | AD9523_READBACK_0_STAT_VCXO;
    1c4c:	e0bffe17 	ldw	r2,-8(fp)
    1c50:	10800814 	ori	r2,r2,32
    1c54:	e0bffe15 	stw	r2,-8(fp)
	status = status | AD9523_READBACK_0_STAT_PLL2_LD;
    1c58:	e0bffe17 	ldw	r2,-8(fp)
    1c5c:	10800094 	ori	r2,r2,2
    1c60:	e0bffe15 	stw	r2,-8(fp)

	if (dev->pdata->pll1_bypass_en == 0) {
    1c64:	e0bffb17 	ldw	r2,-20(fp)
    1c68:	10800b17 	ldw	r2,44(r2)
    1c6c:	10800603 	ldbu	r2,24(r2)
    1c70:	10803fcc 	andi	r2,r2,255
    1c74:	1000121e 	bne	r2,zero,1cc0 <ad9523_status+0x8c>
		status = status | AD9523_READBACK_0_STAT_PLL2_REF_CLK;
    1c78:	e0bffe17 	ldw	r2,-8(fp)
    1c7c:	10802014 	ori	r2,r2,128
    1c80:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL2_FB_CLK;
    1c84:	e0bffe17 	ldw	r2,-8(fp)
    1c88:	10801014 	ori	r2,r2,64
    1c8c:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REF_TEST;
    1c90:	e0bffe17 	ldw	r2,-8(fp)
    1c94:	10800414 	ori	r2,r2,16
    1c98:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFB;
    1c9c:	e0bffe17 	ldw	r2,-8(fp)
    1ca0:	10800214 	ori	r2,r2,8
    1ca4:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFA;
    1ca8:	e0bffe17 	ldw	r2,-8(fp)
    1cac:	10800114 	ori	r2,r2,4
    1cb0:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL1_LD;
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	10800054 	ori	r2,r2,1
    1cbc:	e0bffe15 	stw	r2,-8(fp)
	}

	timeout = 0;
    1cc0:	e03ffd15 	stw	zero,-12(fp)
	while (timeout < 100) {
    1cc4:	00001006 	br	1d08 <ad9523_status+0xd4>
		mdelay(1);
    1cc8:	0100fa04 	movi	r4,1000
    1ccc:	00206540 	call	20654 <usleep>
		timeout = timeout + 1;
    1cd0:	e0bffd17 	ldw	r2,-12(fp)
    1cd4:	10800044 	addi	r2,r2,1
    1cd8:	e0bffd15 	stw	r2,-12(fp)
		ad9523_spi_read(dev,
    1cdc:	e0bffc04 	addi	r2,fp,-16
    1ce0:	100d883a 	mov	r6,r2
    1ce4:	01400074 	movhi	r5,1
    1ce8:	29408b04 	addi	r5,r5,556
    1cec:	e13ffb17 	ldw	r4,-20(fp)
    1cf0:	00017080 	call	1708 <ad9523_spi_read>
				AD9523_READBACK_0,
				&reg_data);
		if ((reg_data & status) == status)
    1cf4:	e0fffc17 	ldw	r3,-16(fp)
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	1884703a 	and	r2,r3,r2
    1d00:	e0fffe17 	ldw	r3,-8(fp)
    1d04:	18800426 	beq	r3,r2,1d18 <ad9523_status+0xe4>
	while (timeout < 100) {
    1d08:	e0bffd17 	ldw	r2,-12(fp)
    1d0c:	10801930 	cmpltui	r2,r2,100
    1d10:	103fed1e 	bne	r2,zero,1cc8 <__alt_mem_mcu_subsystem_ram_0+0x77fe1cc8>
    1d14:	00000106 	br	1d1c <ad9523_status+0xe8>
			break;
    1d18:	0001883a 	nop
	}

	ret = 0;
    1d1c:	e03fff15 	stw	zero,-4(fp)
	if ((reg_data & AD9523_READBACK_0_STAT_VCXO) != AD9523_READBACK_0_STAT_VCXO) {
    1d20:	e0bffc17 	ldw	r2,-16(fp)
    1d24:	1080080c 	andi	r2,r2,32
    1d28:	1000071e 	bne	r2,zero,1d48 <ad9523_status+0x114>
		printf("AD9523: VCXO status errors (%x)!\n", reg_data);
    1d2c:	e0bffc17 	ldw	r2,-16(fp)
    1d30:	100b883a 	mov	r5,r2
    1d34:	010000b4 	movhi	r4,2
    1d38:	21149c04 	addi	r4,r4,21104
    1d3c:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    1d40:	00bfffc4 	movi	r2,-1
    1d44:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((reg_data & AD9523_READBACK_0_STAT_PLL2_LD) != AD9523_READBACK_0_STAT_PLL2_LD) {
    1d48:	e0bffc17 	ldw	r2,-16(fp)
    1d4c:	1080008c 	andi	r2,r2,2
    1d50:	1000071e 	bne	r2,zero,1d70 <ad9523_status+0x13c>
		printf("AD9523: PLL2 NOT locked (%x)!\n", reg_data);
    1d54:	e0bffc17 	ldw	r2,-16(fp)
    1d58:	100b883a 	mov	r5,r2
    1d5c:	010000b4 	movhi	r4,2
    1d60:	2114a504 	addi	r4,r4,21140
    1d64:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    1d68:	00bfffc4 	movi	r2,-1
    1d6c:	e0bfff15 	stw	r2,-4(fp)
	}
	return(ret);
    1d70:	e0bfff17 	ldw	r2,-4(fp)
}
    1d74:	e037883a 	mov	sp,fp
    1d78:	dfc00117 	ldw	ra,4(sp)
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00204 	addi	sp,sp,8
    1d84:	f800283a 	ret

00001d88 <ad9523_sync>:
 * @brief Updates the AD9523 configuration.
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_sync(struct ad9523_dev *dev)
{
    1d88:	defffa04 	addi	sp,sp,-24
    1d8c:	dfc00515 	stw	ra,20(sp)
    1d90:	df000415 	stw	fp,16(sp)
    1d94:	df000404 	addi	fp,sp,16
    1d98:	e13ffc15 	stw	r4,-16(fp)
	int32_t ret, tmp;
	uint32_t reg_data;

	ret = ad9523_spi_read(dev,
    1d9c:	e0bffd04 	addi	r2,fp,-12
    1da0:	100d883a 	mov	r6,r2
    1da4:	014000f4 	movhi	r5,3
    1da8:	29408c84 	addi	r5,r5,562
    1dac:	e13ffc17 	ldw	r4,-16(fp)
    1db0:	00017080 	call	1708 <ad9523_spi_read>
    1db4:	e0bfff15 	stw	r2,-4(fp)
			      AD9523_STATUS_SIGNALS,
			      &reg_data);
	if (ret < 0)
    1db8:	e0bfff17 	ldw	r2,-4(fp)
    1dbc:	1000020e 	bge	r2,zero,1dc8 <ad9523_sync+0x40>
		return ret;
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	00002406 	br	1e58 <ad9523_sync+0xd0>

	tmp = reg_data;
    1dc8:	e0bffd17 	ldw	r2,-12(fp)
    1dcc:	e0bffe15 	stw	r2,-8(fp)
	tmp |= AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	10800074 	orhi	r2,r2,1
    1dd8:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
    1ddc:	e0bffe17 	ldw	r2,-8(fp)
    1de0:	100d883a 	mov	r6,r2
    1de4:	014000f4 	movhi	r5,3
    1de8:	29408c84 	addi	r5,r5,562
    1dec:	e13ffc17 	ldw	r4,-16(fp)
    1df0:	00017f80 	call	17f8 <ad9523_spi_write>
    1df4:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
    1df8:	e0bfff17 	ldw	r2,-4(fp)
    1dfc:	1000020e 	bge	r2,zero,1e08 <ad9523_sync+0x80>
		return ret;
    1e00:	e0bfff17 	ldw	r2,-4(fp)
    1e04:	00001406 	br	1e58 <ad9523_sync+0xd0>

	ad9523_io_update(dev);
    1e08:	e13ffc17 	ldw	r4,-16(fp)
    1e0c:	00018cc0 	call	18cc <ad9523_io_update>
	tmp &= ~AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
    1e10:	e0fffe17 	ldw	r3,-8(fp)
    1e14:	00bffff4 	movhi	r2,65535
    1e18:	10bfffc4 	addi	r2,r2,-1
    1e1c:	1884703a 	and	r2,r3,r2
    1e20:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	100d883a 	mov	r6,r2
    1e2c:	014000f4 	movhi	r5,3
    1e30:	29408c84 	addi	r5,r5,562
    1e34:	e13ffc17 	ldw	r4,-16(fp)
    1e38:	00017f80 	call	17f8 <ad9523_spi_write>
    1e3c:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
    1e40:	e0bfff17 	ldw	r2,-4(fp)
    1e44:	1000020e 	bge	r2,zero,1e50 <ad9523_sync+0xc8>
		return ret;
    1e48:	e0bfff17 	ldw	r2,-4(fp)
    1e4c:	00000206 	br	1e58 <ad9523_sync+0xd0>

	return ad9523_io_update(dev);
    1e50:	e13ffc17 	ldw	r4,-16(fp)
    1e54:	00018cc0 	call	18cc <ad9523_io_update>

}
    1e58:	e037883a 	mov	sp,fp
    1e5c:	dfc00117 	ldw	ra,4(sp)
    1e60:	df000017 	ldw	fp,0(sp)
    1e64:	dec00204 	addi	sp,sp,8
    1e68:	f800283a 	ret

00001e6c <ad9523_init>:
 * @brief Initialize the AD9523 data structure with the default register values.
 *
 * @return Always return 0.
 *******************************************************************************/
int32_t ad9523_init(struct ad9523_init_param *init_param)
{
    1e6c:	defffd04 	addi	sp,sp,-12
    1e70:	df000215 	stw	fp,8(sp)
    1e74:	df000204 	addi	fp,sp,8
    1e78:	e13ffe15 	stw	r4,-8(fp)

	int32_t i = 0;
    1e7c:	e03fff15 	stw	zero,-4(fp)

	init_param->pdata->vcxo_freq = 0;
    1e80:	e0bffe17 	ldw	r2,-8(fp)
    1e84:	10800417 	ldw	r2,16(r2)
    1e88:	10000015 	stw	zero,0(r2)
	init_param->pdata->spi3wire = 0;
    1e8c:	e0bffe17 	ldw	r2,-8(fp)
    1e90:	10800417 	ldw	r2,16(r2)
    1e94:	10000105 	stb	zero,4(r2)

	/* Differential/ Single-Ended Input Configuration */
	init_param->pdata->refa_diff_rcv_en = 0;
    1e98:	e0bffe17 	ldw	r2,-8(fp)
    1e9c:	10800417 	ldw	r2,16(r2)
    1ea0:	10000145 	stb	zero,5(r2)
	init_param->pdata->refb_diff_rcv_en = 0;
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	10800417 	ldw	r2,16(r2)
    1eac:	10000185 	stb	zero,6(r2)
	init_param->pdata->zd_in_diff_en = 0;
    1eb0:	e0bffe17 	ldw	r2,-8(fp)
    1eb4:	10800417 	ldw	r2,16(r2)
    1eb8:	100001c5 	stb	zero,7(r2)
	init_param->pdata->osc_in_diff_en = 0;
    1ebc:	e0bffe17 	ldw	r2,-8(fp)
    1ec0:	10800417 	ldw	r2,16(r2)
    1ec4:	10000205 	stb	zero,8(r2)

	/*
	 * Valid if differential input disabled
	 * if not true defaults to pos input
	 */
	init_param->pdata->refa_cmos_neg_inp_en = 0;
    1ec8:	e0bffe17 	ldw	r2,-8(fp)
    1ecc:	10800417 	ldw	r2,16(r2)
    1ed0:	10000245 	stb	zero,9(r2)
	init_param->pdata->refb_cmos_neg_inp_en = 0;
    1ed4:	e0bffe17 	ldw	r2,-8(fp)
    1ed8:	10800417 	ldw	r2,16(r2)
    1edc:	10000285 	stb	zero,10(r2)
	init_param->pdata->zd_in_cmos_neg_inp_en = 0;
    1ee0:	e0bffe17 	ldw	r2,-8(fp)
    1ee4:	10800417 	ldw	r2,16(r2)
    1ee8:	100002c5 	stb	zero,11(r2)
	init_param->pdata->osc_in_cmos_neg_inp_en = 0;
    1eec:	e0bffe17 	ldw	r2,-8(fp)
    1ef0:	10800417 	ldw	r2,16(r2)
    1ef4:	10000305 	stb	zero,12(r2)

	/* PLL1 Setting */
	init_param->pdata->refa_r_div = 1;
    1ef8:	e0bffe17 	ldw	r2,-8(fp)
    1efc:	10800417 	ldw	r2,16(r2)
    1f00:	00c00044 	movi	r3,1
    1f04:	10c0038d 	sth	r3,14(r2)
	init_param->pdata->refb_r_div = 1;
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10800417 	ldw	r2,16(r2)
    1f10:	00c00044 	movi	r3,1
    1f14:	10c0040d 	sth	r3,16(r2)
	init_param->pdata->pll1_feedback_div = 1;
    1f18:	e0bffe17 	ldw	r2,-8(fp)
    1f1c:	10800417 	ldw	r2,16(r2)
    1f20:	00c00044 	movi	r3,1
    1f24:	10c0048d 	sth	r3,18(r2)
	init_param->pdata->pll1_charge_pump_current_nA = 0;
    1f28:	e0bffe17 	ldw	r2,-8(fp)
    1f2c:	10800417 	ldw	r2,16(r2)
    1f30:	1000050d 	sth	zero,20(r2)
	init_param->pdata->zero_delay_mode_internal_en = 0;
    1f34:	e0bffe17 	ldw	r2,-8(fp)
    1f38:	10800417 	ldw	r2,16(r2)
    1f3c:	10000585 	stb	zero,22(r2)
	init_param->pdata->osc_in_feedback_en = 0;
    1f40:	e0bffe17 	ldw	r2,-8(fp)
    1f44:	10800417 	ldw	r2,16(r2)
    1f48:	100005c5 	stb	zero,23(r2)
	init_param->pdata->pll1_bypass_en = 1;
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
    1f50:	10800417 	ldw	r2,16(r2)
    1f54:	00c00044 	movi	r3,1
    1f58:	10c00605 	stb	r3,24(r2)
	init_param->pdata->pll1_loop_filter_rzero = 1;
    1f5c:	e0bffe17 	ldw	r2,-8(fp)
    1f60:	10800417 	ldw	r2,16(r2)
    1f64:	00c00044 	movi	r3,1
    1f68:	10c00645 	stb	r3,25(r2)

	/* Reference */
	init_param->pdata->ref_mode = 0;
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	10800417 	ldw	r2,16(r2)
    1f74:	10000685 	stb	zero,26(r2)

	/* PLL2 Setting */
	init_param->pdata->pll2_charge_pump_current_nA = 0;
    1f78:	e0bffe17 	ldw	r2,-8(fp)
    1f7c:	10800417 	ldw	r2,16(r2)
    1f80:	10000715 	stw	zero,28(r2)
	init_param->pdata->pll2_ndiv_a_cnt = 0;
    1f84:	e0bffe17 	ldw	r2,-8(fp)
    1f88:	10800417 	ldw	r2,16(r2)
    1f8c:	10000805 	stb	zero,32(r2)
	init_param->pdata->pll2_ndiv_b_cnt = 4;
    1f90:	e0bffe17 	ldw	r2,-8(fp)
    1f94:	10800417 	ldw	r2,16(r2)
    1f98:	00c00104 	movi	r3,4
    1f9c:	10c00845 	stb	r3,33(r2)
	init_param->pdata->pll2_freq_doubler_en = 0;
    1fa0:	e0bffe17 	ldw	r2,-8(fp)
    1fa4:	10800417 	ldw	r2,16(r2)
    1fa8:	10000885 	stb	zero,34(r2)
	init_param->pdata->pll2_r2_div = 0;
    1fac:	e0bffe17 	ldw	r2,-8(fp)
    1fb0:	10800417 	ldw	r2,16(r2)
    1fb4:	100008c5 	stb	zero,35(r2)
	init_param->pdata->pll2_vco_diff_m1 = 0; /* 3..5 */
    1fb8:	e0bffe17 	ldw	r2,-8(fp)
    1fbc:	10800417 	ldw	r2,16(r2)
    1fc0:	10000905 	stb	zero,36(r2)
	init_param->pdata->pll2_vco_diff_m2 = 0; /* 3..5 */
    1fc4:	e0bffe17 	ldw	r2,-8(fp)
    1fc8:	10800417 	ldw	r2,16(r2)
    1fcc:	10000945 	stb	zero,37(r2)

	/* Loop Filter PLL2 */
	init_param->pdata->rpole2 = 0;
    1fd0:	e0bffe17 	ldw	r2,-8(fp)
    1fd4:	10800417 	ldw	r2,16(r2)
    1fd8:	10000985 	stb	zero,38(r2)
	init_param->pdata->rzero = 0;
    1fdc:	e0bffe17 	ldw	r2,-8(fp)
    1fe0:	10800417 	ldw	r2,16(r2)
    1fe4:	100009c5 	stb	zero,39(r2)
	init_param->pdata->cpole1 = 0;
    1fe8:	e0bffe17 	ldw	r2,-8(fp)
    1fec:	10800417 	ldw	r2,16(r2)
    1ff0:	10000a05 	stb	zero,40(r2)
	init_param->pdata->rzero_bypass_en = 0;
    1ff4:	e0bffe17 	ldw	r2,-8(fp)
    1ff8:	10800417 	ldw	r2,16(r2)
    1ffc:	10000a45 	stb	zero,41(r2)

	/* Output Channel Configuration */
	for (i=0; i < init_param->pdata->num_channels; i++) {
    2000:	e03fff15 	stw	zero,-4(fp)
    2004:	00004306 	br	2114 <ad9523_init+0x2a8>
		(&init_param->pdata->channels[i])->channel_num = 0;
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	10800417 	ldw	r2,16(r2)
    2010:	10c00c17 	ldw	r3,48(r2)
    2014:	e0bfff17 	ldw	r2,-4(fp)
    2018:	108006a4 	muli	r2,r2,26
    201c:	1885883a 	add	r2,r3,r2
    2020:	10000005 	stb	zero,0(r2)
		(&init_param->pdata->channels[i])->divider_output_invert_en = 0;
    2024:	e0bffe17 	ldw	r2,-8(fp)
    2028:	10800417 	ldw	r2,16(r2)
    202c:	10c00c17 	ldw	r3,48(r2)
    2030:	e0bfff17 	ldw	r2,-4(fp)
    2034:	108006a4 	muli	r2,r2,26
    2038:	1885883a 	add	r2,r3,r2
    203c:	10000045 	stb	zero,1(r2)
		(&init_param->pdata->channels[i])->sync_ignore_en = 0;
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	10800417 	ldw	r2,16(r2)
    2048:	10c00c17 	ldw	r3,48(r2)
    204c:	e0bfff17 	ldw	r2,-4(fp)
    2050:	108006a4 	muli	r2,r2,26
    2054:	1885883a 	add	r2,r3,r2
    2058:	10000085 	stb	zero,2(r2)
		(&init_param->pdata->channels[i])->low_power_mode_en = 0;
    205c:	e0bffe17 	ldw	r2,-8(fp)
    2060:	10800417 	ldw	r2,16(r2)
    2064:	10c00c17 	ldw	r3,48(r2)
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	108006a4 	muli	r2,r2,26
    2070:	1885883a 	add	r2,r3,r2
    2074:	100000c5 	stb	zero,3(r2)
		(&init_param->pdata->channels[i])->use_alt_clock_src = 0;
    2078:	e0bffe17 	ldw	r2,-8(fp)
    207c:	10800417 	ldw	r2,16(r2)
    2080:	10c00c17 	ldw	r3,48(r2)
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	108006a4 	muli	r2,r2,26
    208c:	1885883a 	add	r2,r3,r2
    2090:	10000105 	stb	zero,4(r2)
		(&init_param->pdata->channels[i])->output_dis = 0;
    2094:	e0bffe17 	ldw	r2,-8(fp)
    2098:	10800417 	ldw	r2,16(r2)
    209c:	10c00c17 	ldw	r3,48(r2)
    20a0:	e0bfff17 	ldw	r2,-4(fp)
    20a4:	108006a4 	muli	r2,r2,26
    20a8:	1885883a 	add	r2,r3,r2
    20ac:	10000145 	stb	zero,5(r2)
		(&init_param->pdata->channels[i])->driver_mode = LVPECL_8mA;
    20b0:	e0bffe17 	ldw	r2,-8(fp)
    20b4:	10800417 	ldw	r2,16(r2)
    20b8:	10c00c17 	ldw	r3,48(r2)
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	108006a4 	muli	r2,r2,26
    20c4:	1885883a 	add	r2,r3,r2
    20c8:	00c00044 	movi	r3,1
    20cc:	10c00185 	stb	r3,6(r2)
		(&init_param->pdata->channels[i])->divider_phase = 0;
    20d0:	e0bffe17 	ldw	r2,-8(fp)
    20d4:	10800417 	ldw	r2,16(r2)
    20d8:	10c00c17 	ldw	r3,48(r2)
    20dc:	e0bfff17 	ldw	r2,-4(fp)
    20e0:	108006a4 	muli	r2,r2,26
    20e4:	1885883a 	add	r2,r3,r2
    20e8:	100001c5 	stb	zero,7(r2)
		(&init_param->pdata->channels[i])->channel_divider = 0;
    20ec:	e0bffe17 	ldw	r2,-8(fp)
    20f0:	10800417 	ldw	r2,16(r2)
    20f4:	10c00c17 	ldw	r3,48(r2)
    20f8:	e0bfff17 	ldw	r2,-4(fp)
    20fc:	108006a4 	muli	r2,r2,26
    2100:	1885883a 	add	r2,r3,r2
    2104:	1000020d 	sth	zero,8(r2)
	for (i=0; i < init_param->pdata->num_channels; i++) {
    2108:	e0bfff17 	ldw	r2,-4(fp)
    210c:	10800044 	addi	r2,r2,1
    2110:	e0bfff15 	stw	r2,-4(fp)
    2114:	e0bffe17 	ldw	r2,-8(fp)
    2118:	10800417 	ldw	r2,16(r2)
    211c:	10800b17 	ldw	r2,44(r2)
    2120:	e0ffff17 	ldw	r3,-4(fp)
    2124:	18bfb816 	blt	r3,r2,2008 <__alt_mem_mcu_subsystem_ram_0+0x77fe2008>
	}
	return 0;
    2128:	0005883a 	mov	r2,zero
}
    212c:	e037883a 	mov	sp,fp
    2130:	df000017 	ldw	fp,0(sp)
    2134:	dec00104 	addi	sp,sp,4
    2138:	f800283a 	ret

0000213c <ad9523_setup>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_setup(struct ad9523_dev **device,
		     const struct ad9523_init_param *init_param)

{
    213c:	defff504 	addi	sp,sp,-44
    2140:	dfc00a15 	stw	ra,40(sp)
    2144:	df000915 	stw	fp,36(sp)
    2148:	df000904 	addi	fp,sp,36
    214c:	e13ff815 	stw	r4,-32(fp)
    2150:	e17ff715 	stw	r5,-36(fp)
	struct ad9523_channel_spec *chan;
	uint32_t active_mask = 0;
    2154:	e03fff15 	stw	zero,-4(fp)
	int32_t ret, i;
	uint32_t reg_data;
	uint32_t version_id;
	struct ad9523_dev *dev;

	dev = (struct ad9523_dev *)malloc(sizeof(*dev));
    2158:	01000c04 	movi	r4,48
    215c:	000fdd40 	call	fdd4 <malloc>
    2160:	e0bffd15 	stw	r2,-12(fp)
	if (!dev)
    2164:	e0bffd17 	ldw	r2,-12(fp)
    2168:	1000021e 	bne	r2,zero,2174 <ad9523_setup+0x38>
		return -1;
    216c:	00bfffc4 	movi	r2,-1
    2170:	0002fa06 	br	2d5c <ad9523_setup+0xc20>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
    2174:	e0bffd17 	ldw	r2,-12(fp)
    2178:	e0fff717 	ldw	r3,-36(fp)
    217c:	180b883a 	mov	r5,r3
    2180:	1009883a 	mov	r4,r2
    2184:	0007c480 	call	7c48 <spi_init>
    2188:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    218c:	e0bffc17 	ldw	r2,-16(fp)
    2190:	1000020e 	bge	r2,zero,219c <ad9523_setup+0x60>
		return ret;
    2194:	e0bffc17 	ldw	r2,-16(fp)
    2198:	0002f006 	br	2d5c <ad9523_setup+0xc20>

	dev->pdata = init_param->pdata;
    219c:	e0bff717 	ldw	r2,-36(fp)
    21a0:	10c00417 	ldw	r3,16(r2)
    21a4:	e0bffd17 	ldw	r2,-12(fp)
    21a8:	10c00b15 	stw	r3,44(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_SERIAL_PORT_CONFIG,
			       AD9523_SER_CONF_SOFT_RESET |
			       (dev->pdata->spi3wire ? 0 :
    21ac:	e0bffd17 	ldw	r2,-12(fp)
    21b0:	10800b17 	ldw	r2,44(r2)
    21b4:	10800103 	ldbu	r2,4(r2)
	ret = ad9523_spi_write(dev,
    21b8:	10803fcc 	andi	r2,r2,255
    21bc:	10000226 	beq	r2,zero,21c8 <ad9523_setup+0x8c>
    21c0:	00800904 	movi	r2,36
    21c4:	00000106 	br	21cc <ad9523_setup+0x90>
    21c8:	00802944 	movi	r2,165
    21cc:	100d883a 	mov	r6,r2
    21d0:	01400074 	movhi	r5,1
    21d4:	e13ffd17 	ldw	r4,-12(fp)
    21d8:	00017f80 	call	17f8 <ad9523_spi_write>
    21dc:	e0bffc15 	stw	r2,-16(fp)
				AD9523_SER_CONF_SDO_ACTIVE));
	if (ret < 0)
    21e0:	e0bffc17 	ldw	r2,-16(fp)
    21e4:	1000020e 	bge	r2,zero,21f0 <ad9523_setup+0xb4>
		return ret;
    21e8:	e0bffc17 	ldw	r2,-16(fp)
    21ec:	0002db06 	br	2d5c <ad9523_setup+0xc20>
	mdelay(1);
    21f0:	0100fa04 	movi	r4,1000
    21f4:	00206540 	call	20654 <usleep>

	ret = ad9523_spi_write(dev,
    21f8:	01800044 	movi	r6,1
    21fc:	01400074 	movhi	r5,1
    2200:	29400104 	addi	r5,r5,4
    2204:	e13ffd17 	ldw	r4,-12(fp)
    2208:	00017f80 	call	17f8 <ad9523_spi_write>
    220c:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_READBACK_CTRL,
			       AD9523_READBACK_CTRL_READ_BUFFERED);
	if (ret < 0)
    2210:	e0bffc17 	ldw	r2,-16(fp)
    2214:	1000020e 	bge	r2,zero,2220 <ad9523_setup+0xe4>
		return ret;
    2218:	e0bffc17 	ldw	r2,-16(fp)
    221c:	0002cf06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_io_update(dev);
    2220:	e13ffd17 	ldw	r4,-12(fp)
    2224:	00018cc0 	call	18cc <ad9523_io_update>
    2228:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    222c:	e0bffc17 	ldw	r2,-16(fp)
    2230:	1000020e 	bge	r2,zero,223c <ad9523_setup+0x100>
		return ret;
    2234:	e0bffc17 	ldw	r2,-16(fp)
    2238:	0002c806 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_read(dev,
    223c:	e0bff904 	addi	r2,fp,-28
    2240:	100d883a 	mov	r6,r2
    2244:	014000b4 	movhi	r5,2
    2248:	29400184 	addi	r5,r5,6
    224c:	e13ffd17 	ldw	r4,-12(fp)
    2250:	00017080 	call	1708 <ad9523_spi_read>
    2254:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &version_id);
	if (ret < 0)
    2258:	e0bffc17 	ldw	r2,-16(fp)
    225c:	1000020e 	bge	r2,zero,2268 <ad9523_setup+0x12c>
		return ret;
    2260:	e0bffc17 	ldw	r2,-16(fp)
    2264:	0002bd06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
    2268:	01ab6554 	movui	r6,44437
    226c:	014000b4 	movhi	r5,2
    2270:	29400184 	addi	r5,r5,6
    2274:	e13ffd17 	ldw	r4,-12(fp)
    2278:	00017f80 	call	17f8 <ad9523_spi_write>
    227c:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       0xAD95);
	if (ret < 0)
    2280:	e0bffc17 	ldw	r2,-16(fp)
    2284:	1000020e 	bge	r2,zero,2290 <ad9523_setup+0x154>
		return ret;
    2288:	e0bffc17 	ldw	r2,-16(fp)
    228c:	0002b306 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_read(dev,
    2290:	e0bffa04 	addi	r2,fp,-24
    2294:	100d883a 	mov	r6,r2
    2298:	014000b4 	movhi	r5,2
    229c:	29400184 	addi	r5,r5,6
    22a0:	e13ffd17 	ldw	r4,-12(fp)
    22a4:	00017080 	call	1708 <ad9523_spi_read>
    22a8:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &reg_data);
	if (ret < 0)
    22ac:	e0bffc17 	ldw	r2,-16(fp)
    22b0:	1000020e 	bge	r2,zero,22bc <ad9523_setup+0x180>
		return ret;
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	0002a806 	br	2d5c <ad9523_setup+0xc20>

	if (reg_data != 0xAD95) {
    22bc:	e0fffa17 	ldw	r3,-24(fp)
    22c0:	00ab6554 	movui	r2,44437
    22c4:	18800726 	beq	r3,r2,22e4 <ad9523_setup+0x1a8>
		printf("AD9523: SPI write-verify failed (0x%X)!\n\r",
    22c8:	e0bffa17 	ldw	r2,-24(fp)
    22cc:	100b883a 	mov	r5,r2
    22d0:	010000b4 	movhi	r4,2
    22d4:	2114ad04 	addi	r4,r4,21172
    22d8:	0010ec40 	call	10ec4 <printf>
		       reg_data);
		return -1;
    22dc:	00bfffc4 	movi	r2,-1
    22e0:	00029e06 	br	2d5c <ad9523_setup+0xc20>
	}

	ret = ad9523_spi_write(dev,
    22e4:	e0bff917 	ldw	r2,-28(fp)
    22e8:	100d883a 	mov	r6,r2
    22ec:	014000b4 	movhi	r5,2
    22f0:	29400184 	addi	r5,r5,6
    22f4:	e13ffd17 	ldw	r4,-12(fp)
    22f8:	00017f80 	call	17f8 <ad9523_spi_write>
    22fc:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       version_id);
	if (ret < 0)
    2300:	e0bffc17 	ldw	r2,-16(fp)
    2304:	1000020e 	bge	r2,zero,2310 <ad9523_setup+0x1d4>
		return ret;
    2308:	e0bffc17 	ldw	r2,-16(fp)
    230c:	00029306 	br	2d5c <ad9523_setup+0xc20>
	/*
	 * PLL1 Setup
	 */
	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_A_DIVIDER,
			       dev->pdata->refa_r_div);
    2310:	e0bffd17 	ldw	r2,-12(fp)
    2314:	10800b17 	ldw	r2,44(r2)
    2318:	1080038b 	ldhu	r2,14(r2)
	ret = ad9523_spi_write(dev,
    231c:	10bfffcc 	andi	r2,r2,65535
    2320:	100d883a 	mov	r6,r2
    2324:	014000b4 	movhi	r5,2
    2328:	29400444 	addi	r5,r5,17
    232c:	e13ffd17 	ldw	r4,-12(fp)
    2330:	00017f80 	call	17f8 <ad9523_spi_write>
    2334:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    2338:	e0bffc17 	ldw	r2,-16(fp)
    233c:	1000020e 	bge	r2,zero,2348 <ad9523_setup+0x20c>
		return ret;
    2340:	e0bffc17 	ldw	r2,-16(fp)
    2344:	00028506 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_B_DIVIDER,
			       dev->pdata->refb_r_div);
    2348:	e0bffd17 	ldw	r2,-12(fp)
    234c:	10800b17 	ldw	r2,44(r2)
    2350:	1080040b 	ldhu	r2,16(r2)
	ret = ad9523_spi_write(dev,
    2354:	10bfffcc 	andi	r2,r2,65535
    2358:	100d883a 	mov	r6,r2
    235c:	014000b4 	movhi	r5,2
    2360:	294004c4 	addi	r5,r5,19
    2364:	e13ffd17 	ldw	r4,-12(fp)
    2368:	00017f80 	call	17f8 <ad9523_spi_write>
    236c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    2370:	e0bffc17 	ldw	r2,-16(fp)
    2374:	1000020e 	bge	r2,zero,2380 <ad9523_setup+0x244>
		return ret;
    2378:	e0bffc17 	ldw	r2,-16(fp)
    237c:	00027706 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_FEEDBACK_DIVIDER,
			       dev->pdata->pll1_feedback_div);
    2380:	e0bffd17 	ldw	r2,-12(fp)
    2384:	10800b17 	ldw	r2,44(r2)
    2388:	1080048b 	ldhu	r2,18(r2)
	ret = ad9523_spi_write(dev,
    238c:	10bfffcc 	andi	r2,r2,65535
    2390:	100d883a 	mov	r6,r2
    2394:	014000b4 	movhi	r5,2
    2398:	294005c4 	addi	r5,r5,23
    239c:	e13ffd17 	ldw	r4,-12(fp)
    23a0:	00017f80 	call	17f8 <ad9523_spi_write>
    23a4:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    23a8:	e0bffc17 	ldw	r2,-16(fp)
    23ac:	1000020e 	bge	r2,zero,23b8 <ad9523_setup+0x27c>
		return ret;
    23b0:	e0bffc17 	ldw	r2,-16(fp)
    23b4:	00026906 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_CHARGE_PUMP_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
    23b8:	e0bffd17 	ldw	r2,-12(fp)
    23bc:	10800b17 	ldw	r2,44(r2)
    23c0:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    23c4:	10803fcc 	andi	r2,r2,255
    23c8:	10000a1e 	bne	r2,zero,23f4 <ad9523_setup+0x2b8>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
    23cc:	e0bffd17 	ldw	r2,-12(fp)
    23d0:	10800b17 	ldw	r2,44(r2)
    23d4:	1080050b 	ldhu	r2,20(r2)
    23d8:	10ffffcc 	andi	r3,r2,65535
    23dc:	00807d04 	movi	r2,500
    23e0:	1885203a 	divu	r2,r3,r2
    23e4:	10bfffcc 	andi	r2,r2,65535
    23e8:	10801fcc 	andi	r2,r2,127
    23ec:	1080c014 	ori	r2,r2,768
    23f0:	00000106 	br	23f8 <ad9523_setup+0x2bc>
	ret = ad9523_spi_write(dev,
    23f4:	00802004 	movi	r2,128
    23f8:	100d883a 	mov	r6,r2
    23fc:	014000b4 	movhi	r5,2
    2400:	29400644 	addi	r5,r5,25
    2404:	e13ffd17 	ldw	r4,-12(fp)
    2408:	00017f80 	call	17f8 <ad9523_spi_write>
    240c:	e0bffc15 	stw	r2,-16(fp)
				      AD9523_PLL1_CHARGE_PUMP_CURRENT_nA(dev->pdata->
						      pll1_charge_pump_current_nA) |
				      AD9523_PLL1_CHARGE_PUMP_MODE_NORMAL |
				      AD9523_PLL1_BACKLASH_PW_MIN));
	if (ret < 0)
    2410:	e0bffc17 	ldw	r2,-16(fp)
    2414:	1000020e 	bge	r2,zero,2420 <ad9523_setup+0x2e4>
		return ret;
    2418:	e0bffc17 	ldw	r2,-16(fp)
    241c:	00024f06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_INPUT_RECEIVERS_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
    2420:	e0bffd17 	ldw	r2,-12(fp)
    2424:	10800b17 	ldw	r2,44(r2)
    2428:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    242c:	10803fcc 	andi	r2,r2,255
    2430:	10001226 	beq	r2,zero,247c <ad9523_setup+0x340>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
    2434:	e0bffd17 	ldw	r2,-12(fp)
    2438:	10800b17 	ldw	r2,44(r2)
    243c:	10800203 	ldbu	r2,8(r2)
    2440:	10803fcc 	andi	r2,r2,255
    2444:	10000226 	beq	r2,zero,2450 <ad9523_setup+0x314>
    2448:	00800144 	movi	r2,5
    244c:	00000106 	br	2454 <ad9523_setup+0x318>
    2450:	00800104 	movi	r2,4
    2454:	e0fffd17 	ldw	r3,-12(fp)
    2458:	18c00b17 	ldw	r3,44(r3)
    245c:	18c00303 	ldbu	r3,12(r3)
    2460:	18c03fcc 	andi	r3,r3,255
    2464:	18000226 	beq	r3,zero,2470 <ad9523_setup+0x334>
    2468:	00c00084 	movi	r3,2
    246c:	00000106 	br	2474 <ad9523_setup+0x338>
    2470:	0007883a 	mov	r3,zero
    2474:	10c4b03a 	or	r2,r2,r3
    2478:	00003306 	br	2548 <ad9523_setup+0x40c>
    247c:	e0bffd17 	ldw	r2,-12(fp)
    2480:	10800b17 	ldw	r2,44(r2)
    2484:	10800143 	ldbu	r2,5(r2)
    2488:	10803fcc 	andi	r2,r2,255
    248c:	10000226 	beq	r2,zero,2498 <ad9523_setup+0x35c>
    2490:	00c00204 	movi	r3,8
    2494:	00000106 	br	249c <ad9523_setup+0x360>
    2498:	0007883a 	mov	r3,zero
    249c:	e0bffd17 	ldw	r2,-12(fp)
    24a0:	10800b17 	ldw	r2,44(r2)
    24a4:	10800183 	ldbu	r2,6(r2)
    24a8:	10803fcc 	andi	r2,r2,255
    24ac:	10000226 	beq	r2,zero,24b8 <ad9523_setup+0x37c>
    24b0:	00800404 	movi	r2,16
    24b4:	00000106 	br	24bc <ad9523_setup+0x380>
    24b8:	0005883a 	mov	r2,zero
    24bc:	1886b03a 	or	r3,r3,r2
    24c0:	e0bffd17 	ldw	r2,-12(fp)
    24c4:	10800b17 	ldw	r2,44(r2)
    24c8:	10800203 	ldbu	r2,8(r2)
    24cc:	10803fcc 	andi	r2,r2,255
    24d0:	1004c03a 	cmpne	r2,r2,zero
    24d4:	10803fcc 	andi	r2,r2,255
    24d8:	1886b03a 	or	r3,r3,r2
    24dc:	e0bffd17 	ldw	r2,-12(fp)
    24e0:	10800b17 	ldw	r2,44(r2)
    24e4:	10800303 	ldbu	r2,12(r2)
    24e8:	10803fcc 	andi	r2,r2,255
    24ec:	10000226 	beq	r2,zero,24f8 <ad9523_setup+0x3bc>
    24f0:	00800084 	movi	r2,2
    24f4:	00000106 	br	24fc <ad9523_setup+0x3c0>
    24f8:	0005883a 	mov	r2,zero
    24fc:	10c6b03a 	or	r3,r2,r3
    2500:	e0bffd17 	ldw	r2,-12(fp)
    2504:	10800b17 	ldw	r2,44(r2)
    2508:	10800143 	ldbu	r2,5(r2)
    250c:	10803fcc 	andi	r2,r2,255
    2510:	10000226 	beq	r2,zero,251c <ad9523_setup+0x3e0>
    2514:	00800804 	movi	r2,32
    2518:	00000106 	br	2520 <ad9523_setup+0x3e4>
    251c:	0005883a 	mov	r2,zero
    2520:	10c6b03a 	or	r3,r2,r3
    2524:	e0bffd17 	ldw	r2,-12(fp)
    2528:	10800b17 	ldw	r2,44(r2)
    252c:	10800183 	ldbu	r2,6(r2)
    2530:	10803fcc 	andi	r2,r2,255
    2534:	10000226 	beq	r2,zero,2540 <ad9523_setup+0x404>
    2538:	00801004 	movi	r2,64
    253c:	00000106 	br	2544 <ad9523_setup+0x408>
    2540:	0005883a 	mov	r2,zero
    2544:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    2548:	100d883a 	mov	r6,r2
    254c:	01400074 	movhi	r5,1
    2550:	29400684 	addi	r5,r5,26
    2554:	e13ffd17 	ldw	r4,-12(fp)
    2558:	00017f80 	call	17f8 <ad9523_spi_write>
    255c:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(osc_in_diff_en, AD9523_PLL1_OSC_IN_DIFF_EN) |
				      AD_IF(osc_in_cmos_neg_inp_en,
					    AD9523_PLL1_OSC_IN_CMOS_NEG_INP_EN) |
				      AD_IF(refa_diff_rcv_en, AD9523_PLL1_REFA_DIFF_RCV_EN) |
				      AD_IF(refb_diff_rcv_en, AD9523_PLL1_REFB_DIFF_RCV_EN)));
	if (ret < 0)
    2560:	e0bffc17 	ldw	r2,-16(fp)
    2564:	1000020e 	bge	r2,zero,2570 <ad9523_setup+0x434>
		return ret;
    2568:	e0bffc17 	ldw	r2,-16(fp)
    256c:	0001fb06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
    2570:	e0bffd17 	ldw	r2,-12(fp)
    2574:	10800b17 	ldw	r2,44(r2)
    2578:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
    257c:	10803fcc 	andi	r2,r2,255
    2580:	1000341e 	bne	r2,zero,2654 <ad9523_setup+0x518>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
    2584:	e0bffd17 	ldw	r2,-12(fp)
    2588:	10800b17 	ldw	r2,44(r2)
    258c:	108001c3 	ldbu	r2,7(r2)
    2590:	10803fcc 	andi	r2,r2,255
    2594:	10000226 	beq	r2,zero,25a0 <ad9523_setup+0x464>
    2598:	00c00104 	movi	r3,4
    259c:	00000106 	br	25a4 <ad9523_setup+0x468>
    25a0:	0007883a 	mov	r3,zero
    25a4:	e0bffd17 	ldw	r2,-12(fp)
    25a8:	10800b17 	ldw	r2,44(r2)
    25ac:	108002c3 	ldbu	r2,11(r2)
    25b0:	10803fcc 	andi	r2,r2,255
    25b4:	10000226 	beq	r2,zero,25c0 <ad9523_setup+0x484>
    25b8:	00800204 	movi	r2,8
    25bc:	00000106 	br	25c4 <ad9523_setup+0x488>
    25c0:	0005883a 	mov	r2,zero
    25c4:	1886b03a 	or	r3,r3,r2
    25c8:	e0bffd17 	ldw	r2,-12(fp)
    25cc:	10800b17 	ldw	r2,44(r2)
    25d0:	10800583 	ldbu	r2,22(r2)
    25d4:	10803fcc 	andi	r2,r2,255
    25d8:	10000226 	beq	r2,zero,25e4 <ad9523_setup+0x4a8>
    25dc:	00800804 	movi	r2,32
    25e0:	00000106 	br	25e8 <ad9523_setup+0x4ac>
    25e4:	0005883a 	mov	r2,zero
    25e8:	10c6b03a 	or	r3,r2,r3
    25ec:	e0bffd17 	ldw	r2,-12(fp)
    25f0:	10800b17 	ldw	r2,44(r2)
    25f4:	108005c3 	ldbu	r2,23(r2)
    25f8:	10803fcc 	andi	r2,r2,255
    25fc:	10000226 	beq	r2,zero,2608 <ad9523_setup+0x4cc>
    2600:	00800404 	movi	r2,16
    2604:	00000106 	br	260c <ad9523_setup+0x4d0>
    2608:	0005883a 	mov	r2,zero
    260c:	10c6b03a 	or	r3,r2,r3
    2610:	e0bffd17 	ldw	r2,-12(fp)
    2614:	10800b17 	ldw	r2,44(r2)
    2618:	10800243 	ldbu	r2,9(r2)
    261c:	10803fcc 	andi	r2,r2,255
    2620:	1004c03a 	cmpne	r2,r2,zero
    2624:	10803fcc 	andi	r2,r2,255
    2628:	1886b03a 	or	r3,r3,r2
    262c:	e0bffd17 	ldw	r2,-12(fp)
    2630:	10800b17 	ldw	r2,44(r2)
    2634:	10800283 	ldbu	r2,10(r2)
    2638:	10803fcc 	andi	r2,r2,255
    263c:	10000226 	beq	r2,zero,2648 <ad9523_setup+0x50c>
    2640:	00800084 	movi	r2,2
    2644:	00000106 	br	264c <ad9523_setup+0x510>
    2648:	0005883a 	mov	r2,zero
    264c:	10c4b03a 	or	r2,r2,r3
    2650:	00000106 	br	2658 <ad9523_setup+0x51c>
	ret = ad9523_spi_write(dev,
    2654:	00801804 	movi	r2,96
    2658:	100d883a 	mov	r6,r2
    265c:	01400074 	movhi	r5,1
    2660:	294006c4 	addi	r5,r5,27
    2664:	e13ffd17 	ldw	r4,-12(fp)
    2668:	00017f80 	call	17f8 <ad9523_spi_write>
    266c:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(zero_delay_mode_internal_en,
					    AD9523_PLL1_ZERO_DELAY_MODE_INT) |
				      AD_IF(osc_in_feedback_en, AD9523_PLL1_OSC_IN_PLL_FEEDBACK_EN) |
				      AD_IF(refa_cmos_neg_inp_en, AD9523_PLL1_REFA_CMOS_NEG_INP_EN) |
				      AD_IF(refb_cmos_neg_inp_en, AD9523_PLL1_REFB_CMOS_NEG_INP_EN)));
	if (ret < 0)
    2670:	e0bffc17 	ldw	r2,-16(fp)
    2674:	1000020e 	bge	r2,zero,2680 <ad9523_setup+0x544>
		return ret;
    2678:	e0bffc17 	ldw	r2,-16(fp)
    267c:	0001b706 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_MISC_CTRL,
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
			       AD9523_PLL1_REF_MODE(dev->pdata->ref_mode));
    2680:	e0bffd17 	ldw	r2,-12(fp)
    2684:	10800b17 	ldw	r2,44(r2)
    2688:	10800683 	ldbu	r2,26(r2)
    268c:	10803fcc 	andi	r2,r2,255
    2690:	100490ba 	slli	r2,r2,2
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
    2694:	10802014 	ori	r2,r2,128
	ret = ad9523_spi_write(dev,
    2698:	100d883a 	mov	r6,r2
    269c:	01400074 	movhi	r5,1
    26a0:	29400704 	addi	r5,r5,28
    26a4:	e13ffd17 	ldw	r4,-12(fp)
    26a8:	00017f80 	call	17f8 <ad9523_spi_write>
    26ac:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    26b0:	e0bffc17 	ldw	r2,-16(fp)
    26b4:	1000020e 	bge	r2,zero,26c0 <ad9523_setup+0x584>
		return ret;
    26b8:	e0bffc17 	ldw	r2,-16(fp)
    26bc:	0001a706 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_LOOP_FILTER_CTRL,
			       AD9523_PLL1_LOOP_FILTER_RZERO(dev->pdata->
    26c0:	e0bffd17 	ldw	r2,-12(fp)
    26c4:	10800b17 	ldw	r2,44(r2)
    26c8:	10800643 	ldbu	r2,25(r2)
    26cc:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
    26d0:	108003cc 	andi	r2,r2,15
    26d4:	100d883a 	mov	r6,r2
    26d8:	01400074 	movhi	r5,1
    26dc:	29400744 	addi	r5,r5,29
    26e0:	e13ffd17 	ldw	r4,-12(fp)
    26e4:	00017f80 	call	17f8 <ad9523_spi_write>
    26e8:	e0bffc15 	stw	r2,-16(fp)
					       pll1_loop_filter_rzero));
	if (ret < 0)
    26ec:	e0bffc17 	ldw	r2,-16(fp)
    26f0:	1000020e 	bge	r2,zero,26fc <ad9523_setup+0x5c0>
		return ret;
    26f4:	e0bffc17 	ldw	r2,-16(fp)
    26f8:	00019806 	br	2d5c <ad9523_setup+0xc20>
	 * PLL2 Setup
	 */

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CHARGE_PUMP,
			       AD9523_PLL2_CHARGE_PUMP_CURRENT_nA(dev->pdata->
    26fc:	e0bffd17 	ldw	r2,-12(fp)
    2700:	10800b17 	ldw	r2,44(r2)
    2704:	10c00717 	ldw	r3,28(r2)
	ret = ad9523_spi_write(dev,
    2708:	00836b04 	movi	r2,3500
    270c:	1885203a 	divu	r2,r3,r2
    2710:	100d883a 	mov	r6,r2
    2714:	01400074 	movhi	r5,1
    2718:	29403c04 	addi	r5,r5,240
    271c:	e13ffd17 	ldw	r4,-12(fp)
    2720:	00017f80 	call	17f8 <ad9523_spi_write>
    2724:	e0bffc15 	stw	r2,-16(fp)
					       pll2_charge_pump_current_nA));
	if (ret < 0)
    2728:	e0bffc17 	ldw	r2,-16(fp)
    272c:	1000020e 	bge	r2,zero,2738 <ad9523_setup+0x5fc>
		return ret;
    2730:	e0bffc17 	ldw	r2,-16(fp)
    2734:	00018906 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_FEEDBACK_DIVIDER_AB,
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
    2738:	e0bffd17 	ldw	r2,-12(fp)
    273c:	10800b17 	ldw	r2,44(r2)
    2740:	10800803 	ldbu	r2,32(r2)
    2744:	10803fcc 	andi	r2,r2,255
    2748:	100491ba 	slli	r2,r2,6
    274c:	10c03fcc 	andi	r3,r2,255
			       AD9523_PLL2_FB_NDIV_B_CNT(dev->pdata->pll2_ndiv_b_cnt));
    2750:	e0bffd17 	ldw	r2,-12(fp)
    2754:	10800b17 	ldw	r2,44(r2)
    2758:	10800843 	ldbu	r2,33(r2)
    275c:	10803fcc 	andi	r2,r2,255
    2760:	10800fcc 	andi	r2,r2,63
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
    2764:	1884b03a 	or	r2,r3,r2
	ret = ad9523_spi_write(dev,
    2768:	100d883a 	mov	r6,r2
    276c:	01400074 	movhi	r5,1
    2770:	29403c44 	addi	r5,r5,241
    2774:	e13ffd17 	ldw	r4,-12(fp)
    2778:	00017f80 	call	17f8 <ad9523_spi_write>
    277c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    2780:	e0bffc17 	ldw	r2,-16(fp)
    2784:	1000020e 	bge	r2,zero,2790 <ad9523_setup+0x654>
		return ret;
    2788:	e0bffc17 	ldw	r2,-16(fp)
    278c:	00017306 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CTRL,
			       AD9523_PLL2_CHARGE_PUMP_MODE_NORMAL |
			       AD9523_PLL2_BACKLASH_CTRL_EN |
			       AD_IF(pll2_freq_doubler_en,
    2790:	e0bffd17 	ldw	r2,-12(fp)
    2794:	10800b17 	ldw	r2,44(r2)
    2798:	10800883 	ldbu	r2,34(r2)
	ret = ad9523_spi_write(dev,
    279c:	10803fcc 	andi	r2,r2,255
    27a0:	10000226 	beq	r2,zero,27ac <ad9523_setup+0x670>
    27a4:	00800cc4 	movi	r2,51
    27a8:	00000106 	br	27b0 <ad9523_setup+0x674>
    27ac:	008004c4 	movi	r2,19
    27b0:	100d883a 	mov	r6,r2
    27b4:	01400074 	movhi	r5,1
    27b8:	29403c84 	addi	r5,r5,242
    27bc:	e13ffd17 	ldw	r4,-12(fp)
    27c0:	00017f80 	call	17f8 <ad9523_spi_write>
    27c4:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_FREQ_DOUBLER_EN));
	if (ret < 0)
    27c8:	e0bffc17 	ldw	r2,-16(fp)
    27cc:	1000020e 	bge	r2,zero,27d8 <ad9523_setup+0x69c>
		return ret;
    27d0:	e0bffc17 	ldw	r2,-16(fp)
    27d4:	00016106 	br	2d5c <ad9523_setup+0xc20>

	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	10800b17 	ldw	r2,44(r2)
    27e0:	10c00017 	ldw	r3,0(r2)
    27e4:	e0bffd17 	ldw	r2,-12(fp)
    27e8:	10800b17 	ldw	r2,44(r2)
    27ec:	10800883 	ldbu	r2,34(r2)
    27f0:	10803fcc 	andi	r2,r2,255
    27f4:	10000226 	beq	r2,zero,2800 <ad9523_setup+0x6c4>
    27f8:	00800084 	movi	r2,2
    27fc:	00000106 	br	2804 <ad9523_setup+0x6c8>
    2800:	00800044 	movi	r2,1
    2804:	10c7383a 	mul	r3,r2,r3
				   / dev->pdata->pll2_r2_div) * AD9523_PLL2_FB_NDIV(dev->pdata->
    2808:	e0bffd17 	ldw	r2,-12(fp)
    280c:	10800b17 	ldw	r2,44(r2)
    2810:	108008c3 	ldbu	r2,35(r2)
    2814:	10803fcc 	andi	r2,r2,255
    2818:	1885203a 	divu	r2,r3,r2
    281c:	e0fffd17 	ldw	r3,-12(fp)
    2820:	18c00b17 	ldw	r3,44(r3)
    2824:	18c00843 	ldbu	r3,33(r3)
    2828:	18c03fcc 	andi	r3,r3,255
    282c:	180890ba 	slli	r4,r3,2
    2830:	e0fffd17 	ldw	r3,-12(fp)
    2834:	18c00b17 	ldw	r3,44(r3)
    2838:	18c00803 	ldbu	r3,32(r3)
    283c:	18c03fcc 	andi	r3,r3,255
    2840:	20c7883a 	add	r3,r4,r3
    2844:	10c7383a 	mul	r3,r2,r3
	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
    2848:	e0bffd17 	ldw	r2,-12(fp)
    284c:	10c00315 	stw	r3,12(r2)
						   pll2_ndiv_a_cnt,
						   dev->pdata->
						   pll2_ndiv_b_cnt);

	ret = ad9523_spi_write(dev,
    2850:	01800084 	movi	r6,2
    2854:	01400074 	movhi	r5,1
    2858:	29403cc4 	addi	r5,r5,243
    285c:	e13ffd17 	ldw	r4,-12(fp)
    2860:	00017f80 	call	17f8 <ad9523_spi_write>
    2864:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_PLL2_VCO_CTRL,
			       AD9523_PLL2_VCO_CALIBRATE);
	if (ret < 0)
    2868:	e0bffc17 	ldw	r2,-16(fp)
    286c:	1000020e 	bge	r2,zero,2878 <ad9523_setup+0x73c>
		return ret;
    2870:	e0bffc17 	ldw	r2,-16(fp)
    2874:	00013906 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_VCO_DIVIDER,
			       AD9523_PLL2_VCO_DIV_M1(dev->pdata->
    2878:	e0bffd17 	ldw	r2,-12(fp)
    287c:	10800b17 	ldw	r2,44(r2)
    2880:	10800903 	ldbu	r2,36(r2)
    2884:	10803fcc 	andi	r2,r2,255
    2888:	10bfff44 	addi	r2,r2,-3
    288c:	10c000cc 	andi	r3,r2,3
					       pll2_vco_diff_m1) |
			       AD9523_PLL2_VCO_DIV_M2(dev->pdata->
    2890:	e0bffd17 	ldw	r2,-12(fp)
    2894:	10800b17 	ldw	r2,44(r2)
    2898:	10800943 	ldbu	r2,37(r2)
    289c:	10803fcc 	andi	r2,r2,255
    28a0:	10bfff44 	addi	r2,r2,-3
    28a4:	1004913a 	slli	r2,r2,4
    28a8:	10800c0c 	andi	r2,r2,48
					       pll2_vco_diff_m1) |
    28ac:	1886b03a 	or	r3,r3,r2
					       pll2_vco_diff_m2) |
			       AD_IFE(pll2_vco_diff_m1,
    28b0:	e0bffd17 	ldw	r2,-12(fp)
    28b4:	10800b17 	ldw	r2,44(r2)
    28b8:	10800903 	ldbu	r2,36(r2)
    28bc:	10803fcc 	andi	r2,r2,255
    28c0:	10000226 	beq	r2,zero,28cc <ad9523_setup+0x790>
    28c4:	0005883a 	mov	r2,zero
    28c8:	00000106 	br	28d0 <ad9523_setup+0x794>
    28cc:	00800104 	movi	r2,4
					       pll2_vco_diff_m2) |
    28d0:	10c6b03a 	or	r3,r2,r3
				      0,
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
			       AD_IFE(pll2_vco_diff_m2,
    28d4:	e0bffd17 	ldw	r2,-12(fp)
    28d8:	10800b17 	ldw	r2,44(r2)
    28dc:	10800943 	ldbu	r2,37(r2)
    28e0:	10803fcc 	andi	r2,r2,255
    28e4:	10000226 	beq	r2,zero,28f0 <ad9523_setup+0x7b4>
    28e8:	0005883a 	mov	r2,zero
    28ec:	00000106 	br	28f4 <ad9523_setup+0x7b8>
    28f0:	00801004 	movi	r2,64
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
    28f4:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    28f8:	100d883a 	mov	r6,r2
    28fc:	01400074 	movhi	r5,1
    2900:	29403d04 	addi	r5,r5,244
    2904:	e13ffd17 	ldw	r4,-12(fp)
    2908:	00017f80 	call	17f8 <ad9523_spi_write>
    290c:	e0bffc15 	stw	r2,-16(fp)
				      0,
				      AD9523_PLL2_VCO_DIV_M2_PWR_DOWN_EN));
	if (ret < 0)
    2910:	e0bffc17 	ldw	r2,-16(fp)
    2914:	1000020e 	bge	r2,zero,2920 <ad9523_setup+0x7e4>
		return ret;
    2918:	e0bffc17 	ldw	r2,-16(fp)
    291c:	00010f06 	br	2d5c <ad9523_setup+0xc20>

	if (dev->pdata->pll2_vco_diff_m1)
    2920:	e0bffd17 	ldw	r2,-12(fp)
    2924:	10800b17 	ldw	r2,44(r2)
    2928:	10800903 	ldbu	r2,36(r2)
    292c:	10803fcc 	andi	r2,r2,255
    2930:	10000926 	beq	r2,zero,2958 <ad9523_setup+0x81c>
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m1;
    2934:	e0bffd17 	ldw	r2,-12(fp)
    2938:	10c00317 	ldw	r3,12(r2)
    293c:	e0bffd17 	ldw	r2,-12(fp)
    2940:	10800b17 	ldw	r2,44(r2)
    2944:	10800903 	ldbu	r2,36(r2)
    2948:	10803fcc 	andi	r2,r2,255
    294c:	1887203a 	divu	r3,r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
    2950:	e0bffd17 	ldw	r2,-12(fp)
    2954:	10c00415 	stw	r3,16(r2)

	if (dev->pdata->pll2_vco_diff_m2)
    2958:	e0bffd17 	ldw	r2,-12(fp)
    295c:	10800b17 	ldw	r2,44(r2)
    2960:	10800943 	ldbu	r2,37(r2)
    2964:	10803fcc 	andi	r2,r2,255
    2968:	10000926 	beq	r2,zero,2990 <ad9523_setup+0x854>
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m2;
    296c:	e0bffd17 	ldw	r2,-12(fp)
    2970:	10c00317 	ldw	r3,12(r2)
    2974:	e0bffd17 	ldw	r2,-12(fp)
    2978:	10800b17 	ldw	r2,44(r2)
    297c:	10800943 	ldbu	r2,37(r2)
    2980:	10803fcc 	andi	r2,r2,255
    2984:	1887203a 	divu	r3,r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	10c00515 	stw	r3,20(r2)

	dev->ad9523_st.vco_out_freq[AD9523_VCXO] = dev->pdata->vcxo_freq;
    2990:	e0bffd17 	ldw	r2,-12(fp)
    2994:	10800b17 	ldw	r2,44(r2)
    2998:	10c00017 	ldw	r3,0(r2)
    299c:	e0bffd17 	ldw	r2,-12(fp)
    29a0:	10c00615 	stw	r3,24(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_R2_DIVIDER,
			       AD9523_PLL2_R2_DIVIDER_VAL(dev->pdata->pll2_r2_div));
    29a4:	e0bffd17 	ldw	r2,-12(fp)
    29a8:	10800b17 	ldw	r2,44(r2)
    29ac:	108008c3 	ldbu	r2,35(r2)
    29b0:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
    29b4:	108007cc 	andi	r2,r2,31
    29b8:	100d883a 	mov	r6,r2
    29bc:	01400074 	movhi	r5,1
    29c0:	29403dc4 	addi	r5,r5,247
    29c4:	e13ffd17 	ldw	r4,-12(fp)
    29c8:	00017f80 	call	17f8 <ad9523_spi_write>
    29cc:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    29d0:	e0bffc17 	ldw	r2,-16(fp)
    29d4:	1000020e 	bge	r2,zero,29e0 <ad9523_setup+0x8a4>
		return ret;
    29d8:	e0bffc17 	ldw	r2,-16(fp)
    29dc:	0000df06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_LOOP_FILTER_CTRL,
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
    29e0:	e0bffd17 	ldw	r2,-12(fp)
    29e4:	10800b17 	ldw	r2,44(r2)
    29e8:	10800a03 	ldbu	r2,40(r2)
    29ec:	10803fcc 	andi	r2,r2,255
    29f0:	10c001cc 	andi	r3,r2,7
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
    29f4:	e0bffd17 	ldw	r2,-12(fp)
    29f8:	10800b17 	ldw	r2,44(r2)
    29fc:	108009c3 	ldbu	r2,39(r2)
    2a00:	10803fcc 	andi	r2,r2,255
    2a04:	100490fa 	slli	r2,r2,3
    2a08:	10800e0c 	andi	r2,r2,56
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
    2a0c:	1886b03a 	or	r3,r3,r2
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
    2a10:	e0bffd17 	ldw	r2,-12(fp)
    2a14:	10800b17 	ldw	r2,44(r2)
    2a18:	10800983 	ldbu	r2,38(r2)
    2a1c:	10803fcc 	andi	r2,r2,255
    2a20:	100491ba 	slli	r2,r2,6
    2a24:	1080700c 	andi	r2,r2,448
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
    2a28:	1886b03a 	or	r3,r3,r2
			       AD_IF(rzero_bypass_en,
    2a2c:	e0bffd17 	ldw	r2,-12(fp)
    2a30:	10800b17 	ldw	r2,44(r2)
    2a34:	10800a43 	ldbu	r2,41(r2)
    2a38:	10803fcc 	andi	r2,r2,255
    2a3c:	10000226 	beq	r2,zero,2a48 <ad9523_setup+0x90c>
    2a40:	00804004 	movi	r2,256
    2a44:	00000106 	br	2a4c <ad9523_setup+0x910>
    2a48:	0005883a 	mov	r2,zero
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
    2a4c:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
    2a50:	100d883a 	mov	r6,r2
    2a54:	014000b4 	movhi	r5,2
    2a58:	29403d84 	addi	r5,r5,246
    2a5c:	e13ffd17 	ldw	r4,-12(fp)
    2a60:	00017f80 	call	17f8 <ad9523_spi_write>
    2a64:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_LOOP_FILTER_RZERO_BYPASS_EN));
	if (ret < 0)
    2a68:	e0bffc17 	ldw	r2,-16(fp)
    2a6c:	1000020e 	bge	r2,zero,2a78 <ad9523_setup+0x93c>
		return ret;
    2a70:	e0bffc17 	ldw	r2,-16(fp)
    2a74:	0000b906 	br	2d5c <ad9523_setup+0xc20>

	for (i = 0; i < dev->pdata->num_channels; i++) {
    2a78:	e03ffe15 	stw	zero,-8(fp)
    2a7c:	00006906 	br	2c24 <ad9523_setup+0xae8>
		chan = &dev->pdata->channels[i];
    2a80:	e0bffd17 	ldw	r2,-12(fp)
    2a84:	10800b17 	ldw	r2,44(r2)
    2a88:	10c00c17 	ldw	r3,48(r2)
    2a8c:	e0bffe17 	ldw	r2,-8(fp)
    2a90:	108006a4 	muli	r2,r2,26
    2a94:	1885883a 	add	r2,r3,r2
    2a98:	e0bffb15 	stw	r2,-20(fp)
		if (chan->channel_num < AD9523_NUM_CHAN) {
    2a9c:	e0bffb17 	ldw	r2,-20(fp)
    2aa0:	10800003 	ldbu	r2,0(r2)
    2aa4:	10803fcc 	andi	r2,r2,255
    2aa8:	108003a8 	cmpgeui	r2,r2,14
    2aac:	10005a1e 	bne	r2,zero,2c18 <ad9523_setup+0xadc>
			active_mask |= (1 << chan->channel_num);
    2ab0:	e0bffb17 	ldw	r2,-20(fp)
    2ab4:	10800003 	ldbu	r2,0(r2)
    2ab8:	10803fcc 	andi	r2,r2,255
    2abc:	00c00044 	movi	r3,1
    2ac0:	1884983a 	sll	r2,r3,r2
    2ac4:	1007883a 	mov	r3,r2
    2ac8:	e0bfff17 	ldw	r2,-4(fp)
    2acc:	10c4b03a 	or	r2,r2,r3
    2ad0:	e0bfff15 	stw	r2,-4(fp)
			ret = ad9523_spi_write(dev,
					       AD9523_CHANNEL_CLOCK_DIST(chan->channel_num),
    2ad4:	e0bffb17 	ldw	r2,-20(fp)
    2ad8:	10800003 	ldbu	r2,0(r2)
    2adc:	10803fcc 	andi	r2,r2,255
    2ae0:	108000e4 	muli	r2,r2,3
    2ae4:	10806484 	addi	r2,r2,402
    2ae8:	108000f4 	orhi	r2,r2,3
			ret = ad9523_spi_write(dev,
    2aec:	100b883a 	mov	r5,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
    2af0:	e0bffb17 	ldw	r2,-20(fp)
    2af4:	10800183 	ldbu	r2,6(r2)
    2af8:	10803fcc 	andi	r2,r2,255
    2afc:	10c003cc 	andi	r3,r2,15
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
    2b00:	e0bffb17 	ldw	r2,-20(fp)
    2b04:	1080020b 	ldhu	r2,8(r2)
    2b08:	10bfffcc 	andi	r2,r2,65535
    2b0c:	10bfffc4 	addi	r2,r2,-1
    2b10:	1008923a 	slli	r4,r2,8
    2b14:	00800134 	movhi	r2,4
    2b18:	10bfc004 	addi	r2,r2,-256
    2b1c:	2084703a 	and	r2,r4,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
    2b20:	1886b03a 	or	r3,r3,r2
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
    2b24:	e0bffb17 	ldw	r2,-20(fp)
    2b28:	108001c3 	ldbu	r2,7(r2)
    2b2c:	10803fcc 	andi	r2,r2,255
    2b30:	100494ba 	slli	r2,r2,18
    2b34:	10803f2c 	andhi	r2,r2,252
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
    2b38:	1886b03a 	or	r3,r3,r2
					       (chan->sync_ignore_en ?
    2b3c:	e0bffb17 	ldw	r2,-20(fp)
    2b40:	10800083 	ldbu	r2,2(r2)
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
    2b44:	10803fcc 	andi	r2,r2,255
    2b48:	10000226 	beq	r2,zero,2b54 <ad9523_setup+0xa18>
    2b4c:	00801004 	movi	r2,64
    2b50:	00000106 	br	2b58 <ad9523_setup+0xa1c>
    2b54:	0005883a 	mov	r2,zero
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
    2b58:	10c6b03a 	or	r3,r2,r3
					       (chan->divider_output_invert_en ?
    2b5c:	e0bffb17 	ldw	r2,-20(fp)
    2b60:	10800043 	ldbu	r2,1(r2)
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
    2b64:	10803fcc 	andi	r2,r2,255
    2b68:	10000226 	beq	r2,zero,2b74 <ad9523_setup+0xa38>
    2b6c:	00802004 	movi	r2,128
    2b70:	00000106 	br	2b78 <ad9523_setup+0xa3c>
    2b74:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
    2b78:	10c6b03a 	or	r3,r2,r3
					       (chan->low_power_mode_en ?
    2b7c:	e0bffb17 	ldw	r2,-20(fp)
    2b80:	108000c3 	ldbu	r2,3(r2)
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
    2b84:	10803fcc 	andi	r2,r2,255
    2b88:	10000226 	beq	r2,zero,2b94 <ad9523_setup+0xa58>
    2b8c:	00800404 	movi	r2,16
    2b90:	00000106 	br	2b98 <ad9523_setup+0xa5c>
    2b94:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
    2b98:	10c6b03a 	or	r3,r2,r3
					       (chan->output_dis ?
    2b9c:	e0bffb17 	ldw	r2,-20(fp)
    2ba0:	10800143 	ldbu	r2,5(r2)
						AD9523_CLK_DIST_PWR_DOWN_EN : 0));
    2ba4:	10803fcc 	andi	r2,r2,255
    2ba8:	10000226 	beq	r2,zero,2bb4 <ad9523_setup+0xa78>
    2bac:	00800804 	movi	r2,32
    2bb0:	00000106 	br	2bb8 <ad9523_setup+0xa7c>
    2bb4:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
    2bb8:	10c4b03a 	or	r2,r2,r3
			ret = ad9523_spi_write(dev,
    2bbc:	100d883a 	mov	r6,r2
    2bc0:	e13ffd17 	ldw	r4,-12(fp)
    2bc4:	00017f80 	call	17f8 <ad9523_spi_write>
    2bc8:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
    2bcc:	e0bffc17 	ldw	r2,-16(fp)
    2bd0:	1000020e 	bge	r2,zero,2bdc <ad9523_setup+0xaa0>
				return ret;
    2bd4:	e0bffc17 	ldw	r2,-16(fp)
    2bd8:	00006006 	br	2d5c <ad9523_setup+0xc20>

			ret = ad9523_vco_out_map(dev,
						 chan->channel_num,
    2bdc:	e0bffb17 	ldw	r2,-20(fp)
    2be0:	10800003 	ldbu	r2,0(r2)
			ret = ad9523_vco_out_map(dev,
    2be4:	10c03fcc 	andi	r3,r2,255
						 chan->use_alt_clock_src);
    2be8:	e0bffb17 	ldw	r2,-20(fp)
    2bec:	10800103 	ldbu	r2,4(r2)
			ret = ad9523_vco_out_map(dev,
    2bf0:	10803fcc 	andi	r2,r2,255
    2bf4:	100d883a 	mov	r6,r2
    2bf8:	180b883a 	mov	r5,r3
    2bfc:	e13ffd17 	ldw	r4,-12(fp)
    2c00:	00019080 	call	1908 <ad9523_vco_out_map>
    2c04:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
    2c08:	e0bffc17 	ldw	r2,-16(fp)
    2c0c:	1000020e 	bge	r2,zero,2c18 <ad9523_setup+0xadc>
				return ret;
    2c10:	e0bffc17 	ldw	r2,-16(fp)
    2c14:	00005106 	br	2d5c <ad9523_setup+0xc20>
	for (i = 0; i < dev->pdata->num_channels; i++) {
    2c18:	e0bffe17 	ldw	r2,-8(fp)
    2c1c:	10800044 	addi	r2,r2,1
    2c20:	e0bffe15 	stw	r2,-8(fp)
    2c24:	e0bffd17 	ldw	r2,-12(fp)
    2c28:	10800b17 	ldw	r2,44(r2)
    2c2c:	10800b17 	ldw	r2,44(r2)
    2c30:	e0fffe17 	ldw	r3,-8(fp)
    2c34:	18bf9216 	blt	r3,r2,2a80 <__alt_mem_mcu_subsystem_ram_0+0x77fe2a80>
		}
	}

	for(i = 0; i < AD9523_NUM_CHAN; i++) {
    2c38:	e03ffe15 	stw	zero,-8(fp)
    2c3c:	00001206 	br	2c88 <ad9523_setup+0xb4c>
		if(!(active_mask & (1 << i))) {
    2c40:	00c00044 	movi	r3,1
    2c44:	e0bffe17 	ldw	r2,-8(fp)
    2c48:	1884983a 	sll	r2,r3,r2
    2c4c:	1007883a 	mov	r3,r2
    2c50:	e0bfff17 	ldw	r2,-4(fp)
    2c54:	1884703a 	and	r2,r3,r2
    2c58:	1000081e 	bne	r2,zero,2c7c <ad9523_setup+0xb40>
			ad9523_spi_write(dev,
					 AD9523_CHANNEL_CLOCK_DIST(i),
    2c5c:	e0bffe17 	ldw	r2,-8(fp)
    2c60:	108000e4 	muli	r2,r2,3
    2c64:	10806484 	addi	r2,r2,402
    2c68:	108000f4 	orhi	r2,r2,3
			ad9523_spi_write(dev,
    2c6c:	01800804 	movi	r6,32
    2c70:	100b883a 	mov	r5,r2
    2c74:	e13ffd17 	ldw	r4,-12(fp)
    2c78:	00017f80 	call	17f8 <ad9523_spi_write>
	for(i = 0; i < AD9523_NUM_CHAN; i++) {
    2c7c:	e0bffe17 	ldw	r2,-8(fp)
    2c80:	10800044 	addi	r2,r2,1
    2c84:	e0bffe15 	stw	r2,-8(fp)
    2c88:	e0bffe17 	ldw	r2,-8(fp)
    2c8c:	10800390 	cmplti	r2,r2,14
    2c90:	103feb1e 	bne	r2,zero,2c40 <__alt_mem_mcu_subsystem_ram_0+0x77fe2c40>
					 AD9523_CLK_DIST_DRIVER_MODE(TRISTATE) |
					 AD9523_CLK_DIST_PWR_DOWN_EN);
		}
	}

	ret = ad9523_spi_write(dev,
    2c94:	000d883a 	mov	r6,zero
    2c98:	01400074 	movhi	r5,1
    2c9c:	29408cc4 	addi	r5,r5,563
    2ca0:	e13ffd17 	ldw	r4,-12(fp)
    2ca4:	00017f80 	call	17f8 <ad9523_spi_write>
    2ca8:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_POWER_DOWN_CTRL,
			       0);
	if (ret < 0)
    2cac:	e0bffc17 	ldw	r2,-16(fp)
    2cb0:	1000020e 	bge	r2,zero,2cbc <ad9523_setup+0xb80>
		return ret;
    2cb4:	e0bffc17 	ldw	r2,-16(fp)
    2cb8:	00002806 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
    2cbc:	0180c084 	movi	r6,770
    2cc0:	014000f4 	movhi	r5,3
    2cc4:	29408c84 	addi	r5,r5,562
    2cc8:	e13ffd17 	ldw	r4,-12(fp)
    2ccc:	00017f80 	call	17f8 <ad9523_spi_write>
    2cd0:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_STATUS_SIGNALS,
			       AD9523_STATUS_MONITOR_01_PLL12_LOCKED);
	if (ret < 0)
    2cd4:	e0bffc17 	ldw	r2,-16(fp)
    2cd8:	1000020e 	bge	r2,zero,2ce4 <ad9523_setup+0xba8>
		return ret;
    2cdc:	e0bffc17 	ldw	r2,-16(fp)
    2ce0:	00001e06 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_io_update(dev);
    2ce4:	e13ffd17 	ldw	r4,-12(fp)
    2ce8:	00018cc0 	call	18cc <ad9523_io_update>
    2cec:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    2cf0:	e0bffc17 	ldw	r2,-16(fp)
    2cf4:	1000020e 	bge	r2,zero,2d00 <ad9523_setup+0xbc4>
		return ret;
    2cf8:	e0bffc17 	ldw	r2,-16(fp)
    2cfc:	00001706 	br	2d5c <ad9523_setup+0xc20>

	ret = ad9523_sync(dev);
    2d00:	e13ffd17 	ldw	r4,-12(fp)
    2d04:	0001d880 	call	1d88 <ad9523_sync>
    2d08:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    2d0c:	e0bffc17 	ldw	r2,-16(fp)
    2d10:	1000020e 	bge	r2,zero,2d1c <ad9523_setup+0xbe0>
		return ret;
    2d14:	e0bffc17 	ldw	r2,-16(fp)
    2d18:	00001006 	br	2d5c <ad9523_setup+0xc20>

	ad9523_spi_write(dev,
    2d1c:	000d883a 	mov	r6,zero
    2d20:	01400074 	movhi	r5,1
    2d24:	29400104 	addi	r5,r5,4
    2d28:	e13ffd17 	ldw	r4,-12(fp)
    2d2c:	00017f80 	call	17f8 <ad9523_spi_write>
			 AD9523_READBACK_CTRL,
			 0x0);
	ad9523_io_update(dev);
    2d30:	e13ffd17 	ldw	r4,-12(fp)
    2d34:	00018cc0 	call	18cc <ad9523_io_update>
	ad9523_calibrate(dev);
    2d38:	e13ffd17 	ldw	r4,-12(fp)
    2d3c:	0001b580 	call	1b58 <ad9523_calibrate>
	ad9523_sync(dev);
    2d40:	e13ffd17 	ldw	r4,-12(fp)
    2d44:	0001d880 	call	1d88 <ad9523_sync>

	*device = dev;
    2d48:	e0bff817 	ldw	r2,-32(fp)
    2d4c:	e0fffd17 	ldw	r3,-12(fp)
    2d50:	10c00015 	stw	r3,0(r2)

	return(ad9523_status(dev));
    2d54:	e13ffd17 	ldw	r4,-12(fp)
    2d58:	0001c340 	call	1c34 <ad9523_status>
}
    2d5c:	e037883a 	mov	sp,fp
    2d60:	dfc00117 	ldw	ra,4(sp)
    2d64:	df000017 	ldw	fp,0(sp)
    2d68:	dec00204 	addi	sp,sp,8
    2d6c:	f800283a 	ret

00002d70 <ad9523_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9523_remove(struct ad9523_dev *dev)
{
    2d70:	defffc04 	addi	sp,sp,-16
    2d74:	dfc00315 	stw	ra,12(sp)
    2d78:	df000215 	stw	fp,8(sp)
    2d7c:	df000204 	addi	fp,sp,8
    2d80:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    2d84:	e0bffe17 	ldw	r2,-8(fp)
    2d88:	10800017 	ldw	r2,0(r2)
    2d8c:	1009883a 	mov	r4,r2
    2d90:	0007d0c0 	call	7d0c <spi_remove>
    2d94:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    2d98:	e13ffe17 	ldw	r4,-8(fp)
    2d9c:	000fde40 	call	fde4 <free>

	return ret;
    2da0:	e0bfff17 	ldw	r2,-4(fp)
}
    2da4:	e037883a 	mov	sp,fp
    2da8:	dfc00117 	ldw	ra,4(sp)
    2dac:	df000017 	ldw	fp,0(sp)
    2db0:	dec00204 	addi	sp,sp,8
    2db4:	f800283a 	ret

00002db8 <ad9680_spi_read>:
 * @brief ad9680_spi_read
 *******************************************************************************/
int32_t ad9680_spi_read(struct ad9680_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
    2db8:	defff904 	addi	sp,sp,-28
    2dbc:	dfc00615 	stw	ra,24(sp)
    2dc0:	df000515 	stw	fp,20(sp)
    2dc4:	df000504 	addi	fp,sp,20
    2dc8:	e13ffd15 	stw	r4,-12(fp)
    2dcc:	2805883a 	mov	r2,r5
    2dd0:	e1bffb15 	stw	r6,-20(fp)
    2dd4:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
    2dd8:	e0bffc0b 	ldhu	r2,-16(fp)
    2ddc:	1004d23a 	srli	r2,r2,8
    2de0:	1007883a 	mov	r3,r2
    2de4:	00bfe004 	movi	r2,-128
    2de8:	1884b03a 	or	r2,r3,r2
    2dec:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    2df0:	e0bffc0b 	ldhu	r2,-16(fp)
    2df4:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
    2df8:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    2dfc:	e0bffd17 	ldw	r2,-12(fp)
    2e00:	10800017 	ldw	r2,0(r2)
    2e04:	e0fffe44 	addi	r3,fp,-7
    2e08:	018000c4 	movi	r6,3
    2e0c:	180b883a 	mov	r5,r3
    2e10:	1009883a 	mov	r4,r2
    2e14:	0007d400 	call	7d40 <spi_write_and_read>
    2e18:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
    2e1c:	e0fffec3 	ldbu	r3,-5(fp)
    2e20:	e0bffb17 	ldw	r2,-20(fp)
    2e24:	10c00005 	stb	r3,0(r2)

	return ret;
    2e28:	e0bfff17 	ldw	r2,-4(fp)
}
    2e2c:	e037883a 	mov	sp,fp
    2e30:	dfc00117 	ldw	ra,4(sp)
    2e34:	df000017 	ldw	fp,0(sp)
    2e38:	dec00204 	addi	sp,sp,8
    2e3c:	f800283a 	ret

00002e40 <ad9680_spi_write>:
 * @brief ad9680_spi_write
 *******************************************************************************/
int32_t ad9680_spi_write(struct ad9680_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
    2e40:	defff904 	addi	sp,sp,-28
    2e44:	dfc00615 	stw	ra,24(sp)
    2e48:	df000515 	stw	fp,20(sp)
    2e4c:	df000504 	addi	fp,sp,20
    2e50:	e13ffd15 	stw	r4,-12(fp)
    2e54:	2805883a 	mov	r2,r5
    2e58:	3007883a 	mov	r3,r6
    2e5c:	e0bffc0d 	sth	r2,-16(fp)
    2e60:	1805883a 	mov	r2,r3
    2e64:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
    2e68:	e0bffc0b 	ldhu	r2,-16(fp)
    2e6c:	1004d23a 	srli	r2,r2,8
    2e70:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
    2e74:	e0bffc0b 	ldhu	r2,-16(fp)
    2e78:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
    2e7c:	e0bffb03 	ldbu	r2,-20(fp)
    2e80:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
    2e84:	e0bffd17 	ldw	r2,-12(fp)
    2e88:	10800017 	ldw	r2,0(r2)
    2e8c:	e0fffe44 	addi	r3,fp,-7
    2e90:	018000c4 	movi	r6,3
    2e94:	180b883a 	mov	r5,r3
    2e98:	1009883a 	mov	r4,r2
    2e9c:	0007d400 	call	7d40 <spi_write_and_read>
    2ea0:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
    2ea4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ea8:	e037883a 	mov	sp,fp
    2eac:	dfc00117 	ldw	ra,4(sp)
    2eb0:	df000017 	ldw	fp,0(sp)
    2eb4:	dec00204 	addi	sp,sp,8
    2eb8:	f800283a 	ret

00002ebc <ad9680_test>:
/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_test(struct ad9680_dev *dev,
		    uint32_t test_mode)
{
    2ebc:	defffc04 	addi	sp,sp,-16
    2ec0:	dfc00315 	stw	ra,12(sp)
    2ec4:	df000215 	stw	fp,8(sp)
    2ec8:	df000204 	addi	fp,sp,8
    2ecc:	e13fff15 	stw	r4,-4(fp)
    2ed0:	e17ffe15 	stw	r5,-8(fp)
	ad9680_spi_write(dev,
    2ed4:	e0bffe17 	ldw	r2,-8(fp)
    2ed8:	10803fcc 	andi	r2,r2,255
    2edc:	100d883a 	mov	r6,r2
    2ee0:	01415404 	movi	r5,1360
    2ee4:	e13fff17 	ldw	r4,-4(fp)
    2ee8:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_ADC_TEST_MODE,
			 test_mode);
	if (test_mode == AD9680_TEST_OFF)
    2eec:	e0bffe17 	ldw	r2,-8(fp)
    2ef0:	1000051e 	bne	r2,zero,2f08 <ad9680_test+0x4c>
		ad9680_spi_write(dev,
    2ef4:	01800044 	movi	r6,1
    2ef8:	01415844 	movi	r5,1377
    2efc:	e13fff17 	ldw	r4,-4(fp)
    2f00:	0002e400 	call	2e40 <ad9680_spi_write>
    2f04:	00000406 	br	2f18 <ad9680_test+0x5c>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_2S_COMPLEMENT);
	else
		ad9680_spi_write(dev,
    2f08:	000d883a 	mov	r6,zero
    2f0c:	01415844 	movi	r5,1377
    2f10:	e13fff17 	ldw	r4,-4(fp)
    2f14:	0002e400 	call	2e40 <ad9680_spi_write>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_OFFSET_BINARY);
	return(0);
    2f18:	0005883a 	mov	r2,zero
}
    2f1c:	e037883a 	mov	sp,fp
    2f20:	dfc00117 	ldw	ra,4(sp)
    2f24:	df000017 	ldw	fp,0(sp)
    2f28:	dec00204 	addi	sp,sp,8
    2f2c:	f800283a 	ret

00002f30 <ad9680_setup>:
/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_setup(struct ad9680_dev **device,
		     const struct ad9680_init_param *init_param)
{
    2f30:	defff904 	addi	sp,sp,-28
    2f34:	dfc00615 	stw	ra,24(sp)
    2f38:	df000515 	stw	fp,20(sp)
    2f3c:	df000504 	addi	fp,sp,20
    2f40:	e13ffc15 	stw	r4,-16(fp)
    2f44:	e17ffb15 	stw	r5,-20(fp)
	uint8_t chip_id;
	uint8_t pll_stat;
	int32_t ret;
	struct ad9680_dev *dev;

	ret = 0;
    2f48:	e03fff15 	stw	zero,-4(fp)

	dev = (struct ad9680_dev *)malloc(sizeof(*dev));
    2f4c:	01000104 	movi	r4,4
    2f50:	000fdd40 	call	fdd4 <malloc>
    2f54:	e0bffe15 	stw	r2,-8(fp)
	if (!dev)
    2f58:	e0bffe17 	ldw	r2,-8(fp)
    2f5c:	1000021e 	bne	r2,zero,2f68 <ad9680_setup+0x38>
		return -1;
    2f60:	00bfffc4 	movi	r2,-1
    2f64:	00005a06 	br	30d0 <ad9680_setup+0x1a0>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
    2f68:	e0bffe17 	ldw	r2,-8(fp)
    2f6c:	e0fffb17 	ldw	r3,-20(fp)
    2f70:	180b883a 	mov	r5,r3
    2f74:	1009883a 	mov	r4,r2
    2f78:	0007c480 	call	7c48 <spi_init>
    2f7c:	e0bfff15 	stw	r2,-4(fp)

	ad9680_spi_read(dev,
    2f80:	e0bffdc4 	addi	r2,fp,-9
    2f84:	100d883a 	mov	r6,r2
    2f88:	01400104 	movi	r5,4
    2f8c:	e13ffe17 	ldw	r4,-8(fp)
    2f90:	0002db80 	call	2db8 <ad9680_spi_read>
			AD9680_REG_CHIP_ID_LOW,
			&chip_id);
	if(chip_id != AD9680_CHIP_ID) {
    2f94:	e0bffdc3 	ldbu	r2,-9(fp)
    2f98:	10803fcc 	andi	r2,r2,255
    2f9c:	10803160 	cmpeqi	r2,r2,197
    2fa0:	1000081e 	bne	r2,zero,2fc4 <ad9680_setup+0x94>
		printf("AD9680: Invalid CHIP ID (0x%x).\n", chip_id);
    2fa4:	e0bffdc3 	ldbu	r2,-9(fp)
    2fa8:	10803fcc 	andi	r2,r2,255
    2fac:	100b883a 	mov	r5,r2
    2fb0:	010000b4 	movhi	r4,2
    2fb4:	2114b804 	addi	r4,r4,21216
    2fb8:	0010ec40 	call	10ec4 <printf>
		return -1;
    2fbc:	00bfffc4 	movi	r2,-1
    2fc0:	00004306 	br	30d0 <ad9680_setup+0x1a0>
	}

	ad9680_spi_write(dev,
    2fc4:	01802044 	movi	r6,129
    2fc8:	000b883a 	mov	r5,zero
    2fcc:	e13ffe17 	ldw	r4,-8(fp)
    2fd0:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_INTERFACE_CONF_A,
			 0x81);	// RESET
	mdelay(250);
    2fd4:	01000134 	movhi	r4,4
    2fd8:	21342404 	addi	r4,r4,-12144
    2fdc:	00206540 	call	20654 <usleep>

	ad9680_spi_write(dev,
    2fe0:	01800544 	movi	r6,21
    2fe4:	01415c44 	movi	r5,1393
    2fe8:	e13ffe17 	ldw	r4,-8(fp)
    2fec:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_LINK_CONTROL,
			 0x15);	// disable link, ilas enable
	ad9680_spi_write(dev,
    2ff0:	018007c4 	movi	r6,31
    2ff4:	01416344 	movi	r5,1421
    2ff8:	e13ffe17 	ldw	r4,-8(fp)
    2ffc:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_MF_CTRL,
			 0x1f);	// mf-frame-count
	ad9680_spi_write(dev,
    3000:	01800b44 	movi	r6,45
    3004:	014163c4 	movi	r5,1423
    3008:	e13ffe17 	ldw	r4,-8(fp)
    300c:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_CSN_CONFIG,
			 0x2d);	// 14-bit
	ad9680_spi_write(dev,
    3010:	01800bc4 	movi	r6,47
    3014:	01416404 	movi	r5,1424
    3018:	e13ffe17 	ldw	r4,-8(fp)
    301c:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_SUBCLASS_CONFIG,
			 0x2f);	// subclass-1, N'=16
	ad9680_spi_write(dev,
    3020:	01802204 	movi	r6,136
    3024:	01415c04 	movi	r5,1392
    3028:	e13ffe17 	ldw	r4,-8(fp)
    302c:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_QUICK_CONFIG,
			 0x88);	// m=2, l=4, f= 1
	if (init_param->lane_rate_kbps < 6250000)
    3030:	e0bffb17 	ldw	r2,-20(fp)
    3034:	10c00417 	ldw	r3,16(r2)
    3038:	008017f4 	movhi	r2,95
    303c:	109783c4 	addi	r2,r2,24079
    3040:	10c00536 	bltu	r2,r3,3058 <ad9680_setup+0x128>
		ad9680_spi_write(dev,
    3044:	01800404 	movi	r6,16
    3048:	01415b84 	movi	r5,1390
    304c:	e13ffe17 	ldw	r4,-8(fp)
    3050:	0002e400 	call	2e40 <ad9680_spi_write>
    3054:	00000406 	br	3068 <ad9680_setup+0x138>
				 AD9680_REG_JESD204B_LANE_RATE_CTRL,
				 0x10);	// low line rate mode must be enabled
	else
		ad9680_spi_write(dev,
    3058:	000d883a 	mov	r6,zero
    305c:	01415b84 	movi	r5,1390
    3060:	e13ffe17 	ldw	r4,-8(fp)
    3064:	0002e400 	call	2e40 <ad9680_spi_write>
				 AD9680_REG_JESD204B_LANE_RATE_CTRL,
				 0x00);	// low line rate mode must be disabled
	ad9680_spi_write(dev,
    3068:	01800504 	movi	r6,20
    306c:	01415c44 	movi	r5,1393
    3070:	e13ffe17 	ldw	r4,-8(fp)
    3074:	0002e400 	call	2e40 <ad9680_spi_write>
			 AD9680_REG_LINK_CONTROL,
			 0x14);	// link enable
	mdelay(250);
    3078:	01000134 	movhi	r4,4
    307c:	21342404 	addi	r4,r4,-12144
    3080:	00206540 	call	20654 <usleep>

	ad9680_spi_read(dev,
    3084:	e0bffd84 	addi	r2,fp,-10
    3088:	100d883a 	mov	r6,r2
    308c:	01415bc4 	movi	r5,1391
    3090:	e13ffe17 	ldw	r4,-8(fp)
    3094:	0002db80 	call	2db8 <ad9680_spi_read>
			AD9680_REG_JESD204B_PLL_LOCK_STATUS,
			&pll_stat);
	if ((pll_stat & 0x80) != 0x80) {
    3098:	e0bffd83 	ldbu	r2,-10(fp)
    309c:	10803fcc 	andi	r2,r2,255
    30a0:	1080201c 	xori	r2,r2,128
    30a4:	10bfe004 	addi	r2,r2,-128
    30a8:	10000516 	blt	r2,zero,30c0 <ad9680_setup+0x190>
		printf("AD9680: PLL is NOT locked!\n");
    30ac:	010000b4 	movhi	r4,2
    30b0:	2114c104 	addi	r4,r4,21252
    30b4:	0010fe80 	call	10fe8 <puts>
		ret = -1;
    30b8:	00bfffc4 	movi	r2,-1
    30bc:	e0bfff15 	stw	r2,-4(fp)
	}

	*device = dev;
    30c0:	e0bffc17 	ldw	r2,-16(fp)
    30c4:	e0fffe17 	ldw	r3,-8(fp)
    30c8:	10c00015 	stw	r3,0(r2)

	return ret;
    30cc:	e0bfff17 	ldw	r2,-4(fp)
}
    30d0:	e037883a 	mov	sp,fp
    30d4:	dfc00117 	ldw	ra,4(sp)
    30d8:	df000017 	ldw	fp,0(sp)
    30dc:	dec00204 	addi	sp,sp,8
    30e0:	f800283a 	ret

000030e4 <ad9680_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9680_remove(struct ad9680_dev *dev)
{
    30e4:	defffc04 	addi	sp,sp,-16
    30e8:	dfc00315 	stw	ra,12(sp)
    30ec:	df000215 	stw	fp,8(sp)
    30f0:	df000204 	addi	fp,sp,8
    30f4:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
    30f8:	e0bffe17 	ldw	r2,-8(fp)
    30fc:	10800017 	ldw	r2,0(r2)
    3100:	1009883a 	mov	r4,r2
    3104:	0007d0c0 	call	7d0c <spi_remove>
    3108:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
    310c:	e13ffe17 	ldw	r4,-8(fp)
    3110:	000fde40 	call	fde4 <free>

	return ret;
    3114:	e0bfff17 	ldw	r2,-4(fp)
}
    3118:	e037883a 	mov	sp,fp
    311c:	dfc00117 	ldw	ra,4(sp)
    3120:	df000017 	ldw	fp,0(sp)
    3124:	dec00204 	addi	sp,sp,8
    3128:	f800283a 	ret

0000312c <adc_read>:
 * @brief adc_read
 *******************************************************************************/
int32_t adc_read(adc_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    312c:	defffb04 	addi	sp,sp,-20
    3130:	df000415 	stw	fp,16(sp)
    3134:	df000404 	addi	fp,sp,16
    3138:	e13ffe15 	stw	r4,-8(fp)
    313c:	e17fff15 	stw	r5,-4(fp)
    3140:	e1bffd15 	stw	r6,-12(fp)
    3144:	e1fffc15 	stw	r7,-16(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
    3148:	e0fffe17 	ldw	r3,-8(fp)
    314c:	e0bffd17 	ldw	r2,-12(fp)
    3150:	1885883a 	add	r2,r3,r2
    3154:	10800037 	ldwio	r2,0(r2)
    3158:	1007883a 	mov	r3,r2
    315c:	e0bffc17 	ldw	r2,-16(fp)
    3160:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
    3164:	e0bffc17 	ldw	r2,-16(fp)
    3168:	10c00017 	ldw	r3,0(r2)
    316c:	00b7abb4 	movhi	r2,57006
    3170:	10b7ab44 	addi	r2,r2,-8531
    3174:	1880021e 	bne	r3,r2,3180 <adc_read+0x54>
		#ifdef DEBUG
			ad_printf("adc_read failed for register: %x", reg_addr);
		#endif
		return -1;
    3178:	00bfffc4 	movi	r2,-1
    317c:	00000106 	br	3184 <adc_read+0x58>
	} else {
		return 0;
    3180:	0005883a 	mov	r2,zero
	}
}
    3184:	e037883a 	mov	sp,fp
    3188:	df000017 	ldw	fp,0(sp)
    318c:	dec00104 	addi	sp,sp,4
    3190:	f800283a 	ret

00003194 <adc_write>:
 * @brief adc_write
 *******************************************************************************/
int32_t adc_write(adc_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    3194:	defffb04 	addi	sp,sp,-20
    3198:	df000415 	stw	fp,16(sp)
    319c:	df000404 	addi	fp,sp,16
    31a0:	e13ffe15 	stw	r4,-8(fp)
    31a4:	e17fff15 	stw	r5,-4(fp)
    31a8:	e1bffd15 	stw	r6,-12(fp)
    31ac:	e1fffc15 	stw	r7,-16(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
    31b0:	e0fffe17 	ldw	r3,-8(fp)
    31b4:	e0bffd17 	ldw	r2,-12(fp)
    31b8:	1885883a 	add	r2,r3,r2
    31bc:	1007883a 	mov	r3,r2
    31c0:	e0bffc17 	ldw	r2,-16(fp)
    31c4:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return adc_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
    31c8:	0005883a 	mov	r2,zero
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00104 	addi	sp,sp,4
    31d8:	f800283a 	ret

000031dc <adc_setup>:

/***************************************************************************//**
 * @brief adc_setup
 *******************************************************************************/
int32_t adc_setup(adc_core core)
{
    31dc:	defff904 	addi	sp,sp,-28
    31e0:	dfc00615 	stw	ra,24(sp)
    31e4:	df000515 	stw	fp,20(sp)
    31e8:	df000504 	addi	fp,sp,20
    31ec:	e13ffb15 	stw	r4,-20(fp)
    31f0:	e17ffc15 	stw	r5,-16(fp)
	uint8_t	 index;
	uint32_t reg_data;
	uint32_t adc_clock;

	adc_read(core, ADC_REG_ID, &reg_data);
    31f4:	e0bffe04 	addi	r2,fp,-8
    31f8:	100f883a 	mov	r7,r2
    31fc:	01800104 	movi	r6,4
    3200:	e13ffb17 	ldw	r4,-20(fp)
    3204:	e17ffc17 	ldw	r5,-16(fp)
    3208:	000312c0 	call	312c <adc_read>
	if (reg_data)
    320c:	e0bffe17 	ldw	r2,-8(fp)
    3210:	10000326 	beq	r2,zero,3220 <adc_setup+0x44>
		core.master = 1;
    3214:	00800044 	movi	r2,1
    3218:	e0bffc05 	stb	r2,-16(fp)
    321c:	00000106 	br	3224 <adc_setup+0x48>
	else
		core.master = 0;
    3220:	e03ffc05 	stb	zero,-16(fp)

	adc_write(core, ADC_REG_RSTN, 0);
    3224:	000f883a 	mov	r7,zero
    3228:	01801004 	movi	r6,64
    322c:	e13ffb17 	ldw	r4,-20(fp)
    3230:	e17ffc17 	ldw	r5,-16(fp)
    3234:	00031940 	call	3194 <adc_write>
	adc_write(core, ADC_REG_RSTN, ADC_MMCM_RSTN | ADC_RSTN);
    3238:	01c000c4 	movi	r7,3
    323c:	01801004 	movi	r6,64
    3240:	e13ffb17 	ldw	r4,-20(fp)
    3244:	e17ffc17 	ldw	r5,-16(fp)
    3248:	00031940 	call	3194 <adc_write>

	for(index = 0; index < core.no_of_channels; index++) {
    324c:	e03fffc5 	stb	zero,-1(fp)
    3250:	00000b06 	br	3280 <adc_setup+0xa4>
		adc_write(core, ADC_REG_CHAN_CNTRL(index), ADC_FORMAT_SIGNEXT |
    3254:	e0bfffc3 	ldbu	r2,-1(fp)
    3258:	10800404 	addi	r2,r2,16
    325c:	100491ba 	slli	r2,r2,6
    3260:	01c01444 	movi	r7,81
    3264:	100d883a 	mov	r6,r2
    3268:	e13ffb17 	ldw	r4,-20(fp)
    326c:	e17ffc17 	ldw	r5,-16(fp)
    3270:	00031940 	call	3194 <adc_write>
	for(index = 0; index < core.no_of_channels; index++) {
    3274:	e0bfffc3 	ldbu	r2,-1(fp)
    3278:	10800044 	addi	r2,r2,1
    327c:	e0bfffc5 	stb	r2,-1(fp)
    3280:	e0bffc43 	ldbu	r2,-15(fp)
    3284:	e0ffffc3 	ldbu	r3,-1(fp)
    3288:	10803fcc 	andi	r2,r2,255
    328c:	18bff136 	bltu	r3,r2,3254 <__alt_mem_mcu_subsystem_ram_0+0x77fe3254>
							   ADC_FORMAT_ENABLE |
							   ADC_ENABLE);
	}

	mdelay(100);
    3290:	010000b4 	movhi	r4,2
    3294:	2121a804 	addi	r4,r4,-31072
    3298:	00206540 	call	20654 <usleep>

	adc_read(core, ADC_REG_STATUS, &reg_data);
    329c:	e0bffe04 	addi	r2,fp,-8
    32a0:	100f883a 	mov	r7,r2
    32a4:	01801704 	movi	r6,92
    32a8:	e13ffb17 	ldw	r4,-20(fp)
    32ac:	e17ffc17 	ldw	r5,-16(fp)
    32b0:	000312c0 	call	312c <adc_read>
	if(reg_data == 0x0) {
    32b4:	e0bffe17 	ldw	r2,-8(fp)
    32b8:	1000071e 	bne	r2,zero,32d8 <adc_setup+0xfc>
		ad_printf("%s adc core Status errors.\n", __func__);
    32bc:	014000b4 	movhi	r5,2
    32c0:	29551204 	addi	r5,r5,21576
    32c4:	010000b4 	movhi	r4,2
    32c8:	2114c804 	addi	r4,r4,21280
    32cc:	0010ec40 	call	10ec4 <printf>
		return -1;
    32d0:	00bfffc4 	movi	r2,-1
    32d4:	00001d06 	br	334c <adc_setup+0x170>
	}

	adc_read(core, ADC_REG_CLK_FREQ, &adc_clock);
    32d8:	e0bffd04 	addi	r2,fp,-12
    32dc:	100f883a 	mov	r7,r2
    32e0:	01801504 	movi	r6,84
    32e4:	e13ffb17 	ldw	r4,-20(fp)
    32e8:	e17ffc17 	ldw	r5,-16(fp)
    32ec:	000312c0 	call	312c <adc_read>
	adc_read(core, ADC_REG_CLK_RATIO, &reg_data);
    32f0:	e0bffe04 	addi	r2,fp,-8
    32f4:	100f883a 	mov	r7,r2
    32f8:	01801604 	movi	r6,88
    32fc:	e13ffb17 	ldw	r4,-20(fp)
    3300:	e17ffc17 	ldw	r5,-16(fp)
    3304:	000312c0 	call	312c <adc_read>
	adc_clock = (adc_clock * reg_data * 100) + 0x7fff;
    3308:	e0fffd17 	ldw	r3,-12(fp)
    330c:	e0bffe17 	ldw	r2,-8(fp)
    3310:	1885383a 	mul	r2,r3,r2
    3314:	10801924 	muli	r2,r2,100
    3318:	109fffc4 	addi	r2,r2,32767
    331c:	e0bffd15 	stw	r2,-12(fp)
	adc_clock = adc_clock >> 16;
    3320:	e0bffd17 	ldw	r2,-12(fp)
    3324:	1004d43a 	srli	r2,r2,16
    3328:	e0bffd15 	stw	r2,-12(fp)

	ad_printf("%s adc core initialized (%d MHz).\n", __func__, adc_clock);
    332c:	e0bffd17 	ldw	r2,-12(fp)
    3330:	100d883a 	mov	r6,r2
    3334:	014000b4 	movhi	r5,2
    3338:	29551204 	addi	r5,r5,21576
    333c:	010000b4 	movhi	r4,2
    3340:	2114cf04 	addi	r4,r4,21308
    3344:	0010ec40 	call	10ec4 <printf>

	return 0;
    3348:	0005883a 	mov	r2,zero
}
    334c:	e037883a 	mov	sp,fp
    3350:	dfc00117 	ldw	ra,4(sp)
    3354:	df000017 	ldw	fp,0(sp)
    3358:	dec00204 	addi	sp,sp,8
    335c:	f800283a 	ret

00003360 <adc_set_delay>:
 *		and the output mode must be two's complement

 * @return 0.
*******************************************************************************/
uint32_t adc_set_delay(adc_core core, uint32_t no_of_lanes, uint32_t delay)
{
    3360:	defff704 	addi	sp,sp,-36
    3364:	dfc00815 	stw	ra,32(sp)
    3368:	df000715 	stw	fp,28(sp)
    336c:	df000704 	addi	fp,sp,28
    3370:	e13ffb15 	stw	r4,-20(fp)
    3374:	e17ffc15 	stw	r5,-16(fp)
    3378:	e1bffa15 	stw	r6,-24(fp)
    337c:	e1fff915 	stw	r7,-28(fp)
    uint32_t i;
    uint32_t rdata;
    uint32_t pcore_version;

    adc_read(core, 0x0, &pcore_version);
    3380:	e0bffd04 	addi	r2,fp,-12
    3384:	100f883a 	mov	r7,r2
    3388:	000d883a 	mov	r6,zero
    338c:	e13ffb17 	ldw	r4,-20(fp)
    3390:	e17ffc17 	ldw	r5,-16(fp)
    3394:	000312c0 	call	312c <adc_read>
    pcore_version >>= 16;
    3398:	e0bffd17 	ldw	r2,-12(fp)
    339c:	1004d43a 	srli	r2,r2,16
    33a0:	e0bffd15 	stw	r2,-12(fp)
    if (pcore_version < 9) {
    33a4:	e0bffd17 	ldw	r2,-12(fp)
    33a8:	10800268 	cmpgeui	r2,r2,9
    33ac:	10000a1e 	bne	r2,zero,33d8 <adc_set_delay+0x78>
			    ad_printf(" pcore_version is : %d\n\r", pcore_version);
    33b0:	e0bffd17 	ldw	r2,-12(fp)
    33b4:	100b883a 	mov	r5,r2
    33b8:	010000b4 	movhi	r4,2
    33bc:	2114d804 	addi	r4,r4,21344
    33c0:	0010ec40 	call	10ec4 <printf>
			    ad_printf(" DRIVER DOES NOT SUPPORT PCORE VERSIONS OLDER THAN 10 !");
    33c4:	010000b4 	movhi	r4,2
    33c8:	2114df04 	addi	r4,r4,21372
    33cc:	0010ec40 	call	10ec4 <printf>
			    return -1;
    33d0:	00bfffc4 	movi	r2,-1
    33d4:	00002406 	br	3468 <adc_set_delay+0x108>
    } else {
		for (i = 0; i < no_of_lanes; i++) {
    33d8:	e03fff15 	stw	zero,-4(fp)
    33dc:	00001e06 	br	3458 <adc_set_delay+0xf8>
			adc_write(core ,((0x200 + i)*4), delay);
    33e0:	e0bfff17 	ldw	r2,-4(fp)
    33e4:	10808004 	addi	r2,r2,512
    33e8:	100490ba 	slli	r2,r2,2
    33ec:	e1fff917 	ldw	r7,-28(fp)
    33f0:	100d883a 	mov	r6,r2
    33f4:	e13ffb17 	ldw	r4,-20(fp)
    33f8:	e17ffc17 	ldw	r5,-16(fp)
    33fc:	00031940 	call	3194 <adc_write>
			adc_read(core ,((0x200 + i)*4), &rdata);
    3400:	e0bfff17 	ldw	r2,-4(fp)
    3404:	10808004 	addi	r2,r2,512
    3408:	100490ba 	slli	r2,r2,2
    340c:	e0fffe04 	addi	r3,fp,-8
    3410:	180f883a 	mov	r7,r3
    3414:	100d883a 	mov	r6,r2
    3418:	e13ffb17 	ldw	r4,-20(fp)
    341c:	e17ffc17 	ldw	r5,-16(fp)
    3420:	000312c0 	call	312c <adc_read>
			if (rdata != delay) {
    3424:	e0bffe17 	ldw	r2,-8(fp)
    3428:	e0fff917 	ldw	r3,-28(fp)
    342c:	18800726 	beq	r3,r2,344c <adc_set_delay+0xec>
				ad_printf("adc_delay_1: sel(%2d), rcv(%04x), exp(%04x)\n\r", i, rdata, delay);
    3430:	e0bffe17 	ldw	r2,-8(fp)
    3434:	e1fff917 	ldw	r7,-28(fp)
    3438:	100d883a 	mov	r6,r2
    343c:	e17fff17 	ldw	r5,-4(fp)
    3440:	010000b4 	movhi	r4,2
    3444:	2114ed04 	addi	r4,r4,21428
    3448:	0010ec40 	call	10ec4 <printf>
		for (i = 0; i < no_of_lanes; i++) {
    344c:	e0bfff17 	ldw	r2,-4(fp)
    3450:	10800044 	addi	r2,r2,1
    3454:	e0bfff15 	stw	r2,-4(fp)
    3458:	e0ffff17 	ldw	r3,-4(fp)
    345c:	e0bffa17 	ldw	r2,-24(fp)
    3460:	18bfdf36 	bltu	r3,r2,33e0 <__alt_mem_mcu_subsystem_ram_0+0x77fe33e0>
			}
		}
    }

    return 0;
    3464:	0005883a 	mov	r2,zero
}
    3468:	e037883a 	mov	sp,fp
    346c:	dfc00117 	ldw	ra,4(sp)
    3470:	df000017 	ldw	fp,0(sp)
    3474:	dec00204 	addi	sp,sp,8
    3478:	f800283a 	ret

0000347c <adc_delay_calibrate>:
 *
*******************************************************************************/
uint32_t adc_delay_calibrate(adc_core core,
			uint32_t no_of_lanes,
			enum adc_pn_sel sel)
{
    347c:	deffe804 	addi	sp,sp,-96
    3480:	dfc01715 	stw	ra,92(sp)
    3484:	df001615 	stw	fp,88(sp)
    3488:	df001604 	addi	fp,sp,88
    348c:	e13fec15 	stw	r4,-80(fp)
    3490:	e17fed15 	stw	r5,-76(fp)
    3494:	e1bfeb15 	stw	r6,-84(fp)
    3498:	e1ffea15 	stw	r7,-88(fp)
	uint8_t err_field[32] = {0};
    349c:	e03ff515 	stw	zero,-44(fp)
    34a0:	e03ff615 	stw	zero,-40(fp)
    34a4:	e03ff715 	stw	zero,-36(fp)
    34a8:	e03ff815 	stw	zero,-32(fp)
    34ac:	e03ff915 	stw	zero,-28(fp)
    34b0:	e03ffa15 	stw	zero,-24(fp)
    34b4:	e03ffb15 	stw	zero,-20(fp)
    34b8:	e03ffc15 	stw	zero,-16(fp)
	uint16_t valid_range[5] = {0};
    34bc:	e03ff28d 	sth	zero,-54(fp)
    34c0:	e03ff30d 	sth	zero,-52(fp)
    34c4:	e03ff38d 	sth	zero,-50(fp)
    34c8:	e03ff40d 	sth	zero,-48(fp)
    34cc:	e03ff48d 	sth	zero,-46(fp)
	uint16_t invalid_range[5] = {0};
    34d0:	e03ff015 	stw	zero,-64(fp)
    34d4:	e03ff115 	stw	zero,-60(fp)
    34d8:	e03ff20d 	sth	zero,-56(fp)
	uint16_t delay = 0;
    34dc:	e03fff8d 	sth	zero,-2(fp)
	uint16_t start_valid_delay = 32;
    34e0:	00800804 	movi	r2,32
    34e4:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t start_invalid_delay = 32;
    34e8:	00800804 	movi	r2,32
    34ec:	e0bffe8d 	sth	r2,-6(fp)
	uint8_t interval = 0;
    34f0:	e03ffe45 	stb	zero,-7(fp)
	uint8_t max_interval = 0;
    34f4:	e03ffe05 	stb	zero,-8(fp)
	uint8_t max_valid_range = 0;
    34f8:	e03ffdc5 	stb	zero,-9(fp)
	uint8_t cnt_valid[5] = {0};
    34fc:	e03feec5 	stb	zero,-69(fp)
    3500:	e03fef05 	stb	zero,-68(fp)
    3504:	e03fef45 	stb	zero,-67(fp)
    3508:	e03fef85 	stb	zero,-66(fp)
    350c:	e03fefc5 	stb	zero,-65(fp)
	uint8_t cnt_invalid = 0;
    3510:	e03ffd85 	stb	zero,-10(fp)
	uint8_t val = 0;
    3514:	e03ffd45 	stb	zero,-11(fp)
	uint8_t max_val = 32;
    3518:	00800804 	movi	r2,32
    351c:	e0bffd05 	stb	r2,-12(fp)

	for (delay = 0; delay < 32; delay++) {
    3520:	e03fff8d 	sth	zero,-2(fp)
    3524:	00001f06 	br	35a4 <adc_delay_calibrate+0x128>
		adc_set_delay(core, no_of_lanes, delay);
    3528:	e0bfff8b 	ldhu	r2,-2(fp)
    352c:	100f883a 	mov	r7,r2
    3530:	e1bfeb17 	ldw	r6,-84(fp)
    3534:	e13fec17 	ldw	r4,-80(fp)
    3538:	e17fed17 	ldw	r5,-76(fp)
    353c:	00033600 	call	3360 <adc_set_delay>
		mdelay(20);
    3540:	01138804 	movi	r4,20000
    3544:	00206540 	call	20654 <usleep>
		if (adc_pn_mon(core, sel) == 0) {
    3548:	e1bfea17 	ldw	r6,-88(fp)
    354c:	e13fec17 	ldw	r4,-80(fp)
    3550:	e17fed17 	ldw	r5,-76(fp)
    3554:	00038b00 	call	38b0 <adc_pn_mon>
    3558:	10000b1e 	bne	r2,zero,3588 <adc_delay_calibrate+0x10c>
			err_field[delay] = 0;
    355c:	e0bfff8b 	ldhu	r2,-2(fp)
    3560:	e085883a 	add	r2,fp,r2
    3564:	103ff505 	stb	zero,-44(r2)
			start_valid_delay = start_valid_delay == 32 ? delay : start_valid_delay;
    3568:	e0bfff0b 	ldhu	r2,-4(fp)
    356c:	10800818 	cmpnei	r2,r2,32
    3570:	1000021e 	bne	r2,zero,357c <adc_delay_calibrate+0x100>
    3574:	e0bfff8b 	ldhu	r2,-2(fp)
    3578:	00000106 	br	3580 <adc_delay_calibrate+0x104>
    357c:	e0bfff0b 	ldhu	r2,-4(fp)
    3580:	e0bfff0d 	sth	r2,-4(fp)
    3584:	00000406 	br	3598 <adc_delay_calibrate+0x11c>
		} else {
			err_field[delay] = 1;
    3588:	e0bfff8b 	ldhu	r2,-2(fp)
    358c:	e085883a 	add	r2,fp,r2
    3590:	00c00044 	movi	r3,1
    3594:	10fff505 	stb	r3,-44(r2)
	for (delay = 0; delay < 32; delay++) {
    3598:	e0bfff8b 	ldhu	r2,-2(fp)
    359c:	10800044 	addi	r2,r2,1
    35a0:	e0bfff8d 	sth	r2,-2(fp)
    35a4:	e0bfff8b 	ldhu	r2,-2(fp)
    35a8:	10800830 	cmpltui	r2,r2,32
    35ac:	103fde1e 	bne	r2,zero,3528 <__alt_mem_mcu_subsystem_ram_0+0x77fe3528>
		}
	}
	if (start_valid_delay > 31) {
    35b0:	e0bfff0b 	ldhu	r2,-4(fp)
    35b4:	10800830 	cmpltui	r2,r2,32
    35b8:	10000c1e 	bne	r2,zero,35ec <adc_delay_calibrate+0x170>
		ad_printf("%s FAILED.\n", __func__);
    35bc:	014000b4 	movhi	r5,2
    35c0:	29551504 	addi	r5,r5,21588
    35c4:	010000b4 	movhi	r4,2
    35c8:	2114f904 	addi	r4,r4,21476
    35cc:	0010ec40 	call	10ec4 <printf>
		adc_set_delay(core, no_of_lanes, 0);
    35d0:	000f883a 	mov	r7,zero
    35d4:	e1bfeb17 	ldw	r6,-84(fp)
    35d8:	e13fec17 	ldw	r4,-80(fp)
    35dc:	e17fed17 	ldw	r5,-76(fp)
    35e0:	00033600 	call	3360 <adc_set_delay>
		return(1);
    35e4:	00800044 	movi	r2,1
    35e8:	00007e06 	br	37e4 <adc_delay_calibrate+0x368>
	}

	start_valid_delay = 32;
    35ec:	00800804 	movi	r2,32
    35f0:	e0bfff0d 	sth	r2,-4(fp)
	start_invalid_delay = 32;
    35f4:	00800804 	movi	r2,32
    35f8:	e0bffe8d 	sth	r2,-6(fp)
	for (val = 0; val < max_val; val++) {
    35fc:	e03ffd45 	stb	zero,-11(fp)
    3600:	00004606 	br	371c <adc_delay_calibrate+0x2a0>
		if (err_field[val] == 0) {
    3604:	e0bffd43 	ldbu	r2,-11(fp)
    3608:	e085883a 	add	r2,fp,r2
    360c:	10bff503 	ldbu	r2,-44(r2)
    3610:	10803fcc 	andi	r2,r2,255
    3614:	1000151e 	bne	r2,zero,366c <adc_delay_calibrate+0x1f0>
			if (start_valid_delay == 32) {
    3618:	e0bfff0b 	ldhu	r2,-4(fp)
    361c:	10800818 	cmpnei	r2,r2,32
    3620:	1000021e 	bne	r2,zero,362c <adc_delay_calibrate+0x1b0>
				start_valid_delay = val;
    3624:	e0bffd43 	ldbu	r2,-11(fp)
    3628:	e0bfff0d 	sth	r2,-4(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
    362c:	e0bfff0b 	ldhu	r2,-4(fp)
    3630:	10800820 	cmpeqi	r2,r2,32
    3634:	1000071e 	bne	r2,zero,3654 <adc_delay_calibrate+0x1d8>
    3638:	e0bffe8b 	ldhu	r2,-6(fp)
    363c:	10800820 	cmpeqi	r2,r2,32
    3640:	1000041e 	bne	r2,zero,3654 <adc_delay_calibrate+0x1d8>
				start_valid_delay = 32;
    3644:	00800804 	movi	r2,32
    3648:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
    364c:	00800804 	movi	r2,32
    3650:	e0bffe8d 	sth	r2,-6(fp)
			}
			cnt_valid[interval]++;
    3654:	e0bffe43 	ldbu	r2,-7(fp)
    3658:	e087883a 	add	r3,fp,r2
    365c:	18ffeec3 	ldbu	r3,-69(r3)
    3660:	18c00044 	addi	r3,r3,1
    3664:	e085883a 	add	r2,fp,r2
    3668:	10ffeec5 	stb	r3,-69(r2)
		}
		if((err_field[val] == 1) || (val == max_val - 1)) {
    366c:	e0bffd43 	ldbu	r2,-11(fp)
    3670:	e085883a 	add	r2,fp,r2
    3674:	10bff503 	ldbu	r2,-44(r2)
    3678:	10803fcc 	andi	r2,r2,255
    367c:	10800060 	cmpeqi	r2,r2,1
    3680:	1000041e 	bne	r2,zero,3694 <adc_delay_calibrate+0x218>
    3684:	e0fffd43 	ldbu	r3,-11(fp)
    3688:	e0bffd03 	ldbu	r2,-12(fp)
    368c:	10bfffc4 	addi	r2,r2,-1
    3690:	18801f1e 	bne	r3,r2,3710 <adc_delay_calibrate+0x294>
			if (start_invalid_delay == 32) {
    3694:	e0bffe8b 	ldhu	r2,-6(fp)
    3698:	10800818 	cmpnei	r2,r2,32
    369c:	1000021e 	bne	r2,zero,36a8 <adc_delay_calibrate+0x22c>
				start_invalid_delay = val;
    36a0:	e0bffd43 	ldbu	r2,-11(fp)
    36a4:	e0bffe8d 	sth	r2,-6(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
    36a8:	e0bfff0b 	ldhu	r2,-4(fp)
    36ac:	10800820 	cmpeqi	r2,r2,32
    36b0:	1000141e 	bne	r2,zero,3704 <adc_delay_calibrate+0x288>
    36b4:	e0bffe8b 	ldhu	r2,-6(fp)
    36b8:	10800820 	cmpeqi	r2,r2,32
    36bc:	1000111e 	bne	r2,zero,3704 <adc_delay_calibrate+0x288>
				valid_range[interval] = start_valid_delay;
    36c0:	e0bffe43 	ldbu	r2,-7(fp)
    36c4:	1085883a 	add	r2,r2,r2
    36c8:	e085883a 	add	r2,fp,r2
    36cc:	e0ffff0b 	ldhu	r3,-4(fp)
    36d0:	10fff28d 	sth	r3,-54(r2)
				invalid_range[interval] = start_invalid_delay;
    36d4:	e0bffe43 	ldbu	r2,-7(fp)
    36d8:	1085883a 	add	r2,r2,r2
    36dc:	e085883a 	add	r2,fp,r2
    36e0:	e0fffe8b 	ldhu	r3,-6(fp)
    36e4:	10fff00d 	sth	r3,-64(r2)
				start_valid_delay = 32;
    36e8:	00800804 	movi	r2,32
    36ec:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
    36f0:	00800804 	movi	r2,32
    36f4:	e0bffe8d 	sth	r2,-6(fp)
				interval++;
    36f8:	e0bffe43 	ldbu	r2,-7(fp)
    36fc:	10800044 	addi	r2,r2,1
    3700:	e0bffe45 	stb	r2,-7(fp)
			}
			cnt_invalid++;
    3704:	e0bffd83 	ldbu	r2,-10(fp)
    3708:	10800044 	addi	r2,r2,1
    370c:	e0bffd85 	stb	r2,-10(fp)
	for (val = 0; val < max_val; val++) {
    3710:	e0bffd43 	ldbu	r2,-11(fp)
    3714:	10800044 	addi	r2,r2,1
    3718:	e0bffd45 	stb	r2,-11(fp)
    371c:	e0fffd43 	ldbu	r3,-11(fp)
    3720:	e0bffd03 	ldbu	r2,-12(fp)
    3724:	18bfb736 	bltu	r3,r2,3604 <__alt_mem_mcu_subsystem_ram_0+0x77fe3604>
		}
	}

	for (val = 0; val < 5; val++) {
    3728:	e03ffd45 	stb	zero,-11(fp)
    372c:	00000f06 	br	376c <adc_delay_calibrate+0x2f0>
		if (cnt_valid[val] > max_valid_range) {
    3730:	e0bffd43 	ldbu	r2,-11(fp)
    3734:	e085883a 	add	r2,fp,r2
    3738:	10bfeec3 	ldbu	r2,-69(r2)
    373c:	e0fffdc3 	ldbu	r3,-9(fp)
    3740:	10803fcc 	andi	r2,r2,255
    3744:	1880062e 	bgeu	r3,r2,3760 <adc_delay_calibrate+0x2e4>
			max_valid_range = cnt_valid[val];
    3748:	e0bffd43 	ldbu	r2,-11(fp)
    374c:	e085883a 	add	r2,fp,r2
    3750:	10bfeec3 	ldbu	r2,-69(r2)
    3754:	e0bffdc5 	stb	r2,-9(fp)
			max_interval = val;
    3758:	e0bffd43 	ldbu	r2,-11(fp)
    375c:	e0bffe05 	stb	r2,-8(fp)
	for (val = 0; val < 5; val++) {
    3760:	e0bffd43 	ldbu	r2,-11(fp)
    3764:	10800044 	addi	r2,r2,1
    3768:	e0bffd45 	stb	r2,-11(fp)
    376c:	e0bffd43 	ldbu	r2,-11(fp)
    3770:	10800170 	cmpltui	r2,r2,5
    3774:	103fee1e 	bne	r2,zero,3730 <__alt_mem_mcu_subsystem_ram_0+0x77fe3730>
		}
	}

	delay = (valid_range[max_interval] + invalid_range[max_interval] - 1) / 2;
    3778:	e0bffe03 	ldbu	r2,-8(fp)
    377c:	1085883a 	add	r2,r2,r2
    3780:	e085883a 	add	r2,fp,r2
    3784:	10bff28b 	ldhu	r2,-54(r2)
    3788:	10ffffcc 	andi	r3,r2,65535
    378c:	e0bffe03 	ldbu	r2,-8(fp)
    3790:	1085883a 	add	r2,r2,r2
    3794:	e085883a 	add	r2,fp,r2
    3798:	10bff00b 	ldhu	r2,-64(r2)
    379c:	10bfffcc 	andi	r2,r2,65535
    37a0:	1885883a 	add	r2,r3,r2
    37a4:	10ffffc4 	addi	r3,r2,-1
    37a8:	00800084 	movi	r2,2
    37ac:	1885283a 	div	r2,r3,r2
    37b0:	e0bfff8d 	sth	r2,-2(fp)

	ad_printf("adc_delay: setting zero error delay (%d)\n\r", delay);
    37b4:	e0bfff8b 	ldhu	r2,-2(fp)
    37b8:	100b883a 	mov	r5,r2
    37bc:	010000b4 	movhi	r4,2
    37c0:	2114fc04 	addi	r4,r4,21488
    37c4:	0010ec40 	call	10ec4 <printf>
	adc_set_delay(core, no_of_lanes, delay);
    37c8:	e0bfff8b 	ldhu	r2,-2(fp)
    37cc:	100f883a 	mov	r7,r2
    37d0:	e1bfeb17 	ldw	r6,-84(fp)
    37d4:	e13fec17 	ldw	r4,-80(fp)
    37d8:	e17fed17 	ldw	r5,-76(fp)
    37dc:	00033600 	call	3360 <adc_set_delay>
	for (delay = 0; delay < 32; delay++) {
		ad_printf("%d",err_field[delay]);
	}
#endif

    return(0);
    37e0:	0005883a 	mov	r2,zero
}
    37e4:	e037883a 	mov	sp,fp
    37e8:	dfc00117 	ldw	ra,4(sp)
    37ec:	df000017 	ldw	fp,0(sp)
    37f0:	dec00204 	addi	sp,sp,8
    37f4:	f800283a 	ret

000037f8 <adc_set_pnsel>:
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_set_pnsel(adc_core core,
		uint8_t channel,
		enum adc_pn_sel sel)
{
    37f8:	defff904 	addi	sp,sp,-28
    37fc:	dfc00615 	stw	ra,24(sp)
    3800:	df000515 	stw	fp,20(sp)
    3804:	df000504 	addi	fp,sp,20
    3808:	e13ffd15 	stw	r4,-12(fp)
    380c:	e17ffe15 	stw	r5,-8(fp)
    3810:	3005883a 	mov	r2,r6
    3814:	e1fffb15 	stw	r7,-20(fp)
    3818:	e0bffc05 	stb	r2,-16(fp)
	uint32_t reg;

	adc_read(core, ADC_REG_CHAN_CNTRL_3(channel), &reg);
    381c:	e0bffc03 	ldbu	r2,-16(fp)
    3820:	100491ba 	slli	r2,r2,6
    3824:	10810604 	addi	r2,r2,1048
    3828:	1007883a 	mov	r3,r2
    382c:	e0bfff04 	addi	r2,fp,-4
    3830:	100f883a 	mov	r7,r2
    3834:	180d883a 	mov	r6,r3
    3838:	e13ffd17 	ldw	r4,-12(fp)
    383c:	e17ffe17 	ldw	r5,-8(fp)
    3840:	000312c0 	call	312c <adc_read>
	reg &= ~ADC_ADC_PN_SEL(~0);
    3844:	e0ffff17 	ldw	r3,-4(fp)
    3848:	00bffc74 	movhi	r2,65521
    384c:	10bfffc4 	addi	r2,r2,-1
    3850:	1884703a 	and	r2,r3,r2
    3854:	e0bfff15 	stw	r2,-4(fp)
	reg |= ADC_ADC_PN_SEL(sel);
    3858:	e0bffb17 	ldw	r2,-20(fp)
    385c:	1004943a 	slli	r2,r2,16
    3860:	10c003ec 	andhi	r3,r2,15
    3864:	e0bfff17 	ldw	r2,-4(fp)
    3868:	1884b03a 	or	r2,r3,r2
    386c:	e0bfff15 	stw	r2,-4(fp)
	adc_write(core, ADC_REG_CHAN_CNTRL_3(channel), reg);
    3870:	e0bffc03 	ldbu	r2,-16(fp)
    3874:	100491ba 	slli	r2,r2,6
    3878:	10810604 	addi	r2,r2,1048
    387c:	1007883a 	mov	r3,r2
    3880:	e0bfff17 	ldw	r2,-4(fp)
    3884:	100f883a 	mov	r7,r2
    3888:	180d883a 	mov	r6,r3
    388c:	e13ffd17 	ldw	r4,-12(fp)
    3890:	e17ffe17 	ldw	r5,-8(fp)
    3894:	00031940 	call	3194 <adc_write>

	return 0;
    3898:	0005883a 	mov	r2,zero
}
    389c:	e037883a 	mov	sp,fp
    38a0:	dfc00117 	ldw	ra,4(sp)
    38a4:	df000017 	ldw	fp,0(sp)
    38a8:	dec00204 	addi	sp,sp,8
    38ac:	f800283a 	ret

000038b0 <adc_pn_mon>:
 * @brief adc_pn_mon
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_pn_mon(adc_core core,
		enum adc_pn_sel sel)
{
    38b0:	defff804 	addi	sp,sp,-32
    38b4:	dfc00715 	stw	ra,28(sp)
    38b8:	df000615 	stw	fp,24(sp)
    38bc:	df000604 	addi	fp,sp,24
    38c0:	e13ffb15 	stw	r4,-20(fp)
    38c4:	e17ffc15 	stw	r5,-16(fp)
    38c8:	e1bffa15 	stw	r6,-24(fp)
	uint8_t	index;
	uint32_t reg_data;
	int32_t pn_errors = 0;
    38cc:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < core.no_of_channels; index++) {
    38d0:	e03fffc5 	stb	zero,-1(fp)
    38d4:	00002006 	br	3958 <adc_pn_mon+0xa8>
 		adc_read(core, ADC_REG_CHAN_CNTRL(index), &reg_data);
    38d8:	e0bfffc3 	ldbu	r2,-1(fp)
    38dc:	10800404 	addi	r2,r2,16
    38e0:	100491ba 	slli	r2,r2,6
    38e4:	1007883a 	mov	r3,r2
    38e8:	e0bffd04 	addi	r2,fp,-12
    38ec:	100f883a 	mov	r7,r2
    38f0:	180d883a 	mov	r6,r3
    38f4:	e13ffb17 	ldw	r4,-20(fp)
    38f8:	e17ffc17 	ldw	r5,-16(fp)
    38fc:	000312c0 	call	312c <adc_read>
 		reg_data |= ADC_ENABLE;
    3900:	e0bffd17 	ldw	r2,-12(fp)
    3904:	10800054 	ori	r2,r2,1
    3908:	e0bffd15 	stw	r2,-12(fp)
 		adc_write(core, ADC_REG_CHAN_CNTRL(index), reg_data);
    390c:	e0bfffc3 	ldbu	r2,-1(fp)
    3910:	10800404 	addi	r2,r2,16
    3914:	100491ba 	slli	r2,r2,6
    3918:	1007883a 	mov	r3,r2
    391c:	e0bffd17 	ldw	r2,-12(fp)
    3920:	100f883a 	mov	r7,r2
    3924:	180d883a 	mov	r6,r3
    3928:	e13ffb17 	ldw	r4,-20(fp)
    392c:	e17ffc17 	ldw	r5,-16(fp)
    3930:	00031940 	call	3194 <adc_write>
		adc_set_pnsel(core, index, sel);
    3934:	e0bfffc3 	ldbu	r2,-1(fp)
    3938:	e1fffa17 	ldw	r7,-24(fp)
    393c:	100d883a 	mov	r6,r2
    3940:	e13ffb17 	ldw	r4,-20(fp)
    3944:	e17ffc17 	ldw	r5,-16(fp)
    3948:	00037f80 	call	37f8 <adc_set_pnsel>
	for (index = 0; index < core.no_of_channels; index++) {
    394c:	e0bfffc3 	ldbu	r2,-1(fp)
    3950:	10800044 	addi	r2,r2,1
    3954:	e0bfffc5 	stb	r2,-1(fp)
    3958:	e0bffc43 	ldbu	r2,-15(fp)
    395c:	e0ffffc3 	ldbu	r3,-1(fp)
    3960:	10803fcc 	andi	r2,r2,255
    3964:	18bfdc36 	bltu	r3,r2,38d8 <__alt_mem_mcu_subsystem_ram_0+0x77fe38d8>
	}
	mdelay(1);
    3968:	0100fa04 	movi	r4,1000
    396c:	00206540 	call	20654 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
    3970:	e03fffc5 	stb	zero,-1(fp)
    3974:	00000b06 	br	39a4 <adc_pn_mon+0xf4>
		adc_write(core, ADC_REG_CHAN_STATUS(index), 0xff);
    3978:	e0bfffc3 	ldbu	r2,-1(fp)
    397c:	100491ba 	slli	r2,r2,6
    3980:	10810104 	addi	r2,r2,1028
    3984:	01c03fc4 	movi	r7,255
    3988:	100d883a 	mov	r6,r2
    398c:	e13ffb17 	ldw	r4,-20(fp)
    3990:	e17ffc17 	ldw	r5,-16(fp)
    3994:	00031940 	call	3194 <adc_write>
	for (index = 0; index < core.no_of_channels; index++) {
    3998:	e0bfffc3 	ldbu	r2,-1(fp)
    399c:	10800044 	addi	r2,r2,1
    39a0:	e0bfffc5 	stb	r2,-1(fp)
    39a4:	e0bffc43 	ldbu	r2,-15(fp)
    39a8:	e0ffffc3 	ldbu	r3,-1(fp)
    39ac:	10803fcc 	andi	r2,r2,255
    39b0:	18bff136 	bltu	r3,r2,3978 <__alt_mem_mcu_subsystem_ram_0+0x77fe3978>
	}
	mdelay(100);
    39b4:	010000b4 	movhi	r4,2
    39b8:	2121a804 	addi	r4,r4,-31072
    39bc:	00206540 	call	20654 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
    39c0:	e03fffc5 	stb	zero,-1(fp)
    39c4:	00001106 	br	3a0c <adc_pn_mon+0x15c>
		adc_read(core, ADC_REG_CHAN_STATUS(index), &reg_data);
    39c8:	e0bfffc3 	ldbu	r2,-1(fp)
    39cc:	100491ba 	slli	r2,r2,6
    39d0:	10810104 	addi	r2,r2,1028
    39d4:	1007883a 	mov	r3,r2
    39d8:	e0bffd04 	addi	r2,fp,-12
    39dc:	100f883a 	mov	r7,r2
    39e0:	180d883a 	mov	r6,r3
    39e4:	e13ffb17 	ldw	r4,-20(fp)
    39e8:	e17ffc17 	ldw	r5,-16(fp)
    39ec:	000312c0 	call	312c <adc_read>
		if (reg_data != 0) {
    39f0:	e0bffd17 	ldw	r2,-12(fp)
    39f4:	10000226 	beq	r2,zero,3a00 <adc_pn_mon+0x150>
			pn_errors = -1;
    39f8:	00bfffc4 	movi	r2,-1
    39fc:	e0bffe15 	stw	r2,-8(fp)
	for (index = 0; index < core.no_of_channels; index++) {
    3a00:	e0bfffc3 	ldbu	r2,-1(fp)
    3a04:	10800044 	addi	r2,r2,1
    3a08:	e0bfffc5 	stb	r2,-1(fp)
    3a0c:	e0bffc43 	ldbu	r2,-15(fp)
    3a10:	e0ffffc3 	ldbu	r3,-1(fp)
    3a14:	10803fcc 	andi	r2,r2,255
    3a18:	18bfeb36 	bltu	r3,r2,39c8 <__alt_mem_mcu_subsystem_ram_0+0x77fe39c8>
		}
	}

	return pn_errors;
    3a1c:	e0bffe17 	ldw	r2,-8(fp)
}
    3a20:	e037883a 	mov	sp,fp
    3a24:	dfc00117 	ldw	ra,4(sp)
    3a28:	df000017 	ldw	fp,0(sp)
    3a2c:	dec00204 	addi	sp,sp,8
    3a30:	f800283a 	ret

00003a34 <adc_ramp_test>:
 *******************************************************************************/
int32_t adc_ramp_test(adc_core core,
		uint8_t no_of_cores,
		uint32_t no_of_samples,
		uint32_t start_address)
{
    3a34:	deffd304 	addi	sp,sp,-180
    3a38:	dfc02c15 	stw	ra,176(sp)
    3a3c:	df002b15 	stw	fp,172(sp)
    3a40:	df002b04 	addi	fp,sp,172
    3a44:	e13fd815 	stw	r4,-160(fp)
    3a48:	e17fd915 	stw	r5,-156(fp)
    3a4c:	3005883a 	mov	r2,r6
    3a50:	e1ffd615 	stw	r7,-168(fp)
    3a54:	e0bfd705 	stb	r2,-164(fp)
	uint8_t	 err_cnt = 0;
    3a58:	e03fffc5 	stb	zero,-1(fp)
	uint16_t exp_data[32];
	uint16_t rcv_data[32];
	uint8_t index;
	uint32_t mask = ad_pow2(core.resolution);
    3a5c:	e0bfd983 	ldbu	r2,-154(fp)
    3a60:	10803fcc 	andi	r2,r2,255
    3a64:	1009883a 	mov	r4,r2
    3a68:	00083e80 	call	83e8 <ad_pow2>
    3a6c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t no_of_channels = core.no_of_channels*no_of_cores;
    3a70:	e0bfd943 	ldbu	r2,-155(fp)
    3a74:	e0ffd703 	ldbu	r3,-164(fp)
    3a78:	1885383a 	mul	r2,r3,r2
    3a7c:	e0bffbc5 	stb	r2,-17(fp)
	uint32_t current_address = start_address;
    3a80:	e0800217 	ldw	r2,8(fp)
    3a84:	e0bffe15 	stw	r2,-8(fp)
	uint32_t last_address = start_address + (no_of_channels*no_of_samples)*2;
    3a88:	e0fffbc3 	ldbu	r3,-17(fp)
    3a8c:	e0bfd617 	ldw	r2,-168(fp)
    3a90:	1885383a 	mul	r2,r3,r2
    3a94:	1085883a 	add	r2,r2,r2
    3a98:	1007883a 	mov	r3,r2
    3a9c:	e0800217 	ldw	r2,8(fp)
    3aa0:	10c5883a 	add	r2,r2,r3
    3aa4:	e0bffa15 	stw	r2,-24(fp)
	uint32_t sample_count = 0;
    3aa8:	e03ffd15 	stw	zero,-12(fp)

	while (current_address < last_address) {
    3aac:	00011006 	br	3ef0 <adc_ramp_test+0x4bc>

		// read data back from memory, one samples from each channel, min a word
		for (index=0; index<no_of_channels; index+=2) {
    3ab0:	e03fff85 	stb	zero,-2(fp)
    3ab4:	00001d06 	br	3b2c <adc_ramp_test+0xf8>
			rcv_data[index] = ad_reg_read(current_address + index) & mask;
    3ab8:	e0ffff83 	ldbu	r3,-2(fp)
    3abc:	e0bffe17 	ldw	r2,-8(fp)
    3ac0:	1885883a 	add	r2,r3,r2
    3ac4:	10800037 	ldwio	r2,0(r2)
    3ac8:	1009883a 	mov	r4,r2
    3acc:	e0bffc17 	ldw	r2,-16(fp)
    3ad0:	1007883a 	mov	r3,r2
    3ad4:	e0bfff83 	ldbu	r2,-2(fp)
    3ad8:	20c6703a 	and	r3,r4,r3
    3adc:	1085883a 	add	r2,r2,r2
    3ae0:	e085883a 	add	r2,fp,r2
    3ae4:	10ffda0d 	sth	r3,-152(r2)
			rcv_data[index+1] = (ad_reg_read(current_address + index) >> 16) & mask;
    3ae8:	e0ffff83 	ldbu	r3,-2(fp)
    3aec:	e0bffe17 	ldw	r2,-8(fp)
    3af0:	1885883a 	add	r2,r3,r2
    3af4:	10800037 	ldwio	r2,0(r2)
    3af8:	1005d43a 	srai	r2,r2,16
    3afc:	1009883a 	mov	r4,r2
    3b00:	e0bffc17 	ldw	r2,-16(fp)
    3b04:	1007883a 	mov	r3,r2
    3b08:	e0bfff83 	ldbu	r2,-2(fp)
    3b0c:	10800044 	addi	r2,r2,1
    3b10:	20c6703a 	and	r3,r4,r3
    3b14:	1085883a 	add	r2,r2,r2
    3b18:	e085883a 	add	r2,fp,r2
    3b1c:	10ffda0d 	sth	r3,-152(r2)
		for (index=0; index<no_of_channels; index+=2) {
    3b20:	e0bfff83 	ldbu	r2,-2(fp)
    3b24:	10800084 	addi	r2,r2,2
    3b28:	e0bfff85 	stb	r2,-2(fp)
    3b2c:	e0ffff83 	ldbu	r3,-2(fp)
    3b30:	e0bffbc3 	ldbu	r2,-17(fp)
    3b34:	18bfe036 	bltu	r3,r2,3ab8 <__alt_mem_mcu_subsystem_ram_0+0x77fe3ab8>
		}

		// generate expected data
		for (index=0; index<no_of_channels; index+=2) {
    3b38:	e03fff85 	stb	zero,-2(fp)
    3b3c:	00008406 	br	3d50 <adc_ramp_test+0x31c>
			if (current_address == start_address) {
    3b40:	e0fffe17 	ldw	r3,-8(fp)
    3b44:	e0800217 	ldw	r2,8(fp)
    3b48:	1880131e 	bne	r3,r2,3b98 <adc_ramp_test+0x164>
				exp_data[index] = rcv_data[index];
    3b4c:	e0ffff83 	ldbu	r3,-2(fp)
    3b50:	e0bfff83 	ldbu	r2,-2(fp)
    3b54:	18c7883a 	add	r3,r3,r3
    3b58:	e0c7883a 	add	r3,fp,r3
    3b5c:	18ffda0b 	ldhu	r3,-152(r3)
    3b60:	1085883a 	add	r2,r2,r2
    3b64:	e085883a 	add	r2,fp,r2
    3b68:	10ffea0d 	sth	r3,-88(r2)
				exp_data[index+1] = rcv_data[index+1];
    3b6c:	e0bfff83 	ldbu	r2,-2(fp)
    3b70:	10c00044 	addi	r3,r2,1
    3b74:	e0bfff83 	ldbu	r2,-2(fp)
    3b78:	10800044 	addi	r2,r2,1
    3b7c:	18c7883a 	add	r3,r3,r3
    3b80:	e0c7883a 	add	r3,fp,r3
    3b84:	18ffda0b 	ldhu	r3,-152(r3)
    3b88:	1085883a 	add	r2,r2,r2
    3b8c:	e085883a 	add	r2,fp,r2
    3b90:	10ffea0d 	sth	r3,-88(r2)
    3b94:	00006b06 	br	3d44 <adc_ramp_test+0x310>
			} else {
				if(no_of_channels < 2) {
    3b98:	e0bffbc3 	ldbu	r2,-17(fp)
    3b9c:	108000a8 	cmpgeui	r2,r2,2
    3ba0:	10003f1e 	bne	r2,zero,3ca0 <adc_ramp_test+0x26c>
					exp_data[index] = ((exp_data[index]+2) > mask) ? ((exp_data[index]+2) & mask) : (exp_data[index] + 2);
    3ba4:	e0bfff83 	ldbu	r2,-2(fp)
    3ba8:	1085883a 	add	r2,r2,r2
    3bac:	e085883a 	add	r2,fp,r2
    3bb0:	10bfea0b 	ldhu	r2,-88(r2)
    3bb4:	10bfffcc 	andi	r2,r2,65535
    3bb8:	10800084 	addi	r2,r2,2
    3bbc:	1007883a 	mov	r3,r2
    3bc0:	e0bffc17 	ldw	r2,-16(fp)
    3bc4:	10c00a2e 	bgeu	r2,r3,3bf0 <adc_ramp_test+0x1bc>
    3bc8:	e0bfff83 	ldbu	r2,-2(fp)
    3bcc:	1085883a 	add	r2,r2,r2
    3bd0:	e085883a 	add	r2,fp,r2
    3bd4:	10bfea0b 	ldhu	r2,-88(r2)
    3bd8:	10800084 	addi	r2,r2,2
    3bdc:	1007883a 	mov	r3,r2
    3be0:	e0bffc17 	ldw	r2,-16(fp)
    3be4:	1884703a 	and	r2,r3,r2
    3be8:	1007883a 	mov	r3,r2
    3bec:	00000606 	br	3c08 <adc_ramp_test+0x1d4>
    3bf0:	e0bfff83 	ldbu	r2,-2(fp)
    3bf4:	1085883a 	add	r2,r2,r2
    3bf8:	e085883a 	add	r2,fp,r2
    3bfc:	10bfea0b 	ldhu	r2,-88(r2)
    3c00:	10800084 	addi	r2,r2,2
    3c04:	1007883a 	mov	r3,r2
    3c08:	e0bfff83 	ldbu	r2,-2(fp)
    3c0c:	1085883a 	add	r2,r2,r2
    3c10:	e085883a 	add	r2,fp,r2
    3c14:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = ((exp_data[index+1]+2) > mask) ? ((exp_data[index+1]+2) & mask) : (exp_data[index+1] + 2);
    3c18:	e0bfff83 	ldbu	r2,-2(fp)
    3c1c:	10800044 	addi	r2,r2,1
    3c20:	1085883a 	add	r2,r2,r2
    3c24:	e085883a 	add	r2,fp,r2
    3c28:	10bfea0b 	ldhu	r2,-88(r2)
    3c2c:	10bfffcc 	andi	r2,r2,65535
    3c30:	10800084 	addi	r2,r2,2
    3c34:	1007883a 	mov	r3,r2
    3c38:	e0bffc17 	ldw	r2,-16(fp)
    3c3c:	10c00b2e 	bgeu	r2,r3,3c6c <adc_ramp_test+0x238>
    3c40:	e0bfff83 	ldbu	r2,-2(fp)
    3c44:	10800044 	addi	r2,r2,1
    3c48:	1085883a 	add	r2,r2,r2
    3c4c:	e085883a 	add	r2,fp,r2
    3c50:	10bfea0b 	ldhu	r2,-88(r2)
    3c54:	10800084 	addi	r2,r2,2
    3c58:	1007883a 	mov	r3,r2
    3c5c:	e0bffc17 	ldw	r2,-16(fp)
    3c60:	1884703a 	and	r2,r3,r2
    3c64:	1007883a 	mov	r3,r2
    3c68:	00000706 	br	3c88 <adc_ramp_test+0x254>
    3c6c:	e0bfff83 	ldbu	r2,-2(fp)
    3c70:	10800044 	addi	r2,r2,1
    3c74:	1085883a 	add	r2,r2,r2
    3c78:	e085883a 	add	r2,fp,r2
    3c7c:	10bfea0b 	ldhu	r2,-88(r2)
    3c80:	10800084 	addi	r2,r2,2
    3c84:	1007883a 	mov	r3,r2
    3c88:	e0bfff83 	ldbu	r2,-2(fp)
    3c8c:	10800044 	addi	r2,r2,1
    3c90:	1085883a 	add	r2,r2,r2
    3c94:	e085883a 	add	r2,fp,r2
    3c98:	10ffea0d 	sth	r3,-88(r2)
    3c9c:	00002906 	br	3d44 <adc_ramp_test+0x310>
				} else {
					exp_data[index] = (exp_data[index] == mask) ? 0 : exp_data[index] + 1;
    3ca0:	e0bfff83 	ldbu	r2,-2(fp)
    3ca4:	1085883a 	add	r2,r2,r2
    3ca8:	e085883a 	add	r2,fp,r2
    3cac:	10bfea0b 	ldhu	r2,-88(r2)
    3cb0:	10bfffcc 	andi	r2,r2,65535
    3cb4:	e0fffc17 	ldw	r3,-16(fp)
    3cb8:	18800726 	beq	r3,r2,3cd8 <adc_ramp_test+0x2a4>
    3cbc:	e0bfff83 	ldbu	r2,-2(fp)
    3cc0:	1085883a 	add	r2,r2,r2
    3cc4:	e085883a 	add	r2,fp,r2
    3cc8:	10bfea0b 	ldhu	r2,-88(r2)
    3ccc:	10800044 	addi	r2,r2,1
    3cd0:	1007883a 	mov	r3,r2
    3cd4:	00000106 	br	3cdc <adc_ramp_test+0x2a8>
    3cd8:	0007883a 	mov	r3,zero
    3cdc:	e0bfff83 	ldbu	r2,-2(fp)
    3ce0:	1085883a 	add	r2,r2,r2
    3ce4:	e085883a 	add	r2,fp,r2
    3ce8:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = (exp_data[index+1] == mask) ? 0 : exp_data[index+1] + 1;
    3cec:	e0bfff83 	ldbu	r2,-2(fp)
    3cf0:	10800044 	addi	r2,r2,1
    3cf4:	1085883a 	add	r2,r2,r2
    3cf8:	e085883a 	add	r2,fp,r2
    3cfc:	10bfea0b 	ldhu	r2,-88(r2)
    3d00:	10bfffcc 	andi	r2,r2,65535
    3d04:	e0fffc17 	ldw	r3,-16(fp)
    3d08:	18800826 	beq	r3,r2,3d2c <adc_ramp_test+0x2f8>
    3d0c:	e0bfff83 	ldbu	r2,-2(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	1085883a 	add	r2,r2,r2
    3d18:	e085883a 	add	r2,fp,r2
    3d1c:	10bfea0b 	ldhu	r2,-88(r2)
    3d20:	10800044 	addi	r2,r2,1
    3d24:	1007883a 	mov	r3,r2
    3d28:	00000106 	br	3d30 <adc_ramp_test+0x2fc>
    3d2c:	0007883a 	mov	r3,zero
    3d30:	e0bfff83 	ldbu	r2,-2(fp)
    3d34:	10800044 	addi	r2,r2,1
    3d38:	1085883a 	add	r2,r2,r2
    3d3c:	e085883a 	add	r2,fp,r2
    3d40:	10ffea0d 	sth	r3,-88(r2)
		for (index=0; index<no_of_channels; index+=2) {
    3d44:	e0bfff83 	ldbu	r2,-2(fp)
    3d48:	10800084 	addi	r2,r2,2
    3d4c:	e0bfff85 	stb	r2,-2(fp)
    3d50:	e0ffff83 	ldbu	r3,-2(fp)
    3d54:	e0bffbc3 	ldbu	r2,-17(fp)
    3d58:	18bf7936 	bltu	r3,r2,3b40 <__alt_mem_mcu_subsystem_ram_0+0x77fe3b40>
				}
			}
		}

		// compare received and expected
		for (index=0; index<no_of_channels; index+=2) {
    3d5c:	e03fff85 	stb	zero,-2(fp)
    3d60:	00004e06 	br	3e9c <adc_ramp_test+0x468>
			if ((rcv_data[index] != exp_data[index]) || (rcv_data[index+1] != exp_data[index+1])) {
    3d64:	e0bfff83 	ldbu	r2,-2(fp)
    3d68:	1085883a 	add	r2,r2,r2
    3d6c:	e085883a 	add	r2,fp,r2
    3d70:	10ffda0b 	ldhu	r3,-152(r2)
    3d74:	e0bfff83 	ldbu	r2,-2(fp)
    3d78:	1085883a 	add	r2,r2,r2
    3d7c:	e085883a 	add	r2,fp,r2
    3d80:	10bfea0b 	ldhu	r2,-88(r2)
    3d84:	18ffffcc 	andi	r3,r3,65535
    3d88:	10bfffcc 	andi	r2,r2,65535
    3d8c:	18800d1e 	bne	r3,r2,3dc4 <adc_ramp_test+0x390>
    3d90:	e0bfff83 	ldbu	r2,-2(fp)
    3d94:	10800044 	addi	r2,r2,1
    3d98:	1085883a 	add	r2,r2,r2
    3d9c:	e085883a 	add	r2,fp,r2
    3da0:	10ffda0b 	ldhu	r3,-152(r2)
    3da4:	e0bfff83 	ldbu	r2,-2(fp)
    3da8:	10800044 	addi	r2,r2,1
    3dac:	1085883a 	add	r2,r2,r2
    3db0:	e085883a 	add	r2,fp,r2
    3db4:	10bfea0b 	ldhu	r2,-88(r2)
    3db8:	18ffffcc 	andi	r3,r3,65535
    3dbc:	10bfffcc 	andi	r2,r2,65535
    3dc0:	18803326 	beq	r3,r2,3e90 <adc_ramp_test+0x45c>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3dc4:	e0ffff83 	ldbu	r3,-2(fp)
    3dc8:	e0bffd17 	ldw	r2,-12(fp)
    3dcc:	1887883a 	add	r3,r3,r2
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
    3dd0:	e0bfff83 	ldbu	r2,-2(fp)
    3dd4:	1085883a 	add	r2,r2,r2
    3dd8:	e085883a 	add	r2,fp,r2
    3ddc:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3de0:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
    3de4:	e0bfff83 	ldbu	r2,-2(fp)
    3de8:	1085883a 	add	r2,r2,r2
    3dec:	e085883a 	add	r2,fp,r2
    3df0:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3df4:	10bfffcc 	andi	r2,r2,65535
    3df8:	d8800015 	stw	r2,0(sp)
    3dfc:	200f883a 	mov	r7,r4
    3e00:	180d883a 	mov	r6,r3
    3e04:	014000b4 	movhi	r5,2
    3e08:	29551a04 	addi	r5,r5,21608
    3e0c:	010000b4 	movhi	r4,2
    3e10:	21150704 	addi	r4,r4,21532
    3e14:	0010ec40 	call	10ec4 <printf>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    3e18:	e0ffff83 	ldbu	r3,-2(fp)
    3e1c:	e0bffd17 	ldw	r2,-12(fp)
    3e20:	1885883a 	add	r2,r3,r2
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3e24:	10c00044 	addi	r3,r2,1
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    3e28:	e0bfff83 	ldbu	r2,-2(fp)
    3e2c:	10800044 	addi	r2,r2,1
    3e30:	1085883a 	add	r2,r2,r2
    3e34:	e085883a 	add	r2,fp,r2
    3e38:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3e3c:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
    3e40:	e0bfff83 	ldbu	r2,-2(fp)
    3e44:	10800044 	addi	r2,r2,1
    3e48:	1085883a 	add	r2,r2,r2
    3e4c:	e085883a 	add	r2,fp,r2
    3e50:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
    3e54:	10bfffcc 	andi	r2,r2,65535
    3e58:	d8800015 	stw	r2,0(sp)
    3e5c:	200f883a 	mov	r7,r4
    3e60:	180d883a 	mov	r6,r3
    3e64:	014000b4 	movhi	r5,2
    3e68:	29551a04 	addi	r5,r5,21608
    3e6c:	010000b4 	movhi	r4,2
    3e70:	21150704 	addi	r4,r4,21532
    3e74:	0010ec40 	call	10ec4 <printf>
				err_cnt++;
    3e78:	e0bfffc3 	ldbu	r2,-1(fp)
    3e7c:	10800044 	addi	r2,r2,1
    3e80:	e0bfffc5 	stb	r2,-1(fp)
				if (err_cnt == 50) break;
    3e84:	e0bfffc3 	ldbu	r2,-1(fp)
    3e88:	10800c98 	cmpnei	r2,r2,50
    3e8c:	10000726 	beq	r2,zero,3eac <adc_ramp_test+0x478>
		for (index=0; index<no_of_channels; index+=2) {
    3e90:	e0bfff83 	ldbu	r2,-2(fp)
    3e94:	10800084 	addi	r2,r2,2
    3e98:	e0bfff85 	stb	r2,-2(fp)
    3e9c:	e0ffff83 	ldbu	r3,-2(fp)
    3ea0:	e0bffbc3 	ldbu	r2,-17(fp)
    3ea4:	18bfaf36 	bltu	r3,r2,3d64 <__alt_mem_mcu_subsystem_ram_0+0x77fe3d64>
    3ea8:	00000106 	br	3eb0 <adc_ramp_test+0x47c>
				if (err_cnt == 50) break;
    3eac:	0001883a 	nop
			}
		}
		sample_count+=index;
    3eb0:	e0bfff83 	ldbu	r2,-2(fp)
    3eb4:	e0fffd17 	ldw	r3,-12(fp)
    3eb8:	1885883a 	add	r2,r3,r2
    3ebc:	e0bffd15 	stw	r2,-12(fp)

		// increment address pointer
		current_address = (no_of_channels == 1) ? (current_address+4) :
    3ec0:	e0bffbc3 	ldbu	r2,-17(fp)
    3ec4:	10800058 	cmpnei	r2,r2,1
    3ec8:	1000031e 	bne	r2,zero,3ed8 <adc_ramp_test+0x4a4>
    3ecc:	e0bffe17 	ldw	r2,-8(fp)
    3ed0:	10800104 	addi	r2,r2,4
    3ed4:	00000506 	br	3eec <adc_ramp_test+0x4b8>
							(current_address+(no_of_channels*2));
    3ed8:	e0bffbc3 	ldbu	r2,-17(fp)
    3edc:	1085883a 	add	r2,r2,r2
    3ee0:	1007883a 	mov	r3,r2
		current_address = (no_of_channels == 1) ? (current_address+4) :
    3ee4:	e0bffe17 	ldw	r2,-8(fp)
    3ee8:	1885883a 	add	r2,r3,r2
    3eec:	e0bffe15 	stw	r2,-8(fp)
	while (current_address < last_address) {
    3ef0:	e0fffe17 	ldw	r3,-8(fp)
    3ef4:	e0bffa17 	ldw	r2,-24(fp)
    3ef8:	18beed36 	bltu	r3,r2,3ab0 <__alt_mem_mcu_subsystem_ram_0+0x77fe3ab0>
	}

	if (err_cnt)
    3efc:	e0bfffc3 	ldbu	r2,-1(fp)
    3f00:	10000226 	beq	r2,zero,3f0c <adc_ramp_test+0x4d8>
		return -1;
    3f04:	00bfffc4 	movi	r2,-1
    3f08:	00000106 	br	3f10 <adc_ramp_test+0x4dc>
	else
		return 0;
    3f0c:	0005883a 	mov	r2,zero
}
    3f10:	e037883a 	mov	sp,fp
    3f14:	dfc00117 	ldw	ra,4(sp)
    3f18:	df000017 	ldw	fp,0(sp)
    3f1c:	dec00204 	addi	sp,sp,8
    3f20:	f800283a 	ret

00003f24 <I2C_Init>:
 * @return status - Result of the initialization procedure.
 *                  Example: 1 - if initialization was successful;
 *                           0 - if initialization was unsuccessful.
*******************************************************************************/
unsigned char I2C_Init(unsigned long clockFreq)
{
    3f24:	defffe04 	addi	sp,sp,-8
    3f28:	df000115 	stw	fp,4(sp)
    3f2c:	df000104 	addi	fp,sp,4
    3f30:	e13fff15 	stw	r4,-4(fp)
    /* Add your code here. */
}
    3f34:	0001883a 	nop
    3f38:	e037883a 	mov	sp,fp
    3f3c:	df000017 	ldw	fp,0(sp)
    3f40:	dec00104 	addi	sp,sp,4
    3f44:	f800283a 	ret

00003f48 <I2C_Write>:
*******************************************************************************/
unsigned char I2C_Write(unsigned char slaveAddress,
                        unsigned char* dataBuffer,
                        unsigned char bytesNumber,
                        unsigned char stopBit)
{
    3f48:	defffb04 	addi	sp,sp,-20
    3f4c:	df000415 	stw	fp,16(sp)
    3f50:	df000404 	addi	fp,sp,16
    3f54:	2005883a 	mov	r2,r4
    3f58:	e17ffe15 	stw	r5,-8(fp)
    3f5c:	3009883a 	mov	r4,r6
    3f60:	3807883a 	mov	r3,r7
    3f64:	e0bfff05 	stb	r2,-4(fp)
    3f68:	2005883a 	mov	r2,r4
    3f6c:	e0bffd05 	stb	r2,-12(fp)
    3f70:	1805883a 	mov	r2,r3
    3f74:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    3f78:	0001883a 	nop
    3f7c:	e037883a 	mov	sp,fp
    3f80:	df000017 	ldw	fp,0(sp)
    3f84:	dec00104 	addi	sp,sp,4
    3f88:	f800283a 	ret

00003f8c <I2C_Read>:
*******************************************************************************/
unsigned char I2C_Read(unsigned char slaveAddress,
                       unsigned char* dataBuffer,
                       unsigned char bytesNumber,
                       unsigned char stopBit)
{
    3f8c:	defffb04 	addi	sp,sp,-20
    3f90:	df000415 	stw	fp,16(sp)
    3f94:	df000404 	addi	fp,sp,16
    3f98:	2005883a 	mov	r2,r4
    3f9c:	e17ffe15 	stw	r5,-8(fp)
    3fa0:	3009883a 	mov	r4,r6
    3fa4:	3807883a 	mov	r3,r7
    3fa8:	e0bfff05 	stb	r2,-4(fp)
    3fac:	2005883a 	mov	r2,r4
    3fb0:	e0bffd05 	stb	r2,-12(fp)
    3fb4:	1805883a 	mov	r2,r3
    3fb8:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    3fbc:	0001883a 	nop
    3fc0:	e037883a 	mov	sp,fp
    3fc4:	df000017 	ldw	fp,0(sp)
    3fc8:	dec00104 	addi	sp,sp,4
    3fcc:	f800283a 	ret

00003fd0 <SPI_Init>:
*******************************************************************************/
unsigned char SPI_Init(unsigned char lsbFirst,
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockEdg)
{
    3fd0:	defffb04 	addi	sp,sp,-20
    3fd4:	df000415 	stw	fp,16(sp)
    3fd8:	df000404 	addi	fp,sp,16
    3fdc:	2005883a 	mov	r2,r4
    3fe0:	e17ffe15 	stw	r5,-8(fp)
    3fe4:	3009883a 	mov	r4,r6
    3fe8:	3807883a 	mov	r3,r7
    3fec:	e0bfff05 	stb	r2,-4(fp)
    3ff0:	2005883a 	mov	r2,r4
    3ff4:	e0bffd05 	stb	r2,-12(fp)
    3ff8:	1805883a 	mov	r2,r3
    3ffc:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
    4000:	0001883a 	nop
    4004:	e037883a 	mov	sp,fp
    4008:	df000017 	ldw	fp,0(sp)
    400c:	dec00104 	addi	sp,sp,4
    4010:	f800283a 	ret

00004014 <SPI_Read>:
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char slaveDeviceId,
                       unsigned char* data,
                       unsigned char bytesNumber)
{
    4014:	defffc04 	addi	sp,sp,-16
    4018:	df000315 	stw	fp,12(sp)
    401c:	df000304 	addi	fp,sp,12
    4020:	2005883a 	mov	r2,r4
    4024:	e17ffe15 	stw	r5,-8(fp)
    4028:	3007883a 	mov	r3,r6
    402c:	e0bfff05 	stb	r2,-4(fp)
    4030:	1805883a 	mov	r2,r3
    4034:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
    4038:	0001883a 	nop
    403c:	e037883a 	mov	sp,fp
    4040:	df000017 	ldw	fp,0(sp)
    4044:	dec00104 	addi	sp,sp,4
    4048:	f800283a 	ret

0000404c <SPI_Write>:
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char slaveDeviceId,
                        unsigned char* data,
                        unsigned char bytesNumber)
{
    404c:	defffc04 	addi	sp,sp,-16
    4050:	df000315 	stw	fp,12(sp)
    4054:	df000304 	addi	fp,sp,12
    4058:	2005883a 	mov	r2,r4
    405c:	e17ffe15 	stw	r5,-8(fp)
    4060:	3007883a 	mov	r3,r6
    4064:	e0bfff05 	stb	r2,-4(fp)
    4068:	1805883a 	mov	r2,r3
    406c:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
    4070:	0001883a 	nop
    4074:	e037883a 	mov	sp,fp
    4078:	df000017 	ldw	fp,0(sp)
    407c:	dec00104 	addi	sp,sp,4
    4080:	f800283a 	ret

00004084 <dac_buffer_load>:

/******************************************************************************/
/************************ Functions Definitions *******************************/
/******************************************************************************/

uint32_t dac_buffer_load(dac_core core, uint32_t start_address) {
    4084:	defff604 	addi	sp,sp,-40
    4088:	dfc00915 	stw	ra,36(sp)
    408c:	df000815 	stw	fp,32(sp)
    4090:	df000804 	addi	fp,sp,32
    4094:	e13ff915 	stw	r4,-28(fp)
    4098:	e17ffa15 	stw	r5,-24(fp)
    409c:	e1bffb15 	stw	r6,-20(fp)
    40a0:	e1fff815 	stw	r7,-32(fp)

	uint32_t no_of_samples;
	uint32_t index_i, index_q;
	uint32_t index_mem = 0;
    40a4:	e03ffe15 	stw	zero,-8(fp)

	no_of_samples = sizeof(sine_lut) / sizeof(typeof(sine_lut[0]));
    40a8:	00810004 	movi	r2,1024
    40ac:	e0bffd15 	stw	r2,-12(fp)

	for (index_i = 0; index_i < no_of_samples; index_i++) {
    40b0:	e03fff15 	stw	zero,-4(fp)
    40b4:	00008306 	br	42c4 <dac_buffer_load+0x240>
		 /* Phase shifted by 90 degree */
		index_q = (index_i + 256) % no_of_samples;
    40b8:	e0bfff17 	ldw	r2,-4(fp)
    40bc:	10804004 	addi	r2,r2,256
    40c0:	e0fffd17 	ldw	r3,-12(fp)
    40c4:	10c9203a 	divu	r4,r2,r3
    40c8:	e0fffd17 	ldw	r3,-12(fp)
    40cc:	20c7383a 	mul	r3,r4,r3
    40d0:	10c5c83a 	sub	r2,r2,r3
    40d4:	e0bffc15 	stw	r2,-16(fp)

		switch (core.no_of_channels) {
    40d8:	e0bffa43 	ldbu	r2,-23(fp)
    40dc:	10803fcc 	andi	r2,r2,255
    40e0:	10c000a0 	cmpeqi	r3,r2,2
    40e4:	1800151e 	bne	r3,zero,413c <dac_buffer_load+0xb8>
    40e8:	10c00120 	cmpeqi	r3,r2,4
    40ec:	1800321e 	bne	r3,zero,41b8 <dac_buffer_load+0x134>
    40f0:	10800060 	cmpeqi	r2,r2,1
    40f4:	10006b26 	beq	r2,zero,42a4 <dac_buffer_load+0x220>
			case 1:
				ad_reg_write_16(start_address + index_mem * 2, sine_lut[index_i]);
    40f8:	e0bffe17 	ldw	r2,-8(fp)
    40fc:	1085883a 	add	r2,r2,r2
    4100:	1007883a 	mov	r3,r2
    4104:	e0bff817 	ldw	r2,-32(fp)
    4108:	1889883a 	add	r4,r3,r2
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	1087883a 	add	r3,r2,r2
    4114:	008000b4 	movhi	r2,2
    4118:	1885883a 	add	r2,r3,r2
    411c:	10951e0b 	ldhu	r2,21624(r2)
    4120:	10bfffcc 	andi	r2,r2,65535
    4124:	100b883a 	mov	r5,r2
    4128:	00082c00 	call	82c0 <ad_reg_write_16>
				index_mem += 1;
    412c:	e0bffe17 	ldw	r2,-8(fp)
    4130:	10800044 	addi	r2,r2,1
    4134:	e0bffe15 	stw	r2,-8(fp)
				break;
    4138:	00005f06 	br	42b8 <dac_buffer_load+0x234>
			case 2:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
    413c:	e0bffe17 	ldw	r2,-8(fp)
    4140:	1085883a 	add	r2,r2,r2
    4144:	1007883a 	mov	r3,r2
    4148:	e0bff817 	ldw	r2,-32(fp)
    414c:	1889883a 	add	r4,r3,r2
    4150:	e0bfff17 	ldw	r2,-4(fp)
    4154:	1087883a 	add	r3,r2,r2
    4158:	008000b4 	movhi	r2,2
    415c:	1885883a 	add	r2,r3,r2
    4160:	10951e0b 	ldhu	r2,21624(r2)
    4164:	10bfffcc 	andi	r2,r2,65535
    4168:	100b883a 	mov	r5,r2
    416c:	00082c00 	call	82c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
    4170:	e0bffe17 	ldw	r2,-8(fp)
    4174:	10800044 	addi	r2,r2,1
    4178:	1085883a 	add	r2,r2,r2
    417c:	1007883a 	mov	r3,r2
    4180:	e0bff817 	ldw	r2,-32(fp)
    4184:	1889883a 	add	r4,r3,r2
    4188:	e0bffc17 	ldw	r2,-16(fp)
    418c:	1087883a 	add	r3,r2,r2
    4190:	008000b4 	movhi	r2,2
    4194:	1885883a 	add	r2,r3,r2
    4198:	10951e0b 	ldhu	r2,21624(r2)
    419c:	10bfffcc 	andi	r2,r2,65535
    41a0:	100b883a 	mov	r5,r2
    41a4:	00082c00 	call	82c0 <ad_reg_write_16>
				index_mem += 2;
    41a8:	e0bffe17 	ldw	r2,-8(fp)
    41ac:	10800084 	addi	r2,r2,2
    41b0:	e0bffe15 	stw	r2,-8(fp)
				break;
    41b4:	00004006 	br	42b8 <dac_buffer_load+0x234>
			case 4:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
    41b8:	e0bffe17 	ldw	r2,-8(fp)
    41bc:	1085883a 	add	r2,r2,r2
    41c0:	1007883a 	mov	r3,r2
    41c4:	e0bff817 	ldw	r2,-32(fp)
    41c8:	1889883a 	add	r4,r3,r2
    41cc:	e0bfff17 	ldw	r2,-4(fp)
    41d0:	1087883a 	add	r3,r2,r2
    41d4:	008000b4 	movhi	r2,2
    41d8:	1885883a 	add	r2,r3,r2
    41dc:	10951e0b 	ldhu	r2,21624(r2)
    41e0:	10bfffcc 	andi	r2,r2,65535
    41e4:	100b883a 	mov	r5,r2
    41e8:	00082c00 	call	82c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
    41ec:	e0bffe17 	ldw	r2,-8(fp)
    41f0:	10800044 	addi	r2,r2,1
    41f4:	1085883a 	add	r2,r2,r2
    41f8:	1007883a 	mov	r3,r2
    41fc:	e0bff817 	ldw	r2,-32(fp)
    4200:	1889883a 	add	r4,r3,r2
    4204:	e0bffc17 	ldw	r2,-16(fp)
    4208:	1087883a 	add	r3,r2,r2
    420c:	008000b4 	movhi	r2,2
    4210:	1885883a 	add	r2,r3,r2
    4214:	10951e0b 	ldhu	r2,21624(r2)
    4218:	10bfffcc 	andi	r2,r2,65535
    421c:	100b883a 	mov	r5,r2
    4220:	00082c00 	call	82c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 2) * 2, sine_lut[index_i]);
    4224:	e0bffe17 	ldw	r2,-8(fp)
    4228:	10800084 	addi	r2,r2,2
    422c:	1085883a 	add	r2,r2,r2
    4230:	1007883a 	mov	r3,r2
    4234:	e0bff817 	ldw	r2,-32(fp)
    4238:	1889883a 	add	r4,r3,r2
    423c:	e0bfff17 	ldw	r2,-4(fp)
    4240:	1087883a 	add	r3,r2,r2
    4244:	008000b4 	movhi	r2,2
    4248:	1885883a 	add	r2,r3,r2
    424c:	10951e0b 	ldhu	r2,21624(r2)
    4250:	10bfffcc 	andi	r2,r2,65535
    4254:	100b883a 	mov	r5,r2
    4258:	00082c00 	call	82c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 3) * 2, sine_lut[index_q]);
    425c:	e0bffe17 	ldw	r2,-8(fp)
    4260:	108000c4 	addi	r2,r2,3
    4264:	1085883a 	add	r2,r2,r2
    4268:	1007883a 	mov	r3,r2
    426c:	e0bff817 	ldw	r2,-32(fp)
    4270:	1889883a 	add	r4,r3,r2
    4274:	e0bffc17 	ldw	r2,-16(fp)
    4278:	1087883a 	add	r3,r2,r2
    427c:	008000b4 	movhi	r2,2
    4280:	1885883a 	add	r2,r3,r2
    4284:	10951e0b 	ldhu	r2,21624(r2)
    4288:	10bfffcc 	andi	r2,r2,65535
    428c:	100b883a 	mov	r5,r2
    4290:	00082c00 	call	82c0 <ad_reg_write_16>
				index_mem += 4;
    4294:	e0bffe17 	ldw	r2,-8(fp)
    4298:	10800104 	addi	r2,r2,4
    429c:	e0bffe15 	stw	r2,-8(fp)
				break;
    42a0:	00000506 	br	42b8 <dac_buffer_load+0x234>
			default:
				ad_printf("Unsupported mode.\n\r");
    42a4:	010000b4 	movhi	r4,2
    42a8:	21171e04 	addi	r4,r4,23672
    42ac:	0010ec40 	call	10ec4 <printf>
				return -1;
    42b0:	00bfffc4 	movi	r2,-1
    42b4:	00000b06 	br	42e4 <dac_buffer_load+0x260>
	for (index_i = 0; index_i < no_of_samples; index_i++) {
    42b8:	e0bfff17 	ldw	r2,-4(fp)
    42bc:	10800044 	addi	r2,r2,1
    42c0:	e0bfff15 	stw	r2,-4(fp)
    42c4:	e0ffff17 	ldw	r3,-4(fp)
    42c8:	e0bffd17 	ldw	r2,-12(fp)
    42cc:	18bf7a36 	bltu	r3,r2,40b8 <__alt_mem_mcu_subsystem_ram_0+0x77fe40b8>
		}
	}

	ad_dcache_flush();
    42d0:	001fde00 	call	1fde0 <alt_icache_flush_all>

	return (core.no_of_channels * no_of_samples);
    42d4:	e0bffa43 	ldbu	r2,-23(fp)
    42d8:	10c03fcc 	andi	r3,r2,255
    42dc:	e0bffd17 	ldw	r2,-12(fp)
    42e0:	1885383a 	mul	r2,r3,r2
}
    42e4:	e037883a 	mov	sp,fp
    42e8:	dfc00117 	ldw	ra,4(sp)
    42ec:	df000017 	ldw	fp,0(sp)
    42f0:	dec00204 	addi	sp,sp,8
    42f4:	f800283a 	ret

000042f8 <dac_read>:
 * @brief dac_read
 *******************************************************************************/
int32_t dac_read(dac_core *core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    42f8:	defffc04 	addi	sp,sp,-16
    42fc:	df000315 	stw	fp,12(sp)
    4300:	df000304 	addi	fp,sp,12
    4304:	e13fff15 	stw	r4,-4(fp)
    4308:	e17ffe15 	stw	r5,-8(fp)
    430c:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + 0x4000 + reg_addr));
    4310:	e0bfff17 	ldw	r2,-4(fp)
    4314:	10c00017 	ldw	r3,0(r2)
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	1885883a 	add	r2,r3,r2
    4320:	10900004 	addi	r2,r2,16384
    4324:	10800037 	ldwio	r2,0(r2)
    4328:	1007883a 	mov	r3,r2
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
    4334:	e0bffd17 	ldw	r2,-12(fp)
    4338:	10c00017 	ldw	r3,0(r2)
    433c:	00b7abb4 	movhi	r2,57006
    4340:	10b7ab44 	addi	r2,r2,-8531
    4344:	1880021e 	bne	r3,r2,4350 <dac_read+0x58>
		#ifdef DEBUG
			ad_printf("dac_read faild for register: %x", reg_addr);
		#endif
		return -1;
    4348:	00bfffc4 	movi	r2,-1
    434c:	00000106 	br	4354 <dac_read+0x5c>
	} else {
		return 0;
    4350:	0005883a 	mov	r2,zero
	}
}
    4354:	e037883a 	mov	sp,fp
    4358:	df000017 	ldw	fp,0(sp)
    435c:	dec00104 	addi	sp,sp,4
    4360:	f800283a 	ret

00004364 <dac_write>:
 * @brief dac_write
 *******************************************************************************/
int32_t dac_write(dac_core *core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    4364:	defffc04 	addi	sp,sp,-16
    4368:	df000315 	stw	fp,12(sp)
    436c:	df000304 	addi	fp,sp,12
    4370:	e13fff15 	stw	r4,-4(fp)
    4374:	e17ffe15 	stw	r5,-8(fp)
    4378:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + 0x4000 + reg_addr), reg_data);
    437c:	e0bfff17 	ldw	r2,-4(fp)
    4380:	10c00017 	ldw	r3,0(r2)
    4384:	e0bffe17 	ldw	r2,-8(fp)
    4388:	1885883a 	add	r2,r3,r2
    438c:	10900004 	addi	r2,r2,16384
    4390:	1007883a 	mov	r3,r2
    4394:	e0bffd17 	ldw	r2,-12(fp)
    4398:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return dac_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
    439c:	0005883a 	mov	r2,zero
}
    43a0:	e037883a 	mov	sp,fp
    43a4:	df000017 	ldw	fp,0(sp)
    43a8:	dec00104 	addi	sp,sp,4
    43ac:	f800283a 	ret

000043b0 <dds_set_frequency>:
 *******************************************************************************/

// freq is in Hz (i.e. set to 1*1000*1000 for 1 MHz)

int32_t dds_set_frequency(dac_core *core, uint32_t chan, uint32_t freq)
{
    43b0:	deffed04 	addi	sp,sp,-76
    43b4:	dfc01215 	stw	ra,72(sp)
    43b8:	df001115 	stw	fp,68(sp)
    43bc:	ddc01015 	stw	r23,64(sp)
    43c0:	dd800f15 	stw	r22,60(sp)
    43c4:	dd400e15 	stw	r21,56(sp)
    43c8:	dd000d15 	stw	r20,52(sp)
    43cc:	dcc00c15 	stw	r19,48(sp)
    43d0:	dc800b15 	stw	r18,44(sp)
    43d4:	dc400a15 	stw	r17,40(sp)
    43d8:	dc000915 	stw	r16,36(sp)
    43dc:	df001104 	addi	fp,sp,68
    43e0:	e13ff115 	stw	r4,-60(fp)
    43e4:	e17ff015 	stw	r5,-64(fp)
    43e8:	e1bfef15 	stw	r6,-68(fp)
	uint32_t val;
	uint64_t val64;
	uint32_t reg;
	uint64_t dac_clk;

	dac_read(core, DAC_REG_CLK_FREQ, &val);
    43ec:	e0bff304 	addi	r2,fp,-52
    43f0:	100d883a 	mov	r6,r2
    43f4:	01401504 	movi	r5,84
    43f8:	e13ff117 	ldw	r4,-60(fp)
    43fc:	00042f80 	call	42f8 <dac_read>
	dac_clk = val * ((100*1000*1000)/65535);
    4400:	e0bff317 	ldw	r2,-52(fp)
    4404:	10817d64 	muli	r2,r2,1525
    4408:	e0bff615 	stw	r2,-40(fp)
    440c:	e03ff715 	stw	zero,-36(fp)
	dac_read(core, DAC_REG_CLK_RATIO, &val);
    4410:	e0bff304 	addi	r2,fp,-52
    4414:	100d883a 	mov	r6,r2
    4418:	01401604 	movi	r5,88
    441c:	e13ff117 	ldw	r4,-60(fp)
    4420:	00042f80 	call	42f8 <dac_read>
	dac_clk *= val;
    4424:	e0bff317 	ldw	r2,-52(fp)
    4428:	1025883a 	mov	r18,r2
    442c:	0027883a 	mov	r19,zero
    4430:	e0bff717 	ldw	r2,-36(fp)
    4434:	1487383a 	mul	r3,r2,r18
    4438:	e0bff617 	ldw	r2,-40(fp)
    443c:	14c5383a 	mul	r2,r2,r19
    4440:	1887883a 	add	r3,r3,r2
    4444:	e0bff617 	ldw	r2,-40(fp)
    4448:	1488383a 	mulxuu	r4,r2,r18
    444c:	1485383a 	mul	r2,r2,r18
    4450:	102d883a 	mov	r22,r2
    4454:	202f883a 	mov	r23,r4
    4458:	1dc5883a 	add	r2,r3,r23
    445c:	102f883a 	mov	r23,r2
    4460:	e5bff615 	stw	r22,-40(fp)
    4464:	e5fff715 	stw	r23,-36(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    4468:	000d883a 	mov	r6,zero
    446c:	01401104 	movi	r5,68
    4470:	e13ff117 	ldw	r4,-60(fp)
    4474:	00043640 	call	4364 <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
    4478:	e0bff017 	ldw	r2,-64(fp)
    447c:	1004d07a 	srli	r2,r2,1
    4480:	100690fa 	slli	r3,r2,3
    4484:	e0bff017 	ldw	r2,-64(fp)
    4488:	1080004c 	andi	r2,r2,1
    448c:	1885883a 	add	r2,r3,r2
    4490:	100490fa 	slli	r2,r2,3
    4494:	10810104 	addi	r2,r2,1028
    4498:	e0fff204 	addi	r3,fp,-56
    449c:	180d883a 	mov	r6,r3
    44a0:	100b883a 	mov	r5,r2
    44a4:	e13ff117 	ldw	r4,-60(fp)
    44a8:	00042f80 	call	42f8 <dac_read>
	val64 = (uint64_t) freq * 0xFFFFULL;
    44ac:	e0bfef17 	ldw	r2,-68(fp)
    44b0:	1021883a 	mov	r16,r2
    44b4:	0023883a 	mov	r17,zero
    44b8:	00bfffd4 	movui	r2,65535
    44bc:	8887383a 	mul	r3,r17,r2
    44c0:	8005383a 	mul	r2,r16,zero
    44c4:	1887883a 	add	r3,r3,r2
    44c8:	00bfffd4 	movui	r2,65535
    44cc:	8088383a 	mulxuu	r4,r16,r2
    44d0:	8085383a 	mul	r2,r16,r2
    44d4:	1029883a 	mov	r20,r2
    44d8:	202b883a 	mov	r21,r4
    44dc:	1d45883a 	add	r2,r3,r21
    44e0:	102b883a 	mov	r21,r2
    44e4:	e53ff415 	stw	r20,-48(fp)
    44e8:	e57ff515 	stw	r21,-44(fp)
	val64 = val64 / dac_clk;
    44ec:	e1bff617 	ldw	r6,-40(fp)
    44f0:	e1fff717 	ldw	r7,-36(fp)
    44f4:	e13ff417 	ldw	r4,-48(fp)
    44f8:	e17ff517 	ldw	r5,-44(fp)
    44fc:	000caec0 	call	caec <__udivdi3>
    4500:	1009883a 	mov	r4,r2
    4504:	180b883a 	mov	r5,r3
    4508:	e13ff415 	stw	r4,-48(fp)
    450c:	e17ff515 	stw	r5,-44(fp)
	reg = (reg & ~DAC_DDS_INCR(~0)) | DAC_DDS_INCR(val64) | 1;
    4510:	e0bff217 	ldw	r2,-56(fp)
    4514:	10ffffec 	andhi	r3,r2,65535
    4518:	e0bff417 	ldw	r2,-48(fp)
    451c:	10bfffcc 	andi	r2,r2,65535
    4520:	1884b03a 	or	r2,r3,r2
    4524:	10800054 	ori	r2,r2,1
    4528:	e0bff215 	stw	r2,-56(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
    452c:	e0bff017 	ldw	r2,-64(fp)
    4530:	1004d07a 	srli	r2,r2,1
    4534:	100690fa 	slli	r3,r2,3
    4538:	e0bff017 	ldw	r2,-64(fp)
    453c:	1080004c 	andi	r2,r2,1
    4540:	1885883a 	add	r2,r3,r2
    4544:	100490fa 	slli	r2,r2,3
    4548:	10810104 	addi	r2,r2,1028
    454c:	e0fff217 	ldw	r3,-56(fp)
    4550:	180d883a 	mov	r6,r3
    4554:	100b883a 	mov	r5,r2
    4558:	e13ff117 	ldw	r4,-60(fp)
    455c:	00043640 	call	4364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    4560:	01800044 	movi	r6,1
    4564:	01401104 	movi	r5,68
    4568:	e13ff117 	ldw	r4,-60(fp)
    456c:	00043640 	call	4364 <dac_write>

	return 0;
    4570:	0005883a 	mov	r2,zero
}
    4574:	e6fff804 	addi	sp,fp,-32
    4578:	dfc00917 	ldw	ra,36(sp)
    457c:	df000817 	ldw	fp,32(sp)
    4580:	ddc00717 	ldw	r23,28(sp)
    4584:	dd800617 	ldw	r22,24(sp)
    4588:	dd400517 	ldw	r21,20(sp)
    458c:	dd000417 	ldw	r20,16(sp)
    4590:	dcc00317 	ldw	r19,12(sp)
    4594:	dc800217 	ldw	r18,8(sp)
    4598:	dc400117 	ldw	r17,4(sp)
    459c:	dc000017 	ldw	r16,0(sp)
    45a0:	dec00a04 	addi	sp,sp,40
    45a4:	f800283a 	ret

000045a8 <dds_set_phase>:
 *******************************************************************************/

// phase is in milli(?) angles scaled to 1000 (i.e. 90*1000 is 90 degrees (pi/2))

int32_t dds_set_phase(dac_core *core, uint32_t chan, uint32_t phase)
{
    45a8:	defff404 	addi	sp,sp,-48
    45ac:	dfc00b15 	stw	ra,44(sp)
    45b0:	df000a15 	stw	fp,40(sp)
    45b4:	dcc00915 	stw	r19,36(sp)
    45b8:	dc800815 	stw	r18,32(sp)
    45bc:	dc400715 	stw	r17,28(sp)
    45c0:	dc000615 	stw	r16,24(sp)
    45c4:	df000a04 	addi	fp,sp,40
    45c8:	e13ff815 	stw	r4,-32(fp)
    45cc:	e17ff715 	stw	r5,-36(fp)
    45d0:	e1bff615 	stw	r6,-40(fp)
	uint64_t val64;
	uint32_t reg;

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    45d4:	000d883a 	mov	r6,zero
    45d8:	01401104 	movi	r5,68
    45dc:	e13ff817 	ldw	r4,-32(fp)
    45e0:	00043640 	call	4364 <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
    45e4:	e0bff717 	ldw	r2,-36(fp)
    45e8:	1004d07a 	srli	r2,r2,1
    45ec:	100690fa 	slli	r3,r2,3
    45f0:	e0bff717 	ldw	r2,-36(fp)
    45f4:	1080004c 	andi	r2,r2,1
    45f8:	1885883a 	add	r2,r3,r2
    45fc:	100490fa 	slli	r2,r2,3
    4600:	10810104 	addi	r2,r2,1028
    4604:	e0fff904 	addi	r3,fp,-28
    4608:	180d883a 	mov	r6,r3
    460c:	100b883a 	mov	r5,r2
    4610:	e13ff817 	ldw	r4,-32(fp)
    4614:	00042f80 	call	42f8 <dac_read>
	val64 = (uint64_t) phase * 0x10000ULL + (360000 / 2);
    4618:	e0bff617 	ldw	r2,-40(fp)
    461c:	1025883a 	mov	r18,r2
    4620:	0027883a 	mov	r19,zero
    4624:	9004d43a 	srli	r2,r18,16
    4628:	9822943a 	slli	r17,r19,16
    462c:	1462b03a 	or	r17,r2,r17
    4630:	9020943a 	slli	r16,r18,16
    4634:	010000f4 	movhi	r4,3
    4638:	212fc804 	addi	r4,r4,-16608
    463c:	000b883a 	mov	r5,zero
    4640:	8105883a 	add	r2,r16,r4
    4644:	140d803a 	cmpltu	r6,r2,r16
    4648:	8947883a 	add	r3,r17,r5
    464c:	30c9883a 	add	r4,r6,r3
    4650:	2007883a 	mov	r3,r4
    4654:	e0bffa15 	stw	r2,-24(fp)
    4658:	e0fffb15 	stw	r3,-20(fp)
	val64 = val64 / 360000;
    465c:	e0bffa17 	ldw	r2,-24(fp)
    4660:	e0fffb17 	ldw	r3,-20(fp)
    4664:	01800174 	movhi	r6,5
    4668:	319f9004 	addi	r6,r6,32320
    466c:	000f883a 	mov	r7,zero
    4670:	1009883a 	mov	r4,r2
    4674:	180b883a 	mov	r5,r3
    4678:	000caec0 	call	caec <__udivdi3>
    467c:	1009883a 	mov	r4,r2
    4680:	180b883a 	mov	r5,r3
    4684:	e13ffa15 	stw	r4,-24(fp)
    4688:	e17ffb15 	stw	r5,-20(fp)
	reg = (reg & ~DAC_DDS_INIT(~0)) | DAC_DDS_INIT(val64);
    468c:	e0bff917 	ldw	r2,-28(fp)
    4690:	10ffffcc 	andi	r3,r2,65535
    4694:	e0bffa17 	ldw	r2,-24(fp)
    4698:	1004943a 	slli	r2,r2,16
    469c:	1884b03a 	or	r2,r3,r2
    46a0:	e0bff915 	stw	r2,-28(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
    46a4:	e0bff717 	ldw	r2,-36(fp)
    46a8:	1004d07a 	srli	r2,r2,1
    46ac:	100690fa 	slli	r3,r2,3
    46b0:	e0bff717 	ldw	r2,-36(fp)
    46b4:	1080004c 	andi	r2,r2,1
    46b8:	1885883a 	add	r2,r3,r2
    46bc:	100490fa 	slli	r2,r2,3
    46c0:	10810104 	addi	r2,r2,1028
    46c4:	e0fff917 	ldw	r3,-28(fp)
    46c8:	180d883a 	mov	r6,r3
    46cc:	100b883a 	mov	r5,r2
    46d0:	e13ff817 	ldw	r4,-32(fp)
    46d4:	00043640 	call	4364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    46d8:	01800044 	movi	r6,1
    46dc:	01401104 	movi	r5,68
    46e0:	e13ff817 	ldw	r4,-32(fp)
    46e4:	00043640 	call	4364 <dac_write>

	return 0;
    46e8:	0005883a 	mov	r2,zero
}
    46ec:	e6fffc04 	addi	sp,fp,-16
    46f0:	dfc00517 	ldw	ra,20(sp)
    46f4:	df000417 	ldw	fp,16(sp)
    46f8:	dcc00317 	ldw	r19,12(sp)
    46fc:	dc800217 	ldw	r18,8(sp)
    4700:	dc400117 	ldw	r17,4(sp)
    4704:	dc000017 	ldw	r16,0(sp)
    4708:	dec00604 	addi	sp,sp,24
    470c:	f800283a 	ret

00004710 <dds_set_scale>:
// scale range is (-1.99 to +1.99) - hardware supports -2.0, but we ignore it.
// do not get fancy, above 1.0 (or below -1.0) will mess the dds tones.
// dds always runs 16bits-- so unless your data path handles it- stay within -1 to +1.

int32_t dds_set_scale(dac_core *core, uint32_t chan, int32_t scale_micro_units)
{
    4710:	defff504 	addi	sp,sp,-44
    4714:	dfc00a15 	stw	ra,40(sp)
    4718:	df000915 	stw	fp,36(sp)
    471c:	dcc00815 	stw	r19,32(sp)
    4720:	dc800715 	stw	r18,28(sp)
    4724:	dc400615 	stw	r17,24(sp)
    4728:	dc000515 	stw	r16,20(sp)
    472c:	df000904 	addi	fp,sp,36
    4730:	e13ff915 	stw	r4,-28(fp)
    4734:	e17ff815 	stw	r5,-32(fp)
    4738:	e1bff715 	stw	r6,-36(fp)
	uint32_t pcore_version;
	uint32_t scale_reg;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
    473c:	e0bffa04 	addi	r2,fp,-24
    4740:	100d883a 	mov	r6,r2
    4744:	000b883a 	mov	r5,zero
    4748:	e13ff917 	ldw	r4,-28(fp)
    474c:	00042f80 	call	42f8 <dac_read>

	// only ise projects support binary shift scaling, if you think you need
	// this supported in this driver, let us know.

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 6)
    4750:	e0bffa17 	ldw	r2,-24(fp)
    4754:	1004d43a 	srli	r2,r2,16
    4758:	108001a8 	cmpgeui	r2,r2,6
    475c:	1000071e 	bne	r2,zero,477c <dds_set_scale+0x6c>
	{
		ad_printf("%s ERROR: Sorry, binary scale is NOT supported!\n", __func__);
    4760:	014000b4 	movhi	r5,2
    4764:	29574004 	addi	r5,r5,23808
    4768:	010000b4 	movhi	r4,2
    476c:	21172304 	addi	r4,r4,23692
    4770:	0010ec40 	call	10ec4 <printf>
		return(-1);
    4774:	00bfffc4 	movi	r2,-1
    4778:	00003c06 	br	486c <dds_set_scale+0x15c>
	}

	scale_reg = scale_micro_units;
    477c:	e0bff717 	ldw	r2,-36(fp)
    4780:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
    4784:	e0bff717 	ldw	r2,-36(fp)
    4788:	1000030e 	bge	r2,zero,4798 <dds_set_scale+0x88>
		scale_reg = scale_micro_units * -1;
    478c:	e0bff717 	ldw	r2,-36(fp)
    4790:	0085c83a 	sub	r2,zero,r2
    4794:	e0bffb15 	stw	r2,-20(fp)
	if (scale_reg >= 1999000)
    4798:	e0fffb17 	ldw	r3,-20(fp)
    479c:	008007f4 	movhi	r2,31
    47a0:	10a025c4 	addi	r2,r2,-32617
    47a4:	10c0032e 	bgeu	r2,r3,47b4 <dds_set_scale+0xa4>
		scale_reg = 1999000;
    47a8:	008007f4 	movhi	r2,31
    47ac:	10a02604 	addi	r2,r2,-32616
    47b0:	e0bffb15 	stw	r2,-20(fp)
	scale_reg = (uint32_t)(((uint64_t)scale_reg * 0x4000) / 1000000);
    47b4:	e0bffb17 	ldw	r2,-20(fp)
    47b8:	1025883a 	mov	r18,r2
    47bc:	0027883a 	mov	r19,zero
    47c0:	9004d4ba 	srli	r2,r18,18
    47c4:	982293ba 	slli	r17,r19,14
    47c8:	1462b03a 	or	r17,r2,r17
    47cc:	902093ba 	slli	r16,r18,14
    47d0:	018003f4 	movhi	r6,15
    47d4:	31909004 	addi	r6,r6,16960
    47d8:	000f883a 	mov	r7,zero
    47dc:	8009883a 	mov	r4,r16
    47e0:	880b883a 	mov	r5,r17
    47e4:	000caec0 	call	caec <__udivdi3>
    47e8:	1009883a 	mov	r4,r2
    47ec:	180b883a 	mov	r5,r3
    47f0:	2005883a 	mov	r2,r4
    47f4:	2807883a 	mov	r3,r5
    47f8:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
    47fc:	e0bff717 	ldw	r2,-36(fp)
    4800:	1000030e 	bge	r2,zero,4810 <dds_set_scale+0x100>
		scale_reg = scale_reg | 0x8000;
    4804:	e0bffb17 	ldw	r2,-20(fp)
    4808:	10a00014 	ori	r2,r2,32768
    480c:	e0bffb15 	stw	r2,-20(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
    4810:	000d883a 	mov	r6,zero
    4814:	01401104 	movi	r5,68
    4818:	e13ff917 	ldw	r4,-28(fp)
    481c:	00043640 	call	4364 <dac_write>
	dac_write(core, DAC_REG_DDS_SCALE(chan), DAC_DDS_SCALE(scale_reg));
    4820:	e0bff817 	ldw	r2,-32(fp)
    4824:	1004d07a 	srli	r2,r2,1
    4828:	10800404 	addi	r2,r2,16
    482c:	100690fa 	slli	r3,r2,3
    4830:	e0bff817 	ldw	r2,-32(fp)
    4834:	1080004c 	andi	r2,r2,1
    4838:	1885883a 	add	r2,r3,r2
    483c:	100690fa 	slli	r3,r2,3
    4840:	e0bffb17 	ldw	r2,-20(fp)
    4844:	10bfffcc 	andi	r2,r2,65535
    4848:	100d883a 	mov	r6,r2
    484c:	180b883a 	mov	r5,r3
    4850:	e13ff917 	ldw	r4,-28(fp)
    4854:	00043640 	call	4364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    4858:	01800044 	movi	r6,1
    485c:	01401104 	movi	r5,68
    4860:	e13ff917 	ldw	r4,-28(fp)
    4864:	00043640 	call	4364 <dac_write>
	return(0);
    4868:	0005883a 	mov	r2,zero
}
    486c:	e6fffc04 	addi	sp,fp,-16
    4870:	dfc00517 	ldw	ra,20(sp)
    4874:	df000417 	ldw	fp,16(sp)
    4878:	dcc00317 	ldw	r19,12(sp)
    487c:	dc800217 	ldw	r18,8(sp)
    4880:	dc400117 	ldw	r17,4(sp)
    4884:	dc000017 	ldw	r16,0(sp)
    4888:	dec00604 	addi	sp,sp,24
    488c:	f800283a 	ret

00004890 <dac_data_src_sel>:
/***************************************************************************//**
 * @brief dac_data_src_sel
 *******************************************************************************/

int32_t dac_data_src_sel(dac_core *core, int32_t chan, dac_data_src src)
{
    4890:	defff804 	addi	sp,sp,-32
    4894:	dfc00715 	stw	ra,28(sp)
    4898:	df000615 	stw	fp,24(sp)
    489c:	df000604 	addi	fp,sp,24
    48a0:	e13ffc15 	stw	r4,-16(fp)
    48a4:	e17ffb15 	stw	r5,-20(fp)
    48a8:	e1bffa15 	stw	r6,-24(fp)
	uint32_t pcore_version;
	uint32_t reg;
	int32_t i;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
    48ac:	e0bffe04 	addi	r2,fp,-8
    48b0:	100d883a 	mov	r6,r2
    48b4:	000b883a 	mov	r5,zero
    48b8:	e13ffc17 	ldw	r4,-16(fp)
    48bc:	00042f80 	call	42f8 <dac_read>

	// single core control for all channels

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 7)
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	1004d43a 	srli	r2,r2,16
    48c8:	108001e8 	cmpgeui	r2,r2,7
    48cc:	1000131e 	bne	r2,zero,491c <dac_data_src_sel+0x8c>
	{
		dac_read(core, DAC_REG_DATA_CONTROL, &reg);
    48d0:	e0bffd04 	addi	r2,fp,-12
    48d4:	100d883a 	mov	r6,r2
    48d8:	01401204 	movi	r5,72
    48dc:	e13ffc17 	ldw	r4,-16(fp)
    48e0:	00042f80 	call	42f8 <dac_read>
		reg = (reg & ~DAC_DATA_SEL(~0)) | DAC_DATA_SEL(src);
    48e4:	e0fffd17 	ldw	r3,-12(fp)
    48e8:	00bffc04 	movi	r2,-16
    48ec:	1886703a 	and	r3,r3,r2
    48f0:	e0bffa17 	ldw	r2,-24(fp)
    48f4:	108003cc 	andi	r2,r2,15
    48f8:	1884b03a 	or	r2,r3,r2
    48fc:	e0bffd15 	stw	r2,-12(fp)
		dac_write(core, DAC_REG_DATA_CONTROL, reg);
    4900:	e0bffd17 	ldw	r2,-12(fp)
    4904:	100d883a 	mov	r6,r2
    4908:	01401204 	movi	r5,72
    490c:	e13ffc17 	ldw	r4,-16(fp)
    4910:	00043640 	call	4364 <dac_write>
		return(0);
    4914:	0005883a 	mov	r2,zero
    4918:	00001d06 	br	4990 <dac_data_src_sel+0x100>
	}

	// per channel source select

	for (i = 0; i < (core->no_of_channels * 2); i++)
    491c:	e03fff15 	stw	zero,-4(fp)
    4920:	00000f06 	br	4960 <dac_data_src_sel+0xd0>
	{
		if ((chan < 0) || (chan == i))
    4924:	e0bffb17 	ldw	r2,-20(fp)
    4928:	10000316 	blt	r2,zero,4938 <dac_data_src_sel+0xa8>
    492c:	e0fffb17 	ldw	r3,-20(fp)
    4930:	e0bfff17 	ldw	r2,-4(fp)
    4934:	1880071e 	bne	r3,r2,4954 <dac_data_src_sel+0xc4>
			dac_write(core, DAC_REG_DATA_SELECT(i), src);
    4938:	e0bfff17 	ldw	r2,-4(fp)
    493c:	100491ba 	slli	r2,r2,6
    4940:	10810604 	addi	r2,r2,1048
    4944:	e1bffa17 	ldw	r6,-24(fp)
    4948:	100b883a 	mov	r5,r2
    494c:	e13ffc17 	ldw	r4,-16(fp)
    4950:	00043640 	call	4364 <dac_write>
	for (i = 0; i < (core->no_of_channels * 2); i++)
    4954:	e0bfff17 	ldw	r2,-4(fp)
    4958:	10800044 	addi	r2,r2,1
    495c:	e0bfff15 	stw	r2,-4(fp)
    4960:	e0bffc17 	ldw	r2,-16(fp)
    4964:	10800143 	ldbu	r2,5(r2)
    4968:	10803fcc 	andi	r2,r2,255
    496c:	1085883a 	add	r2,r2,r2
    4970:	1007883a 	mov	r3,r2
    4974:	e0bfff17 	ldw	r2,-4(fp)
    4978:	10ffea16 	blt	r2,r3,4924 <__alt_mem_mcu_subsystem_ram_0+0x77fe4924>
	}
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
    497c:	01800044 	movi	r6,1
    4980:	01401104 	movi	r5,68
    4984:	e13ffc17 	ldw	r4,-16(fp)
    4988:	00043640 	call	4364 <dac_write>

	return(0);
    498c:	0005883a 	mov	r2,zero
}
    4990:	e037883a 	mov	sp,fp
    4994:	dfc00117 	ldw	ra,4(sp)
    4998:	df000017 	ldw	fp,0(sp)
    499c:	dec00204 	addi	sp,sp,8
    49a0:	f800283a 	ret

000049a4 <dac_setup>:

/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/
int32_t dac_setup(dac_core *core)
{
    49a4:	defffb04 	addi	sp,sp,-20
    49a8:	dfc00415 	stw	ra,16(sp)
    49ac:	df000315 	stw	fp,12(sp)
    49b0:	df000304 	addi	fp,sp,12
    49b4:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t dac_clock;

	dac_write(core, DAC_REG_RSTN, 0x00);
    49b8:	000d883a 	mov	r6,zero
    49bc:	01401004 	movi	r5,64
    49c0:	e13ffd17 	ldw	r4,-12(fp)
    49c4:	00043640 	call	4364 <dac_write>
	dac_write(core, DAC_REG_RSTN, 0x03);
    49c8:	018000c4 	movi	r6,3
    49cc:	01401004 	movi	r5,64
    49d0:	e13ffd17 	ldw	r4,-12(fp)
    49d4:	00043640 	call	4364 <dac_write>
	mdelay(100);
    49d8:	010000b4 	movhi	r4,2
    49dc:	2121a804 	addi	r4,r4,-31072
    49e0:	00206540 	call	20654 <usleep>

	dac_read(core, DAC_REG_STATUS, &reg_data);
    49e4:	e0bfff04 	addi	r2,fp,-4
    49e8:	100d883a 	mov	r6,r2
    49ec:	01401704 	movi	r5,92
    49f0:	e13ffd17 	ldw	r4,-12(fp)
    49f4:	00042f80 	call	42f8 <dac_read>
	if (reg_data == 0x0) {
    49f8:	e0bfff17 	ldw	r2,-4(fp)
    49fc:	1000071e 	bne	r2,zero,4a1c <dac_setup+0x78>
		ad_printf("%s DAC Core Status errors.\n", __func__);
    4a00:	014000b4 	movhi	r5,2
    4a04:	29574404 	addi	r5,r5,23824
    4a08:	010000b4 	movhi	r4,2
    4a0c:	21173004 	addi	r4,r4,23744
    4a10:	0010ec40 	call	10ec4 <printf>
		return -1;
    4a14:	00bfffc4 	movi	r2,-1
    4a18:	00001d06 	br	4a90 <dac_setup+0xec>
	}

	dac_read(core, DAC_REG_CLK_FREQ, &dac_clock);
    4a1c:	e0bffe04 	addi	r2,fp,-8
    4a20:	100d883a 	mov	r6,r2
    4a24:	01401504 	movi	r5,84
    4a28:	e13ffd17 	ldw	r4,-12(fp)
    4a2c:	00042f80 	call	42f8 <dac_read>
	dac_read(core, DAC_REG_CLK_RATIO, &reg_data);
    4a30:	e0bfff04 	addi	r2,fp,-4
    4a34:	100d883a 	mov	r6,r2
    4a38:	01401604 	movi	r5,88
    4a3c:	e13ffd17 	ldw	r4,-12(fp)
    4a40:	00042f80 	call	42f8 <dac_read>
	dac_clock = (dac_clock * reg_data * 100) + 0x7fff;
    4a44:	e0fffe17 	ldw	r3,-8(fp)
    4a48:	e0bfff17 	ldw	r2,-4(fp)
    4a4c:	1885383a 	mul	r2,r3,r2
    4a50:	10801924 	muli	r2,r2,100
    4a54:	109fffc4 	addi	r2,r2,32767
    4a58:	e0bffe15 	stw	r2,-8(fp)
	dac_clock = dac_clock >> 16;
    4a5c:	e0bffe17 	ldw	r2,-8(fp)
    4a60:	1004d43a 	srli	r2,r2,16
    4a64:	e0bffe15 	stw	r2,-8(fp)

	ad_printf("%s dac core initialized (%d MHz).\n", __func__, dac_clock);
    4a68:	e0bffe17 	ldw	r2,-8(fp)
    4a6c:	100d883a 	mov	r6,r2
    4a70:	014000b4 	movhi	r5,2
    4a74:	29574404 	addi	r5,r5,23824
    4a78:	010000b4 	movhi	r4,2
    4a7c:	21173704 	addi	r4,r4,23772
    4a80:	0010ec40 	call	10ec4 <printf>

	dac_data_setup(core);
    4a84:	e13ffd17 	ldw	r4,-12(fp)
    4a88:	0004aa40 	call	4aa4 <dac_data_setup>
	return 0;
    4a8c:	0005883a 	mov	r2,zero
}
    4a90:	e037883a 	mov	sp,fp
    4a94:	dfc00117 	ldw	ra,4(sp)
    4a98:	df000017 	ldw	fp,0(sp)
    4a9c:	dec00204 	addi	sp,sp,8
    4aa0:	f800283a 	ret

00004aa4 <dac_data_setup>:
/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/

int32_t dac_data_setup(dac_core *core)
{
    4aa4:	defffb04 	addi	sp,sp,-20
    4aa8:	dfc00415 	stw	ra,16(sp)
    4aac:	df000315 	stw	fp,12(sp)
    4ab0:	df000304 	addi	fp,sp,12
    4ab4:	e13ffd15 	stw	r4,-12(fp)
	dac_channel *chan;
	uint32_t i;

	for (i = 0; i < core->no_of_channels; i++) {
    4ab8:	e03fff15 	stw	zero,-4(fp)
    4abc:	00007106 	br	4c84 <dac_data_setup+0x1e0>
		chan = &core->channels[i];
    4ac0:	e0bffd17 	ldw	r2,-12(fp)
    4ac4:	10c00217 	ldw	r3,8(r2)
    4ac8:	e0bfff17 	ldw	r2,-4(fp)
    4acc:	10800924 	muli	r2,r2,36
    4ad0:	1885883a 	add	r2,r3,r2
    4ad4:	e0bffe15 	stw	r2,-8(fp)
		if (chan->sel == DAC_SRC_DDS)
    4ad8:	e0bffe17 	ldw	r2,-8(fp)
    4adc:	10800817 	ldw	r2,32(r2)
    4ae0:	1000551e 	bne	r2,zero,4c38 <dac_data_setup+0x194>
		{
			dds_set_frequency(core, ((i*2)+0), chan->dds_frequency_0);
    4ae4:	e0bfff17 	ldw	r2,-4(fp)
    4ae8:	1085883a 	add	r2,r2,r2
    4aec:	1007883a 	mov	r3,r2
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	10800017 	ldw	r2,0(r2)
    4af8:	100d883a 	mov	r6,r2
    4afc:	180b883a 	mov	r5,r3
    4b00:	e13ffd17 	ldw	r4,-12(fp)
    4b04:	00043b00 	call	43b0 <dds_set_frequency>
			dds_set_phase(core, ((i*2)+0), chan->dds_phase_0);
    4b08:	e0bfff17 	ldw	r2,-4(fp)
    4b0c:	1085883a 	add	r2,r2,r2
    4b10:	1007883a 	mov	r3,r2
    4b14:	e0bffe17 	ldw	r2,-8(fp)
    4b18:	10800117 	ldw	r2,4(r2)
    4b1c:	100d883a 	mov	r6,r2
    4b20:	180b883a 	mov	r5,r3
    4b24:	e13ffd17 	ldw	r4,-12(fp)
    4b28:	00045a80 	call	45a8 <dds_set_phase>
			dds_set_scale(core, ((i*2)+0), chan->dds_scale_0);
    4b2c:	e0bfff17 	ldw	r2,-4(fp)
    4b30:	1085883a 	add	r2,r2,r2
    4b34:	1007883a 	mov	r3,r2
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	10800217 	ldw	r2,8(r2)
    4b40:	100d883a 	mov	r6,r2
    4b44:	180b883a 	mov	r5,r3
    4b48:	e13ffd17 	ldw	r4,-12(fp)
    4b4c:	00047100 	call	4710 <dds_set_scale>
			if (chan->dds_dual_tone == 0)
    4b50:	e0bffe17 	ldw	r2,-8(fp)
    4b54:	10800617 	ldw	r2,24(r2)
    4b58:	10001c1e 	bne	r2,zero,4bcc <dac_data_setup+0x128>
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_0);
    4b5c:	e0bfff17 	ldw	r2,-4(fp)
    4b60:	1085883a 	add	r2,r2,r2
    4b64:	10c00044 	addi	r3,r2,1
    4b68:	e0bffe17 	ldw	r2,-8(fp)
    4b6c:	10800017 	ldw	r2,0(r2)
    4b70:	100d883a 	mov	r6,r2
    4b74:	180b883a 	mov	r5,r3
    4b78:	e13ffd17 	ldw	r4,-12(fp)
    4b7c:	00043b00 	call	43b0 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_0);
    4b80:	e0bfff17 	ldw	r2,-4(fp)
    4b84:	1085883a 	add	r2,r2,r2
    4b88:	10c00044 	addi	r3,r2,1
    4b8c:	e0bffe17 	ldw	r2,-8(fp)
    4b90:	10800117 	ldw	r2,4(r2)
    4b94:	100d883a 	mov	r6,r2
    4b98:	180b883a 	mov	r5,r3
    4b9c:	e13ffd17 	ldw	r4,-12(fp)
    4ba0:	00045a80 	call	45a8 <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_0);
    4ba4:	e0bfff17 	ldw	r2,-4(fp)
    4ba8:	1085883a 	add	r2,r2,r2
    4bac:	10c00044 	addi	r3,r2,1
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10800217 	ldw	r2,8(r2)
    4bb8:	100d883a 	mov	r6,r2
    4bbc:	180b883a 	mov	r5,r3
    4bc0:	e13ffd17 	ldw	r4,-12(fp)
    4bc4:	00047100 	call	4710 <dds_set_scale>
    4bc8:	00001b06 	br	4c38 <dac_data_setup+0x194>
			}
			else
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_1);
    4bcc:	e0bfff17 	ldw	r2,-4(fp)
    4bd0:	1085883a 	add	r2,r2,r2
    4bd4:	10c00044 	addi	r3,r2,1
    4bd8:	e0bffe17 	ldw	r2,-8(fp)
    4bdc:	10800317 	ldw	r2,12(r2)
    4be0:	100d883a 	mov	r6,r2
    4be4:	180b883a 	mov	r5,r3
    4be8:	e13ffd17 	ldw	r4,-12(fp)
    4bec:	00043b00 	call	43b0 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_1);
    4bf0:	e0bfff17 	ldw	r2,-4(fp)
    4bf4:	1085883a 	add	r2,r2,r2
    4bf8:	10c00044 	addi	r3,r2,1
    4bfc:	e0bffe17 	ldw	r2,-8(fp)
    4c00:	10800417 	ldw	r2,16(r2)
    4c04:	100d883a 	mov	r6,r2
    4c08:	180b883a 	mov	r5,r3
    4c0c:	e13ffd17 	ldw	r4,-12(fp)
    4c10:	00045a80 	call	45a8 <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_1);
    4c14:	e0bfff17 	ldw	r2,-4(fp)
    4c18:	1085883a 	add	r2,r2,r2
    4c1c:	10c00044 	addi	r3,r2,1
    4c20:	e0bffe17 	ldw	r2,-8(fp)
    4c24:	10800517 	ldw	r2,20(r2)
    4c28:	100d883a 	mov	r6,r2
    4c2c:	180b883a 	mov	r5,r3
    4c30:	e13ffd17 	ldw	r4,-12(fp)
    4c34:	00047100 	call	4710 <dds_set_scale>
			}
		}
		dac_write(core, DAC_REG_DATA_PATTERN(i), chan->pat_data);
    4c38:	e0bfff17 	ldw	r2,-4(fp)
    4c3c:	100491ba 	slli	r2,r2,6
    4c40:	10c10404 	addi	r3,r2,1040
    4c44:	e0bffe17 	ldw	r2,-8(fp)
    4c48:	10800717 	ldw	r2,28(r2)
    4c4c:	100d883a 	mov	r6,r2
    4c50:	180b883a 	mov	r5,r3
    4c54:	e13ffd17 	ldw	r4,-12(fp)
    4c58:	00043640 	call	4364 <dac_write>
		dac_data_src_sel(core, i, chan->sel);
    4c5c:	e0ffff17 	ldw	r3,-4(fp)
    4c60:	e0bffe17 	ldw	r2,-8(fp)
    4c64:	10800817 	ldw	r2,32(r2)
    4c68:	100d883a 	mov	r6,r2
    4c6c:	180b883a 	mov	r5,r3
    4c70:	e13ffd17 	ldw	r4,-12(fp)
    4c74:	00048900 	call	4890 <dac_data_src_sel>
	for (i = 0; i < core->no_of_channels; i++) {
    4c78:	e0bfff17 	ldw	r2,-4(fp)
    4c7c:	10800044 	addi	r2,r2,1
    4c80:	e0bfff15 	stw	r2,-4(fp)
    4c84:	e0bffd17 	ldw	r2,-12(fp)
    4c88:	10800143 	ldbu	r2,5(r2)
    4c8c:	10803fcc 	andi	r2,r2,255
    4c90:	e0ffff17 	ldw	r3,-4(fp)
    4c94:	18bf8a36 	bltu	r3,r2,4ac0 <__alt_mem_mcu_subsystem_ram_0+0x77fe4ac0>
	}

	return(0);
    4c98:	0005883a 	mov	r2,zero
}
    4c9c:	e037883a 	mov	sp,fp
    4ca0:	dfc00117 	ldw	ra,4(sp)
    4ca4:	df000017 	ldw	fp,0(sp)
    4ca8:	dec00204 	addi	sp,sp,8
    4cac:	f800283a 	ret

00004cb0 <dmac_read>:
 *******************************************************************************/

int32_t dmac_read(dmac_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    4cb0:	defffb04 	addi	sp,sp,-20
    4cb4:	df000415 	stw	fp,16(sp)
    4cb8:	df000404 	addi	fp,sp,16
    4cbc:	e13ffc15 	stw	r4,-16(fp)
    4cc0:	e17ffd15 	stw	r5,-12(fp)
    4cc4:	e1bffe15 	stw	r6,-8(fp)
    4cc8:	e1ffff15 	stw	r7,-4(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
    4ccc:	e0fffc17 	ldw	r3,-16(fp)
    4cd0:	e0800117 	ldw	r2,4(fp)
    4cd4:	1885883a 	add	r2,r3,r2
    4cd8:	10800037 	ldwio	r2,0(r2)
    4cdc:	1007883a 	mov	r3,r2
    4ce0:	e0800217 	ldw	r2,8(fp)
    4ce4:	10c00015 	stw	r3,0(r2)

	return 0;
    4ce8:	0005883a 	mov	r2,zero
}
    4cec:	e037883a 	mov	sp,fp
    4cf0:	df000017 	ldw	fp,0(sp)
    4cf4:	dec00104 	addi	sp,sp,4
    4cf8:	f800283a 	ret

00004cfc <dmac_write>:
 *******************************************************************************/

int32_t dmac_write(dmac_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    4cfc:	defffb04 	addi	sp,sp,-20
    4d00:	df000415 	stw	fp,16(sp)
    4d04:	df000404 	addi	fp,sp,16
    4d08:	e13ffc15 	stw	r4,-16(fp)
    4d0c:	e17ffd15 	stw	r5,-12(fp)
    4d10:	e1bffe15 	stw	r6,-8(fp)
    4d14:	e1ffff15 	stw	r7,-4(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
    4d18:	e0fffc17 	ldw	r3,-16(fp)
    4d1c:	e0800117 	ldw	r2,4(fp)
    4d20:	1885883a 	add	r2,r3,r2
    4d24:	1007883a 	mov	r3,r2
    4d28:	e0800217 	ldw	r2,8(fp)
    4d2c:	18800035 	stwio	r2,0(r3)

	return 0;
    4d30:	0005883a 	mov	r2,zero
}
    4d34:	e037883a 	mov	sp,fp
    4d38:	df000017 	ldw	fp,0(sp)
    4d3c:	dec00104 	addi	sp,sp,4
    4d40:	f800283a 	ret

00004d44 <dmac_start_transaction>:
/***************************************************************************//**
 * @brief dmac_start_transaction
 *******************************************************************************/

int32_t dmac_start_transaction(dmac_core dma)
{
    4d44:	defff604 	addi	sp,sp,-40
    4d48:	dfc00915 	stw	ra,36(sp)
    4d4c:	df000815 	stw	fp,32(sp)
    4d50:	df000804 	addi	fp,sp,32
    4d54:	e13ffa15 	stw	r4,-24(fp)
    4d58:	e17ffb15 	stw	r5,-20(fp)
    4d5c:	e1bffc15 	stw	r6,-16(fp)
    4d60:	e1fffd15 	stw	r7,-12(fp)

	uint32_t reg_val = 0;
    4d64:	e03ffe15 	stw	zero,-8(fp)
	uint32_t timer = 0;
    4d68:	e03fff15 	stw	zero,-4(fp)

	dmac_write(dma, DMAC_REG_CTRL, 0x0);
    4d6c:	d8000115 	stw	zero,4(sp)
    4d70:	00810004 	movi	r2,1024
    4d74:	d8800015 	stw	r2,0(sp)
    4d78:	e13ffa17 	ldw	r4,-24(fp)
    4d7c:	e17ffb17 	ldw	r5,-20(fp)
    4d80:	e1bffc17 	ldw	r6,-16(fp)
    4d84:	e1fffd17 	ldw	r7,-12(fp)
    4d88:	0004cfc0 	call	4cfc <dmac_write>
	dmac_write(dma, DMAC_REG_CTRL, DMAC_CTRL_ENABLE);
    4d8c:	00800044 	movi	r2,1
    4d90:	d8800115 	stw	r2,4(sp)
    4d94:	00810004 	movi	r2,1024
    4d98:	d8800015 	stw	r2,0(sp)
    4d9c:	e13ffa17 	ldw	r4,-24(fp)
    4da0:	e17ffb17 	ldw	r5,-20(fp)
    4da4:	e1bffc17 	ldw	r6,-16(fp)
    4da8:	e1fffd17 	ldw	r7,-12(fp)
    4dac:	0004cfc0 	call	4cfc <dmac_write>

	dmac_write(dma, DMAC_REG_IRQ_MASK, 0x0);
    4db0:	d8000115 	stw	zero,4(sp)
    4db4:	00802004 	movi	r2,128
    4db8:	d8800015 	stw	r2,0(sp)
    4dbc:	e13ffa17 	ldw	r4,-24(fp)
    4dc0:	e17ffb17 	ldw	r5,-20(fp)
    4dc4:	e1bffc17 	ldw	r6,-16(fp)
    4dc8:	e1fffd17 	ldw	r7,-12(fp)
    4dcc:	0004cfc0 	call	4cfc <dmac_write>

        if(dma.transfer) {
    4dd0:	e0bffd17 	ldw	r2,-12(fp)
    4dd4:	10001f26 	beq	r2,zero,4e54 <dmac_start_transaction+0x110>
	        dmac_read(dma, DMAC_REG_TRANSFER_ID, &(dma.transfer->id));
    4dd8:	e0bffd17 	ldw	r2,-12(fp)
    4ddc:	d8800115 	stw	r2,4(sp)
    4de0:	00810104 	movi	r2,1028
    4de4:	d8800015 	stw	r2,0(sp)
    4de8:	e13ffa17 	ldw	r4,-24(fp)
    4dec:	e17ffb17 	ldw	r5,-20(fp)
    4df0:	e1bffc17 	ldw	r6,-16(fp)
    4df4:	e1fffd17 	ldw	r7,-12(fp)
    4df8:	0004cb00 	call	4cb0 <dmac_read>
        } else {
                ad_printf("%s : Undefined DMA transfer.\n", __func__);
                return -1;
        }
	dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
    4dfc:	e0bffe04 	addi	r2,fp,-8
    4e00:	d8800115 	stw	r2,4(sp)
    4e04:	00802104 	movi	r2,132
    4e08:	d8800015 	stw	r2,0(sp)
    4e0c:	e13ffa17 	ldw	r4,-24(fp)
    4e10:	e17ffb17 	ldw	r5,-20(fp)
    4e14:	e1bffc17 	ldw	r6,-16(fp)
    4e18:	e1fffd17 	ldw	r7,-12(fp)
    4e1c:	0004cb00 	call	4cb0 <dmac_read>

	dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
    4e20:	e0bffe17 	ldw	r2,-8(fp)
    4e24:	d8800115 	stw	r2,4(sp)
    4e28:	00802104 	movi	r2,132
    4e2c:	d8800015 	stw	r2,0(sp)
    4e30:	e13ffa17 	ldw	r4,-24(fp)
    4e34:	e17ffb17 	ldw	r5,-20(fp)
    4e38:	e1bffc17 	ldw	r6,-16(fp)
    4e3c:	e1fffd17 	ldw	r7,-12(fp)
    4e40:	0004cfc0 	call	4cfc <dmac_write>

	if(dma.type == DMAC_RX) {
    4e44:	e0bffb03 	ldbu	r2,-20(fp)
    4e48:	10803fcc 	andi	r2,r2,255
    4e4c:	10001b1e 	bne	r2,zero,4ebc <dmac_start_transaction+0x178>
    4e50:	00000706 	br	4e70 <dmac_start_transaction+0x12c>
                ad_printf("%s : Undefined DMA transfer.\n", __func__);
    4e54:	014000b4 	movhi	r5,2
    4e58:	29574f04 	addi	r5,r5,23868
    4e5c:	010000b4 	movhi	r4,2
    4e60:	21174704 	addi	r4,r4,23836
    4e64:	0010ec40 	call	10ec4 <printf>
                return -1;
    4e68:	00bfffc4 	movi	r2,-1
    4e6c:	00009306 	br	50bc <dmac_start_transaction+0x378>
		dmac_write(dma, DMAC_REG_DEST_ADDRESS, dma.transfer->start_address);
    4e70:	e0bffd17 	ldw	r2,-12(fp)
    4e74:	10800117 	ldw	r2,4(r2)
    4e78:	d8800115 	stw	r2,4(sp)
    4e7c:	00810404 	movi	r2,1040
    4e80:	d8800015 	stw	r2,0(sp)
    4e84:	e13ffa17 	ldw	r4,-24(fp)
    4e88:	e17ffb17 	ldw	r5,-20(fp)
    4e8c:	e1bffc17 	ldw	r6,-16(fp)
    4e90:	e1fffd17 	ldw	r7,-12(fp)
    4e94:	0004cfc0 	call	4cfc <dmac_write>
		dmac_write(dma, DMAC_REG_DEST_STRIDE, 0x0);
    4e98:	d8000115 	stw	zero,4(sp)
    4e9c:	00810804 	movi	r2,1056
    4ea0:	d8800015 	stw	r2,0(sp)
    4ea4:	e13ffa17 	ldw	r4,-24(fp)
    4ea8:	e17ffb17 	ldw	r5,-20(fp)
    4eac:	e1bffc17 	ldw	r6,-16(fp)
    4eb0:	e1fffd17 	ldw	r7,-12(fp)
    4eb4:	0004cfc0 	call	4cfc <dmac_write>
    4eb8:	00001c06 	br	4f2c <dmac_start_transaction+0x1e8>
	} else {    /* DMAC_TX */
		dmac_write(dma, DMAC_REG_SRC_ADDRESS, dma.transfer->start_address);
    4ebc:	e0bffd17 	ldw	r2,-12(fp)
    4ec0:	10800117 	ldw	r2,4(r2)
    4ec4:	d8800115 	stw	r2,4(sp)
    4ec8:	00810504 	movi	r2,1044
    4ecc:	d8800015 	stw	r2,0(sp)
    4ed0:	e13ffa17 	ldw	r4,-24(fp)
    4ed4:	e17ffb17 	ldw	r5,-20(fp)
    4ed8:	e1bffc17 	ldw	r6,-16(fp)
    4edc:	e1fffd17 	ldw	r7,-12(fp)
    4ee0:	0004cfc0 	call	4cfc <dmac_write>
		dmac_write(dma, DMAC_REG_SRC_STRIDE, 0x0);
    4ee4:	d8000115 	stw	zero,4(sp)
    4ee8:	00810904 	movi	r2,1060
    4eec:	d8800015 	stw	r2,0(sp)
    4ef0:	e13ffa17 	ldw	r4,-24(fp)
    4ef4:	e17ffb17 	ldw	r5,-20(fp)
    4ef8:	e1bffc17 	ldw	r6,-16(fp)
    4efc:	e1fffd17 	ldw	r7,-12(fp)
    4f00:	0004cfc0 	call	4cfc <dmac_write>
		dmac_write(dma, DMAC_REG_FLAGS, dma.flags);
    4f04:	e0bffb43 	ldbu	r2,-19(fp)
    4f08:	10803fcc 	andi	r2,r2,255
    4f0c:	d8800115 	stw	r2,4(sp)
    4f10:	00810304 	movi	r2,1036
    4f14:	d8800015 	stw	r2,0(sp)
    4f18:	e13ffa17 	ldw	r4,-24(fp)
    4f1c:	e17ffb17 	ldw	r5,-20(fp)
    4f20:	e1bffc17 	ldw	r6,-16(fp)
    4f24:	e1fffd17 	ldw	r7,-12(fp)
    4f28:	0004cfc0 	call	4cfc <dmac_write>
	}
	dmac_write(dma, DMAC_REG_X_LENGTH, (2 * dma.transfer->no_of_samples) - 1);
    4f2c:	e0bffd17 	ldw	r2,-12(fp)
    4f30:	10800217 	ldw	r2,8(r2)
    4f34:	1085883a 	add	r2,r2,r2
    4f38:	10bfffc4 	addi	r2,r2,-1
    4f3c:	d8800115 	stw	r2,4(sp)
    4f40:	00810604 	movi	r2,1048
    4f44:	d8800015 	stw	r2,0(sp)
    4f48:	e13ffa17 	ldw	r4,-24(fp)
    4f4c:	e17ffb17 	ldw	r5,-20(fp)
    4f50:	e1bffc17 	ldw	r6,-16(fp)
    4f54:	e1fffd17 	ldw	r7,-12(fp)
    4f58:	0004cfc0 	call	4cfc <dmac_write>
	dmac_write(dma, DMAC_REG_Y_LENGTH, 0x0);
    4f5c:	d8000115 	stw	zero,4(sp)
    4f60:	00810704 	movi	r2,1052
    4f64:	d8800015 	stw	r2,0(sp)
    4f68:	e13ffa17 	ldw	r4,-24(fp)
    4f6c:	e17ffb17 	ldw	r5,-20(fp)
    4f70:	e1bffc17 	ldw	r6,-16(fp)
    4f74:	e1fffd17 	ldw	r7,-12(fp)
    4f78:	0004cfc0 	call	4cfc <dmac_write>

	dmac_write(dma, DMAC_REG_START_TRANSFER, 0x1);
    4f7c:	00800044 	movi	r2,1
    4f80:	d8800115 	stw	r2,4(sp)
    4f84:	00810204 	movi	r2,1032
    4f88:	d8800015 	stw	r2,0(sp)
    4f8c:	e13ffa17 	ldw	r4,-24(fp)
    4f90:	e17ffb17 	ldw	r5,-20(fp)
    4f94:	e1bffc17 	ldw	r6,-16(fp)
    4f98:	e1fffd17 	ldw	r7,-12(fp)
    4f9c:	0004cfc0 	call	4cfc <dmac_write>
	if (dma.flags & DMAC_FLAGS_CYCLIC)
    4fa0:	e0bffb43 	ldbu	r2,-19(fp)
    4fa4:	10803fcc 	andi	r2,r2,255
    4fa8:	1080004c 	andi	r2,r2,1
    4fac:	10000226 	beq	r2,zero,4fb8 <dmac_start_transaction+0x274>
		return 0;
    4fb0:	0005883a 	mov	r2,zero
    4fb4:	00004106 	br	50bc <dmac_start_transaction+0x378>
	/* Wait until the new transfer is queued. */
	do {
		dmac_read(dma, DMAC_REG_START_TRANSFER, &reg_val);
    4fb8:	e0bffe04 	addi	r2,fp,-8
    4fbc:	d8800115 	stw	r2,4(sp)
    4fc0:	00810204 	movi	r2,1032
    4fc4:	d8800015 	stw	r2,0(sp)
    4fc8:	e13ffa17 	ldw	r4,-24(fp)
    4fcc:	e17ffb17 	ldw	r5,-20(fp)
    4fd0:	e1bffc17 	ldw	r6,-16(fp)
    4fd4:	e1fffd17 	ldw	r7,-12(fp)
    4fd8:	0004cb00 	call	4cb0 <dmac_read>
	}
	while(reg_val == 1);
    4fdc:	e0bffe17 	ldw	r2,-8(fp)
    4fe0:	10800060 	cmpeqi	r2,r2,1
    4fe4:	103ff41e 	bne	r2,zero,4fb8 <__alt_mem_mcu_subsystem_ram_0+0x77fe4fb8>

	/* Wait until the current transfer is completed. */
	do {
		dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
    4fe8:	e0bffe04 	addi	r2,fp,-8
    4fec:	d8800115 	stw	r2,4(sp)
    4ff0:	00802104 	movi	r2,132
    4ff4:	d8800015 	stw	r2,0(sp)
    4ff8:	e13ffa17 	ldw	r4,-24(fp)
    4ffc:	e17ffb17 	ldw	r5,-20(fp)
    5000:	e1bffc17 	ldw	r6,-16(fp)
    5004:	e1fffd17 	ldw	r7,-12(fp)
    5008:	0004cb00 	call	4cb0 <dmac_read>
	}
	while(reg_val != (DMAC_IRQ_SOT | DMAC_IRQ_EOT));
    500c:	e0bffe17 	ldw	r2,-8(fp)
    5010:	108000d8 	cmpnei	r2,r2,3
    5014:	103ff41e 	bne	r2,zero,4fe8 <__alt_mem_mcu_subsystem_ram_0+0x77fe4fe8>
	dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
    5018:	e0bffe17 	ldw	r2,-8(fp)
    501c:	d8800115 	stw	r2,4(sp)
    5020:	00802104 	movi	r2,132
    5024:	d8800015 	stw	r2,0(sp)
    5028:	e13ffa17 	ldw	r4,-24(fp)
    502c:	e17ffb17 	ldw	r5,-20(fp)
    5030:	e1bffc17 	ldw	r6,-16(fp)
    5034:	e1fffd17 	ldw	r7,-12(fp)
    5038:	0004cfc0 	call	4cfc <dmac_write>

	/* Wait until the transfer with the ID transfer_id is completed. */
	do {
		dmac_read(dma, DMAC_REG_TRANSFER_DONE, &reg_val);
    503c:	e0bffe04 	addi	r2,fp,-8
    5040:	d8800115 	stw	r2,4(sp)
    5044:	00810a04 	movi	r2,1064
    5048:	d8800015 	stw	r2,0(sp)
    504c:	e13ffa17 	ldw	r4,-24(fp)
    5050:	e17ffb17 	ldw	r5,-20(fp)
    5054:	e1bffc17 	ldw	r6,-16(fp)
    5058:	e1fffd17 	ldw	r7,-12(fp)
    505c:	0004cb00 	call	4cb0 <dmac_read>
		timer++;
    5060:	e0bfff17 	ldw	r2,-4(fp)
    5064:	10800044 	addi	r2,r2,1
    5068:	e0bfff15 	stw	r2,-4(fp)
		if(timer == TIMEOUT) {
    506c:	e0bfff17 	ldw	r2,-4(fp)
    5070:	1089c418 	cmpnei	r2,r2,10000
    5074:	1000021e 	bne	r2,zero,5080 <dmac_start_transaction+0x33c>
			return -1;
    5078:	00bfffc4 	movi	r2,-1
    507c:	00000f06 	br	50bc <dmac_start_transaction+0x378>
		}
		mdelay(1);
    5080:	0100fa04 	movi	r4,1000
    5084:	00206540 	call	20654 <usleep>
	}
	while((reg_val & (1 << dma.transfer->id)) != (1 << dma.transfer->id));
    5088:	e0bffd17 	ldw	r2,-12(fp)
    508c:	10800017 	ldw	r2,0(r2)
    5090:	00c00044 	movi	r3,1
    5094:	1884983a 	sll	r2,r3,r2
    5098:	1007883a 	mov	r3,r2
    509c:	e0bffe17 	ldw	r2,-8(fp)
    50a0:	1884703a 	and	r2,r3,r2
    50a4:	e0fffd17 	ldw	r3,-12(fp)
    50a8:	18c00017 	ldw	r3,0(r3)
    50ac:	01000044 	movi	r4,1
    50b0:	20c6983a 	sll	r3,r4,r3
    50b4:	10ffe11e 	bne	r2,r3,503c <__alt_mem_mcu_subsystem_ram_0+0x77fe503c>

#ifdef XILINX
	Xil_DCacheInvalidateRange(dma.transfer->start_address, (2 * dma.transfer->no_of_samples));
#endif

	return 0;
    50b8:	0005883a 	mov	r2,zero
}
    50bc:	e037883a 	mov	sp,fp
    50c0:	dfc00117 	ldw	ra,4(sp)
    50c4:	df000017 	ldw	fp,0(sp)
    50c8:	dec00204 	addi	sp,sp,8
    50cc:	f800283a 	ret

000050d0 <calc_zero_checksum>:
 * The modulo 256 sum of the preceding bytes (starting with the first byte
 * of the header) plus the checksum byte equals zero.
 * Platform Management FRU Information Storage Definition : section 16.2.[56]
 */
unsigned char calc_zero_checksum (unsigned char *data, size_t len)
{
    50d0:	defffb04 	addi	sp,sp,-20
    50d4:	df000415 	stw	fp,16(sp)
    50d8:	df000404 	addi	fp,sp,16
    50dc:	e13ffd15 	stw	r4,-12(fp)
    50e0:	e17ffc15 	stw	r5,-16(fp)
	size_t i;
	unsigned char tmp = 0;
    50e4:	e03ffec5 	stb	zero,-5(fp)

	for (i = 0; i <= len; i++)
    50e8:	e03fff15 	stw	zero,-4(fp)
    50ec:	00000a06 	br	5118 <calc_zero_checksum+0x48>
		tmp += data[i];
    50f0:	e0fffd17 	ldw	r3,-12(fp)
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	1885883a 	add	r2,r3,r2
    50fc:	10800003 	ldbu	r2,0(r2)
    5100:	e0fffec3 	ldbu	r3,-5(fp)
    5104:	1885883a 	add	r2,r3,r2
    5108:	e0bffec5 	stb	r2,-5(fp)
	for (i = 0; i <= len; i++)
    510c:	e0bfff17 	ldw	r2,-4(fp)
    5110:	10800044 	addi	r2,r2,1
    5114:	e0bfff15 	stw	r2,-4(fp)
    5118:	e0bfff17 	ldw	r2,-4(fp)
    511c:	e0fffc17 	ldw	r3,-16(fp)
    5120:	18bff32e 	bgeu	r3,r2,50f0 <__alt_mem_mcu_subsystem_ram_0+0x77fe50f0>

	return tmp;
    5124:	e0bffec3 	ldbu	r2,-5(fp)
}
    5128:	e037883a 	mov	sp,fp
    512c:	df000017 	ldw	fp,0(sp)
    5130:	dec00104 	addi	sp,sp,4
    5134:	f800283a 	ret

00005138 <min2date>:
 *   up to : Wed Nov 24 07:56 2027
 * See:
 *   section 11, Platform Management FRU Information Storage Definition
 */
time_t min2date(unsigned int mins)
{
    5138:	defff104 	addi	sp,sp,-60
    513c:	dfc00e15 	stw	ra,56(sp)
    5140:	df000d15 	stw	fp,52(sp)
    5144:	df000d04 	addi	fp,sp,52
    5148:	e13ff315 	stw	r4,-52(fp)
	struct tm tm;
	time_t tmp;

	/* Set up 01-Jan-1996 , and add the number of minutes to it */
	memset(&tm, 0, sizeof(struct tm));
    514c:	e0bff404 	addi	r2,fp,-48
    5150:	01800b04 	movi	r6,44
    5154:	000b883a 	mov	r5,zero
    5158:	1009883a 	mov	r4,r2
    515c:	00107280 	call	10728 <memset>
	tm.tm_year = 96;
    5160:	00801804 	movi	r2,96
    5164:	e0bff915 	stw	r2,-28(fp)
	tm.tm_mday = 1;
    5168:	00800044 	movi	r2,1
    516c:	e0bff715 	stw	r2,-36(fp)
	tm.tm_min += mins;
    5170:	e0bff517 	ldw	r2,-44(fp)
    5174:	1007883a 	mov	r3,r2
    5178:	e0bff317 	ldw	r2,-52(fp)
    517c:	1885883a 	add	r2,r3,r2
    5180:	e0bff515 	stw	r2,-44(fp)
	tmp = mktime(&tm);
    5184:	e0bff404 	addi	r2,fp,-48
    5188:	1009883a 	mov	r4,r2
    518c:	0010ad40 	call	10ad4 <mktime>
    5190:	e0bfff15 	stw	r2,-4(fp)
	return tmp;
    5194:	e0bfff17 	ldw	r2,-4(fp)
}
    5198:	e037883a 	mov	sp,fp
    519c:	dfc00117 	ldw	ra,4(sp)
    51a0:	df000017 	ldw	fp,0(sp)
    51a4:	dec00204 	addi	sp,sp,8
    51a8:	f800283a 	ret

000051ac <ascii2six>:
/*
 * 6-bit ASCII Packing
 * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
int ascii2six(unsigned char **dest, unsigned char *src, size_t size)
{
    51ac:	defff204 	addi	sp,sp,-56
    51b0:	dfc00d15 	stw	ra,52(sp)
    51b4:	df000c15 	stw	fp,48(sp)
    51b8:	df000c04 	addi	fp,sp,48
    51bc:	e13ff715 	stw	r4,-36(fp)
    51c0:	e17ff615 	stw	r5,-40(fp)
    51c4:	e1bff515 	stw	r6,-44(fp)
	size_t i = 0;
    51c8:	e03fff15 	stw	zero,-4(fp)
	ssize_t j;
	unsigned int k, m = 0;
    51cc:	e03ffe15 	stw	zero,-8(fp)
	unsigned char *p, *d, *e;

	if (!src || !size)
    51d0:	e0bff617 	ldw	r2,-40(fp)
    51d4:	10000226 	beq	r2,zero,51e0 <ascii2six+0x34>
    51d8:	e0bff517 	ldw	r2,-44(fp)
    51dc:	1000021e 	bne	r2,zero,51e8 <ascii2six+0x3c>
		return 0;
    51e0:	0005883a 	mov	r2,zero
    51e4:	0000a506 	br	547c <ascii2six+0x2d0>

	e = d = calloc(1, size);
    51e8:	e17ff517 	ldw	r5,-44(fp)
    51ec:	01000044 	movi	r4,1
    51f0:	000fb200 	call	fb20 <calloc>
    51f4:	e0bffc15 	stw	r2,-16(fp)
    51f8:	e0bffc17 	ldw	r2,-16(fp)
    51fc:	e0bffb15 	stw	r2,-20(fp)

	p = src;
    5200:	e0bff617 	ldw	r2,-40(fp)
    5204:	e0bffd15 	stw	r2,-12(fp)
	/*
	 * 6-bit requires uppercase chars, between 0 and 0x3f
	 */
	while (*p != '\0' && i <= size) {
    5208:	00003706 	br	52e8 <ascii2six+0x13c>
		j = toupper(*p) - 0x20;
    520c:	e0bffd17 	ldw	r2,-12(fp)
    5210:	10800003 	ldbu	r2,0(r2)
    5214:	e0bffac5 	stb	r2,-21(fp)
    5218:	000fda00 	call	fda0 <__locale_ctype_ptr>
    521c:	1007883a 	mov	r3,r2
    5220:	e0bffac3 	ldbu	r2,-21(fp)
    5224:	10800044 	addi	r2,r2,1
    5228:	1885883a 	add	r2,r3,r2
    522c:	10800003 	ldbu	r2,0(r2)
    5230:	10803fcc 	andi	r2,r2,255
    5234:	108000cc 	andi	r2,r2,3
    5238:	10800098 	cmpnei	r2,r2,2
    523c:	1000031e 	bne	r2,zero,524c <ascii2six+0xa0>
    5240:	e0bffac3 	ldbu	r2,-21(fp)
    5244:	10bff804 	addi	r2,r2,-32
    5248:	00000106 	br	5250 <ascii2six+0xa4>
    524c:	e0bffac3 	ldbu	r2,-21(fp)
    5250:	10bff804 	addi	r2,r2,-32
    5254:	e0bff915 	stw	r2,-28(fp)
		if (j < 0 || j >= 0x40) {
    5258:	e0bff917 	ldw	r2,-28(fp)
    525c:	10000316 	blt	r2,zero,526c <ascii2six+0xc0>
    5260:	e0bff917 	ldw	r2,-28(fp)
    5264:	10801010 	cmplti	r2,r2,64
    5268:	1000121e 	bne	r2,zero,52b4 <ascii2six+0x108>
			printf_warn("%s : trying to convert a string '%s'\n"
    526c:	e0bffd17 	ldw	r2,-12(fp)
    5270:	10800003 	ldbu	r2,0(r2)
    5274:	10c03fcc 	andi	r3,r2,255
    5278:	e0bffd17 	ldw	r2,-12(fp)
    527c:	10800003 	ldbu	r2,0(r2)
    5280:	10803fcc 	andi	r2,r2,255
    5284:	d8800015 	stw	r2,0(sp)
    5288:	180f883a 	mov	r7,r3
    528c:	e1bff617 	ldw	r6,-40(fp)
    5290:	014000b4 	movhi	r5,2
    5294:	2958cb04 	addi	r5,r5,25388
    5298:	010000b4 	movhi	r4,2
    529c:	21175504 	addi	r4,r4,23892
    52a0:	0010ec40 	call	10ec4 <printf>
					"\t\twhich includes char '%c (0x%x)', which can't be converted\n",
					__func__, src, *p, *p);
			free(e);
    52a4:	e13ffb17 	ldw	r4,-20(fp)
    52a8:	000fde40 	call	fde4 <free>
			return -1;
    52ac:	00bfffc4 	movi	r2,-1
    52b0:	00007206 	br	547c <ascii2six+0x2d0>
		}
		*d = j;
    52b4:	e0bff917 	ldw	r2,-28(fp)
    52b8:	1007883a 	mov	r3,r2
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	10c00005 	stb	r3,0(r2)
		++p, ++d, i++;
    52c4:	e0bffd17 	ldw	r2,-12(fp)
    52c8:	10800044 	addi	r2,r2,1
    52cc:	e0bffd15 	stw	r2,-12(fp)
    52d0:	e0bffc17 	ldw	r2,-16(fp)
    52d4:	10800044 	addi	r2,r2,1
    52d8:	e0bffc15 	stw	r2,-16(fp)
    52dc:	e0bfff17 	ldw	r2,-4(fp)
    52e0:	10800044 	addi	r2,r2,1
    52e4:	e0bfff15 	stw	r2,-4(fp)
	while (*p != '\0' && i <= size) {
    52e8:	e0bffd17 	ldw	r2,-12(fp)
    52ec:	10800003 	ldbu	r2,0(r2)
    52f0:	10803fcc 	andi	r2,r2,255
    52f4:	10000326 	beq	r2,zero,5304 <ascii2six+0x158>
    52f8:	e0bfff17 	ldw	r2,-4(fp)
    52fc:	e0fff517 	ldw	r3,-44(fp)
    5300:	18bfc22e 	bgeu	r3,r2,520c <__alt_mem_mcu_subsystem_ram_0+0x77fe520c>
	}

	/* the length of dest, should be 3/4 of size, it's zero padded at the end */
	*dest = calloc(1, size + 1);
    5304:	e0bff517 	ldw	r2,-44(fp)
    5308:	10800044 	addi	r2,r2,1
    530c:	100b883a 	mov	r5,r2
    5310:	01000044 	movi	r4,1
    5314:	000fb200 	call	fb20 <calloc>
    5318:	1007883a 	mov	r3,r2
    531c:	e0bff717 	ldw	r2,-36(fp)
    5320:	10c00015 	stw	r3,0(r2)
	p = *dest;
    5324:	e0bff717 	ldw	r2,-36(fp)
    5328:	10800017 	ldw	r2,0(r2)
    532c:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i <= size ; i+= 4) {
    5330:	e03fff15 	stw	zero,-4(fp)
    5334:	00004b06 	br	5464 <ascii2six+0x2b8>
		k = e[i];
    5338:	e0fffb17 	ldw	r3,-20(fp)
    533c:	e0bfff17 	ldw	r2,-4(fp)
    5340:	1885883a 	add	r2,r3,r2
    5344:	10800003 	ldbu	r2,0(r2)
    5348:	10803fcc 	andi	r2,r2,255
    534c:	e0bff815 	stw	r2,-32(fp)
		m++;
    5350:	e0bffe17 	ldw	r2,-8(fp)
    5354:	10800044 	addi	r2,r2,1
    5358:	e0bffe15 	stw	r2,-8(fp)
		if ((i + 1) < size) {
    535c:	e0bfff17 	ldw	r2,-4(fp)
    5360:	10c00044 	addi	r3,r2,1
    5364:	e0bff517 	ldw	r2,-44(fp)
    5368:	18800e2e 	bgeu	r3,r2,53a4 <ascii2six+0x1f8>
			k |= e[i + 1] << 6;
    536c:	e0bfff17 	ldw	r2,-4(fp)
    5370:	10800044 	addi	r2,r2,1
    5374:	e0fffb17 	ldw	r3,-20(fp)
    5378:	1885883a 	add	r2,r3,r2
    537c:	10800003 	ldbu	r2,0(r2)
    5380:	10803fcc 	andi	r2,r2,255
    5384:	100491ba 	slli	r2,r2,6
    5388:	1007883a 	mov	r3,r2
    538c:	e0bff817 	ldw	r2,-32(fp)
    5390:	1884b03a 	or	r2,r3,r2
    5394:	e0bff815 	stw	r2,-32(fp)
			m++;
    5398:	e0bffe17 	ldw	r2,-8(fp)
    539c:	10800044 	addi	r2,r2,1
    53a0:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 2) < size) {
    53a4:	e0bfff17 	ldw	r2,-4(fp)
    53a8:	10c00084 	addi	r3,r2,2
    53ac:	e0bff517 	ldw	r2,-44(fp)
    53b0:	18800e2e 	bgeu	r3,r2,53ec <ascii2six+0x240>
			k |= e[i + 2] << 12;
    53b4:	e0bfff17 	ldw	r2,-4(fp)
    53b8:	10800084 	addi	r2,r2,2
    53bc:	e0fffb17 	ldw	r3,-20(fp)
    53c0:	1885883a 	add	r2,r3,r2
    53c4:	10800003 	ldbu	r2,0(r2)
    53c8:	10803fcc 	andi	r2,r2,255
    53cc:	1004933a 	slli	r2,r2,12
    53d0:	1007883a 	mov	r3,r2
    53d4:	e0bff817 	ldw	r2,-32(fp)
    53d8:	1884b03a 	or	r2,r3,r2
    53dc:	e0bff815 	stw	r2,-32(fp)
			m++;
    53e0:	e0bffe17 	ldw	r2,-8(fp)
    53e4:	10800044 	addi	r2,r2,1
    53e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 3) < size) {
    53ec:	e0bfff17 	ldw	r2,-4(fp)
    53f0:	10c000c4 	addi	r3,r2,3
    53f4:	e0bff517 	ldw	r2,-44(fp)
    53f8:	18800b2e 	bgeu	r3,r2,5428 <ascii2six+0x27c>
			k |= e[i + 3] << 18;
    53fc:	e0bfff17 	ldw	r2,-4(fp)
    5400:	108000c4 	addi	r2,r2,3
    5404:	e0fffb17 	ldw	r3,-20(fp)
    5408:	1885883a 	add	r2,r3,r2
    540c:	10800003 	ldbu	r2,0(r2)
    5410:	10803fcc 	andi	r2,r2,255
    5414:	100494ba 	slli	r2,r2,18
    5418:	1007883a 	mov	r3,r2
    541c:	e0bff817 	ldw	r2,-32(fp)
    5420:	1884b03a 	or	r2,r3,r2
    5424:	e0bff815 	stw	r2,-32(fp)
		}
#if __BYTE_ORDER == __BIG_ENDIAN
		k = __builtin_bswap32(k);
    5428:	e0bff817 	ldw	r2,-32(fp)
    542c:	1009883a 	mov	r4,r2
    5430:	000c9c00 	call	c9c0 <__bswapsi2>
    5434:	e0bff815 	stw	r2,-32(fp)
#endif
		memcpy(p, &k, 3);
    5438:	e0bff804 	addi	r2,fp,-32
    543c:	018000c4 	movi	r6,3
    5440:	100b883a 	mov	r5,r2
    5444:	e13ffd17 	ldw	r4,-12(fp)
    5448:	00106380 	call	10638 <memcpy>
		p += 3;
    544c:	e0bffd17 	ldw	r2,-12(fp)
    5450:	108000c4 	addi	r2,r2,3
    5454:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i <= size ; i+= 4) {
    5458:	e0bfff17 	ldw	r2,-4(fp)
    545c:	10800104 	addi	r2,r2,4
    5460:	e0bfff15 	stw	r2,-4(fp)
    5464:	e0bfff17 	ldw	r2,-4(fp)
    5468:	e0fff517 	ldw	r3,-44(fp)
    546c:	18bfb22e 	bgeu	r3,r2,5338 <__alt_mem_mcu_subsystem_ram_0+0x77fe5338>
	}

	free (e);
    5470:	e13ffb17 	ldw	r4,-20(fp)
    5474:	000fde40 	call	fde4 <free>

	return  m;
    5478:	e0bffe17 	ldw	r2,-8(fp)
}
    547c:	e037883a 	mov	sp,fp
    5480:	dfc00117 	ldw	ra,4(sp)
    5484:	df000017 	ldw	fp,0(sp)
    5488:	dec00204 	addi	sp,sp,8
    548c:	f800283a 	ret

00005490 <six2ascii>:
/*
 *  * 6-bit ASCII Unpacking
 *   * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
unsigned char * six2ascii(unsigned char *buf, size_t size)
{
    5490:	defff904 	addi	sp,sp,-28
    5494:	dfc00615 	stw	ra,24(sp)
    5498:	df000515 	stw	fp,20(sp)
    549c:	df000504 	addi	fp,sp,20
    54a0:	e13ffc15 	stw	r4,-16(fp)
    54a4:	e17ffb15 	stw	r5,-20(fp)
	unsigned char *p, *dest;
	size_t i;

	if (!size)
    54a8:	e0bffb17 	ldw	r2,-20(fp)
    54ac:	1000021e 	bne	r2,zero,54b8 <six2ascii+0x28>
		return NULL;
    54b0:	0005883a 	mov	r2,zero
    54b4:	00008206 	br	56c0 <six2ascii+0x230>

	/* the length of dest, should be 4/3 of size + 1 for null termination char*/
	dest = calloc(1, ((size * 4) / 3) + 2);
    54b8:	e0bffb17 	ldw	r2,-20(fp)
    54bc:	100690ba 	slli	r3,r2,2
    54c0:	008000c4 	movi	r2,3
    54c4:	1885203a 	divu	r2,r3,r2
    54c8:	10800084 	addi	r2,r2,2
    54cc:	100b883a 	mov	r5,r2
    54d0:	01000044 	movi	r4,1
    54d4:	000fb200 	call	fb20 <calloc>
    54d8:	e0bfff15 	stw	r2,-4(fp)
	p = dest;
    54dc:	e0bfff17 	ldw	r2,-4(fp)
    54e0:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i < size; i += 3) {
    54e4:	e03ffe15 	stw	zero,-8(fp)
    54e8:	00005806 	br	564c <six2ascii+0x1bc>
		*dest = (buf[i] & 0x3F) + 0x20;
    54ec:	e0fffc17 	ldw	r3,-16(fp)
    54f0:	e0bffe17 	ldw	r2,-8(fp)
    54f4:	1885883a 	add	r2,r3,r2
    54f8:	10800003 	ldbu	r2,0(r2)
    54fc:	10800fcc 	andi	r2,r2,63
    5500:	10800804 	addi	r2,r2,32
    5504:	1007883a 	mov	r3,r2
    5508:	e0bfff17 	ldw	r2,-4(fp)
    550c:	10c00005 	stb	r3,0(r2)
		/* printf("1: %i: 0x%x (%c)\n", i, *dest, *dest); */
		dest++;
    5510:	e0bfff17 	ldw	r2,-4(fp)
    5514:	10800044 	addi	r2,r2,1
    5518:	e0bfff15 	stw	r2,-4(fp)
		if ((i + 1) < size) {
    551c:	e0bffe17 	ldw	r2,-8(fp)
    5520:	10c00044 	addi	r3,r2,1
    5524:	e0bffb17 	ldw	r2,-20(fp)
    5528:	1880172e 	bgeu	r3,r2,5588 <six2ascii+0xf8>
			*dest = ((buf[i] & 0xC0) >> 6 | (buf[i+1] & 0x0F) << 2) + 0x20;
    552c:	e0fffc17 	ldw	r3,-16(fp)
    5530:	e0bffe17 	ldw	r2,-8(fp)
    5534:	1885883a 	add	r2,r3,r2
    5538:	10800003 	ldbu	r2,0(r2)
    553c:	10803fcc 	andi	r2,r2,255
    5540:	1004d1ba 	srli	r2,r2,6
    5544:	1009883a 	mov	r4,r2
    5548:	e0bffe17 	ldw	r2,-8(fp)
    554c:	10800044 	addi	r2,r2,1
    5550:	e0fffc17 	ldw	r3,-16(fp)
    5554:	1885883a 	add	r2,r3,r2
    5558:	10800003 	ldbu	r2,0(r2)
    555c:	10803fcc 	andi	r2,r2,255
    5560:	100490ba 	slli	r2,r2,2
    5564:	10800f0c 	andi	r2,r2,60
    5568:	2084b03a 	or	r2,r4,r2
    556c:	10800804 	addi	r2,r2,32
    5570:	1007883a 	mov	r3,r2
    5574:	e0bfff17 	ldw	r2,-4(fp)
    5578:	10c00005 	stb	r3,0(r2)
			/* printf("2: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    557c:	e0bfff17 	ldw	r2,-4(fp)
    5580:	10800044 	addi	r2,r2,1
    5584:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 2) < size) {
    5588:	e0bffe17 	ldw	r2,-8(fp)
    558c:	10c00084 	addi	r3,r2,2
    5590:	e0bffb17 	ldw	r2,-20(fp)
    5594:	1880182e 	bgeu	r3,r2,55f8 <six2ascii+0x168>
			*dest = ((buf[i+1] & 0xF0) >> 4 | (buf[i+2] & 0x03) << 4) + 0x20;
    5598:	e0bffe17 	ldw	r2,-8(fp)
    559c:	10800044 	addi	r2,r2,1
    55a0:	e0fffc17 	ldw	r3,-16(fp)
    55a4:	1885883a 	add	r2,r3,r2
    55a8:	10800003 	ldbu	r2,0(r2)
    55ac:	10803fcc 	andi	r2,r2,255
    55b0:	1004d13a 	srli	r2,r2,4
    55b4:	1009883a 	mov	r4,r2
    55b8:	e0bffe17 	ldw	r2,-8(fp)
    55bc:	10800084 	addi	r2,r2,2
    55c0:	e0fffc17 	ldw	r3,-16(fp)
    55c4:	1885883a 	add	r2,r3,r2
    55c8:	10800003 	ldbu	r2,0(r2)
    55cc:	10803fcc 	andi	r2,r2,255
    55d0:	1004913a 	slli	r2,r2,4
    55d4:	10800c0c 	andi	r2,r2,48
    55d8:	2084b03a 	or	r2,r4,r2
    55dc:	10800804 	addi	r2,r2,32
    55e0:	1007883a 	mov	r3,r2
    55e4:	e0bfff17 	ldw	r2,-4(fp)
    55e8:	10c00005 	stb	r3,0(r2)
			/* printf("3: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    55ec:	e0bfff17 	ldw	r2,-4(fp)
    55f0:	10800044 	addi	r2,r2,1
    55f4:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 3) < size) {
    55f8:	e0bffe17 	ldw	r2,-8(fp)
    55fc:	10c000c4 	addi	r3,r2,3
    5600:	e0bffb17 	ldw	r2,-20(fp)
    5604:	18800e2e 	bgeu	r3,r2,5640 <six2ascii+0x1b0>
			*dest = ((buf[i+2] & 0xFC) >> 2) + 0x20;
    5608:	e0bffe17 	ldw	r2,-8(fp)
    560c:	10800084 	addi	r2,r2,2
    5610:	e0fffc17 	ldw	r3,-16(fp)
    5614:	1885883a 	add	r2,r3,r2
    5618:	10800003 	ldbu	r2,0(r2)
    561c:	10803fcc 	andi	r2,r2,255
    5620:	1004d0ba 	srli	r2,r2,2
    5624:	10800804 	addi	r2,r2,32
    5628:	1007883a 	mov	r3,r2
    562c:	e0bfff17 	ldw	r2,-4(fp)
    5630:	10c00005 	stb	r3,0(r2)
			/* printf("4: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
    5634:	e0bfff17 	ldw	r2,-4(fp)
    5638:	10800044 	addi	r2,r2,1
    563c:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < size; i += 3) {
    5640:	e0bffe17 	ldw	r2,-8(fp)
    5644:	108000c4 	addi	r2,r2,3
    5648:	e0bffe15 	stw	r2,-8(fp)
    564c:	e0fffe17 	ldw	r3,-8(fp)
    5650:	e0bffb17 	ldw	r2,-20(fp)
    5654:	18bfa536 	bltu	r3,r2,54ec <__alt_mem_mcu_subsystem_ram_0+0x77fe54ec>
		}
	}
	/* make sure strings are null terminated */
	*dest = 0;
    5658:	e0bfff17 	ldw	r2,-4(fp)
    565c:	10000005 	stb	zero,0(r2)

	/* Drop trailing spaces & null chars */
	dest--;
    5660:	e0bfff17 	ldw	r2,-4(fp)
    5664:	10bfffc4 	addi	r2,r2,-1
    5668:	e0bfff15 	stw	r2,-4(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
    566c:	00000806 	br	5690 <six2ascii+0x200>
		*dest = 0;
    5670:	e0bfff17 	ldw	r2,-4(fp)
    5674:	10000005 	stb	zero,0(r2)
		dest--;
    5678:	e0bfff17 	ldw	r2,-4(fp)
    567c:	10bfffc4 	addi	r2,r2,-1
    5680:	e0bfff15 	stw	r2,-4(fp)
		size--;
    5684:	e0bffb17 	ldw	r2,-20(fp)
    5688:	10bfffc4 	addi	r2,r2,-1
    568c:	e0bffb15 	stw	r2,-20(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
    5690:	e0bfff17 	ldw	r2,-4(fp)
    5694:	10800003 	ldbu	r2,0(r2)
    5698:	10803fcc 	andi	r2,r2,255
    569c:	10000526 	beq	r2,zero,56b4 <six2ascii+0x224>
    56a0:	e0bfff17 	ldw	r2,-4(fp)
    56a4:	10800003 	ldbu	r2,0(r2)
    56a8:	10803fcc 	andi	r2,r2,255
    56ac:	10800818 	cmpnei	r2,r2,32
    56b0:	1000021e 	bne	r2,zero,56bc <six2ascii+0x22c>
    56b4:	e0bffb17 	ldw	r2,-20(fp)
    56b8:	103fed1e 	bne	r2,zero,5670 <__alt_mem_mcu_subsystem_ram_0+0x77fe5670>
	}

	return p;
    56bc:	e0bffd17 	ldw	r2,-12(fp)
}
    56c0:	e037883a 	mov	sp,fp
    56c4:	dfc00117 	ldw	ra,4(sp)
    56c8:	df000017 	ldw	fp,0(sp)
    56cc:	dec00204 	addi	sp,sp,8
    56d0:	f800283a 	ret

000056d4 <parse_string>:
 * Extract strings from fields
 * Section 13 TYPE/LENGTH BYTE FORMAT
 * Platform Management FRU Information Storage Definition
 */
unsigned int parse_string(unsigned char *p, unsigned char **str, const char * field)
{
    56d4:	defff504 	addi	sp,sp,-44
    56d8:	dfc00a15 	stw	ra,40(sp)
    56dc:	df000915 	stw	fp,36(sp)
    56e0:	df000904 	addi	fp,sp,36
    56e4:	e13ff915 	stw	r4,-28(fp)
    56e8:	e17ff815 	stw	r5,-32(fp)
    56ec:	e1bff715 	stw	r6,-36(fp)
	size_t len, i, j;

	len = p[0] & 0x3F;
    56f0:	e0bff917 	ldw	r2,-28(fp)
    56f4:	10800003 	ldbu	r2,0(r2)
    56f8:	10803fcc 	andi	r2,r2,255
    56fc:	10800fcc 	andi	r2,r2,63
    5700:	e0bffc15 	stw	r2,-16(fp)

	if (!len) {
    5704:	e0bffc17 	ldw	r2,-16(fp)
    5708:	10000c1e 	bne	r2,zero,573c <parse_string+0x68>
		*str = calloc(1, 3);
    570c:	014000c4 	movi	r5,3
    5710:	01000044 	movi	r4,1
    5714:	000fb200 	call	fb20 <calloc>
    5718:	1007883a 	mov	r3,r2
    571c:	e0bff817 	ldw	r2,-32(fp)
    5720:	10c00015 	stw	r3,0(r2)
		*str[0] = (FRU_STRING_ASCII << 6);
    5724:	e0bff817 	ldw	r2,-32(fp)
    5728:	10800017 	ldw	r2,0(r2)
    572c:	00fff004 	movi	r3,-64
    5730:	10c00005 	stb	r3,0(r2)
		return 1;
    5734:	00800044 	movi	r2,1
    5738:	0000cd06 	br	5a70 <parse_string+0x39c>
	}

	switch((p[0] >> 6) & 0x3 ) {
    573c:	e0bff917 	ldw	r2,-28(fp)
    5740:	10800003 	ldbu	r2,0(r2)
    5744:	10803fcc 	andi	r2,r2,255
    5748:	1004d1ba 	srli	r2,r2,6
    574c:	10803fcc 	andi	r2,r2,255
    5750:	108000cc 	andi	r2,r2,3
    5754:	10c00060 	cmpeqi	r3,r2,1
    5758:	18001a1e 	bne	r3,zero,57c4 <parse_string+0xf0>
    575c:	10c00088 	cmpgei	r3,r2,2
    5760:	1800021e 	bne	r3,zero,576c <parse_string+0x98>
    5764:	10000626 	beq	r2,zero,5780 <parse_string+0xac>
    5768:	0000bf06 	br	5a68 <parse_string+0x394>
    576c:	10c000a0 	cmpeqi	r3,r2,2
    5770:	1800181e 	bne	r3,zero,57d4 <parse_string+0x100>
    5774:	108000e0 	cmpeqi	r2,r2,3
    5778:	1000461e 	bne	r2,zero,5894 <parse_string+0x1c0>
    577c:	0000ba06 	br	5a68 <parse_string+0x394>
		case FRU_STRING_BINARY:
			/* binary or unspecified */
			*str = calloc(1, len + 2);
    5780:	e0bffc17 	ldw	r2,-16(fp)
    5784:	10800084 	addi	r2,r2,2
    5788:	100b883a 	mov	r5,r2
    578c:	01000044 	movi	r4,1
    5790:	000fb200 	call	fb20 <calloc>
    5794:	1007883a 	mov	r3,r2
    5798:	e0bff817 	ldw	r2,-32(fp)
    579c:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
    57a0:	e0bff817 	ldw	r2,-32(fp)
    57a4:	10c00017 	ldw	r3,0(r2)
    57a8:	e0bffc17 	ldw	r2,-16(fp)
    57ac:	10800044 	addi	r2,r2,1
    57b0:	100d883a 	mov	r6,r2
    57b4:	e17ff917 	ldw	r5,-28(fp)
    57b8:	1809883a 	mov	r4,r3
    57bc:	00106380 	call	10638 <memcpy>
			break;
    57c0:	0000a906 	br	5a68 <parse_string+0x394>
		case FRU_STRING_BCD:
			/* BCD plus */
			printf_err("BCD - sorry\n");
    57c4:	010000b4 	movhi	r4,2
    57c8:	21176e04 	addi	r4,r4,23992
    57cc:	0010fe80 	call	10fe8 <puts>
			break;
    57d0:	0000a506 	br	5a68 <parse_string+0x394>
			/* 6-bit ASCII, packed */
			{
				unsigned char *tmp1, *tmp2;
				size_t tlen;

				tmp1 = six2ascii(&p[1], p[0]& 0x3F);
    57d4:	e0bff917 	ldw	r2,-28(fp)
    57d8:	10c00044 	addi	r3,r2,1
    57dc:	e0bff917 	ldw	r2,-28(fp)
    57e0:	10800003 	ldbu	r2,0(r2)
    57e4:	10803fcc 	andi	r2,r2,255
    57e8:	10800fcc 	andi	r2,r2,63
    57ec:	100b883a 	mov	r5,r2
    57f0:	1809883a 	mov	r4,r3
    57f4:	00054900 	call	5490 <six2ascii>
    57f8:	e0bffb15 	stw	r2,-20(fp)
				tlen = strlen((char *)tmp1);
    57fc:	e13ffb17 	ldw	r4,-20(fp)
    5800:	00112e40 	call	112e4 <strlen>
    5804:	e0bffd15 	stw	r2,-12(fp)
				*str = calloc(1, tlen + 2);
    5808:	e0bffd17 	ldw	r2,-12(fp)
    580c:	10800084 	addi	r2,r2,2
    5810:	100b883a 	mov	r5,r2
    5814:	01000044 	movi	r4,1
    5818:	000fb200 	call	fb20 <calloc>
    581c:	1007883a 	mov	r3,r2
    5820:	e0bff817 	ldw	r2,-32(fp)
    5824:	10c00015 	stw	r3,0(r2)

				tmp2 = *str;
    5828:	e0bff817 	ldw	r2,-32(fp)
    582c:	10800017 	ldw	r2,0(r2)
    5830:	e0bffa15 	stw	r2,-24(fp)
				tmp2++;
    5834:	e0bffa17 	ldw	r2,-24(fp)
    5838:	10800044 	addi	r2,r2,1
    583c:	e0bffa15 	stw	r2,-24(fp)
				memcpy(tmp2, tmp1, tlen + 1);
    5840:	e0bffd17 	ldw	r2,-12(fp)
    5844:	10800044 	addi	r2,r2,1
    5848:	100d883a 	mov	r6,r2
    584c:	e17ffb17 	ldw	r5,-20(fp)
    5850:	e13ffa17 	ldw	r4,-24(fp)
    5854:	00106380 	call	10638 <memcpy>
				if (tlen > 0x3F)
    5858:	e0bffd17 	ldw	r2,-12(fp)
    585c:	10801030 	cmpltui	r2,r2,64
    5860:	1000021e 	bne	r2,zero,586c <parse_string+0x198>
					tlen = 0x3F;
    5864:	00800fc4 	movi	r2,63
    5868:	e0bffd15 	stw	r2,-12(fp)

				*str[0] = (FRU_STRING_ASCII << 6) | tlen;
    586c:	e0bffd17 	ldw	r2,-12(fp)
    5870:	1009883a 	mov	r4,r2
    5874:	e0bff817 	ldw	r2,-32(fp)
    5878:	10800017 	ldw	r2,0(r2)
    587c:	00fff004 	movi	r3,-64
    5880:	20c6b03a 	or	r3,r4,r3
    5884:	10c00005 	stb	r3,0(r2)
				free(tmp1);
    5888:	e13ffb17 	ldw	r4,-20(fp)
    588c:	000fde40 	call	fde4 <free>
			}
			break;
    5890:	00007506 	br	5a68 <parse_string+0x394>
		case FRU_STRING_ASCII:
			/* 8-bit ASCII */
			*str = calloc(1, len + 2);
    5894:	e0bffc17 	ldw	r2,-16(fp)
    5898:	10800084 	addi	r2,r2,2
    589c:	100b883a 	mov	r5,r2
    58a0:	01000044 	movi	r4,1
    58a4:	000fb200 	call	fb20 <calloc>
    58a8:	1007883a 	mov	r3,r2
    58ac:	e0bff817 	ldw	r2,-32(fp)
    58b0:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
    58b4:	e0bff817 	ldw	r2,-32(fp)
    58b8:	10c00017 	ldw	r3,0(r2)
    58bc:	e0bffc17 	ldw	r2,-16(fp)
    58c0:	10800044 	addi	r2,r2,1
    58c4:	100d883a 	mov	r6,r2
    58c8:	e17ff917 	ldw	r5,-28(fp)
    58cc:	1809883a 	mov	r4,r3
    58d0:	00106380 	call	10638 <memcpy>
			for (i = 1; i < len; i++) {
    58d4:	00800044 	movi	r2,1
    58d8:	e0bfff15 	stw	r2,-4(fp)
    58dc:	00005e06 	br	5a58 <parse_string+0x384>
				if (p[i] < 0x20 || p[i] == 0x7F) {
    58e0:	e0fff917 	ldw	r3,-28(fp)
    58e4:	e0bfff17 	ldw	r2,-4(fp)
    58e8:	1885883a 	add	r2,r3,r2
    58ec:	10800003 	ldbu	r2,0(r2)
    58f0:	10803fcc 	andi	r2,r2,255
    58f4:	10800830 	cmpltui	r2,r2,32
    58f8:	1000071e 	bne	r2,zero,5918 <parse_string+0x244>
    58fc:	e0fff917 	ldw	r3,-28(fp)
    5900:	e0bfff17 	ldw	r2,-4(fp)
    5904:	1885883a 	add	r2,r3,r2
    5908:	10800003 	ldbu	r2,0(r2)
    590c:	10803fcc 	andi	r2,r2,255
    5910:	10801fd8 	cmpnei	r2,r2,127
    5914:	10004d1e 	bne	r2,zero,5a4c <parse_string+0x378>
					printf_warn("Field '%s' marked as ASCII, but contains non-printable "
    5918:	e17ff717 	ldw	r5,-36(fp)
    591c:	010000b4 	movhi	r4,2
    5920:	21177104 	addi	r4,r4,24004
    5924:	0010ec40 	call	10ec4 <printf>
							"characters:\n", field);
					printf_warn("  Length/Type : 0x%x (length:%i; type:ASCII(%i)\n",
    5928:	e0bff917 	ldw	r2,-28(fp)
    592c:	10800003 	ldbu	r2,0(r2)
    5930:	10c03fcc 	andi	r3,r2,255
    5934:	e0bff917 	ldw	r2,-28(fp)
    5938:	10800003 	ldbu	r2,0(r2)
    593c:	10803fcc 	andi	r2,r2,255
    5940:	10800fcc 	andi	r2,r2,63
    5944:	01c000c4 	movi	r7,3
    5948:	100d883a 	mov	r6,r2
    594c:	180b883a 	mov	r5,r3
    5950:	010000b4 	movhi	r4,2
    5954:	21178204 	addi	r4,r4,24072
    5958:	0010ec40 	call	10ec4 <printf>
							p[0], p[0] & 0x3F, FRU_STRING_ASCII);
					printf_warn("  Contents : ");
    595c:	010000b4 	movhi	r4,2
    5960:	21178f04 	addi	r4,r4,24124
    5964:	0010ec40 	call	10ec4 <printf>
					for (j = 1; j < len + 1; j++)
    5968:	00800044 	movi	r2,1
    596c:	e0bffe15 	stw	r2,-8(fp)
    5970:	00000c06 	br	59a4 <parse_string+0x2d0>
						printf_warn("0x%02x ", p[j]);
    5974:	e0fff917 	ldw	r3,-28(fp)
    5978:	e0bffe17 	ldw	r2,-8(fp)
    597c:	1885883a 	add	r2,r3,r2
    5980:	10800003 	ldbu	r2,0(r2)
    5984:	10803fcc 	andi	r2,r2,255
    5988:	100b883a 	mov	r5,r2
    598c:	010000b4 	movhi	r4,2
    5990:	21179304 	addi	r4,r4,24140
    5994:	0010ec40 	call	10ec4 <printf>
					for (j = 1; j < len + 1; j++)
    5998:	e0bffe17 	ldw	r2,-8(fp)
    599c:	10800044 	addi	r2,r2,1
    59a0:	e0bffe15 	stw	r2,-8(fp)
    59a4:	e0bffc17 	ldw	r2,-16(fp)
    59a8:	10800044 	addi	r2,r2,1
    59ac:	e0fffe17 	ldw	r3,-8(fp)
    59b0:	18bff036 	bltu	r3,r2,5974 <__alt_mem_mcu_subsystem_ram_0+0x77fe5974>
					printf_warn(" |");
    59b4:	010000b4 	movhi	r4,2
    59b8:	21179504 	addi	r4,r4,24148
    59bc:	0010ec40 	call	10ec4 <printf>
					for (j = 0; j < len + 1; j++)
    59c0:	e03ffe15 	stw	zero,-8(fp)
    59c4:	00001a06 	br	5a30 <parse_string+0x35c>
						printf_warn("%c", ((p[j] < 32) || (p[j] >= 127)) ? '.': p[j]);
    59c8:	e0fff917 	ldw	r3,-28(fp)
    59cc:	e0bffe17 	ldw	r2,-8(fp)
    59d0:	1885883a 	add	r2,r3,r2
    59d4:	10800003 	ldbu	r2,0(r2)
    59d8:	10803fcc 	andi	r2,r2,255
    59dc:	10800830 	cmpltui	r2,r2,32
    59e0:	10000d1e 	bne	r2,zero,5a18 <parse_string+0x344>
    59e4:	e0fff917 	ldw	r3,-28(fp)
    59e8:	e0bffe17 	ldw	r2,-8(fp)
    59ec:	1885883a 	add	r2,r3,r2
    59f0:	10800003 	ldbu	r2,0(r2)
    59f4:	10803fcc 	andi	r2,r2,255
    59f8:	10801fe8 	cmpgeui	r2,r2,127
    59fc:	1000061e 	bne	r2,zero,5a18 <parse_string+0x344>
    5a00:	e0fff917 	ldw	r3,-28(fp)
    5a04:	e0bffe17 	ldw	r2,-8(fp)
    5a08:	1885883a 	add	r2,r3,r2
    5a0c:	10800003 	ldbu	r2,0(r2)
    5a10:	10803fcc 	andi	r2,r2,255
    5a14:	00000106 	br	5a1c <parse_string+0x348>
    5a18:	00800b84 	movi	r2,46
    5a1c:	1009883a 	mov	r4,r2
    5a20:	0010f040 	call	10f04 <putchar>
					for (j = 0; j < len + 1; j++)
    5a24:	e0bffe17 	ldw	r2,-8(fp)
    5a28:	10800044 	addi	r2,r2,1
    5a2c:	e0bffe15 	stw	r2,-8(fp)
    5a30:	e0bffc17 	ldw	r2,-16(fp)
    5a34:	10800044 	addi	r2,r2,1
    5a38:	e0fffe17 	ldw	r3,-8(fp)
    5a3c:	18bfe236 	bltu	r3,r2,59c8 <__alt_mem_mcu_subsystem_ram_0+0x77fe59c8>
					printf_warn("|\n");
    5a40:	010000b4 	movhi	r4,2
    5a44:	21179604 	addi	r4,r4,24152
    5a48:	0010fe80 	call	10fe8 <puts>
			for (i = 1; i < len; i++) {
    5a4c:	e0bfff17 	ldw	r2,-4(fp)
    5a50:	10800044 	addi	r2,r2,1
    5a54:	e0bfff15 	stw	r2,-4(fp)
    5a58:	e0ffff17 	ldw	r3,-4(fp)
    5a5c:	e0bffc17 	ldw	r2,-16(fp)
    5a60:	18bf9f36 	bltu	r3,r2,58e0 <__alt_mem_mcu_subsystem_ram_0+0x77fe58e0>
				}
			}
			break;
    5a64:	0001883a 	nop
	}
	return len + 1;
    5a68:	e0bffc17 	ldw	r2,-16(fp)
    5a6c:	10800044 	addi	r2,r2,1
}
    5a70:	e037883a 	mov	sp,fp
    5a74:	dfc00117 	ldw	ra,4(sp)
    5a78:	df000017 	ldw	fp,0(sp)
    5a7c:	dec00204 	addi	sp,sp,8
    5a80:	f800283a 	ret

00005a84 <parse_board_area>:
/*
 * Board Info Area Format
 * Platform Management FRU Information Storage Definition: Section 11
 */
struct BOARD_INFO * parse_board_area(unsigned char *data)
{
    5a84:	defff704 	addi	sp,sp,-36
    5a88:	dfc00815 	stw	ra,32(sp)
    5a8c:	df000715 	stw	fp,28(sp)
    5a90:	df000704 	addi	fp,sp,28
    5a94:	e13ffa15 	stw	r4,-24(fp)

	struct BOARD_INFO *fru;
	unsigned char *p;
	unsigned int len, i, j;

	fru = calloc(1, sizeof(struct BOARD_INFO));
    5a98:	01401104 	movi	r5,68
    5a9c:	01000044 	movi	r4,1
    5aa0:	000fb200 	call	fb20 <calloc>
    5aa4:	e0bffc15 	stw	r2,-16(fp)

	if (data[0] != 0x01) {
    5aa8:	e0bffa17 	ldw	r2,-24(fp)
    5aac:	10800003 	ldbu	r2,0(r2)
    5ab0:	10803fcc 	andi	r2,r2,255
    5ab4:	10800060 	cmpeqi	r2,r2,1
    5ab8:	1000081e 	bne	r2,zero,5adc <parse_board_area+0x58>
		printf_err("Board Area Format Version mismatch: 0x%02x should be 0x01\n", data [0]);
    5abc:	e0bffa17 	ldw	r2,-24(fp)
    5ac0:	10800003 	ldbu	r2,0(r2)
    5ac4:	10803fcc 	andi	r2,r2,255
    5ac8:	100b883a 	mov	r5,r2
    5acc:	010000b4 	movhi	r4,2
    5ad0:	21179704 	addi	r4,r4,24156
    5ad4:	0010ec40 	call	10ec4 <printf>
		goto err;
    5ad8:	0000e806 	br	5e7c <parse_board_area+0x3f8>
	}

	len = (data[1] * 8) - 1;
    5adc:	e0bffa17 	ldw	r2,-24(fp)
    5ae0:	10800044 	addi	r2,r2,1
    5ae4:	10800003 	ldbu	r2,0(r2)
    5ae8:	10803fcc 	andi	r2,r2,255
    5aec:	100490fa 	slli	r2,r2,3
    5af0:	10bfffc4 	addi	r2,r2,-1
    5af4:	e0bffe15 	stw	r2,-8(fp)
	if (calc_zero_checksum(data, len)) {
    5af8:	e17ffe17 	ldw	r5,-8(fp)
    5afc:	e13ffa17 	ldw	r4,-24(fp)
    5b00:	00050d00 	call	50d0 <calc_zero_checksum>
    5b04:	10803fcc 	andi	r2,r2,255
    5b08:	10000426 	beq	r2,zero,5b1c <parse_board_area+0x98>
		printf_err("Board Area Checksum failed");
    5b0c:	010000b4 	movhi	r4,2
    5b10:	2117a604 	addi	r4,r4,24216
    5b14:	0010ec40 	call	10ec4 <printf>
		goto err;
    5b18:	0000d806 	br	5e7c <parse_board_area+0x3f8>
	}

	if (data[2] != 0 && data[2] != 25) {
    5b1c:	e0bffa17 	ldw	r2,-24(fp)
    5b20:	10800084 	addi	r2,r2,2
    5b24:	10800003 	ldbu	r2,0(r2)
    5b28:	10803fcc 	andi	r2,r2,255
    5b2c:	10000f26 	beq	r2,zero,5b6c <parse_board_area+0xe8>
    5b30:	e0bffa17 	ldw	r2,-24(fp)
    5b34:	10800084 	addi	r2,r2,2
    5b38:	10800003 	ldbu	r2,0(r2)
    5b3c:	10803fcc 	andi	r2,r2,255
    5b40:	10800660 	cmpeqi	r2,r2,25
    5b44:	1000091e 	bne	r2,zero,5b6c <parse_board_area+0xe8>
		printf_err("Board Area is non-English - sorry: Lang code = %i\n", data[2]);
    5b48:	e0bffa17 	ldw	r2,-24(fp)
    5b4c:	10800084 	addi	r2,r2,2
    5b50:	10800003 	ldbu	r2,0(r2)
    5b54:	10803fcc 	andi	r2,r2,255
    5b58:	100b883a 	mov	r5,r2
    5b5c:	010000b4 	movhi	r4,2
    5b60:	2117ad04 	addi	r4,r4,24244
    5b64:	0010ec40 	call	10ec4 <printf>
		goto err;
    5b68:	0000c406 	br	5e7c <parse_board_area+0x3f8>
	}

	len--;
    5b6c:	e0bffe17 	ldw	r2,-8(fp)
    5b70:	10bfffc4 	addi	r2,r2,-1
    5b74:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
    5b78:	00000306 	br	5b88 <parse_board_area+0x104>
		len--;
    5b7c:	e0bffe17 	ldw	r2,-8(fp)
    5b80:	10bfffc4 	addi	r2,r2,-1
    5b84:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
    5b88:	e0fffa17 	ldw	r3,-24(fp)
    5b8c:	e0bffe17 	ldw	r2,-8(fp)
    5b90:	1885883a 	add	r2,r3,r2
    5b94:	10800003 	ldbu	r2,0(r2)
    5b98:	10803fcc 	andi	r2,r2,255
    5b9c:	1000021e 	bne	r2,zero,5ba8 <parse_board_area+0x124>
    5ba0:	e0bffe17 	ldw	r2,-8(fp)
    5ba4:	103ff51e 	bne	r2,zero,5b7c <__alt_mem_mcu_subsystem_ram_0+0x77fe5b7c>
	if (len == 0 || data[len] != 0xC1) {
    5ba8:	e0bffe17 	ldw	r2,-8(fp)
    5bac:	10000726 	beq	r2,zero,5bcc <parse_board_area+0x148>
    5bb0:	e0fffa17 	ldw	r3,-24(fp)
    5bb4:	e0bffe17 	ldw	r2,-8(fp)
    5bb8:	1885883a 	add	r2,r3,r2
    5bbc:	10800003 	ldbu	r2,0(r2)
    5bc0:	10803fcc 	andi	r2,r2,255
    5bc4:	10803060 	cmpeqi	r2,r2,193
    5bc8:	10000b1e 	bne	r2,zero,5bf8 <parse_board_area+0x174>
		printf_err("BOARD INFO not terminated properly, walking backwards len: "
    5bcc:	e0fffa17 	ldw	r3,-24(fp)
    5bd0:	e0bffe17 	ldw	r2,-8(fp)
    5bd4:	1885883a 	add	r2,r3,r2
    5bd8:	10800003 	ldbu	r2,0(r2)
    5bdc:	10803fcc 	andi	r2,r2,255
    5be0:	100d883a 	mov	r6,r2
    5be4:	e17ffe17 	ldw	r5,-8(fp)
    5be8:	010000b4 	movhi	r4,2
    5bec:	2117ba04 	addi	r4,r4,24296
    5bf0:	0010ec40 	call	10ec4 <printf>
				"%i:0x%02x should be 0xC1\n", len, data[len]);
		goto err;
    5bf4:	0000a106 	br	5e7c <parse_board_area+0x3f8>
	}

	fru->mfg_date = data[3] | (data[4] << 8) | (data[5] << 16);
    5bf8:	e0bffa17 	ldw	r2,-24(fp)
    5bfc:	108000c4 	addi	r2,r2,3
    5c00:	10800003 	ldbu	r2,0(r2)
    5c04:	10c03fcc 	andi	r3,r2,255
    5c08:	e0bffa17 	ldw	r2,-24(fp)
    5c0c:	10800104 	addi	r2,r2,4
    5c10:	10800003 	ldbu	r2,0(r2)
    5c14:	10803fcc 	andi	r2,r2,255
    5c18:	1004923a 	slli	r2,r2,8
    5c1c:	1886b03a 	or	r3,r3,r2
    5c20:	e0bffa17 	ldw	r2,-24(fp)
    5c24:	10800144 	addi	r2,r2,5
    5c28:	10800003 	ldbu	r2,0(r2)
    5c2c:	10803fcc 	andi	r2,r2,255
    5c30:	1004943a 	slli	r2,r2,16
    5c34:	1884b03a 	or	r2,r3,r2
    5c38:	1007883a 	mov	r3,r2
    5c3c:	e0bffc17 	ldw	r2,-16(fp)
    5c40:	10c00115 	stw	r3,4(r2)

	p = &data[6];
    5c44:	e0bffa17 	ldw	r2,-24(fp)
    5c48:	10800184 	addi	r2,r2,6
    5c4c:	e0bfff15 	stw	r2,-4(fp)
	len -= 6;
    5c50:	e0bffe17 	ldw	r2,-8(fp)
    5c54:	10bffe84 	addi	r2,r2,-6
    5c58:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->manufacturer, "Manufacture");
    5c5c:	e0bffc17 	ldw	r2,-16(fp)
    5c60:	10800204 	addi	r2,r2,8
    5c64:	018000b4 	movhi	r6,2
    5c68:	3197d004 	addi	r6,r6,24384
    5c6c:	100b883a 	mov	r5,r2
    5c70:	e13fff17 	ldw	r4,-4(fp)
    5c74:	00056d40 	call	56d4 <parse_string>
    5c78:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    5c7c:	e0ffff17 	ldw	r3,-4(fp)
    5c80:	e0bffb17 	ldw	r2,-20(fp)
    5c84:	1885883a 	add	r2,r3,r2
    5c88:	e0bfff15 	stw	r2,-4(fp)
    5c8c:	e0fffe17 	ldw	r3,-8(fp)
    5c90:	e0bffb17 	ldw	r2,-20(fp)
    5c94:	1885c83a 	sub	r2,r3,r2
    5c98:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->product_name, "Product Name");
    5c9c:	e0bffc17 	ldw	r2,-16(fp)
    5ca0:	10800304 	addi	r2,r2,12
    5ca4:	018000b4 	movhi	r6,2
    5ca8:	3197d304 	addi	r6,r6,24396
    5cac:	100b883a 	mov	r5,r2
    5cb0:	e13fff17 	ldw	r4,-4(fp)
    5cb4:	00056d40 	call	56d4 <parse_string>
    5cb8:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    5cbc:	e0ffff17 	ldw	r3,-4(fp)
    5cc0:	e0bffb17 	ldw	r2,-20(fp)
    5cc4:	1885883a 	add	r2,r3,r2
    5cc8:	e0bfff15 	stw	r2,-4(fp)
    5ccc:	e0fffe17 	ldw	r3,-8(fp)
    5cd0:	e0bffb17 	ldw	r2,-20(fp)
    5cd4:	1885c83a 	sub	r2,r3,r2
    5cd8:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->serial_number, "Serial Number");
    5cdc:	e0bffc17 	ldw	r2,-16(fp)
    5ce0:	10800404 	addi	r2,r2,16
    5ce4:	018000b4 	movhi	r6,2
    5ce8:	3197d704 	addi	r6,r6,24412
    5cec:	100b883a 	mov	r5,r2
    5cf0:	e13fff17 	ldw	r4,-4(fp)
    5cf4:	00056d40 	call	56d4 <parse_string>
    5cf8:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    5cfc:	e0ffff17 	ldw	r3,-4(fp)
    5d00:	e0bffb17 	ldw	r2,-20(fp)
    5d04:	1885883a 	add	r2,r3,r2
    5d08:	e0bfff15 	stw	r2,-4(fp)
    5d0c:	e0fffe17 	ldw	r3,-8(fp)
    5d10:	e0bffb17 	ldw	r2,-20(fp)
    5d14:	1885c83a 	sub	r2,r3,r2
    5d18:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->part_number, "Part Number");
    5d1c:	e0bffc17 	ldw	r2,-16(fp)
    5d20:	10800504 	addi	r2,r2,20
    5d24:	018000b4 	movhi	r6,2
    5d28:	3197db04 	addi	r6,r6,24428
    5d2c:	100b883a 	mov	r5,r2
    5d30:	e13fff17 	ldw	r4,-4(fp)
    5d34:	00056d40 	call	56d4 <parse_string>
    5d38:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    5d3c:	e0ffff17 	ldw	r3,-4(fp)
    5d40:	e0bffb17 	ldw	r2,-20(fp)
    5d44:	1885883a 	add	r2,r3,r2
    5d48:	e0bfff15 	stw	r2,-4(fp)
    5d4c:	e0fffe17 	ldw	r3,-8(fp)
    5d50:	e0bffb17 	ldw	r2,-20(fp)
    5d54:	1885c83a 	sub	r2,r3,r2
    5d58:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->FRU_file_ID, "FRU File ID");
    5d5c:	e0bffc17 	ldw	r2,-16(fp)
    5d60:	10800604 	addi	r2,r2,24
    5d64:	018000b4 	movhi	r6,2
    5d68:	3197de04 	addi	r6,r6,24440
    5d6c:	100b883a 	mov	r5,r2
    5d70:	e13fff17 	ldw	r4,-4(fp)
    5d74:	00056d40 	call	56d4 <parse_string>
    5d78:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
    5d7c:	e0ffff17 	ldw	r3,-4(fp)
    5d80:	e0bffb17 	ldw	r2,-20(fp)
    5d84:	1885883a 	add	r2,r3,r2
    5d88:	e0bfff15 	stw	r2,-4(fp)
    5d8c:	e0fffe17 	ldw	r3,-8(fp)
    5d90:	e0bffb17 	ldw	r2,-20(fp)
    5d94:	1885c83a 	sub	r2,r3,r2
    5d98:	e0bffe15 	stw	r2,-8(fp)

	j = 0;
    5d9c:	e03ffd15 	stw	zero,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
    5da0:	00001606 	br	5dfc <parse_board_area+0x378>
		i = parse_string(p, &fru->custom[j], "Custom Field");
    5da4:	e0bffd17 	ldw	r2,-12(fp)
    5da8:	108001c4 	addi	r2,r2,7
    5dac:	100490ba 	slli	r2,r2,2
    5db0:	e0fffc17 	ldw	r3,-16(fp)
    5db4:	1885883a 	add	r2,r3,r2
    5db8:	018000b4 	movhi	r6,2
    5dbc:	3197e104 	addi	r6,r6,24452
    5dc0:	100b883a 	mov	r5,r2
    5dc4:	e13fff17 	ldw	r4,-4(fp)
    5dc8:	00056d40 	call	56d4 <parse_string>
    5dcc:	e0bffb15 	stw	r2,-20(fp)
		p += i, len -= i, j++;
    5dd0:	e0ffff17 	ldw	r3,-4(fp)
    5dd4:	e0bffb17 	ldw	r2,-20(fp)
    5dd8:	1885883a 	add	r2,r3,r2
    5ddc:	e0bfff15 	stw	r2,-4(fp)
    5de0:	e0fffe17 	ldw	r3,-8(fp)
    5de4:	e0bffb17 	ldw	r2,-20(fp)
    5de8:	1885c83a 	sub	r2,r3,r2
    5dec:	e0bffe15 	stw	r2,-8(fp)
    5df0:	e0bffd17 	ldw	r2,-12(fp)
    5df4:	10800044 	addi	r2,r2,1
    5df8:	e0bffd15 	stw	r2,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
    5dfc:	e0bffe17 	ldw	r2,-8(fp)
    5e00:	10000326 	beq	r2,zero,5e10 <parse_board_area+0x38c>
    5e04:	e0bffd17 	ldw	r2,-12(fp)
    5e08:	108002b0 	cmpltui	r2,r2,10
    5e0c:	103fe51e 	bne	r2,zero,5da4 <__alt_mem_mcu_subsystem_ram_0+0x77fe5da4>
	}

	if (*p != 0xC1) {
    5e10:	e0bfff17 	ldw	r2,-4(fp)
    5e14:	10800003 	ldbu	r2,0(r2)
    5e18:	10803fcc 	andi	r2,r2,255
    5e1c:	10803060 	cmpeqi	r2,r2,193
    5e20:	1000141e 	bne	r2,zero,5e74 <parse_board_area+0x3f0>
		printf_err("BOARD INFO not terminated properly, "
    5e24:	e0ffff17 	ldw	r3,-4(fp)
    5e28:	e0bffa17 	ldw	r2,-24(fp)
    5e2c:	1889c83a 	sub	r4,r3,r2
    5e30:	e0ffff17 	ldw	r3,-4(fp)
    5e34:	e0bffa17 	ldw	r2,-24(fp)
    5e38:	1887c83a 	sub	r3,r3,r2
    5e3c:	e0bfff17 	ldw	r2,-4(fp)
    5e40:	10800003 	ldbu	r2,0(r2)
    5e44:	11403fcc 	andi	r5,r2,255
    5e48:	e0bfff17 	ldw	r2,-4(fp)
    5e4c:	10800003 	ldbu	r2,0(r2)
    5e50:	10803fcc 	andi	r2,r2,255
    5e54:	d8800015 	stw	r2,0(sp)
    5e58:	280f883a 	mov	r7,r5
    5e5c:	180d883a 	mov	r6,r3
    5e60:	200b883a 	mov	r5,r4
    5e64:	010000b4 	movhi	r4,2
    5e68:	2117e504 	addi	r4,r4,24468
    5e6c:	0010ec40 	call	10ec4 <printf>
				"offset %02i(0x%02x) : %02i(0x%02x) should be 0xC1\n",
				p - data, p - data, *p, *p);
		goto err;
    5e70:	00000206 	br	5e7c <parse_board_area+0x3f8>
	}

	return fru;
    5e74:	e0bffc17 	ldw	r2,-16(fp)
    5e78:	00002706 	br	5f18 <parse_board_area+0x494>

err:
	free(fru->manufacturer);
    5e7c:	e0bffc17 	ldw	r2,-16(fp)
    5e80:	10800217 	ldw	r2,8(r2)
    5e84:	1009883a 	mov	r4,r2
    5e88:	000fde40 	call	fde4 <free>
	free(fru->product_name);
    5e8c:	e0bffc17 	ldw	r2,-16(fp)
    5e90:	10800317 	ldw	r2,12(r2)
    5e94:	1009883a 	mov	r4,r2
    5e98:	000fde40 	call	fde4 <free>
	free(fru->serial_number);
    5e9c:	e0bffc17 	ldw	r2,-16(fp)
    5ea0:	10800417 	ldw	r2,16(r2)
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	000fde40 	call	fde4 <free>
	free(fru->part_number);
    5eac:	e0bffc17 	ldw	r2,-16(fp)
    5eb0:	10800517 	ldw	r2,20(r2)
    5eb4:	1009883a 	mov	r4,r2
    5eb8:	000fde40 	call	fde4 <free>
	free(fru->FRU_file_ID);
    5ebc:	e0bffc17 	ldw	r2,-16(fp)
    5ec0:	10800617 	ldw	r2,24(r2)
    5ec4:	1009883a 	mov	r4,r2
    5ec8:	000fde40 	call	fde4 <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
    5ecc:	e03ffd15 	stw	zero,-12(fp)
    5ed0:	00000b06 	br	5f00 <parse_board_area+0x47c>
		free(fru->custom[j]);
    5ed4:	e0fffc17 	ldw	r3,-16(fp)
    5ed8:	e0bffd17 	ldw	r2,-12(fp)
    5edc:	108001c4 	addi	r2,r2,7
    5ee0:	100490ba 	slli	r2,r2,2
    5ee4:	1885883a 	add	r2,r3,r2
    5ee8:	10800017 	ldw	r2,0(r2)
    5eec:	1009883a 	mov	r4,r2
    5ef0:	000fde40 	call	fde4 <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
    5ef4:	e0bffd17 	ldw	r2,-12(fp)
    5ef8:	10800044 	addi	r2,r2,1
    5efc:	e0bffd15 	stw	r2,-12(fp)
    5f00:	e0bffd17 	ldw	r2,-12(fp)
    5f04:	108002b0 	cmpltui	r2,r2,10
    5f08:	103ff21e 	bne	r2,zero,5ed4 <__alt_mem_mcu_subsystem_ram_0+0x77fe5ed4>
	free(fru);
    5f0c:	e13ffc17 	ldw	r4,-16(fp)
    5f10:	000fde40 	call	fde4 <free>
	return NULL;
    5f14:	0005883a 	mov	r2,zero
}
    5f18:	e037883a 	mov	sp,fp
    5f1c:	dfc00117 	ldw	ra,4(sp)
    5f20:	df000017 	ldw	fp,0(sp)
    5f24:	dec00204 	addi	sp,sp,8
    5f28:	f800283a 	ret

00005f2c <parse_multiboard_area>:
 * contained in the record.  * There are some FMC specific headers, defined
 * in section 5.5.1 of the FMC specification "IPMI Support". These FMC specific
 * sections have a 1 byte sub-type, and a 3 byte Unique Organization Identifier
 */
struct MULTIRECORD_INFO * parse_multiboard_area(unsigned char *data)
{
    5f2c:	defff704 	addi	sp,sp,-36
    5f30:	dfc00815 	stw	ra,32(sp)
    5f34:	df000715 	stw	fp,28(sp)
    5f38:	df000704 	addi	fp,sp,28
    5f3c:	e13ff915 	stw	r4,-28(fp)
	int i = 0, tmp, type;
    5f40:	e03fff15 	stw	zero,-4(fp)
	unsigned char *p;
	struct MULTIRECORD_INFO *multi;

	multi = calloc(1, sizeof(struct MULTIRECORD_INFO));
    5f44:	01400e04 	movi	r5,56
    5f48:	01000044 	movi	r4,1
    5f4c:	000fb200 	call	fb20 <calloc>
    5f50:	e0bffd15 	stw	r2,-12(fp)

	p = data;
    5f54:	e0bff917 	ldw	r2,-28(fp)
    5f58:	e0bffe15 	stw	r2,-8(fp)

	do {
		if (i != 0)
    5f5c:	e0bfff17 	ldw	r2,-4(fp)
    5f60:	10000926 	beq	r2,zero,5f88 <parse_multiboard_area+0x5c>
			p += 5 + p[2];
    5f64:	e0bffe17 	ldw	r2,-8(fp)
    5f68:	10800084 	addi	r2,r2,2
    5f6c:	10800003 	ldbu	r2,0(r2)
    5f70:	10803fcc 	andi	r2,r2,255
    5f74:	10800144 	addi	r2,r2,5
    5f78:	1007883a 	mov	r3,r2
    5f7c:	e0bffe17 	ldw	r2,-8(fp)
    5f80:	10c5883a 	add	r2,r2,r3
    5f84:	e0bffe15 	stw	r2,-8(fp)
		if (p[0] >= 0x06 && p[0] <= 0xBF) {
    5f88:	e0bffe17 	ldw	r2,-8(fp)
    5f8c:	10800003 	ldbu	r2,0(r2)
    5f90:	10803fcc 	andi	r2,r2,255
    5f94:	108001b0 	cmpltui	r2,r2,6
    5f98:	10000b1e 	bne	r2,zero,5fc8 <parse_multiboard_area+0x9c>
    5f9c:	e0bffe17 	ldw	r2,-8(fp)
    5fa0:	10800003 	ldbu	r2,0(r2)
    5fa4:	10803fcc 	andi	r2,r2,255
    5fa8:	10803028 	cmpgeui	r2,r2,192
    5fac:	1000061e 	bne	r2,zero,5fc8 <parse_multiboard_area+0x9c>
			printf_err("MultiRecord Area %i: Invalid Record Header\n", i);
    5fb0:	e17fff17 	ldw	r5,-4(fp)
    5fb4:	010000b4 	movhi	r4,2
    5fb8:	2117fb04 	addi	r4,r4,24556
    5fbc:	0010ec40 	call	10ec4 <printf>
			return NULL;
    5fc0:	0005883a 	mov	r2,zero
    5fc4:	00010b06 	br	63f4 <parse_multiboard_area+0x4c8>
		}
		if (calc_zero_checksum(p, 4)) {
    5fc8:	01400104 	movi	r5,4
    5fcc:	e13ffe17 	ldw	r4,-8(fp)
    5fd0:	00050d00 	call	50d0 <calc_zero_checksum>
    5fd4:	10803fcc 	andi	r2,r2,255
    5fd8:	10000a26 	beq	r2,zero,6004 <parse_multiboard_area+0xd8>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
    5fdc:	e0bffe17 	ldw	r2,-8(fp)
    5fe0:	10800003 	ldbu	r2,0(r2)
    5fe4:	10803fcc 	andi	r2,r2,255
    5fe8:	100d883a 	mov	r6,r2
    5fec:	e17fff17 	ldw	r5,-4(fp)
    5ff0:	010000b4 	movhi	r4,2
    5ff4:	21180604 	addi	r4,r4,24600
    5ff8:	0010ec40 	call	10ec4 <printf>
					"Header Checksum failed\n", i, p[0]);
			return NULL;
    5ffc:	0005883a 	mov	r2,zero
    6000:	0000fc06 	br	63f4 <parse_multiboard_area+0x4c8>
		}

		if (!p[2] || ((calc_zero_checksum(p+5, p[2] - 1) + p[3]) & 0xFF)) {
    6004:	e0bffe17 	ldw	r2,-8(fp)
    6008:	10800084 	addi	r2,r2,2
    600c:	10800003 	ldbu	r2,0(r2)
    6010:	10803fcc 	andi	r2,r2,255
    6014:	10001126 	beq	r2,zero,605c <parse_multiboard_area+0x130>
    6018:	e0bffe17 	ldw	r2,-8(fp)
    601c:	10c00144 	addi	r3,r2,5
    6020:	e0bffe17 	ldw	r2,-8(fp)
    6024:	10800084 	addi	r2,r2,2
    6028:	10800003 	ldbu	r2,0(r2)
    602c:	10803fcc 	andi	r2,r2,255
    6030:	10bfffc4 	addi	r2,r2,-1
    6034:	100b883a 	mov	r5,r2
    6038:	1809883a 	mov	r4,r3
    603c:	00050d00 	call	50d0 <calc_zero_checksum>
    6040:	1007883a 	mov	r3,r2
    6044:	e0bffe17 	ldw	r2,-8(fp)
    6048:	108000c4 	addi	r2,r2,3
    604c:	10800003 	ldbu	r2,0(r2)
    6050:	1885883a 	add	r2,r3,r2
    6054:	10803fcc 	andi	r2,r2,255
    6058:	10000a26 	beq	r2,zero,6084 <parse_multiboard_area+0x158>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
    605c:	e0bffe17 	ldw	r2,-8(fp)
    6060:	10800003 	ldbu	r2,0(r2)
    6064:	10803fcc 	andi	r2,r2,255
    6068:	100d883a 	mov	r6,r2
    606c:	e17fff17 	ldw	r5,-4(fp)
    6070:	010000b4 	movhi	r4,2
    6074:	21181604 	addi	r4,r4,24664
    6078:	0010ec40 	call	10ec4 <printf>
					"Record Checksum failed\n", i, p[0]);
			return NULL;
    607c:	0005883a 	mov	r2,zero
    6080:	0000dc06 	br	63f4 <parse_multiboard_area+0x4c8>
		}

		/*
		 * Record Type ID
		 */
		switch(p[0]) {
    6084:	e0bffe17 	ldw	r2,-8(fp)
    6088:	10800003 	ldbu	r2,0(r2)
    608c:	10803fcc 	andi	r2,r2,255
    6090:	0080ca0e 	bge	zero,r2,63bc <parse_multiboard_area+0x490>
    6094:	10c000d0 	cmplti	r3,r2,3
    6098:	1800031e 	bne	r3,zero,60a8 <parse_multiboard_area+0x17c>
    609c:	10803ea0 	cmpeqi	r2,r2,250
    60a0:	1000391e 	bne	r2,zero,6188 <parse_multiboard_area+0x25c>
    60a4:	0000c506 	br	63bc <parse_multiboard_area+0x490>
			case MULTIRECORD_DC_OUTPUT:
			case MULTIRECORD_DC_INPUT:
				tmp = p[5] & 0xF;
    60a8:	e0bffe17 	ldw	r2,-8(fp)
    60ac:	10800144 	addi	r2,r2,5
    60b0:	10800003 	ldbu	r2,0(r2)
    60b4:	10803fcc 	andi	r2,r2,255
    60b8:	108003cc 	andi	r2,r2,15
    60bc:	e0bffa15 	stw	r2,-24(fp)
				if ((tmp) >= NUM_SUPPLIES)
    60c0:	e0bffa17 	ldw	r2,-24(fp)
    60c4:	10800310 	cmplti	r2,r2,12
    60c8:	1000031e 	bne	r2,zero,60d8 <parse_multiboard_area+0x1ac>
					printf_err("Too many Supplies defined in Multirecords\n");
    60cc:	010000b4 	movhi	r4,2
    60d0:	21182604 	addi	r4,r4,24728
    60d4:	0010fe80 	call	10fe8 <puts>

				multi->supplies[tmp] = calloc(1, p[2] + 6);
    60d8:	e0bffe17 	ldw	r2,-8(fp)
    60dc:	10800084 	addi	r2,r2,2
    60e0:	10800003 	ldbu	r2,0(r2)
    60e4:	10803fcc 	andi	r2,r2,255
    60e8:	10800184 	addi	r2,r2,6
    60ec:	100b883a 	mov	r5,r2
    60f0:	01000044 	movi	r4,1
    60f4:	000fb200 	call	fb20 <calloc>
    60f8:	1009883a 	mov	r4,r2
    60fc:	e0fffd17 	ldw	r3,-12(fp)
    6100:	e0bffa17 	ldw	r2,-24(fp)
    6104:	100490ba 	slli	r2,r2,2
    6108:	1885883a 	add	r2,r3,r2
    610c:	11000015 	stw	r4,0(r2)
				memcpy (multi->supplies[tmp], p, p[2] + 6);
    6110:	e0fffd17 	ldw	r3,-12(fp)
    6114:	e0bffa17 	ldw	r2,-24(fp)
    6118:	100490ba 	slli	r2,r2,2
    611c:	1885883a 	add	r2,r3,r2
    6120:	10c00017 	ldw	r3,0(r2)
    6124:	e0bffe17 	ldw	r2,-8(fp)
    6128:	10800084 	addi	r2,r2,2
    612c:	10800003 	ldbu	r2,0(r2)
    6130:	10803fcc 	andi	r2,r2,255
    6134:	10800184 	addi	r2,r2,6
    6138:	100d883a 	mov	r6,r2
    613c:	e17ffe17 	ldw	r5,-8(fp)
    6140:	1809883a 	mov	r4,r3
    6144:	00106380 	call	10638 <memcpy>
				multi->supplies[tmp][1] = multi->supplies[tmp][1] & 0x7F;
    6148:	e0fffd17 	ldw	r3,-12(fp)
    614c:	e0bffa17 	ldw	r2,-24(fp)
    6150:	100490ba 	slli	r2,r2,2
    6154:	1885883a 	add	r2,r3,r2
    6158:	10800017 	ldw	r2,0(r2)
    615c:	10800044 	addi	r2,r2,1
    6160:	10c00003 	ldbu	r3,0(r2)
    6164:	e13ffd17 	ldw	r4,-12(fp)
    6168:	e0bffa17 	ldw	r2,-24(fp)
    616c:	100490ba 	slli	r2,r2,2
    6170:	2085883a 	add	r2,r4,r2
    6174:	10800017 	ldw	r2,0(r2)
    6178:	10800044 	addi	r2,r2,1
    617c:	18c01fcc 	andi	r3,r3,127
    6180:	10c00005 	stb	r3,0(r2)
				break;
    6184:	00009006 	br	63c8 <parse_multiboard_area+0x49c>
			case MULTIRECORD_FMC:
				/*
				 * Use VITA's OUI: 0x0012a2 is specified in the FMC spec - Rule 5.77
				 */
				if ((p[5] | p[6] << 8 | p[7] << 16) != VITA_OUI) {
    6188:	e0bffe17 	ldw	r2,-8(fp)
    618c:	10800144 	addi	r2,r2,5
    6190:	10800003 	ldbu	r2,0(r2)
    6194:	10c03fcc 	andi	r3,r2,255
    6198:	e0bffe17 	ldw	r2,-8(fp)
    619c:	10800184 	addi	r2,r2,6
    61a0:	10800003 	ldbu	r2,0(r2)
    61a4:	10803fcc 	andi	r2,r2,255
    61a8:	1004923a 	slli	r2,r2,8
    61ac:	1886b03a 	or	r3,r3,r2
    61b0:	e0bffe17 	ldw	r2,-8(fp)
    61b4:	108001c4 	addi	r2,r2,7
    61b8:	10800003 	ldbu	r2,0(r2)
    61bc:	10803fcc 	andi	r2,r2,255
    61c0:	1004943a 	slli	r2,r2,16
    61c4:	1884b03a 	or	r2,r3,r2
    61c8:	1084a8a0 	cmpeqi	r2,r2,4770
    61cc:	1000151e 	bne	r2,zero,6224 <parse_multiboard_area+0x2f8>
					printf_err("OUI Doesn't match : is 0x%06X, "
    61d0:	e0bffe17 	ldw	r2,-8(fp)
    61d4:	10800144 	addi	r2,r2,5
    61d8:	10800003 	ldbu	r2,0(r2)
    61dc:	10c03fcc 	andi	r3,r2,255
    61e0:	e0bffe17 	ldw	r2,-8(fp)
    61e4:	10800184 	addi	r2,r2,6
    61e8:	10800003 	ldbu	r2,0(r2)
    61ec:	10803fcc 	andi	r2,r2,255
    61f0:	1004923a 	slli	r2,r2,8
    61f4:	1886b03a 	or	r3,r3,r2
    61f8:	e0bffe17 	ldw	r2,-8(fp)
    61fc:	108001c4 	addi	r2,r2,7
    6200:	10800003 	ldbu	r2,0(r2)
    6204:	10803fcc 	andi	r2,r2,255
    6208:	1004943a 	slli	r2,r2,16
    620c:	1884b03a 	or	r2,r3,r2
    6210:	0184a884 	movi	r6,4770
    6214:	100b883a 	mov	r5,r2
    6218:	010000b4 	movhi	r4,2
    621c:	21183104 	addi	r4,r4,24772
    6220:	0010ec40 	call	10ec4 <printf>
						"should be 0x%06x\n", p[5] | p[6] << 8 | p[7] << 16, VITA_OUI);
				}
				/* type field is located: Header + Manufacturer ID = 5 + 3 */
				type = p[8] >> 4;
    6224:	e0bffe17 	ldw	r2,-8(fp)
    6228:	10800204 	addi	r2,r2,8
    622c:	10800003 	ldbu	r2,0(r2)
    6230:	10803fcc 	andi	r2,r2,255
    6234:	1004d13a 	srli	r2,r2,4
    6238:	10803fcc 	andi	r2,r2,255
    623c:	e0bffc15 	stw	r2,-16(fp)

				switch (type) {
    6240:	e0bffc17 	ldw	r2,-16(fp)
    6244:	10000326 	beq	r2,zero,6254 <parse_multiboard_area+0x328>
    6248:	10800060 	cmpeqi	r2,r2,1
    624c:	1000211e 	bne	r2,zero,62d4 <parse_multiboard_area+0x3a8>
    6250:	00005406 	br	63a4 <parse_multiboard_area+0x478>
					case MULTIRECORD_CONNECTOR:
						/* see table 7 in FMC spec */
						multi->connector = calloc(1, p[2] + 6);
    6254:	e0bffe17 	ldw	r2,-8(fp)
    6258:	10800084 	addi	r2,r2,2
    625c:	10800003 	ldbu	r2,0(r2)
    6260:	10803fcc 	andi	r2,r2,255
    6264:	10800184 	addi	r2,r2,6
    6268:	100b883a 	mov	r5,r2
    626c:	01000044 	movi	r4,1
    6270:	000fb200 	call	fb20 <calloc>
    6274:	1007883a 	mov	r3,r2
    6278:	e0bffd17 	ldw	r2,-12(fp)
    627c:	10c00c15 	stw	r3,48(r2)
						memcpy (multi->connector, p, p[2] + 6);
    6280:	e0bffd17 	ldw	r2,-12(fp)
    6284:	10c00c17 	ldw	r3,48(r2)
    6288:	e0bffe17 	ldw	r2,-8(fp)
    628c:	10800084 	addi	r2,r2,2
    6290:	10800003 	ldbu	r2,0(r2)
    6294:	10803fcc 	andi	r2,r2,255
    6298:	10800184 	addi	r2,r2,6
    629c:	100d883a 	mov	r6,r2
    62a0:	e17ffe17 	ldw	r5,-8(fp)
    62a4:	1809883a 	mov	r4,r3
    62a8:	00106380 	call	10638 <memcpy>
						/* This isn't the end 'til we re-assemble things */
						multi->connector[1] = multi->connector[1] & 0x7F;
    62ac:	e0bffd17 	ldw	r2,-12(fp)
    62b0:	10800c17 	ldw	r2,48(r2)
    62b4:	10800044 	addi	r2,r2,1
    62b8:	10c00003 	ldbu	r3,0(r2)
    62bc:	e0bffd17 	ldw	r2,-12(fp)
    62c0:	10800c17 	ldw	r2,48(r2)
    62c4:	10800044 	addi	r2,r2,1
    62c8:	18c01fcc 	andi	r3,r3,127
    62cc:	10c00005 	stb	r3,0(r2)
						break;
    62d0:	00003906 	br	63b8 <parse_multiboard_area+0x48c>
					case MULTIRECORD_I2C:
						if (p[2] <= 5) {
    62d4:	e0bffe17 	ldw	r2,-8(fp)
    62d8:	10800084 	addi	r2,r2,2
    62dc:	10800003 	ldbu	r2,0(r2)
    62e0:	10803fcc 	andi	r2,r2,255
    62e4:	108001a8 	cmpgeui	r2,r2,6
    62e8:	1000091e 	bne	r2,zero,6310 <parse_multiboard_area+0x3e4>
							printf_warn("I2C MultiRecord is too short (len:%i)\n"
    62ec:	e0bffe17 	ldw	r2,-8(fp)
    62f0:	10800084 	addi	r2,r2,2
    62f4:	10800003 	ldbu	r2,0(r2)
    62f8:	10803fcc 	andi	r2,r2,255
    62fc:	100b883a 	mov	r5,r2
    6300:	010000b4 	movhi	r4,2
    6304:	21183e04 	addi	r4,r4,24824
    6308:	0010ec40 	call	10ec4 <printf>
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
							free(foo2);
							/* This isn't the end 'til we re-assemble things */
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
						}
						break;
    630c:	00002a06 	br	63b8 <parse_multiboard_area+0x48c>
							foo2 = six2ascii(&p[9], p[2] - 4);
    6310:	e0bffe17 	ldw	r2,-8(fp)
    6314:	10c00244 	addi	r3,r2,9
    6318:	e0bffe17 	ldw	r2,-8(fp)
    631c:	10800084 	addi	r2,r2,2
    6320:	10800003 	ldbu	r2,0(r2)
    6324:	10803fcc 	andi	r2,r2,255
    6328:	10bfff04 	addi	r2,r2,-4
    632c:	100b883a 	mov	r5,r2
    6330:	1809883a 	mov	r4,r3
    6334:	00054900 	call	5490 <six2ascii>
    6338:	e0bffb15 	stw	r2,-20(fp)
							multi->i2c_devices = calloc(1, strlen((char *)foo2) + 1);
    633c:	e13ffb17 	ldw	r4,-20(fp)
    6340:	00112e40 	call	112e4 <strlen>
    6344:	10800044 	addi	r2,r2,1
    6348:	100b883a 	mov	r5,r2
    634c:	01000044 	movi	r4,1
    6350:	000fb200 	call	fb20 <calloc>
    6354:	1007883a 	mov	r3,r2
    6358:	e0bffd17 	ldw	r2,-12(fp)
    635c:	10c00d15 	stw	r3,52(r2)
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
    6360:	e0bffd17 	ldw	r2,-12(fp)
    6364:	10800d17 	ldw	r2,52(r2)
    6368:	e17ffb17 	ldw	r5,-20(fp)
    636c:	1009883a 	mov	r4,r2
    6370:	00112580 	call	11258 <strcpy>
							free(foo2);
    6374:	e13ffb17 	ldw	r4,-20(fp)
    6378:	000fde40 	call	fde4 <free>
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
    637c:	e0bffd17 	ldw	r2,-12(fp)
    6380:	10800d17 	ldw	r2,52(r2)
    6384:	10800044 	addi	r2,r2,1
    6388:	10c00003 	ldbu	r3,0(r2)
    638c:	e0bffd17 	ldw	r2,-12(fp)
    6390:	10800d17 	ldw	r2,52(r2)
    6394:	10800044 	addi	r2,r2,1
    6398:	18c01fcc 	andi	r3,r3,127
    639c:	10c00005 	stb	r3,0(r2)
						break;
    63a0:	00000506 	br	63b8 <parse_multiboard_area+0x48c>
					default:
						printf_err("Unknown multirecord type : %i\n", type);
    63a4:	e17ffc17 	ldw	r5,-16(fp)
    63a8:	010000b4 	movhi	r4,2
    63ac:	21185304 	addi	r4,r4,24908
    63b0:	0010ec40 	call	10ec4 <printf>
						break;
    63b4:	0001883a 	nop
				}

				if (type == 1) {

				}
				break;
    63b8:	00000306 	br	63c8 <parse_multiboard_area+0x49c>
			default:
				printf_err("Unknown MultiRecord Area\n");
    63bc:	010000b4 	movhi	r4,2
    63c0:	21185b04 	addi	r4,r4,24940
    63c4:	0010fe80 	call	10fe8 <puts>
		}

		i++;
    63c8:	e0bfff17 	ldw	r2,-4(fp)
    63cc:	10800044 	addi	r2,r2,1
    63d0:	e0bfff15 	stw	r2,-4(fp)
	} while (!(p[1] & 0x80));
    63d4:	e0bffe17 	ldw	r2,-8(fp)
    63d8:	10800044 	addi	r2,r2,1
    63dc:	10800003 	ldbu	r2,0(r2)
    63e0:	10803fcc 	andi	r2,r2,255
    63e4:	1080201c 	xori	r2,r2,128
    63e8:	10bfe004 	addi	r2,r2,-128
    63ec:	103edb0e 	bge	r2,zero,5f5c <__alt_mem_mcu_subsystem_ram_0+0x77fe5f5c>

	return multi;
    63f0:	e0bffd17 	ldw	r2,-12(fp)
}
    63f4:	e037883a 	mov	sp,fp
    63f8:	dfc00117 	ldw	ra,4(sp)
    63fc:	df000017 	ldw	fp,0(sp)
    6400:	dec00204 	addi	sp,sp,8
    6404:	f800283a 	ret

00006408 <parse_FRU>:
/*
 * Common Header Format
 * Section 8 in the Platform Management FRU Information Storage Definition
 */
struct FRU_DATA * parse_FRU (unsigned char *data)
{
    6408:	defffc04 	addi	sp,sp,-16
    640c:	dfc00315 	stw	ra,12(sp)
    6410:	df000215 	stw	fp,8(sp)
    6414:	df000204 	addi	fp,sp,8
    6418:	e13ffe15 	stw	r4,-8(fp)
	struct FRU_DATA *fru;

	fru = calloc (1, sizeof(struct FRU_DATA));
    641c:	01400504 	movi	r5,20
    6420:	01000044 	movi	r4,1
    6424:	000fb200 	call	fb20 <calloc>
    6428:	e0bfff15 	stw	r2,-4(fp)

	/* Check FRU version */
	if (data[0] != 0x01) {
    642c:	e0bffe17 	ldw	r2,-8(fp)
    6430:	10800003 	ldbu	r2,0(r2)
    6434:	10803fcc 	andi	r2,r2,255
    6438:	10800060 	cmpeqi	r2,r2,1
    643c:	1000081e 	bne	r2,zero,6460 <parse_FRU+0x58>
		printf_err("FRU Version number mismatch 0x%02x should be 0x01\n", data[0]);
    6440:	e0bffe17 	ldw	r2,-8(fp)
    6444:	10800003 	ldbu	r2,0(r2)
    6448:	10803fcc 	andi	r2,r2,255
    644c:	100b883a 	mov	r5,r2
    6450:	010000b4 	movhi	r4,2
    6454:	21186204 	addi	r4,r4,24968
    6458:	0010ec40 	call	10ec4 <printf>
		goto err;
    645c:	00005706 	br	65bc <parse_FRU+0x1b4>
	}

	/* Check Padding */
	if (data[6] != 0x00) {
    6460:	e0bffe17 	ldw	r2,-8(fp)
    6464:	10800184 	addi	r2,r2,6
    6468:	10800003 	ldbu	r2,0(r2)
    646c:	10803fcc 	andi	r2,r2,255
    6470:	10000426 	beq	r2,zero,6484 <parse_FRU+0x7c>
		printf_err("FRU byte 6 should be PAD, and be zero -- but it's not\n");
    6474:	010000b4 	movhi	r4,2
    6478:	21186f04 	addi	r4,r4,25020
    647c:	0010fe80 	call	10fe8 <puts>
		goto err;
    6480:	00004e06 	br	65bc <parse_FRU+0x1b4>
	}

	/* Check header checksum */
	if (calc_zero_checksum(data, 7)) {
    6484:	014001c4 	movi	r5,7
    6488:	e13ffe17 	ldw	r4,-8(fp)
    648c:	00050d00 	call	50d0 <calc_zero_checksum>
    6490:	10803fcc 	andi	r2,r2,255
    6494:	10000426 	beq	r2,zero,64a8 <parse_FRU+0xa0>
		printf_err("Common Header Checksum failed\n");
    6498:	010000b4 	movhi	r4,2
    649c:	21187d04 	addi	r4,r4,25076
    64a0:	0010fe80 	call	10fe8 <puts>
		goto err;
    64a4:	00004506 	br	65bc <parse_FRU+0x1b4>
	}

	/* Parse Internal Use Area */
	if (data[1]) {
    64a8:	e0bffe17 	ldw	r2,-8(fp)
    64ac:	10800044 	addi	r2,r2,1
    64b0:	10800003 	ldbu	r2,0(r2)
    64b4:	10803fcc 	andi	r2,r2,255
    64b8:	10000426 	beq	r2,zero,64cc <parse_FRU+0xc4>
		printf_err("Internal Use Area not yet implemented - sorry\n");
    64bc:	010000b4 	movhi	r4,2
    64c0:	21188504 	addi	r4,r4,25108
    64c4:	0010fe80 	call	10fe8 <puts>
		goto err;
    64c8:	00003c06 	br	65bc <parse_FRU+0x1b4>
	}

	/* Parse Chassis Info Area */
	if (data[2]) {
    64cc:	e0bffe17 	ldw	r2,-8(fp)
    64d0:	10800084 	addi	r2,r2,2
    64d4:	10800003 	ldbu	r2,0(r2)
    64d8:	10803fcc 	andi	r2,r2,255
    64dc:	10000426 	beq	r2,zero,64f0 <parse_FRU+0xe8>
		printf_err("Chassis Info Area not yet implmented - sorry\n");
    64e0:	010000b4 	movhi	r4,2
    64e4:	21189104 	addi	r4,r4,25156
    64e8:	0010fe80 	call	10fe8 <puts>
		goto err;
    64ec:	00003306 	br	65bc <parse_FRU+0x1b4>
	}

	/* Parse Board Area */
	if (data[3]) {
    64f0:	e0bffe17 	ldw	r2,-8(fp)
    64f4:	108000c4 	addi	r2,r2,3
    64f8:	10800003 	ldbu	r2,0(r2)
    64fc:	10803fcc 	andi	r2,r2,255
    6500:	10001026 	beq	r2,zero,6544 <parse_FRU+0x13c>
		fru->Board_Area = parse_board_area(&data[data[3] * 8]);
    6504:	e0bffe17 	ldw	r2,-8(fp)
    6508:	108000c4 	addi	r2,r2,3
    650c:	10800003 	ldbu	r2,0(r2)
    6510:	10803fcc 	andi	r2,r2,255
    6514:	100490fa 	slli	r2,r2,3
    6518:	1007883a 	mov	r3,r2
    651c:	e0bffe17 	ldw	r2,-8(fp)
    6520:	10c5883a 	add	r2,r2,r3
    6524:	1009883a 	mov	r4,r2
    6528:	0005a840 	call	5a84 <parse_board_area>
    652c:	1007883a 	mov	r3,r2
    6530:	e0bfff17 	ldw	r2,-4(fp)
    6534:	10c00215 	stw	r3,8(r2)
		if (!fru->Board_Area)
    6538:	e0bfff17 	ldw	r2,-4(fp)
    653c:	10800217 	ldw	r2,8(r2)
    6540:	10001d26 	beq	r2,zero,65b8 <parse_FRU+0x1b0>
			goto err;
	}

	/* Parse Chassis Info Area */
	if (data[4]) {
    6544:	e0bffe17 	ldw	r2,-8(fp)
    6548:	10800104 	addi	r2,r2,4
    654c:	10800003 	ldbu	r2,0(r2)
    6550:	10803fcc 	andi	r2,r2,255
    6554:	10000426 	beq	r2,zero,6568 <parse_FRU+0x160>
		printf_err("Chassis Info Area parsing not yet implemented - sorry\n");
    6558:	010000b4 	movhi	r4,2
    655c:	21189d04 	addi	r4,r4,25204
    6560:	0010fe80 	call	10fe8 <puts>
		goto err;
    6564:	00001506 	br	65bc <parse_FRU+0x1b4>
	}

	/* Parse MultiRecord Area */
	if (data[5])
    6568:	e0bffe17 	ldw	r2,-8(fp)
    656c:	10800144 	addi	r2,r2,5
    6570:	10800003 	ldbu	r2,0(r2)
    6574:	10803fcc 	andi	r2,r2,255
    6578:	10000d26 	beq	r2,zero,65b0 <parse_FRU+0x1a8>
		fru->MultiRecord_Area = parse_multiboard_area(&data[data[5] * 8]);
    657c:	e0bffe17 	ldw	r2,-8(fp)
    6580:	10800144 	addi	r2,r2,5
    6584:	10800003 	ldbu	r2,0(r2)
    6588:	10803fcc 	andi	r2,r2,255
    658c:	100490fa 	slli	r2,r2,3
    6590:	1007883a 	mov	r3,r2
    6594:	e0bffe17 	ldw	r2,-8(fp)
    6598:	10c5883a 	add	r2,r2,r3
    659c:	1009883a 	mov	r4,r2
    65a0:	0005f2c0 	call	5f2c <parse_multiboard_area>
    65a4:	1007883a 	mov	r3,r2
    65a8:	e0bfff17 	ldw	r2,-4(fp)
    65ac:	10c00415 	stw	r3,16(r2)

	return fru;
    65b0:	e0bfff17 	ldw	r2,-4(fp)
    65b4:	00000406 	br	65c8 <parse_FRU+0x1c0>
			goto err;
    65b8:	0001883a 	nop

err:
	free(fru);
    65bc:	e13fff17 	ldw	r4,-4(fp)
    65c0:	000fde40 	call	fde4 <free>
	return NULL;
    65c4:	0005883a 	mov	r2,zero

}
    65c8:	e037883a 	mov	sp,fp
    65cc:	dfc00117 	ldw	ra,4(sp)
    65d0:	df000017 	ldw	fp,0(sp)
    65d4:	dec00204 	addi	sp,sp,8
    65d8:	f800283a 	ret

000065dc <free_FRU>:

void free_FRU(struct FRU_DATA *fru)
{
    65dc:	defffc04 	addi	sp,sp,-16
    65e0:	dfc00315 	stw	ra,12(sp)
    65e4:	df000215 	stw	fp,8(sp)
    65e8:	df000204 	addi	fp,sp,8
    65ec:	e13ffe15 	stw	r4,-8(fp)
	int j;

	free(fru->Board_Area->manufacturer);
    65f0:	e0bffe17 	ldw	r2,-8(fp)
    65f4:	10800217 	ldw	r2,8(r2)
    65f8:	10800217 	ldw	r2,8(r2)
    65fc:	1009883a 	mov	r4,r2
    6600:	000fde40 	call	fde4 <free>
	free(fru->Board_Area->product_name);
    6604:	e0bffe17 	ldw	r2,-8(fp)
    6608:	10800217 	ldw	r2,8(r2)
    660c:	10800317 	ldw	r2,12(r2)
    6610:	1009883a 	mov	r4,r2
    6614:	000fde40 	call	fde4 <free>
	free(fru->Board_Area->serial_number);
    6618:	e0bffe17 	ldw	r2,-8(fp)
    661c:	10800217 	ldw	r2,8(r2)
    6620:	10800417 	ldw	r2,16(r2)
    6624:	1009883a 	mov	r4,r2
    6628:	000fde40 	call	fde4 <free>
	free(fru->Board_Area->part_number);
    662c:	e0bffe17 	ldw	r2,-8(fp)
    6630:	10800217 	ldw	r2,8(r2)
    6634:	10800517 	ldw	r2,20(r2)
    6638:	1009883a 	mov	r4,r2
    663c:	000fde40 	call	fde4 <free>
	free(fru->Board_Area->FRU_file_ID);
    6640:	e0bffe17 	ldw	r2,-8(fp)
    6644:	10800217 	ldw	r2,8(r2)
    6648:	10800617 	ldw	r2,24(r2)
    664c:	1009883a 	mov	r4,r2
    6650:	000fde40 	call	fde4 <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
    6654:	e03fff15 	stw	zero,-4(fp)
    6658:	00000c06 	br	668c <free_FRU+0xb0>
		free(fru->Board_Area->custom[j]);
    665c:	e0bffe17 	ldw	r2,-8(fp)
    6660:	10c00217 	ldw	r3,8(r2)
    6664:	e0bfff17 	ldw	r2,-4(fp)
    6668:	108001c4 	addi	r2,r2,7
    666c:	100490ba 	slli	r2,r2,2
    6670:	1885883a 	add	r2,r3,r2
    6674:	10800017 	ldw	r2,0(r2)
    6678:	1009883a 	mov	r4,r2
    667c:	000fde40 	call	fde4 <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
    6680:	e0bfff17 	ldw	r2,-4(fp)
    6684:	10800044 	addi	r2,r2,1
    6688:	e0bfff15 	stw	r2,-4(fp)
    668c:	e0bfff17 	ldw	r2,-4(fp)
    6690:	10800290 	cmplti	r2,r2,10
    6694:	103ff11e 	bne	r2,zero,665c <__alt_mem_mcu_subsystem_ram_0+0x77fe665c>
	free(fru->Board_Area);
    6698:	e0bffe17 	ldw	r2,-8(fp)
    669c:	10800217 	ldw	r2,8(r2)
    66a0:	1009883a 	mov	r4,r2
    66a4:	000fde40 	call	fde4 <free>

	for(j = 0; j < NUM_SUPPLIES; j++)
    66a8:	e03fff15 	stw	zero,-4(fp)
    66ac:	00000b06 	br	66dc <free_FRU+0x100>
		free(fru->MultiRecord_Area->supplies[j]);
    66b0:	e0bffe17 	ldw	r2,-8(fp)
    66b4:	10c00417 	ldw	r3,16(r2)
    66b8:	e0bfff17 	ldw	r2,-4(fp)
    66bc:	100490ba 	slli	r2,r2,2
    66c0:	1885883a 	add	r2,r3,r2
    66c4:	10800017 	ldw	r2,0(r2)
    66c8:	1009883a 	mov	r4,r2
    66cc:	000fde40 	call	fde4 <free>
	for(j = 0; j < NUM_SUPPLIES; j++)
    66d0:	e0bfff17 	ldw	r2,-4(fp)
    66d4:	10800044 	addi	r2,r2,1
    66d8:	e0bfff15 	stw	r2,-4(fp)
    66dc:	e0bfff17 	ldw	r2,-4(fp)
    66e0:	10800310 	cmplti	r2,r2,12
    66e4:	103ff21e 	bne	r2,zero,66b0 <__alt_mem_mcu_subsystem_ram_0+0x77fe66b0>
	free(fru->MultiRecord_Area->i2c_devices);
    66e8:	e0bffe17 	ldw	r2,-8(fp)
    66ec:	10800417 	ldw	r2,16(r2)
    66f0:	10800d17 	ldw	r2,52(r2)
    66f4:	1009883a 	mov	r4,r2
    66f8:	000fde40 	call	fde4 <free>

	free(fru->MultiRecord_Area->connector);
    66fc:	e0bffe17 	ldw	r2,-8(fp)
    6700:	10800417 	ldw	r2,16(r2)
    6704:	10800c17 	ldw	r2,48(r2)
    6708:	1009883a 	mov	r4,r2
    670c:	000fde40 	call	fde4 <free>
	free(fru->MultiRecord_Area);
    6710:	e0bffe17 	ldw	r2,-8(fp)
    6714:	10800417 	ldw	r2,16(r2)
    6718:	1009883a 	mov	r4,r2
    671c:	000fde40 	call	fde4 <free>

	free(fru);
    6720:	e13ffe17 	ldw	r4,-8(fp)
    6724:	000fde40 	call	fde4 <free>

}
    6728:	0001883a 	nop
    672c:	e037883a 	mov	sp,fp
    6730:	dfc00117 	ldw	ra,4(sp)
    6734:	df000017 	ldw	fp,0(sp)
    6738:	dec00204 	addi	sp,sp,8
    673c:	f800283a 	ret

00006740 <insert_str>:
/*
 * take string, and put in into the buffer
 * return the number of bytes copied
 */
static unsigned int insert_str(unsigned char *buf, const unsigned char * str, bool force)
{
    6740:	defff904 	addi	sp,sp,-28
    6744:	dfc00615 	stw	ra,24(sp)
    6748:	df000515 	stw	fp,20(sp)
    674c:	df000504 	addi	fp,sp,20
    6750:	e13ffd15 	stw	r4,-12(fp)
    6754:	e17ffc15 	stw	r5,-16(fp)
    6758:	3005883a 	mov	r2,r6
    675c:	e0bffb05 	stb	r2,-20(fp)
	int tmp;

	if (TYPE_CODE(str) == FRU_STRING_ASCII)
    6760:	e0bffc17 	ldw	r2,-16(fp)
    6764:	10800003 	ldbu	r2,0(r2)
    6768:	10803fcc 	andi	r2,r2,255
    676c:	1004d1ba 	srli	r2,r2,6
    6770:	10803fcc 	andi	r2,r2,255
    6774:	108000cc 	andi	r2,r2,3
    6778:	108000d8 	cmpnei	r2,r2,3
    677c:	1000061e 	bne	r2,zero,6798 <insert_str+0x58>
		tmp = strlen((const char *)&str[1]);
    6780:	e0bffc17 	ldw	r2,-16(fp)
    6784:	10800044 	addi	r2,r2,1
    6788:	1009883a 	mov	r4,r2
    678c:	00112e40 	call	112e4 <strlen>
    6790:	e0bfff15 	stw	r2,-4(fp)
    6794:	00000506 	br	67ac <insert_str+0x6c>
	else
		tmp = FIELD_LEN(str);
    6798:	e0bffc17 	ldw	r2,-16(fp)
    679c:	10800003 	ldbu	r2,0(r2)
    67a0:	10803fcc 	andi	r2,r2,255
    67a4:	10800fcc 	andi	r2,r2,63
    67a8:	e0bfff15 	stw	r2,-4(fp)

	/* Turn ASCII into 6 bit if possible */
	if ((TYPE_CODE(str) != FRU_STRING_ASCII) || (tmp <= 0x3F && !force)) {
    67ac:	e0bffc17 	ldw	r2,-16(fp)
    67b0:	10800003 	ldbu	r2,0(r2)
    67b4:	10803fcc 	andi	r2,r2,255
    67b8:	1004d1ba 	srli	r2,r2,6
    67bc:	10803fcc 	andi	r2,r2,255
    67c0:	108000cc 	andi	r2,r2,3
    67c4:	108000d8 	cmpnei	r2,r2,3
    67c8:	1000071e 	bne	r2,zero,67e8 <insert_str+0xa8>
    67cc:	e0bfff17 	ldw	r2,-4(fp)
    67d0:	10801008 	cmpgei	r2,r2,64
    67d4:	10001a1e 	bne	r2,zero,6840 <insert_str+0x100>
    67d8:	e0bffb03 	ldbu	r2,-20(fp)
    67dc:	1080005c 	xori	r2,r2,1
    67e0:	10803fcc 	andi	r2,r2,255
    67e4:	10001626 	beq	r2,zero,6840 <insert_str+0x100>
		/* It fits, so just leave it as ASCII/binary/whatever format it's in */
		buf[0] = tmp | (TYPE_CODE(str) << 6);
    67e8:	e0bffc17 	ldw	r2,-16(fp)
    67ec:	10800003 	ldbu	r2,0(r2)
    67f0:	10803fcc 	andi	r2,r2,255
    67f4:	1004d1ba 	srli	r2,r2,6
    67f8:	10803fcc 	andi	r2,r2,255
    67fc:	100491ba 	slli	r2,r2,6
    6800:	1007883a 	mov	r3,r2
    6804:	e0bfff17 	ldw	r2,-4(fp)
    6808:	1884b03a 	or	r2,r3,r2
    680c:	1007883a 	mov	r3,r2
    6810:	e0bffd17 	ldw	r2,-12(fp)
    6814:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], &str[1], tmp);
    6818:	e0bffd17 	ldw	r2,-12(fp)
    681c:	10c00044 	addi	r3,r2,1
    6820:	e0bffc17 	ldw	r2,-16(fp)
    6824:	10800044 	addi	r2,r2,1
    6828:	e13fff17 	ldw	r4,-4(fp)
    682c:	200d883a 	mov	r6,r4
    6830:	100b883a 	mov	r5,r2
    6834:	1809883a 	mov	r4,r3
    6838:	00106380 	call	10638 <memcpy>
    683c:	00005306 	br	698c <insert_str+0x24c>
	} else {
		/* turn it into 6-bit ASCII */
		unsigned char *six = NULL;
    6840:	e03ffe15 	stw	zero,-8(fp)

		tmp = ascii2six(&six, (unsigned char *)&str[1], tmp);
    6844:	e0bffc17 	ldw	r2,-16(fp)
    6848:	10c00044 	addi	r3,r2,1
    684c:	e13fff17 	ldw	r4,-4(fp)
    6850:	e0bffe04 	addi	r2,fp,-8
    6854:	200d883a 	mov	r6,r4
    6858:	180b883a 	mov	r5,r3
    685c:	1009883a 	mov	r4,r2
    6860:	00051ac0 	call	51ac <ascii2six>
    6864:	e0bfff15 	stw	r2,-4(fp)
		if (tmp < 0) {
    6868:	e0bfff17 	ldw	r2,-4(fp)
    686c:	10002b0e 	bge	r2,zero,691c <insert_str+0x1dc>
			/* Counldn't encode things */
			printf_warn("couldn't encode '%s' string\n", &str[1]);
    6870:	e0bffc17 	ldw	r2,-16(fp)
    6874:	10800044 	addi	r2,r2,1
    6878:	100b883a 	mov	r5,r2
    687c:	010000b4 	movhi	r4,2
    6880:	2118ab04 	addi	r4,r4,25260
    6884:	0010ec40 	call	10ec4 <printf>
			tmp = strlen((const char *)&str[1]);
    6888:	e0bffc17 	ldw	r2,-16(fp)
    688c:	10800044 	addi	r2,r2,1
    6890:	1009883a 	mov	r4,r2
    6894:	00112e40 	call	112e4 <strlen>
    6898:	e0bfff15 	stw	r2,-4(fp)
			if (tmp > 0x3F) {
    689c:	e0bfff17 	ldw	r2,-4(fp)
    68a0:	10801010 	cmplti	r2,r2,64
    68a4:	1000071e 	bne	r2,zero,68c4 <insert_str+0x184>
				printf_warn("fail : %d\n", tmp);
    68a8:	e17fff17 	ldw	r5,-4(fp)
    68ac:	010000b4 	movhi	r4,2
    68b0:	2118b304 	addi	r4,r4,25292
    68b4:	0010ec40 	call	10ec4 <printf>
				printf_err("String too long to fit\n");
    68b8:	010000b4 	movhi	r4,2
    68bc:	2118b604 	addi	r4,r4,25304
    68c0:	0010fe80 	call	10fe8 <puts>
			}
			buf[0] = tmp | (FRU_STRING_ASCII << 6);
    68c4:	e0bfff17 	ldw	r2,-4(fp)
    68c8:	1007883a 	mov	r3,r2
    68cc:	00bff004 	movi	r2,-64
    68d0:	1884b03a 	or	r2,r3,r2
    68d4:	1007883a 	mov	r3,r2
    68d8:	e0bffd17 	ldw	r2,-12(fp)
    68dc:	10c00005 	stb	r3,0(r2)
			memcpy(&buf[1], &str[1], tmp);
    68e0:	e0bffd17 	ldw	r2,-12(fp)
    68e4:	10c00044 	addi	r3,r2,1
    68e8:	e0bffc17 	ldw	r2,-16(fp)
    68ec:	10800044 	addi	r2,r2,1
    68f0:	e13fff17 	ldw	r4,-4(fp)
    68f4:	200d883a 	mov	r6,r4
    68f8:	100b883a 	mov	r5,r2
    68fc:	1809883a 	mov	r4,r3
    6900:	00106380 	call	10638 <memcpy>
			free(six);
    6904:	e0bffe17 	ldw	r2,-8(fp)
    6908:	1009883a 	mov	r4,r2
    690c:	000fde40 	call	fde4 <free>
			return tmp + 1;
    6910:	e0bfff17 	ldw	r2,-4(fp)
    6914:	10800044 	addi	r2,r2,1
    6918:	00001e06 	br	6994 <insert_str+0x254>
		}
		if (tmp > 0x3F) {
    691c:	e0bfff17 	ldw	r2,-4(fp)
    6920:	10801010 	cmplti	r2,r2,64
    6924:	1000071e 	bne	r2,zero,6944 <insert_str+0x204>
			printf_warn("fail : %d\n", tmp);
    6928:	e17fff17 	ldw	r5,-4(fp)
    692c:	010000b4 	movhi	r4,2
    6930:	2118b304 	addi	r4,r4,25292
    6934:	0010ec40 	call	10ec4 <printf>
			printf_err("String too long to fit\n");
    6938:	010000b4 	movhi	r4,2
    693c:	2118b604 	addi	r4,r4,25304
    6940:	0010fe80 	call	10fe8 <puts>
		}

		buf[0] = tmp | (FRU_STRING_SIXBIT << 6);
    6944:	e0bfff17 	ldw	r2,-4(fp)
    6948:	1007883a 	mov	r3,r2
    694c:	00bfe004 	movi	r2,-128
    6950:	1884b03a 	or	r2,r3,r2
    6954:	1007883a 	mov	r3,r2
    6958:	e0bffd17 	ldw	r2,-12(fp)
    695c:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], six, tmp);
    6960:	e0bffd17 	ldw	r2,-12(fp)
    6964:	10800044 	addi	r2,r2,1
    6968:	e0fffe17 	ldw	r3,-8(fp)
    696c:	e13fff17 	ldw	r4,-4(fp)
    6970:	200d883a 	mov	r6,r4
    6974:	180b883a 	mov	r5,r3
    6978:	1009883a 	mov	r4,r2
    697c:	00106380 	call	10638 <memcpy>
		free(six);
    6980:	e0bffe17 	ldw	r2,-8(fp)
    6984:	1009883a 	mov	r4,r2
    6988:	000fde40 	call	fde4 <free>
	}


	return tmp + 1;
    698c:	e0bfff17 	ldw	r2,-4(fp)
    6990:	10800044 	addi	r2,r2,1
}
    6994:	e037883a 	mov	sp,fp
    6998:	dfc00117 	ldw	ra,4(sp)
    699c:	df000017 	ldw	fp,0(sp)
    69a0:	dec00204 	addi	sp,sp,8
    69a4:	f800283a 	ret

000069a8 <build_FRU_blob>:

/*
 * Takes the FRU structure, and builds the binary blob
 */
unsigned char * build_FRU_blob (struct FRU_DATA *fru, size_t *length, bool packed)
{
    69a8:	deffed04 	addi	sp,sp,-76
    69ac:	dfc01215 	stw	ra,72(sp)
    69b0:	df001115 	stw	fp,68(sp)
    69b4:	df001104 	addi	fp,sp,68
    69b8:	e13ff415 	stw	r4,-48(fp)
    69bc:	e17ff315 	stw	r5,-52(fp)
    69c0:	3005883a 	mov	r2,r6
    69c4:	e0bff205 	stb	r2,-56(fp)
	unsigned char *p, *buf;
	unsigned int st, len, tmp, last = 0, i = 0, j;
    69c8:	e03ffe15 	stw	zero,-8(fp)
    69cc:	e03ffd15 	stw	zero,-12(fp)

	buf = calloc(1, 1024);
    69d0:	01410004 	movi	r5,1024
    69d4:	01000044 	movi	r4,1
    69d8:	000fb200 	call	fb20 <calloc>
    69dc:	e0bffb15 	stw	r2,-20(fp)
	len = 256;
    69e0:	00804004 	movi	r2,256
    69e4:	e0bffa15 	stw	r2,-24(fp)

	buf[0] = 0x01;
    69e8:	e0bffb17 	ldw	r2,-20(fp)
    69ec:	00c00044 	movi	r3,1
    69f0:	10c00005 	stb	r3,0(r2)
	i = 8;
    69f4:	00800204 	movi	r2,8
    69f8:	e0bffd15 	stw	r2,-12(fp)
	if (fru->Internal_Area)
    69fc:	e0bff417 	ldw	r2,-48(fp)
    6a00:	10800017 	ldw	r2,0(r2)
    6a04:	10000326 	beq	r2,zero,6a14 <build_FRU_blob+0x6c>
		printf_err("Internal Use Area not yet implemented - sorry\n");
    6a08:	010000b4 	movhi	r4,2
    6a0c:	21188504 	addi	r4,r4,25108
    6a10:	0010fe80 	call	10fe8 <puts>

	if (fru->Chassis_Info)
    6a14:	e0bff417 	ldw	r2,-48(fp)
    6a18:	10800117 	ldw	r2,4(r2)
    6a1c:	10000326 	beq	r2,zero,6a2c <build_FRU_blob+0x84>
		printf_err("Chassis Info not yet implemented - sorry\n");
    6a20:	010000b4 	movhi	r4,2
    6a24:	2118bc04 	addi	r4,r4,25328
    6a28:	0010fe80 	call	10fe8 <puts>

	if (fru->Board_Area) {
    6a2c:	e0bff417 	ldw	r2,-48(fp)
    6a30:	10800217 	ldw	r2,8(r2)
    6a34:	1000cb26 	beq	r2,zero,6d64 <build_FRU_blob+0x3bc>
		len = st = i;
    6a38:	e0bffd17 	ldw	r2,-12(fp)
    6a3c:	e0bff915 	stw	r2,-28(fp)
    6a40:	e0bff917 	ldw	r2,-28(fp)
    6a44:	e0bffa15 	stw	r2,-24(fp)
		buf[3] = i / 8;
    6a48:	e0bffd17 	ldw	r2,-12(fp)
    6a4c:	1006d0fa 	srli	r3,r2,3
    6a50:	e0bffb17 	ldw	r2,-20(fp)
    6a54:	108000c4 	addi	r2,r2,3
    6a58:	10c00005 	stb	r3,0(r2)
		buf[i] = 0x1;   /* Magic number */
    6a5c:	e0fffb17 	ldw	r3,-20(fp)
    6a60:	e0bffd17 	ldw	r2,-12(fp)
    6a64:	1885883a 	add	r2,r3,r2
    6a68:	00c00044 	movi	r3,1
    6a6c:	10c00005 	stb	r3,0(r2)
		/* buf[i+1] = length, which needs to be determined later */
		buf[i+2] = 25;  /* English */
    6a70:	e0bffd17 	ldw	r2,-12(fp)
    6a74:	10800084 	addi	r2,r2,2
    6a78:	e0fffb17 	ldw	r3,-20(fp)
    6a7c:	1885883a 	add	r2,r3,r2
    6a80:	00c00644 	movi	r3,25
    6a84:	10c00005 	stb	r3,0(r2)
		buf[i+3] = (fru->Board_Area->mfg_date) & 0xFF;
    6a88:	e0bff417 	ldw	r2,-48(fp)
    6a8c:	10800217 	ldw	r2,8(r2)
    6a90:	11000117 	ldw	r4,4(r2)
    6a94:	e0bffd17 	ldw	r2,-12(fp)
    6a98:	108000c4 	addi	r2,r2,3
    6a9c:	e0fffb17 	ldw	r3,-20(fp)
    6aa0:	1885883a 	add	r2,r3,r2
    6aa4:	2007883a 	mov	r3,r4
    6aa8:	10c00005 	stb	r3,0(r2)
		buf[i+4] = (fru->Board_Area->mfg_date >> 8) & 0xFF;
    6aac:	e0bff417 	ldw	r2,-48(fp)
    6ab0:	10800217 	ldw	r2,8(r2)
    6ab4:	10800117 	ldw	r2,4(r2)
    6ab8:	1008d23a 	srli	r4,r2,8
    6abc:	e0bffd17 	ldw	r2,-12(fp)
    6ac0:	10800104 	addi	r2,r2,4
    6ac4:	e0fffb17 	ldw	r3,-20(fp)
    6ac8:	1885883a 	add	r2,r3,r2
    6acc:	2007883a 	mov	r3,r4
    6ad0:	10c00005 	stb	r3,0(r2)
		buf[i+5] = (fru->Board_Area->mfg_date >> 16) & 0xFF;
    6ad4:	e0bff417 	ldw	r2,-48(fp)
    6ad8:	10800217 	ldw	r2,8(r2)
    6adc:	10800117 	ldw	r2,4(r2)
    6ae0:	1008d43a 	srli	r4,r2,16
    6ae4:	e0bffd17 	ldw	r2,-12(fp)
    6ae8:	10800144 	addi	r2,r2,5
    6aec:	e0fffb17 	ldw	r3,-20(fp)
    6af0:	1885883a 	add	r2,r3,r2
    6af4:	2007883a 	mov	r3,r4
    6af8:	10c00005 	stb	r3,0(r2)

		i += 6;
    6afc:	e0bffd17 	ldw	r2,-12(fp)
    6b00:	10800184 	addi	r2,r2,6
    6b04:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->manufacturer, packed);
    6b08:	e0fffb17 	ldw	r3,-20(fp)
    6b0c:	e0bffd17 	ldw	r2,-12(fp)
    6b10:	1887883a 	add	r3,r3,r2
    6b14:	e0bff417 	ldw	r2,-48(fp)
    6b18:	10800217 	ldw	r2,8(r2)
    6b1c:	10800217 	ldw	r2,8(r2)
    6b20:	e13ff203 	ldbu	r4,-56(fp)
    6b24:	200d883a 	mov	r6,r4
    6b28:	100b883a 	mov	r5,r2
    6b2c:	1809883a 	mov	r4,r3
    6b30:	00067400 	call	6740 <insert_str>
    6b34:	1007883a 	mov	r3,r2
    6b38:	e0bffd17 	ldw	r2,-12(fp)
    6b3c:	10c5883a 	add	r2,r2,r3
    6b40:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->product_name, packed);
    6b44:	e0fffb17 	ldw	r3,-20(fp)
    6b48:	e0bffd17 	ldw	r2,-12(fp)
    6b4c:	1887883a 	add	r3,r3,r2
    6b50:	e0bff417 	ldw	r2,-48(fp)
    6b54:	10800217 	ldw	r2,8(r2)
    6b58:	10800317 	ldw	r2,12(r2)
    6b5c:	e13ff203 	ldbu	r4,-56(fp)
    6b60:	200d883a 	mov	r6,r4
    6b64:	100b883a 	mov	r5,r2
    6b68:	1809883a 	mov	r4,r3
    6b6c:	00067400 	call	6740 <insert_str>
    6b70:	1007883a 	mov	r3,r2
    6b74:	e0bffd17 	ldw	r2,-12(fp)
    6b78:	10c5883a 	add	r2,r2,r3
    6b7c:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->serial_number, packed);
    6b80:	e0fffb17 	ldw	r3,-20(fp)
    6b84:	e0bffd17 	ldw	r2,-12(fp)
    6b88:	1887883a 	add	r3,r3,r2
    6b8c:	e0bff417 	ldw	r2,-48(fp)
    6b90:	10800217 	ldw	r2,8(r2)
    6b94:	10800417 	ldw	r2,16(r2)
    6b98:	e13ff203 	ldbu	r4,-56(fp)
    6b9c:	200d883a 	mov	r6,r4
    6ba0:	100b883a 	mov	r5,r2
    6ba4:	1809883a 	mov	r4,r3
    6ba8:	00067400 	call	6740 <insert_str>
    6bac:	1007883a 	mov	r3,r2
    6bb0:	e0bffd17 	ldw	r2,-12(fp)
    6bb4:	10c5883a 	add	r2,r2,r3
    6bb8:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->part_number, packed);
    6bbc:	e0fffb17 	ldw	r3,-20(fp)
    6bc0:	e0bffd17 	ldw	r2,-12(fp)
    6bc4:	1887883a 	add	r3,r3,r2
    6bc8:	e0bff417 	ldw	r2,-48(fp)
    6bcc:	10800217 	ldw	r2,8(r2)
    6bd0:	10800517 	ldw	r2,20(r2)
    6bd4:	e13ff203 	ldbu	r4,-56(fp)
    6bd8:	200d883a 	mov	r6,r4
    6bdc:	100b883a 	mov	r5,r2
    6be0:	1809883a 	mov	r4,r3
    6be4:	00067400 	call	6740 <insert_str>
    6be8:	1007883a 	mov	r3,r2
    6bec:	e0bffd17 	ldw	r2,-12(fp)
    6bf0:	10c5883a 	add	r2,r2,r3
    6bf4:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->FRU_file_ID, packed);
    6bf8:	e0fffb17 	ldw	r3,-20(fp)
    6bfc:	e0bffd17 	ldw	r2,-12(fp)
    6c00:	1887883a 	add	r3,r3,r2
    6c04:	e0bff417 	ldw	r2,-48(fp)
    6c08:	10800217 	ldw	r2,8(r2)
    6c0c:	10800617 	ldw	r2,24(r2)
    6c10:	e13ff203 	ldbu	r4,-56(fp)
    6c14:	200d883a 	mov	r6,r4
    6c18:	100b883a 	mov	r5,r2
    6c1c:	1809883a 	mov	r4,r3
    6c20:	00067400 	call	6740 <insert_str>
    6c24:	1007883a 	mov	r3,r2
    6c28:	e0bffd17 	ldw	r2,-12(fp)
    6c2c:	10c5883a 	add	r2,r2,r3
    6c30:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
    6c34:	e03ffc15 	stw	zero,-16(fp)
    6c38:	00001d06 	br	6cb0 <build_FRU_blob+0x308>
			if (fru->Board_Area->custom[j]) {
    6c3c:	e0bff417 	ldw	r2,-48(fp)
    6c40:	10c00217 	ldw	r3,8(r2)
    6c44:	e0bffc17 	ldw	r2,-16(fp)
    6c48:	108001c4 	addi	r2,r2,7
    6c4c:	100490ba 	slli	r2,r2,2
    6c50:	1885883a 	add	r2,r3,r2
    6c54:	10800017 	ldw	r2,0(r2)
    6c58:	10001226 	beq	r2,zero,6ca4 <build_FRU_blob+0x2fc>
				i += insert_str(&buf[i], fru->Board_Area->custom[j], packed);
    6c5c:	e0fffb17 	ldw	r3,-20(fp)
    6c60:	e0bffd17 	ldw	r2,-12(fp)
    6c64:	1889883a 	add	r4,r3,r2
    6c68:	e0bff417 	ldw	r2,-48(fp)
    6c6c:	10c00217 	ldw	r3,8(r2)
    6c70:	e0bffc17 	ldw	r2,-16(fp)
    6c74:	108001c4 	addi	r2,r2,7
    6c78:	100490ba 	slli	r2,r2,2
    6c7c:	1885883a 	add	r2,r3,r2
    6c80:	10800017 	ldw	r2,0(r2)
    6c84:	e0fff203 	ldbu	r3,-56(fp)
    6c88:	180d883a 	mov	r6,r3
    6c8c:	100b883a 	mov	r5,r2
    6c90:	00067400 	call	6740 <insert_str>
    6c94:	1007883a 	mov	r3,r2
    6c98:	e0bffd17 	ldw	r2,-12(fp)
    6c9c:	10c5883a 	add	r2,r2,r3
    6ca0:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
    6ca4:	e0bffc17 	ldw	r2,-16(fp)
    6ca8:	10800044 	addi	r2,r2,1
    6cac:	e0bffc15 	stw	r2,-16(fp)
    6cb0:	e0bffc17 	ldw	r2,-16(fp)
    6cb4:	108002b0 	cmpltui	r2,r2,10
    6cb8:	103fe01e 	bne	r2,zero,6c3c <__alt_mem_mcu_subsystem_ram_0+0x77fe6c3c>
			}
		}
		buf[i] = 0xC1;
    6cbc:	e0fffb17 	ldw	r3,-20(fp)
    6cc0:	e0bffd17 	ldw	r2,-12(fp)
    6cc4:	1885883a 	add	r2,r3,r2
    6cc8:	00fff044 	movi	r3,-63
    6ccc:	10c00005 	stb	r3,0(r2)
		i++;
    6cd0:	e0bffd17 	ldw	r2,-12(fp)
    6cd4:	10800044 	addi	r2,r2,1
    6cd8:	e0bffd15 	stw	r2,-12(fp)
		i = (((i >> 3) + 1) << 3) - 1;
    6cdc:	e0bffd17 	ldw	r2,-12(fp)
    6ce0:	1004d0fa 	srli	r2,r2,3
    6ce4:	10800044 	addi	r2,r2,1
    6ce8:	100490fa 	slli	r2,r2,3
    6cec:	10bfffc4 	addi	r2,r2,-1
    6cf0:	e0bffd15 	stw	r2,-12(fp)
		len = i - st;
    6cf4:	e0fffd17 	ldw	r3,-12(fp)
    6cf8:	e0bff917 	ldw	r2,-28(fp)
    6cfc:	1885c83a 	sub	r2,r3,r2
    6d00:	e0bffa15 	stw	r2,-24(fp)
		buf[st + 1] = len / 8 + 1;
    6d04:	e0bffa17 	ldw	r2,-24(fp)
    6d08:	1004d0fa 	srli	r2,r2,3
    6d0c:	1009883a 	mov	r4,r2
    6d10:	e0bff917 	ldw	r2,-28(fp)
    6d14:	10800044 	addi	r2,r2,1
    6d18:	e0fffb17 	ldw	r3,-20(fp)
    6d1c:	1885883a 	add	r2,r3,r2
    6d20:	20c00044 	addi	r3,r4,1
    6d24:	10c00005 	stb	r3,0(r2)
		buf[i] = 256 - calc_zero_checksum(&buf[st], len);
    6d28:	e0fffb17 	ldw	r3,-20(fp)
    6d2c:	e0bff917 	ldw	r2,-28(fp)
    6d30:	1885883a 	add	r2,r3,r2
    6d34:	e17ffa17 	ldw	r5,-24(fp)
    6d38:	1009883a 	mov	r4,r2
    6d3c:	00050d00 	call	50d0 <calc_zero_checksum>
    6d40:	1009883a 	mov	r4,r2
    6d44:	e0fffb17 	ldw	r3,-20(fp)
    6d48:	e0bffd17 	ldw	r2,-12(fp)
    6d4c:	1885883a 	add	r2,r3,r2
    6d50:	0107c83a 	sub	r3,zero,r4
    6d54:	10c00005 	stb	r3,0(r2)
		i++;
    6d58:	e0bffd17 	ldw	r2,-12(fp)
    6d5c:	10800044 	addi	r2,r2,1
    6d60:	e0bffd15 	stw	r2,-12(fp)
	}
	if (fru->Product_Info) {
	}
	if (fru->MultiRecord_Area) {
    6d64:	e0bff417 	ldw	r2,-48(fp)
    6d68:	10800417 	ldw	r2,16(r2)
    6d6c:	1000d426 	beq	r2,zero,70c0 <build_FRU_blob+0x718>
		st = i;
    6d70:	e0bffd17 	ldw	r2,-12(fp)
    6d74:	e0bff915 	stw	r2,-28(fp)
		buf[5] = st / 8;
    6d78:	e0bff917 	ldw	r2,-28(fp)
    6d7c:	1006d0fa 	srli	r3,r2,3
    6d80:	e0bffb17 	ldw	r2,-20(fp)
    6d84:	10800144 	addi	r2,r2,5
    6d88:	10c00005 	stb	r3,0(r2)
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
    6d8c:	e03fff15 	stw	zero,-4(fp)
    6d90:	00002506 	br	6e28 <build_FRU_blob+0x480>
			p = fru->MultiRecord_Area->supplies[tmp];
    6d94:	e0bff417 	ldw	r2,-48(fp)
    6d98:	10c00417 	ldw	r3,16(r2)
    6d9c:	e0bfff17 	ldw	r2,-4(fp)
    6da0:	100490ba 	slli	r2,r2,2
    6da4:	1885883a 	add	r2,r3,r2
    6da8:	10800017 	ldw	r2,0(r2)
    6dac:	e0bff815 	stw	r2,-32(fp)
			if (!p)
    6db0:	e0bff817 	ldw	r2,-32(fp)
    6db4:	10001826 	beq	r2,zero,6e18 <build_FRU_blob+0x470>
				continue;
			memcpy(&buf[i], p, p[2]+ 5);
    6db8:	e0fffb17 	ldw	r3,-20(fp)
    6dbc:	e0bffd17 	ldw	r2,-12(fp)
    6dc0:	1887883a 	add	r3,r3,r2
    6dc4:	e0bff817 	ldw	r2,-32(fp)
    6dc8:	10800084 	addi	r2,r2,2
    6dcc:	10800003 	ldbu	r2,0(r2)
    6dd0:	10803fcc 	andi	r2,r2,255
    6dd4:	10800144 	addi	r2,r2,5
    6dd8:	100d883a 	mov	r6,r2
    6ddc:	e17ff817 	ldw	r5,-32(fp)
    6de0:	1809883a 	mov	r4,r3
    6de4:	00106380 	call	10638 <memcpy>
			last = i + 1;
    6de8:	e0bffd17 	ldw	r2,-12(fp)
    6dec:	10800044 	addi	r2,r2,1
    6df0:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
    6df4:	e0bff817 	ldw	r2,-32(fp)
    6df8:	10800084 	addi	r2,r2,2
    6dfc:	10800003 	ldbu	r2,0(r2)
    6e00:	10c03fcc 	andi	r3,r2,255
    6e04:	e0bffd17 	ldw	r2,-12(fp)
    6e08:	1885883a 	add	r2,r3,r2
    6e0c:	10800144 	addi	r2,r2,5
    6e10:	e0bffd15 	stw	r2,-12(fp)
    6e14:	00000106 	br	6e1c <build_FRU_blob+0x474>
				continue;
    6e18:	0001883a 	nop
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
    6e1c:	e0bfff17 	ldw	r2,-4(fp)
    6e20:	10800044 	addi	r2,r2,1
    6e24:	e0bfff15 	stw	r2,-4(fp)
    6e28:	e0bfff17 	ldw	r2,-4(fp)
    6e2c:	10800330 	cmpltui	r2,r2,12
    6e30:	103fd81e 	bne	r2,zero,6d94 <__alt_mem_mcu_subsystem_ram_0+0x77fe6d94>
		}
		p = fru->MultiRecord_Area->connector;
    6e34:	e0bff417 	ldw	r2,-48(fp)
    6e38:	10800417 	ldw	r2,16(r2)
    6e3c:	10800c17 	ldw	r2,48(r2)
    6e40:	e0bff815 	stw	r2,-32(fp)
		if (p) {
    6e44:	e0bff817 	ldw	r2,-32(fp)
    6e48:	10001726 	beq	r2,zero,6ea8 <build_FRU_blob+0x500>
			memcpy(&buf[i], p, p[2]+ 5);
    6e4c:	e0fffb17 	ldw	r3,-20(fp)
    6e50:	e0bffd17 	ldw	r2,-12(fp)
    6e54:	1887883a 	add	r3,r3,r2
    6e58:	e0bff817 	ldw	r2,-32(fp)
    6e5c:	10800084 	addi	r2,r2,2
    6e60:	10800003 	ldbu	r2,0(r2)
    6e64:	10803fcc 	andi	r2,r2,255
    6e68:	10800144 	addi	r2,r2,5
    6e6c:	100d883a 	mov	r6,r2
    6e70:	e17ff817 	ldw	r5,-32(fp)
    6e74:	1809883a 	mov	r4,r3
    6e78:	00106380 	call	10638 <memcpy>
			last = i + 1;
    6e7c:	e0bffd17 	ldw	r2,-12(fp)
    6e80:	10800044 	addi	r2,r2,1
    6e84:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
    6e88:	e0bff817 	ldw	r2,-32(fp)
    6e8c:	10800084 	addi	r2,r2,2
    6e90:	10800003 	ldbu	r2,0(r2)
    6e94:	10c03fcc 	andi	r3,r2,255
    6e98:	e0bffd17 	ldw	r2,-12(fp)
    6e9c:	1885883a 	add	r2,r3,r2
    6ea0:	10800144 	addi	r2,r2,5
    6ea4:	e0bffd15 	stw	r2,-12(fp)
		}
		p = fru->MultiRecord_Area->i2c_devices;
    6ea8:	e0bff417 	ldw	r2,-48(fp)
    6eac:	10800417 	ldw	r2,16(r2)
    6eb0:	10800d17 	ldw	r2,52(r2)
    6eb4:	e0bff815 	stw	r2,-32(fp)
		if (p) {
    6eb8:	e0bff817 	ldw	r2,-32(fp)
    6ebc:	10006126 	beq	r2,zero,7044 <build_FRU_blob+0x69c>
			unsigned int len, oui = VITA_OUI;
    6ec0:	0084a884 	movi	r2,4770
    6ec4:	e0bff615 	stw	r2,-40(fp)
			unsigned char *six = NULL;
    6ec8:	e03ff515 	stw	zero,-44(fp)
			len = ascii2six(&six, p, strlen((char *)p));
    6ecc:	e13ff817 	ldw	r4,-32(fp)
    6ed0:	00112e40 	call	112e4 <strlen>
    6ed4:	1007883a 	mov	r3,r2
    6ed8:	e0bff504 	addi	r2,fp,-44
    6edc:	180d883a 	mov	r6,r3
    6ee0:	e17ff817 	ldw	r5,-32(fp)
    6ee4:	1009883a 	mov	r4,r2
    6ee8:	00051ac0 	call	51ac <ascii2six>
    6eec:	e0bff715 	stw	r2,-36(fp)

			/* Type ID, Record Format version, Length, checksum, checksum */
			sprintf((char *)&buf[i], "%c%c%c%c%c", MULTIRECORD_FMC, 0x02, len + 4, 0, 0);
    6ef0:	e0fffb17 	ldw	r3,-20(fp)
    6ef4:	e0bffd17 	ldw	r2,-12(fp)
    6ef8:	1887883a 	add	r3,r3,r2
    6efc:	e0bff717 	ldw	r2,-36(fp)
    6f00:	10800104 	addi	r2,r2,4
    6f04:	d8000215 	stw	zero,8(sp)
    6f08:	d8000115 	stw	zero,4(sp)
    6f0c:	d8800015 	stw	r2,0(sp)
    6f10:	01c00084 	movi	r7,2
    6f14:	01803e84 	movi	r6,250
    6f18:	014000b4 	movhi	r5,2
    6f1c:	2958c704 	addi	r5,r5,25372
    6f20:	1809883a 	mov	r4,r3
    6f24:	00111280 	call	11128 <sprintf>
			/* Store OUI */
#if __BYTE_ORDER == __BIG_ENDIAN
			oui = __builtin_bswap32(oui);
    6f28:	e0bff617 	ldw	r2,-40(fp)
    6f2c:	1009883a 	mov	r4,r2
    6f30:	000c9c00 	call	c9c0 <__bswapsi2>
    6f34:	e0bff615 	stw	r2,-40(fp)
#endif
			memcpy(&buf[i+5], &oui, 3);
    6f38:	e0bffd17 	ldw	r2,-12(fp)
    6f3c:	10800144 	addi	r2,r2,5
    6f40:	e0fffb17 	ldw	r3,-20(fp)
    6f44:	1885883a 	add	r2,r3,r2
    6f48:	e0fff604 	addi	r3,fp,-40
    6f4c:	018000c4 	movi	r6,3
    6f50:	180b883a 	mov	r5,r3
    6f54:	1009883a 	mov	r4,r2
    6f58:	00106380 	call	10638 <memcpy>
			/* Subtype & version  - see Table 9 in FMC spec*/
			sprintf((char *)&buf[i+8], "%c", (0x1 << 4) | (0));
    6f5c:	e0bffd17 	ldw	r2,-12(fp)
    6f60:	10800204 	addi	r2,r2,8
    6f64:	e0fffb17 	ldw	r3,-20(fp)
    6f68:	1885883a 	add	r2,r3,r2
    6f6c:	01800404 	movi	r6,16
    6f70:	014000b4 	movhi	r5,2
    6f74:	2958ca04 	addi	r5,r5,25384
    6f78:	1009883a 	mov	r4,r2
    6f7c:	00111280 	call	11128 <sprintf>
			/* finally copy over the string */
			memcpy(&buf[i+9], six, len);
    6f80:	e0bffd17 	ldw	r2,-12(fp)
    6f84:	10800244 	addi	r2,r2,9
    6f88:	e0fffb17 	ldw	r3,-20(fp)
    6f8c:	1885883a 	add	r2,r3,r2
    6f90:	e0fff517 	ldw	r3,-44(fp)
    6f94:	e1bff717 	ldw	r6,-36(fp)
    6f98:	180b883a 	mov	r5,r3
    6f9c:	1009883a 	mov	r4,r2
    6fa0:	00106380 	call	10638 <memcpy>
			/* Record Checksum */
			buf[i+3] = 0x100 - calc_zero_checksum(&buf[i+5], len + 3);
    6fa4:	e0bffd17 	ldw	r2,-12(fp)
    6fa8:	10800144 	addi	r2,r2,5
    6fac:	e0fffb17 	ldw	r3,-20(fp)
    6fb0:	1887883a 	add	r3,r3,r2
    6fb4:	e0bff717 	ldw	r2,-36(fp)
    6fb8:	108000c4 	addi	r2,r2,3
    6fbc:	100b883a 	mov	r5,r2
    6fc0:	1809883a 	mov	r4,r3
    6fc4:	00050d00 	call	50d0 <calc_zero_checksum>
    6fc8:	1009883a 	mov	r4,r2
    6fcc:	e0bffd17 	ldw	r2,-12(fp)
    6fd0:	108000c4 	addi	r2,r2,3
    6fd4:	e0fffb17 	ldw	r3,-20(fp)
    6fd8:	1885883a 	add	r2,r3,r2
    6fdc:	0107c83a 	sub	r3,zero,r4
    6fe0:	10c00005 	stb	r3,0(r2)
			/* Header Checksum */
			buf[i+4] = 0x100 - calc_zero_checksum(&buf[i], 4);
    6fe4:	e0fffb17 	ldw	r3,-20(fp)
    6fe8:	e0bffd17 	ldw	r2,-12(fp)
    6fec:	1885883a 	add	r2,r3,r2
    6ff0:	01400104 	movi	r5,4
    6ff4:	1009883a 	mov	r4,r2
    6ff8:	00050d00 	call	50d0 <calc_zero_checksum>
    6ffc:	1009883a 	mov	r4,r2
    7000:	e0bffd17 	ldw	r2,-12(fp)
    7004:	10800104 	addi	r2,r2,4
    7008:	e0fffb17 	ldw	r3,-20(fp)
    700c:	1885883a 	add	r2,r3,r2
    7010:	0107c83a 	sub	r3,zero,r4
    7014:	10c00005 	stb	r3,0(r2)

			last = i + 1;
    7018:	e0bffd17 	ldw	r2,-12(fp)
    701c:	10800044 	addi	r2,r2,1
    7020:	e0bffe15 	stw	r2,-8(fp)
			i += len + 9;
    7024:	e0fff717 	ldw	r3,-36(fp)
    7028:	e0bffd17 	ldw	r2,-12(fp)
    702c:	1885883a 	add	r2,r3,r2
    7030:	10800244 	addi	r2,r2,9
    7034:	e0bffd15 	stw	r2,-12(fp)

			free(six);
    7038:	e0bff517 	ldw	r2,-44(fp)
    703c:	1009883a 	mov	r4,r2
    7040:	000fde40 	call	fde4 <free>
		}
		if (last) {
    7044:	e0bffe17 	ldw	r2,-8(fp)
    7048:	10001d26 	beq	r2,zero,70c0 <build_FRU_blob+0x718>
			buf[last] = buf[last] | 0x80;
    704c:	e0fffb17 	ldw	r3,-20(fp)
    7050:	e0bffe17 	ldw	r2,-8(fp)
    7054:	1885883a 	add	r2,r3,r2
    7058:	11000003 	ldbu	r4,0(r2)
    705c:	e0fffb17 	ldw	r3,-20(fp)
    7060:	e0bffe17 	ldw	r2,-8(fp)
    7064:	1885883a 	add	r2,r3,r2
    7068:	00ffe004 	movi	r3,-128
    706c:	20c6b03a 	or	r3,r4,r3
    7070:	10c00005 	stb	r3,0(r2)
			/* redo the header checksum, since we just changed the header :( */
			buf[last + 3] = 0;
    7074:	e0bffe17 	ldw	r2,-8(fp)
    7078:	108000c4 	addi	r2,r2,3
    707c:	e0fffb17 	ldw	r3,-20(fp)
    7080:	1885883a 	add	r2,r3,r2
    7084:	10000005 	stb	zero,0(r2)
			buf[last + 3] = 0x100 - calc_zero_checksum(&buf[last - 1], 4);
    7088:	e0bffe17 	ldw	r2,-8(fp)
    708c:	10bfffc4 	addi	r2,r2,-1
    7090:	e0fffb17 	ldw	r3,-20(fp)
    7094:	1885883a 	add	r2,r3,r2
    7098:	01400104 	movi	r5,4
    709c:	1009883a 	mov	r4,r2
    70a0:	00050d00 	call	50d0 <calc_zero_checksum>
    70a4:	1009883a 	mov	r4,r2
    70a8:	e0bffe17 	ldw	r2,-8(fp)
    70ac:	108000c4 	addi	r2,r2,3
    70b0:	e0fffb17 	ldw	r3,-20(fp)
    70b4:	1885883a 	add	r2,r3,r2
    70b8:	0107c83a 	sub	r3,zero,r4
    70bc:	10c00005 	stb	r3,0(r2)
		}
	}
	buf[7] = 256 - calc_zero_checksum(buf, 6);
    70c0:	01400184 	movi	r5,6
    70c4:	e13ffb17 	ldw	r4,-20(fp)
    70c8:	00050d00 	call	50d0 <calc_zero_checksum>
    70cc:	1007883a 	mov	r3,r2
    70d0:	e0bffb17 	ldw	r2,-20(fp)
    70d4:	108001c4 	addi	r2,r2,7
    70d8:	00c7c83a 	sub	r3,zero,r3
    70dc:	10c00005 	stb	r3,0(r2)

	*length = i;
    70e0:	e0bff317 	ldw	r2,-52(fp)
    70e4:	e0fffd17 	ldw	r3,-12(fp)
    70e8:	10c00015 	stw	r3,0(r2)
	return buf;
    70ec:	e0bffb17 	ldw	r2,-20(fp)
}
    70f0:	e037883a 	mov	sp,fp
    70f4:	dfc00117 	ldw	ra,4(sp)
    70f8:	df000017 	ldw	fp,0(sp)
    70fc:	dec00204 	addi	sp,sp,8
    7100:	f800283a 	ret

00007104 <jesd_read>:
* @brief jesd_read
*******************************************************************************/
int32_t jesd_read(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t *reg_data)
{
    7104:	defffc04 	addi	sp,sp,-16
    7108:	df000315 	stw	fp,12(sp)
    710c:	df000304 	addi	fp,sp,12
    7110:	e13fff15 	stw	r4,-4(fp)
    7114:	e17ffe15 	stw	r5,-8(fp)
    7118:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((jesd->base_address + reg_addr));
    711c:	e0bfff17 	ldw	r2,-4(fp)
    7120:	10c00017 	ldw	r3,0(r2)
    7124:	e0bffe17 	ldw	r2,-8(fp)
    7128:	1885883a 	add	r2,r3,r2
    712c:	10800037 	ldwio	r2,0(r2)
    7130:	1007883a 	mov	r3,r2
    7134:	e0bffd17 	ldw	r2,-12(fp)
    7138:	10c00015 	stw	r3,0(r2)

	return 0;
    713c:	0005883a 	mov	r2,zero
}
    7140:	e037883a 	mov	sp,fp
    7144:	df000017 	ldw	fp,0(sp)
    7148:	dec00104 	addi	sp,sp,4
    714c:	f800283a 	ret

00007150 <jesd_write>:
* @brief jesd_write
*******************************************************************************/
int32_t jesd_write(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t reg_data)
{
    7150:	defffc04 	addi	sp,sp,-16
    7154:	df000315 	stw	fp,12(sp)
    7158:	df000304 	addi	fp,sp,12
    715c:	e13fff15 	stw	r4,-4(fp)
    7160:	e17ffe15 	stw	r5,-8(fp)
    7164:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((jesd->base_address + reg_addr), reg_data);
    7168:	e0bfff17 	ldw	r2,-4(fp)
    716c:	10c00017 	ldw	r3,0(r2)
    7170:	e0bffe17 	ldw	r2,-8(fp)
    7174:	1885883a 	add	r2,r3,r2
    7178:	1007883a 	mov	r3,r2
    717c:	e0bffd17 	ldw	r2,-12(fp)
    7180:	18800035 	stwio	r2,0(r3)

	return 0;
    7184:	0005883a 	mov	r2,zero
}
    7188:	e037883a 	mov	sp,fp
    718c:	df000017 	ldw	fp,0(sp)
    7190:	dec00104 	addi	sp,sp,4
    7194:	f800283a 	ret

00007198 <jesd_setup>:

/***************************************************************************//**
* @brief jesd_init
*******************************************************************************/
int32_t jesd_setup(jesd_core *jesd)
{
    7198:	defffd04 	addi	sp,sp,-12
    719c:	dfc00215 	stw	ra,8(sp)
    71a0:	df000115 	stw	fp,4(sp)
    71a4:	df000104 	addi	fp,sp,4
    71a8:	e13fff15 	stw	r4,-4(fp)
	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 1);
    71ac:	01800044 	movi	r6,1
    71b0:	01403004 	movi	r5,192
    71b4:	e13fff17 	ldw	r4,-4(fp)
    71b8:	00071500 	call	7150 <jesd_write>
	jesd_write(jesd, JESD204_REG_LINK_CONF0, (((jesd->octets_per_frame-1) << 16) |
    71bc:	e0bfff17 	ldw	r2,-4(fp)
    71c0:	108001c3 	ldbu	r2,7(r2)
    71c4:	10803fcc 	andi	r2,r2,255
    71c8:	10bfffc4 	addi	r2,r2,-1
    71cc:	1006943a 	slli	r3,r2,16
		((jesd->frames_per_multiframe*jesd->octets_per_frame)-1)));
    71d0:	e0bfff17 	ldw	r2,-4(fp)
    71d4:	10800203 	ldbu	r2,8(r2)
    71d8:	11003fcc 	andi	r4,r2,255
    71dc:	e0bfff17 	ldw	r2,-4(fp)
    71e0:	108001c3 	ldbu	r2,7(r2)
    71e4:	10803fcc 	andi	r2,r2,255
    71e8:	2085383a 	mul	r2,r4,r2
    71ec:	10bfffc4 	addi	r2,r2,-1
	jesd_write(jesd, JESD204_REG_LINK_CONF0, (((jesd->octets_per_frame-1) << 16) |
    71f0:	1884b03a 	or	r2,r3,r2
    71f4:	100d883a 	mov	r6,r2
    71f8:	01408404 	movi	r5,528
    71fc:	e13fff17 	ldw	r4,-4(fp)
    7200:	00071500 	call	7150 <jesd_write>
	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 0);
    7204:	000d883a 	mov	r6,zero
    7208:	01403004 	movi	r5,192
    720c:	e13fff17 	ldw	r4,-4(fp)
    7210:	00071500 	call	7150 <jesd_write>
	mdelay(100);
    7214:	010000b4 	movhi	r4,2
    7218:	2121a804 	addi	r4,r4,-31072
    721c:	00206540 	call	20654 <usleep>
	return(0);
    7220:	0005883a 	mov	r2,zero
}
    7224:	e037883a 	mov	sp,fp
    7228:	dfc00117 	ldw	ra,4(sp)
    722c:	df000017 	ldw	fp,0(sp)
    7230:	dec00204 	addi	sp,sp,8
    7234:	f800283a 	ret

00007238 <jesd_sysref_control>:

/***************************************************************************//**
* @brief jesd generate SYSREF if necessar
*******************************************************************************/
int32_t jesd_sysref_control(jesd_core *jesd, uint32_t enable)
{
    7238:	defffb04 	addi	sp,sp,-20
    723c:	dfc00415 	stw	ra,16(sp)
    7240:	df000315 	stw	fp,12(sp)
    7244:	df000304 	addi	fp,sp,12
    7248:	e13ffe15 	stw	r4,-8(fp)
    724c:	e17ffd15 	stw	r5,-12(fp)
	gpio_desc *sysref_pin;
	if ((jesd->sysref_type == INTERN) && (jesd->subclass_mode >= 1)) {
    7250:	e0bffe17 	ldw	r2,-8(fp)
    7254:	10800417 	ldw	r2,16(r2)
    7258:	10800058 	cmpnei	r2,r2,1
    725c:	1000161e 	bne	r2,zero,72b8 <jesd_sysref_control+0x80>
    7260:	e0bffe17 	ldw	r2,-8(fp)
    7264:	10800343 	ldbu	r2,13(r2)
    7268:	10803fcc 	andi	r2,r2,255
    726c:	10001226 	beq	r2,zero,72b8 <jesd_sysref_control+0x80>

		// generate SYS_REF

		gpio_get(&sysref_pin, jesd->sysref_gpio_pin);
    7270:	e0bffe17 	ldw	r2,-8(fp)
    7274:	10800517 	ldw	r2,20(r2)
    7278:	10c03fcc 	andi	r3,r2,255
    727c:	e0bfff04 	addi	r2,fp,-4
    7280:	180b883a 	mov	r5,r3
    7284:	1009883a 	mov	r4,r2
    7288:	0007e2c0 	call	7e2c <gpio_get>

		gpio_set_value(sysref_pin, enable);
    728c:	e0bfff17 	ldw	r2,-4(fp)
    7290:	e0fffd17 	ldw	r3,-12(fp)
    7294:	18c03fcc 	andi	r3,r3,255
    7298:	180b883a 	mov	r5,r3
    729c:	1009883a 	mov	r4,r2
    72a0:	0007f680 	call	7f68 <gpio_set_value>

		gpio_remove(sysref_pin);
    72a4:	e0bfff17 	ldw	r2,-4(fp)
    72a8:	1009883a 	mov	r4,r2
    72ac:	0007ebc0 	call	7ebc <gpio_remove>

		mdelay(10);
    72b0:	0109c404 	movi	r4,10000
    72b4:	00206540 	call	20654 <usleep>
	}
	return 0;
    72b8:	0005883a 	mov	r2,zero
}
    72bc:	e037883a 	mov	sp,fp
    72c0:	dfc00117 	ldw	ra,4(sp)
    72c4:	df000017 	ldw	fp,0(sp)
    72c8:	dec00204 	addi	sp,sp,8
    72cc:	f800283a 	ret

000072d0 <jesd_status>:

/***************************************************************************//**
* @brief jesd_read_status generic
*******************************************************************************/
int32_t jesd_status(jesd_core *jesd)
{
    72d0:	defffa04 	addi	sp,sp,-24
    72d4:	dfc00515 	stw	ra,20(sp)
    72d8:	df000415 	stw	fp,16(sp)
    72dc:	df000404 	addi	fp,sp,16
    72e0:	e13ffc15 	stw	r4,-16(fp)
	uint32_t status;
	int32_t timeout;
	int32_t ret;

	ret = 0;
    72e4:	e03ffe15 	stw	zero,-8(fp)
	timeout = 100;
    72e8:	00801904 	movi	r2,100
    72ec:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    72f0:	00000e06 	br	732c <jesd_status+0x5c>
		mdelay(1);
    72f4:	0100fa04 	movi	r4,1000
    72f8:	00206540 	call	20654 <usleep>
		jesd_read(jesd, 0x280, &status);
    72fc:	e0bffd04 	addi	r2,fp,-12
    7300:	100d883a 	mov	r6,r2
    7304:	0140a004 	movi	r5,640
    7308:	e13ffc17 	ldw	r4,-16(fp)
    730c:	00071040 	call	7104 <jesd_read>
		if ((status & 0x13) == 0x13) break;
    7310:	e0bffd17 	ldw	r2,-12(fp)
    7314:	108004cc 	andi	r2,r2,19
    7318:	108004d8 	cmpnei	r2,r2,19
    731c:	10000626 	beq	r2,zero,7338 <jesd_status+0x68>
		timeout = timeout - 1;
    7320:	e0bfff17 	ldw	r2,-4(fp)
    7324:	10bfffc4 	addi	r2,r2,-1
    7328:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    732c:	e0bfff17 	ldw	r2,-4(fp)
    7330:	00bff016 	blt	zero,r2,72f4 <__alt_mem_mcu_subsystem_ram_0+0x77fe72f4>
    7334:	00000106 	br	733c <jesd_status+0x6c>
		if ((status & 0x13) == 0x13) break;
    7338:	0001883a 	nop
	}
	if ((status & 0x10) != 0x10) {
    733c:	e0bffd17 	ldw	r2,-12(fp)
    7340:	1080040c 	andi	r2,r2,16
    7344:	1000091e 	bne	r2,zero,736c <jesd_status+0x9c>
		ad_printf("%s jesd_status: out of sync (%x)!\n", __func__, status);
    7348:	e0bffd17 	ldw	r2,-12(fp)
    734c:	100d883a 	mov	r6,r2
    7350:	014000b4 	movhi	r5,2
    7354:	29598604 	addi	r5,r5,26136
    7358:	010000b4 	movhi	r4,2
    735c:	2118e104 	addi	r4,r4,25476
    7360:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    7364:	00bfffc4 	movi	r2,-1
    7368:	e0bffe15 	stw	r2,-8(fp)
	}
	if ((status & 0x03) != 0x03) {
    736c:	e0bffd17 	ldw	r2,-12(fp)
    7370:	108000cc 	andi	r2,r2,3
    7374:	108000e0 	cmpeqi	r2,r2,3
    7378:	1000091e 	bne	r2,zero,73a0 <jesd_status+0xd0>
		ad_printf("%s jesd_status: not in data phase (%x)!\n", __func__, status);
    737c:	e0bffd17 	ldw	r2,-12(fp)
    7380:	100d883a 	mov	r6,r2
    7384:	014000b4 	movhi	r5,2
    7388:	29598604 	addi	r5,r5,26136
    738c:	010000b4 	movhi	r4,2
    7390:	2118ea04 	addi	r4,r4,25512
    7394:	0010ec40 	call	10ec4 <printf>
		ret = -1;
    7398:	00bfffc4 	movi	r2,-1
    739c:	e0bffe15 	stw	r2,-8(fp)
	}
	ad_printf("%s jesd_status: %x\n", __func__, status);
    73a0:	e0bffd17 	ldw	r2,-12(fp)
    73a4:	100d883a 	mov	r6,r2
    73a8:	014000b4 	movhi	r5,2
    73ac:	29598604 	addi	r5,r5,26136
    73b0:	010000b4 	movhi	r4,2
    73b4:	2118f504 	addi	r4,r4,25556
    73b8:	0010ec40 	call	10ec4 <printf>

	return(ret);
    73bc:	e0bffe17 	ldw	r2,-8(fp)
}
    73c0:	e037883a 	mov	sp,fp
    73c4:	dfc00117 	ldw	ra,4(sp)
    73c8:	df000017 	ldw	fp,0(sp)
    73cc:	dec00204 	addi	sp,sp,8
    73d0:	f800283a 	ret

000073d4 <axi_jesd204_rx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_rx_status_read
*******************************************************************************/
int32_t axi_jesd204_rx_status_read(jesd_core *jesd)
{
    73d4:	defff804 	addi	sp,sp,-32
    73d8:	dfc00715 	stw	ra,28(sp)
    73dc:	df000615 	stw	fp,24(sp)
    73e0:	df000604 	addi	fp,sp,24
    73e4:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
    73e8:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
    73ec:	e0bffd04 	addi	r2,fp,-12
    73f0:	100d883a 	mov	r6,r2
    73f4:	01403104 	movi	r5,196
    73f8:	e13ffa17 	ldw	r4,-24(fp)
    73fc:	00071040 	call	7104 <jesd_read>
    7400:	1007883a 	mov	r3,r2
    7404:	e0bfff17 	ldw	r2,-4(fp)
    7408:	10c4b03a 	or	r2,r2,r3
    740c:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
    7410:	e0bffc04 	addi	r2,fp,-16
    7414:	100d883a 	mov	r6,r2
    7418:	0140a004 	movi	r5,640
    741c:	e13ffa17 	ldw	r4,-24(fp)
    7420:	00071040 	call	7104 <jesd_read>
    7424:	1007883a 	mov	r3,r2
    7428:	e0bfff17 	ldw	r2,-4(fp)
    742c:	10c4b03a 	or	r2,r2,r3
    7430:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
    7434:	e0bffe04 	addi	r2,fp,-8
    7438:	100d883a 	mov	r6,r2
    743c:	01404204 	movi	r5,264
    7440:	e13ffa17 	ldw	r4,-24(fp)
    7444:	00071040 	call	7104 <jesd_read>
    7448:	1007883a 	mov	r3,r2
    744c:	e0bfff17 	ldw	r2,-4(fp)
    7450:	10c4b03a 	or	r2,r2,r3
    7454:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
    7458:	e0bffb04 	addi	r2,fp,-20
    745c:	100d883a 	mov	r6,r2
    7460:	01403204 	movi	r5,200
    7464:	e13ffa17 	ldw	r4,-24(fp)
    7468:	00071040 	call	7104 <jesd_read>
    746c:	1007883a 	mov	r3,r2
    7470:	e0bfff17 	ldw	r2,-4(fp)
    7474:	10c4b03a 	or	r2,r2,r3
    7478:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Rx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
    747c:	e0bffd17 	ldw	r2,-12(fp)
    7480:	1080004c 	andi	r2,r2,1
	ad_printf("Rx link is %s\n",
    7484:	10000326 	beq	r2,zero,7494 <axi_jesd204_rx_status_read+0xc0>
    7488:	008000b4 	movhi	r2,2
    748c:	1098fa04 	addi	r2,r2,25576
    7490:	00000206 	br	749c <axi_jesd204_rx_status_read+0xc8>
    7494:	008000b4 	movhi	r2,2
    7498:	1098fd04 	addi	r2,r2,25588
    749c:	100b883a 	mov	r5,r2
    74a0:	010000b4 	movhi	r4,2
    74a4:	2118ff04 	addi	r4,r4,25596
    74a8:	0010ec40 	call	10ec4 <printf>

	if (clock_ratio == 0) {
    74ac:	e0bffb17 	ldw	r2,-20(fp)
    74b0:	1000041e 	bne	r2,zero,74c4 <axi_jesd204_rx_status_read+0xf0>
		ad_printf("Measured Link Clock: off\n");
    74b4:	010000b4 	movhi	r4,2
    74b8:	21190304 	addi	r4,r4,25612
    74bc:	0010fe80 	call	10fe8 <puts>
    74c0:	00000806 	br	74e4 <axi_jesd204_rx_status_read+0x110>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 100 + 0x7fff) >> 16);
    74c4:	e0bffb17 	ldw	r2,-20(fp)
    74c8:	10801924 	muli	r2,r2,100
    74cc:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
    74d0:	1004d43a 	srli	r2,r2,16
    74d4:	100b883a 	mov	r5,r2
    74d8:	010000b4 	movhi	r4,2
    74dc:	21190a04 	addi	r4,r4,25640
    74e0:	0010ec40 	call	10ec4 <printf>
	}

	if (!link_disabled) {
    74e4:	e0bffd17 	ldw	r2,-12(fp)
    74e8:	1000261e 	bne	r2,zero,7584 <axi_jesd204_rx_status_read+0x1b0>
		ad_printf("Link status: %s\n",
			axi_jesd204_rx_link_status_label[link_status & 0x3]);
    74ec:	e0bffc17 	ldw	r2,-16(fp)
    74f0:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
    74f4:	100690ba 	slli	r3,r2,2
    74f8:	008000b4 	movhi	r2,2
    74fc:	1885883a 	add	r2,r3,r2
    7500:	109c6717 	ldw	r2,29084(r2)
    7504:	100b883a 	mov	r5,r2
    7508:	010000b4 	movhi	r4,2
    750c:	21191204 	addi	r4,r4,25672
    7510:	0010ec40 	call	10ec4 <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
    7514:	e0bffe17 	ldw	r2,-8(fp)
    7518:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
    751c:	10000326 	beq	r2,zero,752c <axi_jesd204_rx_status_read+0x158>
    7520:	008000b4 	movhi	r2,2
    7524:	10991704 	addi	r2,r2,25692
    7528:	00000206 	br	7534 <axi_jesd204_rx_status_read+0x160>
    752c:	008000b4 	movhi	r2,2
    7530:	10991804 	addi	r2,r2,25696
    7534:	100b883a 	mov	r5,r2
    7538:	010000b4 	movhi	r4,2
    753c:	21191904 	addi	r4,r4,25700
    7540:	0010ec40 	call	10ec4 <printf>
		if (sysref_status & 2) {
    7544:	e0bffe17 	ldw	r2,-8(fp)
    7548:	1080008c 	andi	r2,r2,2
    754c:	10001926 	beq	r2,zero,75b4 <axi_jesd204_rx_status_read+0x1e0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
    7550:	e0bffe17 	ldw	r2,-8(fp)
    7554:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
    7558:	10000326 	beq	r2,zero,7568 <axi_jesd204_rx_status_read+0x194>
    755c:	008000b4 	movhi	r2,2
    7560:	10991704 	addi	r2,r2,25692
    7564:	00000206 	br	7570 <axi_jesd204_rx_status_read+0x19c>
    7568:	008000b4 	movhi	r2,2
    756c:	10991804 	addi	r2,r2,25696
    7570:	100b883a 	mov	r5,r2
    7574:	010000b4 	movhi	r4,2
    7578:	21191f04 	addi	r4,r4,25724
    757c:	0010ec40 	call	10ec4 <printf>
    7580:	00000c06 	br	75b4 <axi_jesd204_rx_status_read+0x1e0>
		}

	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
    7584:	e0bffd17 	ldw	r2,-12(fp)
    7588:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
    758c:	10000326 	beq	r2,zero,759c <axi_jesd204_rx_status_read+0x1c8>
    7590:	008000b4 	movhi	r2,2
    7594:	10992504 	addi	r2,r2,25748
    7598:	00000206 	br	75a4 <axi_jesd204_rx_status_read+0x1d0>
    759c:	008000b4 	movhi	r2,2
    75a0:	10992804 	addi	r2,r2,25760
    75a4:	100b883a 	mov	r5,r2
    75a8:	010000b4 	movhi	r4,2
    75ac:	21192b04 	addi	r4,r4,25772
    75b0:	0010ec40 	call	10ec4 <printf>
	}

	return ret;
    75b4:	e0bfff17 	ldw	r2,-4(fp)
}
    75b8:	e037883a 	mov	sp,fp
    75bc:	dfc00117 	ldw	ra,4(sp)
    75c0:	df000017 	ldw	fp,0(sp)
    75c4:	dec00204 	addi	sp,sp,8
    75c8:	f800283a 	ret

000075cc <axi_jesd204_tx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_tx_status_read
*******************************************************************************/
int32_t axi_jesd204_tx_status_read(jesd_core *jesd)
{
    75cc:	defff804 	addi	sp,sp,-32
    75d0:	dfc00715 	stw	ra,28(sp)
    75d4:	df000615 	stw	fp,24(sp)
    75d8:	df000604 	addi	fp,sp,24
    75dc:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
    75e0:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
    75e4:	e0bffd04 	addi	r2,fp,-12
    75e8:	100d883a 	mov	r6,r2
    75ec:	01403104 	movi	r5,196
    75f0:	e13ffa17 	ldw	r4,-24(fp)
    75f4:	00071040 	call	7104 <jesd_read>
    75f8:	1007883a 	mov	r3,r2
    75fc:	e0bfff17 	ldw	r2,-4(fp)
    7600:	10c4b03a 	or	r2,r2,r3
    7604:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
    7608:	e0bffc04 	addi	r2,fp,-16
    760c:	100d883a 	mov	r6,r2
    7610:	0140a004 	movi	r5,640
    7614:	e13ffa17 	ldw	r4,-24(fp)
    7618:	00071040 	call	7104 <jesd_read>
    761c:	1007883a 	mov	r3,r2
    7620:	e0bfff17 	ldw	r2,-4(fp)
    7624:	10c4b03a 	or	r2,r2,r3
    7628:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
    762c:	e0bffe04 	addi	r2,fp,-8
    7630:	100d883a 	mov	r6,r2
    7634:	01404204 	movi	r5,264
    7638:	e13ffa17 	ldw	r4,-24(fp)
    763c:	00071040 	call	7104 <jesd_read>
    7640:	1007883a 	mov	r3,r2
    7644:	e0bfff17 	ldw	r2,-4(fp)
    7648:	10c4b03a 	or	r2,r2,r3
    764c:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
    7650:	e0bffb04 	addi	r2,fp,-20
    7654:	100d883a 	mov	r6,r2
    7658:	01403204 	movi	r5,200
    765c:	e13ffa17 	ldw	r4,-24(fp)
    7660:	00071040 	call	7104 <jesd_read>
    7664:	1007883a 	mov	r3,r2
    7668:	e0bfff17 	ldw	r2,-4(fp)
    766c:	10c4b03a 	or	r2,r2,r3
    7670:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Tx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
    7674:	e0bffd17 	ldw	r2,-12(fp)
    7678:	1080004c 	andi	r2,r2,1
	ad_printf("Tx link is %s\n",
    767c:	10000326 	beq	r2,zero,768c <axi_jesd204_tx_status_read+0xc0>
    7680:	008000b4 	movhi	r2,2
    7684:	1098fa04 	addi	r2,r2,25576
    7688:	00000206 	br	7694 <axi_jesd204_tx_status_read+0xc8>
    768c:	008000b4 	movhi	r2,2
    7690:	1098fd04 	addi	r2,r2,25588
    7694:	100b883a 	mov	r5,r2
    7698:	010000b4 	movhi	r4,2
    769c:	21193104 	addi	r4,r4,25796
    76a0:	0010ec40 	call	10ec4 <printf>

	if (clock_ratio == 0) {
    76a4:	e0bffb17 	ldw	r2,-20(fp)
    76a8:	1000041e 	bne	r2,zero,76bc <axi_jesd204_tx_status_read+0xf0>
		ad_printf("Measured Link Clock: off\n");
    76ac:	010000b4 	movhi	r4,2
    76b0:	21190304 	addi	r4,r4,25612
    76b4:	0010fe80 	call	10fe8 <puts>
    76b8:	00000806 	br	76dc <axi_jesd204_tx_status_read+0x110>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 100 + 0x7fff) >> 16);;
    76bc:	e0bffb17 	ldw	r2,-20(fp)
    76c0:	10801924 	muli	r2,r2,100
    76c4:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
    76c8:	1004d43a 	srli	r2,r2,16
    76cc:	100b883a 	mov	r5,r2
    76d0:	010000b4 	movhi	r4,2
    76d4:	21190a04 	addi	r4,r4,25640
    76d8:	0010ec40 	call	10ec4 <printf>
	}

	if (!link_disabled) {
    76dc:	e0bffd17 	ldw	r2,-12(fp)
    76e0:	1000261e 	bne	r2,zero,777c <axi_jesd204_tx_status_read+0x1b0>
		ad_printf("Link status: %s\n",
			axi_jesd204_tx_link_status_label[link_status & 0x3]);
    76e4:	e0bffc17 	ldw	r2,-16(fp)
    76e8:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
    76ec:	100690ba 	slli	r3,r2,2
    76f0:	008000b4 	movhi	r2,2
    76f4:	1885883a 	add	r2,r3,r2
    76f8:	109c6b17 	ldw	r2,29100(r2)
    76fc:	100b883a 	mov	r5,r2
    7700:	010000b4 	movhi	r4,2
    7704:	21191204 	addi	r4,r4,25672
    7708:	0010ec40 	call	10ec4 <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
    770c:	e0bffe17 	ldw	r2,-8(fp)
    7710:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
    7714:	10000326 	beq	r2,zero,7724 <axi_jesd204_tx_status_read+0x158>
    7718:	008000b4 	movhi	r2,2
    771c:	10991704 	addi	r2,r2,25692
    7720:	00000206 	br	772c <axi_jesd204_tx_status_read+0x160>
    7724:	008000b4 	movhi	r2,2
    7728:	10991804 	addi	r2,r2,25696
    772c:	100b883a 	mov	r5,r2
    7730:	010000b4 	movhi	r4,2
    7734:	21191904 	addi	r4,r4,25700
    7738:	0010ec40 	call	10ec4 <printf>
		if (sysref_status & 2) {
    773c:	e0bffe17 	ldw	r2,-8(fp)
    7740:	1080008c 	andi	r2,r2,2
    7744:	10001926 	beq	r2,zero,77ac <axi_jesd204_tx_status_read+0x1e0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
    7748:	e0bffe17 	ldw	r2,-8(fp)
    774c:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
    7750:	10000326 	beq	r2,zero,7760 <axi_jesd204_tx_status_read+0x194>
    7754:	008000b4 	movhi	r2,2
    7758:	10991704 	addi	r2,r2,25692
    775c:	00000206 	br	7768 <axi_jesd204_tx_status_read+0x19c>
    7760:	008000b4 	movhi	r2,2
    7764:	10991804 	addi	r2,r2,25696
    7768:	100b883a 	mov	r5,r2
    776c:	010000b4 	movhi	r4,2
    7770:	21191f04 	addi	r4,r4,25724
    7774:	0010ec40 	call	10ec4 <printf>
    7778:	00000c06 	br	77ac <axi_jesd204_tx_status_read+0x1e0>
		}
	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
    777c:	e0bffd17 	ldw	r2,-12(fp)
    7780:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
    7784:	10000326 	beq	r2,zero,7794 <axi_jesd204_tx_status_read+0x1c8>
    7788:	008000b4 	movhi	r2,2
    778c:	10992504 	addi	r2,r2,25748
    7790:	00000206 	br	779c <axi_jesd204_tx_status_read+0x1d0>
    7794:	008000b4 	movhi	r2,2
    7798:	10992804 	addi	r2,r2,25760
    779c:	100b883a 	mov	r5,r2
    77a0:	010000b4 	movhi	r4,2
    77a4:	21192b04 	addi	r4,r4,25772
    77a8:	0010ec40 	call	10ec4 <printf>
	}

	return ret;
    77ac:	e0bfff17 	ldw	r2,-4(fp)
}
    77b0:	e037883a 	mov	sp,fp
    77b4:	dfc00117 	ldw	ra,4(sp)
    77b8:	df000017 	ldw	fp,0(sp)
    77bc:	dec00204 	addi	sp,sp,8
    77c0:	f800283a 	ret

000077c4 <axi_jesd204_rx_laneinfo_read>:
/***************************************************************************//**
* @brief axi_jesd204_rx_laneinfo_read
*******************************************************************************/
/* FIXME: This violates every single sysfs ABI recommendation */
int32_t axi_jesd204_rx_laneinfo_read(jesd_core *jesd, uint32_t lane)
{
    77c4:	defff004 	addi	sp,sp,-64
    77c8:	dfc00f15 	stw	ra,60(sp)
    77cc:	df000e15 	stw	fp,56(sp)
    77d0:	df000e04 	addi	fp,sp,56
    77d4:	e13ff715 	stw	r4,-36(fp)
    77d8:	e17ff615 	stw	r5,-40(fp)
	uint32_t lane_status;
	uint32_t lane_latency;
	uint32_t octets_per_multiframe;
	uint32_t val[4];
	int32_t ret = 0;
    77dc:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_STATUS(lane), &lane_status);
    77e0:	e0bff617 	ldw	r2,-40(fp)
    77e4:	10800604 	addi	r2,r2,24
    77e8:	1004917a 	slli	r2,r2,5
    77ec:	e0fffe04 	addi	r3,fp,-8
    77f0:	180d883a 	mov	r6,r3
    77f4:	100b883a 	mov	r5,r2
    77f8:	e13ff717 	ldw	r4,-36(fp)
    77fc:	00071040 	call	7104 <jesd_read>
    7800:	1007883a 	mov	r3,r2
    7804:	e0bfff17 	ldw	r2,-4(fp)
    7808:	10c4b03a 	or	r2,r2,r3
    780c:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("CGS state: %s\n",
		axi_jesd204_rx_lane_status_label[lane_status & 0x3]);
    7810:	e0bffe17 	ldw	r2,-8(fp)
    7814:	108000cc 	andi	r2,r2,3
	ad_printf("CGS state: %s\n",
    7818:	100690ba 	slli	r3,r2,2
    781c:	008000b4 	movhi	r2,2
    7820:	1885883a 	add	r2,r3,r2
    7824:	109c6f17 	ldw	r2,29116(r2)
    7828:	100b883a 	mov	r5,r2
    782c:	010000b4 	movhi	r4,2
    7830:	21193504 	addi	r4,r4,25812
    7834:	0010ec40 	call	10ec4 <printf>

	ad_printf("Initial Frame Synchronization: %s\n",
				(lane_status & BIT(4)) ? "Yes" : "No");
    7838:	e0bffe17 	ldw	r2,-8(fp)
    783c:	1080040c 	andi	r2,r2,16
	ad_printf("Initial Frame Synchronization: %s\n",
    7840:	10000326 	beq	r2,zero,7850 <axi_jesd204_rx_laneinfo_read+0x8c>
    7844:	008000b4 	movhi	r2,2
    7848:	10991704 	addi	r2,r2,25692
    784c:	00000206 	br	7858 <axi_jesd204_rx_laneinfo_read+0x94>
    7850:	008000b4 	movhi	r2,2
    7854:	10991804 	addi	r2,r2,25696
    7858:	100b883a 	mov	r5,r2
    785c:	010000b4 	movhi	r4,2
    7860:	21193904 	addi	r4,r4,25828
    7864:	0010ec40 	call	10ec4 <printf>

	if (!(lane_status & BIT(4)))
    7868:	e0bffe17 	ldw	r2,-8(fp)
    786c:	1080040c 	andi	r2,r2,16
    7870:	1000021e 	bne	r2,zero,787c <axi_jesd204_rx_laneinfo_read+0xb8>
		return ret;
    7874:	e0bfff17 	ldw	r2,-4(fp)
    7878:	0000bd06 	br	7b70 <axi_jesd204_rx_laneinfo_read+0x3ac>

	ret |= jesd_read(jesd, JESD204_REG_LINK_CONF0, &octets_per_multiframe);
    787c:	e0bffc04 	addi	r2,fp,-16
    7880:	100d883a 	mov	r6,r2
    7884:	01408404 	movi	r5,528
    7888:	e13ff717 	ldw	r4,-36(fp)
    788c:	00071040 	call	7104 <jesd_read>
    7890:	1007883a 	mov	r3,r2
    7894:	e0bfff17 	ldw	r2,-4(fp)
    7898:	10c4b03a 	or	r2,r2,r3
    789c:	e0bfff15 	stw	r2,-4(fp)
	octets_per_multiframe &= 0xffff;
    78a0:	e0bffc17 	ldw	r2,-16(fp)
    78a4:	10bfffcc 	andi	r2,r2,65535
    78a8:	e0bffc15 	stw	r2,-16(fp)
	octets_per_multiframe += 1;
    78ac:	e0bffc17 	ldw	r2,-16(fp)
    78b0:	10800044 	addi	r2,r2,1
    78b4:	e0bffc15 	stw	r2,-16(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_LATENCY(lane), &lane_latency);
    78b8:	e0bff617 	ldw	r2,-40(fp)
    78bc:	1004917a 	slli	r2,r2,5
    78c0:	1080c104 	addi	r2,r2,772
    78c4:	e0fffd04 	addi	r3,fp,-12
    78c8:	180d883a 	mov	r6,r3
    78cc:	100b883a 	mov	r5,r2
    78d0:	e13ff717 	ldw	r4,-36(fp)
    78d4:	00071040 	call	7104 <jesd_read>
    78d8:	1007883a 	mov	r3,r2
    78dc:	e0bfff17 	ldw	r2,-4(fp)
    78e0:	10c4b03a 	or	r2,r2,r3
    78e4:	e0bfff15 	stw	r2,-4(fp)
	ad_printf("Lane Latency: %d Multi-frames and %d Octets\n",
    78e8:	e0fffd17 	ldw	r3,-12(fp)
    78ec:	e0bffc17 	ldw	r2,-16(fp)
    78f0:	188b203a 	divu	r5,r3,r2
    78f4:	e0bffd17 	ldw	r2,-12(fp)
    78f8:	e0fffc17 	ldw	r3,-16(fp)
    78fc:	10c9203a 	divu	r4,r2,r3
    7900:	20c7383a 	mul	r3,r4,r3
    7904:	10c5c83a 	sub	r2,r2,r3
    7908:	100d883a 	mov	r6,r2
    790c:	010000b4 	movhi	r4,2
    7910:	21194204 	addi	r4,r4,25864
    7914:	0010ec40 	call	10ec4 <printf>
			lane_latency / octets_per_multiframe,
			lane_latency % octets_per_multiframe);

	ad_printf("Initial Lane Alignment Sequence: %s\n",
				(lane_status & BIT(5)) ? "Yes" : "No");
    7918:	e0bffe17 	ldw	r2,-8(fp)
    791c:	1080080c 	andi	r2,r2,32
	ad_printf("Initial Lane Alignment Sequence: %s\n",
    7920:	10000326 	beq	r2,zero,7930 <axi_jesd204_rx_laneinfo_read+0x16c>
    7924:	008000b4 	movhi	r2,2
    7928:	10991704 	addi	r2,r2,25692
    792c:	00000206 	br	7938 <axi_jesd204_rx_laneinfo_read+0x174>
    7930:	008000b4 	movhi	r2,2
    7934:	10991804 	addi	r2,r2,25696
    7938:	100b883a 	mov	r5,r2
    793c:	010000b4 	movhi	r4,2
    7940:	21194e04 	addi	r4,r4,25912
    7944:	0010ec40 	call	10ec4 <printf>

	if (!(lane_status & BIT(5)))
    7948:	e0bffe17 	ldw	r2,-8(fp)
    794c:	1080080c 	andi	r2,r2,32
    7950:	1000021e 	bne	r2,zero,795c <axi_jesd204_rx_laneinfo_read+0x198>
		return ret;
    7954:	e0bfff17 	ldw	r2,-4(fp)
    7958:	00008506 	br	7b70 <axi_jesd204_rx_laneinfo_read+0x3ac>

	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 0), &val[0]);
    795c:	e0bff617 	ldw	r2,-40(fp)
    7960:	1004917a 	slli	r2,r2,5
    7964:	1080c404 	addi	r2,r2,784
    7968:	e0fff804 	addi	r3,fp,-32
    796c:	180d883a 	mov	r6,r3
    7970:	100b883a 	mov	r5,r2
    7974:	e13ff717 	ldw	r4,-36(fp)
    7978:	00071040 	call	7104 <jesd_read>
    797c:	1007883a 	mov	r3,r2
    7980:	e0bfff17 	ldw	r2,-4(fp)
    7984:	10c4b03a 	or	r2,r2,r3
    7988:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 1), &val[1]);
    798c:	e0bff617 	ldw	r2,-40(fp)
    7990:	1004917a 	slli	r2,r2,5
    7994:	10c0c504 	addi	r3,r2,788
    7998:	e0bff804 	addi	r2,fp,-32
    799c:	10800104 	addi	r2,r2,4
    79a0:	100d883a 	mov	r6,r2
    79a4:	180b883a 	mov	r5,r3
    79a8:	e13ff717 	ldw	r4,-36(fp)
    79ac:	00071040 	call	7104 <jesd_read>
    79b0:	1007883a 	mov	r3,r2
    79b4:	e0bfff17 	ldw	r2,-4(fp)
    79b8:	10c4b03a 	or	r2,r2,r3
    79bc:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 2), &val[2]);
    79c0:	e0bff617 	ldw	r2,-40(fp)
    79c4:	1004917a 	slli	r2,r2,5
    79c8:	10c0c604 	addi	r3,r2,792
    79cc:	e0bff804 	addi	r2,fp,-32
    79d0:	10800204 	addi	r2,r2,8
    79d4:	100d883a 	mov	r6,r2
    79d8:	180b883a 	mov	r5,r3
    79dc:	e13ff717 	ldw	r4,-36(fp)
    79e0:	00071040 	call	7104 <jesd_read>
    79e4:	1007883a 	mov	r3,r2
    79e8:	e0bfff17 	ldw	r2,-4(fp)
    79ec:	10c4b03a 	or	r2,r2,r3
    79f0:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 3), &val[3]);
    79f4:	e0bff617 	ldw	r2,-40(fp)
    79f8:	1004917a 	slli	r2,r2,5
    79fc:	10c0c704 	addi	r3,r2,796
    7a00:	e0bff804 	addi	r2,fp,-32
    7a04:	10800304 	addi	r2,r2,12
    7a08:	100d883a 	mov	r6,r2
    7a0c:	180b883a 	mov	r5,r3
    7a10:	e13ff717 	ldw	r4,-36(fp)
    7a14:	00071040 	call	7104 <jesd_read>
    7a18:	1007883a 	mov	r3,r2
    7a1c:	e0bfff17 	ldw	r2,-4(fp)
    7a20:	10c4b03a 	or	r2,r2,r3
    7a24:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
		(val[0] >> 16) & 0xff,
    7a28:	e0bff817 	ldw	r2,-32(fp)
    7a2c:	1004d43a 	srli	r2,r2,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a30:	11403fcc 	andi	r5,r2,255
		(val[0] >> 24) & 0xf,
    7a34:	e0bff817 	ldw	r2,-32(fp)
    7a38:	1004d63a 	srli	r2,r2,24
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a3c:	118003cc 	andi	r6,r2,15
		(val[1] >> 0) & 0x1f,
    7a40:	e0bff917 	ldw	r2,-28(fp)
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a44:	11c007cc 	andi	r7,r2,31
		(val[1] >> 8) & 0x1f,
    7a48:	e0bff917 	ldw	r2,-28(fp)
    7a4c:	1004d23a 	srli	r2,r2,8
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a50:	108007cc 	andi	r2,r2,31
		(val[1] >> 15) & 0x1,
    7a54:	e0fff917 	ldw	r3,-28(fp)
    7a58:	1806d3fa 	srli	r3,r3,15
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a5c:	18c0004c 	andi	r3,r3,1
		(val[1] >> 16) & 0xff
    7a60:	e13ff917 	ldw	r4,-28(fp)
    7a64:	2008d43a 	srli	r4,r4,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
    7a68:	21003fcc 	andi	r4,r4,255
    7a6c:	d9000215 	stw	r4,8(sp)
    7a70:	d8c00115 	stw	r3,4(sp)
    7a74:	d8800015 	stw	r2,0(sp)
    7a78:	010000b4 	movhi	r4,2
    7a7c:	21195804 	addi	r4,r4,25952
    7a80:	0010ec40 	call	10ec4 <printf>
	);

	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
		(val[1] >> 24) & 0x1f,
    7a84:	e0bff917 	ldw	r2,-28(fp)
    7a88:	1004d63a 	srli	r2,r2,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7a8c:	120007cc 	andi	r8,r2,31
		(val[2] >> 0) & 0xff,
    7a90:	e0bffa17 	ldw	r2,-24(fp)
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7a94:	11803fcc 	andi	r6,r2,255
		(val[2] >> 8) & 0x1f,
    7a98:	e0bffa17 	ldw	r2,-24(fp)
    7a9c:	1004d23a 	srli	r2,r2,8
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7aa0:	11c007cc 	andi	r7,r2,31
		(val[2] >> 14) & 0x3,
    7aa4:	e0bffa17 	ldw	r2,-24(fp)
    7aa8:	1004d3ba 	srli	r2,r2,14
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7aac:	108000cc 	andi	r2,r2,3
		(val[2] >> 16) & 0x1f,
    7ab0:	e0fffa17 	ldw	r3,-24(fp)
    7ab4:	1806d43a 	srli	r3,r3,16
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7ab8:	18c007cc 	andi	r3,r3,31
		(val[2] >> 24) & 0x1f,
    7abc:	e13ffa17 	ldw	r4,-24(fp)
    7ac0:	2008d63a 	srli	r4,r4,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7ac4:	210007cc 	andi	r4,r4,31
		(val[3] >> 7) & 0x1
    7ac8:	e17ffb17 	ldw	r5,-20(fp)
    7acc:	280ad1fa 	srli	r5,r5,7
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
    7ad0:	2940004c 	andi	r5,r5,1
    7ad4:	d9400315 	stw	r5,12(sp)
    7ad8:	d9000215 	stw	r4,8(sp)
    7adc:	d8c00115 	stw	r3,4(sp)
    7ae0:	d8800015 	stw	r2,0(sp)
    7ae4:	400b883a 	mov	r5,r8
    7ae8:	010000b4 	movhi	r4,2
    7aec:	21196504 	addi	r4,r4,26004
    7af0:	0010ec40 	call	10ec4 <printf>
	);

	ad_printf("FCHK: 0x%X, CF: %d\n",
		(val[3] >> 24) & 0xff,
    7af4:	e0bffb17 	ldw	r2,-20(fp)
    7af8:	1006d63a 	srli	r3,r2,24
		(val[3] >> 0) & 0x1f
    7afc:	e0bffb17 	ldw	r2,-20(fp)
	ad_printf("FCHK: 0x%X, CF: %d\n",
    7b00:	108007cc 	andi	r2,r2,31
    7b04:	100d883a 	mov	r6,r2
    7b08:	180b883a 	mov	r5,r3
    7b0c:	010000b4 	movhi	r4,2
    7b10:	21197204 	addi	r4,r4,26056
    7b14:	0010ec40 	call	10ec4 <printf>
	);

	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
		(val[0] >> 28) & 0xff,
    7b18:	e0bff817 	ldw	r2,-32(fp)
    7b1c:	1008d73a 	srli	r4,r2,28
		(val[1] >> 5) & 0x1,
    7b20:	e0bff917 	ldw	r2,-28(fp)
    7b24:	1004d17a 	srli	r2,r2,5
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    7b28:	1140004c 	andi	r5,r2,1
		(val[1] >> 6) & 0x1,
    7b2c:	e0bff917 	ldw	r2,-28(fp)
    7b30:	1004d1ba 	srli	r2,r2,6
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    7b34:	1180004c 	andi	r6,r2,1
		(val[2] >> 29) & 0x7,
    7b38:	e0bffa17 	ldw	r2,-24(fp)
    7b3c:	1004d77a 	srli	r2,r2,29
		(val[2] >> 21) & 0x7
    7b40:	e0fffa17 	ldw	r3,-24(fp)
    7b44:	1806d57a 	srli	r3,r3,21
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
    7b48:	18c001cc 	andi	r3,r3,7
    7b4c:	d8c00115 	stw	r3,4(sp)
    7b50:	d8800015 	stw	r2,0(sp)
    7b54:	300f883a 	mov	r7,r6
    7b58:	280d883a 	mov	r6,r5
    7b5c:	200b883a 	mov	r5,r4
    7b60:	010000b4 	movhi	r4,2
    7b64:	21197704 	addi	r4,r4,26076
    7b68:	0010ec40 	call	10ec4 <printf>
	);

	return ret;
    7b6c:	e0bfff17 	ldw	r2,-4(fp)
}
    7b70:	e037883a 	mov	sp,fp
    7b74:	dfc00117 	ldw	ra,4(sp)
    7b78:	df000017 	ldw	fp,0(sp)
    7b7c:	dec00204 	addi	sp,sp,8
    7b80:	f800283a 	ret

00007b84 <i2c_init>:
 * @param init_param - The structure that contains the I2C parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_init(i2c_desc **desc,
		 const i2c_init_param *param)
{
    7b84:	defffd04 	addi	sp,sp,-12
    7b88:	df000215 	stw	fp,8(sp)
    7b8c:	df000204 	addi	fp,sp,8
    7b90:	e13fff15 	stw	r4,-4(fp)
    7b94:	e17ffe15 	stw	r5,-8(fp)

	if (param->type) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    7b98:	0005883a 	mov	r2,zero
}
    7b9c:	e037883a 	mov	sp,fp
    7ba0:	df000017 	ldw	fp,0(sp)
    7ba4:	dec00104 	addi	sp,sp,4
    7ba8:	f800283a 	ret

00007bac <i2c_remove>:
 * @brief Free the resources allocated by i2c_init().
 * @param desc - The I2C descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_remove(i2c_desc *desc)
{
    7bac:	defffe04 	addi	sp,sp,-8
    7bb0:	df000115 	stw	fp,4(sp)
    7bb4:	df000104 	addi	fp,sp,4
    7bb8:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    7bbc:	0005883a 	mov	r2,zero
}
    7bc0:	e037883a 	mov	sp,fp
    7bc4:	df000017 	ldw	fp,0(sp)
    7bc8:	dec00104 	addi	sp,sp,4
    7bcc:	f800283a 	ret

00007bd0 <i2c_write>:
 */
int32_t i2c_write(i2c_desc *desc,
		  uint8_t *data,
		  uint8_t bytes_number,
		  uint8_t stop_bit)
{
    7bd0:	defffb04 	addi	sp,sp,-20
    7bd4:	df000415 	stw	fp,16(sp)
    7bd8:	df000404 	addi	fp,sp,16
    7bdc:	e13fff15 	stw	r4,-4(fp)
    7be0:	e17ffe15 	stw	r5,-8(fp)
    7be4:	3005883a 	mov	r2,r6
    7be8:	3807883a 	mov	r3,r7
    7bec:	e0bffd05 	stb	r2,-12(fp)
    7bf0:	1805883a 	mov	r2,r3
    7bf4:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    7bf8:	0005883a 	mov	r2,zero
}
    7bfc:	e037883a 	mov	sp,fp
    7c00:	df000017 	ldw	fp,0(sp)
    7c04:	dec00104 	addi	sp,sp,4
    7c08:	f800283a 	ret

00007c0c <i2c_read>:
 */
int32_t i2c_read(i2c_desc *desc,
		 uint8_t *data,
		 uint8_t bytes_number,
		 uint8_t stop_bit)
{
    7c0c:	defffb04 	addi	sp,sp,-20
    7c10:	df000415 	stw	fp,16(sp)
    7c14:	df000404 	addi	fp,sp,16
    7c18:	e13fff15 	stw	r4,-4(fp)
    7c1c:	e17ffe15 	stw	r5,-8(fp)
    7c20:	3005883a 	mov	r2,r6
    7c24:	3807883a 	mov	r3,r7
    7c28:	e0bffd05 	stb	r2,-12(fp)
    7c2c:	1805883a 	mov	r2,r3
    7c30:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
    7c34:	0005883a 	mov	r2,zero
}
    7c38:	e037883a 	mov	sp,fp
    7c3c:	df000017 	ldw	fp,0(sp)
    7c40:	dec00104 	addi	sp,sp,4
    7c44:	f800283a 	ret

00007c48 <spi_init>:
 * @param init_param - The structure that contains the SPI parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_init(spi_desc **desc,
		 const spi_init_param *param)
{
    7c48:	defffb04 	addi	sp,sp,-20
    7c4c:	dfc00415 	stw	ra,16(sp)
    7c50:	df000315 	stw	fp,12(sp)
    7c54:	df000304 	addi	fp,sp,12
    7c58:	e13ffe15 	stw	r4,-8(fp)
    7c5c:	e17ffd15 	stw	r5,-12(fp)
	spi_desc *dev;

	dev = (spi_desc *)malloc(sizeof(*dev));
    7c60:	01000704 	movi	r4,28
    7c64:	000fdd40 	call	fdd4 <malloc>
    7c68:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
    7c6c:	e0bfff17 	ldw	r2,-4(fp)
    7c70:	1000021e 	bne	r2,zero,7c7c <spi_init+0x34>
		return FAILURE;
    7c74:	00bfffc4 	movi	r2,-1
    7c78:	00001f06 	br	7cf8 <spi_init+0xb0>

	dev->type = param->type;
    7c7c:	e0bffd17 	ldw	r2,-12(fp)
    7c80:	10c00017 	ldw	r3,0(r2)
    7c84:	e0bfff17 	ldw	r2,-4(fp)
    7c88:	10c00015 	stw	r3,0(r2)
	dev->id = 0;
    7c8c:	e0bfff17 	ldw	r2,-4(fp)
    7c90:	10000115 	stw	zero,4(r2)

	switch(dev->type) {
    7c94:	e0bfff17 	ldw	r2,-4(fp)
    7c98:	10800017 	ldw	r2,0(r2)
    7c9c:	108000e0 	cmpeqi	r2,r2,3
    7ca0:	1000041e 	bne	r2,zero,7cb4 <spi_init+0x6c>
#ifdef NIOS_II
	case NIOS_II_SPI:
		break;
#endif
	default:
		free(dev);
    7ca4:	e13fff17 	ldw	r4,-4(fp)
    7ca8:	000fde40 	call	fde4 <free>
		return FAILURE;
    7cac:	00bfffc4 	movi	r2,-1
    7cb0:	00001106 	br	7cf8 <spi_init+0xb0>
		break;
    7cb4:	0001883a 	nop
	}

	dev->chip_select = param->chip_select;
    7cb8:	e0bffd17 	ldw	r2,-12(fp)
    7cbc:	10c00103 	ldbu	r3,4(r2)
    7cc0:	e0bfff17 	ldw	r2,-4(fp)
    7cc4:	10c00405 	stb	r3,16(r2)
	dev->cpha = param->cpha;
    7cc8:	e0bffd17 	ldw	r2,-12(fp)
    7ccc:	10c00217 	ldw	r3,8(r2)
    7cd0:	e0bfff17 	ldw	r2,-4(fp)
    7cd4:	10c00515 	stw	r3,20(r2)
	dev->cpol = param->cpol;
    7cd8:	e0bffd17 	ldw	r2,-12(fp)
    7cdc:	10c00317 	ldw	r3,12(r2)
    7ce0:	e0bfff17 	ldw	r2,-4(fp)
    7ce4:	10c00615 	stw	r3,24(r2)
		free(dev);
		return FAILURE;
	}
#endif

	*desc = dev;
    7ce8:	e0bffe17 	ldw	r2,-8(fp)
    7cec:	e0ffff17 	ldw	r3,-4(fp)
    7cf0:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
    7cf4:	0005883a 	mov	r2,zero
}
    7cf8:	e037883a 	mov	sp,fp
    7cfc:	dfc00117 	ldw	ra,4(sp)
    7d00:	df000017 	ldw	fp,0(sp)
    7d04:	dec00204 	addi	sp,sp,8
    7d08:	f800283a 	ret

00007d0c <spi_remove>:
 * @brief Free the resources allocated by spi_init().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_remove(spi_desc *desc)
{
    7d0c:	defffd04 	addi	sp,sp,-12
    7d10:	dfc00215 	stw	ra,8(sp)
    7d14:	df000115 	stw	fp,4(sp)
    7d18:	df000104 	addi	fp,sp,4
    7d1c:	e13fff15 	stw	r4,-4(fp)
	free(desc);
    7d20:	e13fff17 	ldw	r4,-4(fp)
    7d24:	000fde40 	call	fde4 <free>

	return SUCCESS;
    7d28:	0005883a 	mov	r2,zero
}
    7d2c:	e037883a 	mov	sp,fp
    7d30:	dfc00117 	ldw	ra,4(sp)
    7d34:	df000017 	ldw	fp,0(sp)
    7d38:	dec00204 	addi	sp,sp,8
    7d3c:	f800283a 	ret

00007d40 <spi_write_and_read>:
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_write_and_read(spi_desc *desc,
			   uint8_t *data,
			   uint8_t bytes_number)
{
    7d40:	defffb04 	addi	sp,sp,-20
    7d44:	df000415 	stw	fp,16(sp)
    7d48:	df000404 	addi	fp,sp,16
    7d4c:	e13ffe15 	stw	r4,-8(fp)
    7d50:	e17ffd15 	stw	r5,-12(fp)
    7d54:	3005883a 	mov	r2,r6
    7d58:	e0bffc05 	stb	r2,-16(fp)

#ifdef NIOS_II

	uint32_t i;

	IOWR_32DIRECT(SPI_BASE, 0x0c, 0x400);
    7d5c:	00c10004 	movi	r3,1024
    7d60:	00a20234 	movhi	r2,34824
    7d64:	10ee2335 	stwio	r3,-18292(r2)
	IOWR_32DIRECT(SPI_BASE, 0x14, ~(desc->chip_select));
    7d68:	e0bffe17 	ldw	r2,-8(fp)
    7d6c:	10800403 	ldbu	r2,16(r2)
    7d70:	10803fcc 	andi	r2,r2,255
    7d74:	0086303a 	nor	r3,zero,r2
    7d78:	00a20234 	movhi	r2,34824
    7d7c:	10ee2535 	stwio	r3,-18284(r2)
	for (i = 0; i < bytes_number; i++) {
    7d80:	e03fff15 	stw	zero,-4(fp)
    7d84:	00001b06 	br	7df4 <spi_write_and_read+0xb4>
		while ((IORD_32DIRECT(SPI_BASE, 0x08) & 0x40) == 0x00) {}
    7d88:	0001883a 	nop
    7d8c:	00a20234 	movhi	r2,34824
    7d90:	10ae2237 	ldwio	r2,-18296(r2)
    7d94:	1080100c 	andi	r2,r2,64
    7d98:	103ffc26 	beq	r2,zero,7d8c <__alt_mem_mcu_subsystem_ram_0+0x77fe7d8c>
		IOWR_32DIRECT(SPI_BASE, 0x04, *(data + i));
    7d9c:	e0fffd17 	ldw	r3,-12(fp)
    7da0:	e0bfff17 	ldw	r2,-4(fp)
    7da4:	1885883a 	add	r2,r3,r2
    7da8:	10800003 	ldbu	r2,0(r2)
    7dac:	10c03fcc 	andi	r3,r2,255
    7db0:	00a20234 	movhi	r2,34824
    7db4:	10ee2135 	stwio	r3,-18300(r2)
		while ((IORD_32DIRECT(SPI_BASE, 0x08) & 0x80) == 0x00) {}
    7db8:	0001883a 	nop
    7dbc:	00a20234 	movhi	r2,34824
    7dc0:	10ae2237 	ldwio	r2,-18296(r2)
    7dc4:	1080200c 	andi	r2,r2,128
    7dc8:	103ffc26 	beq	r2,zero,7dbc <__alt_mem_mcu_subsystem_ram_0+0x77fe7dbc>
		*(data + i) = IORD_32DIRECT(SPI_BASE, 0x00);
    7dcc:	00a20234 	movhi	r2,34824
    7dd0:	112e2037 	ldwio	r4,-18304(r2)
    7dd4:	e0fffd17 	ldw	r3,-12(fp)
    7dd8:	e0bfff17 	ldw	r2,-4(fp)
    7ddc:	1885883a 	add	r2,r3,r2
    7de0:	2007883a 	mov	r3,r4
    7de4:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < bytes_number; i++) {
    7de8:	e0bfff17 	ldw	r2,-4(fp)
    7dec:	10800044 	addi	r2,r2,1
    7df0:	e0bfff15 	stw	r2,-4(fp)
    7df4:	e0bffc03 	ldbu	r2,-16(fp)
    7df8:	e0ffff17 	ldw	r3,-4(fp)
    7dfc:	18bfe236 	bltu	r3,r2,7d88 <__alt_mem_mcu_subsystem_ram_0+0x77fe7d88>
	}
	IOWR_32DIRECT(SPI_BASE, 0x14, 0x000);
    7e00:	0007883a 	mov	r3,zero
    7e04:	00a20234 	movhi	r2,34824
    7e08:	10ee2535 	stwio	r3,-18284(r2)
	IOWR_32DIRECT(SPI_BASE, 0x0c, 0x000);
    7e0c:	0007883a 	mov	r3,zero
    7e10:	00a20234 	movhi	r2,34824
    7e14:	10ee2335 	stwio	r3,-18292(r2)
	Xil_Out32((XPAR_SPI_0_BASEADDR + 0x60),
		  (0x186 | (desc->cpol<<3) | (desc->cpha<<4)));

#endif

	return SUCCESS;
    7e18:	0005883a 	mov	r2,zero
}
    7e1c:	e037883a 	mov	sp,fp
    7e20:	df000017 	ldw	fp,0(sp)
    7e24:	dec00104 	addi	sp,sp,4
    7e28:	f800283a 	ret

00007e2c <gpio_get>:
 * @param gpio_number - The number of the GPIO.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get(gpio_desc **desc,
		 uint8_t gpio_number)
{
    7e2c:	defffb04 	addi	sp,sp,-20
    7e30:	dfc00415 	stw	ra,16(sp)
    7e34:	df000315 	stw	fp,12(sp)
    7e38:	df000304 	addi	fp,sp,12
    7e3c:	e13ffe15 	stw	r4,-8(fp)
    7e40:	2805883a 	mov	r2,r5
    7e44:	e0bffd05 	stb	r2,-12(fp)
	gpio_desc *dev;

	if (gpio_number < 32)
    7e48:	e0bffd03 	ldbu	r2,-12(fp)
    7e4c:	10800828 	cmpgeui	r2,r2,32
    7e50:	1000021e 	bne	r2,zero,7e5c <gpio_get+0x30>
		return FAILURE;
    7e54:	00bfffc4 	movi	r2,-1
    7e58:	00001306 	br	7ea8 <gpio_get+0x7c>

	dev = (gpio_desc *)malloc(sizeof(*dev));
    7e5c:	01000304 	movi	r4,12
    7e60:	000fdd40 	call	fdd4 <malloc>
    7e64:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
    7e68:	e0bfff17 	ldw	r2,-4(fp)
    7e6c:	1000021e 	bne	r2,zero,7e78 <gpio_get+0x4c>
		return FAILURE;
    7e70:	00bfffc4 	movi	r2,-1
    7e74:	00000c06 	br	7ea8 <gpio_get+0x7c>

	dev->number = gpio_number;
    7e78:	e0bfff17 	ldw	r2,-4(fp)
    7e7c:	e0fffd03 	ldbu	r3,-12(fp)
    7e80:	10c00205 	stb	r3,8(r2)
	dev->id 	= 0;
    7e84:	e0bfff17 	ldw	r2,-4(fp)
    7e88:	10000115 	stw	zero,4(r2)
#endif
#ifdef ZYNQ_PSU
	dev->type = ZYNQ_PSU_GPIO;
#endif
#ifdef NIOS_II
	dev->type = NIOS_II_GPIO;
    7e8c:	e0bfff17 	ldw	r2,-4(fp)
    7e90:	00c000c4 	movi	r3,3
    7e94:	10c00015 	stw	r3,0(r2)
#endif
#ifdef MICROBLAZE
	dev->type = MICROBLAZE_GPIO;
#endif

	*desc = dev;
    7e98:	e0bffe17 	ldw	r2,-8(fp)
    7e9c:	e0ffff17 	ldw	r3,-4(fp)
    7ea0:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
    7ea4:	0005883a 	mov	r2,zero
}
    7ea8:	e037883a 	mov	sp,fp
    7eac:	dfc00117 	ldw	ra,4(sp)
    7eb0:	df000017 	ldw	fp,0(sp)
    7eb4:	dec00204 	addi	sp,sp,8
    7eb8:	f800283a 	ret

00007ebc <gpio_remove>:
 * @brief Free the resources allocated by gpio_get().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_remove(gpio_desc *desc)
{
    7ebc:	defffd04 	addi	sp,sp,-12
    7ec0:	dfc00215 	stw	ra,8(sp)
    7ec4:	df000115 	stw	fp,4(sp)
    7ec8:	df000104 	addi	fp,sp,4
    7ecc:	e13fff15 	stw	r4,-4(fp)
	free(desc);
    7ed0:	e13fff17 	ldw	r4,-4(fp)
    7ed4:	000fde40 	call	fde4 <free>

	return SUCCESS;
    7ed8:	0005883a 	mov	r2,zero
}
    7edc:	e037883a 	mov	sp,fp
    7ee0:	dfc00117 	ldw	ra,4(sp)
    7ee4:	df000017 	ldw	fp,0(sp)
    7ee8:	dec00204 	addi	sp,sp,8
    7eec:	f800283a 	ret

00007ef0 <gpio_direction_input>:
 * @brief Enable the input direction of the specified GPIO.
 * @param desc - The GPIO descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_input(gpio_desc *desc)
{
    7ef0:	defffe04 	addi	sp,sp,-8
    7ef4:	df000115 	stw	fp,4(sp)
    7ef8:	df000104 	addi	fp,sp,4
    7efc:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return 0;
    7f00:	0005883a 	mov	r2,zero
}
    7f04:	e037883a 	mov	sp,fp
    7f08:	df000017 	ldw	fp,0(sp)
    7f0c:	dec00104 	addi	sp,sp,4
    7f10:	f800283a 	ret

00007f14 <gpio_direction_output>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_output(gpio_desc *desc,
			      uint8_t value)
{
    7f14:	defffd04 	addi	sp,sp,-12
    7f18:	df000215 	stw	fp,8(sp)
    7f1c:	df000204 	addi	fp,sp,8
    7f20:	e13fff15 	stw	r4,-4(fp)
    7f24:	2805883a 	mov	r2,r5
    7f28:	e0bffe05 	stb	r2,-8(fp)

	if (value) {
		// Unused variable - fix compiler warning
	}

	return 0;
    7f2c:	0005883a 	mov	r2,zero
}
    7f30:	e037883a 	mov	sp,fp
    7f34:	df000017 	ldw	fp,0(sp)
    7f38:	dec00104 	addi	sp,sp,4
    7f3c:	f800283a 	ret

00007f40 <gpio_get_direction>:
 *                             GPIO_IN
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_direction(gpio_desc *desc,
			   uint8_t *direction)
{
    7f40:	defffd04 	addi	sp,sp,-12
    7f44:	df000215 	stw	fp,8(sp)
    7f48:	df000204 	addi	fp,sp,8
    7f4c:	e13fff15 	stw	r4,-4(fp)
    7f50:	e17ffe15 	stw	r5,-8(fp)

	if (direction) {
		// Unused variable - fix compiler warning
	}

	return 0;
    7f54:	0005883a 	mov	r2,zero
}
    7f58:	e037883a 	mov	sp,fp
    7f5c:	df000017 	ldw	fp,0(sp)
    7f60:	dec00104 	addi	sp,sp,4
    7f64:	f800283a 	ret

00007f68 <gpio_set_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_set_value(gpio_desc *desc,
		       uint8_t value)
{
    7f68:	defff904 	addi	sp,sp,-28
    7f6c:	df000615 	stw	fp,24(sp)
    7f70:	df000604 	addi	fp,sp,24
    7f74:	e13ffb15 	stw	r4,-20(fp)
    7f78:	2805883a 	mov	r2,r5
    7f7c:	e0bffa05 	stb	r2,-24(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	pstatus = -1;
    7f80:	00bfffc4 	movi	r2,-1
    7f84:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
    7f88:	e0bffb17 	ldw	r2,-20(fp)
    7f8c:	10800203 	ldbu	r2,8(r2)
    7f90:	10803fcc 	andi	r2,r2,255
    7f94:	10bff804 	addi	r2,r2,-32
    7f98:	e0bffe15 	stw	r2,-8(fp)
	pmask = 0x1 << ppos;
    7f9c:	00c00044 	movi	r3,1
    7fa0:	e0bffe17 	ldw	r2,-8(fp)
    7fa4:	1884983a 	sll	r2,r3,r2
    7fa8:	e0bffd15 	stw	r2,-12(fp)

	switch(desc->type) {
    7fac:	e0bffb17 	ldw	r2,-20(fp)
    7fb0:	10800017 	ldw	r2,0(r2)
    7fb4:	108000e0 	cmpeqi	r2,r2,3
    7fb8:	1000011e 	bne	r2,zero,7fc0 <gpio_set_value+0x58>
			  ((pdata & ~pmask) | (value << ppos)));
		pstatus = 0;
		break;
#endif
	default:
		break;
    7fbc:	00001006 	br	8000 <gpio_set_value+0x98>
		pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    7fc0:	00a20234 	movhi	r2,34824
    7fc4:	10ae2837 	ldwio	r2,-18272(r2)
    7fc8:	e0bffc15 	stw	r2,-16(fp)
		IOWR_32DIRECT(GPIO_BASE, 0x0, ((pdata & ~pmask) | (value << ppos)));
    7fcc:	e0bffd17 	ldw	r2,-12(fp)
    7fd0:	0086303a 	nor	r3,zero,r2
    7fd4:	e0bffc17 	ldw	r2,-16(fp)
    7fd8:	1884703a 	and	r2,r3,r2
    7fdc:	e13ffa03 	ldbu	r4,-24(fp)
    7fe0:	e0fffe17 	ldw	r3,-8(fp)
    7fe4:	20c6983a 	sll	r3,r4,r3
    7fe8:	10c4b03a 	or	r2,r2,r3
    7fec:	1007883a 	mov	r3,r2
    7ff0:	00a20234 	movhi	r2,34824
    7ff4:	10ee2835 	stwio	r3,-18272(r2)
		pstatus = 0;
    7ff8:	e03fff15 	stw	zero,-4(fp)
		break;
    7ffc:	0001883a 	nop
	}

	return(pstatus);
    8000:	e0bfff17 	ldw	r2,-4(fp)
}
    8004:	e037883a 	mov	sp,fp
    8008:	df000017 	ldw	fp,0(sp)
    800c:	dec00104 	addi	sp,sp,4
    8010:	f800283a 	ret

00008014 <gpio_get_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_value(gpio_desc *desc,
		       uint8_t *value)
{
    8014:	defffa04 	addi	sp,sp,-24
    8018:	df000515 	stw	fp,20(sp)
    801c:	df000504 	addi	fp,sp,20
    8020:	e13ffc15 	stw	r4,-16(fp)
    8024:	e17ffb15 	stw	r5,-20(fp)
	uint32_t pdata;
#ifdef ZYNQ
	uint32_t pmask;
#endif

	pstatus = -1;
    8028:	00bfffc4 	movi	r2,-1
    802c:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
    8030:	e0bffc17 	ldw	r2,-16(fp)
    8034:	10800203 	ldbu	r2,8(r2)
    8038:	10803fcc 	andi	r2,r2,255
    803c:	10bff804 	addi	r2,r2,-32
    8040:	e0bffe15 	stw	r2,-8(fp)
#ifdef ZYNQ
	pmask = 0x1 << ppos;
#endif

	switch(desc->type) {
    8044:	e0bffc17 	ldw	r2,-16(fp)
    8048:	10800017 	ldw	r2,0(r2)
    804c:	108000e0 	cmpeqi	r2,r2,3
    8050:	1000011e 	bne	r2,zero,8058 <gpio_get_value+0x44>
		*value = (pdata >> ppos) & 0x1;
		pstatus = 0;
		break;
#endif
	default:
		break;
    8054:	00000c06 	br	8088 <gpio_get_value+0x74>
	   pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    8058:	00a20234 	movhi	r2,34824
    805c:	10ae2837 	ldwio	r2,-18272(r2)
    8060:	e0bffd15 	stw	r2,-12(fp)
		*value = (pdata >> ppos) & 0x1;
    8064:	e0fffd17 	ldw	r3,-12(fp)
    8068:	e0bffe17 	ldw	r2,-8(fp)
    806c:	1884d83a 	srl	r2,r3,r2
    8070:	1080004c 	andi	r2,r2,1
    8074:	1007883a 	mov	r3,r2
    8078:	e0bffb17 	ldw	r2,-20(fp)
    807c:	10c00005 	stb	r3,0(r2)
		pstatus = 0;
    8080:	e03fff15 	stw	zero,-4(fp)
		break;
    8084:	0001883a 	nop
	}

	return(pstatus);
    8088:	e0bfff17 	ldw	r2,-4(fp)
}
    808c:	e037883a 	mov	sp,fp
    8090:	df000017 	ldw	fp,0(sp)
    8094:	dec00104 	addi	sp,sp,4
    8098:	f800283a 	ret

0000809c <ad_gpio_set_range>:
/***************************************************************************//**
 * @brief ad_gpio_set_range
 ******************************************************************************/

int32_t ad_gpio_set_range(uint8_t start_pin, uint8_t num_pins, uint8_t data)
{
    809c:	defff804 	addi	sp,sp,-32
    80a0:	df000715 	stw	fp,28(sp)
    80a4:	df000704 	addi	fp,sp,28
    80a8:	2005883a 	mov	r2,r4
    80ac:	2809883a 	mov	r4,r5
    80b0:	3007883a 	mov	r3,r6
    80b4:	e0bffb05 	stb	r2,-20(fp)
    80b8:	2005883a 	mov	r2,r4
    80bc:	e0bffa05 	stb	r2,-24(fp)
    80c0:	1805883a 	mov	r2,r3
    80c4:	e0bff905 	stb	r2,-28(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
    80c8:	e0bffb03 	ldbu	r2,-20(fp)
    80cc:	10800828 	cmpgeui	r2,r2,32
    80d0:	1000021e 	bne	r2,zero,80dc <ad_gpio_set_range+0x40>
		return(-1);
    80d4:	00bfffc4 	movi	r2,-1
    80d8:	00001c06 	br	814c <ad_gpio_set_range+0xb0>
	}

	pstatus = -1;
    80dc:	00bfffc4 	movi	r2,-1
    80e0:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
    80e4:	e0bffb03 	ldbu	r2,-20(fp)
    80e8:	10bff804 	addi	r2,r2,-32
    80ec:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
    80f0:	e0bffa03 	ldbu	r2,-24(fp)
    80f4:	00c00044 	movi	r3,1
    80f8:	1884983a 	sll	r2,r3,r2
    80fc:	10ffffc4 	addi	r3,r2,-1
    8100:	e0bffe17 	ldw	r2,-8(fp)
    8104:	1884983a 	sll	r2,r3,r2
    8108:	e0bffd15 	stw	r2,-12(fp)
	pstatus = 0;

#endif

#ifdef NIOS_II
	pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    810c:	00a20234 	movhi	r2,34824
    8110:	10ae2837 	ldwio	r2,-18272(r2)
    8114:	e0bffc15 	stw	r2,-16(fp)
	IOWR_32DIRECT(GPIO_BASE, 0x0, ((pdata & ~pmask) | (data << ppos)));
    8118:	e0bffd17 	ldw	r2,-12(fp)
    811c:	0086303a 	nor	r3,zero,r2
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	e13ff903 	ldbu	r4,-28(fp)
    812c:	e0fffe17 	ldw	r3,-8(fp)
    8130:	20c6983a 	sll	r3,r4,r3
    8134:	10c4b03a 	or	r2,r2,r3
    8138:	1007883a 	mov	r3,r2
    813c:	00a20234 	movhi	r2,34824
    8140:	10ee2835 	stwio	r3,-18272(r2)
	pstatus = 0;
    8144:	e03fff15 	stw	zero,-4(fp)
		  ((pdata & ~pmask) | (data << ppos)));
	pstatus = 0;

#endif

	return(pstatus);
    8148:	e0bfff17 	ldw	r2,-4(fp)
}
    814c:	e037883a 	mov	sp,fp
    8150:	df000017 	ldw	fp,0(sp)
    8154:	dec00104 	addi	sp,sp,4
    8158:	f800283a 	ret

0000815c <ad_gpio_get_range>:
/***************************************************************************//**
 * @brief ad_gpio_get_range
 ******************************************************************************/

int32_t ad_gpio_get_range(uint8_t start_pin, uint8_t num_pins, uint32_t *data)
{
    815c:	defff804 	addi	sp,sp,-32
    8160:	df000715 	stw	fp,28(sp)
    8164:	df000704 	addi	fp,sp,28
    8168:	2005883a 	mov	r2,r4
    816c:	2807883a 	mov	r3,r5
    8170:	e1bff915 	stw	r6,-28(fp)
    8174:	e0bffb05 	stb	r2,-20(fp)
    8178:	1805883a 	mov	r2,r3
    817c:	e0bffa05 	stb	r2,-24(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
    8180:	e0bffb03 	ldbu	r2,-20(fp)
    8184:	10800828 	cmpgeui	r2,r2,32
    8188:	1000021e 	bne	r2,zero,8194 <ad_gpio_get_range+0x38>
		return(-1);
    818c:	00bfffc4 	movi	r2,-1
    8190:	00001806 	br	81f4 <ad_gpio_get_range+0x98>
	}

	pstatus = -1;
    8194:	00bfffc4 	movi	r2,-1
    8198:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
    819c:	e0bffb03 	ldbu	r2,-20(fp)
    81a0:	10bff804 	addi	r2,r2,-32
    81a4:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
    81a8:	e0bffa03 	ldbu	r2,-24(fp)
    81ac:	00c00044 	movi	r3,1
    81b0:	1884983a 	sll	r2,r3,r2
    81b4:	10ffffc4 	addi	r3,r2,-1
    81b8:	e0bffe17 	ldw	r2,-8(fp)
    81bc:	1884983a 	sll	r2,r3,r2
    81c0:	e0bffd15 	stw	r2,-12(fp)

#endif

#ifdef NIOS_II

	pdata = IORD_32DIRECT(GPIO_BASE, 0x0);
    81c4:	00a20234 	movhi	r2,34824
    81c8:	10ae2837 	ldwio	r2,-18272(r2)
    81cc:	e0bffc15 	stw	r2,-16(fp)
	*data = (pdata & pmask) >> ppos;
    81d0:	e0fffc17 	ldw	r3,-16(fp)
    81d4:	e0bffd17 	ldw	r2,-12(fp)
    81d8:	1886703a 	and	r3,r3,r2
    81dc:	e0bffe17 	ldw	r2,-8(fp)
    81e0:	1886d83a 	srl	r3,r3,r2
    81e4:	e0bff917 	ldw	r2,-28(fp)
    81e8:	10c00015 	stw	r3,0(r2)
	pstatus = 0;
    81ec:	e03fff15 	stw	zero,-4(fp)
	*data = (pdata & pmask) >> ppos;
	pstatus = 0;

#endif

	return(pstatus);
    81f0:	e0bfff17 	ldw	r2,-4(fp)
}
    81f4:	e037883a 	mov	sp,fp
    81f8:	df000017 	ldw	fp,0(sp)
    81fc:	dec00104 	addi	sp,sp,4
    8200:	f800283a 	ret

00008204 <do_div>:

/***************************************************************************//**
 * @brief do_div
 ******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
    8204:	defff904 	addi	sp,sp,-28
    8208:	dfc00615 	stw	ra,24(sp)
    820c:	df000515 	stw	fp,20(sp)
    8210:	df000504 	addi	fp,sp,20
    8214:	e13ffd15 	stw	r4,-12(fp)
    8218:	e17ffb15 	stw	r5,-20(fp)
    821c:	e1bffc15 	stw	r6,-16(fp)
	uint64_t mod = 0;
    8220:	e03ffe15 	stw	zero,-8(fp)
    8224:	e03fff15 	stw	zero,-4(fp)

	mod = *n % base;
    8228:	e13ffd17 	ldw	r4,-12(fp)
    822c:	20800017 	ldw	r2,0(r4)
    8230:	20c00117 	ldw	r3,4(r4)
    8234:	e1bffb17 	ldw	r6,-20(fp)
    8238:	e1fffc17 	ldw	r7,-16(fp)
    823c:	1009883a 	mov	r4,r2
    8240:	180b883a 	mov	r5,r3
    8244:	000d0840 	call	d084 <__umoddi3>
    8248:	1009883a 	mov	r4,r2
    824c:	180b883a 	mov	r5,r3
    8250:	e13ffe15 	stw	r4,-8(fp)
    8254:	e17fff15 	stw	r5,-4(fp)
	*n = *n / base;
    8258:	e13ffd17 	ldw	r4,-12(fp)
    825c:	20800017 	ldw	r2,0(r4)
    8260:	20c00117 	ldw	r3,4(r4)
    8264:	e1bffb17 	ldw	r6,-20(fp)
    8268:	e1fffc17 	ldw	r7,-16(fp)
    826c:	1009883a 	mov	r4,r2
    8270:	180b883a 	mov	r5,r3
    8274:	000caec0 	call	caec <__udivdi3>
    8278:	1009883a 	mov	r4,r2
    827c:	180b883a 	mov	r5,r3
    8280:	2005883a 	mov	r2,r4
    8284:	2807883a 	mov	r3,r5
    8288:	e13ffd17 	ldw	r4,-12(fp)
    828c:	20800015 	stw	r2,0(r4)
    8290:	20c00115 	stw	r3,4(r4)

	return mod;
    8294:	e0bffe17 	ldw	r2,-8(fp)
    8298:	e0ffff17 	ldw	r3,-4(fp)
    829c:	1009883a 	mov	r4,r2
    82a0:	180b883a 	mov	r5,r3
}
    82a4:	2005883a 	mov	r2,r4
    82a8:	2807883a 	mov	r3,r5
    82ac:	e037883a 	mov	sp,fp
    82b0:	dfc00117 	ldw	ra,4(sp)
    82b4:	df000017 	ldw	fp,0(sp)
    82b8:	dec00204 	addi	sp,sp,8
    82bc:	f800283a 	ret

000082c0 <ad_reg_write_16>:

/***************************************************************************//**
 * @brief ad_reg_write_16
 ******************************************************************************/
void ad_reg_write_16(uint32_t addr, uint32_t data)
{
    82c0:	defffc04 	addi	sp,sp,-16
    82c4:	df000315 	stw	fp,12(sp)
    82c8:	df000304 	addi	fp,sp,12
    82cc:	e13ffe15 	stw	r4,-8(fp)
    82d0:	e17ffd15 	stw	r5,-12(fp)
	uint32_t m_data;

	m_data = ad_reg_read(addr & ~0x3);
    82d4:	e0fffe17 	ldw	r3,-8(fp)
    82d8:	00bfff04 	movi	r2,-4
    82dc:	1884703a 	and	r2,r3,r2
    82e0:	10800037 	ldwio	r2,0(r2)
    82e4:	e0bfff15 	stw	r2,-4(fp)
	if ((addr & 0x3) == 0)
    82e8:	e0bffe17 	ldw	r2,-8(fp)
    82ec:	108000cc 	andi	r2,r2,3
    82f0:	1000061e 	bne	r2,zero,830c <ad_reg_write_16+0x4c>
		m_data = (m_data & ~0xffff) | data;
    82f4:	e0bfff17 	ldw	r2,-4(fp)
    82f8:	10bfffec 	andhi	r2,r2,65535
    82fc:	e0fffd17 	ldw	r3,-12(fp)
    8300:	1884b03a 	or	r2,r3,r2
    8304:	e0bfff15 	stw	r2,-4(fp)
    8308:	00000606 	br	8324 <ad_reg_write_16+0x64>
	else
		m_data = (m_data & 0xffff) | (data<<16);
    830c:	e0bfff17 	ldw	r2,-4(fp)
    8310:	10ffffcc 	andi	r3,r2,65535
    8314:	e0bffd17 	ldw	r2,-12(fp)
    8318:	1004943a 	slli	r2,r2,16
    831c:	1884b03a 	or	r2,r3,r2
    8320:	e0bfff15 	stw	r2,-4(fp)
	ad_reg_write((addr & ~0x3), m_data);
    8324:	e0fffe17 	ldw	r3,-8(fp)
    8328:	00bfff04 	movi	r2,-4
    832c:	1884703a 	and	r2,r3,r2
    8330:	1007883a 	mov	r3,r2
    8334:	e0bfff17 	ldw	r2,-4(fp)
    8338:	18800035 	stwio	r2,0(r3)
}
    833c:	0001883a 	nop
    8340:	e037883a 	mov	sp,fp
    8344:	df000017 	ldw	fp,0(sp)
    8348:	dec00104 	addi	sp,sp,4
    834c:	f800283a 	ret

00008350 <ad_platform_init>:

#ifdef ALTERA
void ad_platform_init(void)
{
    8350:	deffff04 	addi	sp,sp,-4
    8354:	df000015 	stw	fp,0(sp)
    8358:	d839883a 	mov	fp,sp
	return;
    835c:	0001883a 	nop
}
    8360:	e037883a 	mov	sp,fp
    8364:	df000017 	ldw	fp,0(sp)
    8368:	dec00104 	addi	sp,sp,4
    836c:	f800283a 	ret

00008370 <ad_platform_close>:

void ad_platform_close(void)
{
    8370:	defffe04 	addi	sp,sp,-8
    8374:	dfc00115 	stw	ra,4(sp)
    8378:	df000015 	stw	fp,0(sp)
    837c:	d839883a 	mov	fp,sp
	alt_printf("%c", 0x04);
    8380:	01400104 	movi	r5,4
    8384:	010000b4 	movhi	r4,2
    8388:	21198904 	addi	r4,r4,26148
    838c:	00201b80 	call	201b8 <alt_printf>
	return;
    8390:	0001883a 	nop
}
    8394:	e037883a 	mov	sp,fp
    8398:	dfc00117 	ldw	ra,4(sp)
    839c:	df000017 	ldw	fp,0(sp)
    83a0:	dec00204 	addi	sp,sp,8
    83a4:	f800283a 	ret

000083a8 <ad_uart_read>:

/***************************************************************************//**
 * @brief ad_uart_read
 ******************************************************************************/
uint8_t ad_uart_read()
{
    83a8:	defffd04 	addi	sp,sp,-12
    83ac:	dfc00215 	stw	ra,8(sp)
    83b0:	df000115 	stw	fp,4(sp)
    83b4:	df000104 	addi	fp,sp,4
	}
	RecievedByte = XUartPs_ReadReg(STDIN_BASEADDRESS, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (uint8_t)RecievedByte;
#else
	uint8_t RecievedByte = 0;
    83b8:	e03fffc5 	stb	zero,-1(fp)

	RecievedByte = getc(stdin);
    83bc:	d0a00117 	ldw	r2,-32764(gp)
    83c0:	10800117 	ldw	r2,4(r2)
    83c4:	1009883a 	mov	r4,r2
    83c8:	000fc6c0 	call	fc6c <getc>
    83cc:	e0bfffc5 	stb	r2,-1(fp)

	return RecievedByte;
    83d0:	e0bfffc3 	ldbu	r2,-1(fp)
#endif
}
    83d4:	e037883a 	mov	sp,fp
    83d8:	dfc00117 	ldw	ra,4(sp)
    83dc:	df000017 	ldw	fp,0(sp)
    83e0:	dec00204 	addi	sp,sp,8
    83e4:	f800283a 	ret

000083e8 <ad_pow2>:

/***************************************************************************//**
 * @brief ad_pow2 Create a mask for a given number of bit
 ******************************************************************************/
uint32_t ad_pow2(uint32_t number)
{
    83e8:	defffc04 	addi	sp,sp,-16
    83ec:	df000315 	stw	fp,12(sp)
    83f0:	df000304 	addi	fp,sp,12
    83f4:	e13ffd15 	stw	r4,-12(fp)

	uint32_t index;
	uint32_t mask = 1;
    83f8:	00800044 	movi	r2,1
    83fc:	e0bffe15 	stw	r2,-8(fp)

	for (index=1; index < number; index++) {
    8400:	00800044 	movi	r2,1
    8404:	e0bfff15 	stw	r2,-4(fp)
    8408:	00000706 	br	8428 <ad_pow2+0x40>
		mask = (mask << 1) ^ 1;
    840c:	e0bffe17 	ldw	r2,-8(fp)
    8410:	1085883a 	add	r2,r2,r2
    8414:	1080005c 	xori	r2,r2,1
    8418:	e0bffe15 	stw	r2,-8(fp)
	for (index=1; index < number; index++) {
    841c:	e0bfff17 	ldw	r2,-4(fp)
    8420:	10800044 	addi	r2,r2,1
    8424:	e0bfff15 	stw	r2,-4(fp)
    8428:	e0ffff17 	ldw	r3,-4(fp)
    842c:	e0bffd17 	ldw	r2,-12(fp)
    8430:	18bff636 	bltu	r3,r2,840c <__alt_mem_mcu_subsystem_ram_0+0x77fe840c>
	}

	return mask;
    8434:	e0bffe17 	ldw	r2,-8(fp)
}
    8438:	e037883a 	mov	sp,fp
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00104 	addi	sp,sp,4
    8444:	f800283a 	ret

00008448 <xcvr_read>:
 * @brief xcvr_read
 ******************************************************************************/
int32_t xcvr_read(xcvr_core *core,
		  uint32_t reg_addr,
		  uint32_t *reg_data)
{
    8448:	defffc04 	addi	sp,sp,-16
    844c:	df000315 	stw	fp,12(sp)
    8450:	df000304 	addi	fp,sp,12
    8454:	e13fff15 	stw	r4,-4(fp)
    8458:	e17ffe15 	stw	r5,-8(fp)
    845c:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + reg_addr));
    8460:	e0bfff17 	ldw	r2,-4(fp)
    8464:	10c00117 	ldw	r3,4(r2)
    8468:	e0bffe17 	ldw	r2,-8(fp)
    846c:	1885883a 	add	r2,r3,r2
    8470:	10800037 	ldwio	r2,0(r2)
    8474:	1007883a 	mov	r3,r2
    8478:	e0bffd17 	ldw	r2,-12(fp)
    847c:	10c00015 	stw	r3,0(r2)

	return 0;
    8480:	0005883a 	mov	r2,zero
}
    8484:	e037883a 	mov	sp,fp
    8488:	df000017 	ldw	fp,0(sp)
    848c:	dec00104 	addi	sp,sp,4
    8490:	f800283a 	ret

00008494 <xcvr_write>:
 * @brief xcvr_write
 ******************************************************************************/
int32_t xcvr_write(xcvr_core *core,
		   uint32_t reg_addr,
		   uint32_t reg_data)
{
    8494:	defffc04 	addi	sp,sp,-16
    8498:	df000315 	stw	fp,12(sp)
    849c:	df000304 	addi	fp,sp,12
    84a0:	e13fff15 	stw	r4,-4(fp)
    84a4:	e17ffe15 	stw	r5,-8(fp)
    84a8:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + reg_addr), reg_data);
    84ac:	e0bfff17 	ldw	r2,-4(fp)
    84b0:	10c00117 	ldw	r3,4(r2)
    84b4:	e0bffe17 	ldw	r2,-8(fp)
    84b8:	1885883a 	add	r2,r3,r2
    84bc:	1007883a 	mov	r3,r2
    84c0:	e0bffd17 	ldw	r2,-12(fp)
    84c4:	18800035 	stwio	r2,0(r3)

	return 0;
    84c8:	0005883a 	mov	r2,zero
}
    84cc:	e037883a 	mov	sp,fp
    84d0:	df000017 	ldw	fp,0(sp)
    84d4:	dec00104 	addi	sp,sp,4
    84d8:	f800283a 	ret

000084dc <xcvr_setup>:

/*******************************************************************************
 * @brief xcvr_setup
 ******************************************************************************/
int32_t xcvr_setup(xcvr_core *core)
{
    84dc:	defff904 	addi	sp,sp,-28
    84e0:	dfc00615 	stw	ra,24(sp)
    84e4:	df000515 	stw	fp,20(sp)
    84e8:	df000504 	addi	fp,sp,20
    84ec:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret = 0;
    84f0:	e03fff15 	stw	zero,-4(fp)

#ifdef ALTERA

	xcvr_write(core, XCVR_REG_RESETN, 0); // enter reset state
    84f4:	000d883a 	mov	r6,zero
    84f8:	01400404 	movi	r5,16
    84fc:	e13ffb17 	ldw	r4,-20(fp)
    8500:	00084940 	call	8494 <xcvr_write>

	uint32_t link_clock=0;
    8504:	e03ffe15 	stw	zero,-8(fp)
	uint64_t lane_rate=0;
    8508:	e03ffc15 	stw	zero,-16(fp)
    850c:	e03ffd15 	stw	zero,-12(fp)

	link_clock = (uint32_t)(core->lane_rate_kbps / 40);
    8510:	e0bffb17 	ldw	r2,-20(fp)
    8514:	10c00417 	ldw	r3,16(r2)
    8518:	00800a04 	movi	r2,40
    851c:	1885203a 	divu	r2,r3,r2
    8520:	e0bffe15 	stw	r2,-8(fp)

	link_clock = fpll_round_rate(link_clock, core->ref_clock_khz);
    8524:	e0bffb17 	ldw	r2,-20(fp)
    8528:	10800717 	ldw	r2,28(r2)
    852c:	100b883a 	mov	r5,r2
    8530:	e13ffe17 	ldw	r4,-8(fp)
    8534:	0009ea80 	call	9ea8 <fpll_round_rate>
    8538:	e0bffe15 	stw	r2,-8(fp)
	ret |= fpll_set_rate(&(core->dev.link_pll),
    853c:	e0bffb17 	ldw	r2,-20(fp)
    8540:	10c00a04 	addi	r3,r2,40
    8544:	e0bffb17 	ldw	r2,-20(fp)
    8548:	10800717 	ldw	r2,28(r2)
    854c:	100d883a 	mov	r6,r2
    8550:	e17ffe17 	ldw	r5,-8(fp)
    8554:	1809883a 	mov	r4,r3
    8558:	0009fd40 	call	9fd4 <fpll_set_rate>
    855c:	1007883a 	mov	r3,r2
    8560:	e0bfff17 	ldw	r2,-4(fp)
    8564:	10c4b03a 	or	r2,r2,r3
    8568:	e0bfff15 	stw	r2,-4(fp)
			     link_clock,
			     core->ref_clock_khz);

	core->link_clk_khz = link_clock;
    856c:	e0bffb17 	ldw	r2,-20(fp)
    8570:	e0fffe17 	ldw	r3,-8(fp)
    8574:	10c00815 	stw	r3,32(r2)

	if (core->rx_tx_n) {
    8578:	e0bffb17 	ldw	r2,-20(fp)
    857c:	10800043 	ldbu	r2,1(r2)
    8580:	10803fcc 	andi	r2,r2,255
    8584:	10001526 	beq	r2,zero,85dc <xcvr_setup+0x100>
		lane_rate = altera_a10_cdr_pll_round_rate(core->lane_rate_kbps,
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	10c00417 	ldw	r3,16(r2)
    8590:	e0bffb17 	ldw	r2,-20(fp)
    8594:	10800717 	ldw	r2,28(r2)
    8598:	100b883a 	mov	r5,r2
    859c:	1809883a 	mov	r4,r3
    85a0:	000ad7c0 	call	ad7c <altera_a10_cdr_pll_round_rate>
    85a4:	e0bffc15 	stw	r2,-16(fp)
    85a8:	e03ffd15 	stw	zero,-12(fp)
				core->ref_clock_khz);
		ret |= altera_a10_cdr_pll_set_rate(core,
    85ac:	e0fffc17 	ldw	r3,-16(fp)
    85b0:	e0bffb17 	ldw	r2,-20(fp)
    85b4:	10800717 	ldw	r2,28(r2)
    85b8:	100d883a 	mov	r6,r2
    85bc:	180b883a 	mov	r5,r3
    85c0:	e13ffb17 	ldw	r4,-20(fp)
    85c4:	000aecc0 	call	aecc <altera_a10_cdr_pll_set_rate>
    85c8:	1007883a 	mov	r3,r2
    85cc:	e0bfff17 	ldw	r2,-4(fp)
    85d0:	10c4b03a 	or	r2,r2,r3
    85d4:	e0bfff15 	stw	r2,-4(fp)
    85d8:	00001606 	br	8634 <xcvr_setup+0x158>
						   lane_rate,
						   core->ref_clock_khz);
	} else {
		lane_rate = atx_pll_round_rate(core->lane_rate_kbps,
    85dc:	e0bffb17 	ldw	r2,-20(fp)
    85e0:	10c00417 	ldw	r3,16(r2)
    85e4:	e0bffb17 	ldw	r2,-20(fp)
    85e8:	10800717 	ldw	r2,28(r2)
    85ec:	100b883a 	mov	r5,r2
    85f0:	1809883a 	mov	r4,r3
    85f4:	0008f6c0 	call	8f6c <atx_pll_round_rate>
    85f8:	e0bffc15 	stw	r2,-16(fp)
    85fc:	e03ffd15 	stw	zero,-12(fp)
					       core->ref_clock_khz);
		ret |= atx_pll_set_rate(core, lane_rate, core->ref_clock_khz);
    8600:	e0fffc17 	ldw	r3,-16(fp)
    8604:	e0bffb17 	ldw	r2,-20(fp)
    8608:	10800717 	ldw	r2,28(r2)
    860c:	100d883a 	mov	r6,r2
    8610:	180b883a 	mov	r5,r3
    8614:	e13ffb17 	ldw	r4,-20(fp)
    8618:	00090a40 	call	90a4 <atx_pll_set_rate>
    861c:	1007883a 	mov	r3,r2
    8620:	e0bfff17 	ldw	r2,-4(fp)
    8624:	1884b03a 	or	r2,r3,r2
    8628:	e0bfff15 	stw	r2,-4(fp)
		altera_a10_calib_tx_pll(core);
    862c:	e13ffb17 	ldw	r4,-20(fp)
    8630:	000b40c0 	call	b40c <altera_a10_calib_tx_pll>
	}

	xcvr_finalize_lane_rate_change(core); // bring out of reset - print  status
    8634:	e13ffb17 	ldw	r4,-20(fp)
    8638:	00088280 	call	8828 <xcvr_finalize_lane_rate_change>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
		return(-1);
	}
#endif

	return(0);
    863c:	0005883a 	mov	r2,zero
}
    8640:	e037883a 	mov	sp,fp
    8644:	dfc00117 	ldw	ra,4(sp)
    8648:	df000017 	ldw	fp,0(sp)
    864c:	dec00204 	addi	sp,sp,8
    8650:	f800283a 	ret

00008654 <xcvr_getconfig>:

/*******************************************************************************
 * @brief xcvr_getconfig
 ******************************************************************************/
int32_t xcvr_getconfig(xcvr_core *core)
{
    8654:	defffb04 	addi	sp,sp,-20
    8658:	dfc00415 	stw	ra,16(sp)
    865c:	df000315 	stw	fp,12(sp)
    8660:	df000304 	addi	fp,sp,12
    8664:	e13ffd15 	stw	r4,-12(fp)
	uint32_t regbuf;

	xcvr_read(core, XCVR_REG_SYNTH, &regbuf);
    8668:	e0bffe04 	addi	r2,fp,-8
    866c:	100d883a 	mov	r6,r2
    8670:	01400904 	movi	r5,36
    8674:	e13ffd17 	ldw	r4,-12(fp)
    8678:	00084480 	call	8448 <xcvr_read>
	core->num_lanes = (regbuf & XCVR_NUM_OF_LANES_MASK) >> XCVR_NUM_OF_LANES_OFFSET;
    867c:	e0bffe17 	ldw	r2,-8(fp)
    8680:	1007883a 	mov	r3,r2
    8684:	e0bffd17 	ldw	r2,-12(fp)
    8688:	10c00005 	stb	r3,0(r2)
	core->rx_tx_n = ((regbuf & XCVR_TX_OR_RXN_MASK) >> XCVR_TX_OR_RXN_OFFSET);
    868c:	e0bffe17 	ldw	r2,-8(fp)
    8690:	1004d23a 	srli	r2,r2,8
    8694:	1080004c 	andi	r2,r2,1
    8698:	1007883a 	mov	r3,r2
    869c:	e0bffd17 	ldw	r2,-12(fp)
    86a0:	10c00045 	stb	r3,1(r2)
	core->dev.sys_clk_sel = (regbuf & (0x3 << 4)) >> 4;
	core->dev.out_clk_sel = regbuf & 0x7;
#endif

#ifdef ALTERA
	core->refclk_ppm = PM_1000;
    86a4:	e0bffd17 	ldw	r2,-12(fp)
    86a8:	00c000c4 	movi	r3,3
    86ac:	10c00215 	stw	r3,8(r2)

	core->dev.link_pll.type = fpll_type;
    86b0:	e0bffd17 	ldw	r2,-12(fp)
    86b4:	00c00044 	movi	r3,1
    86b8:	10c00a15 	stw	r3,40(r2)
	core->dev.atx_pll.type = atx_type;
    86bc:	e0bffd17 	ldw	r2,-12(fp)
    86c0:	10000d15 	stw	zero,52(r2)

	for (int i=1; i < core->num_lanes/*lanes_per_link*/; i++) {
    86c4:	00800044 	movi	r2,1
    86c8:	e0bfff15 	stw	r2,-4(fp)
    86cc:	00001b06 	br	873c <xcvr_getconfig+0xe8>
		core->dev.channel_pll[i].type = core->dev.channel_pll[0].type;
    86d0:	e0bffd17 	ldw	r2,-12(fp)
    86d4:	10c01017 	ldw	r3,64(r2)
    86d8:	e13ffd17 	ldw	r4,-12(fp)
    86dc:	e0bfff17 	ldw	r2,-4(fp)
    86e0:	10800324 	muli	r2,r2,12
    86e4:	2085883a 	add	r2,r4,r2
    86e8:	10c01015 	stw	r3,64(r2)
		core->dev.channel_pll[i].base_address = core->dev.channel_pll[0].base_address + 0x1000 * i;
    86ec:	e0bffd17 	ldw	r2,-12(fp)
    86f0:	10801117 	ldw	r2,68(r2)
    86f4:	e0ffff17 	ldw	r3,-4(fp)
    86f8:	1806933a 	slli	r3,r3,12
    86fc:	10c7883a 	add	r3,r2,r3
    8700:	e13ffd17 	ldw	r4,-12(fp)
    8704:	e0bfff17 	ldw	r2,-4(fp)
    8708:	10800324 	muli	r2,r2,12
    870c:	2085883a 	add	r2,r4,r2
    8710:	10c01115 	stw	r3,68(r2)
		core->dev.channel_pll[i].initial_recalc = core->dev.channel_pll[0].initial_recalc;
    8714:	e0bffd17 	ldw	r2,-12(fp)
    8718:	10c01203 	ldbu	r3,72(r2)
    871c:	e13ffd17 	ldw	r4,-12(fp)
    8720:	e0bfff17 	ldw	r2,-4(fp)
    8724:	10800324 	muli	r2,r2,12
    8728:	2085883a 	add	r2,r4,r2
    872c:	10c01205 	stb	r3,72(r2)
	for (int i=1; i < core->num_lanes/*lanes_per_link*/; i++) {
    8730:	e0bfff17 	ldw	r2,-4(fp)
    8734:	10800044 	addi	r2,r2,1
    8738:	e0bfff15 	stw	r2,-4(fp)
    873c:	e0bffd17 	ldw	r2,-12(fp)
    8740:	10800003 	ldbu	r2,0(r2)
    8744:	10803fcc 	andi	r2,r2,255
    8748:	e0ffff17 	ldw	r3,-4(fp)
    874c:	18bfe016 	blt	r3,r2,86d0 <__alt_mem_mcu_subsystem_ram_0+0x77fe86d0>
	}

#endif

	return 0;
    8750:	0005883a 	mov	r2,zero
}
    8754:	e037883a 	mov	sp,fp
    8758:	dfc00117 	ldw	ra,4(sp)
    875c:	df000017 	ldw	fp,0(sp)
    8760:	dec00204 	addi	sp,sp,8
    8764:	f800283a 	ret

00008768 <xcvr_reset>:

/*******************************************************************************
 * @brief xcvr_reset
 ******************************************************************************/
int32_t xcvr_reset(xcvr_core *core)
{
    8768:	defffb04 	addi	sp,sp,-20
    876c:	dfc00415 	stw	ra,16(sp)
    8770:	df000315 	stw	fp,12(sp)
    8774:	df000304 	addi	fp,sp,12
    8778:	e13ffd15 	stw	r4,-12(fp)
	uint32_t status;
	int32_t timeout;

	xcvr_write(core, XCVR_REG_RESETN, 0);
    877c:	000d883a 	mov	r6,zero
    8780:	01400404 	movi	r5,16
    8784:	e13ffd17 	ldw	r4,-12(fp)
    8788:	00084940 	call	8494 <xcvr_write>

	xcvr_write(core, XCVR_REG_RESETN, XCVR_RESETN);
    878c:	01800044 	movi	r6,1
    8790:	01400404 	movi	r5,16
    8794:	e13ffd17 	ldw	r4,-12(fp)
    8798:	00084940 	call	8494 <xcvr_write>

	timeout = 100;
    879c:	00801904 	movi	r2,100
    87a0:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
    87a4:	00000d06 	br	87dc <xcvr_reset+0x74>
		mdelay(1);
    87a8:	0100fa04 	movi	r4,1000
    87ac:	00206540 	call	20654 <usleep>
		timeout = timeout - 1;
    87b0:	e0bfff17 	ldw	r2,-4(fp)
    87b4:	10bfffc4 	addi	r2,r2,-1
    87b8:	e0bfff15 	stw	r2,-4(fp)
		xcvr_read(core, XCVR_REG_STATUS, &status);
    87bc:	e0bffe04 	addi	r2,fp,-8
    87c0:	100d883a 	mov	r6,r2
    87c4:	01400504 	movi	r5,20
    87c8:	e13ffd17 	ldw	r4,-12(fp)
    87cc:	00084480 	call	8448 <xcvr_read>
		if (status == 1)
    87d0:	e0bffe17 	ldw	r2,-8(fp)
    87d4:	10800058 	cmpnei	r2,r2,1
    87d8:	10000326 	beq	r2,zero,87e8 <xcvr_reset+0x80>
	while (timeout > 0) {
    87dc:	e0bfff17 	ldw	r2,-4(fp)
    87e0:	00bff116 	blt	zero,r2,87a8 <__alt_mem_mcu_subsystem_ram_0+0x77fe87a8>
    87e4:	00000106 	br	87ec <xcvr_reset+0x84>
			break;
    87e8:	0001883a 	nop
	}

	if (status == 0) {
    87ec:	e0bffe17 	ldw	r2,-8(fp)
    87f0:	1000071e 	bne	r2,zero,8810 <xcvr_reset+0xa8>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
    87f4:	014000b4 	movhi	r5,2
    87f8:	29599a04 	addi	r5,r5,26216
    87fc:	010000b4 	movhi	r4,2
    8800:	21198a04 	addi	r4,r4,26152
    8804:	0010ec40 	call	10ec4 <printf>
		return(-1);
    8808:	00bfffc4 	movi	r2,-1
    880c:	00000106 	br	8814 <xcvr_reset+0xac>
	}

	return(0);
    8810:	0005883a 	mov	r2,zero
}
    8814:	e037883a 	mov	sp,fp
    8818:	dfc00117 	ldw	ra,4(sp)
    881c:	df000017 	ldw	fp,0(sp)
    8820:	dec00204 	addi	sp,sp,8
    8824:	f800283a 	ret

00008828 <xcvr_finalize_lane_rate_change>:

/*******************************************************************************
 * @brief xcvr_finalize_lane_rate_change
 ******************************************************************************/
void xcvr_finalize_lane_rate_change(xcvr_core *core)
{
    8828:	defffb04 	addi	sp,sp,-20
    882c:	dfc00415 	stw	ra,16(sp)
    8830:	df000315 	stw	fp,12(sp)
    8834:	df000304 	addi	fp,sp,12
    8838:	e13ffd15 	stw	r4,-12(fp)
	uint32_t status;
	int timeout = 1000;
    883c:	0080fa04 	movi	r2,1000
    8840:	e0bfff15 	stw	r2,-4(fp)
	uint32_t i;

	mdelay(100);
    8844:	010000b4 	movhi	r4,2
    8848:	2121a804 	addi	r4,r4,-31072
    884c:	00206540 	call	20654 <usleep>

	xcvr_write(core, XCVR_REG_RESETN, 1);
    8850:	01800044 	movi	r6,1
    8854:	01400404 	movi	r5,16
    8858:	e13ffd17 	ldw	r4,-12(fp)
    885c:	00084940 	call	8494 <xcvr_write>
	do {
		xcvr_read(core, XCVR_REG_STATUS, &status);
    8860:	e0bffe04 	addi	r2,fp,-8
    8864:	100d883a 	mov	r6,r2
    8868:	01400504 	movi	r5,20
    886c:	e13ffd17 	ldw	r4,-12(fp)
    8870:	00084480 	call	8448 <xcvr_read>
		if (status == XCVR_STATUS)
    8874:	e0bffe17 	ldw	r2,-8(fp)
    8878:	10800058 	cmpnei	r2,r2,1
    887c:	10000726 	beq	r2,zero,889c <xcvr_finalize_lane_rate_change+0x74>
			break;
		mdelay(1);
    8880:	0100fa04 	movi	r4,1000
    8884:	00206540 	call	20654 <usleep>
	} while (timeout--);
    8888:	e0bfff17 	ldw	r2,-4(fp)
    888c:	10ffffc4 	addi	r3,r2,-1
    8890:	e0ffff15 	stw	r3,-4(fp)
    8894:	103ff21e 	bne	r2,zero,8860 <__alt_mem_mcu_subsystem_ram_0+0x77fe8860>
    8898:	00000106 	br	88a0 <xcvr_finalize_lane_rate_change+0x78>
			break;
    889c:	0001883a 	nop

	if (timeout < 0) {
    88a0:	e0bfff17 	ldw	r2,-4(fp)
    88a4:	1000080e 	bge	r2,zero,88c8 <xcvr_finalize_lane_rate_change+0xa0>
		xcvr_read(core, XCVR_REG_STATUS2, &status);
    88a8:	e0bffe04 	addi	r2,fp,-8
    88ac:	100d883a 	mov	r6,r2
    88b0:	01400604 	movi	r5,24
    88b4:	e13ffd17 	ldw	r4,-12(fp)
    88b8:	00084480 	call	8448 <xcvr_read>
		printf("Link activation error:\n");
    88bc:	010000b4 	movhi	r4,2
    88c0:	21199404 	addi	r4,r4,26192
    88c4:	0010fe80 	call	10fe8 <puts>
			printf("\tLane %d transceiver %s ready\n", i, \
			       ((status & XCVR_STATUS2_XCVR(i)) ?"" : "not"));
		}
*/
	}
}
    88c8:	0001883a 	nop
    88cc:	e037883a 	mov	sp,fp
    88d0:	dfc00117 	ldw	ra,4(sp)
    88d4:	df000017 	ldw	fp,0(sp)
    88d8:	dec00204 	addi	sp,sp,8
    88dc:	f800283a 	ret

000088e0 <atx_lookup_band>:

/*******************************************************************************
* @brief atx_lookup_band
*******************************************************************************/
uint32_t atx_lookup_band(uint32_t fvco)
{
    88e0:	defffd04 	addi	sp,sp,-12
    88e4:	df000215 	stw	fp,8(sp)
    88e8:	df000204 	addi	fp,sp,8
    88ec:	e13ffe15 	stw	r4,-8(fp)
	uint32_t i;

	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
    88f0:	e03fff15 	stw	zero,-4(fp)
    88f4:	00001506 	br	894c <atx_lookup_band+0x6c>
		if (fvco > atx_bands[i]) {
    88f8:	e0bfff17 	ldw	r2,-4(fp)
    88fc:	100690ba 	slli	r3,r2,2
    8900:	008000b4 	movhi	r2,2
    8904:	1885883a 	add	r2,r3,r2
    8908:	10d99d17 	ldw	r3,26228(r2)
    890c:	e0bffe17 	ldw	r2,-8(fp)
    8910:	18800b2e 	bgeu	r3,r2,8940 <atx_lookup_band+0x60>
			i = i % 8;
    8914:	e0bfff17 	ldw	r2,-4(fp)
    8918:	108001cc 	andi	r2,r2,7
    891c:	e0bfff15 	stw	r2,-4(fp)
			if (i != 7)
    8920:	e0bfff17 	ldw	r2,-4(fp)
    8924:	108001e0 	cmpeqi	r2,r2,7
    8928:	1000031e 	bne	r2,zero,8938 <atx_lookup_band+0x58>
				i++;
    892c:	e0bfff17 	ldw	r2,-4(fp)
    8930:	10800044 	addi	r2,r2,1
    8934:	e0bfff15 	stw	r2,-4(fp)
			return i;
    8938:	e0bfff17 	ldw	r2,-4(fp)
    893c:	00000706 	br	895c <atx_lookup_band+0x7c>
	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
    8940:	e0bfff17 	ldw	r2,-4(fp)
    8944:	10800044 	addi	r2,r2,1
    8948:	e0bfff15 	stw	r2,-4(fp)
    894c:	e0bfff17 	ldw	r2,-4(fp)
    8950:	10800530 	cmpltui	r2,r2,20
    8954:	103fe81e 	bne	r2,zero,88f8 <__alt_mem_mcu_subsystem_ram_0+0x77fe88f8>
		}
	}

	return 5;
    8958:	00800144 	movi	r2,5
}
    895c:	e037883a 	mov	sp,fp
    8960:	df000017 	ldw	fp,0(sp)
    8964:	dec00104 	addi	sp,sp,4
    8968:	f800283a 	ret

0000896c <atx_lookup_tank>:

/*******************************************************************************
* @brief atx_lookup_tank
*******************************************************************************/
uint32_t atx_lookup_tank(uint32_t fvco)
{
    896c:	defffe04 	addi	sp,sp,-8
    8970:	df000115 	stw	fp,4(sp)
    8974:	df000104 	addi	fp,sp,4
    8978:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 8800000)
    897c:	e0ffff17 	ldw	r3,-4(fp)
    8980:	008021b4 	movhi	r2,134
    8984:	1091bfc4 	addi	r2,r2,18175
    8988:	10c00236 	bltu	r2,r3,8994 <atx_lookup_tank+0x28>
		return 0;
    898c:	0005883a 	mov	r2,zero
    8990:	00000706 	br	89b0 <atx_lookup_tank+0x44>
	else if (fvco < 11400000)
    8994:	e0ffff17 	ldw	r3,-4(fp)
    8998:	00802bb4 	movhi	r2,174
    899c:	10bccfc4 	addi	r2,r2,-3265
    89a0:	10c00236 	bltu	r2,r3,89ac <atx_lookup_tank+0x40>
		return 1;
    89a4:	00800044 	movi	r2,1
    89a8:	00000106 	br	89b0 <atx_lookup_tank+0x44>
	else
		return 2;
    89ac:	00800084 	movi	r2,2
}
    89b0:	e037883a 	mov	sp,fp
    89b4:	df000017 	ldw	fp,0(sp)
    89b8:	dec00104 	addi	sp,sp,4
    89bc:	f800283a 	ret

000089c0 <atx_lookup_cp_current>:

/*******************************************************************************
* @brief atx_lookup_cp_current
*******************************************************************************/
uint32_t atx_lookup_cp_current(uint32_t m)
{
    89c0:	defffe04 	addi	sp,sp,-8
    89c4:	df000115 	stw	fp,4(sp)
    89c8:	df000104 	addi	fp,sp,4
    89cc:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
    89d0:	e0bfff17 	ldw	r2,-4(fp)
    89d4:	10801968 	cmpgeui	r2,r2,101
    89d8:	1000791e 	bne	r2,zero,8bc0 <atx_lookup_cp_current+0x200>
    89dc:	e0bfff17 	ldw	r2,-4(fp)
    89e0:	100690ba 	slli	r3,r2,2
    89e4:	00800074 	movhi	r2,1
    89e8:	1885883a 	add	r2,r3,r2
    89ec:	10a27d17 	ldw	r2,-30220(r2)
    89f0:	1000683a 	jmp	r2
    89f4:	00008b88 	cmpgei	zero,zero,558
    89f8:	00008b88 	cmpgei	zero,zero,558
    89fc:	00008b88 	cmpgei	zero,zero,558
    8a00:	00008b88 	cmpgei	zero,zero,558
    8a04:	00008b88 	cmpgei	zero,zero,558
    8a08:	00008b88 	cmpgei	zero,zero,558
    8a0c:	00008b88 	cmpgei	zero,zero,558
    8a10:	00008b88 	cmpgei	zero,zero,558
    8a14:	00008b88 	cmpgei	zero,zero,558
    8a18:	00008b88 	cmpgei	zero,zero,558
    8a1c:	00008b88 	cmpgei	zero,zero,558
    8a20:	00008b88 	cmpgei	zero,zero,558
    8a24:	00008b88 	cmpgei	zero,zero,558
    8a28:	00008b88 	cmpgei	zero,zero,558
    8a2c:	00008b88 	cmpgei	zero,zero,558
    8a30:	00008b88 	cmpgei	zero,zero,558
    8a34:	00008b88 	cmpgei	zero,zero,558
    8a38:	00008b88 	cmpgei	zero,zero,558
    8a3c:	00008b88 	cmpgei	zero,zero,558
    8a40:	00008b88 	cmpgei	zero,zero,558
    8a44:	00008b88 	cmpgei	zero,zero,558
    8a48:	00008b90 	cmplti	zero,zero,558
    8a4c:	00008b90 	cmplti	zero,zero,558
    8a50:	00008b90 	cmplti	zero,zero,558
    8a54:	00008b90 	cmplti	zero,zero,558
    8a58:	00008b90 	cmplti	zero,zero,558
    8a5c:	00008b90 	cmplti	zero,zero,558
    8a60:	00008b90 	cmplti	zero,zero,558
    8a64:	00008b90 	cmplti	zero,zero,558
    8a68:	00008b90 	cmplti	zero,zero,558
    8a6c:	00008b90 	cmplti	zero,zero,558
    8a70:	00008b98 	cmpnei	zero,zero,558
    8a74:	00008b98 	cmpnei	zero,zero,558
    8a78:	00008b98 	cmpnei	zero,zero,558
    8a7c:	00008b98 	cmpnei	zero,zero,558
    8a80:	00008b98 	cmpnei	zero,zero,558
    8a84:	00008b98 	cmpnei	zero,zero,558
    8a88:	00008b98 	cmpnei	zero,zero,558
    8a8c:	00008b98 	cmpnei	zero,zero,558
    8a90:	00008b98 	cmpnei	zero,zero,558
    8a94:	00008b98 	cmpnei	zero,zero,558
    8a98:	00008ba0 	cmpeqi	zero,zero,558
    8a9c:	00008ba0 	cmpeqi	zero,zero,558
    8aa0:	00008ba0 	cmpeqi	zero,zero,558
    8aa4:	00008ba0 	cmpeqi	zero,zero,558
    8aa8:	00008ba0 	cmpeqi	zero,zero,558
    8aac:	00008ba0 	cmpeqi	zero,zero,558
    8ab0:	00008ba0 	cmpeqi	zero,zero,558
    8ab4:	00008ba0 	cmpeqi	zero,zero,558
    8ab8:	00008ba0 	cmpeqi	zero,zero,558
    8abc:	00008ba0 	cmpeqi	zero,zero,558
    8ac0:	00008ba0 	cmpeqi	zero,zero,558
    8ac4:	00008ba0 	cmpeqi	zero,zero,558
    8ac8:	00008ba0 	cmpeqi	zero,zero,558
    8acc:	00008ba0 	cmpeqi	zero,zero,558
    8ad0:	00008ba0 	cmpeqi	zero,zero,558
    8ad4:	00008ba0 	cmpeqi	zero,zero,558
    8ad8:	00008ba0 	cmpeqi	zero,zero,558
    8adc:	00008ba0 	cmpeqi	zero,zero,558
    8ae0:	00008ba0 	cmpeqi	zero,zero,558
    8ae4:	00008ba0 	cmpeqi	zero,zero,558
    8ae8:	00008ba8 	cmpgeui	zero,zero,558
    8aec:	00008ba8 	cmpgeui	zero,zero,558
    8af0:	00008ba8 	cmpgeui	zero,zero,558
    8af4:	00008ba8 	cmpgeui	zero,zero,558
    8af8:	00008ba8 	cmpgeui	zero,zero,558
    8afc:	00008ba8 	cmpgeui	zero,zero,558
    8b00:	00008ba8 	cmpgeui	zero,zero,558
    8b04:	00008ba8 	cmpgeui	zero,zero,558
    8b08:	00008ba8 	cmpgeui	zero,zero,558
    8b0c:	00008ba8 	cmpgeui	zero,zero,558
    8b10:	00008bb0 	cmpltui	zero,zero,558
    8b14:	00008bb0 	cmpltui	zero,zero,558
    8b18:	00008bb0 	cmpltui	zero,zero,558
    8b1c:	00008bb0 	cmpltui	zero,zero,558
    8b20:	00008bb0 	cmpltui	zero,zero,558
    8b24:	00008bb0 	cmpltui	zero,zero,558
    8b28:	00008bb0 	cmpltui	zero,zero,558
    8b2c:	00008bb0 	cmpltui	zero,zero,558
    8b30:	00008bb0 	cmpltui	zero,zero,558
    8b34:	00008bb0 	cmpltui	zero,zero,558
    8b38:	00008bb0 	cmpltui	zero,zero,558
    8b3c:	00008bb0 	cmpltui	zero,zero,558
    8b40:	00008bb0 	cmpltui	zero,zero,558
    8b44:	00008bb0 	cmpltui	zero,zero,558
    8b48:	00008bb0 	cmpltui	zero,zero,558
    8b4c:	00008bb0 	cmpltui	zero,zero,558
    8b50:	00008bb0 	cmpltui	zero,zero,558
    8b54:	00008bb0 	cmpltui	zero,zero,558
    8b58:	00008bb0 	cmpltui	zero,zero,558
    8b5c:	00008bb0 	cmpltui	zero,zero,558
    8b60:	00008bb8 	rdprs	zero,zero,558
    8b64:	00008bb8 	rdprs	zero,zero,558
    8b68:	00008bb8 	rdprs	zero,zero,558
    8b6c:	00008bb8 	rdprs	zero,zero,558
    8b70:	00008bb8 	rdprs	zero,zero,558
    8b74:	00008bb8 	rdprs	zero,zero,558
    8b78:	00008bb8 	rdprs	zero,zero,558
    8b7c:	00008bb8 	rdprs	zero,zero,558
    8b80:	00008bb8 	rdprs	zero,zero,558
    8b84:	00008bb8 	rdprs	zero,zero,558
	case 0 ... 20:
		return 0x1a;
    8b88:	00800684 	movi	r2,26
    8b8c:	00000d06 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 21 ... 30:
		return 0x1c;
    8b90:	00800704 	movi	r2,28
    8b94:	00000b06 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 31 ... 40:
		return 0x1d;
    8b98:	00800744 	movi	r2,29
    8b9c:	00000906 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 41 ... 60:
		return 0x25;
    8ba0:	00800944 	movi	r2,37
    8ba4:	00000706 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 61 ... 70:
		return 0x26;
    8ba8:	00800984 	movi	r2,38
    8bac:	00000506 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 71 ... 90:
		return 0x1d;
    8bb0:	00800744 	movi	r2,29
    8bb4:	00000306 	br	8bc4 <atx_lookup_cp_current+0x204>
	case 91 ... 100:
		return 0x25;
    8bb8:	00800944 	movi	r2,37
    8bbc:	00000106 	br	8bc4 <atx_lookup_cp_current+0x204>
	default:
		return 0x26;
    8bc0:	00800984 	movi	r2,38
	}
}
    8bc4:	e037883a 	mov	sp,fp
    8bc8:	df000017 	ldw	fp,0(sp)
    8bcc:	dec00104 	addi	sp,sp,4
    8bd0:	f800283a 	ret

00008bd4 <atx_lookup_lf_resistance>:

/*******************************************************************************
* @brief atx_lookup_lf_resistance
*******************************************************************************/
uint32_t atx_lookup_lf_resistance(uint32_t m)
{
    8bd4:	defffe04 	addi	sp,sp,-8
    8bd8:	df000115 	stw	fp,4(sp)
    8bdc:	df000104 	addi	fp,sp,4
    8be0:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
    8be4:	e0bfff17 	ldw	r2,-4(fp)
    8be8:	108011e8 	cmpgeui	r2,r2,71
    8bec:	1000551e 	bne	r2,zero,8d44 <atx_lookup_lf_resistance+0x170>
    8bf0:	e0bfff17 	ldw	r2,-4(fp)
    8bf4:	100690ba 	slli	r3,r2,2
    8bf8:	00800074 	movhi	r2,1
    8bfc:	1885883a 	add	r2,r3,r2
    8c00:	10a30217 	ldw	r2,-29688(r2)
    8c04:	1000683a 	jmp	r2
    8c08:	00008d24 	muli	zero,zero,564
    8c0c:	00008d24 	muli	zero,zero,564
    8c10:	00008d24 	muli	zero,zero,564
    8c14:	00008d24 	muli	zero,zero,564
    8c18:	00008d24 	muli	zero,zero,564
    8c1c:	00008d24 	muli	zero,zero,564
    8c20:	00008d24 	muli	zero,zero,564
    8c24:	00008d24 	muli	zero,zero,564
    8c28:	00008d24 	muli	zero,zero,564
    8c2c:	00008d24 	muli	zero,zero,564
    8c30:	00008d24 	muli	zero,zero,564
    8c34:	00008d24 	muli	zero,zero,564
    8c38:	00008d24 	muli	zero,zero,564
    8c3c:	00008d2c 	andhi	zero,zero,564
    8c40:	00008d2c 	andhi	zero,zero,564
    8c44:	00008d2c 	andhi	zero,zero,564
    8c48:	00008d2c 	andhi	zero,zero,564
    8c4c:	00008d2c 	andhi	zero,zero,564
    8c50:	00008d2c 	andhi	zero,zero,564
    8c54:	00008d2c 	andhi	zero,zero,564
    8c58:	00008d2c 	andhi	zero,zero,564
    8c5c:	00008d34 	movhi	zero,564
    8c60:	00008d34 	movhi	zero,564
    8c64:	00008d34 	movhi	zero,564
    8c68:	00008d34 	movhi	zero,564
    8c6c:	00008d34 	movhi	zero,564
    8c70:	00008d34 	movhi	zero,564
    8c74:	00008d34 	movhi	zero,564
    8c78:	00008d34 	movhi	zero,564
    8c7c:	00008d34 	movhi	zero,564
    8c80:	00008d34 	movhi	zero,564
    8c84:	00008d3c 	xorhi	zero,zero,564
    8c88:	00008d3c 	xorhi	zero,zero,564
    8c8c:	00008d3c 	xorhi	zero,zero,564
    8c90:	00008d3c 	xorhi	zero,zero,564
    8c94:	00008d3c 	xorhi	zero,zero,564
    8c98:	00008d3c 	xorhi	zero,zero,564
    8c9c:	00008d3c 	xorhi	zero,zero,564
    8ca0:	00008d3c 	xorhi	zero,zero,564
    8ca4:	00008d3c 	xorhi	zero,zero,564
    8ca8:	00008d3c 	xorhi	zero,zero,564
    8cac:	00008d3c 	xorhi	zero,zero,564
    8cb0:	00008d3c 	xorhi	zero,zero,564
    8cb4:	00008d3c 	xorhi	zero,zero,564
    8cb8:	00008d3c 	xorhi	zero,zero,564
    8cbc:	00008d3c 	xorhi	zero,zero,564
    8cc0:	00008d3c 	xorhi	zero,zero,564
    8cc4:	00008d3c 	xorhi	zero,zero,564
    8cc8:	00008d3c 	xorhi	zero,zero,564
    8ccc:	00008d3c 	xorhi	zero,zero,564
    8cd0:	00008d3c 	xorhi	zero,zero,564
    8cd4:	00008d3c 	xorhi	zero,zero,564
    8cd8:	00008d3c 	xorhi	zero,zero,564
    8cdc:	00008d3c 	xorhi	zero,zero,564
    8ce0:	00008d3c 	xorhi	zero,zero,564
    8ce4:	00008d3c 	xorhi	zero,zero,564
    8ce8:	00008d3c 	xorhi	zero,zero,564
    8cec:	00008d3c 	xorhi	zero,zero,564
    8cf0:	00008d3c 	xorhi	zero,zero,564
    8cf4:	00008d3c 	xorhi	zero,zero,564
    8cf8:	00008d3c 	xorhi	zero,zero,564
    8cfc:	00008d3c 	xorhi	zero,zero,564
    8d00:	00008d3c 	xorhi	zero,zero,564
    8d04:	00008d3c 	xorhi	zero,zero,564
    8d08:	00008d3c 	xorhi	zero,zero,564
    8d0c:	00008d3c 	xorhi	zero,zero,564
    8d10:	00008d3c 	xorhi	zero,zero,564
    8d14:	00008d3c 	xorhi	zero,zero,564
    8d18:	00008d3c 	xorhi	zero,zero,564
    8d1c:	00008d3c 	xorhi	zero,zero,564
    8d20:	00008d3c 	xorhi	zero,zero,564
	case 0 ... 12:
		return 0;
    8d24:	0005883a 	mov	r2,zero
    8d28:	00000706 	br	8d48 <atx_lookup_lf_resistance+0x174>
	case 13 ... 20:
		return 1;
    8d2c:	00800044 	movi	r2,1
    8d30:	00000506 	br	8d48 <atx_lookup_lf_resistance+0x174>
	case 21 ... 30:
		return 0;
    8d34:	0005883a 	mov	r2,zero
    8d38:	00000306 	br	8d48 <atx_lookup_lf_resistance+0x174>
	case 31 ... 70:
		return 1;
    8d3c:	00800044 	movi	r2,1
    8d40:	00000106 	br	8d48 <atx_lookup_lf_resistance+0x174>
	default:
		return 2;
    8d44:	00800084 	movi	r2,2
	}
}
    8d48:	e037883a 	mov	sp,fp
    8d4c:	df000017 	ldw	fp,0(sp)
    8d50:	dec00104 	addi	sp,sp,4
    8d54:	f800283a 	ret

00008d58 <atx_calc_params>:
* @brief atx_calc_params
*******************************************************************************/
void atx_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_l, uint32_t *best_fvco)
{
    8d58:	defff204 	addi	sp,sp,-56
    8d5c:	df000d15 	stw	fp,52(sp)
    8d60:	df000d04 	addi	fp,sp,52
    8d64:	e13ff615 	stw	r4,-40(fp)
    8d68:	e17ff515 	stw	r5,-44(fp)
    8d6c:	e1bff415 	stw	r6,-48(fp)
    8d70:	e1fff315 	stw	r7,-52(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, l;
	uint32_t f, fvco, best_f;
	uint32_t pfd;

	*best_n = *best_m = *best_l = *best_fvco = 0;
    8d74:	e0800217 	ldw	r2,8(fp)
    8d78:	10000015 	stw	zero,0(r2)
    8d7c:	e0800217 	ldw	r2,8(fp)
    8d80:	10c00017 	ldw	r3,0(r2)
    8d84:	e0800117 	ldw	r2,4(fp)
    8d88:	10c00015 	stw	r3,0(r2)
    8d8c:	e0800117 	ldw	r2,4(fp)
    8d90:	10c00017 	ldw	r3,0(r2)
    8d94:	e0bff317 	ldw	r2,-52(fp)
    8d98:	10c00015 	stw	r3,0(r2)
    8d9c:	e0bff317 	ldw	r2,-52(fp)
    8da0:	10c00017 	ldw	r3,0(r2)
    8da4:	e0bff417 	ldw	r2,-48(fp)
    8da8:	10c00015 	stw	r3,0(r2)
	best_f = ULONG_MAX;
    8dac:	00bfffc4 	movi	r2,-1
    8db0:	e0bffc15 	stw	r2,-16(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_ATX_PLL_VCO_MIN / 2, fref_khz), 8);
    8db4:	e0fff617 	ldw	r3,-40(fp)
    8db8:	00800df4 	movhi	r2,55
    8dbc:	10bb9fc4 	addi	r2,r2,-4481
    8dc0:	1887883a 	add	r3,r3,r2
    8dc4:	e0bff617 	ldw	r2,-40(fp)
    8dc8:	1885203a 	divu	r2,r3,r2
    8dcc:	10c00228 	cmpgeui	r3,r2,8
    8dd0:	1800011e 	bne	r3,zero,8dd8 <atx_calc_params+0x80>
    8dd4:	00800204 	movi	r2,8
    8dd8:	e0bffb15 	stw	r2,-20(fp)
	m_max = min_t(uint32_t, (A10_ATX_PLL_VCO_MAX / 2 * 8 / fref_khz), 127);
    8ddc:	0080dbf4 	movhi	r2,879
    8de0:	10ba0004 	addi	r2,r2,-6144
    8de4:	e0fff617 	ldw	r3,-40(fp)
    8de8:	10c5203a 	divu	r2,r2,r3
    8dec:	10c02030 	cmpltui	r3,r2,128
    8df0:	1800011e 	bne	r3,zero,8df8 <atx_calc_params+0xa0>
    8df4:	00801fc4 	movi	r2,127
    8df8:	e0bffa15 	stw	r2,-24(fp)

	for (n = 1; n <= 8; n *= 2) {
    8dfc:	00800044 	movi	r2,1
    8e00:	e0bffe15 	stw	r2,-8(fp)
    8e04:	00004e06 	br	8f40 <atx_calc_params+0x1e8>
		pfd = fref_khz / n;
    8e08:	e0fff617 	ldw	r3,-40(fp)
    8e0c:	e0bffe17 	ldw	r2,-8(fp)
    8e10:	1885203a 	divu	r2,r3,r2
    8e14:	e0bff915 	stw	r2,-28(fp)
		if (pfd < A10_ATX_PLL_PFD_MIN)
    8e18:	e0bff917 	ldw	r2,-28(fp)
    8e1c:	10bc0028 	cmpgeui	r2,r2,61440
    8e20:	10004b26 	beq	r2,zero,8f50 <atx_calc_params+0x1f8>
			break;
		if (pfd > A10_ATX_PLL_VCO_MAX)
    8e24:	e0fff917 	ldw	r3,-28(fp)
    8e28:	00803734 	movhi	r2,220
    8e2c:	10ae8004 	addi	r2,r2,-17920
    8e30:	10c03f36 	bltu	r2,r3,8f30 <atx_calc_params+0x1d8>
			continue;

		for (m = m_min; m <= m_max; m++) {
    8e34:	e0bffb17 	ldw	r2,-20(fp)
    8e38:	e0bfff15 	stw	r2,-4(fp)
    8e3c:	00003806 	br	8f20 <atx_calc_params+0x1c8>
			fvco = fref_khz * m * 2 / n;
    8e40:	e0fff617 	ldw	r3,-40(fp)
    8e44:	e0bfff17 	ldw	r2,-4(fp)
    8e48:	1885383a 	mul	r2,r3,r2
    8e4c:	1085883a 	add	r2,r2,r2
    8e50:	1007883a 	mov	r3,r2
    8e54:	e0bffe17 	ldw	r2,-8(fp)
    8e58:	1885203a 	divu	r2,r3,r2
    8e5c:	e0bff815 	stw	r2,-32(fp)

			for (l = 1; l <= 16; l *= 2) {
    8e60:	00800044 	movi	r2,1
    8e64:	e0bffd15 	stw	r2,-12(fp)
    8e68:	00002706 	br	8f08 <atx_calc_params+0x1b0>
				f = (fvco * 2) / l;
    8e6c:	e0bff817 	ldw	r2,-32(fp)
    8e70:	1085883a 	add	r2,r2,r2
    8e74:	1007883a 	mov	r3,r2
    8e78:	e0bffd17 	ldw	r2,-12(fp)
    8e7c:	1885203a 	divu	r2,r3,r2
    8e80:	e0bff715 	stw	r2,-36(fp)

				if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
    8e84:	e0fff717 	ldw	r3,-36(fp)
    8e88:	e0bff517 	ldw	r2,-44(fp)
    8e8c:	1885c83a 	sub	r2,r3,r2
    8e90:	1000010e 	bge	r2,zero,8e98 <atx_calc_params+0x140>
    8e94:	0085c83a 	sub	r2,zero,r2
    8e98:	1009883a 	mov	r4,r2
    8e9c:	e0fffc17 	ldw	r3,-16(fp)
    8ea0:	e0bff517 	ldw	r2,-44(fp)
    8ea4:	1885c83a 	sub	r2,r3,r2
    8ea8:	1000010e 	bge	r2,zero,8eb0 <atx_calc_params+0x158>
    8eac:	0085c83a 	sub	r2,zero,r2
    8eb0:	2080120e 	bge	r4,r2,8efc <atx_calc_params+0x1a4>
					best_f = f;
    8eb4:	e0bff717 	ldw	r2,-36(fp)
    8eb8:	e0bffc15 	stw	r2,-16(fp)
					*best_n = n;
    8ebc:	e0bff417 	ldw	r2,-48(fp)
    8ec0:	e0fffe17 	ldw	r3,-8(fp)
    8ec4:	10c00015 	stw	r3,0(r2)
					*best_m = m;
    8ec8:	e0bff317 	ldw	r2,-52(fp)
    8ecc:	e0ffff17 	ldw	r3,-4(fp)
    8ed0:	10c00015 	stw	r3,0(r2)
					*best_l = l/2;
    8ed4:	e0bffd17 	ldw	r2,-12(fp)
    8ed8:	1006d07a 	srli	r3,r2,1
    8edc:	e0800117 	ldw	r2,4(fp)
    8ee0:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
    8ee4:	e0800217 	ldw	r2,8(fp)
    8ee8:	e0fff817 	ldw	r3,-32(fp)
    8eec:	10c00015 	stw	r3,0(r2)
					if (f == fout_khz)
    8ef0:	e0fff717 	ldw	r3,-36(fp)
    8ef4:	e0bff517 	ldw	r2,-44(fp)
    8ef8:	18801726 	beq	r3,r2,8f58 <atx_calc_params+0x200>
			for (l = 1; l <= 16; l *= 2) {
    8efc:	e0bffd17 	ldw	r2,-12(fp)
    8f00:	1085883a 	add	r2,r2,r2
    8f04:	e0bffd15 	stw	r2,-12(fp)
    8f08:	e0bffd17 	ldw	r2,-12(fp)
    8f0c:	10800470 	cmpltui	r2,r2,17
    8f10:	103fd61e 	bne	r2,zero,8e6c <__alt_mem_mcu_subsystem_ram_0+0x77fe8e6c>
		for (m = m_min; m <= m_max; m++) {
    8f14:	e0bfff17 	ldw	r2,-4(fp)
    8f18:	10800044 	addi	r2,r2,1
    8f1c:	e0bfff15 	stw	r2,-4(fp)
    8f20:	e0bfff17 	ldw	r2,-4(fp)
    8f24:	e0fffa17 	ldw	r3,-24(fp)
    8f28:	18bfc52e 	bgeu	r3,r2,8e40 <__alt_mem_mcu_subsystem_ram_0+0x77fe8e40>
    8f2c:	00000106 	br	8f34 <atx_calc_params+0x1dc>
			continue;
    8f30:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
    8f34:	e0bffe17 	ldw	r2,-8(fp)
    8f38:	1085883a 	add	r2,r2,r2
    8f3c:	e0bffe15 	stw	r2,-8(fp)
    8f40:	e0bffe17 	ldw	r2,-8(fp)
    8f44:	10800270 	cmpltui	r2,r2,9
    8f48:	103faf1e 	bne	r2,zero,8e08 <__alt_mem_mcu_subsystem_ram_0+0x77fe8e08>
    8f4c:	00000306 	br	8f5c <atx_calc_params+0x204>
			break;
    8f50:	0001883a 	nop
    8f54:	00000106 	br	8f5c <atx_calc_params+0x204>
						return;
    8f58:	0001883a 	nop
				}
			}
		}
	}
}
    8f5c:	e037883a 	mov	sp,fp
    8f60:	df000017 	ldw	fp,0(sp)
    8f64:	dec00104 	addi	sp,sp,4
    8f68:	f800283a 	ret

00008f6c <atx_pll_round_rate>:

/*******************************************************************************
* @brief atx_pll_round_rate
*******************************************************************************/
uint32_t atx_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
    8f6c:	defff204 	addi	sp,sp,-56
    8f70:	dfc00d15 	stw	ra,52(sp)
    8f74:	df000c15 	stw	fp,48(sp)
    8f78:	dc400b15 	stw	r17,44(sp)
    8f7c:	dc000a15 	stw	r16,40(sp)
    8f80:	df000c04 	addi	fp,sp,48
    8f84:	e13ff715 	stw	r4,-36(fp)
    8f88:	e17ff615 	stw	r5,-40(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
    8f8c:	e0bff717 	ldw	r2,-36(fp)
    8f90:	1004d07a 	srli	r2,r2,1
    8f94:	e0bffd15 	stw	r2,-12(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
    8f98:	e13ffa04 	addi	r4,fp,-24
    8f9c:	e0fffb04 	addi	r3,fp,-20
    8fa0:	e0bff804 	addi	r2,fp,-32
    8fa4:	d8800115 	stw	r2,4(sp)
    8fa8:	e0bff904 	addi	r2,fp,-28
    8fac:	d8800015 	stw	r2,0(sp)
    8fb0:	200f883a 	mov	r7,r4
    8fb4:	180d883a 	mov	r6,r3
    8fb8:	e17ffd17 	ldw	r5,-12(fp)
    8fbc:	e13ff617 	ldw	r4,-40(fp)
    8fc0:	0008d580 	call	8d58 <atx_calc_params>

	if (n == 0 || m == 0 || l == 0)
    8fc4:	e0bffb17 	ldw	r2,-20(fp)
    8fc8:	10000426 	beq	r2,zero,8fdc <atx_pll_round_rate+0x70>
    8fcc:	e0bffa17 	ldw	r2,-24(fp)
    8fd0:	10000226 	beq	r2,zero,8fdc <atx_pll_round_rate+0x70>
    8fd4:	e0bff917 	ldw	r2,-28(fp)
    8fd8:	1000021e 	bne	r2,zero,8fe4 <atx_pll_round_rate+0x78>
		return -1;
    8fdc:	00bfffc4 	movi	r2,-1
    8fe0:	00002906 	br	9088 <atx_pll_round_rate+0x11c>

	tmp = (uint32_t)fref_khz * m * 4;
    8fe4:	e0fffa17 	ldw	r3,-24(fp)
    8fe8:	e0bff617 	ldw	r2,-40(fp)
    8fec:	1885383a 	mul	r2,r3,r2
    8ff0:	100490ba 	slli	r2,r2,2
    8ff4:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l * n);
    8ff8:	e13ffc17 	ldw	r4,-16(fp)
    8ffc:	000fa300 	call	fa30 <__floatunsidf>
    9000:	1021883a 	mov	r16,r2
    9004:	1823883a 	mov	r17,r3
    9008:	e0fff917 	ldw	r3,-28(fp)
    900c:	e0bffb17 	ldw	r2,-20(fp)
    9010:	1885383a 	mul	r2,r3,r2
    9014:	1009883a 	mov	r4,r2
    9018:	000fa300 	call	fa30 <__floatunsidf>
    901c:	1009883a 	mov	r4,r2
    9020:	180b883a 	mov	r5,r3
    9024:	200d883a 	mov	r6,r4
    9028:	280f883a 	mov	r7,r5
    902c:	8009883a 	mov	r4,r16
    9030:	880b883a 	mov	r5,r17
    9034:	000e0540 	call	e054 <__divdf3>
    9038:	1009883a 	mov	r4,r2
    903c:	180b883a 	mov	r5,r3
    9040:	2005883a 	mov	r2,r4
    9044:	2807883a 	mov	r3,r5
    9048:	000d883a 	mov	r6,zero
    904c:	01cff834 	movhi	r7,16352
    9050:	1009883a 	mov	r4,r2
    9054:	180b883a 	mov	r5,r3
    9058:	000d7940 	call	d794 <__adddf3>
    905c:	1009883a 	mov	r4,r2
    9060:	180b883a 	mov	r5,r3
    9064:	2005883a 	mov	r2,r4
    9068:	2807883a 	mov	r3,r5
    906c:	1009883a 	mov	r4,r2
    9070:	180b883a 	mov	r5,r3
    9074:	000ca5c0 	call	ca5c <__fixunsdfdi>
    9078:	1009883a 	mov	r4,r2
    907c:	180b883a 	mov	r5,r3
    9080:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
    9084:	e0bffc17 	ldw	r2,-16(fp)
}
    9088:	e6fffe04 	addi	sp,fp,-8
    908c:	dfc00317 	ldw	ra,12(sp)
    9090:	df000217 	ldw	fp,8(sp)
    9094:	dc400117 	ldw	r17,4(sp)
    9098:	dc000017 	ldw	r16,0(sp)
    909c:	dec00404 	addi	sp,sp,16
    90a0:	f800283a 	ret

000090a4 <atx_pll_set_rate>:
/*******************************************************************************
* @brief atx_pll_set_rate
*******************************************************************************/
uint32_t atx_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
    90a4:	defff004 	addi	sp,sp,-64
    90a8:	dfc00f15 	stw	ra,60(sp)
    90ac:	df000e15 	stw	fp,56(sp)
    90b0:	df000e04 	addi	fp,sp,56
    90b4:	e13ff615 	stw	r4,-40(fp)
    90b8:	e17ff515 	stw	r5,-44(fp)
    90bc:	e1bff415 	stw	r6,-48(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t lfr, cpc, band, tank;

	fout_khz = l_rate_kbps / 2;
    90c0:	e0bff517 	ldw	r2,-44(fp)
    90c4:	1004d07a 	srli	r2,r2,1
    90c8:	e0bfff15 	stw	r2,-4(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
    90cc:	e13ff904 	addi	r4,fp,-28
    90d0:	e0fffa04 	addi	r3,fp,-24
    90d4:	e0bff704 	addi	r2,fp,-36
    90d8:	d8800115 	stw	r2,4(sp)
    90dc:	e0bff804 	addi	r2,fp,-32
    90e0:	d8800015 	stw	r2,0(sp)
    90e4:	200f883a 	mov	r7,r4
    90e8:	180d883a 	mov	r6,r3
    90ec:	e17fff17 	ldw	r5,-4(fp)
    90f0:	e13ff417 	ldw	r4,-48(fp)
    90f4:	0008d580 	call	8d58 <atx_calc_params>
	printf("\tm: %d\n", m);
	printf("\tl: %d\n", l);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || l == 0)
    90f8:	e0bffa17 	ldw	r2,-24(fp)
    90fc:	10000426 	beq	r2,zero,9110 <atx_pll_set_rate+0x6c>
    9100:	e0bff917 	ldw	r2,-28(fp)
    9104:	10000226 	beq	r2,zero,9110 <atx_pll_set_rate+0x6c>
    9108:	e0bff817 	ldw	r2,-32(fp)
    910c:	1000021e 	bne	r2,zero,9118 <atx_pll_set_rate+0x74>
		return -1;
    9110:	00bfffc4 	movi	r2,-1
    9114:	00008b06 	br	9344 <atx_pll_set_rate+0x2a0>
	// encodings
	switch (n) {
    9118:	e0bffa17 	ldw	r2,-24(fp)
    911c:	10c000a0 	cmpeqi	r3,r2,2
    9120:	1800061e 	bne	r3,zero,913c <atx_pll_set_rate+0x98>
    9124:	10c00120 	cmpeqi	r3,r2,4
    9128:	1800071e 	bne	r3,zero,9148 <atx_pll_set_rate+0xa4>
    912c:	10800060 	cmpeqi	r2,r2,1
    9130:	10000826 	beq	r2,zero,9154 <atx_pll_set_rate+0xb0>
	case 1:
		n = 0;
    9134:	e03ffa15 	stw	zero,-24(fp)
		break;
    9138:	00000906 	br	9160 <atx_pll_set_rate+0xbc>
	case 2:
		n = 1;
    913c:	00800044 	movi	r2,1
    9140:	e0bffa15 	stw	r2,-24(fp)
		break;
    9144:	00000606 	br	9160 <atx_pll_set_rate+0xbc>
	case 4:
		n = 2;
    9148:	00800084 	movi	r2,2
    914c:	e0bffa15 	stw	r2,-24(fp)
		break;
    9150:	00000306 	br	9160 <atx_pll_set_rate+0xbc>
	default:
		n = 3;
    9154:	008000c4 	movi	r2,3
    9158:	e0bffa15 	stw	r2,-24(fp)
		break;
    915c:	0001883a 	nop
	}

	switch (l) {
    9160:	e0bff817 	ldw	r2,-32(fp)
    9164:	10c000a0 	cmpeqi	r3,r2,2
    9168:	18000c1e 	bne	r3,zero,919c <atx_pll_set_rate+0xf8>
    916c:	10c000e8 	cmpgeui	r3,r2,3
    9170:	1800031e 	bne	r3,zero,9180 <atx_pll_set_rate+0xdc>
    9174:	10800060 	cmpeqi	r2,r2,1
    9178:	1000061e 	bne	r2,zero,9194 <atx_pll_set_rate+0xf0>
    917c:	00001006 	br	91c0 <atx_pll_set_rate+0x11c>
    9180:	10c00120 	cmpeqi	r3,r2,4
    9184:	1800081e 	bne	r3,zero,91a8 <atx_pll_set_rate+0x104>
    9188:	10800220 	cmpeqi	r2,r2,8
    918c:	1000091e 	bne	r2,zero,91b4 <atx_pll_set_rate+0x110>
    9190:	00000b06 	br	91c0 <atx_pll_set_rate+0x11c>
	case 1:
		l = 0;
    9194:	e03ff815 	stw	zero,-32(fp)
		break;
    9198:	00000c06 	br	91cc <atx_pll_set_rate+0x128>
	case 2:
		l = 1;
    919c:	00800044 	movi	r2,1
    91a0:	e0bff815 	stw	r2,-32(fp)
		break;
    91a4:	00000906 	br	91cc <atx_pll_set_rate+0x128>
	case 4:
		l = 2;
    91a8:	00800084 	movi	r2,2
    91ac:	e0bff815 	stw	r2,-32(fp)
		break;
    91b0:	00000606 	br	91cc <atx_pll_set_rate+0x128>
	case 8:
		l = 3;
    91b4:	008000c4 	movi	r2,3
    91b8:	e0bff815 	stw	r2,-32(fp)
		break;
    91bc:	00000306 	br	91cc <atx_pll_set_rate+0x128>
	default:
		l = 4;
    91c0:	00800104 	movi	r2,4
    91c4:	e0bff815 	stw	r2,-32(fp)
		break;
    91c8:	0001883a 	nop
	}

	lfr = atx_lookup_lf_resistance(m);
    91cc:	e0bff917 	ldw	r2,-28(fp)
    91d0:	1009883a 	mov	r4,r2
    91d4:	0008bd40 	call	8bd4 <atx_lookup_lf_resistance>
    91d8:	e0bffe15 	stw	r2,-8(fp)
	cpc = atx_lookup_cp_current(m);
    91dc:	e0bff917 	ldw	r2,-28(fp)
    91e0:	1009883a 	mov	r4,r2
    91e4:	00089c00 	call	89c0 <atx_lookup_cp_current>
    91e8:	e0bffd15 	stw	r2,-12(fp)
	band = atx_lookup_band(fvco);
    91ec:	e0bff717 	ldw	r2,-36(fp)
    91f0:	1009883a 	mov	r4,r2
    91f4:	00088e00 	call	88e0 <atx_lookup_band>
    91f8:	e0bffc15 	stw	r2,-16(fp)
	tank = atx_lookup_tank(fvco);
    91fc:	e0bff717 	ldw	r2,-36(fp)
    9200:	1009883a 	mov	r4,r2
    9204:	000896c0 	call	896c <atx_lookup_tank>
    9208:	e0bffb15 	stw	r2,-20(fp)

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
    920c:	e0bff617 	ldw	r2,-40(fp)
    9210:	10800d04 	addi	r2,r2,52
    9214:	1009883a 	mov	r4,r2
    9218:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

	pll_update(&(core->dev.atx_pll), 0x102, 0x1f, band | (tank << 3));
    921c:	e0bff617 	ldw	r2,-40(fp)
    9220:	11000d04 	addi	r4,r2,52
    9224:	e0bffb17 	ldw	r2,-20(fp)
    9228:	100690fa 	slli	r3,r2,3
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	1884b03a 	or	r2,r3,r2
    9234:	100f883a 	mov	r7,r2
    9238:	018007c4 	movi	r6,31
    923c:	01404084 	movi	r5,258
    9240:	000b5cc0 	call	b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x104, 0x7f, ((cpc & 0x38) << 1) | 0x04 | lfr);
    9244:	e0bff617 	ldw	r2,-40(fp)
    9248:	11000d04 	addi	r4,r2,52
    924c:	e0bffd17 	ldw	r2,-12(fp)
    9250:	1085883a 	add	r2,r2,r2
    9254:	10c01c0c 	andi	r3,r2,112
    9258:	e0bffe17 	ldw	r2,-8(fp)
    925c:	1884b03a 	or	r2,r3,r2
    9260:	10800114 	ori	r2,r2,4
    9264:	100f883a 	mov	r7,r2
    9268:	01801fc4 	movi	r6,127
    926c:	01404104 	movi	r5,260
    9270:	000b5cc0 	call	b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x105, 0x07, cpc & 0x7);
    9274:	e0bff617 	ldw	r2,-40(fp)
    9278:	10c00d04 	addi	r3,r2,52
    927c:	e0bffd17 	ldw	r2,-12(fp)
    9280:	108001cc 	andi	r2,r2,7
    9284:	100f883a 	mov	r7,r2
    9288:	018001c4 	movi	r6,7
    928c:	01404144 	movi	r5,261
    9290:	1809883a 	mov	r4,r3
    9294:	000b5cc0 	call	b5cc <pll_update>

	pll_update(&(core->dev.atx_pll), 0x107, 0x0c, n << 2);
    9298:	e0bff617 	ldw	r2,-40(fp)
    929c:	10c00d04 	addi	r3,r2,52
    92a0:	e0bffa17 	ldw	r2,-24(fp)
    92a4:	100490ba 	slli	r2,r2,2
    92a8:	100f883a 	mov	r7,r2
    92ac:	01800304 	movi	r6,12
    92b0:	014041c4 	movi	r5,263
    92b4:	1809883a 	mov	r4,r3
    92b8:	000b5cc0 	call	b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x108, 0x07, l);
    92bc:	e0bff617 	ldw	r2,-40(fp)
    92c0:	10800d04 	addi	r2,r2,52
    92c4:	e0fff817 	ldw	r3,-32(fp)
    92c8:	180f883a 	mov	r7,r3
    92cc:	018001c4 	movi	r6,7
    92d0:	01404204 	movi	r5,264
    92d4:	1009883a 	mov	r4,r2
    92d8:	000b5cc0 	call	b5cc <pll_update>
	a10_pll_write(&(core->dev.atx_pll), 0x109, m);
    92dc:	e0bff617 	ldw	r2,-40(fp)
    92e0:	10800d04 	addi	r2,r2,52
    92e4:	e0fff917 	ldw	r3,-28(fp)
    92e8:	180d883a 	mov	r6,r3
    92ec:	01404244 	movi	r5,265
    92f0:	1009883a 	mov	r4,r2
    92f4:	000b5780 	call	b578 <a10_pll_write>

	pll_update(&(core->dev.atx_pll), XCVR_REG_CALIB_PLL_EN,
    92f8:	e0bff617 	ldw	r2,-40(fp)
    92fc:	10800d04 	addi	r2,r2,52
    9300:	01c00044 	movi	r7,1
    9304:	01800044 	movi	r6,1
    9308:	01404004 	movi	r5,256
    930c:	1009883a 	mov	r4,r2
    9310:	000b5cc0 	call	b5cc <pll_update>
		XCVR_CALIB_PLL_EN_MASK, XCVR_CALIB_PLL_EN);

	altera_a10_release_arbitration(&(core->dev.atx_pll), TRUE);
    9314:	e0bff617 	ldw	r2,-40(fp)
    9318:	10800d04 	addi	r2,r2,52
    931c:	01400044 	movi	r5,1
    9320:	1009883a 	mov	r4,r2
    9324:	000b7380 	call	b738 <altera_a10_release_arbitration>

	pll_calibration_check(&(core->dev.atx_pll));
    9328:	e0bff617 	ldw	r2,-40(fp)
    932c:	10800d04 	addi	r2,r2,52
    9330:	1009883a 	mov	r4,r2
    9334:	000b7900 	call	b790 <pll_calibration_check>

	core->dev.atx_pll.initial_recalc = FALSE;
    9338:	e0bff617 	ldw	r2,-40(fp)
    933c:	10000f05 	stb	zero,60(r2)

	return 0;
    9340:	0005883a 	mov	r2,zero
}
    9344:	e037883a 	mov	sp,fp
    9348:	dfc00117 	ldw	ra,4(sp)
    934c:	df000017 	ldw	fp,0(sp)
    9350:	dec00204 	addi	sp,sp,8
    9354:	f800283a 	ret

00009358 <atx_pll_recalc_rate>:
/*******************************************************************************
* @brief atx_pll_recalc_rate
*******************************************************************************/
uint32_t atx_pll_recalc_rate(xcvr_core *core,
	uint32_t fref_khz)
{
    9358:	defff404 	addi	sp,sp,-48
    935c:	dfc00b15 	stw	ra,44(sp)
    9360:	df000a15 	stw	fp,40(sp)
    9364:	dc400915 	stw	r17,36(sp)
    9368:	dc000815 	stw	r16,32(sp)
    936c:	df000a04 	addi	fp,sp,40
    9370:	e13ff715 	stw	r4,-36(fp)
    9374:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, l;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
    9378:	e0bff717 	ldw	r2,-36(fp)
    937c:	10800d04 	addi	r2,r2,52
    9380:	1009883a 	mov	r4,r2
    9384:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

	a10_pll_read(&(core->dev.atx_pll), 0x107, &div0);
    9388:	e0bff717 	ldw	r2,-36(fp)
    938c:	10800d04 	addi	r2,r2,52
    9390:	e0fff904 	addi	r3,fp,-28
    9394:	180d883a 	mov	r6,r3
    9398:	014041c4 	movi	r5,263
    939c:	1009883a 	mov	r4,r2
    93a0:	000b5200 	call	b520 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x108, &div1);
    93a4:	e0bff717 	ldw	r2,-36(fp)
    93a8:	10800d04 	addi	r2,r2,52
    93ac:	e0fff804 	addi	r3,fp,-32
    93b0:	180d883a 	mov	r6,r3
    93b4:	01404204 	movi	r5,264
    93b8:	1009883a 	mov	r4,r2
    93bc:	000b5200 	call	b520 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x109, &m);
    93c0:	e0bff717 	ldw	r2,-36(fp)
    93c4:	10800d04 	addi	r2,r2,52
    93c8:	e0fffa04 	addi	r3,fp,-24
    93cc:	180d883a 	mov	r6,r3
    93d0:	01404244 	movi	r5,265
    93d4:	1009883a 	mov	r4,r2
    93d8:	000b5200 	call	b520 <a10_pll_read>

	altera_a10_release_arbitration(&(core->dev.atx_pll), FALSE);
    93dc:	e0bff717 	ldw	r2,-36(fp)
    93e0:	10800d04 	addi	r2,r2,52
    93e4:	000b883a 	mov	r5,zero
    93e8:	1009883a 	mov	r4,r2
    93ec:	000b7380 	call	b738 <altera_a10_release_arbitration>

	n = 1 << ((div0 >> 2) & 0x3);
    93f0:	e0bff917 	ldw	r2,-28(fp)
    93f4:	1004d0ba 	srli	r2,r2,2
    93f8:	108000cc 	andi	r2,r2,3
    93fc:	00c00044 	movi	r3,1
    9400:	1884983a 	sll	r2,r3,r2
    9404:	e0bffd15 	stw	r2,-12(fp)
	l = 1 << (div1 & 0x7);
    9408:	e0bff817 	ldw	r2,-32(fp)
    940c:	108001cc 	andi	r2,r2,7
    9410:	00c00044 	movi	r3,1
    9414:	1884983a 	sll	r2,r3,r2
    9418:	e0bffc15 	stw	r2,-16(fp)

	tmp = (uint32_t)fref_khz * m;
    941c:	e0bffa17 	ldw	r2,-24(fp)
    9420:	e0fff617 	ldw	r3,-40(fp)
    9424:	1885383a 	mul	r2,r3,r2
    9428:	e0bffb15 	stw	r2,-20(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l*n/2);
    942c:	e13ffb17 	ldw	r4,-20(fp)
    9430:	000fa300 	call	fa30 <__floatunsidf>
    9434:	1021883a 	mov	r16,r2
    9438:	1823883a 	mov	r17,r3
    943c:	e0fffc17 	ldw	r3,-16(fp)
    9440:	e0bffd17 	ldw	r2,-12(fp)
    9444:	1885383a 	mul	r2,r3,r2
    9448:	1004d07a 	srli	r2,r2,1
    944c:	1009883a 	mov	r4,r2
    9450:	000fa300 	call	fa30 <__floatunsidf>
    9454:	1009883a 	mov	r4,r2
    9458:	180b883a 	mov	r5,r3
    945c:	200d883a 	mov	r6,r4
    9460:	280f883a 	mov	r7,r5
    9464:	8009883a 	mov	r4,r16
    9468:	880b883a 	mov	r5,r17
    946c:	000e0540 	call	e054 <__divdf3>
    9470:	1009883a 	mov	r4,r2
    9474:	180b883a 	mov	r5,r3
    9478:	2005883a 	mov	r2,r4
    947c:	2807883a 	mov	r3,r5
    9480:	000d883a 	mov	r6,zero
    9484:	01cff834 	movhi	r7,16352
    9488:	1009883a 	mov	r4,r2
    948c:	180b883a 	mov	r5,r3
    9490:	000d7940 	call	d794 <__adddf3>
    9494:	1009883a 	mov	r4,r2
    9498:	180b883a 	mov	r5,r3
    949c:	2005883a 	mov	r2,r4
    94a0:	2807883a 	mov	r3,r5
    94a4:	1009883a 	mov	r4,r2
    94a8:	180b883a 	mov	r5,r3
    94ac:	000ca5c0 	call	ca5c <__fixunsdfdi>
    94b0:	1009883a 	mov	r4,r2
    94b4:	180b883a 	mov	r5,r3
    94b8:	e13ffb15 	stw	r4,-20(fp)

	if (tmp != 0 && core->dev.atx_pll.initial_recalc)
    94bc:	e0bffb17 	ldw	r2,-20(fp)
    94c0:	10000826 	beq	r2,zero,94e4 <atx_pll_recalc_rate+0x18c>
    94c4:	e0bff717 	ldw	r2,-36(fp)
    94c8:	10800f03 	ldbu	r2,60(r2)
    94cc:	10803fcc 	andi	r2,r2,255
    94d0:	10000426 	beq	r2,zero,94e4 <atx_pll_recalc_rate+0x18c>
		atx_pll_set_rate(core, tmp, fref_khz);
    94d4:	e1bff617 	ldw	r6,-40(fp)
    94d8:	e17ffb17 	ldw	r5,-20(fp)
    94dc:	e13ff717 	ldw	r4,-36(fp)
    94e0:	00090a40 	call	90a4 <atx_pll_set_rate>

	return min_t(uint32_t, tmp * 2, ULONG_MAX);
    94e4:	e0bffb17 	ldw	r2,-20(fp)
    94e8:	1085883a 	add	r2,r2,r2
}
    94ec:	e6fffe04 	addi	sp,fp,-8
    94f0:	dfc00317 	ldw	ra,12(sp)
    94f4:	df000217 	ldw	fp,8(sp)
    94f8:	dc400117 	ldw	r17,4(sp)
    94fc:	dc000017 	ldw	r16,0(sp)
    9500:	dec00404 	addi	sp,sp,16
    9504:	f800283a 	ret

00009508 <fpll_lookup_lf_resistance>:
/*******************************************************************************
* @brief fpll_lookup_lf_resistance
*******************************************************************************/
uint32_t fpll_lookup_lf_resistance(uint32_t fvco,
	uint32_t m)
{
    9508:	defffd04 	addi	sp,sp,-12
    950c:	df000215 	stw	fp,8(sp)
    9510:	df000204 	addi	fp,sp,8
    9514:	e13fff15 	stw	r4,-4(fp)
    9518:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
    951c:	e0ffff17 	ldw	r3,-4(fp)
    9520:	00802274 	movhi	r2,137
    9524:	10950fc4 	addi	r2,r2,21567
    9528:	10c01136 	bltu	r2,r3,9570 <fpll_lookup_lf_resistance+0x68>
		switch (m) {
    952c:	e0bffe17 	ldw	r2,-8(fp)
    9530:	10c00828 	cmpgeui	r3,r2,32
    9534:	1800031e 	bne	r3,zero,9544 <fpll_lookup_lf_resistance+0x3c>
    9538:	10800428 	cmpgeui	r2,r2,16
    953c:	1000061e 	bne	r2,zero,9558 <fpll_lookup_lf_resistance+0x50>
    9540:	00000306 	br	9550 <fpll_lookup_lf_resistance+0x48>
    9544:	10801228 	cmpgeui	r2,r2,72
    9548:	1000071e 	bne	r2,zero,9568 <fpll_lookup_lf_resistance+0x60>
    954c:	00000406 	br	9560 <fpll_lookup_lf_resistance+0x58>
		case 0 ... 15:
			return 2;
    9550:	00800084 	movi	r2,2
    9554:	00002606 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
    9558:	0005883a 	mov	r2,zero
    955c:	00002406 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
    9560:	00800044 	movi	r2,1
    9564:	00002206 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    9568:	008000c4 	movi	r2,3
    956c:	00002006 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		}
	} else if (fvco < 12000000) {
    9570:	e0ffff17 	ldw	r3,-4(fp)
    9574:	00802df4 	movhi	r2,183
    9578:	1086bfc4 	addi	r2,r2,6911
    957c:	10c01136 	bltu	r2,r3,95c4 <fpll_lookup_lf_resistance+0xbc>
		switch (m) {
    9580:	e0bffe17 	ldw	r2,-8(fp)
    9584:	10c00828 	cmpgeui	r3,r2,32
    9588:	1800031e 	bne	r3,zero,9598 <fpll_lookup_lf_resistance+0x90>
    958c:	10800428 	cmpgeui	r2,r2,16
    9590:	1000061e 	bne	r2,zero,95ac <fpll_lookup_lf_resistance+0xa4>
    9594:	00000306 	br	95a4 <fpll_lookup_lf_resistance+0x9c>
    9598:	10801228 	cmpgeui	r2,r2,72
    959c:	1000071e 	bne	r2,zero,95bc <fpll_lookup_lf_resistance+0xb4>
    95a0:	00000406 	br	95b4 <fpll_lookup_lf_resistance+0xac>
		case 0 ... 15:
			return 2;
    95a4:	00800084 	movi	r2,2
    95a8:	00001106 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
    95ac:	0005883a 	mov	r2,zero
    95b0:	00000f06 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
    95b4:	00800044 	movi	r2,1
    95b8:	00000d06 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    95bc:	008000c4 	movi	r2,3
    95c0:	00000b06 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		}
	} else {
		switch (m) {
    95c4:	e0bffe17 	ldw	r2,-8(fp)
    95c8:	10c00630 	cmpltui	r3,r2,24
    95cc:	1800031e 	bne	r3,zero,95dc <fpll_lookup_lf_resistance+0xd4>
    95d0:	10800e28 	cmpgeui	r2,r2,56
    95d4:	1000051e 	bne	r2,zero,95ec <fpll_lookup_lf_resistance+0xe4>
    95d8:	00000206 	br	95e4 <fpll_lookup_lf_resistance+0xdc>
		case 0 ... 23:
			return 0;
    95dc:	0005883a 	mov	r2,zero
    95e0:	00000306 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		case 24 ... 55:
			return 1;
    95e4:	00800044 	movi	r2,1
    95e8:	00000106 	br	95f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
    95ec:	008000c4 	movi	r2,3
		}
	}
}
    95f0:	e037883a 	mov	sp,fp
    95f4:	df000017 	ldw	fp,0(sp)
    95f8:	dec00104 	addi	sp,sp,4
    95fc:	f800283a 	ret

00009600 <fpll_lookup_cp_current>:
/*******************************************************************************
* @brief fpll_lookup_cp_current
*******************************************************************************/
int32_t fpll_lookup_cp_current(uint32_t fvco,
	uint32_t m)
{
    9600:	defffd04 	addi	sp,sp,-12
    9604:	df000215 	stw	fp,8(sp)
    9608:	df000204 	addi	fp,sp,8
    960c:	e13fff15 	stw	r4,-4(fp)
    9610:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
    9614:	e0ffff17 	ldw	r3,-4(fp)
    9618:	00802274 	movhi	r2,137
    961c:	10950fc4 	addi	r2,r2,21567
    9620:	10c08136 	bltu	r2,r3,9828 <fpll_lookup_cp_current+0x228>
		switch (m) {
    9624:	e0bffe17 	ldw	r2,-8(fp)
    9628:	10801a28 	cmpgeui	r2,r2,104
    962c:	10007c1e 	bne	r2,zero,9820 <fpll_lookup_cp_current+0x220>
    9630:	e0bffe17 	ldw	r2,-8(fp)
    9634:	100690ba 	slli	r3,r2,2
    9638:	00800074 	movhi	r2,1
    963c:	1885883a 	add	r2,r3,r2
    9640:	10a59217 	ldw	r2,-27064(r2)
    9644:	1000683a 	jmp	r2
    9648:	000097e8 	cmpgeui	zero,zero,607
    964c:	000097e8 	cmpgeui	zero,zero,607
    9650:	000097e8 	cmpgeui	zero,zero,607
    9654:	000097e8 	cmpgeui	zero,zero,607
    9658:	000097e8 	cmpgeui	zero,zero,607
    965c:	000097e8 	cmpgeui	zero,zero,607
    9660:	000097e8 	cmpgeui	zero,zero,607
    9664:	000097e8 	cmpgeui	zero,zero,607
    9668:	000097e8 	cmpgeui	zero,zero,607
    966c:	000097e8 	cmpgeui	zero,zero,607
    9670:	000097e8 	cmpgeui	zero,zero,607
    9674:	000097e8 	cmpgeui	zero,zero,607
    9678:	000097e8 	cmpgeui	zero,zero,607
    967c:	000097e8 	cmpgeui	zero,zero,607
    9680:	000097e8 	cmpgeui	zero,zero,607
    9684:	000097e8 	cmpgeui	zero,zero,607
    9688:	000097f0 	cmpltui	zero,zero,607
    968c:	000097f0 	cmpltui	zero,zero,607
    9690:	000097f0 	cmpltui	zero,zero,607
    9694:	000097f0 	cmpltui	zero,zero,607
    9698:	000097f0 	cmpltui	zero,zero,607
    969c:	000097f0 	cmpltui	zero,zero,607
    96a0:	000097f0 	cmpltui	zero,zero,607
    96a4:	000097f0 	cmpltui	zero,zero,607
    96a8:	000097f8 	rdprs	zero,zero,607
    96ac:	000097f8 	rdprs	zero,zero,607
    96b0:	000097f8 	rdprs	zero,zero,607
    96b4:	000097f8 	rdprs	zero,zero,607
    96b8:	000097f8 	rdprs	zero,zero,607
    96bc:	000097f8 	rdprs	zero,zero,607
    96c0:	000097f8 	rdprs	zero,zero,607
    96c4:	000097f8 	rdprs	zero,zero,607
    96c8:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96cc:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96d0:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96d4:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96d8:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96dc:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96e0:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96e4:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96e8:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96ec:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96f0:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96f4:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96f8:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    96fc:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    9700:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    9704:	00009800 	call	980 <ad9144_pll_setup+0x18c>
    9708:	00009808 	cmpgei	zero,zero,608
    970c:	00009808 	cmpgei	zero,zero,608
    9710:	00009808 	cmpgei	zero,zero,608
    9714:	00009808 	cmpgei	zero,zero,608
    9718:	00009808 	cmpgei	zero,zero,608
    971c:	00009808 	cmpgei	zero,zero,608
    9720:	00009808 	cmpgei	zero,zero,608
    9724:	00009808 	cmpgei	zero,zero,608
    9728:	00009810 	cmplti	zero,zero,608
    972c:	00009810 	cmplti	zero,zero,608
    9730:	00009810 	cmplti	zero,zero,608
    9734:	00009810 	cmplti	zero,zero,608
    9738:	00009810 	cmplti	zero,zero,608
    973c:	00009810 	cmplti	zero,zero,608
    9740:	00009810 	cmplti	zero,zero,608
    9744:	00009810 	cmplti	zero,zero,608
    9748:	00009810 	cmplti	zero,zero,608
    974c:	00009810 	cmplti	zero,zero,608
    9750:	00009810 	cmplti	zero,zero,608
    9754:	00009810 	cmplti	zero,zero,608
    9758:	00009810 	cmplti	zero,zero,608
    975c:	00009810 	cmplti	zero,zero,608
    9760:	00009810 	cmplti	zero,zero,608
    9764:	00009810 	cmplti	zero,zero,608
    9768:	00009818 	cmpnei	zero,zero,608
    976c:	00009818 	cmpnei	zero,zero,608
    9770:	00009818 	cmpnei	zero,zero,608
    9774:	00009818 	cmpnei	zero,zero,608
    9778:	00009818 	cmpnei	zero,zero,608
    977c:	00009818 	cmpnei	zero,zero,608
    9780:	00009818 	cmpnei	zero,zero,608
    9784:	00009818 	cmpnei	zero,zero,608
    9788:	00009818 	cmpnei	zero,zero,608
    978c:	00009818 	cmpnei	zero,zero,608
    9790:	00009818 	cmpnei	zero,zero,608
    9794:	00009818 	cmpnei	zero,zero,608
    9798:	00009818 	cmpnei	zero,zero,608
    979c:	00009818 	cmpnei	zero,zero,608
    97a0:	00009818 	cmpnei	zero,zero,608
    97a4:	00009818 	cmpnei	zero,zero,608
    97a8:	00009818 	cmpnei	zero,zero,608
    97ac:	00009818 	cmpnei	zero,zero,608
    97b0:	00009818 	cmpnei	zero,zero,608
    97b4:	00009818 	cmpnei	zero,zero,608
    97b8:	00009818 	cmpnei	zero,zero,608
    97bc:	00009818 	cmpnei	zero,zero,608
    97c0:	00009818 	cmpnei	zero,zero,608
    97c4:	00009818 	cmpnei	zero,zero,608
    97c8:	00009818 	cmpnei	zero,zero,608
    97cc:	00009818 	cmpnei	zero,zero,608
    97d0:	00009818 	cmpnei	zero,zero,608
    97d4:	00009818 	cmpnei	zero,zero,608
    97d8:	00009818 	cmpnei	zero,zero,608
    97dc:	00009818 	cmpnei	zero,zero,608
    97e0:	00009818 	cmpnei	zero,zero,608
    97e4:	00009818 	cmpnei	zero,zero,608
		case 0 ... 15:
			return 29;
    97e8:	00800744 	movi	r2,29
    97ec:	0000d706 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 28;
    97f0:	00800704 	movi	r2,28
    97f4:	0000d506 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 29;
    97f8:	00800744 	movi	r2,29
    97fc:	0000d306 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 32 ... 47:
			return 28;
    9800:	00800704 	movi	r2,28
    9804:	0000d106 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 48 ... 55:
			return 29;
    9808:	00800744 	movi	r2,29
    980c:	0000cf06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 71:
			return 36;
    9810:	00800904 	movi	r2,36
    9814:	0000cd06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 72 ... 103:
			return 29;
    9818:	00800744 	movi	r2,29
    981c:	0000cb06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    9820:	00800904 	movi	r2,36
    9824:	0000c906 	br	9b4c <fpll_lookup_cp_current+0x54c>
		}
	} else if (fvco < 12000000) {
    9828:	e0ffff17 	ldw	r3,-4(fp)
    982c:	00802df4 	movhi	r2,183
    9830:	1086bfc4 	addi	r2,r2,6911
    9834:	10c07136 	bltu	r2,r3,99fc <fpll_lookup_cp_current+0x3fc>
		switch (m) {
    9838:	e0bffe17 	ldw	r2,-8(fp)
    983c:	10801628 	cmpgeui	r2,r2,88
    9840:	10006c1e 	bne	r2,zero,99f4 <fpll_lookup_cp_current+0x3f4>
    9844:	e0bffe17 	ldw	r2,-8(fp)
    9848:	100690ba 	slli	r3,r2,2
    984c:	00800074 	movhi	r2,1
    9850:	1885883a 	add	r2,r3,r2
    9854:	10a61717 	ldw	r2,-26532(r2)
    9858:	1000683a 	jmp	r2
    985c:	000099bc 	xorhi	zero,zero,614
    9860:	000099bc 	xorhi	zero,zero,614
    9864:	000099bc 	xorhi	zero,zero,614
    9868:	000099bc 	xorhi	zero,zero,614
    986c:	000099bc 	xorhi	zero,zero,614
    9870:	000099bc 	xorhi	zero,zero,614
    9874:	000099bc 	xorhi	zero,zero,614
    9878:	000099bc 	xorhi	zero,zero,614
    987c:	000099bc 	xorhi	zero,zero,614
    9880:	000099bc 	xorhi	zero,zero,614
    9884:	000099bc 	xorhi	zero,zero,614
    9888:	000099bc 	xorhi	zero,zero,614
    988c:	000099bc 	xorhi	zero,zero,614
    9890:	000099bc 	xorhi	zero,zero,614
    9894:	000099bc 	xorhi	zero,zero,614
    9898:	000099bc 	xorhi	zero,zero,614
    989c:	000099c4 	movi	zero,615
    98a0:	000099c4 	movi	zero,615
    98a4:	000099c4 	movi	zero,615
    98a8:	000099c4 	movi	zero,615
    98ac:	000099c4 	movi	zero,615
    98b0:	000099c4 	movi	zero,615
    98b4:	000099c4 	movi	zero,615
    98b8:	000099c4 	movi	zero,615
    98bc:	000099cc 	andi	zero,zero,615
    98c0:	000099cc 	andi	zero,zero,615
    98c4:	000099cc 	andi	zero,zero,615
    98c8:	000099cc 	andi	zero,zero,615
    98cc:	000099cc 	andi	zero,zero,615
    98d0:	000099cc 	andi	zero,zero,615
    98d4:	000099cc 	andi	zero,zero,615
    98d8:	000099cc 	andi	zero,zero,615
    98dc:	000099d4 	movui	zero,615
    98e0:	000099d4 	movui	zero,615
    98e4:	000099d4 	movui	zero,615
    98e8:	000099d4 	movui	zero,615
    98ec:	000099d4 	movui	zero,615
    98f0:	000099d4 	movui	zero,615
    98f4:	000099d4 	movui	zero,615
    98f8:	000099d4 	movui	zero,615
    98fc:	000099dc 	xori	zero,zero,615
    9900:	000099dc 	xori	zero,zero,615
    9904:	000099dc 	xori	zero,zero,615
    9908:	000099dc 	xori	zero,zero,615
    990c:	000099dc 	xori	zero,zero,615
    9910:	000099dc 	xori	zero,zero,615
    9914:	000099dc 	xori	zero,zero,615
    9918:	000099dc 	xori	zero,zero,615
    991c:	000099dc 	xori	zero,zero,615
    9920:	000099dc 	xori	zero,zero,615
    9924:	000099dc 	xori	zero,zero,615
    9928:	000099dc 	xori	zero,zero,615
    992c:	000099dc 	xori	zero,zero,615
    9930:	000099dc 	xori	zero,zero,615
    9934:	000099dc 	xori	zero,zero,615
    9938:	000099dc 	xori	zero,zero,615
    993c:	000099e4 	muli	zero,zero,615
    9940:	000099e4 	muli	zero,zero,615
    9944:	000099e4 	muli	zero,zero,615
    9948:	000099e4 	muli	zero,zero,615
    994c:	000099e4 	muli	zero,zero,615
    9950:	000099e4 	muli	zero,zero,615
    9954:	000099e4 	muli	zero,zero,615
    9958:	000099e4 	muli	zero,zero,615
    995c:	000099e4 	muli	zero,zero,615
    9960:	000099e4 	muli	zero,zero,615
    9964:	000099e4 	muli	zero,zero,615
    9968:	000099e4 	muli	zero,zero,615
    996c:	000099e4 	muli	zero,zero,615
    9970:	000099e4 	muli	zero,zero,615
    9974:	000099e4 	muli	zero,zero,615
    9978:	000099e4 	muli	zero,zero,615
    997c:	000099e4 	muli	zero,zero,615
    9980:	000099e4 	muli	zero,zero,615
    9984:	000099e4 	muli	zero,zero,615
    9988:	000099e4 	muli	zero,zero,615
    998c:	000099e4 	muli	zero,zero,615
    9990:	000099e4 	muli	zero,zero,615
    9994:	000099e4 	muli	zero,zero,615
    9998:	000099e4 	muli	zero,zero,615
    999c:	000099ec 	andhi	zero,zero,615
    99a0:	000099ec 	andhi	zero,zero,615
    99a4:	000099ec 	andhi	zero,zero,615
    99a8:	000099ec 	andhi	zero,zero,615
    99ac:	000099ec 	andhi	zero,zero,615
    99b0:	000099ec 	andhi	zero,zero,615
    99b4:	000099ec 	andhi	zero,zero,615
    99b8:	000099ec 	andhi	zero,zero,615
		case 0 ... 15:
			return 36;
    99bc:	00800904 	movi	r2,36
    99c0:	00006206 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 29;
    99c4:	00800744 	movi	r2,29
    99c8:	00006006 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 36;
    99cc:	00800904 	movi	r2,36
    99d0:	00005e06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 32 ... 39:
			return 28;
    99d4:	00800704 	movi	r2,28
    99d8:	00005c06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 29;
    99dc:	00800744 	movi	r2,29
    99e0:	00005a06 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 79:
			return 36;
    99e4:	00800904 	movi	r2,36
    99e8:	00005806 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 80 ... 87:
			return 29;
    99ec:	00800744 	movi	r2,29
    99f0:	00005606 	br	9b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    99f4:	00800904 	movi	r2,36
    99f8:	00005406 	br	9b4c <fpll_lookup_cp_current+0x54c>
		}
	} else {
		switch (m) {
    99fc:	e0bffe17 	ldw	r2,-8(fp)
    9a00:	10801028 	cmpgeui	r2,r2,64
    9a04:	1000501e 	bne	r2,zero,9b48 <fpll_lookup_cp_current+0x548>
    9a08:	e0bffe17 	ldw	r2,-8(fp)
    9a0c:	100690ba 	slli	r3,r2,2
    9a10:	00800074 	movhi	r2,1
    9a14:	1885883a 	add	r2,r3,r2
    9a18:	10a68817 	ldw	r2,-26080(r2)
    9a1c:	1000683a 	jmp	r2
    9a20:	00009b20 	cmpeqi	zero,zero,620
    9a24:	00009b20 	cmpeqi	zero,zero,620
    9a28:	00009b20 	cmpeqi	zero,zero,620
    9a2c:	00009b20 	cmpeqi	zero,zero,620
    9a30:	00009b20 	cmpeqi	zero,zero,620
    9a34:	00009b20 	cmpeqi	zero,zero,620
    9a38:	00009b20 	cmpeqi	zero,zero,620
    9a3c:	00009b20 	cmpeqi	zero,zero,620
    9a40:	00009b20 	cmpeqi	zero,zero,620
    9a44:	00009b20 	cmpeqi	zero,zero,620
    9a48:	00009b20 	cmpeqi	zero,zero,620
    9a4c:	00009b20 	cmpeqi	zero,zero,620
    9a50:	00009b20 	cmpeqi	zero,zero,620
    9a54:	00009b20 	cmpeqi	zero,zero,620
    9a58:	00009b20 	cmpeqi	zero,zero,620
    9a5c:	00009b20 	cmpeqi	zero,zero,620
    9a60:	00009b28 	cmpgeui	zero,zero,620
    9a64:	00009b28 	cmpgeui	zero,zero,620
    9a68:	00009b28 	cmpgeui	zero,zero,620
    9a6c:	00009b28 	cmpgeui	zero,zero,620
    9a70:	00009b28 	cmpgeui	zero,zero,620
    9a74:	00009b28 	cmpgeui	zero,zero,620
    9a78:	00009b28 	cmpgeui	zero,zero,620
    9a7c:	00009b28 	cmpgeui	zero,zero,620
    9a80:	00009b30 	cmpltui	zero,zero,620
    9a84:	00009b30 	cmpltui	zero,zero,620
    9a88:	00009b30 	cmpltui	zero,zero,620
    9a8c:	00009b30 	cmpltui	zero,zero,620
    9a90:	00009b30 	cmpltui	zero,zero,620
    9a94:	00009b30 	cmpltui	zero,zero,620
    9a98:	00009b30 	cmpltui	zero,zero,620
    9a9c:	00009b30 	cmpltui	zero,zero,620
    9aa0:	00009b30 	cmpltui	zero,zero,620
    9aa4:	00009b30 	cmpltui	zero,zero,620
    9aa8:	00009b30 	cmpltui	zero,zero,620
    9aac:	00009b30 	cmpltui	zero,zero,620
    9ab0:	00009b30 	cmpltui	zero,zero,620
    9ab4:	00009b30 	cmpltui	zero,zero,620
    9ab8:	00009b30 	cmpltui	zero,zero,620
    9abc:	00009b30 	cmpltui	zero,zero,620
    9ac0:	00009b38 	rdprs	zero,zero,620
    9ac4:	00009b38 	rdprs	zero,zero,620
    9ac8:	00009b38 	rdprs	zero,zero,620
    9acc:	00009b38 	rdprs	zero,zero,620
    9ad0:	00009b38 	rdprs	zero,zero,620
    9ad4:	00009b38 	rdprs	zero,zero,620
    9ad8:	00009b38 	rdprs	zero,zero,620
    9adc:	00009b38 	rdprs	zero,zero,620
    9ae0:	00009b38 	rdprs	zero,zero,620
    9ae4:	00009b38 	rdprs	zero,zero,620
    9ae8:	00009b38 	rdprs	zero,zero,620
    9aec:	00009b38 	rdprs	zero,zero,620
    9af0:	00009b38 	rdprs	zero,zero,620
    9af4:	00009b38 	rdprs	zero,zero,620
    9af8:	00009b38 	rdprs	zero,zero,620
    9afc:	00009b38 	rdprs	zero,zero,620
    9b00:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b04:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b08:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b0c:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b10:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b14:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b18:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
    9b1c:	00009b40 	call	9b4 <ad9144_pll_setup+0x1c0>
		case 0 ... 15:
			return 28;
    9b20:	00800704 	movi	r2,28
    9b24:	00000906 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 36;
    9b28:	00800904 	movi	r2,36
    9b2c:	00000706 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 39:
			return 29;
    9b30:	00800744 	movi	r2,29
    9b34:	00000506 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 36;
    9b38:	00800904 	movi	r2,36
    9b3c:	00000306 	br	9b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 63:
			return 29;
    9b40:	00800744 	movi	r2,29
    9b44:	00000106 	br	9b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
    9b48:	00800904 	movi	r2,36
		}
	}
}
    9b4c:	e037883a 	mov	sp,fp
    9b50:	df000017 	ldw	fp,0(sp)
    9b54:	dec00104 	addi	sp,sp,4
    9b58:	f800283a 	ret

00009b5c <fpll_calc_params>:
* @brief fpll_calc_params
*******************************************************************************/
int32_t fpll_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_c0, uint32_t *best_fvco)
{
    9b5c:	deffec04 	addi	sp,sp,-80
    9b60:	dfc01315 	stw	ra,76(sp)
    9b64:	df001215 	stw	fp,72(sp)
    9b68:	dc401115 	stw	r17,68(sp)
    9b6c:	dc001015 	stw	r16,64(sp)
    9b70:	df001204 	addi	fp,sp,72
    9b74:	e13ff115 	stw	r4,-60(fp)
    9b78:	e17ff015 	stw	r5,-64(fp)
    9b7c:	e1bfef15 	stw	r6,-68(fp)
    9b80:	e1ffee15 	stw	r7,-72(fp)
	uint32_t n, n_min, n_max, _n_min, _n_max;
	uint32_t m, m_min, m_max;
	uint32_t c0;
	uint32_t f, fvco, best_f;

	*best_n = *best_m = *best_c0 = *best_fvco = 0;
    9b84:	e0800317 	ldw	r2,12(fp)
    9b88:	10000015 	stw	zero,0(r2)
    9b8c:	e0800317 	ldw	r2,12(fp)
    9b90:	10c00017 	ldw	r3,0(r2)
    9b94:	e0800217 	ldw	r2,8(fp)
    9b98:	10c00015 	stw	r3,0(r2)
    9b9c:	e0800217 	ldw	r2,8(fp)
    9ba0:	10c00017 	ldw	r3,0(r2)
    9ba4:	e0bfee17 	ldw	r2,-72(fp)
    9ba8:	10c00015 	stw	r3,0(r2)
    9bac:	e0bfee17 	ldw	r2,-72(fp)
    9bb0:	10c00017 	ldw	r3,0(r2)
    9bb4:	e0bfef17 	ldw	r2,-68(fp)
    9bb8:	10c00015 	stw	r3,0(r2)

	best_f = ULONG_MAX;
    9bbc:	00bfffc4 	movi	r2,-1
    9bc0:	e0bffb15 	stw	r2,-20(fp)

	n_min = max_t(uint32_t, DIV_ROUND_UP(fref_khz, A10_FPLL_PFD_MAX), 1);
    9bc4:	e0fff117 	ldw	r3,-60(fp)
    9bc8:	00ba97d4 	movui	r2,59999
    9bcc:	1887883a 	add	r3,r3,r2
    9bd0:	008000b4 	movhi	r2,2
    9bd4:	10b52fc4 	addi	r2,r2,-11073
    9bd8:	10c0062e 	bgeu	r2,r3,9bf4 <fpll_calc_params+0x98>
    9bdc:	e0fff117 	ldw	r3,-60(fp)
    9be0:	00ba97d4 	movui	r2,59999
    9be4:	1887883a 	add	r3,r3,r2
    9be8:	00ba9814 	movui	r2,60000
    9bec:	1885203a 	divu	r2,r3,r2
    9bf0:	00000106 	br	9bf8 <fpll_calc_params+0x9c>
    9bf4:	00800044 	movi	r2,1
    9bf8:	e0bffa15 	stw	r2,-24(fp)
	n_max = min_t(uint32_t, fref_khz / A10_FPLL_PFD_MIN, 31);
    9bfc:	e0fff117 	ldw	r3,-60(fp)
    9c00:	00800334 	movhi	r2,12
    9c04:	10b4d5c4 	addi	r2,r2,-11433
    9c08:	10c00436 	bltu	r2,r3,9c1c <fpll_calc_params+0xc0>
    9c0c:	e0fff117 	ldw	r3,-60(fp)
    9c10:	00986a04 	movi	r2,25000
    9c14:	1885203a 	divu	r2,r3,r2
    9c18:	00000106 	br	9c20 <fpll_calc_params+0xc4>
    9c1c:	008007c4 	movi	r2,31
    9c20:	e0bff915 	stw	r2,-28(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_FPLL_VCO_MIN / 2, fref_khz) * n_min, 8);
    9c24:	e0fff117 	ldw	r3,-60(fp)
    9c28:	00800974 	movhi	r2,37
    9c2c:	10a7bfc4 	addi	r2,r2,-24833
    9c30:	1887883a 	add	r3,r3,r2
    9c34:	e0bff117 	ldw	r2,-60(fp)
    9c38:	1887203a 	divu	r3,r3,r2
    9c3c:	e0bffa17 	ldw	r2,-24(fp)
    9c40:	1885383a 	mul	r2,r3,r2
    9c44:	10c00228 	cmpgeui	r3,r2,8
    9c48:	1800011e 	bne	r3,zero,9c50 <fpll_calc_params+0xf4>
    9c4c:	00800204 	movi	r2,8
    9c50:	e0bff815 	stw	r2,-32(fp)
	m_max = min_t(uint32_t, A10_FPLL_VCO_MAX / 2 * n_max / fref_khz, 127);
    9c54:	e0fff917 	ldw	r3,-28(fp)
    9c58:	00801af4 	movhi	r2,107
    9c5c:	10802504 	addi	r2,r2,148
    9c60:	1887383a 	mul	r3,r3,r2
    9c64:	e0bff117 	ldw	r2,-60(fp)
    9c68:	1885203a 	divu	r2,r3,r2
    9c6c:	10c02030 	cmpltui	r3,r2,128
    9c70:	1800011e 	bne	r3,zero,9c78 <fpll_calc_params+0x11c>
    9c74:	00801fc4 	movi	r2,127
    9c78:	e0bff715 	stw	r2,-36(fp)
	m_min = ROUND_UP(m_min, 2);
    9c7c:	e0bff817 	ldw	r2,-32(fp)
    9c80:	10800044 	addi	r2,r2,1
    9c84:	1004d07a 	srli	r2,r2,1
    9c88:	e0bff815 	stw	r2,-32(fp)

	for (m = m_min; m < m_max; m += 1) {
    9c8c:	e0bff817 	ldw	r2,-32(fp)
    9c90:	e0bffc15 	stw	r2,-16(fp)
    9c94:	00007906 	br	9e7c <fpll_calc_params+0x320>
		_n_min = max_t(uint32_t, n_min, DIV_ROUND_UP(fref_khz * m, A10_FPLL_VCO_MAX / 2));
    9c98:	e0fff117 	ldw	r3,-60(fp)
    9c9c:	e0bffc17 	ldw	r2,-16(fp)
    9ca0:	1887383a 	mul	r3,r3,r2
    9ca4:	00801af4 	movhi	r2,107
    9ca8:	108024c4 	addi	r2,r2,147
    9cac:	1887883a 	add	r3,r3,r2
    9cb0:	00801af4 	movhi	r2,107
    9cb4:	10802504 	addi	r2,r2,148
    9cb8:	1887203a 	divu	r3,r3,r2
    9cbc:	e0bffa17 	ldw	r2,-24(fp)
    9cc0:	10c0012e 	bgeu	r2,r3,9cc8 <fpll_calc_params+0x16c>
    9cc4:	1805883a 	mov	r2,r3
    9cc8:	e0bff615 	stw	r2,-40(fp)
		_n_max = min_t(uint32_t, n_max, fref_khz * m / (A10_FPLL_VCO_MIN / 2));
    9ccc:	e0fff117 	ldw	r3,-60(fp)
    9cd0:	e0bffc17 	ldw	r2,-16(fp)
    9cd4:	1887383a 	mul	r3,r3,r2
    9cd8:	00800974 	movhi	r2,37
    9cdc:	10a7c004 	addi	r2,r2,-24832
    9ce0:	1887203a 	divu	r3,r3,r2
    9ce4:	e0bff917 	ldw	r2,-28(fp)
    9ce8:	1880012e 	bgeu	r3,r2,9cf0 <fpll_calc_params+0x194>
    9cec:	1805883a 	mov	r2,r3
    9cf0:	e0bff515 	stw	r2,-44(fp)

		for (n = _n_min; n <= _n_max; n++) {
    9cf4:	e0bff617 	ldw	r2,-40(fp)
    9cf8:	e0bffd15 	stw	r2,-12(fp)
    9cfc:	00005906 	br	9e64 <fpll_calc_params+0x308>
			fvco = fref_khz * m * 2 / n;
    9d00:	e0fff117 	ldw	r3,-60(fp)
    9d04:	e0bffc17 	ldw	r2,-16(fp)
    9d08:	1885383a 	mul	r2,r3,r2
    9d0c:	1085883a 	add	r2,r2,r2
    9d10:	1007883a 	mov	r3,r2
    9d14:	e0bffd17 	ldw	r2,-12(fp)
    9d18:	1885203a 	divu	r2,r3,r2
    9d1c:	e0bff415 	stw	r2,-48(fp)

			c0 = DIV_ROUND_CLOSEST(fvco, fout_khz * 4);
    9d20:	e13ff417 	ldw	r4,-48(fp)
    9d24:	000fa300 	call	fa30 <__floatunsidf>
    9d28:	1021883a 	mov	r16,r2
    9d2c:	1823883a 	mov	r17,r3
    9d30:	e0bff017 	ldw	r2,-64(fp)
    9d34:	100490ba 	slli	r2,r2,2
    9d38:	1009883a 	mov	r4,r2
    9d3c:	000fa300 	call	fa30 <__floatunsidf>
    9d40:	1009883a 	mov	r4,r2
    9d44:	180b883a 	mov	r5,r3
    9d48:	200d883a 	mov	r6,r4
    9d4c:	280f883a 	mov	r7,r5
    9d50:	8009883a 	mov	r4,r16
    9d54:	880b883a 	mov	r5,r17
    9d58:	000e0540 	call	e054 <__divdf3>
    9d5c:	1009883a 	mov	r4,r2
    9d60:	180b883a 	mov	r5,r3
    9d64:	2005883a 	mov	r2,r4
    9d68:	2807883a 	mov	r3,r5
    9d6c:	000d883a 	mov	r6,zero
    9d70:	01cff834 	movhi	r7,16352
    9d74:	1009883a 	mov	r4,r2
    9d78:	180b883a 	mov	r5,r3
    9d7c:	000d7940 	call	d794 <__adddf3>
    9d80:	1009883a 	mov	r4,r2
    9d84:	180b883a 	mov	r5,r3
    9d88:	2005883a 	mov	r2,r4
    9d8c:	2807883a 	mov	r3,r5
    9d90:	1009883a 	mov	r4,r2
    9d94:	180b883a 	mov	r5,r3
    9d98:	000c9e80 	call	c9e8 <__fixunsdfsi>
    9d9c:	e0bff315 	stw	r2,-52(fp)
			c0 = clamp_t(uint32_t, c0, 1, 512);
    9da0:	e0bff317 	ldw	r2,-52(fp)
    9da4:	108000b0 	cmpltui	r2,r2,2
    9da8:	1000051e 	bne	r2,zero,9dc0 <fpll_calc_params+0x264>
    9dac:	e0bff317 	ldw	r2,-52(fp)
    9db0:	10c08070 	cmpltui	r3,r2,513
    9db4:	1800031e 	bne	r3,zero,9dc4 <fpll_calc_params+0x268>
    9db8:	00808004 	movi	r2,512
    9dbc:	00000106 	br	9dc4 <fpll_calc_params+0x268>
    9dc0:	00800044 	movi	r2,1
    9dc4:	e0bff315 	stw	r2,-52(fp)
			f = fvco / (c0 * 4);
    9dc8:	e0bff317 	ldw	r2,-52(fp)
    9dcc:	100490ba 	slli	r2,r2,2
    9dd0:	e0fff417 	ldw	r3,-48(fp)
    9dd4:	1885203a 	divu	r2,r3,r2
    9dd8:	e0bff215 	stw	r2,-56(fp)

			if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
    9ddc:	e0fff217 	ldw	r3,-56(fp)
    9de0:	e0bff017 	ldw	r2,-64(fp)
    9de4:	1885c83a 	sub	r2,r3,r2
    9de8:	1000010e 	bge	r2,zero,9df0 <fpll_calc_params+0x294>
    9dec:	0085c83a 	sub	r2,zero,r2
    9df0:	1009883a 	mov	r4,r2
    9df4:	e0fffb17 	ldw	r3,-20(fp)
    9df8:	e0bff017 	ldw	r2,-64(fp)
    9dfc:	1885c83a 	sub	r2,r3,r2
    9e00:	1000010e 	bge	r2,zero,9e08 <fpll_calc_params+0x2ac>
    9e04:	0085c83a 	sub	r2,zero,r2
    9e08:	2080130e 	bge	r4,r2,9e58 <fpll_calc_params+0x2fc>
				best_f = f;
    9e0c:	e0bff217 	ldw	r2,-56(fp)
    9e10:	e0bffb15 	stw	r2,-20(fp)
				*best_n = n;
    9e14:	e0bfef17 	ldw	r2,-68(fp)
    9e18:	e0fffd17 	ldw	r3,-12(fp)
    9e1c:	10c00015 	stw	r3,0(r2)
				*best_m = m;
    9e20:	e0bfee17 	ldw	r2,-72(fp)
    9e24:	e0fffc17 	ldw	r3,-16(fp)
    9e28:	10c00015 	stw	r3,0(r2)
				*best_c0 = c0;
    9e2c:	e0800217 	ldw	r2,8(fp)
    9e30:	e0fff317 	ldw	r3,-52(fp)
    9e34:	10c00015 	stw	r3,0(r2)
				*best_fvco = fvco;
    9e38:	e0800317 	ldw	r2,12(fp)
    9e3c:	e0fff417 	ldw	r3,-48(fp)
    9e40:	10c00015 	stw	r3,0(r2)
				if (f == fout_khz)
    9e44:	e0fff217 	ldw	r3,-56(fp)
    9e48:	e0bff017 	ldw	r2,-64(fp)
    9e4c:	1880021e 	bne	r3,r2,9e58 <fpll_calc_params+0x2fc>
					return 0;
    9e50:	0005883a 	mov	r2,zero
    9e54:	00000d06 	br	9e8c <fpll_calc_params+0x330>
		for (n = _n_min; n <= _n_max; n++) {
    9e58:	e0bffd17 	ldw	r2,-12(fp)
    9e5c:	10800044 	addi	r2,r2,1
    9e60:	e0bffd15 	stw	r2,-12(fp)
    9e64:	e0bffd17 	ldw	r2,-12(fp)
    9e68:	e0fff517 	ldw	r3,-44(fp)
    9e6c:	18bfa42e 	bgeu	r3,r2,9d00 <__alt_mem_mcu_subsystem_ram_0+0x77fe9d00>
	for (m = m_min; m < m_max; m += 1) {
    9e70:	e0bffc17 	ldw	r2,-16(fp)
    9e74:	10800044 	addi	r2,r2,1
    9e78:	e0bffc15 	stw	r2,-16(fp)
    9e7c:	e0fffc17 	ldw	r3,-16(fp)
    9e80:	e0bff717 	ldw	r2,-36(fp)
    9e84:	18bf8436 	bltu	r3,r2,9c98 <__alt_mem_mcu_subsystem_ram_0+0x77fe9c98>
			}
		}
	}

	return -1;
    9e88:	00bfffc4 	movi	r2,-1
}
    9e8c:	e6fffe04 	addi	sp,fp,-8
    9e90:	dfc00317 	ldw	ra,12(sp)
    9e94:	df000217 	ldw	fp,8(sp)
    9e98:	dc400117 	ldw	r17,4(sp)
    9e9c:	dc000017 	ldw	r16,0(sp)
    9ea0:	dec00404 	addi	sp,sp,16
    9ea4:	f800283a 	ret

00009ea8 <fpll_round_rate>:

/*******************************************************************************
* @brief fpll_round_rate
*******************************************************************************/
uint32_t fpll_round_rate(uint32_t fout_khz, uint32_t fref_khz)
{
    9ea8:	defff304 	addi	sp,sp,-52
    9eac:	dfc00c15 	stw	ra,48(sp)
    9eb0:	df000b15 	stw	fp,44(sp)
    9eb4:	dc400a15 	stw	r17,40(sp)
    9eb8:	dc000915 	stw	r16,36(sp)
    9ebc:	df000b04 	addi	fp,sp,44
    9ec0:	e13ff815 	stw	r4,-32(fp)
    9ec4:	e17ff715 	stw	r5,-36(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t tmp;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
    9ec8:	e13ffb04 	addi	r4,fp,-20
    9ecc:	e0fffc04 	addi	r3,fp,-16
    9ed0:	e0bff904 	addi	r2,fp,-28
    9ed4:	d8800115 	stw	r2,4(sp)
    9ed8:	e0bffa04 	addi	r2,fp,-24
    9edc:	d8800015 	stw	r2,0(sp)
    9ee0:	200f883a 	mov	r7,r4
    9ee4:	180d883a 	mov	r6,r3
    9ee8:	e17ff817 	ldw	r5,-32(fp)
    9eec:	e13ff717 	ldw	r4,-36(fp)
    9ef0:	0009b5c0 	call	9b5c <fpll_calc_params>

	if (n == 0 || m == 0 || c0 == 0)
    9ef4:	e0bffc17 	ldw	r2,-16(fp)
    9ef8:	10000426 	beq	r2,zero,9f0c <fpll_round_rate+0x64>
    9efc:	e0bffb17 	ldw	r2,-20(fp)
    9f00:	10000226 	beq	r2,zero,9f0c <fpll_round_rate+0x64>
    9f04:	e0bffa17 	ldw	r2,-24(fp)
    9f08:	1000021e 	bne	r2,zero,9f14 <fpll_round_rate+0x6c>
		return -1;
    9f0c:	00bfffc4 	movi	r2,-1
    9f10:	00002906 	br	9fb8 <fpll_round_rate+0x110>

	tmp = (uint32_t)fref_khz * m;
    9f14:	e0bffb17 	ldw	r2,-20(fp)
    9f18:	e0fff717 	ldw	r3,-36(fp)
    9f1c:	1885383a 	mul	r2,r3,r2
    9f20:	e0bffd15 	stw	r2,-12(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, c0 * n * 2);
    9f24:	e13ffd17 	ldw	r4,-12(fp)
    9f28:	000fa300 	call	fa30 <__floatunsidf>
    9f2c:	1021883a 	mov	r16,r2
    9f30:	1823883a 	mov	r17,r3
    9f34:	e0fffa17 	ldw	r3,-24(fp)
    9f38:	e0bffc17 	ldw	r2,-16(fp)
    9f3c:	1885383a 	mul	r2,r3,r2
    9f40:	1085883a 	add	r2,r2,r2
    9f44:	1009883a 	mov	r4,r2
    9f48:	000fa300 	call	fa30 <__floatunsidf>
    9f4c:	1009883a 	mov	r4,r2
    9f50:	180b883a 	mov	r5,r3
    9f54:	200d883a 	mov	r6,r4
    9f58:	280f883a 	mov	r7,r5
    9f5c:	8009883a 	mov	r4,r16
    9f60:	880b883a 	mov	r5,r17
    9f64:	000e0540 	call	e054 <__divdf3>
    9f68:	1009883a 	mov	r4,r2
    9f6c:	180b883a 	mov	r5,r3
    9f70:	2005883a 	mov	r2,r4
    9f74:	2807883a 	mov	r3,r5
    9f78:	000d883a 	mov	r6,zero
    9f7c:	01cff834 	movhi	r7,16352
    9f80:	1009883a 	mov	r4,r2
    9f84:	180b883a 	mov	r5,r3
    9f88:	000d7940 	call	d794 <__adddf3>
    9f8c:	1009883a 	mov	r4,r2
    9f90:	180b883a 	mov	r5,r3
    9f94:	2005883a 	mov	r2,r4
    9f98:	2807883a 	mov	r3,r5
    9f9c:	1009883a 	mov	r4,r2
    9fa0:	180b883a 	mov	r5,r3
    9fa4:	000ca5c0 	call	ca5c <__fixunsdfdi>
    9fa8:	1009883a 	mov	r4,r2
    9fac:	180b883a 	mov	r5,r3
    9fb0:	e13ffd15 	stw	r4,-12(fp)

	// fout frequency
	return min_t(uint32_t, tmp, LONG_MAX);
    9fb4:	e0bffd17 	ldw	r2,-12(fp)
}
    9fb8:	e6fffe04 	addi	sp,fp,-8
    9fbc:	dfc00317 	ldw	ra,12(sp)
    9fc0:	df000217 	ldw	fp,8(sp)
    9fc4:	dc400117 	ldw	r17,4(sp)
    9fc8:	dc000017 	ldw	r16,0(sp)
    9fcc:	dec00404 	addi	sp,sp,16
    9fd0:	f800283a 	ret

00009fd4 <fpll_set_rate>:
/*******************************************************************************
* @brief fpll_set_rate
*******************************************************************************/
int32_t fpll_set_rate(xcvr_pll *fpll, uint32_t fout_khz,
	uint32_t fref_khz)
{
    9fd4:	defff104 	addi	sp,sp,-60
    9fd8:	dfc00e15 	stw	ra,56(sp)
    9fdc:	df000d15 	stw	fp,52(sp)
    9fe0:	df000d04 	addi	fp,sp,52
    9fe4:	e13ff715 	stw	r4,-36(fp)
    9fe8:	e17ff615 	stw	r5,-40(fp)
    9fec:	e1bff515 	stw	r6,-44(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t div0, div1;
	uint32_t lfr, cpc;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
    9ff0:	e13ffa04 	addi	r4,fp,-24
    9ff4:	e0fffb04 	addi	r3,fp,-20
    9ff8:	e0bff804 	addi	r2,fp,-32
    9ffc:	d8800115 	stw	r2,4(sp)
    a000:	e0bff904 	addi	r2,fp,-28
    a004:	d8800015 	stw	r2,0(sp)
    a008:	200f883a 	mov	r7,r4
    a00c:	180d883a 	mov	r6,r3
    a010:	e17ff617 	ldw	r5,-40(fp)
    a014:	e13ff517 	ldw	r4,-44(fp)
    a018:	0009b5c0 	call	9b5c <fpll_calc_params>
	printf("\tm: %d\n", m);
	printf("\tc0: %d\n", c0);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || c0 == 0)
    a01c:	e0bffb17 	ldw	r2,-20(fp)
    a020:	10000426 	beq	r2,zero,a034 <fpll_set_rate+0x60>
    a024:	e0bffa17 	ldw	r2,-24(fp)
    a028:	10000226 	beq	r2,zero,a034 <fpll_set_rate+0x60>
    a02c:	e0bff917 	ldw	r2,-28(fp)
    a030:	1000021e 	bne	r2,zero,a03c <fpll_set_rate+0x68>
		return -1;
    a034:	00bfffc4 	movi	r2,-1
    a038:	00005b06 	br	a1a8 <fpll_set_rate+0x1d4>

	lfr = fpll_lookup_lf_resistance(fvco, m);
    a03c:	e0bff817 	ldw	r2,-32(fp)
    a040:	e0fffa17 	ldw	r3,-24(fp)
    a044:	180b883a 	mov	r5,r3
    a048:	1009883a 	mov	r4,r2
    a04c:	00095080 	call	9508 <fpll_lookup_lf_resistance>
    a050:	e0bfff15 	stw	r2,-4(fp)
	cpc = fpll_lookup_cp_current(fvco, m);
    a054:	e0bff817 	ldw	r2,-32(fp)
    a058:	e0fffa17 	ldw	r3,-24(fp)
    a05c:	180b883a 	mov	r5,r3
    a060:	1009883a 	mov	r4,r2
    a064:	00096000 	call	9600 <fpll_lookup_cp_current>
    a068:	e0bffe15 	stw	r2,-8(fp)

	if (c0 >= 512)
    a06c:	e0bff917 	ldw	r2,-28(fp)
    a070:	10808030 	cmpltui	r2,r2,512
    a074:	1000011e 	bne	r2,zero,a07c <fpll_set_rate+0xa8>
		c0 = 0;
    a078:	e03ff915 	stw	zero,-28(fp)

	div0 = m & 0xff;
    a07c:	e0bffa17 	ldw	r2,-24(fp)
    a080:	10803fcc 	andi	r2,r2,255
    a084:	e0bffd15 	stw	r2,-12(fp)
	div1 = ((n << 3) & 0xf8);
    a088:	e0bffb17 	ldw	r2,-20(fp)
    a08c:	100490fa 	slli	r2,r2,3
    a090:	10803fcc 	andi	r2,r2,255
    a094:	e0bffc15 	stw	r2,-16(fp)

	altera_a10_acquire_arbitration(fpll);
    a098:	e13ff717 	ldw	r4,-36(fp)
    a09c:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER0, div0);
    a0a0:	e1bffd17 	ldw	r6,-12(fp)
    a0a4:	01404ac4 	movi	r5,299
    a0a8:	e13ff717 	ldw	r4,-36(fp)
    a0ac:	000b5780 	call	b578 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER1, div1);
    a0b0:	e1bffc17 	ldw	r6,-16(fp)
    a0b4:	01404b04 	movi	r5,300
    a0b8:	e13ff717 	ldw	r4,-36(fp)
    a0bc:	000b5780 	call	b578 <a10_pll_write>

	div0 = c0 & 0xff;
    a0c0:	e0bff917 	ldw	r2,-28(fp)
    a0c4:	10803fcc 	andi	r2,r2,255
    a0c8:	e0bffd15 	stw	r2,-12(fp)
	div1 = (c0 & 0x100) >> 4;
    a0cc:	e0bff917 	ldw	r2,-28(fp)
    a0d0:	1004d13a 	srli	r2,r2,4
    a0d4:	1080040c 	andi	r2,r2,16
    a0d8:	e0bffc15 	stw	r2,-16(fp)

	a10_pll_write(fpll, FPLL_REG_C_COUNTER2, m / 2);
    a0dc:	e0bffa17 	ldw	r2,-24(fp)
    a0e0:	1004d07a 	srli	r2,r2,1
    a0e4:	100d883a 	mov	r6,r2
    a0e8:	014043c4 	movi	r5,271
    a0ec:	e13ff717 	ldw	r4,-36(fp)
    a0f0:	000b5780 	call	b578 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_C_COUNTER3, div0);
    a0f4:	e1bffd17 	ldw	r6,-12(fp)
    a0f8:	01404404 	movi	r5,272
    a0fc:	e13ff717 	ldw	r4,-36(fp)
    a100:	000b5780 	call	b578 <a10_pll_write>
	pll_update(fpll, FPLL_REG_C_COUNTER4, 0x0f, div1);
    a104:	e1fffc17 	ldw	r7,-16(fp)
    a108:	018003c4 	movi	r6,15
    a10c:	01404444 	movi	r5,273
    a110:	e13ff717 	ldw	r4,-36(fp)
    a114:	000b5cc0 	call	b5cc <pll_update>

	pll_update(fpll, 0x133, 0x0c, lfr << 2);
    a118:	e0bfff17 	ldw	r2,-4(fp)
    a11c:	100490ba 	slli	r2,r2,2
    a120:	100f883a 	mov	r7,r2
    a124:	01800304 	movi	r6,12
    a128:	01404cc4 	movi	r5,307
    a12c:	e13ff717 	ldw	r4,-36(fp)
    a130:	000b5cc0 	call	b5cc <pll_update>
	pll_update(fpll, 0x134, 0x70, (cpc & 0x7) << 4);
    a134:	e0bffe17 	ldw	r2,-8(fp)
    a138:	1004913a 	slli	r2,r2,4
    a13c:	10801c0c 	andi	r2,r2,112
    a140:	100f883a 	mov	r7,r2
    a144:	01801c04 	movi	r6,112
    a148:	01404d04 	movi	r5,308
    a14c:	e13ff717 	ldw	r4,-36(fp)
    a150:	000b5cc0 	call	b5cc <pll_update>
	pll_update(fpll, 0x135, 0x07, (cpc & 0x38) >> 3);
    a154:	e0bffe17 	ldw	r2,-8(fp)
    a158:	1004d0fa 	srli	r2,r2,3
    a15c:	108001cc 	andi	r2,r2,7
    a160:	100f883a 	mov	r7,r2
    a164:	018001c4 	movi	r6,7
    a168:	01404d44 	movi	r5,309
    a16c:	e13ff717 	ldw	r4,-36(fp)
    a170:	000b5cc0 	call	b5cc <pll_update>

	pll_update(fpll, 0x100, 0x2, 0x2);
    a174:	01c00084 	movi	r7,2
    a178:	01800084 	movi	r6,2
    a17c:	01404004 	movi	r5,256
    a180:	e13ff717 	ldw	r4,-36(fp)
    a184:	000b5cc0 	call	b5cc <pll_update>
	altera_a10_release_arbitration(fpll, TRUE);
    a188:	01400044 	movi	r5,1
    a18c:	e13ff717 	ldw	r4,-36(fp)
    a190:	000b7380 	call	b738 <altera_a10_release_arbitration>
	pll_calibration_check(fpll);
    a194:	e13ff717 	ldw	r4,-36(fp)
    a198:	000b7900 	call	b790 <pll_calibration_check>

	fpll->initial_recalc = FALSE;
    a19c:	e0bff717 	ldw	r2,-36(fp)
    a1a0:	10000205 	stb	zero,8(r2)

	return 0;
    a1a4:	0005883a 	mov	r2,zero
}
    a1a8:	e037883a 	mov	sp,fp
    a1ac:	dfc00117 	ldw	ra,4(sp)
    a1b0:	df000017 	ldw	fp,0(sp)
    a1b4:	dec00204 	addi	sp,sp,8
    a1b8:	f800283a 	ret

0000a1bc <fpll_recalc_rate>:
/*******************************************************************************
* @brief fpll_recalc_rate
*******************************************************************************/
uint32_t fpll_recalc_rate(xcvr_pll *fpll,
	uint32_t fref_khz)
{
    a1bc:	defff404 	addi	sp,sp,-48
    a1c0:	dfc00b15 	stw	ra,44(sp)
    a1c4:	df000a15 	stw	fp,40(sp)
    a1c8:	dc400915 	stw	r17,36(sp)
    a1cc:	dc000815 	stw	r16,32(sp)
    a1d0:	df000a04 	addi	fp,sp,40
    a1d4:	e13ff715 	stw	r4,-36(fp)
    a1d8:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, c0;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(fpll);
    a1dc:	e13ff717 	ldw	r4,-36(fp)
    a1e0:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER0, &div0);
    a1e4:	e0bff904 	addi	r2,fp,-28
    a1e8:	100d883a 	mov	r6,r2
    a1ec:	01404ac4 	movi	r5,299
    a1f0:	e13ff717 	ldw	r4,-36(fp)
    a1f4:	000b5200 	call	b520 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER1, &div1);
    a1f8:	e0bff804 	addi	r2,fp,-32
    a1fc:	100d883a 	mov	r6,r2
    a200:	01404b04 	movi	r5,300
    a204:	e13ff717 	ldw	r4,-36(fp)
    a208:	000b5200 	call	b520 <a10_pll_read>

	n = (div1 >> 3) & 0x1f;
    a20c:	e0bff817 	ldw	r2,-32(fp)
    a210:	1004d0fa 	srli	r2,r2,3
    a214:	108007cc 	andi	r2,r2,31
    a218:	e0bffc15 	stw	r2,-16(fp)
	m = div0 | ((div1 & 0x1) << 8);
    a21c:	e0bff817 	ldw	r2,-32(fp)
    a220:	1004923a 	slli	r2,r2,8
    a224:	10c0400c 	andi	r3,r2,256
    a228:	e0bff917 	ldw	r2,-28(fp)
    a22c:	1884b03a 	or	r2,r3,r2
    a230:	e0bffd15 	stw	r2,-12(fp)

	if (m == 0)
    a234:	e0bffd17 	ldw	r2,-12(fp)
    a238:	1000021e 	bne	r2,zero,a244 <fpll_recalc_rate+0x88>
		m = 512;
    a23c:	00808004 	movi	r2,512
    a240:	e0bffd15 	stw	r2,-12(fp)

	 a10_pll_read(fpll, FPLL_REG_C_COUNTER3, &div0);
    a244:	e0bff904 	addi	r2,fp,-28
    a248:	100d883a 	mov	r6,r2
    a24c:	01404404 	movi	r5,272
    a250:	e13ff717 	ldw	r4,-36(fp)
    a254:	000b5200 	call	b520 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_C_COUNTER4, &div1);
    a258:	e0bff804 	addi	r2,fp,-32
    a25c:	100d883a 	mov	r6,r2
    a260:	01404444 	movi	r5,273
    a264:	e13ff717 	ldw	r4,-36(fp)
    a268:	000b5200 	call	b520 <a10_pll_read>

	altera_a10_release_arbitration(fpll, FALSE);
    a26c:	000b883a 	mov	r5,zero
    a270:	e13ff717 	ldw	r4,-36(fp)
    a274:	000b7380 	call	b738 <altera_a10_release_arbitration>

	c0 = div0 | ((div1 & 0x8) << 5);
    a278:	e0bff817 	ldw	r2,-32(fp)
    a27c:	1004917a 	slli	r2,r2,5
    a280:	10c0400c 	andi	r3,r2,256
    a284:	e0bff917 	ldw	r2,-28(fp)
    a288:	1884b03a 	or	r2,r3,r2
    a28c:	e0bffb15 	stw	r2,-20(fp)

	if (c0 == 0 || n == 0)
    a290:	e0bffb17 	ldw	r2,-20(fp)
    a294:	10000226 	beq	r2,zero,a2a0 <fpll_recalc_rate+0xe4>
    a298:	e0bffc17 	ldw	r2,-16(fp)
    a29c:	1000021e 	bne	r2,zero,a2a8 <fpll_recalc_rate+0xec>
		return 0;
    a2a0:	0005883a 	mov	r2,zero
    a2a4:	00003106 	br	a36c <fpll_recalc_rate+0x1b0>

	// round rate
	tmp = (uint32_t)fref_khz * m;
    a2a8:	e0fff617 	ldw	r3,-40(fp)
    a2ac:	e0bffd17 	ldw	r2,-12(fp)
    a2b0:	1885383a 	mul	r2,r3,r2
    a2b4:	e0bffa15 	stw	r2,-24(fp)
	tmp = DIV_ROUND_CLOSEST(tmp, c0 * n * 2);
    a2b8:	e13ffa17 	ldw	r4,-24(fp)
    a2bc:	000fa300 	call	fa30 <__floatunsidf>
    a2c0:	1021883a 	mov	r16,r2
    a2c4:	1823883a 	mov	r17,r3
    a2c8:	e0fffb17 	ldw	r3,-20(fp)
    a2cc:	e0bffc17 	ldw	r2,-16(fp)
    a2d0:	1885383a 	mul	r2,r3,r2
    a2d4:	1085883a 	add	r2,r2,r2
    a2d8:	1009883a 	mov	r4,r2
    a2dc:	000fa300 	call	fa30 <__floatunsidf>
    a2e0:	1009883a 	mov	r4,r2
    a2e4:	180b883a 	mov	r5,r3
    a2e8:	200d883a 	mov	r6,r4
    a2ec:	280f883a 	mov	r7,r5
    a2f0:	8009883a 	mov	r4,r16
    a2f4:	880b883a 	mov	r5,r17
    a2f8:	000e0540 	call	e054 <__divdf3>
    a2fc:	1009883a 	mov	r4,r2
    a300:	180b883a 	mov	r5,r3
    a304:	2005883a 	mov	r2,r4
    a308:	2807883a 	mov	r3,r5
    a30c:	000d883a 	mov	r6,zero
    a310:	01cff834 	movhi	r7,16352
    a314:	1009883a 	mov	r4,r2
    a318:	180b883a 	mov	r5,r3
    a31c:	000d7940 	call	d794 <__adddf3>
    a320:	1009883a 	mov	r4,r2
    a324:	180b883a 	mov	r5,r3
    a328:	2005883a 	mov	r2,r4
    a32c:	2807883a 	mov	r3,r5
    a330:	1009883a 	mov	r4,r2
    a334:	180b883a 	mov	r5,r3
    a338:	000c9e80 	call	c9e8 <__fixunsdfsi>
    a33c:	e0bffa15 	stw	r2,-24(fp)

	/*
	 * Recalc configuration in case ref clock is not the same as in the FPGA
	 * project.
	 */
	if (tmp != 0 && fpll->initial_recalc)
    a340:	e0bffa17 	ldw	r2,-24(fp)
    a344:	10000826 	beq	r2,zero,a368 <fpll_recalc_rate+0x1ac>
    a348:	e0bff717 	ldw	r2,-36(fp)
    a34c:	10800203 	ldbu	r2,8(r2)
    a350:	10803fcc 	andi	r2,r2,255
    a354:	10000426 	beq	r2,zero,a368 <fpll_recalc_rate+0x1ac>
		fpll_set_rate(fpll, tmp, fref_khz);
    a358:	e1bff617 	ldw	r6,-40(fp)
    a35c:	e17ffa17 	ldw	r5,-24(fp)
    a360:	e13ff717 	ldw	r4,-36(fp)
    a364:	0009fd40 	call	9fd4 <fpll_set_rate>

	return min_t(uint32_t, tmp, ULONG_MAX);
    a368:	e0bffa17 	ldw	r2,-24(fp)
}
    a36c:	e6fffe04 	addi	sp,fp,-8
    a370:	dfc00317 	ldw	ra,12(sp)
    a374:	df000217 	ldw	fp,8(sp)
    a378:	dc400117 	ldw	r17,4(sp)
    a37c:	dc000017 	ldw	r16,0(sp)
    a380:	dec00404 	addi	sp,sp,16
    a384:	f800283a 	ret

0000a388 <altera_a10_cdr_lookup_vco_speed>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed(uint32_t fvco)
{
    a388:	defffe04 	addi	sp,sp,-8
    a38c:	df000115 	stw	fp,4(sp)
    a390:	df000104 	addi	fp,sp,4
    a394:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 7000000)
    a398:	e0ffff17 	ldw	r3,-4(fp)
    a39c:	00801af4 	movhi	r2,107
    a3a0:	10b3efc4 	addi	r2,r2,-12353
    a3a4:	10c00236 	bltu	r2,r3,a3b0 <altera_a10_cdr_lookup_vco_speed+0x28>
		return 3;
    a3a8:	008000c4 	movi	r2,3
    a3ac:	00000706 	br	a3cc <altera_a10_cdr_lookup_vco_speed+0x44>
	else if (fvco < 12500000)
    a3b0:	e0ffff17 	ldw	r3,-4(fp)
    a3b4:	00802ff4 	movhi	r2,191
    a3b8:	10af07c4 	addi	r2,r2,-17377
    a3bc:	10c00236 	bltu	r2,r3,a3c8 <altera_a10_cdr_lookup_vco_speed+0x40>
		return 2;
    a3c0:	00800084 	movi	r2,2
    a3c4:	00000106 	br	a3cc <altera_a10_cdr_lookup_vco_speed+0x44>
	else
		return 0;
    a3c8:	0005883a 	mov	r2,zero
}
    a3cc:	e037883a 	mov	sp,fp
    a3d0:	df000017 	ldw	fp,0(sp)
    a3d4:	dec00104 	addi	sp,sp,4
    a3d8:	f800283a 	ret

0000a3dc <altera_a10_cdr_lookup_vco_speed_fix>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed_fix
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed_fix(uint32_t fvco)
{
    a3dc:	defffe04 	addi	sp,sp,-8
    a3e0:	df000115 	stw	fp,4(sp)
    a3e4:	df000104 	addi	fp,sp,4
    a3e8:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 6060000)
    a3ec:	e0ffff17 	ldw	r3,-4(fp)
    a3f0:	00801734 	movhi	r2,92
    a3f4:	109df7c4 	addi	r2,r2,30687
    a3f8:	10c00236 	bltu	r2,r3,a404 <altera_a10_cdr_lookup_vco_speed_fix+0x28>
		return 60;
    a3fc:	00800f04 	movi	r2,60
    a400:	00001f06 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 7060000)
    a404:	e0ffff17 	ldw	r3,-4(fp)
    a408:	00801b34 	movhi	r2,108
    a40c:	10ae87c4 	addi	r2,r2,-17889
    a410:	10c00236 	bltu	r2,r3,a41c <altera_a10_cdr_lookup_vco_speed_fix+0x40>
		return 74;
    a414:	00801284 	movi	r2,74
    a418:	00001906 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 9060000)
    a41c:	e0ffff17 	ldw	r3,-4(fp)
    a420:	008022b4 	movhi	r2,138
    a424:	108fa7c4 	addi	r2,r2,16031
    a428:	10c00236 	bltu	r2,r3,a434 <altera_a10_cdr_lookup_vco_speed_fix+0x58>
		return 90;
    a42c:	00801684 	movi	r2,90
    a430:	00001306 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 11350000)
    a434:	e0ffff17 	ldw	r3,-4(fp)
    a438:	00802b74 	movhi	r2,173
    a43c:	108bfbc4 	addi	r2,r2,12271
    a440:	10c00236 	bltu	r2,r3,a44c <altera_a10_cdr_lookup_vco_speed_fix+0x70>
		return 116;
    a444:	00801d04 	movi	r2,116
    a448:	00000d06 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 12760000)
    a44c:	e0ffff17 	ldw	r3,-4(fp)
    a450:	008030f4 	movhi	r2,195
    a454:	10acefc4 	addi	r2,r2,-19521
    a458:	10c00236 	bltu	r2,r3,a464 <altera_a10_cdr_lookup_vco_speed_fix+0x88>
		return 150;
    a45c:	00802584 	movi	r2,150
    a460:	00000706 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 13460000)
    a464:	e0ffff17 	ldw	r3,-4(fp)
    a468:	00803374 	movhi	r2,205
    a46c:	109887c4 	addi	r2,r2,25119
    a470:	10c00236 	bltu	r2,r3,a47c <altera_a10_cdr_lookup_vco_speed_fix+0xa0>
		return 159;
    a474:	008027c4 	movi	r2,159
    a478:	00000106 	br	a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else
		return 174;
    a47c:	00802b84 	movi	r2,174
}
    a480:	e037883a 	mov	sp,fp
    a484:	df000017 	ldw	fp,0(sp)
    a488:	dec00104 	addi	sp,sp,4
    a48c:	f800283a 	ret

0000a490 <altera_a10_cdr_lookup_cp_current_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pd(uint32_t fvco,
	uint32_t lpd)
{
    a490:	defffd04 	addi	sp,sp,-12
    a494:	df000215 	stw	fp,8(sp)
    a498:	df000204 	addi	fp,sp,8
    a49c:	e13fff15 	stw	r4,-4(fp)
    a4a0:	e17ffe15 	stw	r5,-8(fp)
	if (lpd == 1 && fvco < 12000000)
    a4a4:	e0bffe17 	ldw	r2,-8(fp)
    a4a8:	10800058 	cmpnei	r2,r2,1
    a4ac:	1000061e 	bne	r2,zero,a4c8 <altera_a10_cdr_lookup_cp_current_pd+0x38>
    a4b0:	e0ffff17 	ldw	r3,-4(fp)
    a4b4:	00802df4 	movhi	r2,183
    a4b8:	1086bfc4 	addi	r2,r2,6911
    a4bc:	10c00236 	bltu	r2,r3,a4c8 <altera_a10_cdr_lookup_cp_current_pd+0x38>
		return 3;
    a4c0:	008000c4 	movi	r2,3
    a4c4:	00000106 	br	a4cc <altera_a10_cdr_lookup_cp_current_pd+0x3c>
	else
		return 4;
    a4c8:	00800104 	movi	r2,4
}
    a4cc:	e037883a 	mov	sp,fp
    a4d0:	df000017 	ldw	fp,0(sp)
    a4d4:	dec00104 	addi	sp,sp,4
    a4d8:	f800283a 	ret

0000a4dc <altera_a10_cdr_lookup_clklow_div>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_clklow_div
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_clklow_div(uint32_t fref_khz)
{
    a4dc:	defffe04 	addi	sp,sp,-8
    a4e0:	df000115 	stw	fp,4(sp)
    a4e4:	df000104 	addi	fp,sp,4
    a4e8:	e13fff15 	stw	r4,-4(fp)
	if (fref_khz > 400000)
    a4ec:	e0ffff17 	ldw	r3,-4(fp)
    a4f0:	008001b4 	movhi	r2,6
    a4f4:	1086a004 	addi	r2,r2,6784
    a4f8:	10c0022e 	bgeu	r2,r3,a504 <altera_a10_cdr_lookup_clklow_div+0x28>
		return 1;
    a4fc:	00800044 	movi	r2,1
    a500:	00000106 	br	a508 <altera_a10_cdr_lookup_clklow_div+0x2c>
	else
		return 0;
    a504:	0005883a 	mov	r2,zero
}
    a508:	e037883a 	mov	sp,fp
    a50c:	df000017 	ldw	fp,0(sp)
    a510:	dec00104 	addi	sp,sp,4
    a514:	f800283a 	ret

0000a518 <altera_a10_cdr_lookup_fastlock>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_fastlock
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_fastlock(uint32_t lpd)
{
    a518:	defffe04 	addi	sp,sp,-8
    a51c:	df000115 	stw	fp,4(sp)
    a520:	df000104 	addi	fp,sp,4
    a524:	e13fff15 	stw	r4,-4(fp)
	if (lpd == 16)
    a528:	e0bfff17 	ldw	r2,-4(fp)
    a52c:	10800418 	cmpnei	r2,r2,16
    a530:	1000021e 	bne	r2,zero,a53c <altera_a10_cdr_lookup_fastlock+0x24>
		return 1;
    a534:	00800044 	movi	r2,1
    a538:	00000106 	br	a540 <altera_a10_cdr_lookup_fastlock+0x28>
	else
		return 0;
    a53c:	0005883a 	mov	r2,zero
}
    a540:	e037883a 	mov	sp,fp
    a544:	df000017 	ldw	fp,0(sp)
    a548:	dec00104 	addi	sp,sp,4
    a54c:	f800283a 	ret

0000a550 <altera_a10_cdr_lookup_lf_resistor_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pd(uint32_t fvco,
	uint32_t lpd)
{
    a550:	defffd04 	addi	sp,sp,-12
    a554:	df000215 	stw	fp,8(sp)
    a558:	df000204 	addi	fp,sp,8
    a55c:	e13fff15 	stw	r4,-4(fp)
    a560:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 7000000) {
    a564:	e0ffff17 	ldw	r3,-4(fp)
    a568:	00801af4 	movhi	r2,107
    a56c:	10b3efc4 	addi	r2,r2,-12353
    a570:	10c00d36 	bltu	r2,r3,a5a8 <altera_a10_cdr_lookup_lf_resistor_pd+0x58>
		switch (lpd) {
    a574:	e0bffe17 	ldw	r2,-8(fp)
    a578:	10c000a0 	cmpeqi	r3,r2,2
    a57c:	1800061e 	bne	r3,zero,a598 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
    a580:	10c00120 	cmpeqi	r3,r2,4
    a584:	1800041e 	bne	r3,zero,a598 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
    a588:	10800060 	cmpeqi	r2,r2,1
    a58c:	10000426 	beq	r2,zero,a5a0 <altera_a10_cdr_lookup_lf_resistor_pd+0x50>
		case 1:
			return 2;
    a590:	00800084 	movi	r2,2
    a594:	00000d06 	br	a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		case 2:
		case 4:
			return 3;
    a598:	008000c4 	movi	r2,3
    a59c:	00000b06 	br	a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
    a5a0:	0005883a 	mov	r2,zero
    a5a4:	00000906 	br	a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		}
	} else {
		switch (lpd) {
    a5a8:	e0bffe17 	ldw	r2,-8(fp)
    a5ac:	0080062e 	bgeu	zero,r2,a5c8 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
    a5b0:	10c000f0 	cmpltui	r3,r2,3
    a5b4:	1800021e 	bne	r3,zero,a5c0 <altera_a10_cdr_lookup_lf_resistor_pd+0x70>
    a5b8:	10800120 	cmpeqi	r2,r2,4
    a5bc:	10000226 	beq	r2,zero,a5c8 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
		case 1:
		case 2:
		case 4:
			return 3;
    a5c0:	008000c4 	movi	r2,3
    a5c4:	00000106 	br	a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
    a5c8:	0005883a 	mov	r2,zero
		}
	}
}
    a5cc:	e037883a 	mov	sp,fp
    a5d0:	df000017 	ldw	fp,0(sp)
    a5d4:	dec00104 	addi	sp,sp,4
    a5d8:	f800283a 	ret

0000a5dc <altera_a10_cdr_lookup_lf_resistor_pfd>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd) {
    a5dc:	defffc04 	addi	sp,sp,-16
    a5e0:	df000315 	stw	fp,12(sp)
    a5e4:	df000304 	addi	fp,sp,12
    a5e8:	e13fff15 	stw	r4,-4(fp)
    a5ec:	e17ffe15 	stw	r5,-8(fp)
    a5f0:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
    a5f4:	e0ffff17 	ldw	r3,-4(fp)
    a5f8:	00801af4 	movhi	r2,107
    a5fc:	10b3efc4 	addi	r2,r2,-12353
    a600:	10c00a36 	bltu	r2,r3,a62c <altera_a10_cdr_lookup_lf_resistor_pfd+0x50>
		switch (m*lpfd) {
    a604:	e0fffe17 	ldw	r3,-8(fp)
    a608:	e0bffd17 	ldw	r2,-12(fp)
    a60c:	1885383a 	mul	r2,r3,r2
    a610:	10bffe04 	addi	r2,r2,-8
    a614:	108009a8 	cmpgeui	r2,r2,38
    a618:	1000021e 	bne	r2,zero,a624 <altera_a10_cdr_lookup_lf_resistor_pfd+0x48>
		case 8 ... 45:
			return 2;
    a61c:	00800084 	movi	r2,2
    a620:	00004706 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    a624:	008000c4 	movi	r2,3
    a628:	00004506 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 9000000) {
    a62c:	e0ffff17 	ldw	r3,-4(fp)
    a630:	00802274 	movhi	r2,137
    a634:	10950fc4 	addi	r2,r2,21567
    a638:	10c01536 	bltu	r2,r3,a690 <altera_a10_cdr_lookup_lf_resistor_pfd+0xb4>
		switch (m*lpfd) {
    a63c:	e0fffe17 	ldw	r3,-8(fp)
    a640:	e0bffd17 	ldw	r2,-12(fp)
    a644:	1885383a 	mul	r2,r3,r2
    a648:	10c01228 	cmpgeui	r3,r2,72
    a64c:	1800051e 	bne	r3,zero,a664 <altera_a10_cdr_lookup_lf_resistor_pfd+0x88>
    a650:	10c00ea8 	cmpgeui	r3,r2,58
    a654:	1800081e 	bne	r3,zero,a678 <altera_a10_cdr_lookup_lf_resistor_pfd+0x9c>
    a658:	10800230 	cmpltui	r2,r2,8
    a65c:	10000a1e 	bne	r2,zero,a688 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
    a660:	00000306 	br	a670 <altera_a10_cdr_lookup_lf_resistor_pfd+0x94>
    a664:	108015a8 	cmpgeui	r2,r2,86
    a668:	1000071e 	bne	r2,zero,a688 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
    a66c:	00000406 	br	a680 <altera_a10_cdr_lookup_lf_resistor_pfd+0xa4>
		case 8 ... 57:
			return 2;
    a670:	00800084 	movi	r2,2
    a674:	00003206 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 58 ... 71:
			return 3;
    a678:	008000c4 	movi	r2,3
    a67c:	00003006 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 2;
    a680:	00800084 	movi	r2,2
    a684:	00002e06 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    a688:	008000c4 	movi	r2,3
    a68c:	00002c06 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 12000000) {
    a690:	e0ffff17 	ldw	r3,-4(fp)
    a694:	00802df4 	movhi	r2,183
    a698:	1086bfc4 	addi	r2,r2,6911
    a69c:	10c01936 	bltu	r2,r3,a704 <altera_a10_cdr_lookup_lf_resistor_pfd+0x128>
		switch (m*lpfd) {
    a6a0:	e0fffe17 	ldw	r3,-8(fp)
    a6a4:	e0bffd17 	ldw	r2,-12(fp)
    a6a8:	1885383a 	mul	r2,r3,r2
    a6ac:	10c01228 	cmpgeui	r3,r2,72
    a6b0:	1800051e 	bne	r3,zero,a6c8 <altera_a10_cdr_lookup_lf_resistor_pfd+0xec>
    a6b4:	10c00728 	cmpgeui	r3,r2,28
    a6b8:	18000a1e 	bne	r3,zero,a6e4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x108>
    a6bc:	10800230 	cmpltui	r2,r2,8
    a6c0:	10000e1e 	bne	r2,zero,a6fc <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
    a6c4:	00000506 	br	a6dc <altera_a10_cdr_lookup_lf_resistor_pfd+0x100>
    a6c8:	10c015b0 	cmpltui	r3,r2,86
    a6cc:	1800071e 	bne	r3,zero,a6ec <altera_a10_cdr_lookup_lf_resistor_pfd+0x110>
    a6d0:	108020a8 	cmpgeui	r2,r2,130
    a6d4:	1000091e 	bne	r2,zero,a6fc <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
    a6d8:	00000606 	br	a6f4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x118>
		case 8 ... 27:
			return 1;
    a6dc:	00800044 	movi	r2,1
    a6e0:	00001706 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 71:
			return 2;
    a6e4:	00800084 	movi	r2,2
    a6e8:	00001506 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 3;
    a6ec:	008000c4 	movi	r2,3
    a6f0:	00001306 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 86 ... 129:
			return 2;
    a6f4:	00800084 	movi	r2,2
    a6f8:	00001106 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    a6fc:	008000c4 	movi	r2,3
    a700:	00000f06 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else {
		switch (m*lpfd) {
    a704:	e0fffe17 	ldw	r3,-8(fp)
    a708:	e0bffd17 	ldw	r2,-12(fp)
    a70c:	1885383a 	mul	r2,r3,r2
    a710:	10c00230 	cmpltui	r3,r2,8
    a714:	1800091e 	bne	r3,zero,a73c <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
    a718:	10c00730 	cmpltui	r3,r2,28
    a71c:	1800031e 	bne	r3,zero,a72c <altera_a10_cdr_lookup_lf_resistor_pfd+0x150>
    a720:	10800ea8 	cmpgeui	r2,r2,58
    a724:	1000051e 	bne	r2,zero,a73c <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
    a728:	00000206 	br	a734 <altera_a10_cdr_lookup_lf_resistor_pfd+0x158>
		case 8 ... 27:
			return 1;
    a72c:	00800044 	movi	r2,1
    a730:	00000306 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 57:
			return 2;
    a734:	00800084 	movi	r2,2
    a738:	00000106 	br	a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
    a73c:	008000c4 	movi	r2,3
		}
	}
}
    a740:	e037883a 	mov	sp,fp
    a744:	df000017 	ldw	fp,0(sp)
    a748:	dec00104 	addi	sp,sp,4
    a74c:	f800283a 	ret

0000a750 <altera_a10_cdr_lookup_cp_current_pfd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd)
{
    a750:	defffc04 	addi	sp,sp,-16
    a754:	df000315 	stw	fp,12(sp)
    a758:	df000304 	addi	fp,sp,12
    a75c:	e13fff15 	stw	r4,-4(fp)
    a760:	e17ffe15 	stw	r5,-8(fp)
    a764:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
    a768:	e0ffff17 	ldw	r3,-4(fp)
    a76c:	00801af4 	movhi	r2,107
    a770:	10b3efc4 	addi	r2,r2,-12353
    a774:	10c01736 	bltu	r2,r3,a7d4 <altera_a10_cdr_lookup_cp_current_pfd+0x84>
		switch (m*lpfd) {
    a778:	e0fffe17 	ldw	r3,-8(fp)
    a77c:	e0bffd17 	ldw	r2,-12(fp)
    a780:	1885383a 	mul	r2,r3,r2
    a784:	10c00ba8 	cmpgeui	r3,r2,46
    a788:	1800031e 	bne	r3,zero,a798 <altera_a10_cdr_lookup_cp_current_pfd+0x48>
    a78c:	10800928 	cmpgeui	r2,r2,36
    a790:	1000081e 	bne	r2,zero,a7b4 <altera_a10_cdr_lookup_cp_current_pfd+0x64>
    a794:	00000506 	br	a7ac <altera_a10_cdr_lookup_cp_current_pfd+0x5c>
    a798:	10c01230 	cmpltui	r3,r2,72
    a79c:	1800071e 	bne	r3,zero,a7bc <altera_a10_cdr_lookup_cp_current_pfd+0x6c>
    a7a0:	10801c28 	cmpgeui	r2,r2,112
    a7a4:	1000091e 	bne	r2,zero,a7cc <altera_a10_cdr_lookup_cp_current_pfd+0x7c>
    a7a8:	00000606 	br	a7c4 <altera_a10_cdr_lookup_cp_current_pfd+0x74>
		case 0 ... 35:
			return 2;
    a7ac:	00800084 	movi	r2,2
    a7b0:	0000ca06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 3;
    a7b4:	008000c4 	movi	r2,3
    a7b8:	0000c806 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 71:
			return 1;
    a7bc:	00800044 	movi	r2,1
    a7c0:	0000c606 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 111:
			return 2;
    a7c4:	00800084 	movi	r2,2
    a7c8:	0000c406 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    a7cc:	008000c4 	movi	r2,3
    a7d0:	0000c206 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 9000000) {
    a7d4:	e0ffff17 	ldw	r3,-4(fp)
    a7d8:	00802274 	movhi	r2,137
    a7dc:	10950fc4 	addi	r2,r2,21567
    a7e0:	10c02836 	bltu	r2,r3,a884 <altera_a10_cdr_lookup_cp_current_pfd+0x134>
		switch (m*lpfd) {
    a7e4:	e0fffe17 	ldw	r3,-8(fp)
    a7e8:	e0bffd17 	ldw	r2,-12(fp)
    a7ec:	1885383a 	mul	r2,r3,r2
    a7f0:	10c01228 	cmpgeui	r3,r2,72
    a7f4:	1800071e 	bne	r3,zero,a814 <altera_a10_cdr_lookup_cp_current_pfd+0xc4>
    a7f8:	10c00ea8 	cmpgeui	r3,r2,58
    a7fc:	1800151e 	bne	r3,zero,a854 <altera_a10_cdr_lookup_cp_current_pfd+0x104>
    a800:	10c00ba8 	cmpgeui	r3,r2,46
    a804:	1800111e 	bne	r3,zero,a84c <altera_a10_cdr_lookup_cp_current_pfd+0xfc>
    a808:	10800728 	cmpgeui	r2,r2,28
    a80c:	10000d1e 	bne	r2,zero,a844 <altera_a10_cdr_lookup_cp_current_pfd+0xf4>
    a810:	00000a06 	br	a83c <altera_a10_cdr_lookup_cp_current_pfd+0xec>
    a814:	10c020a8 	cmpgeui	r3,r2,130
    a818:	1800031e 	bne	r3,zero,a828 <altera_a10_cdr_lookup_cp_current_pfd+0xd8>
    a81c:	108015a8 	cmpgeui	r2,r2,86
    a820:	1000101e 	bne	r2,zero,a864 <altera_a10_cdr_lookup_cp_current_pfd+0x114>
    a824:	00000d06 	br	a85c <altera_a10_cdr_lookup_cp_current_pfd+0x10c>
    a828:	10c023b0 	cmpltui	r3,r2,142
    a82c:	18000f1e 	bne	r3,zero,a86c <altera_a10_cdr_lookup_cp_current_pfd+0x11c>
    a830:	10802da8 	cmpgeui	r2,r2,182
    a834:	1000111e 	bne	r2,zero,a87c <altera_a10_cdr_lookup_cp_current_pfd+0x12c>
    a838:	00000e06 	br	a874 <altera_a10_cdr_lookup_cp_current_pfd+0x124>
		case 0 ... 27:
			return 1;
    a83c:	00800044 	movi	r2,1
    a840:	0000a606 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 45:
			return 2;
    a844:	00800084 	movi	r2,2
    a848:	0000a406 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
    a84c:	008000c4 	movi	r2,3
    a850:	0000a206 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
    a854:	00800044 	movi	r2,1
    a858:	0000a006 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 4;
    a85c:	00800104 	movi	r2,4
    a860:	00009e06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 2;
    a864:	00800084 	movi	r2,2
    a868:	00009c06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 130 ... 141:
			return 3;
    a86c:	008000c4 	movi	r2,3
    a870:	00009a06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 142 ... 181:
			return 2;
    a874:	00800084 	movi	r2,2
    a878:	00009806 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    a87c:	008000c4 	movi	r2,3
    a880:	00009606 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 12000000) {
    a884:	e0ffff17 	ldw	r3,-4(fp)
    a888:	00802df4 	movhi	r2,183
    a88c:	1086bfc4 	addi	r2,r2,6911
    a890:	10c01b36 	bltu	r2,r3,a900 <altera_a10_cdr_lookup_cp_current_pfd+0x1b0>
		switch (m*lpfd) {
    a894:	e0fffe17 	ldw	r3,-8(fp)
    a898:	e0bffd17 	ldw	r2,-12(fp)
    a89c:	1885383a 	mul	r2,r3,r2
    a8a0:	10c01228 	cmpgeui	r3,r2,72
    a8a4:	1800051e 	bne	r3,zero,a8bc <altera_a10_cdr_lookup_cp_current_pfd+0x16c>
    a8a8:	10c00928 	cmpgeui	r3,r2,36
    a8ac:	18000c1e 	bne	r3,zero,a8e0 <altera_a10_cdr_lookup_cp_current_pfd+0x190>
    a8b0:	10800730 	cmpltui	r2,r2,28
    a8b4:	1000061e 	bne	r2,zero,a8d0 <altera_a10_cdr_lookup_cp_current_pfd+0x180>
    a8b8:	00000706 	br	a8d8 <altera_a10_cdr_lookup_cp_current_pfd+0x188>
    a8bc:	10c015b0 	cmpltui	r3,r2,86
    a8c0:	1800091e 	bne	r3,zero,a8e8 <altera_a10_cdr_lookup_cp_current_pfd+0x198>
    a8c4:	108020a8 	cmpgeui	r2,r2,130
    a8c8:	10000b1e 	bne	r2,zero,a8f8 <altera_a10_cdr_lookup_cp_current_pfd+0x1a8>
    a8cc:	00000806 	br	a8f0 <altera_a10_cdr_lookup_cp_current_pfd+0x1a0>
		case 0 ... 27:
			return 3;
    a8d0:	008000c4 	movi	r2,3
    a8d4:	00008106 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
    a8d8:	00800044 	movi	r2,1
    a8dc:	00007f06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 71:
			return 2;
    a8e0:	00800084 	movi	r2,2
    a8e4:	00007d06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 1;
    a8e8:	00800044 	movi	r2,1
    a8ec:	00007b06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 4;
    a8f0:	00800104 	movi	r2,4
    a8f4:	00007906 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 2;
    a8f8:	00800084 	movi	r2,2
    a8fc:	00007706 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else {
		switch (m*lpfd) {
    a900:	e0fffe17 	ldw	r3,-8(fp)
    a904:	e0bffd17 	ldw	r2,-12(fp)
    a908:	1885383a 	mul	r2,r3,r2
    a90c:	10c01828 	cmpgeui	r3,r2,96
    a910:	1800711e 	bne	r3,zero,aad8 <altera_a10_cdr_lookup_cp_current_pfd+0x388>
    a914:	100690ba 	slli	r3,r2,2
    a918:	00800074 	movhi	r2,1
    a91c:	1885883a 	add	r2,r3,r2
    a920:	10aa4a17 	ldw	r2,-22232(r2)
    a924:	1000683a 	jmp	r2
    a928:	0000aaa8 	cmpgeui	zero,zero,682
    a92c:	0000aaa8 	cmpgeui	zero,zero,682
    a930:	0000aaa8 	cmpgeui	zero,zero,682
    a934:	0000aaa8 	cmpgeui	zero,zero,682
    a938:	0000aaa8 	cmpgeui	zero,zero,682
    a93c:	0000aaa8 	cmpgeui	zero,zero,682
    a940:	0000aaa8 	cmpgeui	zero,zero,682
    a944:	0000aaa8 	cmpgeui	zero,zero,682
    a948:	0000aaa8 	cmpgeui	zero,zero,682
    a94c:	0000aaa8 	cmpgeui	zero,zero,682
    a950:	0000aaa8 	cmpgeui	zero,zero,682
    a954:	0000aaa8 	cmpgeui	zero,zero,682
    a958:	0000aaa8 	cmpgeui	zero,zero,682
    a95c:	0000aaa8 	cmpgeui	zero,zero,682
    a960:	0000aaa8 	cmpgeui	zero,zero,682
    a964:	0000aaa8 	cmpgeui	zero,zero,682
    a968:	0000aaa8 	cmpgeui	zero,zero,682
    a96c:	0000aaa8 	cmpgeui	zero,zero,682
    a970:	0000aaa8 	cmpgeui	zero,zero,682
    a974:	0000aaa8 	cmpgeui	zero,zero,682
    a978:	0000aaa8 	cmpgeui	zero,zero,682
    a97c:	0000aaa8 	cmpgeui	zero,zero,682
    a980:	0000aaa8 	cmpgeui	zero,zero,682
    a984:	0000aaa8 	cmpgeui	zero,zero,682
    a988:	0000aaa8 	cmpgeui	zero,zero,682
    a98c:	0000aaa8 	cmpgeui	zero,zero,682
    a990:	0000aaa8 	cmpgeui	zero,zero,682
    a994:	0000aaa8 	cmpgeui	zero,zero,682
    a998:	0000aab0 	cmpltui	zero,zero,682
    a99c:	0000aab0 	cmpltui	zero,zero,682
    a9a0:	0000aab0 	cmpltui	zero,zero,682
    a9a4:	0000aab0 	cmpltui	zero,zero,682
    a9a8:	0000aab0 	cmpltui	zero,zero,682
    a9ac:	0000aab0 	cmpltui	zero,zero,682
    a9b0:	0000aab0 	cmpltui	zero,zero,682
    a9b4:	0000aab0 	cmpltui	zero,zero,682
    a9b8:	0000aab8 	rdprs	zero,zero,682
    a9bc:	0000aab8 	rdprs	zero,zero,682
    a9c0:	0000aab8 	rdprs	zero,zero,682
    a9c4:	0000aab8 	rdprs	zero,zero,682
    a9c8:	0000aab8 	rdprs	zero,zero,682
    a9cc:	0000aab8 	rdprs	zero,zero,682
    a9d0:	0000aab8 	rdprs	zero,zero,682
    a9d4:	0000aab8 	rdprs	zero,zero,682
    a9d8:	0000aab8 	rdprs	zero,zero,682
    a9dc:	0000aab8 	rdprs	zero,zero,682
    a9e0:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9e4:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9e8:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9ec:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9f0:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9f4:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9f8:	0000aac0 	call	aac <ad9144_setup+0x8>
    a9fc:	0000aac0 	call	aac <ad9144_setup+0x8>
    aa00:	0000aac0 	call	aac <ad9144_setup+0x8>
    aa04:	0000aac0 	call	aac <ad9144_setup+0x8>
    aa08:	0000aac0 	call	aac <ad9144_setup+0x8>
    aa0c:	0000aac0 	call	aac <ad9144_setup+0x8>
    aa10:	0000aac8 	cmpgei	zero,zero,683
    aa14:	0000aac8 	cmpgei	zero,zero,683
    aa18:	0000aac8 	cmpgei	zero,zero,683
    aa1c:	0000aac8 	cmpgei	zero,zero,683
    aa20:	0000aac8 	cmpgei	zero,zero,683
    aa24:	0000aac8 	cmpgei	zero,zero,683
    aa28:	0000aac8 	cmpgei	zero,zero,683
    aa2c:	0000aac8 	cmpgei	zero,zero,683
    aa30:	0000aac8 	cmpgei	zero,zero,683
    aa34:	0000aac8 	cmpgei	zero,zero,683
    aa38:	0000aac8 	cmpgei	zero,zero,683
    aa3c:	0000aac8 	cmpgei	zero,zero,683
    aa40:	0000aac8 	cmpgei	zero,zero,683
    aa44:	0000aac8 	cmpgei	zero,zero,683
    aa48:	0000aad0 	cmplti	zero,zero,683
    aa4c:	0000aad0 	cmplti	zero,zero,683
    aa50:	0000aad0 	cmplti	zero,zero,683
    aa54:	0000aad0 	cmplti	zero,zero,683
    aa58:	0000aad0 	cmplti	zero,zero,683
    aa5c:	0000aad0 	cmplti	zero,zero,683
    aa60:	0000aad0 	cmplti	zero,zero,683
    aa64:	0000aad0 	cmplti	zero,zero,683
    aa68:	0000aad0 	cmplti	zero,zero,683
    aa6c:	0000aad0 	cmplti	zero,zero,683
    aa70:	0000aad0 	cmplti	zero,zero,683
    aa74:	0000aad0 	cmplti	zero,zero,683
    aa78:	0000aad0 	cmplti	zero,zero,683
    aa7c:	0000aad0 	cmplti	zero,zero,683
    aa80:	0000aad0 	cmplti	zero,zero,683
    aa84:	0000aad0 	cmplti	zero,zero,683
    aa88:	0000aad0 	cmplti	zero,zero,683
    aa8c:	0000aad0 	cmplti	zero,zero,683
    aa90:	0000aad0 	cmplti	zero,zero,683
    aa94:	0000aad0 	cmplti	zero,zero,683
    aa98:	0000aad0 	cmplti	zero,zero,683
    aa9c:	0000aad0 	cmplti	zero,zero,683
    aaa0:	0000aad0 	cmplti	zero,zero,683
    aaa4:	0000aad0 	cmplti	zero,zero,683
		case 0 ... 27:
			return 4;
    aaa8:	00800104 	movi	r2,4
    aaac:	00000b06 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
    aab0:	00800044 	movi	r2,1
    aab4:	00000906 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 2;
    aab8:	00800084 	movi	r2,2
    aabc:	00000706 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
    aac0:	008000c4 	movi	r2,3
    aac4:	00000506 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
    aac8:	00800044 	movi	r2,1
    aacc:	00000306 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 95:
			return 2;
    aad0:	00800084 	movi	r2,2
    aad4:	00000106 	br	aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
    aad8:	008000c4 	movi	r2,3
		}
	}
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00104 	addi	sp,sp,4
    aae8:	f800283a 	ret

0000aaec <altera_a10_cdr_calc_params>:
*******************************************************************************/
void altera_a10_cdr_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_lpfd, uint32_t *best_lpd,
	uint32_t *best_fvco)
{
    aaec:	defff104 	addi	sp,sp,-60
    aaf0:	df000e15 	stw	fp,56(sp)
    aaf4:	df000e04 	addi	fp,sp,56
    aaf8:	e13ff515 	stw	r4,-44(fp)
    aafc:	e17ff415 	stw	r5,-48(fp)
    ab00:	e1bff315 	stw	r6,-52(fp)
    ab04:	e1fff215 	stw	r7,-56(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, lpd, lpfd, lpfd_min;
	uint32_t fvco, target_fvco;
	uint32_t pfd;

	*best_n = *best_m = *best_lpfd = *best_lpd = *best_fvco = 0;
    ab08:	e0800317 	ldw	r2,12(fp)
    ab0c:	10000015 	stw	zero,0(r2)
    ab10:	e0800317 	ldw	r2,12(fp)
    ab14:	10c00017 	ldw	r3,0(r2)
    ab18:	e0800217 	ldw	r2,8(fp)
    ab1c:	10c00015 	stw	r3,0(r2)
    ab20:	e0800217 	ldw	r2,8(fp)
    ab24:	10c00017 	ldw	r3,0(r2)
    ab28:	e0800117 	ldw	r2,4(fp)
    ab2c:	10c00015 	stw	r3,0(r2)
    ab30:	e0800117 	ldw	r2,4(fp)
    ab34:	10c00017 	ldw	r3,0(r2)
    ab38:	e0bff217 	ldw	r2,-56(fp)
    ab3c:	10c00015 	stw	r3,0(r2)
    ab40:	e0bff217 	ldw	r2,-56(fp)
    ab44:	10c00017 	ldw	r3,0(r2)
    ab48:	e0bff317 	ldw	r2,-52(fp)
    ab4c:	10c00015 	stw	r3,0(r2)

	for (lpd = 1; lpd < 16; lpd *= 2) {
    ab50:	00800044 	movi	r2,1
    ab54:	e0bffd15 	stw	r2,-12(fp)
    ab58:	00000906 	br	ab80 <altera_a10_cdr_calc_params+0x94>
		if (fout_khz >= A10_CDR_PLL_VCO_MIN / lpd)
    ab5c:	008012f4 	movhi	r2,75
    ab60:	10b12804 	addi	r2,r2,-15200
    ab64:	e0fffd17 	ldw	r3,-12(fp)
    ab68:	10c5203a 	divu	r2,r2,r3
    ab6c:	e0fff417 	ldw	r3,-48(fp)
    ab70:	1880072e 	bgeu	r3,r2,ab90 <altera_a10_cdr_calc_params+0xa4>
	for (lpd = 1; lpd < 16; lpd *= 2) {
    ab74:	e0bffd17 	ldw	r2,-12(fp)
    ab78:	1085883a 	add	r2,r2,r2
    ab7c:	e0bffd15 	stw	r2,-12(fp)
    ab80:	e0bffd17 	ldw	r2,-12(fp)
    ab84:	10800430 	cmpltui	r2,r2,16
    ab88:	103ff41e 	bne	r2,zero,ab5c <__alt_mem_mcu_subsystem_ram_0+0x77feab5c>
    ab8c:	00000106 	br	ab94 <altera_a10_cdr_calc_params+0xa8>
			break;
    ab90:	0001883a 	nop
	}

	target_fvco = fout_khz * lpd;
    ab94:	e0fff417 	ldw	r3,-48(fp)
    ab98:	e0bffd17 	ldw	r2,-12(fp)
    ab9c:	1885383a 	mul	r2,r3,r2
    aba0:	e0bffa15 	stw	r2,-24(fp)

	if (fout_khz * lpd > 5200000)
    aba4:	e0fff417 	ldw	r3,-48(fp)
    aba8:	e0bffd17 	ldw	r2,-12(fp)
    abac:	1887383a 	mul	r3,r3,r2
    abb0:	008013f4 	movhi	r2,79
    abb4:	10962004 	addi	r2,r2,22656
    abb8:	10c0032e 	bgeu	r2,r3,abc8 <altera_a10_cdr_calc_params+0xdc>
		lpfd_min = 2;
    abbc:	00800084 	movi	r2,2
    abc0:	e0bffb15 	stw	r2,-20(fp)
    abc4:	00000206 	br	abd0 <altera_a10_cdr_calc_params+0xe4>
	else
		lpfd_min = 1;
    abc8:	00800044 	movi	r2,1
    abcc:	e0bffb15 	stw	r2,-20(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_CDR_PLL_VCO_MIN / 2, fref_khz), 8);
    abd0:	e0fff517 	ldw	r3,-44(fp)
    abd4:	00800974 	movhi	r2,37
    abd8:	109893c4 	addi	r2,r2,25167
    abdc:	1887883a 	add	r3,r3,r2
    abe0:	e0bff517 	ldw	r2,-44(fp)
    abe4:	1885203a 	divu	r2,r3,r2
    abe8:	10c00228 	cmpgeui	r3,r2,8
    abec:	1800011e 	bne	r3,zero,abf4 <altera_a10_cdr_calc_params+0x108>
    abf0:	00800204 	movi	r2,8
    abf4:	e0bff915 	stw	r2,-28(fp)
	m_max = min_t(uint32_t, A10_CDR_PLL_VCO_MAX * 8 / lpfd_min / fref_khz, 127);
    abf8:	0081aff4 	movhi	r2,1727
    abfc:	1092e004 	addi	r2,r2,19328
    ac00:	e0fffb17 	ldw	r3,-20(fp)
    ac04:	10c7203a 	divu	r3,r2,r3
    ac08:	e0bff517 	ldw	r2,-44(fp)
    ac0c:	1885203a 	divu	r2,r3,r2
    ac10:	10c02030 	cmpltui	r3,r2,128
    ac14:	1800011e 	bne	r3,zero,ac1c <altera_a10_cdr_calc_params+0x130>
    ac18:	00801fc4 	movi	r2,127
    ac1c:	e0bff815 	stw	r2,-32(fp)

	for (n = 1; n <= 8; n *= 2) {
    ac20:	00800044 	movi	r2,1
    ac24:	e0bffe15 	stw	r2,-8(fp)
    ac28:	00004906 	br	ad50 <altera_a10_cdr_calc_params+0x264>
		pfd = fref_khz / n;
    ac2c:	e0fff517 	ldw	r3,-44(fp)
    ac30:	e0bffe17 	ldw	r2,-8(fp)
    ac34:	1885203a 	divu	r2,r3,r2
    ac38:	e0bff715 	stw	r2,-36(fp)
		if (pfd < A10_CDR_PLL_PFD_MIN)
    ac3c:	e0bff717 	ldw	r2,-36(fp)
    ac40:	10b0d428 	cmpgeui	r2,r2,50000
    ac44:	10004626 	beq	r2,zero,ad60 <altera_a10_cdr_calc_params+0x274>
			break;
		if (pfd > A10_CDR_PLL_PFD_MAX)
    ac48:	e0fff717 	ldw	r3,-36(fp)
    ac4c:	00800334 	movhi	r2,12
    ac50:	108d4004 	addi	r2,r2,13568
    ac54:	10c03a36 	bltu	r2,r3,ad40 <altera_a10_cdr_calc_params+0x254>
			continue;

		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
    ac58:	e0bffb17 	ldw	r2,-20(fp)
    ac5c:	e0bffc15 	stw	r2,-16(fp)
    ac60:	00003306 	br	ad30 <altera_a10_cdr_calc_params+0x244>
			for (m = m_min; m <= m_max; m++) {
    ac64:	e0bff917 	ldw	r2,-28(fp)
    ac68:	e0bfff15 	stw	r2,-4(fp)
    ac6c:	00002a06 	br	ad18 <altera_a10_cdr_calc_params+0x22c>
				fvco = fref_khz * m * lpfd / n;
    ac70:	e0fff517 	ldw	r3,-44(fp)
    ac74:	e0bfff17 	ldw	r2,-4(fp)
    ac78:	1887383a 	mul	r3,r3,r2
    ac7c:	e0bffc17 	ldw	r2,-16(fp)
    ac80:	1887383a 	mul	r3,r3,r2
    ac84:	e0bffe17 	ldw	r2,-8(fp)
    ac88:	1885203a 	divu	r2,r3,r2
    ac8c:	e0bff615 	stw	r2,-40(fp)

				if (abs(fvco - target_fvco) < abs(*best_fvco - target_fvco)) {
    ac90:	e0fff617 	ldw	r3,-40(fp)
    ac94:	e0bffa17 	ldw	r2,-24(fp)
    ac98:	1885c83a 	sub	r2,r3,r2
    ac9c:	1000010e 	bge	r2,zero,aca4 <altera_a10_cdr_calc_params+0x1b8>
    aca0:	0085c83a 	sub	r2,zero,r2
    aca4:	1009883a 	mov	r4,r2
    aca8:	e0800317 	ldw	r2,12(fp)
    acac:	10c00017 	ldw	r3,0(r2)
    acb0:	e0bffa17 	ldw	r2,-24(fp)
    acb4:	1885c83a 	sub	r2,r3,r2
    acb8:	1000010e 	bge	r2,zero,acc0 <altera_a10_cdr_calc_params+0x1d4>
    acbc:	0085c83a 	sub	r2,zero,r2
    acc0:	2080120e 	bge	r4,r2,ad0c <altera_a10_cdr_calc_params+0x220>
					*best_n = n;
    acc4:	e0bff317 	ldw	r2,-52(fp)
    acc8:	e0fffe17 	ldw	r3,-8(fp)
    accc:	10c00015 	stw	r3,0(r2)
					*best_m = m;
    acd0:	e0bff217 	ldw	r2,-56(fp)
    acd4:	e0ffff17 	ldw	r3,-4(fp)
    acd8:	10c00015 	stw	r3,0(r2)
					*best_lpfd = lpfd;
    acdc:	e0800117 	ldw	r2,4(fp)
    ace0:	e0fffc17 	ldw	r3,-16(fp)
    ace4:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
    ace8:	e0800317 	ldw	r2,12(fp)
    acec:	e0fff617 	ldw	r3,-40(fp)
    acf0:	10c00015 	stw	r3,0(r2)
					*best_lpd = lpd;
    acf4:	e0800217 	ldw	r2,8(fp)
    acf8:	e0fffd17 	ldw	r3,-12(fp)
    acfc:	10c00015 	stw	r3,0(r2)
					if (target_fvco == fvco)
    ad00:	e0fffa17 	ldw	r3,-24(fp)
    ad04:	e0bff617 	ldw	r2,-40(fp)
    ad08:	18801726 	beq	r3,r2,ad68 <altera_a10_cdr_calc_params+0x27c>
			for (m = m_min; m <= m_max; m++) {
    ad0c:	e0bfff17 	ldw	r2,-4(fp)
    ad10:	10800044 	addi	r2,r2,1
    ad14:	e0bfff15 	stw	r2,-4(fp)
    ad18:	e0bfff17 	ldw	r2,-4(fp)
    ad1c:	e0fff817 	ldw	r3,-32(fp)
    ad20:	18bfd32e 	bgeu	r3,r2,ac70 <__alt_mem_mcu_subsystem_ram_0+0x77feac70>
		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
    ad24:	e0bffc17 	ldw	r2,-16(fp)
    ad28:	10800044 	addi	r2,r2,1
    ad2c:	e0bffc15 	stw	r2,-16(fp)
    ad30:	e0bffc17 	ldw	r2,-16(fp)
    ad34:	108000f0 	cmpltui	r2,r2,3
    ad38:	103fca1e 	bne	r2,zero,ac64 <__alt_mem_mcu_subsystem_ram_0+0x77feac64>
    ad3c:	00000106 	br	ad44 <altera_a10_cdr_calc_params+0x258>
			continue;
    ad40:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
    ad44:	e0bffe17 	ldw	r2,-8(fp)
    ad48:	1085883a 	add	r2,r2,r2
    ad4c:	e0bffe15 	stw	r2,-8(fp)
    ad50:	e0bffe17 	ldw	r2,-8(fp)
    ad54:	10800270 	cmpltui	r2,r2,9
    ad58:	103fb41e 	bne	r2,zero,ac2c <__alt_mem_mcu_subsystem_ram_0+0x77feac2c>
    ad5c:	00000306 	br	ad6c <altera_a10_cdr_calc_params+0x280>
			break;
    ad60:	0001883a 	nop
    ad64:	00000106 	br	ad6c <altera_a10_cdr_calc_params+0x280>
						return;
    ad68:	0001883a 	nop
				}
			}
		}
	}
}
    ad6c:	e037883a 	mov	sp,fp
    ad70:	df000017 	ldw	fp,0(sp)
    ad74:	dec00104 	addi	sp,sp,4
    ad78:	f800283a 	ret

0000ad7c <altera_a10_cdr_pll_round_rate>:

/*******************************************************************************
* @brief altera_a10_cdr_pll_round_rate
*******************************************************************************/
uint32_t altera_a10_cdr_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
    ad7c:	defff004 	addi	sp,sp,-64
    ad80:	dfc00f15 	stw	ra,60(sp)
    ad84:	df000e15 	stw	fp,56(sp)
    ad88:	dc400d15 	stw	r17,52(sp)
    ad8c:	dc000c15 	stw	r16,48(sp)
    ad90:	df000e04 	addi	fp,sp,56
    ad94:	e13ff615 	stw	r4,-40(fp)
    ad98:	e17ff515 	stw	r5,-44(fp)
	uint32_t n, m, lpfd, lpd, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
    ad9c:	e0bff617 	ldw	r2,-40(fp)
    ada0:	1004d07a 	srli	r2,r2,1
    ada4:	e0bffd15 	stw	r2,-12(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
    ada8:	e13ffa04 	addi	r4,fp,-24
    adac:	e0fffb04 	addi	r3,fp,-20
    adb0:	e0bff704 	addi	r2,fp,-36
    adb4:	d8800215 	stw	r2,8(sp)
    adb8:	e0bff804 	addi	r2,fp,-32
    adbc:	d8800115 	stw	r2,4(sp)
    adc0:	e0bff904 	addi	r2,fp,-28
    adc4:	d8800015 	stw	r2,0(sp)
    adc8:	200f883a 	mov	r7,r4
    adcc:	180d883a 	mov	r6,r3
    add0:	e17ffd17 	ldw	r5,-12(fp)
    add4:	e13ff517 	ldw	r4,-44(fp)
    add8:	000aaec0 	call	aaec <altera_a10_cdr_calc_params>

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
    addc:	e0bffb17 	ldw	r2,-20(fp)
    ade0:	10000626 	beq	r2,zero,adfc <altera_a10_cdr_pll_round_rate+0x80>
    ade4:	e0bffa17 	ldw	r2,-24(fp)
    ade8:	10000426 	beq	r2,zero,adfc <altera_a10_cdr_pll_round_rate+0x80>
    adec:	e0bff917 	ldw	r2,-28(fp)
    adf0:	10000226 	beq	r2,zero,adfc <altera_a10_cdr_pll_round_rate+0x80>
    adf4:	e0bff817 	ldw	r2,-32(fp)
    adf8:	1000021e 	bne	r2,zero,ae04 <altera_a10_cdr_pll_round_rate+0x88>
		return -1;
    adfc:	00bfffc4 	movi	r2,-1
    ae00:	00002b06 	br	aeb0 <altera_a10_cdr_pll_round_rate+0x134>

	tmp = (uint32_t)fref_khz * m * lpfd * 2;
    ae04:	e0fffa17 	ldw	r3,-24(fp)
    ae08:	e0bff517 	ldw	r2,-44(fp)
    ae0c:	1887383a 	mul	r3,r3,r2
    ae10:	e0bff917 	ldw	r2,-28(fp)
    ae14:	1885383a 	mul	r2,r3,r2
    ae18:	1085883a 	add	r2,r2,r2
    ae1c:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, n * lpd);
    ae20:	e13ffc17 	ldw	r4,-16(fp)
    ae24:	000fa300 	call	fa30 <__floatunsidf>
    ae28:	1021883a 	mov	r16,r2
    ae2c:	1823883a 	mov	r17,r3
    ae30:	e0fffb17 	ldw	r3,-20(fp)
    ae34:	e0bff817 	ldw	r2,-32(fp)
    ae38:	1885383a 	mul	r2,r3,r2
    ae3c:	1009883a 	mov	r4,r2
    ae40:	000fa300 	call	fa30 <__floatunsidf>
    ae44:	1009883a 	mov	r4,r2
    ae48:	180b883a 	mov	r5,r3
    ae4c:	200d883a 	mov	r6,r4
    ae50:	280f883a 	mov	r7,r5
    ae54:	8009883a 	mov	r4,r16
    ae58:	880b883a 	mov	r5,r17
    ae5c:	000e0540 	call	e054 <__divdf3>
    ae60:	1009883a 	mov	r4,r2
    ae64:	180b883a 	mov	r5,r3
    ae68:	2005883a 	mov	r2,r4
    ae6c:	2807883a 	mov	r3,r5
    ae70:	000d883a 	mov	r6,zero
    ae74:	01cff834 	movhi	r7,16352
    ae78:	1009883a 	mov	r4,r2
    ae7c:	180b883a 	mov	r5,r3
    ae80:	000d7940 	call	d794 <__adddf3>
    ae84:	1009883a 	mov	r4,r2
    ae88:	180b883a 	mov	r5,r3
    ae8c:	2005883a 	mov	r2,r4
    ae90:	2807883a 	mov	r3,r5
    ae94:	1009883a 	mov	r4,r2
    ae98:	180b883a 	mov	r5,r3
    ae9c:	000ca5c0 	call	ca5c <__fixunsdfdi>
    aea0:	1009883a 	mov	r4,r2
    aea4:	180b883a 	mov	r5,r3
    aea8:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
    aeac:	e0bffc17 	ldw	r2,-16(fp)
}
    aeb0:	e6fffe04 	addi	sp,fp,-8
    aeb4:	dfc00317 	ldw	ra,12(sp)
    aeb8:	df000217 	ldw	fp,8(sp)
    aebc:	dc400117 	ldw	r17,4(sp)
    aec0:	dc000017 	ldw	r16,0(sp)
    aec4:	dec00404 	addi	sp,sp,16
    aec8:	f800283a 	ret

0000aecc <altera_a10_cdr_pll_set_rate>:
/*******************************************************************************
* @brief altera_a10_cdr_pll_set_rate
*******************************************************************************/
int32_t altera_a10_cdr_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
    aecc:	deffe904 	addi	sp,sp,-92
    aed0:	dfc01615 	stw	ra,88(sp)
    aed4:	df001515 	stw	fp,84(sp)
    aed8:	df001504 	addi	fp,sp,84
    aedc:	e13ff015 	stw	r4,-64(fp)
    aee0:	e17fef15 	stw	r5,-68(fp)
    aee4:	e1bfee15 	stw	r6,-72(fp)
	uint32_t cp_current_pd, lfr_pd;
	uint32_t cp_current_pfd, lfr_pfd;
	uint32_t clkdiv_low;
	uint32_t fast_lock;

	fout_khz = l_rate_kbps/2;
    aee8:	e0bfef17 	ldw	r2,-68(fp)
    aeec:	1004d07a 	srli	r2,r2,1
    aef0:	e0bffe15 	stw	r2,-8(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
    aef4:	e13ff404 	addi	r4,fp,-48
    aef8:	e0fff504 	addi	r3,fp,-44
    aefc:	e0bff104 	addi	r2,fp,-60
    af00:	d8800215 	stw	r2,8(sp)
    af04:	e0bff204 	addi	r2,fp,-56
    af08:	d8800115 	stw	r2,4(sp)
    af0c:	e0bff304 	addi	r2,fp,-52
    af10:	d8800015 	stw	r2,0(sp)
    af14:	200f883a 	mov	r7,r4
    af18:	180d883a 	mov	r6,r3
    af1c:	e17ffe17 	ldw	r5,-8(fp)
    af20:	e13fee17 	ldw	r4,-72(fp)
    af24:	000aaec0 	call	aaec <altera_a10_cdr_calc_params>
	printf("\tlpfd: %d\n", lpfd);
	printf("\tlpd: %d\n", lpd);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
    af28:	e0bff517 	ldw	r2,-44(fp)
    af2c:	10000626 	beq	r2,zero,af48 <altera_a10_cdr_pll_set_rate+0x7c>
    af30:	e0bff417 	ldw	r2,-48(fp)
    af34:	10000426 	beq	r2,zero,af48 <altera_a10_cdr_pll_set_rate+0x7c>
    af38:	e0bff317 	ldw	r2,-52(fp)
    af3c:	10000226 	beq	r2,zero,af48 <altera_a10_cdr_pll_set_rate+0x7c>
    af40:	e0bff217 	ldw	r2,-56(fp)
    af44:	1000021e 	bne	r2,zero,af50 <altera_a10_cdr_pll_set_rate+0x84>
		return -1;
    af48:	00bfffc4 	movi	r2,-1
    af4c:	00012a06 	br	b3f8 <altera_a10_cdr_pll_set_rate+0x52c>

	switch (n) {
    af50:	e0bff517 	ldw	r2,-44(fp)
    af54:	10c000a0 	cmpeqi	r3,r2,2
    af58:	1800061e 	bne	r3,zero,af74 <altera_a10_cdr_pll_set_rate+0xa8>
    af5c:	10c00120 	cmpeqi	r3,r2,4
    af60:	1800071e 	bne	r3,zero,af80 <altera_a10_cdr_pll_set_rate+0xb4>
    af64:	10800060 	cmpeqi	r2,r2,1
    af68:	10000826 	beq	r2,zero,af8c <altera_a10_cdr_pll_set_rate+0xc0>
	case 1:
		n = 0;
    af6c:	e03ff515 	stw	zero,-44(fp)
		break;
    af70:	00000906 	br	af98 <altera_a10_cdr_pll_set_rate+0xcc>
	case 2:
		n = 1;
    af74:	00800044 	movi	r2,1
    af78:	e0bff515 	stw	r2,-44(fp)
		break;
    af7c:	00000606 	br	af98 <altera_a10_cdr_pll_set_rate+0xcc>
	case 4:
		n = 2;
    af80:	00800084 	movi	r2,2
    af84:	e0bff515 	stw	r2,-44(fp)
		break;
    af88:	00000306 	br	af98 <altera_a10_cdr_pll_set_rate+0xcc>
	default:
		n = 3;
    af8c:	008000c4 	movi	r2,3
    af90:	e0bff515 	stw	r2,-44(fp)
		break;
    af94:	0001883a 	nop
	}

	switch (lpd) {
    af98:	e0bff217 	ldw	r2,-56(fp)
    af9c:	10c000a0 	cmpeqi	r3,r2,2
    afa0:	18000d1e 	bne	r3,zero,afd8 <altera_a10_cdr_pll_set_rate+0x10c>
    afa4:	10c000e8 	cmpgeui	r3,r2,3
    afa8:	1800031e 	bne	r3,zero,afb8 <altera_a10_cdr_pll_set_rate+0xec>
    afac:	10800060 	cmpeqi	r2,r2,1
    afb0:	1000061e 	bne	r2,zero,afcc <altera_a10_cdr_pll_set_rate+0x100>
    afb4:	00001106 	br	affc <altera_a10_cdr_pll_set_rate+0x130>
    afb8:	10c00120 	cmpeqi	r3,r2,4
    afbc:	1800091e 	bne	r3,zero,afe4 <altera_a10_cdr_pll_set_rate+0x118>
    afc0:	10800220 	cmpeqi	r2,r2,8
    afc4:	10000a1e 	bne	r2,zero,aff0 <altera_a10_cdr_pll_set_rate+0x124>
    afc8:	00000c06 	br	affc <altera_a10_cdr_pll_set_rate+0x130>
	case 1:
		lpd = 1;
    afcc:	00800044 	movi	r2,1
    afd0:	e0bff215 	stw	r2,-56(fp)
		break;
    afd4:	00000c06 	br	b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 2:
		lpd = 3;
    afd8:	008000c4 	movi	r2,3
    afdc:	e0bff215 	stw	r2,-56(fp)
		break;
    afe0:	00000906 	br	b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 4:
		lpd = 4;
    afe4:	00800104 	movi	r2,4
    afe8:	e0bff215 	stw	r2,-56(fp)
		break;
    afec:	00000606 	br	b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 8:
		lpd = 5;
    aff0:	00800144 	movi	r2,5
    aff4:	e0bff215 	stw	r2,-56(fp)
		break;
    aff8:	00000306 	br	b008 <altera_a10_cdr_pll_set_rate+0x13c>
	default:
		lpd = 6;
    affc:	00800184 	movi	r2,6
    b000:	e0bff215 	stw	r2,-56(fp)
		break;
    b004:	0001883a 	nop
	}

	switch (lpfd) {
    b008:	e0bff317 	ldw	r2,-52(fp)
    b00c:	10800060 	cmpeqi	r2,r2,1
    b010:	10000326 	beq	r2,zero,b020 <altera_a10_cdr_pll_set_rate+0x154>
	case 1:
		lpfd = 2;
    b014:	00800084 	movi	r2,2
    b018:	e0bff315 	stw	r2,-52(fp)
		break;
    b01c:	00000306 	br	b02c <altera_a10_cdr_pll_set_rate+0x160>
	default:
		lpfd = 3;
    b020:	008000c4 	movi	r2,3
    b024:	e0bff315 	stw	r2,-52(fp)
		break;
    b028:	0001883a 	nop
	}

	vco_speed = altera_a10_cdr_lookup_vco_speed(fvco);
    b02c:	e0bff117 	ldw	r2,-60(fp)
    b030:	1009883a 	mov	r4,r2
    b034:	000a3880 	call	a388 <altera_a10_cdr_lookup_vco_speed>
    b038:	e0bffd15 	stw	r2,-12(fp)
	vco_speed_fix = altera_a10_cdr_lookup_vco_speed_fix(fvco);
    b03c:	e0bff117 	ldw	r2,-60(fp)
    b040:	1009883a 	mov	r4,r2
    b044:	000a3dc0 	call	a3dc <altera_a10_cdr_lookup_vco_speed_fix>
    b048:	e0bffc15 	stw	r2,-16(fp)
	clkdiv_low = altera_a10_cdr_lookup_clklow_div(fref_khz);
    b04c:	e13fee17 	ldw	r4,-72(fp)
    b050:	000a4dc0 	call	a4dc <altera_a10_cdr_lookup_clklow_div>
    b054:	e0bffb15 	stw	r2,-20(fp)
	fast_lock = altera_a10_cdr_lookup_fastlock(lpd);
    b058:	e0bff217 	ldw	r2,-56(fp)
    b05c:	1009883a 	mov	r4,r2
    b060:	000a5180 	call	a518 <altera_a10_cdr_lookup_fastlock>
    b064:	e0bffa15 	stw	r2,-24(fp)
	cp_current_pd = altera_a10_cdr_lookup_cp_current_pd(fvco, lpd);
    b068:	e0bff117 	ldw	r2,-60(fp)
    b06c:	e0fff217 	ldw	r3,-56(fp)
    b070:	180b883a 	mov	r5,r3
    b074:	1009883a 	mov	r4,r2
    b078:	000a4900 	call	a490 <altera_a10_cdr_lookup_cp_current_pd>
    b07c:	e0bff915 	stw	r2,-28(fp)
	lfr_pd = altera_a10_cdr_lookup_lf_resistor_pd(fvco, lpd);
    b080:	e0bff117 	ldw	r2,-60(fp)
    b084:	e0fff217 	ldw	r3,-56(fp)
    b088:	180b883a 	mov	r5,r3
    b08c:	1009883a 	mov	r4,r2
    b090:	000a5500 	call	a550 <altera_a10_cdr_lookup_lf_resistor_pd>
    b094:	e0bff815 	stw	r2,-32(fp)
	cp_current_pfd = altera_a10_cdr_lookup_cp_current_pfd(fvco, m, lpfd);
    b098:	e0bff117 	ldw	r2,-60(fp)
    b09c:	e0fff417 	ldw	r3,-48(fp)
    b0a0:	e13ff317 	ldw	r4,-52(fp)
    b0a4:	200d883a 	mov	r6,r4
    b0a8:	180b883a 	mov	r5,r3
    b0ac:	1009883a 	mov	r4,r2
    b0b0:	000a7500 	call	a750 <altera_a10_cdr_lookup_cp_current_pfd>
    b0b4:	e0bff715 	stw	r2,-36(fp)
	lfr_pfd = altera_a10_cdr_lookup_lf_resistor_pfd(fvco, m, lpfd);
    b0b8:	e0bff117 	ldw	r2,-60(fp)
    b0bc:	e0fff417 	ldw	r3,-48(fp)
    b0c0:	e13ff317 	ldw	r4,-52(fp)
    b0c4:	200d883a 	mov	r6,r4
    b0c8:	180b883a 	mov	r5,r3
    b0cc:	1009883a 	mov	r4,r2
    b0d0:	000a5dc0 	call	a5dc <altera_a10_cdr_lookup_lf_resistor_pfd>
    b0d4:	e0bff615 	stw	r2,-40(fp)

	for (i = 0; i < core->num_lanes/*lanes_per_link*/; i++) {
    b0d8:	e03fff15 	stw	zero,-4(fp)
    b0dc:	0000be06 	br	b3d8 <altera_a10_cdr_pll_set_rate+0x50c>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[i]));
    b0e0:	e0bfff17 	ldw	r2,-4(fp)
    b0e4:	10800324 	muli	r2,r2,12
    b0e8:	10801004 	addi	r2,r2,64
    b0ec:	e0fff017 	ldw	r3,-64(fp)
    b0f0:	1885883a 	add	r2,r3,r2
    b0f4:	1009883a 	mov	r4,r2
    b0f8:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

		pll_update(&(core->dev.channel_pll[i]), 0x132, 0x05, ((vco_speed_fix & 0x80) >> 7) | ((vco_speed_fix & 0x40) >> 4));
    b0fc:	e0bfff17 	ldw	r2,-4(fp)
    b100:	10800324 	muli	r2,r2,12
    b104:	10801004 	addi	r2,r2,64
    b108:	e0fff017 	ldw	r3,-64(fp)
    b10c:	1889883a 	add	r4,r3,r2
    b110:	e0bffc17 	ldw	r2,-16(fp)
    b114:	1004d1fa 	srli	r2,r2,7
    b118:	10c0004c 	andi	r3,r2,1
    b11c:	e0bffc17 	ldw	r2,-16(fp)
    b120:	1004d13a 	srli	r2,r2,4
    b124:	1080010c 	andi	r2,r2,4
    b128:	1884b03a 	or	r2,r3,r2
    b12c:	100f883a 	mov	r7,r2
    b130:	01800144 	movi	r6,5
    b134:	01404c84 	movi	r5,306
    b138:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x133, 0xe0, cp_current_pd << 5);
    b13c:	e0bfff17 	ldw	r2,-4(fp)
    b140:	10800324 	muli	r2,r2,12
    b144:	10801004 	addi	r2,r2,64
    b148:	e0fff017 	ldw	r3,-64(fp)
    b14c:	1887883a 	add	r3,r3,r2
    b150:	e0bff917 	ldw	r2,-28(fp)
    b154:	1004917a 	slli	r2,r2,5
    b158:	100f883a 	mov	r7,r2
    b15c:	01803804 	movi	r6,224
    b160:	01404cc4 	movi	r5,307
    b164:	1809883a 	mov	r4,r3
    b168:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x134, 0x40, (vco_speed_fix & 0x10) << 2);
    b16c:	e0bfff17 	ldw	r2,-4(fp)
    b170:	10800324 	muli	r2,r2,12
    b174:	10801004 	addi	r2,r2,64
    b178:	e0fff017 	ldw	r3,-64(fp)
    b17c:	1887883a 	add	r3,r3,r2
    b180:	e0bffc17 	ldw	r2,-16(fp)
    b184:	100490ba 	slli	r2,r2,2
    b188:	1080100c 	andi	r2,r2,64
    b18c:	100f883a 	mov	r7,r2
    b190:	01801004 	movi	r6,64
    b194:	01404d04 	movi	r5,308
    b198:	1809883a 	mov	r4,r3
    b19c:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x135, 0x4f, (vco_speed_fix & 0x20) << 1 | (lfr_pd << 2) | lfr_pfd);
    b1a0:	e0bfff17 	ldw	r2,-4(fp)
    b1a4:	10800324 	muli	r2,r2,12
    b1a8:	10801004 	addi	r2,r2,64
    b1ac:	e0fff017 	ldw	r3,-64(fp)
    b1b0:	1889883a 	add	r4,r3,r2
    b1b4:	e0bffc17 	ldw	r2,-16(fp)
    b1b8:	1085883a 	add	r2,r2,r2
    b1bc:	10c0100c 	andi	r3,r2,64
    b1c0:	e0bff817 	ldw	r2,-32(fp)
    b1c4:	100490ba 	slli	r2,r2,2
    b1c8:	1886b03a 	or	r3,r3,r2
    b1cc:	e0bff617 	ldw	r2,-40(fp)
    b1d0:	1884b03a 	or	r2,r3,r2
    b1d4:	100f883a 	mov	r7,r2
    b1d8:	018013c4 	movi	r6,79
    b1dc:	01404d44 	movi	r5,309
    b1e0:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x136, 0x0f, vco_speed_fix & 0xf);
    b1e4:	e0bfff17 	ldw	r2,-4(fp)
    b1e8:	10800324 	muli	r2,r2,12
    b1ec:	10801004 	addi	r2,r2,64
    b1f0:	e0fff017 	ldw	r3,-64(fp)
    b1f4:	1887883a 	add	r3,r3,r2
    b1f8:	e0bffc17 	ldw	r2,-16(fp)
    b1fc:	108003cc 	andi	r2,r2,15
    b200:	100f883a 	mov	r7,r2
    b204:	018003c4 	movi	r6,15
    b208:	01404d84 	movi	r5,310
    b20c:	1809883a 	mov	r4,r3
    b210:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x137, 0x7c, vco_speed << 2);
    b214:	e0bfff17 	ldw	r2,-4(fp)
    b218:	10800324 	muli	r2,r2,12
    b21c:	10801004 	addi	r2,r2,64
    b220:	e0fff017 	ldw	r3,-64(fp)
    b224:	1887883a 	add	r3,r3,r2
    b228:	e0bffd17 	ldw	r2,-12(fp)
    b22c:	100490ba 	slli	r2,r2,2
    b230:	100f883a 	mov	r7,r2
    b234:	01801f04 	movi	r6,124
    b238:	01404dc4 	movi	r5,311
    b23c:	1809883a 	mov	r4,r3
    b240:	000b5cc0 	call	b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x139, 0xbf, (fast_lock << 7) | (cp_current_pd << 3) | cp_current_pfd);
    b244:	e0bfff17 	ldw	r2,-4(fp)
    b248:	10800324 	muli	r2,r2,12
    b24c:	10801004 	addi	r2,r2,64
    b250:	e0fff017 	ldw	r3,-64(fp)
    b254:	1889883a 	add	r4,r3,r2
    b258:	e0bffa17 	ldw	r2,-24(fp)
    b25c:	100691fa 	slli	r3,r2,7
    b260:	e0bff917 	ldw	r2,-28(fp)
    b264:	100490fa 	slli	r2,r2,3
    b268:	1886b03a 	or	r3,r3,r2
    b26c:	e0bff717 	ldw	r2,-36(fp)
    b270:	1884b03a 	or	r2,r3,r2
    b274:	100f883a 	mov	r7,r2
    b278:	01802fc4 	movi	r6,191
    b27c:	01404e44 	movi	r5,313
    b280:	000b5cc0 	call	b5cc <pll_update>

		a10_pll_write(&(core->dev.channel_pll[i]), 0x13a, (clkdiv_low << 6) | (lpd << 3) | lpfd);
    b284:	e0bfff17 	ldw	r2,-4(fp)
    b288:	10800324 	muli	r2,r2,12
    b28c:	10801004 	addi	r2,r2,64
    b290:	e0fff017 	ldw	r3,-64(fp)
    b294:	1889883a 	add	r4,r3,r2
    b298:	e0bffb17 	ldw	r2,-20(fp)
    b29c:	100691ba 	slli	r3,r2,6
    b2a0:	e0bff217 	ldw	r2,-56(fp)
    b2a4:	100490fa 	slli	r2,r2,3
    b2a8:	1886b03a 	or	r3,r3,r2
    b2ac:	e0bff317 	ldw	r2,-52(fp)
    b2b0:	1884b03a 	or	r2,r3,r2
    b2b4:	100d883a 	mov	r6,r2
    b2b8:	01404e84 	movi	r5,314
    b2bc:	000b5780 	call	b578 <a10_pll_write>
		a10_pll_write(&(core->dev.channel_pll[i]), 0x13b, m);
    b2c0:	e0bfff17 	ldw	r2,-4(fp)
    b2c4:	10800324 	muli	r2,r2,12
    b2c8:	10801004 	addi	r2,r2,64
    b2cc:	e0fff017 	ldw	r3,-64(fp)
    b2d0:	1885883a 	add	r2,r3,r2
    b2d4:	e0fff417 	ldw	r3,-48(fp)
    b2d8:	180d883a 	mov	r6,r3
    b2dc:	01404ec4 	movi	r5,315
    b2e0:	1009883a 	mov	r4,r2
    b2e4:	000b5780 	call	b578 <a10_pll_write>
		pll_update(&(core->dev.channel_pll[i]), 0x13c, 0x0c, n << 2);
    b2e8:	e0bfff17 	ldw	r2,-4(fp)
    b2ec:	10800324 	muli	r2,r2,12
    b2f0:	10801004 	addi	r2,r2,64
    b2f4:	e0fff017 	ldw	r3,-64(fp)
    b2f8:	1887883a 	add	r3,r3,r2
    b2fc:	e0bff517 	ldw	r2,-44(fp)
    b300:	100490ba 	slli	r2,r2,2
    b304:	100f883a 	mov	r7,r2
    b308:	01800304 	movi	r6,12
    b30c:	01404f04 	movi	r5,316
    b310:	1809883a 	mov	r4,r3
    b314:	000b5cc0 	call	b5cc <pll_update>

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CALIB_PMA_EN,
    b318:	e0bfff17 	ldw	r2,-4(fp)
    b31c:	10800324 	muli	r2,r2,12
    b320:	10801004 	addi	r2,r2,64
    b324:	e0fff017 	ldw	r3,-64(fp)
    b328:	1885883a 	add	r2,r3,r2
    b32c:	01c00084 	movi	r7,2
    b330:	01800084 	movi	r6,2
    b334:	01404004 	movi	r5,256
    b338:	1009883a 	mov	r4,r2
    b33c:	000b5cc0 	call	b5cc <pll_update>
			XCVR_CALIB_CMU_CDR_PLL_EN_MASK,
			XCVR_CALIB_CMU_CDR_PLL_EN);

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_RATE_SWITCH_FLAG,
    b340:	e0bfff17 	ldw	r2,-4(fp)
    b344:	10800324 	muli	r2,r2,12
    b348:	10801004 	addi	r2,r2,64
    b34c:	e0fff017 	ldw	r3,-64(fp)
    b350:	1885883a 	add	r2,r3,r2
    b354:	000f883a 	mov	r7,zero
    b358:	01802004 	movi	r6,128
    b35c:	01405984 	movi	r5,358
    b360:	1009883a 	mov	r4,r2
    b364:	000b5cc0 	call	b5cc <pll_update>

		/*
		 * Disable tx_cal_busy and enable rx_cal_busy output through
		 * capability register.
		 */
		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CAPAB_PMA,
    b368:	e0bfff17 	ldw	r2,-4(fp)
    b36c:	10800324 	muli	r2,r2,12
    b370:	10801004 	addi	r2,r2,64
    b374:	e0fff017 	ldw	r3,-64(fp)
    b378:	1885883a 	add	r2,r3,r2
    b37c:	01c00804 	movi	r7,32
    b380:	01800c04 	movi	r6,48
    b384:	0140a044 	movi	r5,641
    b388:	1009883a 	mov	r4,r2
    b38c:	000b5cc0 	call	b5cc <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_EN |
			XCVR_CAPAB_TX_CAL_BUSY_DIS);

		altera_a10_release_arbitration(&(core->dev.channel_pll[i]), TRUE);
    b390:	e0bfff17 	ldw	r2,-4(fp)
    b394:	10800324 	muli	r2,r2,12
    b398:	10801004 	addi	r2,r2,64
    b39c:	e0fff017 	ldw	r3,-64(fp)
    b3a0:	1885883a 	add	r2,r3,r2
    b3a4:	01400044 	movi	r5,1
    b3a8:	1009883a 	mov	r4,r2
    b3ac:	000b7380 	call	b738 <altera_a10_release_arbitration>

		pll_calibration_check(&(core->dev.channel_pll[i]));
    b3b0:	e0bfff17 	ldw	r2,-4(fp)
    b3b4:	10800324 	muli	r2,r2,12
    b3b8:	10801004 	addi	r2,r2,64
    b3bc:	e0fff017 	ldw	r3,-64(fp)
    b3c0:	1885883a 	add	r2,r3,r2
    b3c4:	1009883a 	mov	r4,r2
    b3c8:	000b7900 	call	b790 <pll_calibration_check>
	for (i = 0; i < core->num_lanes/*lanes_per_link*/; i++) {
    b3cc:	e0bfff17 	ldw	r2,-4(fp)
    b3d0:	10800044 	addi	r2,r2,1
    b3d4:	e0bfff15 	stw	r2,-4(fp)
    b3d8:	e0bff017 	ldw	r2,-64(fp)
    b3dc:	10800003 	ldbu	r2,0(r2)
    b3e0:	10803fcc 	andi	r2,r2,255
    b3e4:	e0ffff17 	ldw	r3,-4(fp)
    b3e8:	18bf3d36 	bltu	r3,r2,b0e0 <__alt_mem_mcu_subsystem_ram_0+0x77feb0e0>
	}

	core->initial_recalc = FALSE;
    b3ec:	e0bff017 	ldw	r2,-64(fp)
    b3f0:	10000905 	stb	zero,36(r2)

	return 0;
    b3f4:	0005883a 	mov	r2,zero
}
    b3f8:	e037883a 	mov	sp,fp
    b3fc:	dfc00117 	ldw	ra,4(sp)
    b400:	df000017 	ldw	fp,0(sp)
    b404:	dec00204 	addi	sp,sp,8
    b408:	f800283a 	ret

0000b40c <altera_a10_calib_tx_pll>:

/*******************************************************************************
* @brief altera_a10_calib_tx_pll
*******************************************************************************/
int32_t altera_a10_calib_tx_pll(xcvr_core *core)
{
    b40c:	defffc04 	addi	sp,sp,-16
    b410:	dfc00315 	stw	ra,12(sp)
    b414:	df000215 	stw	fp,8(sp)
    b418:	df000204 	addi	fp,sp,8
    b41c:	e13ffe15 	stw	r4,-8(fp)
	uint16_t lane;
	uint16_t err = 0;
    b420:	e03fff0d 	sth	zero,-4(fp)

	for (lane = 0; lane < core->num_lanes/*lanes_per_link*/; lane++) {
    b424:	e03fff8d 	sth	zero,-2(fp)
    b428:	00003106 	br	b4f0 <altera_a10_calib_tx_pll+0xe4>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[lane]));
    b42c:	e0bfff8b 	ldhu	r2,-2(fp)
    b430:	10800324 	muli	r2,r2,12
    b434:	10801004 	addi	r2,r2,64
    b438:	e0fffe17 	ldw	r3,-8(fp)
    b43c:	1885883a 	add	r2,r3,r2
    b440:	1009883a 	mov	r4,r2
    b444:	000b6500 	call	b650 <altera_a10_acquire_arbitration>

		/* Perform TX termination & Vod calibration through
		   PMA calibration enable register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CALIB_PMA_EN,
    b448:	e0bfff8b 	ldhu	r2,-2(fp)
    b44c:	10800324 	muli	r2,r2,12
    b450:	10801004 	addi	r2,r2,64
    b454:	e0fffe17 	ldw	r3,-8(fp)
    b458:	1885883a 	add	r2,r3,r2
    b45c:	01c00804 	movi	r7,32
    b460:	01800804 	movi	r6,32
    b464:	01404004 	movi	r5,256
    b468:	1009883a 	mov	r4,r2
    b46c:	000b5cc0 	call	b5cc <pll_update>
			XCVR_CALIB_TX_TERM_VOD_MASK,
			XCVR_CALIB_TX_TERM_VOD_EN);

		/* Disable rx_cal_busy and enable tx_cal_busy output through
		   capability register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CAPAB_PMA,
    b470:	e0bfff8b 	ldhu	r2,-2(fp)
    b474:	10800324 	muli	r2,r2,12
    b478:	10801004 	addi	r2,r2,64
    b47c:	e0fffe17 	ldw	r3,-8(fp)
    b480:	1885883a 	add	r2,r3,r2
    b484:	01c00404 	movi	r7,16
    b488:	01800c04 	movi	r6,48
    b48c:	0140a044 	movi	r5,641
    b490:	1009883a 	mov	r4,r2
    b494:	000b5cc0 	call	b5cc <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_DIS |
			XCVR_CAPAB_TX_CAL_BUSY_EN);

		altera_a10_release_arbitration(&(core->dev.channel_pll[lane]), TRUE);
    b498:	e0bfff8b 	ldhu	r2,-2(fp)
    b49c:	10800324 	muli	r2,r2,12
    b4a0:	10801004 	addi	r2,r2,64
    b4a4:	e0fffe17 	ldw	r3,-8(fp)
    b4a8:	1885883a 	add	r2,r3,r2
    b4ac:	01400044 	movi	r5,1
    b4b0:	1009883a 	mov	r4,r2
    b4b4:	000b7380 	call	b738 <altera_a10_release_arbitration>

		err |= pll_calibration_check(&(core->dev.channel_pll[lane]));
    b4b8:	e0bfff8b 	ldhu	r2,-2(fp)
    b4bc:	10800324 	muli	r2,r2,12
    b4c0:	10801004 	addi	r2,r2,64
    b4c4:	e0fffe17 	ldw	r3,-8(fp)
    b4c8:	1885883a 	add	r2,r3,r2
    b4cc:	1009883a 	mov	r4,r2
    b4d0:	000b7900 	call	b790 <pll_calibration_check>
    b4d4:	10803fcc 	andi	r2,r2,255
    b4d8:	e0ffff0b 	ldhu	r3,-4(fp)
    b4dc:	1884b03a 	or	r2,r3,r2
    b4e0:	e0bfff0d 	sth	r2,-4(fp)
	for (lane = 0; lane < core->num_lanes/*lanes_per_link*/; lane++) {
    b4e4:	e0bfff8b 	ldhu	r2,-2(fp)
    b4e8:	10800044 	addi	r2,r2,1
    b4ec:	e0bfff8d 	sth	r2,-2(fp)
    b4f0:	e0bffe17 	ldw	r2,-8(fp)
    b4f4:	10800003 	ldbu	r2,0(r2)
    b4f8:	10803fcc 	andi	r2,r2,255
    b4fc:	e0ffff8b 	ldhu	r3,-2(fp)
    b500:	10bfffcc 	andi	r2,r2,65535
    b504:	18bfc936 	bltu	r3,r2,b42c <__alt_mem_mcu_subsystem_ram_0+0x77feb42c>
	}

	return err;
    b508:	e0bfff0b 	ldhu	r2,-4(fp)
}
    b50c:	e037883a 	mov	sp,fp
    b510:	dfc00117 	ldw	ra,4(sp)
    b514:	df000017 	ldw	fp,0(sp)
    b518:	dec00204 	addi	sp,sp,8
    b51c:	f800283a 	ret

0000b520 <a10_pll_read>:
* @brief a10_pll_read
*******************************************************************************/
int32_t a10_pll_read(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
    b520:	defffc04 	addi	sp,sp,-16
    b524:	df000315 	stw	fp,12(sp)
    b528:	df000304 	addi	fp,sp,12
    b52c:	e13fff15 	stw	r4,-4(fp)
    b530:	e17ffe15 	stw	r5,-8(fp)
    b534:	e1bffd15 	stw	r6,-12(fp)
	reg_addr = reg_addr << 2; // left shift 2 (byte align address)
    b538:	e0bffe17 	ldw	r2,-8(fp)
    b53c:	100490ba 	slli	r2,r2,2
    b540:	e0bffe15 	stw	r2,-8(fp)
	*reg_data = ad_reg_read((mypll->base_address + reg_addr));
    b544:	e0bfff17 	ldw	r2,-4(fp)
    b548:	10c00117 	ldw	r3,4(r2)
    b54c:	e0bffe17 	ldw	r2,-8(fp)
    b550:	1885883a 	add	r2,r3,r2
    b554:	10800037 	ldwio	r2,0(r2)
    b558:	1007883a 	mov	r3,r2
    b55c:	e0bffd17 	ldw	r2,-12(fp)
    b560:	10c00015 	stw	r3,0(r2)

	return 0;
    b564:	0005883a 	mov	r2,zero
}
    b568:	e037883a 	mov	sp,fp
    b56c:	df000017 	ldw	fp,0(sp)
    b570:	dec00104 	addi	sp,sp,4
    b574:	f800283a 	ret

0000b578 <a10_pll_write>:
* @brief a10_pll_write
*******************************************************************************/
int32_t a10_pll_write(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t reg_data)
{
    b578:	defffc04 	addi	sp,sp,-16
    b57c:	df000315 	stw	fp,12(sp)
    b580:	df000304 	addi	fp,sp,12
    b584:	e13fff15 	stw	r4,-4(fp)
    b588:	e17ffe15 	stw	r5,-8(fp)
    b58c:	e1bffd15 	stw	r6,-12(fp)
	reg_addr = reg_addr << 2; // left shift 2 (byte align address)
    b590:	e0bffe17 	ldw	r2,-8(fp)
    b594:	100490ba 	slli	r2,r2,2
    b598:	e0bffe15 	stw	r2,-8(fp)
	ad_reg_write((mypll->base_address + reg_addr), reg_data);
    b59c:	e0bfff17 	ldw	r2,-4(fp)
    b5a0:	10c00117 	ldw	r3,4(r2)
    b5a4:	e0bffe17 	ldw	r2,-8(fp)
    b5a8:	1885883a 	add	r2,r3,r2
    b5ac:	1007883a 	mov	r3,r2
    b5b0:	e0bffd17 	ldw	r2,-12(fp)
    b5b4:	18800035 	stwio	r2,0(r3)

	return 0;
    b5b8:	0005883a 	mov	r2,zero
}
    b5bc:	e037883a 	mov	sp,fp
    b5c0:	df000017 	ldw	fp,0(sp)
    b5c4:	dec00104 	addi	sp,sp,4
    b5c8:	f800283a 	ret

0000b5cc <pll_update>:
/*******************************************************************************
* @brief pll_update
*******************************************************************************/
void pll_update(xcvr_pll *mypll,
	uint32_t addr, uint32_t mask, uint32_t val)
{
    b5cc:	defff904 	addi	sp,sp,-28
    b5d0:	dfc00615 	stw	ra,24(sp)
    b5d4:	df000515 	stw	fp,20(sp)
    b5d8:	df000504 	addi	fp,sp,20
    b5dc:	e13ffe15 	stw	r4,-8(fp)
    b5e0:	e17ffd15 	stw	r5,-12(fp)
    b5e4:	e1bffc15 	stw	r6,-16(fp)
    b5e8:	e1fffb15 	stw	r7,-20(fp)
	uint32_t rval;

	a10_pll_read(mypll, addr, &rval);
    b5ec:	e0bfff04 	addi	r2,fp,-4
    b5f0:	100d883a 	mov	r6,r2
    b5f4:	e17ffd17 	ldw	r5,-12(fp)
    b5f8:	e13ffe17 	ldw	r4,-8(fp)
    b5fc:	000b5200 	call	b520 <a10_pll_read>
	rval &= ~mask;
    b600:	e0bffc17 	ldw	r2,-16(fp)
    b604:	0086303a 	nor	r3,zero,r2
    b608:	e0bfff17 	ldw	r2,-4(fp)
    b60c:	1884703a 	and	r2,r3,r2
    b610:	e0bfff15 	stw	r2,-4(fp)
	rval |= val;
    b614:	e0ffff17 	ldw	r3,-4(fp)
    b618:	e0bffb17 	ldw	r2,-20(fp)
    b61c:	1884b03a 	or	r2,r3,r2
    b620:	e0bfff15 	stw	r2,-4(fp)
	a10_pll_write(mypll, addr, rval);
    b624:	e0bfff17 	ldw	r2,-4(fp)
    b628:	100d883a 	mov	r6,r2
    b62c:	e17ffd17 	ldw	r5,-12(fp)
    b630:	e13ffe17 	ldw	r4,-8(fp)
    b634:	000b5780 	call	b578 <a10_pll_write>
}
    b638:	0001883a 	nop
    b63c:	e037883a 	mov	sp,fp
    b640:	dfc00117 	ldw	ra,4(sp)
    b644:	df000017 	ldw	fp,0(sp)
    b648:	dec00204 	addi	sp,sp,8
    b64c:	f800283a 	ret

0000b650 <altera_a10_acquire_arbitration>:

/*******************************************************************************
* @brief altera_a10_acquire_arbitration
*******************************************************************************/
uint32_t altera_a10_acquire_arbitration(xcvr_pll *mypll)
{
    b650:	defffa04 	addi	sp,sp,-24
    b654:	dfc00515 	stw	ra,20(sp)
    b658:	df000415 	stw	fp,16(sp)
    b65c:	df000404 	addi	fp,sp,16
    b660:	e13ffc15 	stw	r4,-16(fp)
	uint32_t timeout = 0;
    b664:	e03fff15 	stw	zero,-4(fp)
	uint32_t status;
	uint32_t arb_status;

	switch (mypll->type) {
    b668:	e0bffc17 	ldw	r2,-16(fp)
    b66c:	10800017 	ldw	r2,0(r2)
    b670:	10c000b0 	cmpltui	r3,r2,2
    b674:	1800031e 	bne	r3,zero,b684 <altera_a10_acquire_arbitration+0x34>
    b678:	10800128 	cmpgeui	r2,r2,4
    b67c:	1000071e 	bne	r2,zero,b69c <altera_a10_acquire_arbitration+0x4c>
    b680:	00000306 	br	b690 <altera_a10_acquire_arbitration+0x40>
		case fpll_type:
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    b684:	0080a004 	movi	r2,640
    b688:	e0bffe15 	stw	r2,-8(fp)
			break;
    b68c:	00000a06 	br	b6b8 <altera_a10_acquire_arbitration+0x68>
		case cmu_cdr_type: // PMA
		case cmu_tx_type:
			arb_status = XCVR_REG_CAPAB_PMA;
    b690:	0080a044 	movi	r2,641
    b694:	e0bffe15 	stw	r2,-8(fp)
			break;
    b698:	00000706 	br	b6b8 <altera_a10_acquire_arbitration+0x68>
		default:
			printf("%s: Pll type not defined!\n", __func__);
    b69c:	014000b4 	movhi	r5,2
    b6a0:	2959ee04 	addi	r5,r5,26552
    b6a4:	010000b4 	movhi	r4,2
    b6a8:	2119b104 	addi	r4,r4,26308
    b6ac:	0010ec40 	call	10ec4 <printf>
			return -1;
    b6b0:	00bfffc4 	movi	r2,-1
    b6b4:	00001b06 	br	b724 <altera_a10_acquire_arbitration+0xd4>
		}

	a10_pll_write(mypll, XCVR_REG_ARBITRATION, XCVR_ARBITRATION_GET_AVMM);
    b6b8:	01800084 	movi	r6,2
    b6bc:	000b883a 	mov	r5,zero
    b6c0:	e13ffc17 	ldw	r4,-16(fp)
    b6c4:	000b5780 	call	b578 <a10_pll_write>

	do {
		a10_pll_read(mypll, arb_status, &status);
    b6c8:	e0bffd04 	addi	r2,fp,-12
    b6cc:	100d883a 	mov	r6,r2
    b6d0:	e17ffe17 	ldw	r5,-8(fp)
    b6d4:	e13ffc17 	ldw	r4,-16(fp)
    b6d8:	000b5200 	call	b520 <a10_pll_read>
		if ((status & BIT(2)) == 0) {
    b6dc:	e0bffd17 	ldw	r2,-12(fp)
    b6e0:	1080010c 	andi	r2,r2,4
    b6e4:	1000021e 	bne	r2,zero,b6f0 <altera_a10_acquire_arbitration+0xa0>
			return 0;
    b6e8:	0005883a 	mov	r2,zero
    b6ec:	00000d06 	br	b724 <altera_a10_acquire_arbitration+0xd4>
		}
		mdelay(1);
    b6f0:	0100fa04 	movi	r4,1000
    b6f4:	00206540 	call	20654 <usleep>
	} while (timeout++ < 100);
    b6f8:	e0bfff17 	ldw	r2,-4(fp)
    b6fc:	10c00044 	addi	r3,r2,1
    b700:	e0ffff15 	stw	r3,-4(fp)
    b704:	10801930 	cmpltui	r2,r2,100
    b708:	103fef1e 	bne	r2,zero,b6c8 <__alt_mem_mcu_subsystem_ram_0+0x77feb6c8>

	printf("%s: Failed to acquire arbitration\n", __func__);
    b70c:	014000b4 	movhi	r5,2
    b710:	2959ee04 	addi	r5,r5,26552
    b714:	010000b4 	movhi	r4,2
    b718:	2119b804 	addi	r4,r4,26336
    b71c:	0010ec40 	call	10ec4 <printf>

	return -1;
    b720:	00bfffc4 	movi	r2,-1
}
    b724:	e037883a 	mov	sp,fp
    b728:	dfc00117 	ldw	ra,4(sp)
    b72c:	df000017 	ldw	fp,0(sp)
    b730:	dec00204 	addi	sp,sp,8
    b734:	f800283a 	ret

0000b738 <altera_a10_release_arbitration>:
/*******************************************************************************
* @brief altera_a10_release_arbitration
*******************************************************************************/
void altera_a10_release_arbitration(xcvr_pll *mypll,
	uint8_t run_calibration)
{
    b738:	defffc04 	addi	sp,sp,-16
    b73c:	dfc00315 	stw	ra,12(sp)
    b740:	df000215 	stw	fp,8(sp)
    b744:	df000204 	addi	fp,sp,8
    b748:	e13fff15 	stw	r4,-4(fp)
    b74c:	2805883a 	mov	r2,r5
    b750:	e0bffe05 	stb	r2,-8(fp)
	a10_pll_write(mypll, XCVR_REG_ARBITRATION, (run_calibration ? 0x1 : 0x3));
    b754:	e0bffe03 	ldbu	r2,-8(fp)
    b758:	10000226 	beq	r2,zero,b764 <altera_a10_release_arbitration+0x2c>
    b75c:	00800044 	movi	r2,1
    b760:	00000106 	br	b768 <altera_a10_release_arbitration+0x30>
    b764:	008000c4 	movi	r2,3
    b768:	100d883a 	mov	r6,r2
    b76c:	000b883a 	mov	r5,zero
    b770:	e13fff17 	ldw	r4,-4(fp)
    b774:	000b5780 	call	b578 <a10_pll_write>
}
    b778:	0001883a 	nop
    b77c:	e037883a 	mov	sp,fp
    b780:	dfc00117 	ldw	ra,4(sp)
    b784:	df000017 	ldw	fp,0(sp)
    b788:	dec00204 	addi	sp,sp,8
    b78c:	f800283a 	ret

0000b790 <pll_calibration_check>:

/*******************************************************************************
* @brief pll_calibration_check
*******************************************************************************/
uint8_t pll_calibration_check(xcvr_pll *my_pll)
{
    b790:	defff804 	addi	sp,sp,-32
    b794:	dfc00715 	stw	ra,28(sp)
    b798:	df000615 	stw	fp,24(sp)
    b79c:	df000604 	addi	fp,sp,24
    b7a0:	e13ffa15 	stw	r4,-24(fp)
	uint32_t timeout = 0;
    b7a4:	e03fff15 	stw	zero,-4(fp)
	uint32_t val;
	uint32_t mask;
	uint32_t arb_status;
	const char *msg;

	switch (my_pll->type) {
    b7a8:	e0bffa17 	ldw	r2,-24(fp)
    b7ac:	10800017 	ldw	r2,0(r2)
    b7b0:	10c00060 	cmpeqi	r3,r2,1
    b7b4:	1800061e 	bne	r3,zero,b7d0 <pll_calibration_check+0x40>
    b7b8:	00800d2e 	bgeu	zero,r2,b7f0 <pll_calibration_check+0x60>
    b7bc:	10c000a0 	cmpeqi	r3,r2,2
    b7c0:	1800131e 	bne	r3,zero,b810 <pll_calibration_check+0x80>
    b7c4:	108000e0 	cmpeqi	r2,r2,3
    b7c8:	1000191e 	bne	r2,zero,b830 <pll_calibration_check+0xa0>
    b7cc:	00002006 	br	b850 <pll_calibration_check+0xc0>
		case fpll_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    b7d0:	0080a004 	movi	r2,640
    b7d4:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
    b7d8:	00800084 	movi	r2,2
    b7dc:	e0bffe15 	stw	r2,-8(fp)
			msg = "FPLL calibration";
    b7e0:	008000b4 	movhi	r2,2
    b7e4:	1099c104 	addi	r2,r2,26372
    b7e8:	e0bffc15 	stw	r2,-16(fp)
			break;
    b7ec:	00002306 	br	b87c <pll_calibration_check+0xec>
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
    b7f0:	0080a004 	movi	r2,640
    b7f4:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
    b7f8:	00800084 	movi	r2,2
    b7fc:	e0bffe15 	stw	r2,-8(fp)
			msg = "ATX PLL calibration";
    b800:	008000b4 	movhi	r2,2
    b804:	1099c604 	addi	r2,r2,26392
    b808:	e0bffc15 	stw	r2,-16(fp)
			break;
    b80c:	00001b06 	br	b87c <pll_calibration_check+0xec>
		case cmu_cdr_type: // PMA RX
			arb_status = XCVR_REG_CAPAB_PMA;
    b810:	0080a044 	movi	r2,641
    b814:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_RX_CAL_BUSY_MASK;
    b818:	00800084 	movi	r2,2
    b81c:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/CDR PLL calibration";
    b820:	008000b4 	movhi	r2,2
    b824:	1099cb04 	addi	r2,r2,26412
    b828:	e0bffc15 	stw	r2,-16(fp)
			break;
    b82c:	00001306 	br	b87c <pll_calibration_check+0xec>
		case cmu_tx_type: // PMA TX
			arb_status = XCVR_REG_CAPAB_PMA;
    b830:	0080a044 	movi	r2,641
    b834:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_TX_CAL_BUSY_MASK;
    b838:	00800044 	movi	r2,1
    b83c:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/TX PLL calibration";
    b840:	008000b4 	movhi	r2,2
    b844:	1099d104 	addi	r2,r2,26436
    b848:	e0bffc15 	stw	r2,-16(fp)
			break;
    b84c:	00000b06 	br	b87c <pll_calibration_check+0xec>
		default:
			printf("%s: %x Pll type not defined!\n", __func__,
				my_pll->type);
    b850:	e0bffa17 	ldw	r2,-24(fp)
    b854:	10800017 	ldw	r2,0(r2)
			printf("%s: %x Pll type not defined!\n", __func__,
    b858:	100d883a 	mov	r6,r2
    b85c:	014000b4 	movhi	r5,2
    b860:	2959f604 	addi	r5,r5,26584
    b864:	010000b4 	movhi	r4,2
    b868:	2119d704 	addi	r4,r4,26460
    b86c:	0010ec40 	call	10ec4 <printf>
			return -1;
    b870:	00bfffc4 	movi	r2,-1
    b874:	00001b06 	br	b8e4 <pll_calibration_check+0x154>
		}
	/* Wait max 100ms for cal_busy to de-assert */
	do {
    b878:	0001883a 	nop
		udelay(100);
    b87c:	01001904 	movi	r4,100
    b880:	00206540 	call	20654 <usleep>

		/* Read PLL calibration status from capability register */
		a10_pll_read(my_pll, arb_status, &val);
    b884:	e0bffb04 	addi	r2,fp,-20
    b888:	100d883a 	mov	r6,r2
    b88c:	e17ffd17 	ldw	r5,-12(fp)
    b890:	e13ffa17 	ldw	r4,-24(fp)
    b894:	000b5200 	call	b520 <a10_pll_read>
		if ((val & mask) == 0x00) {
    b898:	e0fffb17 	ldw	r3,-20(fp)
    b89c:	e0bffe17 	ldw	r2,-8(fp)
    b8a0:	1884703a 	and	r2,r3,r2
    b8a4:	1000021e 	bne	r2,zero,b8b0 <pll_calibration_check+0x120>
#ifdef DEBUG
			printf("%s OK (%d us, addr 0x%x)\n", msg,
				timeout * 100, my_pll->base_address);
#endif
			return 0;
    b8a8:	0005883a 	mov	r2,zero
    b8ac:	00000d06 	br	b8e4 <pll_calibration_check+0x154>
		}
	} while (timeout++ < 1000);
    b8b0:	e0bfff17 	ldw	r2,-4(fp)
    b8b4:	10c00044 	addi	r3,r2,1
    b8b8:	e0ffff15 	stw	r3,-4(fp)
    b8bc:	1080fa30 	cmpltui	r2,r2,1000
    b8c0:	103fed1e 	bne	r2,zero,b878 <__alt_mem_mcu_subsystem_ram_0+0x77feb878>

	printf("%s FAILED (addr 0x%x)\n", msg,
    b8c4:	e0bffa17 	ldw	r2,-24(fp)
    b8c8:	10800117 	ldw	r2,4(r2)
    b8cc:	100d883a 	mov	r6,r2
    b8d0:	e17ffc17 	ldw	r5,-16(fp)
    b8d4:	010000b4 	movhi	r4,2
    b8d8:	2119df04 	addi	r4,r4,26492
    b8dc:	0010ec40 	call	10ec4 <printf>
		my_pll->base_address);

	return 1;
    b8e0:	00800044 	movi	r2,1
}
    b8e4:	e037883a 	mov	sp,fp
    b8e8:	dfc00117 	ldw	ra,4(sp)
    b8ec:	df000017 	ldw	fp,0(sp)
    b8f0:	dec00204 	addi	sp,sp,8
    b8f4:	f800283a 	ret

0000b8f8 <pll_is_enabled>:

/*******************************************************************************
* @brief pll_is_enabled
*******************************************************************************/
uint32_t pll_is_enabled(xcvr_pll *mypll)
{
    b8f8:	defffc04 	addi	sp,sp,-16
    b8fc:	dfc00315 	stw	ra,12(sp)
    b900:	df000215 	stw	fp,8(sp)
    b904:	df000204 	addi	fp,sp,8
    b908:	e13ffe15 	stw	r4,-8(fp)
	switch (mypll->type) {
    b90c:	e0bffe17 	ldw	r2,-8(fp)
    b910:	10800017 	ldw	r2,0(r2)
    b914:	10c000b0 	cmpltui	r3,r2,2
    b918:	1800101e 	bne	r3,zero,b95c <pll_is_enabled+0x64>
    b91c:	10800128 	cmpgeui	r2,r2,4
    b920:	1000071e 	bne	r2,zero,b940 <pll_is_enabled+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
    b924:	014000b4 	movhi	r5,2
    b928:	2959fc04 	addi	r5,r5,26608
    b92c:	010000b4 	movhi	r4,2
    b930:	2119e504 	addi	r4,r4,26516
    b934:	0010ec40 	call	10ec4 <printf>
				__func__);
			return 0;
    b938:	0005883a 	mov	r2,zero
    b93c:	00001006 	br	b980 <pll_is_enabled+0x88>
		default:
			printf("%s: Pll type not defined!\n", __func__);
    b940:	014000b4 	movhi	r5,2
    b944:	2959fc04 	addi	r5,r5,26608
    b948:	010000b4 	movhi	r4,2
    b94c:	2119b104 	addi	r4,r4,26308
    b950:	0010ec40 	call	10ec4 <printf>
			return -1;
    b954:	00bfffc4 	movi	r2,-1
    b958:	00000906 	br	b980 <pll_is_enabled+0x88>
			break;
    b95c:	0001883a 	nop
		}
	uint32_t ret;
	a10_pll_read(mypll, 0x2e0, &ret);
    b960:	e0bfff04 	addi	r2,fp,-4
    b964:	100d883a 	mov	r6,r2
    b968:	0140b804 	movi	r5,736
    b96c:	e13ffe17 	ldw	r4,-8(fp)
    b970:	000b5200 	call	b520 <a10_pll_read>
	return ret != 0x3;
    b974:	e0bfff17 	ldw	r2,-4(fp)
    b978:	108000d8 	cmpnei	r2,r2,3
    b97c:	10803fcc 	andi	r2,r2,255
}
    b980:	e037883a 	mov	sp,fp
    b984:	dfc00117 	ldw	ra,4(sp)
    b988:	df000017 	ldw	fp,0(sp)
    b98c:	dec00204 	addi	sp,sp,8
    b990:	f800283a 	ret

0000b994 <pll_enable>:

/*******************************************************************************
* @brief pll_enable
*******************************************************************************/
uint32_t pll_enable(xcvr_pll *mypll)
{
    b994:	defffd04 	addi	sp,sp,-12
    b998:	dfc00215 	stw	ra,8(sp)
    b99c:	df000115 	stw	fp,4(sp)
    b9a0:	df000104 	addi	fp,sp,4
    b9a4:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
    b9a8:	e0bfff17 	ldw	r2,-4(fp)
    b9ac:	10800017 	ldw	r2,0(r2)
    b9b0:	10c000b0 	cmpltui	r3,r2,2
    b9b4:	1800101e 	bne	r3,zero,b9f8 <pll_enable+0x64>
    b9b8:	10800128 	cmpgeui	r2,r2,4
    b9bc:	1000071e 	bne	r2,zero,b9dc <pll_enable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
    b9c0:	014000b4 	movhi	r5,2
    b9c4:	295a0004 	addi	r5,r5,26624
    b9c8:	010000b4 	movhi	r4,2
    b9cc:	2119e504 	addi	r4,r4,26516
    b9d0:	0010ec40 	call	10ec4 <printf>
				__func__);
			return 0;
    b9d4:	0005883a 	mov	r2,zero
    b9d8:	00000d06 	br	ba10 <pll_enable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
    b9dc:	014000b4 	movhi	r5,2
    b9e0:	295a0004 	addi	r5,r5,26624
    b9e4:	010000b4 	movhi	r4,2
    b9e8:	2119b104 	addi	r4,r4,26308
    b9ec:	0010ec40 	call	10ec4 <printf>
			return -1;
    b9f0:	00bfffc4 	movi	r2,-1
    b9f4:	00000606 	br	ba10 <pll_enable+0x7c>
			break;
    b9f8:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x2);
    b9fc:	01800084 	movi	r6,2
    ba00:	0140b804 	movi	r5,736
    ba04:	e13fff17 	ldw	r4,-4(fp)
    ba08:	000b5780 	call	b578 <a10_pll_write>
		return 0;
    ba0c:	0005883a 	mov	r2,zero
}
    ba10:	e037883a 	mov	sp,fp
    ba14:	dfc00117 	ldw	ra,4(sp)
    ba18:	df000017 	ldw	fp,0(sp)
    ba1c:	dec00204 	addi	sp,sp,8
    ba20:	f800283a 	ret

0000ba24 <pll_disable>:

/*******************************************************************************
* @brief pll_disable
*******************************************************************************/
uint32_t pll_disable(xcvr_pll *mypll)
{
    ba24:	defffd04 	addi	sp,sp,-12
    ba28:	dfc00215 	stw	ra,8(sp)
    ba2c:	df000115 	stw	fp,4(sp)
    ba30:	df000104 	addi	fp,sp,4
    ba34:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
    ba38:	e0bfff17 	ldw	r2,-4(fp)
    ba3c:	10800017 	ldw	r2,0(r2)
    ba40:	10c000b0 	cmpltui	r3,r2,2
    ba44:	1800101e 	bne	r3,zero,ba88 <pll_disable+0x64>
    ba48:	10800128 	cmpgeui	r2,r2,4
    ba4c:	1000071e 	bne	r2,zero,ba6c <pll_disable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n", __func__);
    ba50:	014000b4 	movhi	r5,2
    ba54:	295a0304 	addi	r5,r5,26636
    ba58:	010000b4 	movhi	r4,2
    ba5c:	2119e504 	addi	r4,r4,26516
    ba60:	0010ec40 	call	10ec4 <printf>
			return 0;
    ba64:	0005883a 	mov	r2,zero
    ba68:	00000d06 	br	baa0 <pll_disable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
    ba6c:	014000b4 	movhi	r5,2
    ba70:	295a0304 	addi	r5,r5,26636
    ba74:	010000b4 	movhi	r4,2
    ba78:	2119b104 	addi	r4,r4,26308
    ba7c:	0010ec40 	call	10ec4 <printf>
			return -1;
    ba80:	00bfffc4 	movi	r2,-1
    ba84:	00000606 	br	baa0 <pll_disable+0x7c>
			break;
    ba88:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x3);
    ba8c:	018000c4 	movi	r6,3
    ba90:	0140b804 	movi	r5,736
    ba94:	e13fff17 	ldw	r4,-4(fp)
    ba98:	000b5780 	call	b578 <a10_pll_write>
	return 0;
    ba9c:	0005883a 	mov	r2,zero
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	dfc00117 	ldw	ra,4(sp)
    baa8:	df000017 	ldw	fp,0(sp)
    baac:	dec00204 	addi	sp,sp,8
    bab0:	f800283a 	ret

0000bab4 <fmcdaq2_reconfig>:
int fmcdaq2_reconfig(struct ad9144_init_param *p_ad9144_param,
           xcvr_core *p_ad9144_xcvr,
           struct ad9680_init_param *p_ad9680_param,
           xcvr_core *p_ad9680_xcvr,
           struct ad9523_platform_data *p_ad9523_param)
{
    bab4:	defff904 	addi	sp,sp,-28
    bab8:	dfc00615 	stw	ra,24(sp)
    babc:	df000515 	stw	fp,20(sp)
    bac0:	df000504 	addi	fp,sp,20
    bac4:	e13ffe15 	stw	r4,-8(fp)
    bac8:	e17ffd15 	stw	r5,-12(fp)
    bacc:	e1bffc15 	stw	r6,-16(fp)
    bad0:	e1fffb15 	stw	r7,-20(fp)
   uint8_t mode = 0;
    bad4:	e03fffc5 	stb	zero,-1(fp)

   printf ("Available sampling rates:\n");
    bad8:	010000b4 	movhi	r4,2
    badc:	211a0604 	addi	r4,r4,26648
    bae0:	0010fe80 	call	10fe8 <puts>
   printf ("\t1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
    bae4:	010000b4 	movhi	r4,2
    bae8:	211a0d04 	addi	r4,r4,26676
    baec:	0010fe80 	call	10fe8 <puts>
   printf ("\t2 - ADC  500 MSPS; DAC 1000 MSPS\n");
    baf0:	010000b4 	movhi	r4,2
    baf4:	211a1604 	addi	r4,r4,26712
    baf8:	0010fe80 	call	10fe8 <puts>
   printf ("\t3 - ADC  500 MSPS; DAC  500 MSPS\n");
    bafc:	010000b4 	movhi	r4,2
    bb00:	211a1f04 	addi	r4,r4,26748
    bb04:	0010fe80 	call	10fe8 <puts>
   printf ("\t4 - ADC  600 MSPS; DAC  600 MSPS\n");
    bb08:	010000b4 	movhi	r4,2
    bb0c:	211a2804 	addi	r4,r4,26784
    bb10:	0010fe80 	call	10fe8 <puts>
   printf ("\t5 - ADC 1000 MSPS; DAC 2000 MSPS (2x interpolation)\n");
    bb14:	010000b4 	movhi	r4,2
    bb18:	211a3104 	addi	r4,r4,26820
    bb1c:	0010fe80 	call	10fe8 <puts>
   printf ("choose an option [default 1]:\n");
    bb20:	010000b4 	movhi	r4,2
    bb24:	211a3f04 	addi	r4,r4,26876
    bb28:	0010fe80 	call	10fe8 <puts>

   mode = ad_uart_read();
    bb2c:	00083a80 	call	83a8 <ad_uart_read>
    bb30:	e0bfffc5 	stb	r2,-1(fp)

   switch (mode) {
    bb34:	e0bfffc3 	ldbu	r2,-1(fp)
    bb38:	10c00ce0 	cmpeqi	r3,r2,51
    bb3c:	1800661e 	bne	r3,zero,bcd8 <fmcdaq2_reconfig+0x224>
    bb40:	10c00d08 	cmpgei	r3,r2,52
    bb44:	1800031e 	bne	r3,zero,bb54 <fmcdaq2_reconfig+0xa0>
    bb48:	10800ca0 	cmpeqi	r2,r2,50
    bb4c:	1000ac1e 	bne	r2,zero,be00 <fmcdaq2_reconfig+0x34c>
    bb50:	0000f506 	br	bf28 <fmcdaq2_reconfig+0x474>
    bb54:	10c00d20 	cmpeqi	r3,r2,52
    bb58:	1800151e 	bne	r3,zero,bbb0 <fmcdaq2_reconfig+0xfc>
    bb5c:	10800d60 	cmpeqi	r2,r2,53
    bb60:	1000f126 	beq	r2,zero,bf28 <fmcdaq2_reconfig+0x474>
   case '5':
      // REF clock = 100 MHz
      p_ad9523_param->channels[DAC_DEVICE_CLK].channel_divider = 10;
    bb64:	e0800217 	ldw	r2,8(fp)
    bb68:	10800c17 	ldw	r2,48(r2)
    bb6c:	00c00284 	movi	r3,10
    bb70:	10c0020d 	sth	r3,8(r2)
      p_ad9144_param->pll_ref_frequency_khz = 100000;
    bb74:	e0fffe17 	ldw	r3,-8(fp)
    bb78:	008000b4 	movhi	r2,2
    bb7c:	10a1a804 	addi	r2,r2,-31072
    bb80:	18801a15 	stw	r2,104(r3)

      // DAC at 2 GHz using the internal PLL and 2 times interpolation
      p_ad9144_param->interpolation = 2;
    bb84:	e0bffe17 	ldw	r2,-8(fp)
    bb88:	00c00084 	movi	r3,2
    bb8c:	10c00445 	stb	r3,17(r2)
      p_ad9144_param->pll_enable = 1;
    bb90:	e0bffe17 	ldw	r2,-8(fp)
    bb94:	00c00044 	movi	r3,1
    bb98:	10c019c5 	stb	r3,103(r2)
      p_ad9144_param->pll_dac_frequency_khz = 2000000;
    bb9c:	e0fffe17 	ldw	r3,-8(fp)
    bba0:	008007f4 	movhi	r2,31
    bba4:	10a12004 	addi	r2,r2,-31616
    bba8:	18801b15 	stw	r2,108(r3)
      break;
    bbac:	0000ea06 	br	bf58 <fmcdaq2_reconfig+0x4a4>
   case '4':
      printf ("4 - ADC  600 MSPS; DAC  600 MSPS\n");
    bbb0:	010000b4 	movhi	r4,2
    bbb4:	211a4704 	addi	r4,r4,26908
    bbb8:	0010fe80 	call	10fe8 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 5;
    bbbc:	e0800217 	ldw	r2,8(fp)
    bbc0:	00c00144 	movi	r3,5
    bbc4:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
    bbc8:	e0800217 	ldw	r2,8(fp)
    bbcc:	10800c17 	ldw	r2,48(r2)
    bbd0:	10800d04 	addi	r2,r2,52
    bbd4:	00c00084 	movi	r3,2
    bbd8:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
    bbdc:	e0800217 	ldw	r2,8(fp)
    bbe0:	10800c17 	ldw	r2,48(r2)
    bbe4:	00c00044 	movi	r3,1
    bbe8:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
    bbec:	e0800217 	ldw	r2,8(fp)
    bbf0:	10800c17 	ldw	r2,48(r2)
    bbf4:	10800684 	addi	r2,r2,26
    bbf8:	00c02004 	movi	r3,128
    bbfc:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
    bc00:	e0800217 	ldw	r2,8(fp)
    bc04:	10800c17 	ldw	r2,48(r2)
    bc08:	10801384 	addi	r2,r2,78
    bc0c:	00c02004 	movi	r3,128
    bc10:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 2;
    bc14:	e0800217 	ldw	r2,8(fp)
    bc18:	10800c17 	ldw	r2,48(r2)
    bc1c:	10802704 	addi	r2,r2,156
    bc20:	00c00084 	movi	r3,2
    bc24:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 1;
    bc28:	e0800217 	ldw	r2,8(fp)
    bc2c:	10800c17 	ldw	r2,48(r2)
    bc30:	10801a04 	addi	r2,r2,104
    bc34:	00c00044 	movi	r3,1
    bc38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 128;
    bc3c:	e0800217 	ldw	r2,8(fp)
    bc40:	10800c17 	ldw	r2,48(r2)
    bc44:	10802084 	addi	r2,r2,130
    bc48:	00c02004 	movi	r3,128
    bc4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 128;
    bc50:	e0800217 	ldw	r2,8(fp)
    bc54:	10800c17 	ldw	r2,48(r2)
    bc58:	10802d84 	addi	r2,r2,182
    bc5c:	00c02004 	movi	r3,128
    bc60:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
    bc64:	e0bffd17 	ldw	r2,-12(fp)
    bc68:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 6000000;
    bc6c:	e0fffe17 	ldw	r3,-8(fp)
    bc70:	00801734 	movhi	r2,92
    bc74:	10a36004 	addi	r2,r2,-29312
    bc78:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 6000000;
    bc7c:	e0fffd17 	ldw	r3,-12(fp)
    bc80:	00801734 	movhi	r2,92
    bc84:	10a36004 	addi	r2,r2,-29312
    bc88:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 300000;
    bc8c:	e0fffd17 	ldw	r3,-12(fp)
    bc90:	00800174 	movhi	r2,5
    bc94:	10a4f804 	addi	r2,r2,-27680
    bc98:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
    bc9c:	e0bffb17 	ldw	r2,-20(fp)
    bca0:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 6000000;
    bca4:	e0fffc17 	ldw	r3,-16(fp)
    bca8:	00801734 	movhi	r2,92
    bcac:	10a36004 	addi	r2,r2,-29312
    bcb0:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 6000000;
    bcb4:	e0fffb17 	ldw	r3,-20(fp)
    bcb8:	00801734 	movhi	r2,92
    bcbc:	10a36004 	addi	r2,r2,-29312
    bcc0:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 300000;
    bcc4:	e0fffb17 	ldw	r3,-20(fp)
    bcc8:	00800174 	movhi	r2,5
    bccc:	10a4f804 	addi	r2,r2,-27680
    bcd0:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
    bcd4:	0000a006 	br	bf58 <fmcdaq2_reconfig+0x4a4>
   case '3':
      printf ("3 - ADC  500 MSPS; DAC  500 MSPS\n");
    bcd8:	010000b4 	movhi	r4,2
    bcdc:	211a5004 	addi	r4,r4,26944
    bce0:	0010fe80 	call	10fe8 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 3;
    bce4:	e0800217 	ldw	r2,8(fp)
    bce8:	00c000c4 	movi	r3,3
    bcec:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 4;
    bcf0:	e0800217 	ldw	r2,8(fp)
    bcf4:	10800c17 	ldw	r2,48(r2)
    bcf8:	10800d04 	addi	r2,r2,52
    bcfc:	00c00104 	movi	r3,4
    bd00:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 2;
    bd04:	e0800217 	ldw	r2,8(fp)
    bd08:	10800c17 	ldw	r2,48(r2)
    bd0c:	00c00084 	movi	r3,2
    bd10:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 256;
    bd14:	e0800217 	ldw	r2,8(fp)
    bd18:	10800c17 	ldw	r2,48(r2)
    bd1c:	10800684 	addi	r2,r2,26
    bd20:	00c04004 	movi	r3,256
    bd24:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 256;
    bd28:	e0800217 	ldw	r2,8(fp)
    bd2c:	10800c17 	ldw	r2,48(r2)
    bd30:	10801384 	addi	r2,r2,78
    bd34:	00c04004 	movi	r3,256
    bd38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 4;
    bd3c:	e0800217 	ldw	r2,8(fp)
    bd40:	10800c17 	ldw	r2,48(r2)
    bd44:	10802704 	addi	r2,r2,156
    bd48:	00c00104 	movi	r3,4
    bd4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 2;
    bd50:	e0800217 	ldw	r2,8(fp)
    bd54:	10800c17 	ldw	r2,48(r2)
    bd58:	10801a04 	addi	r2,r2,104
    bd5c:	00c00084 	movi	r3,2
    bd60:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 256;
    bd64:	e0800217 	ldw	r2,8(fp)
    bd68:	10800c17 	ldw	r2,48(r2)
    bd6c:	10802084 	addi	r2,r2,130
    bd70:	00c04004 	movi	r3,256
    bd74:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 256;
    bd78:	e0800217 	ldw	r2,8(fp)
    bd7c:	10800c17 	ldw	r2,48(r2)
    bd80:	10802d84 	addi	r2,r2,182
    bd84:	00c04004 	movi	r3,256
    bd88:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
    bd8c:	e0bffd17 	ldw	r2,-12(fp)
    bd90:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 5000000;
    bd94:	e0fffe17 	ldw	r3,-8(fp)
    bd98:	00801334 	movhi	r2,76
    bd9c:	1092d004 	addi	r2,r2,19264
    bda0:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 5000000;
    bda4:	e0fffd17 	ldw	r3,-12(fp)
    bda8:	00801334 	movhi	r2,76
    bdac:	1092d004 	addi	r2,r2,19264
    bdb0:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 250000;
    bdb4:	e0fffd17 	ldw	r3,-12(fp)
    bdb8:	00800134 	movhi	r2,4
    bdbc:	10b42404 	addi	r2,r2,-12144
    bdc0:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
    bdc4:	e0bffb17 	ldw	r2,-20(fp)
    bdc8:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 5000000;
    bdcc:	e0fffc17 	ldw	r3,-16(fp)
    bdd0:	00801334 	movhi	r2,76
    bdd4:	1092d004 	addi	r2,r2,19264
    bdd8:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 5000000;
    bddc:	e0fffb17 	ldw	r3,-20(fp)
    bde0:	00801334 	movhi	r2,76
    bde4:	1092d004 	addi	r2,r2,19264
    bde8:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 250000;
    bdec:	e0fffb17 	ldw	r3,-20(fp)
    bdf0:	00800134 	movhi	r2,4
    bdf4:	10b42404 	addi	r2,r2,-12144
    bdf8:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
    bdfc:	00005606 	br	bf58 <fmcdaq2_reconfig+0x4a4>
   case '2':
      printf ("2 - ADC  500 MSPS; DAC 1000 MSPS\n");
    be00:	010000b4 	movhi	r4,2
    be04:	211a5904 	addi	r4,r4,26980
    be08:	0010fe80 	call	10fe8 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 3;
    be0c:	e0800217 	ldw	r2,8(fp)
    be10:	00c000c4 	movi	r3,3
    be14:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
    be18:	e0800217 	ldw	r2,8(fp)
    be1c:	10800c17 	ldw	r2,48(r2)
    be20:	10800d04 	addi	r2,r2,52
    be24:	00c00084 	movi	r3,2
    be28:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
    be2c:	e0800217 	ldw	r2,8(fp)
    be30:	10800c17 	ldw	r2,48(r2)
    be34:	00c00044 	movi	r3,1
    be38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
    be3c:	e0800217 	ldw	r2,8(fp)
    be40:	10800c17 	ldw	r2,48(r2)
    be44:	10800684 	addi	r2,r2,26
    be48:	00c02004 	movi	r3,128
    be4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
    be50:	e0800217 	ldw	r2,8(fp)
    be54:	10800c17 	ldw	r2,48(r2)
    be58:	10801384 	addi	r2,r2,78
    be5c:	00c02004 	movi	r3,128
    be60:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 4;
    be64:	e0800217 	ldw	r2,8(fp)
    be68:	10800c17 	ldw	r2,48(r2)
    be6c:	10802704 	addi	r2,r2,156
    be70:	00c00104 	movi	r3,4
    be74:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 2;
    be78:	e0800217 	ldw	r2,8(fp)
    be7c:	10800c17 	ldw	r2,48(r2)
    be80:	10801a04 	addi	r2,r2,104
    be84:	00c00084 	movi	r3,2
    be88:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 256;
    be8c:	e0800217 	ldw	r2,8(fp)
    be90:	10800c17 	ldw	r2,48(r2)
    be94:	10802084 	addi	r2,r2,130
    be98:	00c04004 	movi	r3,256
    be9c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 256;
    bea0:	e0800217 	ldw	r2,8(fp)
    bea4:	10800c17 	ldw	r2,48(r2)
    bea8:	10802d84 	addi	r2,r2,182
    beac:	00c04004 	movi	r3,256
    beb0:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
    beb4:	e0bffd17 	ldw	r2,-12(fp)
    beb8:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 10000000;
    bebc:	e0fffe17 	ldw	r3,-8(fp)
    bec0:	00802674 	movhi	r2,153
    bec4:	10a5a004 	addi	r2,r2,-27008
    bec8:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 10000000;
    becc:	e0fffd17 	ldw	r3,-12(fp)
    bed0:	00802674 	movhi	r2,153
    bed4:	10a5a004 	addi	r2,r2,-27008
    bed8:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 500000;
    bedc:	e0fffd17 	ldw	r3,-12(fp)
    bee0:	00800234 	movhi	r2,8
    bee4:	10a84804 	addi	r2,r2,-24288
    bee8:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
    beec:	e0bffb17 	ldw	r2,-20(fp)
    bef0:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 5000000;
    bef4:	e0fffc17 	ldw	r3,-16(fp)
    bef8:	00801334 	movhi	r2,76
    befc:	1092d004 	addi	r2,r2,19264
    bf00:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 5000000;
    bf04:	e0fffb17 	ldw	r3,-20(fp)
    bf08:	00801334 	movhi	r2,76
    bf0c:	1092d004 	addi	r2,r2,19264
    bf10:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 250000;
    bf14:	e0fffb17 	ldw	r3,-20(fp)
    bf18:	00800134 	movhi	r2,4
    bf1c:	10b42404 	addi	r2,r2,-12144
    bf20:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
    bf24:	00000c06 	br	bf58 <fmcdaq2_reconfig+0x4a4>
   default:
      printf ("1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
    bf28:	010000b4 	movhi	r4,2
    bf2c:	211a6204 	addi	r4,r4,27016
    bf30:	0010fe80 	call	10fe8 <puts>
      p_ad9144_xcvr->ref_rate_khz = 500000;
    bf34:	e0fffd17 	ldw	r3,-12(fp)
    bf38:	00800234 	movhi	r2,8
    bf3c:	10a84804 	addi	r2,r2,-24288
    bf40:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->ref_rate_khz = 500000;
    bf44:	e0fffb17 	ldw	r3,-20(fp)
    bf48:	00800234 	movhi	r2,8
    bf4c:	10a84804 	addi	r2,r2,-24288
    bf50:	18800515 	stw	r2,20(r3)
      break;
    bf54:	0001883a 	nop
   }

   return(0);
    bf58:	0005883a 	mov	r2,zero
}
    bf5c:	e037883a 	mov	sp,fp
    bf60:	dfc00117 	ldw	ra,4(sp)
    bf64:	df000017 	ldw	fp,0(sp)
    bf68:	dec00204 	addi	sp,sp,8
    bf6c:	f800283a 	ret

0000bf70 <daq2_init>:


int daq2_init()
{
    bf70:	defefd04 	addi	sp,sp,-1036
    bf74:	dfc10215 	stw	ra,1032(sp)
    bf78:	df010115 	stw	fp,1028(sp)
    bf7c:	df010104 	addi	fp,sp,1028

   spi_init_param ad9523_spi_param;
   spi_init_param ad9144_spi_param;
   spi_init_param ad9680_spi_param;

   ad9523_spi_param.type = NIOS_II_SPI;
    bf80:	008000c4 	movi	r2,3
    bf84:	e0bffb15 	stw	r2,-20(fp)
   ad9144_spi_param.type = NIOS_II_SPI;
    bf88:	008000c4 	movi	r2,3
    bf8c:	e0bff715 	stw	r2,-36(fp)
   ad9680_spi_param.type = NIOS_II_SPI;
    bf90:	008000c4 	movi	r2,3
    bf94:	e0bff315 	stw	r2,-52(fp)

   ad9523_spi_param.chip_select = SPI_CHIP_SELECT(0);
    bf98:	00bfff84 	movi	r2,-2
    bf9c:	e0bffc05 	stb	r2,-16(fp)
   ad9144_spi_param.chip_select = SPI_CHIP_SELECT(1);
    bfa0:	00bfff44 	movi	r2,-3
    bfa4:	e0bff805 	stb	r2,-32(fp)
   ad9680_spi_param.chip_select = SPI_CHIP_SELECT(2);
    bfa8:	00bffec4 	movi	r2,-5
    bfac:	e0bff405 	stb	r2,-48(fp)
   ad9523_spi_param.cpha = 0;
    bfb0:	e03ffd15 	stw	zero,-12(fp)
   ad9144_spi_param.cpha = 0;
    bfb4:	e03ff915 	stw	zero,-28(fp)
   ad9680_spi_param.cpha = 0;
    bfb8:	e03ff515 	stw	zero,-44(fp)
   ad9523_spi_param.cpol = 0;
    bfbc:	e03ffe15 	stw	zero,-8(fp)
   ad9144_spi_param.cpol = 0;
    bfc0:	e03ffa15 	stw	zero,-24(fp)
   ad9680_spi_param.cpol = 0;
    bfc4:	e03ff615 	stw	zero,-40(fp)
   struct ad9523_platform_data   ad9523_pdata;
   struct ad9523_init_param   ad9523_param;
   struct ad9144_init_param   ad9144_param;
   struct ad9680_init_param   ad9680_param;

   ad9523_param.spi_init = ad9523_spi_param;
    bfc8:	e0bffb17 	ldw	r2,-20(fp)
    bfcc:	e0bfa915 	stw	r2,-348(fp)
    bfd0:	e0bffc17 	ldw	r2,-16(fp)
    bfd4:	e0bfaa15 	stw	r2,-344(fp)
    bfd8:	e0bffd17 	ldw	r2,-12(fp)
    bfdc:	e0bfab15 	stw	r2,-340(fp)
    bfe0:	e0bffe17 	ldw	r2,-8(fp)
    bfe4:	e0bfac15 	stw	r2,-336(fp)
   ad9144_param.spi_init = ad9144_spi_param;
    bfe8:	e0bff717 	ldw	r2,-36(fp)
    bfec:	e0bf8d15 	stw	r2,-460(fp)
    bff0:	e0bff817 	ldw	r2,-32(fp)
    bff4:	e0bf8e15 	stw	r2,-456(fp)
    bff8:	e0bff917 	ldw	r2,-28(fp)
    bffc:	e0bf8f15 	stw	r2,-452(fp)
    c000:	e0bffa17 	ldw	r2,-24(fp)
    c004:	e0bf9015 	stw	r2,-448(fp)
   ad9680_param.spi_init = ad9680_spi_param;
    c008:	e0bff317 	ldw	r2,-52(fp)
    c00c:	e0bf8815 	stw	r2,-480(fp)
    c010:	e0bff417 	ldw	r2,-48(fp)
    c014:	e0bf8915 	stw	r2,-476(fp)
    c018:	e0bff517 	ldw	r2,-44(fp)
    c01c:	e0bf8a15 	stw	r2,-472(fp)
    c020:	e0bff617 	ldw	r2,-40(fp)
    c024:	e0bf8b15 	stw	r2,-468(fp)
   xcvr_core      ad9680_xcvr;
   dmac_core      ad9680_dma;
   dmac_xfer      rx_xfer;
   dmac_xfer      tx_xfer;

   ad9144_xcvr.base_address              = AD9144_JESD204_LINK_MANAGEMENT_BASE;
    c028:	00a20234 	movhi	r2,34824
    c02c:	10a00004 	addi	r2,r2,-32768
    c030:	e0bf3f15 	stw	r2,-772(fp)
   ad9144_xcvr.dev.link_pll.base_address = AD9144_JESD204_LINK_PLL_RECONFIG_BASE;
    c034:	00a201f4 	movhi	r2,34823
    c038:	10980004 	addi	r2,r2,24576
    c03c:	e0bf4915 	stw	r2,-732(fp)
   ad9144_xcvr.dev.atx_pll.base_address  = AD9144_JESD204_LANE_PLL_RECONFIG_BASE;
    c040:	00a20234 	movhi	r2,34824
    c044:	10a40004 	addi	r2,r2,-28672
    c048:	e0bf4c15 	stw	r2,-720(fp)
   ad9144_core.base_address              = AD9144_CORE_BASE;
    c04c:	00a20174 	movhi	r2,34821
    c050:	e0bf8215 	stw	r2,-504(fp)
   ad9680_xcvr.base_address              = AD9680_JESD204_LINK_MANAGEMENT_BASE;
    c054:	00a201f4 	movhi	r2,34823
    c058:	109c0004 	addi	r2,r2,28672
    c05c:	e0bf0f15 	stw	r2,-964(fp)
   ad9680_xcvr.dev.link_pll.base_address = AD9680_JESD204_LINK_PLL_RECONFIG_BASE;
    c060:	00a201f4 	movhi	r2,34823
    c064:	10940004 	addi	r2,r2,20480
    c068:	e0bf1915 	stw	r2,-924(fp)
   ad9680_core.base_address              = AD9680_CORE_BASE;
    c06c:	00a20134 	movhi	r2,34820
    c070:	e0bf3c15 	stw	r2,-784(fp)
   ad9144_jesd.base_address              = AD9144_JESD204_LINK_RECONFIG_BASE;
    c074:	00a201b4 	movhi	r2,34822
    c078:	10900004 	addi	r2,r2,16384
    c07c:	e0bf6a15 	stw	r2,-600(fp)
   ad9680_jesd.base_address              = AD9680_JESD204_LINK_RECONFIG_BASE;
    c080:	00a201b4 	movhi	r2,34822
    c084:	e0bf3615 	stw	r2,-808(fp)

   ad9144_xcvr.dev.channel_pll[0].type         = cmu_tx_type;
    c088:	008000c4 	movi	r2,3
    c08c:	e0bf4e15 	stw	r2,-712(fp)
   ad9680_xcvr.dev.channel_pll[0].type         = cmu_cdr_type;
    c090:	00800084 	movi	r2,2
    c094:	e0bf1e15 	stw	r2,-904(fp)
   ad9144_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S0_BASE;
    c098:	00a201f4 	movhi	r2,34823
    c09c:	10840004 	addi	r2,r2,4096
    c0a0:	e0bf4f15 	stw	r2,-708(fp)
   ad9680_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S1_BASE;
    c0a4:	00a201f4 	movhi	r2,34823
    c0a8:	10b40004 	addi	r2,r2,-12288
    c0ac:	e0bf1f15 	stw	r2,-900(fp)

   ad9680_dma.base_address = AD9680_DMA_BASE;
    c0b0:	00a201f4 	movhi	r2,34823
    c0b4:	10a80004 	addi	r2,r2,-24576
    c0b8:	e0bf0a15 	stw	r2,-984(fp)
   ad9144_dma.base_address = AD9144_DMA_BASE;
    c0bc:	00a201f4 	movhi	r2,34823
    c0c0:	10ac0004 	addi	r2,r2,-20480
    c0c4:	e0bf6615 	stw	r2,-616(fp)
   rx_xfer.start_address   = (uint32_t)rx_xfer_buf;//0x800000;
    c0c8:	008000f4 	movhi	r2,3
    c0cc:	10ab3404 	addi	r2,r2,-21296
    c0d0:	e0bf0815 	stw	r2,-992(fp)
   tx_xfer.start_address   = (uint32_t)tx_xfer_buf;//0x900000;
    c0d4:	008100f4 	movhi	r2,1027
    c0d8:	10ab3404 	addi	r2,r2,-21296
    c0dc:	e0bf0515 	stw	r2,-1004(fp)

   //******************************************************************************
   // clock distribution device (AD9523) configuration
   //******************************************************************************
   ad9523_pdata.num_channels = 8;
    c0e0:	00800204 	movi	r2,8
    c0e4:	e0bfb915 	stw	r2,-284(fp)
   ad9523_pdata.channels     = &ad9523_channels[0];
    c0e8:	e0bfbf04 	addi	r2,fp,-260
    c0ec:	e0bfba15 	stw	r2,-280(fp)
   ad9523_param.pdata        = &ad9523_pdata;
    c0f0:	e0bfae04 	addi	r2,fp,-328
    c0f4:	e0bfad15 	stw	r2,-332(fp)
   ad9523_init(&ad9523_param);
    c0f8:	e0bfa904 	addi	r2,fp,-348
    c0fc:	1009883a 	mov	r4,r2
    c100:	0001e6c0 	call	1e6c <ad9523_init>

   // dac device-clk-sysref, fpga-clk-sysref

   ad9523_channels[DAC_DEVICE_CLK].channel_num = 1;
    c104:	00800044 	movi	r2,1
    c108:	e0bfbf05 	stb	r2,-260(fp)
   ad9523_channels[DAC_DEVICE_CLK].channel_divider = 1;
    c10c:	00800044 	movi	r2,1
    c110:	e0bfc10d 	sth	r2,-252(fp)
   ad9523_channels[DAC_DEVICE_SYSREF].channel_num = 7;
    c114:	008001c4 	movi	r2,7
    c118:	e0bfc585 	stb	r2,-234(fp)
   ad9523_channels[DAC_DEVICE_SYSREF].channel_divider = 128;
    c11c:	00802004 	movi	r2,128
    c120:	e0bfc78d 	sth	r2,-226(fp)
   ad9523_channels[DAC_FPGA_CLK].channel_num = 9;
    c124:	00800244 	movi	r2,9
    c128:	e0bfcc05 	stb	r2,-208(fp)
   ad9523_channels[DAC_FPGA_CLK].channel_divider = 2;
    c12c:	00800084 	movi	r2,2
    c130:	e0bfce0d 	sth	r2,-200(fp)
   ad9523_channels[DAC_FPGA_SYSREF].channel_num = 8;
    c134:	00800204 	movi	r2,8
    c138:	e0bfd285 	stb	r2,-182(fp)
   ad9523_channels[DAC_FPGA_SYSREF].channel_divider = 128;
    c13c:	00802004 	movi	r2,128
    c140:	e0bfd48d 	sth	r2,-174(fp)

   // adc device-clk-sysref, fpga-clk-sysref

   ad9523_channels[ADC_DEVICE_CLK].channel_num = 13;
    c144:	00800344 	movi	r2,13
    c148:	e0bfd905 	stb	r2,-156(fp)
   ad9523_channels[ADC_DEVICE_CLK].channel_divider = 1;
    c14c:	00800044 	movi	r2,1
    c150:	e0bfdb0d 	sth	r2,-148(fp)
   ad9523_channels[ADC_DEVICE_SYSREF].channel_num = 6;
    c154:	00800184 	movi	r2,6
    c158:	e0bfdf85 	stb	r2,-130(fp)
   ad9523_channels[ADC_DEVICE_SYSREF].channel_divider = 128;
    c15c:	00802004 	movi	r2,128
    c160:	e0bfe18d 	sth	r2,-122(fp)
   ad9523_channels[ADC_FPGA_CLK].channel_num = 4;
    c164:	00800104 	movi	r2,4
    c168:	e0bfe605 	stb	r2,-104(fp)
   ad9523_channels[ADC_FPGA_CLK].channel_divider = 2;
    c16c:	00800084 	movi	r2,2
    c170:	e0bfe80d 	sth	r2,-96(fp)
   ad9523_channels[ADC_FPGA_SYSREF].channel_num = 5;
    c174:	00800144 	movi	r2,5
    c178:	e0bfec85 	stb	r2,-78(fp)
   ad9523_channels[ADC_FPGA_SYSREF].channel_divider = 128;
    c17c:	00802004 	movi	r2,128
    c180:	e0bfee8d 	sth	r2,-70(fp)

   // VCXO 125MHz

   ad9523_pdata.vcxo_freq = 125000000;
    c184:	0081dcf4 	movhi	r2,1907
    c188:	10965004 	addi	r2,r2,22848
    c18c:	e0bfae15 	stw	r2,-328(fp)
   ad9523_pdata.spi3wire = 1;
    c190:	00800044 	movi	r2,1
    c194:	e0bfaf05 	stb	r2,-324(fp)
   ad9523_pdata.osc_in_diff_en = 1;
    c198:	00800044 	movi	r2,1
    c19c:	e0bfb005 	stb	r2,-320(fp)
   ad9523_pdata.pll2_charge_pump_current_nA = 413000;
    c1a0:	008001b4 	movhi	r2,6
    c1a4:	10935204 	addi	r2,r2,19784
    c1a8:	e0bfb515 	stw	r2,-300(fp)
   ad9523_pdata.pll2_freq_doubler_en = 0;
    c1ac:	e03fb685 	stb	zero,-294(fp)
   ad9523_pdata.pll2_r2_div = 1;
    c1b0:	00800044 	movi	r2,1
    c1b4:	e0bfb6c5 	stb	r2,-293(fp)
   ad9523_pdata.pll2_ndiv_a_cnt = 0;
    c1b8:	e03fb605 	stb	zero,-296(fp)
   ad9523_pdata.pll2_ndiv_b_cnt = 6;
    c1bc:	00800184 	movi	r2,6
    c1c0:	e0bfb645 	stb	r2,-295(fp)
   ad9523_pdata.pll2_vco_diff_m1 = 3;
    c1c4:	008000c4 	movi	r2,3
    c1c8:	e0bfb705 	stb	r2,-292(fp)
   ad9523_pdata.pll2_vco_diff_m2 = 0;
    c1cc:	e03fb745 	stb	zero,-291(fp)
   ad9523_pdata.rpole2 = 0;
    c1d0:	e03fb785 	stb	zero,-290(fp)
   ad9523_pdata.rzero = 7;
    c1d4:	008001c4 	movi	r2,7
    c1d8:	e0bfb7c5 	stb	r2,-289(fp)
   ad9523_pdata.cpole1 = 2;
    c1dc:	00800084 	movi	r2,2
    c1e0:	e0bfb805 	stb	r2,-288(fp)

   ad9144_xcvr.ref_rate_khz = 500000;
    c1e4:	00800234 	movhi	r2,8
    c1e8:	10a84804 	addi	r2,r2,-24288
    c1ec:	e0bf4315 	stw	r2,-756(fp)
   ad9680_xcvr.ref_rate_khz = 500000;
    c1f0:	00800234 	movhi	r2,8
    c1f4:	10a84804 	addi	r2,r2,-24288
    c1f8:	e0bf1315 	stw	r2,-948(fp)
   //******************************************************************************
   // DAC (AD9144) and the transmit path (AXI_ADXCVR,
   // JESD204, AXI_AD9144, TX DMAC) configuration
   //******************************************************************************

   xcvr_getconfig(&ad9144_xcvr);
    c1fc:	e0bf3e04 	addi	r2,fp,-776
    c200:	1009883a 	mov	r4,r2
    c204:	00086540 	call	8654 <xcvr_getconfig>
   ad9144_xcvr.reconfig_bypass = 1;
    c208:	00800044 	movi	r2,1
    c20c:	e0bf4405 	stb	r2,-752(fp)

   ad9144_xcvr.lane_rate_kbps = 10000000;
    c210:	00802674 	movhi	r2,153
    c214:	10a5a004 	addi	r2,r2,-27008
    c218:	e0bf4215 	stw	r2,-760(fp)

   ad9144_jesd.rx_tx_n = 0;
    c21c:	e03f6b05 	stb	zero,-596(fp)
   ad9144_jesd.scramble_enable = 1;
    c220:	00800044 	movi	r2,1
    c224:	e0bf6b45 	stb	r2,-595(fp)
   ad9144_jesd.octets_per_frame = 1;
    c228:	00800044 	movi	r2,1
    c22c:	e0bf6bc5 	stb	r2,-593(fp)
   ad9144_jesd.frames_per_multiframe = 32;
    c230:	00800804 	movi	r2,32
    c234:	e0bf6c05 	stb	r2,-592(fp)
   ad9144_jesd.subclass_mode = 1;
    c238:	00800044 	movi	r2,1
    c23c:	e0bf6d45 	stb	r2,-587(fp)

   ad9144_channels[0].dds_dual_tone = 0;
    c240:	e03f7615 	stw	zero,-552(fp)
   ad9144_channels[0].dds_frequency_0 = 33*1000*1000;
    c244:	00807e34 	movhi	r2,504
    c248:	10a29004 	addi	r2,r2,-30144
    c24c:	e0bf7015 	stw	r2,-576(fp)
   ad9144_channels[0].dds_phase_0 = 0;
    c250:	e03f7115 	stw	zero,-572(fp)
   ad9144_channels[0].dds_scale_0 = 500000;
    c254:	00800234 	movhi	r2,8
    c258:	10a84804 	addi	r2,r2,-24288
    c25c:	e0bf7215 	stw	r2,-568(fp)
   ad9144_channels[0].pat_data = 0xb1b0a1a0;
    c260:	00ac6c74 	movhi	r2,45489
    c264:	10a86804 	addi	r2,r2,-24160
    c268:	e0bf7715 	stw	r2,-548(fp)
   ad9144_channels[1].dds_dual_tone = 0;
    c26c:	e03f7f15 	stw	zero,-516(fp)
   ad9144_channels[1].dds_frequency_0 = 11*1000*1000;
    c270:	00802a34 	movhi	r2,168
    c274:	10b63004 	addi	r2,r2,-10048
    c278:	e0bf7915 	stw	r2,-540(fp)
   ad9144_channels[1].dds_phase_0 = 0;
    c27c:	e03f7a15 	stw	zero,-536(fp)
   ad9144_channels[1].dds_scale_0 = 500000;
    c280:	00800234 	movhi	r2,8
    c284:	10a84804 	addi	r2,r2,-24288
    c288:	e0bf7b15 	stw	r2,-532(fp)
   ad9144_channels[1].pat_data = 0xd1d0c1c0;
    c28c:	00b47474 	movhi	r2,53713
    c290:	10b07004 	addi	r2,r2,-15936
    c294:	e0bf8015 	stw	r2,-512(fp)
   ad9144_channels[0].sel = DAC_SRC_DDS;
    c298:	e03f7815 	stw	zero,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_DDS;
    c29c:	e03f8115 	stw	zero,-508(fp)

   ad9144_param.lane_rate_kbps = 10000000;
    c2a0:	00802674 	movhi	r2,153
    c2a4:	10a5a004 	addi	r2,r2,-27008
    c2a8:	e0bfa215 	stw	r2,-376(fp)
   ad9144_param.spi3wire = 1;
    c2ac:	00800044 	movi	r2,1
    c2b0:	e0bf9105 	stb	r2,-444(fp)
   ad9144_param.interpolation = 1;
    c2b4:	00800044 	movi	r2,1
    c2b8:	e0bf9145 	stb	r2,-443(fp)
   ad9144_param.pll_enable = 0;
    c2bc:	e03fa6c5 	stb	zero,-357(fp)
   ad9144_param.jesd204_subclass = 1;
    c2c0:	00800044 	movi	r2,1
    c2c4:	e0bfa445 	stb	r2,-367(fp)
   ad9144_param.jesd204_scrambling = 1;
    c2c8:	00800044 	movi	r2,1
    c2cc:	e0bfa485 	stb	r2,-366(fp)
   ad9144_param.jesd204_mode = 4;
    c2d0:	00800104 	movi	r2,4
    c2d4:	e0bfa405 	stb	r2,-368(fp)
   for(n=0; n<ARRAY_SIZE(ad9144_param.jesd204_lane_xbar); n++) {
    c2d8:	e03fff15 	stw	zero,-4(fp)
    c2dc:	00000806 	br	c300 <daq2_init+0x390>
      ad9144_param.jesd204_lane_xbar[n] = n;
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
    c2e4:	1007883a 	mov	r3,r2
    c2e8:	e0bfff17 	ldw	r2,-4(fp)
    c2ec:	e085883a 	add	r2,fp,r2
    c2f0:	10ffa4c5 	stb	r3,-365(r2)
   for(n=0; n<ARRAY_SIZE(ad9144_param.jesd204_lane_xbar); n++) {
    c2f4:	e0bfff17 	ldw	r2,-4(fp)
    c2f8:	10800044 	addi	r2,r2,1
    c2fc:	e0bfff15 	stw	r2,-4(fp)
    c300:	e0bfff17 	ldw	r2,-4(fp)
    c304:	10800230 	cmpltui	r2,r2,8
    c308:	103ff51e 	bne	r2,zero,c2e0 <__alt_mem_mcu_subsystem_ram_0+0x77fec2e0>
   }

   ad9144_core.no_of_channels = 2;
    c30c:	00800084 	movi	r2,2
    c310:	e0bf8345 	stb	r2,-499(fp)
   ad9144_core.resolution = 16;
    c314:	00800404 	movi	r2,16
    c318:	e0bf8305 	stb	r2,-500(fp)
   ad9144_core.channels = &ad9144_channels[0];
    c31c:	e0bf7004 	addi	r2,fp,-576
    c320:	e0bf8415 	stw	r2,-496(fp)

   ad9144_param.stpl_samples[0][0] = (ad9144_channels[0].pat_data >> 0)  & 0xffff;
    c324:	e0bf7717 	ldw	r2,-548(fp)
    c328:	10bfffcc 	andi	r2,r2,65535
    c32c:	e0bf9215 	stw	r2,-440(fp)
   ad9144_param.stpl_samples[0][1] = (ad9144_channels[0].pat_data >> 16) & 0xffff;
    c330:	e0bf7717 	ldw	r2,-548(fp)
    c334:	1004d43a 	srli	r2,r2,16
    c338:	e0bf9315 	stw	r2,-436(fp)
   ad9144_param.stpl_samples[0][2] = (ad9144_channels[0].pat_data >> 0)  & 0xffff;
    c33c:	e0bf7717 	ldw	r2,-548(fp)
    c340:	10bfffcc 	andi	r2,r2,65535
    c344:	e0bf9415 	stw	r2,-432(fp)
   ad9144_param.stpl_samples[0][3] = (ad9144_channels[0].pat_data >> 16) & 0xffff;
    c348:	e0bf7717 	ldw	r2,-548(fp)
    c34c:	1004d43a 	srli	r2,r2,16
    c350:	e0bf9515 	stw	r2,-428(fp)
   ad9144_param.stpl_samples[1][0] = (ad9144_channels[1].pat_data >> 0)  & 0xffff;
    c354:	e0bf8017 	ldw	r2,-512(fp)
    c358:	10bfffcc 	andi	r2,r2,65535
    c35c:	e0bf9615 	stw	r2,-424(fp)
   ad9144_param.stpl_samples[1][1] = (ad9144_channels[1].pat_data >> 16) & 0xffff;
    c360:	e0bf8017 	ldw	r2,-512(fp)
    c364:	1004d43a 	srli	r2,r2,16
    c368:	e0bf9715 	stw	r2,-420(fp)
   ad9144_param.stpl_samples[1][2] = (ad9144_channels[1].pat_data >> 0)  & 0xffff;
    c36c:	e0bf8017 	ldw	r2,-512(fp)
    c370:	10bfffcc 	andi	r2,r2,65535
    c374:	e0bf9815 	stw	r2,-416(fp)
   ad9144_param.stpl_samples[1][3] = (ad9144_channels[1].pat_data >> 16) & 0xffff;
    c378:	e0bf8017 	ldw	r2,-512(fp)
    c37c:	1004d43a 	srli	r2,r2,16
    c380:	e0bf9915 	stw	r2,-412(fp)
   //******************************************************************************
   // ADC (AD9680) and the receive path ( AXI_ADXCVR,
   // JESD204, AXI_AD9680, TX DMAC) configuration
   //******************************************************************************

   ad9680_param.lane_rate_kbps = 10000000;
    c384:	00802674 	movhi	r2,153
    c388:	10a5a004 	addi	r2,r2,-27008
    c38c:	e0bf8c15 	stw	r2,-464(fp)

   xcvr_getconfig(&ad9680_xcvr);
    c390:	e0bf0e04 	addi	r2,fp,-968
    c394:	1009883a 	mov	r4,r2
    c398:	00086540 	call	8654 <xcvr_getconfig>
   ad9680_xcvr.reconfig_bypass = 1;
    c39c:	00800044 	movi	r2,1
    c3a0:	e0bf1405 	stb	r2,-944(fp)

   ad9680_xcvr.rx_tx_n = 1;
    c3a4:	00800044 	movi	r2,1
    c3a8:	e0bf0e45 	stb	r2,-967(fp)
   ad9680_xcvr.lane_rate_kbps = ad9680_param.lane_rate_kbps;
    c3ac:	e0bf8c17 	ldw	r2,-464(fp)
    c3b0:	e0bf1215 	stw	r2,-952(fp)

   ad9680_jesd.scramble_enable = 1;
    c3b4:	00800044 	movi	r2,1
    c3b8:	e0bf3745 	stb	r2,-803(fp)
   ad9680_jesd.octets_per_frame = 1;
    c3bc:	00800044 	movi	r2,1
    c3c0:	e0bf37c5 	stb	r2,-801(fp)
   ad9680_jesd.frames_per_multiframe = 32;
    c3c4:	00800804 	movi	r2,32
    c3c8:	e0bf3805 	stb	r2,-800(fp)
   ad9680_jesd.subclass_mode = 1;
    c3cc:	00800044 	movi	r2,1
    c3d0:	e0bf3945 	stb	r2,-795(fp)

   ad9680_core.no_of_channels = 2;
    c3d4:	00800084 	movi	r2,2
    c3d8:	e0bf3d45 	stb	r2,-779(fp)
   ad9680_core.resolution = 14;
    c3dc:	00800384 	movi	r2,14
    c3e0:	e0bf3d85 	stb	r2,-778(fp)

   //******************************************************************************
   // configure the receiver DMA
   //******************************************************************************

   ad9680_dma.type = DMAC_RX;
    c3e4:	e03f0b05 	stb	zero,-980(fp)
   ad9680_dma.transfer = &rx_xfer;
    c3e8:	e0bf0704 	addi	r2,fp,-996
    c3ec:	e0bf0d15 	stw	r2,-972(fp)
   rx_xfer.id = 0;
    c3f0:	e03f0715 	stw	zero,-996(fp)
   rx_xfer.no_of_samples = 32768;
    c3f4:	00a00014 	movui	r2,32768
    c3f8:	e0bf0915 	stw	r2,-988(fp)

   ad9144_dma.type = DMAC_TX;
    c3fc:	00800044 	movi	r2,1
    c400:	e0bf6705 	stb	r2,-612(fp)
   ad9144_dma.transfer = &tx_xfer;
    c404:	e0bf0404 	addi	r2,fp,-1008
    c408:	e0bf6915 	stw	r2,-604(fp)
   ad9144_dma.flags = DMAC_FLAGS_TLAST;
    c40c:	00800084 	movi	r2,2
    c410:	e0bf6745 	stb	r2,-611(fp)
   tx_xfer.id = 0;
    c414:	e03f0415 	stw	zero,-1008(fp)
   tx_xfer.no_of_samples = dac_buffer_load(ad9144_core, tx_xfer.start_address);
    c418:	e0bf0517 	ldw	r2,-1004(fp)
    c41c:	100f883a 	mov	r7,r2
    c420:	e13f8217 	ldw	r4,-504(fp)
    c424:	e17f8317 	ldw	r5,-500(fp)
    c428:	e1bf8417 	ldw	r6,-496(fp)
    c42c:	00040840 	call	4084 <dac_buffer_load>
    c430:	e0bf0615 	stw	r2,-1000(fp)

   // change the default JESD configurations, if required
   fmcdaq2_reconfig(&ad9144_param,
    c434:	e0bfad17 	ldw	r2,-332(fp)
    c438:	e1bf0e04 	addi	r6,fp,-968
    c43c:	e17f8804 	addi	r5,fp,-480
    c440:	e13f3e04 	addi	r4,fp,-776
    c444:	e0ff8d04 	addi	r3,fp,-460
    c448:	d8800015 	stw	r2,0(sp)
    c44c:	300f883a 	mov	r7,r6
    c450:	280d883a 	mov	r6,r5
    c454:	200b883a 	mov	r5,r4
    c458:	1809883a 	mov	r4,r3
    c45c:	000bab40 	call	bab4 <fmcdaq2_reconfig>
   gpio_desc *clkd_sync;
   gpio_desc *dac_reset;
   gpio_desc *dac_txen;
   gpio_desc *adc_pd;

   gpio_get(&clkd_sync, GPIO_CLKD_SYNC);
    c460:	e0bf0304 	addi	r2,fp,-1012
    c464:	01400984 	movi	r5,38
    c468:	1009883a 	mov	r4,r2
    c46c:	0007e2c0 	call	7e2c <gpio_get>
   gpio_get(&dac_reset, GPIO_DAC_RESET);
    c470:	e0bf0204 	addi	r2,fp,-1016
    c474:	01400a04 	movi	r5,40
    c478:	1009883a 	mov	r4,r2
    c47c:	0007e2c0 	call	7e2c <gpio_get>
   gpio_get(&dac_txen,  GPIO_DAC_TXEN);
    c480:	e0bf0104 	addi	r2,fp,-1020
    c484:	01400a44 	movi	r5,41
    c488:	1009883a 	mov	r4,r2
    c48c:	0007e2c0 	call	7e2c <gpio_get>
   gpio_get(&adc_pd,    GPIO_ADC_PD);
    c490:	e0bf0004 	addi	r2,fp,-1024
    c494:	01400a84 	movi	r5,42
    c498:	1009883a 	mov	r4,r2
    c49c:	0007e2c0 	call	7e2c <gpio_get>

   gpio_set_value(clkd_sync, 0);
    c4a0:	e0bf0317 	ldw	r2,-1012(fp)
    c4a4:	000b883a 	mov	r5,zero
    c4a8:	1009883a 	mov	r4,r2
    c4ac:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(dac_reset, 0);
    c4b0:	e0bf0217 	ldw	r2,-1016(fp)
    c4b4:	000b883a 	mov	r5,zero
    c4b8:	1009883a 	mov	r4,r2
    c4bc:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(dac_txen,  0);
    c4c0:	e0bf0117 	ldw	r2,-1020(fp)
    c4c4:	000b883a 	mov	r5,zero
    c4c8:	1009883a 	mov	r4,r2
    c4cc:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(adc_pd,    1);
    c4d0:	e0bf0017 	ldw	r2,-1024(fp)
    c4d4:	01400044 	movi	r5,1
    c4d8:	1009883a 	mov	r4,r2
    c4dc:	0007f680 	call	7f68 <gpio_set_value>
   mdelay(5);
    c4e0:	0104e204 	movi	r4,5000
    c4e4:	00206540 	call	20654 <usleep>

   gpio_set_value(clkd_sync, 1);
    c4e8:	e0bf0317 	ldw	r2,-1012(fp)
    c4ec:	01400044 	movi	r5,1
    c4f0:	1009883a 	mov	r4,r2
    c4f4:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(dac_reset, 1);
    c4f8:	e0bf0217 	ldw	r2,-1016(fp)
    c4fc:	01400044 	movi	r5,1
    c500:	1009883a 	mov	r4,r2
    c504:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(dac_txen,  1);
    c508:	e0bf0117 	ldw	r2,-1020(fp)
    c50c:	01400044 	movi	r5,1
    c510:	1009883a 	mov	r4,r2
    c514:	0007f680 	call	7f68 <gpio_set_value>
   gpio_set_value(adc_pd,    0);
    c518:	e0bf0017 	ldw	r2,-1024(fp)
    c51c:	000b883a 	mov	r5,zero
    c520:	1009883a 	mov	r4,r2
    c524:	0007f680 	call	7f68 <gpio_set_value>

   // setup clocks

   ad9523_setup(&ad9523_device, &ad9523_param);
    c528:	e0ffa904 	addi	r3,fp,-348
    c52c:	e0bf8704 	addi	r2,fp,-484
    c530:	180b883a 	mov	r5,r3
    c534:	1009883a 	mov	r4,r2
    c538:	000213c0 	call	213c <ad9523_setup>
   // Both sequences are interleaved here so that the transceivers which might
   // be shared between the DAC and ADC link are enabled at the same time.


   // ADC
   ad9680_setup(&ad9680_device, &ad9680_param);
    c53c:	e0ff8804 	addi	r3,fp,-480
    c540:	e0bf8504 	addi	r2,fp,-492
    c544:	180b883a 	mov	r5,r3
    c548:	1009883a 	mov	r4,r2
    c54c:	0002f300 	call	2f30 <ad9680_setup>

   // DAC FPGA JESD204 link layer
   jesd_setup(&ad9144_jesd);
    c550:	e0bf6a04 	addi	r2,fp,-600
    c554:	1009883a 	mov	r4,r2
    c558:	00071980 	call	7198 <jesd_setup>

   // ADC and DAC FPGA JESD204 PHY layer
#ifdef ALTERA
   xcvr_setup(&ad9144_xcvr);
    c55c:	e0bf3e04 	addi	r2,fp,-776
    c560:	1009883a 	mov	r4,r2
    c564:	00084dc0 	call	84dc <xcvr_setup>
   xcvr_setup(&ad9680_xcvr);
    c568:	e0bf0e04 	addi	r2,fp,-968
    c56c:	1009883a 	mov	r4,r2
    c570:	00084dc0 	call	84dc <xcvr_setup>
#endif

   // ADC FPGA JESD204 link layer
   jesd_setup(&ad9680_jesd);
    c574:	e0bf3604 	addi	r2,fp,-808
    c578:	1009883a 	mov	r4,r2
    c57c:	00071980 	call	7198 <jesd_setup>

   // DAC
   ad9144_setup(&ad9144_device, &ad9144_param);
    c580:	e0ff8d04 	addi	r3,fp,-460
    c584:	e0bf8604 	addi	r2,fp,-488
    c588:	180b883a 	mov	r5,r3
    c58c:	1009883a 	mov	r4,r2
    c590:	0000aa40 	call	aa4 <ad9144_setup>

   // JESD core status
   axi_jesd204_tx_status_read(&ad9144_jesd);
    c594:	e0bf6a04 	addi	r2,fp,-600
    c598:	1009883a 	mov	r4,r2
    c59c:	00075cc0 	call	75cc <axi_jesd204_tx_status_read>
   axi_jesd204_rx_status_read(&ad9680_jesd);
    c5a0:	e0bf3604 	addi	r2,fp,-808
    c5a4:	1009883a 	mov	r4,r2
    c5a8:	00073d40 	call	73d4 <axi_jesd204_rx_status_read>

   // interface core set up
   adc_setup(ad9680_core);
    c5ac:	e13f3c17 	ldw	r4,-784(fp)
    c5b0:	e17f3d17 	ldw	r5,-780(fp)
    c5b4:	00031dc0 	call	31dc <adc_setup>
   dac_setup(&ad9144_core);
    c5b8:	e0bf8204 	addi	r2,fp,-504
    c5bc:	1009883a 	mov	r4,r2
    c5c0:	00049a40 	call	49a4 <dac_setup>

   ad9144_status(ad9144_device);
    c5c4:	e0bf8617 	ldw	r2,-488(fp)
    c5c8:	1009883a 	mov	r4,r2
    c5cc:	00011e40 	call	11e4 <ad9144_status>

   //******************************************************************************
   // transport path testing
   //******************************************************************************

   ad9144_channels[0].sel = DAC_SRC_SED;
    c5d0:	00800044 	movi	r2,1
    c5d4:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_SED;
    c5d8:	00800044 	movi	r2,1
    c5dc:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
    c5e0:	e0bf8204 	addi	r2,fp,-504
    c5e4:	1009883a 	mov	r4,r2
    c5e8:	0004aa40 	call	4aa4 <dac_data_setup>
   ad9144_short_pattern_test(ad9144_device, &ad9144_param);
    c5ec:	e0bf8617 	ldw	r2,-488(fp)
    c5f0:	e0ff8d04 	addi	r3,fp,-460
    c5f4:	180b883a 	mov	r5,r3
    c5f8:	1009883a 	mov	r4,r2
    c5fc:	00013640 	call	1364 <ad9144_short_pattern_test>

   // PN7 data path test

   ad9144_channels[0].sel = DAC_SRC_PN23;
    c600:	00800184 	movi	r2,6
    c604:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_PN23;
    c608:	00800184 	movi	r2,6
    c60c:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
    c610:	e0bf8204 	addi	r2,fp,-504
    c614:	1009883a 	mov	r4,r2
    c618:	0004aa40 	call	4aa4 <dac_data_setup>
   ad9144_param.prbs_type = AD9144_PRBS7;
    c61c:	e03fa315 	stw	zero,-372(fp)
   ad9144_datapath_prbs_test(ad9144_device, &ad9144_param);
    c620:	e0bf8617 	ldw	r2,-488(fp)
    c624:	e0ff8d04 	addi	r3,fp,-460
    c628:	180b883a 	mov	r5,r3
    c62c:	1009883a 	mov	r4,r2
    c630:	000158c0 	call	158c <ad9144_datapath_prbs_test>

   // PN15 data path test

   ad9144_channels[0].sel = DAC_SRC_PN31;
    c634:	008001c4 	movi	r2,7
    c638:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_PN31;
    c63c:	008001c4 	movi	r2,7
    c640:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
    c644:	e0bf8204 	addi	r2,fp,-504
    c648:	1009883a 	mov	r4,r2
    c64c:	0004aa40 	call	4aa4 <dac_data_setup>
   ad9144_param.prbs_type = AD9144_PRBS15;
    c650:	00800044 	movi	r2,1
    c654:	e0bfa315 	stw	r2,-372(fp)
   ad9144_datapath_prbs_test(ad9144_device, &ad9144_param);
    c658:	e0bf8617 	ldw	r2,-488(fp)
    c65c:	e0ff8d04 	addi	r3,fp,-460
    c660:	180b883a 	mov	r5,r3
    c664:	1009883a 	mov	r4,r2
    c668:	000158c0 	call	158c <ad9144_datapath_prbs_test>

   //******************************************************************************
   // receive path testing
   //******************************************************************************

   ad9680_test(ad9680_device, AD9680_TEST_PN9);
    c66c:	e0bf8517 	ldw	r2,-492(fp)
    c670:	01400184 	movi	r5,6
    c674:	1009883a 	mov	r4,r2
    c678:	0002ebc0 	call	2ebc <ad9680_test>
   if(adc_pn_mon(ad9680_core, ADC_PN9) == -1) {
    c67c:	000d883a 	mov	r6,zero
    c680:	e13f3c17 	ldw	r4,-784(fp)
    c684:	e17f3d17 	ldw	r5,-780(fp)
    c688:	00038b00 	call	38b0 <adc_pn_mon>
    c68c:	10bfffd8 	cmpnei	r2,r2,-1
    c690:	1000051e 	bne	r2,zero,c6a8 <daq2_init+0x738>
      printf("%s ad9680 - PN9 sequence mismatch!\n", __func__);
    c694:	014000b4 	movhi	r5,2
    c698:	295a9304 	addi	r5,r5,27212
    c69c:	010000b4 	movhi	r4,2
    c6a0:	211a6b04 	addi	r4,r4,27052
    c6a4:	0010ec40 	call	10ec4 <printf>
   };
   ad9680_test(ad9680_device, AD9680_TEST_PN23);
    c6a8:	e0bf8517 	ldw	r2,-492(fp)
    c6ac:	01400144 	movi	r5,5
    c6b0:	1009883a 	mov	r4,r2
    c6b4:	0002ebc0 	call	2ebc <ad9680_test>
   if(adc_pn_mon(ad9680_core, ADC_PN23A) == -1) {
    c6b8:	01800044 	movi	r6,1
    c6bc:	e13f3c17 	ldw	r4,-784(fp)
    c6c0:	e17f3d17 	ldw	r5,-780(fp)
    c6c4:	00038b00 	call	38b0 <adc_pn_mon>
    c6c8:	10bfffd8 	cmpnei	r2,r2,-1
    c6cc:	1000051e 	bne	r2,zero,c6e4 <daq2_init+0x774>
      printf("%s ad9680 - PN23 sequence mismatch!\n", __func__);
    c6d0:	014000b4 	movhi	r5,2
    c6d4:	295a9304 	addi	r5,r5,27212
    c6d8:	010000b4 	movhi	r4,2
    c6dc:	211a7404 	addi	r4,r4,27088
    c6e0:	0010ec40 	call	10ec4 <printf>

   if(!dmac_start_transaction(ad9144_dma)) {
      printf("daq2: transmit data from memory\n");
   };
#else
   ad9144_channels[0].sel = DAC_SRC_DDS;
    c6e4:	e03f7815 	stw	zero,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_DDS;
    c6e8:	e03f8115 	stw	zero,-508(fp)
   dac_data_setup(&ad9144_core);
    c6ec:	e0bf8204 	addi	r2,fp,-504
    c6f0:	1009883a 	mov	r4,r2
    c6f4:	0004aa40 	call	4aa4 <dac_data_setup>

   printf("daq2: setup and configuration is done\n");
    c6f8:	010000b4 	movhi	r4,2
    c6fc:	211a7e04 	addi	r4,r4,27128
    c700:	0010fe80 	call	10fe8 <puts>
#endif
   //******************************************************************************
   // external loopback - capture data with DMA
   //******************************************************************************

   ad9680_test(ad9680_device, AD9680_TEST_OFF);
    c704:	e0bf8517 	ldw	r2,-492(fp)
    c708:	000b883a 	mov	r5,zero
    c70c:	1009883a 	mov	r4,r2
    c710:	0002ebc0 	call	2ebc <ad9680_test>
   if(!dmac_start_transaction(ad9680_dma)) {
    c714:	e13f0a17 	ldw	r4,-984(fp)
    c718:	e17f0b17 	ldw	r5,-980(fp)
    c71c:	e1bf0c17 	ldw	r6,-976(fp)
    c720:	e1ff0d17 	ldw	r7,-972(fp)
    c724:	0004d440 	call	4d44 <dmac_start_transaction>
    c728:	1000031e 	bne	r2,zero,c738 <daq2_init+0x7c8>
      printf("daq2: RX capture done.\n");
    c72c:	010000b4 	movhi	r4,2
    c730:	211a8804 	addi	r4,r4,27168
    c734:	0010fe80 	call	10fe8 <puts>
   };

   // Memory deallocation for devices and spi
   ad9144_remove(ad9144_device);
    c738:	e0bf8617 	ldw	r2,-488(fp)
    c73c:	1009883a 	mov	r4,r2
    c740:	000119c0 	call	119c <ad9144_remove>
   ad9523_remove(ad9523_device);
    c744:	e0bf8717 	ldw	r2,-484(fp)
    c748:	1009883a 	mov	r4,r2
    c74c:	0002d700 	call	2d70 <ad9523_remove>
   ad9680_remove(ad9680_device);
    c750:	e0bf8517 	ldw	r2,-492(fp)
    c754:	1009883a 	mov	r4,r2
    c758:	00030e40 	call	30e4 <ad9680_remove>

   // Memory deallocation for gpios
   gpio_remove(clkd_sync);
    c75c:	e0bf0317 	ldw	r2,-1012(fp)
    c760:	1009883a 	mov	r4,r2
    c764:	0007ebc0 	call	7ebc <gpio_remove>
   gpio_remove(dac_reset);
    c768:	e0bf0217 	ldw	r2,-1016(fp)
    c76c:	1009883a 	mov	r4,r2
    c770:	0007ebc0 	call	7ebc <gpio_remove>
   gpio_remove(dac_txen);
    c774:	e0bf0117 	ldw	r2,-1020(fp)
    c778:	1009883a 	mov	r4,r2
    c77c:	0007ebc0 	call	7ebc <gpio_remove>
   gpio_remove(adc_pd);
    c780:	e0bf0017 	ldw	r2,-1024(fp)
    c784:	1009883a 	mov	r4,r2
    c788:	0007ebc0 	call	7ebc <gpio_remove>

   return 0;
    c78c:	0005883a 	mov	r2,zero
}
    c790:	e037883a 	mov	sp,fp
    c794:	dfc00117 	ldw	ra,4(sp)
    c798:	df000017 	ldw	fp,0(sp)
    c79c:	dec00204 	addi	sp,sp,8
    c7a0:	f800283a 	ret

0000c7a4 <mem_writing>:


void mem_writing(unsigned int size)
{
    c7a4:	defffb04 	addi	sp,sp,-20
    c7a8:	dfc00415 	stw	ra,16(sp)
    c7ac:	df000315 	stw	fp,12(sp)
    c7b0:	df000304 	addi	fp,sp,12
    c7b4:	e13ffd15 	stw	r4,-12(fp)
   unsigned int i;
   volatile unsigned int *ptr;
   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
    c7b8:	e03ffe15 	stw	zero,-8(fp)
   memset(ptr, 0, sizeof(int)*size);
    c7bc:	e0bffd17 	ldw	r2,-12(fp)
    c7c0:	100490ba 	slli	r2,r2,2
    c7c4:	100d883a 	mov	r6,r2
    c7c8:	000b883a 	mov	r5,zero
    c7cc:	e13ffe17 	ldw	r4,-8(fp)
    c7d0:	00107280 	call	10728 <memset>
   for(i = 0; i < size; i++)
    c7d4:	e03fff15 	stw	zero,-4(fp)
    c7d8:	00000906 	br	c800 <mem_writing+0x5c>
   {
      ptr[i] = i;
    c7dc:	e0bfff17 	ldw	r2,-4(fp)
    c7e0:	100490ba 	slli	r2,r2,2
    c7e4:	e0fffe17 	ldw	r3,-8(fp)
    c7e8:	1885883a 	add	r2,r3,r2
    c7ec:	e0ffff17 	ldw	r3,-4(fp)
    c7f0:	10c00015 	stw	r3,0(r2)
   for(i = 0; i < size; i++)
    c7f4:	e0bfff17 	ldw	r2,-4(fp)
    c7f8:	10800044 	addi	r2,r2,1
    c7fc:	e0bfff15 	stw	r2,-4(fp)
    c800:	e0ffff17 	ldw	r3,-4(fp)
    c804:	e0bffd17 	ldw	r2,-12(fp)
    c808:	18bff436 	bltu	r3,r2,c7dc <__alt_mem_mcu_subsystem_ram_0+0x77fec7dc>
   }
}
    c80c:	0001883a 	nop
    c810:	e037883a 	mov	sp,fp
    c814:	dfc00117 	ldw	ra,4(sp)
    c818:	df000017 	ldw	fp,0(sp)
    c81c:	dec00204 	addi	sp,sp,8
    c820:	f800283a 	ret

0000c824 <mem_reading>:

unsigned int mem_reading(unsigned int size)
{
    c824:	defffa04 	addi	sp,sp,-24
    c828:	df000515 	stw	fp,20(sp)
    c82c:	df000504 	addi	fp,sp,20
    c830:	e13ffb15 	stw	r4,-20(fp)
   unsigned int value, i;
   unsigned int result = 0;
    c834:	e03ffe15 	stw	zero,-8(fp)
   volatile unsigned int *ptr;

   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
    c838:	e03ffd15 	stw	zero,-12(fp)
   for(i = 0; i < size; i++)
    c83c:	e03fff15 	stw	zero,-4(fp)
    c840:	00000f06 	br	c880 <mem_reading+0x5c>
   {
      value = ptr[i];
    c844:	e0bfff17 	ldw	r2,-4(fp)
    c848:	100490ba 	slli	r2,r2,2
    c84c:	e0fffd17 	ldw	r3,-12(fp)
    c850:	1885883a 	add	r2,r3,r2
    c854:	10800017 	ldw	r2,0(r2)
    c858:	e0bffc15 	stw	r2,-16(fp)
      if(value != i)
    c85c:	e0fffc17 	ldw	r3,-16(fp)
    c860:	e0bfff17 	ldw	r2,-4(fp)
    c864:	18800326 	beq	r3,r2,c874 <mem_reading+0x50>
      {
         result++;
    c868:	e0bffe17 	ldw	r2,-8(fp)
    c86c:	10800044 	addi	r2,r2,1
    c870:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i < size; i++)
    c874:	e0bfff17 	ldw	r2,-4(fp)
    c878:	10800044 	addi	r2,r2,1
    c87c:	e0bfff15 	stw	r2,-4(fp)
    c880:	e0ffff17 	ldw	r3,-4(fp)
    c884:	e0bffb17 	ldw	r2,-20(fp)
    c888:	18bfee36 	bltu	r3,r2,c844 <__alt_mem_mcu_subsystem_ram_0+0x77fec844>
      }
   }
   return result;
    c88c:	e0bffe17 	ldw	r2,-8(fp)
}
    c890:	e037883a 	mov	sp,fp
    c894:	df000017 	ldw	fp,0(sp)
    c898:	dec00104 	addi	sp,sp,4
    c89c:	f800283a 	ret

0000c8a0 <mem_testing>:

unsigned int mem_testing(unsigned int size)
{
    c8a0:	defffb04 	addi	sp,sp,-20
    c8a4:	dfc00415 	stw	ra,16(sp)
    c8a8:	df000315 	stw	fp,12(sp)
    c8ac:	df000304 	addi	fp,sp,12
    c8b0:	e13ffd15 	stw	r4,-12(fp)
   unsigned int i, value;
   unsigned int result  = 0;
    c8b4:	e03fff15 	stw	zero,-4(fp)
   volatile unsigned int *ptr;

   ptr = (volatile unsigned int*)DDR3_CTRL_AMM_0_BASE;
    c8b8:	e03ffe15 	stw	zero,-8(fp)

   mem_writing(size);
    c8bc:	e13ffd17 	ldw	r4,-12(fp)
    c8c0:	000c7a40 	call	c7a4 <mem_writing>
   result = mem_reading(size);
    c8c4:	e13ffd17 	ldw	r4,-12(fp)
    c8c8:	000c8240 	call	c824 <mem_reading>
    c8cc:	e0bfff15 	stw	r2,-4(fp)

   return result;
    c8d0:	e0bfff17 	ldw	r2,-4(fp)
}
    c8d4:	e037883a 	mov	sp,fp
    c8d8:	dfc00117 	ldw	ra,4(sp)
    c8dc:	df000017 	ldw	fp,0(sp)
    c8e0:	dec00204 	addi	sp,sp,8
    c8e4:	f800283a 	ret

0000c8e8 <main>:


int main()
{
    c8e8:	defeb904 	addi	sp,sp,-1308
    c8ec:	dfc14615 	stw	ra,1304(sp)
    c8f0:	df014515 	stw	fp,1300(sp)
    c8f4:	df014504 	addi	fp,sp,1300
   alt_flash_fd* fd;
   int number_of_regions;
   flash_region region;
   char buffer[1024] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    c8f8:	e0befb04 	addi	r2,fp,-1044
    c8fc:	00c10004 	movi	r3,1024
    c900:	180d883a 	mov	r6,r3
    c904:	000b883a 	mov	r5,zero
    c908:	1009883a 	mov	r4,r2
    c90c:	00107280 	call	10728 <memset>
    c910:	00800044 	movi	r2,1
    c914:	e0befb05 	stb	r2,-1044(fp)
    c918:	00800084 	movi	r2,2
    c91c:	e0befb45 	stb	r2,-1043(fp)
    c920:	008000c4 	movi	r2,3
    c924:	e0befb85 	stb	r2,-1042(fp)
    c928:	00800104 	movi	r2,4
    c92c:	e0befbc5 	stb	r2,-1041(fp)
    c930:	00800144 	movi	r2,5
    c934:	e0befc05 	stb	r2,-1040(fp)
    c938:	00800184 	movi	r2,6
    c93c:	e0befc45 	stb	r2,-1039(fp)
    c940:	008001c4 	movi	r2,7
    c944:	e0befc85 	stb	r2,-1038(fp)
    c948:	00800204 	movi	r2,8
    c94c:	e0befcc5 	stb	r2,-1037(fp)
    c950:	00800244 	movi	r2,9
    c954:	e0befd05 	stb	r2,-1036(fp)
    c958:	00800284 	movi	r2,10
    c95c:	e0befd45 	stb	r2,-1035(fp)
    c960:	008002c4 	movi	r2,11
    c964:	e0befd85 	stb	r2,-1034(fp)
    c968:	00800304 	movi	r2,12
    c96c:	e0befdc5 	stb	r2,-1033(fp)
    c970:	00800344 	movi	r2,13
    c974:	e0befe05 	stb	r2,-1032(fp)
    c978:	00800384 	movi	r2,14
    c97c:	e0befe45 	stb	r2,-1031(fp)
    c980:	008003c4 	movi	r2,15
    c984:	e0befe85 	stb	r2,-1030(fp)
    c988:	00800404 	movi	r2,16
    c98c:	e0befec5 	stb	r2,-1029(fp)


   volatile unsigned int *ptr, *csr;
   unsigned int i, counter, size;
   unsigned int reg;
   unsigned int result = 1;
    c990:	00800044 	movi	r2,1
    c994:	e0bfff15 	stw	r2,-4(fp)
   unsigned int value;

   daq2_init();
    c998:	000bf700 	call	bf70 <daq2_init>

   printf("Hello from Nios II!\n");
    c99c:	010000b4 	movhi	r4,2
    c9a0:	211a8e04 	addi	r4,r4,27192
    c9a4:	0010fe80 	call	10fe8 <puts>
   //alt_qspi_controller2_erase_block(fd, 0);
   //alt_qspi_controller2_write(fd, 0, "Hello World 123456789\0", 22);

   //alt_qspi_controller2_read(fd, 0, buffer, 256);
*/
   return 0;
    c9a8:	0005883a 	mov	r2,zero
}
    c9ac:	e037883a 	mov	sp,fp
    c9b0:	dfc00117 	ldw	ra,4(sp)
    c9b4:	df000017 	ldw	fp,0(sp)
    c9b8:	dec00204 	addi	sp,sp,8
    c9bc:	f800283a 	ret

0000c9c0 <__bswapsi2>:
    c9c0:	200a963a 	slli	r5,r4,24
    c9c4:	2004d63a 	srli	r2,r4,24
    c9c8:	2007d23a 	srai	r3,r4,8
    c9cc:	2008923a 	slli	r4,r4,8
    c9d0:	1144b03a 	or	r2,r2,r5
    c9d4:	18ffc00c 	andi	r3,r3,65280
    c9d8:	10c4b03a 	or	r2,r2,r3
    c9dc:	21003fec 	andhi	r4,r4,255
    c9e0:	1104b03a 	or	r2,r2,r4
    c9e4:	f800283a 	ret

0000c9e8 <__fixunsdfsi>:
    c9e8:	defffd04 	addi	sp,sp,-12
    c9ec:	000d883a 	mov	r6,zero
    c9f0:	01d07834 	movhi	r7,16864
    c9f4:	dc400115 	stw	r17,4(sp)
    c9f8:	dc000015 	stw	r16,0(sp)
    c9fc:	dfc00215 	stw	ra,8(sp)
    ca00:	2023883a 	mov	r17,r4
    ca04:	2821883a 	mov	r16,r5
    ca08:	000e9200 	call	e920 <__gedf2>
    ca0c:	1000080e 	bge	r2,zero,ca30 <__fixunsdfsi+0x48>
    ca10:	8809883a 	mov	r4,r17
    ca14:	800b883a 	mov	r5,r16
    ca18:	000f9b00 	call	f9b0 <__fixdfsi>
    ca1c:	dfc00217 	ldw	ra,8(sp)
    ca20:	dc400117 	ldw	r17,4(sp)
    ca24:	dc000017 	ldw	r16,0(sp)
    ca28:	dec00304 	addi	sp,sp,12
    ca2c:	f800283a 	ret
    ca30:	000d883a 	mov	r6,zero
    ca34:	01d07834 	movhi	r7,16864
    ca38:	8809883a 	mov	r4,r17
    ca3c:	800b883a 	mov	r5,r16
    ca40:	000f0dc0 	call	f0dc <__subdf3>
    ca44:	180b883a 	mov	r5,r3
    ca48:	1009883a 	mov	r4,r2
    ca4c:	000f9b00 	call	f9b0 <__fixdfsi>
    ca50:	00e00034 	movhi	r3,32768
    ca54:	10c5883a 	add	r2,r2,r3
    ca58:	003ff006 	br	ca1c <__alt_mem_mcu_subsystem_ram_0+0x77feca1c>

0000ca5c <__fixunsdfdi>:
    ca5c:	defffc04 	addi	sp,sp,-16
    ca60:	000d883a 	mov	r6,zero
    ca64:	01cf7c34 	movhi	r7,15856
    ca68:	dfc00315 	stw	ra,12(sp)
    ca6c:	dc800215 	stw	r18,8(sp)
    ca70:	dc400115 	stw	r17,4(sp)
    ca74:	dc000015 	stw	r16,0(sp)
    ca78:	2025883a 	mov	r18,r4
    ca7c:	2823883a 	mov	r17,r5
    ca80:	000ea000 	call	ea00 <__muldf3>
    ca84:	180b883a 	mov	r5,r3
    ca88:	1009883a 	mov	r4,r2
    ca8c:	000c9e80 	call	c9e8 <__fixunsdfsi>
    ca90:	1009883a 	mov	r4,r2
    ca94:	1021883a 	mov	r16,r2
    ca98:	000fa300 	call	fa30 <__floatunsidf>
    ca9c:	000d883a 	mov	r6,zero
    caa0:	01d07c34 	movhi	r7,16880
    caa4:	1009883a 	mov	r4,r2
    caa8:	180b883a 	mov	r5,r3
    caac:	000ea000 	call	ea00 <__muldf3>
    cab0:	100d883a 	mov	r6,r2
    cab4:	180f883a 	mov	r7,r3
    cab8:	9009883a 	mov	r4,r18
    cabc:	880b883a 	mov	r5,r17
    cac0:	000f0dc0 	call	f0dc <__subdf3>
    cac4:	180b883a 	mov	r5,r3
    cac8:	1009883a 	mov	r4,r2
    cacc:	000c9e80 	call	c9e8 <__fixunsdfsi>
    cad0:	8007883a 	mov	r3,r16
    cad4:	dfc00317 	ldw	ra,12(sp)
    cad8:	dc800217 	ldw	r18,8(sp)
    cadc:	dc400117 	ldw	r17,4(sp)
    cae0:	dc000017 	ldw	r16,0(sp)
    cae4:	dec00404 	addi	sp,sp,16
    cae8:	f800283a 	ret

0000caec <__udivdi3>:
    caec:	defff504 	addi	sp,sp,-44
    caf0:	dd400615 	stw	r21,24(sp)
    caf4:	dc000115 	stw	r16,4(sp)
    caf8:	dfc00a15 	stw	ra,40(sp)
    cafc:	df000915 	stw	fp,36(sp)
    cb00:	ddc00815 	stw	r23,32(sp)
    cb04:	dd800715 	stw	r22,28(sp)
    cb08:	dd000515 	stw	r20,20(sp)
    cb0c:	dcc00415 	stw	r19,16(sp)
    cb10:	dc800315 	stw	r18,12(sp)
    cb14:	dc400215 	stw	r17,8(sp)
    cb18:	202b883a 	mov	r21,r4
    cb1c:	2821883a 	mov	r16,r5
    cb20:	38003e1e 	bne	r7,zero,cc1c <__udivdi3+0x130>
    cb24:	3827883a 	mov	r19,r7
    cb28:	3023883a 	mov	r17,r6
    cb2c:	2025883a 	mov	r18,r4
    cb30:	29804c2e 	bgeu	r5,r6,cc64 <__udivdi3+0x178>
    cb34:	00bfffd4 	movui	r2,65535
    cb38:	282d883a 	mov	r22,r5
    cb3c:	1180a02e 	bgeu	r2,r6,cdc0 <__udivdi3+0x2d4>
    cb40:	00804034 	movhi	r2,256
    cb44:	30813036 	bltu	r6,r2,d008 <__udivdi3+0x51c>
    cb48:	3006d63a 	srli	r3,r6,24
    cb4c:	04c00604 	movi	r19,24
    cb50:	008000b4 	movhi	r2,2
    cb54:	1885883a 	add	r2,r3,r2
    cb58:	109a9583 	ldbu	r2,27222(r2)
    cb5c:	14e7883a 	add	r19,r2,r19
    cb60:	00800804 	movi	r2,32
    cb64:	14c5c83a 	sub	r2,r2,r19
    cb68:	10000526 	beq	r2,zero,cb80 <__udivdi3+0x94>
    cb6c:	80a0983a 	sll	r16,r16,r2
    cb70:	ace6d83a 	srl	r19,r21,r19
    cb74:	30a2983a 	sll	r17,r6,r2
    cb78:	a8a4983a 	sll	r18,r21,r2
    cb7c:	9c2cb03a 	or	r22,r19,r16
    cb80:	882ad43a 	srli	r21,r17,16
    cb84:	b009883a 	mov	r4,r22
    cb88:	8d3fffcc 	andi	r20,r17,65535
    cb8c:	a80b883a 	mov	r5,r21
    cb90:	000d73c0 	call	d73c <__umodsi3>
    cb94:	a80b883a 	mov	r5,r21
    cb98:	b009883a 	mov	r4,r22
    cb9c:	1027883a 	mov	r19,r2
    cba0:	000d6d80 	call	d6d8 <__udivsi3>
    cba4:	1021883a 	mov	r16,r2
    cba8:	9826943a 	slli	r19,r19,16
    cbac:	9004d43a 	srli	r2,r18,16
    cbb0:	a407383a 	mul	r3,r20,r16
    cbb4:	9884b03a 	or	r2,r19,r2
    cbb8:	10c0052e 	bgeu	r2,r3,cbd0 <__udivdi3+0xe4>
    cbbc:	1445883a 	add	r2,r2,r17
    cbc0:	813fffc4 	addi	r4,r16,-1
    cbc4:	14400136 	bltu	r2,r17,cbcc <__udivdi3+0xe0>
    cbc8:	10c12836 	bltu	r2,r3,d06c <__udivdi3+0x580>
    cbcc:	2021883a 	mov	r16,r4
    cbd0:	10e7c83a 	sub	r19,r2,r3
    cbd4:	a80b883a 	mov	r5,r21
    cbd8:	9809883a 	mov	r4,r19
    cbdc:	000d73c0 	call	d73c <__umodsi3>
    cbe0:	102d883a 	mov	r22,r2
    cbe4:	a80b883a 	mov	r5,r21
    cbe8:	9809883a 	mov	r4,r19
    cbec:	000d6d80 	call	d6d8 <__udivsi3>
    cbf0:	b02c943a 	slli	r22,r22,16
    cbf4:	a0a9383a 	mul	r20,r20,r2
    cbf8:	94bfffcc 	andi	r18,r18,65535
    cbfc:	b4a4b03a 	or	r18,r22,r18
    cc00:	9500752e 	bgeu	r18,r20,cdd8 <__udivdi3+0x2ec>
    cc04:	8ca5883a 	add	r18,r17,r18
    cc08:	10ffffc4 	addi	r3,r2,-1
    cc0c:	94407136 	bltu	r18,r17,cdd4 <__udivdi3+0x2e8>
    cc10:	9500702e 	bgeu	r18,r20,cdd4 <__udivdi3+0x2e8>
    cc14:	10bfff84 	addi	r2,r2,-2
    cc18:	00006f06 	br	cdd8 <__udivdi3+0x2ec>
    cc1c:	29c05036 	bltu	r5,r7,cd60 <__udivdi3+0x274>
    cc20:	00bfffd4 	movui	r2,65535
    cc24:	11c05c2e 	bgeu	r2,r7,cd98 <__udivdi3+0x2ac>
    cc28:	00804034 	movhi	r2,256
    cc2c:	3880f036 	bltu	r7,r2,cff0 <__udivdi3+0x504>
    cc30:	3806d63a 	srli	r3,r7,24
    cc34:	01000604 	movi	r4,24
    cc38:	008000b4 	movhi	r2,2
    cc3c:	1885883a 	add	r2,r3,r2
    cc40:	10da9583 	ldbu	r3,27222(r2)
    cc44:	1907883a 	add	r3,r3,r4
    cc48:	01000804 	movi	r4,32
    cc4c:	20edc83a 	sub	r22,r4,r3
    cc50:	b000691e 	bne	r22,zero,cdf8 <__udivdi3+0x30c>
    cc54:	3c00f636 	bltu	r7,r16,d030 <__udivdi3+0x544>
    cc58:	a985403a 	cmpgeu	r2,r21,r6
    cc5c:	0007883a 	mov	r3,zero
    cc60:	00004106 	br	cd68 <__udivdi3+0x27c>
    cc64:	3000041e 	bne	r6,zero,cc78 <__udivdi3+0x18c>
    cc68:	000b883a 	mov	r5,zero
    cc6c:	01000044 	movi	r4,1
    cc70:	000d6d80 	call	d6d8 <__udivsi3>
    cc74:	1023883a 	mov	r17,r2
    cc78:	00bfffd4 	movui	r2,65535
    cc7c:	14404b2e 	bgeu	r2,r17,cdac <__udivdi3+0x2c0>
    cc80:	00804034 	movhi	r2,256
    cc84:	8880e536 	bltu	r17,r2,d01c <__udivdi3+0x530>
    cc88:	8806d63a 	srli	r3,r17,24
    cc8c:	04c00604 	movi	r19,24
    cc90:	008000b4 	movhi	r2,2
    cc94:	1885883a 	add	r2,r3,r2
    cc98:	109a9583 	ldbu	r2,27222(r2)
    cc9c:	14e7883a 	add	r19,r2,r19
    cca0:	00800804 	movi	r2,32
    cca4:	14c5c83a 	sub	r2,r2,r19
    cca8:	1000981e 	bne	r2,zero,cf0c <__udivdi3+0x420>
    ccac:	8828d43a 	srli	r20,r17,16
    ccb0:	8461c83a 	sub	r16,r16,r17
    ccb4:	8d7fffcc 	andi	r21,r17,65535
    ccb8:	00c00044 	movi	r3,1
    ccbc:	8009883a 	mov	r4,r16
    ccc0:	a00b883a 	mov	r5,r20
    ccc4:	d8c00015 	stw	r3,0(sp)
    ccc8:	000d73c0 	call	d73c <__umodsi3>
    cccc:	8009883a 	mov	r4,r16
    ccd0:	a00b883a 	mov	r5,r20
    ccd4:	1027883a 	mov	r19,r2
    ccd8:	000d6d80 	call	d6d8 <__udivsi3>
    ccdc:	1021883a 	mov	r16,r2
    cce0:	9826943a 	slli	r19,r19,16
    cce4:	9004d43a 	srli	r2,r18,16
    cce8:	8549383a 	mul	r4,r16,r21
    ccec:	d8c00017 	ldw	r3,0(sp)
    ccf0:	9884b03a 	or	r2,r19,r2
    ccf4:	1100052e 	bgeu	r2,r4,cd0c <__udivdi3+0x220>
    ccf8:	1445883a 	add	r2,r2,r17
    ccfc:	817fffc4 	addi	r5,r16,-1
    cd00:	14400136 	bltu	r2,r17,cd08 <__udivdi3+0x21c>
    cd04:	1100dc36 	bltu	r2,r4,d078 <__udivdi3+0x58c>
    cd08:	2821883a 	mov	r16,r5
    cd0c:	1127c83a 	sub	r19,r2,r4
    cd10:	a00b883a 	mov	r5,r20
    cd14:	9809883a 	mov	r4,r19
    cd18:	d8c00015 	stw	r3,0(sp)
    cd1c:	000d73c0 	call	d73c <__umodsi3>
    cd20:	102d883a 	mov	r22,r2
    cd24:	a00b883a 	mov	r5,r20
    cd28:	9809883a 	mov	r4,r19
    cd2c:	000d6d80 	call	d6d8 <__udivsi3>
    cd30:	b02c943a 	slli	r22,r22,16
    cd34:	156b383a 	mul	r21,r2,r21
    cd38:	94bfffcc 	andi	r18,r18,65535
    cd3c:	b4a4b03a 	or	r18,r22,r18
    cd40:	d8c00017 	ldw	r3,0(sp)
    cd44:	9540292e 	bgeu	r18,r21,cdec <__udivdi3+0x300>
    cd48:	8ca5883a 	add	r18,r17,r18
    cd4c:	113fffc4 	addi	r4,r2,-1
    cd50:	94402536 	bltu	r18,r17,cde8 <__udivdi3+0x2fc>
    cd54:	9540242e 	bgeu	r18,r21,cde8 <__udivdi3+0x2fc>
    cd58:	10bfff84 	addi	r2,r2,-2
    cd5c:	00002306 	br	cdec <__udivdi3+0x300>
    cd60:	0007883a 	mov	r3,zero
    cd64:	0005883a 	mov	r2,zero
    cd68:	dfc00a17 	ldw	ra,40(sp)
    cd6c:	df000917 	ldw	fp,36(sp)
    cd70:	ddc00817 	ldw	r23,32(sp)
    cd74:	dd800717 	ldw	r22,28(sp)
    cd78:	dd400617 	ldw	r21,24(sp)
    cd7c:	dd000517 	ldw	r20,20(sp)
    cd80:	dcc00417 	ldw	r19,16(sp)
    cd84:	dc800317 	ldw	r18,12(sp)
    cd88:	dc400217 	ldw	r17,8(sp)
    cd8c:	dc000117 	ldw	r16,4(sp)
    cd90:	dec00b04 	addi	sp,sp,44
    cd94:	f800283a 	ret
    cd98:	38804030 	cmpltui	r2,r7,256
    cd9c:	1000971e 	bne	r2,zero,cffc <__udivdi3+0x510>
    cda0:	3806d23a 	srli	r3,r7,8
    cda4:	01000204 	movi	r4,8
    cda8:	003fa306 	br	cc38 <__alt_mem_mcu_subsystem_ram_0+0x77fecc38>
    cdac:	88804030 	cmpltui	r2,r17,256
    cdb0:	1000981e 	bne	r2,zero,d014 <__udivdi3+0x528>
    cdb4:	8806d23a 	srli	r3,r17,8
    cdb8:	04c00204 	movi	r19,8
    cdbc:	003fb406 	br	cc90 <__alt_mem_mcu_subsystem_ram_0+0x77fecc90>
    cdc0:	30804030 	cmpltui	r2,r6,256
    cdc4:	1000981e 	bne	r2,zero,d028 <__udivdi3+0x53c>
    cdc8:	3006d23a 	srli	r3,r6,8
    cdcc:	04c00204 	movi	r19,8
    cdd0:	003f5f06 	br	cb50 <__alt_mem_mcu_subsystem_ram_0+0x77fecb50>
    cdd4:	1805883a 	mov	r2,r3
    cdd8:	800c943a 	slli	r6,r16,16
    cddc:	0007883a 	mov	r3,zero
    cde0:	3084b03a 	or	r2,r6,r2
    cde4:	003fe006 	br	cd68 <__alt_mem_mcu_subsystem_ram_0+0x77fecd68>
    cde8:	2005883a 	mov	r2,r4
    cdec:	800c943a 	slli	r6,r16,16
    cdf0:	3084b03a 	or	r2,r6,r2
    cdf4:	003fdc06 	br	cd68 <__alt_mem_mcu_subsystem_ram_0+0x77fecd68>
    cdf8:	30f8d83a 	srl	fp,r6,r3
    cdfc:	3d8e983a 	sll	r7,r7,r22
    ce00:	80eed83a 	srl	r23,r16,r3
    ce04:	a8c6d83a 	srl	r3,r21,r3
    ce08:	e1f8b03a 	or	fp,fp,r7
    ce0c:	e024d43a 	srli	r18,fp,16
    ce10:	85a0983a 	sll	r16,r16,r22
    ce14:	b809883a 	mov	r4,r23
    ce18:	900b883a 	mov	r5,r18
    ce1c:	1c22b03a 	or	r17,r3,r16
    ce20:	35a8983a 	sll	r20,r6,r22
    ce24:	000d73c0 	call	d73c <__umodsi3>
    ce28:	b809883a 	mov	r4,r23
    ce2c:	900b883a 	mov	r5,r18
    ce30:	1027883a 	mov	r19,r2
    ce34:	000d6d80 	call	d6d8 <__udivsi3>
    ce38:	1021883a 	mov	r16,r2
    ce3c:	e0ffffcc 	andi	r3,fp,65535
    ce40:	9826943a 	slli	r19,r19,16
    ce44:	8804d43a 	srli	r2,r17,16
    ce48:	1c09383a 	mul	r4,r3,r16
    ce4c:	9884b03a 	or	r2,r19,r2
    ce50:	1100042e 	bgeu	r2,r4,ce64 <__udivdi3+0x378>
    ce54:	1705883a 	add	r2,r2,fp
    ce58:	817fffc4 	addi	r5,r16,-1
    ce5c:	17007b2e 	bgeu	r2,fp,d04c <__udivdi3+0x560>
    ce60:	2821883a 	mov	r16,r5
    ce64:	1127c83a 	sub	r19,r2,r4
    ce68:	900b883a 	mov	r5,r18
    ce6c:	9809883a 	mov	r4,r19
    ce70:	d8c00015 	stw	r3,0(sp)
    ce74:	000d73c0 	call	d73c <__umodsi3>
    ce78:	9809883a 	mov	r4,r19
    ce7c:	900b883a 	mov	r5,r18
    ce80:	102f883a 	mov	r23,r2
    ce84:	000d6d80 	call	d6d8 <__udivsi3>
    ce88:	d8c00017 	ldw	r3,0(sp)
    ce8c:	b82e943a 	slli	r23,r23,16
    ce90:	8c7fffcc 	andi	r17,r17,65535
    ce94:	1889383a 	mul	r4,r3,r2
    ce98:	bc62b03a 	or	r17,r23,r17
    ce9c:	8900042e 	bgeu	r17,r4,ceb0 <__udivdi3+0x3c4>
    cea0:	8f23883a 	add	r17,r17,fp
    cea4:	10ffffc4 	addi	r3,r2,-1
    cea8:	8f00642e 	bgeu	r17,fp,d03c <__udivdi3+0x550>
    ceac:	1805883a 	mov	r2,r3
    ceb0:	8020943a 	slli	r16,r16,16
    ceb4:	a17fffcc 	andi	r5,r20,65535
    ceb8:	a00cd43a 	srli	r6,r20,16
    cebc:	8084b03a 	or	r2,r16,r2
    cec0:	10ffffcc 	andi	r3,r2,65535
    cec4:	1028d43a 	srli	r20,r2,16
    cec8:	1951383a 	mul	r8,r3,r5
    cecc:	1987383a 	mul	r3,r3,r6
    ced0:	a14b383a 	mul	r5,r20,r5
    ced4:	400ed43a 	srli	r7,r8,16
    ced8:	8923c83a 	sub	r17,r17,r4
    cedc:	1947883a 	add	r3,r3,r5
    cee0:	38c7883a 	add	r3,r7,r3
    cee4:	a1a9383a 	mul	r20,r20,r6
    cee8:	1940022e 	bgeu	r3,r5,cef4 <__udivdi3+0x408>
    ceec:	01000074 	movhi	r4,1
    cef0:	a129883a 	add	r20,r20,r4
    cef4:	180cd43a 	srli	r6,r3,16
    cef8:	3529883a 	add	r20,r6,r20
    cefc:	8d003a36 	bltu	r17,r20,cfe8 <__udivdi3+0x4fc>
    cf00:	8d003426 	beq	r17,r20,cfd4 <__udivdi3+0x4e8>
    cf04:	0007883a 	mov	r3,zero
    cf08:	003f9706 	br	cd68 <__alt_mem_mcu_subsystem_ram_0+0x77fecd68>
    cf0c:	88a2983a 	sll	r17,r17,r2
    cf10:	84ecd83a 	srl	r22,r16,r19
    cf14:	80a0983a 	sll	r16,r16,r2
    cf18:	8828d43a 	srli	r20,r17,16
    cf1c:	b009883a 	mov	r4,r22
    cf20:	ace6d83a 	srl	r19,r21,r19
    cf24:	a00b883a 	mov	r5,r20
    cf28:	a8a4983a 	sll	r18,r21,r2
    cf2c:	000d73c0 	call	d73c <__umodsi3>
    cf30:	b009883a 	mov	r4,r22
    cf34:	a00b883a 	mov	r5,r20
    cf38:	9c26b03a 	or	r19,r19,r16
    cf3c:	1021883a 	mov	r16,r2
    cf40:	000d6d80 	call	d6d8 <__udivsi3>
    cf44:	102f883a 	mov	r23,r2
    cf48:	8d7fffcc 	andi	r21,r17,65535
    cf4c:	8020943a 	slli	r16,r16,16
    cf50:	9804d43a 	srli	r2,r19,16
    cf54:	aded383a 	mul	r22,r21,r23
    cf58:	8084b03a 	or	r2,r16,r2
    cf5c:	1580062e 	bgeu	r2,r22,cf78 <__udivdi3+0x48c>
    cf60:	1445883a 	add	r2,r2,r17
    cf64:	b8ffffc4 	addi	r3,r23,-1
    cf68:	14403e36 	bltu	r2,r17,d064 <__udivdi3+0x578>
    cf6c:	15803d2e 	bgeu	r2,r22,d064 <__udivdi3+0x578>
    cf70:	bdffff84 	addi	r23,r23,-2
    cf74:	1445883a 	add	r2,r2,r17
    cf78:	15adc83a 	sub	r22,r2,r22
    cf7c:	a00b883a 	mov	r5,r20
    cf80:	b009883a 	mov	r4,r22
    cf84:	000d73c0 	call	d73c <__umodsi3>
    cf88:	1021883a 	mov	r16,r2
    cf8c:	b009883a 	mov	r4,r22
    cf90:	a00b883a 	mov	r5,r20
    cf94:	000d6d80 	call	d6d8 <__udivsi3>
    cf98:	8020943a 	slli	r16,r16,16
    cf9c:	a889383a 	mul	r4,r21,r2
    cfa0:	9cffffcc 	andi	r19,r19,65535
    cfa4:	84e0b03a 	or	r16,r16,r19
    cfa8:	8100062e 	bgeu	r16,r4,cfc4 <__udivdi3+0x4d8>
    cfac:	8461883a 	add	r16,r16,r17
    cfb0:	10ffffc4 	addi	r3,r2,-1
    cfb4:	84402936 	bltu	r16,r17,d05c <__udivdi3+0x570>
    cfb8:	8100282e 	bgeu	r16,r4,d05c <__udivdi3+0x570>
    cfbc:	10bfff84 	addi	r2,r2,-2
    cfc0:	8461883a 	add	r16,r16,r17
    cfc4:	b806943a 	slli	r3,r23,16
    cfc8:	8121c83a 	sub	r16,r16,r4
    cfcc:	1886b03a 	or	r3,r3,r2
    cfd0:	003f3a06 	br	ccbc <__alt_mem_mcu_subsystem_ram_0+0x77feccbc>
    cfd4:	1806943a 	slli	r3,r3,16
    cfd8:	ad88983a 	sll	r4,r21,r22
    cfdc:	423fffcc 	andi	r8,r8,65535
    cfe0:	1a07883a 	add	r3,r3,r8
    cfe4:	20ffc72e 	bgeu	r4,r3,cf04 <__alt_mem_mcu_subsystem_ram_0+0x77fecf04>
    cfe8:	10bfffc4 	addi	r2,r2,-1
    cfec:	003fc506 	br	cf04 <__alt_mem_mcu_subsystem_ram_0+0x77fecf04>
    cff0:	3806d43a 	srli	r3,r7,16
    cff4:	01000404 	movi	r4,16
    cff8:	003f0f06 	br	cc38 <__alt_mem_mcu_subsystem_ram_0+0x77fecc38>
    cffc:	3807883a 	mov	r3,r7
    d000:	0009883a 	mov	r4,zero
    d004:	003f0c06 	br	cc38 <__alt_mem_mcu_subsystem_ram_0+0x77fecc38>
    d008:	3006d43a 	srli	r3,r6,16
    d00c:	04c00404 	movi	r19,16
    d010:	003ecf06 	br	cb50 <__alt_mem_mcu_subsystem_ram_0+0x77fecb50>
    d014:	8807883a 	mov	r3,r17
    d018:	003f1d06 	br	cc90 <__alt_mem_mcu_subsystem_ram_0+0x77fecc90>
    d01c:	8806d43a 	srli	r3,r17,16
    d020:	04c00404 	movi	r19,16
    d024:	003f1a06 	br	cc90 <__alt_mem_mcu_subsystem_ram_0+0x77fecc90>
    d028:	3007883a 	mov	r3,r6
    d02c:	003ec806 	br	cb50 <__alt_mem_mcu_subsystem_ram_0+0x77fecb50>
    d030:	0007883a 	mov	r3,zero
    d034:	00800044 	movi	r2,1
    d038:	003f4b06 	br	cd68 <__alt_mem_mcu_subsystem_ram_0+0x77fecd68>
    d03c:	893f9b2e 	bgeu	r17,r4,ceac <__alt_mem_mcu_subsystem_ram_0+0x77feceac>
    d040:	10bfff84 	addi	r2,r2,-2
    d044:	8f23883a 	add	r17,r17,fp
    d048:	003f9906 	br	ceb0 <__alt_mem_mcu_subsystem_ram_0+0x77feceb0>
    d04c:	113f842e 	bgeu	r2,r4,ce60 <__alt_mem_mcu_subsystem_ram_0+0x77fece60>
    d050:	843fff84 	addi	r16,r16,-2
    d054:	1705883a 	add	r2,r2,fp
    d058:	003f8206 	br	ce64 <__alt_mem_mcu_subsystem_ram_0+0x77fece64>
    d05c:	1805883a 	mov	r2,r3
    d060:	003fd806 	br	cfc4 <__alt_mem_mcu_subsystem_ram_0+0x77fecfc4>
    d064:	182f883a 	mov	r23,r3
    d068:	003fc306 	br	cf78 <__alt_mem_mcu_subsystem_ram_0+0x77fecf78>
    d06c:	843fff84 	addi	r16,r16,-2
    d070:	1445883a 	add	r2,r2,r17
    d074:	003ed606 	br	cbd0 <__alt_mem_mcu_subsystem_ram_0+0x77fecbd0>
    d078:	843fff84 	addi	r16,r16,-2
    d07c:	1445883a 	add	r2,r2,r17
    d080:	003f2206 	br	cd0c <__alt_mem_mcu_subsystem_ram_0+0x77fecd0c>

0000d084 <__umoddi3>:
    d084:	defff404 	addi	sp,sp,-48
    d088:	df000a15 	stw	fp,40(sp)
    d08c:	dc400315 	stw	r17,12(sp)
    d090:	dc000215 	stw	r16,8(sp)
    d094:	dfc00b15 	stw	ra,44(sp)
    d098:	ddc00915 	stw	r23,36(sp)
    d09c:	dd800815 	stw	r22,32(sp)
    d0a0:	dd400715 	stw	r21,28(sp)
    d0a4:	dd000615 	stw	r20,24(sp)
    d0a8:	dcc00515 	stw	r19,20(sp)
    d0ac:	dc800415 	stw	r18,16(sp)
    d0b0:	2021883a 	mov	r16,r4
    d0b4:	2823883a 	mov	r17,r5
    d0b8:	2839883a 	mov	fp,r5
    d0bc:	38003c1e 	bne	r7,zero,d1b0 <__umoddi3+0x12c>
    d0c0:	3825883a 	mov	r18,r7
    d0c4:	3027883a 	mov	r19,r6
    d0c8:	2029883a 	mov	r20,r4
    d0cc:	29804e2e 	bgeu	r5,r6,d208 <__umoddi3+0x184>
    d0d0:	00bfffd4 	movui	r2,65535
    d0d4:	11809736 	bltu	r2,r6,d334 <__umoddi3+0x2b0>
    d0d8:	30804030 	cmpltui	r2,r6,256
    d0dc:	10012c1e 	bne	r2,zero,d590 <__umoddi3+0x50c>
    d0e0:	3006d23a 	srli	r3,r6,8
    d0e4:	04800204 	movi	r18,8
    d0e8:	008000b4 	movhi	r2,2
    d0ec:	1885883a 	add	r2,r3,r2
    d0f0:	115a9583 	ldbu	r5,27222(r2)
    d0f4:	00800804 	movi	r2,32
    d0f8:	2c8b883a 	add	r5,r5,r18
    d0fc:	1165c83a 	sub	r18,r2,r5
    d100:	90000526 	beq	r18,zero,d118 <__umoddi3+0x94>
    d104:	8c8e983a 	sll	r7,r17,r18
    d108:	814ad83a 	srl	r5,r16,r5
    d10c:	34a6983a 	sll	r19,r6,r18
    d110:	84a8983a 	sll	r20,r16,r18
    d114:	29f8b03a 	or	fp,r5,r7
    d118:	982ed43a 	srli	r23,r19,16
    d11c:	e009883a 	mov	r4,fp
    d120:	9dbfffcc 	andi	r22,r19,65535
    d124:	b80b883a 	mov	r5,r23
    d128:	000d73c0 	call	d73c <__umodsi3>
    d12c:	b80b883a 	mov	r5,r23
    d130:	e009883a 	mov	r4,fp
    d134:	102b883a 	mov	r21,r2
    d138:	000d6d80 	call	d6d8 <__udivsi3>
    d13c:	a82a943a 	slli	r21,r21,16
    d140:	a006d43a 	srli	r3,r20,16
    d144:	b085383a 	mul	r2,r22,r2
    d148:	a8c6b03a 	or	r3,r21,r3
    d14c:	1880032e 	bgeu	r3,r2,d15c <__umoddi3+0xd8>
    d150:	1cc7883a 	add	r3,r3,r19
    d154:	1cc00136 	bltu	r3,r19,d15c <__umoddi3+0xd8>
    d158:	18811736 	bltu	r3,r2,d5b8 <__umoddi3+0x534>
    d15c:	18abc83a 	sub	r21,r3,r2
    d160:	b80b883a 	mov	r5,r23
    d164:	a809883a 	mov	r4,r21
    d168:	000d73c0 	call	d73c <__umodsi3>
    d16c:	1023883a 	mov	r17,r2
    d170:	b80b883a 	mov	r5,r23
    d174:	a809883a 	mov	r4,r21
    d178:	000d6d80 	call	d6d8 <__udivsi3>
    d17c:	8822943a 	slli	r17,r17,16
    d180:	b085383a 	mul	r2,r22,r2
    d184:	a0ffffcc 	andi	r3,r20,65535
    d188:	88c6b03a 	or	r3,r17,r3
    d18c:	1880042e 	bgeu	r3,r2,d1a0 <__umoddi3+0x11c>
    d190:	1cc7883a 	add	r3,r3,r19
    d194:	1cc00236 	bltu	r3,r19,d1a0 <__umoddi3+0x11c>
    d198:	1880012e 	bgeu	r3,r2,d1a0 <__umoddi3+0x11c>
    d19c:	1cc7883a 	add	r3,r3,r19
    d1a0:	1885c83a 	sub	r2,r3,r2
    d1a4:	1484d83a 	srl	r2,r2,r18
    d1a8:	0007883a 	mov	r3,zero
    d1ac:	00004b06 	br	d2dc <__umoddi3+0x258>
    d1b0:	29c04836 	bltu	r5,r7,d2d4 <__umoddi3+0x250>
    d1b4:	00bfffd4 	movui	r2,65535
    d1b8:	11c0542e 	bgeu	r2,r7,d30c <__umoddi3+0x288>
    d1bc:	00804034 	movhi	r2,256
    d1c0:	3880e836 	bltu	r7,r2,d564 <__umoddi3+0x4e0>
    d1c4:	3808d63a 	srli	r4,r7,24
    d1c8:	00800604 	movi	r2,24
    d1cc:	00c000b4 	movhi	r3,2
    d1d0:	20c7883a 	add	r3,r4,r3
    d1d4:	1cda9583 	ldbu	r19,27222(r3)
    d1d8:	00c00804 	movi	r3,32
    d1dc:	98a7883a 	add	r19,r19,r2
    d1e0:	1ce9c83a 	sub	r20,r3,r19
    d1e4:	a000581e 	bne	r20,zero,d348 <__umoddi3+0x2c4>
    d1e8:	3c400136 	bltu	r7,r17,d1f0 <__umoddi3+0x16c>
    d1ec:	8180f436 	bltu	r16,r6,d5c0 <__umoddi3+0x53c>
    d1f0:	8185c83a 	sub	r2,r16,r6
    d1f4:	89cfc83a 	sub	r7,r17,r7
    d1f8:	808b803a 	cmpltu	r5,r16,r2
    d1fc:	3979c83a 	sub	fp,r7,r5
    d200:	e007883a 	mov	r3,fp
    d204:	00003506 	br	d2dc <__umoddi3+0x258>
    d208:	3000041e 	bne	r6,zero,d21c <__umoddi3+0x198>
    d20c:	000b883a 	mov	r5,zero
    d210:	01000044 	movi	r4,1
    d214:	000d6d80 	call	d6d8 <__udivsi3>
    d218:	1027883a 	mov	r19,r2
    d21c:	00bfffd4 	movui	r2,65535
    d220:	14c03f2e 	bgeu	r2,r19,d320 <__umoddi3+0x29c>
    d224:	00804034 	movhi	r2,256
    d228:	9880d436 	bltu	r19,r2,d57c <__umoddi3+0x4f8>
    d22c:	9806d63a 	srli	r3,r19,24
    d230:	04800604 	movi	r18,24
    d234:	008000b4 	movhi	r2,2
    d238:	1885883a 	add	r2,r3,r2
    d23c:	10da9583 	ldbu	r3,27222(r2)
    d240:	00800804 	movi	r2,32
    d244:	1c87883a 	add	r3,r3,r18
    d248:	10e5c83a 	sub	r18,r2,r3
    d24c:	90008a1e 	bne	r18,zero,d478 <__umoddi3+0x3f4>
    d250:	982cd43a 	srli	r22,r19,16
    d254:	8ce3c83a 	sub	r17,r17,r19
    d258:	9d7fffcc 	andi	r21,r19,65535
    d25c:	b00b883a 	mov	r5,r22
    d260:	8809883a 	mov	r4,r17
    d264:	000d73c0 	call	d73c <__umodsi3>
    d268:	b00b883a 	mov	r5,r22
    d26c:	8809883a 	mov	r4,r17
    d270:	1021883a 	mov	r16,r2
    d274:	000d6d80 	call	d6d8 <__udivsi3>
    d278:	8020943a 	slli	r16,r16,16
    d27c:	a006d43a 	srli	r3,r20,16
    d280:	1545383a 	mul	r2,r2,r21
    d284:	80c6b03a 	or	r3,r16,r3
    d288:	1880042e 	bgeu	r3,r2,d29c <__umoddi3+0x218>
    d28c:	1cc7883a 	add	r3,r3,r19
    d290:	1cc00236 	bltu	r3,r19,d29c <__umoddi3+0x218>
    d294:	1880012e 	bgeu	r3,r2,d29c <__umoddi3+0x218>
    d298:	1cc7883a 	add	r3,r3,r19
    d29c:	18a1c83a 	sub	r16,r3,r2
    d2a0:	b00b883a 	mov	r5,r22
    d2a4:	8009883a 	mov	r4,r16
    d2a8:	000d73c0 	call	d73c <__umodsi3>
    d2ac:	1023883a 	mov	r17,r2
    d2b0:	b00b883a 	mov	r5,r22
    d2b4:	8009883a 	mov	r4,r16
    d2b8:	000d6d80 	call	d6d8 <__udivsi3>
    d2bc:	8822943a 	slli	r17,r17,16
    d2c0:	1545383a 	mul	r2,r2,r21
    d2c4:	a53fffcc 	andi	r20,r20,65535
    d2c8:	8d06b03a 	or	r3,r17,r20
    d2cc:	18bfb42e 	bgeu	r3,r2,d1a0 <__alt_mem_mcu_subsystem_ram_0+0x77fed1a0>
    d2d0:	003faf06 	br	d190 <__alt_mem_mcu_subsystem_ram_0+0x77fed190>
    d2d4:	2005883a 	mov	r2,r4
    d2d8:	2807883a 	mov	r3,r5
    d2dc:	dfc00b17 	ldw	ra,44(sp)
    d2e0:	df000a17 	ldw	fp,40(sp)
    d2e4:	ddc00917 	ldw	r23,36(sp)
    d2e8:	dd800817 	ldw	r22,32(sp)
    d2ec:	dd400717 	ldw	r21,28(sp)
    d2f0:	dd000617 	ldw	r20,24(sp)
    d2f4:	dcc00517 	ldw	r19,20(sp)
    d2f8:	dc800417 	ldw	r18,16(sp)
    d2fc:	dc400317 	ldw	r17,12(sp)
    d300:	dc000217 	ldw	r16,8(sp)
    d304:	dec00c04 	addi	sp,sp,48
    d308:	f800283a 	ret
    d30c:	38804030 	cmpltui	r2,r7,256
    d310:	1000911e 	bne	r2,zero,d558 <__umoddi3+0x4d4>
    d314:	3808d23a 	srli	r4,r7,8
    d318:	00800204 	movi	r2,8
    d31c:	003fab06 	br	d1cc <__alt_mem_mcu_subsystem_ram_0+0x77fed1cc>
    d320:	98804030 	cmpltui	r2,r19,256
    d324:	1000981e 	bne	r2,zero,d588 <__umoddi3+0x504>
    d328:	9806d23a 	srli	r3,r19,8
    d32c:	04800204 	movi	r18,8
    d330:	003fc006 	br	d234 <__alt_mem_mcu_subsystem_ram_0+0x77fed234>
    d334:	00804034 	movhi	r2,256
    d338:	30808d36 	bltu	r6,r2,d570 <__umoddi3+0x4ec>
    d33c:	3006d63a 	srli	r3,r6,24
    d340:	04800604 	movi	r18,24
    d344:	003f6806 	br	d0e8 <__alt_mem_mcu_subsystem_ram_0+0x77fed0e8>
    d348:	34eed83a 	srl	r23,r6,r19
    d34c:	3d0e983a 	sll	r7,r7,r20
    d350:	8cf8d83a 	srl	fp,r17,r19
    d354:	84c4d83a 	srl	r2,r16,r19
    d358:	b9eeb03a 	or	r23,r23,r7
    d35c:	b82cd43a 	srli	r22,r23,16
    d360:	8d22983a 	sll	r17,r17,r20
    d364:	e009883a 	mov	r4,fp
    d368:	b00b883a 	mov	r5,r22
    d36c:	3524983a 	sll	r18,r6,r20
    d370:	1462b03a 	or	r17,r2,r17
    d374:	000d73c0 	call	d73c <__umodsi3>
    d378:	e009883a 	mov	r4,fp
    d37c:	b00b883a 	mov	r5,r22
    d380:	102b883a 	mov	r21,r2
    d384:	000d6d80 	call	d6d8 <__udivsi3>
    d388:	100d883a 	mov	r6,r2
    d38c:	b8ffffcc 	andi	r3,r23,65535
    d390:	a82a943a 	slli	r21,r21,16
    d394:	8804d43a 	srli	r2,r17,16
    d398:	1989383a 	mul	r4,r3,r6
    d39c:	8520983a 	sll	r16,r16,r20
    d3a0:	a884b03a 	or	r2,r21,r2
    d3a4:	1100042e 	bgeu	r2,r4,d3b8 <__umoddi3+0x334>
    d3a8:	15c5883a 	add	r2,r2,r23
    d3ac:	317fffc4 	addi	r5,r6,-1
    d3b0:	15c07d2e 	bgeu	r2,r23,d5a8 <__umoddi3+0x524>
    d3b4:	280d883a 	mov	r6,r5
    d3b8:	112bc83a 	sub	r21,r2,r4
    d3bc:	b00b883a 	mov	r5,r22
    d3c0:	a809883a 	mov	r4,r21
    d3c4:	d9800115 	stw	r6,4(sp)
    d3c8:	d8c00015 	stw	r3,0(sp)
    d3cc:	000d73c0 	call	d73c <__umodsi3>
    d3d0:	b00b883a 	mov	r5,r22
    d3d4:	a809883a 	mov	r4,r21
    d3d8:	1039883a 	mov	fp,r2
    d3dc:	000d6d80 	call	d6d8 <__udivsi3>
    d3e0:	d8c00017 	ldw	r3,0(sp)
    d3e4:	e038943a 	slli	fp,fp,16
    d3e8:	8c7fffcc 	andi	r17,r17,65535
    d3ec:	1887383a 	mul	r3,r3,r2
    d3f0:	e462b03a 	or	r17,fp,r17
    d3f4:	d9800117 	ldw	r6,4(sp)
    d3f8:	88c0042e 	bgeu	r17,r3,d40c <__umoddi3+0x388>
    d3fc:	8de3883a 	add	r17,r17,r23
    d400:	113fffc4 	addi	r4,r2,-1
    d404:	8dc0642e 	bgeu	r17,r23,d598 <__umoddi3+0x514>
    d408:	2005883a 	mov	r2,r4
    d40c:	3008943a 	slli	r4,r6,16
    d410:	917fffcc 	andi	r5,r18,65535
    d414:	9010d43a 	srli	r8,r18,16
    d418:	2084b03a 	or	r2,r4,r2
    d41c:	11bfffcc 	andi	r6,r2,65535
    d420:	1004d43a 	srli	r2,r2,16
    d424:	314f383a 	mul	r7,r6,r5
    d428:	320d383a 	mul	r6,r6,r8
    d42c:	114b383a 	mul	r5,r2,r5
    d430:	3808d43a 	srli	r4,r7,16
    d434:	88e3c83a 	sub	r17,r17,r3
    d438:	314d883a 	add	r6,r6,r5
    d43c:	2189883a 	add	r4,r4,r6
    d440:	1205383a 	mul	r2,r2,r8
    d444:	2140022e 	bgeu	r4,r5,d450 <__umoddi3+0x3cc>
    d448:	00c00074 	movhi	r3,1
    d44c:	10c5883a 	add	r2,r2,r3
    d450:	2006d43a 	srli	r3,r4,16
    d454:	2008943a 	slli	r4,r4,16
    d458:	39ffffcc 	andi	r7,r7,65535
    d45c:	1885883a 	add	r2,r3,r2
    d460:	21c9883a 	add	r4,r4,r7
    d464:	88802f36 	bltu	r17,r2,d524 <__umoddi3+0x4a0>
    d468:	88805726 	beq	r17,r2,d5c8 <__umoddi3+0x544>
    d46c:	8887c83a 	sub	r3,r17,r2
    d470:	200d883a 	mov	r6,r4
    d474:	00003006 	br	d538 <__umoddi3+0x4b4>
    d478:	9ca6983a 	sll	r19,r19,r18
    d47c:	88e8d83a 	srl	r20,r17,r3
    d480:	80c6d83a 	srl	r3,r16,r3
    d484:	982cd43a 	srli	r22,r19,16
    d488:	8ca2983a 	sll	r17,r17,r18
    d48c:	a009883a 	mov	r4,r20
    d490:	b00b883a 	mov	r5,r22
    d494:	1c6eb03a 	or	r23,r3,r17
    d498:	000d73c0 	call	d73c <__umodsi3>
    d49c:	a009883a 	mov	r4,r20
    d4a0:	b00b883a 	mov	r5,r22
    d4a4:	1023883a 	mov	r17,r2
    d4a8:	000d6d80 	call	d6d8 <__udivsi3>
    d4ac:	9d7fffcc 	andi	r21,r19,65535
    d4b0:	8822943a 	slli	r17,r17,16
    d4b4:	b806d43a 	srli	r3,r23,16
    d4b8:	a885383a 	mul	r2,r21,r2
    d4bc:	84a8983a 	sll	r20,r16,r18
    d4c0:	88c6b03a 	or	r3,r17,r3
    d4c4:	1880042e 	bgeu	r3,r2,d4d8 <__umoddi3+0x454>
    d4c8:	1cc7883a 	add	r3,r3,r19
    d4cc:	1cc00236 	bltu	r3,r19,d4d8 <__umoddi3+0x454>
    d4d0:	1880012e 	bgeu	r3,r2,d4d8 <__umoddi3+0x454>
    d4d4:	1cc7883a 	add	r3,r3,r19
    d4d8:	18a3c83a 	sub	r17,r3,r2
    d4dc:	8809883a 	mov	r4,r17
    d4e0:	b00b883a 	mov	r5,r22
    d4e4:	000d73c0 	call	d73c <__umodsi3>
    d4e8:	1021883a 	mov	r16,r2
    d4ec:	8809883a 	mov	r4,r17
    d4f0:	b00b883a 	mov	r5,r22
    d4f4:	000d6d80 	call	d6d8 <__udivsi3>
    d4f8:	8022943a 	slli	r17,r16,16
    d4fc:	a885383a 	mul	r2,r21,r2
    d500:	bdffffcc 	andi	r23,r23,65535
    d504:	8de2b03a 	or	r17,r17,r23
    d508:	8880042e 	bgeu	r17,r2,d51c <__umoddi3+0x498>
    d50c:	8ce3883a 	add	r17,r17,r19
    d510:	8cc00236 	bltu	r17,r19,d51c <__umoddi3+0x498>
    d514:	8880012e 	bgeu	r17,r2,d51c <__umoddi3+0x498>
    d518:	8ce3883a 	add	r17,r17,r19
    d51c:	88a3c83a 	sub	r17,r17,r2
    d520:	003f4e06 	br	d25c <__alt_mem_mcu_subsystem_ram_0+0x77fed25c>
    d524:	248dc83a 	sub	r6,r4,r18
    d528:	15c5c83a 	sub	r2,r2,r23
    d52c:	2189803a 	cmpltu	r4,r4,r6
    d530:	1109c83a 	sub	r4,r2,r4
    d534:	8907c83a 	sub	r3,r17,r4
    d538:	818dc83a 	sub	r6,r16,r6
    d53c:	81a1803a 	cmpltu	r16,r16,r6
    d540:	1c23c83a 	sub	r17,r3,r16
    d544:	8ce0983a 	sll	r16,r17,r19
    d548:	3504d83a 	srl	r2,r6,r20
    d54c:	8d06d83a 	srl	r3,r17,r20
    d550:	8084b03a 	or	r2,r16,r2
    d554:	003f6106 	br	d2dc <__alt_mem_mcu_subsystem_ram_0+0x77fed2dc>
    d558:	3809883a 	mov	r4,r7
    d55c:	0005883a 	mov	r2,zero
    d560:	003f1a06 	br	d1cc <__alt_mem_mcu_subsystem_ram_0+0x77fed1cc>
    d564:	3808d43a 	srli	r4,r7,16
    d568:	00800404 	movi	r2,16
    d56c:	003f1706 	br	d1cc <__alt_mem_mcu_subsystem_ram_0+0x77fed1cc>
    d570:	3006d43a 	srli	r3,r6,16
    d574:	04800404 	movi	r18,16
    d578:	003edb06 	br	d0e8 <__alt_mem_mcu_subsystem_ram_0+0x77fed0e8>
    d57c:	9806d43a 	srli	r3,r19,16
    d580:	04800404 	movi	r18,16
    d584:	003f2b06 	br	d234 <__alt_mem_mcu_subsystem_ram_0+0x77fed234>
    d588:	9807883a 	mov	r3,r19
    d58c:	003f2906 	br	d234 <__alt_mem_mcu_subsystem_ram_0+0x77fed234>
    d590:	3007883a 	mov	r3,r6
    d594:	003ed406 	br	d0e8 <__alt_mem_mcu_subsystem_ram_0+0x77fed0e8>
    d598:	88ff9b2e 	bgeu	r17,r3,d408 <__alt_mem_mcu_subsystem_ram_0+0x77fed408>
    d59c:	10bfff84 	addi	r2,r2,-2
    d5a0:	8de3883a 	add	r17,r17,r23
    d5a4:	003f9906 	br	d40c <__alt_mem_mcu_subsystem_ram_0+0x77fed40c>
    d5a8:	113f822e 	bgeu	r2,r4,d3b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed3b4>
    d5ac:	31bfff84 	addi	r6,r6,-2
    d5b0:	15c5883a 	add	r2,r2,r23
    d5b4:	003f8006 	br	d3b8 <__alt_mem_mcu_subsystem_ram_0+0x77fed3b8>
    d5b8:	1cc7883a 	add	r3,r3,r19
    d5bc:	003ee706 	br	d15c <__alt_mem_mcu_subsystem_ram_0+0x77fed15c>
    d5c0:	8005883a 	mov	r2,r16
    d5c4:	003f0e06 	br	d200 <__alt_mem_mcu_subsystem_ram_0+0x77fed200>
    d5c8:	813fd636 	bltu	r16,r4,d524 <__alt_mem_mcu_subsystem_ram_0+0x77fed524>
    d5cc:	200d883a 	mov	r6,r4
    d5d0:	0007883a 	mov	r3,zero
    d5d4:	003fd806 	br	d538 <__alt_mem_mcu_subsystem_ram_0+0x77fed538>

0000d5d8 <__divsi3>:
    d5d8:	20001c16 	blt	r4,zero,d64c <__divsi3+0x74>
    d5dc:	000f883a 	mov	r7,zero
    d5e0:	2800020e 	bge	r5,zero,d5ec <__divsi3+0x14>
    d5e4:	014bc83a 	sub	r5,zero,r5
    d5e8:	39c0005c 	xori	r7,r7,1
    d5ec:	200d883a 	mov	r6,r4
    d5f0:	2900192e 	bgeu	r5,r4,d658 <__divsi3+0x80>
    d5f4:	00800804 	movi	r2,32
    d5f8:	00c00044 	movi	r3,1
    d5fc:	00000206 	br	d608 <__divsi3+0x30>
    d600:	10001026 	beq	r2,zero,d644 <__divsi3+0x6c>
    d604:	28000516 	blt	r5,zero,d61c <__divsi3+0x44>
    d608:	294b883a 	add	r5,r5,r5
    d60c:	10bfffc4 	addi	r2,r2,-1
    d610:	18c7883a 	add	r3,r3,r3
    d614:	293ffa36 	bltu	r5,r4,d600 <__alt_mem_mcu_subsystem_ram_0+0x77fed600>
    d618:	18000a26 	beq	r3,zero,d644 <__divsi3+0x6c>
    d61c:	0005883a 	mov	r2,zero
    d620:	31400236 	bltu	r6,r5,d62c <__divsi3+0x54>
    d624:	314dc83a 	sub	r6,r6,r5
    d628:	10c4b03a 	or	r2,r2,r3
    d62c:	1806d07a 	srli	r3,r3,1
    d630:	280ad07a 	srli	r5,r5,1
    d634:	183ffa1e 	bne	r3,zero,d620 <__alt_mem_mcu_subsystem_ram_0+0x77fed620>
    d638:	38000126 	beq	r7,zero,d640 <__divsi3+0x68>
    d63c:	0085c83a 	sub	r2,zero,r2
    d640:	f800283a 	ret
    d644:	0005883a 	mov	r2,zero
    d648:	003ffb06 	br	d638 <__alt_mem_mcu_subsystem_ram_0+0x77fed638>
    d64c:	0109c83a 	sub	r4,zero,r4
    d650:	01c00044 	movi	r7,1
    d654:	003fe206 	br	d5e0 <__alt_mem_mcu_subsystem_ram_0+0x77fed5e0>
    d658:	00c00044 	movi	r3,1
    d65c:	003fef06 	br	d61c <__alt_mem_mcu_subsystem_ram_0+0x77fed61c>

0000d660 <__modsi3>:
    d660:	20001816 	blt	r4,zero,d6c4 <__modsi3+0x64>
    d664:	000f883a 	mov	r7,zero
    d668:	2005883a 	mov	r2,r4
    d66c:	28001316 	blt	r5,zero,d6bc <__modsi3+0x5c>
    d670:	2900172e 	bgeu	r5,r4,d6d0 <__modsi3+0x70>
    d674:	01800804 	movi	r6,32
    d678:	00c00044 	movi	r3,1
    d67c:	00000206 	br	d688 <__modsi3+0x28>
    d680:	30000b26 	beq	r6,zero,d6b0 <__modsi3+0x50>
    d684:	28000516 	blt	r5,zero,d69c <__modsi3+0x3c>
    d688:	294b883a 	add	r5,r5,r5
    d68c:	31bfffc4 	addi	r6,r6,-1
    d690:	18c7883a 	add	r3,r3,r3
    d694:	293ffa36 	bltu	r5,r4,d680 <__alt_mem_mcu_subsystem_ram_0+0x77fed680>
    d698:	18000526 	beq	r3,zero,d6b0 <__modsi3+0x50>
    d69c:	1806d07a 	srli	r3,r3,1
    d6a0:	11400136 	bltu	r2,r5,d6a8 <__modsi3+0x48>
    d6a4:	1145c83a 	sub	r2,r2,r5
    d6a8:	280ad07a 	srli	r5,r5,1
    d6ac:	183ffb1e 	bne	r3,zero,d69c <__alt_mem_mcu_subsystem_ram_0+0x77fed69c>
    d6b0:	38000126 	beq	r7,zero,d6b8 <__modsi3+0x58>
    d6b4:	0085c83a 	sub	r2,zero,r2
    d6b8:	f800283a 	ret
    d6bc:	014bc83a 	sub	r5,zero,r5
    d6c0:	003feb06 	br	d670 <__alt_mem_mcu_subsystem_ram_0+0x77fed670>
    d6c4:	0109c83a 	sub	r4,zero,r4
    d6c8:	01c00044 	movi	r7,1
    d6cc:	003fe606 	br	d668 <__alt_mem_mcu_subsystem_ram_0+0x77fed668>
    d6d0:	00c00044 	movi	r3,1
    d6d4:	003ff106 	br	d69c <__alt_mem_mcu_subsystem_ram_0+0x77fed69c>

0000d6d8 <__udivsi3>:
    d6d8:	200d883a 	mov	r6,r4
    d6dc:	2900152e 	bgeu	r5,r4,d734 <__udivsi3+0x5c>
    d6e0:	28001416 	blt	r5,zero,d734 <__udivsi3+0x5c>
    d6e4:	00800804 	movi	r2,32
    d6e8:	00c00044 	movi	r3,1
    d6ec:	00000206 	br	d6f8 <__udivsi3+0x20>
    d6f0:	10000e26 	beq	r2,zero,d72c <__udivsi3+0x54>
    d6f4:	28000516 	blt	r5,zero,d70c <__udivsi3+0x34>
    d6f8:	294b883a 	add	r5,r5,r5
    d6fc:	10bfffc4 	addi	r2,r2,-1
    d700:	18c7883a 	add	r3,r3,r3
    d704:	293ffa36 	bltu	r5,r4,d6f0 <__alt_mem_mcu_subsystem_ram_0+0x77fed6f0>
    d708:	18000826 	beq	r3,zero,d72c <__udivsi3+0x54>
    d70c:	0005883a 	mov	r2,zero
    d710:	31400236 	bltu	r6,r5,d71c <__udivsi3+0x44>
    d714:	314dc83a 	sub	r6,r6,r5
    d718:	10c4b03a 	or	r2,r2,r3
    d71c:	1806d07a 	srli	r3,r3,1
    d720:	280ad07a 	srli	r5,r5,1
    d724:	183ffa1e 	bne	r3,zero,d710 <__alt_mem_mcu_subsystem_ram_0+0x77fed710>
    d728:	f800283a 	ret
    d72c:	0005883a 	mov	r2,zero
    d730:	f800283a 	ret
    d734:	00c00044 	movi	r3,1
    d738:	003ff406 	br	d70c <__alt_mem_mcu_subsystem_ram_0+0x77fed70c>

0000d73c <__umodsi3>:
    d73c:	2005883a 	mov	r2,r4
    d740:	2900122e 	bgeu	r5,r4,d78c <__umodsi3+0x50>
    d744:	28001116 	blt	r5,zero,d78c <__umodsi3+0x50>
    d748:	01800804 	movi	r6,32
    d74c:	00c00044 	movi	r3,1
    d750:	00000206 	br	d75c <__umodsi3+0x20>
    d754:	30000b26 	beq	r6,zero,d784 <__umodsi3+0x48>
    d758:	28000516 	blt	r5,zero,d770 <__umodsi3+0x34>
    d75c:	294b883a 	add	r5,r5,r5
    d760:	31bfffc4 	addi	r6,r6,-1
    d764:	18c7883a 	add	r3,r3,r3
    d768:	293ffa36 	bltu	r5,r4,d754 <__alt_mem_mcu_subsystem_ram_0+0x77fed754>
    d76c:	18000626 	beq	r3,zero,d788 <__umodsi3+0x4c>
    d770:	1806d07a 	srli	r3,r3,1
    d774:	11400136 	bltu	r2,r5,d77c <__umodsi3+0x40>
    d778:	1145c83a 	sub	r2,r2,r5
    d77c:	280ad07a 	srli	r5,r5,1
    d780:	183ffb1e 	bne	r3,zero,d770 <__alt_mem_mcu_subsystem_ram_0+0x77fed770>
    d784:	f800283a 	ret
    d788:	f800283a 	ret
    d78c:	00c00044 	movi	r3,1
    d790:	003ff706 	br	d770 <__alt_mem_mcu_subsystem_ram_0+0x77fed770>

0000d794 <__adddf3>:
    d794:	02400434 	movhi	r9,16
    d798:	defffb04 	addi	sp,sp,-20
    d79c:	4a7fffc4 	addi	r9,r9,-1
    d7a0:	2a50703a 	and	r8,r5,r9
    d7a4:	3a54703a 	and	r10,r7,r9
    d7a8:	3816d7fa 	srli	r11,r7,31
    d7ac:	dc800215 	stw	r18,8(sp)
    d7b0:	380ed53a 	srli	r7,r7,20
    d7b4:	2824d7fa 	srli	r18,r5,31
    d7b8:	280ad53a 	srli	r5,r5,20
    d7bc:	400490fa 	slli	r2,r8,3
    d7c0:	501490fa 	slli	r10,r10,3
    d7c4:	2010d77a 	srli	r8,r4,29
    d7c8:	3006d77a 	srli	r3,r6,29
    d7cc:	dc000015 	stw	r16,0(sp)
    d7d0:	39c1ffcc 	andi	r7,r7,2047
    d7d4:	2c01ffcc 	andi	r16,r5,2047
    d7d8:	dfc00415 	stw	ra,16(sp)
    d7dc:	dcc00315 	stw	r19,12(sp)
    d7e0:	dc400115 	stw	r17,4(sp)
    d7e4:	93403fcc 	andi	r13,r18,255
    d7e8:	5b803fcc 	andi	r14,r11,255
    d7ec:	1a86b03a 	or	r3,r3,r10
    d7f0:	4090b03a 	or	r8,r8,r2
    d7f4:	201890fa 	slli	r12,r4,3
    d7f8:	301490fa 	slli	r10,r6,3
    d7fc:	81cbc83a 	sub	r5,r16,r7
    d800:	6b805426 	beq	r13,r14,d954 <__adddf3+0x1c0>
    d804:	0140420e 	bge	zero,r5,d910 <__adddf3+0x17c>
    d808:	38006e1e 	bne	r7,zero,d9c4 <__adddf3+0x230>
    d80c:	1a84b03a 	or	r2,r3,r10
    d810:	1000ce26 	beq	r2,zero,db4c <__adddf3+0x3b8>
    d814:	28bfffc4 	addi	r2,r5,-1
    d818:	1001171e 	bne	r2,zero,dc78 <__adddf3+0x4e4>
    d81c:	62a3c83a 	sub	r17,r12,r10
    d820:	40c9c83a 	sub	r4,r8,r3
    d824:	6445803a 	cmpltu	r2,r12,r17
    d828:	2091c83a 	sub	r8,r4,r2
    d82c:	04000044 	movi	r16,1
    d830:	4080202c 	andhi	r2,r8,128
    d834:	1000b126 	beq	r2,zero,dafc <__adddf3+0x368>
    d838:	04c02034 	movhi	r19,128
    d83c:	9cffffc4 	addi	r19,r19,-1
    d840:	44e6703a 	and	r19,r8,r19
    d844:	9800ec26 	beq	r19,zero,dbf8 <__adddf3+0x464>
    d848:	9809883a 	mov	r4,r19
    d84c:	000facc0 	call	facc <__clzsi2>
    d850:	10fffe04 	addi	r3,r2,-8
    d854:	19000808 	cmpgei	r4,r3,32
    d858:	2000ed1e 	bne	r4,zero,dc10 <__adddf3+0x47c>
    d85c:	01000804 	movi	r4,32
    d860:	20c9c83a 	sub	r4,r4,r3
    d864:	8908d83a 	srl	r4,r17,r4
    d868:	98e6983a 	sll	r19,r19,r3
    d86c:	88e2983a 	sll	r17,r17,r3
    d870:	24c8b03a 	or	r4,r4,r19
    d874:	1c00ea16 	blt	r3,r16,dc20 <__adddf3+0x48c>
    d878:	1c21c83a 	sub	r16,r3,r16
    d87c:	82000044 	addi	r8,r16,1
    d880:	40800808 	cmpgei	r2,r8,32
    d884:	1001001e 	bne	r2,zero,dc88 <__adddf3+0x4f4>
    d888:	00800804 	movi	r2,32
    d88c:	1205c83a 	sub	r2,r2,r8
    d890:	8a06d83a 	srl	r3,r17,r8
    d894:	88a2983a 	sll	r17,r17,r2
    d898:	2084983a 	sll	r2,r4,r2
    d89c:	2210d83a 	srl	r8,r4,r8
    d8a0:	8822c03a 	cmpne	r17,r17,zero
    d8a4:	10c4b03a 	or	r2,r2,r3
    d8a8:	1462b03a 	or	r17,r2,r17
    d8ac:	888001cc 	andi	r2,r17,7
    d8b0:	0021883a 	mov	r16,zero
    d8b4:	10000726 	beq	r2,zero,d8d4 <__adddf3+0x140>
    d8b8:	888003cc 	andi	r2,r17,15
    d8bc:	10800120 	cmpeqi	r2,r2,4
    d8c0:	1000041e 	bne	r2,zero,d8d4 <__adddf3+0x140>
    d8c4:	88c00104 	addi	r3,r17,4
    d8c8:	1c63803a 	cmpltu	r17,r3,r17
    d8cc:	4451883a 	add	r8,r8,r17
    d8d0:	1823883a 	mov	r17,r3
    d8d4:	4080202c 	andhi	r2,r8,128
    d8d8:	10016b26 	beq	r2,zero,de88 <__adddf3+0x6f4>
    d8dc:	84000044 	addi	r16,r16,1
    d8e0:	8081ffe0 	cmpeqi	r2,r16,2047
    d8e4:	8401ffcc 	andi	r16,r16,2047
    d8e8:	1000bf1e 	bne	r2,zero,dbe8 <__adddf3+0x454>
    d8ec:	013fe034 	movhi	r4,65408
    d8f0:	213fffc4 	addi	r4,r4,-1
    d8f4:	4108703a 	and	r4,r8,r4
    d8f8:	2004977a 	slli	r2,r4,29
    d8fc:	8822d0fa 	srli	r17,r17,3
    d900:	2008927a 	slli	r4,r4,9
    d904:	1444b03a 	or	r2,r2,r17
    d908:	2008d33a 	srli	r4,r4,12
    d90c:	00006106 	br	da94 <__adddf3+0x300>
    d910:	2800951e 	bne	r5,zero,db68 <__adddf3+0x3d4>
    d914:	80800044 	addi	r2,r16,1
    d918:	1081ffcc 	andi	r2,r2,2047
    d91c:	10800088 	cmpgei	r2,r2,2
    d920:	1000cb26 	beq	r2,zero,dc50 <__adddf3+0x4bc>
    d924:	62a3c83a 	sub	r17,r12,r10
    d928:	40e7c83a 	sub	r19,r8,r3
    d92c:	6449803a 	cmpltu	r4,r12,r17
    d930:	9927c83a 	sub	r19,r19,r4
    d934:	9880202c 	andhi	r2,r19,128
    d938:	1000e11e 	bne	r2,zero,dcc0 <__adddf3+0x52c>
    d93c:	8ccab03a 	or	r5,r17,r19
    d940:	283fc01e 	bne	r5,zero,d844 <__alt_mem_mcu_subsystem_ram_0+0x77fed844>
    d944:	0005883a 	mov	r2,zero
    d948:	0025883a 	mov	r18,zero
    d94c:	0021883a 	mov	r16,zero
    d950:	00004c06 	br	da84 <__adddf3+0x2f0>
    d954:	01409d0e 	bge	zero,r5,dbcc <__adddf3+0x438>
    d958:	38005d26 	beq	r7,zero,dad0 <__adddf3+0x33c>
    d95c:	8181ffe0 	cmpeqi	r6,r16,2047
    d960:	3000431e 	bne	r6,zero,da70 <__adddf3+0x2dc>
    d964:	18c02034 	orhi	r3,r3,128
    d968:	28800e48 	cmpgei	r2,r5,57
    d96c:	1000da26 	beq	r2,zero,dcd8 <__adddf3+0x544>
    d970:	1aa2b03a 	or	r17,r3,r10
    d974:	8822c03a 	cmpne	r17,r17,zero
    d978:	8b23883a 	add	r17,r17,r12
    d97c:	8b05803a 	cmpltu	r2,r17,r12
    d980:	4091883a 	add	r8,r8,r2
    d984:	4080202c 	andhi	r2,r8,128
    d988:	10005c26 	beq	r2,zero,dafc <__adddf3+0x368>
    d98c:	84000044 	addi	r16,r16,1
    d990:	8181ffe0 	cmpeqi	r6,r16,2047
    d994:	3000941e 	bne	r6,zero,dbe8 <__adddf3+0x454>
    d998:	013fe034 	movhi	r4,65408
    d99c:	213fffc4 	addi	r4,r4,-1
    d9a0:	8804d07a 	srli	r2,r17,1
    d9a4:	4108703a 	and	r4,r8,r4
    d9a8:	200697fa 	slli	r3,r4,31
    d9ac:	8c40004c 	andi	r17,r17,1
    d9b0:	1462b03a 	or	r17,r2,r17
    d9b4:	1c62b03a 	or	r17,r3,r17
    d9b8:	2010d07a 	srli	r8,r4,1
    d9bc:	888001cc 	andi	r2,r17,7
    d9c0:	003fbc06 	br	d8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b4>
    d9c4:	8181ffe0 	cmpeqi	r6,r16,2047
    d9c8:	3000291e 	bne	r6,zero,da70 <__adddf3+0x2dc>
    d9cc:	18c02034 	orhi	r3,r3,128
    d9d0:	28800e48 	cmpgei	r2,r5,57
    d9d4:	1000981e 	bne	r2,zero,dc38 <__adddf3+0x4a4>
    d9d8:	28800808 	cmpgei	r2,r5,32
    d9dc:	1000cb26 	beq	r2,zero,dd0c <__adddf3+0x578>
    d9e0:	2c7ff804 	addi	r17,r5,-32
    d9e4:	29000820 	cmpeqi	r4,r5,32
    d9e8:	1c44d83a 	srl	r2,r3,r17
    d9ec:	2000041e 	bne	r4,zero,da00 <__adddf3+0x26c>
    d9f0:	01001004 	movi	r4,64
    d9f4:	214bc83a 	sub	r5,r4,r5
    d9f8:	1946983a 	sll	r3,r3,r5
    d9fc:	50d4b03a 	or	r10,r10,r3
    da00:	5022c03a 	cmpne	r17,r10,zero
    da04:	88a2b03a 	or	r17,r17,r2
    da08:	00008d06 	br	dc40 <__adddf3+0x4ac>
    da0c:	10016e26 	beq	r2,zero,dfc8 <__adddf3+0x834>
    da10:	1a94b03a 	or	r10,r3,r10
    da14:	5000e726 	beq	r10,zero,ddb4 <__adddf3+0x620>
    da18:	400ad0fa 	srli	r5,r8,3
    da1c:	01c80034 	movhi	r7,8192
    da20:	4010977a 	slli	r8,r8,29
    da24:	39ffffc4 	addi	r7,r7,-1
    da28:	21c4703a 	and	r2,r4,r7
    da2c:	2a40022c 	andhi	r9,r5,8
    da30:	1204b03a 	or	r2,r2,r8
    da34:	48000726 	beq	r9,zero,da54 <__adddf3+0x2c0>
    da38:	1808d0fa 	srli	r4,r3,3
    da3c:	2200022c 	andhi	r8,r4,8
    da40:	4000041e 	bne	r8,zero,da54 <__adddf3+0x2c0>
    da44:	1804977a 	slli	r2,r3,29
    da48:	31c6703a 	and	r3,r6,r7
    da4c:	200b883a 	mov	r5,r4
    da50:	1884b03a 	or	r2,r3,r2
    da54:	280a90fa 	slli	r5,r5,3
    da58:	1008d77a 	srli	r4,r2,29
    da5c:	101890fa 	slli	r12,r2,3
    da60:	6825883a 	mov	r18,r13
    da64:	2150b03a 	or	r8,r4,r5
    da68:	0401ffc4 	movi	r16,2047
    da6c:	01800044 	movi	r6,1
    da70:	4004977a 	slli	r2,r8,29
    da74:	6018d0fa 	srli	r12,r12,3
    da78:	400ad0fa 	srli	r5,r8,3
    da7c:	1304b03a 	or	r2,r2,r12
    da80:	3000261e 	bne	r6,zero,db1c <__adddf3+0x388>
    da84:	01000434 	movhi	r4,16
    da88:	213fffc4 	addi	r4,r4,-1
    da8c:	2908703a 	and	r4,r5,r4
    da90:	8401ffcc 	andi	r16,r16,2047
    da94:	8020953a 	slli	r16,r16,20
    da98:	00c00434 	movhi	r3,16
    da9c:	94803fcc 	andi	r18,r18,255
    daa0:	902497fa 	slli	r18,r18,31
    daa4:	18ffffc4 	addi	r3,r3,-1
    daa8:	20c6703a 	and	r3,r4,r3
    daac:	1c06b03a 	or	r3,r3,r16
    dab0:	1c86b03a 	or	r3,r3,r18
    dab4:	dfc00417 	ldw	ra,16(sp)
    dab8:	dcc00317 	ldw	r19,12(sp)
    dabc:	dc800217 	ldw	r18,8(sp)
    dac0:	dc400117 	ldw	r17,4(sp)
    dac4:	dc000017 	ldw	r16,0(sp)
    dac8:	dec00504 	addi	sp,sp,20
    dacc:	f800283a 	ret
    dad0:	1a84b03a 	or	r2,r3,r10
    dad4:	10001d26 	beq	r2,zero,db4c <__adddf3+0x3b8>
    dad8:	28bfffc4 	addi	r2,r5,-1
    dadc:	1000b11e 	bne	r2,zero,dda4 <__adddf3+0x610>
    dae0:	62a3883a 	add	r17,r12,r10
    dae4:	8b05803a 	cmpltu	r2,r17,r12
    dae8:	40c9883a 	add	r4,r8,r3
    daec:	2091883a 	add	r8,r4,r2
    daf0:	4080202c 	andhi	r2,r8,128
    daf4:	10011a1e 	bne	r2,zero,df60 <__adddf3+0x7cc>
    daf8:	04000044 	movi	r16,1
    dafc:	888001cc 	andi	r2,r17,7
    db00:	103f6d1e 	bne	r2,zero,d8b8 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b8>
    db04:	8822d0fa 	srli	r17,r17,3
    db08:	4004977a 	slli	r2,r8,29
    db0c:	8181ffe0 	cmpeqi	r6,r16,2047
    db10:	400ad0fa 	srli	r5,r8,3
    db14:	8884b03a 	or	r2,r17,r2
    db18:	303fda26 	beq	r6,zero,da84 <__alt_mem_mcu_subsystem_ram_0+0x77feda84>
    db1c:	2886b03a 	or	r3,r5,r2
    db20:	18014826 	beq	r3,zero,e044 <__adddf3+0x8b0>
    db24:	00c00434 	movhi	r3,16
    db28:	29000234 	orhi	r4,r5,8
    db2c:	18ffffc4 	addi	r3,r3,-1
    db30:	20c8703a 	and	r4,r4,r3
    db34:	0401ffc4 	movi	r16,2047
    db38:	003fd606 	br	da94 <__alt_mem_mcu_subsystem_ram_0+0x77feda94>
    db3c:	5825883a 	mov	r18,r11
    db40:	380b883a 	mov	r5,r7
    db44:	1811883a 	mov	r8,r3
    db48:	5019883a 	mov	r12,r10
    db4c:	4004977a 	slli	r2,r8,29
    db50:	6018d0fa 	srli	r12,r12,3
    db54:	2821883a 	mov	r16,r5
    db58:	2981ffe0 	cmpeqi	r6,r5,2047
    db5c:	1304b03a 	or	r2,r2,r12
    db60:	400ad0fa 	srli	r5,r8,3
    db64:	003fc606 	br	da80 <__alt_mem_mcu_subsystem_ram_0+0x77feda80>
    db68:	80007326 	beq	r16,zero,dd38 <__adddf3+0x5a4>
    db6c:	3881ffe0 	cmpeqi	r2,r7,2047
    db70:	1000ae1e 	bne	r2,zero,de2c <__adddf3+0x698>
    db74:	014bc83a 	sub	r5,zero,r5
    db78:	42002034 	orhi	r8,r8,128
    db7c:	28800e48 	cmpgei	r2,r5,57
    db80:	1000d41e 	bne	r2,zero,ded4 <__adddf3+0x740>
    db84:	28800808 	cmpgei	r2,r5,32
    db88:	1000fa1e 	bne	r2,zero,df74 <__adddf3+0x7e0>
    db8c:	00800804 	movi	r2,32
    db90:	1145c83a 	sub	r2,r2,r5
    db94:	40a2983a 	sll	r17,r8,r2
    db98:	6148d83a 	srl	r4,r12,r5
    db9c:	6084983a 	sll	r2,r12,r2
    dba0:	414ad83a 	srl	r5,r8,r5
    dba4:	8922b03a 	or	r17,r17,r4
    dba8:	1004c03a 	cmpne	r2,r2,zero
    dbac:	88a2b03a 	or	r17,r17,r2
    dbb0:	1947c83a 	sub	r3,r3,r5
    dbb4:	5463c83a 	sub	r17,r10,r17
    dbb8:	5449803a 	cmpltu	r4,r10,r17
    dbbc:	1911c83a 	sub	r8,r3,r4
    dbc0:	5825883a 	mov	r18,r11
    dbc4:	3821883a 	mov	r16,r7
    dbc8:	003f1906 	br	d830 <__alt_mem_mcu_subsystem_ram_0+0x77fed830>
    dbcc:	28007c1e 	bne	r5,zero,ddc0 <__adddf3+0x62c>
    dbd0:	81400044 	addi	r5,r16,1
    dbd4:	2881ffcc 	andi	r2,r5,2047
    dbd8:	10800088 	cmpgei	r2,r2,2
    dbdc:	10009926 	beq	r2,zero,de44 <__adddf3+0x6b0>
    dbe0:	2881ffe0 	cmpeqi	r2,r5,2047
    dbe4:	10005c26 	beq	r2,zero,dd58 <__adddf3+0x5c4>
    dbe8:	0401ffc4 	movi	r16,2047
    dbec:	0009883a 	mov	r4,zero
    dbf0:	0005883a 	mov	r2,zero
    dbf4:	003fa706 	br	da94 <__alt_mem_mcu_subsystem_ram_0+0x77feda94>
    dbf8:	8809883a 	mov	r4,r17
    dbfc:	000facc0 	call	facc <__clzsi2>
    dc00:	10800804 	addi	r2,r2,32
    dc04:	10fffe04 	addi	r3,r2,-8
    dc08:	19000808 	cmpgei	r4,r3,32
    dc0c:	203f1326 	beq	r4,zero,d85c <__alt_mem_mcu_subsystem_ram_0+0x77fed85c>
    dc10:	14fff604 	addi	r19,r2,-40
    dc14:	8cc8983a 	sll	r4,r17,r19
    dc18:	0023883a 	mov	r17,zero
    dc1c:	1c3f160e 	bge	r3,r16,d878 <__alt_mem_mcu_subsystem_ram_0+0x77fed878>
    dc20:	023fe034 	movhi	r8,65408
    dc24:	423fffc4 	addi	r8,r8,-1
    dc28:	80e1c83a 	sub	r16,r16,r3
    dc2c:	2210703a 	and	r8,r4,r8
    dc30:	888001cc 	andi	r2,r17,7
    dc34:	003f1f06 	br	d8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b4>
    dc38:	1aa2b03a 	or	r17,r3,r10
    dc3c:	8822c03a 	cmpne	r17,r17,zero
    dc40:	6463c83a 	sub	r17,r12,r17
    dc44:	6445803a 	cmpltu	r2,r12,r17
    dc48:	4091c83a 	sub	r8,r8,r2
    dc4c:	003ef806 	br	d830 <__alt_mem_mcu_subsystem_ram_0+0x77fed830>
    dc50:	4304b03a 	or	r2,r8,r12
    dc54:	1a8ab03a 	or	r5,r3,r10
    dc58:	80004a1e 	bne	r16,zero,dd84 <__adddf3+0x5f0>
    dc5c:	1000a01e 	bne	r2,zero,dee0 <__adddf3+0x74c>
    dc60:	2800cf26 	beq	r5,zero,dfa0 <__adddf3+0x80c>
    dc64:	5825883a 	mov	r18,r11
    dc68:	1811883a 	mov	r8,r3
    dc6c:	5019883a 	mov	r12,r10
    dc70:	000d883a 	mov	r6,zero
    dc74:	003f7e06 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    dc78:	2941ffe0 	cmpeqi	r5,r5,2047
    dc7c:	28004d1e 	bne	r5,zero,ddb4 <__adddf3+0x620>
    dc80:	100b883a 	mov	r5,r2
    dc84:	003f5206 	br	d9d0 <__alt_mem_mcu_subsystem_ram_0+0x77fed9d0>
    dc88:	843ff844 	addi	r16,r16,-31
    dc8c:	40800820 	cmpeqi	r2,r8,32
    dc90:	2406d83a 	srl	r3,r4,r16
    dc94:	1000041e 	bne	r2,zero,dca8 <__adddf3+0x514>
    dc98:	04c01004 	movi	r19,64
    dc9c:	9a11c83a 	sub	r8,r19,r8
    dca0:	2226983a 	sll	r19,r4,r8
    dca4:	8ce2b03a 	or	r17,r17,r19
    dca8:	8822c03a 	cmpne	r17,r17,zero
    dcac:	88e2b03a 	or	r17,r17,r3
    dcb0:	888001cc 	andi	r2,r17,7
    dcb4:	0011883a 	mov	r8,zero
    dcb8:	0021883a 	mov	r16,zero
    dcbc:	003f9006 	br	db00 <__alt_mem_mcu_subsystem_ram_0+0x77fedb00>
    dcc0:	5323c83a 	sub	r17,r10,r12
    dcc4:	1a09c83a 	sub	r4,r3,r8
    dcc8:	5455803a 	cmpltu	r10,r10,r17
    dccc:	22a7c83a 	sub	r19,r4,r10
    dcd0:	5825883a 	mov	r18,r11
    dcd4:	003edb06 	br	d844 <__alt_mem_mcu_subsystem_ram_0+0x77fed844>
    dcd8:	28800808 	cmpgei	r2,r5,32
    dcdc:	10006d1e 	bne	r2,zero,de94 <__adddf3+0x700>
    dce0:	00800804 	movi	r2,32
    dce4:	1145c83a 	sub	r2,r2,r5
    dce8:	18a2983a 	sll	r17,r3,r2
    dcec:	5148d83a 	srl	r4,r10,r5
    dcf0:	5094983a 	sll	r10,r10,r2
    dcf4:	1946d83a 	srl	r3,r3,r5
    dcf8:	8922b03a 	or	r17,r17,r4
    dcfc:	5014c03a 	cmpne	r10,r10,zero
    dd00:	8aa2b03a 	or	r17,r17,r10
    dd04:	40d1883a 	add	r8,r8,r3
    dd08:	003f1b06 	br	d978 <__alt_mem_mcu_subsystem_ram_0+0x77fed978>
    dd0c:	00800804 	movi	r2,32
    dd10:	1145c83a 	sub	r2,r2,r5
    dd14:	18a2983a 	sll	r17,r3,r2
    dd18:	5148d83a 	srl	r4,r10,r5
    dd1c:	5094983a 	sll	r10,r10,r2
    dd20:	1946d83a 	srl	r3,r3,r5
    dd24:	8922b03a 	or	r17,r17,r4
    dd28:	5014c03a 	cmpne	r10,r10,zero
    dd2c:	8aa2b03a 	or	r17,r17,r10
    dd30:	40d1c83a 	sub	r8,r8,r3
    dd34:	003fc206 	br	dc40 <__alt_mem_mcu_subsystem_ram_0+0x77fedc40>
    dd38:	4304b03a 	or	r2,r8,r12
    dd3c:	103f7f26 	beq	r2,zero,db3c <__alt_mem_mcu_subsystem_ram_0+0x77fedb3c>
    dd40:	28bfffd8 	cmpnei	r2,r5,-1
    dd44:	10009926 	beq	r2,zero,dfac <__adddf3+0x818>
    dd48:	3881ffe0 	cmpeqi	r2,r7,2047
    dd4c:	1000371e 	bne	r2,zero,de2c <__adddf3+0x698>
    dd50:	014a303a 	nor	r5,zero,r5
    dd54:	003f8906 	br	db7c <__alt_mem_mcu_subsystem_ram_0+0x77fedb7c>
    dd58:	6295883a 	add	r10,r12,r10
    dd5c:	40c9883a 	add	r4,r8,r3
    dd60:	5311803a 	cmpltu	r8,r10,r12
    dd64:	2209883a 	add	r4,r4,r8
    dd68:	202297fa 	slli	r17,r4,31
    dd6c:	5014d07a 	srli	r10,r10,1
    dd70:	2010d07a 	srli	r8,r4,1
    dd74:	2821883a 	mov	r16,r5
    dd78:	8aa2b03a 	or	r17,r17,r10
    dd7c:	888001cc 	andi	r2,r17,7
    dd80:	003ecc06 	br	d8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b4>
    dd84:	1000641e 	bne	r2,zero,df18 <__adddf3+0x784>
    dd88:	28009426 	beq	r5,zero,dfdc <__adddf3+0x848>
    dd8c:	5825883a 	mov	r18,r11
    dd90:	1811883a 	mov	r8,r3
    dd94:	5019883a 	mov	r12,r10
    dd98:	0401ffc4 	movi	r16,2047
    dd9c:	01800044 	movi	r6,1
    dda0:	003f3306 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    dda4:	2941ffe0 	cmpeqi	r5,r5,2047
    dda8:	2800021e 	bne	r5,zero,ddb4 <__adddf3+0x620>
    ddac:	100b883a 	mov	r5,r2
    ddb0:	003eed06 	br	d968 <__alt_mem_mcu_subsystem_ram_0+0x77fed968>
    ddb4:	0401ffc4 	movi	r16,2047
    ddb8:	01800044 	movi	r6,1
    ddbc:	003f2c06 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    ddc0:	80003f1e 	bne	r16,zero,dec0 <__adddf3+0x72c>
    ddc4:	4304b03a 	or	r2,r8,r12
    ddc8:	103f5d26 	beq	r2,zero,db40 <__alt_mem_mcu_subsystem_ram_0+0x77fedb40>
    ddcc:	28bfffd8 	cmpnei	r2,r5,-1
    ddd0:	10009126 	beq	r2,zero,e018 <__adddf3+0x884>
    ddd4:	3881ffe0 	cmpeqi	r2,r7,2047
    ddd8:	1000151e 	bne	r2,zero,de30 <__adddf3+0x69c>
    dddc:	014a303a 	nor	r5,zero,r5
    dde0:	28800e48 	cmpgei	r2,r5,57
    dde4:	1000601e 	bne	r2,zero,df68 <__adddf3+0x7d4>
    dde8:	28800808 	cmpgei	r2,r5,32
    ddec:	10007f1e 	bne	r2,zero,dfec <__adddf3+0x858>
    ddf0:	00800804 	movi	r2,32
    ddf4:	1145c83a 	sub	r2,r2,r5
    ddf8:	40a2983a 	sll	r17,r8,r2
    ddfc:	6148d83a 	srl	r4,r12,r5
    de00:	6084983a 	sll	r2,r12,r2
    de04:	414ad83a 	srl	r5,r8,r5
    de08:	8922b03a 	or	r17,r17,r4
    de0c:	1004c03a 	cmpne	r2,r2,zero
    de10:	88a2b03a 	or	r17,r17,r2
    de14:	1947883a 	add	r3,r3,r5
    de18:	8aa3883a 	add	r17,r17,r10
    de1c:	8a89803a 	cmpltu	r4,r17,r10
    de20:	20d1883a 	add	r8,r4,r3
    de24:	3821883a 	mov	r16,r7
    de28:	003ed606 	br	d984 <__alt_mem_mcu_subsystem_ram_0+0x77fed984>
    de2c:	5825883a 	mov	r18,r11
    de30:	0401ffc4 	movi	r16,2047
    de34:	1811883a 	mov	r8,r3
    de38:	5019883a 	mov	r12,r10
    de3c:	01800044 	movi	r6,1
    de40:	003f0b06 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    de44:	4304b03a 	or	r2,r8,r12
    de48:	803ef01e 	bne	r16,zero,da0c <__alt_mem_mcu_subsystem_ram_0+0x77feda0c>
    de4c:	103f8626 	beq	r2,zero,dc68 <__alt_mem_mcu_subsystem_ram_0+0x77fedc68>
    de50:	1a84b03a 	or	r2,r3,r10
    de54:	103f8626 	beq	r2,zero,dc70 <__alt_mem_mcu_subsystem_ram_0+0x77fedc70>
    de58:	62a3883a 	add	r17,r12,r10
    de5c:	40c9883a 	add	r4,r8,r3
    de60:	8b05803a 	cmpltu	r2,r17,r12
    de64:	2091883a 	add	r8,r4,r2
    de68:	40c0202c 	andhi	r3,r8,128
    de6c:	888001cc 	andi	r2,r17,7
    de70:	183f2326 	beq	r3,zero,db00 <__alt_mem_mcu_subsystem_ram_0+0x77fedb00>
    de74:	00ffe034 	movhi	r3,65408
    de78:	18ffffc4 	addi	r3,r3,-1
    de7c:	40d0703a 	and	r8,r8,r3
    de80:	04000044 	movi	r16,1
    de84:	003e8b06 	br	d8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b4>
    de88:	8819883a 	mov	r12,r17
    de8c:	8181ffe0 	cmpeqi	r6,r16,2047
    de90:	003ef706 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    de94:	2c7ff804 	addi	r17,r5,-32
    de98:	29000820 	cmpeqi	r4,r5,32
    de9c:	1c44d83a 	srl	r2,r3,r17
    dea0:	2000041e 	bne	r4,zero,deb4 <__adddf3+0x720>
    dea4:	01001004 	movi	r4,64
    dea8:	214bc83a 	sub	r5,r4,r5
    deac:	1946983a 	sll	r3,r3,r5
    deb0:	50d4b03a 	or	r10,r10,r3
    deb4:	5022c03a 	cmpne	r17,r10,zero
    deb8:	88a2b03a 	or	r17,r17,r2
    debc:	003eae06 	br	d978 <__alt_mem_mcu_subsystem_ram_0+0x77fed978>
    dec0:	3881ffe0 	cmpeqi	r2,r7,2047
    dec4:	103fda1e 	bne	r2,zero,de30 <__alt_mem_mcu_subsystem_ram_0+0x77fede30>
    dec8:	014bc83a 	sub	r5,zero,r5
    decc:	42002034 	orhi	r8,r8,128
    ded0:	003fc306 	br	dde0 <__alt_mem_mcu_subsystem_ram_0+0x77fedde0>
    ded4:	4322b03a 	or	r17,r8,r12
    ded8:	8822c03a 	cmpne	r17,r17,zero
    dedc:	003f3506 	br	dbb4 <__alt_mem_mcu_subsystem_ram_0+0x77fedbb4>
    dee0:	283f6326 	beq	r5,zero,dc70 <__alt_mem_mcu_subsystem_ram_0+0x77fedc70>
    dee4:	62a3c83a 	sub	r17,r12,r10
    dee8:	6445803a 	cmpltu	r2,r12,r17
    deec:	40c9c83a 	sub	r4,r8,r3
    def0:	2089c83a 	sub	r4,r4,r2
    def4:	2080202c 	andhi	r2,r4,128
    def8:	10004d26 	beq	r2,zero,e030 <__adddf3+0x89c>
    defc:	5323c83a 	sub	r17,r10,r12
    df00:	1a09c83a 	sub	r4,r3,r8
    df04:	5455803a 	cmpltu	r10,r10,r17
    df08:	2291c83a 	sub	r8,r4,r10
    df0c:	888001cc 	andi	r2,r17,7
    df10:	5825883a 	mov	r18,r11
    df14:	003e6706 	br	d8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fed8b4>
    df18:	283fa626 	beq	r5,zero,ddb4 <__alt_mem_mcu_subsystem_ram_0+0x77feddb4>
    df1c:	400ad0fa 	srli	r5,r8,3
    df20:	01c80034 	movhi	r7,8192
    df24:	4010977a 	slli	r8,r8,29
    df28:	39ffffc4 	addi	r7,r7,-1
    df2c:	21c4703a 	and	r2,r4,r7
    df30:	2a40022c 	andhi	r9,r5,8
    df34:	1204b03a 	or	r2,r2,r8
    df38:	483ec626 	beq	r9,zero,da54 <__alt_mem_mcu_subsystem_ram_0+0x77feda54>
    df3c:	1808d0fa 	srli	r4,r3,3
    df40:	2200022c 	andhi	r8,r4,8
    df44:	403ec31e 	bne	r8,zero,da54 <__alt_mem_mcu_subsystem_ram_0+0x77feda54>
    df48:	1804977a 	slli	r2,r3,29
    df4c:	31c6703a 	and	r3,r6,r7
    df50:	200b883a 	mov	r5,r4
    df54:	1884b03a 	or	r2,r3,r2
    df58:	701b883a 	mov	r13,r14
    df5c:	003ebd06 	br	da54 <__alt_mem_mcu_subsystem_ram_0+0x77feda54>
    df60:	04000084 	movi	r16,2
    df64:	003e8c06 	br	d998 <__alt_mem_mcu_subsystem_ram_0+0x77fed998>
    df68:	4322b03a 	or	r17,r8,r12
    df6c:	8822c03a 	cmpne	r17,r17,zero
    df70:	003fa906 	br	de18 <__alt_mem_mcu_subsystem_ram_0+0x77fede18>
    df74:	28bff804 	addi	r2,r5,-32
    df78:	29000820 	cmpeqi	r4,r5,32
    df7c:	4084d83a 	srl	r2,r8,r2
    df80:	2000041e 	bne	r4,zero,df94 <__adddf3+0x800>
    df84:	01001004 	movi	r4,64
    df88:	214bc83a 	sub	r5,r4,r5
    df8c:	4148983a 	sll	r4,r8,r5
    df90:	6118b03a 	or	r12,r12,r4
    df94:	6022c03a 	cmpne	r17,r12,zero
    df98:	88a2b03a 	or	r17,r17,r2
    df9c:	003f0506 	br	dbb4 <__alt_mem_mcu_subsystem_ram_0+0x77fedbb4>
    dfa0:	0005883a 	mov	r2,zero
    dfa4:	0025883a 	mov	r18,zero
    dfa8:	003eb606 	br	da84 <__alt_mem_mcu_subsystem_ram_0+0x77feda84>
    dfac:	5323c83a 	sub	r17,r10,r12
    dfb0:	1a09c83a 	sub	r4,r3,r8
    dfb4:	5455803a 	cmpltu	r10,r10,r17
    dfb8:	2291c83a 	sub	r8,r4,r10
    dfbc:	5825883a 	mov	r18,r11
    dfc0:	3821883a 	mov	r16,r7
    dfc4:	003e1a06 	br	d830 <__alt_mem_mcu_subsystem_ram_0+0x77fed830>
    dfc8:	1811883a 	mov	r8,r3
    dfcc:	5019883a 	mov	r12,r10
    dfd0:	0401ffc4 	movi	r16,2047
    dfd4:	01800044 	movi	r6,1
    dfd8:	003ea506 	br	da70 <__alt_mem_mcu_subsystem_ram_0+0x77feda70>
    dfdc:	0025883a 	mov	r18,zero
    dfe0:	480b883a 	mov	r5,r9
    dfe4:	00bfffc4 	movi	r2,-1
    dfe8:	003ece06 	br	db24 <__alt_mem_mcu_subsystem_ram_0+0x77fedb24>
    dfec:	28bff804 	addi	r2,r5,-32
    dff0:	29000820 	cmpeqi	r4,r5,32
    dff4:	4084d83a 	srl	r2,r8,r2
    dff8:	2000041e 	bne	r4,zero,e00c <__adddf3+0x878>
    dffc:	01001004 	movi	r4,64
    e000:	214bc83a 	sub	r5,r4,r5
    e004:	4148983a 	sll	r4,r8,r5
    e008:	6118b03a 	or	r12,r12,r4
    e00c:	6022c03a 	cmpne	r17,r12,zero
    e010:	88a2b03a 	or	r17,r17,r2
    e014:	003f8006 	br	de18 <__alt_mem_mcu_subsystem_ram_0+0x77fede18>
    e018:	62a3883a 	add	r17,r12,r10
    e01c:	40c9883a 	add	r4,r8,r3
    e020:	8a95803a 	cmpltu	r10,r17,r10
    e024:	2291883a 	add	r8,r4,r10
    e028:	3821883a 	mov	r16,r7
    e02c:	003e5506 	br	d984 <__alt_mem_mcu_subsystem_ram_0+0x77fed984>
    e030:	890ab03a 	or	r5,r17,r4
    e034:	283fda26 	beq	r5,zero,dfa0 <__alt_mem_mcu_subsystem_ram_0+0x77fedfa0>
    e038:	888001cc 	andi	r2,r17,7
    e03c:	2011883a 	mov	r8,r4
    e040:	003eaf06 	br	db00 <__alt_mem_mcu_subsystem_ram_0+0x77fedb00>
    e044:	0005883a 	mov	r2,zero
    e048:	0401ffc4 	movi	r16,2047
    e04c:	0009883a 	mov	r4,zero
    e050:	003e9006 	br	da94 <__alt_mem_mcu_subsystem_ram_0+0x77feda94>

0000e054 <__divdf3>:
    e054:	defff104 	addi	sp,sp,-60
    e058:	dc400615 	stw	r17,24(sp)
    e05c:	2822d53a 	srli	r17,r5,20
    e060:	dd000915 	stw	r20,36(sp)
    e064:	2828d7fa 	srli	r20,r5,31
    e068:	dc800715 	stw	r18,28(sp)
    e06c:	04800434 	movhi	r18,16
    e070:	dd800b15 	stw	r22,44(sp)
    e074:	94bfffc4 	addi	r18,r18,-1
    e078:	dfc00e15 	stw	ra,56(sp)
    e07c:	df000d15 	stw	fp,52(sp)
    e080:	ddc00c15 	stw	r23,48(sp)
    e084:	dd400a15 	stw	r21,40(sp)
    e088:	dcc00815 	stw	r19,32(sp)
    e08c:	dc000515 	stw	r16,20(sp)
    e090:	8c41ffcc 	andi	r17,r17,2047
    e094:	2ca4703a 	and	r18,r5,r18
    e098:	a5803fcc 	andi	r22,r20,255
    e09c:	88007c26 	beq	r17,zero,e290 <__divdf3+0x23c>
    e0a0:	8881ffe0 	cmpeqi	r2,r17,2047
    e0a4:	2027883a 	mov	r19,r4
    e0a8:	1000331e 	bne	r2,zero,e178 <__divdf3+0x124>
    e0ac:	900a90fa 	slli	r5,r18,3
    e0b0:	2020d77a 	srli	r16,r4,29
    e0b4:	202690fa 	slli	r19,r4,3
    e0b8:	29402034 	orhi	r5,r5,128
    e0bc:	8c7f0044 	addi	r17,r17,-1023
    e0c0:	8160b03a 	or	r16,r16,r5
    e0c4:	002f883a 	mov	r23,zero
    e0c8:	0011883a 	mov	r8,zero
    e0cc:	3806d53a 	srli	r3,r7,20
    e0d0:	3838d7fa 	srli	fp,r7,31
    e0d4:	01000434 	movhi	r4,16
    e0d8:	213fffc4 	addi	r4,r4,-1
    e0dc:	18c1ffcc 	andi	r3,r3,2047
    e0e0:	300b883a 	mov	r5,r6
    e0e4:	3924703a 	and	r18,r7,r4
    e0e8:	e2403fcc 	andi	r9,fp,255
    e0ec:	18008826 	beq	r3,zero,e310 <__divdf3+0x2bc>
    e0f0:	1881ffe0 	cmpeqi	r2,r3,2047
    e0f4:	10007f1e 	bne	r2,zero,e2f4 <__divdf3+0x2a0>
    e0f8:	900890fa 	slli	r4,r18,3
    e0fc:	302ad77a 	srli	r21,r6,29
    e100:	300a90fa 	slli	r5,r6,3
    e104:	18ff0044 	addi	r3,r3,-1023
    e108:	21002034 	orhi	r4,r4,128
    e10c:	88e3c83a 	sub	r17,r17,r3
    e110:	a92ab03a 	or	r21,r21,r4
    e114:	0007883a 	mov	r3,zero
    e118:	b9000428 	cmpgeui	r4,r23,16
    e11c:	a724f03a 	xor	r18,r20,fp
    e120:	2000b71e 	bne	r4,zero,e400 <__divdf3+0x3ac>
    e124:	b80890ba 	slli	r4,r23,2
    e128:	00800074 	movhi	r2,1
    e12c:	2085883a 	add	r2,r4,r2
    e130:	10b84e17 	ldw	r2,-7880(r2)
    e134:	1000683a 	jmp	r2
    e138:	0000e400 	call	e40 <ad9144_setup+0x39c>
    e13c:	0000e20c 	andi	zero,zero,904
    e140:	0000e280 	call	e28 <ad9144_setup+0x384>
    e144:	0000e1a4 	muli	zero,zero,902
    e148:	0000e280 	call	e28 <ad9144_setup+0x384>
    e14c:	0000e3bc 	xorhi	zero,zero,910
    e150:	0000e280 	call	e28 <ad9144_setup+0x384>
    e154:	0000e1a4 	muli	zero,zero,902
    e158:	0000e20c 	andi	zero,zero,904
    e15c:	0000e20c 	andi	zero,zero,904
    e160:	0000e3bc 	xorhi	zero,zero,910
    e164:	0000e1a4 	muli	zero,zero,902
    e168:	0000e194 	movui	zero,902
    e16c:	0000e194 	movui	zero,902
    e170:	0000e194 	movui	zero,902
    e174:	0000e3d4 	movui	zero,911
    e178:	24a0b03a 	or	r16,r4,r18
    e17c:	80007d1e 	bne	r16,zero,e374 <__divdf3+0x320>
    e180:	05c00204 	movi	r23,8
    e184:	0027883a 	mov	r19,zero
    e188:	0441ffc4 	movi	r17,2047
    e18c:	02000084 	movi	r8,2
    e190:	003fce06 	br	e0cc <__alt_mem_mcu_subsystem_ram_0+0x77fee0cc>
    e194:	802b883a 	mov	r21,r16
    e198:	980b883a 	mov	r5,r19
    e19c:	b013883a 	mov	r9,r22
    e1a0:	4007883a 	mov	r3,r8
    e1a4:	188000a0 	cmpeqi	r2,r3,2
    e1a8:	4825883a 	mov	r18,r9
    e1ac:	1000171e 	bne	r2,zero,e20c <__divdf3+0x1b8>
    e1b0:	188000e0 	cmpeqi	r2,r3,3
    e1b4:	1001c11e 	bne	r2,zero,e8bc <__divdf3+0x868>
    e1b8:	18c00060 	cmpeqi	r3,r3,1
    e1bc:	1800301e 	bne	r3,zero,e280 <__divdf3+0x22c>
    e1c0:	8980ffc4 	addi	r6,r17,1023
    e1c4:	01802a0e 	bge	zero,r6,e270 <__divdf3+0x21c>
    e1c8:	288001cc 	andi	r2,r5,7
    e1cc:	1001951e 	bne	r2,zero,e824 <__divdf3+0x7d0>
    e1d0:	280ad0fa 	srli	r5,r5,3
    e1d4:	a880402c 	andhi	r2,r21,256
    e1d8:	10000426 	beq	r2,zero,e1ec <__divdf3+0x198>
    e1dc:	00bfc034 	movhi	r2,65280
    e1e0:	10bfffc4 	addi	r2,r2,-1
    e1e4:	a8aa703a 	and	r21,r21,r2
    e1e8:	89810004 	addi	r6,r17,1024
    e1ec:	3081ffc8 	cmpgei	r2,r6,2047
    e1f0:	1000061e 	bne	r2,zero,e20c <__divdf3+0x1b8>
    e1f4:	a826977a 	slli	r19,r21,29
    e1f8:	a820927a 	slli	r16,r21,9
    e1fc:	3101ffcc 	andi	r4,r6,2047
    e200:	9966b03a 	or	r19,r19,r5
    e204:	8020d33a 	srli	r16,r16,12
    e208:	00000306 	br	e218 <__divdf3+0x1c4>
    e20c:	0101ffc4 	movi	r4,2047
    e210:	0021883a 	mov	r16,zero
    e214:	0027883a 	mov	r19,zero
    e218:	2008953a 	slli	r4,r4,20
    e21c:	90803fcc 	andi	r2,r18,255
    e220:	00c00434 	movhi	r3,16
    e224:	18ffffc4 	addi	r3,r3,-1
    e228:	100497fa 	slli	r2,r2,31
    e22c:	80e0703a 	and	r16,r16,r3
    e230:	8106b03a 	or	r3,r16,r4
    e234:	1886b03a 	or	r3,r3,r2
    e238:	9805883a 	mov	r2,r19
    e23c:	dfc00e17 	ldw	ra,56(sp)
    e240:	df000d17 	ldw	fp,52(sp)
    e244:	ddc00c17 	ldw	r23,48(sp)
    e248:	dd800b17 	ldw	r22,44(sp)
    e24c:	dd400a17 	ldw	r21,40(sp)
    e250:	dd000917 	ldw	r20,36(sp)
    e254:	dcc00817 	ldw	r19,32(sp)
    e258:	dc800717 	ldw	r18,28(sp)
    e25c:	dc400617 	ldw	r17,24(sp)
    e260:	dc000517 	ldw	r16,20(sp)
    e264:	dec00f04 	addi	sp,sp,60
    e268:	f800283a 	ret
    e26c:	017fffc4 	movi	r5,-1
    e270:	04000044 	movi	r16,1
    e274:	81a1c83a 	sub	r16,r16,r6
    e278:	80800e48 	cmpgei	r2,r16,57
    e27c:	10013826 	beq	r2,zero,e760 <__divdf3+0x70c>
    e280:	0009883a 	mov	r4,zero
    e284:	0021883a 	mov	r16,zero
    e288:	0027883a 	mov	r19,zero
    e28c:	003fe206 	br	e218 <__alt_mem_mcu_subsystem_ram_0+0x77fee218>
    e290:	24a0b03a 	or	r16,r4,r18
    e294:	202b883a 	mov	r21,r4
    e298:	80003b26 	beq	r16,zero,e388 <__divdf3+0x334>
    e29c:	d9c00115 	stw	r7,4(sp)
    e2a0:	d9800015 	stw	r6,0(sp)
    e2a4:	90012426 	beq	r18,zero,e738 <__divdf3+0x6e4>
    e2a8:	9009883a 	mov	r4,r18
    e2ac:	000facc0 	call	facc <__clzsi2>
    e2b0:	d9800017 	ldw	r6,0(sp)
    e2b4:	d9c00117 	ldw	r7,4(sp)
    e2b8:	10fffd44 	addi	r3,r2,-11
    e2bc:	19000748 	cmpgei	r4,r3,29
    e2c0:	2001191e 	bne	r4,zero,e728 <__divdf3+0x6d4>
    e2c4:	04000744 	movi	r16,29
    e2c8:	14fffe04 	addi	r19,r2,-8
    e2cc:	80e1c83a 	sub	r16,r16,r3
    e2d0:	94ca983a 	sll	r5,r18,r19
    e2d4:	ac20d83a 	srl	r16,r21,r16
    e2d8:	ace6983a 	sll	r19,r21,r19
    e2dc:	8160b03a 	or	r16,r16,r5
    e2e0:	047f0344 	movi	r17,-1011
    e2e4:	88a3c83a 	sub	r17,r17,r2
    e2e8:	002f883a 	mov	r23,zero
    e2ec:	0011883a 	mov	r8,zero
    e2f0:	003f7606 	br	e0cc <__alt_mem_mcu_subsystem_ram_0+0x77fee0cc>
    e2f4:	91aab03a 	or	r21,r18,r6
    e2f8:	8c7e0044 	addi	r17,r17,-2047
    e2fc:	a800271e 	bne	r21,zero,e39c <__divdf3+0x348>
    e300:	bdc00094 	ori	r23,r23,2
    e304:	000b883a 	mov	r5,zero
    e308:	00c00084 	movi	r3,2
    e30c:	003f8206 	br	e118 <__alt_mem_mcu_subsystem_ram_0+0x77fee118>
    e310:	91aab03a 	or	r21,r18,r6
    e314:	a8002526 	beq	r21,zero,e3ac <__divdf3+0x358>
    e318:	9000f926 	beq	r18,zero,e700 <__divdf3+0x6ac>
    e31c:	9009883a 	mov	r4,r18
    e320:	d9800215 	stw	r6,8(sp)
    e324:	da000115 	stw	r8,4(sp)
    e328:	da400015 	stw	r9,0(sp)
    e32c:	000facc0 	call	facc <__clzsi2>
    e330:	da400017 	ldw	r9,0(sp)
    e334:	da000117 	ldw	r8,4(sp)
    e338:	d9800217 	ldw	r6,8(sp)
    e33c:	10fffd44 	addi	r3,r2,-11
    e340:	19000748 	cmpgei	r4,r3,29
    e344:	2000ea1e 	bne	r4,zero,e6f0 <__divdf3+0x69c>
    e348:	05400744 	movi	r21,29
    e34c:	117ffe04 	addi	r5,r2,-8
    e350:	a8ebc83a 	sub	r21,r21,r3
    e354:	9148983a 	sll	r4,r18,r5
    e358:	356ad83a 	srl	r21,r6,r21
    e35c:	314a983a 	sll	r5,r6,r5
    e360:	a92ab03a 	or	r21,r21,r4
    e364:	1463883a 	add	r17,r2,r17
    e368:	8c40fcc4 	addi	r17,r17,1011
    e36c:	0007883a 	mov	r3,zero
    e370:	003f6906 	br	e118 <__alt_mem_mcu_subsystem_ram_0+0x77fee118>
    e374:	9021883a 	mov	r16,r18
    e378:	05c00304 	movi	r23,12
    e37c:	0441ffc4 	movi	r17,2047
    e380:	020000c4 	movi	r8,3
    e384:	003f5106 	br	e0cc <__alt_mem_mcu_subsystem_ram_0+0x77fee0cc>
    e388:	05c00104 	movi	r23,4
    e38c:	0027883a 	mov	r19,zero
    e390:	0023883a 	mov	r17,zero
    e394:	02000044 	movi	r8,1
    e398:	003f4c06 	br	e0cc <__alt_mem_mcu_subsystem_ram_0+0x77fee0cc>
    e39c:	bdc000d4 	ori	r23,r23,3
    e3a0:	902b883a 	mov	r21,r18
    e3a4:	00c000c4 	movi	r3,3
    e3a8:	003f5b06 	br	e118 <__alt_mem_mcu_subsystem_ram_0+0x77fee118>
    e3ac:	bdc00054 	ori	r23,r23,1
    e3b0:	000b883a 	mov	r5,zero
    e3b4:	00c00044 	movi	r3,1
    e3b8:	003f5706 	br	e118 <__alt_mem_mcu_subsystem_ram_0+0x77fee118>
    e3bc:	04000434 	movhi	r16,16
    e3c0:	0025883a 	mov	r18,zero
    e3c4:	843fffc4 	addi	r16,r16,-1
    e3c8:	04ffffc4 	movi	r19,-1
    e3cc:	0101ffc4 	movi	r4,2047
    e3d0:	003f9106 	br	e218 <__alt_mem_mcu_subsystem_ram_0+0x77fee218>
    e3d4:	8080022c 	andhi	r2,r16,8
    e3d8:	1000a526 	beq	r2,zero,e670 <__divdf3+0x61c>
    e3dc:	a880022c 	andhi	r2,r21,8
    e3e0:	1000a31e 	bne	r2,zero,e670 <__divdf3+0x61c>
    e3e4:	00800434 	movhi	r2,16
    e3e8:	ac000234 	orhi	r16,r21,8
    e3ec:	10bfffc4 	addi	r2,r2,-1
    e3f0:	80a0703a 	and	r16,r16,r2
    e3f4:	e025883a 	mov	r18,fp
    e3f8:	2827883a 	mov	r19,r5
    e3fc:	003ff306 	br	e3cc <__alt_mem_mcu_subsystem_ram_0+0x77fee3cc>
    e400:	ac00b536 	bltu	r21,r16,e6d8 <__divdf3+0x684>
    e404:	8540b326 	beq	r16,r21,e6d4 <__divdf3+0x680>
    e408:	8c7fffc4 	addi	r17,r17,-1
    e40c:	8029883a 	mov	r20,r16
    e410:	000d883a 	mov	r6,zero
    e414:	2804d63a 	srli	r2,r5,24
    e418:	a820923a 	slli	r16,r21,8
    e41c:	a009883a 	mov	r4,r20
    e420:	282e923a 	slli	r23,r5,8
    e424:	1420b03a 	or	r16,r2,r16
    e428:	802cd43a 	srli	r22,r16,16
    e42c:	d9800015 	stw	r6,0(sp)
    e430:	873fffcc 	andi	fp,r16,65535
    e434:	b00b883a 	mov	r5,r22
    e438:	000d6d80 	call	d6d8 <__udivsi3>
    e43c:	a009883a 	mov	r4,r20
    e440:	b00b883a 	mov	r5,r22
    e444:	102b883a 	mov	r21,r2
    e448:	000d73c0 	call	d73c <__umodsi3>
    e44c:	1006943a 	slli	r3,r2,16
    e450:	9804d43a 	srli	r2,r19,16
    e454:	e569383a 	mul	r20,fp,r21
    e458:	d9800017 	ldw	r6,0(sp)
    e45c:	10c4b03a 	or	r2,r2,r3
    e460:	1500042e 	bgeu	r2,r20,e474 <__divdf3+0x420>
    e464:	1405883a 	add	r2,r2,r16
    e468:	a8ffffc4 	addi	r3,r21,-1
    e46c:	1400d92e 	bgeu	r2,r16,e7d4 <__divdf3+0x780>
    e470:	182b883a 	mov	r21,r3
    e474:	1529c83a 	sub	r20,r2,r20
    e478:	b00b883a 	mov	r5,r22
    e47c:	a009883a 	mov	r4,r20
    e480:	d9800115 	stw	r6,4(sp)
    e484:	000d6d80 	call	d6d8 <__udivsi3>
    e488:	b00b883a 	mov	r5,r22
    e48c:	a009883a 	mov	r4,r20
    e490:	d8800015 	stw	r2,0(sp)
    e494:	000d73c0 	call	d73c <__umodsi3>
    e498:	d8c00017 	ldw	r3,0(sp)
    e49c:	1004943a 	slli	r2,r2,16
    e4a0:	9cffffcc 	andi	r19,r19,65535
    e4a4:	e0d1383a 	mul	r8,fp,r3
    e4a8:	98a6b03a 	or	r19,r19,r2
    e4ac:	d9800117 	ldw	r6,4(sp)
    e4b0:	9a00042e 	bgeu	r19,r8,e4c4 <__divdf3+0x470>
    e4b4:	9c27883a 	add	r19,r19,r16
    e4b8:	18bfffc4 	addi	r2,r3,-1
    e4bc:	9c00c12e 	bgeu	r19,r16,e7c4 <__divdf3+0x770>
    e4c0:	1007883a 	mov	r3,r2
    e4c4:	a82a943a 	slli	r21,r21,16
    e4c8:	b828d43a 	srli	r20,r23,16
    e4cc:	b9ffffcc 	andi	r7,r23,65535
    e4d0:	a8eab03a 	or	r21,r21,r3
    e4d4:	a804d43a 	srli	r2,r21,16
    e4d8:	a93fffcc 	andi	r4,r21,65535
    e4dc:	21cb383a 	mul	r5,r4,r7
    e4e0:	11d3383a 	mul	r9,r2,r7
    e4e4:	a109383a 	mul	r4,r20,r4
    e4e8:	2806d43a 	srli	r3,r5,16
    e4ec:	9a27c83a 	sub	r19,r19,r8
    e4f0:	2249883a 	add	r4,r4,r9
    e4f4:	1907883a 	add	r3,r3,r4
    e4f8:	1509383a 	mul	r4,r2,r20
    e4fc:	1a40022e 	bgeu	r3,r9,e508 <__divdf3+0x4b4>
    e500:	00800074 	movhi	r2,1
    e504:	2089883a 	add	r4,r4,r2
    e508:	1804d43a 	srli	r2,r3,16
    e50c:	1806943a 	slli	r3,r3,16
    e510:	297fffcc 	andi	r5,r5,65535
    e514:	1105883a 	add	r2,r2,r4
    e518:	1947883a 	add	r3,r3,r5
    e51c:	98806236 	bltu	r19,r2,e6a8 <__divdf3+0x654>
    e520:	9880b026 	beq	r19,r2,e7e4 <__divdf3+0x790>
    e524:	9885c83a 	sub	r2,r19,r2
    e528:	30c7c83a 	sub	r3,r6,r3
    e52c:	30e7803a 	cmpltu	r19,r6,r3
    e530:	d9c00115 	stw	r7,4(sp)
    e534:	d8c00015 	stw	r3,0(sp)
    e538:	14e7c83a 	sub	r19,r2,r19
    e53c:	8980ffc4 	addi	r6,r17,1023
    e540:	84c0af26 	beq	r16,r19,e800 <__divdf3+0x7ac>
    e544:	9809883a 	mov	r4,r19
    e548:	b00b883a 	mov	r5,r22
    e54c:	d9800315 	stw	r6,12(sp)
    e550:	000d6d80 	call	d6d8 <__udivsi3>
    e554:	9809883a 	mov	r4,r19
    e558:	b00b883a 	mov	r5,r22
    e55c:	d8800215 	stw	r2,8(sp)
    e560:	000d73c0 	call	d73c <__umodsi3>
    e564:	d8c00017 	ldw	r3,0(sp)
    e568:	da000217 	ldw	r8,8(sp)
    e56c:	1008943a 	slli	r4,r2,16
    e570:	1804d43a 	srli	r2,r3,16
    e574:	e227383a 	mul	r19,fp,r8
    e578:	d9800317 	ldw	r6,12(sp)
    e57c:	1104b03a 	or	r2,r2,r4
    e580:	d9c00117 	ldw	r7,4(sp)
    e584:	14c0062e 	bgeu	r2,r19,e5a0 <__divdf3+0x54c>
    e588:	1405883a 	add	r2,r2,r16
    e58c:	413fffc4 	addi	r4,r8,-1
    e590:	1400a236 	bltu	r2,r16,e81c <__divdf3+0x7c8>
    e594:	14c0a12e 	bgeu	r2,r19,e81c <__divdf3+0x7c8>
    e598:	423fff84 	addi	r8,r8,-2
    e59c:	1405883a 	add	r2,r2,r16
    e5a0:	14e7c83a 	sub	r19,r2,r19
    e5a4:	b00b883a 	mov	r5,r22
    e5a8:	9809883a 	mov	r4,r19
    e5ac:	d9800415 	stw	r6,16(sp)
    e5b0:	d8c00315 	stw	r3,12(sp)
    e5b4:	d9c00215 	stw	r7,8(sp)
    e5b8:	da000115 	stw	r8,4(sp)
    e5bc:	000d6d80 	call	d6d8 <__udivsi3>
    e5c0:	b00b883a 	mov	r5,r22
    e5c4:	9809883a 	mov	r4,r19
    e5c8:	d8800015 	stw	r2,0(sp)
    e5cc:	000d73c0 	call	d73c <__umodsi3>
    e5d0:	da400017 	ldw	r9,0(sp)
    e5d4:	d8c00317 	ldw	r3,12(sp)
    e5d8:	1004943a 	slli	r2,r2,16
    e5dc:	e279383a 	mul	fp,fp,r9
    e5e0:	18ffffcc 	andi	r3,r3,65535
    e5e4:	1886b03a 	or	r3,r3,r2
    e5e8:	da000117 	ldw	r8,4(sp)
    e5ec:	d9c00217 	ldw	r7,8(sp)
    e5f0:	d9800417 	ldw	r6,16(sp)
    e5f4:	1f00062e 	bgeu	r3,fp,e610 <__divdf3+0x5bc>
    e5f8:	1c07883a 	add	r3,r3,r16
    e5fc:	48bfffc4 	addi	r2,r9,-1
    e600:	1c008436 	bltu	r3,r16,e814 <__divdf3+0x7c0>
    e604:	1f00832e 	bgeu	r3,fp,e814 <__divdf3+0x7c0>
    e608:	4a7fff84 	addi	r9,r9,-2
    e60c:	1c07883a 	add	r3,r3,r16
    e610:	400a943a 	slli	r5,r8,16
    e614:	1f07c83a 	sub	r3,r3,fp
    e618:	2a4ab03a 	or	r5,r5,r9
    e61c:	2812d43a 	srli	r9,r5,16
    e620:	293fffcc 	andi	r4,r5,65535
    e624:	3911383a 	mul	r8,r7,r4
    e628:	a109383a 	mul	r4,r20,r4
    e62c:	49cf383a 	mul	r7,r9,r7
    e630:	4004d43a 	srli	r2,r8,16
    e634:	a269383a 	mul	r20,r20,r9
    e638:	21c9883a 	add	r4,r4,r7
    e63c:	1105883a 	add	r2,r2,r4
    e640:	11c0022e 	bgeu	r2,r7,e64c <__divdf3+0x5f8>
    e644:	01000074 	movhi	r4,1
    e648:	a129883a 	add	r20,r20,r4
    e64c:	1008d43a 	srli	r4,r2,16
    e650:	1004943a 	slli	r2,r2,16
    e654:	423fffcc 	andi	r8,r8,65535
    e658:	2529883a 	add	r20,r4,r20
    e65c:	1205883a 	add	r2,r2,r8
    e660:	1d000a36 	bltu	r3,r20,e68c <__divdf3+0x638>
    e664:	1d000826 	beq	r3,r20,e688 <__divdf3+0x634>
    e668:	29400054 	ori	r5,r5,1
    e66c:	003ed506 	br	e1c4 <__alt_mem_mcu_subsystem_ram_0+0x77fee1c4>
    e670:	00800434 	movhi	r2,16
    e674:	84000234 	orhi	r16,r16,8
    e678:	10bfffc4 	addi	r2,r2,-1
    e67c:	80a0703a 	and	r16,r16,r2
    e680:	a025883a 	mov	r18,r20
    e684:	003f5106 	br	e3cc <__alt_mem_mcu_subsystem_ram_0+0x77fee3cc>
    e688:	103ece26 	beq	r2,zero,e1c4 <__alt_mem_mcu_subsystem_ram_0+0x77fee1c4>
    e68c:	80c7883a 	add	r3,r16,r3
    e690:	293fffc4 	addi	r4,r5,-1
    e694:	1c005636 	bltu	r3,r16,e7f0 <__divdf3+0x79c>
    e698:	1d006f36 	bltu	r3,r20,e858 <__divdf3+0x804>
    e69c:	1d009c26 	beq	r3,r20,e910 <__divdf3+0x8bc>
    e6a0:	200b883a 	mov	r5,r4
    e6a4:	003ff006 	br	e668 <__alt_mem_mcu_subsystem_ram_0+0x77fee668>
    e6a8:	35cd883a 	add	r6,r6,r23
    e6ac:	35c9803a 	cmpltu	r4,r6,r23
    e6b0:	2409883a 	add	r4,r4,r16
    e6b4:	24e7883a 	add	r19,r4,r19
    e6b8:	a93fffc4 	addi	r4,r21,-1
    e6bc:	84c0232e 	bgeu	r16,r19,e74c <__divdf3+0x6f8>
    e6c0:	98805f36 	bltu	r19,r2,e840 <__divdf3+0x7ec>
    e6c4:	14c08f26 	beq	r2,r19,e904 <__divdf3+0x8b0>
    e6c8:	9885c83a 	sub	r2,r19,r2
    e6cc:	202b883a 	mov	r21,r4
    e6d0:	003f9506 	br	e528 <__alt_mem_mcu_subsystem_ram_0+0x77fee528>
    e6d4:	997f4c36 	bltu	r19,r5,e408 <__alt_mem_mcu_subsystem_ram_0+0x77fee408>
    e6d8:	800697fa 	slli	r3,r16,31
    e6dc:	9804d07a 	srli	r2,r19,1
    e6e0:	980c97fa 	slli	r6,r19,31
    e6e4:	8028d07a 	srli	r20,r16,1
    e6e8:	18a6b03a 	or	r19,r3,r2
    e6ec:	003f4906 	br	e414 <__alt_mem_mcu_subsystem_ram_0+0x77fee414>
    e6f0:	157ff604 	addi	r21,r2,-40
    e6f4:	356a983a 	sll	r21,r6,r21
    e6f8:	000b883a 	mov	r5,zero
    e6fc:	003f1906 	br	e364 <__alt_mem_mcu_subsystem_ram_0+0x77fee364>
    e700:	3009883a 	mov	r4,r6
    e704:	da000215 	stw	r8,8(sp)
    e708:	da400115 	stw	r9,4(sp)
    e70c:	d9800015 	stw	r6,0(sp)
    e710:	000facc0 	call	facc <__clzsi2>
    e714:	10800804 	addi	r2,r2,32
    e718:	da000217 	ldw	r8,8(sp)
    e71c:	da400117 	ldw	r9,4(sp)
    e720:	d9800017 	ldw	r6,0(sp)
    e724:	003f0506 	br	e33c <__alt_mem_mcu_subsystem_ram_0+0x77fee33c>
    e728:	143ff604 	addi	r16,r2,-40
    e72c:	ac20983a 	sll	r16,r21,r16
    e730:	0027883a 	mov	r19,zero
    e734:	003eea06 	br	e2e0 <__alt_mem_mcu_subsystem_ram_0+0x77fee2e0>
    e738:	000facc0 	call	facc <__clzsi2>
    e73c:	10800804 	addi	r2,r2,32
    e740:	d9c00117 	ldw	r7,4(sp)
    e744:	d9800017 	ldw	r6,0(sp)
    e748:	003edb06 	br	e2b8 <__alt_mem_mcu_subsystem_ram_0+0x77fee2b8>
    e74c:	84ffde1e 	bne	r16,r19,e6c8 <__alt_mem_mcu_subsystem_ram_0+0x77fee6c8>
    e750:	35ffdb2e 	bgeu	r6,r23,e6c0 <__alt_mem_mcu_subsystem_ram_0+0x77fee6c0>
    e754:	8085c83a 	sub	r2,r16,r2
    e758:	202b883a 	mov	r21,r4
    e75c:	003f7206 	br	e528 <__alt_mem_mcu_subsystem_ram_0+0x77fee528>
    e760:	80800808 	cmpgei	r2,r16,32
    e764:	1000441e 	bne	r2,zero,e878 <__divdf3+0x824>
    e768:	8c410784 	addi	r17,r17,1054
    e76c:	2c06d83a 	srl	r3,r5,r16
    e770:	ac44983a 	sll	r2,r21,r17
    e774:	2c4a983a 	sll	r5,r5,r17
    e778:	ac2ad83a 	srl	r21,r21,r16
    e77c:	10c4b03a 	or	r2,r2,r3
    e780:	280ac03a 	cmpne	r5,r5,zero
    e784:	1144b03a 	or	r2,r2,r5
    e788:	10c001cc 	andi	r3,r2,7
    e78c:	18000726 	beq	r3,zero,e7ac <__divdf3+0x758>
    e790:	10c003cc 	andi	r3,r2,15
    e794:	18c00120 	cmpeqi	r3,r3,4
    e798:	1800041e 	bne	r3,zero,e7ac <__divdf3+0x758>
    e79c:	100b883a 	mov	r5,r2
    e7a0:	28800104 	addi	r2,r5,4
    e7a4:	114b803a 	cmpltu	r5,r2,r5
    e7a8:	a96b883a 	add	r21,r21,r5
    e7ac:	a8c0202c 	andhi	r3,r21,128
    e7b0:	18004f26 	beq	r3,zero,e8f0 <__divdf3+0x89c>
    e7b4:	01000044 	movi	r4,1
    e7b8:	0021883a 	mov	r16,zero
    e7bc:	0027883a 	mov	r19,zero
    e7c0:	003e9506 	br	e218 <__alt_mem_mcu_subsystem_ram_0+0x77fee218>
    e7c4:	9a3f3e2e 	bgeu	r19,r8,e4c0 <__alt_mem_mcu_subsystem_ram_0+0x77fee4c0>
    e7c8:	18ffff84 	addi	r3,r3,-2
    e7cc:	9c27883a 	add	r19,r19,r16
    e7d0:	003f3c06 	br	e4c4 <__alt_mem_mcu_subsystem_ram_0+0x77fee4c4>
    e7d4:	153f262e 	bgeu	r2,r20,e470 <__alt_mem_mcu_subsystem_ram_0+0x77fee470>
    e7d8:	ad7fff84 	addi	r21,r21,-2
    e7dc:	1405883a 	add	r2,r2,r16
    e7e0:	003f2406 	br	e474 <__alt_mem_mcu_subsystem_ram_0+0x77fee474>
    e7e4:	30ffb036 	bltu	r6,r3,e6a8 <__alt_mem_mcu_subsystem_ram_0+0x77fee6a8>
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	003f4e06 	br	e528 <__alt_mem_mcu_subsystem_ram_0+0x77fee528>
    e7f0:	200b883a 	mov	r5,r4
    e7f4:	1d3f9c1e 	bne	r3,r20,e668 <__alt_mem_mcu_subsystem_ram_0+0x77fee668>
    e7f8:	15ff9b1e 	bne	r2,r23,e668 <__alt_mem_mcu_subsystem_ram_0+0x77fee668>
    e7fc:	003e7106 	br	e1c4 <__alt_mem_mcu_subsystem_ram_0+0x77fee1c4>
    e800:	01be9a0e 	bge	zero,r6,e26c <__alt_mem_mcu_subsystem_ram_0+0x77fee26c>
    e804:	000b883a 	mov	r5,zero
    e808:	00800044 	movi	r2,1
    e80c:	a8ab883a 	add	r21,r21,r2
    e810:	003e7006 	br	e1d4 <__alt_mem_mcu_subsystem_ram_0+0x77fee1d4>
    e814:	1013883a 	mov	r9,r2
    e818:	003f7d06 	br	e610 <__alt_mem_mcu_subsystem_ram_0+0x77fee610>
    e81c:	2011883a 	mov	r8,r4
    e820:	003f5f06 	br	e5a0 <__alt_mem_mcu_subsystem_ram_0+0x77fee5a0>
    e824:	288003cc 	andi	r2,r5,15
    e828:	10800118 	cmpnei	r2,r2,4
    e82c:	103e6826 	beq	r2,zero,e1d0 <__alt_mem_mcu_subsystem_ram_0+0x77fee1d0>
    e830:	2cc00104 	addi	r19,r5,4
    e834:	9945803a 	cmpltu	r2,r19,r5
    e838:	980ad0fa 	srli	r5,r19,3
    e83c:	003ff306 	br	e80c <__alt_mem_mcu_subsystem_ram_0+0x77fee80c>
    e840:	35cd883a 	add	r6,r6,r23
    e844:	35c9803a 	cmpltu	r4,r6,r23
    e848:	2409883a 	add	r4,r4,r16
    e84c:	24e7883a 	add	r19,r4,r19
    e850:	ad7fff84 	addi	r21,r21,-2
    e854:	003f3306 	br	e524 <__alt_mem_mcu_subsystem_ram_0+0x77fee524>
    e858:	bdc9883a 	add	r4,r23,r23
    e85c:	25ef803a 	cmpltu	r23,r4,r23
    e860:	bc21883a 	add	r16,r23,r16
    e864:	1c07883a 	add	r3,r3,r16
    e868:	297fff84 	addi	r5,r5,-2
    e86c:	202f883a 	mov	r23,r4
    e870:	1d3fe126 	beq	r3,r20,e7f8 <__alt_mem_mcu_subsystem_ram_0+0x77fee7f8>
    e874:	003f7c06 	br	e668 <__alt_mem_mcu_subsystem_ram_0+0x77fee668>
    e878:	013ff844 	movi	r4,-31
    e87c:	2189c83a 	sub	r4,r4,r6
    e880:	84000820 	cmpeqi	r16,r16,32
    e884:	a908d83a 	srl	r4,r21,r4
    e888:	8000031e 	bne	r16,zero,e898 <__divdf3+0x844>
    e88c:	8c010f84 	addi	r16,r17,1086
    e890:	ac20983a 	sll	r16,r21,r16
    e894:	2c0ab03a 	or	r5,r5,r16
    e898:	280ac03a 	cmpne	r5,r5,zero
    e89c:	290ab03a 	or	r5,r5,r4
    e8a0:	2d4001cc 	andi	r21,r5,7
    e8a4:	a8000b1e 	bne	r21,zero,e8d4 <__divdf3+0x880>
    e8a8:	0021883a 	mov	r16,zero
    e8ac:	280ad0fa 	srli	r5,r5,3
    e8b0:	0009883a 	mov	r4,zero
    e8b4:	2d66b03a 	or	r19,r5,r21
    e8b8:	003e5706 	br	e218 <__alt_mem_mcu_subsystem_ram_0+0x77fee218>
    e8bc:	00800434 	movhi	r2,16
    e8c0:	ac000234 	orhi	r16,r21,8
    e8c4:	10bfffc4 	addi	r2,r2,-1
    e8c8:	80a0703a 	and	r16,r16,r2
    e8cc:	2827883a 	mov	r19,r5
    e8d0:	003ebe06 	br	e3cc <__alt_mem_mcu_subsystem_ram_0+0x77fee3cc>
    e8d4:	288003cc 	andi	r2,r5,15
    e8d8:	10800118 	cmpnei	r2,r2,4
    e8dc:	10000226 	beq	r2,zero,e8e8 <__divdf3+0x894>
    e8e0:	002b883a 	mov	r21,zero
    e8e4:	003fae06 	br	e7a0 <__alt_mem_mcu_subsystem_ram_0+0x77fee7a0>
    e8e8:	2805883a 	mov	r2,r5
    e8ec:	002b883a 	mov	r21,zero
    e8f0:	a820927a 	slli	r16,r21,9
    e8f4:	100b883a 	mov	r5,r2
    e8f8:	a82a977a 	slli	r21,r21,29
    e8fc:	8020d33a 	srli	r16,r16,12
    e900:	003fea06 	br	e8ac <__alt_mem_mcu_subsystem_ram_0+0x77fee8ac>
    e904:	30ffce36 	bltu	r6,r3,e840 <__alt_mem_mcu_subsystem_ram_0+0x77fee840>
    e908:	202b883a 	mov	r21,r4
    e90c:	003fb606 	br	e7e8 <__alt_mem_mcu_subsystem_ram_0+0x77fee7e8>
    e910:	b8bfd136 	bltu	r23,r2,e858 <__alt_mem_mcu_subsystem_ram_0+0x77fee858>
    e914:	200b883a 	mov	r5,r4
    e918:	15ff531e 	bne	r2,r23,e668 <__alt_mem_mcu_subsystem_ram_0+0x77fee668>
    e91c:	003e2906 	br	e1c4 <__alt_mem_mcu_subsystem_ram_0+0x77fee1c4>

0000e920 <__gedf2>:
    e920:	2810d53a 	srli	r8,r5,20
    e924:	3806d53a 	srli	r3,r7,20
    e928:	00800434 	movhi	r2,16
    e92c:	4201ffcc 	andi	r8,r8,2047
    e930:	10bfffc4 	addi	r2,r2,-1
    e934:	4241ffd8 	cmpnei	r9,r8,2047
    e938:	2894703a 	and	r10,r5,r2
    e93c:	18c1ffcc 	andi	r3,r3,2047
    e940:	3884703a 	and	r2,r7,r2
    e944:	280ad7fa 	srli	r5,r5,31
    e948:	380ed7fa 	srli	r7,r7,31
    e94c:	48000e26 	beq	r9,zero,e988 <__gedf2+0x68>
    e950:	1a41ffd8 	cmpnei	r9,r3,2047
    e954:	48000826 	beq	r9,zero,e978 <__gedf2+0x58>
    e958:	40000f1e 	bne	r8,zero,e998 <__gedf2+0x78>
    e95c:	5112b03a 	or	r9,r10,r4
    e960:	1800131e 	bne	r3,zero,e9b0 <__gedf2+0x90>
    e964:	1196b03a 	or	r11,r2,r6
    e968:	5800111e 	bne	r11,zero,e9b0 <__gedf2+0x90>
    e96c:	48000d1e 	bne	r9,zero,e9a4 <__gedf2+0x84>
    e970:	0005883a 	mov	r2,zero
    e974:	f800283a 	ret
    e978:	1192b03a 	or	r9,r2,r6
    e97c:	483ff626 	beq	r9,zero,e958 <__alt_mem_mcu_subsystem_ram_0+0x77fee958>
    e980:	00bfff84 	movi	r2,-2
    e984:	f800283a 	ret
    e988:	5112b03a 	or	r9,r10,r4
    e98c:	483ffc1e 	bne	r9,zero,e980 <__alt_mem_mcu_subsystem_ram_0+0x77fee980>
    e990:	1a41ffd8 	cmpnei	r9,r3,2047
    e994:	48001226 	beq	r9,zero,e9e0 <__gedf2+0xc0>
    e998:	1800131e 	bne	r3,zero,e9e8 <__gedf2+0xc8>
    e99c:	1192b03a 	or	r9,r2,r6
    e9a0:	4800111e 	bne	r9,zero,e9e8 <__gedf2+0xc8>
    e9a4:	00800044 	movi	r2,1
    e9a8:	2800081e 	bne	r5,zero,e9cc <__gedf2+0xac>
    e9ac:	f800283a 	ret
    e9b0:	48000826 	beq	r9,zero,e9d4 <__gedf2+0xb4>
    e9b4:	29fffb1e 	bne	r5,r7,e9a4 <__alt_mem_mcu_subsystem_ram_0+0x77fee9a4>
    e9b8:	40c00316 	blt	r8,r3,e9c8 <__gedf2+0xa8>
    e9bc:	12bff936 	bltu	r2,r10,e9a4 <__alt_mem_mcu_subsystem_ram_0+0x77fee9a4>
    e9c0:	50800c26 	beq	r10,r2,e9f4 <__gedf2+0xd4>
    e9c4:	50bfea2e 	bgeu	r10,r2,e970 <__alt_mem_mcu_subsystem_ram_0+0x77fee970>
    e9c8:	2800031e 	bne	r5,zero,e9d8 <__gedf2+0xb8>
    e9cc:	00bfffc4 	movi	r2,-1
    e9d0:	f800283a 	ret
    e9d4:	383ffd26 	beq	r7,zero,e9cc <__alt_mem_mcu_subsystem_ram_0+0x77fee9cc>
    e9d8:	00800044 	movi	r2,1
    e9dc:	f800283a 	ret
    e9e0:	1192b03a 	or	r9,r2,r6
    e9e4:	483fe61e 	bne	r9,zero,e980 <__alt_mem_mcu_subsystem_ram_0+0x77fee980>
    e9e8:	29ffee1e 	bne	r5,r7,e9a4 <__alt_mem_mcu_subsystem_ram_0+0x77fee9a4>
    e9ec:	1a3fed16 	blt	r3,r8,e9a4 <__alt_mem_mcu_subsystem_ram_0+0x77fee9a4>
    e9f0:	003ff106 	br	e9b8 <__alt_mem_mcu_subsystem_ram_0+0x77fee9b8>
    e9f4:	313feb36 	bltu	r6,r4,e9a4 <__alt_mem_mcu_subsystem_ram_0+0x77fee9a4>
    e9f8:	21bff336 	bltu	r4,r6,e9c8 <__alt_mem_mcu_subsystem_ram_0+0x77fee9c8>
    e9fc:	003fdc06 	br	e970 <__alt_mem_mcu_subsystem_ram_0+0x77fee970>

0000ea00 <__muldf3>:
    ea00:	defff404 	addi	sp,sp,-48
    ea04:	dc400315 	stw	r17,12(sp)
    ea08:	2822d53a 	srli	r17,r5,20
    ea0c:	dd000615 	stw	r20,24(sp)
    ea10:	2828d7fa 	srli	r20,r5,31
    ea14:	dc800415 	stw	r18,16(sp)
    ea18:	04800434 	movhi	r18,16
    ea1c:	dd400715 	stw	r21,28(sp)
    ea20:	94bfffc4 	addi	r18,r18,-1
    ea24:	dfc00b15 	stw	ra,44(sp)
    ea28:	df000a15 	stw	fp,40(sp)
    ea2c:	ddc00915 	stw	r23,36(sp)
    ea30:	dd800815 	stw	r22,32(sp)
    ea34:	dcc00515 	stw	r19,20(sp)
    ea38:	dc000215 	stw	r16,8(sp)
    ea3c:	8c41ffcc 	andi	r17,r17,2047
    ea40:	2ca4703a 	and	r18,r5,r18
    ea44:	a5403fcc 	andi	r21,r20,255
    ea48:	88006226 	beq	r17,zero,ebd4 <__muldf3+0x1d4>
    ea4c:	8881ffe0 	cmpeqi	r2,r17,2047
    ea50:	2027883a 	mov	r19,r4
    ea54:	1000361e 	bne	r2,zero,eb30 <__muldf3+0x130>
    ea58:	900a90fa 	slli	r5,r18,3
    ea5c:	2020d77a 	srli	r16,r4,29
    ea60:	202690fa 	slli	r19,r4,3
    ea64:	29402034 	orhi	r5,r5,128
    ea68:	8c7f0044 	addi	r17,r17,-1023
    ea6c:	8160b03a 	or	r16,r16,r5
    ea70:	0025883a 	mov	r18,zero
    ea74:	002f883a 	mov	r23,zero
    ea78:	3804d53a 	srli	r2,r7,20
    ea7c:	382cd7fa 	srli	r22,r7,31
    ea80:	01000434 	movhi	r4,16
    ea84:	213fffc4 	addi	r4,r4,-1
    ea88:	1081ffcc 	andi	r2,r2,2047
    ea8c:	3011883a 	mov	r8,r6
    ea90:	390e703a 	and	r7,r7,r4
    ea94:	b7003fcc 	andi	fp,r22,255
    ea98:	10006e26 	beq	r2,zero,ec54 <__muldf3+0x254>
    ea9c:	10c1ffe0 	cmpeqi	r3,r2,2047
    eaa0:	1800651e 	bne	r3,zero,ec38 <__muldf3+0x238>
    eaa4:	380890fa 	slli	r4,r7,3
    eaa8:	3006d77a 	srli	r3,r6,29
    eaac:	301090fa 	slli	r8,r6,3
    eab0:	10bf0044 	addi	r2,r2,-1023
    eab4:	21002034 	orhi	r4,r4,128
    eab8:	1908b03a 	or	r4,r3,r4
    eabc:	88a3883a 	add	r17,r17,r2
    eac0:	0015883a 	mov	r10,zero
    eac4:	a584f03a 	xor	r2,r20,r22
    eac8:	91800428 	cmpgeui	r6,r18,16
    eacc:	100f883a 	mov	r7,r2
    ead0:	8a400044 	addi	r9,r17,1
    ead4:	10803fcc 	andi	r2,r2,255
    ead8:	3000791e 	bne	r6,zero,ecc0 <__muldf3+0x2c0>
    eadc:	900a90ba 	slli	r5,r18,2
    eae0:	00c00074 	movhi	r3,1
    eae4:	28c7883a 	add	r3,r5,r3
    eae8:	18fabc17 	ldw	r3,-5392(r3)
    eaec:	1800683a 	jmp	r3
    eaf0:	0000ecc0 	call	ecc <ad9144_setup+0x428>
    eaf4:	0000eb58 	cmpnei	zero,zero,941
    eaf8:	0000eb58 	cmpnei	zero,zero,941
    eafc:	0000ef34 	movhi	zero,956
    eb00:	0000eb4c 	andi	zero,zero,941
    eb04:	0000eb4c 	andi	zero,zero,941
    eb08:	0000ef08 	cmpgei	zero,zero,956
    eb0c:	0000ef34 	movhi	zero,956
    eb10:	0000eb4c 	andi	zero,zero,941
    eb14:	0000ef08 	cmpgei	zero,zero,956
    eb18:	0000eb4c 	andi	zero,zero,941
    eb1c:	0000ef34 	movhi	zero,956
    eb20:	0000ef20 	cmpeqi	zero,zero,956
    eb24:	0000ef20 	cmpeqi	zero,zero,956
    eb28:	0000ef20 	cmpeqi	zero,zero,956
    eb2c:	0000ef3c 	xorhi	zero,zero,956
    eb30:	9120b03a 	or	r16,r18,r4
    eb34:	8000e71e 	bne	r16,zero,eed4 <__muldf3+0x4d4>
    eb38:	04800204 	movi	r18,8
    eb3c:	0027883a 	mov	r19,zero
    eb40:	0441ffc4 	movi	r17,2047
    eb44:	05c00084 	movi	r23,2
    eb48:	003fcb06 	br	ea78 <__alt_mem_mcu_subsystem_ram_0+0x77feea78>
    eb4c:	8009883a 	mov	r4,r16
    eb50:	9811883a 	mov	r8,r19
    eb54:	b815883a 	mov	r10,r23
    eb58:	50c000a0 	cmpeqi	r3,r10,2
    eb5c:	100f883a 	mov	r7,r2
    eb60:	1800531e 	bne	r3,zero,ecb0 <__muldf3+0x2b0>
    eb64:	508000e0 	cmpeqi	r2,r10,3
    eb68:	1001561e 	bne	r2,zero,f0c4 <__muldf3+0x6c4>
    eb6c:	50800060 	cmpeqi	r2,r10,1
    eb70:	1000b926 	beq	r2,zero,ee58 <__muldf3+0x458>
    eb74:	0007883a 	mov	r3,zero
    eb78:	0021883a 	mov	r16,zero
    eb7c:	0027883a 	mov	r19,zero
    eb80:	38803fcc 	andi	r2,r7,255
    eb84:	01000434 	movhi	r4,16
    eb88:	1806953a 	slli	r3,r3,20
    eb8c:	213fffc4 	addi	r4,r4,-1
    eb90:	100497fa 	slli	r2,r2,31
    eb94:	8120703a 	and	r16,r16,r4
    eb98:	80c6b03a 	or	r3,r16,r3
    eb9c:	1886b03a 	or	r3,r3,r2
    eba0:	9805883a 	mov	r2,r19
    eba4:	dfc00b17 	ldw	ra,44(sp)
    eba8:	df000a17 	ldw	fp,40(sp)
    ebac:	ddc00917 	ldw	r23,36(sp)
    ebb0:	dd800817 	ldw	r22,32(sp)
    ebb4:	dd400717 	ldw	r21,28(sp)
    ebb8:	dd000617 	ldw	r20,24(sp)
    ebbc:	dcc00517 	ldw	r19,20(sp)
    ebc0:	dc800417 	ldw	r18,16(sp)
    ebc4:	dc400317 	ldw	r17,12(sp)
    ebc8:	dc000217 	ldw	r16,8(sp)
    ebcc:	dec00c04 	addi	sp,sp,48
    ebd0:	f800283a 	ret
    ebd4:	9120b03a 	or	r16,r18,r4
    ebd8:	202d883a 	mov	r22,r4
    ebdc:	8000b826 	beq	r16,zero,eec0 <__muldf3+0x4c0>
    ebe0:	d9c00115 	stw	r7,4(sp)
    ebe4:	d9800015 	stw	r6,0(sp)
    ebe8:	90010626 	beq	r18,zero,f004 <__muldf3+0x604>
    ebec:	9009883a 	mov	r4,r18
    ebf0:	000facc0 	call	facc <__clzsi2>
    ebf4:	d9800017 	ldw	r6,0(sp)
    ebf8:	d9c00117 	ldw	r7,4(sp)
    ebfc:	10fffd44 	addi	r3,r2,-11
    ec00:	19000748 	cmpgei	r4,r3,29
    ec04:	2000fb1e 	bne	r4,zero,eff4 <__muldf3+0x5f4>
    ec08:	04000744 	movi	r16,29
    ec0c:	14fffe04 	addi	r19,r2,-8
    ec10:	80e1c83a 	sub	r16,r16,r3
    ec14:	94ca983a 	sll	r5,r18,r19
    ec18:	b420d83a 	srl	r16,r22,r16
    ec1c:	b4e6983a 	sll	r19,r22,r19
    ec20:	8160b03a 	or	r16,r16,r5
    ec24:	047f0344 	movi	r17,-1011
    ec28:	88a3c83a 	sub	r17,r17,r2
    ec2c:	0025883a 	mov	r18,zero
    ec30:	002f883a 	mov	r23,zero
    ec34:	003f9006 	br	ea78 <__alt_mem_mcu_subsystem_ram_0+0x77feea78>
    ec38:	31c8b03a 	or	r4,r6,r7
    ec3c:	8c41ffc4 	addi	r17,r17,2047
    ec40:	2000ad1e 	bne	r4,zero,eef8 <__muldf3+0x4f8>
    ec44:	94800094 	ori	r18,r18,2
    ec48:	0011883a 	mov	r8,zero
    ec4c:	02800084 	movi	r10,2
    ec50:	003f9c06 	br	eac4 <__alt_mem_mcu_subsystem_ram_0+0x77feeac4>
    ec54:	31c8b03a 	or	r4,r6,r7
    ec58:	2000a326 	beq	r4,zero,eee8 <__muldf3+0x4e8>
    ec5c:	3800f226 	beq	r7,zero,f028 <__muldf3+0x628>
    ec60:	3809883a 	mov	r4,r7
    ec64:	d9800115 	stw	r6,4(sp)
    ec68:	d9c00015 	stw	r7,0(sp)
    ec6c:	000facc0 	call	facc <__clzsi2>
    ec70:	d9c00017 	ldw	r7,0(sp)
    ec74:	d9800117 	ldw	r6,4(sp)
    ec78:	113ffd44 	addi	r4,r2,-11
    ec7c:	20c00748 	cmpgei	r3,r4,29
    ec80:	1800e51e 	bne	r3,zero,f018 <__muldf3+0x618>
    ec84:	00c00744 	movi	r3,29
    ec88:	123ffe04 	addi	r8,r2,-8
    ec8c:	1907c83a 	sub	r3,r3,r4
    ec90:	30c6d83a 	srl	r3,r6,r3
    ec94:	3a08983a 	sll	r4,r7,r8
    ec98:	3210983a 	sll	r8,r6,r8
    ec9c:	1908b03a 	or	r4,r3,r4
    eca0:	88a3c83a 	sub	r17,r17,r2
    eca4:	8c7f0344 	addi	r17,r17,-1011
    eca8:	0015883a 	mov	r10,zero
    ecac:	003f8506 	br	eac4 <__alt_mem_mcu_subsystem_ram_0+0x77feeac4>
    ecb0:	00c1ffc4 	movi	r3,2047
    ecb4:	0021883a 	mov	r16,zero
    ecb8:	0027883a 	mov	r19,zero
    ecbc:	003fb006 	br	eb80 <__alt_mem_mcu_subsystem_ram_0+0x77feeb80>
    ecc0:	9806d43a 	srli	r3,r19,16
    ecc4:	4014d43a 	srli	r10,r8,16
    ecc8:	9cffffcc 	andi	r19,r19,65535
    eccc:	423fffcc 	andi	r8,r8,65535
    ecd0:	44cb383a 	mul	r5,r8,r19
    ecd4:	1a0d383a 	mul	r6,r3,r8
    ecd8:	54c5383a 	mul	r2,r10,r19
    ecdc:	2818d43a 	srli	r12,r5,16
    ece0:	1a9d383a 	mul	r14,r3,r10
    ece4:	1185883a 	add	r2,r2,r6
    ece8:	6099883a 	add	r12,r12,r2
    ecec:	6180022e 	bgeu	r12,r6,ecf8 <__muldf3+0x2f8>
    ecf0:	00800074 	movhi	r2,1
    ecf4:	709d883a 	add	r14,r14,r2
    ecf8:	201ed43a 	srli	r15,r4,16
    ecfc:	213fffcc 	andi	r4,r4,65535
    ed00:	24cd383a 	mul	r6,r4,r19
    ed04:	191b383a 	mul	r13,r3,r4
    ed08:	7ce7383a 	mul	r19,r15,r19
    ed0c:	3016d43a 	srli	r11,r6,16
    ed10:	6004943a 	slli	r2,r12,16
    ed14:	9b67883a 	add	r19,r19,r13
    ed18:	297fffcc 	andi	r5,r5,65535
    ed1c:	5ce7883a 	add	r19,r11,r19
    ed20:	6018d43a 	srli	r12,r12,16
    ed24:	1157883a 	add	r11,r2,r5
    ed28:	1bc7383a 	mul	r3,r3,r15
    ed2c:	9b40022e 	bgeu	r19,r13,ed38 <__muldf3+0x338>
    ed30:	00800074 	movhi	r2,1
    ed34:	1887883a 	add	r3,r3,r2
    ed38:	8028d43a 	srli	r20,r16,16
    ed3c:	80bfffcc 	andi	r2,r16,65535
    ed40:	40ab383a 	mul	r21,r8,r2
    ed44:	508b383a 	mul	r5,r10,r2
    ed48:	a211383a 	mul	r8,r20,r8
    ed4c:	981a943a 	slli	r13,r19,16
    ed50:	a824d43a 	srli	r18,r21,16
    ed54:	9826d43a 	srli	r19,r19,16
    ed58:	31bfffcc 	andi	r6,r6,65535
    ed5c:	2a0b883a 	add	r5,r5,r8
    ed60:	699b883a 	add	r13,r13,r6
    ed64:	914b883a 	add	r5,r18,r5
    ed68:	98e7883a 	add	r19,r19,r3
    ed6c:	634d883a 	add	r6,r12,r13
    ed70:	5515383a 	mul	r10,r10,r20
    ed74:	2a00022e 	bgeu	r5,r8,ed80 <__muldf3+0x380>
    ed78:	00c00074 	movhi	r3,1
    ed7c:	50d5883a 	add	r10,r10,r3
    ed80:	2091383a 	mul	r8,r4,r2
    ed84:	a121383a 	mul	r16,r20,r4
    ed88:	7885383a 	mul	r2,r15,r2
    ed8c:	4018d43a 	srli	r12,r8,16
    ed90:	2824d43a 	srli	r18,r5,16
    ed94:	280a943a 	slli	r5,r5,16
    ed98:	1405883a 	add	r2,r2,r16
    ed9c:	ad7fffcc 	andi	r21,r21,65535
    eda0:	6085883a 	add	r2,r12,r2
    eda4:	92a5883a 	add	r18,r18,r10
    eda8:	2d4b883a 	add	r5,r5,r21
    edac:	7d09383a 	mul	r4,r15,r20
    edb0:	1400022e 	bgeu	r2,r16,edbc <__muldf3+0x3bc>
    edb4:	00c00074 	movhi	r3,1
    edb8:	20c9883a 	add	r4,r4,r3
    edbc:	1006943a 	slli	r3,r2,16
    edc0:	423fffcc 	andi	r8,r8,65535
    edc4:	338d883a 	add	r6,r6,r14
    edc8:	1a07883a 	add	r3,r3,r8
    edcc:	335b803a 	cmpltu	r13,r6,r13
    edd0:	1cc7883a 	add	r3,r3,r19
    edd4:	314d883a 	add	r6,r6,r5
    edd8:	1b5d883a 	add	r14,r3,r13
    eddc:	314b803a 	cmpltu	r5,r6,r5
    ede0:	7495883a 	add	r10,r14,r18
    ede4:	1018d43a 	srli	r12,r2,16
    ede8:	5151883a 	add	r8,r10,r5
    edec:	1cc7803a 	cmpltu	r3,r3,r19
    edf0:	7361803a 	cmpltu	r16,r14,r13
    edf4:	1c20b03a 	or	r16,r3,r16
    edf8:	414b803a 	cmpltu	r5,r8,r5
    edfc:	5495803a 	cmpltu	r10,r10,r18
    ee00:	8321883a 	add	r16,r16,r12
    ee04:	514ab03a 	or	r5,r10,r5
    ee08:	8161883a 	add	r16,r16,r5
    ee0c:	8121883a 	add	r16,r16,r4
    ee10:	3004927a 	slli	r2,r6,9
    ee14:	4008d5fa 	srli	r4,r8,23
    ee18:	8020927a 	slli	r16,r16,9
    ee1c:	300cd5fa 	srli	r6,r6,23
    ee20:	12c4b03a 	or	r2,r2,r11
    ee24:	4010927a 	slli	r8,r8,9
    ee28:	8108b03a 	or	r4,r16,r4
    ee2c:	1004c03a 	cmpne	r2,r2,zero
    ee30:	1184b03a 	or	r2,r2,r6
    ee34:	20c0402c 	andhi	r3,r4,256
    ee38:	1210b03a 	or	r8,r2,r8
    ee3c:	18008226 	beq	r3,zero,f048 <__muldf3+0x648>
    ee40:	4006d07a 	srli	r3,r8,1
    ee44:	200a97fa 	slli	r5,r4,31
    ee48:	4080004c 	andi	r2,r8,1
    ee4c:	2008d07a 	srli	r4,r4,1
    ee50:	1884b03a 	or	r2,r3,r2
    ee54:	1150b03a 	or	r8,r2,r5
    ee58:	48c0ffc4 	addi	r3,r9,1023
    ee5c:	00c0420e 	bge	zero,r3,ef68 <__muldf3+0x568>
    ee60:	408001cc 	andi	r2,r8,7
    ee64:	10000726 	beq	r2,zero,ee84 <__muldf3+0x484>
    ee68:	408003cc 	andi	r2,r8,15
    ee6c:	10800120 	cmpeqi	r2,r2,4
    ee70:	1000041e 	bne	r2,zero,ee84 <__muldf3+0x484>
    ee74:	41400104 	addi	r5,r8,4
    ee78:	2a05803a 	cmpltu	r2,r5,r8
    ee7c:	2089883a 	add	r4,r4,r2
    ee80:	2811883a 	mov	r8,r5
    ee84:	2080402c 	andhi	r2,r4,256
    ee88:	10000426 	beq	r2,zero,ee9c <__muldf3+0x49c>
    ee8c:	00bfc034 	movhi	r2,65280
    ee90:	10bfffc4 	addi	r2,r2,-1
    ee94:	2088703a 	and	r4,r4,r2
    ee98:	48c10004 	addi	r3,r9,1024
    ee9c:	1881ffc8 	cmpgei	r2,r3,2047
    eea0:	103f831e 	bne	r2,zero,ecb0 <__alt_mem_mcu_subsystem_ram_0+0x77feecb0>
    eea4:	4004d0fa 	srli	r2,r8,3
    eea8:	2026977a 	slli	r19,r4,29
    eeac:	2020927a 	slli	r16,r4,9
    eeb0:	18c1ffcc 	andi	r3,r3,2047
    eeb4:	98a6b03a 	or	r19,r19,r2
    eeb8:	8020d33a 	srli	r16,r16,12
    eebc:	003f3006 	br	eb80 <__alt_mem_mcu_subsystem_ram_0+0x77feeb80>
    eec0:	04800104 	movi	r18,4
    eec4:	0027883a 	mov	r19,zero
    eec8:	0023883a 	mov	r17,zero
    eecc:	05c00044 	movi	r23,1
    eed0:	003ee906 	br	ea78 <__alt_mem_mcu_subsystem_ram_0+0x77feea78>
    eed4:	9021883a 	mov	r16,r18
    eed8:	0441ffc4 	movi	r17,2047
    eedc:	04800304 	movi	r18,12
    eee0:	05c000c4 	movi	r23,3
    eee4:	003ee406 	br	ea78 <__alt_mem_mcu_subsystem_ram_0+0x77feea78>
    eee8:	94800054 	ori	r18,r18,1
    eeec:	0011883a 	mov	r8,zero
    eef0:	02800044 	movi	r10,1
    eef4:	003ef306 	br	eac4 <__alt_mem_mcu_subsystem_ram_0+0x77feeac4>
    eef8:	948000d4 	ori	r18,r18,3
    eefc:	3809883a 	mov	r4,r7
    ef00:	028000c4 	movi	r10,3
    ef04:	003eef06 	br	eac4 <__alt_mem_mcu_subsystem_ram_0+0x77feeac4>
    ef08:	04000434 	movhi	r16,16
    ef0c:	000f883a 	mov	r7,zero
    ef10:	843fffc4 	addi	r16,r16,-1
    ef14:	04ffffc4 	movi	r19,-1
    ef18:	00c1ffc4 	movi	r3,2047
    ef1c:	003f1806 	br	eb80 <__alt_mem_mcu_subsystem_ram_0+0x77feeb80>
    ef20:	8009883a 	mov	r4,r16
    ef24:	9811883a 	mov	r8,r19
    ef28:	a805883a 	mov	r2,r21
    ef2c:	b815883a 	mov	r10,r23
    ef30:	003f0906 	br	eb58 <__alt_mem_mcu_subsystem_ram_0+0x77feeb58>
    ef34:	e005883a 	mov	r2,fp
    ef38:	003f0706 	br	eb58 <__alt_mem_mcu_subsystem_ram_0+0x77feeb58>
    ef3c:	8080022c 	andhi	r2,r16,8
    ef40:	10002626 	beq	r2,zero,efdc <__muldf3+0x5dc>
    ef44:	2080022c 	andhi	r2,r4,8
    ef48:	1000241e 	bne	r2,zero,efdc <__muldf3+0x5dc>
    ef4c:	00800434 	movhi	r2,16
    ef50:	24000234 	orhi	r16,r4,8
    ef54:	10bfffc4 	addi	r2,r2,-1
    ef58:	80a0703a 	and	r16,r16,r2
    ef5c:	b00f883a 	mov	r7,r22
    ef60:	4027883a 	mov	r19,r8
    ef64:	003fec06 	br	ef18 <__alt_mem_mcu_subsystem_ram_0+0x77feef18>
    ef68:	04000044 	movi	r16,1
    ef6c:	80e1c83a 	sub	r16,r16,r3
    ef70:	80800e48 	cmpgei	r2,r16,57
    ef74:	103eff1e 	bne	r2,zero,eb74 <__alt_mem_mcu_subsystem_ram_0+0x77feeb74>
    ef78:	80800808 	cmpgei	r2,r16,32
    ef7c:	1000341e 	bne	r2,zero,f050 <__muldf3+0x650>
    ef80:	4a410784 	addi	r9,r9,1054
    ef84:	2246983a 	sll	r3,r4,r9
    ef88:	4404d83a 	srl	r2,r8,r16
    ef8c:	4252983a 	sll	r9,r8,r9
    ef90:	2408d83a 	srl	r4,r4,r16
    ef94:	1886b03a 	or	r3,r3,r2
    ef98:	4812c03a 	cmpne	r9,r9,zero
    ef9c:	1a46b03a 	or	r3,r3,r9
    efa0:	188001cc 	andi	r2,r3,7
    efa4:	10000726 	beq	r2,zero,efc4 <__muldf3+0x5c4>
    efa8:	188003cc 	andi	r2,r3,15
    efac:	10800120 	cmpeqi	r2,r2,4
    efb0:	1000041e 	bne	r2,zero,efc4 <__muldf3+0x5c4>
    efb4:	1805883a 	mov	r2,r3
    efb8:	10c00104 	addi	r3,r2,4
    efbc:	1885803a 	cmpltu	r2,r3,r2
    efc0:	2089883a 	add	r4,r4,r2
    efc4:	2080202c 	andhi	r2,r4,128
    efc8:	10003426 	beq	r2,zero,f09c <__muldf3+0x69c>
    efcc:	00c00044 	movi	r3,1
    efd0:	0021883a 	mov	r16,zero
    efd4:	0027883a 	mov	r19,zero
    efd8:	003ee906 	br	eb80 <__alt_mem_mcu_subsystem_ram_0+0x77feeb80>
    efdc:	00800434 	movhi	r2,16
    efe0:	84000234 	orhi	r16,r16,8
    efe4:	10bfffc4 	addi	r2,r2,-1
    efe8:	80a0703a 	and	r16,r16,r2
    efec:	a00f883a 	mov	r7,r20
    eff0:	003fc906 	br	ef18 <__alt_mem_mcu_subsystem_ram_0+0x77feef18>
    eff4:	143ff604 	addi	r16,r2,-40
    eff8:	b420983a 	sll	r16,r22,r16
    effc:	0027883a 	mov	r19,zero
    f000:	003f0806 	br	ec24 <__alt_mem_mcu_subsystem_ram_0+0x77feec24>
    f004:	000facc0 	call	facc <__clzsi2>
    f008:	10800804 	addi	r2,r2,32
    f00c:	d9c00117 	ldw	r7,4(sp)
    f010:	d9800017 	ldw	r6,0(sp)
    f014:	003ef906 	br	ebfc <__alt_mem_mcu_subsystem_ram_0+0x77feebfc>
    f018:	113ff604 	addi	r4,r2,-40
    f01c:	3108983a 	sll	r4,r6,r4
    f020:	0011883a 	mov	r8,zero
    f024:	003f1e06 	br	eca0 <__alt_mem_mcu_subsystem_ram_0+0x77feeca0>
    f028:	3009883a 	mov	r4,r6
    f02c:	d9c00115 	stw	r7,4(sp)
    f030:	d9800015 	stw	r6,0(sp)
    f034:	000facc0 	call	facc <__clzsi2>
    f038:	10800804 	addi	r2,r2,32
    f03c:	d9c00117 	ldw	r7,4(sp)
    f040:	d9800017 	ldw	r6,0(sp)
    f044:	003f0c06 	br	ec78 <__alt_mem_mcu_subsystem_ram_0+0x77feec78>
    f048:	8813883a 	mov	r9,r17
    f04c:	003f8206 	br	ee58 <__alt_mem_mcu_subsystem_ram_0+0x77feee58>
    f050:	00bff844 	movi	r2,-31
    f054:	10c7c83a 	sub	r3,r2,r3
    f058:	84000820 	cmpeqi	r16,r16,32
    f05c:	20c6d83a 	srl	r3,r4,r3
    f060:	8000031e 	bne	r16,zero,f070 <__muldf3+0x670>
    f064:	4a410f84 	addi	r9,r9,1086
    f068:	2260983a 	sll	r16,r4,r9
    f06c:	4410b03a 	or	r8,r8,r16
    f070:	4004c03a 	cmpne	r2,r8,zero
    f074:	10c4b03a 	or	r2,r2,r3
    f078:	110001cc 	andi	r4,r2,7
    f07c:	20000c1e 	bne	r4,zero,f0b0 <__muldf3+0x6b0>
    f080:	0021883a 	mov	r16,zero
    f084:	1004d0fa 	srli	r2,r2,3
    f088:	0007883a 	mov	r3,zero
    f08c:	1126b03a 	or	r19,r2,r4
    f090:	003ebb06 	br	eb80 <__alt_mem_mcu_subsystem_ram_0+0x77feeb80>
    f094:	1007883a 	mov	r3,r2
    f098:	0009883a 	mov	r4,zero
    f09c:	2020927a 	slli	r16,r4,9
    f0a0:	1805883a 	mov	r2,r3
    f0a4:	2008977a 	slli	r4,r4,29
    f0a8:	8020d33a 	srli	r16,r16,12
    f0ac:	003ff506 	br	f084 <__alt_mem_mcu_subsystem_ram_0+0x77fef084>
    f0b0:	10c003cc 	andi	r3,r2,15
    f0b4:	18c00118 	cmpnei	r3,r3,4
    f0b8:	183ff626 	beq	r3,zero,f094 <__alt_mem_mcu_subsystem_ram_0+0x77fef094>
    f0bc:	0009883a 	mov	r4,zero
    f0c0:	003fbd06 	br	efb8 <__alt_mem_mcu_subsystem_ram_0+0x77feefb8>
    f0c4:	00800434 	movhi	r2,16
    f0c8:	24000234 	orhi	r16,r4,8
    f0cc:	10bfffc4 	addi	r2,r2,-1
    f0d0:	80a0703a 	and	r16,r16,r2
    f0d4:	4027883a 	mov	r19,r8
    f0d8:	003f8f06 	br	ef18 <__alt_mem_mcu_subsystem_ram_0+0x77feef18>

0000f0dc <__subdf3>:
    f0dc:	00800434 	movhi	r2,16
    f0e0:	10bfffc4 	addi	r2,r2,-1
    f0e4:	3814d53a 	srli	r10,r7,20
    f0e8:	defffb04 	addi	sp,sp,-20
    f0ec:	2890703a 	and	r8,r5,r2
    f0f0:	3884703a 	and	r2,r7,r2
    f0f4:	2816d7fa 	srli	r11,r5,31
    f0f8:	400690fa 	slli	r3,r8,3
    f0fc:	dcc00315 	stw	r19,12(sp)
    f100:	280ad53a 	srli	r5,r5,20
    f104:	2010d77a 	srli	r8,r4,29
    f108:	100490fa 	slli	r2,r2,3
    f10c:	3026d77a 	srli	r19,r6,29
    f110:	5281ffcc 	andi	r10,r10,2047
    f114:	dc800215 	stw	r18,8(sp)
    f118:	dc000015 	stw	r16,0(sp)
    f11c:	dfc00415 	stw	ra,16(sp)
    f120:	dc400115 	stw	r17,4(sp)
    f124:	5301ffd8 	cmpnei	r12,r10,2047
    f128:	5825883a 	mov	r18,r11
    f12c:	2c01ffcc 	andi	r16,r5,2047
    f130:	5ac03fcc 	andi	r11,r11,255
    f134:	40d0b03a 	or	r8,r8,r3
    f138:	201290fa 	slli	r9,r4,3
    f13c:	380ed7fa 	srli	r7,r7,31
    f140:	9884b03a 	or	r2,r19,r2
    f144:	301a90fa 	slli	r13,r6,3
    f148:	60007326 	beq	r12,zero,f318 <__subdf3+0x23c>
    f14c:	39c0005c 	xori	r7,r7,1
    f150:	8287c83a 	sub	r3,r16,r10
    f154:	3ac05426 	beq	r7,r11,f2a8 <__subdf3+0x1cc>
    f158:	00c0420e 	bge	zero,r3,f264 <__subdf3+0x188>
    f15c:	5000721e 	bne	r10,zero,f328 <__subdf3+0x24c>
    f160:	1348b03a 	or	r4,r2,r13
    f164:	2000d126 	beq	r4,zero,f4ac <__subdf3+0x3d0>
    f168:	193fffc4 	addi	r4,r3,-1
    f16c:	20011a1e 	bne	r4,zero,f5d8 <__subdf3+0x4fc>
    f170:	4b63c83a 	sub	r17,r9,r13
    f174:	4089c83a 	sub	r4,r8,r2
    f178:	4c51803a 	cmpltu	r8,r9,r17
    f17c:	2211c83a 	sub	r8,r4,r8
    f180:	04000044 	movi	r16,1
    f184:	4080202c 	andhi	r2,r8,128
    f188:	1000b526 	beq	r2,zero,f460 <__subdf3+0x384>
    f18c:	04c02034 	movhi	r19,128
    f190:	9cffffc4 	addi	r19,r19,-1
    f194:	44e6703a 	and	r19,r8,r19
    f198:	9800ef26 	beq	r19,zero,f558 <__subdf3+0x47c>
    f19c:	9809883a 	mov	r4,r19
    f1a0:	000facc0 	call	facc <__clzsi2>
    f1a4:	10fffe04 	addi	r3,r2,-8
    f1a8:	19000808 	cmpgei	r4,r3,32
    f1ac:	2000f01e 	bne	r4,zero,f570 <__subdf3+0x494>
    f1b0:	01000804 	movi	r4,32
    f1b4:	20c9c83a 	sub	r4,r4,r3
    f1b8:	8908d83a 	srl	r4,r17,r4
    f1bc:	98e6983a 	sll	r19,r19,r3
    f1c0:	88e2983a 	sll	r17,r17,r3
    f1c4:	24c8b03a 	or	r4,r4,r19
    f1c8:	1c00ed16 	blt	r3,r16,f580 <__subdf3+0x4a4>
    f1cc:	1c21c83a 	sub	r16,r3,r16
    f1d0:	82000044 	addi	r8,r16,1
    f1d4:	40800808 	cmpgei	r2,r8,32
    f1d8:	1001031e 	bne	r2,zero,f5e8 <__subdf3+0x50c>
    f1dc:	00800804 	movi	r2,32
    f1e0:	1205c83a 	sub	r2,r2,r8
    f1e4:	8a06d83a 	srl	r3,r17,r8
    f1e8:	88a2983a 	sll	r17,r17,r2
    f1ec:	2084983a 	sll	r2,r4,r2
    f1f0:	2210d83a 	srl	r8,r4,r8
    f1f4:	8822c03a 	cmpne	r17,r17,zero
    f1f8:	10c4b03a 	or	r2,r2,r3
    f1fc:	1462b03a 	or	r17,r2,r17
    f200:	888001cc 	andi	r2,r17,7
    f204:	0021883a 	mov	r16,zero
    f208:	10000726 	beq	r2,zero,f228 <__subdf3+0x14c>
    f20c:	888003cc 	andi	r2,r17,15
    f210:	10800120 	cmpeqi	r2,r2,4
    f214:	1000041e 	bne	r2,zero,f228 <__subdf3+0x14c>
    f218:	88c00104 	addi	r3,r17,4
    f21c:	1c63803a 	cmpltu	r17,r3,r17
    f220:	4451883a 	add	r8,r8,r17
    f224:	1823883a 	mov	r17,r3
    f228:	4080202c 	andhi	r2,r8,128
    f22c:	10016d26 	beq	r2,zero,f7e4 <__subdf3+0x708>
    f230:	84000044 	addi	r16,r16,1
    f234:	8081ffe0 	cmpeqi	r2,r16,2047
    f238:	8401ffcc 	andi	r16,r16,2047
    f23c:	1000c21e 	bne	r2,zero,f548 <__subdf3+0x46c>
    f240:	013fe034 	movhi	r4,65408
    f244:	213fffc4 	addi	r4,r4,-1
    f248:	4108703a 	and	r4,r8,r4
    f24c:	2004977a 	slli	r2,r4,29
    f250:	8822d0fa 	srli	r17,r17,3
    f254:	2008927a 	slli	r4,r4,9
    f258:	1444b03a 	or	r2,r2,r17
    f25c:	2008d33a 	srli	r4,r4,12
    f260:	00006506 	br	f3f8 <__subdf3+0x31c>
    f264:	1800981e 	bne	r3,zero,f4c8 <__subdf3+0x3ec>
    f268:	80c00044 	addi	r3,r16,1
    f26c:	18c1ffcc 	andi	r3,r3,2047
    f270:	18c00088 	cmpgei	r3,r3,2
    f274:	1800ce26 	beq	r3,zero,f5b0 <__subdf3+0x4d4>
    f278:	4b63c83a 	sub	r17,r9,r13
    f27c:	40a7c83a 	sub	r19,r8,r2
    f280:	4c49803a 	cmpltu	r4,r9,r17
    f284:	9927c83a 	sub	r19,r19,r4
    f288:	98c0202c 	andhi	r3,r19,128
    f28c:	1800e41e 	bne	r3,zero,f620 <__subdf3+0x544>
    f290:	8ccab03a 	or	r5,r17,r19
    f294:	283fc01e 	bne	r5,zero,f198 <__alt_mem_mcu_subsystem_ram_0+0x77fef198>
    f298:	0005883a 	mov	r2,zero
    f29c:	0025883a 	mov	r18,zero
    f2a0:	0021883a 	mov	r16,zero
    f2a4:	00005006 	br	f3e8 <__subdf3+0x30c>
    f2a8:	00c0a00e 	bge	zero,r3,f52c <__subdf3+0x450>
    f2ac:	50006126 	beq	r10,zero,f434 <__subdf3+0x358>
    f2b0:	8101ffe0 	cmpeqi	r4,r16,2047
    f2b4:	2000471e 	bne	r4,zero,f3d4 <__subdf3+0x2f8>
    f2b8:	10802034 	orhi	r2,r2,128
    f2bc:	19000e48 	cmpgei	r4,r3,57
    f2c0:	2000dd26 	beq	r4,zero,f638 <__subdf3+0x55c>
    f2c4:	1344b03a 	or	r2,r2,r13
    f2c8:	1022c03a 	cmpne	r17,r2,zero
    f2cc:	8a63883a 	add	r17,r17,r9
    f2d0:	8a53803a 	cmpltu	r9,r17,r9
    f2d4:	4251883a 	add	r8,r8,r9
    f2d8:	4080202c 	andhi	r2,r8,128
    f2dc:	10006026 	beq	r2,zero,f460 <__subdf3+0x384>
    f2e0:	84000044 	addi	r16,r16,1
    f2e4:	8101ffe0 	cmpeqi	r4,r16,2047
    f2e8:	2000971e 	bne	r4,zero,f548 <__subdf3+0x46c>
    f2ec:	013fe034 	movhi	r4,65408
    f2f0:	213fffc4 	addi	r4,r4,-1
    f2f4:	8804d07a 	srli	r2,r17,1
    f2f8:	4108703a 	and	r4,r8,r4
    f2fc:	200697fa 	slli	r3,r4,31
    f300:	8c40004c 	andi	r17,r17,1
    f304:	1462b03a 	or	r17,r2,r17
    f308:	1c62b03a 	or	r17,r3,r17
    f30c:	2010d07a 	srli	r8,r4,1
    f310:	888001cc 	andi	r2,r17,7
    f314:	003fbc06 	br	f208 <__alt_mem_mcu_subsystem_ram_0+0x77fef208>
    f318:	1346b03a 	or	r3,r2,r13
    f31c:	183f8b26 	beq	r3,zero,f14c <__alt_mem_mcu_subsystem_ram_0+0x77fef14c>
    f320:	39c03fcc 	andi	r7,r7,255
    f324:	003f8a06 	br	f150 <__alt_mem_mcu_subsystem_ram_0+0x77fef150>
    f328:	8101ffe0 	cmpeqi	r4,r16,2047
    f32c:	2000291e 	bne	r4,zero,f3d4 <__subdf3+0x2f8>
    f330:	10802034 	orhi	r2,r2,128
    f334:	19000e48 	cmpgei	r4,r3,57
    f338:	2000971e 	bne	r4,zero,f598 <__subdf3+0x4bc>
    f33c:	19000808 	cmpgei	r4,r3,32
    f340:	2000ca26 	beq	r4,zero,f66c <__subdf3+0x590>
    f344:	1c7ff804 	addi	r17,r3,-32
    f348:	19000820 	cmpeqi	r4,r3,32
    f34c:	144ad83a 	srl	r5,r2,r17
    f350:	2000041e 	bne	r4,zero,f364 <__subdf3+0x288>
    f354:	01001004 	movi	r4,64
    f358:	20c7c83a 	sub	r3,r4,r3
    f35c:	10c4983a 	sll	r2,r2,r3
    f360:	689ab03a 	or	r13,r13,r2
    f364:	6822c03a 	cmpne	r17,r13,zero
    f368:	8962b03a 	or	r17,r17,r5
    f36c:	00008c06 	br	f5a0 <__subdf3+0x4c4>
    f370:	18016b26 	beq	r3,zero,f920 <__subdf3+0x844>
    f374:	135ab03a 	or	r13,r2,r13
    f378:	6800e626 	beq	r13,zero,f714 <__subdf3+0x638>
    f37c:	4006d0fa 	srli	r3,r8,3
    f380:	01480034 	movhi	r5,8192
    f384:	4010977a 	slli	r8,r8,29
    f388:	297fffc4 	addi	r5,r5,-1
    f38c:	2152703a 	and	r9,r4,r5
    f390:	19c0022c 	andhi	r7,r3,8
    f394:	4a12b03a 	or	r9,r9,r8
    f398:	38000726 	beq	r7,zero,f3b8 <__subdf3+0x2dc>
    f39c:	1008d0fa 	srli	r4,r2,3
    f3a0:	21c0022c 	andhi	r7,r4,8
    f3a4:	3800041e 	bne	r7,zero,f3b8 <__subdf3+0x2dc>
    f3a8:	1012977a 	slli	r9,r2,29
    f3ac:	3144703a 	and	r2,r6,r5
    f3b0:	2007883a 	mov	r3,r4
    f3b4:	1252b03a 	or	r9,r2,r9
    f3b8:	4808d77a 	srli	r4,r9,29
    f3bc:	180690fa 	slli	r3,r3,3
    f3c0:	481290fa 	slli	r9,r9,3
    f3c4:	5c80004c 	andi	r18,r11,1
    f3c8:	20d0b03a 	or	r8,r4,r3
    f3cc:	0401ffc4 	movi	r16,2047
    f3d0:	01000044 	movi	r4,1
    f3d4:	4822d0fa 	srli	r17,r9,3
    f3d8:	4004977a 	slli	r2,r8,29
    f3dc:	400ad0fa 	srli	r5,r8,3
    f3e0:	8884b03a 	or	r2,r17,r2
    f3e4:	2000261e 	bne	r4,zero,f480 <__subdf3+0x3a4>
    f3e8:	01000434 	movhi	r4,16
    f3ec:	213fffc4 	addi	r4,r4,-1
    f3f0:	2908703a 	and	r4,r5,r4
    f3f4:	8401ffcc 	andi	r16,r16,2047
    f3f8:	8020953a 	slli	r16,r16,20
    f3fc:	00c00434 	movhi	r3,16
    f400:	94803fcc 	andi	r18,r18,255
    f404:	902497fa 	slli	r18,r18,31
    f408:	18ffffc4 	addi	r3,r3,-1
    f40c:	20c6703a 	and	r3,r4,r3
    f410:	1c06b03a 	or	r3,r3,r16
    f414:	1c86b03a 	or	r3,r3,r18
    f418:	dfc00417 	ldw	ra,16(sp)
    f41c:	dcc00317 	ldw	r19,12(sp)
    f420:	dc800217 	ldw	r18,8(sp)
    f424:	dc400117 	ldw	r17,4(sp)
    f428:	dc000017 	ldw	r16,0(sp)
    f42c:	dec00504 	addi	sp,sp,20
    f430:	f800283a 	ret
    f434:	1348b03a 	or	r4,r2,r13
    f438:	20001c26 	beq	r4,zero,f4ac <__subdf3+0x3d0>
    f43c:	193fffc4 	addi	r4,r3,-1
    f440:	2000b01e 	bne	r4,zero,f704 <__subdf3+0x628>
    f444:	4b63883a 	add	r17,r9,r13
    f448:	4089883a 	add	r4,r8,r2
    f44c:	8a51803a 	cmpltu	r8,r17,r9
    f450:	2211883a 	add	r8,r4,r8
    f454:	4080202c 	andhi	r2,r8,128
    f458:	1001181e 	bne	r2,zero,f8bc <__subdf3+0x7e0>
    f45c:	04000044 	movi	r16,1
    f460:	888001cc 	andi	r2,r17,7
    f464:	103f691e 	bne	r2,zero,f20c <__alt_mem_mcu_subsystem_ram_0+0x77fef20c>
    f468:	4004977a 	slli	r2,r8,29
    f46c:	8822d0fa 	srli	r17,r17,3
    f470:	8101ffe0 	cmpeqi	r4,r16,2047
    f474:	400ad0fa 	srli	r5,r8,3
    f478:	1444b03a 	or	r2,r2,r17
    f47c:	203fda26 	beq	r4,zero,f3e8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3e8>
    f480:	2886b03a 	or	r3,r5,r2
    f484:	18014626 	beq	r3,zero,f9a0 <__subdf3+0x8c4>
    f488:	00c00434 	movhi	r3,16
    f48c:	29000234 	orhi	r4,r5,8
    f490:	18ffffc4 	addi	r3,r3,-1
    f494:	20c8703a 	and	r4,r4,r3
    f498:	0401ffc4 	movi	r16,2047
    f49c:	003fd606 	br	f3f8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3f8>
    f4a0:	5007883a 	mov	r3,r10
    f4a4:	1011883a 	mov	r8,r2
    f4a8:	6813883a 	mov	r9,r13
    f4ac:	4822d0fa 	srli	r17,r9,3
    f4b0:	4004977a 	slli	r2,r8,29
    f4b4:	1821883a 	mov	r16,r3
    f4b8:	1901ffe0 	cmpeqi	r4,r3,2047
    f4bc:	400ad0fa 	srli	r5,r8,3
    f4c0:	8884b03a 	or	r2,r17,r2
    f4c4:	003fc706 	br	f3e4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3e4>
    f4c8:	3825883a 	mov	r18,r7
    f4cc:	80007226 	beq	r16,zero,f698 <__subdf3+0x5bc>
    f4d0:	5101ffe0 	cmpeqi	r4,r10,2047
    f4d4:	2000ad1e 	bne	r4,zero,f78c <__subdf3+0x6b0>
    f4d8:	00c7c83a 	sub	r3,zero,r3
    f4dc:	42002034 	orhi	r8,r8,128
    f4e0:	19000e48 	cmpgei	r4,r3,57
    f4e4:	2000d21e 	bne	r4,zero,f830 <__subdf3+0x754>
    f4e8:	19000808 	cmpgei	r4,r3,32
    f4ec:	2000f81e 	bne	r4,zero,f8d0 <__subdf3+0x7f4>
    f4f0:	01000804 	movi	r4,32
    f4f4:	20c9c83a 	sub	r4,r4,r3
    f4f8:	4122983a 	sll	r17,r8,r4
    f4fc:	48cad83a 	srl	r5,r9,r3
    f500:	4908983a 	sll	r4,r9,r4
    f504:	40c6d83a 	srl	r3,r8,r3
    f508:	8962b03a 	or	r17,r17,r5
    f50c:	2008c03a 	cmpne	r4,r4,zero
    f510:	8922b03a 	or	r17,r17,r4
    f514:	10c5c83a 	sub	r2,r2,r3
    f518:	6c63c83a 	sub	r17,r13,r17
    f51c:	6c49803a 	cmpltu	r4,r13,r17
    f520:	1111c83a 	sub	r8,r2,r4
    f524:	5021883a 	mov	r16,r10
    f528:	003f1606 	br	f184 <__alt_mem_mcu_subsystem_ram_0+0x77fef184>
    f52c:	18007c1e 	bne	r3,zero,f720 <__subdf3+0x644>
    f530:	81400044 	addi	r5,r16,1
    f534:	28c1ffcc 	andi	r3,r5,2047
    f538:	18c00088 	cmpgei	r3,r3,2
    f53c:	18009826 	beq	r3,zero,f7a0 <__subdf3+0x6c4>
    f540:	28c1ffe0 	cmpeqi	r3,r5,2047
    f544:	18005c26 	beq	r3,zero,f6b8 <__subdf3+0x5dc>
    f548:	0401ffc4 	movi	r16,2047
    f54c:	0009883a 	mov	r4,zero
    f550:	0005883a 	mov	r2,zero
    f554:	003fa806 	br	f3f8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3f8>
    f558:	8809883a 	mov	r4,r17
    f55c:	000facc0 	call	facc <__clzsi2>
    f560:	10800804 	addi	r2,r2,32
    f564:	10fffe04 	addi	r3,r2,-8
    f568:	19000808 	cmpgei	r4,r3,32
    f56c:	203f1026 	beq	r4,zero,f1b0 <__alt_mem_mcu_subsystem_ram_0+0x77fef1b0>
    f570:	14fff604 	addi	r19,r2,-40
    f574:	8cc8983a 	sll	r4,r17,r19
    f578:	0023883a 	mov	r17,zero
    f57c:	1c3f130e 	bge	r3,r16,f1cc <__alt_mem_mcu_subsystem_ram_0+0x77fef1cc>
    f580:	023fe034 	movhi	r8,65408
    f584:	423fffc4 	addi	r8,r8,-1
    f588:	80e1c83a 	sub	r16,r16,r3
    f58c:	2210703a 	and	r8,r4,r8
    f590:	888001cc 	andi	r2,r17,7
    f594:	003f1c06 	br	f208 <__alt_mem_mcu_subsystem_ram_0+0x77fef208>
    f598:	1344b03a 	or	r2,r2,r13
    f59c:	1022c03a 	cmpne	r17,r2,zero
    f5a0:	4c63c83a 	sub	r17,r9,r17
    f5a4:	4c53803a 	cmpltu	r9,r9,r17
    f5a8:	4251c83a 	sub	r8,r8,r9
    f5ac:	003ef506 	br	f184 <__alt_mem_mcu_subsystem_ram_0+0x77fef184>
    f5b0:	4246b03a 	or	r3,r8,r9
    f5b4:	134ab03a 	or	r5,r2,r13
    f5b8:	80004a1e 	bne	r16,zero,f6e4 <__subdf3+0x608>
    f5bc:	18009f1e 	bne	r3,zero,f83c <__subdf3+0x760>
    f5c0:	2800ce26 	beq	r5,zero,f8fc <__subdf3+0x820>
    f5c4:	3825883a 	mov	r18,r7
    f5c8:	1011883a 	mov	r8,r2
    f5cc:	6813883a 	mov	r9,r13
    f5d0:	0009883a 	mov	r4,zero
    f5d4:	003f7f06 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f5d8:	18c1ffe0 	cmpeqi	r3,r3,2047
    f5dc:	18004d1e 	bne	r3,zero,f714 <__subdf3+0x638>
    f5e0:	2007883a 	mov	r3,r4
    f5e4:	003f5306 	br	f334 <__alt_mem_mcu_subsystem_ram_0+0x77fef334>
    f5e8:	843ff844 	addi	r16,r16,-31
    f5ec:	40800820 	cmpeqi	r2,r8,32
    f5f0:	2406d83a 	srl	r3,r4,r16
    f5f4:	1000041e 	bne	r2,zero,f608 <__subdf3+0x52c>
    f5f8:	04c01004 	movi	r19,64
    f5fc:	9a11c83a 	sub	r8,r19,r8
    f600:	2226983a 	sll	r19,r4,r8
    f604:	8ce2b03a 	or	r17,r17,r19
    f608:	8822c03a 	cmpne	r17,r17,zero
    f60c:	88e2b03a 	or	r17,r17,r3
    f610:	888001cc 	andi	r2,r17,7
    f614:	0011883a 	mov	r8,zero
    f618:	0021883a 	mov	r16,zero
    f61c:	003f9106 	br	f464 <__alt_mem_mcu_subsystem_ram_0+0x77fef464>
    f620:	6a63c83a 	sub	r17,r13,r9
    f624:	1209c83a 	sub	r4,r2,r8
    f628:	6c67803a 	cmpltu	r19,r13,r17
    f62c:	24e7c83a 	sub	r19,r4,r19
    f630:	3825883a 	mov	r18,r7
    f634:	003ed806 	br	f198 <__alt_mem_mcu_subsystem_ram_0+0x77fef198>
    f638:	19000808 	cmpgei	r4,r3,32
    f63c:	20006c1e 	bne	r4,zero,f7f0 <__subdf3+0x714>
    f640:	01000804 	movi	r4,32
    f644:	20c9c83a 	sub	r4,r4,r3
    f648:	1122983a 	sll	r17,r2,r4
    f64c:	68cad83a 	srl	r5,r13,r3
    f650:	691a983a 	sll	r13,r13,r4
    f654:	10c4d83a 	srl	r2,r2,r3
    f658:	8962b03a 	or	r17,r17,r5
    f65c:	681ac03a 	cmpne	r13,r13,zero
    f660:	8b62b03a 	or	r17,r17,r13
    f664:	4091883a 	add	r8,r8,r2
    f668:	003f1806 	br	f2cc <__alt_mem_mcu_subsystem_ram_0+0x77fef2cc>
    f66c:	01000804 	movi	r4,32
    f670:	20c9c83a 	sub	r4,r4,r3
    f674:	1122983a 	sll	r17,r2,r4
    f678:	68cad83a 	srl	r5,r13,r3
    f67c:	691a983a 	sll	r13,r13,r4
    f680:	10c4d83a 	srl	r2,r2,r3
    f684:	8962b03a 	or	r17,r17,r5
    f688:	681ac03a 	cmpne	r13,r13,zero
    f68c:	8b62b03a 	or	r17,r17,r13
    f690:	4091c83a 	sub	r8,r8,r2
    f694:	003fc206 	br	f5a0 <__alt_mem_mcu_subsystem_ram_0+0x77fef5a0>
    f698:	4248b03a 	or	r4,r8,r9
    f69c:	203f8026 	beq	r4,zero,f4a0 <__alt_mem_mcu_subsystem_ram_0+0x77fef4a0>
    f6a0:	193fffd8 	cmpnei	r4,r3,-1
    f6a4:	20009826 	beq	r4,zero,f908 <__subdf3+0x82c>
    f6a8:	5101ffe0 	cmpeqi	r4,r10,2047
    f6ac:	2000371e 	bne	r4,zero,f78c <__subdf3+0x6b0>
    f6b0:	00c6303a 	nor	r3,zero,r3
    f6b4:	003f8a06 	br	f4e0 <__alt_mem_mcu_subsystem_ram_0+0x77fef4e0>
    f6b8:	4b5b883a 	add	r13,r9,r13
    f6bc:	4089883a 	add	r4,r8,r2
    f6c0:	6a51803a 	cmpltu	r8,r13,r9
    f6c4:	2209883a 	add	r4,r4,r8
    f6c8:	202297fa 	slli	r17,r4,31
    f6cc:	681ad07a 	srli	r13,r13,1
    f6d0:	2010d07a 	srli	r8,r4,1
    f6d4:	2821883a 	mov	r16,r5
    f6d8:	8b62b03a 	or	r17,r17,r13
    f6dc:	888001cc 	andi	r2,r17,7
    f6e0:	003ec906 	br	f208 <__alt_mem_mcu_subsystem_ram_0+0x77fef208>
    f6e4:	1800631e 	bne	r3,zero,f874 <__subdf3+0x798>
    f6e8:	28009226 	beq	r5,zero,f934 <__subdf3+0x858>
    f6ec:	3825883a 	mov	r18,r7
    f6f0:	1011883a 	mov	r8,r2
    f6f4:	6813883a 	mov	r9,r13
    f6f8:	0401ffc4 	movi	r16,2047
    f6fc:	01000044 	movi	r4,1
    f700:	003f3406 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f704:	18c1ffe0 	cmpeqi	r3,r3,2047
    f708:	1800021e 	bne	r3,zero,f714 <__subdf3+0x638>
    f70c:	2007883a 	mov	r3,r4
    f710:	003eea06 	br	f2bc <__alt_mem_mcu_subsystem_ram_0+0x77fef2bc>
    f714:	0401ffc4 	movi	r16,2047
    f718:	01000044 	movi	r4,1
    f71c:	003f2d06 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f720:	80003e1e 	bne	r16,zero,f81c <__subdf3+0x740>
    f724:	4248b03a 	or	r4,r8,r9
    f728:	203f5d26 	beq	r4,zero,f4a0 <__alt_mem_mcu_subsystem_ram_0+0x77fef4a0>
    f72c:	193fffd8 	cmpnei	r4,r3,-1
    f730:	20009026 	beq	r4,zero,f974 <__subdf3+0x898>
    f734:	5101ffe0 	cmpeqi	r4,r10,2047
    f738:	2000141e 	bne	r4,zero,f78c <__subdf3+0x6b0>
    f73c:	00c6303a 	nor	r3,zero,r3
    f740:	19000e48 	cmpgei	r4,r3,57
    f744:	20005f1e 	bne	r4,zero,f8c4 <__subdf3+0x7e8>
    f748:	19000808 	cmpgei	r4,r3,32
    f74c:	20007e1e 	bne	r4,zero,f948 <__subdf3+0x86c>
    f750:	01000804 	movi	r4,32
    f754:	20c9c83a 	sub	r4,r4,r3
    f758:	4122983a 	sll	r17,r8,r4
    f75c:	48cad83a 	srl	r5,r9,r3
    f760:	4908983a 	sll	r4,r9,r4
    f764:	40c6d83a 	srl	r3,r8,r3
    f768:	8962b03a 	or	r17,r17,r5
    f76c:	2008c03a 	cmpne	r4,r4,zero
    f770:	8922b03a 	or	r17,r17,r4
    f774:	10c5883a 	add	r2,r2,r3
    f778:	8b63883a 	add	r17,r17,r13
    f77c:	8b49803a 	cmpltu	r4,r17,r13
    f780:	2091883a 	add	r8,r4,r2
    f784:	5021883a 	mov	r16,r10
    f788:	003ed306 	br	f2d8 <__alt_mem_mcu_subsystem_ram_0+0x77fef2d8>
    f78c:	0401ffc4 	movi	r16,2047
    f790:	1011883a 	mov	r8,r2
    f794:	6813883a 	mov	r9,r13
    f798:	01000044 	movi	r4,1
    f79c:	003f0d06 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f7a0:	4246b03a 	or	r3,r8,r9
    f7a4:	803ef21e 	bne	r16,zero,f370 <__alt_mem_mcu_subsystem_ram_0+0x77fef370>
    f7a8:	183f8726 	beq	r3,zero,f5c8 <__alt_mem_mcu_subsystem_ram_0+0x77fef5c8>
    f7ac:	1346b03a 	or	r3,r2,r13
    f7b0:	183f8726 	beq	r3,zero,f5d0 <__alt_mem_mcu_subsystem_ram_0+0x77fef5d0>
    f7b4:	4b63883a 	add	r17,r9,r13
    f7b8:	4089883a 	add	r4,r8,r2
    f7bc:	8a51803a 	cmpltu	r8,r17,r9
    f7c0:	2211883a 	add	r8,r4,r8
    f7c4:	40c0202c 	andhi	r3,r8,128
    f7c8:	888001cc 	andi	r2,r17,7
    f7cc:	183f2526 	beq	r3,zero,f464 <__alt_mem_mcu_subsystem_ram_0+0x77fef464>
    f7d0:	00ffe034 	movhi	r3,65408
    f7d4:	18ffffc4 	addi	r3,r3,-1
    f7d8:	40d0703a 	and	r8,r8,r3
    f7dc:	04000044 	movi	r16,1
    f7e0:	003e8906 	br	f208 <__alt_mem_mcu_subsystem_ram_0+0x77fef208>
    f7e4:	8813883a 	mov	r9,r17
    f7e8:	8101ffe0 	cmpeqi	r4,r16,2047
    f7ec:	003ef906 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f7f0:	1c7ff804 	addi	r17,r3,-32
    f7f4:	19400820 	cmpeqi	r5,r3,32
    f7f8:	1448d83a 	srl	r4,r2,r17
    f7fc:	2800041e 	bne	r5,zero,f810 <__subdf3+0x734>
    f800:	01401004 	movi	r5,64
    f804:	28c7c83a 	sub	r3,r5,r3
    f808:	10c4983a 	sll	r2,r2,r3
    f80c:	689ab03a 	or	r13,r13,r2
    f810:	6822c03a 	cmpne	r17,r13,zero
    f814:	8922b03a 	or	r17,r17,r4
    f818:	003eac06 	br	f2cc <__alt_mem_mcu_subsystem_ram_0+0x77fef2cc>
    f81c:	5101ffe0 	cmpeqi	r4,r10,2047
    f820:	203fda1e 	bne	r4,zero,f78c <__alt_mem_mcu_subsystem_ram_0+0x77fef78c>
    f824:	00c7c83a 	sub	r3,zero,r3
    f828:	42002034 	orhi	r8,r8,128
    f82c:	003fc406 	br	f740 <__alt_mem_mcu_subsystem_ram_0+0x77fef740>
    f830:	4262b03a 	or	r17,r8,r9
    f834:	8822c03a 	cmpne	r17,r17,zero
    f838:	003f3706 	br	f518 <__alt_mem_mcu_subsystem_ram_0+0x77fef518>
    f83c:	283f6426 	beq	r5,zero,f5d0 <__alt_mem_mcu_subsystem_ram_0+0x77fef5d0>
    f840:	4b63c83a 	sub	r17,r9,r13
    f844:	4c49803a 	cmpltu	r4,r9,r17
    f848:	4087c83a 	sub	r3,r8,r2
    f84c:	1907c83a 	sub	r3,r3,r4
    f850:	1900202c 	andhi	r4,r3,128
    f854:	20004d26 	beq	r4,zero,f98c <__subdf3+0x8b0>
    f858:	6a63c83a 	sub	r17,r13,r9
    f85c:	1209c83a 	sub	r4,r2,r8
    f860:	6c5b803a 	cmpltu	r13,r13,r17
    f864:	2351c83a 	sub	r8,r4,r13
    f868:	888001cc 	andi	r2,r17,7
    f86c:	3825883a 	mov	r18,r7
    f870:	003e6506 	br	f208 <__alt_mem_mcu_subsystem_ram_0+0x77fef208>
    f874:	283fa726 	beq	r5,zero,f714 <__alt_mem_mcu_subsystem_ram_0+0x77fef714>
    f878:	4006d0fa 	srli	r3,r8,3
    f87c:	01480034 	movhi	r5,8192
    f880:	4010977a 	slli	r8,r8,29
    f884:	297fffc4 	addi	r5,r5,-1
    f888:	2152703a 	and	r9,r4,r5
    f88c:	1a80022c 	andhi	r10,r3,8
    f890:	4a12b03a 	or	r9,r9,r8
    f894:	503ec826 	beq	r10,zero,f3b8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3b8>
    f898:	1008d0fa 	srli	r4,r2,3
    f89c:	2200022c 	andhi	r8,r4,8
    f8a0:	403ec51e 	bne	r8,zero,f3b8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3b8>
    f8a4:	1012977a 	slli	r9,r2,29
    f8a8:	3144703a 	and	r2,r6,r5
    f8ac:	2007883a 	mov	r3,r4
    f8b0:	1252b03a 	or	r9,r2,r9
    f8b4:	3817883a 	mov	r11,r7
    f8b8:	003ebf06 	br	f3b8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3b8>
    f8bc:	04000084 	movi	r16,2
    f8c0:	003e8a06 	br	f2ec <__alt_mem_mcu_subsystem_ram_0+0x77fef2ec>
    f8c4:	4262b03a 	or	r17,r8,r9
    f8c8:	8822c03a 	cmpne	r17,r17,zero
    f8cc:	003faa06 	br	f778 <__alt_mem_mcu_subsystem_ram_0+0x77fef778>
    f8d0:	193ff804 	addi	r4,r3,-32
    f8d4:	19400820 	cmpeqi	r5,r3,32
    f8d8:	4108d83a 	srl	r4,r8,r4
    f8dc:	2800041e 	bne	r5,zero,f8f0 <__subdf3+0x814>
    f8e0:	01401004 	movi	r5,64
    f8e4:	28c7c83a 	sub	r3,r5,r3
    f8e8:	40d0983a 	sll	r8,r8,r3
    f8ec:	4a12b03a 	or	r9,r9,r8
    f8f0:	4822c03a 	cmpne	r17,r9,zero
    f8f4:	8922b03a 	or	r17,r17,r4
    f8f8:	003f0706 	br	f518 <__alt_mem_mcu_subsystem_ram_0+0x77fef518>
    f8fc:	0005883a 	mov	r2,zero
    f900:	0025883a 	mov	r18,zero
    f904:	003eb806 	br	f3e8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3e8>
    f908:	6a63c83a 	sub	r17,r13,r9
    f90c:	1209c83a 	sub	r4,r2,r8
    f910:	6c5b803a 	cmpltu	r13,r13,r17
    f914:	2351c83a 	sub	r8,r4,r13
    f918:	5021883a 	mov	r16,r10
    f91c:	003e1906 	br	f184 <__alt_mem_mcu_subsystem_ram_0+0x77fef184>
    f920:	1011883a 	mov	r8,r2
    f924:	6813883a 	mov	r9,r13
    f928:	0401ffc4 	movi	r16,2047
    f92c:	01000044 	movi	r4,1
    f930:	003ea806 	br	f3d4 <__alt_mem_mcu_subsystem_ram_0+0x77fef3d4>
    f934:	01400434 	movhi	r5,16
    f938:	0025883a 	mov	r18,zero
    f93c:	297fffc4 	addi	r5,r5,-1
    f940:	00bfffc4 	movi	r2,-1
    f944:	003ed006 	br	f488 <__alt_mem_mcu_subsystem_ram_0+0x77fef488>
    f948:	193ff804 	addi	r4,r3,-32
    f94c:	19400820 	cmpeqi	r5,r3,32
    f950:	4108d83a 	srl	r4,r8,r4
    f954:	2800041e 	bne	r5,zero,f968 <__subdf3+0x88c>
    f958:	01401004 	movi	r5,64
    f95c:	28c7c83a 	sub	r3,r5,r3
    f960:	40d0983a 	sll	r8,r8,r3
    f964:	4a12b03a 	or	r9,r9,r8
    f968:	4822c03a 	cmpne	r17,r9,zero
    f96c:	8922b03a 	or	r17,r17,r4
    f970:	003f8106 	br	f778 <__alt_mem_mcu_subsystem_ram_0+0x77fef778>
    f974:	4b63883a 	add	r17,r9,r13
    f978:	4089883a 	add	r4,r8,r2
    f97c:	8b5b803a 	cmpltu	r13,r17,r13
    f980:	2351883a 	add	r8,r4,r13
    f984:	5021883a 	mov	r16,r10
    f988:	003e5306 	br	f2d8 <__alt_mem_mcu_subsystem_ram_0+0x77fef2d8>
    f98c:	88cab03a 	or	r5,r17,r3
    f990:	283fda26 	beq	r5,zero,f8fc <__alt_mem_mcu_subsystem_ram_0+0x77fef8fc>
    f994:	888001cc 	andi	r2,r17,7
    f998:	1811883a 	mov	r8,r3
    f99c:	003eb106 	br	f464 <__alt_mem_mcu_subsystem_ram_0+0x77fef464>
    f9a0:	0005883a 	mov	r2,zero
    f9a4:	0401ffc4 	movi	r16,2047
    f9a8:	0009883a 	mov	r4,zero
    f9ac:	003e9206 	br	f3f8 <__alt_mem_mcu_subsystem_ram_0+0x77fef3f8>

0000f9b0 <__fixdfsi>:
    f9b0:	280cd53a 	srli	r6,r5,20
    f9b4:	00c00434 	movhi	r3,16
    f9b8:	18ffffc4 	addi	r3,r3,-1
    f9bc:	3181ffcc 	andi	r6,r6,2047
    f9c0:	31c0ffd0 	cmplti	r7,r6,1023
    f9c4:	28c6703a 	and	r3,r5,r3
    f9c8:	280ad7fa 	srli	r5,r5,31
    f9cc:	3800121e 	bne	r7,zero,fa18 <__fixdfsi+0x68>
    f9d0:	30810790 	cmplti	r2,r6,1054
    f9d4:	10000c26 	beq	r2,zero,fa08 <__fixdfsi+0x58>
    f9d8:	01c10cc4 	movi	r7,1075
    f9dc:	398fc83a 	sub	r7,r7,r6
    f9e0:	38800808 	cmpgei	r2,r7,32
    f9e4:	18c00434 	orhi	r3,r3,16
    f9e8:	10000d1e 	bne	r2,zero,fa20 <__fixdfsi+0x70>
    f9ec:	30befb44 	addi	r2,r6,-1043
    f9f0:	1884983a 	sll	r2,r3,r2
    f9f4:	21c8d83a 	srl	r4,r4,r7
    f9f8:	1104b03a 	or	r2,r2,r4
    f9fc:	28000726 	beq	r5,zero,fa1c <__fixdfsi+0x6c>
    fa00:	0085c83a 	sub	r2,zero,r2
    fa04:	f800283a 	ret
    fa08:	00a00034 	movhi	r2,32768
    fa0c:	10bfffc4 	addi	r2,r2,-1
    fa10:	2885883a 	add	r2,r5,r2
    fa14:	f800283a 	ret
    fa18:	0005883a 	mov	r2,zero
    fa1c:	f800283a 	ret
    fa20:	008104c4 	movi	r2,1043
    fa24:	1185c83a 	sub	r2,r2,r6
    fa28:	1884d83a 	srl	r2,r3,r2
    fa2c:	003ff306 	br	f9fc <__alt_mem_mcu_subsystem_ram_0+0x77fef9fc>

0000fa30 <__floatunsidf>:
    fa30:	defffe04 	addi	sp,sp,-8
    fa34:	dfc00115 	stw	ra,4(sp)
    fa38:	dc000015 	stw	r16,0(sp)
    fa3c:	20001f26 	beq	r4,zero,fabc <__floatunsidf+0x8c>
    fa40:	2021883a 	mov	r16,r4
    fa44:	000facc0 	call	facc <__clzsi2>
    fa48:	01010784 	movi	r4,1054
    fa4c:	2089c83a 	sub	r4,r4,r2
    fa50:	10c002c8 	cmpgei	r3,r2,11
    fa54:	2101ffcc 	andi	r4,r4,2047
    fa58:	18000f26 	beq	r3,zero,fa98 <__floatunsidf+0x68>
    fa5c:	10bffd44 	addi	r2,r2,-11
    fa60:	8086983a 	sll	r3,r16,r2
    fa64:	00800434 	movhi	r2,16
    fa68:	10bfffc4 	addi	r2,r2,-1
    fa6c:	1886703a 	and	r3,r3,r2
    fa70:	0005883a 	mov	r2,zero
    fa74:	2008953a 	slli	r4,r4,20
    fa78:	01400434 	movhi	r5,16
    fa7c:	297fffc4 	addi	r5,r5,-1
    fa80:	1946703a 	and	r3,r3,r5
    fa84:	1906b03a 	or	r3,r3,r4
    fa88:	dfc00117 	ldw	ra,4(sp)
    fa8c:	dc000017 	ldw	r16,0(sp)
    fa90:	dec00204 	addi	sp,sp,8
    fa94:	f800283a 	ret
    fa98:	00c002c4 	movi	r3,11
    fa9c:	1887c83a 	sub	r3,r3,r2
    faa0:	80c6d83a 	srl	r3,r16,r3
    faa4:	01400434 	movhi	r5,16
    faa8:	10800544 	addi	r2,r2,21
    faac:	297fffc4 	addi	r5,r5,-1
    fab0:	8084983a 	sll	r2,r16,r2
    fab4:	1946703a 	and	r3,r3,r5
    fab8:	003fee06 	br	fa74 <__alt_mem_mcu_subsystem_ram_0+0x77fefa74>
    fabc:	0009883a 	mov	r4,zero
    fac0:	0007883a 	mov	r3,zero
    fac4:	0005883a 	mov	r2,zero
    fac8:	003fea06 	br	fa74 <__alt_mem_mcu_subsystem_ram_0+0x77fefa74>

0000facc <__clzsi2>:
    facc:	00bfffd4 	movui	r2,65535
    fad0:	11000436 	bltu	r2,r4,fae4 <__clzsi2+0x18>
    fad4:	20804030 	cmpltui	r2,r4,256
    fad8:	10000b26 	beq	r2,zero,fb08 <__clzsi2+0x3c>
    fadc:	01400804 	movi	r5,32
    fae0:	00000406 	br	faf4 <__clzsi2+0x28>
    fae4:	00804034 	movhi	r2,256
    fae8:	20800a36 	bltu	r4,r2,fb14 <__clzsi2+0x48>
    faec:	2008d63a 	srli	r4,r4,24
    faf0:	01400204 	movi	r5,8
    faf4:	00c000b4 	movhi	r3,2
    faf8:	20c7883a 	add	r3,r4,r3
    fafc:	189a9583 	ldbu	r2,27222(r3)
    fb00:	2885c83a 	sub	r2,r5,r2
    fb04:	f800283a 	ret
    fb08:	2008d23a 	srli	r4,r4,8
    fb0c:	01400604 	movi	r5,24
    fb10:	003ff806 	br	faf4 <__alt_mem_mcu_subsystem_ram_0+0x77fefaf4>
    fb14:	2008d43a 	srli	r4,r4,16
    fb18:	01400404 	movi	r5,16
    fb1c:	003ff506 	br	faf4 <__alt_mem_mcu_subsystem_ram_0+0x77fefaf4>

0000fb20 <calloc>:
    fb20:	008000f4 	movhi	r2,3
    fb24:	280d883a 	mov	r6,r5
    fb28:	200b883a 	mov	r5,r4
    fb2c:	1123b117 	ldw	r4,-28988(r2)
    fb30:	000fb341 	jmpi	fb34 <_calloc_r>

0000fb34 <_calloc_r>:
    fb34:	298b383a 	mul	r5,r5,r6
    fb38:	defffe04 	addi	sp,sp,-8
    fb3c:	dc000015 	stw	r16,0(sp)
    fb40:	dfc00115 	stw	ra,4(sp)
    fb44:	000fdf40 	call	fdf4 <_malloc_r>
    fb48:	1021883a 	mov	r16,r2
    fb4c:	10001626 	beq	r2,zero,fba8 <_calloc_r+0x74>
    fb50:	11bfff17 	ldw	r6,-4(r2)
    fb54:	00bfff04 	movi	r2,-4
    fb58:	308c703a 	and	r6,r6,r2
    fb5c:	31bfff04 	addi	r6,r6,-4
    fb60:	30800968 	cmpgeui	r2,r6,37
    fb64:	10001a1e 	bne	r2,zero,fbd0 <_calloc_r+0x9c>
    fb68:	30800530 	cmpltui	r2,r6,20
    fb6c:	1000131e 	bne	r2,zero,fbbc <_calloc_r+0x88>
    fb70:	80000015 	stw	zero,0(r16)
    fb74:	80000115 	stw	zero,4(r16)
    fb78:	30800728 	cmpgeui	r2,r6,28
    fb7c:	10001826 	beq	r2,zero,fbe0 <_calloc_r+0xac>
    fb80:	80000215 	stw	zero,8(r16)
    fb84:	80000315 	stw	zero,12(r16)
    fb88:	31800920 	cmpeqi	r6,r6,36
    fb8c:	30001626 	beq	r6,zero,fbe8 <_calloc_r+0xb4>
    fb90:	80000415 	stw	zero,16(r16)
    fb94:	80800604 	addi	r2,r16,24
    fb98:	80000515 	stw	zero,20(r16)
    fb9c:	10000015 	stw	zero,0(r2)
    fba0:	10000115 	stw	zero,4(r2)
    fba4:	10000215 	stw	zero,8(r2)
    fba8:	8005883a 	mov	r2,r16
    fbac:	dfc00117 	ldw	ra,4(sp)
    fbb0:	dc000017 	ldw	r16,0(sp)
    fbb4:	dec00204 	addi	sp,sp,8
    fbb8:	f800283a 	ret
    fbbc:	8005883a 	mov	r2,r16
    fbc0:	10000015 	stw	zero,0(r2)
    fbc4:	10000115 	stw	zero,4(r2)
    fbc8:	10000215 	stw	zero,8(r2)
    fbcc:	003ff606 	br	fba8 <__alt_mem_mcu_subsystem_ram_0+0x77fefba8>
    fbd0:	000b883a 	mov	r5,zero
    fbd4:	8009883a 	mov	r4,r16
    fbd8:	00107280 	call	10728 <memset>
    fbdc:	003ff206 	br	fba8 <__alt_mem_mcu_subsystem_ram_0+0x77fefba8>
    fbe0:	80800204 	addi	r2,r16,8
    fbe4:	003ff606 	br	fbc0 <__alt_mem_mcu_subsystem_ram_0+0x77fefbc0>
    fbe8:	80800404 	addi	r2,r16,16
    fbec:	003ff406 	br	fbc0 <__alt_mem_mcu_subsystem_ram_0+0x77fefbc0>

0000fbf0 <_getc_r>:
    fbf0:	defffd04 	addi	sp,sp,-12
    fbf4:	dc000115 	stw	r16,4(sp)
    fbf8:	dfc00215 	stw	ra,8(sp)
    fbfc:	2021883a 	mov	r16,r4
    fc00:	20000226 	beq	r4,zero,fc0c <_getc_r+0x1c>
    fc04:	20800e17 	ldw	r2,56(r4)
    fc08:	10000c26 	beq	r2,zero,fc3c <_getc_r+0x4c>
    fc0c:	28800117 	ldw	r2,4(r5)
    fc10:	10bfffc4 	addi	r2,r2,-1
    fc14:	28800115 	stw	r2,4(r5)
    fc18:	10000f16 	blt	r2,zero,fc58 <_getc_r+0x68>
    fc1c:	28800017 	ldw	r2,0(r5)
    fc20:	10c00044 	addi	r3,r2,1
    fc24:	28c00015 	stw	r3,0(r5)
    fc28:	10800003 	ldbu	r2,0(r2)
    fc2c:	dfc00217 	ldw	ra,8(sp)
    fc30:	dc000117 	ldw	r16,4(sp)
    fc34:	dec00304 	addi	sp,sp,12
    fc38:	f800283a 	ret
    fc3c:	d9400015 	stw	r5,0(sp)
    fc40:	0017b9c0 	call	17b9c <__sinit>
    fc44:	d9400017 	ldw	r5,0(sp)
    fc48:	28800117 	ldw	r2,4(r5)
    fc4c:	10bfffc4 	addi	r2,r2,-1
    fc50:	28800115 	stw	r2,4(r5)
    fc54:	103ff10e 	bge	r2,zero,fc1c <__alt_mem_mcu_subsystem_ram_0+0x77fefc1c>
    fc58:	8009883a 	mov	r4,r16
    fc5c:	dfc00217 	ldw	ra,8(sp)
    fc60:	dc000117 	ldw	r16,4(sp)
    fc64:	dec00304 	addi	sp,sp,12
    fc68:	0010ff81 	jmpi	10ff8 <__srget_r>

0000fc6c <getc>:
    fc6c:	defffd04 	addi	sp,sp,-12
    fc70:	008000f4 	movhi	r2,3
    fc74:	dc400115 	stw	r17,4(sp)
    fc78:	1463b117 	ldw	r17,-28988(r2)
    fc7c:	dc000015 	stw	r16,0(sp)
    fc80:	dfc00215 	stw	ra,8(sp)
    fc84:	2021883a 	mov	r16,r4
    fc88:	88000226 	beq	r17,zero,fc94 <getc+0x28>
    fc8c:	88800e17 	ldw	r2,56(r17)
    fc90:	10000d26 	beq	r2,zero,fcc8 <getc+0x5c>
    fc94:	80800117 	ldw	r2,4(r16)
    fc98:	10bfffc4 	addi	r2,r2,-1
    fc9c:	80800115 	stw	r2,4(r16)
    fca0:	10000f16 	blt	r2,zero,fce0 <getc+0x74>
    fca4:	80800017 	ldw	r2,0(r16)
    fca8:	10c00044 	addi	r3,r2,1
    fcac:	80c00015 	stw	r3,0(r16)
    fcb0:	10800003 	ldbu	r2,0(r2)
    fcb4:	dfc00217 	ldw	ra,8(sp)
    fcb8:	dc400117 	ldw	r17,4(sp)
    fcbc:	dc000017 	ldw	r16,0(sp)
    fcc0:	dec00304 	addi	sp,sp,12
    fcc4:	f800283a 	ret
    fcc8:	8809883a 	mov	r4,r17
    fccc:	0017b9c0 	call	17b9c <__sinit>
    fcd0:	80800117 	ldw	r2,4(r16)
    fcd4:	10bfffc4 	addi	r2,r2,-1
    fcd8:	80800115 	stw	r2,4(r16)
    fcdc:	103ff10e 	bge	r2,zero,fca4 <__alt_mem_mcu_subsystem_ram_0+0x77fefca4>
    fce0:	800b883a 	mov	r5,r16
    fce4:	8809883a 	mov	r4,r17
    fce8:	dfc00217 	ldw	ra,8(sp)
    fcec:	dc400117 	ldw	r17,4(sp)
    fcf0:	dc000017 	ldw	r16,0(sp)
    fcf4:	dec00304 	addi	sp,sp,12
    fcf8:	0010ff81 	jmpi	10ff8 <__srget_r>

0000fcfc <_setlocale_r>:
    fcfc:	30001b26 	beq	r6,zero,fd6c <_setlocale_r+0x70>
    fd00:	014000b4 	movhi	r5,2
    fd04:	defffe04 	addi	sp,sp,-8
    fd08:	295ad704 	addi	r5,r5,27484
    fd0c:	3009883a 	mov	r4,r6
    fd10:	dc000015 	stw	r16,0(sp)
    fd14:	dfc00115 	stw	ra,4(sp)
    fd18:	3021883a 	mov	r16,r6
    fd1c:	001118c0 	call	1118c <strcmp>
    fd20:	1000061e 	bne	r2,zero,fd3c <_setlocale_r+0x40>
    fd24:	008000b4 	movhi	r2,2
    fd28:	109ad604 	addi	r2,r2,27480
    fd2c:	dfc00117 	ldw	ra,4(sp)
    fd30:	dc000017 	ldw	r16,0(sp)
    fd34:	dec00204 	addi	sp,sp,8
    fd38:	f800283a 	ret
    fd3c:	014000b4 	movhi	r5,2
    fd40:	295ad604 	addi	r5,r5,27480
    fd44:	8009883a 	mov	r4,r16
    fd48:	001118c0 	call	1118c <strcmp>
    fd4c:	103ff526 	beq	r2,zero,fd24 <__alt_mem_mcu_subsystem_ram_0+0x77fefd24>
    fd50:	014000b4 	movhi	r5,2
    fd54:	295afb04 	addi	r5,r5,27628
    fd58:	8009883a 	mov	r4,r16
    fd5c:	001118c0 	call	1118c <strcmp>
    fd60:	103ff026 	beq	r2,zero,fd24 <__alt_mem_mcu_subsystem_ram_0+0x77fefd24>
    fd64:	0005883a 	mov	r2,zero
    fd68:	003ff006 	br	fd2c <__alt_mem_mcu_subsystem_ram_0+0x77fefd2c>
    fd6c:	008000b4 	movhi	r2,2
    fd70:	109ad604 	addi	r2,r2,27480
    fd74:	f800283a 	ret

0000fd78 <__locale_mb_cur_max>:
    fd78:	008000f4 	movhi	r2,3
    fd7c:	10a3b117 	ldw	r2,-28988(r2)
    fd80:	10800d17 	ldw	r2,52(r2)
    fd84:	1000021e 	bne	r2,zero,fd90 <__locale_mb_cur_max+0x18>
    fd88:	008000b4 	movhi	r2,2
    fd8c:	109d7c04 	addi	r2,r2,30192
    fd90:	10804a07 	ldb	r2,296(r2)
    fd94:	f800283a 	ret

0000fd98 <__locale_ctype_ptr_l>:
    fd98:	20803b17 	ldw	r2,236(r4)
    fd9c:	f800283a 	ret

0000fda0 <__locale_ctype_ptr>:
    fda0:	008000f4 	movhi	r2,3
    fda4:	10a3b117 	ldw	r2,-28988(r2)
    fda8:	10800d17 	ldw	r2,52(r2)
    fdac:	1000021e 	bne	r2,zero,fdb8 <__locale_ctype_ptr+0x18>
    fdb0:	008000b4 	movhi	r2,2
    fdb4:	109d7c04 	addi	r2,r2,30192
    fdb8:	10803b17 	ldw	r2,236(r2)
    fdbc:	f800283a 	ret

0000fdc0 <setlocale>:
    fdc0:	008000f4 	movhi	r2,3
    fdc4:	280d883a 	mov	r6,r5
    fdc8:	200b883a 	mov	r5,r4
    fdcc:	1123b117 	ldw	r4,-28988(r2)
    fdd0:	000fcfc1 	jmpi	fcfc <_setlocale_r>

0000fdd4 <malloc>:
    fdd4:	008000f4 	movhi	r2,3
    fdd8:	200b883a 	mov	r5,r4
    fddc:	1123b117 	ldw	r4,-28988(r2)
    fde0:	000fdf41 	jmpi	fdf4 <_malloc_r>

0000fde4 <free>:
    fde4:	008000f4 	movhi	r2,3
    fde8:	200b883a 	mov	r5,r4
    fdec:	1123b117 	ldw	r4,-28988(r2)
    fdf0:	0017d001 	jmpi	17d00 <_free_r>

0000fdf4 <_malloc_r>:
    fdf4:	defff804 	addi	sp,sp,-32
    fdf8:	dc400115 	stw	r17,4(sp)
    fdfc:	2c4002c4 	addi	r17,r5,11
    fe00:	dcc00315 	stw	r19,12(sp)
    fe04:	dfc00715 	stw	ra,28(sp)
    fe08:	dd800615 	stw	r22,24(sp)
    fe0c:	dd400515 	stw	r21,20(sp)
    fe10:	dd000415 	stw	r20,16(sp)
    fe14:	dc800215 	stw	r18,8(sp)
    fe18:	dc000015 	stw	r16,0(sp)
    fe1c:	888005e8 	cmpgeui	r2,r17,23
    fe20:	2027883a 	mov	r19,r4
    fe24:	1000241e 	bne	r2,zero,feb8 <_malloc_r+0xc4>
    fe28:	29400468 	cmpgeui	r5,r5,17
    fe2c:	28009e1e 	bne	r5,zero,100a8 <_malloc_r+0x2b4>
    fe30:	00201700 	call	20170 <__malloc_lock>
    fe34:	04400404 	movi	r17,16
    fe38:	00800604 	movi	r2,24
    fe3c:	01800084 	movi	r6,2
    fe40:	048000b4 	movhi	r18,2
    fe44:	949dd704 	addi	r18,r18,30556
    fe48:	9085883a 	add	r2,r18,r2
    fe4c:	14000117 	ldw	r16,4(r2)
    fe50:	10fffe04 	addi	r3,r2,-8
    fe54:	80c10e26 	beq	r16,r3,10290 <_malloc_r+0x49c>
    fe58:	80800117 	ldw	r2,4(r16)
    fe5c:	81000317 	ldw	r4,12(r16)
    fe60:	00ffff04 	movi	r3,-4
    fe64:	10c4703a 	and	r2,r2,r3
    fe68:	81400217 	ldw	r5,8(r16)
    fe6c:	8085883a 	add	r2,r16,r2
    fe70:	10c00117 	ldw	r3,4(r2)
    fe74:	29000315 	stw	r4,12(r5)
    fe78:	21400215 	stw	r5,8(r4)
    fe7c:	18c00054 	ori	r3,r3,1
    fe80:	10c00115 	stw	r3,4(r2)
    fe84:	9809883a 	mov	r4,r19
    fe88:	00201940 	call	20194 <__malloc_unlock>
    fe8c:	80800204 	addi	r2,r16,8
    fe90:	dfc00717 	ldw	ra,28(sp)
    fe94:	dd800617 	ldw	r22,24(sp)
    fe98:	dd400517 	ldw	r21,20(sp)
    fe9c:	dd000417 	ldw	r20,16(sp)
    fea0:	dcc00317 	ldw	r19,12(sp)
    fea4:	dc800217 	ldw	r18,8(sp)
    fea8:	dc400117 	ldw	r17,4(sp)
    feac:	dc000017 	ldw	r16,0(sp)
    feb0:	dec00804 	addi	sp,sp,32
    feb4:	f800283a 	ret
    feb8:	00bffe04 	movi	r2,-8
    febc:	88a2703a 	and	r17,r17,r2
    fec0:	88007916 	blt	r17,zero,100a8 <_malloc_r+0x2b4>
    fec4:	89407836 	bltu	r17,r5,100a8 <_malloc_r+0x2b4>
    fec8:	00201700 	call	20170 <__malloc_lock>
    fecc:	88807e28 	cmpgeui	r2,r17,504
    fed0:	10011326 	beq	r2,zero,10320 <_malloc_r+0x52c>
    fed4:	8804d27a 	srli	r2,r17,9
    fed8:	10007726 	beq	r2,zero,100b8 <_malloc_r+0x2c4>
    fedc:	10c00168 	cmpgeui	r3,r2,5
    fee0:	1800f71e 	bne	r3,zero,102c0 <_malloc_r+0x4cc>
    fee4:	8804d1ba 	srli	r2,r17,6
    fee8:	11800e44 	addi	r6,r2,57
    feec:	300890fa 	slli	r4,r6,3
    fef0:	12000e04 	addi	r8,r2,56
    fef4:	048000b4 	movhi	r18,2
    fef8:	949dd704 	addi	r18,r18,30556
    fefc:	9109883a 	add	r4,r18,r4
    ff00:	24000117 	ldw	r16,4(r4)
    ff04:	213ffe04 	addi	r4,r4,-8
    ff08:	24001126 	beq	r4,r16,ff50 <_malloc_r+0x15c>
    ff0c:	80800117 	ldw	r2,4(r16)
    ff10:	00ffff04 	movi	r3,-4
    ff14:	10c4703a 	and	r2,r2,r3
    ff18:	1447c83a 	sub	r3,r2,r17
    ff1c:	19400408 	cmpgei	r5,r3,16
    ff20:	2800d71e 	bne	r5,zero,10280 <_malloc_r+0x48c>
    ff24:	1800d80e 	bge	r3,zero,10288 <_malloc_r+0x494>
    ff28:	01ffff04 	movi	r7,-4
    ff2c:	00000606 	br	ff48 <_malloc_r+0x154>
    ff30:	80800117 	ldw	r2,4(r16)
    ff34:	11c4703a 	and	r2,r2,r7
    ff38:	1447c83a 	sub	r3,r2,r17
    ff3c:	19400408 	cmpgei	r5,r3,16
    ff40:	2800cf1e 	bne	r5,zero,10280 <_malloc_r+0x48c>
    ff44:	1800d00e 	bge	r3,zero,10288 <_malloc_r+0x494>
    ff48:	84000317 	ldw	r16,12(r16)
    ff4c:	243ff81e 	bne	r4,r16,ff30 <__alt_mem_mcu_subsystem_ram_0+0x77feff30>
    ff50:	94000417 	ldw	r16,16(r18)
    ff54:	014000b4 	movhi	r5,2
    ff58:	295dd904 	addi	r5,r5,30564
    ff5c:	81405a26 	beq	r16,r5,100c8 <_malloc_r+0x2d4>
    ff60:	80c00117 	ldw	r3,4(r16)
    ff64:	00bfff04 	movi	r2,-4
    ff68:	188e703a 	and	r7,r3,r2
    ff6c:	3c45c83a 	sub	r2,r7,r17
    ff70:	10c00410 	cmplti	r3,r2,16
    ff74:	1800db26 	beq	r3,zero,102e4 <_malloc_r+0x4f0>
    ff78:	91400515 	stw	r5,20(r18)
    ff7c:	91400415 	stw	r5,16(r18)
    ff80:	1000c70e 	bge	r2,zero,102a0 <_malloc_r+0x4ac>
    ff84:	38808028 	cmpgeui	r2,r7,512
    ff88:	1000f91e 	bne	r2,zero,10370 <_malloc_r+0x57c>
    ff8c:	3804d0fa 	srli	r2,r7,3
    ff90:	92000117 	ldw	r8,4(r18)
    ff94:	10c00044 	addi	r3,r2,1
    ff98:	100fd0ba 	srai	r7,r2,2
    ff9c:	180690fa 	slli	r3,r3,3
    ffa0:	00800044 	movi	r2,1
    ffa4:	11c4983a 	sll	r2,r2,r7
    ffa8:	90c7883a 	add	r3,r18,r3
    ffac:	19000017 	ldw	r4,0(r3)
    ffb0:	1204b03a 	or	r2,r2,r8
    ffb4:	19fffe04 	addi	r7,r3,-8
    ffb8:	81c00315 	stw	r7,12(r16)
    ffbc:	81000215 	stw	r4,8(r16)
    ffc0:	90800115 	stw	r2,4(r18)
    ffc4:	1c000015 	stw	r16,0(r3)
    ffc8:	24000315 	stw	r16,12(r4)
    ffcc:	3007d0ba 	srai	r3,r6,2
    ffd0:	01000044 	movi	r4,1
    ffd4:	20c8983a 	sll	r4,r4,r3
    ffd8:	11004036 	bltu	r2,r4,100dc <_malloc_r+0x2e8>
    ffdc:	2086703a 	and	r3,r4,r2
    ffe0:	18000a1e 	bne	r3,zero,1000c <_malloc_r+0x218>
    ffe4:	00ffff04 	movi	r3,-4
    ffe8:	2109883a 	add	r4,r4,r4
    ffec:	30cc703a 	and	r6,r6,r3
    fff0:	2086703a 	and	r3,r4,r2
    fff4:	31800104 	addi	r6,r6,4
    fff8:	1800041e 	bne	r3,zero,1000c <_malloc_r+0x218>
    fffc:	2109883a 	add	r4,r4,r4
   10000:	2086703a 	and	r3,r4,r2
   10004:	31800104 	addi	r6,r6,4
   10008:	183ffc26 	beq	r3,zero,fffc <__alt_mem_mcu_subsystem_ram_0+0x77fefffc>
   1000c:	027fff04 	movi	r9,-4
   10010:	301490fa 	slli	r10,r6,3
   10014:	3017883a 	mov	r11,r6
   10018:	9295883a 	add	r10,r18,r10
   1001c:	5011883a 	mov	r8,r10
   10020:	44000317 	ldw	r16,12(r8)
   10024:	4400c126 	beq	r8,r16,1032c <_malloc_r+0x538>
   10028:	80800117 	ldw	r2,4(r16)
   1002c:	1244703a 	and	r2,r2,r9
   10030:	1447c83a 	sub	r3,r2,r17
   10034:	19c00408 	cmpgei	r7,r3,16
   10038:	3800081e 	bne	r7,zero,1005c <_malloc_r+0x268>
   1003c:	1800c00e 	bge	r3,zero,10340 <_malloc_r+0x54c>
   10040:	84000317 	ldw	r16,12(r16)
   10044:	4400b926 	beq	r8,r16,1032c <_malloc_r+0x538>
   10048:	80800117 	ldw	r2,4(r16)
   1004c:	1244703a 	and	r2,r2,r9
   10050:	1447c83a 	sub	r3,r2,r17
   10054:	19c00410 	cmplti	r7,r3,16
   10058:	383ff81e 	bne	r7,zero,1003c <__alt_mem_mcu_subsystem_ram_0+0x77ff003c>
   1005c:	81000317 	ldw	r4,12(r16)
   10060:	81800217 	ldw	r6,8(r16)
   10064:	89c00054 	ori	r7,r17,1
   10068:	81c00115 	stw	r7,4(r16)
   1006c:	31000315 	stw	r4,12(r6)
   10070:	21800215 	stw	r6,8(r4)
   10074:	8463883a 	add	r17,r16,r17
   10078:	94400515 	stw	r17,20(r18)
   1007c:	94400415 	stw	r17,16(r18)
   10080:	19000054 	ori	r4,r3,1
   10084:	89000115 	stw	r4,4(r17)
   10088:	8085883a 	add	r2,r16,r2
   1008c:	89400315 	stw	r5,12(r17)
   10090:	89400215 	stw	r5,8(r17)
   10094:	10c00015 	stw	r3,0(r2)
   10098:	9809883a 	mov	r4,r19
   1009c:	00201940 	call	20194 <__malloc_unlock>
   100a0:	80800204 	addi	r2,r16,8
   100a4:	003f7a06 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   100a8:	00800304 	movi	r2,12
   100ac:	98800015 	stw	r2,0(r19)
   100b0:	0005883a 	mov	r2,zero
   100b4:	003f7606 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   100b8:	01008004 	movi	r4,512
   100bc:	01801004 	movi	r6,64
   100c0:	02000fc4 	movi	r8,63
   100c4:	003f8b06 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   100c8:	3007d0ba 	srai	r3,r6,2
   100cc:	01000044 	movi	r4,1
   100d0:	90800117 	ldw	r2,4(r18)
   100d4:	20c8983a 	sll	r4,r4,r3
   100d8:	113fc02e 	bgeu	r2,r4,ffdc <__alt_mem_mcu_subsystem_ram_0+0x77feffdc>
   100dc:	94000217 	ldw	r16,8(r18)
   100e0:	00bfff04 	movi	r2,-4
   100e4:	85400117 	ldw	r21,4(r16)
   100e8:	a8aa703a 	and	r21,r21,r2
   100ec:	ac400336 	bltu	r21,r17,100fc <_malloc_r+0x308>
   100f0:	ac45c83a 	sub	r2,r21,r17
   100f4:	10c00408 	cmpgei	r3,r2,16
   100f8:	1800571e 	bne	r3,zero,10258 <_malloc_r+0x464>
   100fc:	008000f4 	movhi	r2,3
   10100:	10a3b217 	ldw	r2,-28984(r2)
   10104:	00c000f4 	movhi	r3,3
   10108:	1d2b2617 	ldw	r20,-21352(r3)
   1010c:	10bfffd8 	cmpnei	r2,r2,-1
   10110:	8d29883a 	add	r20,r17,r20
   10114:	1000da26 	beq	r2,zero,10480 <_malloc_r+0x68c>
   10118:	a50403c4 	addi	r20,r20,4111
   1011c:	00bc0004 	movi	r2,-4096
   10120:	a0a8703a 	and	r20,r20,r2
   10124:	a00b883a 	mov	r5,r20
   10128:	9809883a 	mov	r4,r19
   1012c:	001107c0 	call	1107c <_sbrk_r>
   10130:	102d883a 	mov	r22,r2
   10134:	10bfffd8 	cmpnei	r2,r2,-1
   10138:	1000ab26 	beq	r2,zero,103e8 <_malloc_r+0x5f4>
   1013c:	8547883a 	add	r3,r16,r21
   10140:	b0c0a836 	bltu	r22,r3,103e4 <_malloc_r+0x5f0>
   10144:	008200f4 	movhi	r2,2051
   10148:	10ab3417 	ldw	r2,-21296(r2)
   1014c:	010200f4 	movhi	r4,2051
   10150:	a085883a 	add	r2,r20,r2
   10154:	20ab3415 	stw	r2,-21296(r4)
   10158:	1d80e226 	beq	r3,r22,104e4 <_malloc_r+0x6f0>
   1015c:	010000f4 	movhi	r4,3
   10160:	2123b217 	ldw	r4,-28984(r4)
   10164:	213fffd8 	cmpnei	r4,r4,-1
   10168:	2000f226 	beq	r4,zero,10534 <_malloc_r+0x740>
   1016c:	b0c7c83a 	sub	r3,r22,r3
   10170:	1885883a 	add	r2,r3,r2
   10174:	00c200f4 	movhi	r3,2051
   10178:	18ab3415 	stw	r2,-21296(r3)
   1017c:	b0c001cc 	andi	r3,r22,7
   10180:	1800cf26 	beq	r3,zero,104c0 <_malloc_r+0x6cc>
   10184:	b0edc83a 	sub	r22,r22,r3
   10188:	00840204 	movi	r2,4104
   1018c:	b5800204 	addi	r22,r22,8
   10190:	10c5c83a 	sub	r2,r2,r3
   10194:	b529883a 	add	r20,r22,r20
   10198:	a503ffcc 	andi	r20,r20,4095
   1019c:	1529c83a 	sub	r20,r2,r20
   101a0:	a00b883a 	mov	r5,r20
   101a4:	9809883a 	mov	r4,r19
   101a8:	001107c0 	call	1107c <_sbrk_r>
   101ac:	10ffffe0 	cmpeqi	r3,r2,-1
   101b0:	1800dd1e 	bne	r3,zero,10528 <_malloc_r+0x734>
   101b4:	1587c83a 	sub	r3,r2,r22
   101b8:	1d07883a 	add	r3,r3,r20
   101bc:	18c00054 	ori	r3,r3,1
   101c0:	008200f4 	movhi	r2,2051
   101c4:	10ab3417 	ldw	r2,-21296(r2)
   101c8:	95800215 	stw	r22,8(r18)
   101cc:	010200f4 	movhi	r4,2051
   101d0:	a085883a 	add	r2,r20,r2
   101d4:	20ab3415 	stw	r2,-21296(r4)
   101d8:	b0c00115 	stw	r3,4(r22)
   101dc:	84800f26 	beq	r16,r18,1021c <_malloc_r+0x428>
   101e0:	a8c00428 	cmpgeui	r3,r21,16
   101e4:	1800cd26 	beq	r3,zero,1051c <_malloc_r+0x728>
   101e8:	81000117 	ldw	r4,4(r16)
   101ec:	017ffe04 	movi	r5,-8
   101f0:	a8fffd04 	addi	r3,r21,-12
   101f4:	1946703a 	and	r3,r3,r5
   101f8:	2100004c 	andi	r4,r4,1
   101fc:	20c8b03a 	or	r4,r4,r3
   10200:	81000115 	stw	r4,4(r16)
   10204:	01400144 	movi	r5,5
   10208:	80c9883a 	add	r4,r16,r3
   1020c:	21400115 	stw	r5,4(r4)
   10210:	21400215 	stw	r5,8(r4)
   10214:	18c00430 	cmpltui	r3,r3,16
   10218:	1800da26 	beq	r3,zero,10584 <_malloc_r+0x790>
   1021c:	00c000f4 	movhi	r3,3
   10220:	18eb2517 	ldw	r3,-21356(r3)
   10224:	1880022e 	bgeu	r3,r2,10230 <_malloc_r+0x43c>
   10228:	00c000f4 	movhi	r3,3
   1022c:	18ab2515 	stw	r2,-21356(r3)
   10230:	94000217 	ldw	r16,8(r18)
   10234:	00c000f4 	movhi	r3,3
   10238:	192b2417 	ldw	r4,-21360(r3)
   1023c:	80c00117 	ldw	r3,4(r16)
   10240:	017fff04 	movi	r5,-4
   10244:	1946703a 	and	r3,r3,r5
   10248:	20806b2e 	bgeu	r4,r2,103f8 <_malloc_r+0x604>
   1024c:	010000f4 	movhi	r4,3
   10250:	20ab2415 	stw	r2,-21360(r4)
   10254:	00006806 	br	103f8 <_malloc_r+0x604>
   10258:	88c00054 	ori	r3,r17,1
   1025c:	80c00115 	stw	r3,4(r16)
   10260:	8463883a 	add	r17,r16,r17
   10264:	10800054 	ori	r2,r2,1
   10268:	94400215 	stw	r17,8(r18)
   1026c:	88800115 	stw	r2,4(r17)
   10270:	9809883a 	mov	r4,r19
   10274:	00201940 	call	20194 <__malloc_unlock>
   10278:	80800204 	addi	r2,r16,8
   1027c:	003f0406 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   10280:	400d883a 	mov	r6,r8
   10284:	003f3206 	br	ff50 <__alt_mem_mcu_subsystem_ram_0+0x77feff50>
   10288:	81000317 	ldw	r4,12(r16)
   1028c:	003ef606 	br	fe68 <__alt_mem_mcu_subsystem_ram_0+0x77fefe68>
   10290:	14000317 	ldw	r16,12(r2)
   10294:	31800084 	addi	r6,r6,2
   10298:	143f2d26 	beq	r2,r16,ff50 <__alt_mem_mcu_subsystem_ram_0+0x77feff50>
   1029c:	003eee06 	br	fe58 <__alt_mem_mcu_subsystem_ram_0+0x77fefe58>
   102a0:	81c5883a 	add	r2,r16,r7
   102a4:	11400117 	ldw	r5,4(r2)
   102a8:	9809883a 	mov	r4,r19
   102ac:	29400054 	ori	r5,r5,1
   102b0:	11400115 	stw	r5,4(r2)
   102b4:	00201940 	call	20194 <__malloc_unlock>
   102b8:	80800204 	addi	r2,r16,8
   102bc:	003ef406 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   102c0:	10c00568 	cmpgeui	r3,r2,21
   102c4:	18004326 	beq	r3,zero,103d4 <_malloc_r+0x5e0>
   102c8:	10c01568 	cmpgeui	r3,r2,85
   102cc:	18006e1e 	bne	r3,zero,10488 <_malloc_r+0x694>
   102d0:	8804d33a 	srli	r2,r17,12
   102d4:	11801bc4 	addi	r6,r2,111
   102d8:	12001b84 	addi	r8,r2,110
   102dc:	300890fa 	slli	r4,r6,3
   102e0:	003f0406 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   102e4:	88c00054 	ori	r3,r17,1
   102e8:	80c00115 	stw	r3,4(r16)
   102ec:	8463883a 	add	r17,r16,r17
   102f0:	94400515 	stw	r17,20(r18)
   102f4:	94400415 	stw	r17,16(r18)
   102f8:	10c00054 	ori	r3,r2,1
   102fc:	88c00115 	stw	r3,4(r17)
   10300:	89400315 	stw	r5,12(r17)
   10304:	89400215 	stw	r5,8(r17)
   10308:	81c7883a 	add	r3,r16,r7
   1030c:	18800015 	stw	r2,0(r3)
   10310:	9809883a 	mov	r4,r19
   10314:	00201940 	call	20194 <__malloc_unlock>
   10318:	80800204 	addi	r2,r16,8
   1031c:	003edc06 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   10320:	880cd0fa 	srli	r6,r17,3
   10324:	88800204 	addi	r2,r17,8
   10328:	003ec506 	br	fe40 <__alt_mem_mcu_subsystem_ram_0+0x77fefe40>
   1032c:	5ac00044 	addi	r11,r11,1
   10330:	588000cc 	andi	r2,r11,3
   10334:	42000204 	addi	r8,r8,8
   10338:	103f391e 	bne	r2,zero,10020 <__alt_mem_mcu_subsystem_ram_0+0x77ff0020>
   1033c:	00003e06 	br	10438 <_malloc_r+0x644>
   10340:	8085883a 	add	r2,r16,r2
   10344:	10c00117 	ldw	r3,4(r2)
   10348:	81000317 	ldw	r4,12(r16)
   1034c:	81400217 	ldw	r5,8(r16)
   10350:	18c00054 	ori	r3,r3,1
   10354:	10c00115 	stw	r3,4(r2)
   10358:	29000315 	stw	r4,12(r5)
   1035c:	21400215 	stw	r5,8(r4)
   10360:	9809883a 	mov	r4,r19
   10364:	00201940 	call	20194 <__malloc_unlock>
   10368:	80800204 	addi	r2,r16,8
   1036c:	003ec806 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   10370:	3804d27a 	srli	r2,r7,9
   10374:	10c00168 	cmpgeui	r3,r2,5
   10378:	18002726 	beq	r3,zero,10418 <_malloc_r+0x624>
   1037c:	10c00568 	cmpgeui	r3,r2,21
   10380:	1800511e 	bne	r3,zero,104c8 <_malloc_r+0x6d4>
   10384:	11001704 	addi	r4,r2,92
   10388:	200890fa 	slli	r4,r4,3
   1038c:	108016c4 	addi	r2,r2,91
   10390:	9109883a 	add	r4,r18,r4
   10394:	20c00017 	ldw	r3,0(r4)
   10398:	213ffe04 	addi	r4,r4,-8
   1039c:	20c04126 	beq	r4,r3,104a4 <_malloc_r+0x6b0>
   103a0:	023fff04 	movi	r8,-4
   103a4:	18800117 	ldw	r2,4(r3)
   103a8:	1204703a 	and	r2,r2,r8
   103ac:	3880022e 	bgeu	r7,r2,103b8 <_malloc_r+0x5c4>
   103b0:	18c00217 	ldw	r3,8(r3)
   103b4:	20fffb1e 	bne	r4,r3,103a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff03a4>
   103b8:	19000317 	ldw	r4,12(r3)
   103bc:	90800117 	ldw	r2,4(r18)
   103c0:	81000315 	stw	r4,12(r16)
   103c4:	80c00215 	stw	r3,8(r16)
   103c8:	24000215 	stw	r16,8(r4)
   103cc:	1c000315 	stw	r16,12(r3)
   103d0:	003efe06 	br	ffcc <__alt_mem_mcu_subsystem_ram_0+0x77feffcc>
   103d4:	11801704 	addi	r6,r2,92
   103d8:	120016c4 	addi	r8,r2,91
   103dc:	300890fa 	slli	r4,r6,3
   103e0:	003ec406 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   103e4:	84805626 	beq	r16,r18,10540 <_malloc_r+0x74c>
   103e8:	94000217 	ldw	r16,8(r18)
   103ec:	00bfff04 	movi	r2,-4
   103f0:	80c00117 	ldw	r3,4(r16)
   103f4:	1886703a 	and	r3,r3,r2
   103f8:	1c45c83a 	sub	r2,r3,r17
   103fc:	1c400236 	bltu	r3,r17,10408 <_malloc_r+0x614>
   10400:	10c00408 	cmpgei	r3,r2,16
   10404:	183f941e 	bne	r3,zero,10258 <__alt_mem_mcu_subsystem_ram_0+0x77ff0258>
   10408:	9809883a 	mov	r4,r19
   1040c:	00201940 	call	20194 <__malloc_unlock>
   10410:	0005883a 	mov	r2,zero
   10414:	003e9e06 	br	fe90 <__alt_mem_mcu_subsystem_ram_0+0x77fefe90>
   10418:	3804d1ba 	srli	r2,r7,6
   1041c:	11000e44 	addi	r4,r2,57
   10420:	200890fa 	slli	r4,r4,3
   10424:	10800e04 	addi	r2,r2,56
   10428:	003fd906 	br	10390 <__alt_mem_mcu_subsystem_ram_0+0x77ff0390>
   1042c:	52800017 	ldw	r10,0(r10)
   10430:	31bfffc4 	addi	r6,r6,-1
   10434:	50c0631e 	bne	r10,r3,105c4 <_malloc_r+0x7d0>
   10438:	308000cc 	andi	r2,r6,3
   1043c:	50fffe04 	addi	r3,r10,-8
   10440:	103ffa1e 	bne	r2,zero,1042c <__alt_mem_mcu_subsystem_ram_0+0x77ff042c>
   10444:	90c00117 	ldw	r3,4(r18)
   10448:	0104303a 	nor	r2,zero,r4
   1044c:	10c4703a 	and	r2,r2,r3
   10450:	90800115 	stw	r2,4(r18)
   10454:	2109883a 	add	r4,r4,r4
   10458:	113f2036 	bltu	r2,r4,100dc <__alt_mem_mcu_subsystem_ram_0+0x77ff00dc>
   1045c:	203f1f26 	beq	r4,zero,100dc <__alt_mem_mcu_subsystem_ram_0+0x77ff00dc>
   10460:	2086703a 	and	r3,r4,r2
   10464:	1800041e 	bne	r3,zero,10478 <_malloc_r+0x684>
   10468:	2109883a 	add	r4,r4,r4
   1046c:	2086703a 	and	r3,r4,r2
   10470:	5ac00104 	addi	r11,r11,4
   10474:	183ffc26 	beq	r3,zero,10468 <__alt_mem_mcu_subsystem_ram_0+0x77ff0468>
   10478:	580d883a 	mov	r6,r11
   1047c:	003ee406 	br	10010 <__alt_mem_mcu_subsystem_ram_0+0x77ff0010>
   10480:	a5000404 	addi	r20,r20,16
   10484:	003f2706 	br	10124 <__alt_mem_mcu_subsystem_ram_0+0x77ff0124>
   10488:	10c05568 	cmpgeui	r3,r2,341
   1048c:	18001c1e 	bne	r3,zero,10500 <_malloc_r+0x70c>
   10490:	8804d3fa 	srli	r2,r17,15
   10494:	11801e04 	addi	r6,r2,120
   10498:	12001dc4 	addi	r8,r2,119
   1049c:	300890fa 	slli	r4,r6,3
   104a0:	003e9406 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   104a4:	100fd0ba 	srai	r7,r2,2
   104a8:	00800044 	movi	r2,1
   104ac:	92000117 	ldw	r8,4(r18)
   104b0:	11c4983a 	sll	r2,r2,r7
   104b4:	1204b03a 	or	r2,r2,r8
   104b8:	90800115 	stw	r2,4(r18)
   104bc:	003fc006 	br	103c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff03c0>
   104c0:	00840004 	movi	r2,4096
   104c4:	003f3306 	br	10194 <__alt_mem_mcu_subsystem_ram_0+0x77ff0194>
   104c8:	10c01568 	cmpgeui	r3,r2,85
   104cc:	1800221e 	bne	r3,zero,10558 <_malloc_r+0x764>
   104d0:	3804d33a 	srli	r2,r7,12
   104d4:	11001bc4 	addi	r4,r2,111
   104d8:	200890fa 	slli	r4,r4,3
   104dc:	10801b84 	addi	r2,r2,110
   104e0:	003fab06 	br	10390 <__alt_mem_mcu_subsystem_ram_0+0x77ff0390>
   104e4:	1903ffcc 	andi	r4,r3,4095
   104e8:	203f1c1e 	bne	r4,zero,1015c <__alt_mem_mcu_subsystem_ram_0+0x77ff015c>
   104ec:	91000217 	ldw	r4,8(r18)
   104f0:	ad07883a 	add	r3,r21,r20
   104f4:	18c00054 	ori	r3,r3,1
   104f8:	20c00115 	stw	r3,4(r4)
   104fc:	003f4706 	br	1021c <__alt_mem_mcu_subsystem_ram_0+0x77ff021c>
   10500:	10815568 	cmpgeui	r2,r2,1365
   10504:	10001b1e 	bne	r2,zero,10574 <_malloc_r+0x780>
   10508:	8804d4ba 	srli	r2,r17,18
   1050c:	11801f44 	addi	r6,r2,125
   10510:	12001f04 	addi	r8,r2,124
   10514:	300890fa 	slli	r4,r6,3
   10518:	003e7606 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   1051c:	00800044 	movi	r2,1
   10520:	b0800115 	stw	r2,4(r22)
   10524:	003fb806 	br	10408 <__alt_mem_mcu_subsystem_ram_0+0x77ff0408>
   10528:	00c00044 	movi	r3,1
   1052c:	0029883a 	mov	r20,zero
   10530:	003f2306 	br	101c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff01c0>
   10534:	008000f4 	movhi	r2,3
   10538:	15a3b215 	stw	r22,-28984(r2)
   1053c:	003f0f06 	br	1017c <__alt_mem_mcu_subsystem_ram_0+0x77ff017c>
   10540:	008200f4 	movhi	r2,2051
   10544:	10ab3417 	ldw	r2,-21296(r2)
   10548:	010200f4 	movhi	r4,2051
   1054c:	a085883a 	add	r2,r20,r2
   10550:	20ab3415 	stw	r2,-21296(r4)
   10554:	003f0106 	br	1015c <__alt_mem_mcu_subsystem_ram_0+0x77ff015c>
   10558:	10c05568 	cmpgeui	r3,r2,341
   1055c:	18000f1e 	bne	r3,zero,1059c <_malloc_r+0x7a8>
   10560:	3804d3fa 	srli	r2,r7,15
   10564:	11001e04 	addi	r4,r2,120
   10568:	200890fa 	slli	r4,r4,3
   1056c:	10801dc4 	addi	r2,r2,119
   10570:	003f8706 	br	10390 <__alt_mem_mcu_subsystem_ram_0+0x77ff0390>
   10574:	0100fe04 	movi	r4,1016
   10578:	01801fc4 	movi	r6,127
   1057c:	02001f84 	movi	r8,126
   10580:	003e5c06 	br	fef4 <__alt_mem_mcu_subsystem_ram_0+0x77fefef4>
   10584:	81400204 	addi	r5,r16,8
   10588:	9809883a 	mov	r4,r19
   1058c:	0017d000 	call	17d00 <_free_r>
   10590:	008200f4 	movhi	r2,2051
   10594:	10ab3417 	ldw	r2,-21296(r2)
   10598:	003f2006 	br	1021c <__alt_mem_mcu_subsystem_ram_0+0x77ff021c>
   1059c:	10815568 	cmpgeui	r2,r2,1365
   105a0:	1000051e 	bne	r2,zero,105b8 <_malloc_r+0x7c4>
   105a4:	3804d4ba 	srli	r2,r7,18
   105a8:	11001f44 	addi	r4,r2,125
   105ac:	200890fa 	slli	r4,r4,3
   105b0:	10801f04 	addi	r2,r2,124
   105b4:	003f7606 	br	10390 <__alt_mem_mcu_subsystem_ram_0+0x77ff0390>
   105b8:	0100fe04 	movi	r4,1016
   105bc:	00801f84 	movi	r2,126
   105c0:	003f7306 	br	10390 <__alt_mem_mcu_subsystem_ram_0+0x77ff0390>
   105c4:	90800117 	ldw	r2,4(r18)
   105c8:	003fa206 	br	10454 <__alt_mem_mcu_subsystem_ram_0+0x77ff0454>

000105cc <_mbtowc_r>:
   105cc:	008000f4 	movhi	r2,3
   105d0:	10a3b117 	ldw	r2,-28988(r2)
   105d4:	d8c00017 	ldw	r3,0(sp)
   105d8:	10800d17 	ldw	r2,52(r2)
   105dc:	1000021e 	bne	r2,zero,105e8 <_mbtowc_r+0x1c>
   105e0:	008000b4 	movhi	r2,2
   105e4:	109d7c04 	addi	r2,r2,30192
   105e8:	d8c00015 	stw	r3,0(sp)
   105ec:	10803917 	ldw	r2,228(r2)
   105f0:	1000683a 	jmp	r2

000105f4 <__ascii_mbtowc>:
   105f4:	deffff04 	addi	sp,sp,-4
   105f8:	28000826 	beq	r5,zero,1061c <__ascii_mbtowc+0x28>
   105fc:	30000926 	beq	r6,zero,10624 <__ascii_mbtowc+0x30>
   10600:	38000b26 	beq	r7,zero,10630 <__ascii_mbtowc+0x3c>
   10604:	30800003 	ldbu	r2,0(r6)
   10608:	28800015 	stw	r2,0(r5)
   1060c:	30800003 	ldbu	r2,0(r6)
   10610:	1004c03a 	cmpne	r2,r2,zero
   10614:	dec00104 	addi	sp,sp,4
   10618:	f800283a 	ret
   1061c:	d80b883a 	mov	r5,sp
   10620:	303ff71e 	bne	r6,zero,10600 <__alt_mem_mcu_subsystem_ram_0+0x77ff0600>
   10624:	0005883a 	mov	r2,zero
   10628:	dec00104 	addi	sp,sp,4
   1062c:	f800283a 	ret
   10630:	00bfff84 	movi	r2,-2
   10634:	003ff706 	br	10614 <__alt_mem_mcu_subsystem_ram_0+0x77ff0614>

00010638 <memcpy>:
   10638:	30c00430 	cmpltui	r3,r6,16
   1063c:	2005883a 	mov	r2,r4
   10640:	1800321e 	bne	r3,zero,1070c <memcpy+0xd4>
   10644:	2906b03a 	or	r3,r5,r4
   10648:	18c000cc 	andi	r3,r3,3
   1064c:	1800321e 	bne	r3,zero,10718 <memcpy+0xe0>
   10650:	32fffc04 	addi	r11,r6,-16
   10654:	5816d13a 	srli	r11,r11,4
   10658:	2811883a 	mov	r8,r5
   1065c:	200f883a 	mov	r7,r4
   10660:	5ac00044 	addi	r11,r11,1
   10664:	5816913a 	slli	r11,r11,4
   10668:	22c7883a 	add	r3,r4,r11
   1066c:	41000017 	ldw	r4,0(r8)
   10670:	42800117 	ldw	r10,4(r8)
   10674:	42400217 	ldw	r9,8(r8)
   10678:	42000404 	addi	r8,r8,16
   1067c:	39000015 	stw	r4,0(r7)
   10680:	413fff17 	ldw	r4,-4(r8)
   10684:	3a800115 	stw	r10,4(r7)
   10688:	3a400215 	stw	r9,8(r7)
   1068c:	39c00404 	addi	r7,r7,16
   10690:	393fff15 	stw	r4,-4(r7)
   10694:	19fff51e 	bne	r3,r7,1066c <__alt_mem_mcu_subsystem_ram_0+0x77ff066c>
   10698:	310003cc 	andi	r4,r6,15
   1069c:	21c00130 	cmpltui	r7,r4,4
   106a0:	2acb883a 	add	r5,r5,r11
   106a4:	38001e1e 	bne	r7,zero,10720 <memcpy+0xe8>
   106a8:	213fff04 	addi	r4,r4,-4
   106ac:	200ed0ba 	srli	r7,r4,2
   106b0:	1811883a 	mov	r8,r3
   106b4:	2809883a 	mov	r4,r5
   106b8:	381290ba 	slli	r9,r7,2
   106bc:	4a400104 	addi	r9,r9,4
   106c0:	4953883a 	add	r9,r9,r5
   106c4:	22800017 	ldw	r10,0(r4)
   106c8:	42000104 	addi	r8,r8,4
   106cc:	21000104 	addi	r4,r4,4
   106d0:	42bfff15 	stw	r10,-4(r8)
   106d4:	227ffb1e 	bne	r4,r9,106c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff06c4>
   106d8:	39000044 	addi	r4,r7,1
   106dc:	200890ba 	slli	r4,r4,2
   106e0:	318000cc 	andi	r6,r6,3
   106e4:	1907883a 	add	r3,r3,r4
   106e8:	290b883a 	add	r5,r5,r4
   106ec:	30000926 	beq	r6,zero,10714 <memcpy+0xdc>
   106f0:	198d883a 	add	r6,r3,r6
   106f4:	29400044 	addi	r5,r5,1
   106f8:	29ffffc3 	ldbu	r7,-1(r5)
   106fc:	18c00044 	addi	r3,r3,1
   10700:	19ffffc5 	stb	r7,-1(r3)
   10704:	19bffb1e 	bne	r3,r6,106f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff06f4>
   10708:	f800283a 	ret
   1070c:	2007883a 	mov	r3,r4
   10710:	303ff71e 	bne	r6,zero,106f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff06f0>
   10714:	f800283a 	ret
   10718:	2007883a 	mov	r3,r4
   1071c:	003ff406 	br	106f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff06f0>
   10720:	200d883a 	mov	r6,r4
   10724:	003ff106 	br	106ec <__alt_mem_mcu_subsystem_ram_0+0x77ff06ec>

00010728 <memset>:
   10728:	20c000cc 	andi	r3,r4,3
   1072c:	2005883a 	mov	r2,r4
   10730:	18003726 	beq	r3,zero,10810 <memset+0xe8>
   10734:	31ffffc4 	addi	r7,r6,-1
   10738:	30003326 	beq	r6,zero,10808 <memset+0xe0>
   1073c:	2811883a 	mov	r8,r5
   10740:	2007883a 	mov	r3,r4
   10744:	00000306 	br	10754 <memset+0x2c>
   10748:	39ffffc4 	addi	r7,r7,-1
   1074c:	39bfffe0 	cmpeqi	r6,r7,-1
   10750:	30002d1e 	bne	r6,zero,10808 <memset+0xe0>
   10754:	18c00044 	addi	r3,r3,1
   10758:	1a3fffc5 	stb	r8,-1(r3)
   1075c:	198000cc 	andi	r6,r3,3
   10760:	303ff91e 	bne	r6,zero,10748 <__alt_mem_mcu_subsystem_ram_0+0x77ff0748>
   10764:	39000128 	cmpgeui	r4,r7,4
   10768:	20002226 	beq	r4,zero,107f4 <memset+0xcc>
   1076c:	29003fcc 	andi	r4,r5,255
   10770:	200c923a 	slli	r6,r4,8
   10774:	3a000430 	cmpltui	r8,r7,16
   10778:	3108b03a 	or	r4,r6,r4
   1077c:	200c943a 	slli	r6,r4,16
   10780:	310cb03a 	or	r6,r6,r4
   10784:	4000251e 	bne	r8,zero,1081c <memset+0xf4>
   10788:	3a3ffc04 	addi	r8,r7,-16
   1078c:	4010d13a 	srli	r8,r8,4
   10790:	42000044 	addi	r8,r8,1
   10794:	4010913a 	slli	r8,r8,4
   10798:	1a11883a 	add	r8,r3,r8
   1079c:	19800015 	stw	r6,0(r3)
   107a0:	19800115 	stw	r6,4(r3)
   107a4:	19800215 	stw	r6,8(r3)
   107a8:	18c00404 	addi	r3,r3,16
   107ac:	19bfff15 	stw	r6,-4(r3)
   107b0:	40fffa1e 	bne	r8,r3,1079c <__alt_mem_mcu_subsystem_ram_0+0x77ff079c>
   107b4:	39c003cc 	andi	r7,r7,15
   107b8:	39000130 	cmpltui	r4,r7,4
   107bc:	20000d1e 	bne	r4,zero,107f4 <memset+0xcc>
   107c0:	38ffff04 	addi	r3,r7,-4
   107c4:	1806d0ba 	srli	r3,r3,2
   107c8:	42400104 	addi	r9,r8,4
   107cc:	4009883a 	mov	r4,r8
   107d0:	181490ba 	slli	r10,r3,2
   107d4:	5253883a 	add	r9,r10,r9
   107d8:	21800015 	stw	r6,0(r4)
   107dc:	21000104 	addi	r4,r4,4
   107e0:	227ffd1e 	bne	r4,r9,107d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff07d8>
   107e4:	18c00044 	addi	r3,r3,1
   107e8:	180690ba 	slli	r3,r3,2
   107ec:	39c000cc 	andi	r7,r7,3
   107f0:	40c7883a 	add	r3,r8,r3
   107f4:	38000526 	beq	r7,zero,1080c <memset+0xe4>
   107f8:	19cf883a 	add	r7,r3,r7
   107fc:	18c00044 	addi	r3,r3,1
   10800:	197fffc5 	stb	r5,-1(r3)
   10804:	38fffd1e 	bne	r7,r3,107fc <__alt_mem_mcu_subsystem_ram_0+0x77ff07fc>
   10808:	f800283a 	ret
   1080c:	f800283a 	ret
   10810:	2007883a 	mov	r3,r4
   10814:	300f883a 	mov	r7,r6
   10818:	003fd206 	br	10764 <__alt_mem_mcu_subsystem_ram_0+0x77ff0764>
   1081c:	1811883a 	mov	r8,r3
   10820:	003fe706 	br	107c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff07c0>

00010824 <validate_structure>:
   10824:	defffb04 	addi	sp,sp,-20
   10828:	dc800215 	stw	r18,8(sp)
   1082c:	2025883a 	mov	r18,r4
   10830:	21000017 	ldw	r4,0(r4)
   10834:	dfc00415 	stw	ra,16(sp)
   10838:	dcc00315 	stw	r19,12(sp)
   1083c:	dc400115 	stw	r17,4(sp)
   10840:	dc000015 	stw	r16,0(sp)
   10844:	20800f28 	cmpgeui	r2,r4,60
   10848:	10007c1e 	bne	r2,zero,10a3c <validate_structure+0x218>
   1084c:	91000117 	ldw	r4,4(r18)
   10850:	20800f28 	cmpgeui	r2,r4,60
   10854:	1000711e 	bne	r2,zero,10a1c <validate_structure+0x1f8>
   10858:	91000217 	ldw	r4,8(r18)
   1085c:	20800628 	cmpgeui	r2,r4,24
   10860:	1000661e 	bne	r2,zero,109fc <validate_structure+0x1d8>
   10864:	94000417 	ldw	r16,16(r18)
   10868:	80800328 	cmpgeui	r2,r16,12
   1086c:	1000591e 	bne	r2,zero,109d4 <validate_structure+0x1b0>
   10870:	94400517 	ldw	r17,20(r18)
   10874:	888000cc 	andi	r2,r17,3
   10878:	10000a1e 	bne	r2,zero,108a4 <validate_structure+0x80>
   1087c:	01401904 	movi	r5,100
   10880:	8809883a 	mov	r4,r17
   10884:	000d6600 	call	d660 <__modsi3>
   10888:	10000226 	beq	r2,zero,10894 <validate_structure+0x70>
   1088c:	01800744 	movi	r6,29
   10890:	00000506 	br	108a8 <validate_structure+0x84>
   10894:	01406404 	movi	r5,400
   10898:	8901db04 	addi	r4,r17,1900
   1089c:	000d6600 	call	d660 <__modsi3>
   108a0:	103ffa26 	beq	r2,zero,1088c <__alt_mem_mcu_subsystem_ram_0+0x77ff088c>
   108a4:	01800704 	movi	r6,28
   108a8:	94400317 	ldw	r17,12(r18)
   108ac:	04401e0e 	bge	zero,r17,10928 <validate_structure+0x104>
   108b0:	04c000b4 	movhi	r19,2
   108b4:	9cdae604 	addi	r19,r19,27544
   108b8:	800890ba 	slli	r4,r16,2
   108bc:	80c00044 	addi	r3,r16,1
   108c0:	9909883a 	add	r4,r19,r4
   108c4:	00000806 	br	108e8 <validate_structure+0xc4>
   108c8:	20800017 	ldw	r2,0(r4)
   108cc:	1440250e 	bge	r2,r17,10964 <validate_structure+0x140>
   108d0:	88a3c83a 	sub	r17,r17,r2
   108d4:	90c00415 	stw	r3,16(r18)
   108d8:	94400315 	stw	r17,12(r18)
   108dc:	28002a26 	beq	r5,zero,10988 <validate_structure+0x164>
   108e0:	18c00044 	addi	r3,r3,1
   108e4:	21000104 	addi	r4,r4,4
   108e8:	188000a0 	cmpeqi	r2,r3,2
   108ec:	19400318 	cmpnei	r5,r3,12
   108f0:	103ff526 	beq	r2,zero,108c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff08c8>
   108f4:	34401b0e 	bge	r6,r17,10964 <validate_structure+0x140>
   108f8:	89a3c83a 	sub	r17,r17,r6
   108fc:	94400315 	stw	r17,12(r18)
   10900:	90c00415 	stw	r3,16(r18)
   10904:	003ff606 	br	108e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff08e0>
   10908:	80800060 	cmpeqi	r2,r16,1
   1090c:	10001c1e 	bne	r2,zero,10980 <validate_structure+0x15c>
   10910:	800690ba 	slli	r3,r16,2
   10914:	008000b4 	movhi	r2,2
   10918:	1885883a 	add	r2,r3,r2
   1091c:	109ae617 	ldw	r2,27544(r2)
   10920:	88a3883a 	add	r17,r17,r2
   10924:	04400d16 	blt	zero,r17,1095c <validate_structure+0x138>
   10928:	843fffc4 	addi	r16,r16,-1
   1092c:	80bfffd8 	cmpnei	r2,r16,-1
   10930:	103ff51e 	bne	r2,zero,10908 <__alt_mem_mcu_subsystem_ram_0+0x77ff0908>
   10934:	94000517 	ldw	r16,20(r18)
   10938:	813fffc4 	addi	r4,r16,-1
   1093c:	91000515 	stw	r4,20(r18)
   10940:	208000cc 	andi	r2,r4,3
   10944:	10001926 	beq	r2,zero,109ac <validate_structure+0x188>
   10948:	01800704 	movi	r6,28
   1094c:	008007c4 	movi	r2,31
   10950:	88a3883a 	add	r17,r17,r2
   10954:	040002c4 	movi	r16,11
   10958:	047ff30e 	bge	zero,r17,10928 <__alt_mem_mcu_subsystem_ram_0+0x77ff0928>
   1095c:	94000415 	stw	r16,16(r18)
   10960:	94400315 	stw	r17,12(r18)
   10964:	dfc00417 	ldw	ra,16(sp)
   10968:	dcc00317 	ldw	r19,12(sp)
   1096c:	dc800217 	ldw	r18,8(sp)
   10970:	dc400117 	ldw	r17,4(sp)
   10974:	dc000017 	ldw	r16,0(sp)
   10978:	dec00504 	addi	sp,sp,20
   1097c:	f800283a 	ret
   10980:	3005883a 	mov	r2,r6
   10984:	003fe606 	br	10920 <__alt_mem_mcu_subsystem_ram_0+0x77ff0920>
   10988:	94000517 	ldw	r16,20(r18)
   1098c:	90000415 	stw	zero,16(r18)
   10990:	81000044 	addi	r4,r16,1
   10994:	91000515 	stw	r4,20(r18)
   10998:	208000cc 	andi	r2,r4,3
   1099c:	10000826 	beq	r2,zero,109c0 <validate_structure+0x19c>
   109a0:	01800704 	movi	r6,28
   109a4:	0021883a 	mov	r16,zero
   109a8:	003fc306 	br	108b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff08b8>
   109ac:	01401904 	movi	r5,100
   109b0:	000d6600 	call	d660 <__modsi3>
   109b4:	10002926 	beq	r2,zero,10a5c <validate_structure+0x238>
   109b8:	01800744 	movi	r6,29
   109bc:	003fe306 	br	1094c <__alt_mem_mcu_subsystem_ram_0+0x77ff094c>
   109c0:	01401904 	movi	r5,100
   109c4:	000d6600 	call	d660 <__modsi3>
   109c8:	10002926 	beq	r2,zero,10a70 <validate_structure+0x24c>
   109cc:	01800744 	movi	r6,29
   109d0:	003ff406 	br	109a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff09a4>
   109d4:	8009883a 	mov	r4,r16
   109d8:	01400304 	movi	r5,12
   109dc:	0015cc80 	call	15cc8 <div>
   109e0:	94400517 	ldw	r17,20(r18)
   109e4:	1821883a 	mov	r16,r3
   109e8:	88a3883a 	add	r17,r17,r2
   109ec:	94400515 	stw	r17,20(r18)
   109f0:	18002416 	blt	r3,zero,10a84 <validate_structure+0x260>
   109f4:	90c00415 	stw	r3,16(r18)
   109f8:	003f9e06 	br	10874 <__alt_mem_mcu_subsystem_ram_0+0x77ff0874>
   109fc:	01400604 	movi	r5,24
   10a00:	0015cc80 	call	15cc8 <div>
   10a04:	91000317 	ldw	r4,12(r18)
   10a08:	2085883a 	add	r2,r4,r2
   10a0c:	90800315 	stw	r2,12(r18)
   10a10:	18002b16 	blt	r3,zero,10ac0 <validate_structure+0x29c>
   10a14:	90c00215 	stw	r3,8(r18)
   10a18:	003f9206 	br	10864 <__alt_mem_mcu_subsystem_ram_0+0x77ff0864>
   10a1c:	01400f04 	movi	r5,60
   10a20:	0015cc80 	call	15cc8 <div>
   10a24:	91000217 	ldw	r4,8(r18)
   10a28:	2089883a 	add	r4,r4,r2
   10a2c:	91000215 	stw	r4,8(r18)
   10a30:	18001e16 	blt	r3,zero,10aac <validate_structure+0x288>
   10a34:	90c00115 	stw	r3,4(r18)
   10a38:	003f8806 	br	1085c <__alt_mem_mcu_subsystem_ram_0+0x77ff085c>
   10a3c:	01400f04 	movi	r5,60
   10a40:	0015cc80 	call	15cc8 <div>
   10a44:	91000117 	ldw	r4,4(r18)
   10a48:	2089883a 	add	r4,r4,r2
   10a4c:	91000115 	stw	r4,4(r18)
   10a50:	18001116 	blt	r3,zero,10a98 <validate_structure+0x274>
   10a54:	90c00015 	stw	r3,0(r18)
   10a58:	003f7d06 	br	10850 <__alt_mem_mcu_subsystem_ram_0+0x77ff0850>
   10a5c:	01406404 	movi	r5,400
   10a60:	8101dac4 	addi	r4,r16,1899
   10a64:	000d6600 	call	d660 <__modsi3>
   10a68:	103fb71e 	bne	r2,zero,10948 <__alt_mem_mcu_subsystem_ram_0+0x77ff0948>
   10a6c:	003fd206 	br	109b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff09b8>
   10a70:	01406404 	movi	r5,400
   10a74:	8101db44 	addi	r4,r16,1901
   10a78:	000d6600 	call	d660 <__modsi3>
   10a7c:	103fc81e 	bne	r2,zero,109a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff09a0>
   10a80:	003fd206 	br	109cc <__alt_mem_mcu_subsystem_ram_0+0x77ff09cc>
   10a84:	1c000304 	addi	r16,r3,12
   10a88:	8c7fffc4 	addi	r17,r17,-1
   10a8c:	94000415 	stw	r16,16(r18)
   10a90:	94400515 	stw	r17,20(r18)
   10a94:	003f7706 	br	10874 <__alt_mem_mcu_subsystem_ram_0+0x77ff0874>
   10a98:	18c00f04 	addi	r3,r3,60
   10a9c:	213fffc4 	addi	r4,r4,-1
   10aa0:	90c00015 	stw	r3,0(r18)
   10aa4:	91000115 	stw	r4,4(r18)
   10aa8:	003f6906 	br	10850 <__alt_mem_mcu_subsystem_ram_0+0x77ff0850>
   10aac:	18c00f04 	addi	r3,r3,60
   10ab0:	213fffc4 	addi	r4,r4,-1
   10ab4:	90c00115 	stw	r3,4(r18)
   10ab8:	91000215 	stw	r4,8(r18)
   10abc:	003f6706 	br	1085c <__alt_mem_mcu_subsystem_ram_0+0x77ff085c>
   10ac0:	18c00604 	addi	r3,r3,24
   10ac4:	10bfffc4 	addi	r2,r2,-1
   10ac8:	90c00215 	stw	r3,8(r18)
   10acc:	90800315 	stw	r2,12(r18)
   10ad0:	003f6406 	br	10864 <__alt_mem_mcu_subsystem_ram_0+0x77ff0864>

00010ad4 <mktime>:
   10ad4:	defff804 	addi	sp,sp,-32
   10ad8:	dfc00715 	stw	ra,28(sp)
   10adc:	dd400515 	stw	r21,20(sp)
   10ae0:	dd000415 	stw	r20,16(sp)
   10ae4:	dcc00315 	stw	r19,12(sp)
   10ae8:	dc800215 	stw	r18,8(sp)
   10aec:	dc400115 	stw	r17,4(sp)
   10af0:	2025883a 	mov	r18,r4
   10af4:	dd800615 	stw	r22,24(sp)
   10af8:	dc000015 	stw	r16,0(sp)
   10afc:	00187040 	call	18704 <__gettzinfo>
   10b00:	9009883a 	mov	r4,r18
   10b04:	1029883a 	mov	r20,r2
   10b08:	00108240 	call	10824 <validate_structure>
   10b0c:	90c00417 	ldw	r3,16(r18)
   10b10:	90800117 	ldw	r2,4(r18)
   10b14:	95400217 	ldw	r21,8(r18)
   10b18:	180c90ba 	slli	r6,r3,2
   10b1c:	010000b4 	movhi	r4,2
   10b20:	10800f24 	muli	r2,r2,60
   10b24:	91400017 	ldw	r5,0(r18)
   10b28:	94400317 	ldw	r17,12(r18)
   10b2c:	3109883a 	add	r4,r6,r4
   10b30:	ad438424 	muli	r21,r21,3600
   10b34:	211ada17 	ldw	r4,27496(r4)
   10b38:	1145883a 	add	r2,r2,r5
   10b3c:	8c7fffc4 	addi	r17,r17,-1
   10b40:	18c00088 	cmpgei	r3,r3,2
   10b44:	94c00517 	ldw	r19,20(r18)
   10b48:	156b883a 	add	r21,r2,r21
   10b4c:	8923883a 	add	r17,r17,r4
   10b50:	18000226 	beq	r3,zero,10b5c <mktime+0x88>
   10b54:	988000cc 	andi	r2,r19,3
   10b58:	10006526 	beq	r2,zero,10cf0 <mktime+0x21c>
   10b5c:	98c9c404 	addi	r3,r19,10000
   10b60:	94400715 	stw	r17,28(r18)
   10b64:	18d38868 	cmpgeui	r3,r3,20001
   10b68:	1800b11e 	bne	r3,zero,10e30 <mktime+0x35c>
   10b6c:	988011d0 	cmplti	r2,r19,71
   10b70:	10003f1e 	bne	r2,zero,10c70 <mktime+0x19c>
   10b74:	04001184 	movi	r16,70
   10b78:	00000a06 	br	10ba4 <mktime+0xd0>
   10b7c:	000d6600 	call	d660 <__modsi3>
   10b80:	8101db04 	addi	r4,r16,1900
   10b84:	01406404 	movi	r5,400
   10b88:	1000021e 	bne	r2,zero,10b94 <mktime+0xc0>
   10b8c:	000d6600 	call	d660 <__modsi3>
   10b90:	1000081e 	bne	r2,zero,10bb4 <mktime+0xe0>
   10b94:	00805b84 	movi	r2,366
   10b98:	84000044 	addi	r16,r16,1
   10b9c:	88a3883a 	add	r17,r17,r2
   10ba0:	84c00826 	beq	r16,r19,10bc4 <mktime+0xf0>
   10ba4:	808000cc 	andi	r2,r16,3
   10ba8:	8009883a 	mov	r4,r16
   10bac:	01401904 	movi	r5,100
   10bb0:	103ff226 	beq	r2,zero,10b7c <__alt_mem_mcu_subsystem_ram_0+0x77ff0b7c>
   10bb4:	00805b44 	movi	r2,365
   10bb8:	84000044 	addi	r16,r16,1
   10bbc:	88a3883a 	add	r17,r17,r2
   10bc0:	84fff81e 	bne	r16,r19,10ba4 <__alt_mem_mcu_subsystem_ram_0+0x77ff0ba4>
   10bc4:	00800074 	movhi	r2,1
   10bc8:	10946004 	addi	r2,r2,20864
   10bcc:	8885383a 	mul	r2,r17,r2
   10bd0:	156b883a 	add	r21,r2,r21
   10bd4:	00135500 	call	13550 <__tz_lock>
   10bd8:	00135580 	call	13558 <_tzset_unlocked>
   10bdc:	008000f4 	movhi	r2,3
   10be0:	14eb2917 	ldw	r19,-21340(r2)
   10be4:	98005b26 	beq	r19,zero,10d54 <mktime+0x280>
   10be8:	91000517 	ldw	r4,20(r18)
   10bec:	95800817 	ldw	r22,32(r18)
   10bf0:	2101db04 	addi	r4,r4,1900
   10bf4:	b027883a 	mov	r19,r22
   10bf8:	0580010e 	bge	zero,r22,10c00 <mktime+0x12c>
   10bfc:	04c00044 	movi	r19,1
   10c00:	a0800117 	ldw	r2,4(r20)
   10c04:	11004226 	beq	r2,r4,10d10 <mktime+0x23c>
   10c08:	00133280 	call	13328 <__tzcalc_limits>
   10c0c:	1000401e 	bne	r2,zero,10d10 <mktime+0x23c>
   10c10:	98800060 	cmpeqi	r2,r19,1
   10c14:	10004f26 	beq	r2,zero,10d54 <mktime+0x280>
   10c18:	a0c00f17 	ldw	r3,60(r20)
   10c1c:	a8eb883a 	add	r21,r21,r3
   10c20:	04c00044 	movi	r19,1
   10c24:	00135540 	call	13554 <__tz_unlock>
   10c28:	014001c4 	movi	r5,7
   10c2c:	94c00815 	stw	r19,32(r18)
   10c30:	89000104 	addi	r4,r17,4
   10c34:	000d6600 	call	d660 <__modsi3>
   10c38:	1000010e 	bge	r2,zero,10c40 <mktime+0x16c>
   10c3c:	108001c4 	addi	r2,r2,7
   10c40:	90800615 	stw	r2,24(r18)
   10c44:	a805883a 	mov	r2,r21
   10c48:	dfc00717 	ldw	ra,28(sp)
   10c4c:	dd800617 	ldw	r22,24(sp)
   10c50:	dd400517 	ldw	r21,20(sp)
   10c54:	dd000417 	ldw	r20,16(sp)
   10c58:	dcc00317 	ldw	r19,12(sp)
   10c5c:	dc800217 	ldw	r18,8(sp)
   10c60:	dc400117 	ldw	r17,4(sp)
   10c64:	dc000017 	ldw	r16,0(sp)
   10c68:	dec00804 	addi	sp,sp,32
   10c6c:	f800283a 	ret
   10c70:	988011a0 	cmpeqi	r2,r19,70
   10c74:	10003a1e 	bne	r2,zero,10d60 <mktime+0x28c>
   10c78:	98801160 	cmpeqi	r2,r19,69
   10c7c:	04001144 	movi	r16,69
   10c80:	1000181e 	bne	r2,zero,10ce4 <mktime+0x210>
   10c84:	808000cc 	andi	r2,r16,3
   10c88:	8009883a 	mov	r4,r16
   10c8c:	01401904 	movi	r5,100
   10c90:	1000061e 	bne	r2,zero,10cac <mktime+0x1d8>
   10c94:	000d6600 	call	d660 <__modsi3>
   10c98:	8101db04 	addi	r4,r16,1900
   10c9c:	01406404 	movi	r5,400
   10ca0:	1000191e 	bne	r2,zero,10d08 <mktime+0x234>
   10ca4:	000d6600 	call	d660 <__modsi3>
   10ca8:	10001726 	beq	r2,zero,10d08 <mktime+0x234>
   10cac:	00805b44 	movi	r2,365
   10cb0:	843fffc4 	addi	r16,r16,-1
   10cb4:	88a3c83a 	sub	r17,r17,r2
   10cb8:	84fff21e 	bne	r16,r19,10c84 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c84>
   10cbc:	808000cc 	andi	r2,r16,3
   10cc0:	1000081e 	bne	r2,zero,10ce4 <mktime+0x210>
   10cc4:	01401904 	movi	r5,100
   10cc8:	8009883a 	mov	r4,r16
   10ccc:	000d6600 	call	d660 <__modsi3>
   10cd0:	1000551e 	bne	r2,zero,10e28 <mktime+0x354>
   10cd4:	01406404 	movi	r5,400
   10cd8:	8101db04 	addi	r4,r16,1900
   10cdc:	000d6600 	call	d660 <__modsi3>
   10ce0:	10005126 	beq	r2,zero,10e28 <mktime+0x354>
   10ce4:	00805b44 	movi	r2,365
   10ce8:	88a3c83a 	sub	r17,r17,r2
   10cec:	003fb506 	br	10bc4 <__alt_mem_mcu_subsystem_ram_0+0x77ff0bc4>
   10cf0:	01401904 	movi	r5,100
   10cf4:	9809883a 	mov	r4,r19
   10cf8:	000d6600 	call	d660 <__modsi3>
   10cfc:	10001a26 	beq	r2,zero,10d68 <mktime+0x294>
   10d00:	8c400044 	addi	r17,r17,1
   10d04:	003f9506 	br	10b5c <__alt_mem_mcu_subsystem_ram_0+0x77ff0b5c>
   10d08:	00805b84 	movi	r2,366
   10d0c:	003fe806 	br	10cb0 <__alt_mem_mcu_subsystem_ram_0+0x77ff0cb0>
   10d10:	a1000e17 	ldw	r4,56(r20)
   10d14:	a0800817 	ldw	r2,32(r20)
   10d18:	a0c00f17 	ldw	r3,60(r20)
   10d1c:	208bc83a 	sub	r5,r4,r2
   10d20:	a9400216 	blt	r21,r5,10d2c <mktime+0x258>
   10d24:	20c9c83a 	sub	r4,r4,r3
   10d28:	a93fb916 	blt	r21,r4,10c10 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c10>
   10d2c:	a1000717 	ldw	r4,28(r20)
   10d30:	a4c00017 	ldw	r19,0(r20)
   10d34:	20c9c83a 	sub	r4,r4,r3
   10d38:	98001026 	beq	r19,zero,10d7c <mktime+0x2a8>
   10d3c:	a9003716 	blt	r21,r4,10e1c <mktime+0x348>
   10d40:	a940360e 	bge	r21,r5,10e1c <mktime+0x348>
   10d44:	b03fb51e 	bne	r22,zero,10c1c <__alt_mem_mcu_subsystem_ram_0+0x77ff0c1c>
   10d48:	10c5c83a 	sub	r2,r2,r3
   10d4c:	04c00044 	movi	r19,1
   10d50:	00001006 	br	10d94 <mktime+0x2c0>
   10d54:	a0800817 	ldw	r2,32(r20)
   10d58:	a8ab883a 	add	r21,r21,r2
   10d5c:	003fb106 	br	10c24 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c24>
   10d60:	04001184 	movi	r16,70
   10d64:	003f9706 	br	10bc4 <__alt_mem_mcu_subsystem_ram_0+0x77ff0bc4>
   10d68:	01406404 	movi	r5,400
   10d6c:	9901db04 	addi	r4,r19,1900
   10d70:	000d6600 	call	d660 <__modsi3>
   10d74:	103f791e 	bne	r2,zero,10b5c <__alt_mem_mcu_subsystem_ram_0+0x77ff0b5c>
   10d78:	003fe106 	br	10d00 <__alt_mem_mcu_subsystem_ram_0+0x77ff0d00>
   10d7c:	a900240e 	bge	r21,r4,10e10 <mktime+0x33c>
   10d80:	a9402316 	blt	r21,r5,10e10 <mktime+0x33c>
   10d84:	05bff40e 	bge	zero,r22,10d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff0d58>
   10d88:	10c5c83a 	sub	r2,r2,r3
   10d8c:	0085c83a 	sub	r2,zero,r2
   10d90:	0027883a 	mov	r19,zero
   10d94:	90c00017 	ldw	r3,0(r18)
   10d98:	9009883a 	mov	r4,r18
   10d9c:	95800317 	ldw	r22,12(r18)
   10da0:	1887883a 	add	r3,r3,r2
   10da4:	90c00015 	stw	r3,0(r18)
   10da8:	a8ab883a 	add	r21,r21,r2
   10dac:	00108240 	call	10824 <validate_structure>
   10db0:	90800317 	ldw	r2,12(r18)
   10db4:	1585c83a 	sub	r2,r2,r22
   10db8:	103f9526 	beq	r2,zero,10c10 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c10>
   10dbc:	10c00088 	cmpgei	r3,r2,2
   10dc0:	18002c26 	beq	r3,zero,10e74 <mktime+0x3a0>
   10dc4:	00bfffc4 	movi	r2,-1
   10dc8:	95800717 	ldw	r22,28(r18)
   10dcc:	88a3883a 	add	r17,r17,r2
   10dd0:	15ad883a 	add	r22,r2,r22
   10dd4:	b0001a16 	blt	r22,zero,10e40 <mktime+0x36c>
   10dd8:	808000cc 	andi	r2,r16,3
   10ddc:	1000161e 	bne	r2,zero,10e38 <mktime+0x364>
   10de0:	01401904 	movi	r5,100
   10de4:	8009883a 	mov	r4,r16
   10de8:	000d6600 	call	d660 <__modsi3>
   10dec:	1000041e 	bne	r2,zero,10e00 <mktime+0x32c>
   10df0:	01406404 	movi	r5,400
   10df4:	8101db04 	addi	r4,r16,1900
   10df8:	000d6600 	call	d660 <__modsi3>
   10dfc:	10000e1e 	bne	r2,zero,10e38 <mktime+0x364>
   10e00:	00805b84 	movi	r2,366
   10e04:	b0801f0e 	bge	r22,r2,10e84 <mktime+0x3b0>
   10e08:	95800715 	stw	r22,28(r18)
   10e0c:	003f8006 	br	10c10 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c10>
   10e10:	b03f8216 	blt	r22,zero,10c1c <__alt_mem_mcu_subsystem_ram_0+0x77ff0c1c>
   10e14:	b03f811e 	bne	r22,zero,10c1c <__alt_mem_mcu_subsystem_ram_0+0x77ff0c1c>
   10e18:	003fcb06 	br	10d48 <__alt_mem_mcu_subsystem_ram_0+0x77ff0d48>
   10e1c:	05bfda16 	blt	zero,r22,10d88 <__alt_mem_mcu_subsystem_ram_0+0x77ff0d88>
   10e20:	0027883a 	mov	r19,zero
   10e24:	003fcc06 	br	10d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff0d58>
   10e28:	00805b84 	movi	r2,366
   10e2c:	003fae06 	br	10ce8 <__alt_mem_mcu_subsystem_ram_0+0x77ff0ce8>
   10e30:	057fffc4 	movi	r21,-1
   10e34:	003f8306 	br	10c44 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c44>
   10e38:	00805b44 	movi	r2,365
   10e3c:	003ff106 	br	10e04 <__alt_mem_mcu_subsystem_ram_0+0x77ff0e04>
   10e40:	813fffc4 	addi	r4,r16,-1
   10e44:	208000cc 	andi	r2,r4,3
   10e48:	1000101e 	bne	r2,zero,10e8c <mktime+0x3b8>
   10e4c:	01401904 	movi	r5,100
   10e50:	000d6600 	call	d660 <__modsi3>
   10e54:	1000041e 	bne	r2,zero,10e68 <mktime+0x394>
   10e58:	01406404 	movi	r5,400
   10e5c:	8101dac4 	addi	r4,r16,1899
   10e60:	000d6600 	call	d660 <__modsi3>
   10e64:	1000091e 	bne	r2,zero,10e8c <mktime+0x3b8>
   10e68:	00805b44 	movi	r2,365
   10e6c:	90800715 	stw	r2,28(r18)
   10e70:	003f6706 	br	10c10 <__alt_mem_mcu_subsystem_ram_0+0x77ff0c10>
   10e74:	10ffffd0 	cmplti	r3,r2,-1
   10e78:	183fd326 	beq	r3,zero,10dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff0dc8>
   10e7c:	00800044 	movi	r2,1
   10e80:	003fd106 	br	10dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff0dc8>
   10e84:	b085c83a 	sub	r2,r22,r2
   10e88:	003ff806 	br	10e6c <__alt_mem_mcu_subsystem_ram_0+0x77ff0e6c>
   10e8c:	00805b04 	movi	r2,364
   10e90:	003ff606 	br	10e6c <__alt_mem_mcu_subsystem_ram_0+0x77ff0e6c>

00010e94 <_printf_r>:
   10e94:	defffd04 	addi	sp,sp,-12
   10e98:	2805883a 	mov	r2,r5
   10e9c:	dfc00015 	stw	ra,0(sp)
   10ea0:	d9800115 	stw	r6,4(sp)
   10ea4:	d9c00215 	stw	r7,8(sp)
   10ea8:	21400217 	ldw	r5,8(r4)
   10eac:	d9c00104 	addi	r7,sp,4
   10eb0:	100d883a 	mov	r6,r2
   10eb4:	0013a940 	call	13a94 <___vfprintf_internal_r>
   10eb8:	dfc00017 	ldw	ra,0(sp)
   10ebc:	dec00304 	addi	sp,sp,12
   10ec0:	f800283a 	ret

00010ec4 <printf>:
   10ec4:	defffc04 	addi	sp,sp,-16
   10ec8:	dfc00015 	stw	ra,0(sp)
   10ecc:	d9400115 	stw	r5,4(sp)
   10ed0:	d9800215 	stw	r6,8(sp)
   10ed4:	d9c00315 	stw	r7,12(sp)
   10ed8:	008000f4 	movhi	r2,3
   10edc:	10a3b117 	ldw	r2,-28988(r2)
   10ee0:	200b883a 	mov	r5,r4
   10ee4:	d9800104 	addi	r6,sp,4
   10ee8:	11000217 	ldw	r4,8(r2)
   10eec:	0015a480 	call	15a48 <__vfprintf_internal>
   10ef0:	dfc00017 	ldw	ra,0(sp)
   10ef4:	dec00404 	addi	sp,sp,16
   10ef8:	f800283a 	ret

00010efc <_putchar_r>:
   10efc:	21800217 	ldw	r6,8(r4)
   10f00:	0019a881 	jmpi	19a88 <_putc_r>

00010f04 <putchar>:
   10f04:	008000f4 	movhi	r2,3
   10f08:	10a3b117 	ldw	r2,-28988(r2)
   10f0c:	200b883a 	mov	r5,r4
   10f10:	11800217 	ldw	r6,8(r2)
   10f14:	1009883a 	mov	r4,r2
   10f18:	0019a881 	jmpi	19a88 <_putc_r>

00010f1c <_puts_r>:
   10f1c:	defff504 	addi	sp,sp,-44
   10f20:	dc000815 	stw	r16,32(sp)
   10f24:	2021883a 	mov	r16,r4
   10f28:	2809883a 	mov	r4,r5
   10f2c:	dc400915 	stw	r17,36(sp)
   10f30:	dfc00a15 	stw	ra,40(sp)
   10f34:	2823883a 	mov	r17,r5
   10f38:	00112e40 	call	112e4 <strlen>
   10f3c:	11000044 	addi	r4,r2,1
   10f40:	d8800515 	stw	r2,20(sp)
   10f44:	00800044 	movi	r2,1
   10f48:	00c000b4 	movhi	r3,2
   10f4c:	d8800715 	stw	r2,28(sp)
   10f50:	d8800404 	addi	r2,sp,16
   10f54:	18daf204 	addi	r3,r3,27592
   10f58:	d8800115 	stw	r2,4(sp)
   10f5c:	00800084 	movi	r2,2
   10f60:	dc400415 	stw	r17,16(sp)
   10f64:	d8c00615 	stw	r3,24(sp)
   10f68:	d9000315 	stw	r4,12(sp)
   10f6c:	d8800215 	stw	r2,8(sp)
   10f70:	81400217 	ldw	r5,8(r16)
   10f74:	80000226 	beq	r16,zero,10f80 <_puts_r+0x64>
   10f78:	80800e17 	ldw	r2,56(r16)
   10f7c:	10001326 	beq	r2,zero,10fcc <_puts_r+0xb0>
   10f80:	2880030b 	ldhu	r2,12(r5)
   10f84:	10c8000c 	andi	r3,r2,8192
   10f88:	1800061e 	bne	r3,zero,10fa4 <_puts_r+0x88>
   10f8c:	28c01917 	ldw	r3,100(r5)
   10f90:	0137ffc4 	movi	r4,-8193
   10f94:	10880014 	ori	r2,r2,8192
   10f98:	1906703a 	and	r3,r3,r4
   10f9c:	2880030d 	sth	r2,12(r5)
   10fa0:	28c01915 	stw	r3,100(r5)
   10fa4:	d9800104 	addi	r6,sp,4
   10fa8:	8009883a 	mov	r4,r16
   10fac:	0017ff00 	call	17ff0 <__sfvwrite_r>
   10fb0:	10000b1e 	bne	r2,zero,10fe0 <_puts_r+0xc4>
   10fb4:	00800284 	movi	r2,10
   10fb8:	dfc00a17 	ldw	ra,40(sp)
   10fbc:	dc400917 	ldw	r17,36(sp)
   10fc0:	dc000817 	ldw	r16,32(sp)
   10fc4:	dec00b04 	addi	sp,sp,44
   10fc8:	f800283a 	ret
   10fcc:	8009883a 	mov	r4,r16
   10fd0:	d9400015 	stw	r5,0(sp)
   10fd4:	0017b9c0 	call	17b9c <__sinit>
   10fd8:	d9400017 	ldw	r5,0(sp)
   10fdc:	003fe806 	br	10f80 <__alt_mem_mcu_subsystem_ram_0+0x77ff0f80>
   10fe0:	00bfffc4 	movi	r2,-1
   10fe4:	003ff406 	br	10fb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff0fb8>

00010fe8 <puts>:
   10fe8:	008000f4 	movhi	r2,3
   10fec:	200b883a 	mov	r5,r4
   10ff0:	1123b117 	ldw	r4,-28988(r2)
   10ff4:	0010f1c1 	jmpi	10f1c <_puts_r>

00010ff8 <__srget_r>:
   10ff8:	defffd04 	addi	sp,sp,-12
   10ffc:	dc400115 	stw	r17,4(sp)
   11000:	dc000015 	stw	r16,0(sp)
   11004:	dfc00215 	stw	ra,8(sp)
   11008:	2023883a 	mov	r17,r4
   1100c:	2821883a 	mov	r16,r5
   11010:	20000226 	beq	r4,zero,1101c <__srget_r+0x24>
   11014:	20800e17 	ldw	r2,56(r4)
   11018:	10001026 	beq	r2,zero,1105c <__srget_r+0x64>
   1101c:	800b883a 	mov	r5,r16
   11020:	8809883a 	mov	r4,r17
   11024:	001a1c80 	call	1a1c8 <__srefill_r>
   11028:	10000e1e 	bne	r2,zero,11064 <__srget_r+0x6c>
   1102c:	80c00017 	ldw	r3,0(r16)
   11030:	80800117 	ldw	r2,4(r16)
   11034:	19000044 	addi	r4,r3,1
   11038:	10bfffc4 	addi	r2,r2,-1
   1103c:	80800115 	stw	r2,4(r16)
   11040:	81000015 	stw	r4,0(r16)
   11044:	18800003 	ldbu	r2,0(r3)
   11048:	dfc00217 	ldw	ra,8(sp)
   1104c:	dc400117 	ldw	r17,4(sp)
   11050:	dc000017 	ldw	r16,0(sp)
   11054:	dec00304 	addi	sp,sp,12
   11058:	f800283a 	ret
   1105c:	0017b9c0 	call	17b9c <__sinit>
   11060:	003fee06 	br	1101c <__alt_mem_mcu_subsystem_ram_0+0x77ff101c>
   11064:	00bfffc4 	movi	r2,-1
   11068:	003ff706 	br	11048 <__alt_mem_mcu_subsystem_ram_0+0x77ff1048>

0001106c <__srget>:
   1106c:	008000f4 	movhi	r2,3
   11070:	200b883a 	mov	r5,r4
   11074:	1123b117 	ldw	r4,-28988(r2)
   11078:	0010ff81 	jmpi	10ff8 <__srget_r>

0001107c <_sbrk_r>:
   1107c:	defffe04 	addi	sp,sp,-8
   11080:	dc000015 	stw	r16,0(sp)
   11084:	008000f4 	movhi	r2,3
   11088:	2021883a 	mov	r16,r4
   1108c:	2809883a 	mov	r4,r5
   11090:	dfc00115 	stw	ra,4(sp)
   11094:	102b2a15 	stw	zero,-21336(r2)
   11098:	00205a40 	call	205a4 <sbrk>
   1109c:	10ffffd8 	cmpnei	r3,r2,-1
   110a0:	18000426 	beq	r3,zero,110b4 <_sbrk_r+0x38>
   110a4:	dfc00117 	ldw	ra,4(sp)
   110a8:	dc000017 	ldw	r16,0(sp)
   110ac:	dec00204 	addi	sp,sp,8
   110b0:	f800283a 	ret
   110b4:	00c000f4 	movhi	r3,3
   110b8:	18eb2a17 	ldw	r3,-21336(r3)
   110bc:	183ff926 	beq	r3,zero,110a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff10a4>
   110c0:	80c00015 	stw	r3,0(r16)
   110c4:	dfc00117 	ldw	ra,4(sp)
   110c8:	dc000017 	ldw	r16,0(sp)
   110cc:	dec00204 	addi	sp,sp,8
   110d0:	f800283a 	ret

000110d4 <_sprintf_r>:
   110d4:	deffe404 	addi	sp,sp,-112
   110d8:	2811883a 	mov	r8,r5
   110dc:	dfc01a15 	stw	ra,104(sp)
   110e0:	d9c01b15 	stw	r7,108(sp)
   110e4:	00a00034 	movhi	r2,32768
   110e8:	00fffff4 	movhi	r3,65535
   110ec:	10bfffc4 	addi	r2,r2,-1
   110f0:	18c08204 	addi	r3,r3,520
   110f4:	d9c01b04 	addi	r7,sp,108
   110f8:	d80b883a 	mov	r5,sp
   110fc:	d8c00315 	stw	r3,12(sp)
   11100:	da000015 	stw	r8,0(sp)
   11104:	da000415 	stw	r8,16(sp)
   11108:	d8800515 	stw	r2,20(sp)
   1110c:	d8800215 	stw	r2,8(sp)
   11110:	00113740 	call	11374 <___svfprintf_internal_r>
   11114:	d8c00017 	ldw	r3,0(sp)
   11118:	18000005 	stb	zero,0(r3)
   1111c:	dfc01a17 	ldw	ra,104(sp)
   11120:	dec01c04 	addi	sp,sp,112
   11124:	f800283a 	ret

00011128 <sprintf>:
   11128:	deffe304 	addi	sp,sp,-116
   1112c:	2011883a 	mov	r8,r4
   11130:	dfc01a15 	stw	ra,104(sp)
   11134:	d9801b15 	stw	r6,108(sp)
   11138:	d9c01c15 	stw	r7,112(sp)
   1113c:	008000f4 	movhi	r2,3
   11140:	1123b117 	ldw	r4,-28988(r2)
   11144:	00fffff4 	movhi	r3,65535
   11148:	00a00034 	movhi	r2,32768
   1114c:	10bfffc4 	addi	r2,r2,-1
   11150:	18c08204 	addi	r3,r3,520
   11154:	280d883a 	mov	r6,r5
   11158:	d9c01b04 	addi	r7,sp,108
   1115c:	d80b883a 	mov	r5,sp
   11160:	d8c00315 	stw	r3,12(sp)
   11164:	da000015 	stw	r8,0(sp)
   11168:	da000415 	stw	r8,16(sp)
   1116c:	d8800515 	stw	r2,20(sp)
   11170:	d8800215 	stw	r2,8(sp)
   11174:	00113740 	call	11374 <___svfprintf_internal_r>
   11178:	d8c00017 	ldw	r3,0(sp)
   1117c:	18000005 	stb	zero,0(r3)
   11180:	dfc01a17 	ldw	ra,104(sp)
   11184:	dec01d04 	addi	sp,sp,116
   11188:	f800283a 	ret

0001118c <strcmp>:
   1118c:	2144b03a 	or	r2,r4,r5
   11190:	108000cc 	andi	r2,r2,3
   11194:	1000171e 	bne	r2,zero,111f4 <strcmp+0x68>
   11198:	20800017 	ldw	r2,0(r4)
   1119c:	28c00017 	ldw	r3,0(r5)
   111a0:	10c0141e 	bne	r2,r3,111f4 <strcmp+0x68>
   111a4:	027fbff4 	movhi	r9,65279
   111a8:	4a7fbfc4 	addi	r9,r9,-257
   111ac:	1247883a 	add	r3,r2,r9
   111b0:	02202074 	movhi	r8,32897
   111b4:	0084303a 	nor	r2,zero,r2
   111b8:	1884703a 	and	r2,r3,r2
   111bc:	42202004 	addi	r8,r8,-32640
   111c0:	1204703a 	and	r2,r2,r8
   111c4:	10000226 	beq	r2,zero,111d0 <strcmp+0x44>
   111c8:	00002106 	br	11250 <strcmp+0xc4>
   111cc:	1000201e 	bne	r2,zero,11250 <strcmp+0xc4>
   111d0:	21000104 	addi	r4,r4,4
   111d4:	20c00017 	ldw	r3,0(r4)
   111d8:	29400104 	addi	r5,r5,4
   111dc:	29800017 	ldw	r6,0(r5)
   111e0:	1a45883a 	add	r2,r3,r9
   111e4:	00ce303a 	nor	r7,zero,r3
   111e8:	11c4703a 	and	r2,r2,r7
   111ec:	1204703a 	and	r2,r2,r8
   111f0:	19bff626 	beq	r3,r6,111cc <__alt_mem_mcu_subsystem_ram_0+0x77ff11cc>
   111f4:	20800003 	ldbu	r2,0(r4)
   111f8:	10c03fcc 	andi	r3,r2,255
   111fc:	18c0201c 	xori	r3,r3,128
   11200:	18ffe004 	addi	r3,r3,-128
   11204:	1800081e 	bne	r3,zero,11228 <strcmp+0x9c>
   11208:	00000d06 	br	11240 <strcmp+0xb4>
   1120c:	21000044 	addi	r4,r4,1
   11210:	20800003 	ldbu	r2,0(r4)
   11214:	29400044 	addi	r5,r5,1
   11218:	10c03fcc 	andi	r3,r2,255
   1121c:	18c0201c 	xori	r3,r3,128
   11220:	18ffe004 	addi	r3,r3,-128
   11224:	18000626 	beq	r3,zero,11240 <strcmp+0xb4>
   11228:	29800007 	ldb	r6,0(r5)
   1122c:	19bff726 	beq	r3,r6,1120c <__alt_mem_mcu_subsystem_ram_0+0x77ff120c>
   11230:	28c00003 	ldbu	r3,0(r5)
   11234:	10803fcc 	andi	r2,r2,255
   11238:	10c5c83a 	sub	r2,r2,r3
   1123c:	f800283a 	ret
   11240:	28c00003 	ldbu	r3,0(r5)
   11244:	0005883a 	mov	r2,zero
   11248:	10c5c83a 	sub	r2,r2,r3
   1124c:	f800283a 	ret
   11250:	0005883a 	mov	r2,zero
   11254:	f800283a 	ret

00011258 <strcpy>:
   11258:	2906b03a 	or	r3,r5,r4
   1125c:	18c000cc 	andi	r3,r3,3
   11260:	2005883a 	mov	r2,r4
   11264:	18001d1e 	bne	r3,zero,112dc <strcpy+0x84>
   11268:	29c00017 	ldw	r7,0(r5)
   1126c:	027fbff4 	movhi	r9,65279
   11270:	4a7fbfc4 	addi	r9,r9,-257
   11274:	3a47883a 	add	r3,r7,r9
   11278:	01c8303a 	nor	r4,zero,r7
   1127c:	02202074 	movhi	r8,32897
   11280:	1906703a 	and	r3,r3,r4
   11284:	42202004 	addi	r8,r8,-32640
   11288:	1a06703a 	and	r3,r3,r8
   1128c:	100d883a 	mov	r6,r2
   11290:	1800091e 	bne	r3,zero,112b8 <strcpy+0x60>
   11294:	31800104 	addi	r6,r6,4
   11298:	29400104 	addi	r5,r5,4
   1129c:	31ffff15 	stw	r7,-4(r6)
   112a0:	29c00017 	ldw	r7,0(r5)
   112a4:	3a47883a 	add	r3,r7,r9
   112a8:	01d4303a 	nor	r10,zero,r7
   112ac:	1a86703a 	and	r3,r3,r10
   112b0:	1a06703a 	and	r3,r3,r8
   112b4:	183ff726 	beq	r3,zero,11294 <__alt_mem_mcu_subsystem_ram_0+0x77ff1294>
   112b8:	29400044 	addi	r5,r5,1
   112bc:	28ffffc3 	ldbu	r3,-1(r5)
   112c0:	31800044 	addi	r6,r6,1
   112c4:	30ffffc5 	stb	r3,-1(r6)
   112c8:	18c03fcc 	andi	r3,r3,255
   112cc:	18c0201c 	xori	r3,r3,128
   112d0:	18ffe004 	addi	r3,r3,-128
   112d4:	183ff81e 	bne	r3,zero,112b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff12b8>
   112d8:	f800283a 	ret
   112dc:	200d883a 	mov	r6,r4
   112e0:	003ff506 	br	112b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff12b8>

000112e4 <strlen>:
   112e4:	20c000cc 	andi	r3,r4,3
   112e8:	2005883a 	mov	r2,r4
   112ec:	18000826 	beq	r3,zero,11310 <strlen+0x2c>
   112f0:	20c00007 	ldb	r3,0(r4)
   112f4:	1800031e 	bne	r3,zero,11304 <strlen+0x20>
   112f8:	00001c06 	br	1136c <strlen+0x88>
   112fc:	20c00007 	ldb	r3,0(r4)
   11300:	18001826 	beq	r3,zero,11364 <strlen+0x80>
   11304:	21000044 	addi	r4,r4,1
   11308:	20c000cc 	andi	r3,r4,3
   1130c:	183ffb1e 	bne	r3,zero,112fc <__alt_mem_mcu_subsystem_ram_0+0x77ff12fc>
   11310:	21400017 	ldw	r5,0(r4)
   11314:	01ffbff4 	movhi	r7,65279
   11318:	39ffbfc4 	addi	r7,r7,-257
   1131c:	29c7883a 	add	r3,r5,r7
   11320:	01a02074 	movhi	r6,32897
   11324:	014a303a 	nor	r5,zero,r5
   11328:	1946703a 	and	r3,r3,r5
   1132c:	31a02004 	addi	r6,r6,-32640
   11330:	1986703a 	and	r3,r3,r6
   11334:	1800091e 	bne	r3,zero,1135c <strlen+0x78>
   11338:	21000104 	addi	r4,r4,4
   1133c:	21400017 	ldw	r5,0(r4)
   11340:	29c7883a 	add	r3,r5,r7
   11344:	014a303a 	nor	r5,zero,r5
   11348:	1946703a 	and	r3,r3,r5
   1134c:	1986703a 	and	r3,r3,r6
   11350:	183ff926 	beq	r3,zero,11338 <__alt_mem_mcu_subsystem_ram_0+0x77ff1338>
   11354:	00000106 	br	1135c <strlen+0x78>
   11358:	21000044 	addi	r4,r4,1
   1135c:	20c00007 	ldb	r3,0(r4)
   11360:	183ffd1e 	bne	r3,zero,11358 <__alt_mem_mcu_subsystem_ram_0+0x77ff1358>
   11364:	2085c83a 	sub	r2,r4,r2
   11368:	f800283a 	ret
   1136c:	0005883a 	mov	r2,zero
   11370:	f800283a 	ret

00011374 <___svfprintf_internal_r>:
   11374:	deffbd04 	addi	sp,sp,-268
   11378:	dfc04215 	stw	ra,264(sp)
   1137c:	ddc04015 	stw	r23,256(sp)
   11380:	dc003915 	stw	r16,228(sp)
   11384:	d9400415 	stw	r5,16(sp)
   11388:	2821883a 	mov	r16,r5
   1138c:	d9000515 	stw	r4,20(sp)
   11390:	302f883a 	mov	r23,r6
   11394:	d9c00815 	stw	r7,32(sp)
   11398:	df004115 	stw	fp,260(sp)
   1139c:	dd803f15 	stw	r22,252(sp)
   113a0:	dd403e15 	stw	r21,248(sp)
   113a4:	dd003d15 	stw	r20,244(sp)
   113a8:	dcc03c15 	stw	r19,240(sp)
   113ac:	dc803b15 	stw	r18,236(sp)
   113b0:	dc403a15 	stw	r17,232(sp)
   113b4:	00187180 	call	18718 <_localeconv_r>
   113b8:	10800017 	ldw	r2,0(r2)
   113bc:	1009883a 	mov	r4,r2
   113c0:	d8801015 	stw	r2,64(sp)
   113c4:	00112e40 	call	112e4 <strlen>
   113c8:	d8800f15 	stw	r2,60(sp)
   113cc:	8080030b 	ldhu	r2,12(r16)
   113d0:	1080200c 	andi	r2,r2,128
   113d4:	10000226 	beq	r2,zero,113e0 <___svfprintf_internal_r+0x6c>
   113d8:	80800417 	ldw	r2,16(r16)
   113dc:	10054326 	beq	r2,zero,128ec <___svfprintf_internal_r+0x1578>
   113e0:	dd402904 	addi	r21,sp,164
   113e4:	dd401c15 	stw	r21,112(sp)
   113e8:	d8001e15 	stw	zero,120(sp)
   113ec:	d8001d15 	stw	zero,116(sp)
   113f0:	d8000a15 	stw	zero,40(sp)
   113f4:	d8000b15 	stw	zero,44(sp)
   113f8:	d8000c15 	stw	zero,48(sp)
   113fc:	a811883a 	mov	r8,r21
   11400:	d8000e15 	stw	zero,56(sp)
   11404:	d8001115 	stw	zero,68(sp)
   11408:	d8000615 	stw	zero,24(sp)
   1140c:	b839883a 	mov	fp,r23
   11410:	e0800007 	ldb	r2,0(fp)
   11414:	10008c26 	beq	r2,zero,11648 <___svfprintf_internal_r+0x2d4>
   11418:	10800960 	cmpeqi	r2,r2,37
   1141c:	e021883a 	mov	r16,fp
   11420:	10000226 	beq	r2,zero,1142c <___svfprintf_internal_r+0xb8>
   11424:	00001706 	br	11484 <___svfprintf_internal_r+0x110>
   11428:	18000426 	beq	r3,zero,1143c <___svfprintf_internal_r+0xc8>
   1142c:	84000044 	addi	r16,r16,1
   11430:	80800007 	ldb	r2,0(r16)
   11434:	10c00958 	cmpnei	r3,r2,37
   11438:	103ffb1e 	bne	r2,zero,11428 <__alt_mem_mcu_subsystem_ram_0+0x77ff1428>
   1143c:	8723c83a 	sub	r17,r16,fp
   11440:	88000e26 	beq	r17,zero,1147c <___svfprintf_internal_r+0x108>
   11444:	d8c01e17 	ldw	r3,120(sp)
   11448:	d8801d17 	ldw	r2,116(sp)
   1144c:	47000015 	stw	fp,0(r8)
   11450:	1c47883a 	add	r3,r3,r17
   11454:	10800044 	addi	r2,r2,1
   11458:	d8801d15 	stw	r2,116(sp)
   1145c:	44400115 	stw	r17,4(r8)
   11460:	d8c01e15 	stw	r3,120(sp)
   11464:	10800208 	cmpgei	r2,r2,8
   11468:	1000701e 	bne	r2,zero,1162c <___svfprintf_internal_r+0x2b8>
   1146c:	42000204 	addi	r8,r8,8
   11470:	d8800617 	ldw	r2,24(sp)
   11474:	1445883a 	add	r2,r2,r17
   11478:	d8800615 	stw	r2,24(sp)
   1147c:	80800007 	ldb	r2,0(r16)
   11480:	10007126 	beq	r2,zero,11648 <___svfprintf_internal_r+0x2d4>
   11484:	87000044 	addi	fp,r16,1
   11488:	84000047 	ldb	r16,1(r16)
   1148c:	d8001545 	stb	zero,85(sp)
   11490:	0009883a 	mov	r4,zero
   11494:	000b883a 	mov	r5,zero
   11498:	05bfffc4 	movi	r22,-1
   1149c:	0023883a 	mov	r17,zero
   114a0:	0017883a 	mov	r11,zero
   114a4:	e7000044 	addi	fp,fp,1
   114a8:	80bff804 	addi	r2,r16,-32
   114ac:	10c01668 	cmpgeui	r3,r2,89
   114b0:	1800cd1e 	bne	r3,zero,117e8 <___svfprintf_internal_r+0x474>
   114b4:	100490ba 	slli	r2,r2,2
   114b8:	00c00074 	movhi	r3,1
   114bc:	10c7883a 	add	r3,r2,r3
   114c0:	18853217 	ldw	r2,5320(r3)
   114c4:	1000683a 	jmp	r2
   114c8:	00011d40 	call	11d4 <ad9144_remove+0x38>
   114cc:	000117e8 	cmpgeui	zero,zero,1119
   114d0:	000117e8 	cmpgeui	zero,zero,1119
   114d4:	00011d34 	movhi	zero,1140
   114d8:	000117e8 	cmpgeui	zero,zero,1119
   114dc:	000117e8 	cmpgeui	zero,zero,1119
   114e0:	000117e8 	cmpgeui	zero,zero,1119
   114e4:	000117e8 	cmpgeui	zero,zero,1119
   114e8:	000117e8 	cmpgeui	zero,zero,1119
   114ec:	000117e8 	cmpgeui	zero,zero,1119
   114f0:	00011d0c 	andi	zero,zero,1140
   114f4:	00011e1c 	xori	zero,zero,1144
   114f8:	000117e8 	cmpgeui	zero,zero,1119
   114fc:	00011e04 	movi	zero,1144
   11500:	00011dc0 	call	11dc <ad9144_remove+0x40>
   11504:	000117e8 	cmpgeui	zero,zero,1119
   11508:	00011db4 	movhi	zero,1142
   1150c:	000117b8 	rdprs	zero,zero,1118
   11510:	000117b8 	rdprs	zero,zero,1118
   11514:	000117b8 	rdprs	zero,zero,1118
   11518:	000117b8 	rdprs	zero,zero,1118
   1151c:	000117b8 	rdprs	zero,zero,1118
   11520:	000117b8 	rdprs	zero,zero,1118
   11524:	000117b8 	rdprs	zero,zero,1118
   11528:	000117b8 	rdprs	zero,zero,1118
   1152c:	000117b8 	rdprs	zero,zero,1118
   11530:	000117e8 	cmpgeui	zero,zero,1119
   11534:	000117e8 	cmpgeui	zero,zero,1119
   11538:	000117e8 	cmpgeui	zero,zero,1119
   1153c:	000117e8 	cmpgeui	zero,zero,1119
   11540:	000117e8 	cmpgeui	zero,zero,1119
   11544:	000117e8 	cmpgeui	zero,zero,1119
   11548:	000117e8 	cmpgeui	zero,zero,1119
   1154c:	000117e8 	cmpgeui	zero,zero,1119
   11550:	000117e8 	cmpgeui	zero,zero,1119
   11554:	000117e8 	cmpgeui	zero,zero,1119
   11558:	00011f08 	cmpgei	zero,zero,1148
   1155c:	00011e38 	rdprs	zero,zero,1144
   11560:	000117e8 	cmpgeui	zero,zero,1119
   11564:	00011e38 	rdprs	zero,zero,1144
   11568:	000117e8 	cmpgeui	zero,zero,1119
   1156c:	000117e8 	cmpgeui	zero,zero,1119
   11570:	000117e8 	cmpgeui	zero,zero,1119
   11574:	000117e8 	cmpgeui	zero,zero,1119
   11578:	00011e2c 	andhi	zero,zero,1144
   1157c:	000117e8 	cmpgeui	zero,zero,1119
   11580:	000117e8 	cmpgeui	zero,zero,1119
   11584:	00011708 	cmpgei	zero,zero,1116
   11588:	000117e8 	cmpgeui	zero,zero,1119
   1158c:	000117e8 	cmpgeui	zero,zero,1119
   11590:	000117e8 	cmpgeui	zero,zero,1119
   11594:	000117e8 	cmpgeui	zero,zero,1119
   11598:	000117e8 	cmpgeui	zero,zero,1119
   1159c:	000116a4 	muli	zero,zero,1114
   115a0:	000117e8 	cmpgeui	zero,zero,1119
   115a4:	000117e8 	cmpgeui	zero,zero,1119
   115a8:	00011cc4 	movi	zero,1139
   115ac:	000117e8 	cmpgeui	zero,zero,1119
   115b0:	000117e8 	cmpgeui	zero,zero,1119
   115b4:	000117e8 	cmpgeui	zero,zero,1119
   115b8:	000117e8 	cmpgeui	zero,zero,1119
   115bc:	000117e8 	cmpgeui	zero,zero,1119
   115c0:	000117e8 	cmpgeui	zero,zero,1119
   115c4:	000117e8 	cmpgeui	zero,zero,1119
   115c8:	000117e8 	cmpgeui	zero,zero,1119
   115cc:	000117e8 	cmpgeui	zero,zero,1119
   115d0:	000117e8 	cmpgeui	zero,zero,1119
   115d4:	00011948 	cmpgei	zero,zero,1125
   115d8:	0001190c 	andi	zero,zero,1124
   115dc:	00011e38 	rdprs	zero,zero,1144
   115e0:	00011e38 	rdprs	zero,zero,1144
   115e4:	00011e38 	rdprs	zero,zero,1144
   115e8:	00011900 	call	1190 <ad9144_dac_calibrate+0x130>
   115ec:	0001190c 	andi	zero,zero,1124
   115f0:	000117e8 	cmpgeui	zero,zero,1119
   115f4:	000117e8 	cmpgeui	zero,zero,1119
   115f8:	000118ec 	andhi	zero,zero,1123
   115fc:	000117e8 	cmpgeui	zero,zero,1119
   11600:	000118b0 	cmpltui	zero,zero,1122
   11604:	0001170c 	andi	zero,zero,1116
   11608:	00011800 	call	1180 <ad9144_dac_calibrate+0x120>
   1160c:	000118a4 	muli	zero,zero,1122
   11610:	000117e8 	cmpgeui	zero,zero,1119
   11614:	00011840 	call	1184 <ad9144_dac_calibrate+0x124>
   11618:	000117e8 	cmpgeui	zero,zero,1119
   1161c:	000116a8 	cmpgeui	zero,zero,1114
   11620:	000117e8 	cmpgeui	zero,zero,1119
   11624:	000117e8 	cmpgeui	zero,zero,1119
   11628:	00011d6c 	andhi	zero,zero,1141
   1162c:	d9400417 	ldw	r5,16(sp)
   11630:	d9000517 	ldw	r4,20(sp)
   11634:	d9801c04 	addi	r6,sp,112
   11638:	001a97c0 	call	1a97c <__ssprint_r>
   1163c:	1000081e 	bne	r2,zero,11660 <___svfprintf_internal_r+0x2ec>
   11640:	a811883a 	mov	r8,r21
   11644:	003f8a06 	br	11470 <__alt_mem_mcu_subsystem_ram_0+0x77ff1470>
   11648:	d8801e17 	ldw	r2,120(sp)
   1164c:	10000426 	beq	r2,zero,11660 <___svfprintf_internal_r+0x2ec>
   11650:	d9400417 	ldw	r5,16(sp)
   11654:	d9000517 	ldw	r4,20(sp)
   11658:	d9801c04 	addi	r6,sp,112
   1165c:	001a97c0 	call	1a97c <__ssprint_r>
   11660:	d8800417 	ldw	r2,16(sp)
   11664:	1080030b 	ldhu	r2,12(r2)
   11668:	1080100c 	andi	r2,r2,64
   1166c:	10067c1e 	bne	r2,zero,13060 <___svfprintf_internal_r+0x1cec>
   11670:	d8800617 	ldw	r2,24(sp)
   11674:	dfc04217 	ldw	ra,264(sp)
   11678:	df004117 	ldw	fp,260(sp)
   1167c:	ddc04017 	ldw	r23,256(sp)
   11680:	dd803f17 	ldw	r22,252(sp)
   11684:	dd403e17 	ldw	r21,248(sp)
   11688:	dd003d17 	ldw	r20,244(sp)
   1168c:	dcc03c17 	ldw	r19,240(sp)
   11690:	dc803b17 	ldw	r18,236(sp)
   11694:	dc403a17 	ldw	r17,232(sp)
   11698:	dc003917 	ldw	r16,228(sp)
   1169c:	dec04304 	addi	sp,sp,268
   116a0:	f800283a 	ret
   116a4:	5ac00414 	ori	r11,r11,16
   116a8:	5880080c 	andi	r2,r11,32
   116ac:	1003d626 	beq	r2,zero,12608 <___svfprintf_internal_r+0x1294>
   116b0:	d8c00817 	ldw	r3,32(sp)
   116b4:	00800044 	movi	r2,1
   116b8:	1d000017 	ldw	r20,0(r3)
   116bc:	1dc00117 	ldw	r23,4(r3)
   116c0:	18c00204 	addi	r3,r3,8
   116c4:	d8c00815 	stw	r3,32(sp)
   116c8:	d8001545 	stb	zero,85(sp)
   116cc:	b0ffffe0 	cmpeqi	r3,r22,-1
   116d0:	1800191e 	bne	r3,zero,11738 <___svfprintf_internal_r+0x3c4>
   116d4:	0019883a 	mov	r12,zero
   116d8:	04ffdfc4 	movi	r19,-129
   116dc:	a5c6b03a 	or	r3,r20,r23
   116e0:	5ce6703a 	and	r19,r11,r19
   116e4:	1800161e 	bne	r3,zero,11740 <___svfprintf_internal_r+0x3cc>
   116e8:	b004f31e 	bne	r22,zero,12ab8 <___svfprintf_internal_r+0x1744>
   116ec:	1003a01e 	bne	r2,zero,12570 <___svfprintf_internal_r+0x11fc>
   116f0:	5dc0004c 	andi	r23,r11,1
   116f4:	b803ef26 	beq	r23,zero,126b4 <___svfprintf_internal_r+0x1340>
   116f8:	00800c04 	movi	r2,48
   116fc:	d88028c5 	stb	r2,163(sp)
   11700:	dc8028c4 	addi	r18,sp,163
   11704:	00023206 	br	11fd0 <___svfprintf_internal_r+0xc5c>
   11708:	5ac00414 	ori	r11,r11,16
   1170c:	5880080c 	andi	r2,r11,32
   11710:	1003c926 	beq	r2,zero,12638 <___svfprintf_internal_r+0x12c4>
   11714:	d8c00817 	ldw	r3,32(sp)
   11718:	d8001545 	stb	zero,85(sp)
   1171c:	0005883a 	mov	r2,zero
   11720:	1d000017 	ldw	r20,0(r3)
   11724:	1dc00117 	ldw	r23,4(r3)
   11728:	18c00204 	addi	r3,r3,8
   1172c:	d8c00815 	stw	r3,32(sp)
   11730:	b0ffffe0 	cmpeqi	r3,r22,-1
   11734:	183fe726 	beq	r3,zero,116d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff16d4>
   11738:	5827883a 	mov	r19,r11
   1173c:	0019883a 	mov	r12,zero
   11740:	10c00060 	cmpeqi	r3,r2,1
   11744:	18020c1e 	bne	r3,zero,11f78 <___svfprintf_internal_r+0xc04>
   11748:	108000a0 	cmpeqi	r2,r2,2
   1174c:	1002121e 	bne	r2,zero,11f98 <___svfprintf_internal_r+0xc24>
   11750:	a807883a 	mov	r3,r21
   11754:	00000106 	br	1175c <___svfprintf_internal_r+0x3e8>
   11758:	9007883a 	mov	r3,r18
   1175c:	a008d0fa 	srli	r4,r20,3
   11760:	b80a977a 	slli	r5,r23,29
   11764:	b82ed0fa 	srli	r23,r23,3
   11768:	a50001cc 	andi	r20,r20,7
   1176c:	a0800c04 	addi	r2,r20,48
   11770:	2928b03a 	or	r20,r5,r4
   11774:	18bfffc5 	stb	r2,-1(r3)
   11778:	a5c8b03a 	or	r4,r20,r23
   1177c:	1cbfffc4 	addi	r18,r3,-1
   11780:	203ff51e 	bne	r4,zero,11758 <__alt_mem_mcu_subsystem_ram_0+0x77ff1758>
   11784:	9900004c 	andi	r4,r19,1
   11788:	20021026 	beq	r4,zero,11fcc <___svfprintf_internal_r+0xc58>
   1178c:	10803fcc 	andi	r2,r2,255
   11790:	1080201c 	xori	r2,r2,128
   11794:	10bfe004 	addi	r2,r2,-128
   11798:	10800c18 	cmpnei	r2,r2,48
   1179c:	10020b26 	beq	r2,zero,11fcc <___svfprintf_internal_r+0xc58>
   117a0:	18ffff84 	addi	r3,r3,-2
   117a4:	00800c04 	movi	r2,48
   117a8:	90bfffc5 	stb	r2,-1(r18)
   117ac:	a8efc83a 	sub	r23,r21,r3
   117b0:	1825883a 	mov	r18,r3
   117b4:	00020606 	br	11fd0 <___svfprintf_internal_r+0xc5c>
   117b8:	0023883a 	mov	r17,zero
   117bc:	80bff404 	addi	r2,r16,-48
   117c0:	e7000044 	addi	fp,fp,1
   117c4:	8c4002a4 	muli	r17,r17,10
   117c8:	e43fffc7 	ldb	r16,-1(fp)
   117cc:	1463883a 	add	r17,r2,r17
   117d0:	80bff404 	addi	r2,r16,-48
   117d4:	10c002b0 	cmpltui	r3,r2,10
   117d8:	183ff91e 	bne	r3,zero,117c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff17c0>
   117dc:	80bff804 	addi	r2,r16,-32
   117e0:	10c01668 	cmpgeui	r3,r2,89
   117e4:	183f3326 	beq	r3,zero,114b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14b4>
   117e8:	21003fcc 	andi	r4,r4,255
   117ec:	2006ca1e 	bne	r4,zero,13318 <___svfprintf_internal_r+0x1fa4>
   117f0:	803f9526 	beq	r16,zero,11648 <__alt_mem_mcu_subsystem_ram_0+0x77ff1648>
   117f4:	dc001f05 	stb	r16,124(sp)
   117f8:	d8001545 	stb	zero,85(sp)
   117fc:	00005806 	br	11960 <___svfprintf_internal_r+0x5ec>
   11800:	d8c00817 	ldw	r3,32(sp)
   11804:	00800c04 	movi	r2,48
   11808:	d8801585 	stb	r2,86(sp)
   1180c:	00801e04 	movi	r2,120
   11810:	010000b4 	movhi	r4,2
   11814:	d88015c5 	stb	r2,87(sp)
   11818:	18800104 	addi	r2,r3,4
   1181c:	d8800815 	stw	r2,32(sp)
   11820:	209afc04 	addi	r2,r4,27632
   11824:	d8800e15 	stw	r2,56(sp)
   11828:	1d000017 	ldw	r20,0(r3)
   1182c:	002f883a 	mov	r23,zero
   11830:	5ac00094 	ori	r11,r11,2
   11834:	00800084 	movi	r2,2
   11838:	04001e04 	movi	r16,120
   1183c:	003fa206 	br	116c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16c8>
   11840:	d8800817 	ldw	r2,32(sp)
   11844:	d8001545 	stb	zero,85(sp)
   11848:	14800017 	ldw	r18,0(r2)
   1184c:	14c00104 	addi	r19,r2,4
   11850:	90044d26 	beq	r18,zero,12988 <___svfprintf_internal_r+0x1614>
   11854:	da000815 	stw	r8,32(sp)
   11858:	dac00715 	stw	r11,28(sp)
   1185c:	b0bfffe0 	cmpeqi	r2,r22,-1
   11860:	1004f11e 	bne	r2,zero,12c28 <___svfprintf_internal_r+0x18b4>
   11864:	b00d883a 	mov	r6,r22
   11868:	000b883a 	mov	r5,zero
   1186c:	9009883a 	mov	r4,r18
   11870:	00189280 	call	18928 <memchr>
   11874:	dac00717 	ldw	r11,28(sp)
   11878:	da000817 	ldw	r8,32(sp)
   1187c:	1005a826 	beq	r2,zero,12f20 <___svfprintf_internal_r+0x1bac>
   11880:	14afc83a 	sub	r23,r2,r18
   11884:	db001543 	ldbu	r12,85(sp)
   11888:	b829883a 	mov	r20,r23
   1188c:	b804ee16 	blt	r23,zero,12c48 <___svfprintf_internal_r+0x18d4>
   11890:	dcc00815 	stw	r19,32(sp)
   11894:	002d883a 	mov	r22,zero
   11898:	5827883a 	mov	r19,r11
   1189c:	d8000915 	stw	zero,36(sp)
   118a0:	0001cf06 	br	11fe0 <___svfprintf_internal_r+0xc6c>
   118a4:	5ac00814 	ori	r11,r11,32
   118a8:	e4000007 	ldb	r16,0(fp)
   118ac:	003efd06 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   118b0:	21003fcc 	andi	r4,r4,255
   118b4:	2006941e 	bne	r4,zero,13308 <___svfprintf_internal_r+0x1f94>
   118b8:	d9000817 	ldw	r4,32(sp)
   118bc:	5880080c 	andi	r2,r11,32
   118c0:	20c00017 	ldw	r3,0(r4)
   118c4:	21000104 	addi	r4,r4,4
   118c8:	d9000815 	stw	r4,32(sp)
   118cc:	1003851e 	bne	r2,zero,126e4 <___svfprintf_internal_r+0x1370>
   118d0:	5880040c 	andi	r2,r11,16
   118d4:	1004561e 	bne	r2,zero,12a30 <___svfprintf_internal_r+0x16bc>
   118d8:	5ac0100c 	andi	r11,r11,64
   118dc:	58045426 	beq	r11,zero,12a30 <___svfprintf_internal_r+0x16bc>
   118e0:	d8800617 	ldw	r2,24(sp)
   118e4:	1880000d 	sth	r2,0(r3)
   118e8:	003ec906 	br	11410 <__alt_mem_mcu_subsystem_ram_0+0x77ff1410>
   118ec:	e4000007 	ldb	r16,0(fp)
   118f0:	80801b18 	cmpnei	r2,r16,108
   118f4:	10041326 	beq	r2,zero,12944 <___svfprintf_internal_r+0x15d0>
   118f8:	5ac00414 	ori	r11,r11,16
   118fc:	003ee906 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11900:	5ac01014 	ori	r11,r11,64
   11904:	e4000007 	ldb	r16,0(fp)
   11908:	003ee606 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   1190c:	21003fcc 	andi	r4,r4,255
   11910:	20067b1e 	bne	r4,zero,13300 <___svfprintf_internal_r+0x1f8c>
   11914:	5880080c 	andi	r2,r11,32
   11918:	10018026 	beq	r2,zero,11f1c <___svfprintf_internal_r+0xba8>
   1191c:	d8800817 	ldw	r2,32(sp)
   11920:	15000017 	ldw	r20,0(r2)
   11924:	15c00117 	ldw	r23,4(r2)
   11928:	10800204 	addi	r2,r2,8
   1192c:	d8800815 	stw	r2,32(sp)
   11930:	b8018716 	blt	r23,zero,11f50 <___svfprintf_internal_r+0xbdc>
   11934:	b0bfffd8 	cmpnei	r2,r22,-1
   11938:	db001543 	ldbu	r12,85(sp)
   1193c:	10018d26 	beq	r2,zero,11f74 <___svfprintf_internal_r+0xc00>
   11940:	00800044 	movi	r2,1
   11944:	003f6406 	br	116d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16d8>
   11948:	d8c00817 	ldw	r3,32(sp)
   1194c:	d8001545 	stb	zero,85(sp)
   11950:	18800017 	ldw	r2,0(r3)
   11954:	18c00104 	addi	r3,r3,4
   11958:	d8c00815 	stw	r3,32(sp)
   1195c:	d8801f05 	stb	r2,124(sp)
   11960:	5827883a 	mov	r19,r11
   11964:	05000044 	movi	r20,1
   11968:	05c00044 	movi	r23,1
   1196c:	002d883a 	mov	r22,zero
   11970:	d8000915 	stw	zero,36(sp)
   11974:	dc801f04 	addi	r18,sp,124
   11978:	0005883a 	mov	r2,zero
   1197c:	9b00008c 	andi	r12,r19,2
   11980:	60000126 	beq	r12,zero,11988 <___svfprintf_internal_r+0x614>
   11984:	a5000084 	addi	r20,r20,2
   11988:	9ac0210c 	andi	r11,r19,132
   1198c:	d8c01e17 	ldw	r3,120(sp)
   11990:	5800381e 	bne	r11,zero,11a74 <___svfprintf_internal_r+0x700>
   11994:	8d1bc83a 	sub	r13,r17,r20
   11998:	0340360e 	bge	zero,r13,11a74 <___svfprintf_internal_r+0x700>
   1199c:	01c000b4 	movhi	r7,2
   119a0:	69000450 	cmplti	r4,r13,17
   119a4:	39db0784 	addi	r7,r7,27678
   119a8:	d8801d17 	ldw	r2,116(sp)
   119ac:	2000271e 	bne	r4,zero,11a4c <___svfprintf_internal_r+0x6d8>
   119b0:	dc001315 	stw	r16,76(sp)
   119b4:	dc401415 	stw	r17,80(sp)
   119b8:	03800404 	movi	r14,16
   119bc:	db000d15 	stw	r12,52(sp)
   119c0:	dac01215 	stw	r11,72(sp)
   119c4:	6821883a 	mov	r16,r13
   119c8:	3823883a 	mov	r17,r7
   119cc:	00000406 	br	119e0 <___svfprintf_internal_r+0x66c>
   119d0:	843ffc04 	addi	r16,r16,-16
   119d4:	81000448 	cmpgei	r4,r16,17
   119d8:	42000204 	addi	r8,r8,8
   119dc:	20001526 	beq	r4,zero,11a34 <___svfprintf_internal_r+0x6c0>
   119e0:	10800044 	addi	r2,r2,1
   119e4:	18c00404 	addi	r3,r3,16
   119e8:	44400015 	stw	r17,0(r8)
   119ec:	43800115 	stw	r14,4(r8)
   119f0:	d8c01e15 	stw	r3,120(sp)
   119f4:	d8801d15 	stw	r2,116(sp)
   119f8:	11000208 	cmpgei	r4,r2,8
   119fc:	203ff426 	beq	r4,zero,119d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff19d0>
   11a00:	d9400417 	ldw	r5,16(sp)
   11a04:	d9000517 	ldw	r4,20(sp)
   11a08:	d9801c04 	addi	r6,sp,112
   11a0c:	db800715 	stw	r14,28(sp)
   11a10:	001a97c0 	call	1a97c <__ssprint_r>
   11a14:	103f121e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   11a18:	843ffc04 	addi	r16,r16,-16
   11a1c:	81000448 	cmpgei	r4,r16,17
   11a20:	d8c01e17 	ldw	r3,120(sp)
   11a24:	d8801d17 	ldw	r2,116(sp)
   11a28:	a811883a 	mov	r8,r21
   11a2c:	db800717 	ldw	r14,28(sp)
   11a30:	203feb1e 	bne	r4,zero,119e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff19e0>
   11a34:	801b883a 	mov	r13,r16
   11a38:	880f883a 	mov	r7,r17
   11a3c:	db000d17 	ldw	r12,52(sp)
   11a40:	dac01217 	ldw	r11,72(sp)
   11a44:	dc001317 	ldw	r16,76(sp)
   11a48:	dc401417 	ldw	r17,80(sp)
   11a4c:	10800044 	addi	r2,r2,1
   11a50:	1b47883a 	add	r3,r3,r13
   11a54:	d8801d15 	stw	r2,116(sp)
   11a58:	41c00015 	stw	r7,0(r8)
   11a5c:	43400115 	stw	r13,4(r8)
   11a60:	d8c01e15 	stw	r3,120(sp)
   11a64:	10800208 	cmpgei	r2,r2,8
   11a68:	1003f41e 	bne	r2,zero,12a3c <___svfprintf_internal_r+0x16c8>
   11a6c:	d8801547 	ldb	r2,85(sp)
   11a70:	42000204 	addi	r8,r8,8
   11a74:	10000c26 	beq	r2,zero,11aa8 <___svfprintf_internal_r+0x734>
   11a78:	d8801d17 	ldw	r2,116(sp)
   11a7c:	d9001544 	addi	r4,sp,85
   11a80:	18c00044 	addi	r3,r3,1
   11a84:	10800044 	addi	r2,r2,1
   11a88:	41000015 	stw	r4,0(r8)
   11a8c:	01000044 	movi	r4,1
   11a90:	d8801d15 	stw	r2,116(sp)
   11a94:	41000115 	stw	r4,4(r8)
   11a98:	d8c01e15 	stw	r3,120(sp)
   11a9c:	10800208 	cmpgei	r2,r2,8
   11aa0:	1002391e 	bne	r2,zero,12388 <___svfprintf_internal_r+0x1014>
   11aa4:	42000204 	addi	r8,r8,8
   11aa8:	60000c26 	beq	r12,zero,11adc <___svfprintf_internal_r+0x768>
   11aac:	d8801d17 	ldw	r2,116(sp)
   11ab0:	d9001584 	addi	r4,sp,86
   11ab4:	18c00084 	addi	r3,r3,2
   11ab8:	10800044 	addi	r2,r2,1
   11abc:	41000015 	stw	r4,0(r8)
   11ac0:	01000084 	movi	r4,2
   11ac4:	d8801d15 	stw	r2,116(sp)
   11ac8:	41000115 	stw	r4,4(r8)
   11acc:	d8c01e15 	stw	r3,120(sp)
   11ad0:	10800208 	cmpgei	r2,r2,8
   11ad4:	1002381e 	bne	r2,zero,123b8 <___svfprintf_internal_r+0x1044>
   11ad8:	42000204 	addi	r8,r8,8
   11adc:	5ac02018 	cmpnei	r11,r11,128
   11ae0:	58019326 	beq	r11,zero,12130 <___svfprintf_internal_r+0xdbc>
   11ae4:	b5edc83a 	sub	r22,r22,r23
   11ae8:	0580330e 	bge	zero,r22,11bb8 <___svfprintf_internal_r+0x844>
   11aec:	02c000b4 	movhi	r11,2
   11af0:	b1000450 	cmplti	r4,r22,17
   11af4:	5adb0384 	addi	r11,r11,27662
   11af8:	d8801d17 	ldw	r2,116(sp)
   11afc:	2000251e 	bne	r4,zero,11b94 <___svfprintf_internal_r+0x820>
   11b00:	dc000d15 	stw	r16,52(sp)
   11b04:	02800404 	movi	r10,16
   11b08:	b021883a 	mov	r16,r22
   11b0c:	982d883a 	mov	r22,r19
   11b10:	8827883a 	mov	r19,r17
   11b14:	5823883a 	mov	r17,r11
   11b18:	00000406 	br	11b2c <___svfprintf_internal_r+0x7b8>
   11b1c:	843ffc04 	addi	r16,r16,-16
   11b20:	81000448 	cmpgei	r4,r16,17
   11b24:	42000204 	addi	r8,r8,8
   11b28:	20001526 	beq	r4,zero,11b80 <___svfprintf_internal_r+0x80c>
   11b2c:	10800044 	addi	r2,r2,1
   11b30:	18c00404 	addi	r3,r3,16
   11b34:	44400015 	stw	r17,0(r8)
   11b38:	42800115 	stw	r10,4(r8)
   11b3c:	d8c01e15 	stw	r3,120(sp)
   11b40:	d8801d15 	stw	r2,116(sp)
   11b44:	11000208 	cmpgei	r4,r2,8
   11b48:	203ff426 	beq	r4,zero,11b1c <__alt_mem_mcu_subsystem_ram_0+0x77ff1b1c>
   11b4c:	d9400417 	ldw	r5,16(sp)
   11b50:	d9000517 	ldw	r4,20(sp)
   11b54:	d9801c04 	addi	r6,sp,112
   11b58:	da800715 	stw	r10,28(sp)
   11b5c:	001a97c0 	call	1a97c <__ssprint_r>
   11b60:	103ebf1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   11b64:	843ffc04 	addi	r16,r16,-16
   11b68:	81000448 	cmpgei	r4,r16,17
   11b6c:	d8c01e17 	ldw	r3,120(sp)
   11b70:	d8801d17 	ldw	r2,116(sp)
   11b74:	a811883a 	mov	r8,r21
   11b78:	da800717 	ldw	r10,28(sp)
   11b7c:	203feb1e 	bne	r4,zero,11b2c <__alt_mem_mcu_subsystem_ram_0+0x77ff1b2c>
   11b80:	8817883a 	mov	r11,r17
   11b84:	9823883a 	mov	r17,r19
   11b88:	b027883a 	mov	r19,r22
   11b8c:	802d883a 	mov	r22,r16
   11b90:	dc000d17 	ldw	r16,52(sp)
   11b94:	10800044 	addi	r2,r2,1
   11b98:	1d87883a 	add	r3,r3,r22
   11b9c:	d8801d15 	stw	r2,116(sp)
   11ba0:	42c00015 	stw	r11,0(r8)
   11ba4:	45800115 	stw	r22,4(r8)
   11ba8:	d8c01e15 	stw	r3,120(sp)
   11bac:	10800208 	cmpgei	r2,r2,8
   11bb0:	10020b1e 	bne	r2,zero,123e0 <___svfprintf_internal_r+0x106c>
   11bb4:	42000204 	addi	r8,r8,8
   11bb8:	9880400c 	andi	r2,r19,256
   11bbc:	10010e1e 	bne	r2,zero,11ff8 <___svfprintf_internal_r+0xc84>
   11bc0:	d8801d17 	ldw	r2,116(sp)
   11bc4:	1dc7883a 	add	r3,r3,r23
   11bc8:	44800015 	stw	r18,0(r8)
   11bcc:	10800044 	addi	r2,r2,1
   11bd0:	d8801d15 	stw	r2,116(sp)
   11bd4:	45c00115 	stw	r23,4(r8)
   11bd8:	d8c01e15 	stw	r3,120(sp)
   11bdc:	10800208 	cmpgei	r2,r2,8
   11be0:	1001a01e 	bne	r2,zero,12264 <___svfprintf_internal_r+0xef0>
   11be4:	42000204 	addi	r8,r8,8
   11be8:	9cc0010c 	andi	r19,r19,4
   11bec:	98002c26 	beq	r19,zero,11ca0 <___svfprintf_internal_r+0x92c>
   11bf0:	8d21c83a 	sub	r16,r17,r20
   11bf4:	04002a0e 	bge	zero,r16,11ca0 <___svfprintf_internal_r+0x92c>
   11bf8:	01c000b4 	movhi	r7,2
   11bfc:	81000450 	cmplti	r4,r16,17
   11c00:	39db0784 	addi	r7,r7,27678
   11c04:	d8801d17 	ldw	r2,116(sp)
   11c08:	20001d1e 	bne	r4,zero,11c80 <___svfprintf_internal_r+0x90c>
   11c0c:	04800404 	movi	r18,16
   11c10:	dcc00517 	ldw	r19,20(sp)
   11c14:	dd800417 	ldw	r22,16(sp)
   11c18:	382f883a 	mov	r23,r7
   11c1c:	00000406 	br	11c30 <___svfprintf_internal_r+0x8bc>
   11c20:	843ffc04 	addi	r16,r16,-16
   11c24:	81000448 	cmpgei	r4,r16,17
   11c28:	42000204 	addi	r8,r8,8
   11c2c:	20001326 	beq	r4,zero,11c7c <___svfprintf_internal_r+0x908>
   11c30:	10800044 	addi	r2,r2,1
   11c34:	18c00404 	addi	r3,r3,16
   11c38:	45c00015 	stw	r23,0(r8)
   11c3c:	44800115 	stw	r18,4(r8)
   11c40:	d8c01e15 	stw	r3,120(sp)
   11c44:	d8801d15 	stw	r2,116(sp)
   11c48:	11000208 	cmpgei	r4,r2,8
   11c4c:	203ff426 	beq	r4,zero,11c20 <__alt_mem_mcu_subsystem_ram_0+0x77ff1c20>
   11c50:	d9801c04 	addi	r6,sp,112
   11c54:	b00b883a 	mov	r5,r22
   11c58:	9809883a 	mov	r4,r19
   11c5c:	001a97c0 	call	1a97c <__ssprint_r>
   11c60:	103e7f1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   11c64:	843ffc04 	addi	r16,r16,-16
   11c68:	81000448 	cmpgei	r4,r16,17
   11c6c:	d8c01e17 	ldw	r3,120(sp)
   11c70:	d8801d17 	ldw	r2,116(sp)
   11c74:	a811883a 	mov	r8,r21
   11c78:	203fed1e 	bne	r4,zero,11c30 <__alt_mem_mcu_subsystem_ram_0+0x77ff1c30>
   11c7c:	b80f883a 	mov	r7,r23
   11c80:	10800044 	addi	r2,r2,1
   11c84:	1c07883a 	add	r3,r3,r16
   11c88:	d8801d15 	stw	r2,116(sp)
   11c8c:	41c00015 	stw	r7,0(r8)
   11c90:	44000115 	stw	r16,4(r8)
   11c94:	d8c01e15 	stw	r3,120(sp)
   11c98:	10800210 	cmplti	r2,r2,8
   11c9c:	10027e26 	beq	r2,zero,12698 <___svfprintf_internal_r+0x1324>
   11ca0:	8d00010e 	bge	r17,r20,11ca8 <___svfprintf_internal_r+0x934>
   11ca4:	a023883a 	mov	r17,r20
   11ca8:	d8800617 	ldw	r2,24(sp)
   11cac:	1445883a 	add	r2,r2,r17
   11cb0:	d8800615 	stw	r2,24(sp)
   11cb4:	1801521e 	bne	r3,zero,12200 <___svfprintf_internal_r+0xe8c>
   11cb8:	d8001d15 	stw	zero,116(sp)
   11cbc:	a811883a 	mov	r8,r21
   11cc0:	003dd306 	br	11410 <__alt_mem_mcu_subsystem_ram_0+0x77ff1410>
   11cc4:	21003fcc 	andi	r4,r4,255
   11cc8:	20058b1e 	bne	r4,zero,132f8 <___svfprintf_internal_r+0x1f84>
   11ccc:	008000b4 	movhi	r2,2
   11cd0:	109af704 	addi	r2,r2,27612
   11cd4:	d8800e15 	stw	r2,56(sp)
   11cd8:	5880080c 	andi	r2,r11,32
   11cdc:	10002a26 	beq	r2,zero,11d88 <___svfprintf_internal_r+0xa14>
   11ce0:	d8800817 	ldw	r2,32(sp)
   11ce4:	15000017 	ldw	r20,0(r2)
   11ce8:	15c00117 	ldw	r23,4(r2)
   11cec:	10800204 	addi	r2,r2,8
   11cf0:	d8800815 	stw	r2,32(sp)
   11cf4:	5880004c 	andi	r2,r11,1
   11cf8:	10000226 	beq	r2,zero,11d04 <___svfprintf_internal_r+0x990>
   11cfc:	a5c4b03a 	or	r2,r20,r23
   11d00:	1002721e 	bne	r2,zero,126cc <___svfprintf_internal_r+0x1358>
   11d04:	00800084 	movi	r2,2
   11d08:	003e6f06 	br	116c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16c8>
   11d0c:	d8800817 	ldw	r2,32(sp)
   11d10:	e4000003 	ldbu	r16,0(fp)
   11d14:	14400017 	ldw	r17,0(r2)
   11d18:	10800104 	addi	r2,r2,4
   11d1c:	8802f016 	blt	r17,zero,128e0 <___svfprintf_internal_r+0x156c>
   11d20:	d8800815 	stw	r2,32(sp)
   11d24:	84003fcc 	andi	r16,r16,255
   11d28:	8400201c 	xori	r16,r16,128
   11d2c:	843fe004 	addi	r16,r16,-128
   11d30:	003ddc06 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11d34:	5ac00054 	ori	r11,r11,1
   11d38:	e4000007 	ldb	r16,0(fp)
   11d3c:	003dd906 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11d40:	28803fcc 	andi	r2,r5,255
   11d44:	1080201c 	xori	r2,r2,128
   11d48:	10bfe004 	addi	r2,r2,-128
   11d4c:	e4000003 	ldbu	r16,0(fp)
   11d50:	103ff41e 	bne	r2,zero,11d24 <__alt_mem_mcu_subsystem_ram_0+0x77ff1d24>
   11d54:	84003fcc 	andi	r16,r16,255
   11d58:	8400201c 	xori	r16,r16,128
   11d5c:	01000044 	movi	r4,1
   11d60:	01400804 	movi	r5,32
   11d64:	843fe004 	addi	r16,r16,-128
   11d68:	003dce06 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11d6c:	21003fcc 	andi	r4,r4,255
   11d70:	2005591e 	bne	r4,zero,132d8 <___svfprintf_internal_r+0x1f64>
   11d74:	008000b4 	movhi	r2,2
   11d78:	109afc04 	addi	r2,r2,27632
   11d7c:	d8800e15 	stw	r2,56(sp)
   11d80:	5880080c 	andi	r2,r11,32
   11d84:	103fd61e 	bne	r2,zero,11ce0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ce0>
   11d88:	d8c00817 	ldw	r3,32(sp)
   11d8c:	5880040c 	andi	r2,r11,16
   11d90:	1d000017 	ldw	r20,0(r3)
   11d94:	18c00104 	addi	r3,r3,4
   11d98:	d8c00815 	stw	r3,32(sp)
   11d9c:	1002471e 	bne	r2,zero,126bc <___svfprintf_internal_r+0x1348>
   11da0:	5880100c 	andi	r2,r11,64
   11da4:	10024526 	beq	r2,zero,126bc <___svfprintf_internal_r+0x1348>
   11da8:	a53fffcc 	andi	r20,r20,65535
   11dac:	002f883a 	mov	r23,zero
   11db0:	003fd006 	br	11cf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1cf4>
   11db4:	5ac02014 	ori	r11,r11,128
   11db8:	e4000007 	ldb	r16,0(fp)
   11dbc:	003db906 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11dc0:	e4000007 	ldb	r16,0(fp)
   11dc4:	e0c00044 	addi	r3,fp,1
   11dc8:	80800aa0 	cmpeqi	r2,r16,42
   11dcc:	1005291e 	bne	r2,zero,13274 <___svfprintf_internal_r+0x1f00>
   11dd0:	80bff404 	addi	r2,r16,-48
   11dd4:	118002b0 	cmpltui	r6,r2,10
   11dd8:	1839883a 	mov	fp,r3
   11ddc:	002d883a 	mov	r22,zero
   11de0:	303db126 	beq	r6,zero,114a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a8>
   11de4:	e7000044 	addi	fp,fp,1
   11de8:	b58002a4 	muli	r22,r22,10
   11dec:	e43fffc7 	ldb	r16,-1(fp)
   11df0:	b0ad883a 	add	r22,r22,r2
   11df4:	80bff404 	addi	r2,r16,-48
   11df8:	10c002b0 	cmpltui	r3,r2,10
   11dfc:	183ff91e 	bne	r3,zero,11de4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1de4>
   11e00:	003da906 	br	114a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a8>
   11e04:	e4000003 	ldbu	r16,0(fp)
   11e08:	84003fcc 	andi	r16,r16,255
   11e0c:	8400201c 	xori	r16,r16,128
   11e10:	5ac00114 	ori	r11,r11,4
   11e14:	843fe004 	addi	r16,r16,-128
   11e18:	003da206 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11e1c:	01000044 	movi	r4,1
   11e20:	01400ac4 	movi	r5,43
   11e24:	e4000007 	ldb	r16,0(fp)
   11e28:	003d9e06 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11e2c:	5ac00214 	ori	r11,r11,8
   11e30:	e4000007 	ldb	r16,0(fp)
   11e34:	003d9b06 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   11e38:	21003fcc 	andi	r4,r4,255
   11e3c:	2005381e 	bne	r4,zero,13320 <___svfprintf_internal_r+0x1fac>
   11e40:	d8c00817 	ldw	r3,32(sp)
   11e44:	00a00034 	movhi	r2,32768
   11e48:	10bfffc4 	addi	r2,r2,-1
   11e4c:	1d000117 	ldw	r20,4(r3)
   11e50:	1cc00017 	ldw	r19,0(r3)
   11e54:	01dffc34 	movhi	r7,32752
   11e58:	a0a4703a 	and	r18,r20,r2
   11e5c:	01bfffc4 	movi	r6,-1
   11e60:	18800204 	addi	r2,r3,8
   11e64:	39ffffc4 	addi	r7,r7,-1
   11e68:	9809883a 	mov	r4,r19
   11e6c:	900b883a 	mov	r5,r18
   11e70:	da000915 	stw	r8,36(sp)
   11e74:	dac00715 	stw	r11,28(sp)
   11e78:	dd000c15 	stw	r20,48(sp)
   11e7c:	dcc00b15 	stw	r19,44(sp)
   11e80:	d8800815 	stw	r2,32(sp)
   11e84:	001f9440 	call	1f944 <__unorddf2>
   11e88:	dac00717 	ldw	r11,28(sp)
   11e8c:	da000917 	ldw	r8,36(sp)
   11e90:	1002191e 	bne	r2,zero,126f8 <___svfprintf_internal_r+0x1384>
   11e94:	01dffc34 	movhi	r7,32752
   11e98:	01bfffc4 	movi	r6,-1
   11e9c:	39ffffc4 	addi	r7,r7,-1
   11ea0:	9809883a 	mov	r4,r19
   11ea4:	900b883a 	mov	r5,r18
   11ea8:	001f8640 	call	1f864 <__ledf2>
   11eac:	dac00717 	ldw	r11,28(sp)
   11eb0:	da000917 	ldw	r8,36(sp)
   11eb4:	0082100e 	bge	zero,r2,126f8 <___svfprintf_internal_r+0x1384>
   11eb8:	000d883a 	mov	r6,zero
   11ebc:	000f883a 	mov	r7,zero
   11ec0:	9809883a 	mov	r4,r19
   11ec4:	a00b883a 	mov	r5,r20
   11ec8:	001f8640 	call	1f864 <__ledf2>
   11ecc:	dac00717 	ldw	r11,28(sp)
   11ed0:	da000917 	ldw	r8,36(sp)
   11ed4:	1003c316 	blt	r2,zero,12de4 <___svfprintf_internal_r+0x1a70>
   11ed8:	db001543 	ldbu	r12,85(sp)
   11edc:	80801208 	cmpgei	r2,r16,72
   11ee0:	10034e1e 	bne	r2,zero,12c1c <___svfprintf_internal_r+0x18a8>
   11ee4:	048000b4 	movhi	r18,2
   11ee8:	949af304 	addi	r18,r18,27596
   11eec:	04ffdfc4 	movi	r19,-129
   11ef0:	5ce6703a 	and	r19,r11,r19
   11ef4:	050000c4 	movi	r20,3
   11ef8:	05c000c4 	movi	r23,3
   11efc:	002d883a 	mov	r22,zero
   11f00:	d8000915 	stw	zero,36(sp)
   11f04:	00003606 	br	11fe0 <___svfprintf_internal_r+0xc6c>
   11f08:	21003fcc 	andi	r4,r4,255
   11f0c:	2005001e 	bne	r4,zero,13310 <___svfprintf_internal_r+0x1f9c>
   11f10:	5ac00414 	ori	r11,r11,16
   11f14:	5880080c 	andi	r2,r11,32
   11f18:	103e801e 	bne	r2,zero,1191c <__alt_mem_mcu_subsystem_ram_0+0x77ff191c>
   11f1c:	d8c00817 	ldw	r3,32(sp)
   11f20:	5880040c 	andi	r2,r11,16
   11f24:	1d000017 	ldw	r20,0(r3)
   11f28:	18c00104 	addi	r3,r3,4
   11f2c:	d8c00815 	stw	r3,32(sp)
   11f30:	1001e41e 	bne	r2,zero,126c4 <___svfprintf_internal_r+0x1350>
   11f34:	5880100c 	andi	r2,r11,64
   11f38:	1001e226 	beq	r2,zero,126c4 <___svfprintf_internal_r+0x1350>
   11f3c:	a53fffcc 	andi	r20,r20,65535
   11f40:	a520001c 	xori	r20,r20,32768
   11f44:	a5200004 	addi	r20,r20,-32768
   11f48:	a02fd7fa 	srai	r23,r20,31
   11f4c:	b83e790e 	bge	r23,zero,11934 <__alt_mem_mcu_subsystem_ram_0+0x77ff1934>
   11f50:	0529c83a 	sub	r20,zero,r20
   11f54:	a004c03a 	cmpne	r2,r20,zero
   11f58:	05efc83a 	sub	r23,zero,r23
   11f5c:	b8afc83a 	sub	r23,r23,r2
   11f60:	00800b44 	movi	r2,45
   11f64:	d8801545 	stb	r2,85(sp)
   11f68:	b0bfffd8 	cmpnei	r2,r22,-1
   11f6c:	03000b44 	movi	r12,45
   11f70:	103e731e 	bne	r2,zero,11940 <__alt_mem_mcu_subsystem_ram_0+0x77ff1940>
   11f74:	5827883a 	mov	r19,r11
   11f78:	b8028f1e 	bne	r23,zero,129b8 <___svfprintf_internal_r+0x1644>
   11f7c:	a08002a8 	cmpgeui	r2,r20,10
   11f80:	10028d1e 	bne	r2,zero,129b8 <___svfprintf_internal_r+0x1644>
   11f84:	a5000c04 	addi	r20,r20,48
   11f88:	dd0028c5 	stb	r20,163(sp)
   11f8c:	05c00044 	movi	r23,1
   11f90:	dc8028c4 	addi	r18,sp,163
   11f94:	00000e06 	br	11fd0 <___svfprintf_internal_r+0xc5c>
   11f98:	d9000e17 	ldw	r4,56(sp)
   11f9c:	a825883a 	mov	r18,r21
   11fa0:	a08003cc 	andi	r2,r20,15
   11fa4:	b806973a 	slli	r3,r23,28
   11fa8:	2085883a 	add	r2,r4,r2
   11fac:	a028d13a 	srli	r20,r20,4
   11fb0:	10800003 	ldbu	r2,0(r2)
   11fb4:	b82ed13a 	srli	r23,r23,4
   11fb8:	94bfffc4 	addi	r18,r18,-1
   11fbc:	1d28b03a 	or	r20,r3,r20
   11fc0:	90800005 	stb	r2,0(r18)
   11fc4:	a5c4b03a 	or	r2,r20,r23
   11fc8:	103ff51e 	bne	r2,zero,11fa0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fa0>
   11fcc:	acafc83a 	sub	r23,r21,r18
   11fd0:	b029883a 	mov	r20,r22
   11fd4:	b5c0010e 	bge	r22,r23,11fdc <___svfprintf_internal_r+0xc68>
   11fd8:	b829883a 	mov	r20,r23
   11fdc:	d8000915 	stw	zero,36(sp)
   11fe0:	60803fcc 	andi	r2,r12,255
   11fe4:	1080201c 	xori	r2,r2,128
   11fe8:	10bfe004 	addi	r2,r2,-128
   11fec:	103e6326 	beq	r2,zero,1197c <__alt_mem_mcu_subsystem_ram_0+0x77ff197c>
   11ff0:	a5000044 	addi	r20,r20,1
   11ff4:	003e6106 	br	1197c <__alt_mem_mcu_subsystem_ram_0+0x77ff197c>
   11ff8:	84001990 	cmplti	r16,r16,102
   11ffc:	8000a11e 	bne	r16,zero,12284 <___svfprintf_internal_r+0xf10>
   12000:	d9000b17 	ldw	r4,44(sp)
   12004:	d9400c17 	ldw	r5,48(sp)
   12008:	000d883a 	mov	r6,zero
   1200c:	000f883a 	mov	r7,zero
   12010:	da000d15 	stw	r8,52(sp)
   12014:	d8c00715 	stw	r3,28(sp)
   12018:	001f7e40 	call	1f7e4 <__eqdf2>
   1201c:	d8c00717 	ldw	r3,28(sp)
   12020:	da000d17 	ldw	r8,52(sp)
   12024:	1000f61e 	bne	r2,zero,12400 <___svfprintf_internal_r+0x108c>
   12028:	d8801d17 	ldw	r2,116(sp)
   1202c:	010000b4 	movhi	r4,2
   12030:	211b0304 	addi	r4,r4,27660
   12034:	10800044 	addi	r2,r2,1
   12038:	18c00044 	addi	r3,r3,1
   1203c:	41000015 	stw	r4,0(r8)
   12040:	01000044 	movi	r4,1
   12044:	d8801d15 	stw	r2,116(sp)
   12048:	41000115 	stw	r4,4(r8)
   1204c:	d8c01e15 	stw	r3,120(sp)
   12050:	10800208 	cmpgei	r2,r2,8
   12054:	1002ca1e 	bne	r2,zero,12b80 <___svfprintf_internal_r+0x180c>
   12058:	42000204 	addi	r8,r8,8
   1205c:	d8801617 	ldw	r2,88(sp)
   12060:	d8c00a17 	ldw	r3,40(sp)
   12064:	10c00416 	blt	r2,r3,12078 <___svfprintf_internal_r+0xd04>
   12068:	9880004c 	andi	r2,r19,1
   1206c:	1000021e 	bne	r2,zero,12078 <___svfprintf_internal_r+0xd04>
   12070:	d8c01e17 	ldw	r3,120(sp)
   12074:	003edc06 	br	11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   12078:	d8801017 	ldw	r2,64(sp)
   1207c:	d8c01e17 	ldw	r3,120(sp)
   12080:	d9000f17 	ldw	r4,60(sp)
   12084:	40800015 	stw	r2,0(r8)
   12088:	d8801d17 	ldw	r2,116(sp)
   1208c:	20c7883a 	add	r3,r4,r3
   12090:	41000115 	stw	r4,4(r8)
   12094:	10800044 	addi	r2,r2,1
   12098:	d8801d15 	stw	r2,116(sp)
   1209c:	d8c01e15 	stw	r3,120(sp)
   120a0:	10800208 	cmpgei	r2,r2,8
   120a4:	10022e1e 	bne	r2,zero,12960 <___svfprintf_internal_r+0x15ec>
   120a8:	42000204 	addi	r8,r8,8
   120ac:	d8800a17 	ldw	r2,40(sp)
   120b0:	143fffc4 	addi	r16,r2,-1
   120b4:	043ecc0e 	bge	zero,r16,11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   120b8:	02c000b4 	movhi	r11,2
   120bc:	81000450 	cmplti	r4,r16,17
   120c0:	5adb0384 	addi	r11,r11,27662
   120c4:	d8801d17 	ldw	r2,116(sp)
   120c8:	20027f1e 	bne	r4,zero,12ac8 <___svfprintf_internal_r+0x1754>
   120cc:	04800404 	movi	r18,16
   120d0:	dd800517 	ldw	r22,20(sp)
   120d4:	582f883a 	mov	r23,r11
   120d8:	00000406 	br	120ec <___svfprintf_internal_r+0xd78>
   120dc:	42000204 	addi	r8,r8,8
   120e0:	843ffc04 	addi	r16,r16,-16
   120e4:	81000448 	cmpgei	r4,r16,17
   120e8:	20027626 	beq	r4,zero,12ac4 <___svfprintf_internal_r+0x1750>
   120ec:	10800044 	addi	r2,r2,1
   120f0:	18c00404 	addi	r3,r3,16
   120f4:	45c00015 	stw	r23,0(r8)
   120f8:	44800115 	stw	r18,4(r8)
   120fc:	d8c01e15 	stw	r3,120(sp)
   12100:	d8801d15 	stw	r2,116(sp)
   12104:	11000208 	cmpgei	r4,r2,8
   12108:	203ff426 	beq	r4,zero,120dc <__alt_mem_mcu_subsystem_ram_0+0x77ff20dc>
   1210c:	d9400417 	ldw	r5,16(sp)
   12110:	d9801c04 	addi	r6,sp,112
   12114:	b009883a 	mov	r4,r22
   12118:	001a97c0 	call	1a97c <__ssprint_r>
   1211c:	103d501e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12120:	d8c01e17 	ldw	r3,120(sp)
   12124:	d8801d17 	ldw	r2,116(sp)
   12128:	a811883a 	mov	r8,r21
   1212c:	003fec06 	br	120e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff20e0>
   12130:	8d0fc83a 	sub	r7,r17,r20
   12134:	01fe6b0e 	bge	zero,r7,11ae4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ae4>
   12138:	02c000b4 	movhi	r11,2
   1213c:	39000450 	cmplti	r4,r7,17
   12140:	5adb0384 	addi	r11,r11,27662
   12144:	d8801d17 	ldw	r2,116(sp)
   12148:	2000231e 	bne	r4,zero,121d8 <___svfprintf_internal_r+0xe64>
   1214c:	dc000d15 	stw	r16,52(sp)
   12150:	dc401215 	stw	r17,72(sp)
   12154:	03000404 	movi	r12,16
   12158:	3821883a 	mov	r16,r7
   1215c:	5823883a 	mov	r17,r11
   12160:	00000406 	br	12174 <___svfprintf_internal_r+0xe00>
   12164:	843ffc04 	addi	r16,r16,-16
   12168:	81000448 	cmpgei	r4,r16,17
   1216c:	42000204 	addi	r8,r8,8
   12170:	20001526 	beq	r4,zero,121c8 <___svfprintf_internal_r+0xe54>
   12174:	10800044 	addi	r2,r2,1
   12178:	18c00404 	addi	r3,r3,16
   1217c:	44400015 	stw	r17,0(r8)
   12180:	43000115 	stw	r12,4(r8)
   12184:	d8c01e15 	stw	r3,120(sp)
   12188:	d8801d15 	stw	r2,116(sp)
   1218c:	11000208 	cmpgei	r4,r2,8
   12190:	203ff426 	beq	r4,zero,12164 <__alt_mem_mcu_subsystem_ram_0+0x77ff2164>
   12194:	d9400417 	ldw	r5,16(sp)
   12198:	d9000517 	ldw	r4,20(sp)
   1219c:	d9801c04 	addi	r6,sp,112
   121a0:	db000715 	stw	r12,28(sp)
   121a4:	001a97c0 	call	1a97c <__ssprint_r>
   121a8:	103d2d1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   121ac:	843ffc04 	addi	r16,r16,-16
   121b0:	81000448 	cmpgei	r4,r16,17
   121b4:	d8c01e17 	ldw	r3,120(sp)
   121b8:	d8801d17 	ldw	r2,116(sp)
   121bc:	a811883a 	mov	r8,r21
   121c0:	db000717 	ldw	r12,28(sp)
   121c4:	203feb1e 	bne	r4,zero,12174 <__alt_mem_mcu_subsystem_ram_0+0x77ff2174>
   121c8:	800f883a 	mov	r7,r16
   121cc:	8817883a 	mov	r11,r17
   121d0:	dc000d17 	ldw	r16,52(sp)
   121d4:	dc401217 	ldw	r17,72(sp)
   121d8:	10800044 	addi	r2,r2,1
   121dc:	19c7883a 	add	r3,r3,r7
   121e0:	d8801d15 	stw	r2,116(sp)
   121e4:	42c00015 	stw	r11,0(r8)
   121e8:	41c00115 	stw	r7,4(r8)
   121ec:	d8c01e15 	stw	r3,120(sp)
   121f0:	10800208 	cmpgei	r2,r2,8
   121f4:	10023d1e 	bne	r2,zero,12aec <___svfprintf_internal_r+0x1778>
   121f8:	42000204 	addi	r8,r8,8
   121fc:	003e3906 	br	11ae4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ae4>
   12200:	d9400417 	ldw	r5,16(sp)
   12204:	d9000517 	ldw	r4,20(sp)
   12208:	d9801c04 	addi	r6,sp,112
   1220c:	001a97c0 	call	1a97c <__ssprint_r>
   12210:	103ea926 	beq	r2,zero,11cb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1cb8>
   12214:	003d1206 	br	11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12218:	d9400417 	ldw	r5,16(sp)
   1221c:	d9000517 	ldw	r4,20(sp)
   12220:	d9801c04 	addi	r6,sp,112
   12224:	001a97c0 	call	1a97c <__ssprint_r>
   12228:	103d0d1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   1222c:	d9001617 	ldw	r4,88(sp)
   12230:	d8c01e17 	ldw	r3,120(sp)
   12234:	d8801d17 	ldw	r2,116(sp)
   12238:	a811883a 	mov	r8,r21
   1223c:	20036b16 	blt	r4,zero,12fec <___svfprintf_internal_r+0x1c78>
   12240:	d9000a17 	ldw	r4,40(sp)
   12244:	10800044 	addi	r2,r2,1
   12248:	d8801d15 	stw	r2,116(sp)
   1224c:	20c7883a 	add	r3,r4,r3
   12250:	44800015 	stw	r18,0(r8)
   12254:	41000115 	stw	r4,4(r8)
   12258:	d8c01e15 	stw	r3,120(sp)
   1225c:	10800208 	cmpgei	r2,r2,8
   12260:	103e6026 	beq	r2,zero,11be4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be4>
   12264:	d9400417 	ldw	r5,16(sp)
   12268:	d9000517 	ldw	r4,20(sp)
   1226c:	d9801c04 	addi	r6,sp,112
   12270:	001a97c0 	call	1a97c <__ssprint_r>
   12274:	103cfa1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12278:	d8c01e17 	ldw	r3,120(sp)
   1227c:	a811883a 	mov	r8,r21
   12280:	003e5906 	br	11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   12284:	d8800a17 	ldw	r2,40(sp)
   12288:	da801d17 	ldw	r10,116(sp)
   1228c:	18c00044 	addi	r3,r3,1
   12290:	10800088 	cmpgei	r2,r2,2
   12294:	54000044 	addi	r16,r10,1
   12298:	45c00204 	addi	r23,r8,8
   1229c:	1000f226 	beq	r2,zero,12668 <___svfprintf_internal_r+0x12f4>
   122a0:	00800044 	movi	r2,1
   122a4:	40800115 	stw	r2,4(r8)
   122a8:	44800015 	stw	r18,0(r8)
   122ac:	d8c01e15 	stw	r3,120(sp)
   122b0:	dc001d15 	stw	r16,116(sp)
   122b4:	80800210 	cmplti	r2,r16,8
   122b8:	1001ed26 	beq	r2,zero,12a70 <___svfprintf_internal_r+0x16fc>
   122bc:	d8800f17 	ldw	r2,60(sp)
   122c0:	d9001017 	ldw	r4,64(sp)
   122c4:	84000044 	addi	r16,r16,1
   122c8:	1887883a 	add	r3,r3,r2
   122cc:	b8800115 	stw	r2,4(r23)
   122d0:	b9000015 	stw	r4,0(r23)
   122d4:	d8c01e15 	stw	r3,120(sp)
   122d8:	dc001d15 	stw	r16,116(sp)
   122dc:	80800208 	cmpgei	r2,r16,8
   122e0:	1001ec1e 	bne	r2,zero,12a94 <___svfprintf_internal_r+0x1720>
   122e4:	bdc00204 	addi	r23,r23,8
   122e8:	d8800a17 	ldw	r2,40(sp)
   122ec:	d9000b17 	ldw	r4,44(sp)
   122f0:	d9400c17 	ldw	r5,48(sp)
   122f4:	133fffc4 	addi	r12,r2,-1
   122f8:	ba000204 	addi	r8,r23,8
   122fc:	85800044 	addi	r22,r16,1
   12300:	000d883a 	mov	r6,zero
   12304:	000f883a 	mov	r7,zero
   12308:	d8c01215 	stw	r3,72(sp)
   1230c:	db000915 	stw	r12,36(sp)
   12310:	da000715 	stw	r8,28(sp)
   12314:	dd800d15 	stw	r22,52(sp)
   12318:	001f7e40 	call	1f7e4 <__eqdf2>
   1231c:	da000717 	ldw	r8,28(sp)
   12320:	db000917 	ldw	r12,36(sp)
   12324:	db400d17 	ldw	r13,52(sp)
   12328:	d8c01217 	ldw	r3,72(sp)
   1232c:	10009326 	beq	r2,zero,1257c <___svfprintf_internal_r+0x1208>
   12330:	94800044 	addi	r18,r18,1
   12334:	1b07883a 	add	r3,r3,r12
   12338:	bc800015 	stw	r18,0(r23)
   1233c:	bb000115 	stw	r12,4(r23)
   12340:	d8c01e15 	stw	r3,120(sp)
   12344:	dd801d15 	stw	r22,116(sp)
   12348:	b2800208 	cmpgei	r10,r22,8
   1234c:	5001721e 	bne	r10,zero,12918 <___svfprintf_internal_r+0x15a4>
   12350:	b8800404 	addi	r2,r23,16
   12354:	85800084 	addi	r22,r16,2
   12358:	402f883a 	mov	r23,r8
   1235c:	1011883a 	mov	r8,r2
   12360:	d9001117 	ldw	r4,68(sp)
   12364:	d8801844 	addi	r2,sp,97
   12368:	b8800015 	stw	r2,0(r23)
   1236c:	20c7883a 	add	r3,r4,r3
   12370:	b9000115 	stw	r4,4(r23)
   12374:	d8c01e15 	stw	r3,120(sp)
   12378:	dd801d15 	stw	r22,116(sp)
   1237c:	b2800210 	cmplti	r10,r22,8
   12380:	503e191e 	bne	r10,zero,11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   12384:	003fb706 	br	12264 <__alt_mem_mcu_subsystem_ram_0+0x77ff2264>
   12388:	d9400417 	ldw	r5,16(sp)
   1238c:	d9000517 	ldw	r4,20(sp)
   12390:	d9801c04 	addi	r6,sp,112
   12394:	dac00d15 	stw	r11,52(sp)
   12398:	db000715 	stw	r12,28(sp)
   1239c:	001a97c0 	call	1a97c <__ssprint_r>
   123a0:	103caf1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   123a4:	d8c01e17 	ldw	r3,120(sp)
   123a8:	a811883a 	mov	r8,r21
   123ac:	dac00d17 	ldw	r11,52(sp)
   123b0:	db000717 	ldw	r12,28(sp)
   123b4:	003dbc06 	br	11aa8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1aa8>
   123b8:	d9400417 	ldw	r5,16(sp)
   123bc:	d9000517 	ldw	r4,20(sp)
   123c0:	d9801c04 	addi	r6,sp,112
   123c4:	dac00715 	stw	r11,28(sp)
   123c8:	001a97c0 	call	1a97c <__ssprint_r>
   123cc:	103ca41e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   123d0:	d8c01e17 	ldw	r3,120(sp)
   123d4:	a811883a 	mov	r8,r21
   123d8:	dac00717 	ldw	r11,28(sp)
   123dc:	003dbf06 	br	11adc <__alt_mem_mcu_subsystem_ram_0+0x77ff1adc>
   123e0:	d9400417 	ldw	r5,16(sp)
   123e4:	d9000517 	ldw	r4,20(sp)
   123e8:	d9801c04 	addi	r6,sp,112
   123ec:	001a97c0 	call	1a97c <__ssprint_r>
   123f0:	103c9b1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   123f4:	d8c01e17 	ldw	r3,120(sp)
   123f8:	a811883a 	mov	r8,r21
   123fc:	003dee06 	br	11bb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1bb8>
   12400:	d9001617 	ldw	r4,88(sp)
   12404:	0101c10e 	bge	zero,r4,12b0c <___svfprintf_internal_r+0x1798>
   12408:	d8800917 	ldw	r2,36(sp)
   1240c:	d9000a17 	ldw	r4,40(sp)
   12410:	1021883a 	mov	r16,r2
   12414:	20810d16 	blt	r4,r2,1284c <___svfprintf_internal_r+0x14d8>
   12418:	04000a0e 	bge	zero,r16,12444 <___svfprintf_internal_r+0x10d0>
   1241c:	d8801d17 	ldw	r2,116(sp)
   12420:	1c07883a 	add	r3,r3,r16
   12424:	44800015 	stw	r18,0(r8)
   12428:	10800044 	addi	r2,r2,1
   1242c:	d8801d15 	stw	r2,116(sp)
   12430:	44000115 	stw	r16,4(r8)
   12434:	d8c01e15 	stw	r3,120(sp)
   12438:	10800208 	cmpgei	r2,r2,8
   1243c:	10026d1e 	bne	r2,zero,12df4 <___svfprintf_internal_r+0x1a80>
   12440:	42000204 	addi	r8,r8,8
   12444:	80014e16 	blt	r16,zero,12980 <___svfprintf_internal_r+0x160c>
   12448:	d8800917 	ldw	r2,36(sp)
   1244c:	1421c83a 	sub	r16,r2,r16
   12450:	04010116 	blt	zero,r16,12858 <___svfprintf_internal_r+0x14e4>
   12454:	d8801617 	ldw	r2,88(sp)
   12458:	d9000a17 	ldw	r4,40(sp)
   1245c:	11000216 	blt	r2,r4,12468 <___svfprintf_internal_r+0x10f4>
   12460:	9900004c 	andi	r4,r19,1
   12464:	20000c26 	beq	r4,zero,12498 <___svfprintf_internal_r+0x1124>
   12468:	d9001017 	ldw	r4,64(sp)
   1246c:	d9400f17 	ldw	r5,60(sp)
   12470:	41000015 	stw	r4,0(r8)
   12474:	d9001d17 	ldw	r4,116(sp)
   12478:	1947883a 	add	r3,r3,r5
   1247c:	41400115 	stw	r5,4(r8)
   12480:	21000044 	addi	r4,r4,1
   12484:	d9001d15 	stw	r4,116(sp)
   12488:	d8c01e15 	stw	r3,120(sp)
   1248c:	21000208 	cmpgei	r4,r4,8
   12490:	2002611e 	bne	r4,zero,12e18 <___svfprintf_internal_r+0x1aa4>
   12494:	42000204 	addi	r8,r8,8
   12498:	d9000a17 	ldw	r4,40(sp)
   1249c:	d9400917 	ldw	r5,36(sp)
   124a0:	2085c83a 	sub	r2,r4,r2
   124a4:	2149c83a 	sub	r4,r4,r5
   124a8:	1021883a 	mov	r16,r2
   124ac:	2080010e 	bge	r4,r2,124b4 <___svfprintf_internal_r+0x1140>
   124b0:	2021883a 	mov	r16,r4
   124b4:	04000c0e 	bge	zero,r16,124e8 <___svfprintf_internal_r+0x1174>
   124b8:	d9000917 	ldw	r4,36(sp)
   124bc:	1c07883a 	add	r3,r3,r16
   124c0:	44000115 	stw	r16,4(r8)
   124c4:	9125883a 	add	r18,r18,r4
   124c8:	d9001d17 	ldw	r4,116(sp)
   124cc:	44800015 	stw	r18,0(r8)
   124d0:	d8c01e15 	stw	r3,120(sp)
   124d4:	21000044 	addi	r4,r4,1
   124d8:	d9001d15 	stw	r4,116(sp)
   124dc:	21000208 	cmpgei	r4,r4,8
   124e0:	2002841e 	bne	r4,zero,12ef4 <___svfprintf_internal_r+0x1b80>
   124e4:	42000204 	addi	r8,r8,8
   124e8:	8000010e 	bge	r16,zero,124f0 <___svfprintf_internal_r+0x117c>
   124ec:	0021883a 	mov	r16,zero
   124f0:	1421c83a 	sub	r16,r2,r16
   124f4:	043dbc0e 	bge	zero,r16,11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   124f8:	02c000b4 	movhi	r11,2
   124fc:	81000450 	cmplti	r4,r16,17
   12500:	5adb0384 	addi	r11,r11,27662
   12504:	d8801d17 	ldw	r2,116(sp)
   12508:	20016f1e 	bne	r4,zero,12ac8 <___svfprintf_internal_r+0x1754>
   1250c:	04800404 	movi	r18,16
   12510:	dd800517 	ldw	r22,20(sp)
   12514:	582f883a 	mov	r23,r11
   12518:	00000406 	br	1252c <___svfprintf_internal_r+0x11b8>
   1251c:	42000204 	addi	r8,r8,8
   12520:	843ffc04 	addi	r16,r16,-16
   12524:	81000448 	cmpgei	r4,r16,17
   12528:	20016626 	beq	r4,zero,12ac4 <___svfprintf_internal_r+0x1750>
   1252c:	10800044 	addi	r2,r2,1
   12530:	18c00404 	addi	r3,r3,16
   12534:	45c00015 	stw	r23,0(r8)
   12538:	44800115 	stw	r18,4(r8)
   1253c:	d8c01e15 	stw	r3,120(sp)
   12540:	d8801d15 	stw	r2,116(sp)
   12544:	11000208 	cmpgei	r4,r2,8
   12548:	203ff426 	beq	r4,zero,1251c <__alt_mem_mcu_subsystem_ram_0+0x77ff251c>
   1254c:	d9400417 	ldw	r5,16(sp)
   12550:	d9801c04 	addi	r6,sp,112
   12554:	b009883a 	mov	r4,r22
   12558:	001a97c0 	call	1a97c <__ssprint_r>
   1255c:	103c401e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12560:	d8c01e17 	ldw	r3,120(sp)
   12564:	d8801d17 	ldw	r2,116(sp)
   12568:	a811883a 	mov	r8,r21
   1256c:	003fec06 	br	12520 <__alt_mem_mcu_subsystem_ram_0+0x77ff2520>
   12570:	002f883a 	mov	r23,zero
   12574:	a825883a 	mov	r18,r21
   12578:	003e9506 	br	11fd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fd0>
   1257c:	033f780e 	bge	zero,r12,12360 <__alt_mem_mcu_subsystem_ram_0+0x77ff2360>
   12580:	60800450 	cmplti	r2,r12,17
   12584:	02c000b4 	movhi	r11,2
   12588:	1003241e 	bne	r2,zero,1321c <___svfprintf_internal_r+0x1ea8>
   1258c:	5adb0384 	addi	r11,r11,27662
   12590:	b805883a 	mov	r2,r23
   12594:	dc400715 	stw	r17,28(sp)
   12598:	982f883a 	mov	r23,r19
   1259c:	04800404 	movi	r18,16
   125a0:	6023883a 	mov	r17,r12
   125a4:	dd800517 	ldw	r22,20(sp)
   125a8:	5827883a 	mov	r19,r11
   125ac:	6821883a 	mov	r16,r13
   125b0:	00000506 	br	125c8 <___svfprintf_internal_r+0x1254>
   125b4:	10800204 	addi	r2,r2,8
   125b8:	8c7ffc04 	addi	r17,r17,-16
   125bc:	89000448 	cmpgei	r4,r17,17
   125c0:	20017626 	beq	r4,zero,12b9c <___svfprintf_internal_r+0x1828>
   125c4:	84000044 	addi	r16,r16,1
   125c8:	18c00404 	addi	r3,r3,16
   125cc:	14c00015 	stw	r19,0(r2)
   125d0:	14800115 	stw	r18,4(r2)
   125d4:	d8c01e15 	stw	r3,120(sp)
   125d8:	dc001d15 	stw	r16,116(sp)
   125dc:	81000208 	cmpgei	r4,r16,8
   125e0:	203ff426 	beq	r4,zero,125b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff25b4>
   125e4:	d9400417 	ldw	r5,16(sp)
   125e8:	d9801c04 	addi	r6,sp,112
   125ec:	b009883a 	mov	r4,r22
   125f0:	001a97c0 	call	1a97c <__ssprint_r>
   125f4:	103c1a1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   125f8:	dc001d17 	ldw	r16,116(sp)
   125fc:	d8c01e17 	ldw	r3,120(sp)
   12600:	a805883a 	mov	r2,r21
   12604:	003fec06 	br	125b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff25b8>
   12608:	d8c00817 	ldw	r3,32(sp)
   1260c:	5880040c 	andi	r2,r11,16
   12610:	1d000017 	ldw	r20,0(r3)
   12614:	18c00104 	addi	r3,r3,4
   12618:	d8c00815 	stw	r3,32(sp)
   1261c:	1000031e 	bne	r2,zero,1262c <___svfprintf_internal_r+0x12b8>
   12620:	5880100c 	andi	r2,r11,64
   12624:	10000126 	beq	r2,zero,1262c <___svfprintf_internal_r+0x12b8>
   12628:	a53fffcc 	andi	r20,r20,65535
   1262c:	002f883a 	mov	r23,zero
   12630:	00800044 	movi	r2,1
   12634:	003c2406 	br	116c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16c8>
   12638:	d8c00817 	ldw	r3,32(sp)
   1263c:	5880040c 	andi	r2,r11,16
   12640:	1d000017 	ldw	r20,0(r3)
   12644:	18c00104 	addi	r3,r3,4
   12648:	d8c00815 	stw	r3,32(sp)
   1264c:	1000031e 	bne	r2,zero,1265c <___svfprintf_internal_r+0x12e8>
   12650:	5880100c 	andi	r2,r11,64
   12654:	10000126 	beq	r2,zero,1265c <___svfprintf_internal_r+0x12e8>
   12658:	a53fffcc 	andi	r20,r20,65535
   1265c:	002f883a 	mov	r23,zero
   12660:	0005883a 	mov	r2,zero
   12664:	003c1806 	br	116c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16c8>
   12668:	9880004c 	andi	r2,r19,1
   1266c:	103f0c1e 	bne	r2,zero,122a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff22a0>
   12670:	00800044 	movi	r2,1
   12674:	dc001d15 	stw	r16,116(sp)
   12678:	44800015 	stw	r18,0(r8)
   1267c:	40800115 	stw	r2,4(r8)
   12680:	d8c01e15 	stw	r3,120(sp)
   12684:	84000208 	cmpgei	r16,r16,8
   12688:	8000a31e 	bne	r16,zero,12918 <___svfprintf_internal_r+0x15a4>
   1268c:	55800084 	addi	r22,r10,2
   12690:	42000404 	addi	r8,r8,16
   12694:	003f3206 	br	12360 <__alt_mem_mcu_subsystem_ram_0+0x77ff2360>
   12698:	d9400417 	ldw	r5,16(sp)
   1269c:	d9000517 	ldw	r4,20(sp)
   126a0:	d9801c04 	addi	r6,sp,112
   126a4:	001a97c0 	call	1a97c <__ssprint_r>
   126a8:	103bed1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   126ac:	d8c01e17 	ldw	r3,120(sp)
   126b0:	003d7b06 	br	11ca0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ca0>
   126b4:	a825883a 	mov	r18,r21
   126b8:	003e4506 	br	11fd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fd0>
   126bc:	002f883a 	mov	r23,zero
   126c0:	003d8c06 	br	11cf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1cf4>
   126c4:	a02fd7fa 	srai	r23,r20,31
   126c8:	003c9906 	br	11930 <__alt_mem_mcu_subsystem_ram_0+0x77ff1930>
   126cc:	00800c04 	movi	r2,48
   126d0:	d8801585 	stb	r2,86(sp)
   126d4:	dc0015c5 	stb	r16,87(sp)
   126d8:	5ac00094 	ori	r11,r11,2
   126dc:	00800084 	movi	r2,2
   126e0:	003bf906 	br	116c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff16c8>
   126e4:	d9000617 	ldw	r4,24(sp)
   126e8:	2005d7fa 	srai	r2,r4,31
   126ec:	19000015 	stw	r4,0(r3)
   126f0:	18800115 	stw	r2,4(r3)
   126f4:	003b4606 	br	11410 <__alt_mem_mcu_subsystem_ram_0+0x77ff1410>
   126f8:	d9000b17 	ldw	r4,44(sp)
   126fc:	d9400c17 	ldw	r5,48(sp)
   12700:	da000915 	stw	r8,36(sp)
   12704:	200d883a 	mov	r6,r4
   12708:	280f883a 	mov	r7,r5
   1270c:	dac00715 	stw	r11,28(sp)
   12710:	001f9440 	call	1f944 <__unorddf2>
   12714:	dac00717 	ldw	r11,28(sp)
   12718:	da000917 	ldw	r8,36(sp)
   1271c:	1002a01e 	bne	r2,zero,131a0 <___svfprintf_internal_r+0x1e2c>
   12720:	053ff7c4 	movi	r20,-33
   12724:	b0bfffe0 	cmpeqi	r2,r22,-1
   12728:	8528703a 	and	r20,r16,r20
   1272c:	1001d91e 	bne	r2,zero,12e94 <___svfprintf_internal_r+0x1b20>
   12730:	a08011d8 	cmpnei	r2,r20,71
   12734:	10014b26 	beq	r2,zero,12c64 <___svfprintf_internal_r+0x18f0>
   12738:	d8800c17 	ldw	r2,48(sp)
   1273c:	5cc04014 	ori	r19,r11,256
   12740:	1001c716 	blt	r2,zero,12e60 <___svfprintf_internal_r+0x1aec>
   12744:	d8c00c17 	ldw	r3,48(sp)
   12748:	d8000705 	stb	zero,28(sp)
   1274c:	808019a0 	cmpeqi	r2,r16,102
   12750:	d8800d15 	stw	r2,52(sp)
   12754:	1001d11e 	bne	r2,zero,12e9c <___svfprintf_internal_r+0x1b28>
   12758:	834011a0 	cmpeqi	r13,r16,70
   1275c:	6802041e 	bne	r13,zero,12f70 <___svfprintf_internal_r+0x1bfc>
   12760:	a0801158 	cmpnei	r2,r20,69
   12764:	10014226 	beq	r2,zero,12c70 <___svfprintf_internal_r+0x18fc>
   12768:	d8801a04 	addi	r2,sp,104
   1276c:	d8800315 	stw	r2,12(sp)
   12770:	d9400b17 	ldw	r5,44(sp)
   12774:	d8801704 	addi	r2,sp,92
   12778:	d9000517 	ldw	r4,20(sp)
   1277c:	d8800215 	stw	r2,8(sp)
   12780:	d8801604 	addi	r2,sp,88
   12784:	180d883a 	mov	r6,r3
   12788:	d8800115 	stw	r2,4(sp)
   1278c:	dd800015 	stw	r22,0(sp)
   12790:	01c00084 	movi	r7,2
   12794:	da001315 	stw	r8,76(sp)
   12798:	db401215 	stw	r13,72(sp)
   1279c:	dac00a15 	stw	r11,40(sp)
   127a0:	d8c00915 	stw	r3,36(sp)
   127a4:	0015f340 	call	15f34 <_dtoa_r>
   127a8:	1025883a 	mov	r18,r2
   127ac:	808019d8 	cmpnei	r2,r16,103
   127b0:	d8c00917 	ldw	r3,36(sp)
   127b4:	dac00a17 	ldw	r11,40(sp)
   127b8:	db401217 	ldw	r13,72(sp)
   127bc:	da001317 	ldw	r8,76(sp)
   127c0:	1002c31e 	bne	r2,zero,132d0 <___svfprintf_internal_r+0x1f5c>
   127c4:	5880004c 	andi	r2,r11,1
   127c8:	10014d26 	beq	r2,zero,12d00 <___svfprintf_internal_r+0x198c>
   127cc:	95af883a 	add	r23,r18,r22
   127d0:	d9000b17 	ldw	r4,44(sp)
   127d4:	000d883a 	mov	r6,zero
   127d8:	000f883a 	mov	r7,zero
   127dc:	180b883a 	mov	r5,r3
   127e0:	da000a15 	stw	r8,40(sp)
   127e4:	dac00915 	stw	r11,36(sp)
   127e8:	001f7e40 	call	1f7e4 <__eqdf2>
   127ec:	dac00917 	ldw	r11,36(sp)
   127f0:	da000a17 	ldw	r8,40(sp)
   127f4:	1001911e 	bne	r2,zero,12e3c <___svfprintf_internal_r+0x1ac8>
   127f8:	b805883a 	mov	r2,r23
   127fc:	1485c83a 	sub	r2,r2,r18
   12800:	d8800a15 	stw	r2,40(sp)
   12804:	d8801617 	ldw	r2,88(sp)
   12808:	a50011d8 	cmpnei	r20,r20,71
   1280c:	d8800915 	stw	r2,36(sp)
   12810:	a0014226 	beq	r20,zero,12d1c <___svfprintf_internal_r+0x19a8>
   12814:	d8800d17 	ldw	r2,52(sp)
   12818:	10014526 	beq	r2,zero,12d30 <___svfprintf_internal_r+0x19bc>
   1281c:	d8800917 	ldw	r2,36(sp)
   12820:	0082780e 	bge	zero,r2,13204 <___svfprintf_internal_r+0x1e90>
   12824:	b002661e 	bne	r22,zero,131c0 <___svfprintf_internal_r+0x1e4c>
   12828:	5ac0004c 	andi	r11,r11,1
   1282c:	5802641e 	bne	r11,zero,131c0 <___svfprintf_internal_r+0x1e4c>
   12830:	ddc00917 	ldw	r23,36(sp)
   12834:	b829883a 	mov	r20,r23
   12838:	d8800707 	ldb	r2,28(sp)
   1283c:	1001581e 	bne	r2,zero,12da0 <___svfprintf_internal_r+0x1a2c>
   12840:	db001543 	ldbu	r12,85(sp)
   12844:	002d883a 	mov	r22,zero
   12848:	003de506 	br	11fe0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fe0>
   1284c:	2021883a 	mov	r16,r4
   12850:	043ef216 	blt	zero,r16,1241c <__alt_mem_mcu_subsystem_ram_0+0x77ff241c>
   12854:	003efb06 	br	12444 <__alt_mem_mcu_subsystem_ram_0+0x77ff2444>
   12858:	02c000b4 	movhi	r11,2
   1285c:	81000450 	cmplti	r4,r16,17
   12860:	5adb0384 	addi	r11,r11,27662
   12864:	d8801d17 	ldw	r2,116(sp)
   12868:	2000e21e 	bne	r4,zero,12bf4 <___svfprintf_internal_r+0x1880>
   1286c:	dc800715 	stw	r18,28(sp)
   12870:	dc400d15 	stw	r17,52(sp)
   12874:	05c00404 	movi	r23,16
   12878:	8023883a 	mov	r17,r16
   1287c:	dd800517 	ldw	r22,20(sp)
   12880:	dc000417 	ldw	r16,16(sp)
   12884:	5825883a 	mov	r18,r11
   12888:	00000406 	br	1289c <___svfprintf_internal_r+0x1528>
   1288c:	42000204 	addi	r8,r8,8
   12890:	8c7ffc04 	addi	r17,r17,-16
   12894:	89000448 	cmpgei	r4,r17,17
   12898:	2000d226 	beq	r4,zero,12be4 <___svfprintf_internal_r+0x1870>
   1289c:	10800044 	addi	r2,r2,1
   128a0:	18c00404 	addi	r3,r3,16
   128a4:	44800015 	stw	r18,0(r8)
   128a8:	45c00115 	stw	r23,4(r8)
   128ac:	d8c01e15 	stw	r3,120(sp)
   128b0:	d8801d15 	stw	r2,116(sp)
   128b4:	11000208 	cmpgei	r4,r2,8
   128b8:	203ff426 	beq	r4,zero,1288c <__alt_mem_mcu_subsystem_ram_0+0x77ff288c>
   128bc:	d9801c04 	addi	r6,sp,112
   128c0:	800b883a 	mov	r5,r16
   128c4:	b009883a 	mov	r4,r22
   128c8:	001a97c0 	call	1a97c <__ssprint_r>
   128cc:	103b641e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   128d0:	d8c01e17 	ldw	r3,120(sp)
   128d4:	d8801d17 	ldw	r2,116(sp)
   128d8:	a811883a 	mov	r8,r21
   128dc:	003fec06 	br	12890 <__alt_mem_mcu_subsystem_ram_0+0x77ff2890>
   128e0:	0463c83a 	sub	r17,zero,r17
   128e4:	d8800815 	stw	r2,32(sp)
   128e8:	003d4706 	br	11e08 <__alt_mem_mcu_subsystem_ram_0+0x77ff1e08>
   128ec:	d9000517 	ldw	r4,20(sp)
   128f0:	01401004 	movi	r5,64
   128f4:	000fdf40 	call	fdf4 <_malloc_r>
   128f8:	d8c00417 	ldw	r3,16(sp)
   128fc:	18800015 	stw	r2,0(r3)
   12900:	18800415 	stw	r2,16(r3)
   12904:	10027626 	beq	r2,zero,132e0 <___svfprintf_internal_r+0x1f6c>
   12908:	d8c00417 	ldw	r3,16(sp)
   1290c:	00801004 	movi	r2,64
   12910:	18800515 	stw	r2,20(r3)
   12914:	003ab206 	br	113e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff13e0>
   12918:	d9400417 	ldw	r5,16(sp)
   1291c:	d9000517 	ldw	r4,20(sp)
   12920:	d9801c04 	addi	r6,sp,112
   12924:	001a97c0 	call	1a97c <__ssprint_r>
   12928:	103b4d1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   1292c:	da801d17 	ldw	r10,116(sp)
   12930:	d8c01e17 	ldw	r3,120(sp)
   12934:	da002b04 	addi	r8,sp,172
   12938:	55800044 	addi	r22,r10,1
   1293c:	a82f883a 	mov	r23,r21
   12940:	003e8706 	br	12360 <__alt_mem_mcu_subsystem_ram_0+0x77ff2360>
   12944:	e4000043 	ldbu	r16,1(fp)
   12948:	5ac00814 	ori	r11,r11,32
   1294c:	e7000044 	addi	fp,fp,1
   12950:	84003fcc 	andi	r16,r16,255
   12954:	8400201c 	xori	r16,r16,128
   12958:	843fe004 	addi	r16,r16,-128
   1295c:	003ad106 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   12960:	d9400417 	ldw	r5,16(sp)
   12964:	d9000517 	ldw	r4,20(sp)
   12968:	d9801c04 	addi	r6,sp,112
   1296c:	001a97c0 	call	1a97c <__ssprint_r>
   12970:	103b3b1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12974:	d8c01e17 	ldw	r3,120(sp)
   12978:	a811883a 	mov	r8,r21
   1297c:	003dcb06 	br	120ac <__alt_mem_mcu_subsystem_ram_0+0x77ff20ac>
   12980:	0021883a 	mov	r16,zero
   12984:	003eb006 	br	12448 <__alt_mem_mcu_subsystem_ram_0+0x77ff2448>
   12988:	b08001f0 	cmpltui	r2,r22,7
   1298c:	b029883a 	mov	r20,r22
   12990:	1000af26 	beq	r2,zero,12c50 <___svfprintf_internal_r+0x18dc>
   12994:	048000b4 	movhi	r18,2
   12998:	dcc00815 	stw	r19,32(sp)
   1299c:	a02f883a 	mov	r23,r20
   129a0:	5827883a 	mov	r19,r11
   129a4:	002d883a 	mov	r22,zero
   129a8:	d8000915 	stw	zero,36(sp)
   129ac:	949b0104 	addi	r18,r18,27652
   129b0:	0005883a 	mov	r2,zero
   129b4:	003bf106 	br	1197c <__alt_mem_mcu_subsystem_ram_0+0x77ff197c>
   129b8:	dc000715 	stw	r16,28(sp)
   129bc:	dc400915 	stw	r17,36(sp)
   129c0:	a021883a 	mov	r16,r20
   129c4:	b823883a 	mov	r17,r23
   129c8:	a825883a 	mov	r18,r21
   129cc:	4029883a 	mov	r20,r8
   129d0:	602f883a 	mov	r23,r12
   129d4:	8009883a 	mov	r4,r16
   129d8:	880b883a 	mov	r5,r17
   129dc:	01800284 	movi	r6,10
   129e0:	000f883a 	mov	r7,zero
   129e4:	000d0840 	call	d084 <__umoddi3>
   129e8:	10800c04 	addi	r2,r2,48
   129ec:	94bfffc4 	addi	r18,r18,-1
   129f0:	8009883a 	mov	r4,r16
   129f4:	880b883a 	mov	r5,r17
   129f8:	90800005 	stb	r2,0(r18)
   129fc:	01800284 	movi	r6,10
   12a00:	000f883a 	mov	r7,zero
   12a04:	000caec0 	call	caec <__udivdi3>
   12a08:	1021883a 	mov	r16,r2
   12a0c:	10c4b03a 	or	r2,r2,r3
   12a10:	1823883a 	mov	r17,r3
   12a14:	103fef1e 	bne	r2,zero,129d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff29d4>
   12a18:	b819883a 	mov	r12,r23
   12a1c:	dc000717 	ldw	r16,28(sp)
   12a20:	dc400917 	ldw	r17,36(sp)
   12a24:	a011883a 	mov	r8,r20
   12a28:	acafc83a 	sub	r23,r21,r18
   12a2c:	003d6806 	br	11fd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fd0>
   12a30:	d8800617 	ldw	r2,24(sp)
   12a34:	18800015 	stw	r2,0(r3)
   12a38:	003a7506 	br	11410 <__alt_mem_mcu_subsystem_ram_0+0x77ff1410>
   12a3c:	d9400417 	ldw	r5,16(sp)
   12a40:	d9000517 	ldw	r4,20(sp)
   12a44:	d9801c04 	addi	r6,sp,112
   12a48:	dac00d15 	stw	r11,52(sp)
   12a4c:	db000715 	stw	r12,28(sp)
   12a50:	001a97c0 	call	1a97c <__ssprint_r>
   12a54:	103b021e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12a58:	d8c01e17 	ldw	r3,120(sp)
   12a5c:	d8801547 	ldb	r2,85(sp)
   12a60:	a811883a 	mov	r8,r21
   12a64:	dac00d17 	ldw	r11,52(sp)
   12a68:	db000717 	ldw	r12,28(sp)
   12a6c:	003c0106 	br	11a74 <__alt_mem_mcu_subsystem_ram_0+0x77ff1a74>
   12a70:	d9400417 	ldw	r5,16(sp)
   12a74:	d9000517 	ldw	r4,20(sp)
   12a78:	d9801c04 	addi	r6,sp,112
   12a7c:	001a97c0 	call	1a97c <__ssprint_r>
   12a80:	103af71e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12a84:	d8c01e17 	ldw	r3,120(sp)
   12a88:	dc001d17 	ldw	r16,116(sp)
   12a8c:	a82f883a 	mov	r23,r21
   12a90:	003e0a06 	br	122bc <__alt_mem_mcu_subsystem_ram_0+0x77ff22bc>
   12a94:	d9400417 	ldw	r5,16(sp)
   12a98:	d9000517 	ldw	r4,20(sp)
   12a9c:	d9801c04 	addi	r6,sp,112
   12aa0:	001a97c0 	call	1a97c <__ssprint_r>
   12aa4:	103aee1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12aa8:	d8c01e17 	ldw	r3,120(sp)
   12aac:	dc001d17 	ldw	r16,116(sp)
   12ab0:	a82f883a 	mov	r23,r21
   12ab4:	003e0c06 	br	122e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff22e8>
   12ab8:	10c00060 	cmpeqi	r3,r2,1
   12abc:	183b2226 	beq	r3,zero,11748 <__alt_mem_mcu_subsystem_ram_0+0x77ff1748>
   12ac0:	003d3006 	br	11f84 <__alt_mem_mcu_subsystem_ram_0+0x77ff1f84>
   12ac4:	b817883a 	mov	r11,r23
   12ac8:	10800044 	addi	r2,r2,1
   12acc:	42c00015 	stw	r11,0(r8)
   12ad0:	44000115 	stw	r16,4(r8)
   12ad4:	1c07883a 	add	r3,r3,r16
   12ad8:	d8801d15 	stw	r2,116(sp)
   12adc:	d8c01e15 	stw	r3,120(sp)
   12ae0:	10800208 	cmpgei	r2,r2,8
   12ae4:	103c3f26 	beq	r2,zero,11be4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be4>
   12ae8:	003dde06 	br	12264 <__alt_mem_mcu_subsystem_ram_0+0x77ff2264>
   12aec:	d9400417 	ldw	r5,16(sp)
   12af0:	d9000517 	ldw	r4,20(sp)
   12af4:	d9801c04 	addi	r6,sp,112
   12af8:	001a97c0 	call	1a97c <__ssprint_r>
   12afc:	103ad81e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12b00:	d8c01e17 	ldw	r3,120(sp)
   12b04:	a811883a 	mov	r8,r21
   12b08:	003bf606 	br	11ae4 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ae4>
   12b0c:	d8801d17 	ldw	r2,116(sp)
   12b10:	014000b4 	movhi	r5,2
   12b14:	295b0304 	addi	r5,r5,27660
   12b18:	10800044 	addi	r2,r2,1
   12b1c:	18c00044 	addi	r3,r3,1
   12b20:	41400015 	stw	r5,0(r8)
   12b24:	01400044 	movi	r5,1
   12b28:	d8801d15 	stw	r2,116(sp)
   12b2c:	41400115 	stw	r5,4(r8)
   12b30:	d8c01e15 	stw	r3,120(sp)
   12b34:	10800208 	cmpgei	r2,r2,8
   12b38:	1000cd1e 	bne	r2,zero,12e70 <___svfprintf_internal_r+0x1afc>
   12b3c:	42000204 	addi	r8,r8,8
   12b40:	2000021e 	bne	r4,zero,12b4c <___svfprintf_internal_r+0x17d8>
   12b44:	d8800a17 	ldw	r2,40(sp)
   12b48:	10004326 	beq	r2,zero,12c58 <___svfprintf_internal_r+0x18e4>
   12b4c:	d8801017 	ldw	r2,64(sp)
   12b50:	d9400f17 	ldw	r5,60(sp)
   12b54:	40800015 	stw	r2,0(r8)
   12b58:	d8801d17 	ldw	r2,116(sp)
   12b5c:	28c7883a 	add	r3,r5,r3
   12b60:	41400115 	stw	r5,4(r8)
   12b64:	10800044 	addi	r2,r2,1
   12b68:	d8c01e15 	stw	r3,120(sp)
   12b6c:	d8801d15 	stw	r2,116(sp)
   12b70:	11400208 	cmpgei	r5,r2,8
   12b74:	283da81e 	bne	r5,zero,12218 <__alt_mem_mcu_subsystem_ram_0+0x77ff2218>
   12b78:	42000204 	addi	r8,r8,8
   12b7c:	003daf06 	br	1223c <__alt_mem_mcu_subsystem_ram_0+0x77ff223c>
   12b80:	d9400417 	ldw	r5,16(sp)
   12b84:	d9000517 	ldw	r4,20(sp)
   12b88:	d9801c04 	addi	r6,sp,112
   12b8c:	001a97c0 	call	1a97c <__ssprint_r>
   12b90:	103ab31e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12b94:	a811883a 	mov	r8,r21
   12b98:	003d3006 	br	1205c <__alt_mem_mcu_subsystem_ram_0+0x77ff205c>
   12b9c:	8819883a 	mov	r12,r17
   12ba0:	dc400717 	ldw	r17,28(sp)
   12ba4:	9817883a 	mov	r11,r19
   12ba8:	85800044 	addi	r22,r16,1
   12bac:	b827883a 	mov	r19,r23
   12bb0:	102f883a 	mov	r23,r2
   12bb4:	10800204 	addi	r2,r2,8
   12bb8:	1b07883a 	add	r3,r3,r12
   12bbc:	bac00015 	stw	r11,0(r23)
   12bc0:	bb000115 	stw	r12,4(r23)
   12bc4:	d8c01e15 	stw	r3,120(sp)
   12bc8:	dd801d15 	stw	r22,116(sp)
   12bcc:	b1000208 	cmpgei	r4,r22,8
   12bd0:	203f511e 	bne	r4,zero,12918 <__alt_mem_mcu_subsystem_ram_0+0x77ff2918>
   12bd4:	b5800044 	addi	r22,r22,1
   12bd8:	12000204 	addi	r8,r2,8
   12bdc:	102f883a 	mov	r23,r2
   12be0:	003ddf06 	br	12360 <__alt_mem_mcu_subsystem_ram_0+0x77ff2360>
   12be4:	8821883a 	mov	r16,r17
   12be8:	9017883a 	mov	r11,r18
   12bec:	dc400d17 	ldw	r17,52(sp)
   12bf0:	dc800717 	ldw	r18,28(sp)
   12bf4:	10800044 	addi	r2,r2,1
   12bf8:	1c07883a 	add	r3,r3,r16
   12bfc:	d8801d15 	stw	r2,116(sp)
   12c00:	42c00015 	stw	r11,0(r8)
   12c04:	44000115 	stw	r16,4(r8)
   12c08:	d8c01e15 	stw	r3,120(sp)
   12c0c:	10800208 	cmpgei	r2,r2,8
   12c10:	1000ee1e 	bne	r2,zero,12fcc <___svfprintf_internal_r+0x1c58>
   12c14:	42000204 	addi	r8,r8,8
   12c18:	003e0e06 	br	12454 <__alt_mem_mcu_subsystem_ram_0+0x77ff2454>
   12c1c:	048000b4 	movhi	r18,2
   12c20:	949af404 	addi	r18,r18,27600
   12c24:	003cb106 	br	11eec <__alt_mem_mcu_subsystem_ram_0+0x77ff1eec>
   12c28:	9009883a 	mov	r4,r18
   12c2c:	00112e40 	call	112e4 <strlen>
   12c30:	102f883a 	mov	r23,r2
   12c34:	db001543 	ldbu	r12,85(sp)
   12c38:	1029883a 	mov	r20,r2
   12c3c:	dac00717 	ldw	r11,28(sp)
   12c40:	da000817 	ldw	r8,32(sp)
   12c44:	103b120e 	bge	r2,zero,11890 <__alt_mem_mcu_subsystem_ram_0+0x77ff1890>
   12c48:	0029883a 	mov	r20,zero
   12c4c:	003b1006 	br	11890 <__alt_mem_mcu_subsystem_ram_0+0x77ff1890>
   12c50:	05000184 	movi	r20,6
   12c54:	003f4f06 	br	12994 <__alt_mem_mcu_subsystem_ram_0+0x77ff2994>
   12c58:	9880004c 	andi	r2,r19,1
   12c5c:	103be226 	beq	r2,zero,11be8 <__alt_mem_mcu_subsystem_ram_0+0x77ff1be8>
   12c60:	003fba06 	br	12b4c <__alt_mem_mcu_subsystem_ram_0+0x77ff2b4c>
   12c64:	b03eb41e 	bne	r22,zero,12738 <__alt_mem_mcu_subsystem_ram_0+0x77ff2738>
   12c68:	05800044 	movi	r22,1
   12c6c:	003eb206 	br	12738 <__alt_mem_mcu_subsystem_ram_0+0x77ff2738>
   12c70:	d8801a04 	addi	r2,sp,104
   12c74:	d8800315 	stw	r2,12(sp)
   12c78:	d9400b17 	ldw	r5,44(sp)
   12c7c:	d8801704 	addi	r2,sp,92
   12c80:	d9000517 	ldw	r4,20(sp)
   12c84:	b3000044 	addi	r12,r22,1
   12c88:	d8800215 	stw	r2,8(sp)
   12c8c:	d8801604 	addi	r2,sp,88
   12c90:	db000015 	stw	r12,0(sp)
   12c94:	180d883a 	mov	r6,r3
   12c98:	d8800115 	stw	r2,4(sp)
   12c9c:	01c00084 	movi	r7,2
   12ca0:	da001415 	stw	r8,80(sp)
   12ca4:	db401315 	stw	r13,76(sp)
   12ca8:	dac01215 	stw	r11,72(sp)
   12cac:	db000a15 	stw	r12,40(sp)
   12cb0:	d8c00915 	stw	r3,36(sp)
   12cb4:	0015f340 	call	15f34 <_dtoa_r>
   12cb8:	d8c00917 	ldw	r3,36(sp)
   12cbc:	db000a17 	ldw	r12,40(sp)
   12cc0:	dac01217 	ldw	r11,72(sp)
   12cc4:	db401317 	ldw	r13,76(sp)
   12cc8:	da001417 	ldw	r8,80(sp)
   12ccc:	1025883a 	mov	r18,r2
   12cd0:	808011d8 	cmpnei	r2,r16,71
   12cd4:	1001651e 	bne	r2,zero,1326c <___svfprintf_internal_r+0x1ef8>
   12cd8:	5880004c 	andi	r2,r11,1
   12cdc:	10015d26 	beq	r2,zero,13254 <___svfprintf_internal_r+0x1ee0>
   12ce0:	932f883a 	add	r23,r18,r12
   12ce4:	683eba26 	beq	r13,zero,127d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff27d0>
   12ce8:	90800007 	ldb	r2,0(r18)
   12cec:	10800c20 	cmpeqi	r2,r2,48
   12cf0:	1001131e 	bne	r2,zero,13140 <___svfprintf_internal_r+0x1dcc>
   12cf4:	db001617 	ldw	r12,88(sp)
   12cf8:	bb2f883a 	add	r23,r23,r12
   12cfc:	003eb406 	br	127d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff27d0>
   12d00:	d8801617 	ldw	r2,88(sp)
   12d04:	a50011e0 	cmpeqi	r20,r20,71
   12d08:	d8800915 	stw	r2,36(sp)
   12d0c:	d8801a17 	ldw	r2,104(sp)
   12d10:	1485c83a 	sub	r2,r2,r18
   12d14:	d8800a15 	stw	r2,40(sp)
   12d18:	a0000526 	beq	r20,zero,12d30 <___svfprintf_internal_r+0x19bc>
   12d1c:	d8c00917 	ldw	r3,36(sp)
   12d20:	18bfff50 	cmplti	r2,r3,-3
   12d24:	1000011e 	bne	r2,zero,12d2c <___svfprintf_internal_r+0x19b8>
   12d28:	b0c0220e 	bge	r22,r3,12db4 <___svfprintf_internal_r+0x1a40>
   12d2c:	843fff84 	addi	r16,r16,-2
   12d30:	d8800917 	ldw	r2,36(sp)
   12d34:	dc001845 	stb	r16,97(sp)
   12d38:	15ffffc4 	addi	r23,r2,-1
   12d3c:	ddc01615 	stw	r23,88(sp)
   12d40:	b8012716 	blt	r23,zero,131e0 <___svfprintf_internal_r+0x1e6c>
   12d44:	00800ac4 	movi	r2,43
   12d48:	d8801885 	stb	r2,98(sp)
   12d4c:	b8800290 	cmplti	r2,r23,10
   12d50:	1000d126 	beq	r2,zero,13098 <___svfprintf_internal_r+0x1d24>
   12d54:	bdc00c04 	addi	r23,r23,48
   12d58:	00800c04 	movi	r2,48
   12d5c:	d88018c5 	stb	r2,99(sp)
   12d60:	ddc01905 	stb	r23,100(sp)
   12d64:	d8c01944 	addi	r3,sp,101
   12d68:	d9000a17 	ldw	r4,40(sp)
   12d6c:	d8801844 	addi	r2,sp,97
   12d70:	1887c83a 	sub	r3,r3,r2
   12d74:	d8c01115 	stw	r3,68(sp)
   12d78:	20800088 	cmpgei	r2,r4,2
   12d7c:	192f883a 	add	r23,r3,r4
   12d80:	10011c26 	beq	r2,zero,131f4 <___svfprintf_internal_r+0x1e80>
   12d84:	d8800f17 	ldw	r2,60(sp)
   12d88:	b8af883a 	add	r23,r23,r2
   12d8c:	b829883a 	mov	r20,r23
   12d90:	b800010e 	bge	r23,zero,12d98 <___svfprintf_internal_r+0x1a24>
   12d94:	0029883a 	mov	r20,zero
   12d98:	d8000915 	stw	zero,36(sp)
   12d9c:	003ea606 	br	12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   12da0:	00800b44 	movi	r2,45
   12da4:	d8801545 	stb	r2,85(sp)
   12da8:	002d883a 	mov	r22,zero
   12dac:	00800b44 	movi	r2,45
   12db0:	003c8f06 	br	11ff0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1ff0>
   12db4:	d8800917 	ldw	r2,36(sp)
   12db8:	d8c00a17 	ldw	r3,40(sp)
   12dbc:	10c06016 	blt	r2,r3,12f40 <___svfprintf_internal_r+0x1bcc>
   12dc0:	5ac0004c 	andi	r11,r11,1
   12dc4:	5800f026 	beq	r11,zero,13188 <___svfprintf_internal_r+0x1e14>
   12dc8:	d8800917 	ldw	r2,36(sp)
   12dcc:	d8c00f17 	ldw	r3,60(sp)
   12dd0:	10ef883a 	add	r23,r2,r3
   12dd4:	b829883a 	mov	r20,r23
   12dd8:	b8006316 	blt	r23,zero,12f68 <___svfprintf_internal_r+0x1bf4>
   12ddc:	040019c4 	movi	r16,103
   12de0:	003e9506 	br	12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   12de4:	00800b44 	movi	r2,45
   12de8:	d8801545 	stb	r2,85(sp)
   12dec:	03000b44 	movi	r12,45
   12df0:	003c3a06 	br	11edc <__alt_mem_mcu_subsystem_ram_0+0x77ff1edc>
   12df4:	d9400417 	ldw	r5,16(sp)
   12df8:	d9000517 	ldw	r4,20(sp)
   12dfc:	d9801c04 	addi	r6,sp,112
   12e00:	001a97c0 	call	1a97c <__ssprint_r>
   12e04:	103a161e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12e08:	d8c01e17 	ldw	r3,120(sp)
   12e0c:	a811883a 	mov	r8,r21
   12e10:	803d8d0e 	bge	r16,zero,12448 <__alt_mem_mcu_subsystem_ram_0+0x77ff2448>
   12e14:	003eda06 	br	12980 <__alt_mem_mcu_subsystem_ram_0+0x77ff2980>
   12e18:	d9400417 	ldw	r5,16(sp)
   12e1c:	d9000517 	ldw	r4,20(sp)
   12e20:	d9801c04 	addi	r6,sp,112
   12e24:	001a97c0 	call	1a97c <__ssprint_r>
   12e28:	103a0d1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12e2c:	d8801617 	ldw	r2,88(sp)
   12e30:	d8c01e17 	ldw	r3,120(sp)
   12e34:	a811883a 	mov	r8,r21
   12e38:	003d9706 	br	12498 <__alt_mem_mcu_subsystem_ram_0+0x77ff2498>
   12e3c:	d8801a17 	ldw	r2,104(sp)
   12e40:	01000c04 	movi	r4,48
   12e44:	15fe6d2e 	bgeu	r2,r23,127fc <__alt_mem_mcu_subsystem_ram_0+0x77ff27fc>
   12e48:	10c00044 	addi	r3,r2,1
   12e4c:	d8c01a15 	stw	r3,104(sp)
   12e50:	11000005 	stb	r4,0(r2)
   12e54:	d8801a17 	ldw	r2,104(sp)
   12e58:	15fffb36 	bltu	r2,r23,12e48 <__alt_mem_mcu_subsystem_ram_0+0x77ff2e48>
   12e5c:	003e6706 	br	127fc <__alt_mem_mcu_subsystem_ram_0+0x77ff27fc>
   12e60:	10e0003c 	xorhi	r3,r2,32768
   12e64:	00800b44 	movi	r2,45
   12e68:	d8800705 	stb	r2,28(sp)
   12e6c:	003e3706 	br	1274c <__alt_mem_mcu_subsystem_ram_0+0x77ff274c>
   12e70:	d9400417 	ldw	r5,16(sp)
   12e74:	d9000517 	ldw	r4,20(sp)
   12e78:	d9801c04 	addi	r6,sp,112
   12e7c:	001a97c0 	call	1a97c <__ssprint_r>
   12e80:	1039f71e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12e84:	d9001617 	ldw	r4,88(sp)
   12e88:	d8c01e17 	ldw	r3,120(sp)
   12e8c:	a811883a 	mov	r8,r21
   12e90:	003f2b06 	br	12b40 <__alt_mem_mcu_subsystem_ram_0+0x77ff2b40>
   12e94:	05800184 	movi	r22,6
   12e98:	003e2706 	br	12738 <__alt_mem_mcu_subsystem_ram_0+0x77ff2738>
   12e9c:	d8801a04 	addi	r2,sp,104
   12ea0:	d8800315 	stw	r2,12(sp)
   12ea4:	d9400b17 	ldw	r5,44(sp)
   12ea8:	d8801704 	addi	r2,sp,92
   12eac:	d9000517 	ldw	r4,20(sp)
   12eb0:	d8800215 	stw	r2,8(sp)
   12eb4:	d8801604 	addi	r2,sp,88
   12eb8:	180d883a 	mov	r6,r3
   12ebc:	d8800115 	stw	r2,4(sp)
   12ec0:	dd800015 	stw	r22,0(sp)
   12ec4:	01c000c4 	movi	r7,3
   12ec8:	da001215 	stw	r8,72(sp)
   12ecc:	dac00a15 	stw	r11,40(sp)
   12ed0:	d8c00915 	stw	r3,36(sp)
   12ed4:	0015f340 	call	15f34 <_dtoa_r>
   12ed8:	1025883a 	mov	r18,r2
   12edc:	15af883a 	add	r23,r2,r22
   12ee0:	b019883a 	mov	r12,r22
   12ee4:	d8c00917 	ldw	r3,36(sp)
   12ee8:	dac00a17 	ldw	r11,40(sp)
   12eec:	da001217 	ldw	r8,72(sp)
   12ef0:	003f7d06 	br	12ce8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ce8>
   12ef4:	d9400417 	ldw	r5,16(sp)
   12ef8:	d9000517 	ldw	r4,20(sp)
   12efc:	d9801c04 	addi	r6,sp,112
   12f00:	001a97c0 	call	1a97c <__ssprint_r>
   12f04:	1039d61e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12f08:	d8801617 	ldw	r2,88(sp)
   12f0c:	d9000a17 	ldw	r4,40(sp)
   12f10:	d8c01e17 	ldw	r3,120(sp)
   12f14:	a811883a 	mov	r8,r21
   12f18:	2085c83a 	sub	r2,r4,r2
   12f1c:	003d7206 	br	124e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff24e8>
   12f20:	b029883a 	mov	r20,r22
   12f24:	b02f883a 	mov	r23,r22
   12f28:	dcc00815 	stw	r19,32(sp)
   12f2c:	db001543 	ldbu	r12,85(sp)
   12f30:	5827883a 	mov	r19,r11
   12f34:	002d883a 	mov	r22,zero
   12f38:	d8000915 	stw	zero,36(sp)
   12f3c:	003c2806 	br	11fe0 <__alt_mem_mcu_subsystem_ram_0+0x77ff1fe0>
   12f40:	d8800a17 	ldw	r2,40(sp)
   12f44:	d8c00f17 	ldw	r3,60(sp)
   12f48:	10ef883a 	add	r23,r2,r3
   12f4c:	d8800917 	ldw	r2,36(sp)
   12f50:	00800316 	blt	zero,r2,12f60 <___svfprintf_internal_r+0x1bec>
   12f54:	d8800917 	ldw	r2,36(sp)
   12f58:	b8afc83a 	sub	r23,r23,r2
   12f5c:	bdc00044 	addi	r23,r23,1
   12f60:	b829883a 	mov	r20,r23
   12f64:	b83f9d0e 	bge	r23,zero,12ddc <__alt_mem_mcu_subsystem_ram_0+0x77ff2ddc>
   12f68:	0029883a 	mov	r20,zero
   12f6c:	003f9b06 	br	12ddc <__alt_mem_mcu_subsystem_ram_0+0x77ff2ddc>
   12f70:	d8801a04 	addi	r2,sp,104
   12f74:	d8800315 	stw	r2,12(sp)
   12f78:	d9400b17 	ldw	r5,44(sp)
   12f7c:	d8801704 	addi	r2,sp,92
   12f80:	d9000517 	ldw	r4,20(sp)
   12f84:	d8800215 	stw	r2,8(sp)
   12f88:	d8801604 	addi	r2,sp,88
   12f8c:	180d883a 	mov	r6,r3
   12f90:	d8800115 	stw	r2,4(sp)
   12f94:	dd800015 	stw	r22,0(sp)
   12f98:	01c000c4 	movi	r7,3
   12f9c:	da001315 	stw	r8,76(sp)
   12fa0:	db401215 	stw	r13,72(sp)
   12fa4:	dac00a15 	stw	r11,40(sp)
   12fa8:	d8c00915 	stw	r3,36(sp)
   12fac:	0015f340 	call	15f34 <_dtoa_r>
   12fb0:	1025883a 	mov	r18,r2
   12fb4:	b019883a 	mov	r12,r22
   12fb8:	d8c00917 	ldw	r3,36(sp)
   12fbc:	dac00a17 	ldw	r11,40(sp)
   12fc0:	db401217 	ldw	r13,72(sp)
   12fc4:	da001317 	ldw	r8,76(sp)
   12fc8:	003f4506 	br	12ce0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2ce0>
   12fcc:	d9400417 	ldw	r5,16(sp)
   12fd0:	d9000517 	ldw	r4,20(sp)
   12fd4:	d9801c04 	addi	r6,sp,112
   12fd8:	001a97c0 	call	1a97c <__ssprint_r>
   12fdc:	1039a01e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   12fe0:	d8c01e17 	ldw	r3,120(sp)
   12fe4:	a811883a 	mov	r8,r21
   12fe8:	003d1a06 	br	12454 <__alt_mem_mcu_subsystem_ram_0+0x77ff2454>
   12fec:	02c000b4 	movhi	r11,2
   12ff0:	217ffc08 	cmpgei	r5,r4,-16
   12ff4:	5adb0384 	addi	r11,r11,27662
   12ff8:	0121c83a 	sub	r16,zero,r4
   12ffc:	28001c1e 	bne	r5,zero,13070 <___svfprintf_internal_r+0x1cfc>
   13000:	05c00404 	movi	r23,16
   13004:	582d883a 	mov	r22,r11
   13008:	00000406 	br	1301c <___svfprintf_internal_r+0x1ca8>
   1300c:	42000204 	addi	r8,r8,8
   13010:	843ffc04 	addi	r16,r16,-16
   13014:	81000448 	cmpgei	r4,r16,17
   13018:	20001426 	beq	r4,zero,1306c <___svfprintf_internal_r+0x1cf8>
   1301c:	10800044 	addi	r2,r2,1
   13020:	18c00404 	addi	r3,r3,16
   13024:	45800015 	stw	r22,0(r8)
   13028:	45c00115 	stw	r23,4(r8)
   1302c:	d8c01e15 	stw	r3,120(sp)
   13030:	d8801d15 	stw	r2,116(sp)
   13034:	11000208 	cmpgei	r4,r2,8
   13038:	203ff426 	beq	r4,zero,1300c <__alt_mem_mcu_subsystem_ram_0+0x77ff300c>
   1303c:	d9400417 	ldw	r5,16(sp)
   13040:	d9000517 	ldw	r4,20(sp)
   13044:	d9801c04 	addi	r6,sp,112
   13048:	001a97c0 	call	1a97c <__ssprint_r>
   1304c:	1039841e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   13050:	d8c01e17 	ldw	r3,120(sp)
   13054:	d8801d17 	ldw	r2,116(sp)
   13058:	a811883a 	mov	r8,r21
   1305c:	003fec06 	br	13010 <__alt_mem_mcu_subsystem_ram_0+0x77ff3010>
   13060:	00bfffc4 	movi	r2,-1
   13064:	d8800615 	stw	r2,24(sp)
   13068:	00398106 	br	11670 <__alt_mem_mcu_subsystem_ram_0+0x77ff1670>
   1306c:	b017883a 	mov	r11,r22
   13070:	10800044 	addi	r2,r2,1
   13074:	1c07883a 	add	r3,r3,r16
   13078:	42c00015 	stw	r11,0(r8)
   1307c:	44000115 	stw	r16,4(r8)
   13080:	d8c01e15 	stw	r3,120(sp)
   13084:	d8801d15 	stw	r2,116(sp)
   13088:	11000208 	cmpgei	r4,r2,8
   1308c:	2000851e 	bne	r4,zero,132a4 <___svfprintf_internal_r+0x1f30>
   13090:	42000204 	addi	r8,r8,8
   13094:	003c6a06 	br	12240 <__alt_mem_mcu_subsystem_ram_0+0x77ff2240>
   13098:	dd801bc4 	addi	r22,sp,111
   1309c:	dc000915 	stw	r16,36(sp)
   130a0:	b029883a 	mov	r20,r22
   130a4:	b821883a 	mov	r16,r23
   130a8:	dac00d15 	stw	r11,52(sp)
   130ac:	982f883a 	mov	r23,r19
   130b0:	4027883a 	mov	r19,r8
   130b4:	00000106 	br	130bc <___svfprintf_internal_r+0x1d48>
   130b8:	1829883a 	mov	r20,r3
   130bc:	8009883a 	mov	r4,r16
   130c0:	01400284 	movi	r5,10
   130c4:	000d6600 	call	d660 <__modsi3>
   130c8:	10800c04 	addi	r2,r2,48
   130cc:	8009883a 	mov	r4,r16
   130d0:	a0bfffc5 	stb	r2,-1(r20)
   130d4:	01400284 	movi	r5,10
   130d8:	000d5d80 	call	d5d8 <__divsi3>
   130dc:	1021883a 	mov	r16,r2
   130e0:	10800288 	cmpgei	r2,r2,10
   130e4:	a0ffffc4 	addi	r3,r20,-1
   130e8:	103ff31e 	bne	r2,zero,130b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff30b8>
   130ec:	9811883a 	mov	r8,r19
   130f0:	b827883a 	mov	r19,r23
   130f4:	802f883a 	mov	r23,r16
   130f8:	b8800c04 	addi	r2,r23,48
   130fc:	a53fff84 	addi	r20,r20,-2
   13100:	18bfffc5 	stb	r2,-1(r3)
   13104:	dac00d17 	ldw	r11,52(sp)
   13108:	dc000917 	ldw	r16,36(sp)
   1310c:	a5806e2e 	bgeu	r20,r22,132c8 <___svfprintf_internal_r+0x1f54>
   13110:	d90018c4 	addi	r4,sp,99
   13114:	00000106 	br	1311c <___svfprintf_internal_r+0x1da8>
   13118:	a0800003 	ldbu	r2,0(r20)
   1311c:	21000044 	addi	r4,r4,1
   13120:	a5000044 	addi	r20,r20,1
   13124:	20bfffc5 	stb	r2,-1(r4)
   13128:	a5bffb1e 	bne	r20,r22,13118 <__alt_mem_mcu_subsystem_ram_0+0x77ff3118>
   1312c:	d8801c04 	addi	r2,sp,112
   13130:	10c7c83a 	sub	r3,r2,r3
   13134:	d88018c4 	addi	r2,sp,99
   13138:	10c7883a 	add	r3,r2,r3
   1313c:	003f0a06 	br	12d68 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d68>
   13140:	d9000b17 	ldw	r4,44(sp)
   13144:	180b883a 	mov	r5,r3
   13148:	000d883a 	mov	r6,zero
   1314c:	000f883a 	mov	r7,zero
   13150:	da001315 	stw	r8,76(sp)
   13154:	dac00a15 	stw	r11,40(sp)
   13158:	d8c00915 	stw	r3,36(sp)
   1315c:	db001215 	stw	r12,72(sp)
   13160:	001f7e40 	call	1f7e4 <__eqdf2>
   13164:	d8c00917 	ldw	r3,36(sp)
   13168:	dac00a17 	ldw	r11,40(sp)
   1316c:	da001317 	ldw	r8,76(sp)
   13170:	103ee026 	beq	r2,zero,12cf4 <__alt_mem_mcu_subsystem_ram_0+0x77ff2cf4>
   13174:	db001217 	ldw	r12,72(sp)
   13178:	00800044 	movi	r2,1
   1317c:	1319c83a 	sub	r12,r2,r12
   13180:	db001615 	stw	r12,88(sp)
   13184:	003edc06 	br	12cf8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2cf8>
   13188:	1029883a 	mov	r20,r2
   1318c:	1000010e 	bge	r2,zero,13194 <___svfprintf_internal_r+0x1e20>
   13190:	0029883a 	mov	r20,zero
   13194:	ddc00917 	ldw	r23,36(sp)
   13198:	040019c4 	movi	r16,103
   1319c:	003da606 	br	12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   131a0:	d8800c17 	ldw	r2,48(sp)
   131a4:	10002316 	blt	r2,zero,13234 <___svfprintf_internal_r+0x1ec0>
   131a8:	db001543 	ldbu	r12,85(sp)
   131ac:	80801208 	cmpgei	r2,r16,72
   131b0:	10001d1e 	bne	r2,zero,13228 <___svfprintf_internal_r+0x1eb4>
   131b4:	048000b4 	movhi	r18,2
   131b8:	949af504 	addi	r18,r18,27604
   131bc:	003b4b06 	br	11eec <__alt_mem_mcu_subsystem_ram_0+0x77ff1eec>
   131c0:	d8800917 	ldw	r2,36(sp)
   131c4:	d8c00f17 	ldw	r3,60(sp)
   131c8:	10ef883a 	add	r23,r2,r3
   131cc:	bdaf883a 	add	r23,r23,r22
   131d0:	b829883a 	mov	r20,r23
   131d4:	b83d980e 	bge	r23,zero,12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   131d8:	0029883a 	mov	r20,zero
   131dc:	003d9606 	br	12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   131e0:	05c00044 	movi	r23,1
   131e4:	b8afc83a 	sub	r23,r23,r2
   131e8:	00800b44 	movi	r2,45
   131ec:	d8801885 	stb	r2,98(sp)
   131f0:	003ed606 	br	12d4c <__alt_mem_mcu_subsystem_ram_0+0x77ff2d4c>
   131f4:	5880004c 	andi	r2,r11,1
   131f8:	d8800915 	stw	r2,36(sp)
   131fc:	103ee11e 	bne	r2,zero,12d84 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d84>
   13200:	003ff306 	br	131d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff31d0>
   13204:	b0000f1e 	bne	r22,zero,13244 <___svfprintf_internal_r+0x1ed0>
   13208:	5ac0004c 	andi	r11,r11,1
   1320c:	58000d1e 	bne	r11,zero,13244 <___svfprintf_internal_r+0x1ed0>
   13210:	05000044 	movi	r20,1
   13214:	05c00044 	movi	r23,1
   13218:	003d8706 	br	12838 <__alt_mem_mcu_subsystem_ram_0+0x77ff2838>
   1321c:	4005883a 	mov	r2,r8
   13220:	5adb0384 	addi	r11,r11,27662
   13224:	003e6406 	br	12bb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff2bb8>
   13228:	048000b4 	movhi	r18,2
   1322c:	949af604 	addi	r18,r18,27608
   13230:	003b2e06 	br	11eec <__alt_mem_mcu_subsystem_ram_0+0x77ff1eec>
   13234:	00800b44 	movi	r2,45
   13238:	d8801545 	stb	r2,85(sp)
   1323c:	03000b44 	movi	r12,45
   13240:	003fda06 	br	131ac <__alt_mem_mcu_subsystem_ram_0+0x77ff31ac>
   13244:	d8800f17 	ldw	r2,60(sp)
   13248:	15c00044 	addi	r23,r2,1
   1324c:	bdaf883a 	add	r23,r23,r22
   13250:	003fdf06 	br	131d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff31d0>
   13254:	d8801617 	ldw	r2,88(sp)
   13258:	d8800915 	stw	r2,36(sp)
   1325c:	d8801a17 	ldw	r2,104(sp)
   13260:	1485c83a 	sub	r2,r2,r18
   13264:	d8800a15 	stw	r2,40(sp)
   13268:	003eac06 	br	12d1c <__alt_mem_mcu_subsystem_ram_0+0x77ff2d1c>
   1326c:	932f883a 	add	r23,r18,r12
   13270:	003d5706 	br	127d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff27d0>
   13274:	d8800817 	ldw	r2,32(sp)
   13278:	15800017 	ldw	r22,0(r2)
   1327c:	10800104 	addi	r2,r2,4
   13280:	b000010e 	bge	r22,zero,13288 <___svfprintf_internal_r+0x1f14>
   13284:	05bfffc4 	movi	r22,-1
   13288:	e4000043 	ldbu	r16,1(fp)
   1328c:	d8800815 	stw	r2,32(sp)
   13290:	1839883a 	mov	fp,r3
   13294:	84003fcc 	andi	r16,r16,255
   13298:	8400201c 	xori	r16,r16,128
   1329c:	843fe004 	addi	r16,r16,-128
   132a0:	00388006 	br	114a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff14a4>
   132a4:	d9400417 	ldw	r5,16(sp)
   132a8:	d9000517 	ldw	r4,20(sp)
   132ac:	d9801c04 	addi	r6,sp,112
   132b0:	001a97c0 	call	1a97c <__ssprint_r>
   132b4:	1038ea1e 	bne	r2,zero,11660 <__alt_mem_mcu_subsystem_ram_0+0x77ff1660>
   132b8:	d8c01e17 	ldw	r3,120(sp)
   132bc:	d8801d17 	ldw	r2,116(sp)
   132c0:	a811883a 	mov	r8,r21
   132c4:	003bde06 	br	12240 <__alt_mem_mcu_subsystem_ram_0+0x77ff2240>
   132c8:	d8c018c4 	addi	r3,sp,99
   132cc:	003ea606 	br	12d68 <__alt_mem_mcu_subsystem_ram_0+0x77ff2d68>
   132d0:	b019883a 	mov	r12,r22
   132d4:	003e7e06 	br	12cd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff2cd0>
   132d8:	d9401545 	stb	r5,85(sp)
   132dc:	003aa506 	br	11d74 <__alt_mem_mcu_subsystem_ram_0+0x77ff1d74>
   132e0:	d8c00517 	ldw	r3,20(sp)
   132e4:	00800304 	movi	r2,12
   132e8:	18800015 	stw	r2,0(r3)
   132ec:	00bfffc4 	movi	r2,-1
   132f0:	d8800615 	stw	r2,24(sp)
   132f4:	0038de06 	br	11670 <__alt_mem_mcu_subsystem_ram_0+0x77ff1670>
   132f8:	d9401545 	stb	r5,85(sp)
   132fc:	003a7306 	br	11ccc <__alt_mem_mcu_subsystem_ram_0+0x77ff1ccc>
   13300:	d9401545 	stb	r5,85(sp)
   13304:	00398306 	br	11914 <__alt_mem_mcu_subsystem_ram_0+0x77ff1914>
   13308:	d9401545 	stb	r5,85(sp)
   1330c:	00396a06 	br	118b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff18b8>
   13310:	d9401545 	stb	r5,85(sp)
   13314:	003afe06 	br	11f10 <__alt_mem_mcu_subsystem_ram_0+0x77ff1f10>
   13318:	d9401545 	stb	r5,85(sp)
   1331c:	00393406 	br	117f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff17f0>
   13320:	d9401545 	stb	r5,85(sp)
   13324:	003ac606 	br	11e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff1e40>

00013328 <__tzcalc_limits>:
   13328:	defff204 	addi	sp,sp,-56
   1332c:	dd000815 	stw	r20,32(sp)
   13330:	dcc00715 	stw	r19,28(sp)
   13334:	dfc00d15 	stw	ra,52(sp)
   13338:	2027883a 	mov	r19,r4
   1333c:	df000c15 	stw	fp,48(sp)
   13340:	ddc00b15 	stw	r23,44(sp)
   13344:	dd800a15 	stw	r22,40(sp)
   13348:	dd400915 	stw	r21,36(sp)
   1334c:	dc800615 	stw	r18,24(sp)
   13350:	dc400515 	stw	r17,20(sp)
   13354:	dc000415 	stw	r16,16(sp)
   13358:	00187040 	call	18704 <__gettzinfo>
   1335c:	1029883a 	mov	r20,r2
   13360:	9881ec90 	cmplti	r2,r19,1970
   13364:	1000671e 	bne	r2,zero,13504 <__tzcalc_limits+0x1dc>
   13368:	9c3e1384 	addi	r16,r19,-1970
   1336c:	98be13c4 	addi	r2,r19,-1969
   13370:	1005d0ba 	srai	r2,r2,2
   13374:	84005b64 	muli	r16,r16,365
   13378:	993e24c4 	addi	r4,r19,-1901
   1337c:	017fe704 	movi	r5,-100
   13380:	a4c00115 	stw	r19,4(r20)
   13384:	80a1883a 	add	r16,r16,r2
   13388:	000d5d80 	call	d5d8 <__divsi3>
   1338c:	993e6fc4 	addi	r4,r19,-1601
   13390:	01406404 	movi	r5,400
   13394:	80a1883a 	add	r16,r16,r2
   13398:	000d5d80 	call	d5d8 <__divsi3>
   1339c:	9809883a 	mov	r4,r19
   133a0:	01401904 	movi	r5,100
   133a4:	80a1883a 	add	r16,r16,r2
   133a8:	000d6600 	call	d660 <__modsi3>
   133ac:	9809883a 	mov	r4,r19
   133b0:	01406404 	movi	r5,400
   133b4:	1023883a 	mov	r17,r2
   133b8:	000d6600 	call	d660 <__modsi3>
   133bc:	102f003a 	cmpeq	r23,r2,zero
   133c0:	bdc00c24 	muli	r23,r23,48
   133c4:	058000b4 	movhi	r22,2
   133c8:	05400074 	movhi	r21,1
   133cc:	100d883a 	mov	r6,r2
   133d0:	a4800204 	addi	r18,r20,8
   133d4:	a7001004 	addi	fp,r20,64
   133d8:	9cc000cc 	andi	r19,r19,3
   133dc:	b59bcd04 	addi	r22,r22,28468
   133e0:	ad546004 	addi	r21,r21,20864
   133e4:	90800007 	ldb	r2,0(r18)
   133e8:	92400317 	ldw	r9,12(r18)
   133ec:	10c01298 	cmpnei	r3,r2,74
   133f0:	18004626 	beq	r3,zero,1350c <__tzcalc_limits+0x1e4>
   133f4:	10801118 	cmpnei	r2,r2,68
   133f8:	10001a1e 	bne	r2,zero,13464 <__tzcalc_limits+0x13c>
   133fc:	8245883a 	add	r2,r16,r9
   13400:	91000417 	ldw	r4,16(r18)
   13404:	1545383a 	mul	r2,r2,r21
   13408:	90c00617 	ldw	r3,24(r18)
   1340c:	94800704 	addi	r18,r18,28
   13410:	1105883a 	add	r2,r2,r4
   13414:	10c5883a 	add	r2,r2,r3
   13418:	90bffe15 	stw	r2,-8(r18)
   1341c:	e4bff11e 	bne	fp,r18,133e4 <__alt_mem_mcu_subsystem_ram_0+0x77ff33e4>
   13420:	a0c00717 	ldw	r3,28(r20)
   13424:	a1000e17 	ldw	r4,56(r20)
   13428:	00800044 	movi	r2,1
   1342c:	1906803a 	cmplt	r3,r3,r4
   13430:	a0c00015 	stw	r3,0(r20)
   13434:	dfc00d17 	ldw	ra,52(sp)
   13438:	df000c17 	ldw	fp,48(sp)
   1343c:	ddc00b17 	ldw	r23,44(sp)
   13440:	dd800a17 	ldw	r22,40(sp)
   13444:	dd400917 	ldw	r21,36(sp)
   13448:	dd000817 	ldw	r20,32(sp)
   1344c:	dcc00717 	ldw	r19,28(sp)
   13450:	dc800617 	ldw	r18,24(sp)
   13454:	dc400517 	ldw	r17,20(sp)
   13458:	dc000417 	ldw	r16,16(sp)
   1345c:	dec00e04 	addi	sp,sp,56
   13460:	f800283a 	ret
   13464:	98003526 	beq	r19,zero,1353c <__tzcalc_limits+0x214>
   13468:	b805883a 	mov	r2,r23
   1346c:	90c00117 	ldw	r3,4(r18)
   13470:	1591883a 	add	r8,r2,r22
   13474:	18800090 	cmplti	r2,r3,2
   13478:	1000331e 	bne	r2,zero,13548 <__tzcalc_limits+0x220>
   1347c:	180690ba 	slli	r3,r3,2
   13480:	4005883a 	mov	r2,r8
   13484:	800f883a 	mov	r7,r16
   13488:	18ffff04 	addi	r3,r3,-4
   1348c:	40c7883a 	add	r3,r8,r3
   13490:	11000017 	ldw	r4,0(r2)
   13494:	10800104 	addi	r2,r2,4
   13498:	390f883a 	add	r7,r7,r4
   1349c:	18bffc1e 	bne	r3,r2,13490 <__alt_mem_mcu_subsystem_ram_0+0x77ff3490>
   134a0:	1811883a 	mov	r8,r3
   134a4:	39000104 	addi	r4,r7,4
   134a8:	014001c4 	movi	r5,7
   134ac:	da000315 	stw	r8,12(sp)
   134b0:	da400215 	stw	r9,8(sp)
   134b4:	d9800115 	stw	r6,4(sp)
   134b8:	d9c00015 	stw	r7,0(sp)
   134bc:	000d6600 	call	d660 <__modsi3>
   134c0:	da400217 	ldw	r9,8(sp)
   134c4:	d9c00017 	ldw	r7,0(sp)
   134c8:	d9800117 	ldw	r6,4(sp)
   134cc:	4885c83a 	sub	r2,r9,r2
   134d0:	da000317 	ldw	r8,12(sp)
   134d4:	1000010e 	bge	r2,zero,134dc <__tzcalc_limits+0x1b4>
   134d8:	108001c4 	addi	r2,r2,7
   134dc:	90c00217 	ldw	r3,8(r18)
   134e0:	41000017 	ldw	r4,0(r8)
   134e4:	18ffffc4 	addi	r3,r3,-1
   134e8:	18c001e4 	muli	r3,r3,7
   134ec:	1885883a 	add	r2,r3,r2
   134f0:	11000216 	blt	r2,r4,134fc <__tzcalc_limits+0x1d4>
   134f4:	10bffe44 	addi	r2,r2,-7
   134f8:	113ffe0e 	bge	r2,r4,134f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff34f4>
   134fc:	11c5883a 	add	r2,r2,r7
   13500:	003fbf06 	br	13400 <__alt_mem_mcu_subsystem_ram_0+0x77ff3400>
   13504:	0005883a 	mov	r2,zero
   13508:	003fca06 	br	13434 <__alt_mem_mcu_subsystem_ram_0+0x77ff3434>
   1350c:	8245883a 	add	r2,r16,r9
   13510:	9800061e 	bne	r19,zero,1352c <__tzcalc_limits+0x204>
   13514:	88000526 	beq	r17,zero,1352c <__tzcalc_limits+0x204>
   13518:	4a400f10 	cmplti	r9,r9,60
   1351c:	4800011e 	bne	r9,zero,13524 <__tzcalc_limits+0x1fc>
   13520:	10800044 	addi	r2,r2,1
   13524:	10bfffc4 	addi	r2,r2,-1
   13528:	003fb506 	br	13400 <__alt_mem_mcu_subsystem_ram_0+0x77ff3400>
   1352c:	303ffd1e 	bne	r6,zero,13524 <__alt_mem_mcu_subsystem_ram_0+0x77ff3524>
   13530:	4a400f10 	cmplti	r9,r9,60
   13534:	483ffb1e 	bne	r9,zero,13524 <__alt_mem_mcu_subsystem_ram_0+0x77ff3524>
   13538:	003ff906 	br	13520 <__alt_mem_mcu_subsystem_ram_0+0x77ff3520>
   1353c:	883fca26 	beq	r17,zero,13468 <__alt_mem_mcu_subsystem_ram_0+0x77ff3468>
   13540:	00800c04 	movi	r2,48
   13544:	003fc906 	br	1346c <__alt_mem_mcu_subsystem_ram_0+0x77ff346c>
   13548:	800f883a 	mov	r7,r16
   1354c:	003fd506 	br	134a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff34a4>

00013550 <__tz_lock>:
   13550:	f800283a 	ret

00013554 <__tz_unlock>:
   13554:	f800283a 	ret

00013558 <_tzset_unlocked>:
   13558:	008000f4 	movhi	r2,3
   1355c:	1123b117 	ldw	r4,-28988(r2)
   13560:	00135881 	jmpi	13588 <_tzset_unlocked_r>

00013564 <tzset>:
   13564:	deffff04 	addi	sp,sp,-4
   13568:	dfc00015 	stw	ra,0(sp)
   1356c:	00135500 	call	13550 <__tz_lock>
   13570:	008000f4 	movhi	r2,3
   13574:	1123b117 	ldw	r4,-28988(r2)
   13578:	00135880 	call	13588 <_tzset_unlocked_r>
   1357c:	dfc00017 	ldw	ra,0(sp)
   13580:	dec00104 	addi	sp,sp,4
   13584:	00135541 	jmpi	13554 <__tz_unlock>

00013588 <_tzset_unlocked_r>:
   13588:	deffee04 	addi	sp,sp,-72
   1358c:	dc800b15 	stw	r18,44(sp)
   13590:	dc400a15 	stw	r17,40(sp)
   13594:	dfc01115 	stw	ra,68(sp)
   13598:	ddc01015 	stw	r23,64(sp)
   1359c:	dd800f15 	stw	r22,60(sp)
   135a0:	dd400e15 	stw	r21,56(sp)
   135a4:	dd000d15 	stw	r20,52(sp)
   135a8:	dcc00c15 	stw	r19,48(sp)
   135ac:	dc000915 	stw	r16,36(sp)
   135b0:	2023883a 	mov	r17,r4
   135b4:	00187040 	call	18704 <__gettzinfo>
   135b8:	014000b4 	movhi	r5,2
   135bc:	295b0c04 	addi	r5,r5,27696
   135c0:	8809883a 	mov	r4,r17
   135c4:	1025883a 	mov	r18,r2
   135c8:	00186e80 	call	186e8 <_getenv_r>
   135cc:	1000b726 	beq	r2,zero,138ac <_tzset_unlocked_r+0x324>
   135d0:	1021883a 	mov	r16,r2
   135d4:	008000f4 	movhi	r2,3
   135d8:	116b2717 	ldw	r5,-21348(r2)
   135dc:	28001026 	beq	r5,zero,13620 <_tzset_unlocked_r+0x98>
   135e0:	8009883a 	mov	r4,r16
   135e4:	001118c0 	call	1118c <strcmp>
   135e8:	10000b1e 	bne	r2,zero,13618 <_tzset_unlocked_r+0x90>
   135ec:	dfc01117 	ldw	ra,68(sp)
   135f0:	ddc01017 	ldw	r23,64(sp)
   135f4:	dd800f17 	ldw	r22,60(sp)
   135f8:	dd400e17 	ldw	r21,56(sp)
   135fc:	dd000d17 	ldw	r20,52(sp)
   13600:	dcc00c17 	ldw	r19,48(sp)
   13604:	dc800b17 	ldw	r18,44(sp)
   13608:	dc400a17 	ldw	r17,40(sp)
   1360c:	dc000917 	ldw	r16,36(sp)
   13610:	dec01204 	addi	sp,sp,72
   13614:	f800283a 	ret
   13618:	008000f4 	movhi	r2,3
   1361c:	116b2717 	ldw	r5,-21348(r2)
   13620:	2809883a 	mov	r4,r5
   13624:	000fde40 	call	fde4 <free>
   13628:	8009883a 	mov	r4,r16
   1362c:	00112e40 	call	112e4 <strlen>
   13630:	11400044 	addi	r5,r2,1
   13634:	8809883a 	mov	r4,r17
   13638:	000fdf40 	call	fdf4 <_malloc_r>
   1363c:	00c000f4 	movhi	r3,3
   13640:	18ab2715 	stw	r2,-21348(r3)
   13644:	10000326 	beq	r2,zero,13654 <_tzset_unlocked_r+0xcc>
   13648:	800b883a 	mov	r5,r16
   1364c:	1009883a 	mov	r4,r2
   13650:	00112580 	call	11258 <strcpy>
   13654:	80800007 	ldb	r2,0(r16)
   13658:	10800e98 	cmpnei	r2,r2,58
   1365c:	10008e26 	beq	r2,zero,13898 <_tzset_unlocked_r+0x310>
   13660:	dc400704 	addi	r17,sp,28
   13664:	018200f4 	movhi	r6,2051
   13668:	014000b4 	movhi	r5,2
   1366c:	880f883a 	mov	r7,r17
   13670:	31ab40c4 	addi	r6,r6,-21245
   13674:	295b0e04 	addi	r5,r5,27704
   13678:	8009883a 	mov	r4,r16
   1367c:	001a3900 	call	1a390 <siscanf>
   13680:	00bfda0e 	bge	zero,r2,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   13684:	d8800717 	ldw	r2,28(sp)
   13688:	80a1883a 	add	r16,r16,r2
   1368c:	80800007 	ldb	r2,0(r16)
   13690:	10c00b58 	cmpnei	r3,r2,45
   13694:	18009526 	beq	r3,zero,138ec <_tzset_unlocked_r+0x364>
   13698:	10800ad8 	cmpnei	r2,r2,43
   1369c:	10008026 	beq	r2,zero,138a0 <_tzset_unlocked_r+0x318>
   136a0:	05400044 	movi	r21,1
   136a4:	dd000504 	addi	r20,sp,20
   136a8:	dcc00484 	addi	r19,sp,18
   136ac:	014000b4 	movhi	r5,2
   136b0:	dc400315 	stw	r17,12(sp)
   136b4:	dd000215 	stw	r20,8(sp)
   136b8:	dc400115 	stw	r17,4(sp)
   136bc:	dcc00015 	stw	r19,0(sp)
   136c0:	880f883a 	mov	r7,r17
   136c4:	d9800404 	addi	r6,sp,16
   136c8:	295b1204 	addi	r5,r5,27720
   136cc:	8009883a 	mov	r4,r16
   136d0:	d800048d 	sth	zero,18(sp)
   136d4:	d800050d 	sth	zero,20(sp)
   136d8:	001a3900 	call	1a390 <siscanf>
   136dc:	00bfc30e 	bge	zero,r2,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   136e0:	d880048b 	ldhu	r2,18(sp)
   136e4:	d8c0040b 	ldhu	r3,16(sp)
   136e8:	d900050b 	ldhu	r4,20(sp)
   136ec:	10800f24 	muli	r2,r2,60
   136f0:	18c38424 	muli	r3,r3,3600
   136f4:	018200f4 	movhi	r6,2051
   136f8:	1105883a 	add	r2,r2,r4
   136fc:	10c5883a 	add	r2,r2,r3
   13700:	d9000717 	ldw	r4,28(sp)
   13704:	1545383a 	mul	r2,r2,r21
   13708:	00c200f4 	movhi	r3,2051
   1370c:	8121883a 	add	r16,r16,r4
   13710:	014000b4 	movhi	r5,2
   13714:	054000f4 	movhi	r21,3
   13718:	18eb40c4 	addi	r3,r3,-21245
   1371c:	90800815 	stw	r2,32(r18)
   13720:	880f883a 	mov	r7,r17
   13724:	008000f4 	movhi	r2,3
   13728:	31ab3e04 	addi	r6,r6,-21256
   1372c:	295b0e04 	addi	r5,r5,27704
   13730:	8009883a 	mov	r4,r16
   13734:	ad63b404 	addi	r21,r21,-28976
   13738:	10e3b415 	stw	r3,-28976(r2)
   1373c:	001a3900 	call	1a390 <siscanf>
   13740:	00806d0e 	bge	zero,r2,138f8 <_tzset_unlocked_r+0x370>
   13744:	008200f4 	movhi	r2,2051
   13748:	10ab3e04 	addi	r2,r2,-21256
   1374c:	a8800115 	stw	r2,4(r21)
   13750:	d8800717 	ldw	r2,28(sp)
   13754:	80a1883a 	add	r16,r16,r2
   13758:	80800007 	ldb	r2,0(r16)
   1375c:	10c00b58 	cmpnei	r3,r2,45
   13760:	1800b926 	beq	r3,zero,13a48 <_tzset_unlocked_r+0x4c0>
   13764:	10800ad8 	cmpnei	r2,r2,43
   13768:	10006c26 	beq	r2,zero,1391c <_tzset_unlocked_r+0x394>
   1376c:	05400044 	movi	r21,1
   13770:	014000b4 	movhi	r5,2
   13774:	dc400315 	stw	r17,12(sp)
   13778:	dd000215 	stw	r20,8(sp)
   1377c:	dc400115 	stw	r17,4(sp)
   13780:	dcc00015 	stw	r19,0(sp)
   13784:	880f883a 	mov	r7,r17
   13788:	d9800404 	addi	r6,sp,16
   1378c:	295b1204 	addi	r5,r5,27720
   13790:	8009883a 	mov	r4,r16
   13794:	d800040d 	sth	zero,16(sp)
   13798:	d800048d 	sth	zero,18(sp)
   1379c:	d800050d 	sth	zero,20(sp)
   137a0:	d8000715 	stw	zero,28(sp)
   137a4:	001a3900 	call	1a390 <siscanf>
   137a8:	0080a30e 	bge	zero,r2,13a38 <_tzset_unlocked_r+0x4b0>
   137ac:	d880048b 	ldhu	r2,18(sp)
   137b0:	d8c0040b 	ldhu	r3,16(sp)
   137b4:	d900050b 	ldhu	r4,20(sp)
   137b8:	10800f24 	muli	r2,r2,60
   137bc:	18c38424 	muli	r3,r3,3600
   137c0:	1105883a 	add	r2,r2,r4
   137c4:	10c5883a 	add	r2,r2,r3
   137c8:	1545383a 	mul	r2,r2,r21
   137cc:	90800f15 	stw	r2,60(r18)
   137d0:	d8800717 	ldw	r2,28(sp)
   137d4:	95c00204 	addi	r23,r18,8
   137d8:	002d883a 	mov	r22,zero
   137dc:	80a1883a 	add	r16,r16,r2
   137e0:	85400007 	ldb	r21,0(r16)
   137e4:	a8800b18 	cmpnei	r2,r21,44
   137e8:	1000051e 	bne	r2,zero,13800 <_tzset_unlocked_r+0x278>
   137ec:	85400043 	ldbu	r21,1(r16)
   137f0:	84000044 	addi	r16,r16,1
   137f4:	ad403fcc 	andi	r21,r21,255
   137f8:	ad40201c 	xori	r21,r21,128
   137fc:	ad7fe004 	addi	r21,r21,-128
   13800:	a8801358 	cmpnei	r2,r21,77
   13804:	10005626 	beq	r2,zero,13960 <_tzset_unlocked_r+0x3d8>
   13808:	ad401298 	cmpnei	r21,r21,74
   1380c:	a8004826 	beq	r21,zero,13930 <_tzset_unlocked_r+0x3a8>
   13810:	05401104 	movi	r21,68
   13814:	01800284 	movi	r6,10
   13818:	d9400804 	addi	r5,sp,32
   1381c:	8009883a 	mov	r4,r16
   13820:	001a9380 	call	1a938 <strtoul>
   13824:	d8c00817 	ldw	r3,32(sp)
   13828:	d880068d 	sth	r2,26(sp)
   1382c:	1c004326 	beq	r3,r16,1393c <_tzset_unlocked_r+0x3b4>
   13830:	10bfffcc 	andi	r2,r2,65535
   13834:	bd400005 	stb	r21,0(r23)
   13838:	b8800315 	stw	r2,12(r23)
   1383c:	1821883a 	mov	r16,r3
   13840:	00800084 	movi	r2,2
   13844:	d880040d 	sth	r2,16(sp)
   13848:	d800048d 	sth	zero,18(sp)
   1384c:	d800050d 	sth	zero,20(sp)
   13850:	d8000715 	stw	zero,28(sp)
   13854:	80800007 	ldb	r2,0(r16)
   13858:	10800bd8 	cmpnei	r2,r2,47
   1385c:	10006226 	beq	r2,zero,139e8 <_tzset_unlocked_r+0x460>
   13860:	00870804 	movi	r2,7200
   13864:	b8800415 	stw	r2,16(r23)
   13868:	bdc00704 	addi	r23,r23,28
   1386c:	b0002e26 	beq	r22,zero,13928 <_tzset_unlocked_r+0x3a0>
   13870:	91000117 	ldw	r4,4(r18)
   13874:	00133280 	call	13328 <__tzcalc_limits>
   13878:	90c00817 	ldw	r3,32(r18)
   1387c:	90800f17 	ldw	r2,60(r18)
   13880:	010000f4 	movhi	r4,3
   13884:	20eb2815 	stw	r3,-21344(r4)
   13888:	10c4c03a 	cmpne	r2,r2,r3
   1388c:	00c000f4 	movhi	r3,3
   13890:	18ab2915 	stw	r2,-21340(r3)
   13894:	003f5506 	br	135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   13898:	84000044 	addi	r16,r16,1
   1389c:	003f7006 	br	13660 <__alt_mem_mcu_subsystem_ram_0+0x77ff3660>
   138a0:	84000044 	addi	r16,r16,1
   138a4:	05400044 	movi	r21,1
   138a8:	003f7e06 	br	136a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff36a4>
   138ac:	008000f4 	movhi	r2,3
   138b0:	00c000f4 	movhi	r3,3
   138b4:	112b2717 	ldw	r4,-21348(r2)
   138b8:	182b2815 	stw	zero,-21344(r3)
   138bc:	008000b4 	movhi	r2,2
   138c0:	00c000f4 	movhi	r3,3
   138c4:	109b0d04 	addi	r2,r2,27700
   138c8:	182b2915 	stw	zero,-21340(r3)
   138cc:	00c000f4 	movhi	r3,3
   138d0:	18a3b415 	stw	r2,-28976(r3)
   138d4:	00c000f4 	movhi	r3,3
   138d8:	18a3b515 	stw	r2,-28972(r3)
   138dc:	000fde40 	call	fde4 <free>
   138e0:	008000f4 	movhi	r2,3
   138e4:	102b2715 	stw	zero,-21348(r2)
   138e8:	003f4006 	br	135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   138ec:	84000044 	addi	r16,r16,1
   138f0:	057fffc4 	movi	r21,-1
   138f4:	003f6b06 	br	136a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff36a4>
   138f8:	008000f4 	movhi	r2,3
   138fc:	10a3b417 	ldw	r2,-28976(r2)
   13900:	90c00817 	ldw	r3,32(r18)
   13904:	a8800115 	stw	r2,4(r21)
   13908:	008000f4 	movhi	r2,3
   1390c:	10eb2815 	stw	r3,-21344(r2)
   13910:	008000f4 	movhi	r2,3
   13914:	102b2915 	stw	zero,-21340(r2)
   13918:	003f3406 	br	135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   1391c:	84000044 	addi	r16,r16,1
   13920:	05400044 	movi	r21,1
   13924:	003f9206 	br	13770 <__alt_mem_mcu_subsystem_ram_0+0x77ff3770>
   13928:	05800044 	movi	r22,1
   1392c:	003fac06 	br	137e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff37e0>
   13930:	84000044 	addi	r16,r16,1
   13934:	05401284 	movi	r21,74
   13938:	003fb606 	br	13814 <__alt_mem_mcu_subsystem_ram_0+0x77ff3814>
   1393c:	00801344 	movi	r2,77
   13940:	b0004426 	beq	r22,zero,13a54 <_tzset_unlocked_r+0x4cc>
   13944:	90800905 	stb	r2,36(r18)
   13948:	008002c4 	movi	r2,11
   1394c:	90800a15 	stw	r2,40(r18)
   13950:	00800044 	movi	r2,1
   13954:	90800b15 	stw	r2,44(r18)
   13958:	90000c15 	stw	zero,48(r18)
   1395c:	003fb706 	br	1383c <__alt_mem_mcu_subsystem_ram_0+0x77ff383c>
   13960:	d8800684 	addi	r2,sp,26
   13964:	d8800215 	stw	r2,8(sp)
   13968:	014000b4 	movhi	r5,2
   1396c:	d8800604 	addi	r2,sp,24
   13970:	dc400315 	stw	r17,12(sp)
   13974:	dc400115 	stw	r17,4(sp)
   13978:	d8800015 	stw	r2,0(sp)
   1397c:	880f883a 	mov	r7,r17
   13980:	d9800584 	addi	r6,sp,22
   13984:	295b1704 	addi	r5,r5,27740
   13988:	8009883a 	mov	r4,r16
   1398c:	001a3900 	call	1a390 <siscanf>
   13990:	108000d8 	cmpnei	r2,r2,3
   13994:	103f151e 	bne	r2,zero,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   13998:	d8c0058b 	ldhu	r3,22(sp)
   1399c:	18bfffc4 	addi	r2,r3,-1
   139a0:	10bfffcc 	andi	r2,r2,65535
   139a4:	10800328 	cmpgeui	r2,r2,12
   139a8:	103f101e 	bne	r2,zero,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   139ac:	d900060b 	ldhu	r4,24(sp)
   139b0:	20bfffc4 	addi	r2,r4,-1
   139b4:	10bfffcc 	andi	r2,r2,65535
   139b8:	10800168 	cmpgeui	r2,r2,5
   139bc:	103f0b1e 	bne	r2,zero,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   139c0:	d880068b 	ldhu	r2,26(sp)
   139c4:	114001e8 	cmpgeui	r5,r2,7
   139c8:	283f081e 	bne	r5,zero,135ec <__alt_mem_mcu_subsystem_ram_0+0x77ff35ec>
   139cc:	bd400005 	stb	r21,0(r23)
   139d0:	b8c00115 	stw	r3,4(r23)
   139d4:	b9000215 	stw	r4,8(r23)
   139d8:	b8800315 	stw	r2,12(r23)
   139dc:	d8800717 	ldw	r2,28(sp)
   139e0:	80a1883a 	add	r16,r16,r2
   139e4:	003f9606 	br	13840 <__alt_mem_mcu_subsystem_ram_0+0x77ff3840>
   139e8:	014000b4 	movhi	r5,2
   139ec:	8009883a 	mov	r4,r16
   139f0:	dc400315 	stw	r17,12(sp)
   139f4:	dd000215 	stw	r20,8(sp)
   139f8:	dc400115 	stw	r17,4(sp)
   139fc:	dcc00015 	stw	r19,0(sp)
   13a00:	880f883a 	mov	r7,r17
   13a04:	d9800404 	addi	r6,sp,16
   13a08:	295b1c04 	addi	r5,r5,27760
   13a0c:	001a3900 	call	1a390 <siscanf>
   13a10:	d880048b 	ldhu	r2,18(sp)
   13a14:	d8c0040b 	ldhu	r3,16(sp)
   13a18:	d900050b 	ldhu	r4,20(sp)
   13a1c:	10800f24 	muli	r2,r2,60
   13a20:	18c38424 	muli	r3,r3,3600
   13a24:	1105883a 	add	r2,r2,r4
   13a28:	10c5883a 	add	r2,r2,r3
   13a2c:	d8c00717 	ldw	r3,28(sp)
   13a30:	80e1883a 	add	r16,r16,r3
   13a34:	003f8b06 	br	13864 <__alt_mem_mcu_subsystem_ram_0+0x77ff3864>
   13a38:	90800817 	ldw	r2,32(r18)
   13a3c:	10bc7c04 	addi	r2,r2,-3600
   13a40:	90800f15 	stw	r2,60(r18)
   13a44:	003f6206 	br	137d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff37d0>
   13a48:	84000044 	addi	r16,r16,1
   13a4c:	057fffc4 	movi	r21,-1
   13a50:	003f4706 	br	13770 <__alt_mem_mcu_subsystem_ram_0+0x77ff3770>
   13a54:	90800205 	stb	r2,8(r18)
   13a58:	008000c4 	movi	r2,3
   13a5c:	90800315 	stw	r2,12(r18)
   13a60:	00800084 	movi	r2,2
   13a64:	90800415 	stw	r2,16(r18)
   13a68:	90000515 	stw	zero,20(r18)
   13a6c:	003f7306 	br	1383c <__alt_mem_mcu_subsystem_ram_0+0x77ff383c>

00013a70 <_tzset_r>:
   13a70:	defffe04 	addi	sp,sp,-8
   13a74:	dfc00115 	stw	ra,4(sp)
   13a78:	d9000015 	stw	r4,0(sp)
   13a7c:	00135500 	call	13550 <__tz_lock>
   13a80:	d9000017 	ldw	r4,0(sp)
   13a84:	00135880 	call	13588 <_tzset_unlocked_r>
   13a88:	dfc00117 	ldw	ra,4(sp)
   13a8c:	dec00204 	addi	sp,sp,8
   13a90:	00135541 	jmpi	13554 <__tz_unlock>

00013a94 <___vfprintf_internal_r>:
   13a94:	deffbe04 	addi	sp,sp,-264
   13a98:	dfc04115 	stw	ra,260(sp)
   13a9c:	ddc03f15 	stw	r23,252(sp)
   13aa0:	dc403915 	stw	r17,228(sp)
   13aa4:	dc003815 	stw	r16,224(sp)
   13aa8:	2023883a 	mov	r17,r4
   13aac:	d9000415 	stw	r4,16(sp)
   13ab0:	282f883a 	mov	r23,r5
   13ab4:	3021883a 	mov	r16,r6
   13ab8:	d9c00715 	stw	r7,28(sp)
   13abc:	df004015 	stw	fp,256(sp)
   13ac0:	dd803e15 	stw	r22,248(sp)
   13ac4:	dd403d15 	stw	r21,244(sp)
   13ac8:	dd003c15 	stw	r20,240(sp)
   13acc:	dcc03b15 	stw	r19,236(sp)
   13ad0:	dc803a15 	stw	r18,232(sp)
   13ad4:	00187180 	call	18718 <_localeconv_r>
   13ad8:	10800017 	ldw	r2,0(r2)
   13adc:	1009883a 	mov	r4,r2
   13ae0:	d8800f15 	stw	r2,60(sp)
   13ae4:	00112e40 	call	112e4 <strlen>
   13ae8:	d8800c15 	stw	r2,48(sp)
   13aec:	88000226 	beq	r17,zero,13af8 <___vfprintf_internal_r+0x64>
   13af0:	88800e17 	ldw	r2,56(r17)
   13af4:	1000b426 	beq	r2,zero,13dc8 <___vfprintf_internal_r+0x334>
   13af8:	b880030b 	ldhu	r2,12(r23)
   13afc:	10c8000c 	andi	r3,r2,8192
   13b00:	1800061e 	bne	r3,zero,13b1c <___vfprintf_internal_r+0x88>
   13b04:	b8c01917 	ldw	r3,100(r23)
   13b08:	0137ffc4 	movi	r4,-8193
   13b0c:	10880014 	ori	r2,r2,8192
   13b10:	1906703a 	and	r3,r3,r4
   13b14:	b880030d 	sth	r2,12(r23)
   13b18:	b8c01915 	stw	r3,100(r23)
   13b1c:	10c0020c 	andi	r3,r2,8
   13b20:	18009826 	beq	r3,zero,13d84 <___vfprintf_internal_r+0x2f0>
   13b24:	b8c00417 	ldw	r3,16(r23)
   13b28:	18009626 	beq	r3,zero,13d84 <___vfprintf_internal_r+0x2f0>
   13b2c:	1080068c 	andi	r2,r2,26
   13b30:	10800298 	cmpnei	r2,r2,10
   13b34:	10009b26 	beq	r2,zero,13da4 <___vfprintf_internal_r+0x310>
   13b38:	d8802804 	addi	r2,sp,160
   13b3c:	d8801b15 	stw	r2,108(sp)
   13b40:	d8001d15 	stw	zero,116(sp)
   13b44:	d8001c15 	stw	zero,112(sp)
   13b48:	d8000915 	stw	zero,36(sp)
   13b4c:	d8000a15 	stw	zero,40(sp)
   13b50:	d8000b15 	stw	zero,44(sp)
   13b54:	1011883a 	mov	r8,r2
   13b58:	d8000e15 	stw	zero,56(sp)
   13b5c:	d8001015 	stw	zero,64(sp)
   13b60:	d8000515 	stw	zero,20(sp)
   13b64:	8039883a 	mov	fp,r16
   13b68:	e0800007 	ldb	r2,0(fp)
   13b6c:	10023626 	beq	r2,zero,14448 <___vfprintf_internal_r+0x9b4>
   13b70:	10800960 	cmpeqi	r2,r2,37
   13b74:	e023883a 	mov	r17,fp
   13b78:	10000226 	beq	r2,zero,13b84 <___vfprintf_internal_r+0xf0>
   13b7c:	00001706 	br	13bdc <___vfprintf_internal_r+0x148>
   13b80:	18000426 	beq	r3,zero,13b94 <___vfprintf_internal_r+0x100>
   13b84:	8c400044 	addi	r17,r17,1
   13b88:	88800007 	ldb	r2,0(r17)
   13b8c:	10c00958 	cmpnei	r3,r2,37
   13b90:	103ffb1e 	bne	r2,zero,13b80 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b80>
   13b94:	8f21c83a 	sub	r16,r17,fp
   13b98:	80000e26 	beq	r16,zero,13bd4 <___vfprintf_internal_r+0x140>
   13b9c:	d8c01d17 	ldw	r3,116(sp)
   13ba0:	d8801c17 	ldw	r2,112(sp)
   13ba4:	47000015 	stw	fp,0(r8)
   13ba8:	1c07883a 	add	r3,r3,r16
   13bac:	10800044 	addi	r2,r2,1
   13bb0:	d8801c15 	stw	r2,112(sp)
   13bb4:	44000115 	stw	r16,4(r8)
   13bb8:	d8c01d15 	stw	r3,116(sp)
   13bbc:	10800208 	cmpgei	r2,r2,8
   13bc0:	10038c1e 	bne	r2,zero,149f4 <___vfprintf_internal_r+0xf60>
   13bc4:	42000204 	addi	r8,r8,8
   13bc8:	d8800517 	ldw	r2,20(sp)
   13bcc:	1405883a 	add	r2,r2,r16
   13bd0:	d8800515 	stw	r2,20(sp)
   13bd4:	88800007 	ldb	r2,0(r17)
   13bd8:	10021b26 	beq	r2,zero,14448 <___vfprintf_internal_r+0x9b4>
   13bdc:	8f000044 	addi	fp,r17,1
   13be0:	8c400047 	ldb	r17,1(r17)
   13be4:	d8001445 	stb	zero,81(sp)
   13be8:	0009883a 	mov	r4,zero
   13bec:	000b883a 	mov	r5,zero
   13bf0:	05bfffc4 	movi	r22,-1
   13bf4:	0025883a 	mov	r18,zero
   13bf8:	0017883a 	mov	r11,zero
   13bfc:	e7000044 	addi	fp,fp,1
   13c00:	88bff804 	addi	r2,r17,-32
   13c04:	10c01668 	cmpgeui	r3,r2,89
   13c08:	1800c41e 	bne	r3,zero,13f1c <___vfprintf_internal_r+0x488>
   13c0c:	100490ba 	slli	r2,r2,2
   13c10:	00c00074 	movhi	r3,1
   13c14:	10c7883a 	add	r3,r2,r3
   13c18:	188f0817 	ldw	r2,15392(r3)
   13c1c:	1000683a 	jmp	r2
   13c20:	0001451c 	xori	zero,zero,1300
   13c24:	00013f1c 	xori	zero,zero,1276
   13c28:	00013f1c 	xori	zero,zero,1276
   13c2c:	00014510 	cmplti	zero,zero,1300
   13c30:	00013f1c 	xori	zero,zero,1276
   13c34:	00013f1c 	xori	zero,zero,1276
   13c38:	00013f1c 	xori	zero,zero,1276
   13c3c:	00013f1c 	xori	zero,zero,1276
   13c40:	00013f1c 	xori	zero,zero,1276
   13c44:	00013f1c 	xori	zero,zero,1276
   13c48:	000144e8 	cmpgeui	zero,zero,1299
   13c4c:	000144d8 	cmpnei	zero,zero,1299
   13c50:	00013f1c 	xori	zero,zero,1276
   13c54:	0001458c 	andi	zero,zero,1302
   13c58:	00014548 	cmpgei	zero,zero,1301
   13c5c:	00013f1c 	xori	zero,zero,1276
   13c60:	000145a4 	muli	zero,zero,1302
   13c64:	00013eec 	andhi	zero,zero,1275
   13c68:	00013eec 	andhi	zero,zero,1275
   13c6c:	00013eec 	andhi	zero,zero,1275
   13c70:	00013eec 	andhi	zero,zero,1275
   13c74:	00013eec 	andhi	zero,zero,1275
   13c78:	00013eec 	andhi	zero,zero,1275
   13c7c:	00013eec 	andhi	zero,zero,1275
   13c80:	00013eec 	andhi	zero,zero,1275
   13c84:	00013eec 	andhi	zero,zero,1275
   13c88:	00013f1c 	xori	zero,zero,1276
   13c8c:	00013f1c 	xori	zero,zero,1276
   13c90:	00013f1c 	xori	zero,zero,1276
   13c94:	00013f1c 	xori	zero,zero,1276
   13c98:	00013f1c 	xori	zero,zero,1276
   13c9c:	00013f1c 	xori	zero,zero,1276
   13ca0:	00013f1c 	xori	zero,zero,1276
   13ca4:	00013f1c 	xori	zero,zero,1276
   13ca8:	00013f1c 	xori	zero,zero,1276
   13cac:	00013f1c 	xori	zero,zero,1276
   13cb0:	00014680 	call	1468 <ad9144_short_pattern_test+0x104>
   13cb4:	000145b0 	cmpltui	zero,zero,1302
   13cb8:	00013f1c 	xori	zero,zero,1276
   13cbc:	000145b0 	cmpltui	zero,zero,1302
   13cc0:	00013f1c 	xori	zero,zero,1276
   13cc4:	00013f1c 	xori	zero,zero,1276
   13cc8:	00013f1c 	xori	zero,zero,1276
   13ccc:	00013f1c 	xori	zero,zero,1276
   13cd0:	00014710 	cmplti	zero,zero,1308
   13cd4:	00013f1c 	xori	zero,zero,1276
   13cd8:	00013f1c 	xori	zero,zero,1276
   13cdc:	00013e38 	rdprs	zero,zero,1272
   13ce0:	00013f1c 	xori	zero,zero,1276
   13ce4:	00013f1c 	xori	zero,zero,1276
   13ce8:	00013f1c 	xori	zero,zero,1276
   13cec:	00013f1c 	xori	zero,zero,1276
   13cf0:	00013f1c 	xori	zero,zero,1276
   13cf4:	00013dd4 	movui	zero,1271
   13cf8:	00013f1c 	xori	zero,zero,1276
   13cfc:	00013f1c 	xori	zero,zero,1276
   13d00:	00014490 	cmplti	zero,zero,1298
   13d04:	00013f1c 	xori	zero,zero,1276
   13d08:	00013f1c 	xori	zero,zero,1276
   13d0c:	00013f1c 	xori	zero,zero,1276
   13d10:	00013f1c 	xori	zero,zero,1276
   13d14:	00013f1c 	xori	zero,zero,1276
   13d18:	00013f1c 	xori	zero,zero,1276
   13d1c:	00013f1c 	xori	zero,zero,1276
   13d20:	00013f1c 	xori	zero,zero,1276
   13d24:	00013f1c 	xori	zero,zero,1276
   13d28:	00013f1c 	xori	zero,zero,1276
   13d2c:	000140c4 	movi	zero,1283
   13d30:	00014088 	cmpgei	zero,zero,1282
   13d34:	000145b0 	cmpltui	zero,zero,1302
   13d38:	000145b0 	cmpltui	zero,zero,1302
   13d3c:	000145b0 	cmpltui	zero,zero,1302
   13d40:	0001407c 	xorhi	zero,zero,1281
   13d44:	00014088 	cmpgei	zero,zero,1282
   13d48:	00013f1c 	xori	zero,zero,1276
   13d4c:	00013f1c 	xori	zero,zero,1276
   13d50:	00014068 	cmpgeui	zero,zero,1281
   13d54:	00013f1c 	xori	zero,zero,1276
   13d58:	0001402c 	andhi	zero,zero,1280
   13d5c:	00013e3c 	xorhi	zero,zero,1272
   13d60:	00013f88 	cmpgei	zero,zero,1278
   13d64:	00013f7c 	xorhi	zero,zero,1277
   13d68:	00013f1c 	xori	zero,zero,1276
   13d6c:	00013fc8 	cmpgei	zero,zero,1279
   13d70:	00013f1c 	xori	zero,zero,1276
   13d74:	00013dd8 	cmpnei	zero,zero,1271
   13d78:	00013f1c 	xori	zero,zero,1276
   13d7c:	00013f1c 	xori	zero,zero,1276
   13d80:	00013f34 	movhi	zero,1276
   13d84:	d9000417 	ldw	r4,16(sp)
   13d88:	b80b883a 	mov	r5,r23
   13d8c:	0015b700 	call	15b70 <__swsetup_r>
   13d90:	1006581e 	bne	r2,zero,156f4 <___vfprintf_internal_r+0x1c60>
   13d94:	b880030b 	ldhu	r2,12(r23)
   13d98:	1080068c 	andi	r2,r2,26
   13d9c:	10800298 	cmpnei	r2,r2,10
   13da0:	103f651e 	bne	r2,zero,13b38 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b38>
   13da4:	b880038f 	ldh	r2,14(r23)
   13da8:	103f6316 	blt	r2,zero,13b38 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b38>
   13dac:	d9c00717 	ldw	r7,28(sp)
   13db0:	d9000417 	ldw	r4,16(sp)
   13db4:	800d883a 	mov	r6,r16
   13db8:	b80b883a 	mov	r5,r23
   13dbc:	0015a600 	call	15a60 <__sbprintf>
   13dc0:	d8800515 	stw	r2,20(sp)
   13dc4:	0001a506 	br	1445c <___vfprintf_internal_r+0x9c8>
   13dc8:	d9000417 	ldw	r4,16(sp)
   13dcc:	0017b9c0 	call	17b9c <__sinit>
   13dd0:	003f4906 	br	13af8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3af8>
   13dd4:	5ac00414 	ori	r11,r11,16
   13dd8:	5880080c 	andi	r2,r11,32
   13ddc:	10039f26 	beq	r2,zero,14c5c <___vfprintf_internal_r+0x11c8>
   13de0:	d8c00717 	ldw	r3,28(sp)
   13de4:	00800044 	movi	r2,1
   13de8:	1c000017 	ldw	r16,0(r3)
   13dec:	1d400117 	ldw	r21,4(r3)
   13df0:	18c00204 	addi	r3,r3,8
   13df4:	d8c00715 	stw	r3,28(sp)
   13df8:	d8001445 	stb	zero,81(sp)
   13dfc:	b0ffffe0 	cmpeqi	r3,r22,-1
   13e00:	1800191e 	bne	r3,zero,13e68 <___vfprintf_internal_r+0x3d4>
   13e04:	0019883a 	mov	r12,zero
   13e08:	053fdfc4 	movi	r20,-129
   13e0c:	8546b03a 	or	r3,r16,r21
   13e10:	5d28703a 	and	r20,r11,r20
   13e14:	1800161e 	bne	r3,zero,13e70 <___vfprintf_internal_r+0x3dc>
   13e18:	b0052a1e 	bne	r22,zero,152c4 <___vfprintf_internal_r+0x1830>
   13e1c:	10035e1e 	bne	r2,zero,14b98 <___vfprintf_internal_r+0x1104>
   13e20:	5c00004c 	andi	r16,r11,1
   13e24:	8003ac26 	beq	r16,zero,14cd8 <___vfprintf_internal_r+0x1244>
   13e28:	00800c04 	movi	r2,48
   13e2c:	d88027c5 	stb	r2,159(sp)
   13e30:	dcc027c4 	addi	r19,sp,159
   13e34:	00002306 	br	13ec4 <___vfprintf_internal_r+0x430>
   13e38:	5ac00414 	ori	r11,r11,16
   13e3c:	5880080c 	andi	r2,r11,32
   13e40:	10037a26 	beq	r2,zero,14c2c <___vfprintf_internal_r+0x1198>
   13e44:	d8c00717 	ldw	r3,28(sp)
   13e48:	d8001445 	stb	zero,81(sp)
   13e4c:	0005883a 	mov	r2,zero
   13e50:	1c000017 	ldw	r16,0(r3)
   13e54:	1d400117 	ldw	r21,4(r3)
   13e58:	18c00204 	addi	r3,r3,8
   13e5c:	d8c00715 	stw	r3,28(sp)
   13e60:	b0ffffe0 	cmpeqi	r3,r22,-1
   13e64:	183fe726 	beq	r3,zero,13e04 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e04>
   13e68:	5829883a 	mov	r20,r11
   13e6c:	0019883a 	mov	r12,zero
   13e70:	10c00060 	cmpeqi	r3,r2,1
   13e74:	18021e1e 	bne	r3,zero,146f0 <___vfprintf_internal_r+0xc5c>
   13e78:	108000a0 	cmpeqi	r2,r2,2
   13e7c:	1002fa1e 	bne	r2,zero,14a68 <___vfprintf_internal_r+0xfd4>
   13e80:	d8c02804 	addi	r3,sp,160
   13e84:	00000106 	br	13e8c <___vfprintf_internal_r+0x3f8>
   13e88:	9807883a 	mov	r3,r19
   13e8c:	8008d0fa 	srli	r4,r16,3
   13e90:	a80a977a 	slli	r5,r21,29
   13e94:	a82ad0fa 	srli	r21,r21,3
   13e98:	840001cc 	andi	r16,r16,7
   13e9c:	80800c04 	addi	r2,r16,48
   13ea0:	2920b03a 	or	r16,r5,r4
   13ea4:	18bfffc5 	stb	r2,-1(r3)
   13ea8:	8548b03a 	or	r4,r16,r21
   13eac:	1cffffc4 	addi	r19,r3,-1
   13eb0:	203ff51e 	bne	r4,zero,13e88 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e88>
   13eb4:	a100004c 	andi	r4,r20,1
   13eb8:	2003741e 	bne	r4,zero,14c8c <___vfprintf_internal_r+0x11f8>
   13ebc:	d8802804 	addi	r2,sp,160
   13ec0:	14e1c83a 	sub	r16,r2,r19
   13ec4:	b02b883a 	mov	r21,r22
   13ec8:	b400010e 	bge	r22,r16,13ed0 <___vfprintf_internal_r+0x43c>
   13ecc:	802b883a 	mov	r21,r16
   13ed0:	d8000815 	stw	zero,32(sp)
   13ed4:	60803fcc 	andi	r2,r12,255
   13ed8:	1080201c 	xori	r2,r2,128
   13edc:	10bfe004 	addi	r2,r2,-128
   13ee0:	10008526 	beq	r2,zero,140f8 <___vfprintf_internal_r+0x664>
   13ee4:	ad400044 	addi	r21,r21,1
   13ee8:	00008306 	br	140f8 <___vfprintf_internal_r+0x664>
   13eec:	0025883a 	mov	r18,zero
   13ef0:	88bff404 	addi	r2,r17,-48
   13ef4:	e7000044 	addi	fp,fp,1
   13ef8:	948002a4 	muli	r18,r18,10
   13efc:	e47fffc7 	ldb	r17,-1(fp)
   13f00:	14a5883a 	add	r18,r2,r18
   13f04:	88bff404 	addi	r2,r17,-48
   13f08:	10c002b0 	cmpltui	r3,r2,10
   13f0c:	183ff91e 	bne	r3,zero,13ef4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ef4>
   13f10:	88bff804 	addi	r2,r17,-32
   13f14:	10c01668 	cmpgeui	r3,r2,89
   13f18:	183f3c26 	beq	r3,zero,13c0c <__alt_mem_mcu_subsystem_ram_0+0x77ff3c0c>
   13f1c:	21003fcc 	andi	r4,r4,255
   13f20:	2006b91e 	bne	r4,zero,15a08 <___vfprintf_internal_r+0x1f74>
   13f24:	88014826 	beq	r17,zero,14448 <___vfprintf_internal_r+0x9b4>
   13f28:	dc401e05 	stb	r17,120(sp)
   13f2c:	d8001445 	stb	zero,81(sp)
   13f30:	00006a06 	br	140dc <___vfprintf_internal_r+0x648>
   13f34:	21003fcc 	andi	r4,r4,255
   13f38:	2006bd1e 	bne	r4,zero,15a30 <___vfprintf_internal_r+0x1f9c>
   13f3c:	008000b4 	movhi	r2,2
   13f40:	109afc04 	addi	r2,r2,27632
   13f44:	d8800e15 	stw	r2,56(sp)
   13f48:	5880080c 	andi	r2,r11,32
   13f4c:	10015726 	beq	r2,zero,144ac <___vfprintf_internal_r+0xa18>
   13f50:	d8800717 	ldw	r2,28(sp)
   13f54:	14000017 	ldw	r16,0(r2)
   13f58:	15400117 	ldw	r21,4(r2)
   13f5c:	10800204 	addi	r2,r2,8
   13f60:	d8800715 	stw	r2,28(sp)
   13f64:	5880004c 	andi	r2,r11,1
   13f68:	10000226 	beq	r2,zero,13f74 <___vfprintf_internal_r+0x4e0>
   13f6c:	8544b03a 	or	r2,r16,r21
   13f70:	10035f1e 	bne	r2,zero,14cf0 <___vfprintf_internal_r+0x125c>
   13f74:	00800084 	movi	r2,2
   13f78:	003f9f06 	br	13df8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df8>
   13f7c:	5ac00814 	ori	r11,r11,32
   13f80:	e4400007 	ldb	r17,0(fp)
   13f84:	003f1d06 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   13f88:	d8c00717 	ldw	r3,28(sp)
   13f8c:	00800c04 	movi	r2,48
   13f90:	d8801485 	stb	r2,82(sp)
   13f94:	00801e04 	movi	r2,120
   13f98:	010000b4 	movhi	r4,2
   13f9c:	d88014c5 	stb	r2,83(sp)
   13fa0:	18800104 	addi	r2,r3,4
   13fa4:	d8800715 	stw	r2,28(sp)
   13fa8:	209afc04 	addi	r2,r4,27632
   13fac:	d8800e15 	stw	r2,56(sp)
   13fb0:	1c000017 	ldw	r16,0(r3)
   13fb4:	002b883a 	mov	r21,zero
   13fb8:	5ac00094 	ori	r11,r11,2
   13fbc:	00800084 	movi	r2,2
   13fc0:	04401e04 	movi	r17,120
   13fc4:	003f8c06 	br	13df8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df8>
   13fc8:	d8800717 	ldw	r2,28(sp)
   13fcc:	d8001445 	stb	zero,81(sp)
   13fd0:	14c00017 	ldw	r19,0(r2)
   13fd4:	15000104 	addi	r20,r2,4
   13fd8:	9803de26 	beq	r19,zero,14f54 <___vfprintf_internal_r+0x14c0>
   13fdc:	da000715 	stw	r8,28(sp)
   13fe0:	dac00615 	stw	r11,24(sp)
   13fe4:	b0bfffe0 	cmpeqi	r2,r22,-1
   13fe8:	1004e21e 	bne	r2,zero,15374 <___vfprintf_internal_r+0x18e0>
   13fec:	b00d883a 	mov	r6,r22
   13ff0:	000b883a 	mov	r5,zero
   13ff4:	9809883a 	mov	r4,r19
   13ff8:	00189280 	call	18928 <memchr>
   13ffc:	dac00617 	ldw	r11,24(sp)
   14000:	da000717 	ldw	r8,28(sp)
   14004:	1005b326 	beq	r2,zero,156d4 <___vfprintf_internal_r+0x1c40>
   14008:	14e1c83a 	sub	r16,r2,r19
   1400c:	db001443 	ldbu	r12,81(sp)
   14010:	802b883a 	mov	r21,r16
   14014:	8004df16 	blt	r16,zero,15394 <___vfprintf_internal_r+0x1900>
   14018:	dd000715 	stw	r20,28(sp)
   1401c:	002d883a 	mov	r22,zero
   14020:	5829883a 	mov	r20,r11
   14024:	d8000815 	stw	zero,32(sp)
   14028:	003faa06 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   1402c:	21003fcc 	andi	r4,r4,255
   14030:	2006791e 	bne	r4,zero,15a18 <___vfprintf_internal_r+0x1f84>
   14034:	d9000717 	ldw	r4,28(sp)
   14038:	5880080c 	andi	r2,r11,32
   1403c:	20c00017 	ldw	r3,0(r4)
   14040:	21000104 	addi	r4,r4,4
   14044:	d9000715 	stw	r4,28(sp)
   14048:	10032f1e 	bne	r2,zero,14d08 <___vfprintf_internal_r+0x1274>
   1404c:	5880040c 	andi	r2,r11,16
   14050:	1003e81e 	bne	r2,zero,14ff4 <___vfprintf_internal_r+0x1560>
   14054:	5ac0100c 	andi	r11,r11,64
   14058:	5803e626 	beq	r11,zero,14ff4 <___vfprintf_internal_r+0x1560>
   1405c:	d8800517 	ldw	r2,20(sp)
   14060:	1880000d 	sth	r2,0(r3)
   14064:	003ec006 	br	13b68 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b68>
   14068:	e4400007 	ldb	r17,0(fp)
   1406c:	88801b18 	cmpnei	r2,r17,108
   14070:	1003b126 	beq	r2,zero,14f38 <___vfprintf_internal_r+0x14a4>
   14074:	5ac00414 	ori	r11,r11,16
   14078:	003ee006 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   1407c:	5ac01014 	ori	r11,r11,64
   14080:	e4400007 	ldb	r17,0(fp)
   14084:	003edd06 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   14088:	21003fcc 	andi	r4,r4,255
   1408c:	2006661e 	bne	r4,zero,15a28 <___vfprintf_internal_r+0x1f94>
   14090:	5880080c 	andi	r2,r11,32
   14094:	10017f26 	beq	r2,zero,14694 <___vfprintf_internal_r+0xc00>
   14098:	d8800717 	ldw	r2,28(sp)
   1409c:	14000017 	ldw	r16,0(r2)
   140a0:	15400117 	ldw	r21,4(r2)
   140a4:	10800204 	addi	r2,r2,8
   140a8:	d8800715 	stw	r2,28(sp)
   140ac:	a8018616 	blt	r21,zero,146c8 <___vfprintf_internal_r+0xc34>
   140b0:	b0bfffd8 	cmpnei	r2,r22,-1
   140b4:	db001443 	ldbu	r12,81(sp)
   140b8:	10018c26 	beq	r2,zero,146ec <___vfprintf_internal_r+0xc58>
   140bc:	00800044 	movi	r2,1
   140c0:	003f5106 	br	13e08 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e08>
   140c4:	d8c00717 	ldw	r3,28(sp)
   140c8:	d8001445 	stb	zero,81(sp)
   140cc:	18800017 	ldw	r2,0(r3)
   140d0:	18c00104 	addi	r3,r3,4
   140d4:	d8c00715 	stw	r3,28(sp)
   140d8:	d8801e05 	stb	r2,120(sp)
   140dc:	5829883a 	mov	r20,r11
   140e0:	05400044 	movi	r21,1
   140e4:	04000044 	movi	r16,1
   140e8:	002d883a 	mov	r22,zero
   140ec:	d8000815 	stw	zero,32(sp)
   140f0:	dcc01e04 	addi	r19,sp,120
   140f4:	0005883a 	mov	r2,zero
   140f8:	a300008c 	andi	r12,r20,2
   140fc:	60000126 	beq	r12,zero,14104 <___vfprintf_internal_r+0x670>
   14100:	ad400084 	addi	r21,r21,2
   14104:	a2c0210c 	andi	r11,r20,132
   14108:	d8c01d17 	ldw	r3,116(sp)
   1410c:	5800381e 	bne	r11,zero,141f0 <___vfprintf_internal_r+0x75c>
   14110:	955bc83a 	sub	r13,r18,r21
   14114:	0340360e 	bge	zero,r13,141f0 <___vfprintf_internal_r+0x75c>
   14118:	01c000b4 	movhi	r7,2
   1411c:	69000450 	cmplti	r4,r13,17
   14120:	39db24c4 	addi	r7,r7,27795
   14124:	d8801c17 	ldw	r2,112(sp)
   14128:	2000271e 	bne	r4,zero,141c8 <___vfprintf_internal_r+0x734>
   1412c:	dc401215 	stw	r17,72(sp)
   14130:	dc001315 	stw	r16,76(sp)
   14134:	03800404 	movi	r14,16
   14138:	db000d15 	stw	r12,52(sp)
   1413c:	dac01115 	stw	r11,68(sp)
   14140:	6821883a 	mov	r16,r13
   14144:	3823883a 	mov	r17,r7
   14148:	00000406 	br	1415c <___vfprintf_internal_r+0x6c8>
   1414c:	843ffc04 	addi	r16,r16,-16
   14150:	81000448 	cmpgei	r4,r16,17
   14154:	42000204 	addi	r8,r8,8
   14158:	20001526 	beq	r4,zero,141b0 <___vfprintf_internal_r+0x71c>
   1415c:	10800044 	addi	r2,r2,1
   14160:	18c00404 	addi	r3,r3,16
   14164:	44400015 	stw	r17,0(r8)
   14168:	43800115 	stw	r14,4(r8)
   1416c:	d8c01d15 	stw	r3,116(sp)
   14170:	d8801c15 	stw	r2,112(sp)
   14174:	11000208 	cmpgei	r4,r2,8
   14178:	203ff426 	beq	r4,zero,1414c <__alt_mem_mcu_subsystem_ram_0+0x77ff414c>
   1417c:	d9000417 	ldw	r4,16(sp)
   14180:	d9801b04 	addi	r6,sp,108
   14184:	b80b883a 	mov	r5,r23
   14188:	db800615 	stw	r14,24(sp)
   1418c:	001d0580 	call	1d058 <__sprint_r>
   14190:	1000af1e 	bne	r2,zero,14450 <___vfprintf_internal_r+0x9bc>
   14194:	843ffc04 	addi	r16,r16,-16
   14198:	81000448 	cmpgei	r4,r16,17
   1419c:	d8c01d17 	ldw	r3,116(sp)
   141a0:	d8801c17 	ldw	r2,112(sp)
   141a4:	da002804 	addi	r8,sp,160
   141a8:	db800617 	ldw	r14,24(sp)
   141ac:	203feb1e 	bne	r4,zero,1415c <__alt_mem_mcu_subsystem_ram_0+0x77ff415c>
   141b0:	801b883a 	mov	r13,r16
   141b4:	880f883a 	mov	r7,r17
   141b8:	db000d17 	ldw	r12,52(sp)
   141bc:	dac01117 	ldw	r11,68(sp)
   141c0:	dc001317 	ldw	r16,76(sp)
   141c4:	dc401217 	ldw	r17,72(sp)
   141c8:	10800044 	addi	r2,r2,1
   141cc:	1b47883a 	add	r3,r3,r13
   141d0:	d8801c15 	stw	r2,112(sp)
   141d4:	41c00015 	stw	r7,0(r8)
   141d8:	43400115 	stw	r13,4(r8)
   141dc:	d8c01d15 	stw	r3,116(sp)
   141e0:	10800208 	cmpgei	r2,r2,8
   141e4:	1003c01e 	bne	r2,zero,150e8 <___vfprintf_internal_r+0x1654>
   141e8:	d8801447 	ldb	r2,81(sp)
   141ec:	42000204 	addi	r8,r8,8
   141f0:	10000c26 	beq	r2,zero,14224 <___vfprintf_internal_r+0x790>
   141f4:	d8801c17 	ldw	r2,112(sp)
   141f8:	d9001444 	addi	r4,sp,81
   141fc:	18c00044 	addi	r3,r3,1
   14200:	10800044 	addi	r2,r2,1
   14204:	41000015 	stw	r4,0(r8)
   14208:	01000044 	movi	r4,1
   1420c:	d8801c15 	stw	r2,112(sp)
   14210:	41000115 	stw	r4,4(r8)
   14214:	d8c01d15 	stw	r3,116(sp)
   14218:	10800208 	cmpgei	r2,r2,8
   1421c:	1001fc1e 	bne	r2,zero,14a10 <___vfprintf_internal_r+0xf7c>
   14220:	42000204 	addi	r8,r8,8
   14224:	60000c26 	beq	r12,zero,14258 <___vfprintf_internal_r+0x7c4>
   14228:	d8801c17 	ldw	r2,112(sp)
   1422c:	d9001484 	addi	r4,sp,82
   14230:	18c00084 	addi	r3,r3,2
   14234:	10800044 	addi	r2,r2,1
   14238:	41000015 	stw	r4,0(r8)
   1423c:	01000084 	movi	r4,2
   14240:	d8801c15 	stw	r2,112(sp)
   14244:	41000115 	stw	r4,4(r8)
   14248:	d8c01d15 	stw	r3,116(sp)
   1424c:	10800208 	cmpgei	r2,r2,8
   14250:	1001fb1e 	bne	r2,zero,14a40 <___vfprintf_internal_r+0xfac>
   14254:	42000204 	addi	r8,r8,8
   14258:	5ac02018 	cmpnei	r11,r11,128
   1425c:	58014f26 	beq	r11,zero,1479c <___vfprintf_internal_r+0xd08>
   14260:	b42dc83a 	sub	r22,r22,r16
   14264:	0580350e 	bge	zero,r22,1433c <___vfprintf_internal_r+0x8a8>
   14268:	02c000b4 	movhi	r11,2
   1426c:	b1000450 	cmplti	r4,r22,17
   14270:	5adb20c4 	addi	r11,r11,27779
   14274:	d8801c17 	ldw	r2,112(sp)
   14278:	2000271e 	bne	r4,zero,14318 <___vfprintf_internal_r+0x884>
   1427c:	a009883a 	mov	r4,r20
   14280:	dc400d15 	stw	r17,52(sp)
   14284:	8029883a 	mov	r20,r16
   14288:	02800404 	movi	r10,16
   1428c:	b021883a 	mov	r16,r22
   14290:	5823883a 	mov	r17,r11
   14294:	202d883a 	mov	r22,r4
   14298:	00000406 	br	142ac <___vfprintf_internal_r+0x818>
   1429c:	843ffc04 	addi	r16,r16,-16
   142a0:	81000448 	cmpgei	r4,r16,17
   142a4:	42000204 	addi	r8,r8,8
   142a8:	20001526 	beq	r4,zero,14300 <___vfprintf_internal_r+0x86c>
   142ac:	10800044 	addi	r2,r2,1
   142b0:	18c00404 	addi	r3,r3,16
   142b4:	44400015 	stw	r17,0(r8)
   142b8:	42800115 	stw	r10,4(r8)
   142bc:	d8c01d15 	stw	r3,116(sp)
   142c0:	d8801c15 	stw	r2,112(sp)
   142c4:	11000208 	cmpgei	r4,r2,8
   142c8:	203ff426 	beq	r4,zero,1429c <__alt_mem_mcu_subsystem_ram_0+0x77ff429c>
   142cc:	d9000417 	ldw	r4,16(sp)
   142d0:	d9801b04 	addi	r6,sp,108
   142d4:	b80b883a 	mov	r5,r23
   142d8:	da800615 	stw	r10,24(sp)
   142dc:	001d0580 	call	1d058 <__sprint_r>
   142e0:	10005b1e 	bne	r2,zero,14450 <___vfprintf_internal_r+0x9bc>
   142e4:	843ffc04 	addi	r16,r16,-16
   142e8:	81000448 	cmpgei	r4,r16,17
   142ec:	d8c01d17 	ldw	r3,116(sp)
   142f0:	d8801c17 	ldw	r2,112(sp)
   142f4:	da002804 	addi	r8,sp,160
   142f8:	da800617 	ldw	r10,24(sp)
   142fc:	203feb1e 	bne	r4,zero,142ac <__alt_mem_mcu_subsystem_ram_0+0x77ff42ac>
   14300:	8817883a 	mov	r11,r17
   14304:	dc400d17 	ldw	r17,52(sp)
   14308:	b009883a 	mov	r4,r22
   1430c:	802d883a 	mov	r22,r16
   14310:	a021883a 	mov	r16,r20
   14314:	2029883a 	mov	r20,r4
   14318:	10800044 	addi	r2,r2,1
   1431c:	1d87883a 	add	r3,r3,r22
   14320:	d8801c15 	stw	r2,112(sp)
   14324:	42c00015 	stw	r11,0(r8)
   14328:	45800115 	stw	r22,4(r8)
   1432c:	d8c01d15 	stw	r3,116(sp)
   14330:	10800208 	cmpgei	r2,r2,8
   14334:	1001da1e 	bne	r2,zero,14aa0 <___vfprintf_internal_r+0x100c>
   14338:	42000204 	addi	r8,r8,8
   1433c:	a080400c 	andi	r2,r20,256
   14340:	1000f61e 	bne	r2,zero,1471c <___vfprintf_internal_r+0xc88>
   14344:	d8801c17 	ldw	r2,112(sp)
   14348:	1c07883a 	add	r3,r3,r16
   1434c:	44c00015 	stw	r19,0(r8)
   14350:	10800044 	addi	r2,r2,1
   14354:	44000115 	stw	r16,4(r8)
   14358:	d8801c15 	stw	r2,112(sp)
   1435c:	d8c01d15 	stw	r3,116(sp)
   14360:	10800208 	cmpgei	r2,r2,8
   14364:	10015a1e 	bne	r2,zero,148d0 <___vfprintf_internal_r+0xe3c>
   14368:	42000204 	addi	r8,r8,8
   1436c:	a500010c 	andi	r20,r20,4
   14370:	a0002b26 	beq	r20,zero,14420 <___vfprintf_internal_r+0x98c>
   14374:	9561c83a 	sub	r16,r18,r21
   14378:	0400290e 	bge	zero,r16,14420 <___vfprintf_internal_r+0x98c>
   1437c:	01c000b4 	movhi	r7,2
   14380:	81000450 	cmplti	r4,r16,17
   14384:	39db24c4 	addi	r7,r7,27795
   14388:	d8801c17 	ldw	r2,112(sp)
   1438c:	20001c1e 	bne	r4,zero,14400 <___vfprintf_internal_r+0x96c>
   14390:	04400404 	movi	r17,16
   14394:	dcc00417 	ldw	r19,16(sp)
   14398:	3829883a 	mov	r20,r7
   1439c:	00000406 	br	143b0 <___vfprintf_internal_r+0x91c>
   143a0:	843ffc04 	addi	r16,r16,-16
   143a4:	81000448 	cmpgei	r4,r16,17
   143a8:	42000204 	addi	r8,r8,8
   143ac:	20001326 	beq	r4,zero,143fc <___vfprintf_internal_r+0x968>
   143b0:	10800044 	addi	r2,r2,1
   143b4:	18c00404 	addi	r3,r3,16
   143b8:	45000015 	stw	r20,0(r8)
   143bc:	44400115 	stw	r17,4(r8)
   143c0:	d8c01d15 	stw	r3,116(sp)
   143c4:	d8801c15 	stw	r2,112(sp)
   143c8:	11000208 	cmpgei	r4,r2,8
   143cc:	203ff426 	beq	r4,zero,143a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff43a0>
   143d0:	d9801b04 	addi	r6,sp,108
   143d4:	b80b883a 	mov	r5,r23
   143d8:	9809883a 	mov	r4,r19
   143dc:	001d0580 	call	1d058 <__sprint_r>
   143e0:	10001b1e 	bne	r2,zero,14450 <___vfprintf_internal_r+0x9bc>
   143e4:	843ffc04 	addi	r16,r16,-16
   143e8:	81000448 	cmpgei	r4,r16,17
   143ec:	d8c01d17 	ldw	r3,116(sp)
   143f0:	d8801c17 	ldw	r2,112(sp)
   143f4:	da002804 	addi	r8,sp,160
   143f8:	203fed1e 	bne	r4,zero,143b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff43b0>
   143fc:	a00f883a 	mov	r7,r20
   14400:	10800044 	addi	r2,r2,1
   14404:	1c07883a 	add	r3,r3,r16
   14408:	d8801c15 	stw	r2,112(sp)
   1440c:	41c00015 	stw	r7,0(r8)
   14410:	44000115 	stw	r16,4(r8)
   14414:	d8c01d15 	stw	r3,116(sp)
   14418:	10800210 	cmplti	r2,r2,8
   1441c:	10022726 	beq	r2,zero,14cbc <___vfprintf_internal_r+0x1228>
   14420:	9540010e 	bge	r18,r21,14428 <___vfprintf_internal_r+0x994>
   14424:	a825883a 	mov	r18,r21
   14428:	d8800517 	ldw	r2,20(sp)
   1442c:	1485883a 	add	r2,r2,r18
   14430:	d8800515 	stw	r2,20(sp)
   14434:	18010d1e 	bne	r3,zero,1486c <___vfprintf_internal_r+0xdd8>
   14438:	e0800007 	ldb	r2,0(fp)
   1443c:	d8001c15 	stw	zero,112(sp)
   14440:	da002804 	addi	r8,sp,160
   14444:	103dca1e 	bne	r2,zero,13b70 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b70>
   14448:	d8801d17 	ldw	r2,116(sp)
   1444c:	1003f81e 	bne	r2,zero,15430 <___vfprintf_internal_r+0x199c>
   14450:	b880030b 	ldhu	r2,12(r23)
   14454:	1080100c 	andi	r2,r2,64
   14458:	1004a61e 	bne	r2,zero,156f4 <___vfprintf_internal_r+0x1c60>
   1445c:	d8800517 	ldw	r2,20(sp)
   14460:	dfc04117 	ldw	ra,260(sp)
   14464:	df004017 	ldw	fp,256(sp)
   14468:	ddc03f17 	ldw	r23,252(sp)
   1446c:	dd803e17 	ldw	r22,248(sp)
   14470:	dd403d17 	ldw	r21,244(sp)
   14474:	dd003c17 	ldw	r20,240(sp)
   14478:	dcc03b17 	ldw	r19,236(sp)
   1447c:	dc803a17 	ldw	r18,232(sp)
   14480:	dc403917 	ldw	r17,228(sp)
   14484:	dc003817 	ldw	r16,224(sp)
   14488:	dec04204 	addi	sp,sp,264
   1448c:	f800283a 	ret
   14490:	21003fcc 	andi	r4,r4,255
   14494:	2005681e 	bne	r4,zero,15a38 <___vfprintf_internal_r+0x1fa4>
   14498:	008000b4 	movhi	r2,2
   1449c:	109af704 	addi	r2,r2,27612
   144a0:	d8800e15 	stw	r2,56(sp)
   144a4:	5880080c 	andi	r2,r11,32
   144a8:	103ea91e 	bne	r2,zero,13f50 <__alt_mem_mcu_subsystem_ram_0+0x77ff3f50>
   144ac:	d8c00717 	ldw	r3,28(sp)
   144b0:	5880040c 	andi	r2,r11,16
   144b4:	1c000017 	ldw	r16,0(r3)
   144b8:	18c00104 	addi	r3,r3,4
   144bc:	d8c00715 	stw	r3,28(sp)
   144c0:	1002071e 	bne	r2,zero,14ce0 <___vfprintf_internal_r+0x124c>
   144c4:	5880100c 	andi	r2,r11,64
   144c8:	10020526 	beq	r2,zero,14ce0 <___vfprintf_internal_r+0x124c>
   144cc:	843fffcc 	andi	r16,r16,65535
   144d0:	002b883a 	mov	r21,zero
   144d4:	003ea306 	br	13f64 <__alt_mem_mcu_subsystem_ram_0+0x77ff3f64>
   144d8:	01000044 	movi	r4,1
   144dc:	01400ac4 	movi	r5,43
   144e0:	e4400007 	ldb	r17,0(fp)
   144e4:	003dc506 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   144e8:	d8800717 	ldw	r2,28(sp)
   144ec:	e4400003 	ldbu	r17,0(fp)
   144f0:	14800017 	ldw	r18,0(r2)
   144f4:	10800104 	addi	r2,r2,4
   144f8:	90028116 	blt	r18,zero,14f00 <___vfprintf_internal_r+0x146c>
   144fc:	d8800715 	stw	r2,28(sp)
   14500:	8c403fcc 	andi	r17,r17,255
   14504:	8c40201c 	xori	r17,r17,128
   14508:	8c7fe004 	addi	r17,r17,-128
   1450c:	003dbb06 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   14510:	5ac00054 	ori	r11,r11,1
   14514:	e4400007 	ldb	r17,0(fp)
   14518:	003db806 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   1451c:	28803fcc 	andi	r2,r5,255
   14520:	1080201c 	xori	r2,r2,128
   14524:	10bfe004 	addi	r2,r2,-128
   14528:	e4400003 	ldbu	r17,0(fp)
   1452c:	103ff41e 	bne	r2,zero,14500 <__alt_mem_mcu_subsystem_ram_0+0x77ff4500>
   14530:	8c403fcc 	andi	r17,r17,255
   14534:	8c40201c 	xori	r17,r17,128
   14538:	01000044 	movi	r4,1
   1453c:	01400804 	movi	r5,32
   14540:	8c7fe004 	addi	r17,r17,-128
   14544:	003dad06 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   14548:	e4400007 	ldb	r17,0(fp)
   1454c:	e0c00044 	addi	r3,fp,1
   14550:	88800aa0 	cmpeqi	r2,r17,42
   14554:	10051c1e 	bne	r2,zero,159c8 <___vfprintf_internal_r+0x1f34>
   14558:	88bff404 	addi	r2,r17,-48
   1455c:	118002b0 	cmpltui	r6,r2,10
   14560:	1839883a 	mov	fp,r3
   14564:	002d883a 	mov	r22,zero
   14568:	303da526 	beq	r6,zero,13c00 <__alt_mem_mcu_subsystem_ram_0+0x77ff3c00>
   1456c:	e7000044 	addi	fp,fp,1
   14570:	b58002a4 	muli	r22,r22,10
   14574:	e47fffc7 	ldb	r17,-1(fp)
   14578:	b0ad883a 	add	r22,r22,r2
   1457c:	88bff404 	addi	r2,r17,-48
   14580:	10c002b0 	cmpltui	r3,r2,10
   14584:	183ff91e 	bne	r3,zero,1456c <__alt_mem_mcu_subsystem_ram_0+0x77ff456c>
   14588:	003d9d06 	br	13c00 <__alt_mem_mcu_subsystem_ram_0+0x77ff3c00>
   1458c:	e4400003 	ldbu	r17,0(fp)
   14590:	8c403fcc 	andi	r17,r17,255
   14594:	8c40201c 	xori	r17,r17,128
   14598:	5ac00114 	ori	r11,r11,4
   1459c:	8c7fe004 	addi	r17,r17,-128
   145a0:	003d9606 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   145a4:	5ac02014 	ori	r11,r11,128
   145a8:	e4400007 	ldb	r17,0(fp)
   145ac:	003d9306 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   145b0:	21003fcc 	andi	r4,r4,255
   145b4:	2005161e 	bne	r4,zero,15a10 <___vfprintf_internal_r+0x1f7c>
   145b8:	d8c00717 	ldw	r3,28(sp)
   145bc:	00a00034 	movhi	r2,32768
   145c0:	10bfffc4 	addi	r2,r2,-1
   145c4:	1d000117 	ldw	r20,4(r3)
   145c8:	1cc00017 	ldw	r19,0(r3)
   145cc:	01dffc34 	movhi	r7,32752
   145d0:	a0a0703a 	and	r16,r20,r2
   145d4:	01bfffc4 	movi	r6,-1
   145d8:	18800204 	addi	r2,r3,8
   145dc:	39ffffc4 	addi	r7,r7,-1
   145e0:	9809883a 	mov	r4,r19
   145e4:	800b883a 	mov	r5,r16
   145e8:	da000815 	stw	r8,32(sp)
   145ec:	dac00615 	stw	r11,24(sp)
   145f0:	dd000b15 	stw	r20,44(sp)
   145f4:	dcc00a15 	stw	r19,40(sp)
   145f8:	d8800715 	stw	r2,28(sp)
   145fc:	001f9440 	call	1f944 <__unorddf2>
   14600:	dac00617 	ldw	r11,24(sp)
   14604:	da000817 	ldw	r8,32(sp)
   14608:	1001c41e 	bne	r2,zero,14d1c <___vfprintf_internal_r+0x1288>
   1460c:	01dffc34 	movhi	r7,32752
   14610:	01bfffc4 	movi	r6,-1
   14614:	39ffffc4 	addi	r7,r7,-1
   14618:	9809883a 	mov	r4,r19
   1461c:	800b883a 	mov	r5,r16
   14620:	001f8640 	call	1f864 <__ledf2>
   14624:	dac00617 	ldw	r11,24(sp)
   14628:	da000817 	ldw	r8,32(sp)
   1462c:	0081bb0e 	bge	zero,r2,14d1c <___vfprintf_internal_r+0x1288>
   14630:	000d883a 	mov	r6,zero
   14634:	000f883a 	mov	r7,zero
   14638:	9809883a 	mov	r4,r19
   1463c:	a00b883a 	mov	r5,r20
   14640:	001f8640 	call	1f864 <__ledf2>
   14644:	dac00617 	ldw	r11,24(sp)
   14648:	da000817 	ldw	r8,32(sp)
   1464c:	1003db16 	blt	r2,zero,155bc <___vfprintf_internal_r+0x1b28>
   14650:	db001443 	ldbu	r12,81(sp)
   14654:	88801208 	cmpgei	r2,r17,72
   14658:	1003431e 	bne	r2,zero,15368 <___vfprintf_internal_r+0x18d4>
   1465c:	04c000b4 	movhi	r19,2
   14660:	9cdaf304 	addi	r19,r19,27596
   14664:	053fdfc4 	movi	r20,-129
   14668:	5d28703a 	and	r20,r11,r20
   1466c:	054000c4 	movi	r21,3
   14670:	040000c4 	movi	r16,3
   14674:	002d883a 	mov	r22,zero
   14678:	d8000815 	stw	zero,32(sp)
   1467c:	003e1506 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   14680:	21003fcc 	andi	r4,r4,255
   14684:	2004ee1e 	bne	r4,zero,15a40 <___vfprintf_internal_r+0x1fac>
   14688:	5ac00414 	ori	r11,r11,16
   1468c:	5880080c 	andi	r2,r11,32
   14690:	103e811e 	bne	r2,zero,14098 <__alt_mem_mcu_subsystem_ram_0+0x77ff4098>
   14694:	d8c00717 	ldw	r3,28(sp)
   14698:	5880040c 	andi	r2,r11,16
   1469c:	1c000017 	ldw	r16,0(r3)
   146a0:	18c00104 	addi	r3,r3,4
   146a4:	d8c00715 	stw	r3,28(sp)
   146a8:	10018f1e 	bne	r2,zero,14ce8 <___vfprintf_internal_r+0x1254>
   146ac:	5880100c 	andi	r2,r11,64
   146b0:	10018d26 	beq	r2,zero,14ce8 <___vfprintf_internal_r+0x1254>
   146b4:	843fffcc 	andi	r16,r16,65535
   146b8:	8420001c 	xori	r16,r16,32768
   146bc:	84200004 	addi	r16,r16,-32768
   146c0:	802bd7fa 	srai	r21,r16,31
   146c4:	a83e7a0e 	bge	r21,zero,140b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff40b0>
   146c8:	0421c83a 	sub	r16,zero,r16
   146cc:	8004c03a 	cmpne	r2,r16,zero
   146d0:	056bc83a 	sub	r21,zero,r21
   146d4:	a8abc83a 	sub	r21,r21,r2
   146d8:	00800b44 	movi	r2,45
   146dc:	d8801445 	stb	r2,81(sp)
   146e0:	b0bfffd8 	cmpnei	r2,r22,-1
   146e4:	03000b44 	movi	r12,45
   146e8:	103e741e 	bne	r2,zero,140bc <__alt_mem_mcu_subsystem_ram_0+0x77ff40bc>
   146ec:	5829883a 	mov	r20,r11
   146f0:	a802241e 	bne	r21,zero,14f84 <___vfprintf_internal_r+0x14f0>
   146f4:	808002a8 	cmpgeui	r2,r16,10
   146f8:	1002221e 	bne	r2,zero,14f84 <___vfprintf_internal_r+0x14f0>
   146fc:	84000c04 	addi	r16,r16,48
   14700:	dc0027c5 	stb	r16,159(sp)
   14704:	dcc027c4 	addi	r19,sp,159
   14708:	04000044 	movi	r16,1
   1470c:	003ded06 	br	13ec4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ec4>
   14710:	5ac00214 	ori	r11,r11,8
   14714:	e4400007 	ldb	r17,0(fp)
   14718:	003d3806 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   1471c:	8c401990 	cmplti	r17,r17,102
   14720:	8800731e 	bne	r17,zero,148f0 <___vfprintf_internal_r+0xe5c>
   14724:	d9000a17 	ldw	r4,40(sp)
   14728:	d9400b17 	ldw	r5,44(sp)
   1472c:	000d883a 	mov	r6,zero
   14730:	000f883a 	mov	r7,zero
   14734:	da000d15 	stw	r8,52(sp)
   14738:	d8c00615 	stw	r3,24(sp)
   1473c:	001f7e40 	call	1f7e4 <__eqdf2>
   14740:	d8c00617 	ldw	r3,24(sp)
   14744:	da000d17 	ldw	r8,52(sp)
   14748:	1000dd1e 	bne	r2,zero,14ac0 <___vfprintf_internal_r+0x102c>
   1474c:	d8801c17 	ldw	r2,112(sp)
   14750:	010000b4 	movhi	r4,2
   14754:	211b0304 	addi	r4,r4,27660
   14758:	10800044 	addi	r2,r2,1
   1475c:	18c00044 	addi	r3,r3,1
   14760:	41000015 	stw	r4,0(r8)
   14764:	01000044 	movi	r4,1
   14768:	d8801c15 	stw	r2,112(sp)
   1476c:	41000115 	stw	r4,4(r8)
   14770:	d8c01d15 	stw	r3,116(sp)
   14774:	10800208 	cmpgei	r2,r2,8
   14778:	1001da1e 	bne	r2,zero,14ee4 <___vfprintf_internal_r+0x1450>
   1477c:	42000204 	addi	r8,r8,8
   14780:	d8801517 	ldw	r2,84(sp)
   14784:	d8c00917 	ldw	r3,36(sp)
   14788:	10c21d16 	blt	r2,r3,15000 <___vfprintf_internal_r+0x156c>
   1478c:	a080004c 	andi	r2,r20,1
   14790:	10021b1e 	bne	r2,zero,15000 <___vfprintf_internal_r+0x156c>
   14794:	d8c01d17 	ldw	r3,116(sp)
   14798:	003ef406 	br	1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   1479c:	954fc83a 	sub	r7,r18,r21
   147a0:	01feaf0e 	bge	zero,r7,14260 <__alt_mem_mcu_subsystem_ram_0+0x77ff4260>
   147a4:	02c000b4 	movhi	r11,2
   147a8:	39000450 	cmplti	r4,r7,17
   147ac:	5adb20c4 	addi	r11,r11,27779
   147b0:	d8801c17 	ldw	r2,112(sp)
   147b4:	2000231e 	bne	r4,zero,14844 <___vfprintf_internal_r+0xdb0>
   147b8:	dc400d15 	stw	r17,52(sp)
   147bc:	dc001115 	stw	r16,68(sp)
   147c0:	03000404 	movi	r12,16
   147c4:	3821883a 	mov	r16,r7
   147c8:	5823883a 	mov	r17,r11
   147cc:	00000406 	br	147e0 <___vfprintf_internal_r+0xd4c>
   147d0:	843ffc04 	addi	r16,r16,-16
   147d4:	81000448 	cmpgei	r4,r16,17
   147d8:	42000204 	addi	r8,r8,8
   147dc:	20001526 	beq	r4,zero,14834 <___vfprintf_internal_r+0xda0>
   147e0:	10800044 	addi	r2,r2,1
   147e4:	18c00404 	addi	r3,r3,16
   147e8:	44400015 	stw	r17,0(r8)
   147ec:	43000115 	stw	r12,4(r8)
   147f0:	d8c01d15 	stw	r3,116(sp)
   147f4:	d8801c15 	stw	r2,112(sp)
   147f8:	11000208 	cmpgei	r4,r2,8
   147fc:	203ff426 	beq	r4,zero,147d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff47d0>
   14800:	d9000417 	ldw	r4,16(sp)
   14804:	d9801b04 	addi	r6,sp,108
   14808:	b80b883a 	mov	r5,r23
   1480c:	db000615 	stw	r12,24(sp)
   14810:	001d0580 	call	1d058 <__sprint_r>
   14814:	103f0e1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14818:	843ffc04 	addi	r16,r16,-16
   1481c:	81000448 	cmpgei	r4,r16,17
   14820:	d8c01d17 	ldw	r3,116(sp)
   14824:	d8801c17 	ldw	r2,112(sp)
   14828:	da002804 	addi	r8,sp,160
   1482c:	db000617 	ldw	r12,24(sp)
   14830:	203feb1e 	bne	r4,zero,147e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff47e0>
   14834:	800f883a 	mov	r7,r16
   14838:	8817883a 	mov	r11,r17
   1483c:	dc001117 	ldw	r16,68(sp)
   14840:	dc400d17 	ldw	r17,52(sp)
   14844:	10800044 	addi	r2,r2,1
   14848:	19c7883a 	add	r3,r3,r7
   1484c:	d8801c15 	stw	r2,112(sp)
   14850:	42c00015 	stw	r11,0(r8)
   14854:	41c00115 	stw	r7,4(r8)
   14858:	d8c01d15 	stw	r3,116(sp)
   1485c:	10800208 	cmpgei	r2,r2,8
   14860:	1002a01e 	bne	r2,zero,152e4 <___vfprintf_internal_r+0x1850>
   14864:	42000204 	addi	r8,r8,8
   14868:	003e7d06 	br	14260 <__alt_mem_mcu_subsystem_ram_0+0x77ff4260>
   1486c:	d9000417 	ldw	r4,16(sp)
   14870:	d9801b04 	addi	r6,sp,108
   14874:	b80b883a 	mov	r5,r23
   14878:	001d0580 	call	1d058 <__sprint_r>
   1487c:	103eee26 	beq	r2,zero,14438 <__alt_mem_mcu_subsystem_ram_0+0x77ff4438>
   14880:	003ef306 	br	14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14884:	d9000417 	ldw	r4,16(sp)
   14888:	d9801b04 	addi	r6,sp,108
   1488c:	b80b883a 	mov	r5,r23
   14890:	001d0580 	call	1d058 <__sprint_r>
   14894:	103eee1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14898:	d9001517 	ldw	r4,84(sp)
   1489c:	d8c01d17 	ldw	r3,116(sp)
   148a0:	d8801c17 	ldw	r2,112(sp)
   148a4:	da002804 	addi	r8,sp,160
   148a8:	2003a916 	blt	r4,zero,15750 <___vfprintf_internal_r+0x1cbc>
   148ac:	d9000917 	ldw	r4,36(sp)
   148b0:	10800044 	addi	r2,r2,1
   148b4:	d8801c15 	stw	r2,112(sp)
   148b8:	20c7883a 	add	r3,r4,r3
   148bc:	44c00015 	stw	r19,0(r8)
   148c0:	41000115 	stw	r4,4(r8)
   148c4:	d8c01d15 	stw	r3,116(sp)
   148c8:	10800208 	cmpgei	r2,r2,8
   148cc:	103ea626 	beq	r2,zero,14368 <__alt_mem_mcu_subsystem_ram_0+0x77ff4368>
   148d0:	d9000417 	ldw	r4,16(sp)
   148d4:	d9801b04 	addi	r6,sp,108
   148d8:	b80b883a 	mov	r5,r23
   148dc:	001d0580 	call	1d058 <__sprint_r>
   148e0:	103edb1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   148e4:	d8c01d17 	ldw	r3,116(sp)
   148e8:	da002804 	addi	r8,sp,160
   148ec:	003e9f06 	br	1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   148f0:	d8800917 	ldw	r2,36(sp)
   148f4:	da801c17 	ldw	r10,112(sp)
   148f8:	18c00044 	addi	r3,r3,1
   148fc:	10800088 	cmpgei	r2,r2,2
   14900:	54000044 	addi	r16,r10,1
   14904:	44400204 	addi	r17,r8,8
   14908:	1001eb26 	beq	r2,zero,150b8 <___vfprintf_internal_r+0x1624>
   1490c:	00800044 	movi	r2,1
   14910:	40800115 	stw	r2,4(r8)
   14914:	44c00015 	stw	r19,0(r8)
   14918:	d8c01d15 	stw	r3,116(sp)
   1491c:	dc001c15 	stw	r16,112(sp)
   14920:	80800210 	cmplti	r2,r16,8
   14924:	10025526 	beq	r2,zero,1527c <___vfprintf_internal_r+0x17e8>
   14928:	d8800c17 	ldw	r2,48(sp)
   1492c:	d9000f17 	ldw	r4,60(sp)
   14930:	84000044 	addi	r16,r16,1
   14934:	1887883a 	add	r3,r3,r2
   14938:	88800115 	stw	r2,4(r17)
   1493c:	89000015 	stw	r4,0(r17)
   14940:	d8c01d15 	stw	r3,116(sp)
   14944:	dc001c15 	stw	r16,112(sp)
   14948:	80800208 	cmpgei	r2,r16,8
   1494c:	1002541e 	bne	r2,zero,152a0 <___vfprintf_internal_r+0x180c>
   14950:	8c400204 	addi	r17,r17,8
   14954:	d8800917 	ldw	r2,36(sp)
   14958:	d9000a17 	ldw	r4,40(sp)
   1495c:	d9400b17 	ldw	r5,44(sp)
   14960:	133fffc4 	addi	r12,r2,-1
   14964:	8a000204 	addi	r8,r17,8
   14968:	85800044 	addi	r22,r16,1
   1496c:	000d883a 	mov	r6,zero
   14970:	000f883a 	mov	r7,zero
   14974:	d8c01115 	stw	r3,68(sp)
   14978:	db000815 	stw	r12,32(sp)
   1497c:	da000615 	stw	r8,24(sp)
   14980:	dd800d15 	stw	r22,52(sp)
   14984:	001f7e40 	call	1f7e4 <__eqdf2>
   14988:	da000617 	ldw	r8,24(sp)
   1498c:	db000817 	ldw	r12,32(sp)
   14990:	db400d17 	ldw	r13,52(sp)
   14994:	d8c01117 	ldw	r3,68(sp)
   14998:	10008226 	beq	r2,zero,14ba4 <___vfprintf_internal_r+0x1110>
   1499c:	9cc00044 	addi	r19,r19,1
   149a0:	1b07883a 	add	r3,r3,r12
   149a4:	8cc00015 	stw	r19,0(r17)
   149a8:	8b000115 	stw	r12,4(r17)
   149ac:	d8c01d15 	stw	r3,116(sp)
   149b0:	dd801c15 	stw	r22,112(sp)
   149b4:	b2800208 	cmpgei	r10,r22,8
   149b8:	5001541e 	bne	r10,zero,14f0c <___vfprintf_internal_r+0x1478>
   149bc:	88800404 	addi	r2,r17,16
   149c0:	85800084 	addi	r22,r16,2
   149c4:	4023883a 	mov	r17,r8
   149c8:	1011883a 	mov	r8,r2
   149cc:	d9001017 	ldw	r4,64(sp)
   149d0:	d8801744 	addi	r2,sp,93
   149d4:	88800015 	stw	r2,0(r17)
   149d8:	20c7883a 	add	r3,r4,r3
   149dc:	89000115 	stw	r4,4(r17)
   149e0:	d8c01d15 	stw	r3,116(sp)
   149e4:	dd801c15 	stw	r22,112(sp)
   149e8:	b2800210 	cmplti	r10,r22,8
   149ec:	503e5f1e 	bne	r10,zero,1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   149f0:	003fb706 	br	148d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff48d0>
   149f4:	d9000417 	ldw	r4,16(sp)
   149f8:	d9801b04 	addi	r6,sp,108
   149fc:	b80b883a 	mov	r5,r23
   14a00:	001d0580 	call	1d058 <__sprint_r>
   14a04:	103e921e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14a08:	da002804 	addi	r8,sp,160
   14a0c:	003c6e06 	br	13bc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3bc8>
   14a10:	d9000417 	ldw	r4,16(sp)
   14a14:	d9801b04 	addi	r6,sp,108
   14a18:	b80b883a 	mov	r5,r23
   14a1c:	dac00d15 	stw	r11,52(sp)
   14a20:	db000615 	stw	r12,24(sp)
   14a24:	001d0580 	call	1d058 <__sprint_r>
   14a28:	103e891e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14a2c:	d8c01d17 	ldw	r3,116(sp)
   14a30:	da002804 	addi	r8,sp,160
   14a34:	dac00d17 	ldw	r11,52(sp)
   14a38:	db000617 	ldw	r12,24(sp)
   14a3c:	003df906 	br	14224 <__alt_mem_mcu_subsystem_ram_0+0x77ff4224>
   14a40:	d9000417 	ldw	r4,16(sp)
   14a44:	d9801b04 	addi	r6,sp,108
   14a48:	b80b883a 	mov	r5,r23
   14a4c:	dac00615 	stw	r11,24(sp)
   14a50:	001d0580 	call	1d058 <__sprint_r>
   14a54:	103e7e1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14a58:	d8c01d17 	ldw	r3,116(sp)
   14a5c:	da002804 	addi	r8,sp,160
   14a60:	dac00617 	ldw	r11,24(sp)
   14a64:	003dfc06 	br	14258 <__alt_mem_mcu_subsystem_ram_0+0x77ff4258>
   14a68:	d9000e17 	ldw	r4,56(sp)
   14a6c:	dcc02804 	addi	r19,sp,160
   14a70:	808003cc 	andi	r2,r16,15
   14a74:	a806973a 	slli	r3,r21,28
   14a78:	2085883a 	add	r2,r4,r2
   14a7c:	8020d13a 	srli	r16,r16,4
   14a80:	10800003 	ldbu	r2,0(r2)
   14a84:	a82ad13a 	srli	r21,r21,4
   14a88:	9cffffc4 	addi	r19,r19,-1
   14a8c:	1c20b03a 	or	r16,r3,r16
   14a90:	98800005 	stb	r2,0(r19)
   14a94:	8544b03a 	or	r2,r16,r21
   14a98:	103ff51e 	bne	r2,zero,14a70 <__alt_mem_mcu_subsystem_ram_0+0x77ff4a70>
   14a9c:	003d0706 	br	13ebc <__alt_mem_mcu_subsystem_ram_0+0x77ff3ebc>
   14aa0:	d9000417 	ldw	r4,16(sp)
   14aa4:	d9801b04 	addi	r6,sp,108
   14aa8:	b80b883a 	mov	r5,r23
   14aac:	001d0580 	call	1d058 <__sprint_r>
   14ab0:	103e671e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14ab4:	d8c01d17 	ldw	r3,116(sp)
   14ab8:	da002804 	addi	r8,sp,160
   14abc:	003e1f06 	br	1433c <__alt_mem_mcu_subsystem_ram_0+0x77ff433c>
   14ac0:	d9001517 	ldw	r4,84(sp)
   14ac4:	0100ea0e 	bge	zero,r4,14e70 <___vfprintf_internal_r+0x13dc>
   14ac8:	d8800817 	ldw	r2,32(sp)
   14acc:	d9000917 	ldw	r4,36(sp)
   14ad0:	1021883a 	mov	r16,r2
   14ad4:	2080010e 	bge	r4,r2,14adc <___vfprintf_internal_r+0x1048>
   14ad8:	2021883a 	mov	r16,r4
   14adc:	04000a0e 	bge	zero,r16,14b08 <___vfprintf_internal_r+0x1074>
   14ae0:	d8801c17 	ldw	r2,112(sp)
   14ae4:	1c07883a 	add	r3,r3,r16
   14ae8:	44c00015 	stw	r19,0(r8)
   14aec:	10800044 	addi	r2,r2,1
   14af0:	d8801c15 	stw	r2,112(sp)
   14af4:	44000115 	stw	r16,4(r8)
   14af8:	d8c01d15 	stw	r3,116(sp)
   14afc:	10800208 	cmpgei	r2,r2,8
   14b00:	1002a61e 	bne	r2,zero,1559c <___vfprintf_internal_r+0x1b08>
   14b04:	42000204 	addi	r8,r8,8
   14b08:	8000010e 	bge	r16,zero,14b10 <___vfprintf_internal_r+0x107c>
   14b0c:	0021883a 	mov	r16,zero
   14b10:	d8800817 	ldw	r2,32(sp)
   14b14:	1421c83a 	sub	r16,r2,r16
   14b18:	0401910e 	bge	zero,r16,15160 <___vfprintf_internal_r+0x16cc>
   14b1c:	02c000b4 	movhi	r11,2
   14b20:	81000450 	cmplti	r4,r16,17
   14b24:	5adb20c4 	addi	r11,r11,27779
   14b28:	d8801c17 	ldw	r2,112(sp)
   14b2c:	20017d1e 	bne	r4,zero,15124 <___vfprintf_internal_r+0x1690>
   14b30:	dc800615 	stw	r18,24(sp)
   14b34:	04400404 	movi	r17,16
   14b38:	dd800417 	ldw	r22,16(sp)
   14b3c:	5825883a 	mov	r18,r11
   14b40:	00000406 	br	14b54 <___vfprintf_internal_r+0x10c0>
   14b44:	42000204 	addi	r8,r8,8
   14b48:	843ffc04 	addi	r16,r16,-16
   14b4c:	81000448 	cmpgei	r4,r16,17
   14b50:	20017226 	beq	r4,zero,1511c <___vfprintf_internal_r+0x1688>
   14b54:	10800044 	addi	r2,r2,1
   14b58:	18c00404 	addi	r3,r3,16
   14b5c:	44800015 	stw	r18,0(r8)
   14b60:	44400115 	stw	r17,4(r8)
   14b64:	d8c01d15 	stw	r3,116(sp)
   14b68:	d8801c15 	stw	r2,112(sp)
   14b6c:	11000208 	cmpgei	r4,r2,8
   14b70:	203ff426 	beq	r4,zero,14b44 <__alt_mem_mcu_subsystem_ram_0+0x77ff4b44>
   14b74:	d9801b04 	addi	r6,sp,108
   14b78:	b80b883a 	mov	r5,r23
   14b7c:	b009883a 	mov	r4,r22
   14b80:	001d0580 	call	1d058 <__sprint_r>
   14b84:	103e321e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14b88:	d8c01d17 	ldw	r3,116(sp)
   14b8c:	d8801c17 	ldw	r2,112(sp)
   14b90:	da002804 	addi	r8,sp,160
   14b94:	003fec06 	br	14b48 <__alt_mem_mcu_subsystem_ram_0+0x77ff4b48>
   14b98:	0021883a 	mov	r16,zero
   14b9c:	dcc02804 	addi	r19,sp,160
   14ba0:	003cc806 	br	13ec4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ec4>
   14ba4:	033f890e 	bge	zero,r12,149cc <__alt_mem_mcu_subsystem_ram_0+0x77ff49cc>
   14ba8:	60800450 	cmplti	r2,r12,17
   14bac:	02c000b4 	movhi	r11,2
   14bb0:	10036c1e 	bne	r2,zero,15964 <___vfprintf_internal_r+0x1ed0>
   14bb4:	5adb20c4 	addi	r11,r11,27779
   14bb8:	dc800615 	stw	r18,24(sp)
   14bbc:	dd000815 	stw	r20,32(sp)
   14bc0:	04c00404 	movi	r19,16
   14bc4:	6025883a 	mov	r18,r12
   14bc8:	dd800417 	ldw	r22,16(sp)
   14bcc:	6821883a 	mov	r16,r13
   14bd0:	5829883a 	mov	r20,r11
   14bd4:	00000506 	br	14bec <___vfprintf_internal_r+0x1158>
   14bd8:	8c400204 	addi	r17,r17,8
   14bdc:	94bffc04 	addi	r18,r18,-16
   14be0:	90800448 	cmpgei	r2,r18,17
   14be4:	1001c726 	beq	r2,zero,15304 <___vfprintf_internal_r+0x1870>
   14be8:	84000044 	addi	r16,r16,1
   14bec:	18c00404 	addi	r3,r3,16
   14bf0:	8d000015 	stw	r20,0(r17)
   14bf4:	8cc00115 	stw	r19,4(r17)
   14bf8:	d8c01d15 	stw	r3,116(sp)
   14bfc:	dc001c15 	stw	r16,112(sp)
   14c00:	80800208 	cmpgei	r2,r16,8
   14c04:	103ff426 	beq	r2,zero,14bd8 <__alt_mem_mcu_subsystem_ram_0+0x77ff4bd8>
   14c08:	d9801b04 	addi	r6,sp,108
   14c0c:	b80b883a 	mov	r5,r23
   14c10:	b009883a 	mov	r4,r22
   14c14:	001d0580 	call	1d058 <__sprint_r>
   14c18:	103e0d1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14c1c:	dc001c17 	ldw	r16,112(sp)
   14c20:	d8c01d17 	ldw	r3,116(sp)
   14c24:	dc402804 	addi	r17,sp,160
   14c28:	003fec06 	br	14bdc <__alt_mem_mcu_subsystem_ram_0+0x77ff4bdc>
   14c2c:	d8c00717 	ldw	r3,28(sp)
   14c30:	5880040c 	andi	r2,r11,16
   14c34:	1c000017 	ldw	r16,0(r3)
   14c38:	18c00104 	addi	r3,r3,4
   14c3c:	d8c00715 	stw	r3,28(sp)
   14c40:	1000031e 	bne	r2,zero,14c50 <___vfprintf_internal_r+0x11bc>
   14c44:	5880100c 	andi	r2,r11,64
   14c48:	10000126 	beq	r2,zero,14c50 <___vfprintf_internal_r+0x11bc>
   14c4c:	843fffcc 	andi	r16,r16,65535
   14c50:	002b883a 	mov	r21,zero
   14c54:	0005883a 	mov	r2,zero
   14c58:	003c6706 	br	13df8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df8>
   14c5c:	d8c00717 	ldw	r3,28(sp)
   14c60:	5880040c 	andi	r2,r11,16
   14c64:	1c000017 	ldw	r16,0(r3)
   14c68:	18c00104 	addi	r3,r3,4
   14c6c:	d8c00715 	stw	r3,28(sp)
   14c70:	1000031e 	bne	r2,zero,14c80 <___vfprintf_internal_r+0x11ec>
   14c74:	5880100c 	andi	r2,r11,64
   14c78:	10000126 	beq	r2,zero,14c80 <___vfprintf_internal_r+0x11ec>
   14c7c:	843fffcc 	andi	r16,r16,65535
   14c80:	002b883a 	mov	r21,zero
   14c84:	00800044 	movi	r2,1
   14c88:	003c5b06 	br	13df8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df8>
   14c8c:	10803fcc 	andi	r2,r2,255
   14c90:	1080201c 	xori	r2,r2,128
   14c94:	10bfe004 	addi	r2,r2,-128
   14c98:	10800c18 	cmpnei	r2,r2,48
   14c9c:	103c8726 	beq	r2,zero,13ebc <__alt_mem_mcu_subsystem_ram_0+0x77ff3ebc>
   14ca0:	00800c04 	movi	r2,48
   14ca4:	18ffff84 	addi	r3,r3,-2
   14ca8:	98bfffc5 	stb	r2,-1(r19)
   14cac:	d8802804 	addi	r2,sp,160
   14cb0:	10e1c83a 	sub	r16,r2,r3
   14cb4:	1827883a 	mov	r19,r3
   14cb8:	003c8206 	br	13ec4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ec4>
   14cbc:	d9000417 	ldw	r4,16(sp)
   14cc0:	d9801b04 	addi	r6,sp,108
   14cc4:	b80b883a 	mov	r5,r23
   14cc8:	001d0580 	call	1d058 <__sprint_r>
   14ccc:	103de01e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14cd0:	d8c01d17 	ldw	r3,116(sp)
   14cd4:	003dd206 	br	14420 <__alt_mem_mcu_subsystem_ram_0+0x77ff4420>
   14cd8:	dcc02804 	addi	r19,sp,160
   14cdc:	003c7906 	br	13ec4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ec4>
   14ce0:	002b883a 	mov	r21,zero
   14ce4:	003c9f06 	br	13f64 <__alt_mem_mcu_subsystem_ram_0+0x77ff3f64>
   14ce8:	802bd7fa 	srai	r21,r16,31
   14cec:	003cef06 	br	140ac <__alt_mem_mcu_subsystem_ram_0+0x77ff40ac>
   14cf0:	00800c04 	movi	r2,48
   14cf4:	d8801485 	stb	r2,82(sp)
   14cf8:	dc4014c5 	stb	r17,83(sp)
   14cfc:	5ac00094 	ori	r11,r11,2
   14d00:	00800084 	movi	r2,2
   14d04:	003c3c06 	br	13df8 <__alt_mem_mcu_subsystem_ram_0+0x77ff3df8>
   14d08:	d9000517 	ldw	r4,20(sp)
   14d0c:	2005d7fa 	srai	r2,r4,31
   14d10:	19000015 	stw	r4,0(r3)
   14d14:	18800115 	stw	r2,4(r3)
   14d18:	003b9306 	br	13b68 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b68>
   14d1c:	d9000a17 	ldw	r4,40(sp)
   14d20:	d9400b17 	ldw	r5,44(sp)
   14d24:	da000815 	stw	r8,32(sp)
   14d28:	200d883a 	mov	r6,r4
   14d2c:	280f883a 	mov	r7,r5
   14d30:	dac00615 	stw	r11,24(sp)
   14d34:	001f9440 	call	1f944 <__unorddf2>
   14d38:	dac00617 	ldw	r11,24(sp)
   14d3c:	da000817 	ldw	r8,32(sp)
   14d40:	1002e91e 	bne	r2,zero,158e8 <___vfprintf_internal_r+0x1e54>
   14d44:	00fff7c4 	movi	r3,-33
   14d48:	b0bfffe0 	cmpeqi	r2,r22,-1
   14d4c:	88ea703a 	and	r21,r17,r3
   14d50:	1002531e 	bne	r2,zero,156a0 <___vfprintf_internal_r+0x1c0c>
   14d54:	a88011d8 	cmpnei	r2,r21,71
   14d58:	1001ba26 	beq	r2,zero,15444 <___vfprintf_internal_r+0x19b0>
   14d5c:	d8800b17 	ldw	r2,44(sp)
   14d60:	5d004014 	ori	r20,r11,256
   14d64:	10022b16 	blt	r2,zero,15614 <___vfprintf_internal_r+0x1b80>
   14d68:	d8c00b17 	ldw	r3,44(sp)
   14d6c:	d8000605 	stb	zero,24(sp)
   14d70:	888019a0 	cmpeqi	r2,r17,102
   14d74:	d8800d15 	stw	r2,52(sp)
   14d78:	1002331e 	bne	r2,zero,15648 <___vfprintf_internal_r+0x1bb4>
   14d7c:	8b4011a0 	cmpeqi	r13,r17,70
   14d80:	68018d1e 	bne	r13,zero,153b8 <___vfprintf_internal_r+0x1924>
   14d84:	a8801158 	cmpnei	r2,r21,69
   14d88:	1001b126 	beq	r2,zero,15450 <___vfprintf_internal_r+0x19bc>
   14d8c:	d8801904 	addi	r2,sp,100
   14d90:	d8800315 	stw	r2,12(sp)
   14d94:	d9400a17 	ldw	r5,40(sp)
   14d98:	d8801604 	addi	r2,sp,88
   14d9c:	d9000417 	ldw	r4,16(sp)
   14da0:	d8800215 	stw	r2,8(sp)
   14da4:	d8801504 	addi	r2,sp,84
   14da8:	180d883a 	mov	r6,r3
   14dac:	d8800115 	stw	r2,4(sp)
   14db0:	dd800015 	stw	r22,0(sp)
   14db4:	01c00084 	movi	r7,2
   14db8:	da001215 	stw	r8,72(sp)
   14dbc:	db401115 	stw	r13,68(sp)
   14dc0:	dac00915 	stw	r11,36(sp)
   14dc4:	d8c00815 	stw	r3,32(sp)
   14dc8:	0015f340 	call	15f34 <_dtoa_r>
   14dcc:	1027883a 	mov	r19,r2
   14dd0:	888019d8 	cmpnei	r2,r17,103
   14dd4:	d8c00817 	ldw	r3,32(sp)
   14dd8:	dac00917 	ldw	r11,36(sp)
   14ddc:	db401117 	ldw	r13,68(sp)
   14de0:	da001217 	ldw	r8,72(sp)
   14de4:	10030e1e 	bne	r2,zero,15a20 <___vfprintf_internal_r+0x1f8c>
   14de8:	5880004c 	andi	r2,r11,1
   14dec:	10025026 	beq	r2,zero,15730 <___vfprintf_internal_r+0x1c9c>
   14df0:	9da1883a 	add	r16,r19,r22
   14df4:	d9000a17 	ldw	r4,40(sp)
   14df8:	000d883a 	mov	r6,zero
   14dfc:	000f883a 	mov	r7,zero
   14e00:	180b883a 	mov	r5,r3
   14e04:	da000915 	stw	r8,36(sp)
   14e08:	dac00815 	stw	r11,32(sp)
   14e0c:	001f7e40 	call	1f7e4 <__eqdf2>
   14e10:	dac00817 	ldw	r11,32(sp)
   14e14:	da000917 	ldw	r8,36(sp)
   14e18:	1001f51e 	bne	r2,zero,155f0 <___vfprintf_internal_r+0x1b5c>
   14e1c:	8005883a 	mov	r2,r16
   14e20:	14c5c83a 	sub	r2,r2,r19
   14e24:	d8800915 	stw	r2,36(sp)
   14e28:	d8801517 	ldw	r2,84(sp)
   14e2c:	a8c011d8 	cmpnei	r3,r21,71
   14e30:	d8800815 	stw	r2,32(sp)
   14e34:	1801a726 	beq	r3,zero,154d4 <___vfprintf_internal_r+0x1a40>
   14e38:	d8800d17 	ldw	r2,52(sp)
   14e3c:	1001aa26 	beq	r2,zero,154e8 <___vfprintf_internal_r+0x1a54>
   14e40:	d8800817 	ldw	r2,32(sp)
   14e44:	0082c10e 	bge	zero,r2,1594c <___vfprintf_internal_r+0x1eb8>
   14e48:	b002b61e 	bne	r22,zero,15924 <___vfprintf_internal_r+0x1e90>
   14e4c:	5ac0004c 	andi	r11,r11,1
   14e50:	5802b41e 	bne	r11,zero,15924 <___vfprintf_internal_r+0x1e90>
   14e54:	dc000817 	ldw	r16,32(sp)
   14e58:	802b883a 	mov	r21,r16
   14e5c:	d8800607 	ldb	r2,24(sp)
   14e60:	1001bd1e 	bne	r2,zero,15558 <___vfprintf_internal_r+0x1ac4>
   14e64:	db001443 	ldbu	r12,81(sp)
   14e68:	002d883a 	mov	r22,zero
   14e6c:	003c1906 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   14e70:	d8801c17 	ldw	r2,112(sp)
   14e74:	014000b4 	movhi	r5,2
   14e78:	295b0304 	addi	r5,r5,27660
   14e7c:	10800044 	addi	r2,r2,1
   14e80:	18c00044 	addi	r3,r3,1
   14e84:	41400015 	stw	r5,0(r8)
   14e88:	01400044 	movi	r5,1
   14e8c:	d8801c15 	stw	r2,112(sp)
   14e90:	41400115 	stw	r5,4(r8)
   14e94:	d8c01d15 	stw	r3,116(sp)
   14e98:	10800208 	cmpgei	r2,r2,8
   14e9c:	1001e11e 	bne	r2,zero,15624 <___vfprintf_internal_r+0x1b90>
   14ea0:	42000204 	addi	r8,r8,8
   14ea4:	2000021e 	bne	r4,zero,14eb0 <___vfprintf_internal_r+0x141c>
   14ea8:	d8800917 	ldw	r2,36(sp)
   14eac:	10013f26 	beq	r2,zero,153ac <___vfprintf_internal_r+0x1918>
   14eb0:	d8800f17 	ldw	r2,60(sp)
   14eb4:	d9400c17 	ldw	r5,48(sp)
   14eb8:	40800015 	stw	r2,0(r8)
   14ebc:	d8801c17 	ldw	r2,112(sp)
   14ec0:	28c7883a 	add	r3,r5,r3
   14ec4:	41400115 	stw	r5,4(r8)
   14ec8:	10800044 	addi	r2,r2,1
   14ecc:	d8c01d15 	stw	r3,116(sp)
   14ed0:	d8801c15 	stw	r2,112(sp)
   14ed4:	11400208 	cmpgei	r5,r2,8
   14ed8:	283e6a1e 	bne	r5,zero,14884 <__alt_mem_mcu_subsystem_ram_0+0x77ff4884>
   14edc:	42000204 	addi	r8,r8,8
   14ee0:	003e7106 	br	148a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff48a8>
   14ee4:	d9000417 	ldw	r4,16(sp)
   14ee8:	d9801b04 	addi	r6,sp,108
   14eec:	b80b883a 	mov	r5,r23
   14ef0:	001d0580 	call	1d058 <__sprint_r>
   14ef4:	103d561e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14ef8:	da002804 	addi	r8,sp,160
   14efc:	003e2006 	br	14780 <__alt_mem_mcu_subsystem_ram_0+0x77ff4780>
   14f00:	04a5c83a 	sub	r18,zero,r18
   14f04:	d8800715 	stw	r2,28(sp)
   14f08:	003da106 	br	14590 <__alt_mem_mcu_subsystem_ram_0+0x77ff4590>
   14f0c:	d9000417 	ldw	r4,16(sp)
   14f10:	d9801b04 	addi	r6,sp,108
   14f14:	b80b883a 	mov	r5,r23
   14f18:	001d0580 	call	1d058 <__sprint_r>
   14f1c:	103d4c1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   14f20:	da801c17 	ldw	r10,112(sp)
   14f24:	d8c01d17 	ldw	r3,116(sp)
   14f28:	da002a04 	addi	r8,sp,168
   14f2c:	55800044 	addi	r22,r10,1
   14f30:	dc402804 	addi	r17,sp,160
   14f34:	003ea506 	br	149cc <__alt_mem_mcu_subsystem_ram_0+0x77ff49cc>
   14f38:	e4400043 	ldbu	r17,1(fp)
   14f3c:	5ac00814 	ori	r11,r11,32
   14f40:	e7000044 	addi	fp,fp,1
   14f44:	8c403fcc 	andi	r17,r17,255
   14f48:	8c40201c 	xori	r17,r17,128
   14f4c:	8c7fe004 	addi	r17,r17,-128
   14f50:	003b2a06 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   14f54:	b08001f0 	cmpltui	r2,r22,7
   14f58:	b02b883a 	mov	r21,r22
   14f5c:	10011126 	beq	r2,zero,153a4 <___vfprintf_internal_r+0x1910>
   14f60:	04c000b4 	movhi	r19,2
   14f64:	dd000715 	stw	r20,28(sp)
   14f68:	a821883a 	mov	r16,r21
   14f6c:	5829883a 	mov	r20,r11
   14f70:	002d883a 	mov	r22,zero
   14f74:	d8000815 	stw	zero,32(sp)
   14f78:	9cdb0104 	addi	r19,r19,27652
   14f7c:	0005883a 	mov	r2,zero
   14f80:	003c5d06 	br	140f8 <__alt_mem_mcu_subsystem_ram_0+0x77ff40f8>
   14f84:	dc400615 	stw	r17,24(sp)
   14f88:	dcc02804 	addi	r19,sp,160
   14f8c:	a823883a 	mov	r17,r21
   14f90:	da000815 	stw	r8,32(sp)
   14f94:	602b883a 	mov	r21,r12
   14f98:	8009883a 	mov	r4,r16
   14f9c:	880b883a 	mov	r5,r17
   14fa0:	01800284 	movi	r6,10
   14fa4:	000f883a 	mov	r7,zero
   14fa8:	000d0840 	call	d084 <__umoddi3>
   14fac:	10800c04 	addi	r2,r2,48
   14fb0:	9cffffc4 	addi	r19,r19,-1
   14fb4:	8009883a 	mov	r4,r16
   14fb8:	880b883a 	mov	r5,r17
   14fbc:	98800005 	stb	r2,0(r19)
   14fc0:	01800284 	movi	r6,10
   14fc4:	000f883a 	mov	r7,zero
   14fc8:	000caec0 	call	caec <__udivdi3>
   14fcc:	1021883a 	mov	r16,r2
   14fd0:	10c4b03a 	or	r2,r2,r3
   14fd4:	1823883a 	mov	r17,r3
   14fd8:	103fef1e 	bne	r2,zero,14f98 <__alt_mem_mcu_subsystem_ram_0+0x77ff4f98>
   14fdc:	d8802804 	addi	r2,sp,160
   14fe0:	dc400617 	ldw	r17,24(sp)
   14fe4:	da000817 	ldw	r8,32(sp)
   14fe8:	a819883a 	mov	r12,r21
   14fec:	14e1c83a 	sub	r16,r2,r19
   14ff0:	003bb406 	br	13ec4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ec4>
   14ff4:	d8800517 	ldw	r2,20(sp)
   14ff8:	18800015 	stw	r2,0(r3)
   14ffc:	003ada06 	br	13b68 <__alt_mem_mcu_subsystem_ram_0+0x77ff3b68>
   15000:	d8800f17 	ldw	r2,60(sp)
   15004:	d8c01d17 	ldw	r3,116(sp)
   15008:	d9000c17 	ldw	r4,48(sp)
   1500c:	40800015 	stw	r2,0(r8)
   15010:	d8801c17 	ldw	r2,112(sp)
   15014:	20c7883a 	add	r3,r4,r3
   15018:	41000115 	stw	r4,4(r8)
   1501c:	10800044 	addi	r2,r2,1
   15020:	d8801c15 	stw	r2,112(sp)
   15024:	d8c01d15 	stw	r3,116(sp)
   15028:	10800208 	cmpgei	r2,r2,8
   1502c:	1000c61e 	bne	r2,zero,15348 <___vfprintf_internal_r+0x18b4>
   15030:	42000204 	addi	r8,r8,8
   15034:	d8800917 	ldw	r2,36(sp)
   15038:	143fffc4 	addi	r16,r2,-1
   1503c:	043ccb0e 	bge	zero,r16,1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   15040:	02c000b4 	movhi	r11,2
   15044:	81000450 	cmplti	r4,r16,17
   15048:	5adb20c4 	addi	r11,r11,27779
   1504c:	d8801c17 	ldw	r2,112(sp)
   15050:	2000a01e 	bne	r4,zero,152d4 <___vfprintf_internal_r+0x1840>
   15054:	04400404 	movi	r17,16
   15058:	dcc00417 	ldw	r19,16(sp)
   1505c:	582d883a 	mov	r22,r11
   15060:	00000406 	br	15074 <___vfprintf_internal_r+0x15e0>
   15064:	42000204 	addi	r8,r8,8
   15068:	843ffc04 	addi	r16,r16,-16
   1506c:	81000448 	cmpgei	r4,r16,17
   15070:	20009726 	beq	r4,zero,152d0 <___vfprintf_internal_r+0x183c>
   15074:	10800044 	addi	r2,r2,1
   15078:	18c00404 	addi	r3,r3,16
   1507c:	45800015 	stw	r22,0(r8)
   15080:	44400115 	stw	r17,4(r8)
   15084:	d8c01d15 	stw	r3,116(sp)
   15088:	d8801c15 	stw	r2,112(sp)
   1508c:	11000208 	cmpgei	r4,r2,8
   15090:	203ff426 	beq	r4,zero,15064 <__alt_mem_mcu_subsystem_ram_0+0x77ff5064>
   15094:	d9801b04 	addi	r6,sp,108
   15098:	b80b883a 	mov	r5,r23
   1509c:	9809883a 	mov	r4,r19
   150a0:	001d0580 	call	1d058 <__sprint_r>
   150a4:	103cea1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   150a8:	d8c01d17 	ldw	r3,116(sp)
   150ac:	d8801c17 	ldw	r2,112(sp)
   150b0:	da002804 	addi	r8,sp,160
   150b4:	003fec06 	br	15068 <__alt_mem_mcu_subsystem_ram_0+0x77ff5068>
   150b8:	a080004c 	andi	r2,r20,1
   150bc:	103e131e 	bne	r2,zero,1490c <__alt_mem_mcu_subsystem_ram_0+0x77ff490c>
   150c0:	00800044 	movi	r2,1
   150c4:	dc001c15 	stw	r16,112(sp)
   150c8:	44c00015 	stw	r19,0(r8)
   150cc:	40800115 	stw	r2,4(r8)
   150d0:	d8c01d15 	stw	r3,116(sp)
   150d4:	84000208 	cmpgei	r16,r16,8
   150d8:	803f8c1e 	bne	r16,zero,14f0c <__alt_mem_mcu_subsystem_ram_0+0x77ff4f0c>
   150dc:	55800084 	addi	r22,r10,2
   150e0:	42000404 	addi	r8,r8,16
   150e4:	003e3906 	br	149cc <__alt_mem_mcu_subsystem_ram_0+0x77ff49cc>
   150e8:	d9000417 	ldw	r4,16(sp)
   150ec:	d9801b04 	addi	r6,sp,108
   150f0:	b80b883a 	mov	r5,r23
   150f4:	dac00d15 	stw	r11,52(sp)
   150f8:	db000615 	stw	r12,24(sp)
   150fc:	001d0580 	call	1d058 <__sprint_r>
   15100:	103cd31e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15104:	d8c01d17 	ldw	r3,116(sp)
   15108:	d8801447 	ldb	r2,81(sp)
   1510c:	da002804 	addi	r8,sp,160
   15110:	dac00d17 	ldw	r11,52(sp)
   15114:	db000617 	ldw	r12,24(sp)
   15118:	003c3506 	br	141f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff41f0>
   1511c:	9017883a 	mov	r11,r18
   15120:	dc800617 	ldw	r18,24(sp)
   15124:	10800044 	addi	r2,r2,1
   15128:	1c07883a 	add	r3,r3,r16
   1512c:	d8801c15 	stw	r2,112(sp)
   15130:	42c00015 	stw	r11,0(r8)
   15134:	44000115 	stw	r16,4(r8)
   15138:	d8c01d15 	stw	r3,116(sp)
   1513c:	10800208 	cmpgei	r2,r2,8
   15140:	10009626 	beq	r2,zero,1539c <___vfprintf_internal_r+0x1908>
   15144:	d9000417 	ldw	r4,16(sp)
   15148:	d9801b04 	addi	r6,sp,108
   1514c:	b80b883a 	mov	r5,r23
   15150:	001d0580 	call	1d058 <__sprint_r>
   15154:	103cbe1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15158:	d8c01d17 	ldw	r3,116(sp)
   1515c:	da002804 	addi	r8,sp,160
   15160:	d8801517 	ldw	r2,84(sp)
   15164:	d9000917 	ldw	r4,36(sp)
   15168:	11000216 	blt	r2,r4,15174 <___vfprintf_internal_r+0x16e0>
   1516c:	a100004c 	andi	r4,r20,1
   15170:	20000c26 	beq	r4,zero,151a4 <___vfprintf_internal_r+0x1710>
   15174:	d9000f17 	ldw	r4,60(sp)
   15178:	d9400c17 	ldw	r5,48(sp)
   1517c:	41000015 	stw	r4,0(r8)
   15180:	d9001c17 	ldw	r4,112(sp)
   15184:	1947883a 	add	r3,r3,r5
   15188:	41400115 	stw	r5,4(r8)
   1518c:	21000044 	addi	r4,r4,1
   15190:	d9001c15 	stw	r4,112(sp)
   15194:	d8c01d15 	stw	r3,116(sp)
   15198:	21000208 	cmpgei	r4,r4,8
   1519c:	20010b1e 	bne	r4,zero,155cc <___vfprintf_internal_r+0x1b38>
   151a0:	42000204 	addi	r8,r8,8
   151a4:	d9000917 	ldw	r4,36(sp)
   151a8:	d9400817 	ldw	r5,32(sp)
   151ac:	2085c83a 	sub	r2,r4,r2
   151b0:	2149c83a 	sub	r4,r4,r5
   151b4:	1021883a 	mov	r16,r2
   151b8:	2080010e 	bge	r4,r2,151c0 <___vfprintf_internal_r+0x172c>
   151bc:	2021883a 	mov	r16,r4
   151c0:	04000c0e 	bge	zero,r16,151f4 <___vfprintf_internal_r+0x1760>
   151c4:	d9000817 	ldw	r4,32(sp)
   151c8:	1c07883a 	add	r3,r3,r16
   151cc:	44000115 	stw	r16,4(r8)
   151d0:	9927883a 	add	r19,r19,r4
   151d4:	d9001c17 	ldw	r4,112(sp)
   151d8:	44c00015 	stw	r19,0(r8)
   151dc:	d8c01d15 	stw	r3,116(sp)
   151e0:	21000044 	addi	r4,r4,1
   151e4:	d9001c15 	stw	r4,112(sp)
   151e8:	21000208 	cmpgei	r4,r4,8
   151ec:	20012e1e 	bne	r4,zero,156a8 <___vfprintf_internal_r+0x1c14>
   151f0:	42000204 	addi	r8,r8,8
   151f4:	8000010e 	bge	r16,zero,151fc <___vfprintf_internal_r+0x1768>
   151f8:	0021883a 	mov	r16,zero
   151fc:	1421c83a 	sub	r16,r2,r16
   15200:	043c5a0e 	bge	zero,r16,1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   15204:	02c000b4 	movhi	r11,2
   15208:	81000450 	cmplti	r4,r16,17
   1520c:	5adb20c4 	addi	r11,r11,27779
   15210:	d8801c17 	ldw	r2,112(sp)
   15214:	20002f1e 	bne	r4,zero,152d4 <___vfprintf_internal_r+0x1840>
   15218:	04400404 	movi	r17,16
   1521c:	dcc00417 	ldw	r19,16(sp)
   15220:	582d883a 	mov	r22,r11
   15224:	00000406 	br	15238 <___vfprintf_internal_r+0x17a4>
   15228:	42000204 	addi	r8,r8,8
   1522c:	843ffc04 	addi	r16,r16,-16
   15230:	81000448 	cmpgei	r4,r16,17
   15234:	20002626 	beq	r4,zero,152d0 <___vfprintf_internal_r+0x183c>
   15238:	10800044 	addi	r2,r2,1
   1523c:	18c00404 	addi	r3,r3,16
   15240:	45800015 	stw	r22,0(r8)
   15244:	44400115 	stw	r17,4(r8)
   15248:	d8c01d15 	stw	r3,116(sp)
   1524c:	d8801c15 	stw	r2,112(sp)
   15250:	11000208 	cmpgei	r4,r2,8
   15254:	203ff426 	beq	r4,zero,15228 <__alt_mem_mcu_subsystem_ram_0+0x77ff5228>
   15258:	d9801b04 	addi	r6,sp,108
   1525c:	b80b883a 	mov	r5,r23
   15260:	9809883a 	mov	r4,r19
   15264:	001d0580 	call	1d058 <__sprint_r>
   15268:	103c791e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   1526c:	d8c01d17 	ldw	r3,116(sp)
   15270:	d8801c17 	ldw	r2,112(sp)
   15274:	da002804 	addi	r8,sp,160
   15278:	003fec06 	br	1522c <__alt_mem_mcu_subsystem_ram_0+0x77ff522c>
   1527c:	d9000417 	ldw	r4,16(sp)
   15280:	d9801b04 	addi	r6,sp,108
   15284:	b80b883a 	mov	r5,r23
   15288:	001d0580 	call	1d058 <__sprint_r>
   1528c:	103c701e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15290:	d8c01d17 	ldw	r3,116(sp)
   15294:	dc001c17 	ldw	r16,112(sp)
   15298:	dc402804 	addi	r17,sp,160
   1529c:	003da206 	br	14928 <__alt_mem_mcu_subsystem_ram_0+0x77ff4928>
   152a0:	d9000417 	ldw	r4,16(sp)
   152a4:	d9801b04 	addi	r6,sp,108
   152a8:	b80b883a 	mov	r5,r23
   152ac:	001d0580 	call	1d058 <__sprint_r>
   152b0:	103c671e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   152b4:	d8c01d17 	ldw	r3,116(sp)
   152b8:	dc001c17 	ldw	r16,112(sp)
   152bc:	dc402804 	addi	r17,sp,160
   152c0:	003da406 	br	14954 <__alt_mem_mcu_subsystem_ram_0+0x77ff4954>
   152c4:	10c00060 	cmpeqi	r3,r2,1
   152c8:	183aeb26 	beq	r3,zero,13e78 <__alt_mem_mcu_subsystem_ram_0+0x77ff3e78>
   152cc:	003d0b06 	br	146fc <__alt_mem_mcu_subsystem_ram_0+0x77ff46fc>
   152d0:	b017883a 	mov	r11,r22
   152d4:	10800044 	addi	r2,r2,1
   152d8:	1c07883a 	add	r3,r3,r16
   152dc:	42c00015 	stw	r11,0(r8)
   152e0:	003c1c06 	br	14354 <__alt_mem_mcu_subsystem_ram_0+0x77ff4354>
   152e4:	d9000417 	ldw	r4,16(sp)
   152e8:	d9801b04 	addi	r6,sp,108
   152ec:	b80b883a 	mov	r5,r23
   152f0:	001d0580 	call	1d058 <__sprint_r>
   152f4:	103c561e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   152f8:	d8c01d17 	ldw	r3,116(sp)
   152fc:	da002804 	addi	r8,sp,160
   15300:	003bd706 	br	14260 <__alt_mem_mcu_subsystem_ram_0+0x77ff4260>
   15304:	9019883a 	mov	r12,r18
   15308:	a017883a 	mov	r11,r20
   1530c:	dc800617 	ldw	r18,24(sp)
   15310:	dd000817 	ldw	r20,32(sp)
   15314:	85800044 	addi	r22,r16,1
   15318:	88800204 	addi	r2,r17,8
   1531c:	1b07883a 	add	r3,r3,r12
   15320:	8ac00015 	stw	r11,0(r17)
   15324:	8b000115 	stw	r12,4(r17)
   15328:	d8c01d15 	stw	r3,116(sp)
   1532c:	dd801c15 	stw	r22,112(sp)
   15330:	b1000208 	cmpgei	r4,r22,8
   15334:	203ef51e 	bne	r4,zero,14f0c <__alt_mem_mcu_subsystem_ram_0+0x77ff4f0c>
   15338:	b5800044 	addi	r22,r22,1
   1533c:	12000204 	addi	r8,r2,8
   15340:	1023883a 	mov	r17,r2
   15344:	003da106 	br	149cc <__alt_mem_mcu_subsystem_ram_0+0x77ff49cc>
   15348:	d9000417 	ldw	r4,16(sp)
   1534c:	d9801b04 	addi	r6,sp,108
   15350:	b80b883a 	mov	r5,r23
   15354:	001d0580 	call	1d058 <__sprint_r>
   15358:	103c3d1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   1535c:	d8c01d17 	ldw	r3,116(sp)
   15360:	da002804 	addi	r8,sp,160
   15364:	003f3306 	br	15034 <__alt_mem_mcu_subsystem_ram_0+0x77ff5034>
   15368:	04c000b4 	movhi	r19,2
   1536c:	9cdaf404 	addi	r19,r19,27600
   15370:	003cbc06 	br	14664 <__alt_mem_mcu_subsystem_ram_0+0x77ff4664>
   15374:	9809883a 	mov	r4,r19
   15378:	00112e40 	call	112e4 <strlen>
   1537c:	1021883a 	mov	r16,r2
   15380:	db001443 	ldbu	r12,81(sp)
   15384:	102b883a 	mov	r21,r2
   15388:	dac00617 	ldw	r11,24(sp)
   1538c:	da000717 	ldw	r8,28(sp)
   15390:	103b210e 	bge	r2,zero,14018 <__alt_mem_mcu_subsystem_ram_0+0x77ff4018>
   15394:	002b883a 	mov	r21,zero
   15398:	003b1f06 	br	14018 <__alt_mem_mcu_subsystem_ram_0+0x77ff4018>
   1539c:	42000204 	addi	r8,r8,8
   153a0:	003f6f06 	br	15160 <__alt_mem_mcu_subsystem_ram_0+0x77ff5160>
   153a4:	05400184 	movi	r21,6
   153a8:	003eed06 	br	14f60 <__alt_mem_mcu_subsystem_ram_0+0x77ff4f60>
   153ac:	a080004c 	andi	r2,r20,1
   153b0:	103bee26 	beq	r2,zero,1436c <__alt_mem_mcu_subsystem_ram_0+0x77ff436c>
   153b4:	003ebe06 	br	14eb0 <__alt_mem_mcu_subsystem_ram_0+0x77ff4eb0>
   153b8:	d8801904 	addi	r2,sp,100
   153bc:	d8800315 	stw	r2,12(sp)
   153c0:	d9400a17 	ldw	r5,40(sp)
   153c4:	d8801604 	addi	r2,sp,88
   153c8:	d9000417 	ldw	r4,16(sp)
   153cc:	d8800215 	stw	r2,8(sp)
   153d0:	d8801504 	addi	r2,sp,84
   153d4:	180d883a 	mov	r6,r3
   153d8:	d8800115 	stw	r2,4(sp)
   153dc:	dd800015 	stw	r22,0(sp)
   153e0:	01c000c4 	movi	r7,3
   153e4:	da001215 	stw	r8,72(sp)
   153e8:	db401115 	stw	r13,68(sp)
   153ec:	dac00915 	stw	r11,36(sp)
   153f0:	d8c00815 	stw	r3,32(sp)
   153f4:	0015f340 	call	15f34 <_dtoa_r>
   153f8:	d8c00817 	ldw	r3,32(sp)
   153fc:	dac00917 	ldw	r11,36(sp)
   15400:	db401117 	ldw	r13,68(sp)
   15404:	da001217 	ldw	r8,72(sp)
   15408:	1027883a 	mov	r19,r2
   1540c:	b019883a 	mov	r12,r22
   15410:	9b21883a 	add	r16,r19,r12
   15414:	683e7726 	beq	r13,zero,14df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4df4>
   15418:	98800007 	ldb	r2,0(r19)
   1541c:	10800c20 	cmpeqi	r2,r2,48
   15420:	1001191e 	bne	r2,zero,15888 <___vfprintf_internal_r+0x1df4>
   15424:	db001517 	ldw	r12,84(sp)
   15428:	8321883a 	add	r16,r16,r12
   1542c:	003e7106 	br	14df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4df4>
   15430:	d9000417 	ldw	r4,16(sp)
   15434:	d9801b04 	addi	r6,sp,108
   15438:	b80b883a 	mov	r5,r23
   1543c:	001d0580 	call	1d058 <__sprint_r>
   15440:	003c0306 	br	14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15444:	b03e451e 	bne	r22,zero,14d5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4d5c>
   15448:	05800044 	movi	r22,1
   1544c:	003e4306 	br	14d5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4d5c>
   15450:	d8801904 	addi	r2,sp,100
   15454:	d8800315 	stw	r2,12(sp)
   15458:	d9400a17 	ldw	r5,40(sp)
   1545c:	d8801604 	addi	r2,sp,88
   15460:	d9000417 	ldw	r4,16(sp)
   15464:	b3000044 	addi	r12,r22,1
   15468:	d8800215 	stw	r2,8(sp)
   1546c:	d8801504 	addi	r2,sp,84
   15470:	db000015 	stw	r12,0(sp)
   15474:	180d883a 	mov	r6,r3
   15478:	d8800115 	stw	r2,4(sp)
   1547c:	01c00084 	movi	r7,2
   15480:	da001315 	stw	r8,76(sp)
   15484:	db401215 	stw	r13,72(sp)
   15488:	dac01115 	stw	r11,68(sp)
   1548c:	db000915 	stw	r12,36(sp)
   15490:	d8c00815 	stw	r3,32(sp)
   15494:	0015f340 	call	15f34 <_dtoa_r>
   15498:	d8c00817 	ldw	r3,32(sp)
   1549c:	db000917 	ldw	r12,36(sp)
   154a0:	dac01117 	ldw	r11,68(sp)
   154a4:	db401217 	ldw	r13,72(sp)
   154a8:	da001317 	ldw	r8,76(sp)
   154ac:	1027883a 	mov	r19,r2
   154b0:	888011d8 	cmpnei	r2,r17,71
   154b4:	1001391e 	bne	r2,zero,1599c <___vfprintf_internal_r+0x1f08>
   154b8:	5880004c 	andi	r2,r11,1
   154bc:	103fd41e 	bne	r2,zero,15410 <__alt_mem_mcu_subsystem_ram_0+0x77ff5410>
   154c0:	d8801517 	ldw	r2,84(sp)
   154c4:	d8800815 	stw	r2,32(sp)
   154c8:	d8801917 	ldw	r2,100(sp)
   154cc:	14c5c83a 	sub	r2,r2,r19
   154d0:	d8800915 	stw	r2,36(sp)
   154d4:	d8c00817 	ldw	r3,32(sp)
   154d8:	18bfff50 	cmplti	r2,r3,-3
   154dc:	1000011e 	bne	r2,zero,154e4 <___vfprintf_internal_r+0x1a50>
   154e0:	b0c0220e 	bge	r22,r3,1556c <___vfprintf_internal_r+0x1ad8>
   154e4:	8c7fff84 	addi	r17,r17,-2
   154e8:	d8800817 	ldw	r2,32(sp)
   154ec:	dc401745 	stb	r17,93(sp)
   154f0:	143fffc4 	addi	r16,r2,-1
   154f4:	dc001515 	stw	r16,84(sp)
   154f8:	80010f16 	blt	r16,zero,15938 <___vfprintf_internal_r+0x1ea4>
   154fc:	00800ac4 	movi	r2,43
   15500:	d8801785 	stb	r2,94(sp)
   15504:	80800290 	cmplti	r2,r16,10
   15508:	1000bb26 	beq	r2,zero,157f8 <___vfprintf_internal_r+0x1d64>
   1550c:	84000c04 	addi	r16,r16,48
   15510:	00800c04 	movi	r2,48
   15514:	d88017c5 	stb	r2,95(sp)
   15518:	dc001805 	stb	r16,96(sp)
   1551c:	d8c01844 	addi	r3,sp,97
   15520:	d9000917 	ldw	r4,36(sp)
   15524:	d8801744 	addi	r2,sp,93
   15528:	1887c83a 	sub	r3,r3,r2
   1552c:	d8c01015 	stw	r3,64(sp)
   15530:	20800088 	cmpgei	r2,r4,2
   15534:	1921883a 	add	r16,r3,r4
   15538:	1000f326 	beq	r2,zero,15908 <___vfprintf_internal_r+0x1e74>
   1553c:	d8800c17 	ldw	r2,48(sp)
   15540:	80a1883a 	add	r16,r16,r2
   15544:	802b883a 	mov	r21,r16
   15548:	8000010e 	bge	r16,zero,15550 <___vfprintf_internal_r+0x1abc>
   1554c:	002b883a 	mov	r21,zero
   15550:	d8000815 	stw	zero,32(sp)
   15554:	003e4106 	br	14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   15558:	00800b44 	movi	r2,45
   1555c:	d8801445 	stb	r2,81(sp)
   15560:	002d883a 	mov	r22,zero
   15564:	00800b44 	movi	r2,45
   15568:	003a5e06 	br	13ee4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ee4>
   1556c:	d8800817 	ldw	r2,32(sp)
   15570:	d8c00917 	ldw	r3,36(sp)
   15574:	10c06216 	blt	r2,r3,15700 <___vfprintf_internal_r+0x1c6c>
   15578:	5ac0004c 	andi	r11,r11,1
   1557c:	5800d426 	beq	r11,zero,158d0 <___vfprintf_internal_r+0x1e3c>
   15580:	d8800817 	ldw	r2,32(sp)
   15584:	d8c00c17 	ldw	r3,48(sp)
   15588:	10e1883a 	add	r16,r2,r3
   1558c:	802b883a 	mov	r21,r16
   15590:	80006516 	blt	r16,zero,15728 <___vfprintf_internal_r+0x1c94>
   15594:	044019c4 	movi	r17,103
   15598:	003e3006 	br	14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   1559c:	d9000417 	ldw	r4,16(sp)
   155a0:	d9801b04 	addi	r6,sp,108
   155a4:	b80b883a 	mov	r5,r23
   155a8:	001d0580 	call	1d058 <__sprint_r>
   155ac:	103ba81e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   155b0:	d8c01d17 	ldw	r3,116(sp)
   155b4:	da002804 	addi	r8,sp,160
   155b8:	003d5306 	br	14b08 <__alt_mem_mcu_subsystem_ram_0+0x77ff4b08>
   155bc:	00800b44 	movi	r2,45
   155c0:	d8801445 	stb	r2,81(sp)
   155c4:	03000b44 	movi	r12,45
   155c8:	003c2206 	br	14654 <__alt_mem_mcu_subsystem_ram_0+0x77ff4654>
   155cc:	d9000417 	ldw	r4,16(sp)
   155d0:	d9801b04 	addi	r6,sp,108
   155d4:	b80b883a 	mov	r5,r23
   155d8:	001d0580 	call	1d058 <__sprint_r>
   155dc:	103b9c1e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   155e0:	d8801517 	ldw	r2,84(sp)
   155e4:	d8c01d17 	ldw	r3,116(sp)
   155e8:	da002804 	addi	r8,sp,160
   155ec:	003eed06 	br	151a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff51a4>
   155f0:	d8801917 	ldw	r2,100(sp)
   155f4:	01000c04 	movi	r4,48
   155f8:	143e092e 	bgeu	r2,r16,14e20 <__alt_mem_mcu_subsystem_ram_0+0x77ff4e20>
   155fc:	10c00044 	addi	r3,r2,1
   15600:	d8c01915 	stw	r3,100(sp)
   15604:	11000005 	stb	r4,0(r2)
   15608:	d8801917 	ldw	r2,100(sp)
   1560c:	143ffb36 	bltu	r2,r16,155fc <__alt_mem_mcu_subsystem_ram_0+0x77ff55fc>
   15610:	003e0306 	br	14e20 <__alt_mem_mcu_subsystem_ram_0+0x77ff4e20>
   15614:	10e0003c 	xorhi	r3,r2,32768
   15618:	00800b44 	movi	r2,45
   1561c:	d8800605 	stb	r2,24(sp)
   15620:	003dd306 	br	14d70 <__alt_mem_mcu_subsystem_ram_0+0x77ff4d70>
   15624:	d9000417 	ldw	r4,16(sp)
   15628:	d9801b04 	addi	r6,sp,108
   1562c:	b80b883a 	mov	r5,r23
   15630:	001d0580 	call	1d058 <__sprint_r>
   15634:	103b861e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15638:	d9001517 	ldw	r4,84(sp)
   1563c:	d8c01d17 	ldw	r3,116(sp)
   15640:	da002804 	addi	r8,sp,160
   15644:	003e1706 	br	14ea4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4ea4>
   15648:	d8801904 	addi	r2,sp,100
   1564c:	d8800315 	stw	r2,12(sp)
   15650:	d9400a17 	ldw	r5,40(sp)
   15654:	d8801604 	addi	r2,sp,88
   15658:	d9000417 	ldw	r4,16(sp)
   1565c:	d8800215 	stw	r2,8(sp)
   15660:	d8801504 	addi	r2,sp,84
   15664:	180d883a 	mov	r6,r3
   15668:	d8800115 	stw	r2,4(sp)
   1566c:	dd800015 	stw	r22,0(sp)
   15670:	01c000c4 	movi	r7,3
   15674:	da001115 	stw	r8,68(sp)
   15678:	dac00915 	stw	r11,36(sp)
   1567c:	d8c00815 	stw	r3,32(sp)
   15680:	0015f340 	call	15f34 <_dtoa_r>
   15684:	1027883a 	mov	r19,r2
   15688:	15a1883a 	add	r16,r2,r22
   1568c:	b019883a 	mov	r12,r22
   15690:	d8c00817 	ldw	r3,32(sp)
   15694:	dac00917 	ldw	r11,36(sp)
   15698:	da001117 	ldw	r8,68(sp)
   1569c:	003f5e06 	br	15418 <__alt_mem_mcu_subsystem_ram_0+0x77ff5418>
   156a0:	05800184 	movi	r22,6
   156a4:	003dad06 	br	14d5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4d5c>
   156a8:	d9000417 	ldw	r4,16(sp)
   156ac:	d9801b04 	addi	r6,sp,108
   156b0:	b80b883a 	mov	r5,r23
   156b4:	001d0580 	call	1d058 <__sprint_r>
   156b8:	103b651e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   156bc:	d8801517 	ldw	r2,84(sp)
   156c0:	d9000917 	ldw	r4,36(sp)
   156c4:	d8c01d17 	ldw	r3,116(sp)
   156c8:	da002804 	addi	r8,sp,160
   156cc:	2085c83a 	sub	r2,r4,r2
   156d0:	003ec806 	br	151f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff51f4>
   156d4:	b02b883a 	mov	r21,r22
   156d8:	b021883a 	mov	r16,r22
   156dc:	dd000715 	stw	r20,28(sp)
   156e0:	db001443 	ldbu	r12,81(sp)
   156e4:	5829883a 	mov	r20,r11
   156e8:	002d883a 	mov	r22,zero
   156ec:	d8000815 	stw	zero,32(sp)
   156f0:	0039f806 	br	13ed4 <__alt_mem_mcu_subsystem_ram_0+0x77ff3ed4>
   156f4:	00bfffc4 	movi	r2,-1
   156f8:	d8800515 	stw	r2,20(sp)
   156fc:	003b5706 	br	1445c <__alt_mem_mcu_subsystem_ram_0+0x77ff445c>
   15700:	d8800917 	ldw	r2,36(sp)
   15704:	d8c00c17 	ldw	r3,48(sp)
   15708:	10e1883a 	add	r16,r2,r3
   1570c:	d8800817 	ldw	r2,32(sp)
   15710:	00800316 	blt	zero,r2,15720 <___vfprintf_internal_r+0x1c8c>
   15714:	d8800817 	ldw	r2,32(sp)
   15718:	80a1c83a 	sub	r16,r16,r2
   1571c:	84000044 	addi	r16,r16,1
   15720:	802b883a 	mov	r21,r16
   15724:	803f9b0e 	bge	r16,zero,15594 <__alt_mem_mcu_subsystem_ram_0+0x77ff5594>
   15728:	002b883a 	mov	r21,zero
   1572c:	003f9906 	br	15594 <__alt_mem_mcu_subsystem_ram_0+0x77ff5594>
   15730:	d8c01517 	ldw	r3,84(sp)
   15734:	a88011e0 	cmpeqi	r2,r21,71
   15738:	d8c00815 	stw	r3,32(sp)
   1573c:	d8c01917 	ldw	r3,100(sp)
   15740:	1cc7c83a 	sub	r3,r3,r19
   15744:	d8c00915 	stw	r3,36(sp)
   15748:	103f621e 	bne	r2,zero,154d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff54d4>
   1574c:	003f6606 	br	154e8 <__alt_mem_mcu_subsystem_ram_0+0x77ff54e8>
   15750:	02c000b4 	movhi	r11,2
   15754:	217ffc08 	cmpgei	r5,r4,-16
   15758:	5adb20c4 	addi	r11,r11,27779
   1575c:	0121c83a 	sub	r16,zero,r4
   15760:	28001b1e 	bne	r5,zero,157d0 <___vfprintf_internal_r+0x1d3c>
   15764:	b82d883a 	mov	r22,r23
   15768:	04400404 	movi	r17,16
   1576c:	582f883a 	mov	r23,r11
   15770:	00000406 	br	15784 <___vfprintf_internal_r+0x1cf0>
   15774:	42000204 	addi	r8,r8,8
   15778:	843ffc04 	addi	r16,r16,-16
   1577c:	81000448 	cmpgei	r4,r16,17
   15780:	20001126 	beq	r4,zero,157c8 <___vfprintf_internal_r+0x1d34>
   15784:	10800044 	addi	r2,r2,1
   15788:	18c00404 	addi	r3,r3,16
   1578c:	45c00015 	stw	r23,0(r8)
   15790:	44400115 	stw	r17,4(r8)
   15794:	d8c01d15 	stw	r3,116(sp)
   15798:	d8801c15 	stw	r2,112(sp)
   1579c:	11000208 	cmpgei	r4,r2,8
   157a0:	203ff426 	beq	r4,zero,15774 <__alt_mem_mcu_subsystem_ram_0+0x77ff5774>
   157a4:	d9000417 	ldw	r4,16(sp)
   157a8:	d9801b04 	addi	r6,sp,108
   157ac:	b00b883a 	mov	r5,r22
   157b0:	001d0580 	call	1d058 <__sprint_r>
   157b4:	1000901e 	bne	r2,zero,159f8 <___vfprintf_internal_r+0x1f64>
   157b8:	d8c01d17 	ldw	r3,116(sp)
   157bc:	d8801c17 	ldw	r2,112(sp)
   157c0:	da002804 	addi	r8,sp,160
   157c4:	003fec06 	br	15778 <__alt_mem_mcu_subsystem_ram_0+0x77ff5778>
   157c8:	b817883a 	mov	r11,r23
   157cc:	b02f883a 	mov	r23,r22
   157d0:	10800044 	addi	r2,r2,1
   157d4:	1c07883a 	add	r3,r3,r16
   157d8:	42c00015 	stw	r11,0(r8)
   157dc:	44000115 	stw	r16,4(r8)
   157e0:	d8c01d15 	stw	r3,116(sp)
   157e4:	d8801c15 	stw	r2,112(sp)
   157e8:	11000208 	cmpgei	r4,r2,8
   157ec:	20006d1e 	bne	r4,zero,159a4 <___vfprintf_internal_r+0x1f10>
   157f0:	42000204 	addi	r8,r8,8
   157f4:	003c2d06 	br	148ac <__alt_mem_mcu_subsystem_ram_0+0x77ff48ac>
   157f8:	dd801ac4 	addi	r22,sp,107
   157fc:	b02b883a 	mov	r21,r22
   15800:	dac00815 	stw	r11,32(sp)
   15804:	da000d15 	stw	r8,52(sp)
   15808:	00000106 	br	15810 <___vfprintf_internal_r+0x1d7c>
   1580c:	182b883a 	mov	r21,r3
   15810:	8009883a 	mov	r4,r16
   15814:	01400284 	movi	r5,10
   15818:	000d6600 	call	d660 <__modsi3>
   1581c:	10800c04 	addi	r2,r2,48
   15820:	8009883a 	mov	r4,r16
   15824:	a8bfffc5 	stb	r2,-1(r21)
   15828:	01400284 	movi	r5,10
   1582c:	000d5d80 	call	d5d8 <__divsi3>
   15830:	1021883a 	mov	r16,r2
   15834:	10800288 	cmpgei	r2,r2,10
   15838:	a8ffffc4 	addi	r3,r21,-1
   1583c:	103ff31e 	bne	r2,zero,1580c <__alt_mem_mcu_subsystem_ram_0+0x77ff580c>
   15840:	80800c04 	addi	r2,r16,48
   15844:	ad7fff84 	addi	r21,r21,-2
   15848:	18bfffc5 	stb	r2,-1(r3)
   1584c:	dac00817 	ldw	r11,32(sp)
   15850:	da000d17 	ldw	r8,52(sp)
   15854:	ad806a2e 	bgeu	r21,r22,15a00 <___vfprintf_internal_r+0x1f6c>
   15858:	d90017c4 	addi	r4,sp,95
   1585c:	00000106 	br	15864 <___vfprintf_internal_r+0x1dd0>
   15860:	a8800003 	ldbu	r2,0(r21)
   15864:	21000044 	addi	r4,r4,1
   15868:	ad400044 	addi	r21,r21,1
   1586c:	20bfffc5 	stb	r2,-1(r4)
   15870:	adbffb1e 	bne	r21,r22,15860 <__alt_mem_mcu_subsystem_ram_0+0x77ff5860>
   15874:	d8801b04 	addi	r2,sp,108
   15878:	10c7c83a 	sub	r3,r2,r3
   1587c:	d88017c4 	addi	r2,sp,95
   15880:	10c7883a 	add	r3,r2,r3
   15884:	003f2606 	br	15520 <__alt_mem_mcu_subsystem_ram_0+0x77ff5520>
   15888:	d9000a17 	ldw	r4,40(sp)
   1588c:	180b883a 	mov	r5,r3
   15890:	000d883a 	mov	r6,zero
   15894:	000f883a 	mov	r7,zero
   15898:	da001215 	stw	r8,72(sp)
   1589c:	dac00915 	stw	r11,36(sp)
   158a0:	d8c00815 	stw	r3,32(sp)
   158a4:	db001115 	stw	r12,68(sp)
   158a8:	001f7e40 	call	1f7e4 <__eqdf2>
   158ac:	d8c00817 	ldw	r3,32(sp)
   158b0:	dac00917 	ldw	r11,36(sp)
   158b4:	da001217 	ldw	r8,72(sp)
   158b8:	103eda26 	beq	r2,zero,15424 <__alt_mem_mcu_subsystem_ram_0+0x77ff5424>
   158bc:	db001117 	ldw	r12,68(sp)
   158c0:	00800044 	movi	r2,1
   158c4:	1319c83a 	sub	r12,r2,r12
   158c8:	db001515 	stw	r12,84(sp)
   158cc:	003ed606 	br	15428 <__alt_mem_mcu_subsystem_ram_0+0x77ff5428>
   158d0:	102b883a 	mov	r21,r2
   158d4:	1000010e 	bge	r2,zero,158dc <___vfprintf_internal_r+0x1e48>
   158d8:	002b883a 	mov	r21,zero
   158dc:	dc000817 	ldw	r16,32(sp)
   158e0:	044019c4 	movi	r17,103
   158e4:	003d5d06 	br	14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   158e8:	d8800b17 	ldw	r2,44(sp)
   158ec:	10002316 	blt	r2,zero,1597c <___vfprintf_internal_r+0x1ee8>
   158f0:	db001443 	ldbu	r12,81(sp)
   158f4:	88801208 	cmpgei	r2,r17,72
   158f8:	10001d1e 	bne	r2,zero,15970 <___vfprintf_internal_r+0x1edc>
   158fc:	04c000b4 	movhi	r19,2
   15900:	9cdaf504 	addi	r19,r19,27604
   15904:	003b5706 	br	14664 <__alt_mem_mcu_subsystem_ram_0+0x77ff4664>
   15908:	5880004c 	andi	r2,r11,1
   1590c:	d8800815 	stw	r2,32(sp)
   15910:	103f0a1e 	bne	r2,zero,1553c <__alt_mem_mcu_subsystem_ram_0+0x77ff553c>
   15914:	802b883a 	mov	r21,r16
   15918:	803d500e 	bge	r16,zero,14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   1591c:	002b883a 	mov	r21,zero
   15920:	003d4e06 	br	14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   15924:	d8800817 	ldw	r2,32(sp)
   15928:	d8c00c17 	ldw	r3,48(sp)
   1592c:	10e1883a 	add	r16,r2,r3
   15930:	85a1883a 	add	r16,r16,r22
   15934:	003ff706 	br	15914 <__alt_mem_mcu_subsystem_ram_0+0x77ff5914>
   15938:	04000044 	movi	r16,1
   1593c:	80a1c83a 	sub	r16,r16,r2
   15940:	00800b44 	movi	r2,45
   15944:	d8801785 	stb	r2,94(sp)
   15948:	003eee06 	br	15504 <__alt_mem_mcu_subsystem_ram_0+0x77ff5504>
   1594c:	b0000f1e 	bne	r22,zero,1598c <___vfprintf_internal_r+0x1ef8>
   15950:	5ac0004c 	andi	r11,r11,1
   15954:	58000d1e 	bne	r11,zero,1598c <___vfprintf_internal_r+0x1ef8>
   15958:	05400044 	movi	r21,1
   1595c:	04000044 	movi	r16,1
   15960:	003d3e06 	br	14e5c <__alt_mem_mcu_subsystem_ram_0+0x77ff4e5c>
   15964:	4005883a 	mov	r2,r8
   15968:	5adb20c4 	addi	r11,r11,27779
   1596c:	003e6b06 	br	1531c <__alt_mem_mcu_subsystem_ram_0+0x77ff531c>
   15970:	04c000b4 	movhi	r19,2
   15974:	9cdaf604 	addi	r19,r19,27608
   15978:	003b3a06 	br	14664 <__alt_mem_mcu_subsystem_ram_0+0x77ff4664>
   1597c:	00800b44 	movi	r2,45
   15980:	d8801445 	stb	r2,81(sp)
   15984:	03000b44 	movi	r12,45
   15988:	003fda06 	br	158f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff58f4>
   1598c:	d8800c17 	ldw	r2,48(sp)
   15990:	14000044 	addi	r16,r2,1
   15994:	85a1883a 	add	r16,r16,r22
   15998:	003fde06 	br	15914 <__alt_mem_mcu_subsystem_ram_0+0x77ff5914>
   1599c:	9b21883a 	add	r16,r19,r12
   159a0:	003d1406 	br	14df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff4df4>
   159a4:	d9000417 	ldw	r4,16(sp)
   159a8:	d9801b04 	addi	r6,sp,108
   159ac:	b80b883a 	mov	r5,r23
   159b0:	001d0580 	call	1d058 <__sprint_r>
   159b4:	103aa61e 	bne	r2,zero,14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   159b8:	d8c01d17 	ldw	r3,116(sp)
   159bc:	d8801c17 	ldw	r2,112(sp)
   159c0:	da002804 	addi	r8,sp,160
   159c4:	003bb906 	br	148ac <__alt_mem_mcu_subsystem_ram_0+0x77ff48ac>
   159c8:	d8800717 	ldw	r2,28(sp)
   159cc:	15800017 	ldw	r22,0(r2)
   159d0:	10800104 	addi	r2,r2,4
   159d4:	b000010e 	bge	r22,zero,159dc <___vfprintf_internal_r+0x1f48>
   159d8:	05bfffc4 	movi	r22,-1
   159dc:	e4400043 	ldbu	r17,1(fp)
   159e0:	d8800715 	stw	r2,28(sp)
   159e4:	1839883a 	mov	fp,r3
   159e8:	8c403fcc 	andi	r17,r17,255
   159ec:	8c40201c 	xori	r17,r17,128
   159f0:	8c7fe004 	addi	r17,r17,-128
   159f4:	00388106 	br	13bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff3bfc>
   159f8:	b02f883a 	mov	r23,r22
   159fc:	003a9406 	br	14450 <__alt_mem_mcu_subsystem_ram_0+0x77ff4450>
   15a00:	d8c017c4 	addi	r3,sp,95
   15a04:	003ec606 	br	15520 <__alt_mem_mcu_subsystem_ram_0+0x77ff5520>
   15a08:	d9401445 	stb	r5,81(sp)
   15a0c:	00394506 	br	13f24 <__alt_mem_mcu_subsystem_ram_0+0x77ff3f24>
   15a10:	d9401445 	stb	r5,81(sp)
   15a14:	003ae806 	br	145b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff45b8>
   15a18:	d9401445 	stb	r5,81(sp)
   15a1c:	00398506 	br	14034 <__alt_mem_mcu_subsystem_ram_0+0x77ff4034>
   15a20:	b019883a 	mov	r12,r22
   15a24:	003ea206 	br	154b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff54b0>
   15a28:	d9401445 	stb	r5,81(sp)
   15a2c:	00399806 	br	14090 <__alt_mem_mcu_subsystem_ram_0+0x77ff4090>
   15a30:	d9401445 	stb	r5,81(sp)
   15a34:	00394106 	br	13f3c <__alt_mem_mcu_subsystem_ram_0+0x77ff3f3c>
   15a38:	d9401445 	stb	r5,81(sp)
   15a3c:	003a9606 	br	14498 <__alt_mem_mcu_subsystem_ram_0+0x77ff4498>
   15a40:	d9401445 	stb	r5,81(sp)
   15a44:	003b1006 	br	14688 <__alt_mem_mcu_subsystem_ram_0+0x77ff4688>

00015a48 <__vfprintf_internal>:
   15a48:	008000f4 	movhi	r2,3
   15a4c:	300f883a 	mov	r7,r6
   15a50:	280d883a 	mov	r6,r5
   15a54:	200b883a 	mov	r5,r4
   15a58:	1123b117 	ldw	r4,-28988(r2)
   15a5c:	0013a941 	jmpi	13a94 <___vfprintf_internal_r>

00015a60 <__sbprintf>:
   15a60:	2880030b 	ldhu	r2,12(r5)
   15a64:	2b001917 	ldw	r12,100(r5)
   15a68:	2ac0038b 	ldhu	r11,14(r5)
   15a6c:	2a800717 	ldw	r10,28(r5)
   15a70:	2a400917 	ldw	r9,36(r5)
   15a74:	defee204 	addi	sp,sp,-1144
   15a78:	da001a04 	addi	r8,sp,104
   15a7c:	00c10004 	movi	r3,1024
   15a80:	dc011a15 	stw	r16,1128(sp)
   15a84:	10bfff4c 	andi	r2,r2,65533
   15a88:	2821883a 	mov	r16,r5
   15a8c:	d80b883a 	mov	r5,sp
   15a90:	dc811c15 	stw	r18,1136(sp)
   15a94:	dc411b15 	stw	r17,1132(sp)
   15a98:	dfc11d15 	stw	ra,1140(sp)
   15a9c:	2025883a 	mov	r18,r4
   15aa0:	d880030d 	sth	r2,12(sp)
   15aa4:	db001915 	stw	r12,100(sp)
   15aa8:	dac0038d 	sth	r11,14(sp)
   15aac:	da800715 	stw	r10,28(sp)
   15ab0:	da400915 	stw	r9,36(sp)
   15ab4:	da000015 	stw	r8,0(sp)
   15ab8:	da000415 	stw	r8,16(sp)
   15abc:	d8c00215 	stw	r3,8(sp)
   15ac0:	d8c00515 	stw	r3,20(sp)
   15ac4:	d8000615 	stw	zero,24(sp)
   15ac8:	0013a940 	call	13a94 <___vfprintf_internal_r>
   15acc:	1023883a 	mov	r17,r2
   15ad0:	10000d0e 	bge	r2,zero,15b08 <__sbprintf+0xa8>
   15ad4:	d880030b 	ldhu	r2,12(sp)
   15ad8:	1080100c 	andi	r2,r2,64
   15adc:	10000326 	beq	r2,zero,15aec <__sbprintf+0x8c>
   15ae0:	8080030b 	ldhu	r2,12(r16)
   15ae4:	10801014 	ori	r2,r2,64
   15ae8:	8080030d 	sth	r2,12(r16)
   15aec:	8805883a 	mov	r2,r17
   15af0:	dfc11d17 	ldw	ra,1140(sp)
   15af4:	dc811c17 	ldw	r18,1136(sp)
   15af8:	dc411b17 	ldw	r17,1132(sp)
   15afc:	dc011a17 	ldw	r16,1128(sp)
   15b00:	dec11e04 	addi	sp,sp,1144
   15b04:	f800283a 	ret
   15b08:	d80b883a 	mov	r5,sp
   15b0c:	9009883a 	mov	r4,r18
   15b10:	00177fc0 	call	177fc <_fflush_r>
   15b14:	103fef26 	beq	r2,zero,15ad4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ad4>
   15b18:	047fffc4 	movi	r17,-1
   15b1c:	003fed06 	br	15ad4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ad4>

00015b20 <_wctomb_r>:
   15b20:	008000f4 	movhi	r2,3
   15b24:	10a3b117 	ldw	r2,-28988(r2)
   15b28:	10800d17 	ldw	r2,52(r2)
   15b2c:	1000021e 	bne	r2,zero,15b38 <_wctomb_r+0x18>
   15b30:	008000b4 	movhi	r2,2
   15b34:	109d7c04 	addi	r2,r2,30192
   15b38:	10803817 	ldw	r2,224(r2)
   15b3c:	1000683a 	jmp	r2

00015b40 <__ascii_wctomb>:
   15b40:	28000526 	beq	r5,zero,15b58 <__ascii_wctomb+0x18>
   15b44:	30804030 	cmpltui	r2,r6,256
   15b48:	10000526 	beq	r2,zero,15b60 <__ascii_wctomb+0x20>
   15b4c:	29800005 	stb	r6,0(r5)
   15b50:	00800044 	movi	r2,1
   15b54:	f800283a 	ret
   15b58:	0005883a 	mov	r2,zero
   15b5c:	f800283a 	ret
   15b60:	00802284 	movi	r2,138
   15b64:	20800015 	stw	r2,0(r4)
   15b68:	00bfffc4 	movi	r2,-1
   15b6c:	f800283a 	ret

00015b70 <__swsetup_r>:
   15b70:	008000f4 	movhi	r2,3
   15b74:	10a3b117 	ldw	r2,-28988(r2)
   15b78:	defffd04 	addi	sp,sp,-12
   15b7c:	dc400115 	stw	r17,4(sp)
   15b80:	dc000015 	stw	r16,0(sp)
   15b84:	dfc00215 	stw	ra,8(sp)
   15b88:	2023883a 	mov	r17,r4
   15b8c:	2821883a 	mov	r16,r5
   15b90:	10000226 	beq	r2,zero,15b9c <__swsetup_r+0x2c>
   15b94:	10c00e17 	ldw	r3,56(r2)
   15b98:	18003226 	beq	r3,zero,15c64 <__swsetup_r+0xf4>
   15b9c:	8080030b 	ldhu	r2,12(r16)
   15ba0:	10c0020c 	andi	r3,r2,8
   15ba4:	1009883a 	mov	r4,r2
   15ba8:	18000f26 	beq	r3,zero,15be8 <__swsetup_r+0x78>
   15bac:	80c00417 	ldw	r3,16(r16)
   15bb0:	18001526 	beq	r3,zero,15c08 <__swsetup_r+0x98>
   15bb4:	1100004c 	andi	r4,r2,1
   15bb8:	20001d1e 	bne	r4,zero,15c30 <__swsetup_r+0xc0>
   15bbc:	1080008c 	andi	r2,r2,2
   15bc0:	10002b1e 	bne	r2,zero,15c70 <__swsetup_r+0x100>
   15bc4:	80800517 	ldw	r2,20(r16)
   15bc8:	80800215 	stw	r2,8(r16)
   15bcc:	18001d26 	beq	r3,zero,15c44 <__swsetup_r+0xd4>
   15bd0:	0005883a 	mov	r2,zero
   15bd4:	dfc00217 	ldw	ra,8(sp)
   15bd8:	dc400117 	ldw	r17,4(sp)
   15bdc:	dc000017 	ldw	r16,0(sp)
   15be0:	dec00304 	addi	sp,sp,12
   15be4:	f800283a 	ret
   15be8:	2080040c 	andi	r2,r4,16
   15bec:	10003026 	beq	r2,zero,15cb0 <__swsetup_r+0x140>
   15bf0:	2080010c 	andi	r2,r4,4
   15bf4:	1000201e 	bne	r2,zero,15c78 <__swsetup_r+0x108>
   15bf8:	80c00417 	ldw	r3,16(r16)
   15bfc:	20800214 	ori	r2,r4,8
   15c00:	8080030d 	sth	r2,12(r16)
   15c04:	183feb1e 	bne	r3,zero,15bb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bb4>
   15c08:	1100a00c 	andi	r4,r2,640
   15c0c:	21008020 	cmpeqi	r4,r4,512
   15c10:	203fe81e 	bne	r4,zero,15bb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bb4>
   15c14:	8809883a 	mov	r4,r17
   15c18:	800b883a 	mov	r5,r16
   15c1c:	00187ec0 	call	187ec <__smakebuf_r>
   15c20:	8080030b 	ldhu	r2,12(r16)
   15c24:	80c00417 	ldw	r3,16(r16)
   15c28:	1100004c 	andi	r4,r2,1
   15c2c:	203fe326 	beq	r4,zero,15bbc <__alt_mem_mcu_subsystem_ram_0+0x77ff5bbc>
   15c30:	80800517 	ldw	r2,20(r16)
   15c34:	80000215 	stw	zero,8(r16)
   15c38:	0085c83a 	sub	r2,zero,r2
   15c3c:	80800615 	stw	r2,24(r16)
   15c40:	183fe31e 	bne	r3,zero,15bd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bd0>
   15c44:	80c0030b 	ldhu	r3,12(r16)
   15c48:	0005883a 	mov	r2,zero
   15c4c:	1900200c 	andi	r4,r3,128
   15c50:	203fe026 	beq	r4,zero,15bd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bd4>
   15c54:	18c01014 	ori	r3,r3,64
   15c58:	80c0030d 	sth	r3,12(r16)
   15c5c:	00bfffc4 	movi	r2,-1
   15c60:	003fdc06 	br	15bd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bd4>
   15c64:	1009883a 	mov	r4,r2
   15c68:	0017b9c0 	call	17b9c <__sinit>
   15c6c:	003fcb06 	br	15b9c <__alt_mem_mcu_subsystem_ram_0+0x77ff5b9c>
   15c70:	0005883a 	mov	r2,zero
   15c74:	003fd406 	br	15bc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bc8>
   15c78:	81400c17 	ldw	r5,48(r16)
   15c7c:	28000626 	beq	r5,zero,15c98 <__swsetup_r+0x128>
   15c80:	80801004 	addi	r2,r16,64
   15c84:	28800326 	beq	r5,r2,15c94 <__swsetup_r+0x124>
   15c88:	8809883a 	mov	r4,r17
   15c8c:	0017d000 	call	17d00 <_free_r>
   15c90:	8100030b 	ldhu	r4,12(r16)
   15c94:	80000c15 	stw	zero,48(r16)
   15c98:	80c00417 	ldw	r3,16(r16)
   15c9c:	00bff6c4 	movi	r2,-37
   15ca0:	1108703a 	and	r4,r2,r4
   15ca4:	80000115 	stw	zero,4(r16)
   15ca8:	80c00015 	stw	r3,0(r16)
   15cac:	003fd306 	br	15bfc <__alt_mem_mcu_subsystem_ram_0+0x77ff5bfc>
   15cb0:	00800244 	movi	r2,9
   15cb4:	88800015 	stw	r2,0(r17)
   15cb8:	20801014 	ori	r2,r4,64
   15cbc:	8080030d 	sth	r2,12(r16)
   15cc0:	00bfffc4 	movi	r2,-1
   15cc4:	003fc306 	br	15bd4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5bd4>

00015cc8 <div>:
   15cc8:	defffc04 	addi	sp,sp,-16
   15ccc:	dfc00315 	stw	ra,12(sp)
   15cd0:	dc800215 	stw	r18,8(sp)
   15cd4:	dc400115 	stw	r17,4(sp)
   15cd8:	dc000015 	stw	r16,0(sp)
   15cdc:	2825883a 	mov	r18,r5
   15ce0:	2021883a 	mov	r16,r4
   15ce4:	000d5d80 	call	d5d8 <__divsi3>
   15ce8:	900b883a 	mov	r5,r18
   15cec:	8009883a 	mov	r4,r16
   15cf0:	1023883a 	mov	r17,r2
   15cf4:	000d6600 	call	d660 <__modsi3>
   15cf8:	1007883a 	mov	r3,r2
   15cfc:	80000b16 	blt	r16,zero,15d2c <div+0x64>
   15d00:	10000716 	blt	r2,zero,15d20 <div+0x58>
   15d04:	8805883a 	mov	r2,r17
   15d08:	dfc00317 	ldw	ra,12(sp)
   15d0c:	dc800217 	ldw	r18,8(sp)
   15d10:	dc400117 	ldw	r17,4(sp)
   15d14:	dc000017 	ldw	r16,0(sp)
   15d18:	dec00404 	addi	sp,sp,16
   15d1c:	f800283a 	ret
   15d20:	8c400044 	addi	r17,r17,1
   15d24:	1487c83a 	sub	r3,r2,r18
   15d28:	003ff606 	br	15d04 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d04>
   15d2c:	00bff50e 	bge	zero,r2,15d04 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d04>
   15d30:	8c7fffc4 	addi	r17,r17,-1
   15d34:	1487883a 	add	r3,r2,r18
   15d38:	003ff206 	br	15d04 <__alt_mem_mcu_subsystem_ram_0+0x77ff5d04>

00015d3c <quorem>:
   15d3c:	defff704 	addi	sp,sp,-36
   15d40:	dc800215 	stw	r18,8(sp)
   15d44:	20800417 	ldw	r2,16(r4)
   15d48:	2c800417 	ldw	r18,16(r5)
   15d4c:	dfc00815 	stw	ra,32(sp)
   15d50:	ddc00715 	stw	r23,28(sp)
   15d54:	dd800615 	stw	r22,24(sp)
   15d58:	dd400515 	stw	r21,20(sp)
   15d5c:	dd000415 	stw	r20,16(sp)
   15d60:	dcc00315 	stw	r19,12(sp)
   15d64:	dc400115 	stw	r17,4(sp)
   15d68:	dc000015 	stw	r16,0(sp)
   15d6c:	14806f16 	blt	r2,r18,15f2c <quorem+0x1f0>
   15d70:	94bfffc4 	addi	r18,r18,-1
   15d74:	902e90ba 	slli	r23,r18,2
   15d78:	2c400504 	addi	r17,r5,20
   15d7c:	25400504 	addi	r21,r4,20
   15d80:	8de9883a 	add	r20,r17,r23
   15d84:	282d883a 	mov	r22,r5
   15d88:	adef883a 	add	r23,r21,r23
   15d8c:	a1400017 	ldw	r5,0(r20)
   15d90:	2021883a 	mov	r16,r4
   15d94:	b9000017 	ldw	r4,0(r23)
   15d98:	29400044 	addi	r5,r5,1
   15d9c:	000d6d80 	call	d6d8 <__udivsi3>
   15da0:	1027883a 	mov	r19,r2
   15da4:	10002c26 	beq	r2,zero,15e58 <quorem+0x11c>
   15da8:	8813883a 	mov	r9,r17
   15dac:	a811883a 	mov	r8,r21
   15db0:	0015883a 	mov	r10,zero
   15db4:	0007883a 	mov	r3,zero
   15db8:	4a400104 	addi	r9,r9,4
   15dbc:	49ffff17 	ldw	r7,-4(r9)
   15dc0:	41800017 	ldw	r6,0(r8)
   15dc4:	42000104 	addi	r8,r8,4
   15dc8:	397fffcc 	andi	r5,r7,65535
   15dcc:	2ccb383a 	mul	r5,r5,r19
   15dd0:	3808d43a 	srli	r4,r7,16
   15dd4:	32ffffcc 	andi	r11,r6,65535
   15dd8:	2a8b883a 	add	r5,r5,r10
   15ddc:	28bfffcc 	andi	r2,r5,65535
   15de0:	280ed43a 	srli	r7,r5,16
   15de4:	24c9383a 	mul	r4,r4,r19
   15de8:	1887c83a 	sub	r3,r3,r2
   15dec:	1ac5883a 	add	r2,r3,r11
   15df0:	3006d43a 	srli	r3,r6,16
   15df4:	21c9883a 	add	r4,r4,r7
   15df8:	100bd43a 	srai	r5,r2,16
   15dfc:	21bfffcc 	andi	r6,r4,65535
   15e00:	1987c83a 	sub	r3,r3,r6
   15e04:	1947883a 	add	r3,r3,r5
   15e08:	180c943a 	slli	r6,r3,16
   15e0c:	10bfffcc 	andi	r2,r2,65535
   15e10:	2014d43a 	srli	r10,r4,16
   15e14:	3084b03a 	or	r2,r6,r2
   15e18:	40bfff15 	stw	r2,-4(r8)
   15e1c:	1807d43a 	srai	r3,r3,16
   15e20:	a27fe52e 	bgeu	r20,r9,15db8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5db8>
   15e24:	b8800017 	ldw	r2,0(r23)
   15e28:	10000b1e 	bne	r2,zero,15e58 <quorem+0x11c>
   15e2c:	b8bfff04 	addi	r2,r23,-4
   15e30:	a880082e 	bgeu	r21,r2,15e54 <quorem+0x118>
   15e34:	b8ffff17 	ldw	r3,-4(r23)
   15e38:	18000326 	beq	r3,zero,15e48 <quorem+0x10c>
   15e3c:	00000506 	br	15e54 <quorem+0x118>
   15e40:	10c00017 	ldw	r3,0(r2)
   15e44:	1800031e 	bne	r3,zero,15e54 <quorem+0x118>
   15e48:	10bfff04 	addi	r2,r2,-4
   15e4c:	94bfffc4 	addi	r18,r18,-1
   15e50:	a8bffb36 	bltu	r21,r2,15e40 <__alt_mem_mcu_subsystem_ram_0+0x77ff5e40>
   15e54:	84800415 	stw	r18,16(r16)
   15e58:	b00b883a 	mov	r5,r22
   15e5c:	8009883a 	mov	r4,r16
   15e60:	00193c40 	call	193c4 <__mcmp>
   15e64:	10002516 	blt	r2,zero,15efc <quorem+0x1c0>
   15e68:	9cc00044 	addi	r19,r19,1
   15e6c:	a80d883a 	mov	r6,r21
   15e70:	0007883a 	mov	r3,zero
   15e74:	8c400104 	addi	r17,r17,4
   15e78:	88bfff17 	ldw	r2,-4(r17)
   15e7c:	31400017 	ldw	r5,0(r6)
   15e80:	31800104 	addi	r6,r6,4
   15e84:	113fffcc 	andi	r4,r2,65535
   15e88:	1907c83a 	sub	r3,r3,r4
   15e8c:	293fffcc 	andi	r4,r5,65535
   15e90:	1909883a 	add	r4,r3,r4
   15e94:	1004d43a 	srli	r2,r2,16
   15e98:	2806d43a 	srli	r3,r5,16
   15e9c:	200fd43a 	srai	r7,r4,16
   15ea0:	217fffcc 	andi	r5,r4,65535
   15ea4:	1887c83a 	sub	r3,r3,r2
   15ea8:	19c7883a 	add	r3,r3,r7
   15eac:	1808943a 	slli	r4,r3,16
   15eb0:	1807d43a 	srai	r3,r3,16
   15eb4:	2148b03a 	or	r4,r4,r5
   15eb8:	313fff15 	stw	r4,-4(r6)
   15ebc:	a47fed2e 	bgeu	r20,r17,15e74 <__alt_mem_mcu_subsystem_ram_0+0x77ff5e74>
   15ec0:	900690ba 	slli	r3,r18,2
   15ec4:	a8c7883a 	add	r3,r21,r3
   15ec8:	18800017 	ldw	r2,0(r3)
   15ecc:	10000b1e 	bne	r2,zero,15efc <quorem+0x1c0>
   15ed0:	18bfff04 	addi	r2,r3,-4
   15ed4:	a880082e 	bgeu	r21,r2,15ef8 <quorem+0x1bc>
   15ed8:	18ffff17 	ldw	r3,-4(r3)
   15edc:	18000326 	beq	r3,zero,15eec <quorem+0x1b0>
   15ee0:	00000506 	br	15ef8 <quorem+0x1bc>
   15ee4:	10c00017 	ldw	r3,0(r2)
   15ee8:	1800031e 	bne	r3,zero,15ef8 <quorem+0x1bc>
   15eec:	10bfff04 	addi	r2,r2,-4
   15ef0:	94bfffc4 	addi	r18,r18,-1
   15ef4:	a8bffb36 	bltu	r21,r2,15ee4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ee4>
   15ef8:	84800415 	stw	r18,16(r16)
   15efc:	9805883a 	mov	r2,r19
   15f00:	dfc00817 	ldw	ra,32(sp)
   15f04:	ddc00717 	ldw	r23,28(sp)
   15f08:	dd800617 	ldw	r22,24(sp)
   15f0c:	dd400517 	ldw	r21,20(sp)
   15f10:	dd000417 	ldw	r20,16(sp)
   15f14:	dcc00317 	ldw	r19,12(sp)
   15f18:	dc800217 	ldw	r18,8(sp)
   15f1c:	dc400117 	ldw	r17,4(sp)
   15f20:	dc000017 	ldw	r16,0(sp)
   15f24:	dec00904 	addi	sp,sp,36
   15f28:	f800283a 	ret
   15f2c:	0005883a 	mov	r2,zero
   15f30:	003ff306 	br	15f00 <__alt_mem_mcu_subsystem_ram_0+0x77ff5f00>

00015f34 <_dtoa_r>:
   15f34:	20801017 	ldw	r2,64(r4)
   15f38:	deffe004 	addi	sp,sp,-128
   15f3c:	dd001a15 	stw	r20,104(sp)
   15f40:	dcc01915 	stw	r19,100(sp)
   15f44:	dc001615 	stw	r16,88(sp)
   15f48:	dfc01f15 	stw	ra,124(sp)
   15f4c:	df001e15 	stw	fp,120(sp)
   15f50:	ddc01d15 	stw	r23,116(sp)
   15f54:	dd801c15 	stw	r22,112(sp)
   15f58:	dd401b15 	stw	r21,108(sp)
   15f5c:	dc801815 	stw	r18,96(sp)
   15f60:	dc401715 	stw	r17,92(sp)
   15f64:	d9400115 	stw	r5,4(sp)
   15f68:	d9c00215 	stw	r7,8(sp)
   15f6c:	2021883a 	mov	r16,r4
   15f70:	3029883a 	mov	r20,r6
   15f74:	3027883a 	mov	r19,r6
   15f78:	10000826 	beq	r2,zero,15f9c <_dtoa_r+0x68>
   15f7c:	21801117 	ldw	r6,68(r4)
   15f80:	00c00044 	movi	r3,1
   15f84:	100b883a 	mov	r5,r2
   15f88:	1986983a 	sll	r3,r3,r6
   15f8c:	11800115 	stw	r6,4(r2)
   15f90:	10c00215 	stw	r3,8(r2)
   15f94:	0018bd00 	call	18bd0 <_Bfree>
   15f98:	80001015 	stw	zero,64(r16)
   15f9c:	a000b216 	blt	r20,zero,16268 <_dtoa_r+0x334>
   15fa0:	d8802217 	ldw	r2,136(sp)
   15fa4:	00dffc34 	movhi	r3,32752
   15fa8:	10000015 	stw	zero,0(r2)
   15fac:	a09ffc2c 	andhi	r2,r20,32752
   15fb0:	10c0b726 	beq	r2,r3,16290 <_dtoa_r+0x35c>
   15fb4:	d9000117 	ldw	r4,4(sp)
   15fb8:	000d883a 	mov	r6,zero
   15fbc:	000f883a 	mov	r7,zero
   15fc0:	980b883a 	mov	r5,r19
   15fc4:	001f7e40 	call	1f7e4 <__eqdf2>
   15fc8:	1000181e 	bne	r2,zero,1602c <_dtoa_r+0xf8>
   15fcc:	d8c02117 	ldw	r3,132(sp)
   15fd0:	00800044 	movi	r2,1
   15fd4:	18800015 	stw	r2,0(r3)
   15fd8:	d8802317 	ldw	r2,140(sp)
   15fdc:	1000d026 	beq	r2,zero,16320 <_dtoa_r+0x3ec>
   15fe0:	d8c02317 	ldw	r3,140(sp)
   15fe4:	008000b4 	movhi	r2,2
   15fe8:	109b0344 	addi	r2,r2,27661
   15fec:	058000b4 	movhi	r22,2
   15ff0:	18800015 	stw	r2,0(r3)
   15ff4:	b59b0304 	addi	r22,r22,27660
   15ff8:	b005883a 	mov	r2,r22
   15ffc:	dfc01f17 	ldw	ra,124(sp)
   16000:	df001e17 	ldw	fp,120(sp)
   16004:	ddc01d17 	ldw	r23,116(sp)
   16008:	dd801c17 	ldw	r22,112(sp)
   1600c:	dd401b17 	ldw	r21,108(sp)
   16010:	dd001a17 	ldw	r20,104(sp)
   16014:	dcc01917 	ldw	r19,100(sp)
   16018:	dc801817 	ldw	r18,96(sp)
   1601c:	dc401717 	ldw	r17,92(sp)
   16020:	dc001617 	ldw	r16,88(sp)
   16024:	dec02004 	addi	sp,sp,128
   16028:	f800283a 	ret
   1602c:	dc800117 	ldw	r18,4(sp)
   16030:	d8801404 	addi	r2,sp,80
   16034:	a022d53a 	srli	r17,r20,20
   16038:	d8800015 	stw	r2,0(sp)
   1603c:	d9c01504 	addi	r7,sp,84
   16040:	900b883a 	mov	r5,r18
   16044:	980d883a 	mov	r6,r19
   16048:	8009883a 	mov	r4,r16
   1604c:	00197440 	call	19744 <__d2b>
   16050:	102f883a 	mov	r23,r2
   16054:	8800a91e 	bne	r17,zero,162fc <_dtoa_r+0x3c8>
   16058:	dc801417 	ldw	r18,80(sp)
   1605c:	dc401517 	ldw	r17,84(sp)
   16060:	9463883a 	add	r17,r18,r17
   16064:	88810c84 	addi	r2,r17,1074
   16068:	10c00850 	cmplti	r3,r2,33
   1606c:	18035d1e 	bne	r3,zero,16de4 <_dtoa_r+0xeb0>
   16070:	01001004 	movi	r4,64
   16074:	2085c83a 	sub	r2,r4,r2
   16078:	a0a8983a 	sll	r20,r20,r2
   1607c:	d8800117 	ldw	r2,4(sp)
   16080:	89010484 	addi	r4,r17,1042
   16084:	1108d83a 	srl	r4,r2,r4
   16088:	a108b03a 	or	r4,r20,r4
   1608c:	000fa300 	call	fa30 <__floatunsidf>
   16090:	1009883a 	mov	r4,r2
   16094:	017f8434 	movhi	r5,65040
   16098:	00800044 	movi	r2,1
   1609c:	194b883a 	add	r5,r3,r5
   160a0:	8c7fffc4 	addi	r17,r17,-1
   160a4:	d8800b15 	stw	r2,44(sp)
   160a8:	000d883a 	mov	r6,zero
   160ac:	01cffe34 	movhi	r7,16376
   160b0:	000f0dc0 	call	f0dc <__subdf3>
   160b4:	0198dbf4 	movhi	r6,25455
   160b8:	01cff4f4 	movhi	r7,16339
   160bc:	3190d844 	addi	r6,r6,17249
   160c0:	39e1e9c4 	addi	r7,r7,-30809
   160c4:	1009883a 	mov	r4,r2
   160c8:	180b883a 	mov	r5,r3
   160cc:	000ea000 	call	ea00 <__muldf3>
   160d0:	01a2d874 	movhi	r6,35681
   160d4:	01cff1f4 	movhi	r7,16327
   160d8:	31b22cc4 	addi	r6,r6,-14157
   160dc:	39e28a04 	addi	r7,r7,-30168
   160e0:	180b883a 	mov	r5,r3
   160e4:	1009883a 	mov	r4,r2
   160e8:	000d7940 	call	d794 <__adddf3>
   160ec:	8809883a 	mov	r4,r17
   160f0:	102b883a 	mov	r21,r2
   160f4:	1829883a 	mov	r20,r3
   160f8:	001f9980 	call	1f998 <__floatsidf>
   160fc:	019427f4 	movhi	r6,20639
   16100:	01cff4f4 	movhi	r7,16339
   16104:	319e7ec4 	addi	r6,r6,31227
   16108:	39d104c4 	addi	r7,r7,17427
   1610c:	1009883a 	mov	r4,r2
   16110:	180b883a 	mov	r5,r3
   16114:	000ea000 	call	ea00 <__muldf3>
   16118:	100d883a 	mov	r6,r2
   1611c:	180f883a 	mov	r7,r3
   16120:	a809883a 	mov	r4,r21
   16124:	a00b883a 	mov	r5,r20
   16128:	000d7940 	call	d794 <__adddf3>
   1612c:	1009883a 	mov	r4,r2
   16130:	180b883a 	mov	r5,r3
   16134:	102b883a 	mov	r21,r2
   16138:	1829883a 	mov	r20,r3
   1613c:	000f9b00 	call	f9b0 <__fixdfsi>
   16140:	000d883a 	mov	r6,zero
   16144:	000f883a 	mov	r7,zero
   16148:	a809883a 	mov	r4,r21
   1614c:	a00b883a 	mov	r5,r20
   16150:	d8800315 	stw	r2,12(sp)
   16154:	001f8640 	call	1f864 <__ledf2>
   16158:	10029416 	blt	r2,zero,16bac <_dtoa_r+0xc78>
   1615c:	dd000317 	ldw	r20,12(sp)
   16160:	a08005e8 	cmpgeui	r2,r20,23
   16164:	1002811e 	bne	r2,zero,16b6c <_dtoa_r+0xc38>
   16168:	a00690fa 	slli	r3,r20,3
   1616c:	008000b4 	movhi	r2,2
   16170:	109bfc04 	addi	r2,r2,28656
   16174:	10c5883a 	add	r2,r2,r3
   16178:	11000017 	ldw	r4,0(r2)
   1617c:	11400117 	ldw	r5,4(r2)
   16180:	d9800117 	ldw	r6,4(sp)
   16184:	980f883a 	mov	r7,r19
   16188:	000e9200 	call	e920 <__gedf2>
   1618c:	0083110e 	bge	zero,r2,16dd4 <_dtoa_r+0xea0>
   16190:	a0bfffc4 	addi	r2,r20,-1
   16194:	d8800315 	stw	r2,12(sp)
   16198:	d8000915 	stw	zero,36(sp)
   1619c:	9463c83a 	sub	r17,r18,r17
   161a0:	8d7fffc4 	addi	r21,r17,-1
   161a4:	a8027c16 	blt	r21,zero,16b98 <_dtoa_r+0xc64>
   161a8:	d8000515 	stw	zero,20(sp)
   161ac:	d8800317 	ldw	r2,12(sp)
   161b0:	10027116 	blt	r2,zero,16b78 <_dtoa_r+0xc44>
   161b4:	a8ab883a 	add	r21,r21,r2
   161b8:	d8800815 	stw	r2,32(sp)
   161bc:	d8000715 	stw	zero,28(sp)
   161c0:	d8c00217 	ldw	r3,8(sp)
   161c4:	188002a8 	cmpgeui	r2,r3,10
   161c8:	1000581e 	bne	r2,zero,1632c <_dtoa_r+0x3f8>
   161cc:	18800190 	cmplti	r2,r3,6
   161d0:	1003021e 	bne	r2,zero,16ddc <_dtoa_r+0xea8>
   161d4:	18bfff04 	addi	r2,r3,-4
   161d8:	d8800215 	stw	r2,8(sp)
   161dc:	0023883a 	mov	r17,zero
   161e0:	d8c00217 	ldw	r3,8(sp)
   161e4:	188000e0 	cmpeqi	r2,r3,3
   161e8:	1003e11e 	bne	r2,zero,17170 <_dtoa_r+0x123c>
   161ec:	18800108 	cmpgei	r2,r3,4
   161f0:	1003a826 	beq	r2,zero,17094 <_dtoa_r+0x1160>
   161f4:	d8c00217 	ldw	r3,8(sp)
   161f8:	18800120 	cmpeqi	r2,r3,4
   161fc:	1003311e 	bne	r2,zero,16ec4 <_dtoa_r+0xf90>
   16200:	18800160 	cmpeqi	r2,r3,5
   16204:	1004b326 	beq	r2,zero,174d4 <_dtoa_r+0x15a0>
   16208:	00800044 	movi	r2,1
   1620c:	d8800615 	stw	r2,24(sp)
   16210:	d8800317 	ldw	r2,12(sp)
   16214:	d8c02017 	ldw	r3,128(sp)
   16218:	10c5883a 	add	r2,r2,r3
   1621c:	d8800a15 	stw	r2,40(sp)
   16220:	10800044 	addi	r2,r2,1
   16224:	d8800415 	stw	r2,16(sp)
   16228:	100d883a 	mov	r6,r2
   1622c:	00800116 	blt	zero,r2,16234 <_dtoa_r+0x300>
   16230:	01800044 	movi	r6,1
   16234:	80001115 	stw	zero,68(r16)
   16238:	30800610 	cmplti	r2,r6,24
   1623c:	dc800417 	ldw	r18,16(sp)
   16240:	1004da1e 	bne	r2,zero,175ac <_dtoa_r+0x1678>
   16244:	00c00044 	movi	r3,1
   16248:	00800104 	movi	r2,4
   1624c:	1085883a 	add	r2,r2,r2
   16250:	11000504 	addi	r4,r2,20
   16254:	180b883a 	mov	r5,r3
   16258:	18c00044 	addi	r3,r3,1
   1625c:	313ffb2e 	bgeu	r6,r4,1624c <__alt_mem_mcu_subsystem_ram_0+0x77ff624c>
   16260:	81401115 	stw	r5,68(r16)
   16264:	00003d06 	br	1635c <_dtoa_r+0x428>
   16268:	04e00034 	movhi	r19,32768
   1626c:	d8c02217 	ldw	r3,136(sp)
   16270:	9cffffc4 	addi	r19,r19,-1
   16274:	a4e6703a 	and	r19,r20,r19
   16278:	00800044 	movi	r2,1
   1627c:	9829883a 	mov	r20,r19
   16280:	18800015 	stw	r2,0(r3)
   16284:	a09ffc2c 	andhi	r2,r20,32752
   16288:	00dffc34 	movhi	r3,32752
   1628c:	10ff491e 	bne	r2,r3,15fb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff5fb4>
   16290:	d8c02117 	ldw	r3,132(sp)
   16294:	0089c3c4 	movi	r2,9999
   16298:	18800015 	stw	r2,0(r3)
   1629c:	d8800117 	ldw	r2,4(sp)
   162a0:	10000d1e 	bne	r2,zero,162d8 <_dtoa_r+0x3a4>
   162a4:	01800434 	movhi	r6,16
   162a8:	31bfffc4 	addi	r6,r6,-1
   162ac:	a18c703a 	and	r6,r20,r6
   162b0:	3000091e 	bne	r6,zero,162d8 <_dtoa_r+0x3a4>
   162b4:	d8802317 	ldw	r2,140(sp)
   162b8:	058000b4 	movhi	r22,2
   162bc:	1004c226 	beq	r2,zero,175c8 <_dtoa_r+0x1694>
   162c0:	008000b4 	movhi	r2,2
   162c4:	b59bc904 	addi	r22,r22,28452
   162c8:	109bcb04 	addi	r2,r2,28460
   162cc:	d8c02317 	ldw	r3,140(sp)
   162d0:	18800015 	stw	r2,0(r3)
   162d4:	003f4806 	br	15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   162d8:	d8802317 	ldw	r2,140(sp)
   162dc:	058000b4 	movhi	r22,2
   162e0:	1000021e 	bne	r2,zero,162ec <_dtoa_r+0x3b8>
   162e4:	b59bcc04 	addi	r22,r22,28464
   162e8:	003f4306 	br	15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   162ec:	008000b4 	movhi	r2,2
   162f0:	b59bcc04 	addi	r22,r22,28464
   162f4:	109bccc4 	addi	r2,r2,28467
   162f8:	003ff406 	br	162cc <__alt_mem_mcu_subsystem_ram_0+0x77ff62cc>
   162fc:	01400434 	movhi	r5,16
   16300:	297fffc4 	addi	r5,r5,-1
   16304:	994a703a 	and	r5,r19,r5
   16308:	9009883a 	mov	r4,r18
   1630c:	294ffc34 	orhi	r5,r5,16368
   16310:	8c7f0044 	addi	r17,r17,-1023
   16314:	dc801417 	ldw	r18,80(sp)
   16318:	d8000b15 	stw	zero,44(sp)
   1631c:	003f6206 	br	160a8 <__alt_mem_mcu_subsystem_ram_0+0x77ff60a8>
   16320:	058000b4 	movhi	r22,2
   16324:	b59b0304 	addi	r22,r22,27660
   16328:	003f3306 	br	15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   1632c:	00800044 	movi	r2,1
   16330:	d8800615 	stw	r2,24(sp)
   16334:	00bfffc4 	movi	r2,-1
   16338:	04bfffc4 	movi	r18,-1
   1633c:	04400044 	movi	r17,1
   16340:	d8000215 	stw	zero,8(sp)
   16344:	d8800415 	stw	r2,16(sp)
   16348:	d8002015 	stw	zero,128(sp)
   1634c:	d8800417 	ldw	r2,16(sp)
   16350:	80001115 	stw	zero,68(r16)
   16354:	000b883a 	mov	r5,zero
   16358:	d8800a15 	stw	r2,40(sp)
   1635c:	8009883a 	mov	r4,r16
   16360:	0018b2c0 	call	18b2c <_Balloc>
   16364:	80801015 	stw	r2,64(r16)
   16368:	948003e8 	cmpgeui	r18,r18,15
   1636c:	102d883a 	mov	r22,r2
   16370:	9000d11e 	bne	r18,zero,166b8 <_dtoa_r+0x784>
   16374:	8800d026 	beq	r17,zero,166b8 <_dtoa_r+0x784>
   16378:	d9000317 	ldw	r4,12(sp)
   1637c:	0102f40e 	bge	zero,r4,16f50 <_dtoa_r+0x101c>
   16380:	208003cc 	andi	r2,r4,15
   16384:	100690fa 	slli	r3,r2,3
   16388:	2025d13a 	srai	r18,r4,4
   1638c:	008000b4 	movhi	r2,2
   16390:	109bfc04 	addi	r2,r2,28656
   16394:	10c5883a 	add	r2,r2,r3
   16398:	90c0040c 	andi	r3,r18,16
   1639c:	12800017 	ldw	r10,0(r2)
   163a0:	17000117 	ldw	fp,4(r2)
   163a4:	18038e26 	beq	r3,zero,171e0 <_dtoa_r+0x12ac>
   163a8:	008000b4 	movhi	r2,2
   163ac:	109bf204 	addi	r2,r2,28616
   163b0:	11800817 	ldw	r6,32(r2)
   163b4:	11c00917 	ldw	r7,36(r2)
   163b8:	d9000117 	ldw	r4,4(sp)
   163bc:	980b883a 	mov	r5,r19
   163c0:	da800e15 	stw	r10,56(sp)
   163c4:	000e0540 	call	e054 <__divdf3>
   163c8:	da800e17 	ldw	r10,56(sp)
   163cc:	d8800c15 	stw	r2,48(sp)
   163d0:	d8c00d15 	stw	r3,52(sp)
   163d4:	948003cc 	andi	r18,r18,15
   163d8:	044000c4 	movi	r17,3
   163dc:	90001126 	beq	r18,zero,16424 <_dtoa_r+0x4f0>
   163e0:	050000b4 	movhi	r20,2
   163e4:	a51bf204 	addi	r20,r20,28616
   163e8:	5005883a 	mov	r2,r10
   163ec:	e007883a 	mov	r3,fp
   163f0:	9180004c 	andi	r6,r18,1
   163f4:	1009883a 	mov	r4,r2
   163f8:	9025d07a 	srai	r18,r18,1
   163fc:	180b883a 	mov	r5,r3
   16400:	30000426 	beq	r6,zero,16414 <_dtoa_r+0x4e0>
   16404:	a1800017 	ldw	r6,0(r20)
   16408:	a1c00117 	ldw	r7,4(r20)
   1640c:	8c400044 	addi	r17,r17,1
   16410:	000ea000 	call	ea00 <__muldf3>
   16414:	a5000204 	addi	r20,r20,8
   16418:	903ff51e 	bne	r18,zero,163f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff63f0>
   1641c:	1015883a 	mov	r10,r2
   16420:	1839883a 	mov	fp,r3
   16424:	d9000c17 	ldw	r4,48(sp)
   16428:	d9400d17 	ldw	r5,52(sp)
   1642c:	500d883a 	mov	r6,r10
   16430:	e00f883a 	mov	r7,fp
   16434:	000e0540 	call	e054 <__divdf3>
   16438:	1025883a 	mov	r18,r2
   1643c:	1829883a 	mov	r20,r3
   16440:	d8800917 	ldw	r2,36(sp)
   16444:	10000626 	beq	r2,zero,16460 <_dtoa_r+0x52c>
   16448:	000d883a 	mov	r6,zero
   1644c:	01cffc34 	movhi	r7,16368
   16450:	9009883a 	mov	r4,r18
   16454:	a00b883a 	mov	r5,r20
   16458:	001f8640 	call	1f864 <__ledf2>
   1645c:	1003d416 	blt	r2,zero,173b0 <_dtoa_r+0x147c>
   16460:	8809883a 	mov	r4,r17
   16464:	001f9980 	call	1f998 <__floatsidf>
   16468:	900d883a 	mov	r6,r18
   1646c:	a00f883a 	mov	r7,r20
   16470:	1009883a 	mov	r4,r2
   16474:	180b883a 	mov	r5,r3
   16478:	000ea000 	call	ea00 <__muldf3>
   1647c:	000d883a 	mov	r6,zero
   16480:	01d00734 	movhi	r7,16412
   16484:	1009883a 	mov	r4,r2
   16488:	180b883a 	mov	r5,r3
   1648c:	000d7940 	call	d794 <__adddf3>
   16490:	d8800c15 	stw	r2,48(sp)
   16494:	00bf3034 	movhi	r2,64704
   16498:	1885883a 	add	r2,r3,r2
   1649c:	d8800d15 	stw	r2,52(sp)
   164a0:	d8800417 	ldw	r2,16(sp)
   164a4:	10031526 	beq	r2,zero,170fc <_dtoa_r+0x11c8>
   164a8:	d8800317 	ldw	r2,12(sp)
   164ac:	d8801215 	stw	r2,72(sp)
   164b0:	d8800417 	ldw	r2,16(sp)
   164b4:	d8800e15 	stw	r2,56(sp)
   164b8:	9009883a 	mov	r4,r18
   164bc:	a00b883a 	mov	r5,r20
   164c0:	000f9b00 	call	f9b0 <__fixdfsi>
   164c4:	d8c00e17 	ldw	r3,56(sp)
   164c8:	17000c04 	addi	fp,r2,48
   164cc:	18ffffc4 	addi	r3,r3,-1
   164d0:	180890fa 	slli	r4,r3,3
   164d4:	00c000b4 	movhi	r3,2
   164d8:	18dbfc04 	addi	r3,r3,28656
   164dc:	1907883a 	add	r3,r3,r4
   164e0:	1a800017 	ldw	r10,0(r3)
   164e4:	1a400117 	ldw	r9,4(r3)
   164e8:	1009883a 	mov	r4,r2
   164ec:	da801115 	stw	r10,68(sp)
   164f0:	da401015 	stw	r9,64(sp)
   164f4:	001f9980 	call	1f998 <__floatsidf>
   164f8:	100d883a 	mov	r6,r2
   164fc:	180f883a 	mov	r7,r3
   16500:	9009883a 	mov	r4,r18
   16504:	a00b883a 	mov	r5,r20
   16508:	000f0dc0 	call	f0dc <__subdf3>
   1650c:	1025883a 	mov	r18,r2
   16510:	da401017 	ldw	r9,64(sp)
   16514:	da801117 	ldw	r10,68(sp)
   16518:	d8800617 	ldw	r2,24(sp)
   1651c:	e011883a 	mov	r8,fp
   16520:	df000f15 	stw	fp,60(sp)
   16524:	da001315 	stw	r8,76(sp)
   16528:	1823883a 	mov	r17,r3
   1652c:	b7000044 	addi	fp,r22,1
   16530:	500d883a 	mov	r6,r10
   16534:	480f883a 	mov	r7,r9
   16538:	10034126 	beq	r2,zero,17240 <_dtoa_r+0x130c>
   1653c:	0009883a 	mov	r4,zero
   16540:	014ff834 	movhi	r5,16352
   16544:	000e0540 	call	e054 <__divdf3>
   16548:	d9800c17 	ldw	r6,48(sp)
   1654c:	d9c00d17 	ldw	r7,52(sp)
   16550:	1009883a 	mov	r4,r2
   16554:	180b883a 	mov	r5,r3
   16558:	000f0dc0 	call	f0dc <__subdf3>
   1655c:	1829883a 	mov	r20,r3
   16560:	d8c00f17 	ldw	r3,60(sp)
   16564:	900d883a 	mov	r6,r18
   16568:	880f883a 	mov	r7,r17
   1656c:	b0c00005 	stb	r3,0(r22)
   16570:	1009883a 	mov	r4,r2
   16574:	a00b883a 	mov	r5,r20
   16578:	d8800c15 	stw	r2,48(sp)
   1657c:	000e9200 	call	e920 <__gedf2>
   16580:	0083d116 	blt	zero,r2,174c8 <_dtoa_r+0x1594>
   16584:	900d883a 	mov	r6,r18
   16588:	880f883a 	mov	r7,r17
   1658c:	0009883a 	mov	r4,zero
   16590:	014ffc34 	movhi	r5,16368
   16594:	000f0dc0 	call	f0dc <__subdf3>
   16598:	d9000c17 	ldw	r4,48(sp)
   1659c:	100d883a 	mov	r6,r2
   165a0:	180f883a 	mov	r7,r3
   165a4:	a00b883a 	mov	r5,r20
   165a8:	000e9200 	call	e920 <__gedf2>
   165ac:	da001317 	ldw	r8,76(sp)
   165b0:	0083d716 	blt	zero,r2,17510 <_dtoa_r+0x15dc>
   165b4:	d8c00e17 	ldw	r3,56(sp)
   165b8:	18800060 	cmpeqi	r2,r3,1
   165bc:	10003e1e 	bne	r2,zero,166b8 <_dtoa_r+0x784>
   165c0:	b0c7883a 	add	r3,r22,r3
   165c4:	dd400e15 	stw	r21,56(sp)
   165c8:	ddc00d15 	stw	r23,52(sp)
   165cc:	dd400c17 	ldw	r21,48(sp)
   165d0:	182f883a 	mov	r23,r3
   165d4:	dcc00c15 	stw	r19,48(sp)
   165d8:	00000806 	br	165fc <_dtoa_r+0x6c8>
   165dc:	000f0dc0 	call	f0dc <__subdf3>
   165e0:	a80d883a 	mov	r6,r21
   165e4:	a00f883a 	mov	r7,r20
   165e8:	1009883a 	mov	r4,r2
   165ec:	180b883a 	mov	r5,r3
   165f0:	001f8640 	call	1f864 <__ledf2>
   165f4:	1003c416 	blt	r2,zero,17508 <_dtoa_r+0x15d4>
   165f8:	e5c02c26 	beq	fp,r23,166ac <_dtoa_r+0x778>
   165fc:	a809883a 	mov	r4,r21
   16600:	a00b883a 	mov	r5,r20
   16604:	000d883a 	mov	r6,zero
   16608:	01d00934 	movhi	r7,16420
   1660c:	000ea000 	call	ea00 <__muldf3>
   16610:	000d883a 	mov	r6,zero
   16614:	01d00934 	movhi	r7,16420
   16618:	9009883a 	mov	r4,r18
   1661c:	880b883a 	mov	r5,r17
   16620:	102b883a 	mov	r21,r2
   16624:	1829883a 	mov	r20,r3
   16628:	000ea000 	call	ea00 <__muldf3>
   1662c:	180b883a 	mov	r5,r3
   16630:	1009883a 	mov	r4,r2
   16634:	1823883a 	mov	r17,r3
   16638:	1025883a 	mov	r18,r2
   1663c:	000f9b00 	call	f9b0 <__fixdfsi>
   16640:	1009883a 	mov	r4,r2
   16644:	1027883a 	mov	r19,r2
   16648:	001f9980 	call	1f998 <__floatsidf>
   1664c:	9009883a 	mov	r4,r18
   16650:	880b883a 	mov	r5,r17
   16654:	100d883a 	mov	r6,r2
   16658:	180f883a 	mov	r7,r3
   1665c:	000f0dc0 	call	f0dc <__subdf3>
   16660:	e7000044 	addi	fp,fp,1
   16664:	9cc00c04 	addi	r19,r19,48
   16668:	a80d883a 	mov	r6,r21
   1666c:	a00f883a 	mov	r7,r20
   16670:	1009883a 	mov	r4,r2
   16674:	180b883a 	mov	r5,r3
   16678:	e4ffffc5 	stb	r19,-1(fp)
   1667c:	1025883a 	mov	r18,r2
   16680:	1823883a 	mov	r17,r3
   16684:	001f8640 	call	1f864 <__ledf2>
   16688:	900d883a 	mov	r6,r18
   1668c:	880f883a 	mov	r7,r17
   16690:	0009883a 	mov	r4,zero
   16694:	014ffc34 	movhi	r5,16368
   16698:	103fd00e 	bge	r2,zero,165dc <__alt_mem_mcu_subsystem_ram_0+0x77ff65dc>
   1669c:	d8801217 	ldw	r2,72(sp)
   166a0:	ddc00d17 	ldw	r23,52(sp)
   166a4:	d8800315 	stw	r2,12(sp)
   166a8:	0001ab06 	br	16d58 <_dtoa_r+0xe24>
   166ac:	dd400e17 	ldw	r21,56(sp)
   166b0:	ddc00d17 	ldw	r23,52(sp)
   166b4:	dcc00c17 	ldw	r19,48(sp)
   166b8:	d8801517 	ldw	r2,84(sp)
   166bc:	10008f16 	blt	r2,zero,168fc <_dtoa_r+0x9c8>
   166c0:	d9000317 	ldw	r4,12(sp)
   166c4:	20c003c8 	cmpgei	r3,r4,15
   166c8:	18008c1e 	bne	r3,zero,168fc <_dtoa_r+0x9c8>
   166cc:	200690fa 	slli	r3,r4,3
   166d0:	008000b4 	movhi	r2,2
   166d4:	109bfc04 	addi	r2,r2,28656
   166d8:	10c5883a 	add	r2,r2,r3
   166dc:	14400017 	ldw	r17,0(r2)
   166e0:	14800117 	ldw	r18,4(r2)
   166e4:	d8802017 	ldw	r2,128(sp)
   166e8:	1001fe16 	blt	r2,zero,16ee4 <_dtoa_r+0xfb0>
   166ec:	dd000117 	ldw	r20,4(sp)
   166f0:	880d883a 	mov	r6,r17
   166f4:	900f883a 	mov	r7,r18
   166f8:	a009883a 	mov	r4,r20
   166fc:	980b883a 	mov	r5,r19
   16700:	000e0540 	call	e054 <__divdf3>
   16704:	180b883a 	mov	r5,r3
   16708:	1009883a 	mov	r4,r2
   1670c:	000f9b00 	call	f9b0 <__fixdfsi>
   16710:	1009883a 	mov	r4,r2
   16714:	d8800115 	stw	r2,4(sp)
   16718:	001f9980 	call	1f998 <__floatsidf>
   1671c:	880d883a 	mov	r6,r17
   16720:	900f883a 	mov	r7,r18
   16724:	1009883a 	mov	r4,r2
   16728:	180b883a 	mov	r5,r3
   1672c:	000ea000 	call	ea00 <__muldf3>
   16730:	100d883a 	mov	r6,r2
   16734:	a009883a 	mov	r4,r20
   16738:	980b883a 	mov	r5,r19
   1673c:	180f883a 	mov	r7,r3
   16740:	000f0dc0 	call	f0dc <__subdf3>
   16744:	da000117 	ldw	r8,4(sp)
   16748:	1009883a 	mov	r4,r2
   1674c:	180b883a 	mov	r5,r3
   16750:	40800c04 	addi	r2,r8,48
   16754:	b0800005 	stb	r2,0(r22)
   16758:	d8800417 	ldw	r2,16(sp)
   1675c:	b7000044 	addi	fp,r22,1
   16760:	11800060 	cmpeqi	r6,r2,1
   16764:	2005883a 	mov	r2,r4
   16768:	30003d1e 	bne	r6,zero,16860 <_dtoa_r+0x92c>
   1676c:	01d00934 	movhi	r7,16420
   16770:	000ea000 	call	ea00 <__muldf3>
   16774:	000d883a 	mov	r6,zero
   16778:	000f883a 	mov	r7,zero
   1677c:	1009883a 	mov	r4,r2
   16780:	180b883a 	mov	r5,r3
   16784:	1029883a 	mov	r20,r2
   16788:	182b883a 	mov	r21,r3
   1678c:	001f7e40 	call	1f7e4 <__eqdf2>
   16790:	10017126 	beq	r2,zero,16d58 <_dtoa_r+0xe24>
   16794:	d8800417 	ldw	r2,16(sp)
   16798:	dc000215 	stw	r16,8(sp)
   1679c:	b4c00084 	addi	r19,r22,2
   167a0:	b085883a 	add	r2,r22,r2
   167a4:	a821883a 	mov	r16,r21
   167a8:	dd800115 	stw	r22,4(sp)
   167ac:	a02b883a 	mov	r21,r20
   167b0:	1029883a 	mov	r20,r2
   167b4:	00000a06 	br	167e0 <_dtoa_r+0x8ac>
   167b8:	000ea000 	call	ea00 <__muldf3>
   167bc:	000d883a 	mov	r6,zero
   167c0:	000f883a 	mov	r7,zero
   167c4:	1009883a 	mov	r4,r2
   167c8:	180b883a 	mov	r5,r3
   167cc:	102b883a 	mov	r21,r2
   167d0:	1821883a 	mov	r16,r3
   167d4:	9cc00044 	addi	r19,r19,1
   167d8:	001f7e40 	call	1f7e4 <__eqdf2>
   167dc:	10026c26 	beq	r2,zero,17190 <_dtoa_r+0x125c>
   167e0:	880d883a 	mov	r6,r17
   167e4:	900f883a 	mov	r7,r18
   167e8:	a809883a 	mov	r4,r21
   167ec:	800b883a 	mov	r5,r16
   167f0:	000e0540 	call	e054 <__divdf3>
   167f4:	180b883a 	mov	r5,r3
   167f8:	1009883a 	mov	r4,r2
   167fc:	000f9b00 	call	f9b0 <__fixdfsi>
   16800:	1009883a 	mov	r4,r2
   16804:	102d883a 	mov	r22,r2
   16808:	001f9980 	call	1f998 <__floatsidf>
   1680c:	880d883a 	mov	r6,r17
   16810:	900f883a 	mov	r7,r18
   16814:	1009883a 	mov	r4,r2
   16818:	180b883a 	mov	r5,r3
   1681c:	000ea000 	call	ea00 <__muldf3>
   16820:	100d883a 	mov	r6,r2
   16824:	180f883a 	mov	r7,r3
   16828:	a809883a 	mov	r4,r21
   1682c:	800b883a 	mov	r5,r16
   16830:	000f0dc0 	call	f0dc <__subdf3>
   16834:	b2400c04 	addi	r9,r22,48
   16838:	9a7fffc5 	stb	r9,-1(r19)
   1683c:	000d883a 	mov	r6,zero
   16840:	01d00934 	movhi	r7,16420
   16844:	1009883a 	mov	r4,r2
   16848:	180b883a 	mov	r5,r3
   1684c:	9839883a 	mov	fp,r19
   16850:	a4ffd91e 	bne	r20,r19,167b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff67b8>
   16854:	b011883a 	mov	r8,r22
   16858:	dc000217 	ldw	r16,8(sp)
   1685c:	dd800117 	ldw	r22,4(sp)
   16860:	100d883a 	mov	r6,r2
   16864:	180f883a 	mov	r7,r3
   16868:	1009883a 	mov	r4,r2
   1686c:	180b883a 	mov	r5,r3
   16870:	da000115 	stw	r8,4(sp)
   16874:	000d7940 	call	d794 <__adddf3>
   16878:	880d883a 	mov	r6,r17
   1687c:	900f883a 	mov	r7,r18
   16880:	1009883a 	mov	r4,r2
   16884:	180b883a 	mov	r5,r3
   16888:	1029883a 	mov	r20,r2
   1688c:	1827883a 	mov	r19,r3
   16890:	000e9200 	call	e920 <__gedf2>
   16894:	da000117 	ldw	r8,4(sp)
   16898:	00800a16 	blt	zero,r2,168c4 <_dtoa_r+0x990>
   1689c:	880d883a 	mov	r6,r17
   168a0:	900f883a 	mov	r7,r18
   168a4:	a009883a 	mov	r4,r20
   168a8:	980b883a 	mov	r5,r19
   168ac:	da000115 	stw	r8,4(sp)
   168b0:	001f7e40 	call	1f7e4 <__eqdf2>
   168b4:	1001281e 	bne	r2,zero,16d58 <_dtoa_r+0xe24>
   168b8:	da000117 	ldw	r8,4(sp)
   168bc:	4200004c 	andi	r8,r8,1
   168c0:	40012526 	beq	r8,zero,16d58 <_dtoa_r+0xe24>
   168c4:	e23fffc3 	ldbu	r8,-1(fp)
   168c8:	00000306 	br	168d8 <_dtoa_r+0x9a4>
   168cc:	b0c29726 	beq	r22,r3,1732c <_dtoa_r+0x13f8>
   168d0:	1a3fffc3 	ldbu	r8,-1(r3)
   168d4:	1839883a 	mov	fp,r3
   168d8:	40803fcc 	andi	r2,r8,255
   168dc:	1080201c 	xori	r2,r2,128
   168e0:	10bfe004 	addi	r2,r2,-128
   168e4:	10800e60 	cmpeqi	r2,r2,57
   168e8:	e0ffffc4 	addi	r3,fp,-1
   168ec:	103ff71e 	bne	r2,zero,168cc <__alt_mem_mcu_subsystem_ram_0+0x77ff68cc>
   168f0:	42000044 	addi	r8,r8,1
   168f4:	1a000005 	stb	r8,0(r3)
   168f8:	00011706 	br	16d58 <_dtoa_r+0xe24>
   168fc:	d8c00617 	ldw	r3,24(sp)
   16900:	1800b626 	beq	r3,zero,16bdc <_dtoa_r+0xca8>
   16904:	d8c00217 	ldw	r3,8(sp)
   16908:	18c00088 	cmpgei	r3,r3,2
   1690c:	18016326 	beq	r3,zero,16e9c <_dtoa_r+0xf68>
   16910:	d8800417 	ldw	r2,16(sp)
   16914:	14bfffc4 	addi	r18,r2,-1
   16918:	d8800717 	ldw	r2,28(sp)
   1691c:	14821f16 	blt	r2,r18,1719c <_dtoa_r+0x1268>
   16920:	14a5c83a 	sub	r18,r2,r18
   16924:	d8800417 	ldw	r2,16(sp)
   16928:	10023b16 	blt	r2,zero,17218 <_dtoa_r+0x12e4>
   1692c:	d8c00517 	ldw	r3,20(sp)
   16930:	a8ab883a 	add	r21,r21,r2
   16934:	10c5883a 	add	r2,r2,r3
   16938:	1829883a 	mov	r20,r3
   1693c:	d8800515 	stw	r2,20(sp)
   16940:	01400044 	movi	r5,1
   16944:	8009883a 	mov	r4,r16
   16948:	0018f2c0 	call	18f2c <__i2b>
   1694c:	1023883a 	mov	r17,r2
   16950:	0500080e 	bge	zero,r20,16974 <_dtoa_r+0xa40>
   16954:	0540070e 	bge	zero,r21,16974 <_dtoa_r+0xa40>
   16958:	a005883a 	mov	r2,r20
   1695c:	ad013716 	blt	r21,r20,16e3c <_dtoa_r+0xf08>
   16960:	d8c00517 	ldw	r3,20(sp)
   16964:	a0a9c83a 	sub	r20,r20,r2
   16968:	a8abc83a 	sub	r21,r21,r2
   1696c:	1887c83a 	sub	r3,r3,r2
   16970:	d8c00515 	stw	r3,20(sp)
   16974:	d8800717 	ldw	r2,28(sp)
   16978:	10000926 	beq	r2,zero,169a0 <_dtoa_r+0xa6c>
   1697c:	d8c00617 	ldw	r3,24(sp)
   16980:	1801fd26 	beq	r3,zero,17178 <_dtoa_r+0x1244>
   16984:	14b9c83a 	sub	fp,r2,r18
   16988:	90012e1e 	bne	r18,zero,16e44 <_dtoa_r+0xf10>
   1698c:	b80b883a 	mov	r5,r23
   16990:	e00d883a 	mov	r6,fp
   16994:	8009883a 	mov	r4,r16
   16998:	001915c0 	call	1915c <__pow5mult>
   1699c:	102f883a 	mov	r23,r2
   169a0:	01400044 	movi	r5,1
   169a4:	8009883a 	mov	r4,r16
   169a8:	0018f2c0 	call	18f2c <__i2b>
   169ac:	d9800817 	ldw	r6,32(sp)
   169b0:	1025883a 	mov	r18,r2
   169b4:	3000f61e 	bne	r6,zero,16d90 <_dtoa_r+0xe5c>
   169b8:	d8800217 	ldw	r2,8(sp)
   169bc:	10800090 	cmplti	r2,r2,2
   169c0:	10010d1e 	bne	r2,zero,16df8 <_dtoa_r+0xec4>
   169c4:	00800044 	movi	r2,1
   169c8:	1545883a 	add	r2,r2,r21
   169cc:	108007cc 	andi	r2,r2,31
   169d0:	1000ed26 	beq	r2,zero,16d88 <_dtoa_r+0xe54>
   169d4:	00c00804 	movi	r3,32
   169d8:	1887c83a 	sub	r3,r3,r2
   169dc:	19000150 	cmplti	r4,r3,5
   169e0:	2002f41e 	bne	r4,zero,175b4 <_dtoa_r+0x1680>
   169e4:	00c00704 	movi	r3,28
   169e8:	1885c83a 	sub	r2,r3,r2
   169ec:	d8c00517 	ldw	r3,20(sp)
   169f0:	a0a9883a 	add	r20,r20,r2
   169f4:	a8ab883a 	add	r21,r21,r2
   169f8:	1887883a 	add	r3,r3,r2
   169fc:	d8c00515 	stw	r3,20(sp)
   16a00:	d8800517 	ldw	r2,20(sp)
   16a04:	00807916 	blt	zero,r2,16bec <_dtoa_r+0xcb8>
   16a08:	0540050e 	bge	zero,r21,16a20 <_dtoa_r+0xaec>
   16a0c:	900b883a 	mov	r5,r18
   16a10:	a80d883a 	mov	r6,r21
   16a14:	8009883a 	mov	r4,r16
   16a18:	00192800 	call	19280 <__lshift>
   16a1c:	1025883a 	mov	r18,r2
   16a20:	d8800917 	ldw	r2,36(sp)
   16a24:	1000771e 	bne	r2,zero,16c04 <_dtoa_r+0xcd0>
   16a28:	d8800417 	ldw	r2,16(sp)
   16a2c:	00818f0e 	bge	zero,r2,1706c <_dtoa_r+0x1138>
   16a30:	d8800617 	ldw	r2,24(sp)
   16a34:	10008526 	beq	r2,zero,16c4c <_dtoa_r+0xd18>
   16a38:	05011216 	blt	zero,r20,16e84 <_dtoa_r+0xf50>
   16a3c:	d8800817 	ldw	r2,32(sp)
   16a40:	1001721e 	bne	r2,zero,1700c <_dtoa_r+0x10d8>
   16a44:	8829883a 	mov	r20,r17
   16a48:	d8c00417 	ldw	r3,16(sp)
   16a4c:	b0bfffc4 	addi	r2,r22,-1
   16a50:	b027883a 	mov	r19,r22
   16a54:	10c5883a 	add	r2,r2,r3
   16a58:	d8800515 	stw	r2,20(sp)
   16a5c:	d8800117 	ldw	r2,4(sp)
   16a60:	dd800715 	stw	r22,28(sp)
   16a64:	1080004c 	andi	r2,r2,1
   16a68:	d8800615 	stw	r2,24(sp)
   16a6c:	900b883a 	mov	r5,r18
   16a70:	b809883a 	mov	r4,r23
   16a74:	0015d3c0 	call	15d3c <quorem>
   16a78:	880b883a 	mov	r5,r17
   16a7c:	b809883a 	mov	r4,r23
   16a80:	102d883a 	mov	r22,r2
   16a84:	00193c40 	call	193c4 <__mcmp>
   16a88:	900b883a 	mov	r5,r18
   16a8c:	a00d883a 	mov	r6,r20
   16a90:	8009883a 	mov	r4,r16
   16a94:	102b883a 	mov	r21,r2
   16a98:	001941c0 	call	1941c <__mdiff>
   16a9c:	1007883a 	mov	r3,r2
   16aa0:	10800317 	ldw	r2,12(r2)
   16aa4:	b7000c04 	addi	fp,r22,48
   16aa8:	180b883a 	mov	r5,r3
   16aac:	10016b1e 	bne	r2,zero,1705c <_dtoa_r+0x1128>
   16ab0:	b809883a 	mov	r4,r23
   16ab4:	d8c00415 	stw	r3,16(sp)
   16ab8:	00193c40 	call	193c4 <__mcmp>
   16abc:	d8c00417 	ldw	r3,16(sp)
   16ac0:	8009883a 	mov	r4,r16
   16ac4:	d8800115 	stw	r2,4(sp)
   16ac8:	180b883a 	mov	r5,r3
   16acc:	0018bd00 	call	18bd0 <_Bfree>
   16ad0:	d8800117 	ldw	r2,4(sp)
   16ad4:	1000051e 	bne	r2,zero,16aec <_dtoa_r+0xbb8>
   16ad8:	d8c00217 	ldw	r3,8(sp)
   16adc:	1800031e 	bne	r3,zero,16aec <_dtoa_r+0xbb8>
   16ae0:	d8800617 	ldw	r2,24(sp)
   16ae4:	10028d26 	beq	r2,zero,1751c <_dtoa_r+0x15e8>
   16ae8:	d8800217 	ldw	r2,8(sp)
   16aec:	a801b316 	blt	r21,zero,171bc <_dtoa_r+0x1288>
   16af0:	a800041e 	bne	r21,zero,16b04 <_dtoa_r+0xbd0>
   16af4:	d8c00217 	ldw	r3,8(sp)
   16af8:	1800021e 	bne	r3,zero,16b04 <_dtoa_r+0xbd0>
   16afc:	d8c00617 	ldw	r3,24(sp)
   16b00:	1801ae26 	beq	r3,zero,171bc <_dtoa_r+0x1288>
   16b04:	9d400044 	addi	r21,r19,1
   16b08:	0081bc16 	blt	zero,r2,171fc <_dtoa_r+0x12c8>
   16b0c:	d8800517 	ldw	r2,20(sp)
   16b10:	9f000005 	stb	fp,0(r19)
   16b14:	14c1c426 	beq	r2,r19,17228 <_dtoa_r+0x12f4>
   16b18:	b80b883a 	mov	r5,r23
   16b1c:	000f883a 	mov	r7,zero
   16b20:	01800284 	movi	r6,10
   16b24:	8009883a 	mov	r4,r16
   16b28:	0018bf40 	call	18bf4 <__multadd>
   16b2c:	102f883a 	mov	r23,r2
   16b30:	000f883a 	mov	r7,zero
   16b34:	01800284 	movi	r6,10
   16b38:	880b883a 	mov	r5,r17
   16b3c:	8009883a 	mov	r4,r16
   16b40:	8d014226 	beq	r17,r20,1704c <_dtoa_r+0x1118>
   16b44:	0018bf40 	call	18bf4 <__multadd>
   16b48:	a00b883a 	mov	r5,r20
   16b4c:	000f883a 	mov	r7,zero
   16b50:	01800284 	movi	r6,10
   16b54:	8009883a 	mov	r4,r16
   16b58:	1023883a 	mov	r17,r2
   16b5c:	0018bf40 	call	18bf4 <__multadd>
   16b60:	1029883a 	mov	r20,r2
   16b64:	a827883a 	mov	r19,r21
   16b68:	003fc006 	br	16a6c <__alt_mem_mcu_subsystem_ram_0+0x77ff6a6c>
   16b6c:	00800044 	movi	r2,1
   16b70:	d8800915 	stw	r2,36(sp)
   16b74:	003d8906 	br	1619c <__alt_mem_mcu_subsystem_ram_0+0x77ff619c>
   16b78:	d8c00517 	ldw	r3,20(sp)
   16b7c:	d8800317 	ldw	r2,12(sp)
   16b80:	d8000815 	stw	zero,32(sp)
   16b84:	1887c83a 	sub	r3,r3,r2
   16b88:	0085c83a 	sub	r2,zero,r2
   16b8c:	d8c00515 	stw	r3,20(sp)
   16b90:	d8800715 	stw	r2,28(sp)
   16b94:	003d8a06 	br	161c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff61c0>
   16b98:	04800044 	movi	r18,1
   16b9c:	9445c83a 	sub	r2,r18,r17
   16ba0:	d8800515 	stw	r2,20(sp)
   16ba4:	002b883a 	mov	r21,zero
   16ba8:	003d8006 	br	161ac <__alt_mem_mcu_subsystem_ram_0+0x77ff61ac>
   16bac:	dd800317 	ldw	r22,12(sp)
   16bb0:	b009883a 	mov	r4,r22
   16bb4:	001f9980 	call	1f998 <__floatsidf>
   16bb8:	a80d883a 	mov	r6,r21
   16bbc:	a00f883a 	mov	r7,r20
   16bc0:	1009883a 	mov	r4,r2
   16bc4:	180b883a 	mov	r5,r3
   16bc8:	001f7e40 	call	1f7e4 <__eqdf2>
   16bcc:	103d6326 	beq	r2,zero,1615c <__alt_mem_mcu_subsystem_ram_0+0x77ff615c>
   16bd0:	b0bfffc4 	addi	r2,r22,-1
   16bd4:	d8800315 	stw	r2,12(sp)
   16bd8:	003d6006 	br	1615c <__alt_mem_mcu_subsystem_ram_0+0x77ff615c>
   16bdc:	dc800717 	ldw	r18,28(sp)
   16be0:	dd000517 	ldw	r20,20(sp)
   16be4:	0023883a 	mov	r17,zero
   16be8:	003f5906 	br	16950 <__alt_mem_mcu_subsystem_ram_0+0x77ff6950>
   16bec:	b80b883a 	mov	r5,r23
   16bf0:	100d883a 	mov	r6,r2
   16bf4:	8009883a 	mov	r4,r16
   16bf8:	00192800 	call	19280 <__lshift>
   16bfc:	102f883a 	mov	r23,r2
   16c00:	003f8106 	br	16a08 <__alt_mem_mcu_subsystem_ram_0+0x77ff6a08>
   16c04:	900b883a 	mov	r5,r18
   16c08:	b809883a 	mov	r4,r23
   16c0c:	00193c40 	call	193c4 <__mcmp>
   16c10:	103f850e 	bge	r2,zero,16a28 <__alt_mem_mcu_subsystem_ram_0+0x77ff6a28>
   16c14:	b80b883a 	mov	r5,r23
   16c18:	000f883a 	mov	r7,zero
   16c1c:	01800284 	movi	r6,10
   16c20:	8009883a 	mov	r4,r16
   16c24:	0018bf40 	call	18bf4 <__multadd>
   16c28:	102f883a 	mov	r23,r2
   16c2c:	d8800317 	ldw	r2,12(sp)
   16c30:	10bfffc4 	addi	r2,r2,-1
   16c34:	d8800315 	stw	r2,12(sp)
   16c38:	d8800617 	ldw	r2,24(sp)
   16c3c:	1002441e 	bne	r2,zero,17550 <_dtoa_r+0x161c>
   16c40:	d8800a17 	ldw	r2,40(sp)
   16c44:	00824d0e 	bge	zero,r2,1757c <_dtoa_r+0x1648>
   16c48:	d8800415 	stw	r2,16(sp)
   16c4c:	b039883a 	mov	fp,r22
   16c50:	dcc00417 	ldw	r19,16(sp)
   16c54:	00000206 	br	16c60 <_dtoa_r+0xd2c>
   16c58:	0018bf40 	call	18bf4 <__multadd>
   16c5c:	102f883a 	mov	r23,r2
   16c60:	900b883a 	mov	r5,r18
   16c64:	b809883a 	mov	r4,r23
   16c68:	0015d3c0 	call	15d3c <quorem>
   16c6c:	12000c04 	addi	r8,r2,48
   16c70:	e7000044 	addi	fp,fp,1
   16c74:	e23fffc5 	stb	r8,-1(fp)
   16c78:	e585c83a 	sub	r2,fp,r22
   16c7c:	000f883a 	mov	r7,zero
   16c80:	01800284 	movi	r6,10
   16c84:	b80b883a 	mov	r5,r23
   16c88:	8009883a 	mov	r4,r16
   16c8c:	14fff216 	blt	r2,r19,16c58 <__alt_mem_mcu_subsystem_ram_0+0x77ff6c58>
   16c90:	002b883a 	mov	r21,zero
   16c94:	b80b883a 	mov	r5,r23
   16c98:	01800044 	movi	r6,1
   16c9c:	8009883a 	mov	r4,r16
   16ca0:	da000115 	stw	r8,4(sp)
   16ca4:	00192800 	call	19280 <__lshift>
   16ca8:	900b883a 	mov	r5,r18
   16cac:	1009883a 	mov	r4,r2
   16cb0:	102f883a 	mov	r23,r2
   16cb4:	00193c40 	call	193c4 <__mcmp>
   16cb8:	da000117 	ldw	r8,4(sp)
   16cbc:	e0ffffc3 	ldbu	r3,-1(fp)
   16cc0:	00801116 	blt	zero,r2,16d08 <_dtoa_r+0xdd4>
   16cc4:	1000021e 	bne	r2,zero,16cd0 <_dtoa_r+0xd9c>
   16cc8:	4200004c 	andi	r8,r8,1
   16ccc:	40000e1e 	bne	r8,zero,16d08 <_dtoa_r+0xdd4>
   16cd0:	1805883a 	mov	r2,r3
   16cd4:	00000206 	br	16ce0 <_dtoa_r+0xdac>
   16cd8:	e0bfff83 	ldbu	r2,-2(fp)
   16cdc:	1839883a 	mov	fp,r3
   16ce0:	10803fcc 	andi	r2,r2,255
   16ce4:	1080201c 	xori	r2,r2,128
   16ce8:	10bfe004 	addi	r2,r2,-128
   16cec:	10800c18 	cmpnei	r2,r2,48
   16cf0:	e0ffffc4 	addi	r3,fp,-1
   16cf4:	103ff826 	beq	r2,zero,16cd8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6cd8>
   16cf8:	00000b06 	br	16d28 <_dtoa_r+0xdf4>
   16cfc:	2580e926 	beq	r4,r22,170a4 <_dtoa_r+0x1170>
   16d00:	20ffffc3 	ldbu	r3,-1(r4)
   16d04:	2039883a 	mov	fp,r4
   16d08:	18803fcc 	andi	r2,r3,255
   16d0c:	1080201c 	xori	r2,r2,128
   16d10:	10bfe004 	addi	r2,r2,-128
   16d14:	10800e60 	cmpeqi	r2,r2,57
   16d18:	e13fffc4 	addi	r4,fp,-1
   16d1c:	103ff71e 	bne	r2,zero,16cfc <__alt_mem_mcu_subsystem_ram_0+0x77ff6cfc>
   16d20:	18c00044 	addi	r3,r3,1
   16d24:	20c00005 	stb	r3,0(r4)
   16d28:	900b883a 	mov	r5,r18
   16d2c:	8009883a 	mov	r4,r16
   16d30:	0018bd00 	call	18bd0 <_Bfree>
   16d34:	88000826 	beq	r17,zero,16d58 <_dtoa_r+0xe24>
   16d38:	a8000426 	beq	r21,zero,16d4c <_dtoa_r+0xe18>
   16d3c:	ac400326 	beq	r21,r17,16d4c <_dtoa_r+0xe18>
   16d40:	a80b883a 	mov	r5,r21
   16d44:	8009883a 	mov	r4,r16
   16d48:	0018bd00 	call	18bd0 <_Bfree>
   16d4c:	880b883a 	mov	r5,r17
   16d50:	8009883a 	mov	r4,r16
   16d54:	0018bd00 	call	18bd0 <_Bfree>
   16d58:	b80b883a 	mov	r5,r23
   16d5c:	8009883a 	mov	r4,r16
   16d60:	0018bd00 	call	18bd0 <_Bfree>
   16d64:	d8800317 	ldw	r2,12(sp)
   16d68:	d8c02117 	ldw	r3,132(sp)
   16d6c:	e0000005 	stb	zero,0(fp)
   16d70:	10800044 	addi	r2,r2,1
   16d74:	18800015 	stw	r2,0(r3)
   16d78:	d8802317 	ldw	r2,140(sp)
   16d7c:	103c9e26 	beq	r2,zero,15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   16d80:	17000015 	stw	fp,0(r2)
   16d84:	003c9c06 	br	15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   16d88:	00800704 	movi	r2,28
   16d8c:	003f1706 	br	169ec <__alt_mem_mcu_subsystem_ram_0+0x77ff69ec>
   16d90:	100b883a 	mov	r5,r2
   16d94:	8009883a 	mov	r4,r16
   16d98:	001915c0 	call	1915c <__pow5mult>
   16d9c:	1025883a 	mov	r18,r2
   16da0:	d8800217 	ldw	r2,8(sp)
   16da4:	10800090 	cmplti	r2,r2,2
   16da8:	1000951e 	bne	r2,zero,17000 <_dtoa_r+0x10cc>
   16dac:	d8000815 	stw	zero,32(sp)
   16db0:	90800417 	ldw	r2,16(r18)
   16db4:	10800104 	addi	r2,r2,4
   16db8:	100490ba 	slli	r2,r2,2
   16dbc:	9085883a 	add	r2,r18,r2
   16dc0:	11000017 	ldw	r4,0(r2)
   16dc4:	0018e180 	call	18e18 <__hi0bits>
   16dc8:	00c00804 	movi	r3,32
   16dcc:	1885c83a 	sub	r2,r3,r2
   16dd0:	003efd06 	br	169c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff69c8>
   16dd4:	d8000915 	stw	zero,36(sp)
   16dd8:	003cf006 	br	1619c <__alt_mem_mcu_subsystem_ram_0+0x77ff619c>
   16ddc:	04400044 	movi	r17,1
   16de0:	003cff06 	br	161e0 <__alt_mem_mcu_subsystem_ram_0+0x77ff61e0>
   16de4:	01000804 	movi	r4,32
   16de8:	2089c83a 	sub	r4,r4,r2
   16dec:	d8800117 	ldw	r2,4(sp)
   16df0:	1108983a 	sll	r4,r2,r4
   16df4:	003ca506 	br	1608c <__alt_mem_mcu_subsystem_ram_0+0x77ff608c>
   16df8:	d8800117 	ldw	r2,4(sp)
   16dfc:	103ef11e 	bne	r2,zero,169c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff69c4>
   16e00:	00800434 	movhi	r2,16
   16e04:	10bfffc4 	addi	r2,r2,-1
   16e08:	9884703a 	and	r2,r19,r2
   16e0c:	1000f91e 	bne	r2,zero,171f4 <_dtoa_r+0x12c0>
   16e10:	9cdffc2c 	andhi	r19,r19,32752
   16e14:	9800f726 	beq	r19,zero,171f4 <_dtoa_r+0x12c0>
   16e18:	d8800517 	ldw	r2,20(sp)
   16e1c:	ad400044 	addi	r21,r21,1
   16e20:	10800044 	addi	r2,r2,1
   16e24:	d8800515 	stw	r2,20(sp)
   16e28:	00800044 	movi	r2,1
   16e2c:	d8c00817 	ldw	r3,32(sp)
   16e30:	d8800815 	stw	r2,32(sp)
   16e34:	183ee326 	beq	r3,zero,169c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff69c4>
   16e38:	003fdd06 	br	16db0 <__alt_mem_mcu_subsystem_ram_0+0x77ff6db0>
   16e3c:	a805883a 	mov	r2,r21
   16e40:	003ec706 	br	16960 <__alt_mem_mcu_subsystem_ram_0+0x77ff6960>
   16e44:	900d883a 	mov	r6,r18
   16e48:	880b883a 	mov	r5,r17
   16e4c:	8009883a 	mov	r4,r16
   16e50:	001915c0 	call	1915c <__pow5mult>
   16e54:	b80d883a 	mov	r6,r23
   16e58:	100b883a 	mov	r5,r2
   16e5c:	8009883a 	mov	r4,r16
   16e60:	1023883a 	mov	r17,r2
   16e64:	0018f600 	call	18f60 <__multiply>
   16e68:	1025883a 	mov	r18,r2
   16e6c:	b80b883a 	mov	r5,r23
   16e70:	8009883a 	mov	r4,r16
   16e74:	0018bd00 	call	18bd0 <_Bfree>
   16e78:	902f883a 	mov	r23,r18
   16e7c:	e03ec826 	beq	fp,zero,169a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff69a0>
   16e80:	003ec206 	br	1698c <__alt_mem_mcu_subsystem_ram_0+0x77ff698c>
   16e84:	880b883a 	mov	r5,r17
   16e88:	a00d883a 	mov	r6,r20
   16e8c:	8009883a 	mov	r4,r16
   16e90:	00192800 	call	19280 <__lshift>
   16e94:	1023883a 	mov	r17,r2
   16e98:	003ee806 	br	16a3c <__alt_mem_mcu_subsystem_ram_0+0x77ff6a3c>
   16e9c:	d8c00b17 	ldw	r3,44(sp)
   16ea0:	18012a26 	beq	r3,zero,1734c <_dtoa_r+0x1418>
   16ea4:	d8c00517 	ldw	r3,20(sp)
   16ea8:	10810cc4 	addi	r2,r2,1075
   16eac:	a8ab883a 	add	r21,r21,r2
   16eb0:	1885883a 	add	r2,r3,r2
   16eb4:	1829883a 	mov	r20,r3
   16eb8:	dc800717 	ldw	r18,28(sp)
   16ebc:	d8800515 	stw	r2,20(sp)
   16ec0:	003e9f06 	br	16940 <__alt_mem_mcu_subsystem_ram_0+0x77ff6940>
   16ec4:	00800044 	movi	r2,1
   16ec8:	d8800615 	stw	r2,24(sp)
   16ecc:	d8802017 	ldw	r2,128(sp)
   16ed0:	0080a20e 	bge	zero,r2,1715c <_dtoa_r+0x1228>
   16ed4:	d8800a15 	stw	r2,40(sp)
   16ed8:	d8800415 	stw	r2,16(sp)
   16edc:	100d883a 	mov	r6,r2
   16ee0:	003cd406 	br	16234 <__alt_mem_mcu_subsystem_ram_0+0x77ff6234>
   16ee4:	d8800417 	ldw	r2,16(sp)
   16ee8:	00be0016 	blt	zero,r2,166ec <__alt_mem_mcu_subsystem_ram_0+0x77ff66ec>
   16eec:	1000981e 	bne	r2,zero,17150 <_dtoa_r+0x121c>
   16ef0:	8809883a 	mov	r4,r17
   16ef4:	900b883a 	mov	r5,r18
   16ef8:	000d883a 	mov	r6,zero
   16efc:	01d00534 	movhi	r7,16404
   16f00:	000ea000 	call	ea00 <__muldf3>
   16f04:	d9800117 	ldw	r6,4(sp)
   16f08:	980f883a 	mov	r7,r19
   16f0c:	1009883a 	mov	r4,r2
   16f10:	180b883a 	mov	r5,r3
   16f14:	000e9200 	call	e920 <__gedf2>
   16f18:	0025883a 	mov	r18,zero
   16f1c:	0023883a 	mov	r17,zero
   16f20:	1000570e 	bge	r2,zero,17080 <_dtoa_r+0x114c>
   16f24:	00800c44 	movi	r2,49
   16f28:	b0800005 	stb	r2,0(r22)
   16f2c:	d8800317 	ldw	r2,12(sp)
   16f30:	b7000044 	addi	fp,r22,1
   16f34:	10800044 	addi	r2,r2,1
   16f38:	d8800315 	stw	r2,12(sp)
   16f3c:	900b883a 	mov	r5,r18
   16f40:	8009883a 	mov	r4,r16
   16f44:	0018bd00 	call	18bd0 <_Bfree>
   16f48:	883f801e 	bne	r17,zero,16d4c <__alt_mem_mcu_subsystem_ram_0+0x77ff6d4c>
   16f4c:	003f8206 	br	16d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d58>
   16f50:	d8800317 	ldw	r2,12(sp)
   16f54:	10011226 	beq	r2,zero,173a0 <_dtoa_r+0x146c>
   16f58:	0089c83a 	sub	r4,zero,r2
   16f5c:	208003cc 	andi	r2,r4,15
   16f60:	100690fa 	slli	r3,r2,3
   16f64:	008000b4 	movhi	r2,2
   16f68:	109bfc04 	addi	r2,r2,28656
   16f6c:	10c5883a 	add	r2,r2,r3
   16f70:	2011d13a 	srai	r8,r4,4
   16f74:	11800017 	ldw	r6,0(r2)
   16f78:	11c00117 	ldw	r7,4(r2)
   16f7c:	d9000117 	ldw	r4,4(sp)
   16f80:	980b883a 	mov	r5,r19
   16f84:	da000c15 	stw	r8,48(sp)
   16f88:	000ea000 	call	ea00 <__muldf3>
   16f8c:	da000c17 	ldw	r8,48(sp)
   16f90:	1025883a 	mov	r18,r2
   16f94:	1829883a 	mov	r20,r3
   16f98:	40017d26 	beq	r8,zero,17590 <_dtoa_r+0x165c>
   16f9c:	070000b4 	movhi	fp,2
   16fa0:	e71bf204 	addi	fp,fp,28616
   16fa4:	dc000c15 	stw	r16,48(sp)
   16fa8:	000f883a 	mov	r7,zero
   16fac:	e021883a 	mov	r16,fp
   16fb0:	04400084 	movi	r17,2
   16fb4:	4039883a 	mov	fp,r8
   16fb8:	e180004c 	andi	r6,fp,1
   16fbc:	1009883a 	mov	r4,r2
   16fc0:	e039d07a 	srai	fp,fp,1
   16fc4:	180b883a 	mov	r5,r3
   16fc8:	30000526 	beq	r6,zero,16fe0 <_dtoa_r+0x10ac>
   16fcc:	81c00117 	ldw	r7,4(r16)
   16fd0:	81800017 	ldw	r6,0(r16)
   16fd4:	8c400044 	addi	r17,r17,1
   16fd8:	000ea000 	call	ea00 <__muldf3>
   16fdc:	01c00044 	movi	r7,1
   16fe0:	84000204 	addi	r16,r16,8
   16fe4:	e03ff41e 	bne	fp,zero,16fb8 <__alt_mem_mcu_subsystem_ram_0+0x77ff6fb8>
   16fe8:	39c03fcc 	andi	r7,r7,255
   16fec:	dc000c17 	ldw	r16,48(sp)
   16ff0:	383d1326 	beq	r7,zero,16440 <__alt_mem_mcu_subsystem_ram_0+0x77ff6440>
   16ff4:	1025883a 	mov	r18,r2
   16ff8:	1829883a 	mov	r20,r3
   16ffc:	003d1006 	br	16440 <__alt_mem_mcu_subsystem_ram_0+0x77ff6440>
   17000:	d8800117 	ldw	r2,4(sp)
   17004:	103f7e26 	beq	r2,zero,16e00 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e00>
   17008:	003f6806 	br	16dac <__alt_mem_mcu_subsystem_ram_0+0x77ff6dac>
   1700c:	89400117 	ldw	r5,4(r17)
   17010:	8009883a 	mov	r4,r16
   17014:	0018b2c0 	call	18b2c <_Balloc>
   17018:	89800417 	ldw	r6,16(r17)
   1701c:	89400304 	addi	r5,r17,12
   17020:	11000304 	addi	r4,r2,12
   17024:	31800084 	addi	r6,r6,2
   17028:	300c90ba 	slli	r6,r6,2
   1702c:	1027883a 	mov	r19,r2
   17030:	00106380 	call	10638 <memcpy>
   17034:	01800044 	movi	r6,1
   17038:	980b883a 	mov	r5,r19
   1703c:	8009883a 	mov	r4,r16
   17040:	00192800 	call	19280 <__lshift>
   17044:	1029883a 	mov	r20,r2
   17048:	003e7f06 	br	16a48 <__alt_mem_mcu_subsystem_ram_0+0x77ff6a48>
   1704c:	0018bf40 	call	18bf4 <__multadd>
   17050:	1023883a 	mov	r17,r2
   17054:	1029883a 	mov	r20,r2
   17058:	003ec206 	br	16b64 <__alt_mem_mcu_subsystem_ram_0+0x77ff6b64>
   1705c:	8009883a 	mov	r4,r16
   17060:	0018bd00 	call	18bd0 <_Bfree>
   17064:	00800044 	movi	r2,1
   17068:	003ea006 	br	16aec <__alt_mem_mcu_subsystem_ram_0+0x77ff6aec>
   1706c:	d8800217 	ldw	r2,8(sp)
   17070:	108000d0 	cmplti	r2,r2,3
   17074:	103e6e1e 	bne	r2,zero,16a30 <__alt_mem_mcu_subsystem_ram_0+0x77ff6a30>
   17078:	d8800417 	ldw	r2,16(sp)
   1707c:	1000bd26 	beq	r2,zero,17374 <_dtoa_r+0x1440>
   17080:	d8802017 	ldw	r2,128(sp)
   17084:	b039883a 	mov	fp,r22
   17088:	0084303a 	nor	r2,zero,r2
   1708c:	d8800315 	stw	r2,12(sp)
   17090:	003faa06 	br	16f3c <__alt_mem_mcu_subsystem_ram_0+0x77ff6f3c>
   17094:	188000a0 	cmpeqi	r2,r3,2
   17098:	10010e26 	beq	r2,zero,174d4 <_dtoa_r+0x15a0>
   1709c:	d8000615 	stw	zero,24(sp)
   170a0:	003f8a06 	br	16ecc <__alt_mem_mcu_subsystem_ram_0+0x77ff6ecc>
   170a4:	d8800317 	ldw	r2,12(sp)
   170a8:	10800044 	addi	r2,r2,1
   170ac:	d8800315 	stw	r2,12(sp)
   170b0:	00800c44 	movi	r2,49
   170b4:	b0800005 	stb	r2,0(r22)
   170b8:	003f1b06 	br	16d28 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d28>
   170bc:	8809883a 	mov	r4,r17
   170c0:	001f9980 	call	1f998 <__floatsidf>
   170c4:	900d883a 	mov	r6,r18
   170c8:	a00f883a 	mov	r7,r20
   170cc:	1009883a 	mov	r4,r2
   170d0:	180b883a 	mov	r5,r3
   170d4:	000ea000 	call	ea00 <__muldf3>
   170d8:	000d883a 	mov	r6,zero
   170dc:	01d00734 	movhi	r7,16412
   170e0:	1009883a 	mov	r4,r2
   170e4:	180b883a 	mov	r5,r3
   170e8:	000d7940 	call	d794 <__adddf3>
   170ec:	d8800c15 	stw	r2,48(sp)
   170f0:	00bf3034 	movhi	r2,64704
   170f4:	1885883a 	add	r2,r3,r2
   170f8:	d8800d15 	stw	r2,52(sp)
   170fc:	9009883a 	mov	r4,r18
   17100:	a00b883a 	mov	r5,r20
   17104:	000d883a 	mov	r6,zero
   17108:	01d00534 	movhi	r7,16404
   1710c:	000f0dc0 	call	f0dc <__subdf3>
   17110:	df000c17 	ldw	fp,48(sp)
   17114:	dd000d17 	ldw	r20,52(sp)
   17118:	1009883a 	mov	r4,r2
   1711c:	e00d883a 	mov	r6,fp
   17120:	a00f883a 	mov	r7,r20
   17124:	180b883a 	mov	r5,r3
   17128:	1025883a 	mov	r18,r2
   1712c:	1823883a 	mov	r17,r3
   17130:	000e9200 	call	e920 <__gedf2>
   17134:	00807a16 	blt	zero,r2,17320 <_dtoa_r+0x13ec>
   17138:	a1e0003c 	xorhi	r7,r20,32768
   1713c:	e00d883a 	mov	r6,fp
   17140:	9009883a 	mov	r4,r18
   17144:	880b883a 	mov	r5,r17
   17148:	001f8640 	call	1f864 <__ledf2>
   1714c:	103d5a0e 	bge	r2,zero,166b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff66b8>
   17150:	0025883a 	mov	r18,zero
   17154:	0023883a 	mov	r17,zero
   17158:	003fc906 	br	17080 <__alt_mem_mcu_subsystem_ram_0+0x77ff7080>
   1715c:	00800044 	movi	r2,1
   17160:	04800044 	movi	r18,1
   17164:	d8800415 	stw	r2,16(sp)
   17168:	d8802015 	stw	r2,128(sp)
   1716c:	003c7706 	br	1634c <__alt_mem_mcu_subsystem_ram_0+0x77ff634c>
   17170:	d8000615 	stw	zero,24(sp)
   17174:	003c2606 	br	16210 <__alt_mem_mcu_subsystem_ram_0+0x77ff6210>
   17178:	d9800717 	ldw	r6,28(sp)
   1717c:	b80b883a 	mov	r5,r23
   17180:	8009883a 	mov	r4,r16
   17184:	001915c0 	call	1915c <__pow5mult>
   17188:	102f883a 	mov	r23,r2
   1718c:	003e0406 	br	169a0 <__alt_mem_mcu_subsystem_ram_0+0x77ff69a0>
   17190:	dd800117 	ldw	r22,4(sp)
   17194:	dc000217 	ldw	r16,8(sp)
   17198:	003eef06 	br	16d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d58>
   1719c:	d8800717 	ldw	r2,28(sp)
   171a0:	d8c00817 	ldw	r3,32(sp)
   171a4:	dc800715 	stw	r18,28(sp)
   171a8:	9085c83a 	sub	r2,r18,r2
   171ac:	1885883a 	add	r2,r3,r2
   171b0:	d8800815 	stw	r2,32(sp)
   171b4:	0025883a 	mov	r18,zero
   171b8:	003dda06 	br	16924 <__alt_mem_mcu_subsystem_ram_0+0x77ff6924>
   171bc:	b02b883a 	mov	r21,r22
   171c0:	e011883a 	mov	r8,fp
   171c4:	dd800717 	ldw	r22,28(sp)
   171c8:	9f000044 	addi	fp,r19,1
   171cc:	00809816 	blt	zero,r2,17430 <_dtoa_r+0x14fc>
   171d0:	882b883a 	mov	r21,r17
   171d4:	9a000005 	stb	r8,0(r19)
   171d8:	a023883a 	mov	r17,r20
   171dc:	003ed206 	br	16d28 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d28>
   171e0:	d8800117 	ldw	r2,4(sp)
   171e4:	dcc00d15 	stw	r19,52(sp)
   171e8:	04400084 	movi	r17,2
   171ec:	d8800c15 	stw	r2,48(sp)
   171f0:	003c7a06 	br	163dc <__alt_mem_mcu_subsystem_ram_0+0x77ff63dc>
   171f4:	0005883a 	mov	r2,zero
   171f8:	003f0c06 	br	16e2c <__alt_mem_mcu_subsystem_ram_0+0x77ff6e2c>
   171fc:	e011883a 	mov	r8,fp
   17200:	40800e58 	cmpnei	r2,r8,57
   17204:	a839883a 	mov	fp,r21
   17208:	dd800717 	ldw	r22,28(sp)
   1720c:	10009726 	beq	r2,zero,1746c <_dtoa_r+0x1538>
   17210:	42000044 	addi	r8,r8,1
   17214:	003fee06 	br	171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   17218:	d8800517 	ldw	r2,20(sp)
   1721c:	d8c00417 	ldw	r3,16(sp)
   17220:	10e9c83a 	sub	r20,r2,r3
   17224:	003dc606 	br	16940 <__alt_mem_mcu_subsystem_ram_0+0x77ff6940>
   17228:	e011883a 	mov	r8,fp
   1722c:	dd800717 	ldw	r22,28(sp)
   17230:	a839883a 	mov	fp,r21
   17234:	882b883a 	mov	r21,r17
   17238:	a023883a 	mov	r17,r20
   1723c:	003e9506 	br	16c94 <__alt_mem_mcu_subsystem_ram_0+0x77ff6c94>
   17240:	d9000c17 	ldw	r4,48(sp)
   17244:	d9400d17 	ldw	r5,52(sp)
   17248:	000ea000 	call	ea00 <__muldf3>
   1724c:	d8800c15 	stw	r2,48(sp)
   17250:	d8800f17 	ldw	r2,60(sp)
   17254:	d8c00d15 	stw	r3,52(sp)
   17258:	b0800005 	stb	r2,0(r22)
   1725c:	d8800e17 	ldw	r2,56(sp)
   17260:	10800058 	cmpnei	r2,r2,1
   17264:	10001f26 	beq	r2,zero,172e4 <_dtoa_r+0x13b0>
   17268:	d8800e17 	ldw	r2,56(sp)
   1726c:	8807883a 	mov	r3,r17
   17270:	dc000e15 	stw	r16,56(sp)
   17274:	b089883a 	add	r4,r22,r2
   17278:	2021883a 	mov	r16,r4
   1727c:	9005883a 	mov	r2,r18
   17280:	000d883a 	mov	r6,zero
   17284:	01d00934 	movhi	r7,16420
   17288:	1009883a 	mov	r4,r2
   1728c:	180b883a 	mov	r5,r3
   17290:	000ea000 	call	ea00 <__muldf3>
   17294:	180b883a 	mov	r5,r3
   17298:	1009883a 	mov	r4,r2
   1729c:	1825883a 	mov	r18,r3
   172a0:	1023883a 	mov	r17,r2
   172a4:	000f9b00 	call	f9b0 <__fixdfsi>
   172a8:	1009883a 	mov	r4,r2
   172ac:	1029883a 	mov	r20,r2
   172b0:	001f9980 	call	1f998 <__floatsidf>
   172b4:	100d883a 	mov	r6,r2
   172b8:	180f883a 	mov	r7,r3
   172bc:	8809883a 	mov	r4,r17
   172c0:	900b883a 	mov	r5,r18
   172c4:	e7000044 	addi	fp,fp,1
   172c8:	a5000c04 	addi	r20,r20,48
   172cc:	000f0dc0 	call	f0dc <__subdf3>
   172d0:	e53fffc5 	stb	r20,-1(fp)
   172d4:	e43fea1e 	bne	fp,r16,17280 <__alt_mem_mcu_subsystem_ram_0+0x77ff7280>
   172d8:	dc000e17 	ldw	r16,56(sp)
   172dc:	1025883a 	mov	r18,r2
   172e0:	1823883a 	mov	r17,r3
   172e4:	d9000c17 	ldw	r4,48(sp)
   172e8:	d9400d17 	ldw	r5,52(sp)
   172ec:	000d883a 	mov	r6,zero
   172f0:	01cff834 	movhi	r7,16352
   172f4:	000d7940 	call	d794 <__adddf3>
   172f8:	100d883a 	mov	r6,r2
   172fc:	180f883a 	mov	r7,r3
   17300:	9009883a 	mov	r4,r18
   17304:	880b883a 	mov	r5,r17
   17308:	000e9200 	call	e920 <__gedf2>
   1730c:	00805d0e 	bge	zero,r2,17484 <_dtoa_r+0x1550>
   17310:	d8801217 	ldw	r2,72(sp)
   17314:	e23fffc3 	ldbu	r8,-1(fp)
   17318:	d8800315 	stw	r2,12(sp)
   1731c:	003d6e06 	br	168d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff68d8>
   17320:	0025883a 	mov	r18,zero
   17324:	0023883a 	mov	r17,zero
   17328:	003efe06 	br	16f24 <__alt_mem_mcu_subsystem_ram_0+0x77ff6f24>
   1732c:	00800c04 	movi	r2,48
   17330:	b0800005 	stb	r2,0(r22)
   17334:	d8800317 	ldw	r2,12(sp)
   17338:	e23fffc3 	ldbu	r8,-1(fp)
   1733c:	b007883a 	mov	r3,r22
   17340:	10800044 	addi	r2,r2,1
   17344:	d8800315 	stw	r2,12(sp)
   17348:	003d6906 	br	168f0 <__alt_mem_mcu_subsystem_ram_0+0x77ff68f0>
   1734c:	d8c01417 	ldw	r3,80(sp)
   17350:	d9000517 	ldw	r4,20(sp)
   17354:	00800d84 	movi	r2,54
   17358:	10c5c83a 	sub	r2,r2,r3
   1735c:	a8ab883a 	add	r21,r21,r2
   17360:	2085883a 	add	r2,r4,r2
   17364:	2029883a 	mov	r20,r4
   17368:	dc800717 	ldw	r18,28(sp)
   1736c:	d8800515 	stw	r2,20(sp)
   17370:	003d7306 	br	16940 <__alt_mem_mcu_subsystem_ram_0+0x77ff6940>
   17374:	900b883a 	mov	r5,r18
   17378:	8009883a 	mov	r4,r16
   1737c:	000f883a 	mov	r7,zero
   17380:	01800144 	movi	r6,5
   17384:	0018bf40 	call	18bf4 <__multadd>
   17388:	100b883a 	mov	r5,r2
   1738c:	b809883a 	mov	r4,r23
   17390:	1025883a 	mov	r18,r2
   17394:	00193c40 	call	193c4 <__mcmp>
   17398:	00bee216 	blt	zero,r2,16f24 <__alt_mem_mcu_subsystem_ram_0+0x77ff6f24>
   1739c:	003f3806 	br	17080 <__alt_mem_mcu_subsystem_ram_0+0x77ff7080>
   173a0:	dc800117 	ldw	r18,4(sp)
   173a4:	9829883a 	mov	r20,r19
   173a8:	04400084 	movi	r17,2
   173ac:	003c2406 	br	16440 <__alt_mem_mcu_subsystem_ram_0+0x77ff6440>
   173b0:	d8800417 	ldw	r2,16(sp)
   173b4:	103f4126 	beq	r2,zero,170bc <__alt_mem_mcu_subsystem_ram_0+0x77ff70bc>
   173b8:	df000a17 	ldw	fp,40(sp)
   173bc:	073cbe0e 	bge	zero,fp,166b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff66b8>
   173c0:	a00b883a 	mov	r5,r20
   173c4:	000d883a 	mov	r6,zero
   173c8:	01d00934 	movhi	r7,16420
   173cc:	9009883a 	mov	r4,r18
   173d0:	000ea000 	call	ea00 <__muldf3>
   173d4:	89000044 	addi	r4,r17,1
   173d8:	1025883a 	mov	r18,r2
   173dc:	1829883a 	mov	r20,r3
   173e0:	001f9980 	call	1f998 <__floatsidf>
   173e4:	900d883a 	mov	r6,r18
   173e8:	a00f883a 	mov	r7,r20
   173ec:	1009883a 	mov	r4,r2
   173f0:	180b883a 	mov	r5,r3
   173f4:	000ea000 	call	ea00 <__muldf3>
   173f8:	000d883a 	mov	r6,zero
   173fc:	01d00734 	movhi	r7,16412
   17400:	1009883a 	mov	r4,r2
   17404:	180b883a 	mov	r5,r3
   17408:	000d7940 	call	d794 <__adddf3>
   1740c:	d8800c15 	stw	r2,48(sp)
   17410:	d8800317 	ldw	r2,12(sp)
   17414:	df000e15 	stw	fp,56(sp)
   17418:	10bfffc4 	addi	r2,r2,-1
   1741c:	d8801215 	stw	r2,72(sp)
   17420:	00bf3034 	movhi	r2,64704
   17424:	1885883a 	add	r2,r3,r2
   17428:	d8800d15 	stw	r2,52(sp)
   1742c:	003c2206 	br	164b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff64b8>
   17430:	b80b883a 	mov	r5,r23
   17434:	01800044 	movi	r6,1
   17438:	8009883a 	mov	r4,r16
   1743c:	da000115 	stw	r8,4(sp)
   17440:	00192800 	call	19280 <__lshift>
   17444:	900b883a 	mov	r5,r18
   17448:	1009883a 	mov	r4,r2
   1744c:	102f883a 	mov	r23,r2
   17450:	00193c40 	call	193c4 <__mcmp>
   17454:	da000117 	ldw	r8,4(sp)
   17458:	0080390e 	bge	zero,r2,17540 <_dtoa_r+0x160c>
   1745c:	42000e60 	cmpeqi	r8,r8,57
   17460:	4000021e 	bne	r8,zero,1746c <_dtoa_r+0x1538>
   17464:	aa000c44 	addi	r8,r21,49
   17468:	003f5906 	br	171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   1746c:	00800e44 	movi	r2,57
   17470:	882b883a 	mov	r21,r17
   17474:	98800005 	stb	r2,0(r19)
   17478:	a023883a 	mov	r17,r20
   1747c:	00c00e44 	movi	r3,57
   17480:	003e2106 	br	16d08 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d08>
   17484:	d9800c17 	ldw	r6,48(sp)
   17488:	d9c00d17 	ldw	r7,52(sp)
   1748c:	0009883a 	mov	r4,zero
   17490:	014ff834 	movhi	r5,16352
   17494:	000f0dc0 	call	f0dc <__subdf3>
   17498:	100d883a 	mov	r6,r2
   1749c:	180f883a 	mov	r7,r3
   174a0:	9009883a 	mov	r4,r18
   174a4:	880b883a 	mov	r5,r17
   174a8:	001f8640 	call	1f864 <__ledf2>
   174ac:	10000216 	blt	r2,zero,174b8 <_dtoa_r+0x1584>
   174b0:	003c8106 	br	166b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff66b8>
   174b4:	1839883a 	mov	fp,r3
   174b8:	e0bfffc7 	ldb	r2,-1(fp)
   174bc:	e0ffffc4 	addi	r3,fp,-1
   174c0:	10800c20 	cmpeqi	r2,r2,48
   174c4:	103ffb1e 	bne	r2,zero,174b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff74b4>
   174c8:	d8801217 	ldw	r2,72(sp)
   174cc:	d8800315 	stw	r2,12(sp)
   174d0:	003e2106 	br	16d58 <__alt_mem_mcu_subsystem_ram_0+0x77ff6d58>
   174d4:	80001115 	stw	zero,68(r16)
   174d8:	000b883a 	mov	r5,zero
   174dc:	8009883a 	mov	r4,r16
   174e0:	0018b2c0 	call	18b2c <_Balloc>
   174e4:	102d883a 	mov	r22,r2
   174e8:	80801015 	stw	r2,64(r16)
   174ec:	00bfffc4 	movi	r2,-1
   174f0:	d8800415 	stw	r2,16(sp)
   174f4:	d8800a15 	stw	r2,40(sp)
   174f8:	00800044 	movi	r2,1
   174fc:	d8002015 	stw	zero,128(sp)
   17500:	d8800615 	stw	r2,24(sp)
   17504:	003c6c06 	br	166b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff66b8>
   17508:	ddc00d17 	ldw	r23,52(sp)
   1750c:	9811883a 	mov	r8,r19
   17510:	d8801217 	ldw	r2,72(sp)
   17514:	d8800315 	stw	r2,12(sp)
   17518:	003cef06 	br	168d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff68d8>
   1751c:	e0800e60 	cmpeqi	r2,fp,57
   17520:	b007883a 	mov	r3,r22
   17524:	e011883a 	mov	r8,fp
   17528:	dd800717 	ldw	r22,28(sp)
   1752c:	9f000044 	addi	fp,r19,1
   17530:	103fce1e 	bne	r2,zero,1746c <__alt_mem_mcu_subsystem_ram_0+0x77ff746c>
   17534:	057f260e 	bge	zero,r21,171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   17538:	1a000c44 	addi	r8,r3,49
   1753c:	003f2406 	br	171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   17540:	103f231e 	bne	r2,zero,171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   17544:	4080004c 	andi	r2,r8,1
   17548:	103f2126 	beq	r2,zero,171d0 <__alt_mem_mcu_subsystem_ram_0+0x77ff71d0>
   1754c:	003fc306 	br	1745c <__alt_mem_mcu_subsystem_ram_0+0x77ff745c>
   17550:	880b883a 	mov	r5,r17
   17554:	000f883a 	mov	r7,zero
   17558:	01800284 	movi	r6,10
   1755c:	8009883a 	mov	r4,r16
   17560:	0018bf40 	call	18bf4 <__multadd>
   17564:	1023883a 	mov	r17,r2
   17568:	d8800a17 	ldw	r2,40(sp)
   1756c:	00800a0e 	bge	zero,r2,17598 <_dtoa_r+0x1664>
   17570:	d8800415 	stw	r2,16(sp)
   17574:	053d310e 	bge	zero,r20,16a3c <__alt_mem_mcu_subsystem_ram_0+0x77ff6a3c>
   17578:	003e4206 	br	16e84 <__alt_mem_mcu_subsystem_ram_0+0x77ff6e84>
   1757c:	d8800217 	ldw	r2,8(sp)
   17580:	108000c8 	cmpgei	r2,r2,3
   17584:	1000121e 	bne	r2,zero,175d0 <_dtoa_r+0x169c>
   17588:	d8800a17 	ldw	r2,40(sp)
   1758c:	003dae06 	br	16c48 <__alt_mem_mcu_subsystem_ram_0+0x77ff6c48>
   17590:	04400084 	movi	r17,2
   17594:	003baa06 	br	16440 <__alt_mem_mcu_subsystem_ram_0+0x77ff6440>
   17598:	d8800217 	ldw	r2,8(sp)
   1759c:	108000c8 	cmpgei	r2,r2,3
   175a0:	10000b1e 	bne	r2,zero,175d0 <_dtoa_r+0x169c>
   175a4:	d8800a17 	ldw	r2,40(sp)
   175a8:	003ff106 	br	17570 <__alt_mem_mcu_subsystem_ram_0+0x77ff7570>
   175ac:	000b883a 	mov	r5,zero
   175b0:	003b6a06 	br	1635c <__alt_mem_mcu_subsystem_ram_0+0x77ff635c>
   175b4:	18c00120 	cmpeqi	r3,r3,4
   175b8:	183d111e 	bne	r3,zero,16a00 <__alt_mem_mcu_subsystem_ram_0+0x77ff6a00>
   175bc:	00c00f04 	movi	r3,60
   175c0:	1885c83a 	sub	r2,r3,r2
   175c4:	003d0906 	br	169ec <__alt_mem_mcu_subsystem_ram_0+0x77ff69ec>
   175c8:	b59bc904 	addi	r22,r22,28452
   175cc:	003a8a06 	br	15ff8 <__alt_mem_mcu_subsystem_ram_0+0x77ff5ff8>
   175d0:	d8800a17 	ldw	r2,40(sp)
   175d4:	d8800415 	stw	r2,16(sp)
   175d8:	003ea706 	br	17078 <__alt_mem_mcu_subsystem_ram_0+0x77ff7078>

000175dc <__sflush_r>:
   175dc:	2880030b 	ldhu	r2,12(r5)
   175e0:	defffb04 	addi	sp,sp,-20
   175e4:	dcc00315 	stw	r19,12(sp)
   175e8:	dc000015 	stw	r16,0(sp)
   175ec:	dfc00415 	stw	ra,16(sp)
   175f0:	dc800215 	stw	r18,8(sp)
   175f4:	dc400115 	stw	r17,4(sp)
   175f8:	10c0020c 	andi	r3,r2,8
   175fc:	2821883a 	mov	r16,r5
   17600:	2027883a 	mov	r19,r4
   17604:	1800351e 	bne	r3,zero,176dc <__sflush_r+0x100>
   17608:	28c00117 	ldw	r3,4(r5)
   1760c:	10820014 	ori	r2,r2,2048
   17610:	2880030d 	sth	r2,12(r5)
   17614:	00c04b0e 	bge	zero,r3,17744 <__sflush_r+0x168>
   17618:	82000a17 	ldw	r8,40(r16)
   1761c:	40004b26 	beq	r8,zero,1774c <__sflush_r+0x170>
   17620:	9c400017 	ldw	r17,0(r19)
   17624:	10c4000c 	andi	r3,r2,4096
   17628:	98000015 	stw	zero,0(r19)
   1762c:	81400717 	ldw	r5,28(r16)
   17630:	1800701e 	bne	r3,zero,177f4 <__sflush_r+0x218>
   17634:	000d883a 	mov	r6,zero
   17638:	01c00044 	movi	r7,1
   1763c:	9809883a 	mov	r4,r19
   17640:	403ee83a 	callr	r8
   17644:	100d883a 	mov	r6,r2
   17648:	10bfffd8 	cmpnei	r2,r2,-1
   1764c:	10004926 	beq	r2,zero,17774 <__sflush_r+0x198>
   17650:	8080030b 	ldhu	r2,12(r16)
   17654:	82000a17 	ldw	r8,40(r16)
   17658:	81400717 	ldw	r5,28(r16)
   1765c:	10c0010c 	andi	r3,r2,4
   17660:	18000626 	beq	r3,zero,1767c <__sflush_r+0xa0>
   17664:	80c00117 	ldw	r3,4(r16)
   17668:	80800c17 	ldw	r2,48(r16)
   1766c:	30cdc83a 	sub	r6,r6,r3
   17670:	10000226 	beq	r2,zero,1767c <__sflush_r+0xa0>
   17674:	80800f17 	ldw	r2,60(r16)
   17678:	308dc83a 	sub	r6,r6,r2
   1767c:	000f883a 	mov	r7,zero
   17680:	9809883a 	mov	r4,r19
   17684:	403ee83a 	callr	r8
   17688:	10ffffd8 	cmpnei	r3,r2,-1
   1768c:	18004226 	beq	r3,zero,17798 <__sflush_r+0x1bc>
   17690:	80c0030b 	ldhu	r3,12(r16)
   17694:	81000417 	ldw	r4,16(r16)
   17698:	80000115 	stw	zero,4(r16)
   1769c:	197dffcc 	andi	r5,r3,63487
   176a0:	8140030d 	sth	r5,12(r16)
   176a4:	81000015 	stw	r4,0(r16)
   176a8:	18c4000c 	andi	r3,r3,4096
   176ac:	18000126 	beq	r3,zero,176b4 <__sflush_r+0xd8>
   176b0:	80801415 	stw	r2,80(r16)
   176b4:	81400c17 	ldw	r5,48(r16)
   176b8:	9c400015 	stw	r17,0(r19)
   176bc:	28002326 	beq	r5,zero,1774c <__sflush_r+0x170>
   176c0:	80801004 	addi	r2,r16,64
   176c4:	28800226 	beq	r5,r2,176d0 <__sflush_r+0xf4>
   176c8:	9809883a 	mov	r4,r19
   176cc:	0017d000 	call	17d00 <_free_r>
   176d0:	80000c15 	stw	zero,48(r16)
   176d4:	0005883a 	mov	r2,zero
   176d8:	00001d06 	br	17750 <__sflush_r+0x174>
   176dc:	2c800417 	ldw	r18,16(r5)
   176e0:	90001a26 	beq	r18,zero,1774c <__sflush_r+0x170>
   176e4:	2c400017 	ldw	r17,0(r5)
   176e8:	108000cc 	andi	r2,r2,3
   176ec:	2c800015 	stw	r18,0(r5)
   176f0:	8ca3c83a 	sub	r17,r17,r18
   176f4:	10001d26 	beq	r2,zero,1776c <__sflush_r+0x190>
   176f8:	0005883a 	mov	r2,zero
   176fc:	80800215 	stw	r2,8(r16)
   17700:	04400316 	blt	zero,r17,17710 <__sflush_r+0x134>
   17704:	00001106 	br	1774c <__sflush_r+0x170>
   17708:	90a5883a 	add	r18,r18,r2
   1770c:	04400f0e 	bge	zero,r17,1774c <__sflush_r+0x170>
   17710:	80800917 	ldw	r2,36(r16)
   17714:	81400717 	ldw	r5,28(r16)
   17718:	880f883a 	mov	r7,r17
   1771c:	900d883a 	mov	r6,r18
   17720:	9809883a 	mov	r4,r19
   17724:	103ee83a 	callr	r2
   17728:	88a3c83a 	sub	r17,r17,r2
   1772c:	00bff616 	blt	zero,r2,17708 <__alt_mem_mcu_subsystem_ram_0+0x77ff7708>
   17730:	80c0030b 	ldhu	r3,12(r16)
   17734:	00bfffc4 	movi	r2,-1
   17738:	18c01014 	ori	r3,r3,64
   1773c:	80c0030d 	sth	r3,12(r16)
   17740:	00000306 	br	17750 <__sflush_r+0x174>
   17744:	28c00f17 	ldw	r3,60(r5)
   17748:	00ffb316 	blt	zero,r3,17618 <__alt_mem_mcu_subsystem_ram_0+0x77ff7618>
   1774c:	0005883a 	mov	r2,zero
   17750:	dfc00417 	ldw	ra,16(sp)
   17754:	dcc00317 	ldw	r19,12(sp)
   17758:	dc800217 	ldw	r18,8(sp)
   1775c:	dc400117 	ldw	r17,4(sp)
   17760:	dc000017 	ldw	r16,0(sp)
   17764:	dec00504 	addi	sp,sp,20
   17768:	f800283a 	ret
   1776c:	28800517 	ldw	r2,20(r5)
   17770:	003fe206 	br	176fc <__alt_mem_mcu_subsystem_ram_0+0x77ff76fc>
   17774:	98800017 	ldw	r2,0(r19)
   17778:	103fb526 	beq	r2,zero,17650 <__alt_mem_mcu_subsystem_ram_0+0x77ff7650>
   1777c:	10c00760 	cmpeqi	r3,r2,29
   17780:	1800021e 	bne	r3,zero,1778c <__sflush_r+0x1b0>
   17784:	10800598 	cmpnei	r2,r2,22
   17788:	103fe91e 	bne	r2,zero,17730 <__alt_mem_mcu_subsystem_ram_0+0x77ff7730>
   1778c:	9c400015 	stw	r17,0(r19)
   17790:	0005883a 	mov	r2,zero
   17794:	003fee06 	br	17750 <__alt_mem_mcu_subsystem_ram_0+0x77ff7750>
   17798:	99400017 	ldw	r5,0(r19)
   1779c:	28c007b0 	cmpltui	r3,r5,30
   177a0:	18000f26 	beq	r3,zero,177e0 <__sflush_r+0x204>
   177a4:	00c81034 	movhi	r3,8256
   177a8:	18c00044 	addi	r3,r3,1
   177ac:	1946d83a 	srl	r3,r3,r5
   177b0:	8100030b 	ldhu	r4,12(r16)
   177b4:	18c0004c 	andi	r3,r3,1
   177b8:	18000a26 	beq	r3,zero,177e4 <__sflush_r+0x208>
   177bc:	80c00417 	ldw	r3,16(r16)
   177c0:	21bdffcc 	andi	r6,r4,63487
   177c4:	8180030d 	sth	r6,12(r16)
   177c8:	80000115 	stw	zero,4(r16)
   177cc:	80c00015 	stw	r3,0(r16)
   177d0:	2104000c 	andi	r4,r4,4096
   177d4:	203fb726 	beq	r4,zero,176b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff76b4>
   177d8:	283fb61e 	bne	r5,zero,176b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff76b4>
   177dc:	003fb406 	br	176b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff76b0>
   177e0:	8100030b 	ldhu	r4,12(r16)
   177e4:	21001014 	ori	r4,r4,64
   177e8:	8100030d 	sth	r4,12(r16)
   177ec:	00bfffc4 	movi	r2,-1
   177f0:	003fd706 	br	17750 <__alt_mem_mcu_subsystem_ram_0+0x77ff7750>
   177f4:	81801417 	ldw	r6,80(r16)
   177f8:	003f9806 	br	1765c <__alt_mem_mcu_subsystem_ram_0+0x77ff765c>

000177fc <_fflush_r>:
   177fc:	defffd04 	addi	sp,sp,-12
   17800:	dc000115 	stw	r16,4(sp)
   17804:	dfc00215 	stw	ra,8(sp)
   17808:	2021883a 	mov	r16,r4
   1780c:	20000226 	beq	r4,zero,17818 <_fflush_r+0x1c>
   17810:	20800e17 	ldw	r2,56(r4)
   17814:	10000726 	beq	r2,zero,17834 <_fflush_r+0x38>
   17818:	2880030f 	ldh	r2,12(r5)
   1781c:	10000a1e 	bne	r2,zero,17848 <_fflush_r+0x4c>
   17820:	0005883a 	mov	r2,zero
   17824:	dfc00217 	ldw	ra,8(sp)
   17828:	dc000117 	ldw	r16,4(sp)
   1782c:	dec00304 	addi	sp,sp,12
   17830:	f800283a 	ret
   17834:	d9400015 	stw	r5,0(sp)
   17838:	0017b9c0 	call	17b9c <__sinit>
   1783c:	d9400017 	ldw	r5,0(sp)
   17840:	2880030f 	ldh	r2,12(r5)
   17844:	103ff626 	beq	r2,zero,17820 <__alt_mem_mcu_subsystem_ram_0+0x77ff7820>
   17848:	8009883a 	mov	r4,r16
   1784c:	dfc00217 	ldw	ra,8(sp)
   17850:	dc000117 	ldw	r16,4(sp)
   17854:	dec00304 	addi	sp,sp,12
   17858:	00175dc1 	jmpi	175dc <__sflush_r>

0001785c <fflush>:
   1785c:	200b883a 	mov	r5,r4
   17860:	20000326 	beq	r4,zero,17870 <fflush+0x14>
   17864:	008000f4 	movhi	r2,3
   17868:	1123b117 	ldw	r4,-28988(r2)
   1786c:	00177fc1 	jmpi	177fc <_fflush_r>
   17870:	008000f4 	movhi	r2,3
   17874:	1123b017 	ldw	r4,-28992(r2)
   17878:	01400074 	movhi	r5,1
   1787c:	295dff04 	addi	r5,r5,30716
   17880:	00185341 	jmpi	18534 <_fwalk_reent>

00017884 <__fp_lock>:
   17884:	0005883a 	mov	r2,zero
   17888:	f800283a 	ret

0001788c <_cleanup_r>:
   1788c:	014000b4 	movhi	r5,2
   17890:	29796004 	addi	r5,r5,-6784
   17894:	00185341 	jmpi	18534 <_fwalk_reent>

00017898 <__sinit.part.0>:
   17898:	defff804 	addi	sp,sp,-32
   1789c:	00800074 	movhi	r2,1
   178a0:	dfc00715 	stw	ra,28(sp)
   178a4:	dd800615 	stw	r22,24(sp)
   178a8:	dd400515 	stw	r21,20(sp)
   178ac:	dd000415 	stw	r20,16(sp)
   178b0:	dcc00315 	stw	r19,12(sp)
   178b4:	dc800215 	stw	r18,8(sp)
   178b8:	dc400115 	stw	r17,4(sp)
   178bc:	dc000015 	stw	r16,0(sp)
   178c0:	109e2304 	addi	r2,r2,30860
   178c4:	24000117 	ldw	r16,4(r4)
   178c8:	20800f15 	stw	r2,60(r4)
   178cc:	20c0bb04 	addi	r3,r4,748
   178d0:	008000c4 	movi	r2,3
   178d4:	20c0ba15 	stw	r3,744(r4)
   178d8:	2080b915 	stw	r2,740(r4)
   178dc:	2000b815 	stw	zero,736(r4)
   178e0:	00800104 	movi	r2,4
   178e4:	2025883a 	mov	r18,r4
   178e8:	01800204 	movi	r6,8
   178ec:	81001704 	addi	r4,r16,92
   178f0:	000b883a 	mov	r5,zero
   178f4:	80001915 	stw	zero,100(r16)
   178f8:	80000015 	stw	zero,0(r16)
   178fc:	80000115 	stw	zero,4(r16)
   17900:	80000215 	stw	zero,8(r16)
   17904:	80800315 	stw	r2,12(r16)
   17908:	80000415 	stw	zero,16(r16)
   1790c:	80000515 	stw	zero,20(r16)
   17910:	80000615 	stw	zero,24(r16)
   17914:	00107280 	call	10728 <memset>
   17918:	058000b4 	movhi	r22,2
   1791c:	94400217 	ldw	r17,8(r18)
   17920:	054000b4 	movhi	r21,2
   17924:	050000b4 	movhi	r20,2
   17928:	04c000b4 	movhi	r19,2
   1792c:	b5a92004 	addi	r22,r22,-23424
   17930:	ad693704 	addi	r21,r21,-23332
   17934:	a5295604 	addi	r20,r20,-23208
   17938:	9ce96d04 	addi	r19,r19,-23116
   1793c:	00800074 	movhi	r2,1
   17940:	85800815 	stw	r22,32(r16)
   17944:	85400915 	stw	r21,36(r16)
   17948:	85000a15 	stw	r20,40(r16)
   1794c:	84c00b15 	stw	r19,44(r16)
   17950:	84000715 	stw	r16,28(r16)
   17954:	10800284 	addi	r2,r2,10
   17958:	89001704 	addi	r4,r17,92
   1795c:	01800204 	movi	r6,8
   17960:	000b883a 	mov	r5,zero
   17964:	88001915 	stw	zero,100(r17)
   17968:	88000015 	stw	zero,0(r17)
   1796c:	88000115 	stw	zero,4(r17)
   17970:	88000215 	stw	zero,8(r17)
   17974:	88800315 	stw	r2,12(r17)
   17978:	88000415 	stw	zero,16(r17)
   1797c:	88000515 	stw	zero,20(r17)
   17980:	88000615 	stw	zero,24(r17)
   17984:	00107280 	call	10728 <memset>
   17988:	94000317 	ldw	r16,12(r18)
   1798c:	008000b4 	movhi	r2,2
   17990:	8c400715 	stw	r17,28(r17)
   17994:	8d800815 	stw	r22,32(r17)
   17998:	8d400915 	stw	r21,36(r17)
   1799c:	8d000a15 	stw	r20,40(r17)
   179a0:	8cc00b15 	stw	r19,44(r17)
   179a4:	10800484 	addi	r2,r2,18
   179a8:	80001915 	stw	zero,100(r16)
   179ac:	80000015 	stw	zero,0(r16)
   179b0:	80000115 	stw	zero,4(r16)
   179b4:	80000215 	stw	zero,8(r16)
   179b8:	80800315 	stw	r2,12(r16)
   179bc:	80000415 	stw	zero,16(r16)
   179c0:	80000515 	stw	zero,20(r16)
   179c4:	80000615 	stw	zero,24(r16)
   179c8:	01800204 	movi	r6,8
   179cc:	000b883a 	mov	r5,zero
   179d0:	81001704 	addi	r4,r16,92
   179d4:	00107280 	call	10728 <memset>
   179d8:	00800044 	movi	r2,1
   179dc:	84000715 	stw	r16,28(r16)
   179e0:	85800815 	stw	r22,32(r16)
   179e4:	85400915 	stw	r21,36(r16)
   179e8:	85000a15 	stw	r20,40(r16)
   179ec:	84c00b15 	stw	r19,44(r16)
   179f0:	90800e15 	stw	r2,56(r18)
   179f4:	dfc00717 	ldw	ra,28(sp)
   179f8:	dd800617 	ldw	r22,24(sp)
   179fc:	dd400517 	ldw	r21,20(sp)
   17a00:	dd000417 	ldw	r20,16(sp)
   17a04:	dcc00317 	ldw	r19,12(sp)
   17a08:	dc800217 	ldw	r18,8(sp)
   17a0c:	dc400117 	ldw	r17,4(sp)
   17a10:	dc000017 	ldw	r16,0(sp)
   17a14:	dec00804 	addi	sp,sp,32
   17a18:	f800283a 	ret

00017a1c <__fp_unlock>:
   17a1c:	0005883a 	mov	r2,zero
   17a20:	f800283a 	ret

00017a24 <__sfmoreglue>:
   17a24:	defffc04 	addi	sp,sp,-16
   17a28:	dc400115 	stw	r17,4(sp)
   17a2c:	2c7fffc4 	addi	r17,r5,-1
   17a30:	8c401a24 	muli	r17,r17,104
   17a34:	dc800215 	stw	r18,8(sp)
   17a38:	2825883a 	mov	r18,r5
   17a3c:	89401d04 	addi	r5,r17,116
   17a40:	dc000015 	stw	r16,0(sp)
   17a44:	dfc00315 	stw	ra,12(sp)
   17a48:	000fdf40 	call	fdf4 <_malloc_r>
   17a4c:	1021883a 	mov	r16,r2
   17a50:	10000726 	beq	r2,zero,17a70 <__sfmoreglue+0x4c>
   17a54:	11000304 	addi	r4,r2,12
   17a58:	10000015 	stw	zero,0(r2)
   17a5c:	14800115 	stw	r18,4(r2)
   17a60:	11000215 	stw	r4,8(r2)
   17a64:	89801a04 	addi	r6,r17,104
   17a68:	000b883a 	mov	r5,zero
   17a6c:	00107280 	call	10728 <memset>
   17a70:	8005883a 	mov	r2,r16
   17a74:	dfc00317 	ldw	ra,12(sp)
   17a78:	dc800217 	ldw	r18,8(sp)
   17a7c:	dc400117 	ldw	r17,4(sp)
   17a80:	dc000017 	ldw	r16,0(sp)
   17a84:	dec00404 	addi	sp,sp,16
   17a88:	f800283a 	ret

00017a8c <__sfp>:
   17a8c:	defffc04 	addi	sp,sp,-16
   17a90:	008000f4 	movhi	r2,3
   17a94:	dc400115 	stw	r17,4(sp)
   17a98:	1463b017 	ldw	r17,-28992(r2)
   17a9c:	dc800215 	stw	r18,8(sp)
   17aa0:	dfc00315 	stw	ra,12(sp)
   17aa4:	88800e17 	ldw	r2,56(r17)
   17aa8:	dc000015 	stw	r16,0(sp)
   17aac:	2025883a 	mov	r18,r4
   17ab0:	10002926 	beq	r2,zero,17b58 <__sfp+0xcc>
   17ab4:	8c40b804 	addi	r17,r17,736
   17ab8:	88800117 	ldw	r2,4(r17)
   17abc:	8c000217 	ldw	r16,8(r17)
   17ac0:	10bfffc4 	addi	r2,r2,-1
   17ac4:	1000050e 	bge	r2,zero,17adc <__sfp+0x50>
   17ac8:	00001f06 	br	17b48 <__sfp+0xbc>
   17acc:	10bfffc4 	addi	r2,r2,-1
   17ad0:	10ffffd8 	cmpnei	r3,r2,-1
   17ad4:	84001a04 	addi	r16,r16,104
   17ad8:	18001b26 	beq	r3,zero,17b48 <__sfp+0xbc>
   17adc:	80c0030f 	ldh	r3,12(r16)
   17ae0:	183ffa1e 	bne	r3,zero,17acc <__alt_mem_mcu_subsystem_ram_0+0x77ff7acc>
   17ae4:	00bffff4 	movhi	r2,65535
   17ae8:	10800044 	addi	r2,r2,1
   17aec:	80001915 	stw	zero,100(r16)
   17af0:	80000015 	stw	zero,0(r16)
   17af4:	80000115 	stw	zero,4(r16)
   17af8:	80000215 	stw	zero,8(r16)
   17afc:	80800315 	stw	r2,12(r16)
   17b00:	80000415 	stw	zero,16(r16)
   17b04:	80000515 	stw	zero,20(r16)
   17b08:	80000615 	stw	zero,24(r16)
   17b0c:	01800204 	movi	r6,8
   17b10:	000b883a 	mov	r5,zero
   17b14:	81001704 	addi	r4,r16,92
   17b18:	00107280 	call	10728 <memset>
   17b1c:	80000c15 	stw	zero,48(r16)
   17b20:	80000d15 	stw	zero,52(r16)
   17b24:	80001115 	stw	zero,68(r16)
   17b28:	80001215 	stw	zero,72(r16)
   17b2c:	8005883a 	mov	r2,r16
   17b30:	dfc00317 	ldw	ra,12(sp)
   17b34:	dc800217 	ldw	r18,8(sp)
   17b38:	dc400117 	ldw	r17,4(sp)
   17b3c:	dc000017 	ldw	r16,0(sp)
   17b40:	dec00404 	addi	sp,sp,16
   17b44:	f800283a 	ret
   17b48:	88800017 	ldw	r2,0(r17)
   17b4c:	10000526 	beq	r2,zero,17b64 <__sfp+0xd8>
   17b50:	1023883a 	mov	r17,r2
   17b54:	003fd806 	br	17ab8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7ab8>
   17b58:	8809883a 	mov	r4,r17
   17b5c:	00178980 	call	17898 <__sinit.part.0>
   17b60:	003fd406 	br	17ab4 <__alt_mem_mcu_subsystem_ram_0+0x77ff7ab4>
   17b64:	01400104 	movi	r5,4
   17b68:	9009883a 	mov	r4,r18
   17b6c:	0017a240 	call	17a24 <__sfmoreglue>
   17b70:	88800015 	stw	r2,0(r17)
   17b74:	103ff61e 	bne	r2,zero,17b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff7b50>
   17b78:	00800304 	movi	r2,12
   17b7c:	90800015 	stw	r2,0(r18)
   17b80:	0021883a 	mov	r16,zero
   17b84:	003fe906 	br	17b2c <__alt_mem_mcu_subsystem_ram_0+0x77ff7b2c>

00017b88 <_cleanup>:
   17b88:	008000f4 	movhi	r2,3
   17b8c:	1123b017 	ldw	r4,-28992(r2)
   17b90:	014000b4 	movhi	r5,2
   17b94:	29796004 	addi	r5,r5,-6784
   17b98:	00185341 	jmpi	18534 <_fwalk_reent>

00017b9c <__sinit>:
   17b9c:	20800e17 	ldw	r2,56(r4)
   17ba0:	10000126 	beq	r2,zero,17ba8 <__sinit+0xc>
   17ba4:	f800283a 	ret
   17ba8:	00178981 	jmpi	17898 <__sinit.part.0>

00017bac <__sfp_lock_acquire>:
   17bac:	f800283a 	ret

00017bb0 <__sfp_lock_release>:
   17bb0:	f800283a 	ret

00017bb4 <__sinit_lock_acquire>:
   17bb4:	f800283a 	ret

00017bb8 <__sinit_lock_release>:
   17bb8:	f800283a 	ret

00017bbc <__fp_lock_all>:
   17bbc:	008000f4 	movhi	r2,3
   17bc0:	1123b117 	ldw	r4,-28988(r2)
   17bc4:	01400074 	movhi	r5,1
   17bc8:	295e2104 	addi	r5,r5,30852
   17bcc:	00184901 	jmpi	18490 <_fwalk>

00017bd0 <__fp_unlock_all>:
   17bd0:	008000f4 	movhi	r2,3
   17bd4:	1123b117 	ldw	r4,-28988(r2)
   17bd8:	01400074 	movhi	r5,1
   17bdc:	295e8704 	addi	r5,r5,31260
   17be0:	00184901 	jmpi	18490 <_fwalk>

00017be4 <_malloc_trim_r>:
   17be4:	defffb04 	addi	sp,sp,-20
   17be8:	dcc00315 	stw	r19,12(sp)
   17bec:	04c000b4 	movhi	r19,2
   17bf0:	dc800215 	stw	r18,8(sp)
   17bf4:	dc400115 	stw	r17,4(sp)
   17bf8:	dc000015 	stw	r16,0(sp)
   17bfc:	dfc00415 	stw	ra,16(sp)
   17c00:	2821883a 	mov	r16,r5
   17c04:	9cddd704 	addi	r19,r19,30556
   17c08:	2025883a 	mov	r18,r4
   17c0c:	00201700 	call	20170 <__malloc_lock>
   17c10:	98800217 	ldw	r2,8(r19)
   17c14:	14400117 	ldw	r17,4(r2)
   17c18:	00bfff04 	movi	r2,-4
   17c1c:	88a2703a 	and	r17,r17,r2
   17c20:	8c21c83a 	sub	r16,r17,r16
   17c24:	8403fbc4 	addi	r16,r16,4079
   17c28:	8020d33a 	srli	r16,r16,12
   17c2c:	843fffc4 	addi	r16,r16,-1
   17c30:	8020933a 	slli	r16,r16,12
   17c34:	80840008 	cmpgei	r2,r16,4096
   17c38:	10000626 	beq	r2,zero,17c54 <_malloc_trim_r+0x70>
   17c3c:	000b883a 	mov	r5,zero
   17c40:	9009883a 	mov	r4,r18
   17c44:	001107c0 	call	1107c <_sbrk_r>
   17c48:	98c00217 	ldw	r3,8(r19)
   17c4c:	1c47883a 	add	r3,r3,r17
   17c50:	10c00a26 	beq	r2,r3,17c7c <_malloc_trim_r+0x98>
   17c54:	9009883a 	mov	r4,r18
   17c58:	00201940 	call	20194 <__malloc_unlock>
   17c5c:	0005883a 	mov	r2,zero
   17c60:	dfc00417 	ldw	ra,16(sp)
   17c64:	dcc00317 	ldw	r19,12(sp)
   17c68:	dc800217 	ldw	r18,8(sp)
   17c6c:	dc400117 	ldw	r17,4(sp)
   17c70:	dc000017 	ldw	r16,0(sp)
   17c74:	dec00504 	addi	sp,sp,20
   17c78:	f800283a 	ret
   17c7c:	040bc83a 	sub	r5,zero,r16
   17c80:	9009883a 	mov	r4,r18
   17c84:	001107c0 	call	1107c <_sbrk_r>
   17c88:	10bfffd8 	cmpnei	r2,r2,-1
   17c8c:	10000d26 	beq	r2,zero,17cc4 <_malloc_trim_r+0xe0>
   17c90:	008200f4 	movhi	r2,2051
   17c94:	10ab3417 	ldw	r2,-21296(r2)
   17c98:	98c00217 	ldw	r3,8(r19)
   17c9c:	8c23c83a 	sub	r17,r17,r16
   17ca0:	8c400054 	ori	r17,r17,1
   17ca4:	1421c83a 	sub	r16,r2,r16
   17ca8:	1c400115 	stw	r17,4(r3)
   17cac:	008200f4 	movhi	r2,2051
   17cb0:	9009883a 	mov	r4,r18
   17cb4:	142b3415 	stw	r16,-21296(r2)
   17cb8:	00201940 	call	20194 <__malloc_unlock>
   17cbc:	00800044 	movi	r2,1
   17cc0:	003fe706 	br	17c60 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c60>
   17cc4:	000b883a 	mov	r5,zero
   17cc8:	9009883a 	mov	r4,r18
   17ccc:	001107c0 	call	1107c <_sbrk_r>
   17cd0:	99000217 	ldw	r4,8(r19)
   17cd4:	1107c83a 	sub	r3,r2,r4
   17cd8:	19400410 	cmplti	r5,r3,16
   17cdc:	283fdd1e 	bne	r5,zero,17c54 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c54>
   17ce0:	014000f4 	movhi	r5,3
   17ce4:	2963b217 	ldw	r5,-28984(r5)
   17ce8:	18c00054 	ori	r3,r3,1
   17cec:	20c00115 	stw	r3,4(r4)
   17cf0:	1145c83a 	sub	r2,r2,r5
   17cf4:	014200f4 	movhi	r5,2051
   17cf8:	28ab3415 	stw	r2,-21296(r5)
   17cfc:	003fd506 	br	17c54 <__alt_mem_mcu_subsystem_ram_0+0x77ff7c54>

00017d00 <_free_r>:
   17d00:	28004126 	beq	r5,zero,17e08 <_free_r+0x108>
   17d04:	defffd04 	addi	sp,sp,-12
   17d08:	dc400115 	stw	r17,4(sp)
   17d0c:	dc000015 	stw	r16,0(sp)
   17d10:	2023883a 	mov	r17,r4
   17d14:	2821883a 	mov	r16,r5
   17d18:	dfc00215 	stw	ra,8(sp)
   17d1c:	00201700 	call	20170 <__malloc_lock>
   17d20:	81bfff17 	ldw	r6,-4(r16)
   17d24:	00bfff84 	movi	r2,-2
   17d28:	80fffe04 	addi	r3,r16,-8
   17d2c:	3084703a 	and	r2,r6,r2
   17d30:	010000b4 	movhi	r4,2
   17d34:	188f883a 	add	r7,r3,r2
   17d38:	211dd704 	addi	r4,r4,30556
   17d3c:	39400117 	ldw	r5,4(r7)
   17d40:	22000217 	ldw	r8,8(r4)
   17d44:	027fff04 	movi	r9,-4
   17d48:	2a4a703a 	and	r5,r5,r9
   17d4c:	41c03f26 	beq	r8,r7,17e4c <_free_r+0x14c>
   17d50:	39400115 	stw	r5,4(r7)
   17d54:	3180004c 	andi	r6,r6,1
   17d58:	3951883a 	add	r8,r7,r5
   17d5c:	30002b1e 	bne	r6,zero,17e0c <_free_r+0x10c>
   17d60:	82bffe17 	ldw	r10,-8(r16)
   17d64:	41800117 	ldw	r6,4(r8)
   17d68:	020000b4 	movhi	r8,2
   17d6c:	1a87c83a 	sub	r3,r3,r10
   17d70:	1a400217 	ldw	r9,8(r3)
   17d74:	421dd904 	addi	r8,r8,30564
   17d78:	1285883a 	add	r2,r2,r10
   17d7c:	3180004c 	andi	r6,r6,1
   17d80:	4a005d26 	beq	r9,r8,17ef8 <_free_r+0x1f8>
   17d84:	1a000317 	ldw	r8,12(r3)
   17d88:	4a000315 	stw	r8,12(r9)
   17d8c:	42400215 	stw	r9,8(r8)
   17d90:	30002126 	beq	r6,zero,17e18 <_free_r+0x118>
   17d94:	11400054 	ori	r5,r2,1
   17d98:	19400115 	stw	r5,4(r3)
   17d9c:	188b883a 	add	r5,r3,r2
   17da0:	28800015 	stw	r2,0(r5)
   17da4:	11408028 	cmpgeui	r5,r2,512
   17da8:	28004226 	beq	r5,zero,17eb4 <_free_r+0x1b4>
   17dac:	100ad27a 	srli	r5,r2,9
   17db0:	29800168 	cmpgeui	r6,r5,5
   17db4:	30005b1e 	bne	r6,zero,17f24 <_free_r+0x224>
   17db8:	100ad1ba 	srli	r5,r2,6
   17dbc:	29800e44 	addi	r6,r5,57
   17dc0:	300c90fa 	slli	r6,r6,3
   17dc4:	29c00e04 	addi	r7,r5,56
   17dc8:	218d883a 	add	r6,r4,r6
   17dcc:	31400017 	ldw	r5,0(r6)
   17dd0:	31bffe04 	addi	r6,r6,-8
   17dd4:	31406226 	beq	r6,r5,17f60 <_free_r+0x260>
   17dd8:	01ffff04 	movi	r7,-4
   17ddc:	29000117 	ldw	r4,4(r5)
   17de0:	21c8703a 	and	r4,r4,r7
   17de4:	11005c2e 	bgeu	r2,r4,17f58 <_free_r+0x258>
   17de8:	29400217 	ldw	r5,8(r5)
   17dec:	317ffb1e 	bne	r6,r5,17ddc <__alt_mem_mcu_subsystem_ram_0+0x77ff7ddc>
   17df0:	30800317 	ldw	r2,12(r6)
   17df4:	18800315 	stw	r2,12(r3)
   17df8:	19800215 	stw	r6,8(r3)
   17dfc:	10c00215 	stw	r3,8(r2)
   17e00:	30c00315 	stw	r3,12(r6)
   17e04:	00002506 	br	17e9c <_free_r+0x19c>
   17e08:	f800283a 	ret
   17e0c:	41800117 	ldw	r6,4(r8)
   17e10:	3180004c 	andi	r6,r6,1
   17e14:	303fdf1e 	bne	r6,zero,17d94 <__alt_mem_mcu_subsystem_ram_0+0x77ff7d94>
   17e18:	39800217 	ldw	r6,8(r7)
   17e1c:	020000b4 	movhi	r8,2
   17e20:	1145883a 	add	r2,r2,r5
   17e24:	421dd904 	addi	r8,r8,30564
   17e28:	12800054 	ori	r10,r2,1
   17e2c:	1893883a 	add	r9,r3,r2
   17e30:	32005326 	beq	r6,r8,17f80 <_free_r+0x280>
   17e34:	39400317 	ldw	r5,12(r7)
   17e38:	31400315 	stw	r5,12(r6)
   17e3c:	29800215 	stw	r6,8(r5)
   17e40:	1a800115 	stw	r10,4(r3)
   17e44:	48800015 	stw	r2,0(r9)
   17e48:	003fd606 	br	17da4 <__alt_mem_mcu_subsystem_ram_0+0x77ff7da4>
   17e4c:	3180004c 	andi	r6,r6,1
   17e50:	1145883a 	add	r2,r2,r5
   17e54:	3000071e 	bne	r6,zero,17e74 <_free_r+0x174>
   17e58:	81fffe17 	ldw	r7,-8(r16)
   17e5c:	19c7c83a 	sub	r3,r3,r7
   17e60:	19400317 	ldw	r5,12(r3)
   17e64:	19800217 	ldw	r6,8(r3)
   17e68:	11c5883a 	add	r2,r2,r7
   17e6c:	31400315 	stw	r5,12(r6)
   17e70:	29800215 	stw	r6,8(r5)
   17e74:	014000f4 	movhi	r5,3
   17e78:	11800054 	ori	r6,r2,1
   17e7c:	2963b317 	ldw	r5,-28980(r5)
   17e80:	19800115 	stw	r6,4(r3)
   17e84:	20c00215 	stw	r3,8(r4)
   17e88:	11400436 	bltu	r2,r5,17e9c <_free_r+0x19c>
   17e8c:	008000f4 	movhi	r2,3
   17e90:	116b2617 	ldw	r5,-21352(r2)
   17e94:	8809883a 	mov	r4,r17
   17e98:	0017be40 	call	17be4 <_malloc_trim_r>
   17e9c:	8809883a 	mov	r4,r17
   17ea0:	dfc00217 	ldw	ra,8(sp)
   17ea4:	dc400117 	ldw	r17,4(sp)
   17ea8:	dc000017 	ldw	r16,0(sp)
   17eac:	dec00304 	addi	sp,sp,12
   17eb0:	00201941 	jmpi	20194 <__malloc_unlock>
   17eb4:	100ad0fa 	srli	r5,r2,3
   17eb8:	21c00117 	ldw	r7,4(r4)
   17ebc:	28800044 	addi	r2,r5,1
   17ec0:	280dd0ba 	srai	r6,r5,2
   17ec4:	100490fa 	slli	r2,r2,3
   17ec8:	01400044 	movi	r5,1
   17ecc:	298a983a 	sll	r5,r5,r6
   17ed0:	2085883a 	add	r2,r4,r2
   17ed4:	11800017 	ldw	r6,0(r2)
   17ed8:	29cab03a 	or	r5,r5,r7
   17edc:	11fffe04 	addi	r7,r2,-8
   17ee0:	19c00315 	stw	r7,12(r3)
   17ee4:	19800215 	stw	r6,8(r3)
   17ee8:	21400115 	stw	r5,4(r4)
   17eec:	10c00015 	stw	r3,0(r2)
   17ef0:	30c00315 	stw	r3,12(r6)
   17ef4:	003fe906 	br	17e9c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e9c>
   17ef8:	3000391e 	bne	r6,zero,17fe0 <_free_r+0x2e0>
   17efc:	39800217 	ldw	r6,8(r7)
   17f00:	39000317 	ldw	r4,12(r7)
   17f04:	2885883a 	add	r2,r5,r2
   17f08:	11400054 	ori	r5,r2,1
   17f0c:	31000315 	stw	r4,12(r6)
   17f10:	21800215 	stw	r6,8(r4)
   17f14:	19400115 	stw	r5,4(r3)
   17f18:	1887883a 	add	r3,r3,r2
   17f1c:	18800015 	stw	r2,0(r3)
   17f20:	003fde06 	br	17e9c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e9c>
   17f24:	29800568 	cmpgeui	r6,r5,21
   17f28:	30000726 	beq	r6,zero,17f48 <_free_r+0x248>
   17f2c:	29801568 	cmpgeui	r6,r5,85
   17f30:	30001a1e 	bne	r6,zero,17f9c <_free_r+0x29c>
   17f34:	100ad33a 	srli	r5,r2,12
   17f38:	29801bc4 	addi	r6,r5,111
   17f3c:	29c01b84 	addi	r7,r5,110
   17f40:	300c90fa 	slli	r6,r6,3
   17f44:	003fa006 	br	17dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7dc8>
   17f48:	29801704 	addi	r6,r5,92
   17f4c:	29c016c4 	addi	r7,r5,91
   17f50:	300c90fa 	slli	r6,r6,3
   17f54:	003f9c06 	br	17dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7dc8>
   17f58:	280d883a 	mov	r6,r5
   17f5c:	003fa406 	br	17df0 <__alt_mem_mcu_subsystem_ram_0+0x77ff7df0>
   17f60:	380bd0ba 	srai	r5,r7,2
   17f64:	01c00044 	movi	r7,1
   17f68:	22000117 	ldw	r8,4(r4)
   17f6c:	394a983a 	sll	r5,r7,r5
   17f70:	3005883a 	mov	r2,r6
   17f74:	2a0ab03a 	or	r5,r5,r8
   17f78:	21400115 	stw	r5,4(r4)
   17f7c:	003f9d06 	br	17df4 <__alt_mem_mcu_subsystem_ram_0+0x77ff7df4>
   17f80:	20c00515 	stw	r3,20(r4)
   17f84:	20c00415 	stw	r3,16(r4)
   17f88:	19800315 	stw	r6,12(r3)
   17f8c:	19800215 	stw	r6,8(r3)
   17f90:	1a800115 	stw	r10,4(r3)
   17f94:	48800015 	stw	r2,0(r9)
   17f98:	003fc006 	br	17e9c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e9c>
   17f9c:	29805568 	cmpgeui	r6,r5,341
   17fa0:	3000051e 	bne	r6,zero,17fb8 <_free_r+0x2b8>
   17fa4:	100ad3fa 	srli	r5,r2,15
   17fa8:	29801e04 	addi	r6,r5,120
   17fac:	29c01dc4 	addi	r7,r5,119
   17fb0:	300c90fa 	slli	r6,r6,3
   17fb4:	003f8406 	br	17dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7dc8>
   17fb8:	29415568 	cmpgeui	r5,r5,1365
   17fbc:	2800051e 	bne	r5,zero,17fd4 <_free_r+0x2d4>
   17fc0:	100ad4ba 	srli	r5,r2,18
   17fc4:	29801f44 	addi	r6,r5,125
   17fc8:	29c01f04 	addi	r7,r5,124
   17fcc:	300c90fa 	slli	r6,r6,3
   17fd0:	003f7d06 	br	17dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7dc8>
   17fd4:	0180fe04 	movi	r6,1016
   17fd8:	01c01f84 	movi	r7,126
   17fdc:	003f7a06 	br	17dc8 <__alt_mem_mcu_subsystem_ram_0+0x77ff7dc8>
   17fe0:	11000054 	ori	r4,r2,1
   17fe4:	19000115 	stw	r4,4(r3)
   17fe8:	38800015 	stw	r2,0(r7)
   17fec:	003fab06 	br	17e9c <__alt_mem_mcu_subsystem_ram_0+0x77ff7e9c>

00017ff0 <__sfvwrite_r>:
   17ff0:	30800217 	ldw	r2,8(r6)
   17ff4:	1000bb26 	beq	r2,zero,182e4 <__sfvwrite_r+0x2f4>
   17ff8:	2a00030b 	ldhu	r8,12(r5)
   17ffc:	defff404 	addi	sp,sp,-48
   18000:	dd400715 	stw	r21,28(sp)
   18004:	dd000615 	stw	r20,24(sp)
   18008:	dc000215 	stw	r16,8(sp)
   1800c:	dfc00b15 	stw	ra,44(sp)
   18010:	df000a15 	stw	fp,40(sp)
   18014:	ddc00915 	stw	r23,36(sp)
   18018:	dd800815 	stw	r22,32(sp)
   1801c:	dcc00515 	stw	r19,20(sp)
   18020:	dc800415 	stw	r18,16(sp)
   18024:	dc400315 	stw	r17,12(sp)
   18028:	4080020c 	andi	r2,r8,8
   1802c:	2821883a 	mov	r16,r5
   18030:	202b883a 	mov	r21,r4
   18034:	3029883a 	mov	r20,r6
   18038:	10002426 	beq	r2,zero,180cc <__sfvwrite_r+0xdc>
   1803c:	28800417 	ldw	r2,16(r5)
   18040:	10002226 	beq	r2,zero,180cc <__sfvwrite_r+0xdc>
   18044:	4080008c 	andi	r2,r8,2
   18048:	a4400017 	ldw	r17,0(r20)
   1804c:	10002726 	beq	r2,zero,180ec <__sfvwrite_r+0xfc>
   18050:	80c00917 	ldw	r3,36(r16)
   18054:	80800717 	ldw	r2,28(r16)
   18058:	05a00034 	movhi	r22,32768
   1805c:	0027883a 	mov	r19,zero
   18060:	0025883a 	mov	r18,zero
   18064:	b5bf0004 	addi	r22,r22,-1024
   18068:	980d883a 	mov	r6,r19
   1806c:	100b883a 	mov	r5,r2
   18070:	a809883a 	mov	r4,r21
   18074:	90001126 	beq	r18,zero,180bc <__sfvwrite_r+0xcc>
   18078:	900f883a 	mov	r7,r18
   1807c:	b480012e 	bgeu	r22,r18,18084 <__sfvwrite_r+0x94>
   18080:	b00f883a 	mov	r7,r22
   18084:	183ee83a 	callr	r3
   18088:	00809c0e 	bge	zero,r2,182fc <__sfvwrite_r+0x30c>
   1808c:	a0c00217 	ldw	r3,8(r20)
   18090:	98a7883a 	add	r19,r19,r2
   18094:	90a5c83a 	sub	r18,r18,r2
   18098:	1885c83a 	sub	r2,r3,r2
   1809c:	a0800215 	stw	r2,8(r20)
   180a0:	10008326 	beq	r2,zero,182b0 <__sfvwrite_r+0x2c0>
   180a4:	80800717 	ldw	r2,28(r16)
   180a8:	80c00917 	ldw	r3,36(r16)
   180ac:	980d883a 	mov	r6,r19
   180b0:	100b883a 	mov	r5,r2
   180b4:	a809883a 	mov	r4,r21
   180b8:	903fef1e 	bne	r18,zero,18078 <__alt_mem_mcu_subsystem_ram_0+0x77ff8078>
   180bc:	8cc00017 	ldw	r19,0(r17)
   180c0:	8c800117 	ldw	r18,4(r17)
   180c4:	8c400204 	addi	r17,r17,8
   180c8:	003fe706 	br	18068 <__alt_mem_mcu_subsystem_ram_0+0x77ff8068>
   180cc:	800b883a 	mov	r5,r16
   180d0:	a809883a 	mov	r4,r21
   180d4:	0015b700 	call	15b70 <__swsetup_r>
   180d8:	1000eb1e 	bne	r2,zero,18488 <__sfvwrite_r+0x498>
   180dc:	8200030b 	ldhu	r8,12(r16)
   180e0:	a4400017 	ldw	r17,0(r20)
   180e4:	4080008c 	andi	r2,r8,2
   180e8:	103fd91e 	bne	r2,zero,18050 <__alt_mem_mcu_subsystem_ram_0+0x77ff8050>
   180ec:	4080004c 	andi	r2,r8,1
   180f0:	10004e1e 	bne	r2,zero,1822c <__sfvwrite_r+0x23c>
   180f4:	00a00034 	movhi	r2,32768
   180f8:	10bfff84 	addi	r2,r2,-2
   180fc:	00e00034 	movhi	r3,32768
   18100:	85c00217 	ldw	r23,8(r16)
   18104:	81000017 	ldw	r4,0(r16)
   18108:	d8800015 	stw	r2,0(sp)
   1810c:	18bfffc4 	addi	r2,r3,-1
   18110:	0039883a 	mov	fp,zero
   18114:	0025883a 	mov	r18,zero
   18118:	d8800115 	stw	r2,4(sp)
   1811c:	90003f26 	beq	r18,zero,1821c <__sfvwrite_r+0x22c>
   18120:	4080800c 	andi	r2,r8,512
   18124:	10009126 	beq	r2,zero,1836c <__sfvwrite_r+0x37c>
   18128:	b82d883a 	mov	r22,r23
   1812c:	95c0b436 	bltu	r18,r23,18400 <__sfvwrite_r+0x410>
   18130:	4081200c 	andi	r2,r8,1152
   18134:	10002526 	beq	r2,zero,181cc <__sfvwrite_r+0x1dc>
   18138:	81800517 	ldw	r6,20(r16)
   1813c:	81400417 	ldw	r5,16(r16)
   18140:	90800044 	addi	r2,r18,1
   18144:	318000e4 	muli	r6,r6,3
   18148:	216fc83a 	sub	r23,r4,r5
   1814c:	15c5883a 	add	r2,r2,r23
   18150:	3026d7fa 	srli	r19,r6,31
   18154:	99a7883a 	add	r19,r19,r6
   18158:	9827d07a 	srai	r19,r19,1
   1815c:	980d883a 	mov	r6,r19
   18160:	9880022e 	bgeu	r19,r2,1816c <__sfvwrite_r+0x17c>
   18164:	1027883a 	mov	r19,r2
   18168:	100d883a 	mov	r6,r2
   1816c:	4201000c 	andi	r8,r8,1024
   18170:	4000a826 	beq	r8,zero,18414 <__sfvwrite_r+0x424>
   18174:	300b883a 	mov	r5,r6
   18178:	a809883a 	mov	r4,r21
   1817c:	000fdf40 	call	fdf4 <_malloc_r>
   18180:	102d883a 	mov	r22,r2
   18184:	1000bc26 	beq	r2,zero,18478 <__sfvwrite_r+0x488>
   18188:	81400417 	ldw	r5,16(r16)
   1818c:	b80d883a 	mov	r6,r23
   18190:	1009883a 	mov	r4,r2
   18194:	00106380 	call	10638 <memcpy>
   18198:	8080030b 	ldhu	r2,12(r16)
   1819c:	00fedfc4 	movi	r3,-1153
   181a0:	10c4703a 	and	r2,r2,r3
   181a4:	10802014 	ori	r2,r2,128
   181a8:	8080030d 	sth	r2,12(r16)
   181ac:	b5c9883a 	add	r4,r22,r23
   181b0:	9dc5c83a 	sub	r2,r19,r23
   181b4:	85800415 	stw	r22,16(r16)
   181b8:	81000015 	stw	r4,0(r16)
   181bc:	84c00515 	stw	r19,20(r16)
   181c0:	902f883a 	mov	r23,r18
   181c4:	80800215 	stw	r2,8(r16)
   181c8:	902d883a 	mov	r22,r18
   181cc:	b00d883a 	mov	r6,r22
   181d0:	e00b883a 	mov	r5,fp
   181d4:	0018a100 	call	18a10 <memmove>
   181d8:	80800217 	ldw	r2,8(r16)
   181dc:	81800017 	ldw	r6,0(r16)
   181e0:	9027883a 	mov	r19,r18
   181e4:	15c5c83a 	sub	r2,r2,r23
   181e8:	358d883a 	add	r6,r6,r22
   181ec:	80800215 	stw	r2,8(r16)
   181f0:	81800015 	stw	r6,0(r16)
   181f4:	0025883a 	mov	r18,zero
   181f8:	a0800217 	ldw	r2,8(r20)
   181fc:	e4f9883a 	add	fp,fp,r19
   18200:	14e7c83a 	sub	r19,r2,r19
   18204:	a4c00215 	stw	r19,8(r20)
   18208:	98002926 	beq	r19,zero,182b0 <__sfvwrite_r+0x2c0>
   1820c:	8200030b 	ldhu	r8,12(r16)
   18210:	85c00217 	ldw	r23,8(r16)
   18214:	81000017 	ldw	r4,0(r16)
   18218:	903fc11e 	bne	r18,zero,18120 <__alt_mem_mcu_subsystem_ram_0+0x77ff8120>
   1821c:	8f000017 	ldw	fp,0(r17)
   18220:	8c800117 	ldw	r18,4(r17)
   18224:	8c400204 	addi	r17,r17,8
   18228:	003fbc06 	br	1811c <__alt_mem_mcu_subsystem_ram_0+0x77ff811c>
   1822c:	002d883a 	mov	r22,zero
   18230:	0005883a 	mov	r2,zero
   18234:	0039883a 	mov	fp,zero
   18238:	0027883a 	mov	r19,zero
   1823c:	98003426 	beq	r19,zero,18310 <__sfvwrite_r+0x320>
   18240:	10003726 	beq	r2,zero,18320 <__sfvwrite_r+0x330>
   18244:	b02f883a 	mov	r23,r22
   18248:	9d80012e 	bgeu	r19,r22,18250 <__sfvwrite_r+0x260>
   1824c:	982f883a 	mov	r23,r19
   18250:	81000017 	ldw	r4,0(r16)
   18254:	80800417 	ldw	r2,16(r16)
   18258:	81c00517 	ldw	r7,20(r16)
   1825c:	1100032e 	bgeu	r2,r4,1826c <__sfvwrite_r+0x27c>
   18260:	84800217 	ldw	r18,8(r16)
   18264:	3ca5883a 	add	r18,r7,r18
   18268:	95c03516 	blt	r18,r23,18340 <__sfvwrite_r+0x350>
   1826c:	b9c07716 	blt	r23,r7,1844c <__sfvwrite_r+0x45c>
   18270:	80800917 	ldw	r2,36(r16)
   18274:	81400717 	ldw	r5,28(r16)
   18278:	e00d883a 	mov	r6,fp
   1827c:	a809883a 	mov	r4,r21
   18280:	103ee83a 	callr	r2
   18284:	1025883a 	mov	r18,r2
   18288:	00801c0e 	bge	zero,r2,182fc <__sfvwrite_r+0x30c>
   1828c:	b4adc83a 	sub	r22,r22,r18
   18290:	b0001626 	beq	r22,zero,182ec <__sfvwrite_r+0x2fc>
   18294:	00800044 	movi	r2,1
   18298:	a0c00217 	ldw	r3,8(r20)
   1829c:	e4b9883a 	add	fp,fp,r18
   182a0:	9ca7c83a 	sub	r19,r19,r18
   182a4:	1ca5c83a 	sub	r18,r3,r18
   182a8:	a4800215 	stw	r18,8(r20)
   182ac:	903fe31e 	bne	r18,zero,1823c <__alt_mem_mcu_subsystem_ram_0+0x77ff823c>
   182b0:	0005883a 	mov	r2,zero
   182b4:	dfc00b17 	ldw	ra,44(sp)
   182b8:	df000a17 	ldw	fp,40(sp)
   182bc:	ddc00917 	ldw	r23,36(sp)
   182c0:	dd800817 	ldw	r22,32(sp)
   182c4:	dd400717 	ldw	r21,28(sp)
   182c8:	dd000617 	ldw	r20,24(sp)
   182cc:	dcc00517 	ldw	r19,20(sp)
   182d0:	dc800417 	ldw	r18,16(sp)
   182d4:	dc400317 	ldw	r17,12(sp)
   182d8:	dc000217 	ldw	r16,8(sp)
   182dc:	dec00c04 	addi	sp,sp,48
   182e0:	f800283a 	ret
   182e4:	0005883a 	mov	r2,zero
   182e8:	f800283a 	ret
   182ec:	800b883a 	mov	r5,r16
   182f0:	a809883a 	mov	r4,r21
   182f4:	00177fc0 	call	177fc <_fflush_r>
   182f8:	103fe726 	beq	r2,zero,18298 <__alt_mem_mcu_subsystem_ram_0+0x77ff8298>
   182fc:	8080030b 	ldhu	r2,12(r16)
   18300:	10801014 	ori	r2,r2,64
   18304:	8080030d 	sth	r2,12(r16)
   18308:	00bfffc4 	movi	r2,-1
   1830c:	003fe906 	br	182b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff82b4>
   18310:	8cc00117 	ldw	r19,4(r17)
   18314:	8f000017 	ldw	fp,0(r17)
   18318:	8c400204 	addi	r17,r17,8
   1831c:	983ffc26 	beq	r19,zero,18310 <__alt_mem_mcu_subsystem_ram_0+0x77ff8310>
   18320:	980d883a 	mov	r6,r19
   18324:	01400284 	movi	r5,10
   18328:	e009883a 	mov	r4,fp
   1832c:	00189280 	call	18928 <memchr>
   18330:	10004426 	beq	r2,zero,18444 <__sfvwrite_r+0x454>
   18334:	10800044 	addi	r2,r2,1
   18338:	172dc83a 	sub	r22,r2,fp
   1833c:	003fc106 	br	18244 <__alt_mem_mcu_subsystem_ram_0+0x77ff8244>
   18340:	e00b883a 	mov	r5,fp
   18344:	900d883a 	mov	r6,r18
   18348:	0018a100 	call	18a10 <memmove>
   1834c:	80800017 	ldw	r2,0(r16)
   18350:	800b883a 	mov	r5,r16
   18354:	a809883a 	mov	r4,r21
   18358:	1485883a 	add	r2,r2,r18
   1835c:	80800015 	stw	r2,0(r16)
   18360:	00177fc0 	call	177fc <_fflush_r>
   18364:	103fc926 	beq	r2,zero,1828c <__alt_mem_mcu_subsystem_ram_0+0x77ff828c>
   18368:	003fe406 	br	182fc <__alt_mem_mcu_subsystem_ram_0+0x77ff82fc>
   1836c:	80800417 	ldw	r2,16(r16)
   18370:	11001136 	bltu	r2,r4,183b8 <__sfvwrite_r+0x3c8>
   18374:	84c00517 	ldw	r19,20(r16)
   18378:	94c00f36 	bltu	r18,r19,183b8 <__sfvwrite_r+0x3c8>
   1837c:	d8800017 	ldw	r2,0(sp)
   18380:	1480222e 	bgeu	r2,r18,1840c <__sfvwrite_r+0x41c>
   18384:	d9000117 	ldw	r4,4(sp)
   18388:	980b883a 	mov	r5,r19
   1838c:	000d5d80 	call	d5d8 <__divsi3>
   18390:	14cf383a 	mul	r7,r2,r19
   18394:	81400717 	ldw	r5,28(r16)
   18398:	80800917 	ldw	r2,36(r16)
   1839c:	e00d883a 	mov	r6,fp
   183a0:	a809883a 	mov	r4,r21
   183a4:	103ee83a 	callr	r2
   183a8:	00bfd40e 	bge	zero,r2,182fc <__alt_mem_mcu_subsystem_ram_0+0x77ff82fc>
   183ac:	1027883a 	mov	r19,r2
   183b0:	94e5c83a 	sub	r18,r18,r19
   183b4:	003f9006 	br	181f8 <__alt_mem_mcu_subsystem_ram_0+0x77ff81f8>
   183b8:	b827883a 	mov	r19,r23
   183bc:	95c0012e 	bgeu	r18,r23,183c4 <__sfvwrite_r+0x3d4>
   183c0:	9027883a 	mov	r19,r18
   183c4:	980d883a 	mov	r6,r19
   183c8:	e00b883a 	mov	r5,fp
   183cc:	0018a100 	call	18a10 <memmove>
   183d0:	80800217 	ldw	r2,8(r16)
   183d4:	81000017 	ldw	r4,0(r16)
   183d8:	14c5c83a 	sub	r2,r2,r19
   183dc:	24c9883a 	add	r4,r4,r19
   183e0:	80800215 	stw	r2,8(r16)
   183e4:	81000015 	stw	r4,0(r16)
   183e8:	103ff11e 	bne	r2,zero,183b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff83b0>
   183ec:	800b883a 	mov	r5,r16
   183f0:	a809883a 	mov	r4,r21
   183f4:	00177fc0 	call	177fc <_fflush_r>
   183f8:	103fed26 	beq	r2,zero,183b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff83b0>
   183fc:	003fbf06 	br	182fc <__alt_mem_mcu_subsystem_ram_0+0x77ff82fc>
   18400:	902f883a 	mov	r23,r18
   18404:	902d883a 	mov	r22,r18
   18408:	003f7006 	br	181cc <__alt_mem_mcu_subsystem_ram_0+0x77ff81cc>
   1840c:	9009883a 	mov	r4,r18
   18410:	003fdd06 	br	18388 <__alt_mem_mcu_subsystem_ram_0+0x77ff8388>
   18414:	a809883a 	mov	r4,r21
   18418:	0019c340 	call	19c34 <_realloc_r>
   1841c:	102d883a 	mov	r22,r2
   18420:	103f621e 	bne	r2,zero,181ac <__alt_mem_mcu_subsystem_ram_0+0x77ff81ac>
   18424:	81400417 	ldw	r5,16(r16)
   18428:	a809883a 	mov	r4,r21
   1842c:	0017d000 	call	17d00 <_free_r>
   18430:	8080030b 	ldhu	r2,12(r16)
   18434:	00c00304 	movi	r3,12
   18438:	a8c00015 	stw	r3,0(r21)
   1843c:	10bfdfcc 	andi	r2,r2,65407
   18440:	003faf06 	br	18300 <__alt_mem_mcu_subsystem_ram_0+0x77ff8300>
   18444:	9d800044 	addi	r22,r19,1
   18448:	003f7e06 	br	18244 <__alt_mem_mcu_subsystem_ram_0+0x77ff8244>
   1844c:	b80d883a 	mov	r6,r23
   18450:	e00b883a 	mov	r5,fp
   18454:	0018a100 	call	18a10 <memmove>
   18458:	80c00217 	ldw	r3,8(r16)
   1845c:	80800017 	ldw	r2,0(r16)
   18460:	b825883a 	mov	r18,r23
   18464:	1dc7c83a 	sub	r3,r3,r23
   18468:	15ef883a 	add	r23,r2,r23
   1846c:	80c00215 	stw	r3,8(r16)
   18470:	85c00015 	stw	r23,0(r16)
   18474:	003f8506 	br	1828c <__alt_mem_mcu_subsystem_ram_0+0x77ff828c>
   18478:	00800304 	movi	r2,12
   1847c:	a8800015 	stw	r2,0(r21)
   18480:	8080030b 	ldhu	r2,12(r16)
   18484:	003f9e06 	br	18300 <__alt_mem_mcu_subsystem_ram_0+0x77ff8300>
   18488:	00bfffc4 	movi	r2,-1
   1848c:	003f8906 	br	182b4 <__alt_mem_mcu_subsystem_ram_0+0x77ff82b4>

00018490 <_fwalk>:
   18490:	defffa04 	addi	sp,sp,-24
   18494:	dc800215 	stw	r18,8(sp)
   18498:	dfc00515 	stw	ra,20(sp)
   1849c:	dd000415 	stw	r20,16(sp)
   184a0:	dcc00315 	stw	r19,12(sp)
   184a4:	dc400115 	stw	r17,4(sp)
   184a8:	dc000015 	stw	r16,0(sp)
   184ac:	2480b804 	addi	r18,r4,736
   184b0:	90001e26 	beq	r18,zero,1852c <_fwalk+0x9c>
   184b4:	2827883a 	mov	r19,r5
   184b8:	0029883a 	mov	r20,zero
   184bc:	94400117 	ldw	r17,4(r18)
   184c0:	94000217 	ldw	r16,8(r18)
   184c4:	8c7fffc4 	addi	r17,r17,-1
   184c8:	88000d16 	blt	r17,zero,18500 <_fwalk+0x70>
   184cc:	8080030b 	ldhu	r2,12(r16)
   184d0:	8c7fffc4 	addi	r17,r17,-1
   184d4:	8009883a 	mov	r4,r16
   184d8:	108000b0 	cmpltui	r2,r2,2
   184dc:	1000051e 	bne	r2,zero,184f4 <_fwalk+0x64>
   184e0:	8080038f 	ldh	r2,14(r16)
   184e4:	10bfffe0 	cmpeqi	r2,r2,-1
   184e8:	1000021e 	bne	r2,zero,184f4 <_fwalk+0x64>
   184ec:	983ee83a 	callr	r19
   184f0:	a0a8b03a 	or	r20,r20,r2
   184f4:	88bfffd8 	cmpnei	r2,r17,-1
   184f8:	84001a04 	addi	r16,r16,104
   184fc:	103ff31e 	bne	r2,zero,184cc <__alt_mem_mcu_subsystem_ram_0+0x77ff84cc>
   18500:	94800017 	ldw	r18,0(r18)
   18504:	903fed1e 	bne	r18,zero,184bc <__alt_mem_mcu_subsystem_ram_0+0x77ff84bc>
   18508:	a005883a 	mov	r2,r20
   1850c:	dfc00517 	ldw	ra,20(sp)
   18510:	dd000417 	ldw	r20,16(sp)
   18514:	dcc00317 	ldw	r19,12(sp)
   18518:	dc800217 	ldw	r18,8(sp)
   1851c:	dc400117 	ldw	r17,4(sp)
   18520:	dc000017 	ldw	r16,0(sp)
   18524:	dec00604 	addi	sp,sp,24
   18528:	f800283a 	ret
   1852c:	0029883a 	mov	r20,zero
   18530:	003ff506 	br	18508 <__alt_mem_mcu_subsystem_ram_0+0x77ff8508>

00018534 <_fwalk_reent>:
   18534:	defff904 	addi	sp,sp,-28
   18538:	dcc00315 	stw	r19,12(sp)
   1853c:	dfc00615 	stw	ra,24(sp)
   18540:	dd400515 	stw	r21,20(sp)
   18544:	dd000415 	stw	r20,16(sp)
   18548:	dc800215 	stw	r18,8(sp)
   1854c:	dc400115 	stw	r17,4(sp)
   18550:	dc000015 	stw	r16,0(sp)
   18554:	24c0b804 	addi	r19,r4,736
   18558:	98002126 	beq	r19,zero,185e0 <_fwalk_reent+0xac>
   1855c:	2829883a 	mov	r20,r5
   18560:	2025883a 	mov	r18,r4
   18564:	002b883a 	mov	r21,zero
   18568:	9c400117 	ldw	r17,4(r19)
   1856c:	9c000217 	ldw	r16,8(r19)
   18570:	8c7fffc4 	addi	r17,r17,-1
   18574:	88000e16 	blt	r17,zero,185b0 <_fwalk_reent+0x7c>
   18578:	8080030b 	ldhu	r2,12(r16)
   1857c:	8c7fffc4 	addi	r17,r17,-1
   18580:	800b883a 	mov	r5,r16
   18584:	108000b0 	cmpltui	r2,r2,2
   18588:	9009883a 	mov	r4,r18
   1858c:	1000051e 	bne	r2,zero,185a4 <_fwalk_reent+0x70>
   18590:	8080038f 	ldh	r2,14(r16)
   18594:	10bfffe0 	cmpeqi	r2,r2,-1
   18598:	1000021e 	bne	r2,zero,185a4 <_fwalk_reent+0x70>
   1859c:	a03ee83a 	callr	r20
   185a0:	a8aab03a 	or	r21,r21,r2
   185a4:	88bfffd8 	cmpnei	r2,r17,-1
   185a8:	84001a04 	addi	r16,r16,104
   185ac:	103ff21e 	bne	r2,zero,18578 <__alt_mem_mcu_subsystem_ram_0+0x77ff8578>
   185b0:	9cc00017 	ldw	r19,0(r19)
   185b4:	983fec1e 	bne	r19,zero,18568 <__alt_mem_mcu_subsystem_ram_0+0x77ff8568>
   185b8:	a805883a 	mov	r2,r21
   185bc:	dfc00617 	ldw	ra,24(sp)
   185c0:	dd400517 	ldw	r21,20(sp)
   185c4:	dd000417 	ldw	r20,16(sp)
   185c8:	dcc00317 	ldw	r19,12(sp)
   185cc:	dc800217 	ldw	r18,8(sp)
   185d0:	dc400117 	ldw	r17,4(sp)
   185d4:	dc000017 	ldw	r16,0(sp)
   185d8:	dec00704 	addi	sp,sp,28
   185dc:	f800283a 	ret
   185e0:	002b883a 	mov	r21,zero
   185e4:	003ff406 	br	185b8 <__alt_mem_mcu_subsystem_ram_0+0x77ff85b8>

000185e8 <_findenv_r>:
   185e8:	defff904 	addi	sp,sp,-28
   185ec:	dd400515 	stw	r21,20(sp)
   185f0:	dd000415 	stw	r20,16(sp)
   185f4:	dcc00315 	stw	r19,12(sp)
   185f8:	dc000015 	stw	r16,0(sp)
   185fc:	dfc00615 	stw	ra,24(sp)
   18600:	dc800215 	stw	r18,8(sp)
   18604:	dc400115 	stw	r17,4(sp)
   18608:	202b883a 	mov	r21,r4
   1860c:	2829883a 	mov	r20,r5
   18610:	3027883a 	mov	r19,r6
   18614:	001fcac0 	call	1fcac <__env_lock>
   18618:	008000f4 	movhi	r2,3
   1861c:	1423b617 	ldw	r16,-28968(r2)
   18620:	80001a26 	beq	r16,zero,1868c <_findenv_r+0xa4>
   18624:	a0800007 	ldb	r2,0(r20)
   18628:	10002d26 	beq	r2,zero,186e0 <_findenv_r+0xf8>
   1862c:	10800f58 	cmpnei	r2,r2,61
   18630:	a00d883a 	mov	r6,r20
   18634:	1000021e 	bne	r2,zero,18640 <_findenv_r+0x58>
   18638:	00001406 	br	1868c <_findenv_r+0xa4>
   1863c:	18001326 	beq	r3,zero,1868c <_findenv_r+0xa4>
   18640:	31800044 	addi	r6,r6,1
   18644:	30800007 	ldb	r2,0(r6)
   18648:	10c00f58 	cmpnei	r3,r2,61
   1864c:	103ffb1e 	bne	r2,zero,1863c <__alt_mem_mcu_subsystem_ram_0+0x77ff863c>
   18650:	3523c83a 	sub	r17,r6,r20
   18654:	81000017 	ldw	r4,0(r16)
   18658:	20000c26 	beq	r4,zero,1868c <_findenv_r+0xa4>
   1865c:	880d883a 	mov	r6,r17
   18660:	a00b883a 	mov	r5,r20
   18664:	001a5bc0 	call	1a5bc <strncmp>
   18668:	1000051e 	bne	r2,zero,18680 <_findenv_r+0x98>
   1866c:	84800017 	ldw	r18,0(r16)
   18670:	9465883a 	add	r18,r18,r17
   18674:	90800007 	ldb	r2,0(r18)
   18678:	10800f58 	cmpnei	r2,r2,61
   1867c:	10000f26 	beq	r2,zero,186bc <_findenv_r+0xd4>
   18680:	84000104 	addi	r16,r16,4
   18684:	81000017 	ldw	r4,0(r16)
   18688:	203ff41e 	bne	r4,zero,1865c <__alt_mem_mcu_subsystem_ram_0+0x77ff865c>
   1868c:	a809883a 	mov	r4,r21
   18690:	001fcd00 	call	1fcd0 <__env_unlock>
   18694:	0005883a 	mov	r2,zero
   18698:	dfc00617 	ldw	ra,24(sp)
   1869c:	dd400517 	ldw	r21,20(sp)
   186a0:	dd000417 	ldw	r20,16(sp)
   186a4:	dcc00317 	ldw	r19,12(sp)
   186a8:	dc800217 	ldw	r18,8(sp)
   186ac:	dc400117 	ldw	r17,4(sp)
   186b0:	dc000017 	ldw	r16,0(sp)
   186b4:	dec00704 	addi	sp,sp,28
   186b8:	f800283a 	ret
   186bc:	008000f4 	movhi	r2,3
   186c0:	10a3b617 	ldw	r2,-28968(r2)
   186c4:	a809883a 	mov	r4,r21
   186c8:	80a1c83a 	sub	r16,r16,r2
   186cc:	8021d0ba 	srai	r16,r16,2
   186d0:	9c000015 	stw	r16,0(r19)
   186d4:	001fcd00 	call	1fcd0 <__env_unlock>
   186d8:	90800044 	addi	r2,r18,1
   186dc:	003fee06 	br	18698 <__alt_mem_mcu_subsystem_ram_0+0x77ff8698>
   186e0:	0023883a 	mov	r17,zero
   186e4:	003fdb06 	br	18654 <__alt_mem_mcu_subsystem_ram_0+0x77ff8654>

000186e8 <_getenv_r>:
   186e8:	defffe04 	addi	sp,sp,-8
   186ec:	d80d883a 	mov	r6,sp
   186f0:	dfc00115 	stw	ra,4(sp)
   186f4:	00185e80 	call	185e8 <_findenv_r>
   186f8:	dfc00117 	ldw	ra,4(sp)
   186fc:	dec00204 	addi	sp,sp,8
   18700:	f800283a 	ret

00018704 <__gettzinfo>:
   18704:	008000b4 	movhi	r2,2
   18708:	109ed904 	addi	r2,r2,31588
   1870c:	f800283a 	ret

00018710 <__localeconv_l>:
   18710:	20803c04 	addi	r2,r4,240
   18714:	f800283a 	ret

00018718 <_localeconv_r>:
   18718:	008000f4 	movhi	r2,3
   1871c:	10a3b117 	ldw	r2,-28988(r2)
   18720:	10800d17 	ldw	r2,52(r2)
   18724:	1000021e 	bne	r2,zero,18730 <_localeconv_r+0x18>
   18728:	008000b4 	movhi	r2,2
   1872c:	109d7c04 	addi	r2,r2,30192
   18730:	10803c04 	addi	r2,r2,240
   18734:	f800283a 	ret

00018738 <localeconv>:
   18738:	008000f4 	movhi	r2,3
   1873c:	10a3b117 	ldw	r2,-28988(r2)
   18740:	10800d17 	ldw	r2,52(r2)
   18744:	1000021e 	bne	r2,zero,18750 <localeconv+0x18>
   18748:	008000b4 	movhi	r2,2
   1874c:	109d7c04 	addi	r2,r2,30192
   18750:	10803c04 	addi	r2,r2,240
   18754:	f800283a 	ret

00018758 <__swhatbuf_r>:
   18758:	deffed04 	addi	sp,sp,-76
   1875c:	dc001015 	stw	r16,64(sp)
   18760:	2821883a 	mov	r16,r5
   18764:	2940038f 	ldh	r5,14(r5)
   18768:	dc401115 	stw	r17,68(sp)
   1876c:	dfc01215 	stw	ra,72(sp)
   18770:	3023883a 	mov	r17,r6
   18774:	2800100e 	bge	r5,zero,187b8 <__swhatbuf_r+0x60>
   18778:	8080030b 	ldhu	r2,12(r16)
   1877c:	38000015 	stw	zero,0(r7)
   18780:	1080200c 	andi	r2,r2,128
   18784:	1000081e 	bne	r2,zero,187a8 <__swhatbuf_r+0x50>
   18788:	00810004 	movi	r2,1024
   1878c:	88800015 	stw	r2,0(r17)
   18790:	0005883a 	mov	r2,zero
   18794:	dfc01217 	ldw	ra,72(sp)
   18798:	dc401117 	ldw	r17,68(sp)
   1879c:	dc001017 	ldw	r16,64(sp)
   187a0:	dec01304 	addi	sp,sp,76
   187a4:	f800283a 	ret
   187a8:	00801004 	movi	r2,64
   187ac:	88800015 	stw	r2,0(r17)
   187b0:	0005883a 	mov	r2,zero
   187b4:	003ff706 	br	18794 <__alt_mem_mcu_subsystem_ram_0+0x77ff8794>
   187b8:	d9800104 	addi	r6,sp,4
   187bc:	d9c00015 	stw	r7,0(sp)
   187c0:	001e8840 	call	1e884 <_fstat_r>
   187c4:	d9c00017 	ldw	r7,0(sp)
   187c8:	103feb16 	blt	r2,zero,18778 <__alt_mem_mcu_subsystem_ram_0+0x77ff8778>
   187cc:	d8c00217 	ldw	r3,8(sp)
   187d0:	00820004 	movi	r2,2048
   187d4:	18fc000c 	andi	r3,r3,61440
   187d8:	18c80020 	cmpeqi	r3,r3,8192
   187dc:	38c00015 	stw	r3,0(r7)
   187e0:	00c10004 	movi	r3,1024
   187e4:	88c00015 	stw	r3,0(r17)
   187e8:	003fea06 	br	18794 <__alt_mem_mcu_subsystem_ram_0+0x77ff8794>

000187ec <__smakebuf_r>:
   187ec:	28c0030b 	ldhu	r3,12(r5)
   187f0:	defffa04 	addi	sp,sp,-24
   187f4:	dc000215 	stw	r16,8(sp)
   187f8:	dfc00515 	stw	ra,20(sp)
   187fc:	dc800415 	stw	r18,16(sp)
   18800:	dc400315 	stw	r17,12(sp)
   18804:	18c0008c 	andi	r3,r3,2
   18808:	2821883a 	mov	r16,r5
   1880c:	18000b26 	beq	r3,zero,1883c <__smakebuf_r+0x50>
   18810:	28c010c4 	addi	r3,r5,67
   18814:	28c00015 	stw	r3,0(r5)
   18818:	28c00415 	stw	r3,16(r5)
   1881c:	00c00044 	movi	r3,1
   18820:	28c00515 	stw	r3,20(r5)
   18824:	dfc00517 	ldw	ra,20(sp)
   18828:	dc800417 	ldw	r18,16(sp)
   1882c:	dc400317 	ldw	r17,12(sp)
   18830:	dc000217 	ldw	r16,8(sp)
   18834:	dec00604 	addi	sp,sp,24
   18838:	f800283a 	ret
   1883c:	d9c00104 	addi	r7,sp,4
   18840:	d80d883a 	mov	r6,sp
   18844:	2023883a 	mov	r17,r4
   18848:	00187580 	call	18758 <__swhatbuf_r>
   1884c:	1025883a 	mov	r18,r2
   18850:	d8800117 	ldw	r2,4(sp)
   18854:	10001b1e 	bne	r2,zero,188c4 <__smakebuf_r+0xd8>
   18858:	d9400017 	ldw	r5,0(sp)
   1885c:	8809883a 	mov	r4,r17
   18860:	000fdf40 	call	fdf4 <_malloc_r>
   18864:	10002426 	beq	r2,zero,188f8 <__smakebuf_r+0x10c>
   18868:	01000074 	movhi	r4,1
   1886c:	211e2304 	addi	r4,r4,30860
   18870:	80c0030b 	ldhu	r3,12(r16)
   18874:	89000f15 	stw	r4,60(r17)
   18878:	80800015 	stw	r2,0(r16)
   1887c:	80800415 	stw	r2,16(r16)
   18880:	d8800017 	ldw	r2,0(sp)
   18884:	d9400117 	ldw	r5,4(sp)
   18888:	18c02014 	ori	r3,r3,128
   1888c:	80c0030d 	sth	r3,12(r16)
   18890:	80800515 	stw	r2,20(r16)
   18894:	2800031e 	bne	r5,zero,188a4 <__smakebuf_r+0xb8>
   18898:	90c6b03a 	or	r3,r18,r3
   1889c:	80c0030d 	sth	r3,12(r16)
   188a0:	003fe006 	br	18824 <__alt_mem_mcu_subsystem_ram_0+0x77ff8824>
   188a4:	8140038f 	ldh	r5,14(r16)
   188a8:	8809883a 	mov	r4,r17
   188ac:	001e8e40 	call	1e8e4 <_isatty_r>
   188b0:	80c0030b 	ldhu	r3,12(r16)
   188b4:	103ff826 	beq	r2,zero,18898 <__alt_mem_mcu_subsystem_ram_0+0x77ff8898>
   188b8:	18ffff0c 	andi	r3,r3,65532
   188bc:	18c00054 	ori	r3,r3,1
   188c0:	003ff506 	br	18898 <__alt_mem_mcu_subsystem_ram_0+0x77ff8898>
   188c4:	8140038f 	ldh	r5,14(r16)
   188c8:	8809883a 	mov	r4,r17
   188cc:	001e8e40 	call	1e8e4 <_isatty_r>
   188d0:	103fe126 	beq	r2,zero,18858 <__alt_mem_mcu_subsystem_ram_0+0x77ff8858>
   188d4:	8080030b 	ldhu	r2,12(r16)
   188d8:	80c010c4 	addi	r3,r16,67
   188dc:	80c00015 	stw	r3,0(r16)
   188e0:	10800054 	ori	r2,r2,1
   188e4:	8080030d 	sth	r2,12(r16)
   188e8:	00800044 	movi	r2,1
   188ec:	80c00415 	stw	r3,16(r16)
   188f0:	80800515 	stw	r2,20(r16)
   188f4:	003fd806 	br	18858 <__alt_mem_mcu_subsystem_ram_0+0x77ff8858>
   188f8:	8080030b 	ldhu	r2,12(r16)
   188fc:	10c0800c 	andi	r3,r2,512
   18900:	183fc81e 	bne	r3,zero,18824 <__alt_mem_mcu_subsystem_ram_0+0x77ff8824>
   18904:	10bfff0c 	andi	r2,r2,65532
   18908:	10800094 	ori	r2,r2,2
   1890c:	80c010c4 	addi	r3,r16,67
   18910:	8080030d 	sth	r2,12(r16)
   18914:	00800044 	movi	r2,1
   18918:	80c00015 	stw	r3,0(r16)
   1891c:	80c00415 	stw	r3,16(r16)
   18920:	80800515 	stw	r2,20(r16)
   18924:	003fbf06 	br	18824 <__alt_mem_mcu_subsystem_ram_0+0x77ff8824>

00018928 <memchr>:
   18928:	208000cc 	andi	r2,r4,3
   1892c:	280f883a 	mov	r7,r5
   18930:	10003526 	beq	r2,zero,18a08 <memchr+0xe0>
   18934:	30bfffc4 	addi	r2,r6,-1
   18938:	30001926 	beq	r6,zero,189a0 <memchr+0x78>
   1893c:	20c00003 	ldbu	r3,0(r4)
   18940:	29803fcc 	andi	r6,r5,255
   18944:	30c0061e 	bne	r6,r3,18960 <memchr+0x38>
   18948:	00001706 	br	189a8 <memchr+0x80>
   1894c:	10bfffc4 	addi	r2,r2,-1
   18950:	10ffffe0 	cmpeqi	r3,r2,-1
   18954:	1800121e 	bne	r3,zero,189a0 <memchr+0x78>
   18958:	20c00003 	ldbu	r3,0(r4)
   1895c:	19801226 	beq	r3,r6,189a8 <memchr+0x80>
   18960:	21000044 	addi	r4,r4,1
   18964:	20c000cc 	andi	r3,r4,3
   18968:	183ff81e 	bne	r3,zero,1894c <__alt_mem_mcu_subsystem_ram_0+0x77ff894c>
   1896c:	10c00130 	cmpltui	r3,r2,4
   18970:	18000f26 	beq	r3,zero,189b0 <memchr+0x88>
   18974:	10000a26 	beq	r2,zero,189a0 <memchr+0x78>
   18978:	20c00003 	ldbu	r3,0(r4)
   1897c:	29403fcc 	andi	r5,r5,255
   18980:	28c00926 	beq	r5,r3,189a8 <memchr+0x80>
   18984:	2085883a 	add	r2,r4,r2
   18988:	38c03fcc 	andi	r3,r7,255
   1898c:	00000206 	br	18998 <memchr+0x70>
   18990:	21400003 	ldbu	r5,0(r4)
   18994:	28c00426 	beq	r5,r3,189a8 <memchr+0x80>
   18998:	21000044 	addi	r4,r4,1
   1899c:	113ffc1e 	bne	r2,r4,18990 <__alt_mem_mcu_subsystem_ram_0+0x77ff8990>
   189a0:	0005883a 	mov	r2,zero
   189a4:	f800283a 	ret
   189a8:	2005883a 	mov	r2,r4
   189ac:	f800283a 	ret
   189b0:	280c923a 	slli	r6,r5,8
   189b4:	2a403fcc 	andi	r9,r5,255
   189b8:	02bfbff4 	movhi	r10,65279
   189bc:	31bfffcc 	andi	r6,r6,65535
   189c0:	3246b03a 	or	r3,r6,r9
   189c4:	1812943a 	slli	r9,r3,16
   189c8:	02202074 	movhi	r8,32897
   189cc:	52bfbfc4 	addi	r10,r10,-257
   189d0:	48d2b03a 	or	r9,r9,r3
   189d4:	42202004 	addi	r8,r8,-32640
   189d8:	20c00017 	ldw	r3,0(r4)
   189dc:	48c6f03a 	xor	r3,r9,r3
   189e0:	1a8d883a 	add	r6,r3,r10
   189e4:	00c6303a 	nor	r3,zero,r3
   189e8:	30c6703a 	and	r3,r6,r3
   189ec:	1a06703a 	and	r3,r3,r8
   189f0:	183fe11e 	bne	r3,zero,18978 <__alt_mem_mcu_subsystem_ram_0+0x77ff8978>
   189f4:	10bfff04 	addi	r2,r2,-4
   189f8:	10c00128 	cmpgeui	r3,r2,4
   189fc:	21000104 	addi	r4,r4,4
   18a00:	183ff51e 	bne	r3,zero,189d8 <__alt_mem_mcu_subsystem_ram_0+0x77ff89d8>
   18a04:	003fdb06 	br	18974 <__alt_mem_mcu_subsystem_ram_0+0x77ff8974>
   18a08:	3005883a 	mov	r2,r6
   18a0c:	003fd706 	br	1896c <__alt_mem_mcu_subsystem_ram_0+0x77ff896c>

00018a10 <memmove>:
   18a10:	2005883a 	mov	r2,r4
   18a14:	29000a2e 	bgeu	r5,r4,18a40 <memmove+0x30>
   18a18:	2989883a 	add	r4,r5,r6
   18a1c:	1100082e 	bgeu	r2,r4,18a40 <memmove+0x30>
   18a20:	1187883a 	add	r3,r2,r6
   18a24:	30003926 	beq	r6,zero,18b0c <memmove+0xfc>
   18a28:	213fffc4 	addi	r4,r4,-1
   18a2c:	21400003 	ldbu	r5,0(r4)
   18a30:	18ffffc4 	addi	r3,r3,-1
   18a34:	19400005 	stb	r5,0(r3)
   18a38:	10fffb1e 	bne	r2,r3,18a28 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a28>
   18a3c:	f800283a 	ret
   18a40:	30c00430 	cmpltui	r3,r6,16
   18a44:	1800321e 	bne	r3,zero,18b10 <memmove+0x100>
   18a48:	2886b03a 	or	r3,r5,r2
   18a4c:	18c000cc 	andi	r3,r3,3
   18a50:	1800321e 	bne	r3,zero,18b1c <memmove+0x10c>
   18a54:	327ffc04 	addi	r9,r6,-16
   18a58:	4812d13a 	srli	r9,r9,4
   18a5c:	2811883a 	mov	r8,r5
   18a60:	100f883a 	mov	r7,r2
   18a64:	4a400044 	addi	r9,r9,1
   18a68:	4812913a 	slli	r9,r9,4
   18a6c:	1247883a 	add	r3,r2,r9
   18a70:	41000017 	ldw	r4,0(r8)
   18a74:	39c00404 	addi	r7,r7,16
   18a78:	42000404 	addi	r8,r8,16
   18a7c:	393ffc15 	stw	r4,-16(r7)
   18a80:	413ffd17 	ldw	r4,-12(r8)
   18a84:	393ffd15 	stw	r4,-12(r7)
   18a88:	413ffe17 	ldw	r4,-8(r8)
   18a8c:	393ffe15 	stw	r4,-8(r7)
   18a90:	413fff17 	ldw	r4,-4(r8)
   18a94:	393fff15 	stw	r4,-4(r7)
   18a98:	19fff51e 	bne	r3,r7,18a70 <__alt_mem_mcu_subsystem_ram_0+0x77ff8a70>
   18a9c:	310003cc 	andi	r4,r6,15
   18aa0:	21c00130 	cmpltui	r7,r4,4
   18aa4:	2a4b883a 	add	r5,r5,r9
   18aa8:	38001e1e 	bne	r7,zero,18b24 <memmove+0x114>
   18aac:	213fff04 	addi	r4,r4,-4
   18ab0:	200ed0ba 	srli	r7,r4,2
   18ab4:	2811883a 	mov	r8,r5
   18ab8:	1809883a 	mov	r4,r3
   18abc:	381290ba 	slli	r9,r7,2
   18ac0:	4a400104 	addi	r9,r9,4
   18ac4:	48d3883a 	add	r9,r9,r3
   18ac8:	42000104 	addi	r8,r8,4
   18acc:	42bfff17 	ldw	r10,-4(r8)
   18ad0:	21000104 	addi	r4,r4,4
   18ad4:	22bfff15 	stw	r10,-4(r4)
   18ad8:	227ffb1e 	bne	r4,r9,18ac8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8ac8>
   18adc:	39000044 	addi	r4,r7,1
   18ae0:	200890ba 	slli	r4,r4,2
   18ae4:	318000cc 	andi	r6,r6,3
   18ae8:	1907883a 	add	r3,r3,r4
   18aec:	290b883a 	add	r5,r5,r4
   18af0:	30000926 	beq	r6,zero,18b18 <memmove+0x108>
   18af4:	298d883a 	add	r6,r5,r6
   18af8:	29400044 	addi	r5,r5,1
   18afc:	29ffffc3 	ldbu	r7,-1(r5)
   18b00:	18c00044 	addi	r3,r3,1
   18b04:	19ffffc5 	stb	r7,-1(r3)
   18b08:	317ffb1e 	bne	r6,r5,18af8 <__alt_mem_mcu_subsystem_ram_0+0x77ff8af8>
   18b0c:	f800283a 	ret
   18b10:	1007883a 	mov	r3,r2
   18b14:	303ff71e 	bne	r6,zero,18af4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8af4>
   18b18:	f800283a 	ret
   18b1c:	1007883a 	mov	r3,r2
   18b20:	003ff406 	br	18af4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8af4>
   18b24:	200d883a 	mov	r6,r4
   18b28:	003ff106 	br	18af0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8af0>

00018b2c <_Balloc>:
   18b2c:	20801317 	ldw	r2,76(r4)
   18b30:	defffc04 	addi	sp,sp,-16
   18b34:	dc400115 	stw	r17,4(sp)
   18b38:	dc000015 	stw	r16,0(sp)
   18b3c:	dfc00315 	stw	ra,12(sp)
   18b40:	dc800215 	stw	r18,8(sp)
   18b44:	2021883a 	mov	r16,r4
   18b48:	2823883a 	mov	r17,r5
   18b4c:	10000e26 	beq	r2,zero,18b88 <_Balloc+0x5c>
   18b50:	880690ba 	slli	r3,r17,2
   18b54:	10c7883a 	add	r3,r2,r3
   18b58:	18800017 	ldw	r2,0(r3)
   18b5c:	10001126 	beq	r2,zero,18ba4 <_Balloc+0x78>
   18b60:	11000017 	ldw	r4,0(r2)
   18b64:	19000015 	stw	r4,0(r3)
   18b68:	10000415 	stw	zero,16(r2)
   18b6c:	10000315 	stw	zero,12(r2)
   18b70:	dfc00317 	ldw	ra,12(sp)
   18b74:	dc800217 	ldw	r18,8(sp)
   18b78:	dc400117 	ldw	r17,4(sp)
   18b7c:	dc000017 	ldw	r16,0(sp)
   18b80:	dec00404 	addi	sp,sp,16
   18b84:	f800283a 	ret
   18b88:	01800844 	movi	r6,33
   18b8c:	01400104 	movi	r5,4
   18b90:	000fb340 	call	fb34 <_calloc_r>
   18b94:	80801315 	stw	r2,76(r16)
   18b98:	103fed1e 	bne	r2,zero,18b50 <__alt_mem_mcu_subsystem_ram_0+0x77ff8b50>
   18b9c:	0005883a 	mov	r2,zero
   18ba0:	003ff306 	br	18b70 <__alt_mem_mcu_subsystem_ram_0+0x77ff8b70>
   18ba4:	04800044 	movi	r18,1
   18ba8:	9464983a 	sll	r18,r18,r17
   18bac:	01400044 	movi	r5,1
   18bb0:	8009883a 	mov	r4,r16
   18bb4:	91800144 	addi	r6,r18,5
   18bb8:	300c90ba 	slli	r6,r6,2
   18bbc:	000fb340 	call	fb34 <_calloc_r>
   18bc0:	103ff626 	beq	r2,zero,18b9c <__alt_mem_mcu_subsystem_ram_0+0x77ff8b9c>
   18bc4:	14400115 	stw	r17,4(r2)
   18bc8:	14800215 	stw	r18,8(r2)
   18bcc:	003fe606 	br	18b68 <__alt_mem_mcu_subsystem_ram_0+0x77ff8b68>

00018bd0 <_Bfree>:
   18bd0:	28000726 	beq	r5,zero,18bf0 <_Bfree+0x20>
   18bd4:	28c00117 	ldw	r3,4(r5)
   18bd8:	20801317 	ldw	r2,76(r4)
   18bdc:	180690ba 	slli	r3,r3,2
   18be0:	10c5883a 	add	r2,r2,r3
   18be4:	10c00017 	ldw	r3,0(r2)
   18be8:	28c00015 	stw	r3,0(r5)
   18bec:	11400015 	stw	r5,0(r2)
   18bf0:	f800283a 	ret

00018bf4 <__multadd>:
   18bf4:	defffa04 	addi	sp,sp,-24
   18bf8:	dc800315 	stw	r18,12(sp)
   18bfc:	dc400215 	stw	r17,8(sp)
   18c00:	dc000115 	stw	r16,4(sp)
   18c04:	2823883a 	mov	r17,r5
   18c08:	2c000417 	ldw	r16,16(r5)
   18c0c:	2025883a 	mov	r18,r4
   18c10:	dfc00515 	stw	ra,20(sp)
   18c14:	29000504 	addi	r4,r5,20
   18c18:	dcc00415 	stw	r19,16(sp)
   18c1c:	000b883a 	mov	r5,zero
   18c20:	20800017 	ldw	r2,0(r4)
   18c24:	21000104 	addi	r4,r4,4
   18c28:	29400044 	addi	r5,r5,1
   18c2c:	10ffffcc 	andi	r3,r2,65535
   18c30:	1987383a 	mul	r3,r3,r6
   18c34:	1004d43a 	srli	r2,r2,16
   18c38:	19c7883a 	add	r3,r3,r7
   18c3c:	118f383a 	mul	r7,r2,r6
   18c40:	1804d43a 	srli	r2,r3,16
   18c44:	18ffffcc 	andi	r3,r3,65535
   18c48:	388f883a 	add	r7,r7,r2
   18c4c:	3804943a 	slli	r2,r7,16
   18c50:	380ed43a 	srli	r7,r7,16
   18c54:	10c7883a 	add	r3,r2,r3
   18c58:	20ffff15 	stw	r3,-4(r4)
   18c5c:	2c3ff016 	blt	r5,r16,18c20 <__alt_mem_mcu_subsystem_ram_0+0x77ff8c20>
   18c60:	38000826 	beq	r7,zero,18c84 <__multadd+0x90>
   18c64:	88800217 	ldw	r2,8(r17)
   18c68:	80800e0e 	bge	r16,r2,18ca4 <__multadd+0xb0>
   18c6c:	80800144 	addi	r2,r16,5
   18c70:	100490ba 	slli	r2,r2,2
   18c74:	84000044 	addi	r16,r16,1
   18c78:	8885883a 	add	r2,r17,r2
   18c7c:	11c00015 	stw	r7,0(r2)
   18c80:	8c000415 	stw	r16,16(r17)
   18c84:	8805883a 	mov	r2,r17
   18c88:	dfc00517 	ldw	ra,20(sp)
   18c8c:	dcc00417 	ldw	r19,16(sp)
   18c90:	dc800317 	ldw	r18,12(sp)
   18c94:	dc400217 	ldw	r17,8(sp)
   18c98:	dc000117 	ldw	r16,4(sp)
   18c9c:	dec00604 	addi	sp,sp,24
   18ca0:	f800283a 	ret
   18ca4:	89400117 	ldw	r5,4(r17)
   18ca8:	9009883a 	mov	r4,r18
   18cac:	d9c00015 	stw	r7,0(sp)
   18cb0:	29400044 	addi	r5,r5,1
   18cb4:	0018b2c0 	call	18b2c <_Balloc>
   18cb8:	89800417 	ldw	r6,16(r17)
   18cbc:	89400304 	addi	r5,r17,12
   18cc0:	11000304 	addi	r4,r2,12
   18cc4:	31800084 	addi	r6,r6,2
   18cc8:	300c90ba 	slli	r6,r6,2
   18ccc:	1027883a 	mov	r19,r2
   18cd0:	00106380 	call	10638 <memcpy>
   18cd4:	d9c00017 	ldw	r7,0(sp)
   18cd8:	88000926 	beq	r17,zero,18d00 <__multadd+0x10c>
   18cdc:	88c00117 	ldw	r3,4(r17)
   18ce0:	90801317 	ldw	r2,76(r18)
   18ce4:	180690ba 	slli	r3,r3,2
   18ce8:	10c5883a 	add	r2,r2,r3
   18cec:	10c00017 	ldw	r3,0(r2)
   18cf0:	88c00015 	stw	r3,0(r17)
   18cf4:	14400015 	stw	r17,0(r2)
   18cf8:	9823883a 	mov	r17,r19
   18cfc:	003fdb06 	br	18c6c <__alt_mem_mcu_subsystem_ram_0+0x77ff8c6c>
   18d00:	9823883a 	mov	r17,r19
   18d04:	003fd906 	br	18c6c <__alt_mem_mcu_subsystem_ram_0+0x77ff8c6c>

00018d08 <__s2b>:
   18d08:	defff904 	addi	sp,sp,-28
   18d0c:	dcc00315 	stw	r19,12(sp)
   18d10:	dc000015 	stw	r16,0(sp)
   18d14:	2027883a 	mov	r19,r4
   18d18:	2821883a 	mov	r16,r5
   18d1c:	39000204 	addi	r4,r7,8
   18d20:	01400244 	movi	r5,9
   18d24:	dd000415 	stw	r20,16(sp)
   18d28:	dc800215 	stw	r18,8(sp)
   18d2c:	dfc00615 	stw	ra,24(sp)
   18d30:	dd400515 	stw	r21,20(sp)
   18d34:	dc400115 	stw	r17,4(sp)
   18d38:	3825883a 	mov	r18,r7
   18d3c:	3029883a 	mov	r20,r6
   18d40:	000d5d80 	call	d5d8 <__divsi3>
   18d44:	10c00090 	cmplti	r3,r2,2
   18d48:	1800311e 	bne	r3,zero,18e10 <__s2b+0x108>
   18d4c:	00c00044 	movi	r3,1
   18d50:	000b883a 	mov	r5,zero
   18d54:	18c7883a 	add	r3,r3,r3
   18d58:	29400044 	addi	r5,r5,1
   18d5c:	18bffd16 	blt	r3,r2,18d54 <__alt_mem_mcu_subsystem_ram_0+0x77ff8d54>
   18d60:	9809883a 	mov	r4,r19
   18d64:	0018b2c0 	call	18b2c <_Balloc>
   18d68:	d8c00717 	ldw	r3,28(sp)
   18d6c:	10c00515 	stw	r3,20(r2)
   18d70:	00c00044 	movi	r3,1
   18d74:	10c00415 	stw	r3,16(r2)
   18d78:	a0c00290 	cmplti	r3,r20,10
   18d7c:	1800211e 	bne	r3,zero,18e04 <__s2b+0xfc>
   18d80:	85400244 	addi	r21,r16,9
   18d84:	a823883a 	mov	r17,r21
   18d88:	8521883a 	add	r16,r16,r20
   18d8c:	8c400044 	addi	r17,r17,1
   18d90:	89ffffc7 	ldb	r7,-1(r17)
   18d94:	01800284 	movi	r6,10
   18d98:	100b883a 	mov	r5,r2
   18d9c:	39fff404 	addi	r7,r7,-48
   18da0:	9809883a 	mov	r4,r19
   18da4:	0018bf40 	call	18bf4 <__multadd>
   18da8:	847ff81e 	bne	r16,r17,18d8c <__alt_mem_mcu_subsystem_ram_0+0x77ff8d8c>
   18dac:	ad21883a 	add	r16,r21,r20
   18db0:	843ffe04 	addi	r16,r16,-8
   18db4:	a4800a0e 	bge	r20,r18,18de0 <__s2b+0xd8>
   18db8:	9523c83a 	sub	r17,r18,r20
   18dbc:	8463883a 	add	r17,r16,r17
   18dc0:	84000044 	addi	r16,r16,1
   18dc4:	81ffffc7 	ldb	r7,-1(r16)
   18dc8:	01800284 	movi	r6,10
   18dcc:	100b883a 	mov	r5,r2
   18dd0:	39fff404 	addi	r7,r7,-48
   18dd4:	9809883a 	mov	r4,r19
   18dd8:	0018bf40 	call	18bf4 <__multadd>
   18ddc:	8c3ff81e 	bne	r17,r16,18dc0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8dc0>
   18de0:	dfc00617 	ldw	ra,24(sp)
   18de4:	dd400517 	ldw	r21,20(sp)
   18de8:	dd000417 	ldw	r20,16(sp)
   18dec:	dcc00317 	ldw	r19,12(sp)
   18df0:	dc800217 	ldw	r18,8(sp)
   18df4:	dc400117 	ldw	r17,4(sp)
   18df8:	dc000017 	ldw	r16,0(sp)
   18dfc:	dec00704 	addi	sp,sp,28
   18e00:	f800283a 	ret
   18e04:	84000284 	addi	r16,r16,10
   18e08:	05000244 	movi	r20,9
   18e0c:	003fe906 	br	18db4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8db4>
   18e10:	000b883a 	mov	r5,zero
   18e14:	003fd206 	br	18d60 <__alt_mem_mcu_subsystem_ram_0+0x77ff8d60>

00018e18 <__hi0bits>:
   18e18:	20bfffec 	andhi	r2,r4,65535
   18e1c:	1000151e 	bne	r2,zero,18e74 <__hi0bits+0x5c>
   18e20:	2008943a 	slli	r4,r4,16
   18e24:	00800404 	movi	r2,16
   18e28:	20ffc02c 	andhi	r3,r4,65280
   18e2c:	1800021e 	bne	r3,zero,18e38 <__hi0bits+0x20>
   18e30:	2008923a 	slli	r4,r4,8
   18e34:	10800204 	addi	r2,r2,8
   18e38:	20fc002c 	andhi	r3,r4,61440
   18e3c:	1800021e 	bne	r3,zero,18e48 <__hi0bits+0x30>
   18e40:	2008913a 	slli	r4,r4,4
   18e44:	10800104 	addi	r2,r2,4
   18e48:	20f0002c 	andhi	r3,r4,49152
   18e4c:	1800021e 	bne	r3,zero,18e58 <__hi0bits+0x40>
   18e50:	200890ba 	slli	r4,r4,2
   18e54:	10800084 	addi	r2,r2,2
   18e58:	20000516 	blt	r4,zero,18e70 <__hi0bits+0x58>
   18e5c:	2110002c 	andhi	r4,r4,16384
   18e60:	20000226 	beq	r4,zero,18e6c <__hi0bits+0x54>
   18e64:	10800044 	addi	r2,r2,1
   18e68:	f800283a 	ret
   18e6c:	00800804 	movi	r2,32
   18e70:	f800283a 	ret
   18e74:	0005883a 	mov	r2,zero
   18e78:	003feb06 	br	18e28 <__alt_mem_mcu_subsystem_ram_0+0x77ff8e28>

00018e7c <__lo0bits>:
   18e7c:	20c00017 	ldw	r3,0(r4)
   18e80:	188001cc 	andi	r2,r3,7
   18e84:	10000826 	beq	r2,zero,18ea8 <__lo0bits+0x2c>
   18e88:	1880004c 	andi	r2,r3,1
   18e8c:	10001f1e 	bne	r2,zero,18f0c <__lo0bits+0x90>
   18e90:	1880008c 	andi	r2,r3,2
   18e94:	10001f26 	beq	r2,zero,18f14 <__lo0bits+0x98>
   18e98:	1806d07a 	srli	r3,r3,1
   18e9c:	00800044 	movi	r2,1
   18ea0:	20c00015 	stw	r3,0(r4)
   18ea4:	f800283a 	ret
   18ea8:	18bfffcc 	andi	r2,r3,65535
   18eac:	10001426 	beq	r2,zero,18f00 <__lo0bits+0x84>
   18eb0:	0005883a 	mov	r2,zero
   18eb4:	19403fcc 	andi	r5,r3,255
   18eb8:	2800021e 	bne	r5,zero,18ec4 <__lo0bits+0x48>
   18ebc:	1806d23a 	srli	r3,r3,8
   18ec0:	10800204 	addi	r2,r2,8
   18ec4:	194003cc 	andi	r5,r3,15
   18ec8:	2800021e 	bne	r5,zero,18ed4 <__lo0bits+0x58>
   18ecc:	1806d13a 	srli	r3,r3,4
   18ed0:	10800104 	addi	r2,r2,4
   18ed4:	194000cc 	andi	r5,r3,3
   18ed8:	2800021e 	bne	r5,zero,18ee4 <__lo0bits+0x68>
   18edc:	1806d0ba 	srli	r3,r3,2
   18ee0:	10800084 	addi	r2,r2,2
   18ee4:	1940004c 	andi	r5,r3,1
   18ee8:	2800031e 	bne	r5,zero,18ef8 <__lo0bits+0x7c>
   18eec:	1806d07a 	srli	r3,r3,1
   18ef0:	18000c26 	beq	r3,zero,18f24 <__lo0bits+0xa8>
   18ef4:	10800044 	addi	r2,r2,1
   18ef8:	20c00015 	stw	r3,0(r4)
   18efc:	f800283a 	ret
   18f00:	1806d43a 	srli	r3,r3,16
   18f04:	00800404 	movi	r2,16
   18f08:	003fea06 	br	18eb4 <__alt_mem_mcu_subsystem_ram_0+0x77ff8eb4>
   18f0c:	0005883a 	mov	r2,zero
   18f10:	f800283a 	ret
   18f14:	1806d0ba 	srli	r3,r3,2
   18f18:	00800084 	movi	r2,2
   18f1c:	20c00015 	stw	r3,0(r4)
   18f20:	f800283a 	ret
   18f24:	00800804 	movi	r2,32
   18f28:	f800283a 	ret

00018f2c <__i2b>:
   18f2c:	defffe04 	addi	sp,sp,-8
   18f30:	dc000015 	stw	r16,0(sp)
   18f34:	2821883a 	mov	r16,r5
   18f38:	01400044 	movi	r5,1
   18f3c:	dfc00115 	stw	ra,4(sp)
   18f40:	0018b2c0 	call	18b2c <_Balloc>
   18f44:	01000044 	movi	r4,1
   18f48:	14000515 	stw	r16,20(r2)
   18f4c:	11000415 	stw	r4,16(r2)
   18f50:	dfc00117 	ldw	ra,4(sp)
   18f54:	dc000017 	ldw	r16,0(sp)
   18f58:	dec00204 	addi	sp,sp,8
   18f5c:	f800283a 	ret

00018f60 <__multiply>:
   18f60:	defffa04 	addi	sp,sp,-24
   18f64:	dc800215 	stw	r18,8(sp)
   18f68:	dc400115 	stw	r17,4(sp)
   18f6c:	34800417 	ldw	r18,16(r6)
   18f70:	2c400417 	ldw	r17,16(r5)
   18f74:	dd000415 	stw	r20,16(sp)
   18f78:	dcc00315 	stw	r19,12(sp)
   18f7c:	dfc00515 	stw	ra,20(sp)
   18f80:	dc000015 	stw	r16,0(sp)
   18f84:	2827883a 	mov	r19,r5
   18f88:	3029883a 	mov	r20,r6
   18f8c:	8c80050e 	bge	r17,r18,18fa4 <__multiply+0x44>
   18f90:	8807883a 	mov	r3,r17
   18f94:	3027883a 	mov	r19,r6
   18f98:	9023883a 	mov	r17,r18
   18f9c:	2829883a 	mov	r20,r5
   18fa0:	1825883a 	mov	r18,r3
   18fa4:	98800217 	ldw	r2,8(r19)
   18fa8:	8ca1883a 	add	r16,r17,r18
   18fac:	99400117 	ldw	r5,4(r19)
   18fb0:	1400010e 	bge	r2,r16,18fb8 <__multiply+0x58>
   18fb4:	29400044 	addi	r5,r5,1
   18fb8:	0018b2c0 	call	18b2c <_Balloc>
   18fbc:	801290ba 	slli	r9,r16,2
   18fc0:	12800504 	addi	r10,r2,20
   18fc4:	5253883a 	add	r9,r10,r9
   18fc8:	5240042e 	bgeu	r10,r9,18fdc <__multiply+0x7c>
   18fcc:	5007883a 	mov	r3,r10
   18fd0:	18000015 	stw	zero,0(r3)
   18fd4:	18c00104 	addi	r3,r3,4
   18fd8:	1a7ffd36 	bltu	r3,r9,18fd0 <__alt_mem_mcu_subsystem_ram_0+0x77ff8fd0>
   18fdc:	901690ba 	slli	r11,r18,2
   18fe0:	881090ba 	slli	r8,r17,2
   18fe4:	a1800504 	addi	r6,r20,20
   18fe8:	99400504 	addi	r5,r19,20
   18fec:	32d7883a 	add	r11,r6,r11
   18ff0:	2a11883a 	add	r8,r5,r8
   18ff4:	32c00636 	bltu	r6,r11,19010 <__multiply+0xb0>
   18ff8:	00004506 	br	19110 <__multiply+0x1b0>
   18ffc:	681ad43a 	srli	r13,r13,16
   19000:	6800241e 	bne	r13,zero,19094 <__multiply+0x134>
   19004:	31800104 	addi	r6,r6,4
   19008:	52800104 	addi	r10,r10,4
   1900c:	32c0402e 	bgeu	r6,r11,19110 <__multiply+0x1b0>
   19010:	33400017 	ldw	r13,0(r6)
   19014:	6bffffcc 	andi	r15,r13,65535
   19018:	783ff826 	beq	r15,zero,18ffc <__alt_mem_mcu_subsystem_ram_0+0x77ff8ffc>
   1901c:	501d883a 	mov	r14,r10
   19020:	281b883a 	mov	r13,r5
   19024:	0023883a 	mov	r17,zero
   19028:	00000106 	br	19030 <__multiply+0xd0>
   1902c:	f81d883a 	mov	r14,ra
   19030:	69000017 	ldw	r4,0(r13)
   19034:	73000017 	ldw	r12,0(r14)
   19038:	77c00104 	addi	ra,r14,4
   1903c:	21ffffcc 	andi	r7,r4,65535
   19040:	3bcf383a 	mul	r7,r7,r15
   19044:	2006d43a 	srli	r3,r4,16
   19048:	613fffcc 	andi	r4,r12,65535
   1904c:	390f883a 	add	r7,r7,r4
   19050:	3c4f883a 	add	r7,r7,r17
   19054:	1bc7383a 	mul	r3,r3,r15
   19058:	6018d43a 	srli	r12,r12,16
   1905c:	3808d43a 	srli	r4,r7,16
   19060:	39ffffcc 	andi	r7,r7,65535
   19064:	1b07883a 	add	r3,r3,r12
   19068:	1907883a 	add	r3,r3,r4
   1906c:	1808943a 	slli	r4,r3,16
   19070:	6b400104 	addi	r13,r13,4
   19074:	1822d43a 	srli	r17,r3,16
   19078:	21ceb03a 	or	r7,r4,r7
   1907c:	f9ffff15 	stw	r7,-4(ra)
   19080:	6a3fea36 	bltu	r13,r8,1902c <__alt_mem_mcu_subsystem_ram_0+0x77ff902c>
   19084:	74400115 	stw	r17,4(r14)
   19088:	33400017 	ldw	r13,0(r6)
   1908c:	681ad43a 	srli	r13,r13,16
   19090:	683fdc26 	beq	r13,zero,19004 <__alt_mem_mcu_subsystem_ram_0+0x77ff9004>
   19094:	50c00017 	ldw	r3,0(r10)
   19098:	501d883a 	mov	r14,r10
   1909c:	2819883a 	mov	r12,r5
   190a0:	180f883a 	mov	r7,r3
   190a4:	0023883a 	mov	r17,zero
   190a8:	00000106 	br	190b0 <__multiply+0x150>
   190ac:	781d883a 	mov	r14,r15
   190b0:	6100000b 	ldhu	r4,0(r12)
   190b4:	380ed43a 	srli	r7,r7,16
   190b8:	18ffffcc 	andi	r3,r3,65535
   190bc:	2349383a 	mul	r4,r4,r13
   190c0:	73c00104 	addi	r15,r14,4
   190c4:	63000104 	addi	r12,r12,4
   190c8:	21c9883a 	add	r4,r4,r7
   190cc:	2449883a 	add	r4,r4,r17
   190d0:	200e943a 	slli	r7,r4,16
   190d4:	2008d43a 	srli	r4,r4,16
   190d8:	38c6b03a 	or	r3,r7,r3
   190dc:	78ffff15 	stw	r3,-4(r15)
   190e0:	60ffff8b 	ldhu	r3,-2(r12)
   190e4:	71c00117 	ldw	r7,4(r14)
   190e8:	1b47383a 	mul	r3,r3,r13
   190ec:	3c7fffcc 	andi	r17,r7,65535
   190f0:	1c47883a 	add	r3,r3,r17
   190f4:	1907883a 	add	r3,r3,r4
   190f8:	1822d43a 	srli	r17,r3,16
   190fc:	623feb36 	bltu	r12,r8,190ac <__alt_mem_mcu_subsystem_ram_0+0x77ff90ac>
   19100:	70c00115 	stw	r3,4(r14)
   19104:	31800104 	addi	r6,r6,4
   19108:	52800104 	addi	r10,r10,4
   1910c:	32ffc036 	bltu	r6,r11,19010 <__alt_mem_mcu_subsystem_ram_0+0x77ff9010>
   19110:	0400090e 	bge	zero,r16,19138 <__multiply+0x1d8>
   19114:	48ffff17 	ldw	r3,-4(r9)
   19118:	4a7fff04 	addi	r9,r9,-4
   1911c:	18000326 	beq	r3,zero,1912c <__multiply+0x1cc>
   19120:	00000506 	br	19138 <__multiply+0x1d8>
   19124:	48c00017 	ldw	r3,0(r9)
   19128:	1800031e 	bne	r3,zero,19138 <__multiply+0x1d8>
   1912c:	843fffc4 	addi	r16,r16,-1
   19130:	4a7fff04 	addi	r9,r9,-4
   19134:	803ffb1e 	bne	r16,zero,19124 <__alt_mem_mcu_subsystem_ram_0+0x77ff9124>
   19138:	14000415 	stw	r16,16(r2)
   1913c:	dfc00517 	ldw	ra,20(sp)
   19140:	dd000417 	ldw	r20,16(sp)
   19144:	dcc00317 	ldw	r19,12(sp)
   19148:	dc800217 	ldw	r18,8(sp)
   1914c:	dc400117 	ldw	r17,4(sp)
   19150:	dc000017 	ldw	r16,0(sp)
   19154:	dec00604 	addi	sp,sp,24
   19158:	f800283a 	ret

0001915c <__pow5mult>:
   1915c:	defffb04 	addi	sp,sp,-20
   19160:	dcc00315 	stw	r19,12(sp)
   19164:	dc000015 	stw	r16,0(sp)
   19168:	dfc00415 	stw	ra,16(sp)
   1916c:	dc800215 	stw	r18,8(sp)
   19170:	dc400115 	stw	r17,4(sp)
   19174:	308000cc 	andi	r2,r6,3
   19178:	3021883a 	mov	r16,r6
   1917c:	2027883a 	mov	r19,r4
   19180:	1000371e 	bne	r2,zero,19260 <__pow5mult+0x104>
   19184:	2825883a 	mov	r18,r5
   19188:	8021d0ba 	srai	r16,r16,2
   1918c:	80002326 	beq	r16,zero,1921c <__pow5mult+0xc0>
   19190:	9c401217 	ldw	r17,72(r19)
   19194:	88001d1e 	bne	r17,zero,1920c <__pow5mult+0xb0>
   19198:	01400044 	movi	r5,1
   1919c:	9809883a 	mov	r4,r19
   191a0:	0018b2c0 	call	18b2c <_Balloc>
   191a4:	1023883a 	mov	r17,r2
   191a8:	00809c44 	movi	r2,625
   191ac:	88800515 	stw	r2,20(r17)
   191b0:	00800044 	movi	r2,1
   191b4:	88800415 	stw	r2,16(r17)
   191b8:	9c401215 	stw	r17,72(r19)
   191bc:	88000015 	stw	zero,0(r17)
   191c0:	00001206 	br	1920c <__pow5mult+0xb0>
   191c4:	880d883a 	mov	r6,r17
   191c8:	900b883a 	mov	r5,r18
   191cc:	9809883a 	mov	r4,r19
   191d0:	0018f600 	call	18f60 <__multiply>
   191d4:	90002026 	beq	r18,zero,19258 <__pow5mult+0xfc>
   191d8:	91000117 	ldw	r4,4(r18)
   191dc:	98c01317 	ldw	r3,76(r19)
   191e0:	200890ba 	slli	r4,r4,2
   191e4:	1907883a 	add	r3,r3,r4
   191e8:	19000017 	ldw	r4,0(r3)
   191ec:	91000015 	stw	r4,0(r18)
   191f0:	1c800015 	stw	r18,0(r3)
   191f4:	1025883a 	mov	r18,r2
   191f8:	8021d07a 	srai	r16,r16,1
   191fc:	80000726 	beq	r16,zero,1921c <__pow5mult+0xc0>
   19200:	88800017 	ldw	r2,0(r17)
   19204:	10000d26 	beq	r2,zero,1923c <__pow5mult+0xe0>
   19208:	1023883a 	mov	r17,r2
   1920c:	8080004c 	andi	r2,r16,1
   19210:	103fec1e 	bne	r2,zero,191c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff91c4>
   19214:	8021d07a 	srai	r16,r16,1
   19218:	803ff91e 	bne	r16,zero,19200 <__alt_mem_mcu_subsystem_ram_0+0x77ff9200>
   1921c:	9005883a 	mov	r2,r18
   19220:	dfc00417 	ldw	ra,16(sp)
   19224:	dcc00317 	ldw	r19,12(sp)
   19228:	dc800217 	ldw	r18,8(sp)
   1922c:	dc400117 	ldw	r17,4(sp)
   19230:	dc000017 	ldw	r16,0(sp)
   19234:	dec00504 	addi	sp,sp,20
   19238:	f800283a 	ret
   1923c:	880d883a 	mov	r6,r17
   19240:	880b883a 	mov	r5,r17
   19244:	9809883a 	mov	r4,r19
   19248:	0018f600 	call	18f60 <__multiply>
   1924c:	88800015 	stw	r2,0(r17)
   19250:	10000015 	stw	zero,0(r2)
   19254:	003fec06 	br	19208 <__alt_mem_mcu_subsystem_ram_0+0x77ff9208>
   19258:	1025883a 	mov	r18,r2
   1925c:	003fe606 	br	191f8 <__alt_mem_mcu_subsystem_ram_0+0x77ff91f8>
   19260:	100490ba 	slli	r2,r2,2
   19264:	00c000b4 	movhi	r3,2
   19268:	000f883a 	mov	r7,zero
   1926c:	10c7883a 	add	r3,r2,r3
   19270:	199be417 	ldw	r6,28560(r3)
   19274:	0018bf40 	call	18bf4 <__multadd>
   19278:	1025883a 	mov	r18,r2
   1927c:	003fc206 	br	19188 <__alt_mem_mcu_subsystem_ram_0+0x77ff9188>

00019280 <__lshift>:
   19280:	defff904 	addi	sp,sp,-28
   19284:	dd000415 	stw	r20,16(sp)
   19288:	dc000015 	stw	r16,0(sp)
   1928c:	2d000417 	ldw	r20,16(r5)
   19290:	3021d17a 	srai	r16,r6,5
   19294:	28800217 	ldw	r2,8(r5)
   19298:	dd400515 	stw	r21,20(sp)
   1929c:	8529883a 	add	r20,r16,r20
   192a0:	dcc00315 	stw	r19,12(sp)
   192a4:	dc800215 	stw	r18,8(sp)
   192a8:	dc400115 	stw	r17,4(sp)
   192ac:	dfc00615 	stw	ra,24(sp)
   192b0:	a4400044 	addi	r17,r20,1
   192b4:	2825883a 	mov	r18,r5
   192b8:	302b883a 	mov	r21,r6
   192bc:	2027883a 	mov	r19,r4
   192c0:	29400117 	ldw	r5,4(r5)
   192c4:	1440030e 	bge	r2,r17,192d4 <__lshift+0x54>
   192c8:	1085883a 	add	r2,r2,r2
   192cc:	29400044 	addi	r5,r5,1
   192d0:	147ffd16 	blt	r2,r17,192c8 <__alt_mem_mcu_subsystem_ram_0+0x77ff92c8>
   192d4:	9809883a 	mov	r4,r19
   192d8:	0018b2c0 	call	18b2c <_Balloc>
   192dc:	10c00504 	addi	r3,r2,20
   192e0:	0400360e 	bge	zero,r16,193bc <__lshift+0x13c>
   192e4:	800890ba 	slli	r4,r16,2
   192e8:	1909883a 	add	r4,r3,r4
   192ec:	18c00104 	addi	r3,r3,4
   192f0:	183fff15 	stw	zero,-4(r3)
   192f4:	193ffd1e 	bne	r3,r4,192ec <__alt_mem_mcu_subsystem_ram_0+0x77ff92ec>
   192f8:	92000417 	ldw	r8,16(r18)
   192fc:	90c00504 	addi	r3,r18,20
   19300:	a98007cc 	andi	r6,r21,31
   19304:	401090ba 	slli	r8,r8,2
   19308:	1a11883a 	add	r8,r3,r8
   1930c:	30002326 	beq	r6,zero,1939c <__lshift+0x11c>
   19310:	02800804 	movi	r10,32
   19314:	5195c83a 	sub	r10,r10,r6
   19318:	000f883a 	mov	r7,zero
   1931c:	00000106 	br	19324 <__lshift+0xa4>
   19320:	4809883a 	mov	r4,r9
   19324:	19400017 	ldw	r5,0(r3)
   19328:	22400104 	addi	r9,r4,4
   1932c:	18c00104 	addi	r3,r3,4
   19330:	298a983a 	sll	r5,r5,r6
   19334:	29cab03a 	or	r5,r5,r7
   19338:	497fff15 	stw	r5,-4(r9)
   1933c:	197fff17 	ldw	r5,-4(r3)
   19340:	2a8ed83a 	srl	r7,r5,r10
   19344:	1a3ff636 	bltu	r3,r8,19320 <__alt_mem_mcu_subsystem_ram_0+0x77ff9320>
   19348:	21c00115 	stw	r7,4(r4)
   1934c:	3800191e 	bne	r7,zero,193b4 <__lshift+0x134>
   19350:	8c7fffc4 	addi	r17,r17,-1
   19354:	14400415 	stw	r17,16(r2)
   19358:	90000726 	beq	r18,zero,19378 <__lshift+0xf8>
   1935c:	91000117 	ldw	r4,4(r18)
   19360:	98c01317 	ldw	r3,76(r19)
   19364:	200890ba 	slli	r4,r4,2
   19368:	1907883a 	add	r3,r3,r4
   1936c:	19000017 	ldw	r4,0(r3)
   19370:	91000015 	stw	r4,0(r18)
   19374:	1c800015 	stw	r18,0(r3)
   19378:	dfc00617 	ldw	ra,24(sp)
   1937c:	dd400517 	ldw	r21,20(sp)
   19380:	dd000417 	ldw	r20,16(sp)
   19384:	dcc00317 	ldw	r19,12(sp)
   19388:	dc800217 	ldw	r18,8(sp)
   1938c:	dc400117 	ldw	r17,4(sp)
   19390:	dc000017 	ldw	r16,0(sp)
   19394:	dec00704 	addi	sp,sp,28
   19398:	f800283a 	ret
   1939c:	18c00104 	addi	r3,r3,4
   193a0:	197fff17 	ldw	r5,-4(r3)
   193a4:	21000104 	addi	r4,r4,4
   193a8:	217fff15 	stw	r5,-4(r4)
   193ac:	1a3ffb36 	bltu	r3,r8,1939c <__alt_mem_mcu_subsystem_ram_0+0x77ff939c>
   193b0:	003fe706 	br	19350 <__alt_mem_mcu_subsystem_ram_0+0x77ff9350>
   193b4:	a4400084 	addi	r17,r20,2
   193b8:	003fe506 	br	19350 <__alt_mem_mcu_subsystem_ram_0+0x77ff9350>
   193bc:	1809883a 	mov	r4,r3
   193c0:	003fcd06 	br	192f8 <__alt_mem_mcu_subsystem_ram_0+0x77ff92f8>

000193c4 <__mcmp>:
   193c4:	20800417 	ldw	r2,16(r4)
   193c8:	28c00417 	ldw	r3,16(r5)
   193cc:	10c5c83a 	sub	r2,r2,r3
   193d0:	1000101e 	bne	r2,zero,19414 <__mcmp+0x50>
   193d4:	180c90ba 	slli	r6,r3,2
   193d8:	21000504 	addi	r4,r4,20
   193dc:	29400504 	addi	r5,r5,20
   193e0:	2187883a 	add	r3,r4,r6
   193e4:	298b883a 	add	r5,r5,r6
   193e8:	00000106 	br	193f0 <__mcmp+0x2c>
   193ec:	20c00a2e 	bgeu	r4,r3,19418 <__mcmp+0x54>
   193f0:	18ffff04 	addi	r3,r3,-4
   193f4:	297fff04 	addi	r5,r5,-4
   193f8:	19c00017 	ldw	r7,0(r3)
   193fc:	29800017 	ldw	r6,0(r5)
   19400:	39bffa26 	beq	r7,r6,193ec <__alt_mem_mcu_subsystem_ram_0+0x77ff93ec>
   19404:	39800236 	bltu	r7,r6,19410 <__mcmp+0x4c>
   19408:	00800044 	movi	r2,1
   1940c:	f800283a 	ret
   19410:	00bfffc4 	movi	r2,-1
   19414:	f800283a 	ret
   19418:	f800283a 	ret

0001941c <__mdiff>:
   1941c:	defffa04 	addi	sp,sp,-24
   19420:	dc800215 	stw	r18,8(sp)
   19424:	30800417 	ldw	r2,16(r6)
   19428:	2c800417 	ldw	r18,16(r5)
   1942c:	dd000415 	stw	r20,16(sp)
   19430:	dcc00315 	stw	r19,12(sp)
   19434:	dc400115 	stw	r17,4(sp)
   19438:	dc000015 	stw	r16,0(sp)
   1943c:	dfc00515 	stw	ra,20(sp)
   19440:	90a5c83a 	sub	r18,r18,r2
   19444:	2827883a 	mov	r19,r5
   19448:	3029883a 	mov	r20,r6
   1944c:	2c000504 	addi	r16,r5,20
   19450:	34400504 	addi	r17,r6,20
   19454:	9000131e 	bne	r18,zero,194a4 <__mdiff+0x88>
   19458:	100490ba 	slli	r2,r2,2
   1945c:	8087883a 	add	r3,r16,r2
   19460:	8885883a 	add	r2,r17,r2
   19464:	00000106 	br	1946c <__mdiff+0x50>
   19468:	80c0562e 	bgeu	r16,r3,195c4 <__mdiff+0x1a8>
   1946c:	18ffff04 	addi	r3,r3,-4
   19470:	10bfff04 	addi	r2,r2,-4
   19474:	19c00017 	ldw	r7,0(r3)
   19478:	11400017 	ldw	r5,0(r2)
   1947c:	397ffa26 	beq	r7,r5,19468 <__alt_mem_mcu_subsystem_ram_0+0x77ff9468>
   19480:	39400a2e 	bgeu	r7,r5,194ac <__mdiff+0x90>
   19484:	8007883a 	mov	r3,r16
   19488:	9805883a 	mov	r2,r19
   1948c:	8821883a 	mov	r16,r17
   19490:	a027883a 	mov	r19,r20
   19494:	1823883a 	mov	r17,r3
   19498:	1029883a 	mov	r20,r2
   1949c:	04800044 	movi	r18,1
   194a0:	00000206 	br	194ac <__mdiff+0x90>
   194a4:	903ff716 	blt	r18,zero,19484 <__alt_mem_mcu_subsystem_ram_0+0x77ff9484>
   194a8:	0025883a 	mov	r18,zero
   194ac:	99400117 	ldw	r5,4(r19)
   194b0:	0018b2c0 	call	18b2c <_Balloc>
   194b4:	9a000417 	ldw	r8,16(r19)
   194b8:	a2800417 	ldw	r10,16(r20)
   194bc:	11800504 	addi	r6,r2,20
   194c0:	401290ba 	slli	r9,r8,2
   194c4:	501490ba 	slli	r10,r10,2
   194c8:	14800315 	stw	r18,12(r2)
   194cc:	8253883a 	add	r9,r16,r9
   194d0:	8a95883a 	add	r10,r17,r10
   194d4:	0007883a 	mov	r3,zero
   194d8:	00000106 	br	194e0 <__mdiff+0xc4>
   194dc:	3821883a 	mov	r16,r7
   194e0:	81000017 	ldw	r4,0(r16)
   194e4:	89c00017 	ldw	r7,0(r17)
   194e8:	31800104 	addi	r6,r6,4
   194ec:	217fffcc 	andi	r5,r4,65535
   194f0:	28cb883a 	add	r5,r5,r3
   194f4:	38ffffcc 	andi	r3,r7,65535
   194f8:	28cbc83a 	sub	r5,r5,r3
   194fc:	380ed43a 	srli	r7,r7,16
   19500:	2006d43a 	srli	r3,r4,16
   19504:	2809d43a 	srai	r4,r5,16
   19508:	297fffcc 	andi	r5,r5,65535
   1950c:	19c7c83a 	sub	r3,r3,r7
   19510:	1907883a 	add	r3,r3,r4
   19514:	1808943a 	slli	r4,r3,16
   19518:	8c400104 	addi	r17,r17,4
   1951c:	81c00104 	addi	r7,r16,4
   19520:	214ab03a 	or	r5,r4,r5
   19524:	317fff15 	stw	r5,-4(r6)
   19528:	1807d43a 	srai	r3,r3,16
   1952c:	8abfeb36 	bltu	r17,r10,194dc <__alt_mem_mcu_subsystem_ram_0+0x77ff94dc>
   19530:	3a40152e 	bgeu	r7,r9,19588 <__mdiff+0x16c>
   19534:	3015883a 	mov	r10,r6
   19538:	39000017 	ldw	r4,0(r7)
   1953c:	52800104 	addi	r10,r10,4
   19540:	39c00104 	addi	r7,r7,4
   19544:	217fffcc 	andi	r5,r4,65535
   19548:	28cb883a 	add	r5,r5,r3
   1954c:	2817d43a 	srai	r11,r5,16
   19550:	2006d43a 	srli	r3,r4,16
   19554:	293fffcc 	andi	r4,r5,65535
   19558:	1ac7883a 	add	r3,r3,r11
   1955c:	180a943a 	slli	r5,r3,16
   19560:	1807d43a 	srai	r3,r3,16
   19564:	290ab03a 	or	r5,r5,r4
   19568:	517fff15 	stw	r5,-4(r10)
   1956c:	3a7ff236 	bltu	r7,r9,19538 <__alt_mem_mcu_subsystem_ram_0+0x77ff9538>
   19570:	4c07c83a 	sub	r3,r9,r16
   19574:	18fffec4 	addi	r3,r3,-5
   19578:	1806d0ba 	srli	r3,r3,2
   1957c:	18c00044 	addi	r3,r3,1
   19580:	180690ba 	slli	r3,r3,2
   19584:	30cd883a 	add	r6,r6,r3
   19588:	31bfff04 	addi	r6,r6,-4
   1958c:	2800041e 	bne	r5,zero,195a0 <__mdiff+0x184>
   19590:	31bfff04 	addi	r6,r6,-4
   19594:	30c00017 	ldw	r3,0(r6)
   19598:	423fffc4 	addi	r8,r8,-1
   1959c:	183ffc26 	beq	r3,zero,19590 <__alt_mem_mcu_subsystem_ram_0+0x77ff9590>
   195a0:	12000415 	stw	r8,16(r2)
   195a4:	dfc00517 	ldw	ra,20(sp)
   195a8:	dd000417 	ldw	r20,16(sp)
   195ac:	dcc00317 	ldw	r19,12(sp)
   195b0:	dc800217 	ldw	r18,8(sp)
   195b4:	dc400117 	ldw	r17,4(sp)
   195b8:	dc000017 	ldw	r16,0(sp)
   195bc:	dec00604 	addi	sp,sp,24
   195c0:	f800283a 	ret
   195c4:	000b883a 	mov	r5,zero
   195c8:	0018b2c0 	call	18b2c <_Balloc>
   195cc:	00c00044 	movi	r3,1
   195d0:	10c00415 	stw	r3,16(r2)
   195d4:	10000515 	stw	zero,20(r2)
   195d8:	003ff206 	br	195a4 <__alt_mem_mcu_subsystem_ram_0+0x77ff95a4>

000195dc <__ulp>:
   195dc:	295ffc2c 	andhi	r5,r5,32752
   195e0:	00ff3034 	movhi	r3,64704
   195e4:	28c7883a 	add	r3,r5,r3
   195e8:	00c0020e 	bge	zero,r3,195f4 <__ulp+0x18>
   195ec:	0005883a 	mov	r2,zero
   195f0:	f800283a 	ret
   195f4:	00c7c83a 	sub	r3,zero,r3
   195f8:	1807d53a 	srai	r3,r3,20
   195fc:	18800508 	cmpgei	r2,r3,20
   19600:	10000b26 	beq	r2,zero,19630 <__ulp+0x54>
   19604:	18bffb04 	addi	r2,r3,-20
   19608:	110007c8 	cmpgei	r4,r2,31
   1960c:	0007883a 	mov	r3,zero
   19610:	2000051e 	bne	r4,zero,19628 <__ulp+0x4c>
   19614:	010007c4 	movi	r4,31
   19618:	2089c83a 	sub	r4,r4,r2
   1961c:	00800044 	movi	r2,1
   19620:	1104983a 	sll	r2,r2,r4
   19624:	f800283a 	ret
   19628:	00800044 	movi	r2,1
   1962c:	f800283a 	ret
   19630:	01400234 	movhi	r5,8
   19634:	28c7d83a 	sra	r3,r5,r3
   19638:	0005883a 	mov	r2,zero
   1963c:	f800283a 	ret

00019640 <__b2d>:
   19640:	defffa04 	addi	sp,sp,-24
   19644:	dc000015 	stw	r16,0(sp)
   19648:	24000417 	ldw	r16,16(r4)
   1964c:	dc800215 	stw	r18,8(sp)
   19650:	24800504 	addi	r18,r4,20
   19654:	802090ba 	slli	r16,r16,2
   19658:	dc400115 	stw	r17,4(sp)
   1965c:	dd000415 	stw	r20,16(sp)
   19660:	9421883a 	add	r16,r18,r16
   19664:	847fff17 	ldw	r17,-4(r16)
   19668:	dcc00315 	stw	r19,12(sp)
   1966c:	2829883a 	mov	r20,r5
   19670:	8809883a 	mov	r4,r17
   19674:	dfc00515 	stw	ra,20(sp)
   19678:	0018e180 	call	18e18 <__hi0bits>
   1967c:	00c00804 	movi	r3,32
   19680:	1889c83a 	sub	r4,r3,r2
   19684:	a1000015 	stw	r4,0(r20)
   19688:	110002c8 	cmpgei	r4,r2,11
   1968c:	84ffff04 	addi	r19,r16,-4
   19690:	2000121e 	bne	r4,zero,196dc <__b2d+0x9c>
   19694:	014002c4 	movi	r5,11
   19698:	2889c83a 	sub	r4,r5,r2
   1969c:	8906d83a 	srl	r3,r17,r4
   196a0:	18cffc34 	orhi	r3,r3,16368
   196a4:	94c0212e 	bgeu	r18,r19,1972c <__b2d+0xec>
   196a8:	817ffe17 	ldw	r5,-8(r16)
   196ac:	290ad83a 	srl	r5,r5,r4
   196b0:	10800544 	addi	r2,r2,21
   196b4:	8884983a 	sll	r2,r17,r2
   196b8:	1144b03a 	or	r2,r2,r5
   196bc:	dfc00517 	ldw	ra,20(sp)
   196c0:	dd000417 	ldw	r20,16(sp)
   196c4:	dcc00317 	ldw	r19,12(sp)
   196c8:	dc800217 	ldw	r18,8(sp)
   196cc:	dc400117 	ldw	r17,4(sp)
   196d0:	dc000017 	ldw	r16,0(sp)
   196d4:	dec00604 	addi	sp,sp,24
   196d8:	f800283a 	ret
   196dc:	117ffd44 	addi	r5,r2,-11
   196e0:	94c00e2e 	bgeu	r18,r19,1971c <__b2d+0xdc>
   196e4:	80bffe17 	ldw	r2,-8(r16)
   196e8:	28000e26 	beq	r5,zero,19724 <__b2d+0xe4>
   196ec:	1949c83a 	sub	r4,r3,r5
   196f0:	8946983a 	sll	r3,r17,r5
   196f4:	1122d83a 	srl	r17,r2,r4
   196f8:	81bffe04 	addi	r6,r16,-8
   196fc:	18cffc34 	orhi	r3,r3,16368
   19700:	1c46b03a 	or	r3,r3,r17
   19704:	1144983a 	sll	r2,r2,r5
   19708:	91bfec2e 	bgeu	r18,r6,196bc <__alt_mem_mcu_subsystem_ram_0+0x77ff96bc>
   1970c:	817ffd17 	ldw	r5,-12(r16)
   19710:	2908d83a 	srl	r4,r5,r4
   19714:	1104b03a 	or	r2,r2,r4
   19718:	003fe806 	br	196bc <__alt_mem_mcu_subsystem_ram_0+0x77ff96bc>
   1971c:	2800051e 	bne	r5,zero,19734 <__b2d+0xf4>
   19720:	0005883a 	mov	r2,zero
   19724:	88cffc34 	orhi	r3,r17,16368
   19728:	003fe406 	br	196bc <__alt_mem_mcu_subsystem_ram_0+0x77ff96bc>
   1972c:	000b883a 	mov	r5,zero
   19730:	003fdf06 	br	196b0 <__alt_mem_mcu_subsystem_ram_0+0x77ff96b0>
   19734:	8946983a 	sll	r3,r17,r5
   19738:	0005883a 	mov	r2,zero
   1973c:	18cffc34 	orhi	r3,r3,16368
   19740:	003fde06 	br	196bc <__alt_mem_mcu_subsystem_ram_0+0x77ff96bc>

00019744 <__d2b>:
   19744:	defff804 	addi	sp,sp,-32
   19748:	dc400315 	stw	r17,12(sp)
   1974c:	3023883a 	mov	r17,r6
   19750:	dd000615 	stw	r20,24(sp)
   19754:	dc000215 	stw	r16,8(sp)
   19758:	2829883a 	mov	r20,r5
   1975c:	8820d53a 	srli	r16,r17,20
   19760:	01400044 	movi	r5,1
   19764:	dcc00515 	stw	r19,20(sp)
   19768:	dc800415 	stw	r18,16(sp)
   1976c:	dfc00715 	stw	ra,28(sp)
   19770:	3825883a 	mov	r18,r7
   19774:	0018b2c0 	call	18b2c <_Balloc>
   19778:	01800434 	movhi	r6,16
   1977c:	31bfffc4 	addi	r6,r6,-1
   19780:	8401ffcc 	andi	r16,r16,2047
   19784:	1027883a 	mov	r19,r2
   19788:	89a2703a 	and	r17,r17,r6
   1978c:	80000126 	beq	r16,zero,19794 <__d2b+0x50>
   19790:	8c400434 	orhi	r17,r17,16
   19794:	dc400115 	stw	r17,4(sp)
   19798:	a0001f26 	beq	r20,zero,19818 <__d2b+0xd4>
   1979c:	d809883a 	mov	r4,sp
   197a0:	dd000015 	stw	r20,0(sp)
   197a4:	0018e7c0 	call	18e7c <__lo0bits>
   197a8:	d8c00117 	ldw	r3,4(sp)
   197ac:	10002b1e 	bne	r2,zero,1985c <__d2b+0x118>
   197b0:	d9000017 	ldw	r4,0(sp)
   197b4:	98c00615 	stw	r3,24(r19)
   197b8:	99000515 	stw	r4,20(r19)
   197bc:	18003126 	beq	r3,zero,19884 <__d2b+0x140>
   197c0:	04400084 	movi	r17,2
   197c4:	9c400415 	stw	r17,16(r19)
   197c8:	80001c1e 	bne	r16,zero,1983c <__d2b+0xf8>
   197cc:	880690ba 	slli	r3,r17,2
   197d0:	10bef384 	addi	r2,r2,-1074
   197d4:	90800015 	stw	r2,0(r18)
   197d8:	98c5883a 	add	r2,r19,r3
   197dc:	11000417 	ldw	r4,16(r2)
   197e0:	8822917a 	slli	r17,r17,5
   197e4:	0018e180 	call	18e18 <__hi0bits>
   197e8:	88a3c83a 	sub	r17,r17,r2
   197ec:	d8800817 	ldw	r2,32(sp)
   197f0:	14400015 	stw	r17,0(r2)
   197f4:	9805883a 	mov	r2,r19
   197f8:	dfc00717 	ldw	ra,28(sp)
   197fc:	dd000617 	ldw	r20,24(sp)
   19800:	dcc00517 	ldw	r19,20(sp)
   19804:	dc800417 	ldw	r18,16(sp)
   19808:	dc400317 	ldw	r17,12(sp)
   1980c:	dc000217 	ldw	r16,8(sp)
   19810:	dec00804 	addi	sp,sp,32
   19814:	f800283a 	ret
   19818:	d9000104 	addi	r4,sp,4
   1981c:	0018e7c0 	call	18e7c <__lo0bits>
   19820:	00c00044 	movi	r3,1
   19824:	98c00415 	stw	r3,16(r19)
   19828:	d8c00117 	ldw	r3,4(sp)
   1982c:	10800804 	addi	r2,r2,32
   19830:	04400044 	movi	r17,1
   19834:	98c00515 	stw	r3,20(r19)
   19838:	803fe426 	beq	r16,zero,197cc <__alt_mem_mcu_subsystem_ram_0+0x77ff97cc>
   1983c:	00c00d44 	movi	r3,53
   19840:	843ef344 	addi	r16,r16,-1075
   19844:	80a1883a 	add	r16,r16,r2
   19848:	1885c83a 	sub	r2,r3,r2
   1984c:	d8c00817 	ldw	r3,32(sp)
   19850:	94000015 	stw	r16,0(r18)
   19854:	18800015 	stw	r2,0(r3)
   19858:	003fe606 	br	197f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97f4>
   1985c:	01000804 	movi	r4,32
   19860:	2089c83a 	sub	r4,r4,r2
   19864:	1908983a 	sll	r4,r3,r4
   19868:	d9400017 	ldw	r5,0(sp)
   1986c:	1886d83a 	srl	r3,r3,r2
   19870:	2148b03a 	or	r4,r4,r5
   19874:	99000515 	stw	r4,20(r19)
   19878:	d8c00115 	stw	r3,4(sp)
   1987c:	98c00615 	stw	r3,24(r19)
   19880:	183fcf1e 	bne	r3,zero,197c0 <__alt_mem_mcu_subsystem_ram_0+0x77ff97c0>
   19884:	04400044 	movi	r17,1
   19888:	003fce06 	br	197c4 <__alt_mem_mcu_subsystem_ram_0+0x77ff97c4>

0001988c <__ratio>:
   1988c:	defff904 	addi	sp,sp,-28
   19890:	dc400315 	stw	r17,12(sp)
   19894:	2823883a 	mov	r17,r5
   19898:	d80b883a 	mov	r5,sp
   1989c:	dfc00615 	stw	ra,24(sp)
   198a0:	dcc00515 	stw	r19,20(sp)
   198a4:	dc800415 	stw	r18,16(sp)
   198a8:	2027883a 	mov	r19,r4
   198ac:	dc000215 	stw	r16,8(sp)
   198b0:	00196400 	call	19640 <__b2d>
   198b4:	d9400104 	addi	r5,sp,4
   198b8:	8809883a 	mov	r4,r17
   198bc:	1025883a 	mov	r18,r2
   198c0:	1821883a 	mov	r16,r3
   198c4:	00196400 	call	19640 <__b2d>
   198c8:	89400417 	ldw	r5,16(r17)
   198cc:	99000417 	ldw	r4,16(r19)
   198d0:	d9800117 	ldw	r6,4(sp)
   198d4:	2149c83a 	sub	r4,r4,r5
   198d8:	d9400017 	ldw	r5,0(sp)
   198dc:	2008917a 	slli	r4,r4,5
   198e0:	298bc83a 	sub	r5,r5,r6
   198e4:	2149883a 	add	r4,r4,r5
   198e8:	01000e0e 	bge	zero,r4,19924 <__ratio+0x98>
   198ec:	2008953a 	slli	r4,r4,20
   198f0:	2421883a 	add	r16,r4,r16
   198f4:	100d883a 	mov	r6,r2
   198f8:	180f883a 	mov	r7,r3
   198fc:	9009883a 	mov	r4,r18
   19900:	800b883a 	mov	r5,r16
   19904:	000e0540 	call	e054 <__divdf3>
   19908:	dfc00617 	ldw	ra,24(sp)
   1990c:	dcc00517 	ldw	r19,20(sp)
   19910:	dc800417 	ldw	r18,16(sp)
   19914:	dc400317 	ldw	r17,12(sp)
   19918:	dc000217 	ldw	r16,8(sp)
   1991c:	dec00704 	addi	sp,sp,28
   19920:	f800283a 	ret
   19924:	017ffc34 	movhi	r5,65520
   19928:	2149383a 	mul	r4,r4,r5
   1992c:	20c7883a 	add	r3,r4,r3
   19930:	003ff006 	br	198f4 <__alt_mem_mcu_subsystem_ram_0+0x77ff98f4>

00019934 <_mprec_log10>:
   19934:	defffe04 	addi	sp,sp,-8
   19938:	dc000015 	stw	r16,0(sp)
   1993c:	dfc00115 	stw	ra,4(sp)
   19940:	20800608 	cmpgei	r2,r4,24
   19944:	2021883a 	mov	r16,r4
   19948:	10000d26 	beq	r2,zero,19980 <_mprec_log10+0x4c>
   1994c:	0005883a 	mov	r2,zero
   19950:	00cffc34 	movhi	r3,16368
   19954:	843fffc4 	addi	r16,r16,-1
   19958:	000d883a 	mov	r6,zero
   1995c:	01d00934 	movhi	r7,16420
   19960:	1009883a 	mov	r4,r2
   19964:	180b883a 	mov	r5,r3
   19968:	000ea000 	call	ea00 <__muldf3>
   1996c:	803ff91e 	bne	r16,zero,19954 <__alt_mem_mcu_subsystem_ram_0+0x77ff9954>
   19970:	dfc00117 	ldw	ra,4(sp)
   19974:	dc000017 	ldw	r16,0(sp)
   19978:	dec00204 	addi	sp,sp,8
   1997c:	f800283a 	ret
   19980:	202090fa 	slli	r16,r4,3
   19984:	008000b4 	movhi	r2,2
   19988:	109bfc04 	addi	r2,r2,28656
   1998c:	1421883a 	add	r16,r2,r16
   19990:	80800017 	ldw	r2,0(r16)
   19994:	80c00117 	ldw	r3,4(r16)
   19998:	dfc00117 	ldw	ra,4(sp)
   1999c:	dc000017 	ldw	r16,0(sp)
   199a0:	dec00204 	addi	sp,sp,8
   199a4:	f800283a 	ret

000199a8 <__copybits>:
   199a8:	29ffffc4 	addi	r7,r5,-1
   199ac:	380fd17a 	srai	r7,r7,5
   199b0:	30c00417 	ldw	r3,16(r6)
   199b4:	30800504 	addi	r2,r6,20
   199b8:	39c00044 	addi	r7,r7,1
   199bc:	180690ba 	slli	r3,r3,2
   199c0:	380e90ba 	slli	r7,r7,2
   199c4:	10c7883a 	add	r3,r2,r3
   199c8:	21cf883a 	add	r7,r4,r7
   199cc:	10c00c2e 	bgeu	r2,r3,19a00 <__copybits+0x58>
   199d0:	200b883a 	mov	r5,r4
   199d4:	10800104 	addi	r2,r2,4
   199d8:	123fff17 	ldw	r8,-4(r2)
   199dc:	29400104 	addi	r5,r5,4
   199e0:	2a3fff15 	stw	r8,-4(r5)
   199e4:	10fffb36 	bltu	r2,r3,199d4 <__alt_mem_mcu_subsystem_ram_0+0x77ff99d4>
   199e8:	1985c83a 	sub	r2,r3,r6
   199ec:	10bffac4 	addi	r2,r2,-21
   199f0:	1004d0ba 	srli	r2,r2,2
   199f4:	10800044 	addi	r2,r2,1
   199f8:	100490ba 	slli	r2,r2,2
   199fc:	2089883a 	add	r4,r4,r2
   19a00:	21c0032e 	bgeu	r4,r7,19a10 <__copybits+0x68>
   19a04:	21000104 	addi	r4,r4,4
   19a08:	203fff15 	stw	zero,-4(r4)
   19a0c:	21fffd36 	bltu	r4,r7,19a04 <__alt_mem_mcu_subsystem_ram_0+0x77ff9a04>
   19a10:	f800283a 	ret

00019a14 <__any_on>:
   19a14:	20800417 	ldw	r2,16(r4)
   19a18:	280dd17a 	srai	r6,r5,5
   19a1c:	21000504 	addi	r4,r4,20
   19a20:	11800c0e 	bge	r2,r6,19a54 <__any_on+0x40>
   19a24:	100690ba 	slli	r3,r2,2
   19a28:	20c7883a 	add	r3,r4,r3
   19a2c:	20c0142e 	bgeu	r4,r3,19a80 <__any_on+0x6c>
   19a30:	18bfff17 	ldw	r2,-4(r3)
   19a34:	18ffff04 	addi	r3,r3,-4
   19a38:	1000041e 	bne	r2,zero,19a4c <__any_on+0x38>
   19a3c:	20c00f2e 	bgeu	r4,r3,19a7c <__any_on+0x68>
   19a40:	18ffff04 	addi	r3,r3,-4
   19a44:	19400017 	ldw	r5,0(r3)
   19a48:	283ffc26 	beq	r5,zero,19a3c <__alt_mem_mcu_subsystem_ram_0+0x77ff9a3c>
   19a4c:	00800044 	movi	r2,1
   19a50:	f800283a 	ret
   19a54:	300690ba 	slli	r3,r6,2
   19a58:	20c7883a 	add	r3,r4,r3
   19a5c:	30bff30e 	bge	r6,r2,19a2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9a2c>
   19a60:	294007cc 	andi	r5,r5,31
   19a64:	283ff126 	beq	r5,zero,19a2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9a2c>
   19a68:	19800017 	ldw	r6,0(r3)
   19a6c:	3144d83a 	srl	r2,r6,r5
   19a70:	114a983a 	sll	r5,r2,r5
   19a74:	317ff51e 	bne	r6,r5,19a4c <__alt_mem_mcu_subsystem_ram_0+0x77ff9a4c>
   19a78:	003fec06 	br	19a2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9a2c>
   19a7c:	f800283a 	ret
   19a80:	0005883a 	mov	r2,zero
   19a84:	f800283a 	ret

00019a88 <_putc_r>:
   19a88:	defffc04 	addi	sp,sp,-16
   19a8c:	dc000215 	stw	r16,8(sp)
   19a90:	dfc00315 	stw	ra,12(sp)
   19a94:	2021883a 	mov	r16,r4
   19a98:	20000226 	beq	r4,zero,19aa4 <_putc_r+0x1c>
   19a9c:	20800e17 	ldw	r2,56(r4)
   19aa0:	10000e26 	beq	r2,zero,19adc <_putc_r+0x54>
   19aa4:	30800217 	ldw	r2,8(r6)
   19aa8:	10bfffc4 	addi	r2,r2,-1
   19aac:	30800215 	stw	r2,8(r6)
   19ab0:	10001316 	blt	r2,zero,19b00 <_putc_r+0x78>
   19ab4:	30800017 	ldw	r2,0(r6)
   19ab8:	11400005 	stb	r5,0(r2)
   19abc:	30800017 	ldw	r2,0(r6)
   19ac0:	10c00044 	addi	r3,r2,1
   19ac4:	30c00015 	stw	r3,0(r6)
   19ac8:	10800003 	ldbu	r2,0(r2)
   19acc:	dfc00317 	ldw	ra,12(sp)
   19ad0:	dc000217 	ldw	r16,8(sp)
   19ad4:	dec00404 	addi	sp,sp,16
   19ad8:	f800283a 	ret
   19adc:	d9800115 	stw	r6,4(sp)
   19ae0:	d9400015 	stw	r5,0(sp)
   19ae4:	0017b9c0 	call	17b9c <__sinit>
   19ae8:	d9800117 	ldw	r6,4(sp)
   19aec:	d9400017 	ldw	r5,0(sp)
   19af0:	30800217 	ldw	r2,8(r6)
   19af4:	10bfffc4 	addi	r2,r2,-1
   19af8:	30800215 	stw	r2,8(r6)
   19afc:	103fed0e 	bge	r2,zero,19ab4 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ab4>
   19b00:	30c00617 	ldw	r3,24(r6)
   19b04:	10c00e16 	blt	r2,r3,19b40 <_putc_r+0xb8>
   19b08:	30800017 	ldw	r2,0(r6)
   19b0c:	11400005 	stb	r5,0(r2)
   19b10:	30c00017 	ldw	r3,0(r6)
   19b14:	18800003 	ldbu	r2,0(r3)
   19b18:	108002a0 	cmpeqi	r2,r2,10
   19b1c:	1000071e 	bne	r2,zero,19b3c <_putc_r+0xb4>
   19b20:	18800044 	addi	r2,r3,1
   19b24:	30800015 	stw	r2,0(r6)
   19b28:	18800003 	ldbu	r2,0(r3)
   19b2c:	dfc00317 	ldw	ra,12(sp)
   19b30:	dc000217 	ldw	r16,8(sp)
   19b34:	dec00404 	addi	sp,sp,16
   19b38:	f800283a 	ret
   19b3c:	01400284 	movi	r5,10
   19b40:	8009883a 	mov	r4,r16
   19b44:	dfc00317 	ldw	ra,12(sp)
   19b48:	dc000217 	ldw	r16,8(sp)
   19b4c:	dec00404 	addi	sp,sp,16
   19b50:	001e3681 	jmpi	1e368 <__swbuf_r>

00019b54 <putc>:
   19b54:	defffc04 	addi	sp,sp,-16
   19b58:	008000f4 	movhi	r2,3
   19b5c:	dc000115 	stw	r16,4(sp)
   19b60:	1423b117 	ldw	r16,-28988(r2)
   19b64:	dc400215 	stw	r17,8(sp)
   19b68:	dfc00315 	stw	ra,12(sp)
   19b6c:	2023883a 	mov	r17,r4
   19b70:	80000226 	beq	r16,zero,19b7c <putc+0x28>
   19b74:	80800e17 	ldw	r2,56(r16)
   19b78:	10000f26 	beq	r2,zero,19bb8 <putc+0x64>
   19b7c:	28800217 	ldw	r2,8(r5)
   19b80:	10bfffc4 	addi	r2,r2,-1
   19b84:	28800215 	stw	r2,8(r5)
   19b88:	10001316 	blt	r2,zero,19bd8 <putc+0x84>
   19b8c:	28800017 	ldw	r2,0(r5)
   19b90:	14400005 	stb	r17,0(r2)
   19b94:	28800017 	ldw	r2,0(r5)
   19b98:	10c00044 	addi	r3,r2,1
   19b9c:	28c00015 	stw	r3,0(r5)
   19ba0:	10800003 	ldbu	r2,0(r2)
   19ba4:	dfc00317 	ldw	ra,12(sp)
   19ba8:	dc400217 	ldw	r17,8(sp)
   19bac:	dc000117 	ldw	r16,4(sp)
   19bb0:	dec00404 	addi	sp,sp,16
   19bb4:	f800283a 	ret
   19bb8:	8009883a 	mov	r4,r16
   19bbc:	d9400015 	stw	r5,0(sp)
   19bc0:	0017b9c0 	call	17b9c <__sinit>
   19bc4:	d9400017 	ldw	r5,0(sp)
   19bc8:	28800217 	ldw	r2,8(r5)
   19bcc:	10bfffc4 	addi	r2,r2,-1
   19bd0:	28800215 	stw	r2,8(r5)
   19bd4:	103fed0e 	bge	r2,zero,19b8c <__alt_mem_mcu_subsystem_ram_0+0x77ff9b8c>
   19bd8:	28c00617 	ldw	r3,24(r5)
   19bdc:	10c00a16 	blt	r2,r3,19c08 <putc+0xb4>
   19be0:	28800017 	ldw	r2,0(r5)
   19be4:	14400005 	stb	r17,0(r2)
   19be8:	28c00017 	ldw	r3,0(r5)
   19bec:	18800003 	ldbu	r2,0(r3)
   19bf0:	108002a0 	cmpeqi	r2,r2,10
   19bf4:	10000c1e 	bne	r2,zero,19c28 <putc+0xd4>
   19bf8:	18800044 	addi	r2,r3,1
   19bfc:	28800015 	stw	r2,0(r5)
   19c00:	18800003 	ldbu	r2,0(r3)
   19c04:	003fe706 	br	19ba4 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ba4>
   19c08:	280d883a 	mov	r6,r5
   19c0c:	880b883a 	mov	r5,r17
   19c10:	8009883a 	mov	r4,r16
   19c14:	dfc00317 	ldw	ra,12(sp)
   19c18:	dc400217 	ldw	r17,8(sp)
   19c1c:	dc000117 	ldw	r16,4(sp)
   19c20:	dec00404 	addi	sp,sp,16
   19c24:	001e3681 	jmpi	1e368 <__swbuf_r>
   19c28:	280d883a 	mov	r6,r5
   19c2c:	01400284 	movi	r5,10
   19c30:	003ff706 	br	19c10 <__alt_mem_mcu_subsystem_ram_0+0x77ff9c10>

00019c34 <_realloc_r>:
   19c34:	defff504 	addi	sp,sp,-44
   19c38:	dc400215 	stw	r17,8(sp)
   19c3c:	dfc00a15 	stw	ra,40(sp)
   19c40:	df000915 	stw	fp,36(sp)
   19c44:	ddc00815 	stw	r23,32(sp)
   19c48:	dd800715 	stw	r22,28(sp)
   19c4c:	dd400615 	stw	r21,24(sp)
   19c50:	dd000515 	stw	r20,20(sp)
   19c54:	dcc00415 	stw	r19,16(sp)
   19c58:	dc800315 	stw	r18,12(sp)
   19c5c:	dc000115 	stw	r16,4(sp)
   19c60:	3023883a 	mov	r17,r6
   19c64:	28008b26 	beq	r5,zero,19e94 <_realloc_r+0x260>
   19c68:	2827883a 	mov	r19,r5
   19c6c:	2025883a 	mov	r18,r4
   19c70:	00201700 	call	20170 <__malloc_lock>
   19c74:	98bfff17 	ldw	r2,-4(r19)
   19c78:	894002c4 	addi	r5,r17,11
   19c7c:	043fff04 	movi	r16,-4
   19c80:	28c005f0 	cmpltui	r3,r5,23
   19c84:	9d3ffe04 	addi	r20,r19,-8
   19c88:	1420703a 	and	r16,r2,r16
   19c8c:	1800321e 	bne	r3,zero,19d58 <_realloc_r+0x124>
   19c90:	05bffe04 	movi	r22,-8
   19c94:	2dac703a 	and	r22,r5,r22
   19c98:	b009883a 	mov	r4,r22
   19c9c:	b0009516 	blt	r22,zero,19ef4 <_realloc_r+0x2c0>
   19ca0:	b4409436 	bltu	r22,r17,19ef4 <_realloc_r+0x2c0>
   19ca4:	a42f883a 	add	r23,r20,r16
   19ca8:	8100600e 	bge	r16,r4,19e2c <_realloc_r+0x1f8>
   19cac:	070000b4 	movhi	fp,2
   19cb0:	e71dd704 	addi	fp,fp,30556
   19cb4:	e1800217 	ldw	r6,8(fp)
   19cb8:	35c02a26 	beq	r6,r23,19d64 <_realloc_r+0x130>
   19cbc:	b8c00117 	ldw	r3,4(r23)
   19cc0:	017fff84 	movi	r5,-2
   19cc4:	194a703a 	and	r5,r3,r5
   19cc8:	b94b883a 	add	r5,r23,r5
   19ccc:	29400117 	ldw	r5,4(r5)
   19cd0:	2940004c 	andi	r5,r5,1
   19cd4:	28007c26 	beq	r5,zero,19ec8 <_realloc_r+0x294>
   19cd8:	1080004c 	andi	r2,r2,1
   19cdc:	10009526 	beq	r2,zero,19f34 <_realloc_r+0x300>
   19ce0:	880b883a 	mov	r5,r17
   19ce4:	9009883a 	mov	r4,r18
   19ce8:	000fdf40 	call	fdf4 <_malloc_r>
   19cec:	1023883a 	mov	r17,r2
   19cf0:	10001626 	beq	r2,zero,19d4c <_realloc_r+0x118>
   19cf4:	98bfff17 	ldw	r2,-4(r19)
   19cf8:	013fff84 	movi	r4,-2
   19cfc:	88fffe04 	addi	r3,r17,-8
   19d00:	1104703a 	and	r2,r2,r4
   19d04:	a085883a 	add	r2,r20,r2
   19d08:	10c0ba26 	beq	r2,r3,19ff4 <_realloc_r+0x3c0>
   19d0c:	81bfff04 	addi	r6,r16,-4
   19d10:	30800968 	cmpgeui	r2,r6,37
   19d14:	1000e31e 	bne	r2,zero,1a0a4 <_realloc_r+0x470>
   19d18:	30800530 	cmpltui	r2,r6,20
   19d1c:	99000017 	ldw	r4,0(r19)
   19d20:	10009e26 	beq	r2,zero,19f9c <_realloc_r+0x368>
   19d24:	8805883a 	mov	r2,r17
   19d28:	9807883a 	mov	r3,r19
   19d2c:	11000015 	stw	r4,0(r2)
   19d30:	19000117 	ldw	r4,4(r3)
   19d34:	11000115 	stw	r4,4(r2)
   19d38:	18c00217 	ldw	r3,8(r3)
   19d3c:	10c00215 	stw	r3,8(r2)
   19d40:	980b883a 	mov	r5,r19
   19d44:	9009883a 	mov	r4,r18
   19d48:	0017d000 	call	17d00 <_free_r>
   19d4c:	9009883a 	mov	r4,r18
   19d50:	00201940 	call	20194 <__malloc_unlock>
   19d54:	00004206 	br	19e60 <_realloc_r+0x22c>
   19d58:	05800404 	movi	r22,16
   19d5c:	01000404 	movi	r4,16
   19d60:	003fcf06 	br	19ca0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ca0>
   19d64:	30c00117 	ldw	r3,4(r6)
   19d68:	01ffff04 	movi	r7,-4
   19d6c:	b1400404 	addi	r5,r22,16
   19d70:	19c6703a 	and	r3,r3,r7
   19d74:	80cf883a 	add	r7,r16,r3
   19d78:	3940910e 	bge	r7,r5,19fc0 <_realloc_r+0x38c>
   19d7c:	1080004c 	andi	r2,r2,1
   19d80:	103fd71e 	bne	r2,zero,19ce0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ce0>
   19d84:	99fffe17 	ldw	r7,-8(r19)
   19d88:	017fff04 	movi	r5,-4
   19d8c:	a1cfc83a 	sub	r7,r20,r7
   19d90:	38800117 	ldw	r2,4(r7)
   19d94:	1144703a 	and	r2,r2,r5
   19d98:	b8006b26 	beq	r23,zero,19f48 <_realloc_r+0x314>
   19d9c:	80ab883a 	add	r21,r16,r2
   19da0:	a8eb883a 	add	r21,r21,r3
   19da4:	35c09926 	beq	r6,r23,1a00c <_realloc_r+0x3d8>
   19da8:	a9006716 	blt	r21,r4,19f48 <_realloc_r+0x314>
   19dac:	b8800317 	ldw	r2,12(r23)
   19db0:	b8c00217 	ldw	r3,8(r23)
   19db4:	81bfff04 	addi	r6,r16,-4
   19db8:	31000968 	cmpgeui	r4,r6,37
   19dbc:	18800315 	stw	r2,12(r3)
   19dc0:	10c00215 	stw	r3,8(r2)
   19dc4:	38c00217 	ldw	r3,8(r7)
   19dc8:	38800317 	ldw	r2,12(r7)
   19dcc:	3c400204 	addi	r17,r7,8
   19dd0:	3d6f883a 	add	r23,r7,r21
   19dd4:	18800315 	stw	r2,12(r3)
   19dd8:	10c00215 	stw	r3,8(r2)
   19ddc:	2000661e 	bne	r4,zero,19f78 <_realloc_r+0x344>
   19de0:	30800530 	cmpltui	r2,r6,20
   19de4:	98c00017 	ldw	r3,0(r19)
   19de8:	1000b21e 	bne	r2,zero,1a0b4 <_realloc_r+0x480>
   19dec:	38c00215 	stw	r3,8(r7)
   19df0:	98c00117 	ldw	r3,4(r19)
   19df4:	30800728 	cmpgeui	r2,r6,28
   19df8:	38c00315 	stw	r3,12(r7)
   19dfc:	1000b91e 	bne	r2,zero,1a0e4 <_realloc_r+0x4b0>
   19e00:	98c00217 	ldw	r3,8(r19)
   19e04:	38800404 	addi	r2,r7,16
   19e08:	9cc00204 	addi	r19,r19,8
   19e0c:	10c00015 	stw	r3,0(r2)
   19e10:	98c00117 	ldw	r3,4(r19)
   19e14:	a821883a 	mov	r16,r21
   19e18:	3829883a 	mov	r20,r7
   19e1c:	10c00115 	stw	r3,4(r2)
   19e20:	98c00217 	ldw	r3,8(r19)
   19e24:	8827883a 	mov	r19,r17
   19e28:	10c00215 	stw	r3,8(r2)
   19e2c:	a1800117 	ldw	r6,4(r20)
   19e30:	8585c83a 	sub	r2,r16,r22
   19e34:	10c00430 	cmpltui	r3,r2,16
   19e38:	3180004c 	andi	r6,r6,1
   19e3c:	18003126 	beq	r3,zero,19f04 <_realloc_r+0x2d0>
   19e40:	818cb03a 	or	r6,r16,r6
   19e44:	a1800115 	stw	r6,4(r20)
   19e48:	b8800117 	ldw	r2,4(r23)
   19e4c:	10800054 	ori	r2,r2,1
   19e50:	b8800115 	stw	r2,4(r23)
   19e54:	9009883a 	mov	r4,r18
   19e58:	00201940 	call	20194 <__malloc_unlock>
   19e5c:	9823883a 	mov	r17,r19
   19e60:	8805883a 	mov	r2,r17
   19e64:	dfc00a17 	ldw	ra,40(sp)
   19e68:	df000917 	ldw	fp,36(sp)
   19e6c:	ddc00817 	ldw	r23,32(sp)
   19e70:	dd800717 	ldw	r22,28(sp)
   19e74:	dd400617 	ldw	r21,24(sp)
   19e78:	dd000517 	ldw	r20,20(sp)
   19e7c:	dcc00417 	ldw	r19,16(sp)
   19e80:	dc800317 	ldw	r18,12(sp)
   19e84:	dc400217 	ldw	r17,8(sp)
   19e88:	dc000117 	ldw	r16,4(sp)
   19e8c:	dec00b04 	addi	sp,sp,44
   19e90:	f800283a 	ret
   19e94:	300b883a 	mov	r5,r6
   19e98:	dfc00a17 	ldw	ra,40(sp)
   19e9c:	df000917 	ldw	fp,36(sp)
   19ea0:	ddc00817 	ldw	r23,32(sp)
   19ea4:	dd800717 	ldw	r22,28(sp)
   19ea8:	dd400617 	ldw	r21,24(sp)
   19eac:	dd000517 	ldw	r20,20(sp)
   19eb0:	dcc00417 	ldw	r19,16(sp)
   19eb4:	dc800317 	ldw	r18,12(sp)
   19eb8:	dc400217 	ldw	r17,8(sp)
   19ebc:	dc000117 	ldw	r16,4(sp)
   19ec0:	dec00b04 	addi	sp,sp,44
   19ec4:	000fdf41 	jmpi	fdf4 <_malloc_r>
   19ec8:	017fff04 	movi	r5,-4
   19ecc:	1946703a 	and	r3,r3,r5
   19ed0:	80cb883a 	add	r5,r16,r3
   19ed4:	293fa916 	blt	r5,r4,19d7c <__alt_mem_mcu_subsystem_ram_0+0x77ff9d7c>
   19ed8:	b8800317 	ldw	r2,12(r23)
   19edc:	b8c00217 	ldw	r3,8(r23)
   19ee0:	2821883a 	mov	r16,r5
   19ee4:	a16f883a 	add	r23,r20,r5
   19ee8:	18800315 	stw	r2,12(r3)
   19eec:	10c00215 	stw	r3,8(r2)
   19ef0:	003fce06 	br	19e2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e2c>
   19ef4:	00800304 	movi	r2,12
   19ef8:	90800015 	stw	r2,0(r18)
   19efc:	0023883a 	mov	r17,zero
   19f00:	003fd706 	br	19e60 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e60>
   19f04:	358cb03a 	or	r6,r6,r22
   19f08:	a1800115 	stw	r6,4(r20)
   19f0c:	a58b883a 	add	r5,r20,r22
   19f10:	10800054 	ori	r2,r2,1
   19f14:	28800115 	stw	r2,4(r5)
   19f18:	b8800117 	ldw	r2,4(r23)
   19f1c:	29400204 	addi	r5,r5,8
   19f20:	9009883a 	mov	r4,r18
   19f24:	10800054 	ori	r2,r2,1
   19f28:	b8800115 	stw	r2,4(r23)
   19f2c:	0017d000 	call	17d00 <_free_r>
   19f30:	003fc806 	br	19e54 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e54>
   19f34:	99fffe17 	ldw	r7,-8(r19)
   19f38:	00ffff04 	movi	r3,-4
   19f3c:	a1cfc83a 	sub	r7,r20,r7
   19f40:	38800117 	ldw	r2,4(r7)
   19f44:	10c4703a 	and	r2,r2,r3
   19f48:	383f6526 	beq	r7,zero,19ce0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ce0>
   19f4c:	80ab883a 	add	r21,r16,r2
   19f50:	a93f6316 	blt	r21,r4,19ce0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9ce0>
   19f54:	38800317 	ldw	r2,12(r7)
   19f58:	38c00217 	ldw	r3,8(r7)
   19f5c:	81bfff04 	addi	r6,r16,-4
   19f60:	31000968 	cmpgeui	r4,r6,37
   19f64:	18800315 	stw	r2,12(r3)
   19f68:	10c00215 	stw	r3,8(r2)
   19f6c:	3c400204 	addi	r17,r7,8
   19f70:	3d6f883a 	add	r23,r7,r21
   19f74:	203f9a26 	beq	r4,zero,19de0 <__alt_mem_mcu_subsystem_ram_0+0x77ff9de0>
   19f78:	980b883a 	mov	r5,r19
   19f7c:	8809883a 	mov	r4,r17
   19f80:	d9c00015 	stw	r7,0(sp)
   19f84:	0018a100 	call	18a10 <memmove>
   19f88:	d9c00017 	ldw	r7,0(sp)
   19f8c:	8827883a 	mov	r19,r17
   19f90:	a821883a 	mov	r16,r21
   19f94:	3829883a 	mov	r20,r7
   19f98:	003fa406 	br	19e2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e2c>
   19f9c:	89000015 	stw	r4,0(r17)
   19fa0:	98c00117 	ldw	r3,4(r19)
   19fa4:	30800728 	cmpgeui	r2,r6,28
   19fa8:	88c00115 	stw	r3,4(r17)
   19fac:	1000431e 	bne	r2,zero,1a0bc <_realloc_r+0x488>
   19fb0:	98c00204 	addi	r3,r19,8
   19fb4:	88800204 	addi	r2,r17,8
   19fb8:	99000217 	ldw	r4,8(r19)
   19fbc:	003f5b06 	br	19d2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9d2c>
   19fc0:	a5a9883a 	add	r20,r20,r22
   19fc4:	3d8fc83a 	sub	r7,r7,r22
   19fc8:	e5000215 	stw	r20,8(fp)
   19fcc:	39c00054 	ori	r7,r7,1
   19fd0:	a1c00115 	stw	r7,4(r20)
   19fd4:	997fff17 	ldw	r5,-4(r19)
   19fd8:	9009883a 	mov	r4,r18
   19fdc:	9823883a 	mov	r17,r19
   19fe0:	2940004c 	andi	r5,r5,1
   19fe4:	2d8ab03a 	or	r5,r5,r22
   19fe8:	997fff15 	stw	r5,-4(r19)
   19fec:	00201940 	call	20194 <__malloc_unlock>
   19ff0:	003f9b06 	br	19e60 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e60>
   19ff4:	88bfff17 	ldw	r2,-4(r17)
   19ff8:	00ffff04 	movi	r3,-4
   19ffc:	10c4703a 	and	r2,r2,r3
   1a000:	80a1883a 	add	r16,r16,r2
   1a004:	a42f883a 	add	r23,r20,r16
   1a008:	003f8806 	br	19e2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e2c>
   1a00c:	b0c00404 	addi	r3,r22,16
   1a010:	a8ffcd16 	blt	r21,r3,19f48 <__alt_mem_mcu_subsystem_ram_0+0x77ff9f48>
   1a014:	38800317 	ldw	r2,12(r7)
   1a018:	38c00217 	ldw	r3,8(r7)
   1a01c:	81bfff04 	addi	r6,r16,-4
   1a020:	31000968 	cmpgeui	r4,r6,37
   1a024:	18800315 	stw	r2,12(r3)
   1a028:	10c00215 	stw	r3,8(r2)
   1a02c:	3c400204 	addi	r17,r7,8
   1a030:	2000471e 	bne	r4,zero,1a150 <_realloc_r+0x51c>
   1a034:	30800530 	cmpltui	r2,r6,20
   1a038:	98c00017 	ldw	r3,0(r19)
   1a03c:	1000421e 	bne	r2,zero,1a148 <_realloc_r+0x514>
   1a040:	38c00215 	stw	r3,8(r7)
   1a044:	98c00117 	ldw	r3,4(r19)
   1a048:	30800728 	cmpgeui	r2,r6,28
   1a04c:	38c00315 	stw	r3,12(r7)
   1a050:	1000451e 	bne	r2,zero,1a168 <_realloc_r+0x534>
   1a054:	98c00217 	ldw	r3,8(r19)
   1a058:	38800404 	addi	r2,r7,16
   1a05c:	9cc00204 	addi	r19,r19,8
   1a060:	10c00015 	stw	r3,0(r2)
   1a064:	98c00117 	ldw	r3,4(r19)
   1a068:	10c00115 	stw	r3,4(r2)
   1a06c:	98c00217 	ldw	r3,8(r19)
   1a070:	10c00215 	stw	r3,8(r2)
   1a074:	3d87883a 	add	r3,r7,r22
   1a078:	ad85c83a 	sub	r2,r21,r22
   1a07c:	e0c00215 	stw	r3,8(fp)
   1a080:	10800054 	ori	r2,r2,1
   1a084:	18800115 	stw	r2,4(r3)
   1a088:	39400117 	ldw	r5,4(r7)
   1a08c:	9009883a 	mov	r4,r18
   1a090:	2940004c 	andi	r5,r5,1
   1a094:	2d8ab03a 	or	r5,r5,r22
   1a098:	39400115 	stw	r5,4(r7)
   1a09c:	00201940 	call	20194 <__malloc_unlock>
   1a0a0:	003f6f06 	br	19e60 <__alt_mem_mcu_subsystem_ram_0+0x77ff9e60>
   1a0a4:	980b883a 	mov	r5,r19
   1a0a8:	8809883a 	mov	r4,r17
   1a0ac:	0018a100 	call	18a10 <memmove>
   1a0b0:	003f2306 	br	19d40 <__alt_mem_mcu_subsystem_ram_0+0x77ff9d40>
   1a0b4:	8805883a 	mov	r2,r17
   1a0b8:	003f5406 	br	19e0c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e0c>
   1a0bc:	98800217 	ldw	r2,8(r19)
   1a0c0:	31800920 	cmpeqi	r6,r6,36
   1a0c4:	88800215 	stw	r2,8(r17)
   1a0c8:	98800317 	ldw	r2,12(r19)
   1a0cc:	88800315 	stw	r2,12(r17)
   1a0d0:	30000e1e 	bne	r6,zero,1a10c <_realloc_r+0x4d8>
   1a0d4:	98c00404 	addi	r3,r19,16
   1a0d8:	88800404 	addi	r2,r17,16
   1a0dc:	99000417 	ldw	r4,16(r19)
   1a0e0:	003f1206 	br	19d2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9d2c>
   1a0e4:	98800217 	ldw	r2,8(r19)
   1a0e8:	31800920 	cmpeqi	r6,r6,36
   1a0ec:	38800415 	stw	r2,16(r7)
   1a0f0:	98800317 	ldw	r2,12(r19)
   1a0f4:	38800515 	stw	r2,20(r7)
   1a0f8:	98c00417 	ldw	r3,16(r19)
   1a0fc:	30000b1e 	bne	r6,zero,1a12c <_realloc_r+0x4f8>
   1a100:	38800604 	addi	r2,r7,24
   1a104:	9cc00404 	addi	r19,r19,16
   1a108:	003f4006 	br	19e0c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e0c>
   1a10c:	99000417 	ldw	r4,16(r19)
   1a110:	98c00604 	addi	r3,r19,24
   1a114:	88800604 	addi	r2,r17,24
   1a118:	89000415 	stw	r4,16(r17)
   1a11c:	99000517 	ldw	r4,20(r19)
   1a120:	89000515 	stw	r4,20(r17)
   1a124:	99000617 	ldw	r4,24(r19)
   1a128:	003f0006 	br	19d2c <__alt_mem_mcu_subsystem_ram_0+0x77ff9d2c>
   1a12c:	9cc00604 	addi	r19,r19,24
   1a130:	38c00615 	stw	r3,24(r7)
   1a134:	98ffff17 	ldw	r3,-4(r19)
   1a138:	38800804 	addi	r2,r7,32
   1a13c:	38c00715 	stw	r3,28(r7)
   1a140:	98c00017 	ldw	r3,0(r19)
   1a144:	003f3106 	br	19e0c <__alt_mem_mcu_subsystem_ram_0+0x77ff9e0c>
   1a148:	8805883a 	mov	r2,r17
   1a14c:	003fc406 	br	1a060 <__alt_mem_mcu_subsystem_ram_0+0x77ffa060>
   1a150:	980b883a 	mov	r5,r19
   1a154:	8809883a 	mov	r4,r17
   1a158:	d9c00015 	stw	r7,0(sp)
   1a15c:	0018a100 	call	18a10 <memmove>
   1a160:	d9c00017 	ldw	r7,0(sp)
   1a164:	003fc306 	br	1a074 <__alt_mem_mcu_subsystem_ram_0+0x77ffa074>
   1a168:	98800217 	ldw	r2,8(r19)
   1a16c:	31800920 	cmpeqi	r6,r6,36
   1a170:	38800415 	stw	r2,16(r7)
   1a174:	98800317 	ldw	r2,12(r19)
   1a178:	38800515 	stw	r2,20(r7)
   1a17c:	98c00417 	ldw	r3,16(r19)
   1a180:	3000031e 	bne	r6,zero,1a190 <_realloc_r+0x55c>
   1a184:	38800604 	addi	r2,r7,24
   1a188:	9cc00404 	addi	r19,r19,16
   1a18c:	003fb406 	br	1a060 <__alt_mem_mcu_subsystem_ram_0+0x77ffa060>
   1a190:	9cc00604 	addi	r19,r19,24
   1a194:	38c00615 	stw	r3,24(r7)
   1a198:	98ffff17 	ldw	r3,-4(r19)
   1a19c:	38800804 	addi	r2,r7,32
   1a1a0:	38c00715 	stw	r3,28(r7)
   1a1a4:	98c00017 	ldw	r3,0(r19)
   1a1a8:	003fad06 	br	1a060 <__alt_mem_mcu_subsystem_ram_0+0x77ffa060>

0001a1ac <lflush>:
   1a1ac:	2080030b 	ldhu	r2,12(r4)
   1a1b0:	1080024c 	andi	r2,r2,9
   1a1b4:	10800258 	cmpnei	r2,r2,9
   1a1b8:	10000226 	beq	r2,zero,1a1c4 <lflush+0x18>
   1a1bc:	0005883a 	mov	r2,zero
   1a1c0:	f800283a 	ret
   1a1c4:	001785c1 	jmpi	1785c <fflush>

0001a1c8 <__srefill_r>:
   1a1c8:	defffc04 	addi	sp,sp,-16
   1a1cc:	dc400115 	stw	r17,4(sp)
   1a1d0:	dc000015 	stw	r16,0(sp)
   1a1d4:	dfc00315 	stw	ra,12(sp)
   1a1d8:	dc800215 	stw	r18,8(sp)
   1a1dc:	2023883a 	mov	r17,r4
   1a1e0:	2821883a 	mov	r16,r5
   1a1e4:	20000226 	beq	r4,zero,1a1f0 <__srefill_r+0x28>
   1a1e8:	20800e17 	ldw	r2,56(r4)
   1a1ec:	10003926 	beq	r2,zero,1a2d4 <__srefill_r+0x10c>
   1a1f0:	80c0030b 	ldhu	r3,12(r16)
   1a1f4:	1908000c 	andi	r4,r3,8192
   1a1f8:	1805883a 	mov	r2,r3
   1a1fc:	2000071e 	bne	r4,zero,1a21c <__srefill_r+0x54>
   1a200:	81001917 	ldw	r4,100(r16)
   1a204:	18880014 	ori	r2,r3,8192
   1a208:	00f7ffc4 	movi	r3,-8193
   1a20c:	20c8703a 	and	r4,r4,r3
   1a210:	8080030d 	sth	r2,12(r16)
   1a214:	1007883a 	mov	r3,r2
   1a218:	81001915 	stw	r4,100(r16)
   1a21c:	80000115 	stw	zero,4(r16)
   1a220:	1100080c 	andi	r4,r2,32
   1a224:	2000311e 	bne	r4,zero,1a2ec <__srefill_r+0x124>
   1a228:	1100010c 	andi	r4,r2,4
   1a22c:	20001b1e 	bne	r4,zero,1a29c <__srefill_r+0xd4>
   1a230:	1100040c 	andi	r4,r2,16
   1a234:	20005026 	beq	r4,zero,1a378 <__srefill_r+0x1b0>
   1a238:	1080020c 	andi	r2,r2,8
   1a23c:	1000411e 	bne	r2,zero,1a344 <__srefill_r+0x17c>
   1a240:	18c00114 	ori	r3,r3,4
   1a244:	80c0030d 	sth	r3,12(r16)
   1a248:	80800417 	ldw	r2,16(r16)
   1a24c:	10004626 	beq	r2,zero,1a368 <__srefill_r+0x1a0>
   1a250:	8480030b 	ldhu	r18,12(r16)
   1a254:	908000cc 	andi	r2,r18,3
   1a258:	1000261e 	bne	r2,zero,1a2f4 <__srefill_r+0x12c>
   1a25c:	81800417 	ldw	r6,16(r16)
   1a260:	80800817 	ldw	r2,32(r16)
   1a264:	81c00517 	ldw	r7,20(r16)
   1a268:	81400717 	ldw	r5,28(r16)
   1a26c:	81800015 	stw	r6,0(r16)
   1a270:	8809883a 	mov	r4,r17
   1a274:	103ee83a 	callr	r2
   1a278:	80800115 	stw	r2,4(r16)
   1a27c:	0080170e 	bge	zero,r2,1a2dc <__srefill_r+0x114>
   1a280:	0005883a 	mov	r2,zero
   1a284:	dfc00317 	ldw	ra,12(sp)
   1a288:	dc800217 	ldw	r18,8(sp)
   1a28c:	dc400117 	ldw	r17,4(sp)
   1a290:	dc000017 	ldw	r16,0(sp)
   1a294:	dec00404 	addi	sp,sp,16
   1a298:	f800283a 	ret
   1a29c:	81400c17 	ldw	r5,48(r16)
   1a2a0:	283fe926 	beq	r5,zero,1a248 <__alt_mem_mcu_subsystem_ram_0+0x77ffa248>
   1a2a4:	80801004 	addi	r2,r16,64
   1a2a8:	28800226 	beq	r5,r2,1a2b4 <__srefill_r+0xec>
   1a2ac:	8809883a 	mov	r4,r17
   1a2b0:	0017d000 	call	17d00 <_free_r>
   1a2b4:	80800f17 	ldw	r2,60(r16)
   1a2b8:	80000c15 	stw	zero,48(r16)
   1a2bc:	80800115 	stw	r2,4(r16)
   1a2c0:	103fe126 	beq	r2,zero,1a248 <__alt_mem_mcu_subsystem_ram_0+0x77ffa248>
   1a2c4:	80c00e17 	ldw	r3,56(r16)
   1a2c8:	0005883a 	mov	r2,zero
   1a2cc:	80c00015 	stw	r3,0(r16)
   1a2d0:	003fec06 	br	1a284 <__alt_mem_mcu_subsystem_ram_0+0x77ffa284>
   1a2d4:	0017b9c0 	call	17b9c <__sinit>
   1a2d8:	003fc506 	br	1a1f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa1f0>
   1a2dc:	80c0030b 	ldhu	r3,12(r16)
   1a2e0:	1000131e 	bne	r2,zero,1a330 <__srefill_r+0x168>
   1a2e4:	18c00814 	ori	r3,r3,32
   1a2e8:	80c0030d 	sth	r3,12(r16)
   1a2ec:	00bfffc4 	movi	r2,-1
   1a2f0:	003fe406 	br	1a284 <__alt_mem_mcu_subsystem_ram_0+0x77ffa284>
   1a2f4:	008000f4 	movhi	r2,3
   1a2f8:	1123b017 	ldw	r4,-28992(r2)
   1a2fc:	014000b4 	movhi	r5,2
   1a300:	00800044 	movi	r2,1
   1a304:	8080030d 	sth	r2,12(r16)
   1a308:	29686b04 	addi	r5,r5,-24148
   1a30c:	00184900 	call	18490 <_fwalk>
   1a310:	9080024c 	andi	r2,r18,9
   1a314:	8480030d 	sth	r18,12(r16)
   1a318:	10800258 	cmpnei	r2,r2,9
   1a31c:	103fcf1e 	bne	r2,zero,1a25c <__alt_mem_mcu_subsystem_ram_0+0x77ffa25c>
   1a320:	800b883a 	mov	r5,r16
   1a324:	8809883a 	mov	r4,r17
   1a328:	00175dc0 	call	175dc <__sflush_r>
   1a32c:	003fcb06 	br	1a25c <__alt_mem_mcu_subsystem_ram_0+0x77ffa25c>
   1a330:	18c01014 	ori	r3,r3,64
   1a334:	80000115 	stw	zero,4(r16)
   1a338:	80c0030d 	sth	r3,12(r16)
   1a33c:	00bfffc4 	movi	r2,-1
   1a340:	003fd006 	br	1a284 <__alt_mem_mcu_subsystem_ram_0+0x77ffa284>
   1a344:	800b883a 	mov	r5,r16
   1a348:	8809883a 	mov	r4,r17
   1a34c:	00177fc0 	call	177fc <_fflush_r>
   1a350:	103fe61e 	bne	r2,zero,1a2ec <__alt_mem_mcu_subsystem_ram_0+0x77ffa2ec>
   1a354:	80c0030b 	ldhu	r3,12(r16)
   1a358:	80000215 	stw	zero,8(r16)
   1a35c:	80000615 	stw	zero,24(r16)
   1a360:	18fffdcc 	andi	r3,r3,65527
   1a364:	003fb606 	br	1a240 <__alt_mem_mcu_subsystem_ram_0+0x77ffa240>
   1a368:	800b883a 	mov	r5,r16
   1a36c:	8809883a 	mov	r4,r17
   1a370:	00187ec0 	call	187ec <__smakebuf_r>
   1a374:	003fb606 	br	1a250 <__alt_mem_mcu_subsystem_ram_0+0x77ffa250>
   1a378:	00800244 	movi	r2,9
   1a37c:	88800015 	stw	r2,0(r17)
   1a380:	18c01014 	ori	r3,r3,64
   1a384:	80c0030d 	sth	r3,12(r16)
   1a388:	00bfffc4 	movi	r2,-1
   1a38c:	003fbd06 	br	1a284 <__alt_mem_mcu_subsystem_ram_0+0x77ffa284>

0001a390 <siscanf>:
   1a390:	deffe204 	addi	sp,sp,-120
   1a394:	dc001a15 	stw	r16,104(sp)
   1a398:	2821883a 	mov	r16,r5
   1a39c:	dfc01b15 	stw	ra,108(sp)
   1a3a0:	d9801c15 	stw	r6,112(sp)
   1a3a4:	d9c01d15 	stw	r7,116(sp)
   1a3a8:	00c08104 	movi	r3,516
   1a3ac:	d8c0030d 	sth	r3,12(sp)
   1a3b0:	d9000015 	stw	r4,0(sp)
   1a3b4:	d9000415 	stw	r4,16(sp)
   1a3b8:	00112e40 	call	112e4 <strlen>
   1a3bc:	00c000f4 	movhi	r3,3
   1a3c0:	1923b117 	ldw	r4,-28988(r3)
   1a3c4:	00c000b4 	movhi	r3,2
   1a3c8:	18e93504 	addi	r3,r3,-23340
   1a3cc:	d8800115 	stw	r2,4(sp)
   1a3d0:	d8800515 	stw	r2,20(sp)
   1a3d4:	d9c01c04 	addi	r7,sp,112
   1a3d8:	800d883a 	mov	r6,r16
   1a3dc:	d80b883a 	mov	r5,sp
   1a3e0:	00bfffc4 	movi	r2,-1
   1a3e4:	d8c00815 	stw	r3,32(sp)
   1a3e8:	d8000c15 	stw	zero,48(sp)
   1a3ec:	d8001115 	stw	zero,68(sp)
   1a3f0:	d880038d 	sth	r2,14(sp)
   1a3f4:	001bdb80 	call	1bdb8 <__ssvfiscanf_r>
   1a3f8:	dfc01b17 	ldw	ra,108(sp)
   1a3fc:	dc001a17 	ldw	r16,104(sp)
   1a400:	dec01e04 	addi	sp,sp,120
   1a404:	f800283a 	ret

0001a408 <_siscanf_r>:
   1a408:	deffe204 	addi	sp,sp,-120
   1a40c:	dc001b15 	stw	r16,108(sp)
   1a410:	2021883a 	mov	r16,r4
   1a414:	dfc01c15 	stw	ra,112(sp)
   1a418:	d9800015 	stw	r6,0(sp)
   1a41c:	d9c01d15 	stw	r7,116(sp)
   1a420:	00808104 	movi	r2,516
   1a424:	2809883a 	mov	r4,r5
   1a428:	d9400115 	stw	r5,4(sp)
   1a42c:	d9400515 	stw	r5,20(sp)
   1a430:	d880040d 	sth	r2,16(sp)
   1a434:	00112e40 	call	112e4 <strlen>
   1a438:	d9800017 	ldw	r6,0(sp)
   1a43c:	00c000b4 	movhi	r3,2
   1a440:	18e93504 	addi	r3,r3,-23340
   1a444:	d8800215 	stw	r2,8(sp)
   1a448:	d8800615 	stw	r2,24(sp)
   1a44c:	d9c01d04 	addi	r7,sp,116
   1a450:	d9400104 	addi	r5,sp,4
   1a454:	8009883a 	mov	r4,r16
   1a458:	00bfffc4 	movi	r2,-1
   1a45c:	d8c00915 	stw	r3,36(sp)
   1a460:	d8000d15 	stw	zero,52(sp)
   1a464:	d8001215 	stw	zero,72(sp)
   1a468:	d880048d 	sth	r2,18(sp)
   1a46c:	001bdb80 	call	1bdb8 <__ssvfiscanf_r>
   1a470:	dfc01c17 	ldw	ra,112(sp)
   1a474:	dc001b17 	ldw	r16,108(sp)
   1a478:	dec01e04 	addi	sp,sp,120
   1a47c:	f800283a 	ret

0001a480 <__sread>:
   1a480:	defffe04 	addi	sp,sp,-8
   1a484:	dc000015 	stw	r16,0(sp)
   1a488:	2821883a 	mov	r16,r5
   1a48c:	2940038f 	ldh	r5,14(r5)
   1a490:	dfc00115 	stw	ra,4(sp)
   1a494:	001eb480 	call	1eb48 <_read_r>
   1a498:	10000716 	blt	r2,zero,1a4b8 <__sread+0x38>
   1a49c:	80c01417 	ldw	r3,80(r16)
   1a4a0:	1887883a 	add	r3,r3,r2
   1a4a4:	80c01415 	stw	r3,80(r16)
   1a4a8:	dfc00117 	ldw	ra,4(sp)
   1a4ac:	dc000017 	ldw	r16,0(sp)
   1a4b0:	dec00204 	addi	sp,sp,8
   1a4b4:	f800283a 	ret
   1a4b8:	80c0030b 	ldhu	r3,12(r16)
   1a4bc:	18fbffcc 	andi	r3,r3,61439
   1a4c0:	80c0030d 	sth	r3,12(r16)
   1a4c4:	dfc00117 	ldw	ra,4(sp)
   1a4c8:	dc000017 	ldw	r16,0(sp)
   1a4cc:	dec00204 	addi	sp,sp,8
   1a4d0:	f800283a 	ret

0001a4d4 <__seofread>:
   1a4d4:	0005883a 	mov	r2,zero
   1a4d8:	f800283a 	ret

0001a4dc <__swrite>:
   1a4dc:	2880030b 	ldhu	r2,12(r5)
   1a4e0:	defffb04 	addi	sp,sp,-20
   1a4e4:	dcc00315 	stw	r19,12(sp)
   1a4e8:	dc800215 	stw	r18,8(sp)
   1a4ec:	dc400115 	stw	r17,4(sp)
   1a4f0:	dc000015 	stw	r16,0(sp)
   1a4f4:	dfc00415 	stw	ra,16(sp)
   1a4f8:	10c0400c 	andi	r3,r2,256
   1a4fc:	2821883a 	mov	r16,r5
   1a500:	2023883a 	mov	r17,r4
   1a504:	3025883a 	mov	r18,r6
   1a508:	3827883a 	mov	r19,r7
   1a50c:	2940038f 	ldh	r5,14(r5)
   1a510:	18000526 	beq	r3,zero,1a528 <__swrite+0x4c>
   1a514:	01c00084 	movi	r7,2
   1a518:	000d883a 	mov	r6,zero
   1a51c:	001e97c0 	call	1e97c <_lseek_r>
   1a520:	8080030b 	ldhu	r2,12(r16)
   1a524:	8140038f 	ldh	r5,14(r16)
   1a528:	10bbffcc 	andi	r2,r2,61439
   1a52c:	980f883a 	mov	r7,r19
   1a530:	900d883a 	mov	r6,r18
   1a534:	8809883a 	mov	r4,r17
   1a538:	8080030d 	sth	r2,12(r16)
   1a53c:	dfc00417 	ldw	ra,16(sp)
   1a540:	dcc00317 	ldw	r19,12(sp)
   1a544:	dc800217 	ldw	r18,8(sp)
   1a548:	dc400117 	ldw	r17,4(sp)
   1a54c:	dc000017 	ldw	r16,0(sp)
   1a550:	dec00504 	addi	sp,sp,20
   1a554:	001e4c41 	jmpi	1e4c4 <_write_r>

0001a558 <__sseek>:
   1a558:	defffe04 	addi	sp,sp,-8
   1a55c:	dc000015 	stw	r16,0(sp)
   1a560:	2821883a 	mov	r16,r5
   1a564:	2940038f 	ldh	r5,14(r5)
   1a568:	dfc00115 	stw	ra,4(sp)
   1a56c:	001e97c0 	call	1e97c <_lseek_r>
   1a570:	10ffffd8 	cmpnei	r3,r2,-1
   1a574:	18000826 	beq	r3,zero,1a598 <__sseek+0x40>
   1a578:	80c0030b 	ldhu	r3,12(r16)
   1a57c:	80801415 	stw	r2,80(r16)
   1a580:	18c40014 	ori	r3,r3,4096
   1a584:	80c0030d 	sth	r3,12(r16)
   1a588:	dfc00117 	ldw	ra,4(sp)
   1a58c:	dc000017 	ldw	r16,0(sp)
   1a590:	dec00204 	addi	sp,sp,8
   1a594:	f800283a 	ret
   1a598:	80c0030b 	ldhu	r3,12(r16)
   1a59c:	18fbffcc 	andi	r3,r3,61439
   1a5a0:	80c0030d 	sth	r3,12(r16)
   1a5a4:	dfc00117 	ldw	ra,4(sp)
   1a5a8:	dc000017 	ldw	r16,0(sp)
   1a5ac:	dec00204 	addi	sp,sp,8
   1a5b0:	f800283a 	ret

0001a5b4 <__sclose>:
   1a5b4:	2940038f 	ldh	r5,14(r5)
   1a5b8:	001e5281 	jmpi	1e528 <_close_r>

0001a5bc <strncmp>:
   1a5bc:	30002226 	beq	r6,zero,1a648 <strncmp+0x8c>
   1a5c0:	2144b03a 	or	r2,r4,r5
   1a5c4:	108000cc 	andi	r2,r2,3
   1a5c8:	1000251e 	bne	r2,zero,1a660 <strncmp+0xa4>
   1a5cc:	30800130 	cmpltui	r2,r6,4
   1a5d0:	1000231e 	bne	r2,zero,1a660 <strncmp+0xa4>
   1a5d4:	20800017 	ldw	r2,0(r4)
   1a5d8:	28c00017 	ldw	r3,0(r5)
   1a5dc:	10c0201e 	bne	r2,r3,1a660 <strncmp+0xa4>
   1a5e0:	31bfff04 	addi	r6,r6,-4
   1a5e4:	30001826 	beq	r6,zero,1a648 <strncmp+0x8c>
   1a5e8:	02bfbff4 	movhi	r10,65279
   1a5ec:	52bfbfc4 	addi	r10,r10,-257
   1a5f0:	1287883a 	add	r3,r2,r10
   1a5f4:	02602074 	movhi	r9,32897
   1a5f8:	0084303a 	nor	r2,zero,r2
   1a5fc:	1884703a 	and	r2,r3,r2
   1a600:	4a602004 	addi	r9,r9,-32640
   1a604:	1244703a 	and	r2,r2,r9
   1a608:	10000226 	beq	r2,zero,1a614 <strncmp+0x58>
   1a60c:	00000e06 	br	1a648 <strncmp+0x8c>
   1a610:	10000d1e 	bne	r2,zero,1a648 <strncmp+0x8c>
   1a614:	30800130 	cmpltui	r2,r6,4
   1a618:	21000104 	addi	r4,r4,4
   1a61c:	29400104 	addi	r5,r5,4
   1a620:	10000f1e 	bne	r2,zero,1a660 <strncmp+0xa4>
   1a624:	20c00017 	ldw	r3,0(r4)
   1a628:	29c00017 	ldw	r7,0(r5)
   1a62c:	1a85883a 	add	r2,r3,r10
   1a630:	00d0303a 	nor	r8,zero,r3
   1a634:	1204703a 	and	r2,r2,r8
   1a638:	1244703a 	and	r2,r2,r9
   1a63c:	19c0081e 	bne	r3,r7,1a660 <strncmp+0xa4>
   1a640:	31bfff04 	addi	r6,r6,-4
   1a644:	303ff21e 	bne	r6,zero,1a610 <__alt_mem_mcu_subsystem_ram_0+0x77ffa610>
   1a648:	0005883a 	mov	r2,zero
   1a64c:	f800283a 	ret
   1a650:	303ffd26 	beq	r6,zero,1a648 <__alt_mem_mcu_subsystem_ram_0+0x77ffa648>
   1a654:	103ffc26 	beq	r2,zero,1a648 <__alt_mem_mcu_subsystem_ram_0+0x77ffa648>
   1a658:	21000044 	addi	r4,r4,1
   1a65c:	29400044 	addi	r5,r5,1
   1a660:	20800007 	ldb	r2,0(r4)
   1a664:	28c00007 	ldb	r3,0(r5)
   1a668:	31bfffc4 	addi	r6,r6,-1
   1a66c:	10fff826 	beq	r2,r3,1a650 <__alt_mem_mcu_subsystem_ram_0+0x77ffa650>
   1a670:	20800003 	ldbu	r2,0(r4)
   1a674:	28c00003 	ldbu	r3,0(r5)
   1a678:	10c5c83a 	sub	r2,r2,r3
   1a67c:	f800283a 	ret

0001a680 <_strtoul_l.isra.0>:
   1a680:	defff704 	addi	sp,sp,-36
   1a684:	ddc00715 	stw	r23,28(sp)
   1a688:	dd800615 	stw	r22,24(sp)
   1a68c:	dd400515 	stw	r21,20(sp)
   1a690:	dd000415 	stw	r20,16(sp)
   1a694:	dcc00315 	stw	r19,12(sp)
   1a698:	dc800215 	stw	r18,8(sp)
   1a69c:	dfc00815 	stw	ra,32(sp)
   1a6a0:	dc400115 	stw	r17,4(sp)
   1a6a4:	dc000015 	stw	r16,0(sp)
   1a6a8:	2825883a 	mov	r18,r5
   1a6ac:	2029883a 	mov	r20,r4
   1a6b0:	3027883a 	mov	r19,r6
   1a6b4:	382b883a 	mov	r21,r7
   1a6b8:	dd800917 	ldw	r22,36(sp)
   1a6bc:	282f883a 	mov	r23,r5
   1a6c0:	00000106 	br	1a6c8 <_strtoul_l.isra.0+0x48>
   1a6c4:	882f883a 	mov	r23,r17
   1a6c8:	bc400044 	addi	r17,r23,1
   1a6cc:	8c3fffc3 	ldbu	r16,-1(r17)
   1a6d0:	b009883a 	mov	r4,r22
   1a6d4:	000fd980 	call	fd98 <__locale_ctype_ptr_l>
   1a6d8:	84003fcc 	andi	r16,r16,255
   1a6dc:	1405883a 	add	r2,r2,r16
   1a6e0:	10800043 	ldbu	r2,1(r2)
   1a6e4:	1080020c 	andi	r2,r2,8
   1a6e8:	103ff61e 	bne	r2,zero,1a6c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa6c4>
   1a6ec:	80800b58 	cmpnei	r2,r16,45
   1a6f0:	10004d26 	beq	r2,zero,1a828 <_strtoul_l.isra.0+0x1a8>
   1a6f4:	80800ae0 	cmpeqi	r2,r16,43
   1a6f8:	1000281e 	bne	r2,zero,1a79c <_strtoul_l.isra.0+0x11c>
   1a6fc:	002f883a 	mov	r23,zero
   1a700:	a8000c26 	beq	r21,zero,1a734 <_strtoul_l.isra.0+0xb4>
   1a704:	a8800420 	cmpeqi	r2,r21,16
   1a708:	10004b1e 	bne	r2,zero,1a838 <_strtoul_l.isra.0+0x1b8>
   1a70c:	013fffc4 	movi	r4,-1
   1a710:	a80b883a 	mov	r5,r21
   1a714:	000d6d80 	call	d6d8 <__udivsi3>
   1a718:	a80b883a 	mov	r5,r21
   1a71c:	013fffc4 	movi	r4,-1
   1a720:	102d883a 	mov	r22,r2
   1a724:	000d73c0 	call	d73c <__umodsi3>
   1a728:	100f883a 	mov	r7,r2
   1a72c:	a80d883a 	mov	r6,r21
   1a730:	00000706 	br	1a750 <_strtoul_l.isra.0+0xd0>
   1a734:	80800c20 	cmpeqi	r2,r16,48
   1a738:	1000461e 	bne	r2,zero,1a854 <_strtoul_l.isra.0+0x1d4>
   1a73c:	058666b4 	movhi	r22,6554
   1a740:	01c00144 	movi	r7,5
   1a744:	b5a66644 	addi	r22,r22,-26215
   1a748:	01800284 	movi	r6,10
   1a74c:	05400284 	movi	r21,10
   1a750:	0009883a 	mov	r4,zero
   1a754:	0005883a 	mov	r2,zero
   1a758:	80fff404 	addi	r3,r16,-48
   1a75c:	194002a8 	cmpgeui	r5,r3,10
   1a760:	28000426 	beq	r5,zero,1a774 <_strtoul_l.isra.0+0xf4>
   1a764:	80ffefc4 	addi	r3,r16,-65
   1a768:	18c006a8 	cmpgeui	r3,r3,26
   1a76c:	1800121e 	bne	r3,zero,1a7b8 <_strtoul_l.isra.0+0x138>
   1a770:	80fff244 	addi	r3,r16,-55
   1a774:	1d40150e 	bge	r3,r21,1a7cc <_strtoul_l.isra.0+0x14c>
   1a778:	20000d16 	blt	r4,zero,1a7b0 <_strtoul_l.isra.0+0x130>
   1a77c:	b0800c36 	bltu	r22,r2,1a7b0 <_strtoul_l.isra.0+0x130>
   1a780:	15800a26 	beq	r2,r22,1a7ac <_strtoul_l.isra.0+0x12c>
   1a784:	1185383a 	mul	r2,r2,r6
   1a788:	01000044 	movi	r4,1
   1a78c:	1885883a 	add	r2,r3,r2
   1a790:	8c400044 	addi	r17,r17,1
   1a794:	8c3fffc3 	ldbu	r16,-1(r17)
   1a798:	003fef06 	br	1a758 <__alt_mem_mcu_subsystem_ram_0+0x77ffa758>
   1a79c:	bc000043 	ldbu	r16,1(r23)
   1a7a0:	bc400084 	addi	r17,r23,2
   1a7a4:	002f883a 	mov	r23,zero
   1a7a8:	003fd506 	br	1a700 <__alt_mem_mcu_subsystem_ram_0+0x77ffa700>
   1a7ac:	38fff50e 	bge	r7,r3,1a784 <__alt_mem_mcu_subsystem_ram_0+0x77ffa784>
   1a7b0:	013fffc4 	movi	r4,-1
   1a7b4:	003ff606 	br	1a790 <__alt_mem_mcu_subsystem_ram_0+0x77ffa790>
   1a7b8:	80ffe7c4 	addi	r3,r16,-97
   1a7bc:	18c006a8 	cmpgeui	r3,r3,26
   1a7c0:	1800021e 	bne	r3,zero,1a7cc <_strtoul_l.isra.0+0x14c>
   1a7c4:	80ffea44 	addi	r3,r16,-87
   1a7c8:	1d7feb16 	blt	r3,r21,1a778 <__alt_mem_mcu_subsystem_ram_0+0x77ffa778>
   1a7cc:	20001016 	blt	r4,zero,1a810 <_strtoul_l.isra.0+0x190>
   1a7d0:	b8000126 	beq	r23,zero,1a7d8 <_strtoul_l.isra.0+0x158>
   1a7d4:	0085c83a 	sub	r2,zero,r2
   1a7d8:	98000226 	beq	r19,zero,1a7e4 <_strtoul_l.isra.0+0x164>
   1a7dc:	2000101e 	bne	r4,zero,1a820 <_strtoul_l.isra.0+0x1a0>
   1a7e0:	9c800015 	stw	r18,0(r19)
   1a7e4:	dfc00817 	ldw	ra,32(sp)
   1a7e8:	ddc00717 	ldw	r23,28(sp)
   1a7ec:	dd800617 	ldw	r22,24(sp)
   1a7f0:	dd400517 	ldw	r21,20(sp)
   1a7f4:	dd000417 	ldw	r20,16(sp)
   1a7f8:	dcc00317 	ldw	r19,12(sp)
   1a7fc:	dc800217 	ldw	r18,8(sp)
   1a800:	dc400117 	ldw	r17,4(sp)
   1a804:	dc000017 	ldw	r16,0(sp)
   1a808:	dec00904 	addi	sp,sp,36
   1a80c:	f800283a 	ret
   1a810:	00800884 	movi	r2,34
   1a814:	a0800015 	stw	r2,0(r20)
   1a818:	00bfffc4 	movi	r2,-1
   1a81c:	983ff126 	beq	r19,zero,1a7e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffa7e4>
   1a820:	8cbfffc4 	addi	r18,r17,-1
   1a824:	003fee06 	br	1a7e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffa7e0>
   1a828:	bc400084 	addi	r17,r23,2
   1a82c:	bc000043 	ldbu	r16,1(r23)
   1a830:	05c00044 	movi	r23,1
   1a834:	003fb206 	br	1a700 <__alt_mem_mcu_subsystem_ram_0+0x77ffa700>
   1a838:	80800c18 	cmpnei	r2,r16,48
   1a83c:	10000f26 	beq	r2,zero,1a87c <_strtoul_l.isra.0+0x1fc>
   1a840:	05840034 	movhi	r22,4096
   1a844:	01c003c4 	movi	r7,15
   1a848:	b5bfffc4 	addi	r22,r22,-1
   1a84c:	01800404 	movi	r6,16
   1a850:	003fbf06 	br	1a750 <__alt_mem_mcu_subsystem_ram_0+0x77ffa750>
   1a854:	88800003 	ldbu	r2,0(r17)
   1a858:	108037cc 	andi	r2,r2,223
   1a85c:	10801618 	cmpnei	r2,r2,88
   1a860:	10000a26 	beq	r2,zero,1a88c <_strtoul_l.isra.0+0x20c>
   1a864:	05880034 	movhi	r22,8192
   1a868:	01c001c4 	movi	r7,7
   1a86c:	b5bfffc4 	addi	r22,r22,-1
   1a870:	01800204 	movi	r6,8
   1a874:	05400204 	movi	r21,8
   1a878:	003fb506 	br	1a750 <__alt_mem_mcu_subsystem_ram_0+0x77ffa750>
   1a87c:	88800003 	ldbu	r2,0(r17)
   1a880:	108037cc 	andi	r2,r2,223
   1a884:	10801620 	cmpeqi	r2,r2,88
   1a888:	10000826 	beq	r2,zero,1a8ac <_strtoul_l.isra.0+0x22c>
   1a88c:	05840034 	movhi	r22,4096
   1a890:	8c000043 	ldbu	r16,1(r17)
   1a894:	01c003c4 	movi	r7,15
   1a898:	8c400084 	addi	r17,r17,2
   1a89c:	b5bfffc4 	addi	r22,r22,-1
   1a8a0:	01800404 	movi	r6,16
   1a8a4:	05400404 	movi	r21,16
   1a8a8:	003fa906 	br	1a750 <__alt_mem_mcu_subsystem_ram_0+0x77ffa750>
   1a8ac:	01400404 	movi	r5,16
   1a8b0:	013fffc4 	movi	r4,-1
   1a8b4:	000d6d80 	call	d6d8 <__udivsi3>
   1a8b8:	01400404 	movi	r5,16
   1a8bc:	013fffc4 	movi	r4,-1
   1a8c0:	102d883a 	mov	r22,r2
   1a8c4:	000d73c0 	call	d73c <__umodsi3>
   1a8c8:	100f883a 	mov	r7,r2
   1a8cc:	01800404 	movi	r6,16
   1a8d0:	003f9f06 	br	1a750 <__alt_mem_mcu_subsystem_ram_0+0x77ffa750>

0001a8d4 <_strtoul_r>:
   1a8d4:	008000f4 	movhi	r2,3
   1a8d8:	10a3b117 	ldw	r2,-28988(r2)
   1a8dc:	defffe04 	addi	sp,sp,-8
   1a8e0:	dfc00115 	stw	ra,4(sp)
   1a8e4:	10800d17 	ldw	r2,52(r2)
   1a8e8:	1000021e 	bne	r2,zero,1a8f4 <_strtoul_r+0x20>
   1a8ec:	008000b4 	movhi	r2,2
   1a8f0:	109d7c04 	addi	r2,r2,30192
   1a8f4:	d8800015 	stw	r2,0(sp)
   1a8f8:	001a6800 	call	1a680 <_strtoul_l.isra.0>
   1a8fc:	dfc00117 	ldw	ra,4(sp)
   1a900:	dec00204 	addi	sp,sp,8
   1a904:	f800283a 	ret

0001a908 <strtoul_l>:
   1a908:	defffe04 	addi	sp,sp,-8
   1a90c:	008000f4 	movhi	r2,3
   1a910:	d9c00015 	stw	r7,0(sp)
   1a914:	300f883a 	mov	r7,r6
   1a918:	280d883a 	mov	r6,r5
   1a91c:	200b883a 	mov	r5,r4
   1a920:	1123b117 	ldw	r4,-28988(r2)
   1a924:	dfc00115 	stw	ra,4(sp)
   1a928:	001a6800 	call	1a680 <_strtoul_l.isra.0>
   1a92c:	dfc00117 	ldw	ra,4(sp)
   1a930:	dec00204 	addi	sp,sp,8
   1a934:	f800283a 	ret

0001a938 <strtoul>:
   1a938:	008000f4 	movhi	r2,3
   1a93c:	10e3b117 	ldw	r3,-28988(r2)
   1a940:	defffe04 	addi	sp,sp,-8
   1a944:	dfc00115 	stw	ra,4(sp)
   1a948:	18800d17 	ldw	r2,52(r3)
   1a94c:	1000021e 	bne	r2,zero,1a958 <strtoul+0x20>
   1a950:	008000b4 	movhi	r2,2
   1a954:	109d7c04 	addi	r2,r2,30192
   1a958:	300f883a 	mov	r7,r6
   1a95c:	d8800015 	stw	r2,0(sp)
   1a960:	280d883a 	mov	r6,r5
   1a964:	200b883a 	mov	r5,r4
   1a968:	1809883a 	mov	r4,r3
   1a96c:	001a6800 	call	1a680 <_strtoul_l.isra.0>
   1a970:	dfc00117 	ldw	ra,4(sp)
   1a974:	dec00204 	addi	sp,sp,8
   1a978:	f800283a 	ret

0001a97c <__ssprint_r>:
   1a97c:	30800217 	ldw	r2,8(r6)
   1a980:	defff604 	addi	sp,sp,-40
   1a984:	dcc00315 	stw	r19,12(sp)
   1a988:	dfc00915 	stw	ra,36(sp)
   1a98c:	df000815 	stw	fp,32(sp)
   1a990:	ddc00715 	stw	r23,28(sp)
   1a994:	dd800615 	stw	r22,24(sp)
   1a998:	dd400515 	stw	r21,20(sp)
   1a99c:	dd000415 	stw	r20,16(sp)
   1a9a0:	dc800215 	stw	r18,8(sp)
   1a9a4:	dc400115 	stw	r17,4(sp)
   1a9a8:	dc000015 	stw	r16,0(sp)
   1a9ac:	3027883a 	mov	r19,r6
   1a9b0:	10005426 	beq	r2,zero,1ab04 <__ssprint_r+0x188>
   1a9b4:	2029883a 	mov	r20,r4
   1a9b8:	2821883a 	mov	r16,r5
   1a9bc:	35800017 	ldw	r22,0(r6)
   1a9c0:	29000017 	ldw	r4,0(r5)
   1a9c4:	2c400217 	ldw	r17,8(r5)
   1a9c8:	00003506 	br	1aaa0 <__ssprint_r+0x124>
   1a9cc:	8080030b 	ldhu	r2,12(r16)
   1a9d0:	10c1200c 	andi	r3,r2,1152
   1a9d4:	18002526 	beq	r3,zero,1aa6c <__ssprint_r+0xf0>
   1a9d8:	81800517 	ldw	r6,20(r16)
   1a9dc:	81400417 	ldw	r5,16(r16)
   1a9e0:	90c00044 	addi	r3,r18,1
   1a9e4:	318000e4 	muli	r6,r6,3
   1a9e8:	216bc83a 	sub	r21,r4,r5
   1a9ec:	1d47883a 	add	r3,r3,r21
   1a9f0:	3022d7fa 	srli	r17,r6,31
   1a9f4:	89a3883a 	add	r17,r17,r6
   1a9f8:	8823d07a 	srai	r17,r17,1
   1a9fc:	880d883a 	mov	r6,r17
   1aa00:	88c0022e 	bgeu	r17,r3,1aa0c <__ssprint_r+0x90>
   1aa04:	1823883a 	mov	r17,r3
   1aa08:	180d883a 	mov	r6,r3
   1aa0c:	1081000c 	andi	r2,r2,1024
   1aa10:	10002c26 	beq	r2,zero,1aac4 <__ssprint_r+0x148>
   1aa14:	300b883a 	mov	r5,r6
   1aa18:	a009883a 	mov	r4,r20
   1aa1c:	000fdf40 	call	fdf4 <_malloc_r>
   1aa20:	102f883a 	mov	r23,r2
   1aa24:	10002e26 	beq	r2,zero,1aae0 <__ssprint_r+0x164>
   1aa28:	81400417 	ldw	r5,16(r16)
   1aa2c:	a80d883a 	mov	r6,r21
   1aa30:	1009883a 	mov	r4,r2
   1aa34:	00106380 	call	10638 <memcpy>
   1aa38:	8080030b 	ldhu	r2,12(r16)
   1aa3c:	00fedfc4 	movi	r3,-1153
   1aa40:	10c4703a 	and	r2,r2,r3
   1aa44:	10802014 	ori	r2,r2,128
   1aa48:	8080030d 	sth	r2,12(r16)
   1aa4c:	bd49883a 	add	r4,r23,r21
   1aa50:	8d45c83a 	sub	r2,r17,r21
   1aa54:	85c00415 	stw	r23,16(r16)
   1aa58:	84400515 	stw	r17,20(r16)
   1aa5c:	81000015 	stw	r4,0(r16)
   1aa60:	9023883a 	mov	r17,r18
   1aa64:	80800215 	stw	r2,8(r16)
   1aa68:	902f883a 	mov	r23,r18
   1aa6c:	b80d883a 	mov	r6,r23
   1aa70:	e00b883a 	mov	r5,fp
   1aa74:	0018a100 	call	18a10 <memmove>
   1aa78:	80c00217 	ldw	r3,8(r16)
   1aa7c:	81000017 	ldw	r4,0(r16)
   1aa80:	98800217 	ldw	r2,8(r19)
   1aa84:	1c63c83a 	sub	r17,r3,r17
   1aa88:	25c9883a 	add	r4,r4,r23
   1aa8c:	84400215 	stw	r17,8(r16)
   1aa90:	81000015 	stw	r4,0(r16)
   1aa94:	14a5c83a 	sub	r18,r2,r18
   1aa98:	9c800215 	stw	r18,8(r19)
   1aa9c:	90001926 	beq	r18,zero,1ab04 <__ssprint_r+0x188>
   1aaa0:	b4800117 	ldw	r18,4(r22)
   1aaa4:	b7000017 	ldw	fp,0(r22)
   1aaa8:	882f883a 	mov	r23,r17
   1aaac:	b5800204 	addi	r22,r22,8
   1aab0:	903ffb26 	beq	r18,zero,1aaa0 <__alt_mem_mcu_subsystem_ram_0+0x77ffaaa0>
   1aab4:	947fc52e 	bgeu	r18,r17,1a9cc <__alt_mem_mcu_subsystem_ram_0+0x77ffa9cc>
   1aab8:	9023883a 	mov	r17,r18
   1aabc:	902f883a 	mov	r23,r18
   1aac0:	003fea06 	br	1aa6c <__alt_mem_mcu_subsystem_ram_0+0x77ffaa6c>
   1aac4:	a009883a 	mov	r4,r20
   1aac8:	0019c340 	call	19c34 <_realloc_r>
   1aacc:	102f883a 	mov	r23,r2
   1aad0:	103fde1e 	bne	r2,zero,1aa4c <__alt_mem_mcu_subsystem_ram_0+0x77ffaa4c>
   1aad4:	81400417 	ldw	r5,16(r16)
   1aad8:	a009883a 	mov	r4,r20
   1aadc:	0017d000 	call	17d00 <_free_r>
   1aae0:	80c0030b 	ldhu	r3,12(r16)
   1aae4:	00800304 	movi	r2,12
   1aae8:	a0800015 	stw	r2,0(r20)
   1aaec:	18c01014 	ori	r3,r3,64
   1aaf0:	80c0030d 	sth	r3,12(r16)
   1aaf4:	00bfffc4 	movi	r2,-1
   1aaf8:	98000215 	stw	zero,8(r19)
   1aafc:	98000115 	stw	zero,4(r19)
   1ab00:	00000206 	br	1ab0c <__ssprint_r+0x190>
   1ab04:	98000115 	stw	zero,4(r19)
   1ab08:	0005883a 	mov	r2,zero
   1ab0c:	dfc00917 	ldw	ra,36(sp)
   1ab10:	df000817 	ldw	fp,32(sp)
   1ab14:	ddc00717 	ldw	r23,28(sp)
   1ab18:	dd800617 	ldw	r22,24(sp)
   1ab1c:	dd400517 	ldw	r21,20(sp)
   1ab20:	dd000417 	ldw	r20,16(sp)
   1ab24:	dcc00317 	ldw	r19,12(sp)
   1ab28:	dc800217 	ldw	r18,8(sp)
   1ab2c:	dc400117 	ldw	r17,4(sp)
   1ab30:	dc000017 	ldw	r16,0(sp)
   1ab34:	dec00a04 	addi	sp,sp,40
   1ab38:	f800283a 	ret

0001ab3c <___svfiprintf_internal_r>:
   1ab3c:	2880030b 	ldhu	r2,12(r5)
   1ab40:	deffcf04 	addi	sp,sp,-196
   1ab44:	df002f15 	stw	fp,188(sp)
   1ab48:	dd802d15 	stw	r22,180(sp)
   1ab4c:	dd002b15 	stw	r20,172(sp)
   1ab50:	dfc03015 	stw	ra,192(sp)
   1ab54:	ddc02e15 	stw	r23,184(sp)
   1ab58:	dd402c15 	stw	r21,176(sp)
   1ab5c:	dcc02a15 	stw	r19,168(sp)
   1ab60:	dc802915 	stw	r18,164(sp)
   1ab64:	dc402815 	stw	r17,160(sp)
   1ab68:	dc002715 	stw	r16,156(sp)
   1ab6c:	1080200c 	andi	r2,r2,128
   1ab70:	d9c00415 	stw	r7,16(sp)
   1ab74:	2829883a 	mov	r20,r5
   1ab78:	202d883a 	mov	r22,r4
   1ab7c:	3039883a 	mov	fp,r6
   1ab80:	10000226 	beq	r2,zero,1ab8c <___svfiprintf_internal_r+0x50>
   1ab84:	28800417 	ldw	r2,16(r5)
   1ab88:	10037a26 	beq	r2,zero,1b974 <___svfiprintf_internal_r+0xe38>
   1ab8c:	dc801704 	addi	r18,sp,92
   1ab90:	dc800a15 	stw	r18,40(sp)
   1ab94:	d8000c15 	stw	zero,48(sp)
   1ab98:	d8000b15 	stw	zero,44(sp)
   1ab9c:	9011883a 	mov	r8,r18
   1aba0:	d8000515 	stw	zero,20(sp)
   1aba4:	d8000015 	stw	zero,0(sp)
   1aba8:	e0800007 	ldb	r2,0(fp)
   1abac:	1000d126 	beq	r2,zero,1aef4 <___svfiprintf_internal_r+0x3b8>
   1abb0:	10800960 	cmpeqi	r2,r2,37
   1abb4:	e023883a 	mov	r17,fp
   1abb8:	10000226 	beq	r2,zero,1abc4 <___svfiprintf_internal_r+0x88>
   1abbc:	00001706 	br	1ac1c <___svfiprintf_internal_r+0xe0>
   1abc0:	18000426 	beq	r3,zero,1abd4 <___svfiprintf_internal_r+0x98>
   1abc4:	8c400044 	addi	r17,r17,1
   1abc8:	88800007 	ldb	r2,0(r17)
   1abcc:	10c00958 	cmpnei	r3,r2,37
   1abd0:	103ffb1e 	bne	r2,zero,1abc0 <__alt_mem_mcu_subsystem_ram_0+0x77ffabc0>
   1abd4:	8f21c83a 	sub	r16,r17,fp
   1abd8:	80000e26 	beq	r16,zero,1ac14 <___svfiprintf_internal_r+0xd8>
   1abdc:	d8c00c17 	ldw	r3,48(sp)
   1abe0:	d8800b17 	ldw	r2,44(sp)
   1abe4:	47000015 	stw	fp,0(r8)
   1abe8:	1c07883a 	add	r3,r3,r16
   1abec:	10800044 	addi	r2,r2,1
   1abf0:	d8800b15 	stw	r2,44(sp)
   1abf4:	44000115 	stw	r16,4(r8)
   1abf8:	d8c00c15 	stw	r3,48(sp)
   1abfc:	10800208 	cmpgei	r2,r2,8
   1ac00:	1000b51e 	bne	r2,zero,1aed8 <___svfiprintf_internal_r+0x39c>
   1ac04:	42000204 	addi	r8,r8,8
   1ac08:	d8800017 	ldw	r2,0(sp)
   1ac0c:	1405883a 	add	r2,r2,r16
   1ac10:	d8800015 	stw	r2,0(sp)
   1ac14:	88800007 	ldb	r2,0(r17)
   1ac18:	1000b626 	beq	r2,zero,1aef4 <___svfiprintf_internal_r+0x3b8>
   1ac1c:	88800047 	ldb	r2,1(r17)
   1ac20:	8f000044 	addi	fp,r17,1
   1ac24:	d8000945 	stb	zero,37(sp)
   1ac28:	000b883a 	mov	r5,zero
   1ac2c:	000d883a 	mov	r6,zero
   1ac30:	027fffc4 	movi	r9,-1
   1ac34:	0021883a 	mov	r16,zero
   1ac38:	000f883a 	mov	r7,zero
   1ac3c:	e7000044 	addi	fp,fp,1
   1ac40:	10fff804 	addi	r3,r2,-32
   1ac44:	19001668 	cmpgeui	r4,r3,89
   1ac48:	2000cc1e 	bne	r4,zero,1af7c <___svfiprintf_internal_r+0x440>
   1ac4c:	180690ba 	slli	r3,r3,2
   1ac50:	010000b4 	movhi	r4,2
   1ac54:	1909883a 	add	r4,r3,r4
   1ac58:	20eb1817 	ldw	r3,-21408(r4)
   1ac5c:	1800683a 	jmp	r3
   1ac60:	0001b04c 	andi	zero,zero,1729
   1ac64:	0001af7c 	xorhi	zero,zero,1725
   1ac68:	0001af7c 	xorhi	zero,zero,1725
   1ac6c:	0001b040 	call	1b04 <ad9523_vco_out_map+0x1fc>
   1ac70:	0001af7c 	xorhi	zero,zero,1725
   1ac74:	0001af7c 	xorhi	zero,zero,1725
   1ac78:	0001af7c 	xorhi	zero,zero,1725
   1ac7c:	0001af7c 	xorhi	zero,zero,1725
   1ac80:	0001af7c 	xorhi	zero,zero,1725
   1ac84:	0001af7c 	xorhi	zero,zero,1725
   1ac88:	0001b018 	cmpnei	zero,zero,1728
   1ac8c:	0001b008 	cmpgei	zero,zero,1728
   1ac90:	0001af7c 	xorhi	zero,zero,1725
   1ac94:	0001aff0 	cmpltui	zero,zero,1727
   1ac98:	0001afac 	andhi	zero,zero,1726
   1ac9c:	0001af7c 	xorhi	zero,zero,1725
   1aca0:	0001afa0 	cmpeqi	zero,zero,1726
   1aca4:	0001af4c 	andi	zero,zero,1725
   1aca8:	0001af4c 	andi	zero,zero,1725
   1acac:	0001af4c 	andi	zero,zero,1725
   1acb0:	0001af4c 	andi	zero,zero,1725
   1acb4:	0001af4c 	andi	zero,zero,1725
   1acb8:	0001af4c 	andi	zero,zero,1725
   1acbc:	0001af4c 	andi	zero,zero,1725
   1acc0:	0001af4c 	andi	zero,zero,1725
   1acc4:	0001af4c 	andi	zero,zero,1725
   1acc8:	0001af7c 	xorhi	zero,zero,1725
   1accc:	0001af7c 	xorhi	zero,zero,1725
   1acd0:	0001af7c 	xorhi	zero,zero,1725
   1acd4:	0001af7c 	xorhi	zero,zero,1725
   1acd8:	0001af7c 	xorhi	zero,zero,1725
   1acdc:	0001af7c 	xorhi	zero,zero,1725
   1ace0:	0001af7c 	xorhi	zero,zero,1725
   1ace4:	0001af7c 	xorhi	zero,zero,1725
   1ace8:	0001af7c 	xorhi	zero,zero,1725
   1acec:	0001af7c 	xorhi	zero,zero,1725
   1acf0:	0001b600 	call	1b60 <ad9523_calibrate+0x8>
   1acf4:	0001af7c 	xorhi	zero,zero,1725
   1acf8:	0001af7c 	xorhi	zero,zero,1725
   1acfc:	0001af7c 	xorhi	zero,zero,1725
   1ad00:	0001af7c 	xorhi	zero,zero,1725
   1ad04:	0001af7c 	xorhi	zero,zero,1725
   1ad08:	0001af7c 	xorhi	zero,zero,1725
   1ad0c:	0001af7c 	xorhi	zero,zero,1725
   1ad10:	0001af7c 	xorhi	zero,zero,1725
   1ad14:	0001af7c 	xorhi	zero,zero,1725
   1ad18:	0001af7c 	xorhi	zero,zero,1725
   1ad1c:	0001ae74 	movhi	zero,1721
   1ad20:	0001af7c 	xorhi	zero,zero,1725
   1ad24:	0001af7c 	xorhi	zero,zero,1725
   1ad28:	0001af7c 	xorhi	zero,zero,1725
   1ad2c:	0001af7c 	xorhi	zero,zero,1725
   1ad30:	0001af7c 	xorhi	zero,zero,1725
   1ad34:	0001adc4 	movi	zero,1719
   1ad38:	0001af7c 	xorhi	zero,zero,1725
   1ad3c:	0001af7c 	xorhi	zero,zero,1725
   1ad40:	0001b5ac 	andhi	zero,zero,1750
   1ad44:	0001af7c 	xorhi	zero,zero,1725
   1ad48:	0001af7c 	xorhi	zero,zero,1725
   1ad4c:	0001af7c 	xorhi	zero,zero,1725
   1ad50:	0001af7c 	xorhi	zero,zero,1725
   1ad54:	0001af7c 	xorhi	zero,zero,1725
   1ad58:	0001af7c 	xorhi	zero,zero,1725
   1ad5c:	0001af7c 	xorhi	zero,zero,1725
   1ad60:	0001af7c 	xorhi	zero,zero,1725
   1ad64:	0001af7c 	xorhi	zero,zero,1725
   1ad68:	0001af7c 	xorhi	zero,zero,1725
   1ad6c:	0001b0f8 	rdprs	zero,zero,1731
   1ad70:	0001b0bc 	xorhi	zero,zero,1730
   1ad74:	0001af7c 	xorhi	zero,zero,1725
   1ad78:	0001af7c 	xorhi	zero,zero,1725
   1ad7c:	0001af7c 	xorhi	zero,zero,1725
   1ad80:	0001b5f4 	movhi	zero,1751
   1ad84:	0001b0bc 	xorhi	zero,zero,1730
   1ad88:	0001af7c 	xorhi	zero,zero,1725
   1ad8c:	0001af7c 	xorhi	zero,zero,1725
   1ad90:	0001b0a8 	cmpgeui	zero,zero,1730
   1ad94:	0001af7c 	xorhi	zero,zero,1725
   1ad98:	0001b4f8 	rdprs	zero,zero,1747
   1ad9c:	0001ae78 	rdprs	zero,zero,1721
   1ada0:	0001b4bc 	xorhi	zero,zero,1746
   1ada4:	0001b4b0 	cmpltui	zero,zero,1746
   1ada8:	0001af7c 	xorhi	zero,zero,1725
   1adac:	0001b450 	cmplti	zero,zero,1745
   1adb0:	0001af7c 	xorhi	zero,zero,1725
   1adb4:	0001adc8 	cmpgei	zero,zero,1719
   1adb8:	0001af7c 	xorhi	zero,zero,1725
   1adbc:	0001af7c 	xorhi	zero,zero,1725
   1adc0:	0001b534 	movhi	zero,1748
   1adc4:	39c00414 	ori	r7,r7,16
   1adc8:	3880080c 	andi	r2,r7,32
   1adcc:	1001eb26 	beq	r2,zero,1b57c <___svfiprintf_internal_r+0xa40>
   1add0:	d8c00417 	ldw	r3,16(sp)
   1add4:	d8000945 	stb	zero,37(sp)
   1add8:	00800044 	movi	r2,1
   1addc:	1cc00017 	ldw	r19,0(r3)
   1ade0:	1d400117 	ldw	r21,4(r3)
   1ade4:	18c00204 	addi	r3,r3,8
   1ade8:	d8c00415 	stw	r3,16(sp)
   1adec:	48ffffe0 	cmpeqi	r3,r9,-1
   1adf0:	18002c26 	beq	r3,zero,1aea4 <___svfiprintf_internal_r+0x368>
   1adf4:	3823883a 	mov	r17,r7
   1adf8:	0019883a 	mov	r12,zero
   1adfc:	10c00060 	cmpeqi	r3,r2,1
   1ae00:	18021b1e 	bne	r3,zero,1b670 <___svfiprintf_internal_r+0xb34>
   1ae04:	108000a0 	cmpeqi	r2,r2,2
   1ae08:	1002211e 	bne	r2,zero,1b690 <___svfiprintf_internal_r+0xb54>
   1ae0c:	9007883a 	mov	r3,r18
   1ae10:	00000106 	br	1ae18 <___svfiprintf_internal_r+0x2dc>
   1ae14:	b807883a 	mov	r3,r23
   1ae18:	9808d0fa 	srli	r4,r19,3
   1ae1c:	a80a977a 	slli	r5,r21,29
   1ae20:	a82ad0fa 	srli	r21,r21,3
   1ae24:	9cc001cc 	andi	r19,r19,7
   1ae28:	98800c04 	addi	r2,r19,48
   1ae2c:	2926b03a 	or	r19,r5,r4
   1ae30:	18bfffc5 	stb	r2,-1(r3)
   1ae34:	9d48b03a 	or	r4,r19,r21
   1ae38:	1dffffc4 	addi	r23,r3,-1
   1ae3c:	203ff51e 	bne	r4,zero,1ae14 <__alt_mem_mcu_subsystem_ram_0+0x77ffae14>
   1ae40:	8900004c 	andi	r4,r17,1
   1ae44:	20021f26 	beq	r4,zero,1b6c4 <___svfiprintf_internal_r+0xb88>
   1ae48:	10803fcc 	andi	r2,r2,255
   1ae4c:	1080201c 	xori	r2,r2,128
   1ae50:	10bfe004 	addi	r2,r2,-128
   1ae54:	10800c18 	cmpnei	r2,r2,48
   1ae58:	10021a26 	beq	r2,zero,1b6c4 <___svfiprintf_internal_r+0xb88>
   1ae5c:	18ffff84 	addi	r3,r3,-2
   1ae60:	00800c04 	movi	r2,48
   1ae64:	b8bfffc5 	stb	r2,-1(r23)
   1ae68:	90ebc83a 	sub	r21,r18,r3
   1ae6c:	182f883a 	mov	r23,r3
   1ae70:	00021506 	br	1b6c8 <___svfiprintf_internal_r+0xb8c>
   1ae74:	39c00414 	ori	r7,r7,16
   1ae78:	3880080c 	andi	r2,r7,32
   1ae7c:	10007e26 	beq	r2,zero,1b078 <___svfiprintf_internal_r+0x53c>
   1ae80:	d8c00417 	ldw	r3,16(sp)
   1ae84:	0005883a 	mov	r2,zero
   1ae88:	1cc00017 	ldw	r19,0(r3)
   1ae8c:	1d400117 	ldw	r21,4(r3)
   1ae90:	18c00204 	addi	r3,r3,8
   1ae94:	d8c00415 	stw	r3,16(sp)
   1ae98:	d8000945 	stb	zero,37(sp)
   1ae9c:	48ffffe0 	cmpeqi	r3,r9,-1
   1aea0:	183fd41e 	bne	r3,zero,1adf4 <__alt_mem_mcu_subsystem_ram_0+0x77ffadf4>
   1aea4:	0019883a 	mov	r12,zero
   1aea8:	047fdfc4 	movi	r17,-129
   1aeac:	9d46b03a 	or	r3,r19,r21
   1aeb0:	3c62703a 	and	r17,r7,r17
   1aeb4:	183fd11e 	bne	r3,zero,1adfc <__alt_mem_mcu_subsystem_ram_0+0x77ffadfc>
   1aeb8:	4802df1e 	bne	r9,zero,1ba38 <___svfiprintf_internal_r+0xefc>
   1aebc:	1002781e 	bne	r2,zero,1b8a0 <___svfiprintf_internal_r+0xd64>
   1aec0:	3d40004c 	andi	r21,r7,1
   1aec4:	a8029326 	beq	r21,zero,1b914 <___svfiprintf_internal_r+0xdd8>
   1aec8:	00800c04 	movi	r2,48
   1aecc:	d88016c5 	stb	r2,91(sp)
   1aed0:	ddc016c4 	addi	r23,sp,91
   1aed4:	0001fc06 	br	1b6c8 <___svfiprintf_internal_r+0xb8c>
   1aed8:	d9800a04 	addi	r6,sp,40
   1aedc:	a00b883a 	mov	r5,r20
   1aee0:	b009883a 	mov	r4,r22
   1aee4:	001a97c0 	call	1a97c <__ssprint_r>
   1aee8:	1000081e 	bne	r2,zero,1af0c <___svfiprintf_internal_r+0x3d0>
   1aeec:	9011883a 	mov	r8,r18
   1aef0:	003f4506 	br	1ac08 <__alt_mem_mcu_subsystem_ram_0+0x77ffac08>
   1aef4:	d8800c17 	ldw	r2,48(sp)
   1aef8:	10000426 	beq	r2,zero,1af0c <___svfiprintf_internal_r+0x3d0>
   1aefc:	d9800a04 	addi	r6,sp,40
   1af00:	a00b883a 	mov	r5,r20
   1af04:	b009883a 	mov	r4,r22
   1af08:	001a97c0 	call	1a97c <__ssprint_r>
   1af0c:	a080030b 	ldhu	r2,12(r20)
   1af10:	1080100c 	andi	r2,r2,64
   1af14:	1002f21e 	bne	r2,zero,1bae0 <___svfiprintf_internal_r+0xfa4>
   1af18:	d8800017 	ldw	r2,0(sp)
   1af1c:	dfc03017 	ldw	ra,192(sp)
   1af20:	df002f17 	ldw	fp,188(sp)
   1af24:	ddc02e17 	ldw	r23,184(sp)
   1af28:	dd802d17 	ldw	r22,180(sp)
   1af2c:	dd402c17 	ldw	r21,176(sp)
   1af30:	dd002b17 	ldw	r20,172(sp)
   1af34:	dcc02a17 	ldw	r19,168(sp)
   1af38:	dc802917 	ldw	r18,164(sp)
   1af3c:	dc402817 	ldw	r17,160(sp)
   1af40:	dc002717 	ldw	r16,156(sp)
   1af44:	dec03104 	addi	sp,sp,196
   1af48:	f800283a 	ret
   1af4c:	0021883a 	mov	r16,zero
   1af50:	10fff404 	addi	r3,r2,-48
   1af54:	e7000044 	addi	fp,fp,1
   1af58:	840002a4 	muli	r16,r16,10
   1af5c:	e0bfffc7 	ldb	r2,-1(fp)
   1af60:	1c21883a 	add	r16,r3,r16
   1af64:	10fff404 	addi	r3,r2,-48
   1af68:	190002b0 	cmpltui	r4,r3,10
   1af6c:	203ff91e 	bne	r4,zero,1af54 <__alt_mem_mcu_subsystem_ram_0+0x77ffaf54>
   1af70:	10fff804 	addi	r3,r2,-32
   1af74:	19001668 	cmpgeui	r4,r3,89
   1af78:	203f3426 	beq	r4,zero,1ac4c <__alt_mem_mcu_subsystem_ram_0+0x77ffac4c>
   1af7c:	29403fcc 	andi	r5,r5,255
   1af80:	2802f11e 	bne	r5,zero,1bb48 <___svfiprintf_internal_r+0x100c>
   1af84:	103fdb26 	beq	r2,zero,1aef4 <__alt_mem_mcu_subsystem_ram_0+0x77ffaef4>
   1af88:	d8800d05 	stb	r2,52(sp)
   1af8c:	d8000945 	stb	zero,37(sp)
   1af90:	04c00044 	movi	r19,1
   1af94:	05400044 	movi	r21,1
   1af98:	ddc00d04 	addi	r23,sp,52
   1af9c:	00005f06 	br	1b11c <___svfiprintf_internal_r+0x5e0>
   1afa0:	39c02014 	ori	r7,r7,128
   1afa4:	e0800007 	ldb	r2,0(fp)
   1afa8:	003f2406 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1afac:	e0800007 	ldb	r2,0(fp)
   1afb0:	e1000044 	addi	r4,fp,1
   1afb4:	10c00aa0 	cmpeqi	r3,r2,42
   1afb8:	1802cc1e 	bne	r3,zero,1baec <___svfiprintf_internal_r+0xfb0>
   1afbc:	10fff404 	addi	r3,r2,-48
   1afc0:	1a4002b0 	cmpltui	r9,r3,10
   1afc4:	4802b926 	beq	r9,zero,1baac <___svfiprintf_internal_r+0xf70>
   1afc8:	0013883a 	mov	r9,zero
   1afcc:	21000044 	addi	r4,r4,1
   1afd0:	4a4002a4 	muli	r9,r9,10
   1afd4:	20bfffc7 	ldb	r2,-1(r4)
   1afd8:	48d3883a 	add	r9,r9,r3
   1afdc:	10fff404 	addi	r3,r2,-48
   1afe0:	1a8002b0 	cmpltui	r10,r3,10
   1afe4:	503ff91e 	bne	r10,zero,1afcc <__alt_mem_mcu_subsystem_ram_0+0x77ffafcc>
   1afe8:	2039883a 	mov	fp,r4
   1afec:	003f1406 	br	1ac40 <__alt_mem_mcu_subsystem_ram_0+0x77ffac40>
   1aff0:	e0800003 	ldbu	r2,0(fp)
   1aff4:	10803fcc 	andi	r2,r2,255
   1aff8:	1080201c 	xori	r2,r2,128
   1affc:	39c00114 	ori	r7,r7,4
   1b000:	10bfe004 	addi	r2,r2,-128
   1b004:	003f0d06 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b008:	01400044 	movi	r5,1
   1b00c:	01800ac4 	movi	r6,43
   1b010:	e0800007 	ldb	r2,0(fp)
   1b014:	003f0906 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b018:	d8800417 	ldw	r2,16(sp)
   1b01c:	14000017 	ldw	r16,0(r2)
   1b020:	15c00104 	addi	r23,r2,4
   1b024:	e0800003 	ldbu	r2,0(fp)
   1b028:	80024816 	blt	r16,zero,1b94c <___svfiprintf_internal_r+0xe10>
   1b02c:	ddc00415 	stw	r23,16(sp)
   1b030:	10803fcc 	andi	r2,r2,255
   1b034:	1080201c 	xori	r2,r2,128
   1b038:	10bfe004 	addi	r2,r2,-128
   1b03c:	003eff06 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b040:	39c00054 	ori	r7,r7,1
   1b044:	e0800007 	ldb	r2,0(fp)
   1b048:	003efc06 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b04c:	30c03fcc 	andi	r3,r6,255
   1b050:	18c0201c 	xori	r3,r3,128
   1b054:	18ffe004 	addi	r3,r3,-128
   1b058:	e0800003 	ldbu	r2,0(fp)
   1b05c:	183ff41e 	bne	r3,zero,1b030 <__alt_mem_mcu_subsystem_ram_0+0x77ffb030>
   1b060:	10803fcc 	andi	r2,r2,255
   1b064:	1080201c 	xori	r2,r2,128
   1b068:	01400044 	movi	r5,1
   1b06c:	01800804 	movi	r6,32
   1b070:	10bfe004 	addi	r2,r2,-128
   1b074:	003ef106 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b078:	d8c00417 	ldw	r3,16(sp)
   1b07c:	3880040c 	andi	r2,r7,16
   1b080:	1cc00017 	ldw	r19,0(r3)
   1b084:	18c00104 	addi	r3,r3,4
   1b088:	d8c00415 	stw	r3,16(sp)
   1b08c:	1000031e 	bne	r2,zero,1b09c <___svfiprintf_internal_r+0x560>
   1b090:	3880100c 	andi	r2,r7,64
   1b094:	10000126 	beq	r2,zero,1b09c <___svfiprintf_internal_r+0x560>
   1b098:	9cffffcc 	andi	r19,r19,65535
   1b09c:	002b883a 	mov	r21,zero
   1b0a0:	0005883a 	mov	r2,zero
   1b0a4:	003f7c06 	br	1ae98 <__alt_mem_mcu_subsystem_ram_0+0x77ffae98>
   1b0a8:	e0800007 	ldb	r2,0(fp)
   1b0ac:	10c01b18 	cmpnei	r3,r2,108
   1b0b0:	18022926 	beq	r3,zero,1b958 <___svfiprintf_internal_r+0xe1c>
   1b0b4:	39c00414 	ori	r7,r7,16
   1b0b8:	003ee006 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b0bc:	29403fcc 	andi	r5,r5,255
   1b0c0:	2802981e 	bne	r5,zero,1bb24 <___svfiprintf_internal_r+0xfe8>
   1b0c4:	3880080c 	andi	r2,r7,32
   1b0c8:	10015226 	beq	r2,zero,1b614 <___svfiprintf_internal_r+0xad8>
   1b0cc:	d8800417 	ldw	r2,16(sp)
   1b0d0:	14c00017 	ldw	r19,0(r2)
   1b0d4:	15400117 	ldw	r21,4(r2)
   1b0d8:	10800204 	addi	r2,r2,8
   1b0dc:	d8800415 	stw	r2,16(sp)
   1b0e0:	a8015916 	blt	r21,zero,1b648 <___svfiprintf_internal_r+0xb0c>
   1b0e4:	48bfffd8 	cmpnei	r2,r9,-1
   1b0e8:	db000943 	ldbu	r12,37(sp)
   1b0ec:	10015f26 	beq	r2,zero,1b66c <___svfiprintf_internal_r+0xb30>
   1b0f0:	00800044 	movi	r2,1
   1b0f4:	003f6c06 	br	1aea8 <__alt_mem_mcu_subsystem_ram_0+0x77ffaea8>
   1b0f8:	d8c00417 	ldw	r3,16(sp)
   1b0fc:	d8000945 	stb	zero,37(sp)
   1b100:	04c00044 	movi	r19,1
   1b104:	18800017 	ldw	r2,0(r3)
   1b108:	18c00104 	addi	r3,r3,4
   1b10c:	d8c00415 	stw	r3,16(sp)
   1b110:	d8800d05 	stb	r2,52(sp)
   1b114:	05400044 	movi	r21,1
   1b118:	ddc00d04 	addi	r23,sp,52
   1b11c:	3823883a 	mov	r17,r7
   1b120:	0013883a 	mov	r9,zero
   1b124:	8b40008c 	andi	r13,r17,2
   1b128:	68000126 	beq	r13,zero,1b130 <___svfiprintf_internal_r+0x5f4>
   1b12c:	9cc00084 	addi	r19,r19,2
   1b130:	8b00210c 	andi	r12,r17,132
   1b134:	d8800c17 	ldw	r2,48(sp)
   1b138:	d9000b17 	ldw	r4,44(sp)
   1b13c:	6000341e 	bne	r12,zero,1b210 <___svfiprintf_internal_r+0x6d4>
   1b140:	84c7c83a 	sub	r3,r16,r19
   1b144:	00c0320e 	bge	zero,r3,1b210 <___svfiprintf_internal_r+0x6d4>
   1b148:	01c000b4 	movhi	r7,2
   1b14c:	19400450 	cmplti	r5,r3,17
   1b150:	39dc3204 	addi	r7,r7,28872
   1b154:	03800404 	movi	r14,16
   1b158:	28000526 	beq	r5,zero,1b170 <___svfiprintf_internal_r+0x634>
   1b15c:	00002306 	br	1b1ec <___svfiprintf_internal_r+0x6b0>
   1b160:	18fffc04 	addi	r3,r3,-16
   1b164:	19400448 	cmpgei	r5,r3,17
   1b168:	42000204 	addi	r8,r8,8
   1b16c:	28001f26 	beq	r5,zero,1b1ec <___svfiprintf_internal_r+0x6b0>
   1b170:	21000044 	addi	r4,r4,1
   1b174:	10800404 	addi	r2,r2,16
   1b178:	41c00015 	stw	r7,0(r8)
   1b17c:	43800115 	stw	r14,4(r8)
   1b180:	d8800c15 	stw	r2,48(sp)
   1b184:	d9000b15 	stw	r4,44(sp)
   1b188:	21400208 	cmpgei	r5,r4,8
   1b18c:	283ff426 	beq	r5,zero,1b160 <__alt_mem_mcu_subsystem_ram_0+0x77ffb160>
   1b190:	d9800a04 	addi	r6,sp,40
   1b194:	a00b883a 	mov	r5,r20
   1b198:	b009883a 	mov	r4,r22
   1b19c:	d9c00815 	stw	r7,32(sp)
   1b1a0:	db800715 	stw	r14,28(sp)
   1b1a4:	d8c00615 	stw	r3,24(sp)
   1b1a8:	da400315 	stw	r9,12(sp)
   1b1ac:	db000215 	stw	r12,8(sp)
   1b1b0:	db400115 	stw	r13,4(sp)
   1b1b4:	001a97c0 	call	1a97c <__ssprint_r>
   1b1b8:	103f541e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b1bc:	d8c00617 	ldw	r3,24(sp)
   1b1c0:	d8800c17 	ldw	r2,48(sp)
   1b1c4:	d9000b17 	ldw	r4,44(sp)
   1b1c8:	18fffc04 	addi	r3,r3,-16
   1b1cc:	19400448 	cmpgei	r5,r3,17
   1b1d0:	9011883a 	mov	r8,r18
   1b1d4:	d9c00817 	ldw	r7,32(sp)
   1b1d8:	db800717 	ldw	r14,28(sp)
   1b1dc:	da400317 	ldw	r9,12(sp)
   1b1e0:	db000217 	ldw	r12,8(sp)
   1b1e4:	db400117 	ldw	r13,4(sp)
   1b1e8:	283fe11e 	bne	r5,zero,1b170 <__alt_mem_mcu_subsystem_ram_0+0x77ffb170>
   1b1ec:	21000044 	addi	r4,r4,1
   1b1f0:	10c5883a 	add	r2,r2,r3
   1b1f4:	40c00115 	stw	r3,4(r8)
   1b1f8:	41c00015 	stw	r7,0(r8)
   1b1fc:	d8800c15 	stw	r2,48(sp)
   1b200:	d9000b15 	stw	r4,44(sp)
   1b204:	20c00208 	cmpgei	r3,r4,8
   1b208:	1801ac1e 	bne	r3,zero,1b8bc <___svfiprintf_internal_r+0xd80>
   1b20c:	42000204 	addi	r8,r8,8
   1b210:	d9800947 	ldb	r6,37(sp)
   1b214:	21400044 	addi	r5,r4,1
   1b218:	40c00204 	addi	r3,r8,8
   1b21c:	30000f26 	beq	r6,zero,1b25c <___svfiprintf_internal_r+0x720>
   1b220:	d9800944 	addi	r6,sp,37
   1b224:	10800044 	addi	r2,r2,1
   1b228:	41800015 	stw	r6,0(r8)
   1b22c:	01800044 	movi	r6,1
   1b230:	41800115 	stw	r6,4(r8)
   1b234:	d8800c15 	stw	r2,48(sp)
   1b238:	d9400b15 	stw	r5,44(sp)
   1b23c:	29800208 	cmpgei	r6,r5,8
   1b240:	30016c1e 	bne	r6,zero,1b7f4 <___svfiprintf_internal_r+0xcb8>
   1b244:	21c00084 	addi	r7,r4,2
   1b248:	41800404 	addi	r6,r8,16
   1b24c:	2809883a 	mov	r4,r5
   1b250:	1811883a 	mov	r8,r3
   1b254:	380b883a 	mov	r5,r7
   1b258:	3007883a 	mov	r3,r6
   1b25c:	68000d26 	beq	r13,zero,1b294 <___svfiprintf_internal_r+0x758>
   1b260:	d9000984 	addi	r4,sp,38
   1b264:	10800084 	addi	r2,r2,2
   1b268:	41000015 	stw	r4,0(r8)
   1b26c:	01000084 	movi	r4,2
   1b270:	41000115 	stw	r4,4(r8)
   1b274:	d8800c15 	stw	r2,48(sp)
   1b278:	d9400b15 	stw	r5,44(sp)
   1b27c:	29000208 	cmpgei	r4,r5,8
   1b280:	20016d1e 	bne	r4,zero,1b838 <___svfiprintf_internal_r+0xcfc>
   1b284:	2809883a 	mov	r4,r5
   1b288:	1811883a 	mov	r8,r3
   1b28c:	29400044 	addi	r5,r5,1
   1b290:	18c00204 	addi	r3,r3,8
   1b294:	63002018 	cmpnei	r12,r12,128
   1b298:	60011426 	beq	r12,zero,1b6ec <___svfiprintf_internal_r+0xbb0>
   1b29c:	4d53c83a 	sub	r9,r9,r21
   1b2a0:	02402f0e 	bge	zero,r9,1b360 <___svfiprintf_internal_r+0x824>
   1b2a4:	49800450 	cmplti	r6,r9,17
   1b2a8:	01c000b4 	movhi	r7,2
   1b2ac:	3001f21e 	bne	r6,zero,1ba78 <___svfiprintf_internal_r+0xf3c>
   1b2b0:	39dc2e04 	addi	r7,r7,28856
   1b2b4:	03000404 	movi	r12,16
   1b2b8:	00000406 	br	1b2cc <___svfiprintf_internal_r+0x790>
   1b2bc:	4a7ffc04 	addi	r9,r9,-16
   1b2c0:	48c00448 	cmpgei	r3,r9,17
   1b2c4:	42000204 	addi	r8,r8,8
   1b2c8:	18001926 	beq	r3,zero,1b330 <___svfiprintf_internal_r+0x7f4>
   1b2cc:	21000044 	addi	r4,r4,1
   1b2d0:	10800404 	addi	r2,r2,16
   1b2d4:	41c00015 	stw	r7,0(r8)
   1b2d8:	43000115 	stw	r12,4(r8)
   1b2dc:	d8800c15 	stw	r2,48(sp)
   1b2e0:	d9000b15 	stw	r4,44(sp)
   1b2e4:	20c00208 	cmpgei	r3,r4,8
   1b2e8:	183ff426 	beq	r3,zero,1b2bc <__alt_mem_mcu_subsystem_ram_0+0x77ffb2bc>
   1b2ec:	d9800a04 	addi	r6,sp,40
   1b2f0:	a00b883a 	mov	r5,r20
   1b2f4:	b009883a 	mov	r4,r22
   1b2f8:	d9c00315 	stw	r7,12(sp)
   1b2fc:	db000215 	stw	r12,8(sp)
   1b300:	da400115 	stw	r9,4(sp)
   1b304:	001a97c0 	call	1a97c <__ssprint_r>
   1b308:	103f001e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b30c:	da400117 	ldw	r9,4(sp)
   1b310:	d8800c17 	ldw	r2,48(sp)
   1b314:	d9000b17 	ldw	r4,44(sp)
   1b318:	4a7ffc04 	addi	r9,r9,-16
   1b31c:	48c00448 	cmpgei	r3,r9,17
   1b320:	9011883a 	mov	r8,r18
   1b324:	d9c00317 	ldw	r7,12(sp)
   1b328:	db000217 	ldw	r12,8(sp)
   1b32c:	183fe71e 	bne	r3,zero,1b2cc <__alt_mem_mcu_subsystem_ram_0+0x77ffb2cc>
   1b330:	21400044 	addi	r5,r4,1
   1b334:	41000204 	addi	r4,r8,8
   1b338:	1245883a 	add	r2,r2,r9
   1b33c:	41c00015 	stw	r7,0(r8)
   1b340:	42400115 	stw	r9,4(r8)
   1b344:	d8800c15 	stw	r2,48(sp)
   1b348:	d9400b15 	stw	r5,44(sp)
   1b34c:	28c00208 	cmpgei	r3,r5,8
   1b350:	1801481e 	bne	r3,zero,1b874 <___svfiprintf_internal_r+0xd38>
   1b354:	29400044 	addi	r5,r5,1
   1b358:	20c00204 	addi	r3,r4,8
   1b35c:	2011883a 	mov	r8,r4
   1b360:	a885883a 	add	r2,r21,r2
   1b364:	45c00015 	stw	r23,0(r8)
   1b368:	45400115 	stw	r21,4(r8)
   1b36c:	d8800c15 	stw	r2,48(sp)
   1b370:	d9400b15 	stw	r5,44(sp)
   1b374:	29000210 	cmplti	r4,r5,8
   1b378:	20011026 	beq	r4,zero,1b7bc <___svfiprintf_internal_r+0xc80>
   1b37c:	8c40010c 	andi	r17,r17,4
   1b380:	88002a26 	beq	r17,zero,1b42c <___svfiprintf_internal_r+0x8f0>
   1b384:	84e3c83a 	sub	r17,r16,r19
   1b388:	0440280e 	bge	zero,r17,1b42c <___svfiprintf_internal_r+0x8f0>
   1b38c:	01c000b4 	movhi	r7,2
   1b390:	89400450 	cmplti	r5,r17,17
   1b394:	39dc3204 	addi	r7,r7,28872
   1b398:	d9000b17 	ldw	r4,44(sp)
   1b39c:	05400404 	movi	r21,16
   1b3a0:	28000526 	beq	r5,zero,1b3b8 <___svfiprintf_internal_r+0x87c>
   1b3a4:	00001906 	br	1b40c <___svfiprintf_internal_r+0x8d0>
   1b3a8:	8c7ffc04 	addi	r17,r17,-16
   1b3ac:	89400448 	cmpgei	r5,r17,17
   1b3b0:	18c00204 	addi	r3,r3,8
   1b3b4:	28001526 	beq	r5,zero,1b40c <___svfiprintf_internal_r+0x8d0>
   1b3b8:	21000044 	addi	r4,r4,1
   1b3bc:	10800404 	addi	r2,r2,16
   1b3c0:	19c00015 	stw	r7,0(r3)
   1b3c4:	1d400115 	stw	r21,4(r3)
   1b3c8:	d8800c15 	stw	r2,48(sp)
   1b3cc:	d9000b15 	stw	r4,44(sp)
   1b3d0:	21400208 	cmpgei	r5,r4,8
   1b3d4:	283ff426 	beq	r5,zero,1b3a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb3a8>
   1b3d8:	d9800a04 	addi	r6,sp,40
   1b3dc:	a00b883a 	mov	r5,r20
   1b3e0:	b009883a 	mov	r4,r22
   1b3e4:	d9c00115 	stw	r7,4(sp)
   1b3e8:	001a97c0 	call	1a97c <__ssprint_r>
   1b3ec:	103ec71e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b3f0:	8c7ffc04 	addi	r17,r17,-16
   1b3f4:	89400448 	cmpgei	r5,r17,17
   1b3f8:	d8800c17 	ldw	r2,48(sp)
   1b3fc:	d9000b17 	ldw	r4,44(sp)
   1b400:	9007883a 	mov	r3,r18
   1b404:	d9c00117 	ldw	r7,4(sp)
   1b408:	283feb1e 	bne	r5,zero,1b3b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb3b8>
   1b40c:	21000044 	addi	r4,r4,1
   1b410:	1445883a 	add	r2,r2,r17
   1b414:	d9000b15 	stw	r4,44(sp)
   1b418:	19c00015 	stw	r7,0(r3)
   1b41c:	1c400115 	stw	r17,4(r3)
   1b420:	d8800c15 	stw	r2,48(sp)
   1b424:	21000210 	cmplti	r4,r4,8
   1b428:	20013326 	beq	r4,zero,1b8f8 <___svfiprintf_internal_r+0xdbc>
   1b42c:	84c0010e 	bge	r16,r19,1b434 <___svfiprintf_internal_r+0x8f8>
   1b430:	9821883a 	mov	r16,r19
   1b434:	d8c00017 	ldw	r3,0(sp)
   1b438:	1c07883a 	add	r3,r3,r16
   1b43c:	d8c00015 	stw	r3,0(sp)
   1b440:	1000e61e 	bne	r2,zero,1b7dc <___svfiprintf_internal_r+0xca0>
   1b444:	d8000b15 	stw	zero,44(sp)
   1b448:	9011883a 	mov	r8,r18
   1b44c:	003dd606 	br	1aba8 <__alt_mem_mcu_subsystem_ram_0+0x77ffaba8>
   1b450:	d8800417 	ldw	r2,16(sp)
   1b454:	d8000945 	stb	zero,37(sp)
   1b458:	15c00017 	ldw	r23,0(r2)
   1b45c:	14400104 	addi	r17,r2,4
   1b460:	b8018826 	beq	r23,zero,1ba84 <___svfiprintf_internal_r+0xf48>
   1b464:	48bfffe0 	cmpeqi	r2,r9,-1
   1b468:	10014a1e 	bne	r2,zero,1b994 <___svfiprintf_internal_r+0xe58>
   1b46c:	480d883a 	mov	r6,r9
   1b470:	000b883a 	mov	r5,zero
   1b474:	b809883a 	mov	r4,r23
   1b478:	da000315 	stw	r8,12(sp)
   1b47c:	d9c00215 	stw	r7,8(sp)
   1b480:	da400115 	stw	r9,4(sp)
   1b484:	00189280 	call	18928 <memchr>
   1b488:	da400117 	ldw	r9,4(sp)
   1b48c:	d9c00217 	ldw	r7,8(sp)
   1b490:	da000317 	ldw	r8,12(sp)
   1b494:	10018c26 	beq	r2,zero,1bac8 <___svfiprintf_internal_r+0xf8c>
   1b498:	dc400415 	stw	r17,16(sp)
   1b49c:	15ebc83a 	sub	r21,r2,r23
   1b4a0:	db000943 	ldbu	r12,37(sp)
   1b4a4:	3823883a 	mov	r17,r7
   1b4a8:	0013883a 	mov	r9,zero
   1b4ac:	00008606 	br	1b6c8 <___svfiprintf_internal_r+0xb8c>
   1b4b0:	39c00814 	ori	r7,r7,32
   1b4b4:	e0800007 	ldb	r2,0(fp)
   1b4b8:	003de006 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b4bc:	d8c00417 	ldw	r3,16(sp)
   1b4c0:	00800c04 	movi	r2,48
   1b4c4:	d8800985 	stb	r2,38(sp)
   1b4c8:	00801e04 	movi	r2,120
   1b4cc:	010000b4 	movhi	r4,2
   1b4d0:	d88009c5 	stb	r2,39(sp)
   1b4d4:	18800104 	addi	r2,r3,4
   1b4d8:	d8800415 	stw	r2,16(sp)
   1b4dc:	209afc04 	addi	r2,r4,27632
   1b4e0:	d8800515 	stw	r2,20(sp)
   1b4e4:	1cc00017 	ldw	r19,0(r3)
   1b4e8:	002b883a 	mov	r21,zero
   1b4ec:	39c00094 	ori	r7,r7,2
   1b4f0:	00800084 	movi	r2,2
   1b4f4:	003e6806 	br	1ae98 <__alt_mem_mcu_subsystem_ram_0+0x77ffae98>
   1b4f8:	29403fcc 	andi	r5,r5,255
   1b4fc:	2801941e 	bne	r5,zero,1bb50 <___svfiprintf_internal_r+0x1014>
   1b500:	d8c00417 	ldw	r3,16(sp)
   1b504:	3880080c 	andi	r2,r7,32
   1b508:	19000104 	addi	r4,r3,4
   1b50c:	18c00017 	ldw	r3,0(r3)
   1b510:	1001081e 	bne	r2,zero,1b934 <___svfiprintf_internal_r+0xdf8>
   1b514:	3880040c 	andi	r2,r7,16
   1b518:	1001431e 	bne	r2,zero,1ba28 <___svfiprintf_internal_r+0xeec>
   1b51c:	39c0100c 	andi	r7,r7,64
   1b520:	38014126 	beq	r7,zero,1ba28 <___svfiprintf_internal_r+0xeec>
   1b524:	d8800017 	ldw	r2,0(sp)
   1b528:	d9000415 	stw	r4,16(sp)
   1b52c:	1880000d 	sth	r2,0(r3)
   1b530:	003d9d06 	br	1aba8 <__alt_mem_mcu_subsystem_ram_0+0x77ffaba8>
   1b534:	29403fcc 	andi	r5,r5,255
   1b538:	2801871e 	bne	r5,zero,1bb58 <___svfiprintf_internal_r+0x101c>
   1b53c:	00c000b4 	movhi	r3,2
   1b540:	18dafc04 	addi	r3,r3,27632
   1b544:	d8c00515 	stw	r3,20(sp)
   1b548:	38c0080c 	andi	r3,r7,32
   1b54c:	18001e26 	beq	r3,zero,1b5c8 <___svfiprintf_internal_r+0xa8c>
   1b550:	d8c00417 	ldw	r3,16(sp)
   1b554:	1cc00017 	ldw	r19,0(r3)
   1b558:	1d400117 	ldw	r21,4(r3)
   1b55c:	18c00204 	addi	r3,r3,8
   1b560:	d8c00415 	stw	r3,16(sp)
   1b564:	38c0004c 	andi	r3,r7,1
   1b568:	18000226 	beq	r3,zero,1b574 <___svfiprintf_internal_r+0xa38>
   1b56c:	9d46b03a 	or	r3,r19,r21
   1b570:	1800ea1e 	bne	r3,zero,1b91c <___svfiprintf_internal_r+0xde0>
   1b574:	00800084 	movi	r2,2
   1b578:	003e4706 	br	1ae98 <__alt_mem_mcu_subsystem_ram_0+0x77ffae98>
   1b57c:	d8c00417 	ldw	r3,16(sp)
   1b580:	3880040c 	andi	r2,r7,16
   1b584:	1cc00017 	ldw	r19,0(r3)
   1b588:	18c00104 	addi	r3,r3,4
   1b58c:	d8c00415 	stw	r3,16(sp)
   1b590:	1000031e 	bne	r2,zero,1b5a0 <___svfiprintf_internal_r+0xa64>
   1b594:	3880100c 	andi	r2,r7,64
   1b598:	10000126 	beq	r2,zero,1b5a0 <___svfiprintf_internal_r+0xa64>
   1b59c:	9cffffcc 	andi	r19,r19,65535
   1b5a0:	002b883a 	mov	r21,zero
   1b5a4:	00800044 	movi	r2,1
   1b5a8:	003e3b06 	br	1ae98 <__alt_mem_mcu_subsystem_ram_0+0x77ffae98>
   1b5ac:	29403fcc 	andi	r5,r5,255
   1b5b0:	28015e1e 	bne	r5,zero,1bb2c <___svfiprintf_internal_r+0xff0>
   1b5b4:	00c000b4 	movhi	r3,2
   1b5b8:	18daf704 	addi	r3,r3,27612
   1b5bc:	d8c00515 	stw	r3,20(sp)
   1b5c0:	38c0080c 	andi	r3,r7,32
   1b5c4:	183fe21e 	bne	r3,zero,1b550 <__alt_mem_mcu_subsystem_ram_0+0x77ffb550>
   1b5c8:	d9000417 	ldw	r4,16(sp)
   1b5cc:	38c0040c 	andi	r3,r7,16
   1b5d0:	24c00017 	ldw	r19,0(r4)
   1b5d4:	21000104 	addi	r4,r4,4
   1b5d8:	d9000415 	stw	r4,16(sp)
   1b5dc:	1800b31e 	bne	r3,zero,1b8ac <___svfiprintf_internal_r+0xd70>
   1b5e0:	38c0100c 	andi	r3,r7,64
   1b5e4:	1800b126 	beq	r3,zero,1b8ac <___svfiprintf_internal_r+0xd70>
   1b5e8:	9cffffcc 	andi	r19,r19,65535
   1b5ec:	002b883a 	mov	r21,zero
   1b5f0:	003fdc06 	br	1b564 <__alt_mem_mcu_subsystem_ram_0+0x77ffb564>
   1b5f4:	39c01014 	ori	r7,r7,64
   1b5f8:	e0800007 	ldb	r2,0(fp)
   1b5fc:	003d8f06 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b600:	29403fcc 	andi	r5,r5,255
   1b604:	2801451e 	bne	r5,zero,1bb1c <___svfiprintf_internal_r+0xfe0>
   1b608:	39c00414 	ori	r7,r7,16
   1b60c:	3880080c 	andi	r2,r7,32
   1b610:	103eae1e 	bne	r2,zero,1b0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffb0cc>
   1b614:	d8c00417 	ldw	r3,16(sp)
   1b618:	3880040c 	andi	r2,r7,16
   1b61c:	1cc00017 	ldw	r19,0(r3)
   1b620:	18c00104 	addi	r3,r3,4
   1b624:	d8c00415 	stw	r3,16(sp)
   1b628:	1000a21e 	bne	r2,zero,1b8b4 <___svfiprintf_internal_r+0xd78>
   1b62c:	3880100c 	andi	r2,r7,64
   1b630:	1000a026 	beq	r2,zero,1b8b4 <___svfiprintf_internal_r+0xd78>
   1b634:	9cffffcc 	andi	r19,r19,65535
   1b638:	9ce0001c 	xori	r19,r19,32768
   1b63c:	9ce00004 	addi	r19,r19,-32768
   1b640:	982bd7fa 	srai	r21,r19,31
   1b644:	a83ea70e 	bge	r21,zero,1b0e4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb0e4>
   1b648:	04e7c83a 	sub	r19,zero,r19
   1b64c:	9804c03a 	cmpne	r2,r19,zero
   1b650:	056bc83a 	sub	r21,zero,r21
   1b654:	a8abc83a 	sub	r21,r21,r2
   1b658:	00800b44 	movi	r2,45
   1b65c:	d8800945 	stb	r2,37(sp)
   1b660:	48bfffd8 	cmpnei	r2,r9,-1
   1b664:	03000b44 	movi	r12,45
   1b668:	103ea11e 	bne	r2,zero,1b0f0 <__alt_mem_mcu_subsystem_ram_0+0x77ffb0f0>
   1b66c:	3823883a 	mov	r17,r7
   1b670:	a800d41e 	bne	r21,zero,1b9c4 <___svfiprintf_internal_r+0xe88>
   1b674:	988002a8 	cmpgeui	r2,r19,10
   1b678:	1000d21e 	bne	r2,zero,1b9c4 <___svfiprintf_internal_r+0xe88>
   1b67c:	9cc00c04 	addi	r19,r19,48
   1b680:	dcc016c5 	stb	r19,91(sp)
   1b684:	05400044 	movi	r21,1
   1b688:	ddc016c4 	addi	r23,sp,91
   1b68c:	00000e06 	br	1b6c8 <___svfiprintf_internal_r+0xb8c>
   1b690:	902f883a 	mov	r23,r18
   1b694:	d9000517 	ldw	r4,20(sp)
   1b698:	988003cc 	andi	r2,r19,15
   1b69c:	a806973a 	slli	r3,r21,28
   1b6a0:	2085883a 	add	r2,r4,r2
   1b6a4:	9826d13a 	srli	r19,r19,4
   1b6a8:	10800003 	ldbu	r2,0(r2)
   1b6ac:	a82ad13a 	srli	r21,r21,4
   1b6b0:	bdffffc4 	addi	r23,r23,-1
   1b6b4:	1ce6b03a 	or	r19,r3,r19
   1b6b8:	b8800005 	stb	r2,0(r23)
   1b6bc:	9d44b03a 	or	r2,r19,r21
   1b6c0:	103ff41e 	bne	r2,zero,1b694 <__alt_mem_mcu_subsystem_ram_0+0x77ffb694>
   1b6c4:	95ebc83a 	sub	r21,r18,r23
   1b6c8:	4827883a 	mov	r19,r9
   1b6cc:	4d40010e 	bge	r9,r21,1b6d4 <___svfiprintf_internal_r+0xb98>
   1b6d0:	a827883a 	mov	r19,r21
   1b6d4:	63003fcc 	andi	r12,r12,255
   1b6d8:	6300201c 	xori	r12,r12,128
   1b6dc:	633fe004 	addi	r12,r12,-128
   1b6e0:	603e9026 	beq	r12,zero,1b124 <__alt_mem_mcu_subsystem_ram_0+0x77ffb124>
   1b6e4:	9cc00044 	addi	r19,r19,1
   1b6e8:	003e8e06 	br	1b124 <__alt_mem_mcu_subsystem_ram_0+0x77ffb124>
   1b6ec:	84d9c83a 	sub	r12,r16,r19
   1b6f0:	033eea0e 	bge	zero,r12,1b29c <__alt_mem_mcu_subsystem_ram_0+0x77ffb29c>
   1b6f4:	61800450 	cmplti	r6,r12,17
   1b6f8:	01c000b4 	movhi	r7,2
   1b6fc:	3000ee1e 	bne	r6,zero,1bab8 <___svfiprintf_internal_r+0xf7c>
   1b700:	39dc2e04 	addi	r7,r7,28856
   1b704:	03400404 	movi	r13,16
   1b708:	00000406 	br	1b71c <___svfiprintf_internal_r+0xbe0>
   1b70c:	633ffc04 	addi	r12,r12,-16
   1b710:	60c00448 	cmpgei	r3,r12,17
   1b714:	42000204 	addi	r8,r8,8
   1b718:	18001b26 	beq	r3,zero,1b788 <___svfiprintf_internal_r+0xc4c>
   1b71c:	21000044 	addi	r4,r4,1
   1b720:	10800404 	addi	r2,r2,16
   1b724:	41c00015 	stw	r7,0(r8)
   1b728:	43400115 	stw	r13,4(r8)
   1b72c:	d8800c15 	stw	r2,48(sp)
   1b730:	d9000b15 	stw	r4,44(sp)
   1b734:	20c00208 	cmpgei	r3,r4,8
   1b738:	183ff426 	beq	r3,zero,1b70c <__alt_mem_mcu_subsystem_ram_0+0x77ffb70c>
   1b73c:	d9800a04 	addi	r6,sp,40
   1b740:	a00b883a 	mov	r5,r20
   1b744:	b009883a 	mov	r4,r22
   1b748:	d9c00615 	stw	r7,24(sp)
   1b74c:	db400315 	stw	r13,12(sp)
   1b750:	db000215 	stw	r12,8(sp)
   1b754:	da400115 	stw	r9,4(sp)
   1b758:	001a97c0 	call	1a97c <__ssprint_r>
   1b75c:	103deb1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b760:	db000217 	ldw	r12,8(sp)
   1b764:	d8800c17 	ldw	r2,48(sp)
   1b768:	d9000b17 	ldw	r4,44(sp)
   1b76c:	633ffc04 	addi	r12,r12,-16
   1b770:	60c00448 	cmpgei	r3,r12,17
   1b774:	9011883a 	mov	r8,r18
   1b778:	d9c00617 	ldw	r7,24(sp)
   1b77c:	db400317 	ldw	r13,12(sp)
   1b780:	da400117 	ldw	r9,4(sp)
   1b784:	183fe51e 	bne	r3,zero,1b71c <__alt_mem_mcu_subsystem_ram_0+0x77ffb71c>
   1b788:	21000044 	addi	r4,r4,1
   1b78c:	41800204 	addi	r6,r8,8
   1b790:	1305883a 	add	r2,r2,r12
   1b794:	41c00015 	stw	r7,0(r8)
   1b798:	43000115 	stw	r12,4(r8)
   1b79c:	d8800c15 	stw	r2,48(sp)
   1b7a0:	d9000b15 	stw	r4,44(sp)
   1b7a4:	20c00208 	cmpgei	r3,r4,8
   1b7a8:	1800a61e 	bne	r3,zero,1ba44 <___svfiprintf_internal_r+0xf08>
   1b7ac:	21400044 	addi	r5,r4,1
   1b7b0:	30c00204 	addi	r3,r6,8
   1b7b4:	3011883a 	mov	r8,r6
   1b7b8:	003eb806 	br	1b29c <__alt_mem_mcu_subsystem_ram_0+0x77ffb29c>
   1b7bc:	d9800a04 	addi	r6,sp,40
   1b7c0:	a00b883a 	mov	r5,r20
   1b7c4:	b009883a 	mov	r4,r22
   1b7c8:	001a97c0 	call	1a97c <__ssprint_r>
   1b7cc:	103dcf1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b7d0:	d8800c17 	ldw	r2,48(sp)
   1b7d4:	9007883a 	mov	r3,r18
   1b7d8:	003ee806 	br	1b37c <__alt_mem_mcu_subsystem_ram_0+0x77ffb37c>
   1b7dc:	d9800a04 	addi	r6,sp,40
   1b7e0:	a00b883a 	mov	r5,r20
   1b7e4:	b009883a 	mov	r4,r22
   1b7e8:	001a97c0 	call	1a97c <__ssprint_r>
   1b7ec:	103f1526 	beq	r2,zero,1b444 <__alt_mem_mcu_subsystem_ram_0+0x77ffb444>
   1b7f0:	003dc606 	br	1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b7f4:	d9800a04 	addi	r6,sp,40
   1b7f8:	a00b883a 	mov	r5,r20
   1b7fc:	b009883a 	mov	r4,r22
   1b800:	da400315 	stw	r9,12(sp)
   1b804:	db000215 	stw	r12,8(sp)
   1b808:	db400115 	stw	r13,4(sp)
   1b80c:	001a97c0 	call	1a97c <__ssprint_r>
   1b810:	103dbe1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b814:	d9000b17 	ldw	r4,44(sp)
   1b818:	d8800c17 	ldw	r2,48(sp)
   1b81c:	d8c01904 	addi	r3,sp,100
   1b820:	21400044 	addi	r5,r4,1
   1b824:	9011883a 	mov	r8,r18
   1b828:	da400317 	ldw	r9,12(sp)
   1b82c:	db000217 	ldw	r12,8(sp)
   1b830:	db400117 	ldw	r13,4(sp)
   1b834:	003e8906 	br	1b25c <__alt_mem_mcu_subsystem_ram_0+0x77ffb25c>
   1b838:	d9800a04 	addi	r6,sp,40
   1b83c:	a00b883a 	mov	r5,r20
   1b840:	b009883a 	mov	r4,r22
   1b844:	da400215 	stw	r9,8(sp)
   1b848:	db000115 	stw	r12,4(sp)
   1b84c:	001a97c0 	call	1a97c <__ssprint_r>
   1b850:	103dae1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b854:	d9000b17 	ldw	r4,44(sp)
   1b858:	d8800c17 	ldw	r2,48(sp)
   1b85c:	d8c01904 	addi	r3,sp,100
   1b860:	21400044 	addi	r5,r4,1
   1b864:	9011883a 	mov	r8,r18
   1b868:	da400217 	ldw	r9,8(sp)
   1b86c:	db000117 	ldw	r12,4(sp)
   1b870:	003e8806 	br	1b294 <__alt_mem_mcu_subsystem_ram_0+0x77ffb294>
   1b874:	d9800a04 	addi	r6,sp,40
   1b878:	a00b883a 	mov	r5,r20
   1b87c:	b009883a 	mov	r4,r22
   1b880:	001a97c0 	call	1a97c <__ssprint_r>
   1b884:	103da11e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b888:	d9000b17 	ldw	r4,44(sp)
   1b88c:	d8800c17 	ldw	r2,48(sp)
   1b890:	d8c01904 	addi	r3,sp,100
   1b894:	21400044 	addi	r5,r4,1
   1b898:	9011883a 	mov	r8,r18
   1b89c:	003eb006 	br	1b360 <__alt_mem_mcu_subsystem_ram_0+0x77ffb360>
   1b8a0:	002b883a 	mov	r21,zero
   1b8a4:	902f883a 	mov	r23,r18
   1b8a8:	003f8706 	br	1b6c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6c8>
   1b8ac:	002b883a 	mov	r21,zero
   1b8b0:	003f2c06 	br	1b564 <__alt_mem_mcu_subsystem_ram_0+0x77ffb564>
   1b8b4:	982bd7fa 	srai	r21,r19,31
   1b8b8:	003e0906 	br	1b0e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffb0e0>
   1b8bc:	d9800a04 	addi	r6,sp,40
   1b8c0:	a00b883a 	mov	r5,r20
   1b8c4:	b009883a 	mov	r4,r22
   1b8c8:	da400315 	stw	r9,12(sp)
   1b8cc:	db000215 	stw	r12,8(sp)
   1b8d0:	db400115 	stw	r13,4(sp)
   1b8d4:	001a97c0 	call	1a97c <__ssprint_r>
   1b8d8:	103d8c1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b8dc:	d8800c17 	ldw	r2,48(sp)
   1b8e0:	d9000b17 	ldw	r4,44(sp)
   1b8e4:	9011883a 	mov	r8,r18
   1b8e8:	da400317 	ldw	r9,12(sp)
   1b8ec:	db000217 	ldw	r12,8(sp)
   1b8f0:	db400117 	ldw	r13,4(sp)
   1b8f4:	003e4606 	br	1b210 <__alt_mem_mcu_subsystem_ram_0+0x77ffb210>
   1b8f8:	d9800a04 	addi	r6,sp,40
   1b8fc:	a00b883a 	mov	r5,r20
   1b900:	b009883a 	mov	r4,r22
   1b904:	001a97c0 	call	1a97c <__ssprint_r>
   1b908:	103d801e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1b90c:	d8800c17 	ldw	r2,48(sp)
   1b910:	003ec606 	br	1b42c <__alt_mem_mcu_subsystem_ram_0+0x77ffb42c>
   1b914:	902f883a 	mov	r23,r18
   1b918:	003f6b06 	br	1b6c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6c8>
   1b91c:	00c00c04 	movi	r3,48
   1b920:	d88009c5 	stb	r2,39(sp)
   1b924:	d8c00985 	stb	r3,38(sp)
   1b928:	39c00094 	ori	r7,r7,2
   1b92c:	00800084 	movi	r2,2
   1b930:	003d5906 	br	1ae98 <__alt_mem_mcu_subsystem_ram_0+0x77ffae98>
   1b934:	d9400017 	ldw	r5,0(sp)
   1b938:	d9000415 	stw	r4,16(sp)
   1b93c:	2805d7fa 	srai	r2,r5,31
   1b940:	19400015 	stw	r5,0(r3)
   1b944:	18800115 	stw	r2,4(r3)
   1b948:	003c9706 	br	1aba8 <__alt_mem_mcu_subsystem_ram_0+0x77ffaba8>
   1b94c:	0421c83a 	sub	r16,zero,r16
   1b950:	ddc00415 	stw	r23,16(sp)
   1b954:	003da706 	br	1aff4 <__alt_mem_mcu_subsystem_ram_0+0x77ffaff4>
   1b958:	e0800043 	ldbu	r2,1(fp)
   1b95c:	39c00814 	ori	r7,r7,32
   1b960:	e7000044 	addi	fp,fp,1
   1b964:	10803fcc 	andi	r2,r2,255
   1b968:	1080201c 	xori	r2,r2,128
   1b96c:	10bfe004 	addi	r2,r2,-128
   1b970:	003cb206 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1b974:	01401004 	movi	r5,64
   1b978:	000fdf40 	call	fdf4 <_malloc_r>
   1b97c:	a0800015 	stw	r2,0(r20)
   1b980:	a0800415 	stw	r2,16(r20)
   1b984:	10006b26 	beq	r2,zero,1bb34 <___svfiprintf_internal_r+0xff8>
   1b988:	00801004 	movi	r2,64
   1b98c:	a0800515 	stw	r2,20(r20)
   1b990:	003c7e06 	br	1ab8c <__alt_mem_mcu_subsystem_ram_0+0x77ffab8c>
   1b994:	b809883a 	mov	r4,r23
   1b998:	da000215 	stw	r8,8(sp)
   1b99c:	d9c00115 	stw	r7,4(sp)
   1b9a0:	00112e40 	call	112e4 <strlen>
   1b9a4:	d9c00117 	ldw	r7,4(sp)
   1b9a8:	dc400415 	stw	r17,16(sp)
   1b9ac:	102b883a 	mov	r21,r2
   1b9b0:	db000943 	ldbu	r12,37(sp)
   1b9b4:	3823883a 	mov	r17,r7
   1b9b8:	0013883a 	mov	r9,zero
   1b9bc:	da000217 	ldw	r8,8(sp)
   1b9c0:	003f4106 	br	1b6c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6c8>
   1b9c4:	902f883a 	mov	r23,r18
   1b9c8:	9809883a 	mov	r4,r19
   1b9cc:	a80b883a 	mov	r5,r21
   1b9d0:	01800284 	movi	r6,10
   1b9d4:	000f883a 	mov	r7,zero
   1b9d8:	db000315 	stw	r12,12(sp)
   1b9dc:	da000215 	stw	r8,8(sp)
   1b9e0:	da400115 	stw	r9,4(sp)
   1b9e4:	000d0840 	call	d084 <__umoddi3>
   1b9e8:	10800c04 	addi	r2,r2,48
   1b9ec:	bdffffc4 	addi	r23,r23,-1
   1b9f0:	9809883a 	mov	r4,r19
   1b9f4:	a80b883a 	mov	r5,r21
   1b9f8:	b8800005 	stb	r2,0(r23)
   1b9fc:	01800284 	movi	r6,10
   1ba00:	000f883a 	mov	r7,zero
   1ba04:	000caec0 	call	caec <__udivdi3>
   1ba08:	1027883a 	mov	r19,r2
   1ba0c:	10c4b03a 	or	r2,r2,r3
   1ba10:	182b883a 	mov	r21,r3
   1ba14:	da400117 	ldw	r9,4(sp)
   1ba18:	da000217 	ldw	r8,8(sp)
   1ba1c:	db000317 	ldw	r12,12(sp)
   1ba20:	103fe91e 	bne	r2,zero,1b9c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb9c8>
   1ba24:	003f2706 	br	1b6c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6c4>
   1ba28:	d8800017 	ldw	r2,0(sp)
   1ba2c:	18800015 	stw	r2,0(r3)
   1ba30:	d9000415 	stw	r4,16(sp)
   1ba34:	003c5c06 	br	1aba8 <__alt_mem_mcu_subsystem_ram_0+0x77ffaba8>
   1ba38:	10c00060 	cmpeqi	r3,r2,1
   1ba3c:	183cf126 	beq	r3,zero,1ae04 <__alt_mem_mcu_subsystem_ram_0+0x77ffae04>
   1ba40:	003f0e06 	br	1b67c <__alt_mem_mcu_subsystem_ram_0+0x77ffb67c>
   1ba44:	d9800a04 	addi	r6,sp,40
   1ba48:	a00b883a 	mov	r5,r20
   1ba4c:	b009883a 	mov	r4,r22
   1ba50:	da400115 	stw	r9,4(sp)
   1ba54:	001a97c0 	call	1a97c <__ssprint_r>
   1ba58:	103d2c1e 	bne	r2,zero,1af0c <__alt_mem_mcu_subsystem_ram_0+0x77ffaf0c>
   1ba5c:	d9000b17 	ldw	r4,44(sp)
   1ba60:	d8800c17 	ldw	r2,48(sp)
   1ba64:	d8c01904 	addi	r3,sp,100
   1ba68:	21400044 	addi	r5,r4,1
   1ba6c:	9011883a 	mov	r8,r18
   1ba70:	da400117 	ldw	r9,4(sp)
   1ba74:	003e0906 	br	1b29c <__alt_mem_mcu_subsystem_ram_0+0x77ffb29c>
   1ba78:	1809883a 	mov	r4,r3
   1ba7c:	39dc2e04 	addi	r7,r7,28856
   1ba80:	003e2d06 	br	1b338 <__alt_mem_mcu_subsystem_ram_0+0x77ffb338>
   1ba84:	488001f0 	cmpltui	r2,r9,7
   1ba88:	482b883a 	mov	r21,r9
   1ba8c:	10000526 	beq	r2,zero,1baa4 <___svfiprintf_internal_r+0xf68>
   1ba90:	05c000b4 	movhi	r23,2
   1ba94:	a827883a 	mov	r19,r21
   1ba98:	dc400415 	stw	r17,16(sp)
   1ba9c:	bddb0104 	addi	r23,r23,27652
   1baa0:	003d9e06 	br	1b11c <__alt_mem_mcu_subsystem_ram_0+0x77ffb11c>
   1baa4:	05400184 	movi	r21,6
   1baa8:	003ff906 	br	1ba90 <__alt_mem_mcu_subsystem_ram_0+0x77ffba90>
   1baac:	2039883a 	mov	fp,r4
   1bab0:	0013883a 	mov	r9,zero
   1bab4:	003c6206 	br	1ac40 <__alt_mem_mcu_subsystem_ram_0+0x77ffac40>
   1bab8:	180d883a 	mov	r6,r3
   1babc:	2809883a 	mov	r4,r5
   1bac0:	39dc2e04 	addi	r7,r7,28856
   1bac4:	003f3206 	br	1b790 <__alt_mem_mcu_subsystem_ram_0+0x77ffb790>
   1bac8:	482b883a 	mov	r21,r9
   1bacc:	dc400415 	stw	r17,16(sp)
   1bad0:	db000943 	ldbu	r12,37(sp)
   1bad4:	3823883a 	mov	r17,r7
   1bad8:	0013883a 	mov	r9,zero
   1badc:	003efa06 	br	1b6c8 <__alt_mem_mcu_subsystem_ram_0+0x77ffb6c8>
   1bae0:	00bfffc4 	movi	r2,-1
   1bae4:	d8800015 	stw	r2,0(sp)
   1bae8:	003d0b06 	br	1af18 <__alt_mem_mcu_subsystem_ram_0+0x77ffaf18>
   1baec:	d8800417 	ldw	r2,16(sp)
   1baf0:	12400017 	ldw	r9,0(r2)
   1baf4:	15c00104 	addi	r23,r2,4
   1baf8:	4800010e 	bge	r9,zero,1bb00 <___svfiprintf_internal_r+0xfc4>
   1bafc:	027fffc4 	movi	r9,-1
   1bb00:	e0800043 	ldbu	r2,1(fp)
   1bb04:	ddc00415 	stw	r23,16(sp)
   1bb08:	2039883a 	mov	fp,r4
   1bb0c:	10803fcc 	andi	r2,r2,255
   1bb10:	1080201c 	xori	r2,r2,128
   1bb14:	10bfe004 	addi	r2,r2,-128
   1bb18:	003c4806 	br	1ac3c <__alt_mem_mcu_subsystem_ram_0+0x77ffac3c>
   1bb1c:	d9800945 	stb	r6,37(sp)
   1bb20:	003eb906 	br	1b608 <__alt_mem_mcu_subsystem_ram_0+0x77ffb608>
   1bb24:	d9800945 	stb	r6,37(sp)
   1bb28:	003d6606 	br	1b0c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb0c4>
   1bb2c:	d9800945 	stb	r6,37(sp)
   1bb30:	003ea006 	br	1b5b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffb5b4>
   1bb34:	00800304 	movi	r2,12
   1bb38:	b0800015 	stw	r2,0(r22)
   1bb3c:	00bfffc4 	movi	r2,-1
   1bb40:	d8800015 	stw	r2,0(sp)
   1bb44:	003cf406 	br	1af18 <__alt_mem_mcu_subsystem_ram_0+0x77ffaf18>
   1bb48:	d9800945 	stb	r6,37(sp)
   1bb4c:	003d0d06 	br	1af84 <__alt_mem_mcu_subsystem_ram_0+0x77ffaf84>
   1bb50:	d9800945 	stb	r6,37(sp)
   1bb54:	003e6a06 	br	1b500 <__alt_mem_mcu_subsystem_ram_0+0x77ffb500>
   1bb58:	d9800945 	stb	r6,37(sp)
   1bb5c:	003e7706 	br	1b53c <__alt_mem_mcu_subsystem_ram_0+0x77ffb53c>

0001bb60 <_sungetc_r>:
   1bb60:	defffc04 	addi	sp,sp,-16
   1bb64:	dfc00315 	stw	ra,12(sp)
   1bb68:	dc800215 	stw	r18,8(sp)
   1bb6c:	dc400115 	stw	r17,4(sp)
   1bb70:	dc000015 	stw	r16,0(sp)
   1bb74:	28bfffd8 	cmpnei	r2,r5,-1
   1bb78:	10001c26 	beq	r2,zero,1bbec <_sungetc_r+0x8c>
   1bb7c:	3080030b 	ldhu	r2,12(r6)
   1bb80:	30c00c17 	ldw	r3,48(r6)
   1bb84:	2c803fcc 	andi	r18,r5,255
   1bb88:	10bff7cc 	andi	r2,r2,65503
   1bb8c:	3080030d 	sth	r2,12(r6)
   1bb90:	30800117 	ldw	r2,4(r6)
   1bb94:	18001726 	beq	r3,zero,1bbf4 <_sungetc_r+0x94>
   1bb98:	30c00d17 	ldw	r3,52(r6)
   1bb9c:	3021883a 	mov	r16,r6
   1bba0:	2823883a 	mov	r17,r5
   1bba4:	10c00e0e 	bge	r2,r3,1bbe0 <_sungetc_r+0x80>
   1bba8:	80800017 	ldw	r2,0(r16)
   1bbac:	10ffffc4 	addi	r3,r2,-1
   1bbb0:	80c00015 	stw	r3,0(r16)
   1bbb4:	147fffc5 	stb	r17,-1(r2)
   1bbb8:	80800117 	ldw	r2,4(r16)
   1bbbc:	10800044 	addi	r2,r2,1
   1bbc0:	80800115 	stw	r2,4(r16)
   1bbc4:	9005883a 	mov	r2,r18
   1bbc8:	dfc00317 	ldw	ra,12(sp)
   1bbcc:	dc800217 	ldw	r18,8(sp)
   1bbd0:	dc400117 	ldw	r17,4(sp)
   1bbd4:	dc000017 	ldw	r16,0(sp)
   1bbd8:	dec00404 	addi	sp,sp,16
   1bbdc:	f800283a 	ret
   1bbe0:	300b883a 	mov	r5,r6
   1bbe4:	001ccf80 	call	1ccf8 <__submore>
   1bbe8:	103fef26 	beq	r2,zero,1bba8 <__alt_mem_mcu_subsystem_ram_0+0x77ffbba8>
   1bbec:	04bfffc4 	movi	r18,-1
   1bbf0:	003ff406 	br	1bbc4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbbc4>
   1bbf4:	31000417 	ldw	r4,16(r6)
   1bbf8:	30c00017 	ldw	r3,0(r6)
   1bbfc:	20000326 	beq	r4,zero,1bc0c <_sungetc_r+0xac>
   1bc00:	20c0022e 	bgeu	r4,r3,1bc0c <_sungetc_r+0xac>
   1bc04:	193fffc3 	ldbu	r4,-1(r3)
   1bc08:	24800c26 	beq	r4,r18,1bc3c <_sungetc_r+0xdc>
   1bc0c:	30800f15 	stw	r2,60(r6)
   1bc10:	008000c4 	movi	r2,3
   1bc14:	31c01004 	addi	r7,r6,64
   1bc18:	31001084 	addi	r4,r6,66
   1bc1c:	30800d15 	stw	r2,52(r6)
   1bc20:	00800044 	movi	r2,1
   1bc24:	30c00e15 	stw	r3,56(r6)
   1bc28:	31c00c15 	stw	r7,48(r6)
   1bc2c:	31401085 	stb	r5,66(r6)
   1bc30:	31000015 	stw	r4,0(r6)
   1bc34:	30800115 	stw	r2,4(r6)
   1bc38:	003fe206 	br	1bbc4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbbc4>
   1bc3c:	18ffffc4 	addi	r3,r3,-1
   1bc40:	10800044 	addi	r2,r2,1
   1bc44:	30c00015 	stw	r3,0(r6)
   1bc48:	30800115 	stw	r2,4(r6)
   1bc4c:	003fdd06 	br	1bbc4 <__alt_mem_mcu_subsystem_ram_0+0x77ffbbc4>

0001bc50 <__ssrefill_r>:
   1bc50:	defffe04 	addi	sp,sp,-8
   1bc54:	dc000015 	stw	r16,0(sp)
   1bc58:	2821883a 	mov	r16,r5
   1bc5c:	29400c17 	ldw	r5,48(r5)
   1bc60:	dfc00115 	stw	ra,4(sp)
   1bc64:	28000e26 	beq	r5,zero,1bca0 <__ssrefill_r+0x50>
   1bc68:	80801004 	addi	r2,r16,64
   1bc6c:	28800126 	beq	r5,r2,1bc74 <__ssrefill_r+0x24>
   1bc70:	0017d000 	call	17d00 <_free_r>
   1bc74:	80800f17 	ldw	r2,60(r16)
   1bc78:	80000c15 	stw	zero,48(r16)
   1bc7c:	80800115 	stw	r2,4(r16)
   1bc80:	10000726 	beq	r2,zero,1bca0 <__ssrefill_r+0x50>
   1bc84:	80c00e17 	ldw	r3,56(r16)
   1bc88:	0005883a 	mov	r2,zero
   1bc8c:	80c00015 	stw	r3,0(r16)
   1bc90:	dfc00117 	ldw	ra,4(sp)
   1bc94:	dc000017 	ldw	r16,0(sp)
   1bc98:	dec00204 	addi	sp,sp,8
   1bc9c:	f800283a 	ret
   1bca0:	8080030b 	ldhu	r2,12(r16)
   1bca4:	80c00417 	ldw	r3,16(r16)
   1bca8:	80000115 	stw	zero,4(r16)
   1bcac:	10800814 	ori	r2,r2,32
   1bcb0:	8080030d 	sth	r2,12(r16)
   1bcb4:	80c00015 	stw	r3,0(r16)
   1bcb8:	00bfffc4 	movi	r2,-1
   1bcbc:	003ff406 	br	1bc90 <__alt_mem_mcu_subsystem_ram_0+0x77ffbc90>

0001bcc0 <_sfread_r>:
   1bcc0:	defff704 	addi	sp,sp,-36
   1bcc4:	dd400515 	stw	r21,20(sp)
   1bcc8:	39ab383a 	mul	r21,r7,r6
   1bccc:	dc000015 	stw	r16,0(sp)
   1bcd0:	dfc00815 	stw	ra,32(sp)
   1bcd4:	ddc00715 	stw	r23,28(sp)
   1bcd8:	dd800615 	stw	r22,24(sp)
   1bcdc:	dd000415 	stw	r20,16(sp)
   1bce0:	dcc00315 	stw	r19,12(sp)
   1bce4:	dc800215 	stw	r18,8(sp)
   1bce8:	dc400115 	stw	r17,4(sp)
   1bcec:	dc000917 	ldw	r16,36(sp)
   1bcf0:	a8002026 	beq	r21,zero,1bd74 <_sfread_r+0xb4>
   1bcf4:	302f883a 	mov	r23,r6
   1bcf8:	382d883a 	mov	r22,r7
   1bcfc:	2029883a 	mov	r20,r4
   1bd00:	2827883a 	mov	r19,r5
   1bd04:	a825883a 	mov	r18,r21
   1bd08:	00000b06 	br	1bd38 <_sfread_r+0x78>
   1bd0c:	00106380 	call	10638 <memcpy>
   1bd10:	80800017 	ldw	r2,0(r16)
   1bd14:	80000115 	stw	zero,4(r16)
   1bd18:	800b883a 	mov	r5,r16
   1bd1c:	1445883a 	add	r2,r2,r17
   1bd20:	80800015 	stw	r2,0(r16)
   1bd24:	a009883a 	mov	r4,r20
   1bd28:	9c67883a 	add	r19,r19,r17
   1bd2c:	9465c83a 	sub	r18,r18,r17
   1bd30:	001bc500 	call	1bc50 <__ssrefill_r>
   1bd34:	10001b1e 	bne	r2,zero,1bda4 <_sfread_r+0xe4>
   1bd38:	84400117 	ldw	r17,4(r16)
   1bd3c:	80800017 	ldw	r2,0(r16)
   1bd40:	9809883a 	mov	r4,r19
   1bd44:	880d883a 	mov	r6,r17
   1bd48:	100b883a 	mov	r5,r2
   1bd4c:	8cbfef36 	bltu	r17,r18,1bd0c <__alt_mem_mcu_subsystem_ram_0+0x77ffbd0c>
   1bd50:	900d883a 	mov	r6,r18
   1bd54:	00106380 	call	10638 <memcpy>
   1bd58:	80c00117 	ldw	r3,4(r16)
   1bd5c:	80800017 	ldw	r2,0(r16)
   1bd60:	b02b883a 	mov	r21,r22
   1bd64:	1c87c83a 	sub	r3,r3,r18
   1bd68:	14a5883a 	add	r18,r2,r18
   1bd6c:	80c00115 	stw	r3,4(r16)
   1bd70:	84800015 	stw	r18,0(r16)
   1bd74:	a805883a 	mov	r2,r21
   1bd78:	dfc00817 	ldw	ra,32(sp)
   1bd7c:	ddc00717 	ldw	r23,28(sp)
   1bd80:	dd800617 	ldw	r22,24(sp)
   1bd84:	dd400517 	ldw	r21,20(sp)
   1bd88:	dd000417 	ldw	r20,16(sp)
   1bd8c:	dcc00317 	ldw	r19,12(sp)
   1bd90:	dc800217 	ldw	r18,8(sp)
   1bd94:	dc400117 	ldw	r17,4(sp)
   1bd98:	dc000017 	ldw	r16,0(sp)
   1bd9c:	dec00904 	addi	sp,sp,36
   1bda0:	f800283a 	ret
   1bda4:	ac89c83a 	sub	r4,r21,r18
   1bda8:	b80b883a 	mov	r5,r23
   1bdac:	000d6d80 	call	d6d8 <__udivsi3>
   1bdb0:	102b883a 	mov	r21,r2
   1bdb4:	003fef06 	br	1bd74 <__alt_mem_mcu_subsystem_ram_0+0x77ffbd74>

0001bdb8 <__ssvfiscanf_r>:
   1bdb8:	2880030b 	ldhu	r2,12(r5)
   1bdbc:	deffa304 	addi	sp,sp,-372
   1bdc0:	df005b15 	stw	fp,364(sp)
   1bdc4:	dd405815 	stw	r21,352(sp)
   1bdc8:	dcc05615 	stw	r19,344(sp)
   1bdcc:	dfc05c15 	stw	ra,368(sp)
   1bdd0:	ddc05a15 	stw	r23,360(sp)
   1bdd4:	dd805915 	stw	r22,356(sp)
   1bdd8:	dd005715 	stw	r20,348(sp)
   1bddc:	dc805515 	stw	r18,340(sp)
   1bde0:	dc405415 	stw	r17,336(sp)
   1bde4:	dc005315 	stw	r16,332(sp)
   1bde8:	10c8000c 	andi	r3,r2,8192
   1bdec:	d9c00215 	stw	r7,8(sp)
   1bdf0:	2839883a 	mov	fp,r5
   1bdf4:	202b883a 	mov	r21,r4
   1bdf8:	3027883a 	mov	r19,r6
   1bdfc:	1800061e 	bne	r3,zero,1be18 <__ssvfiscanf_r+0x60>
   1be00:	28c01917 	ldw	r3,100(r5)
   1be04:	0137ffc4 	movi	r4,-8193
   1be08:	10880014 	ori	r2,r2,8192
   1be0c:	1906703a 	and	r3,r3,r4
   1be10:	2880030d 	sth	r2,12(r5)
   1be14:	28c01915 	stw	r3,100(r5)
   1be18:	002f883a 	mov	r23,zero
   1be1c:	002d883a 	mov	r22,zero
   1be20:	0021883a 	mov	r16,zero
   1be24:	d8000115 	stw	zero,4(sp)
   1be28:	98800003 	ldbu	r2,0(r19)
   1be2c:	9d000044 	addi	r20,r19,1
   1be30:	d8800615 	stw	r2,24(sp)
   1be34:	1000a526 	beq	r2,zero,1c0cc <__ssvfiscanf_r+0x314>
   1be38:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1be3c:	d8c00617 	ldw	r3,24(sp)
   1be40:	10c5883a 	add	r2,r2,r3
   1be44:	10800043 	ldbu	r2,1(r2)
   1be48:	1080020c 	andi	r2,r2,8
   1be4c:	1000861e 	bne	r2,zero,1c068 <__ssvfiscanf_r+0x2b0>
   1be50:	18c00958 	cmpnei	r3,r3,37
   1be54:	1800ab1e 	bne	r3,zero,1c104 <__ssvfiscanf_r+0x34c>
   1be58:	99400043 	ldbu	r5,1(r19)
   1be5c:	0025883a 	mov	r18,zero
   1be60:	0023883a 	mov	r17,zero
   1be64:	280690ba 	slli	r3,r5,2
   1be68:	010000b4 	movhi	r4,2
   1be6c:	28801e68 	cmpgeui	r2,r5,121
   1be70:	1909883a 	add	r4,r3,r4
   1be74:	a4c00044 	addi	r19,r20,1
   1be78:	10015b1e 	bne	r2,zero,1c3e8 <__ssvfiscanf_r+0x630>
   1be7c:	20afa117 	ldw	r2,-16764(r4)
   1be80:	1000683a 	jmp	r2
   1be84:	0001c16c 	andhi	zero,zero,1797
   1be88:	0001c3e8 	cmpgeui	zero,zero,1807
   1be8c:	0001c3e8 	cmpgeui	zero,zero,1807
   1be90:	0001c3e8 	cmpgeui	zero,zero,1807
   1be94:	0001c3e8 	cmpgeui	zero,zero,1807
   1be98:	0001c3e8 	cmpgeui	zero,zero,1807
   1be9c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bea0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bea4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bea8:	0001c3e8 	cmpgeui	zero,zero,1807
   1beac:	0001c3e8 	cmpgeui	zero,zero,1807
   1beb0:	0001c3e8 	cmpgeui	zero,zero,1807
   1beb4:	0001c3e8 	cmpgeui	zero,zero,1807
   1beb8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bebc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bec0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bec4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bec8:	0001c3e8 	cmpgeui	zero,zero,1807
   1becc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bed0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bed4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bed8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bedc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bee0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bee4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bee8:	0001c3e8 	cmpgeui	zero,zero,1807
   1beec:	0001c3e8 	cmpgeui	zero,zero,1807
   1bef0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bef4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bef8:	0001c3e8 	cmpgeui	zero,zero,1807
   1befc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf00:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf04:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf08:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf0c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf10:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf14:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf18:	0001c100 	call	1c10 <ad9523_calibrate+0xb8>
   1bf1c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf20:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf24:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf28:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf2c:	0001c3d4 	movui	zero,1807
   1bf30:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf34:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf38:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf3c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf40:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf44:	0001c3b8 	rdprs	zero,zero,1806
   1bf48:	0001c3b8 	rdprs	zero,zero,1806
   1bf4c:	0001c3b8 	rdprs	zero,zero,1806
   1bf50:	0001c3b8 	rdprs	zero,zero,1806
   1bf54:	0001c3b8 	rdprs	zero,zero,1806
   1bf58:	0001c3b8 	rdprs	zero,zero,1806
   1bf5c:	0001c3b8 	rdprs	zero,zero,1806
   1bf60:	0001c3b8 	rdprs	zero,zero,1806
   1bf64:	0001c3b8 	rdprs	zero,zero,1806
   1bf68:	0001c3b8 	rdprs	zero,zero,1806
   1bf6c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf70:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf74:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf78:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf7c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf80:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf84:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf88:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf8c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf90:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf94:	0001c3a0 	cmpeqi	zero,zero,1806
   1bf98:	0001c3e8 	cmpgeui	zero,zero,1807
   1bf9c:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfa0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfa4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfa8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfac:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfb0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfb4:	0001c38c 	andi	zero,zero,1806
   1bfb8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfbc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfc0:	0001c374 	movhi	zero,1805
   1bfc4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfc8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfcc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfd0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfd4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfd8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfdc:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfe0:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfe4:	0001c35c 	xori	zero,zero,1805
   1bfe8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bfec:	0001c3e8 	cmpgeui	zero,zero,1807
   1bff0:	0001c340 	call	1c34 <ad9523_status>
   1bff4:	0001c3e8 	cmpgeui	zero,zero,1807
   1bff8:	0001c3e8 	cmpgeui	zero,zero,1807
   1bffc:	0001c3e8 	cmpgeui	zero,zero,1807
   1c000:	0001c3e8 	cmpgeui	zero,zero,1807
   1c004:	0001c3e8 	cmpgeui	zero,zero,1807
   1c008:	0001c3e8 	cmpgeui	zero,zero,1807
   1c00c:	0001c3e8 	cmpgeui	zero,zero,1807
   1c010:	0001c2ac 	andhi	zero,zero,1802
   1c014:	0001c280 	call	1c28 <ad9523_calibrate+0xd0>
   1c018:	0001c3e8 	cmpgeui	zero,zero,1807
   1c01c:	0001c3e8 	cmpgeui	zero,zero,1807
   1c020:	0001c3e8 	cmpgeui	zero,zero,1807
   1c024:	0001c26c 	andhi	zero,zero,1801
   1c028:	0001c178 	rdprs	zero,zero,1797
   1c02c:	0001c3e8 	cmpgeui	zero,zero,1807
   1c030:	0001c3e8 	cmpgeui	zero,zero,1807
   1c034:	0001c328 	cmpgeui	zero,zero,1804
   1c038:	0001c3e8 	cmpgeui	zero,zero,1807
   1c03c:	0001c300 	call	1c30 <ad9523_calibrate+0xd8>
   1c040:	0001c2ec 	andhi	zero,zero,1803
   1c044:	0001c2d4 	movui	zero,1803
   1c048:	0001c3e8 	cmpgeui	zero,zero,1807
   1c04c:	0001c3e8 	cmpgeui	zero,zero,1807
   1c050:	0001c2cc 	andi	zero,zero,1803
   1c054:	0001c3e8 	cmpgeui	zero,zero,1807
   1c058:	0001c2b8 	rdprs	zero,zero,1802
   1c05c:	0001c3e8 	cmpgeui	zero,zero,1807
   1c060:	0001c3e8 	cmpgeui	zero,zero,1807
   1c064:	0001c35c 	xori	zero,zero,1805
   1c068:	e0800117 	ldw	r2,4(fp)
   1c06c:	00800e0e 	bge	zero,r2,1c0a8 <__ssvfiscanf_r+0x2f0>
   1c070:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c074:	e0c00017 	ldw	r3,0(fp)
   1c078:	19000003 	ldbu	r4,0(r3)
   1c07c:	18c00044 	addi	r3,r3,1
   1c080:	1105883a 	add	r2,r2,r4
   1c084:	10800043 	ldbu	r2,1(r2)
   1c088:	1080020c 	andi	r2,r2,8
   1c08c:	10000a26 	beq	r2,zero,1c0b8 <__ssvfiscanf_r+0x300>
   1c090:	e0800117 	ldw	r2,4(fp)
   1c094:	e0c00015 	stw	r3,0(fp)
   1c098:	84000044 	addi	r16,r16,1
   1c09c:	10bfffc4 	addi	r2,r2,-1
   1c0a0:	e0800115 	stw	r2,4(fp)
   1c0a4:	00bff216 	blt	zero,r2,1c070 <__alt_mem_mcu_subsystem_ram_0+0x77ffc070>
   1c0a8:	e00b883a 	mov	r5,fp
   1c0ac:	a809883a 	mov	r4,r21
   1c0b0:	001bc500 	call	1bc50 <__ssrefill_r>
   1c0b4:	103fee26 	beq	r2,zero,1c070 <__alt_mem_mcu_subsystem_ram_0+0x77ffc070>
   1c0b8:	a027883a 	mov	r19,r20
   1c0bc:	98800003 	ldbu	r2,0(r19)
   1c0c0:	9d000044 	addi	r20,r19,1
   1c0c4:	d8800615 	stw	r2,24(sp)
   1c0c8:	103f5b1e 	bne	r2,zero,1be38 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe38>
   1c0cc:	d8800117 	ldw	r2,4(sp)
   1c0d0:	dfc05c17 	ldw	ra,368(sp)
   1c0d4:	df005b17 	ldw	fp,364(sp)
   1c0d8:	ddc05a17 	ldw	r23,360(sp)
   1c0dc:	dd805917 	ldw	r22,356(sp)
   1c0e0:	dd405817 	ldw	r21,352(sp)
   1c0e4:	dd005717 	ldw	r20,348(sp)
   1c0e8:	dcc05617 	ldw	r19,344(sp)
   1c0ec:	dc805517 	ldw	r18,340(sp)
   1c0f0:	dc405417 	ldw	r17,336(sp)
   1c0f4:	dc005317 	ldw	r16,332(sp)
   1c0f8:	dec05d04 	addi	sp,sp,372
   1c0fc:	f800283a 	ret
   1c100:	9829883a 	mov	r20,r19
   1c104:	e0800117 	ldw	r2,4(fp)
   1c108:	0082260e 	bge	zero,r2,1c9a4 <__ssvfiscanf_r+0xbec>
   1c10c:	e0800017 	ldw	r2,0(fp)
   1c110:	a0ffffc3 	ldbu	r3,-1(r20)
   1c114:	11000003 	ldbu	r4,0(r2)
   1c118:	20ffec1e 	bne	r4,r3,1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1c11c:	e0c00117 	ldw	r3,4(fp)
   1c120:	10800044 	addi	r2,r2,1
   1c124:	e0800015 	stw	r2,0(fp)
   1c128:	18bfffc4 	addi	r2,r3,-1
   1c12c:	e0800115 	stw	r2,4(fp)
   1c130:	84000044 	addi	r16,r16,1
   1c134:	a027883a 	mov	r19,r20
   1c138:	003f3b06 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c13c:	e00b883a 	mov	r5,fp
   1c140:	a809883a 	mov	r4,r21
   1c144:	d8c00415 	stw	r3,16(sp)
   1c148:	001bc500 	call	1bc50 <__ssrefill_r>
   1c14c:	d8c00417 	ldw	r3,16(sp)
   1c150:	1002e026 	beq	r2,zero,1ccd4 <__ssvfiscanf_r+0xf1c>
   1c154:	18026d26 	beq	r3,zero,1cb0c <__ssvfiscanf_r+0xd54>
   1c158:	d8800117 	ldw	r2,4(sp)
   1c15c:	10000326 	beq	r2,zero,1c16c <__ssvfiscanf_r+0x3b4>
   1c160:	e080030b 	ldhu	r2,12(fp)
   1c164:	1080100c 	andi	r2,r2,64
   1c168:	103fd826 	beq	r2,zero,1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1c16c:	00bfffc4 	movi	r2,-1
   1c170:	d8800115 	stw	r2,4(sp)
   1c174:	003fd506 	br	1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1c178:	05c000b4 	movhi	r23,2
   1c17c:	bdfbab04 	addi	r23,r23,-4436
   1c180:	002d883a 	mov	r22,zero
   1c184:	050000c4 	movi	r20,3
   1c188:	e0800117 	ldw	r2,4(fp)
   1c18c:	0080420e 	bge	zero,r2,1c298 <__ssvfiscanf_r+0x4e0>
   1c190:	9080100c 	andi	r2,r18,64
   1c194:	10002626 	beq	r2,zero,1c230 <__ssvfiscanf_r+0x478>
   1c198:	a08000a0 	cmpeqi	r2,r20,2
   1c19c:	10017b1e 	bne	r2,zero,1c78c <__ssvfiscanf_r+0x9d4>
   1c1a0:	a08000e0 	cmpeqi	r2,r20,3
   1c1a4:	1000b61e 	bne	r2,zero,1c480 <__ssvfiscanf_r+0x6c8>
   1c1a8:	a5000060 	cmpeqi	r20,r20,1
   1c1ac:	a0009b1e 	bne	r20,zero,1c41c <__ssvfiscanf_r+0x664>
   1c1b0:	8800011e 	bne	r17,zero,1c1b8 <__ssvfiscanf_r+0x400>
   1c1b4:	04400044 	movi	r17,1
   1c1b8:	90c0040c 	andi	r3,r18,16
   1c1bc:	9080004c 	andi	r2,r18,1
   1c1c0:	d8c00415 	stw	r3,16(sp)
   1c1c4:	10025b1e 	bne	r2,zero,1cb34 <__ssvfiscanf_r+0xd7c>
   1c1c8:	d8800417 	ldw	r2,16(sp)
   1c1cc:	1001e626 	beq	r2,zero,1c968 <__ssvfiscanf_r+0xbb0>
   1c1d0:	0025883a 	mov	r18,zero
   1c1d4:	00000606 	br	1c1f0 <__ssvfiscanf_r+0x438>
   1c1d8:	1887883a 	add	r3,r3,r2
   1c1dc:	e0c00015 	stw	r3,0(fp)
   1c1e0:	90a5883a 	add	r18,r18,r2
   1c1e4:	88a3c83a 	sub	r17,r17,r2
   1c1e8:	001bc500 	call	1bc50 <__ssrefill_r>
   1c1ec:	1002941e 	bne	r2,zero,1cc40 <__ssvfiscanf_r+0xe88>
   1c1f0:	e0800117 	ldw	r2,4(fp)
   1c1f4:	e00b883a 	mov	r5,fp
   1c1f8:	a809883a 	mov	r4,r21
   1c1fc:	e0c00017 	ldw	r3,0(fp)
   1c200:	147ff516 	blt	r2,r17,1c1d8 <__alt_mem_mcu_subsystem_ram_0+0x77ffc1d8>
   1c204:	1445c83a 	sub	r2,r2,r17
   1c208:	1c47883a 	add	r3,r3,r17
   1c20c:	9465883a 	add	r18,r18,r17
   1c210:	e0800115 	stw	r2,4(fp)
   1c214:	e0c00015 	stw	r3,0(fp)
   1c218:	84a1883a 	add	r16,r16,r18
   1c21c:	003f0206 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c220:	e00b883a 	mov	r5,fp
   1c224:	a809883a 	mov	r4,r21
   1c228:	001bc500 	call	1bc50 <__ssrefill_r>
   1c22c:	103fca1e 	bne	r2,zero,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1c230:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c234:	e0c00017 	ldw	r3,0(fp)
   1c238:	19000003 	ldbu	r4,0(r3)
   1c23c:	18c00044 	addi	r3,r3,1
   1c240:	1105883a 	add	r2,r2,r4
   1c244:	10800043 	ldbu	r2,1(r2)
   1c248:	1080020c 	andi	r2,r2,8
   1c24c:	103fd226 	beq	r2,zero,1c198 <__alt_mem_mcu_subsystem_ram_0+0x77ffc198>
   1c250:	e0800117 	ldw	r2,4(fp)
   1c254:	84000044 	addi	r16,r16,1
   1c258:	10bfffc4 	addi	r2,r2,-1
   1c25c:	e0800115 	stw	r2,4(fp)
   1c260:	00bfef0e 	bge	zero,r2,1c220 <__alt_mem_mcu_subsystem_ram_0+0x77ffc220>
   1c264:	e0c00015 	stw	r3,0(fp)
   1c268:	003ff106 	br	1c230 <__alt_mem_mcu_subsystem_ram_0+0x77ffc230>
   1c26c:	a0800043 	ldbu	r2,1(r20)
   1c270:	94800114 	ori	r18,r18,4
   1c274:	9829883a 	mov	r20,r19
   1c278:	11403fcc 	andi	r5,r2,255
   1c27c:	003ef906 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1c280:	e0800117 	ldw	r2,4(fp)
   1c284:	05c000b4 	movhi	r23,2
   1c288:	bdfbab04 	addi	r23,r23,-4436
   1c28c:	05800284 	movi	r22,10
   1c290:	050000c4 	movi	r20,3
   1c294:	00bfbe16 	blt	zero,r2,1c190 <__alt_mem_mcu_subsystem_ram_0+0x77ffc190>
   1c298:	e00b883a 	mov	r5,fp
   1c29c:	a809883a 	mov	r4,r21
   1c2a0:	001bc500 	call	1bc50 <__ssrefill_r>
   1c2a4:	103fba26 	beq	r2,zero,1c190 <__alt_mem_mcu_subsystem_ram_0+0x77ffc190>
   1c2a8:	003fab06 	br	1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1c2ac:	94801014 	ori	r18,r18,64
   1c2b0:	0029883a 	mov	r20,zero
   1c2b4:	003fb406 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c2b8:	05c000b4 	movhi	r23,2
   1c2bc:	bdea3504 	addi	r23,r23,-22316
   1c2c0:	05800284 	movi	r22,10
   1c2c4:	050000c4 	movi	r20,3
   1c2c8:	003faf06 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c2cc:	05000084 	movi	r20,2
   1c2d0:	003fad06 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c2d4:	05c000b4 	movhi	r23,2
   1c2d8:	94808814 	ori	r18,r18,544
   1c2dc:	bdea3504 	addi	r23,r23,-22316
   1c2e0:	05800404 	movi	r22,16
   1c2e4:	050000c4 	movi	r20,3
   1c2e8:	003fa706 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c2ec:	05c000b4 	movhi	r23,2
   1c2f0:	bdea3504 	addi	r23,r23,-22316
   1c2f4:	05800204 	movi	r22,8
   1c2f8:	050000c4 	movi	r20,3
   1c2fc:	003fa206 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c300:	9080040c 	andi	r2,r18,16
   1c304:	103ec81e 	bne	r2,zero,1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c308:	d8c00217 	ldw	r3,8(sp)
   1c30c:	9080010c 	andi	r2,r18,4
   1c310:	19000104 	addi	r4,r3,4
   1c314:	18c00017 	ldw	r3,0(r3)
   1c318:	10025c26 	beq	r2,zero,1cc8c <__ssvfiscanf_r+0xed4>
   1c31c:	1c00000d 	sth	r16,0(r3)
   1c320:	d9000215 	stw	r4,8(sp)
   1c324:	003ec006 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c328:	a1400043 	ldbu	r5,1(r20)
   1c32c:	28801b18 	cmpnei	r2,r5,108
   1c330:	10025126 	beq	r2,zero,1cc78 <__ssvfiscanf_r+0xec0>
   1c334:	94800054 	ori	r18,r18,1
   1c338:	9829883a 	mov	r20,r19
   1c33c:	003ec906 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1c340:	980b883a 	mov	r5,r19
   1c344:	d9001304 	addi	r4,sp,76
   1c348:	001ebac0 	call	1ebac <__sccl>
   1c34c:	1027883a 	mov	r19,r2
   1c350:	94801014 	ori	r18,r18,64
   1c354:	05000044 	movi	r20,1
   1c358:	003f8b06 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c35c:	05c000b4 	movhi	r23,2
   1c360:	94808014 	ori	r18,r18,512
   1c364:	bdea3504 	addi	r23,r23,-22316
   1c368:	05800404 	movi	r22,16
   1c36c:	050000c4 	movi	r20,3
   1c370:	003f8506 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c374:	05c000b4 	movhi	r23,2
   1c378:	94800054 	ori	r18,r18,1
   1c37c:	bdea3504 	addi	r23,r23,-22316
   1c380:	05800204 	movi	r22,8
   1c384:	050000c4 	movi	r20,3
   1c388:	003f7f06 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c38c:	a0800043 	ldbu	r2,1(r20)
   1c390:	94800094 	ori	r18,r18,2
   1c394:	9829883a 	mov	r20,r19
   1c398:	11403fcc 	andi	r5,r2,255
   1c39c:	003eb106 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1c3a0:	05c000b4 	movhi	r23,2
   1c3a4:	94800054 	ori	r18,r18,1
   1c3a8:	bdfbab04 	addi	r23,r23,-4436
   1c3ac:	05800284 	movi	r22,10
   1c3b0:	050000c4 	movi	r20,3
   1c3b4:	003f7406 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c3b8:	8c4002a4 	muli	r17,r17,10
   1c3bc:	a0800043 	ldbu	r2,1(r20)
   1c3c0:	9829883a 	mov	r20,r19
   1c3c4:	8963883a 	add	r17,r17,r5
   1c3c8:	8c7ff404 	addi	r17,r17,-48
   1c3cc:	11403fcc 	andi	r5,r2,255
   1c3d0:	003ea406 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1c3d4:	a0800043 	ldbu	r2,1(r20)
   1c3d8:	94800414 	ori	r18,r18,16
   1c3dc:	9829883a 	mov	r20,r19
   1c3e0:	11403fcc 	andi	r5,r2,255
   1c3e4:	003e9f06 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1c3e8:	d9400315 	stw	r5,12(sp)
   1c3ec:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c3f0:	d9400317 	ldw	r5,12(sp)
   1c3f4:	05c000b4 	movhi	r23,2
   1c3f8:	1145883a 	add	r2,r2,r5
   1c3fc:	10800043 	ldbu	r2,1(r2)
   1c400:	108000cc 	andi	r2,r2,3
   1c404:	10800058 	cmpnei	r2,r2,1
   1c408:	10021626 	beq	r2,zero,1cc64 <__ssvfiscanf_r+0xeac>
   1c40c:	bdfbab04 	addi	r23,r23,-4436
   1c410:	05800284 	movi	r22,10
   1c414:	050000c4 	movi	r20,3
   1c418:	003f5b06 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1c41c:	8800011e 	bne	r17,zero,1c424 <__ssvfiscanf_r+0x66c>
   1c420:	047fffc4 	movi	r17,-1
   1c424:	9480040c 	andi	r18,r18,16
   1c428:	e0800017 	ldw	r2,0(fp)
   1c42c:	90011626 	beq	r18,zero,1c888 <__ssvfiscanf_r+0xad0>
   1c430:	0025883a 	mov	r18,zero
   1c434:	10c00003 	ldbu	r3,0(r2)
   1c438:	d9005304 	addi	r4,sp,332
   1c43c:	10800044 	addi	r2,r2,1
   1c440:	20c7883a 	add	r3,r4,r3
   1c444:	18ffc007 	ldb	r3,-256(r3)
   1c448:	1801b726 	beq	r3,zero,1cb28 <__ssvfiscanf_r+0xd70>
   1c44c:	e0c00117 	ldw	r3,4(fp)
   1c450:	e0800015 	stw	r2,0(fp)
   1c454:	94800044 	addi	r18,r18,1
   1c458:	18ffffc4 	addi	r3,r3,-1
   1c45c:	e0c00115 	stw	r3,4(fp)
   1c460:	8cbf6d26 	beq	r17,r18,1c218 <__alt_mem_mcu_subsystem_ram_0+0x77ffc218>
   1c464:	00fff316 	blt	zero,r3,1c434 <__alt_mem_mcu_subsystem_ram_0+0x77ffc434>
   1c468:	e00b883a 	mov	r5,fp
   1c46c:	a809883a 	mov	r4,r21
   1c470:	001bc500 	call	1bc50 <__ssrefill_r>
   1c474:	103f681e 	bne	r2,zero,1c218 <__alt_mem_mcu_subsystem_ram_0+0x77ffc218>
   1c478:	e0800017 	ldw	r2,0(fp)
   1c47c:	003fed06 	br	1c434 <__alt_mem_mcu_subsystem_ram_0+0x77ffc434>
   1c480:	88bfffc4 	addi	r2,r17,-1
   1c484:	108009f0 	cmpltui	r2,r2,39
   1c488:	1000fd1e 	bne	r2,zero,1c880 <__ssvfiscanf_r+0xac8>
   1c48c:	88bff644 	addi	r2,r17,-39
   1c490:	d8800415 	stw	r2,16(sp)
   1c494:	044009c4 	movi	r17,39
   1c498:	95036014 	ori	r20,r18,3456
   1c49c:	d8000315 	stw	zero,12(sp)
   1c4a0:	dc800904 	addi	r18,sp,36
   1c4a4:	e0c00017 	ldw	r3,0(fp)
   1c4a8:	19400003 	ldbu	r5,0(r3)
   1c4ac:	28bff544 	addi	r2,r5,-43
   1c4b0:	10803fcc 	andi	r2,r2,255
   1c4b4:	110013a8 	cmpgeui	r4,r2,78
   1c4b8:	2000641e 	bne	r4,zero,1c64c <__ssvfiscanf_r+0x894>
   1c4bc:	100490ba 	slli	r2,r2,2
   1c4c0:	010000b4 	movhi	r4,2
   1c4c4:	1109883a 	add	r4,r2,r4
   1c4c8:	20b13417 	ldw	r2,-15152(r4)
   1c4cc:	1000683a 	jmp	r2
   1c4d0:	0001c778 	rdprs	zero,zero,1821
   1c4d4:	0001c64c 	andi	zero,zero,1817
   1c4d8:	0001c778 	rdprs	zero,zero,1821
   1c4dc:	0001c64c 	andi	zero,zero,1817
   1c4e0:	0001c64c 	andi	zero,zero,1817
   1c4e4:	0001c710 	cmplti	zero,zero,1820
   1c4e8:	0001c6f4 	movhi	zero,1819
   1c4ec:	0001c6f4 	movhi	zero,1819
   1c4f0:	0001c6f4 	movhi	zero,1819
   1c4f4:	0001c6f4 	movhi	zero,1819
   1c4f8:	0001c6f4 	movhi	zero,1819
   1c4fc:	0001c6f4 	movhi	zero,1819
   1c500:	0001c6f4 	movhi	zero,1819
   1c504:	0001c6d8 	cmpnei	zero,zero,1819
   1c508:	0001c6d8 	cmpnei	zero,zero,1819
   1c50c:	0001c64c 	andi	zero,zero,1817
   1c510:	0001c64c 	andi	zero,zero,1817
   1c514:	0001c64c 	andi	zero,zero,1817
   1c518:	0001c64c 	andi	zero,zero,1817
   1c51c:	0001c64c 	andi	zero,zero,1817
   1c520:	0001c64c 	andi	zero,zero,1817
   1c524:	0001c64c 	andi	zero,zero,1817
   1c528:	0001c6c4 	movi	zero,1819
   1c52c:	0001c6c4 	movi	zero,1819
   1c530:	0001c6c4 	movi	zero,1819
   1c534:	0001c6c4 	movi	zero,1819
   1c538:	0001c6c4 	movi	zero,1819
   1c53c:	0001c6c4 	movi	zero,1819
   1c540:	0001c64c 	andi	zero,zero,1817
   1c544:	0001c64c 	andi	zero,zero,1817
   1c548:	0001c64c 	andi	zero,zero,1817
   1c54c:	0001c64c 	andi	zero,zero,1817
   1c550:	0001c64c 	andi	zero,zero,1817
   1c554:	0001c64c 	andi	zero,zero,1817
   1c558:	0001c64c 	andi	zero,zero,1817
   1c55c:	0001c64c 	andi	zero,zero,1817
   1c560:	0001c64c 	andi	zero,zero,1817
   1c564:	0001c64c 	andi	zero,zero,1817
   1c568:	0001c64c 	andi	zero,zero,1817
   1c56c:	0001c64c 	andi	zero,zero,1817
   1c570:	0001c64c 	andi	zero,zero,1817
   1c574:	0001c64c 	andi	zero,zero,1817
   1c578:	0001c64c 	andi	zero,zero,1817
   1c57c:	0001c64c 	andi	zero,zero,1817
   1c580:	0001c64c 	andi	zero,zero,1817
   1c584:	0001c608 	cmpgei	zero,zero,1816
   1c588:	0001c64c 	andi	zero,zero,1817
   1c58c:	0001c64c 	andi	zero,zero,1817
   1c590:	0001c64c 	andi	zero,zero,1817
   1c594:	0001c64c 	andi	zero,zero,1817
   1c598:	0001c64c 	andi	zero,zero,1817
   1c59c:	0001c64c 	andi	zero,zero,1817
   1c5a0:	0001c64c 	andi	zero,zero,1817
   1c5a4:	0001c64c 	andi	zero,zero,1817
   1c5a8:	0001c6c4 	movi	zero,1819
   1c5ac:	0001c6c4 	movi	zero,1819
   1c5b0:	0001c6c4 	movi	zero,1819
   1c5b4:	0001c6c4 	movi	zero,1819
   1c5b8:	0001c6c4 	movi	zero,1819
   1c5bc:	0001c6c4 	movi	zero,1819
   1c5c0:	0001c64c 	andi	zero,zero,1817
   1c5c4:	0001c64c 	andi	zero,zero,1817
   1c5c8:	0001c64c 	andi	zero,zero,1817
   1c5cc:	0001c64c 	andi	zero,zero,1817
   1c5d0:	0001c64c 	andi	zero,zero,1817
   1c5d4:	0001c64c 	andi	zero,zero,1817
   1c5d8:	0001c64c 	andi	zero,zero,1817
   1c5dc:	0001c64c 	andi	zero,zero,1817
   1c5e0:	0001c64c 	andi	zero,zero,1817
   1c5e4:	0001c64c 	andi	zero,zero,1817
   1c5e8:	0001c64c 	andi	zero,zero,1817
   1c5ec:	0001c64c 	andi	zero,zero,1817
   1c5f0:	0001c64c 	andi	zero,zero,1817
   1c5f4:	0001c64c 	andi	zero,zero,1817
   1c5f8:	0001c64c 	andi	zero,zero,1817
   1c5fc:	0001c64c 	andi	zero,zero,1817
   1c600:	0001c64c 	andi	zero,zero,1817
   1c604:	0001c608 	cmpgei	zero,zero,1816
   1c608:	a081800c 	andi	r2,r20,1536
   1c60c:	10808018 	cmpnei	r2,r2,512
   1c610:	10000e1e 	bne	r2,zero,1c64c <__ssvfiscanf_r+0x894>
   1c614:	00bf7fc4 	movi	r2,-513
   1c618:	a094703a 	and	r10,r20,r2
   1c61c:	55014014 	ori	r20,r10,1280
   1c620:	05800404 	movi	r22,16
   1c624:	e0800117 	ldw	r2,4(fp)
   1c628:	91400005 	stb	r5,0(r18)
   1c62c:	94800044 	addi	r18,r18,1
   1c630:	10bfffc4 	addi	r2,r2,-1
   1c634:	e0800115 	stw	r2,4(fp)
   1c638:	00804a0e 	bge	zero,r2,1c764 <__ssvfiscanf_r+0x9ac>
   1c63c:	18c00044 	addi	r3,r3,1
   1c640:	e0c00015 	stw	r3,0(fp)
   1c644:	8c7fffc4 	addi	r17,r17,-1
   1c648:	883f961e 	bne	r17,zero,1c4a4 <__alt_mem_mcu_subsystem_ram_0+0x77ffc4a4>
   1c64c:	a080400c 	andi	r2,r20,256
   1c650:	10000426 	beq	r2,zero,1c664 <__ssvfiscanf_r+0x8ac>
   1c654:	d8800904 	addi	r2,sp,36
   1c658:	14817c36 	bltu	r2,r18,1cc4c <__ssvfiscanf_r+0xe94>
   1c65c:	d8800904 	addi	r2,sp,36
   1c660:	90be9a26 	beq	r18,r2,1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1c664:	a080040c 	andi	r2,r20,16
   1c668:	1000101e 	bne	r2,zero,1c6ac <__ssvfiscanf_r+0x8f4>
   1c66c:	a809883a 	mov	r4,r21
   1c670:	b00f883a 	mov	r7,r22
   1c674:	000d883a 	mov	r6,zero
   1c678:	d9400904 	addi	r5,sp,36
   1c67c:	90000005 	stb	zero,0(r18)
   1c680:	b83ee83a 	callr	r23
   1c684:	d9000217 	ldw	r4,8(sp)
   1c688:	a0c0080c 	andi	r3,r20,32
   1c68c:	24400104 	addi	r17,r4,4
   1c690:	1800a226 	beq	r3,zero,1c91c <__ssvfiscanf_r+0xb64>
   1c694:	20c00017 	ldw	r3,0(r4)
   1c698:	18800015 	stw	r2,0(r3)
   1c69c:	d8800117 	ldw	r2,4(sp)
   1c6a0:	dc400215 	stw	r17,8(sp)
   1c6a4:	10800044 	addi	r2,r2,1
   1c6a8:	d8800115 	stw	r2,4(sp)
   1c6ac:	d8800904 	addi	r2,sp,36
   1c6b0:	9093c83a 	sub	r9,r18,r2
   1c6b4:	d8800317 	ldw	r2,12(sp)
   1c6b8:	48a9883a 	add	r20,r9,r2
   1c6bc:	8521883a 	add	r16,r16,r20
   1c6c0:	003dd906 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c6c4:	b08002d0 	cmplti	r2,r22,11
   1c6c8:	103fe01e 	bne	r2,zero,1c64c <__alt_mem_mcu_subsystem_ram_0+0x77ffc64c>
   1c6cc:	00bd1fc4 	movi	r2,-2945
   1c6d0:	a0a8703a 	and	r20,r20,r2
   1c6d4:	003fd306 	br	1c624 <__alt_mem_mcu_subsystem_ram_0+0x77ffc624>
   1c6d8:	b5ad883a 	add	r22,r22,r22
   1c6dc:	008000b4 	movhi	r2,2
   1c6e0:	b085883a 	add	r2,r22,r2
   1c6e4:	159c360f 	ldh	r22,28888(r2)
   1c6e8:	b0800250 	cmplti	r2,r22,9
   1c6ec:	103ff726 	beq	r2,zero,1c6cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc6cc>
   1c6f0:	003fd606 	br	1c64c <__alt_mem_mcu_subsystem_ram_0+0x77ffc64c>
   1c6f4:	b5ad883a 	add	r22,r22,r22
   1c6f8:	008000b4 	movhi	r2,2
   1c6fc:	b085883a 	add	r2,r22,r2
   1c700:	159c360f 	ldh	r22,28888(r2)
   1c704:	00bd1fc4 	movi	r2,-2945
   1c708:	a0a8703a 	and	r20,r20,r2
   1c70c:	003fc506 	br	1c624 <__alt_mem_mcu_subsystem_ram_0+0x77ffc624>
   1c710:	a082000c 	andi	r2,r20,2048
   1c714:	103fc326 	beq	r2,zero,1c624 <__alt_mem_mcu_subsystem_ram_0+0x77ffc624>
   1c718:	b000021e 	bne	r22,zero,1c724 <__ssvfiscanf_r+0x96c>
   1c71c:	a5008014 	ori	r20,r20,512
   1c720:	05800204 	movi	r22,8
   1c724:	a081000c 	andi	r2,r20,1024
   1c728:	1000e11e 	bne	r2,zero,1cab0 <__ssvfiscanf_r+0xcf8>
   1c72c:	00bf1fc4 	movi	r2,-897
   1c730:	a0a8703a 	and	r20,r20,r2
   1c734:	d8800417 	ldw	r2,16(sp)
   1c738:	10000326 	beq	r2,zero,1c748 <__ssvfiscanf_r+0x990>
   1c73c:	10bfffc4 	addi	r2,r2,-1
   1c740:	d8800415 	stw	r2,16(sp)
   1c744:	8c400044 	addi	r17,r17,1
   1c748:	d8800317 	ldw	r2,12(sp)
   1c74c:	10800044 	addi	r2,r2,1
   1c750:	d8800315 	stw	r2,12(sp)
   1c754:	e0800117 	ldw	r2,4(fp)
   1c758:	10bfffc4 	addi	r2,r2,-1
   1c75c:	e0800115 	stw	r2,4(fp)
   1c760:	00bfb616 	blt	zero,r2,1c63c <__alt_mem_mcu_subsystem_ram_0+0x77ffc63c>
   1c764:	e00b883a 	mov	r5,fp
   1c768:	a809883a 	mov	r4,r21
   1c76c:	001bc500 	call	1bc50 <__ssrefill_r>
   1c770:	103fb426 	beq	r2,zero,1c644 <__alt_mem_mcu_subsystem_ram_0+0x77ffc644>
   1c774:	003fb506 	br	1c64c <__alt_mem_mcu_subsystem_ram_0+0x77ffc64c>
   1c778:	a080200c 	andi	r2,r20,128
   1c77c:	103fb326 	beq	r2,zero,1c64c <__alt_mem_mcu_subsystem_ram_0+0x77ffc64c>
   1c780:	00bfdfc4 	movi	r2,-129
   1c784:	a0a8703a 	and	r20,r20,r2
   1c788:	003fa606 	br	1c624 <__alt_mem_mcu_subsystem_ram_0+0x77ffc624>
   1c78c:	8800011e 	bne	r17,zero,1c794 <__ssvfiscanf_r+0x9dc>
   1c790:	047fffc4 	movi	r17,-1
   1c794:	9500004c 	andi	r20,r18,1
   1c798:	9480040c 	andi	r18,r18,16
   1c79c:	a000861e 	bne	r20,zero,1c9b8 <__ssvfiscanf_r+0xc00>
   1c7a0:	9000271e 	bne	r18,zero,1c840 <__ssvfiscanf_r+0xa88>
   1c7a4:	d8800217 	ldw	r2,8(sp)
   1c7a8:	14800017 	ldw	r18,0(r2)
   1c7ac:	10800104 	addi	r2,r2,4
   1c7b0:	d8800215 	stw	r2,8(sp)
   1c7b4:	9029883a 	mov	r20,r18
   1c7b8:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c7bc:	e1000017 	ldw	r4,0(fp)
   1c7c0:	8c7fffc4 	addi	r17,r17,-1
   1c7c4:	20c00003 	ldbu	r3,0(r4)
   1c7c8:	21400044 	addi	r5,r4,1
   1c7cc:	10c5883a 	add	r2,r2,r3
   1c7d0:	10800043 	ldbu	r2,1(r2)
   1c7d4:	1080020c 	andi	r2,r2,8
   1c7d8:	10000e1e 	bne	r2,zero,1c814 <__ssvfiscanf_r+0xa5c>
   1c7dc:	e0800117 	ldw	r2,4(fp)
   1c7e0:	e1400015 	stw	r5,0(fp)
   1c7e4:	a5000044 	addi	r20,r20,1
   1c7e8:	10bfffc4 	addi	r2,r2,-1
   1c7ec:	e0800115 	stw	r2,4(fp)
   1c7f0:	20800003 	ldbu	r2,0(r4)
   1c7f4:	a0bfffc5 	stb	r2,-1(r20)
   1c7f8:	88000626 	beq	r17,zero,1c814 <__ssvfiscanf_r+0xa5c>
   1c7fc:	e0800117 	ldw	r2,4(fp)
   1c800:	00bfed16 	blt	zero,r2,1c7b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffc7b8>
   1c804:	e00b883a 	mov	r5,fp
   1c808:	a809883a 	mov	r4,r21
   1c80c:	001bc500 	call	1bc50 <__ssrefill_r>
   1c810:	103fe926 	beq	r2,zero,1c7b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffc7b8>
   1c814:	d8800117 	ldw	r2,4(sp)
   1c818:	a4a5c83a 	sub	r18,r20,r18
   1c81c:	a0000005 	stb	zero,0(r20)
   1c820:	10800044 	addi	r2,r2,1
   1c824:	84a1883a 	add	r16,r16,r18
   1c828:	d8800115 	stw	r2,4(sp)
   1c82c:	003d7e06 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c830:	e00b883a 	mov	r5,fp
   1c834:	a809883a 	mov	r4,r21
   1c838:	001bc500 	call	1bc50 <__ssrefill_r>
   1c83c:	103f9f1e 	bne	r2,zero,1c6bc <__alt_mem_mcu_subsystem_ram_0+0x77ffc6bc>
   1c840:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c844:	e0c00017 	ldw	r3,0(fp)
   1c848:	19000003 	ldbu	r4,0(r3)
   1c84c:	18c00044 	addi	r3,r3,1
   1c850:	1105883a 	add	r2,r2,r4
   1c854:	10800043 	ldbu	r2,1(r2)
   1c858:	1080020c 	andi	r2,r2,8
   1c85c:	103f971e 	bne	r2,zero,1c6bc <__alt_mem_mcu_subsystem_ram_0+0x77ffc6bc>
   1c860:	e0800117 	ldw	r2,4(fp)
   1c864:	e0c00015 	stw	r3,0(fp)
   1c868:	a5000044 	addi	r20,r20,1
   1c86c:	10bfffc4 	addi	r2,r2,-1
   1c870:	e0800115 	stw	r2,4(fp)
   1c874:	8d3f9126 	beq	r17,r20,1c6bc <__alt_mem_mcu_subsystem_ram_0+0x77ffc6bc>
   1c878:	00bff116 	blt	zero,r2,1c840 <__alt_mem_mcu_subsystem_ram_0+0x77ffc840>
   1c87c:	003fec06 	br	1c830 <__alt_mem_mcu_subsystem_ram_0+0x77ffc830>
   1c880:	d8000415 	stw	zero,16(sp)
   1c884:	003f0406 	br	1c498 <__alt_mem_mcu_subsystem_ram_0+0x77ffc498>
   1c888:	d8c00217 	ldw	r3,8(sp)
   1c88c:	1c800017 	ldw	r18,0(r3)
   1c890:	18c00104 	addi	r3,r3,4
   1c894:	d8c00215 	stw	r3,8(sp)
   1c898:	9029883a 	mov	r20,r18
   1c89c:	00000106 	br	1c8a4 <__ssvfiscanf_r+0xaec>
   1c8a0:	e0800017 	ldw	r2,0(fp)
   1c8a4:	10c00003 	ldbu	r3,0(r2)
   1c8a8:	d9405304 	addi	r5,sp,332
   1c8ac:	11000044 	addi	r4,r2,1
   1c8b0:	28c7883a 	add	r3,r5,r3
   1c8b4:	18ffc007 	ldb	r3,-256(r3)
   1c8b8:	8c7fffc4 	addi	r17,r17,-1
   1c8bc:	18000f26 	beq	r3,zero,1c8fc <__ssvfiscanf_r+0xb44>
   1c8c0:	e0c00117 	ldw	r3,4(fp)
   1c8c4:	e1000015 	stw	r4,0(fp)
   1c8c8:	a5000044 	addi	r20,r20,1
   1c8cc:	18ffffc4 	addi	r3,r3,-1
   1c8d0:	e0c00115 	stw	r3,4(fp)
   1c8d4:	10800003 	ldbu	r2,0(r2)
   1c8d8:	a0bfffc5 	stb	r2,-1(r20)
   1c8dc:	88000726 	beq	r17,zero,1c8fc <__ssvfiscanf_r+0xb44>
   1c8e0:	e0800117 	ldw	r2,4(fp)
   1c8e4:	00bfee16 	blt	zero,r2,1c8a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc8a0>
   1c8e8:	e00b883a 	mov	r5,fp
   1c8ec:	a809883a 	mov	r4,r21
   1c8f0:	001bc500 	call	1bc50 <__ssrefill_r>
   1c8f4:	103fea26 	beq	r2,zero,1c8a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc8a0>
   1c8f8:	953e1726 	beq	r18,r20,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1c8fc:	a4a5c83a 	sub	r18,r20,r18
   1c900:	903df226 	beq	r18,zero,1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1c904:	d8800117 	ldw	r2,4(sp)
   1c908:	a0000005 	stb	zero,0(r20)
   1c90c:	84a1883a 	add	r16,r16,r18
   1c910:	10800044 	addi	r2,r2,1
   1c914:	d8800115 	stw	r2,4(sp)
   1c918:	003d4306 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c91c:	a0c0010c 	andi	r3,r20,4
   1c920:	18005f1e 	bne	r3,zero,1caa0 <__ssvfiscanf_r+0xce8>
   1c924:	a0c0004c 	andi	r3,r20,1
   1c928:	18006a1e 	bne	r3,zero,1cad4 <__ssvfiscanf_r+0xd1c>
   1c92c:	a280008c 	andi	r10,r20,2
   1c930:	50006826 	beq	r10,zero,1cad4 <__ssvfiscanf_r+0xd1c>
   1c934:	008000b4 	movhi	r2,2
   1c938:	10aa3504 	addi	r2,r2,-22316
   1c93c:	b00f883a 	mov	r7,r22
   1c940:	000d883a 	mov	r6,zero
   1c944:	d9400904 	addi	r5,sp,36
   1c948:	a809883a 	mov	r4,r21
   1c94c:	b880e526 	beq	r23,r2,1cce4 <__ssvfiscanf_r+0xf2c>
   1c950:	001f2280 	call	1f228 <_strtoll_r>
   1c954:	d9000217 	ldw	r4,8(sp)
   1c958:	21000017 	ldw	r4,0(r4)
   1c95c:	20800015 	stw	r2,0(r4)
   1c960:	20c00115 	stw	r3,4(r4)
   1c964:	003f4d06 	br	1c69c <__alt_mem_mcu_subsystem_ram_0+0x77ffc69c>
   1c968:	dc800217 	ldw	r18,8(sp)
   1c96c:	df000015 	stw	fp,0(sp)
   1c970:	880f883a 	mov	r7,r17
   1c974:	91400017 	ldw	r5,0(r18)
   1c978:	01800044 	movi	r6,1
   1c97c:	a809883a 	mov	r4,r21
   1c980:	001bcc00 	call	1bcc0 <_sfread_r>
   1c984:	90c00104 	addi	r3,r18,4
   1c988:	103df326 	beq	r2,zero,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1c98c:	80a1883a 	add	r16,r16,r2
   1c990:	d8800117 	ldw	r2,4(sp)
   1c994:	d8c00215 	stw	r3,8(sp)
   1c998:	10800044 	addi	r2,r2,1
   1c99c:	d8800115 	stw	r2,4(sp)
   1c9a0:	003d2106 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1c9a4:	e00b883a 	mov	r5,fp
   1c9a8:	a809883a 	mov	r4,r21
   1c9ac:	001bc500 	call	1bc50 <__ssrefill_r>
   1c9b0:	103dd626 	beq	r2,zero,1c10c <__alt_mem_mcu_subsystem_ram_0+0x77ffc10c>
   1c9b4:	003de806 	br	1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1c9b8:	d8800704 	addi	r2,sp,28
   1c9bc:	01800204 	movi	r6,8
   1c9c0:	000b883a 	mov	r5,zero
   1c9c4:	1009883a 	mov	r4,r2
   1c9c8:	d8800515 	stw	r2,20(sp)
   1c9cc:	00107280 	call	10728 <memset>
   1c9d0:	90003a26 	beq	r18,zero,1cabc <__ssvfiscanf_r+0xd04>
   1c9d4:	d8800604 	addi	r2,sp,24
   1c9d8:	d8800315 	stw	r2,12(sp)
   1c9dc:	0029883a 	mov	r20,zero
   1c9e0:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1c9e4:	e0c00017 	ldw	r3,0(fp)
   1c9e8:	18c00003 	ldbu	r3,0(r3)
   1c9ec:	10c5883a 	add	r2,r2,r3
   1c9f0:	10800043 	ldbu	r2,1(r2)
   1c9f4:	1080020c 	andi	r2,r2,8
   1c9f8:	1000441e 	bne	r2,zero,1cb0c <__ssvfiscanf_r+0xd54>
   1c9fc:	88004326 	beq	r17,zero,1cb0c <__ssvfiscanf_r+0xd54>
   1ca00:	000fd780 	call	fd78 <__locale_mb_cur_max>
   1ca04:	153dd426 	beq	r2,r20,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1ca08:	e0800017 	ldw	r2,0(fp)
   1ca0c:	e1000117 	ldw	r4,4(fp)
   1ca10:	d9405304 	addi	r5,sp,332
   1ca14:	12400003 	ldbu	r9,0(r2)
   1ca18:	10800044 	addi	r2,r2,1
   1ca1c:	e0800015 	stw	r2,0(fp)
   1ca20:	d8800517 	ldw	r2,20(sp)
   1ca24:	213fffc4 	addi	r4,r4,-1
   1ca28:	a0c00044 	addi	r3,r20,1
   1ca2c:	e1000115 	stw	r4,4(fp)
   1ca30:	2d29883a 	add	r20,r5,r20
   1ca34:	d9400317 	ldw	r5,12(sp)
   1ca38:	d8800015 	stw	r2,0(sp)
   1ca3c:	a809883a 	mov	r4,r21
   1ca40:	180f883a 	mov	r7,r3
   1ca44:	d9800904 	addi	r6,sp,36
   1ca48:	a27fb605 	stb	r9,-296(r20)
   1ca4c:	d8c00415 	stw	r3,16(sp)
   1ca50:	001e9e00 	call	1e9e0 <_mbrtowc_r>
   1ca54:	113fffe0 	cmpeqi	r4,r2,-1
   1ca58:	203dbf1e 	bne	r4,zero,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1ca5c:	d8c00417 	ldw	r3,16(sp)
   1ca60:	1000981e 	bne	r2,zero,1ccc4 <__ssvfiscanf_r+0xf0c>
   1ca64:	d8800317 	ldw	r2,12(sp)
   1ca68:	0009883a 	mov	r4,zero
   1ca6c:	10000015 	stw	zero,0(r2)
   1ca70:	d8c00415 	stw	r3,16(sp)
   1ca74:	001e93c0 	call	1e93c <iswspace>
   1ca78:	d8c00417 	ldw	r3,16(sp)
   1ca7c:	1000191e 	bne	r2,zero,1cae4 <__ssvfiscanf_r+0xd2c>
   1ca80:	80e1883a 	add	r16,r16,r3
   1ca84:	8c7fffc4 	addi	r17,r17,-1
   1ca88:	9000941e 	bne	r18,zero,1ccdc <__ssvfiscanf_r+0xf24>
   1ca8c:	d8800317 	ldw	r2,12(sp)
   1ca90:	0007883a 	mov	r3,zero
   1ca94:	10800104 	addi	r2,r2,4
   1ca98:	d8800315 	stw	r2,12(sp)
   1ca9c:	00008b06 	br	1cccc <__ssvfiscanf_r+0xf14>
   1caa0:	d8c00217 	ldw	r3,8(sp)
   1caa4:	18c00017 	ldw	r3,0(r3)
   1caa8:	1880000d 	sth	r2,0(r3)
   1caac:	003efb06 	br	1c69c <__alt_mem_mcu_subsystem_ram_0+0x77ffc69c>
   1cab0:	00be9fc4 	movi	r2,-1409
   1cab4:	a0a8703a 	and	r20,r20,r2
   1cab8:	003eda06 	br	1c624 <__alt_mem_mcu_subsystem_ram_0+0x77ffc624>
   1cabc:	d8800217 	ldw	r2,8(sp)
   1cac0:	10c00017 	ldw	r3,0(r2)
   1cac4:	10800104 	addi	r2,r2,4
   1cac8:	d8800215 	stw	r2,8(sp)
   1cacc:	d8c00315 	stw	r3,12(sp)
   1cad0:	003fc206 	br	1c9dc <__alt_mem_mcu_subsystem_ram_0+0x77ffc9dc>
   1cad4:	d8c00217 	ldw	r3,8(sp)
   1cad8:	18c00017 	ldw	r3,0(r3)
   1cadc:	18800015 	stw	r2,0(r3)
   1cae0:	003eee06 	br	1c69c <__alt_mem_mcu_subsystem_ram_0+0x77ffc69c>
   1cae4:	18000926 	beq	r3,zero,1cb0c <__ssvfiscanf_r+0xd54>
   1cae8:	d8800904 	addi	r2,sp,36
   1caec:	10e3883a 	add	r17,r2,r3
   1caf0:	897fffc3 	ldbu	r5,-1(r17)
   1caf4:	e00d883a 	mov	r6,fp
   1caf8:	a809883a 	mov	r4,r21
   1cafc:	001bb600 	call	1bb60 <_sungetc_r>
   1cb00:	8c7fffc4 	addi	r17,r17,-1
   1cb04:	d8800904 	addi	r2,sp,36
   1cb08:	147ff91e 	bne	r2,r17,1caf0 <__alt_mem_mcu_subsystem_ram_0+0x77ffcaf0>
   1cb0c:	903cc61e 	bne	r18,zero,1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1cb10:	d8800317 	ldw	r2,12(sp)
   1cb14:	10000015 	stw	zero,0(r2)
   1cb18:	d8800117 	ldw	r2,4(sp)
   1cb1c:	10800044 	addi	r2,r2,1
   1cb20:	d8800115 	stw	r2,4(sp)
   1cb24:	003cc006 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1cb28:	903d6826 	beq	r18,zero,1c0cc <__alt_mem_mcu_subsystem_ram_0+0x77ffc0cc>
   1cb2c:	84a1883a 	add	r16,r16,r18
   1cb30:	003cbd06 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1cb34:	d8800704 	addi	r2,sp,28
   1cb38:	01800204 	movi	r6,8
   1cb3c:	000b883a 	mov	r5,zero
   1cb40:	1009883a 	mov	r4,r2
   1cb44:	d8800515 	stw	r2,20(sp)
   1cb48:	00107280 	call	10728 <memset>
   1cb4c:	d8800417 	ldw	r2,16(sp)
   1cb50:	10005a1e 	bne	r2,zero,1ccbc <__ssvfiscanf_r+0xf04>
   1cb54:	d8800217 	ldw	r2,8(sp)
   1cb58:	14800017 	ldw	r18,0(r2)
   1cb5c:	10800104 	addi	r2,r2,4
   1cb60:	d8800215 	stw	r2,8(sp)
   1cb64:	0029883a 	mov	r20,zero
   1cb68:	000fd780 	call	fd78 <__locale_mb_cur_max>
   1cb6c:	153d7a26 	beq	r2,r20,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1cb70:	e0800017 	ldw	r2,0(fp)
   1cb74:	e1000117 	ldw	r4,4(fp)
   1cb78:	d8c05304 	addi	r3,sp,332
   1cb7c:	12800003 	ldbu	r10,0(r2)
   1cb80:	10800044 	addi	r2,r2,1
   1cb84:	e0800015 	stw	r2,0(fp)
   1cb88:	d8800517 	ldw	r2,20(sp)
   1cb8c:	213fffc4 	addi	r4,r4,-1
   1cb90:	e1000115 	stw	r4,4(fp)
   1cb94:	a2400044 	addi	r9,r20,1
   1cb98:	1d07883a 	add	r3,r3,r20
   1cb9c:	d8800015 	stw	r2,0(sp)
   1cba0:	1abfb605 	stb	r10,-296(r3)
   1cba4:	480f883a 	mov	r7,r9
   1cba8:	d9800904 	addi	r6,sp,36
   1cbac:	900b883a 	mov	r5,r18
   1cbb0:	a809883a 	mov	r4,r21
   1cbb4:	da400315 	stw	r9,12(sp)
   1cbb8:	001e9e00 	call	1e9e0 <_mbrtowc_r>
   1cbbc:	10ffffe0 	cmpeqi	r3,r2,-1
   1cbc0:	183d651e 	bne	r3,zero,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1cbc4:	da400317 	ldw	r9,12(sp)
   1cbc8:	1000131e 	bne	r2,zero,1cc18 <__ssvfiscanf_r+0xe60>
   1cbcc:	d8800417 	ldw	r2,16(sp)
   1cbd0:	8261883a 	add	r16,r16,r9
   1cbd4:	8c7fffc4 	addi	r17,r17,-1
   1cbd8:	1000171e 	bne	r2,zero,1cc38 <__ssvfiscanf_r+0xe80>
   1cbdc:	90000015 	stw	zero,0(r18)
   1cbe0:	94800104 	addi	r18,r18,4
   1cbe4:	0029883a 	mov	r20,zero
   1cbe8:	e0800117 	ldw	r2,4(fp)
   1cbec:	0080040e 	bge	zero,r2,1cc00 <__ssvfiscanf_r+0xe48>
   1cbf0:	883fdd1e 	bne	r17,zero,1cb68 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb68>
   1cbf4:	d8800417 	ldw	r2,16(sp)
   1cbf8:	103c8b1e 	bne	r2,zero,1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1cbfc:	003fc606 	br	1cb18 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb18>
   1cc00:	e00b883a 	mov	r5,fp
   1cc04:	a809883a 	mov	r4,r21
   1cc08:	001bc500 	call	1bc50 <__ssrefill_r>
   1cc0c:	103ff826 	beq	r2,zero,1cbf0 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbf0>
   1cc10:	a03ff826 	beq	r20,zero,1cbf4 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbf4>
   1cc14:	003d5006 	br	1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1cc18:	10bfffa0 	cmpeqi	r2,r2,-2
   1cc1c:	10000226 	beq	r2,zero,1cc28 <__ssvfiscanf_r+0xe70>
   1cc20:	4829883a 	mov	r20,r9
   1cc24:	003ff006 	br	1cbe8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbe8>
   1cc28:	d8800417 	ldw	r2,16(sp)
   1cc2c:	8261883a 	add	r16,r16,r9
   1cc30:	8c7fffc4 	addi	r17,r17,-1
   1cc34:	103fea26 	beq	r2,zero,1cbe0 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbe0>
   1cc38:	0029883a 	mov	r20,zero
   1cc3c:	003fea06 	br	1cbe8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcbe8>
   1cc40:	903d4526 	beq	r18,zero,1c158 <__alt_mem_mcu_subsystem_ram_0+0x77ffc158>
   1cc44:	84a1883a 	add	r16,r16,r18
   1cc48:	003c7706 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1cc4c:	917fffc7 	ldb	r5,-1(r18)
   1cc50:	e00d883a 	mov	r6,fp
   1cc54:	a809883a 	mov	r4,r21
   1cc58:	94bfffc4 	addi	r18,r18,-1
   1cc5c:	001bb600 	call	1bb60 <_sungetc_r>
   1cc60:	003e7e06 	br	1c65c <__alt_mem_mcu_subsystem_ram_0+0x77ffc65c>
   1cc64:	94800054 	ori	r18,r18,1
   1cc68:	bdfbab04 	addi	r23,r23,-4436
   1cc6c:	05800284 	movi	r22,10
   1cc70:	050000c4 	movi	r20,3
   1cc74:	003d4406 	br	1c188 <__alt_mem_mcu_subsystem_ram_0+0x77ffc188>
   1cc78:	a0800083 	ldbu	r2,2(r20)
   1cc7c:	94800094 	ori	r18,r18,2
   1cc80:	a5000084 	addi	r20,r20,2
   1cc84:	11403fcc 	andi	r5,r2,255
   1cc88:	003c7606 	br	1be64 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe64>
   1cc8c:	9080004c 	andi	r2,r18,1
   1cc90:	1000071e 	bne	r2,zero,1ccb0 <__ssvfiscanf_r+0xef8>
   1cc94:	9480008c 	andi	r18,r18,2
   1cc98:	90000526 	beq	r18,zero,1ccb0 <__ssvfiscanf_r+0xef8>
   1cc9c:	8005d7fa 	srai	r2,r16,31
   1cca0:	1c000015 	stw	r16,0(r3)
   1cca4:	d9000215 	stw	r4,8(sp)
   1cca8:	18800115 	stw	r2,4(r3)
   1ccac:	003c5e06 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1ccb0:	1c000015 	stw	r16,0(r3)
   1ccb4:	d9000215 	stw	r4,8(sp)
   1ccb8:	003c5b06 	br	1be28 <__alt_mem_mcu_subsystem_ram_0+0x77ffbe28>
   1ccbc:	0025883a 	mov	r18,zero
   1ccc0:	003fa806 	br	1cb64 <__alt_mem_mcu_subsystem_ram_0+0x77ffcb64>
   1ccc4:	10bfffa0 	cmpeqi	r2,r2,-2
   1ccc8:	10000826 	beq	r2,zero,1ccec <__ssvfiscanf_r+0xf34>
   1cccc:	e0800117 	ldw	r2,4(fp)
   1ccd0:	00bd1a0e 	bge	zero,r2,1c13c <__alt_mem_mcu_subsystem_ram_0+0x77ffc13c>
   1ccd4:	1829883a 	mov	r20,r3
   1ccd8:	003f4106 	br	1c9e0 <__alt_mem_mcu_subsystem_ram_0+0x77ffc9e0>
   1ccdc:	0007883a 	mov	r3,zero
   1cce0:	003ffa06 	br	1cccc <__alt_mem_mcu_subsystem_ram_0+0x77ffcccc>
   1cce4:	001f5e80 	call	1f5e8 <_strtoull_r>
   1cce8:	003f1a06 	br	1c954 <__alt_mem_mcu_subsystem_ram_0+0x77ffc954>
   1ccec:	d8800317 	ldw	r2,12(sp)
   1ccf0:	11000017 	ldw	r4,0(r2)
   1ccf4:	003f5e06 	br	1ca70 <__alt_mem_mcu_subsystem_ram_0+0x77ffca70>

0001ccf8 <__submore>:
   1ccf8:	defffa04 	addi	sp,sp,-24
   1ccfc:	dc000015 	stw	r16,0(sp)
   1cd00:	2821883a 	mov	r16,r5
   1cd04:	29400c17 	ldw	r5,48(r5)
   1cd08:	dfc00515 	stw	ra,20(sp)
   1cd0c:	dd000415 	stw	r20,16(sp)
   1cd10:	dcc00315 	stw	r19,12(sp)
   1cd14:	dc800215 	stw	r18,8(sp)
   1cd18:	dc400115 	stw	r17,4(sp)
   1cd1c:	80801004 	addi	r2,r16,64
   1cd20:	28801726 	beq	r5,r2,1cd80 <__submore+0x88>
   1cd24:	84400d17 	ldw	r17,52(r16)
   1cd28:	8c67883a 	add	r19,r17,r17
   1cd2c:	980d883a 	mov	r6,r19
   1cd30:	0019c340 	call	19c34 <_realloc_r>
   1cd34:	1025883a 	mov	r18,r2
   1cd38:	10002226 	beq	r2,zero,1cdc4 <__submore+0xcc>
   1cd3c:	1469883a 	add	r20,r2,r17
   1cd40:	880d883a 	mov	r6,r17
   1cd44:	100b883a 	mov	r5,r2
   1cd48:	a009883a 	mov	r4,r20
   1cd4c:	00106380 	call	10638 <memcpy>
   1cd50:	0005883a 	mov	r2,zero
   1cd54:	85000015 	stw	r20,0(r16)
   1cd58:	84800c15 	stw	r18,48(r16)
   1cd5c:	84c00d15 	stw	r19,52(r16)
   1cd60:	dfc00517 	ldw	ra,20(sp)
   1cd64:	dd000417 	ldw	r20,16(sp)
   1cd68:	dcc00317 	ldw	r19,12(sp)
   1cd6c:	dc800217 	ldw	r18,8(sp)
   1cd70:	dc400117 	ldw	r17,4(sp)
   1cd74:	dc000017 	ldw	r16,0(sp)
   1cd78:	dec00604 	addi	sp,sp,24
   1cd7c:	f800283a 	ret
   1cd80:	01410004 	movi	r5,1024
   1cd84:	000fdf40 	call	fdf4 <_malloc_r>
   1cd88:	1007883a 	mov	r3,r2
   1cd8c:	10000d26 	beq	r2,zero,1cdc4 <__submore+0xcc>
   1cd90:	80801083 	ldbu	r2,66(r16)
   1cd94:	01010004 	movi	r4,1024
   1cd98:	81000d15 	stw	r4,52(r16)
   1cd9c:	80c00c15 	stw	r3,48(r16)
   1cda0:	1880ffc5 	stb	r2,1023(r3)
   1cda4:	81401043 	ldbu	r5,65(r16)
   1cda8:	1900ff44 	addi	r4,r3,1021
   1cdac:	0005883a 	mov	r2,zero
   1cdb0:	1940ff85 	stb	r5,1022(r3)
   1cdb4:	81401003 	ldbu	r5,64(r16)
   1cdb8:	1940ff45 	stb	r5,1021(r3)
   1cdbc:	81000015 	stw	r4,0(r16)
   1cdc0:	003fe706 	br	1cd60 <__alt_mem_mcu_subsystem_ram_0+0x77ffcd60>
   1cdc4:	00bfffc4 	movi	r2,-1
   1cdc8:	003fe506 	br	1cd60 <__alt_mem_mcu_subsystem_ram_0+0x77ffcd60>

0001cdcc <_ungetc_r>:
   1cdcc:	defffb04 	addi	sp,sp,-20
   1cdd0:	dfc00415 	stw	ra,16(sp)
   1cdd4:	dcc00315 	stw	r19,12(sp)
   1cdd8:	dc800215 	stw	r18,8(sp)
   1cddc:	dc400115 	stw	r17,4(sp)
   1cde0:	dc000015 	stw	r16,0(sp)
   1cde4:	28bfffd8 	cmpnei	r2,r5,-1
   1cde8:	10003226 	beq	r2,zero,1ceb4 <_ungetc_r+0xe8>
   1cdec:	2025883a 	mov	r18,r4
   1cdf0:	3021883a 	mov	r16,r6
   1cdf4:	2823883a 	mov	r17,r5
   1cdf8:	20000226 	beq	r4,zero,1ce04 <_ungetc_r+0x38>
   1cdfc:	20800e17 	ldw	r2,56(r4)
   1ce00:	10002e26 	beq	r2,zero,1cebc <_ungetc_r+0xf0>
   1ce04:	80c0030b 	ldhu	r3,12(r16)
   1ce08:	1888000c 	andi	r2,r3,8192
   1ce0c:	1000051e 	bne	r2,zero,1ce24 <_ungetc_r+0x58>
   1ce10:	80801917 	ldw	r2,100(r16)
   1ce14:	0137ffc4 	movi	r4,-8193
   1ce18:	18c80014 	ori	r3,r3,8192
   1ce1c:	1104703a 	and	r2,r2,r4
   1ce20:	80801915 	stw	r2,100(r16)
   1ce24:	00bff7c4 	movi	r2,-33
   1ce28:	1884703a 	and	r2,r3,r2
   1ce2c:	8080030d 	sth	r2,12(r16)
   1ce30:	1980010c 	andi	r6,r3,4
   1ce34:	3000061e 	bne	r6,zero,1ce50 <_ungetc_r+0x84>
   1ce38:	1900040c 	andi	r4,r3,16
   1ce3c:	20001d26 	beq	r4,zero,1ceb4 <_ungetc_r+0xe8>
   1ce40:	18c0020c 	andi	r3,r3,8
   1ce44:	1800341e 	bne	r3,zero,1cf18 <_ungetc_r+0x14c>
   1ce48:	10800114 	ori	r2,r2,4
   1ce4c:	8080030d 	sth	r2,12(r16)
   1ce50:	80c00c17 	ldw	r3,48(r16)
   1ce54:	8cc03fcc 	andi	r19,r17,255
   1ce58:	80800117 	ldw	r2,4(r16)
   1ce5c:	18001c26 	beq	r3,zero,1ced0 <_ungetc_r+0x104>
   1ce60:	80c00d17 	ldw	r3,52(r16)
   1ce64:	10c00f0e 	bge	r2,r3,1cea4 <_ungetc_r+0xd8>
   1ce68:	80800017 	ldw	r2,0(r16)
   1ce6c:	10ffffc4 	addi	r3,r2,-1
   1ce70:	80c00015 	stw	r3,0(r16)
   1ce74:	147fffc5 	stb	r17,-1(r2)
   1ce78:	80800117 	ldw	r2,4(r16)
   1ce7c:	10800044 	addi	r2,r2,1
   1ce80:	80800115 	stw	r2,4(r16)
   1ce84:	9805883a 	mov	r2,r19
   1ce88:	dfc00417 	ldw	ra,16(sp)
   1ce8c:	dcc00317 	ldw	r19,12(sp)
   1ce90:	dc800217 	ldw	r18,8(sp)
   1ce94:	dc400117 	ldw	r17,4(sp)
   1ce98:	dc000017 	ldw	r16,0(sp)
   1ce9c:	dec00504 	addi	sp,sp,20
   1cea0:	f800283a 	ret
   1cea4:	800b883a 	mov	r5,r16
   1cea8:	9009883a 	mov	r4,r18
   1ceac:	001ccf80 	call	1ccf8 <__submore>
   1ceb0:	103fed26 	beq	r2,zero,1ce68 <__alt_mem_mcu_subsystem_ram_0+0x77ffce68>
   1ceb4:	04ffffc4 	movi	r19,-1
   1ceb8:	003ff206 	br	1ce84 <__alt_mem_mcu_subsystem_ram_0+0x77ffce84>
   1cebc:	0017b9c0 	call	17b9c <__sinit>
   1cec0:	80c0030b 	ldhu	r3,12(r16)
   1cec4:	1888000c 	andi	r2,r3,8192
   1cec8:	103fd61e 	bne	r2,zero,1ce24 <__alt_mem_mcu_subsystem_ram_0+0x77ffce24>
   1cecc:	003fd006 	br	1ce10 <__alt_mem_mcu_subsystem_ram_0+0x77ffce10>
   1ced0:	81000417 	ldw	r4,16(r16)
   1ced4:	80c00017 	ldw	r3,0(r16)
   1ced8:	20000326 	beq	r4,zero,1cee8 <_ungetc_r+0x11c>
   1cedc:	20c0022e 	bgeu	r4,r3,1cee8 <_ungetc_r+0x11c>
   1cee0:	193fffc3 	ldbu	r4,-1(r3)
   1cee4:	24c01526 	beq	r4,r19,1cf3c <_ungetc_r+0x170>
   1cee8:	80800f15 	stw	r2,60(r16)
   1ceec:	008000c4 	movi	r2,3
   1cef0:	81401004 	addi	r5,r16,64
   1cef4:	81001084 	addi	r4,r16,66
   1cef8:	80800d15 	stw	r2,52(r16)
   1cefc:	00800044 	movi	r2,1
   1cf00:	80c00e15 	stw	r3,56(r16)
   1cf04:	81400c15 	stw	r5,48(r16)
   1cf08:	84401085 	stb	r17,66(r16)
   1cf0c:	81000015 	stw	r4,0(r16)
   1cf10:	80800115 	stw	r2,4(r16)
   1cf14:	003fdb06 	br	1ce84 <__alt_mem_mcu_subsystem_ram_0+0x77ffce84>
   1cf18:	800b883a 	mov	r5,r16
   1cf1c:	9009883a 	mov	r4,r18
   1cf20:	00177fc0 	call	177fc <_fflush_r>
   1cf24:	103fe31e 	bne	r2,zero,1ceb4 <__alt_mem_mcu_subsystem_ram_0+0x77ffceb4>
   1cf28:	8080030b 	ldhu	r2,12(r16)
   1cf2c:	80000215 	stw	zero,8(r16)
   1cf30:	80000615 	stw	zero,24(r16)
   1cf34:	10bffdcc 	andi	r2,r2,65527
   1cf38:	003fc306 	br	1ce48 <__alt_mem_mcu_subsystem_ram_0+0x77ffce48>
   1cf3c:	18ffffc4 	addi	r3,r3,-1
   1cf40:	10800044 	addi	r2,r2,1
   1cf44:	80c00015 	stw	r3,0(r16)
   1cf48:	80800115 	stw	r2,4(r16)
   1cf4c:	003fcd06 	br	1ce84 <__alt_mem_mcu_subsystem_ram_0+0x77ffce84>

0001cf50 <ungetc>:
   1cf50:	008000f4 	movhi	r2,3
   1cf54:	280d883a 	mov	r6,r5
   1cf58:	200b883a 	mov	r5,r4
   1cf5c:	1123b117 	ldw	r4,-28988(r2)
   1cf60:	001cdcc1 	jmpi	1cdcc <_ungetc_r>

0001cf64 <__sprint_r.part.0>:
   1cf64:	28801917 	ldw	r2,100(r5)
   1cf68:	defff604 	addi	sp,sp,-40
   1cf6c:	dd000415 	stw	r20,16(sp)
   1cf70:	dfc00915 	stw	ra,36(sp)
   1cf74:	df000815 	stw	fp,32(sp)
   1cf78:	ddc00715 	stw	r23,28(sp)
   1cf7c:	dd800615 	stw	r22,24(sp)
   1cf80:	dd400515 	stw	r21,20(sp)
   1cf84:	dcc00315 	stw	r19,12(sp)
   1cf88:	dc800215 	stw	r18,8(sp)
   1cf8c:	dc400115 	stw	r17,4(sp)
   1cf90:	dc000015 	stw	r16,0(sp)
   1cf94:	1088000c 	andi	r2,r2,8192
   1cf98:	3029883a 	mov	r20,r6
   1cf9c:	10002c26 	beq	r2,zero,1d050 <__sprint_r.part.0+0xec>
   1cfa0:	30800217 	ldw	r2,8(r6)
   1cfa4:	2823883a 	mov	r17,r5
   1cfa8:	2027883a 	mov	r19,r4
   1cfac:	35400017 	ldw	r21,0(r6)
   1cfb0:	05ffff04 	movi	r23,-4
   1cfb4:	10002426 	beq	r2,zero,1d048 <__sprint_r.part.0+0xe4>
   1cfb8:	ad800117 	ldw	r22,4(r21)
   1cfbc:	ac000017 	ldw	r16,0(r21)
   1cfc0:	b024d0ba 	srli	r18,r22,2
   1cfc4:	90001b26 	beq	r18,zero,1d034 <__sprint_r.part.0+0xd0>
   1cfc8:	0039883a 	mov	fp,zero
   1cfcc:	00000206 	br	1cfd8 <__sprint_r.part.0+0x74>
   1cfd0:	84000104 	addi	r16,r16,4
   1cfd4:	97001626 	beq	r18,fp,1d030 <__sprint_r.part.0+0xcc>
   1cfd8:	81400017 	ldw	r5,0(r16)
   1cfdc:	880d883a 	mov	r6,r17
   1cfe0:	9809883a 	mov	r4,r19
   1cfe4:	001e7e40 	call	1e7e4 <_fputwc_r>
   1cfe8:	10bfffe0 	cmpeqi	r2,r2,-1
   1cfec:	e7000044 	addi	fp,fp,1
   1cff0:	103ff726 	beq	r2,zero,1cfd0 <__alt_mem_mcu_subsystem_ram_0+0x77ffcfd0>
   1cff4:	00bfffc4 	movi	r2,-1
   1cff8:	a0000215 	stw	zero,8(r20)
   1cffc:	a0000115 	stw	zero,4(r20)
   1d000:	dfc00917 	ldw	ra,36(sp)
   1d004:	df000817 	ldw	fp,32(sp)
   1d008:	ddc00717 	ldw	r23,28(sp)
   1d00c:	dd800617 	ldw	r22,24(sp)
   1d010:	dd400517 	ldw	r21,20(sp)
   1d014:	dd000417 	ldw	r20,16(sp)
   1d018:	dcc00317 	ldw	r19,12(sp)
   1d01c:	dc800217 	ldw	r18,8(sp)
   1d020:	dc400117 	ldw	r17,4(sp)
   1d024:	dc000017 	ldw	r16,0(sp)
   1d028:	dec00a04 	addi	sp,sp,40
   1d02c:	f800283a 	ret
   1d030:	a0800217 	ldw	r2,8(r20)
   1d034:	b5ec703a 	and	r22,r22,r23
   1d038:	1585c83a 	sub	r2,r2,r22
   1d03c:	a0800215 	stw	r2,8(r20)
   1d040:	ad400204 	addi	r21,r21,8
   1d044:	103fdc1e 	bne	r2,zero,1cfb8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcfb8>
   1d048:	0005883a 	mov	r2,zero
   1d04c:	003fea06 	br	1cff8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcff8>
   1d050:	0017ff00 	call	17ff0 <__sfvwrite_r>
   1d054:	003fe806 	br	1cff8 <__alt_mem_mcu_subsystem_ram_0+0x77ffcff8>

0001d058 <__sprint_r>:
   1d058:	30c00217 	ldw	r3,8(r6)
   1d05c:	18000126 	beq	r3,zero,1d064 <__sprint_r+0xc>
   1d060:	001cf641 	jmpi	1cf64 <__sprint_r.part.0>
   1d064:	30000115 	stw	zero,4(r6)
   1d068:	0005883a 	mov	r2,zero
   1d06c:	f800283a 	ret

0001d070 <___vfiprintf_internal_r>:
   1d070:	deffce04 	addi	sp,sp,-200
   1d074:	ddc02f15 	stw	r23,188(sp)
   1d078:	dd002c15 	stw	r20,176(sp)
   1d07c:	dfc03115 	stw	ra,196(sp)
   1d080:	df003015 	stw	fp,192(sp)
   1d084:	dd802e15 	stw	r22,184(sp)
   1d088:	dd402d15 	stw	r21,180(sp)
   1d08c:	dcc02b15 	stw	r19,172(sp)
   1d090:	dc802a15 	stw	r18,168(sp)
   1d094:	dc402915 	stw	r17,164(sp)
   1d098:	dc002815 	stw	r16,160(sp)
   1d09c:	d9000115 	stw	r4,4(sp)
   1d0a0:	d9c00215 	stw	r7,8(sp)
   1d0a4:	2829883a 	mov	r20,r5
   1d0a8:	302f883a 	mov	r23,r6
   1d0ac:	20000226 	beq	r4,zero,1d0b8 <___vfiprintf_internal_r+0x48>
   1d0b0:	20800e17 	ldw	r2,56(r4)
   1d0b4:	1002bf26 	beq	r2,zero,1dbb4 <___vfiprintf_internal_r+0xb44>
   1d0b8:	a080030b 	ldhu	r2,12(r20)
   1d0bc:	10c8000c 	andi	r3,r2,8192
   1d0c0:	1800061e 	bne	r3,zero,1d0dc <___vfiprintf_internal_r+0x6c>
   1d0c4:	a0c01917 	ldw	r3,100(r20)
   1d0c8:	0137ffc4 	movi	r4,-8193
   1d0cc:	10880014 	ori	r2,r2,8192
   1d0d0:	1906703a 	and	r3,r3,r4
   1d0d4:	a080030d 	sth	r2,12(r20)
   1d0d8:	a0c01915 	stw	r3,100(r20)
   1d0dc:	10c0020c 	andi	r3,r2,8
   1d0e0:	18018826 	beq	r3,zero,1d704 <___vfiprintf_internal_r+0x694>
   1d0e4:	a0c00417 	ldw	r3,16(r20)
   1d0e8:	18018626 	beq	r3,zero,1d704 <___vfiprintf_internal_r+0x694>
   1d0ec:	1080068c 	andi	r2,r2,26
   1d0f0:	10800298 	cmpnei	r2,r2,10
   1d0f4:	10018b26 	beq	r2,zero,1d724 <___vfiprintf_internal_r+0x6b4>
   1d0f8:	df001804 	addi	fp,sp,96
   1d0fc:	df000b15 	stw	fp,44(sp)
   1d100:	d8000d15 	stw	zero,52(sp)
   1d104:	d8000c15 	stw	zero,48(sp)
   1d108:	e021883a 	mov	r16,fp
   1d10c:	d8000615 	stw	zero,24(sp)
   1d110:	d8000015 	stw	zero,0(sp)
   1d114:	b8800007 	ldb	r2,0(r23)
   1d118:	10021f26 	beq	r2,zero,1d998 <___vfiprintf_internal_r+0x928>
   1d11c:	10800960 	cmpeqi	r2,r2,37
   1d120:	b827883a 	mov	r19,r23
   1d124:	10000226 	beq	r2,zero,1d130 <___vfiprintf_internal_r+0xc0>
   1d128:	00001706 	br	1d188 <___vfiprintf_internal_r+0x118>
   1d12c:	18000426 	beq	r3,zero,1d140 <___vfiprintf_internal_r+0xd0>
   1d130:	9cc00044 	addi	r19,r19,1
   1d134:	98800007 	ldb	r2,0(r19)
   1d138:	10c00958 	cmpnei	r3,r2,37
   1d13c:	103ffb1e 	bne	r2,zero,1d12c <__alt_mem_mcu_subsystem_ram_0+0x77ffd12c>
   1d140:	9de3c83a 	sub	r17,r19,r23
   1d144:	88000e26 	beq	r17,zero,1d180 <___vfiprintf_internal_r+0x110>
   1d148:	d8c00d17 	ldw	r3,52(sp)
   1d14c:	d8800c17 	ldw	r2,48(sp)
   1d150:	85c00015 	stw	r23,0(r16)
   1d154:	88c7883a 	add	r3,r17,r3
   1d158:	10800044 	addi	r2,r2,1
   1d15c:	d8800c15 	stw	r2,48(sp)
   1d160:	84400115 	stw	r17,4(r16)
   1d164:	d8c00d15 	stw	r3,52(sp)
   1d168:	10800208 	cmpgei	r2,r2,8
   1d16c:	1001761e 	bne	r2,zero,1d748 <___vfiprintf_internal_r+0x6d8>
   1d170:	84000204 	addi	r16,r16,8
   1d174:	d8800017 	ldw	r2,0(sp)
   1d178:	1445883a 	add	r2,r2,r17
   1d17c:	d8800015 	stw	r2,0(sp)
   1d180:	98800007 	ldb	r2,0(r19)
   1d184:	10020426 	beq	r2,zero,1d998 <___vfiprintf_internal_r+0x928>
   1d188:	98800047 	ldb	r2,1(r19)
   1d18c:	9dc00044 	addi	r23,r19,1
   1d190:	d8000a45 	stb	zero,41(sp)
   1d194:	000d883a 	mov	r6,zero
   1d198:	000f883a 	mov	r7,zero
   1d19c:	047fffc4 	movi	r17,-1
   1d1a0:	0025883a 	mov	r18,zero
   1d1a4:	0007883a 	mov	r3,zero
   1d1a8:	bdc00044 	addi	r23,r23,1
   1d1ac:	113ff804 	addi	r4,r2,-32
   1d1b0:	21401668 	cmpgeui	r5,r4,89
   1d1b4:	2801741e 	bne	r5,zero,1d788 <___vfiprintf_internal_r+0x718>
   1d1b8:	200890ba 	slli	r4,r4,2
   1d1bc:	014000b4 	movhi	r5,2
   1d1c0:	214b883a 	add	r5,r4,r5
   1d1c4:	29347317 	ldw	r4,-11828(r5)
   1d1c8:	2000683a 	jmp	r4
   1d1cc:	0001d858 	cmpnei	zero,zero,1889
   1d1d0:	0001d788 	cmpgei	zero,zero,1886
   1d1d4:	0001d788 	cmpgei	zero,zero,1886
   1d1d8:	0001d84c 	andi	zero,zero,1889
   1d1dc:	0001d788 	cmpgei	zero,zero,1886
   1d1e0:	0001d788 	cmpgei	zero,zero,1886
   1d1e4:	0001d788 	cmpgei	zero,zero,1886
   1d1e8:	0001d788 	cmpgei	zero,zero,1886
   1d1ec:	0001d788 	cmpgei	zero,zero,1886
   1d1f0:	0001d788 	cmpgei	zero,zero,1886
   1d1f4:	0001d824 	muli	zero,zero,1888
   1d1f8:	0001d814 	movui	zero,1888
   1d1fc:	0001d788 	cmpgei	zero,zero,1886
   1d200:	0001d7fc 	xorhi	zero,zero,1887
   1d204:	0001d7b8 	rdprs	zero,zero,1886
   1d208:	0001d788 	cmpgei	zero,zero,1886
   1d20c:	0001d7ac 	andhi	zero,zero,1886
   1d210:	0001d758 	cmpnei	zero,zero,1885
   1d214:	0001d758 	cmpnei	zero,zero,1885
   1d218:	0001d758 	cmpnei	zero,zero,1885
   1d21c:	0001d758 	cmpnei	zero,zero,1885
   1d220:	0001d758 	cmpnei	zero,zero,1885
   1d224:	0001d758 	cmpnei	zero,zero,1885
   1d228:	0001d758 	cmpnei	zero,zero,1885
   1d22c:	0001d758 	cmpnei	zero,zero,1885
   1d230:	0001d758 	cmpnei	zero,zero,1885
   1d234:	0001d788 	cmpgei	zero,zero,1886
   1d238:	0001d788 	cmpgei	zero,zero,1886
   1d23c:	0001d788 	cmpgei	zero,zero,1886
   1d240:	0001d788 	cmpgei	zero,zero,1886
   1d244:	0001d788 	cmpgei	zero,zero,1886
   1d248:	0001d788 	cmpgei	zero,zero,1886
   1d24c:	0001d788 	cmpgei	zero,zero,1886
   1d250:	0001d788 	cmpgei	zero,zero,1886
   1d254:	0001d788 	cmpgei	zero,zero,1886
   1d258:	0001d788 	cmpgei	zero,zero,1886
   1d25c:	0001db14 	movui	zero,1900
   1d260:	0001d788 	cmpgei	zero,zero,1886
   1d264:	0001d788 	cmpgei	zero,zero,1886
   1d268:	0001d788 	cmpgei	zero,zero,1886
   1d26c:	0001d788 	cmpgei	zero,zero,1886
   1d270:	0001d788 	cmpgei	zero,zero,1886
   1d274:	0001d788 	cmpgei	zero,zero,1886
   1d278:	0001d788 	cmpgei	zero,zero,1886
   1d27c:	0001d788 	cmpgei	zero,zero,1886
   1d280:	0001d788 	cmpgei	zero,zero,1886
   1d284:	0001d788 	cmpgei	zero,zero,1886
   1d288:	0001d3f4 	movhi	zero,1871
   1d28c:	0001d788 	cmpgei	zero,zero,1886
   1d290:	0001d788 	cmpgei	zero,zero,1886
   1d294:	0001d788 	cmpgei	zero,zero,1886
   1d298:	0001d788 	cmpgei	zero,zero,1886
   1d29c:	0001d788 	cmpgei	zero,zero,1886
   1d2a0:	0001d330 	cmpltui	zero,zero,1868
   1d2a4:	0001d788 	cmpgei	zero,zero,1886
   1d2a8:	0001d788 	cmpgei	zero,zero,1886
   1d2ac:	0001d9fc 	xorhi	zero,zero,1895
   1d2b0:	0001d788 	cmpgei	zero,zero,1886
   1d2b4:	0001d788 	cmpgei	zero,zero,1886
   1d2b8:	0001d788 	cmpgei	zero,zero,1886
   1d2bc:	0001d788 	cmpgei	zero,zero,1886
   1d2c0:	0001d788 	cmpgei	zero,zero,1886
   1d2c4:	0001d788 	cmpgei	zero,zero,1886
   1d2c8:	0001d788 	cmpgei	zero,zero,1886
   1d2cc:	0001d788 	cmpgei	zero,zero,1886
   1d2d0:	0001d788 	cmpgei	zero,zero,1886
   1d2d4:	0001d788 	cmpgei	zero,zero,1886
   1d2d8:	0001dae4 	muli	zero,zero,1899
   1d2dc:	0001daa8 	cmpgeui	zero,zero,1898
   1d2e0:	0001d788 	cmpgei	zero,zero,1886
   1d2e4:	0001d788 	cmpgei	zero,zero,1886
   1d2e8:	0001d788 	cmpgei	zero,zero,1886
   1d2ec:	0001dba8 	cmpgeui	zero,zero,1902
   1d2f0:	0001daa8 	cmpgeui	zero,zero,1898
   1d2f4:	0001d788 	cmpgei	zero,zero,1886
   1d2f8:	0001d788 	cmpgei	zero,zero,1886
   1d2fc:	0001d8b4 	movhi	zero,1890
   1d300:	0001d788 	cmpgei	zero,zero,1886
   1d304:	0001d960 	cmpeqi	zero,zero,1893
   1d308:	0001d3f8 	rdprs	zero,zero,1871
   1d30c:	0001d924 	muli	zero,zero,1892
   1d310:	0001d918 	cmpnei	zero,zero,1892
   1d314:	0001d788 	cmpgei	zero,zero,1886
   1d318:	0001d8c8 	cmpgei	zero,zero,1891
   1d31c:	0001d788 	cmpgei	zero,zero,1886
   1d320:	0001d334 	movhi	zero,1868
   1d324:	0001d788 	cmpgei	zero,zero,1886
   1d328:	0001d788 	cmpgei	zero,zero,1886
   1d32c:	0001da54 	movui	zero,1897
   1d330:	18c00414 	ori	r3,r3,16
   1d334:	1880080c 	andi	r2,r3,32
   1d338:	1001a91e 	bne	r2,zero,1d9e0 <___vfiprintf_internal_r+0x970>
   1d33c:	d9000217 	ldw	r4,8(sp)
   1d340:	1880040c 	andi	r2,r3,16
   1d344:	22c00017 	ldw	r11,0(r4)
   1d348:	21000104 	addi	r4,r4,4
   1d34c:	d9000215 	stw	r4,8(sp)
   1d350:	10021e1e 	bne	r2,zero,1dbcc <___vfiprintf_internal_r+0xb5c>
   1d354:	1880100c 	andi	r2,r3,64
   1d358:	10021c26 	beq	r2,zero,1dbcc <___vfiprintf_internal_r+0xb5c>
   1d35c:	d8000a45 	stb	zero,41(sp)
   1d360:	893fffe0 	cmpeqi	r4,r17,-1
   1d364:	5d7fffcc 	andi	r21,r11,65535
   1d368:	001b883a 	mov	r13,zero
   1d36c:	00800044 	movi	r2,1
   1d370:	20002c26 	beq	r4,zero,1d424 <___vfiprintf_internal_r+0x3b4>
   1d374:	1827883a 	mov	r19,r3
   1d378:	0019883a 	mov	r12,zero
   1d37c:	10c00060 	cmpeqi	r3,r2,1
   1d380:	1802011e 	bne	r3,zero,1db88 <___vfiprintf_internal_r+0xb18>
   1d384:	108000a0 	cmpeqi	r2,r2,2
   1d388:	1002aa1e 	bne	r2,zero,1de34 <___vfiprintf_internal_r+0xdc4>
   1d38c:	e007883a 	mov	r3,fp
   1d390:	00000106 	br	1d398 <___vfiprintf_internal_r+0x328>
   1d394:	b007883a 	mov	r3,r22
   1d398:	680a977a 	slli	r5,r13,29
   1d39c:	a808d0fa 	srli	r4,r21,3
   1d3a0:	681ad0fa 	srli	r13,r13,3
   1d3a4:	aac001cc 	andi	r11,r21,7
   1d3a8:	58800c04 	addi	r2,r11,48
   1d3ac:	292ab03a 	or	r21,r5,r4
   1d3b0:	18bfffc5 	stb	r2,-1(r3)
   1d3b4:	ab48b03a 	or	r4,r21,r13
   1d3b8:	1dbfffc4 	addi	r22,r3,-1
   1d3bc:	203ff51e 	bne	r4,zero,1d394 <__alt_mem_mcu_subsystem_ram_0+0x77ffd394>
   1d3c0:	9900004c 	andi	r4,r19,1
   1d3c4:	2002a826 	beq	r4,zero,1de68 <___vfiprintf_internal_r+0xdf8>
   1d3c8:	10803fcc 	andi	r2,r2,255
   1d3cc:	1080201c 	xori	r2,r2,128
   1d3d0:	10bfe004 	addi	r2,r2,-128
   1d3d4:	10800c18 	cmpnei	r2,r2,48
   1d3d8:	1002a326 	beq	r2,zero,1de68 <___vfiprintf_internal_r+0xdf8>
   1d3dc:	18ffff84 	addi	r3,r3,-2
   1d3e0:	00800c04 	movi	r2,48
   1d3e4:	b0bfffc5 	stb	r2,-1(r22)
   1d3e8:	e0dbc83a 	sub	r13,fp,r3
   1d3ec:	182d883a 	mov	r22,r3
   1d3f0:	00001806 	br	1d454 <___vfiprintf_internal_r+0x3e4>
   1d3f4:	18c00414 	ori	r3,r3,16
   1d3f8:	1880080c 	andi	r2,r3,32
   1d3fc:	10012126 	beq	r2,zero,1d884 <___vfiprintf_internal_r+0x814>
   1d400:	d9000217 	ldw	r4,8(sp)
   1d404:	0005883a 	mov	r2,zero
   1d408:	25400017 	ldw	r21,0(r4)
   1d40c:	23400117 	ldw	r13,4(r4)
   1d410:	21000204 	addi	r4,r4,8
   1d414:	d9000215 	stw	r4,8(sp)
   1d418:	d8000a45 	stb	zero,41(sp)
   1d41c:	893fffe0 	cmpeqi	r4,r17,-1
   1d420:	203fd41e 	bne	r4,zero,1d374 <__alt_mem_mcu_subsystem_ram_0+0x77ffd374>
   1d424:	0019883a 	mov	r12,zero
   1d428:	04ffdfc4 	movi	r19,-129
   1d42c:	ab48b03a 	or	r4,r21,r13
   1d430:	1ce6703a 	and	r19,r3,r19
   1d434:	203fd11e 	bne	r4,zero,1d37c <__alt_mem_mcu_subsystem_ram_0+0x77ffd37c>
   1d438:	88030b1e 	bne	r17,zero,1e068 <___vfiprintf_internal_r+0xff8>
   1d43c:	1002d81e 	bne	r2,zero,1dfa0 <___vfiprintf_internal_r+0xf30>
   1d440:	1b40004c 	andi	r13,r3,1
   1d444:	68030b26 	beq	r13,zero,1e074 <___vfiprintf_internal_r+0x1004>
   1d448:	00800c04 	movi	r2,48
   1d44c:	d88017c5 	stb	r2,95(sp)
   1d450:	dd8017c4 	addi	r22,sp,95
   1d454:	882b883a 	mov	r21,r17
   1d458:	8b40010e 	bge	r17,r13,1d460 <___vfiprintf_internal_r+0x3f0>
   1d45c:	682b883a 	mov	r21,r13
   1d460:	63003fcc 	andi	r12,r12,255
   1d464:	6300201c 	xori	r12,r12,128
   1d468:	633fe004 	addi	r12,r12,-128
   1d46c:	60000126 	beq	r12,zero,1d474 <___vfiprintf_internal_r+0x404>
   1d470:	ad400044 	addi	r21,r21,1
   1d474:	9b80008c 	andi	r14,r19,2
   1d478:	70000126 	beq	r14,zero,1d480 <___vfiprintf_internal_r+0x410>
   1d47c:	ad400084 	addi	r21,r21,2
   1d480:	d9000c17 	ldw	r4,48(sp)
   1d484:	9b00210c 	andi	r12,r19,132
   1d488:	d8800d17 	ldw	r2,52(sp)
   1d48c:	21800044 	addi	r6,r4,1
   1d490:	300b883a 	mov	r5,r6
   1d494:	6000271e 	bne	r12,zero,1d534 <___vfiprintf_internal_r+0x4c4>
   1d498:	9547c83a 	sub	r3,r18,r21
   1d49c:	00c0250e 	bge	zero,r3,1d534 <___vfiprintf_internal_r+0x4c4>
   1d4a0:	19400450 	cmplti	r5,r3,17
   1d4a4:	01c000b4 	movhi	r7,2
   1d4a8:	2803481e 	bne	r5,zero,1e1cc <___vfiprintf_internal_r+0x115c>
   1d4ac:	39dc4284 	addi	r7,r7,28938
   1d4b0:	03c00404 	movi	r15,16
   1d4b4:	00000706 	br	1d4d4 <___vfiprintf_internal_r+0x464>
   1d4b8:	27c00084 	addi	ra,r4,2
   1d4bc:	84000204 	addi	r16,r16,8
   1d4c0:	3009883a 	mov	r4,r6
   1d4c4:	18fffc04 	addi	r3,r3,-16
   1d4c8:	19400448 	cmpgei	r5,r3,17
   1d4cc:	28000f26 	beq	r5,zero,1d50c <___vfiprintf_internal_r+0x49c>
   1d4d0:	21800044 	addi	r6,r4,1
   1d4d4:	10800404 	addi	r2,r2,16
   1d4d8:	81c00015 	stw	r7,0(r16)
   1d4dc:	83c00115 	stw	r15,4(r16)
   1d4e0:	d8800d15 	stw	r2,52(sp)
   1d4e4:	d9800c15 	stw	r6,48(sp)
   1d4e8:	31400208 	cmpgei	r5,r6,8
   1d4ec:	283ff226 	beq	r5,zero,1d4b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd4b8>
   1d4f0:	10022e1e 	bne	r2,zero,1ddac <___vfiprintf_internal_r+0xd3c>
   1d4f4:	18fffc04 	addi	r3,r3,-16
   1d4f8:	19400448 	cmpgei	r5,r3,17
   1d4fc:	0009883a 	mov	r4,zero
   1d500:	07c00044 	movi	ra,1
   1d504:	e021883a 	mov	r16,fp
   1d508:	283ff11e 	bne	r5,zero,1d4d0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd4d0>
   1d50c:	10c5883a 	add	r2,r2,r3
   1d510:	80c00115 	stw	r3,4(r16)
   1d514:	81c00015 	stw	r7,0(r16)
   1d518:	d8800d15 	stw	r2,52(sp)
   1d51c:	dfc00c15 	stw	ra,48(sp)
   1d520:	f8c00208 	cmpgei	r3,ra,8
   1d524:	1802641e 	bne	r3,zero,1deb8 <___vfiprintf_internal_r+0xe48>
   1d528:	84000204 	addi	r16,r16,8
   1d52c:	f9400044 	addi	r5,ra,1
   1d530:	f809883a 	mov	r4,ra
   1d534:	d8c00a47 	ldb	r3,41(sp)
   1d538:	81800204 	addi	r6,r16,8
   1d53c:	1801c726 	beq	r3,zero,1dc5c <___vfiprintf_internal_r+0xbec>
   1d540:	d8c00a44 	addi	r3,sp,41
   1d544:	10800044 	addi	r2,r2,1
   1d548:	80c00015 	stw	r3,0(r16)
   1d54c:	00c00044 	movi	r3,1
   1d550:	80c00115 	stw	r3,4(r16)
   1d554:	d8800d15 	stw	r2,52(sp)
   1d558:	d9400c15 	stw	r5,48(sp)
   1d55c:	28c00208 	cmpgei	r3,r5,8
   1d560:	18025e26 	beq	r3,zero,1dedc <___vfiprintf_internal_r+0xe6c>
   1d564:	1001ad1e 	bne	r2,zero,1dc1c <___vfiprintf_internal_r+0xbac>
   1d568:	7002611e 	bne	r14,zero,1def0 <___vfiprintf_internal_r+0xe80>
   1d56c:	0009883a 	mov	r4,zero
   1d570:	d9801a04 	addi	r6,sp,104
   1d574:	01400044 	movi	r5,1
   1d578:	e021883a 	mov	r16,fp
   1d57c:	63002018 	cmpnei	r12,r12,128
   1d580:	6001c726 	beq	r12,zero,1dca0 <___vfiprintf_internal_r+0xc30>
   1d584:	8b63c83a 	sub	r17,r17,r13
   1d588:	0440260e 	bge	zero,r17,1d624 <___vfiprintf_internal_r+0x5b4>
   1d58c:	88c00450 	cmplti	r3,r17,17
   1d590:	01c000b4 	movhi	r7,2
   1d594:	1802e71e 	bne	r3,zero,1e134 <___vfiprintf_internal_r+0x10c4>
   1d598:	39dc3e84 	addi	r7,r7,28922
   1d59c:	03000404 	movi	r12,16
   1d5a0:	00000606 	br	1d5bc <___vfiprintf_internal_r+0x54c>
   1d5a4:	21400084 	addi	r5,r4,2
   1d5a8:	84000204 	addi	r16,r16,8
   1d5ac:	1809883a 	mov	r4,r3
   1d5b0:	8c7ffc04 	addi	r17,r17,-16
   1d5b4:	88c00448 	cmpgei	r3,r17,17
   1d5b8:	18000f26 	beq	r3,zero,1d5f8 <___vfiprintf_internal_r+0x588>
   1d5bc:	20c00044 	addi	r3,r4,1
   1d5c0:	10800404 	addi	r2,r2,16
   1d5c4:	81c00015 	stw	r7,0(r16)
   1d5c8:	83000115 	stw	r12,4(r16)
   1d5cc:	d8800d15 	stw	r2,52(sp)
   1d5d0:	d8c00c15 	stw	r3,48(sp)
   1d5d4:	19400208 	cmpgei	r5,r3,8
   1d5d8:	283ff226 	beq	r5,zero,1d5a4 <__alt_mem_mcu_subsystem_ram_0+0x77ffd5a4>
   1d5dc:	10017f1e 	bne	r2,zero,1dbdc <___vfiprintf_internal_r+0xb6c>
   1d5e0:	8c7ffc04 	addi	r17,r17,-16
   1d5e4:	88c00448 	cmpgei	r3,r17,17
   1d5e8:	01400044 	movi	r5,1
   1d5ec:	0009883a 	mov	r4,zero
   1d5f0:	e021883a 	mov	r16,fp
   1d5f4:	183ff11e 	bne	r3,zero,1d5bc <__alt_mem_mcu_subsystem_ram_0+0x77ffd5bc>
   1d5f8:	81000204 	addi	r4,r16,8
   1d5fc:	1445883a 	add	r2,r2,r17
   1d600:	81c00015 	stw	r7,0(r16)
   1d604:	84400115 	stw	r17,4(r16)
   1d608:	d8800d15 	stw	r2,52(sp)
   1d60c:	d9400c15 	stw	r5,48(sp)
   1d610:	28c00208 	cmpgei	r3,r5,8
   1d614:	1802411e 	bne	r3,zero,1df1c <___vfiprintf_internal_r+0xeac>
   1d618:	29400044 	addi	r5,r5,1
   1d61c:	21800204 	addi	r6,r4,8
   1d620:	2021883a 	mov	r16,r4
   1d624:	6885883a 	add	r2,r13,r2
   1d628:	d9400c15 	stw	r5,48(sp)
   1d62c:	85800015 	stw	r22,0(r16)
   1d630:	83400115 	stw	r13,4(r16)
   1d634:	d8800d15 	stw	r2,52(sp)
   1d638:	29400210 	cmplti	r5,r5,8
   1d63c:	2801c91e 	bne	r5,zero,1dd64 <___vfiprintf_internal_r+0xcf4>
   1d640:	1001c11e 	bne	r2,zero,1dd48 <___vfiprintf_internal_r+0xcd8>
   1d644:	d8000c15 	stw	zero,48(sp)
   1d648:	9cc0010c 	andi	r19,r19,4
   1d64c:	98002726 	beq	r19,zero,1d6ec <___vfiprintf_internal_r+0x67c>
   1d650:	9561c83a 	sub	r16,r18,r21
   1d654:	0400250e 	bge	zero,r16,1d6ec <___vfiprintf_internal_r+0x67c>
   1d658:	e00d883a 	mov	r6,fp
   1d65c:	80c00450 	cmplti	r3,r16,17
   1d660:	01c000b4 	movhi	r7,2
   1d664:	d9000c17 	ldw	r4,48(sp)
   1d668:	1802db1e 	bne	r3,zero,1e1d8 <___vfiprintf_internal_r+0x1168>
   1d66c:	39dc4284 	addi	r7,r7,28938
   1d670:	04400404 	movi	r17,16
   1d674:	00000606 	br	1d690 <___vfiprintf_internal_r+0x620>
   1d678:	21400084 	addi	r5,r4,2
   1d67c:	31800204 	addi	r6,r6,8
   1d680:	1809883a 	mov	r4,r3
   1d684:	843ffc04 	addi	r16,r16,-16
   1d688:	80c00448 	cmpgei	r3,r16,17
   1d68c:	18000f26 	beq	r3,zero,1d6cc <___vfiprintf_internal_r+0x65c>
   1d690:	20c00044 	addi	r3,r4,1
   1d694:	10800404 	addi	r2,r2,16
   1d698:	31c00015 	stw	r7,0(r6)
   1d69c:	34400115 	stw	r17,4(r6)
   1d6a0:	d8800d15 	stw	r2,52(sp)
   1d6a4:	d8c00c15 	stw	r3,48(sp)
   1d6a8:	19400208 	cmpgei	r5,r3,8
   1d6ac:	283ff226 	beq	r5,zero,1d678 <__alt_mem_mcu_subsystem_ram_0+0x77ffd678>
   1d6b0:	1001d41e 	bne	r2,zero,1de04 <___vfiprintf_internal_r+0xd94>
   1d6b4:	843ffc04 	addi	r16,r16,-16
   1d6b8:	80c00448 	cmpgei	r3,r16,17
   1d6bc:	01400044 	movi	r5,1
   1d6c0:	0009883a 	mov	r4,zero
   1d6c4:	e00d883a 	mov	r6,fp
   1d6c8:	183ff11e 	bne	r3,zero,1d690 <__alt_mem_mcu_subsystem_ram_0+0x77ffd690>
   1d6cc:	1405883a 	add	r2,r2,r16
   1d6d0:	d9400c15 	stw	r5,48(sp)
   1d6d4:	31c00015 	stw	r7,0(r6)
   1d6d8:	34000115 	stw	r16,4(r6)
   1d6dc:	d8800d15 	stw	r2,52(sp)
   1d6e0:	29400210 	cmplti	r5,r5,8
   1d6e4:	2801a31e 	bne	r5,zero,1dd74 <___vfiprintf_internal_r+0xd04>
   1d6e8:	10026a1e 	bne	r2,zero,1e094 <___vfiprintf_internal_r+0x1024>
   1d6ec:	9540010e 	bge	r18,r21,1d6f4 <___vfiprintf_internal_r+0x684>
   1d6f0:	a825883a 	mov	r18,r21
   1d6f4:	d8800017 	ldw	r2,0(sp)
   1d6f8:	1485883a 	add	r2,r2,r18
   1d6fc:	d8800015 	stw	r2,0(sp)
   1d700:	0001a706 	br	1dda0 <___vfiprintf_internal_r+0xd30>
   1d704:	d9000117 	ldw	r4,4(sp)
   1d708:	a00b883a 	mov	r5,r20
   1d70c:	0015b700 	call	15b70 <__swsetup_r>
   1d710:	1002c41e 	bne	r2,zero,1e224 <___vfiprintf_internal_r+0x11b4>
   1d714:	a080030b 	ldhu	r2,12(r20)
   1d718:	1080068c 	andi	r2,r2,26
   1d71c:	10800298 	cmpnei	r2,r2,10
   1d720:	103e751e 	bne	r2,zero,1d0f8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd0f8>
   1d724:	a080038f 	ldh	r2,14(r20)
   1d728:	103e7316 	blt	r2,zero,1d0f8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd0f8>
   1d72c:	d9c00217 	ldw	r7,8(sp)
   1d730:	d9000117 	ldw	r4,4(sp)
   1d734:	b80d883a 	mov	r6,r23
   1d738:	a00b883a 	mov	r5,r20
   1d73c:	001e2a80 	call	1e2a8 <__sbprintf>
   1d740:	d8800015 	stw	r2,0(sp)
   1d744:	00009906 	br	1d9ac <___vfiprintf_internal_r+0x93c>
   1d748:	1802181e 	bne	r3,zero,1dfac <___vfiprintf_internal_r+0xf3c>
   1d74c:	d8000c15 	stw	zero,48(sp)
   1d750:	e021883a 	mov	r16,fp
   1d754:	003e8706 	br	1d174 <__alt_mem_mcu_subsystem_ram_0+0x77ffd174>
   1d758:	0025883a 	mov	r18,zero
   1d75c:	113ff404 	addi	r4,r2,-48
   1d760:	bdc00044 	addi	r23,r23,1
   1d764:	948002a4 	muli	r18,r18,10
   1d768:	b8bfffc7 	ldb	r2,-1(r23)
   1d76c:	24a5883a 	add	r18,r4,r18
   1d770:	113ff404 	addi	r4,r2,-48
   1d774:	214002b0 	cmpltui	r5,r4,10
   1d778:	283ff91e 	bne	r5,zero,1d760 <__alt_mem_mcu_subsystem_ram_0+0x77ffd760>
   1d77c:	113ff804 	addi	r4,r2,-32
   1d780:	21401668 	cmpgeui	r5,r4,89
   1d784:	283e8c26 	beq	r5,zero,1d1b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1b8>
   1d788:	31803fcc 	andi	r6,r6,255
   1d78c:	3002be1e 	bne	r6,zero,1e288 <___vfiprintf_internal_r+0x1218>
   1d790:	10008126 	beq	r2,zero,1d998 <___vfiprintf_internal_r+0x928>
   1d794:	d8800e05 	stb	r2,56(sp)
   1d798:	d8000a45 	stb	zero,41(sp)
   1d79c:	05400044 	movi	r21,1
   1d7a0:	03400044 	movi	r13,1
   1d7a4:	dd800e04 	addi	r22,sp,56
   1d7a8:	0000d706 	br	1db08 <___vfiprintf_internal_r+0xa98>
   1d7ac:	18c02014 	ori	r3,r3,128
   1d7b0:	b8800007 	ldb	r2,0(r23)
   1d7b4:	003e7c06 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d7b8:	b8800007 	ldb	r2,0(r23)
   1d7bc:	b9400044 	addi	r5,r23,1
   1d7c0:	11000aa0 	cmpeqi	r4,r2,42
   1d7c4:	20029a1e 	bne	r4,zero,1e230 <___vfiprintf_internal_r+0x11c0>
   1d7c8:	113ff404 	addi	r4,r2,-48
   1d7cc:	220002b0 	cmpltui	r8,r4,10
   1d7d0:	282f883a 	mov	r23,r5
   1d7d4:	0023883a 	mov	r17,zero
   1d7d8:	403e7426 	beq	r8,zero,1d1ac <__alt_mem_mcu_subsystem_ram_0+0x77ffd1ac>
   1d7dc:	bdc00044 	addi	r23,r23,1
   1d7e0:	8c4002a4 	muli	r17,r17,10
   1d7e4:	b8bfffc7 	ldb	r2,-1(r23)
   1d7e8:	8923883a 	add	r17,r17,r4
   1d7ec:	113ff404 	addi	r4,r2,-48
   1d7f0:	214002b0 	cmpltui	r5,r4,10
   1d7f4:	283ff91e 	bne	r5,zero,1d7dc <__alt_mem_mcu_subsystem_ram_0+0x77ffd7dc>
   1d7f8:	003e6c06 	br	1d1ac <__alt_mem_mcu_subsystem_ram_0+0x77ffd1ac>
   1d7fc:	b8800003 	ldbu	r2,0(r23)
   1d800:	10803fcc 	andi	r2,r2,255
   1d804:	1080201c 	xori	r2,r2,128
   1d808:	18c00114 	ori	r3,r3,4
   1d80c:	10bfe004 	addi	r2,r2,-128
   1d810:	003e6506 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d814:	01800044 	movi	r6,1
   1d818:	01c00ac4 	movi	r7,43
   1d81c:	b8800007 	ldb	r2,0(r23)
   1d820:	003e6106 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d824:	d8800217 	ldw	r2,8(sp)
   1d828:	14800017 	ldw	r18,0(r2)
   1d82c:	15400104 	addi	r21,r2,4
   1d830:	b8800003 	ldbu	r2,0(r23)
   1d834:	90024516 	blt	r18,zero,1e14c <___vfiprintf_internal_r+0x10dc>
   1d838:	dd400215 	stw	r21,8(sp)
   1d83c:	10803fcc 	andi	r2,r2,255
   1d840:	1080201c 	xori	r2,r2,128
   1d844:	10bfe004 	addi	r2,r2,-128
   1d848:	003e5706 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d84c:	18c00054 	ori	r3,r3,1
   1d850:	b8800007 	ldb	r2,0(r23)
   1d854:	003e5406 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d858:	39003fcc 	andi	r4,r7,255
   1d85c:	2100201c 	xori	r4,r4,128
   1d860:	213fe004 	addi	r4,r4,-128
   1d864:	b8800003 	ldbu	r2,0(r23)
   1d868:	203ff41e 	bne	r4,zero,1d83c <__alt_mem_mcu_subsystem_ram_0+0x77ffd83c>
   1d86c:	10803fcc 	andi	r2,r2,255
   1d870:	1080201c 	xori	r2,r2,128
   1d874:	01800044 	movi	r6,1
   1d878:	01c00804 	movi	r7,32
   1d87c:	10bfe004 	addi	r2,r2,-128
   1d880:	003e4906 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d884:	d9000217 	ldw	r4,8(sp)
   1d888:	1880040c 	andi	r2,r3,16
   1d88c:	22c00017 	ldw	r11,0(r4)
   1d890:	21000104 	addi	r4,r4,4
   1d894:	d9000215 	stw	r4,8(sp)
   1d898:	1000c81e 	bne	r2,zero,1dbbc <___vfiprintf_internal_r+0xb4c>
   1d89c:	1880100c 	andi	r2,r3,64
   1d8a0:	1000c626 	beq	r2,zero,1dbbc <___vfiprintf_internal_r+0xb4c>
   1d8a4:	5d7fffcc 	andi	r21,r11,65535
   1d8a8:	001b883a 	mov	r13,zero
   1d8ac:	0005883a 	mov	r2,zero
   1d8b0:	003ed906 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1d8b4:	b8800007 	ldb	r2,0(r23)
   1d8b8:	11001b18 	cmpnei	r4,r2,108
   1d8bc:	20022626 	beq	r4,zero,1e158 <___vfiprintf_internal_r+0x10e8>
   1d8c0:	18c00414 	ori	r3,r3,16
   1d8c4:	003e3806 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d8c8:	d8800217 	ldw	r2,8(sp)
   1d8cc:	d8000a45 	stb	zero,41(sp)
   1d8d0:	15800017 	ldw	r22,0(r2)
   1d8d4:	14c00104 	addi	r19,r2,4
   1d8d8:	b0022626 	beq	r22,zero,1e174 <___vfiprintf_internal_r+0x1104>
   1d8dc:	88bfffe0 	cmpeqi	r2,r17,-1
   1d8e0:	1001f31e 	bne	r2,zero,1e0b0 <___vfiprintf_internal_r+0x1040>
   1d8e4:	880d883a 	mov	r6,r17
   1d8e8:	000b883a 	mov	r5,zero
   1d8ec:	b009883a 	mov	r4,r22
   1d8f0:	d8c00215 	stw	r3,8(sp)
   1d8f4:	00189280 	call	18928 <memchr>
   1d8f8:	d8c00217 	ldw	r3,8(sp)
   1d8fc:	10023926 	beq	r2,zero,1e1e4 <___vfiprintf_internal_r+0x1174>
   1d900:	dcc00215 	stw	r19,8(sp)
   1d904:	159bc83a 	sub	r13,r2,r22
   1d908:	db000a43 	ldbu	r12,41(sp)
   1d90c:	1827883a 	mov	r19,r3
   1d910:	0023883a 	mov	r17,zero
   1d914:	003ecf06 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1d918:	18c00814 	ori	r3,r3,32
   1d91c:	b8800007 	ldb	r2,0(r23)
   1d920:	003e2106 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1d924:	d9000217 	ldw	r4,8(sp)
   1d928:	00800c04 	movi	r2,48
   1d92c:	d8800a85 	stb	r2,42(sp)
   1d930:	00801e04 	movi	r2,120
   1d934:	014000b4 	movhi	r5,2
   1d938:	d8800ac5 	stb	r2,43(sp)
   1d93c:	20800104 	addi	r2,r4,4
   1d940:	d8800215 	stw	r2,8(sp)
   1d944:	289afc04 	addi	r2,r5,27632
   1d948:	d8800615 	stw	r2,24(sp)
   1d94c:	25400017 	ldw	r21,0(r4)
   1d950:	001b883a 	mov	r13,zero
   1d954:	18c00094 	ori	r3,r3,2
   1d958:	00800084 	movi	r2,2
   1d95c:	003eae06 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1d960:	31803fcc 	andi	r6,r6,255
   1d964:	30023e1e 	bne	r6,zero,1e260 <___vfiprintf_internal_r+0x11f0>
   1d968:	d9400217 	ldw	r5,8(sp)
   1d96c:	1880080c 	andi	r2,r3,32
   1d970:	29000017 	ldw	r4,0(r5)
   1d974:	29400104 	addi	r5,r5,4
   1d978:	d9400215 	stw	r5,8(sp)
   1d97c:	1001d626 	beq	r2,zero,1e0d8 <___vfiprintf_internal_r+0x1068>
   1d980:	d8c00017 	ldw	r3,0(sp)
   1d984:	1805d7fa 	srai	r2,r3,31
   1d988:	20c00015 	stw	r3,0(r4)
   1d98c:	20800115 	stw	r2,4(r4)
   1d990:	b8800007 	ldb	r2,0(r23)
   1d994:	103de11e 	bne	r2,zero,1d11c <__alt_mem_mcu_subsystem_ram_0+0x77ffd11c>
   1d998:	d8800d17 	ldw	r2,52(sp)
   1d99c:	10021c1e 	bne	r2,zero,1e210 <___vfiprintf_internal_r+0x11a0>
   1d9a0:	a080030b 	ldhu	r2,12(r20)
   1d9a4:	1080100c 	andi	r2,r2,64
   1d9a8:	10021e1e 	bne	r2,zero,1e224 <___vfiprintf_internal_r+0x11b4>
   1d9ac:	d8800017 	ldw	r2,0(sp)
   1d9b0:	dfc03117 	ldw	ra,196(sp)
   1d9b4:	df003017 	ldw	fp,192(sp)
   1d9b8:	ddc02f17 	ldw	r23,188(sp)
   1d9bc:	dd802e17 	ldw	r22,184(sp)
   1d9c0:	dd402d17 	ldw	r21,180(sp)
   1d9c4:	dd002c17 	ldw	r20,176(sp)
   1d9c8:	dcc02b17 	ldw	r19,172(sp)
   1d9cc:	dc802a17 	ldw	r18,168(sp)
   1d9d0:	dc402917 	ldw	r17,164(sp)
   1d9d4:	dc002817 	ldw	r16,160(sp)
   1d9d8:	dec03204 	addi	sp,sp,200
   1d9dc:	f800283a 	ret
   1d9e0:	d9000217 	ldw	r4,8(sp)
   1d9e4:	00800044 	movi	r2,1
   1d9e8:	25400017 	ldw	r21,0(r4)
   1d9ec:	23400117 	ldw	r13,4(r4)
   1d9f0:	21000204 	addi	r4,r4,8
   1d9f4:	d9000215 	stw	r4,8(sp)
   1d9f8:	003e8706 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1d9fc:	31803fcc 	andi	r6,r6,255
   1da00:	3002191e 	bne	r6,zero,1e268 <___vfiprintf_internal_r+0x11f8>
   1da04:	010000b4 	movhi	r4,2
   1da08:	211af704 	addi	r4,r4,27612
   1da0c:	d9000615 	stw	r4,24(sp)
   1da10:	1900080c 	andi	r4,r3,32
   1da14:	20001626 	beq	r4,zero,1da70 <___vfiprintf_internal_r+0xa00>
   1da18:	d9000217 	ldw	r4,8(sp)
   1da1c:	25400017 	ldw	r21,0(r4)
   1da20:	23400117 	ldw	r13,4(r4)
   1da24:	21000204 	addi	r4,r4,8
   1da28:	d9000215 	stw	r4,8(sp)
   1da2c:	1900004c 	andi	r4,r3,1
   1da30:	20001b26 	beq	r4,zero,1daa0 <___vfiprintf_internal_r+0xa30>
   1da34:	ab48b03a 	or	r4,r21,r13
   1da38:	20001926 	beq	r4,zero,1daa0 <___vfiprintf_internal_r+0xa30>
   1da3c:	01000c04 	movi	r4,48
   1da40:	d8800ac5 	stb	r2,43(sp)
   1da44:	d9000a85 	stb	r4,42(sp)
   1da48:	18c00094 	ori	r3,r3,2
   1da4c:	00800084 	movi	r2,2
   1da50:	003e7106 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1da54:	31803fcc 	andi	r6,r6,255
   1da58:	3002051e 	bne	r6,zero,1e270 <___vfiprintf_internal_r+0x1200>
   1da5c:	010000b4 	movhi	r4,2
   1da60:	211afc04 	addi	r4,r4,27632
   1da64:	d9000615 	stw	r4,24(sp)
   1da68:	1900080c 	andi	r4,r3,32
   1da6c:	203fea1e 	bne	r4,zero,1da18 <__alt_mem_mcu_subsystem_ram_0+0x77ffda18>
   1da70:	d9400217 	ldw	r5,8(sp)
   1da74:	1900040c 	andi	r4,r3,16
   1da78:	2ac00017 	ldw	r11,0(r5)
   1da7c:	29400104 	addi	r5,r5,4
   1da80:	d9400215 	stw	r5,8(sp)
   1da84:	2001531e 	bne	r4,zero,1dfd4 <___vfiprintf_internal_r+0xf64>
   1da88:	1900100c 	andi	r4,r3,64
   1da8c:	20015126 	beq	r4,zero,1dfd4 <___vfiprintf_internal_r+0xf64>
   1da90:	1900004c 	andi	r4,r3,1
   1da94:	5d7fffcc 	andi	r21,r11,65535
   1da98:	001b883a 	mov	r13,zero
   1da9c:	203fe51e 	bne	r4,zero,1da34 <__alt_mem_mcu_subsystem_ram_0+0x77ffda34>
   1daa0:	00800084 	movi	r2,2
   1daa4:	003e5c06 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1daa8:	31803fcc 	andi	r6,r6,255
   1daac:	3001f21e 	bne	r6,zero,1e278 <___vfiprintf_internal_r+0x1208>
   1dab0:	1880080c 	andi	r2,r3,32
   1dab4:	10001c26 	beq	r2,zero,1db28 <___vfiprintf_internal_r+0xab8>
   1dab8:	d8800217 	ldw	r2,8(sp)
   1dabc:	15400017 	ldw	r21,0(r2)
   1dac0:	13400117 	ldw	r13,4(r2)
   1dac4:	10800204 	addi	r2,r2,8
   1dac8:	d8800215 	stw	r2,8(sp)
   1dacc:	68002316 	blt	r13,zero,1db5c <___vfiprintf_internal_r+0xaec>
   1dad0:	88bfffd8 	cmpnei	r2,r17,-1
   1dad4:	db000a43 	ldbu	r12,41(sp)
   1dad8:	10002a26 	beq	r2,zero,1db84 <___vfiprintf_internal_r+0xb14>
   1dadc:	00800044 	movi	r2,1
   1dae0:	003e5106 	br	1d428 <__alt_mem_mcu_subsystem_ram_0+0x77ffd428>
   1dae4:	d9000217 	ldw	r4,8(sp)
   1dae8:	d8000a45 	stb	zero,41(sp)
   1daec:	05400044 	movi	r21,1
   1daf0:	20800017 	ldw	r2,0(r4)
   1daf4:	21000104 	addi	r4,r4,4
   1daf8:	d9000215 	stw	r4,8(sp)
   1dafc:	d8800e05 	stb	r2,56(sp)
   1db00:	03400044 	movi	r13,1
   1db04:	dd800e04 	addi	r22,sp,56
   1db08:	1827883a 	mov	r19,r3
   1db0c:	0023883a 	mov	r17,zero
   1db10:	003e5806 	br	1d474 <__alt_mem_mcu_subsystem_ram_0+0x77ffd474>
   1db14:	31803fcc 	andi	r6,r6,255
   1db18:	3001d91e 	bne	r6,zero,1e280 <___vfiprintf_internal_r+0x1210>
   1db1c:	18c00414 	ori	r3,r3,16
   1db20:	1880080c 	andi	r2,r3,32
   1db24:	103fe41e 	bne	r2,zero,1dab8 <__alt_mem_mcu_subsystem_ram_0+0x77ffdab8>
   1db28:	d9000217 	ldw	r4,8(sp)
   1db2c:	1880040c 	andi	r2,r3,16
   1db30:	22c00017 	ldw	r11,0(r4)
   1db34:	21000104 	addi	r4,r4,4
   1db38:	d9000215 	stw	r4,8(sp)
   1db3c:	1001221e 	bne	r2,zero,1dfc8 <___vfiprintf_internal_r+0xf58>
   1db40:	1880100c 	andi	r2,r3,64
   1db44:	10012026 	beq	r2,zero,1dfc8 <___vfiprintf_internal_r+0xf58>
   1db48:	5d7fffcc 	andi	r21,r11,65535
   1db4c:	ad60001c 	xori	r21,r21,32768
   1db50:	ad600004 	addi	r21,r21,-32768
   1db54:	a81bd7fa 	srai	r13,r21,31
   1db58:	683fdd0e 	bge	r13,zero,1dad0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdad0>
   1db5c:	0557c83a 	sub	r11,zero,r21
   1db60:	5804c03a 	cmpne	r2,r11,zero
   1db64:	035bc83a 	sub	r13,zero,r13
   1db68:	689bc83a 	sub	r13,r13,r2
   1db6c:	00800b44 	movi	r2,45
   1db70:	d8800a45 	stb	r2,41(sp)
   1db74:	88bfffd8 	cmpnei	r2,r17,-1
   1db78:	582b883a 	mov	r21,r11
   1db7c:	03000b44 	movi	r12,45
   1db80:	103fd61e 	bne	r2,zero,1dadc <__alt_mem_mcu_subsystem_ram_0+0x77ffdadc>
   1db84:	1827883a 	mov	r19,r3
   1db88:	6800ed1e 	bne	r13,zero,1df40 <___vfiprintf_internal_r+0xed0>
   1db8c:	a88002a8 	cmpgeui	r2,r21,10
   1db90:	1000eb1e 	bne	r2,zero,1df40 <___vfiprintf_internal_r+0xed0>
   1db94:	aac00c04 	addi	r11,r21,48
   1db98:	dac017c5 	stb	r11,95(sp)
   1db9c:	03400044 	movi	r13,1
   1dba0:	dd8017c4 	addi	r22,sp,95
   1dba4:	003e2b06 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1dba8:	18c01014 	ori	r3,r3,64
   1dbac:	b8800007 	ldb	r2,0(r23)
   1dbb0:	003d7d06 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1dbb4:	0017b9c0 	call	17b9c <__sinit>
   1dbb8:	003d3f06 	br	1d0b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd0b8>
   1dbbc:	582b883a 	mov	r21,r11
   1dbc0:	001b883a 	mov	r13,zero
   1dbc4:	0005883a 	mov	r2,zero
   1dbc8:	003e1306 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1dbcc:	582b883a 	mov	r21,r11
   1dbd0:	001b883a 	mov	r13,zero
   1dbd4:	00800044 	movi	r2,1
   1dbd8:	003e0f06 	br	1d418 <__alt_mem_mcu_subsystem_ram_0+0x77ffd418>
   1dbdc:	d9000117 	ldw	r4,4(sp)
   1dbe0:	d9800b04 	addi	r6,sp,44
   1dbe4:	a00b883a 	mov	r5,r20
   1dbe8:	d9c00515 	stw	r7,20(sp)
   1dbec:	db000415 	stw	r12,16(sp)
   1dbf0:	db400315 	stw	r13,12(sp)
   1dbf4:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dbf8:	103f691e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dbfc:	d9000c17 	ldw	r4,48(sp)
   1dc00:	d8800d17 	ldw	r2,52(sp)
   1dc04:	e021883a 	mov	r16,fp
   1dc08:	21400044 	addi	r5,r4,1
   1dc0c:	d9c00517 	ldw	r7,20(sp)
   1dc10:	db000417 	ldw	r12,16(sp)
   1dc14:	db400317 	ldw	r13,12(sp)
   1dc18:	003e6506 	br	1d5b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd5b0>
   1dc1c:	d9000117 	ldw	r4,4(sp)
   1dc20:	d9800b04 	addi	r6,sp,44
   1dc24:	a00b883a 	mov	r5,r20
   1dc28:	db400515 	stw	r13,20(sp)
   1dc2c:	db000415 	stw	r12,16(sp)
   1dc30:	db800315 	stw	r14,12(sp)
   1dc34:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dc38:	103f591e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dc3c:	d9000c17 	ldw	r4,48(sp)
   1dc40:	d8800d17 	ldw	r2,52(sp)
   1dc44:	db400517 	ldw	r13,20(sp)
   1dc48:	db000417 	ldw	r12,16(sp)
   1dc4c:	db800317 	ldw	r14,12(sp)
   1dc50:	d9801a04 	addi	r6,sp,104
   1dc54:	21400044 	addi	r5,r4,1
   1dc58:	e021883a 	mov	r16,fp
   1dc5c:	703e4726 	beq	r14,zero,1d57c <__alt_mem_mcu_subsystem_ram_0+0x77ffd57c>
   1dc60:	d8c00a84 	addi	r3,sp,42
   1dc64:	10800084 	addi	r2,r2,2
   1dc68:	80c00015 	stw	r3,0(r16)
   1dc6c:	00c00084 	movi	r3,2
   1dc70:	80c00115 	stw	r3,4(r16)
   1dc74:	d8800d15 	stw	r2,52(sp)
   1dc78:	d9400c15 	stw	r5,48(sp)
   1dc7c:	28c00208 	cmpgei	r3,r5,8
   1dc80:	1800a126 	beq	r3,zero,1df08 <___vfiprintf_internal_r+0xe98>
   1dc84:	1000d61e 	bne	r2,zero,1dfe0 <___vfiprintf_internal_r+0xf70>
   1dc88:	63002018 	cmpnei	r12,r12,128
   1dc8c:	d9801a04 	addi	r6,sp,104
   1dc90:	01400044 	movi	r5,1
   1dc94:	0009883a 	mov	r4,zero
   1dc98:	e021883a 	mov	r16,fp
   1dc9c:	603e391e 	bne	r12,zero,1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1dca0:	9547c83a 	sub	r3,r18,r21
   1dca4:	00fe370e 	bge	zero,r3,1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1dca8:	19c00450 	cmplti	r7,r3,17
   1dcac:	3801531e 	bne	r7,zero,1e1fc <___vfiprintf_internal_r+0x118c>
   1dcb0:	01c000b4 	movhi	r7,2
   1dcb4:	39dc3e84 	addi	r7,r7,28922
   1dcb8:	03000404 	movi	r12,16
   1dcbc:	00000606 	br	1dcd8 <___vfiprintf_internal_r+0xc68>
   1dcc0:	23800084 	addi	r14,r4,2
   1dcc4:	84000204 	addi	r16,r16,8
   1dcc8:	2809883a 	mov	r4,r5
   1dccc:	18fffc04 	addi	r3,r3,-16
   1dcd0:	19400448 	cmpgei	r5,r3,17
   1dcd4:	28000f26 	beq	r5,zero,1dd14 <___vfiprintf_internal_r+0xca4>
   1dcd8:	21400044 	addi	r5,r4,1
   1dcdc:	10800404 	addi	r2,r2,16
   1dce0:	81c00015 	stw	r7,0(r16)
   1dce4:	83000115 	stw	r12,4(r16)
   1dce8:	d8800d15 	stw	r2,52(sp)
   1dcec:	d9400c15 	stw	r5,48(sp)
   1dcf0:	29800208 	cmpgei	r6,r5,8
   1dcf4:	303ff226 	beq	r6,zero,1dcc0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdcc0>
   1dcf8:	10005d1e 	bne	r2,zero,1de70 <___vfiprintf_internal_r+0xe00>
   1dcfc:	18fffc04 	addi	r3,r3,-16
   1dd00:	19400448 	cmpgei	r5,r3,17
   1dd04:	03800044 	movi	r14,1
   1dd08:	0009883a 	mov	r4,zero
   1dd0c:	e021883a 	mov	r16,fp
   1dd10:	283ff11e 	bne	r5,zero,1dcd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffdcd8>
   1dd14:	83000204 	addi	r12,r16,8
   1dd18:	10c5883a 	add	r2,r2,r3
   1dd1c:	80c00115 	stw	r3,4(r16)
   1dd20:	81c00015 	stw	r7,0(r16)
   1dd24:	d8800d15 	stw	r2,52(sp)
   1dd28:	db800c15 	stw	r14,48(sp)
   1dd2c:	70c00208 	cmpgei	r3,r14,8
   1dd30:	1800ba1e 	bne	r3,zero,1e01c <___vfiprintf_internal_r+0xfac>
   1dd34:	71400044 	addi	r5,r14,1
   1dd38:	61800204 	addi	r6,r12,8
   1dd3c:	7009883a 	mov	r4,r14
   1dd40:	6021883a 	mov	r16,r12
   1dd44:	003e0f06 	br	1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1dd48:	d9000117 	ldw	r4,4(sp)
   1dd4c:	d9800b04 	addi	r6,sp,44
   1dd50:	a00b883a 	mov	r5,r20
   1dd54:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dd58:	103f111e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dd5c:	d8800d17 	ldw	r2,52(sp)
   1dd60:	e00d883a 	mov	r6,fp
   1dd64:	9cc0010c 	andi	r19,r19,4
   1dd68:	98000226 	beq	r19,zero,1dd74 <___vfiprintf_internal_r+0xd04>
   1dd6c:	9561c83a 	sub	r16,r18,r21
   1dd70:	043e3a16 	blt	zero,r16,1d65c <__alt_mem_mcu_subsystem_ram_0+0x77ffd65c>
   1dd74:	9540010e 	bge	r18,r21,1dd7c <___vfiprintf_internal_r+0xd0c>
   1dd78:	a825883a 	mov	r18,r21
   1dd7c:	d8c00017 	ldw	r3,0(sp)
   1dd80:	1c87883a 	add	r3,r3,r18
   1dd84:	d8c00015 	stw	r3,0(sp)
   1dd88:	10000526 	beq	r2,zero,1dda0 <___vfiprintf_internal_r+0xd30>
   1dd8c:	d9000117 	ldw	r4,4(sp)
   1dd90:	d9800b04 	addi	r6,sp,44
   1dd94:	a00b883a 	mov	r5,r20
   1dd98:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dd9c:	103f001e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dda0:	d8000c15 	stw	zero,48(sp)
   1dda4:	e021883a 	mov	r16,fp
   1dda8:	003cda06 	br	1d114 <__alt_mem_mcu_subsystem_ram_0+0x77ffd114>
   1ddac:	d9000117 	ldw	r4,4(sp)
   1ddb0:	d9800b04 	addi	r6,sp,44
   1ddb4:	a00b883a 	mov	r5,r20
   1ddb8:	d9c00915 	stw	r7,36(sp)
   1ddbc:	dbc00815 	stw	r15,32(sp)
   1ddc0:	d8c00715 	stw	r3,28(sp)
   1ddc4:	db400515 	stw	r13,20(sp)
   1ddc8:	db000415 	stw	r12,16(sp)
   1ddcc:	db800315 	stw	r14,12(sp)
   1ddd0:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1ddd4:	103ef21e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1ddd8:	d9000c17 	ldw	r4,48(sp)
   1dddc:	d8800d17 	ldw	r2,52(sp)
   1dde0:	e021883a 	mov	r16,fp
   1dde4:	27c00044 	addi	ra,r4,1
   1dde8:	d9c00917 	ldw	r7,36(sp)
   1ddec:	dbc00817 	ldw	r15,32(sp)
   1ddf0:	d8c00717 	ldw	r3,28(sp)
   1ddf4:	db400517 	ldw	r13,20(sp)
   1ddf8:	db000417 	ldw	r12,16(sp)
   1ddfc:	db800317 	ldw	r14,12(sp)
   1de00:	003db006 	br	1d4c4 <__alt_mem_mcu_subsystem_ram_0+0x77ffd4c4>
   1de04:	d9000117 	ldw	r4,4(sp)
   1de08:	d9800b04 	addi	r6,sp,44
   1de0c:	a00b883a 	mov	r5,r20
   1de10:	d9c00315 	stw	r7,12(sp)
   1de14:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1de18:	103ee11e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1de1c:	d9000c17 	ldw	r4,48(sp)
   1de20:	d8800d17 	ldw	r2,52(sp)
   1de24:	e00d883a 	mov	r6,fp
   1de28:	21400044 	addi	r5,r4,1
   1de2c:	d9c00317 	ldw	r7,12(sp)
   1de30:	003e1406 	br	1d684 <__alt_mem_mcu_subsystem_ram_0+0x77ffd684>
   1de34:	e02d883a 	mov	r22,fp
   1de38:	d9000617 	ldw	r4,24(sp)
   1de3c:	a88003cc 	andi	r2,r21,15
   1de40:	6806973a 	slli	r3,r13,28
   1de44:	2085883a 	add	r2,r4,r2
   1de48:	a816d13a 	srli	r11,r21,4
   1de4c:	10800003 	ldbu	r2,0(r2)
   1de50:	681ad13a 	srli	r13,r13,4
   1de54:	b5bfffc4 	addi	r22,r22,-1
   1de58:	1aeab03a 	or	r21,r3,r11
   1de5c:	b0800005 	stb	r2,0(r22)
   1de60:	ab44b03a 	or	r2,r21,r13
   1de64:	103ff41e 	bne	r2,zero,1de38 <__alt_mem_mcu_subsystem_ram_0+0x77ffde38>
   1de68:	e59bc83a 	sub	r13,fp,r22
   1de6c:	003d7906 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1de70:	d9000117 	ldw	r4,4(sp)
   1de74:	d9800b04 	addi	r6,sp,44
   1de78:	a00b883a 	mov	r5,r20
   1de7c:	d9c00715 	stw	r7,28(sp)
   1de80:	db000515 	stw	r12,20(sp)
   1de84:	d8c00415 	stw	r3,16(sp)
   1de88:	db400315 	stw	r13,12(sp)
   1de8c:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1de90:	103ec31e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1de94:	d9000c17 	ldw	r4,48(sp)
   1de98:	d8800d17 	ldw	r2,52(sp)
   1de9c:	e021883a 	mov	r16,fp
   1dea0:	23800044 	addi	r14,r4,1
   1dea4:	d9c00717 	ldw	r7,28(sp)
   1dea8:	db000517 	ldw	r12,20(sp)
   1deac:	d8c00417 	ldw	r3,16(sp)
   1deb0:	db400317 	ldw	r13,12(sp)
   1deb4:	003f8506 	br	1dccc <__alt_mem_mcu_subsystem_ram_0+0x77ffdccc>
   1deb8:	10008e1e 	bne	r2,zero,1e0f4 <___vfiprintf_internal_r+0x1084>
   1debc:	d8c00a47 	ldb	r3,41(sp)
   1dec0:	18006e26 	beq	r3,zero,1e07c <___vfiprintf_internal_r+0x100c>
   1dec4:	d8800a44 	addi	r2,sp,41
   1dec8:	d8801815 	stw	r2,96(sp)
   1decc:	00800044 	movi	r2,1
   1ded0:	d8801915 	stw	r2,100(sp)
   1ded4:	d9801a04 	addi	r6,sp,104
   1ded8:	01400044 	movi	r5,1
   1dedc:	2809883a 	mov	r4,r5
   1dee0:	3021883a 	mov	r16,r6
   1dee4:	29400044 	addi	r5,r5,1
   1dee8:	31800204 	addi	r6,r6,8
   1deec:	003f5b06 	br	1dc5c <__alt_mem_mcu_subsystem_ram_0+0x77ffdc5c>
   1def0:	d8800a84 	addi	r2,sp,42
   1def4:	d8801815 	stw	r2,96(sp)
   1def8:	00800084 	movi	r2,2
   1defc:	d8801915 	stw	r2,100(sp)
   1df00:	d9801a04 	addi	r6,sp,104
   1df04:	01400044 	movi	r5,1
   1df08:	2809883a 	mov	r4,r5
   1df0c:	3021883a 	mov	r16,r6
   1df10:	29400044 	addi	r5,r5,1
   1df14:	31800204 	addi	r6,r6,8
   1df18:	003d9806 	br	1d57c <__alt_mem_mcu_subsystem_ram_0+0x77ffd57c>
   1df1c:	1000451e 	bne	r2,zero,1e034 <___vfiprintf_internal_r+0xfc4>
   1df20:	00c00044 	movi	r3,1
   1df24:	6805883a 	mov	r2,r13
   1df28:	dd801815 	stw	r22,96(sp)
   1df2c:	db401915 	stw	r13,100(sp)
   1df30:	db400d15 	stw	r13,52(sp)
   1df34:	d8c00c15 	stw	r3,48(sp)
   1df38:	d9801a04 	addi	r6,sp,104
   1df3c:	003f8906 	br	1dd64 <__alt_mem_mcu_subsystem_ram_0+0x77ffdd64>
   1df40:	e02d883a 	mov	r22,fp
   1df44:	a809883a 	mov	r4,r21
   1df48:	680b883a 	mov	r5,r13
   1df4c:	01800284 	movi	r6,10
   1df50:	000f883a 	mov	r7,zero
   1df54:	db000415 	stw	r12,16(sp)
   1df58:	db400315 	stw	r13,12(sp)
   1df5c:	000d0840 	call	d084 <__umoddi3>
   1df60:	db400317 	ldw	r13,12(sp)
   1df64:	10800c04 	addi	r2,r2,48
   1df68:	b5bfffc4 	addi	r22,r22,-1
   1df6c:	a809883a 	mov	r4,r21
   1df70:	680b883a 	mov	r5,r13
   1df74:	b0800005 	stb	r2,0(r22)
   1df78:	01800284 	movi	r6,10
   1df7c:	000f883a 	mov	r7,zero
   1df80:	000caec0 	call	caec <__udivdi3>
   1df84:	102b883a 	mov	r21,r2
   1df88:	10c4b03a 	or	r2,r2,r3
   1df8c:	181b883a 	mov	r13,r3
   1df90:	db000417 	ldw	r12,16(sp)
   1df94:	103feb1e 	bne	r2,zero,1df44 <__alt_mem_mcu_subsystem_ram_0+0x77ffdf44>
   1df98:	e59bc83a 	sub	r13,fp,r22
   1df9c:	003d2d06 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1dfa0:	001b883a 	mov	r13,zero
   1dfa4:	e02d883a 	mov	r22,fp
   1dfa8:	003d2a06 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1dfac:	d9000117 	ldw	r4,4(sp)
   1dfb0:	d9800b04 	addi	r6,sp,44
   1dfb4:	a00b883a 	mov	r5,r20
   1dfb8:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dfbc:	103e781e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dfc0:	e021883a 	mov	r16,fp
   1dfc4:	003c6b06 	br	1d174 <__alt_mem_mcu_subsystem_ram_0+0x77ffd174>
   1dfc8:	582b883a 	mov	r21,r11
   1dfcc:	581bd7fa 	srai	r13,r11,31
   1dfd0:	003ebe06 	br	1dacc <__alt_mem_mcu_subsystem_ram_0+0x77ffdacc>
   1dfd4:	582b883a 	mov	r21,r11
   1dfd8:	001b883a 	mov	r13,zero
   1dfdc:	003e9306 	br	1da2c <__alt_mem_mcu_subsystem_ram_0+0x77ffda2c>
   1dfe0:	d9000117 	ldw	r4,4(sp)
   1dfe4:	d9800b04 	addi	r6,sp,44
   1dfe8:	a00b883a 	mov	r5,r20
   1dfec:	db400415 	stw	r13,16(sp)
   1dff0:	db000315 	stw	r12,12(sp)
   1dff4:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1dff8:	103e691e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1dffc:	d9000c17 	ldw	r4,48(sp)
   1e000:	d8800d17 	ldw	r2,52(sp)
   1e004:	d9801a04 	addi	r6,sp,104
   1e008:	21400044 	addi	r5,r4,1
   1e00c:	e021883a 	mov	r16,fp
   1e010:	db400417 	ldw	r13,16(sp)
   1e014:	db000317 	ldw	r12,12(sp)
   1e018:	003d5806 	br	1d57c <__alt_mem_mcu_subsystem_ram_0+0x77ffd57c>
   1e01c:	10005e1e 	bne	r2,zero,1e198 <___vfiprintf_internal_r+0x1128>
   1e020:	d9801a04 	addi	r6,sp,104
   1e024:	01400044 	movi	r5,1
   1e028:	0009883a 	mov	r4,zero
   1e02c:	e021883a 	mov	r16,fp
   1e030:	003d5406 	br	1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1e034:	d9000117 	ldw	r4,4(sp)
   1e038:	d9800b04 	addi	r6,sp,44
   1e03c:	a00b883a 	mov	r5,r20
   1e040:	db400315 	stw	r13,12(sp)
   1e044:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1e048:	103e551e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1e04c:	d9400c17 	ldw	r5,48(sp)
   1e050:	d8800d17 	ldw	r2,52(sp)
   1e054:	d9801a04 	addi	r6,sp,104
   1e058:	29400044 	addi	r5,r5,1
   1e05c:	e021883a 	mov	r16,fp
   1e060:	db400317 	ldw	r13,12(sp)
   1e064:	003d6f06 	br	1d624 <__alt_mem_mcu_subsystem_ram_0+0x77ffd624>
   1e068:	10c00060 	cmpeqi	r3,r2,1
   1e06c:	183cc526 	beq	r3,zero,1d384 <__alt_mem_mcu_subsystem_ram_0+0x77ffd384>
   1e070:	003ec806 	br	1db94 <__alt_mem_mcu_subsystem_ram_0+0x77ffdb94>
   1e074:	e02d883a 	mov	r22,fp
   1e078:	003cf606 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1e07c:	703f9c1e 	bne	r14,zero,1def0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdef0>
   1e080:	0009883a 	mov	r4,zero
   1e084:	d9801a04 	addi	r6,sp,104
   1e088:	01400044 	movi	r5,1
   1e08c:	e021883a 	mov	r16,fp
   1e090:	003d3c06 	br	1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1e094:	d9000117 	ldw	r4,4(sp)
   1e098:	d9800b04 	addi	r6,sp,44
   1e09c:	a00b883a 	mov	r5,r20
   1e0a0:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1e0a4:	103e3e1e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1e0a8:	d8800d17 	ldw	r2,52(sp)
   1e0ac:	003f3106 	br	1dd74 <__alt_mem_mcu_subsystem_ram_0+0x77ffdd74>
   1e0b0:	b009883a 	mov	r4,r22
   1e0b4:	d8c00315 	stw	r3,12(sp)
   1e0b8:	00112e40 	call	112e4 <strlen>
   1e0bc:	d8c00317 	ldw	r3,12(sp)
   1e0c0:	dcc00215 	stw	r19,8(sp)
   1e0c4:	101b883a 	mov	r13,r2
   1e0c8:	db000a43 	ldbu	r12,41(sp)
   1e0cc:	1827883a 	mov	r19,r3
   1e0d0:	0023883a 	mov	r17,zero
   1e0d4:	003cdf06 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1e0d8:	1880040c 	andi	r2,r3,16
   1e0dc:	1000181e 	bne	r2,zero,1e140 <___vfiprintf_internal_r+0x10d0>
   1e0e0:	18c0100c 	andi	r3,r3,64
   1e0e4:	18001626 	beq	r3,zero,1e140 <___vfiprintf_internal_r+0x10d0>
   1e0e8:	d8800017 	ldw	r2,0(sp)
   1e0ec:	2080000d 	sth	r2,0(r4)
   1e0f0:	003c0806 	br	1d114 <__alt_mem_mcu_subsystem_ram_0+0x77ffd114>
   1e0f4:	d9000117 	ldw	r4,4(sp)
   1e0f8:	d9800b04 	addi	r6,sp,44
   1e0fc:	a00b883a 	mov	r5,r20
   1e100:	db400515 	stw	r13,20(sp)
   1e104:	db000415 	stw	r12,16(sp)
   1e108:	db800315 	stw	r14,12(sp)
   1e10c:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1e110:	103e231e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1e114:	d9000c17 	ldw	r4,48(sp)
   1e118:	d8800d17 	ldw	r2,52(sp)
   1e11c:	e021883a 	mov	r16,fp
   1e120:	21400044 	addi	r5,r4,1
   1e124:	db400517 	ldw	r13,20(sp)
   1e128:	db000417 	ldw	r12,16(sp)
   1e12c:	db800317 	ldw	r14,12(sp)
   1e130:	003d0006 	br	1d534 <__alt_mem_mcu_subsystem_ram_0+0x77ffd534>
   1e134:	3009883a 	mov	r4,r6
   1e138:	39dc3e84 	addi	r7,r7,28922
   1e13c:	003d2f06 	br	1d5fc <__alt_mem_mcu_subsystem_ram_0+0x77ffd5fc>
   1e140:	d8800017 	ldw	r2,0(sp)
   1e144:	20800015 	stw	r2,0(r4)
   1e148:	003bf206 	br	1d114 <__alt_mem_mcu_subsystem_ram_0+0x77ffd114>
   1e14c:	04a5c83a 	sub	r18,zero,r18
   1e150:	dd400215 	stw	r21,8(sp)
   1e154:	003daa06 	br	1d800 <__alt_mem_mcu_subsystem_ram_0+0x77ffd800>
   1e158:	b8800043 	ldbu	r2,1(r23)
   1e15c:	18c00814 	ori	r3,r3,32
   1e160:	bdc00044 	addi	r23,r23,1
   1e164:	10803fcc 	andi	r2,r2,255
   1e168:	1080201c 	xori	r2,r2,128
   1e16c:	10bfe004 	addi	r2,r2,-128
   1e170:	003c0d06 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1e174:	888001f0 	cmpltui	r2,r17,7
   1e178:	881b883a 	mov	r13,r17
   1e17c:	1000011e 	bne	r2,zero,1e184 <___vfiprintf_internal_r+0x1114>
   1e180:	03400184 	movi	r13,6
   1e184:	058000b4 	movhi	r22,2
   1e188:	682b883a 	mov	r21,r13
   1e18c:	dcc00215 	stw	r19,8(sp)
   1e190:	b59b0104 	addi	r22,r22,27652
   1e194:	003e5c06 	br	1db08 <__alt_mem_mcu_subsystem_ram_0+0x77ffdb08>
   1e198:	d9000117 	ldw	r4,4(sp)
   1e19c:	d9800b04 	addi	r6,sp,44
   1e1a0:	a00b883a 	mov	r5,r20
   1e1a4:	db400315 	stw	r13,12(sp)
   1e1a8:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1e1ac:	103dfc1e 	bne	r2,zero,1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1e1b0:	d9000c17 	ldw	r4,48(sp)
   1e1b4:	d8800d17 	ldw	r2,52(sp)
   1e1b8:	d9801a04 	addi	r6,sp,104
   1e1bc:	21400044 	addi	r5,r4,1
   1e1c0:	e021883a 	mov	r16,fp
   1e1c4:	db400317 	ldw	r13,12(sp)
   1e1c8:	003cee06 	br	1d584 <__alt_mem_mcu_subsystem_ram_0+0x77ffd584>
   1e1cc:	303f883a 	mov	ra,r6
   1e1d0:	39dc4284 	addi	r7,r7,28938
   1e1d4:	003ccd06 	br	1d50c <__alt_mem_mcu_subsystem_ram_0+0x77ffd50c>
   1e1d8:	21400044 	addi	r5,r4,1
   1e1dc:	39dc4284 	addi	r7,r7,28938
   1e1e0:	003d3a06 	br	1d6cc <__alt_mem_mcu_subsystem_ram_0+0x77ffd6cc>
   1e1e4:	881b883a 	mov	r13,r17
   1e1e8:	dcc00215 	stw	r19,8(sp)
   1e1ec:	db000a43 	ldbu	r12,41(sp)
   1e1f0:	1827883a 	mov	r19,r3
   1e1f4:	0023883a 	mov	r17,zero
   1e1f8:	003c9606 	br	1d454 <__alt_mem_mcu_subsystem_ram_0+0x77ffd454>
   1e1fc:	01c000b4 	movhi	r7,2
   1e200:	3019883a 	mov	r12,r6
   1e204:	281d883a 	mov	r14,r5
   1e208:	39dc3e84 	addi	r7,r7,28922
   1e20c:	003ec206 	br	1dd18 <__alt_mem_mcu_subsystem_ram_0+0x77ffdd18>
   1e210:	d9000117 	ldw	r4,4(sp)
   1e214:	d9800b04 	addi	r6,sp,44
   1e218:	a00b883a 	mov	r5,r20
   1e21c:	001cf640 	call	1cf64 <__sprint_r.part.0>
   1e220:	003ddf06 	br	1d9a0 <__alt_mem_mcu_subsystem_ram_0+0x77ffd9a0>
   1e224:	00bfffc4 	movi	r2,-1
   1e228:	d8800015 	stw	r2,0(sp)
   1e22c:	003ddf06 	br	1d9ac <__alt_mem_mcu_subsystem_ram_0+0x77ffd9ac>
   1e230:	d8800217 	ldw	r2,8(sp)
   1e234:	14400017 	ldw	r17,0(r2)
   1e238:	15400104 	addi	r21,r2,4
   1e23c:	8800010e 	bge	r17,zero,1e244 <___vfiprintf_internal_r+0x11d4>
   1e240:	047fffc4 	movi	r17,-1
   1e244:	b8800043 	ldbu	r2,1(r23)
   1e248:	dd400215 	stw	r21,8(sp)
   1e24c:	282f883a 	mov	r23,r5
   1e250:	10803fcc 	andi	r2,r2,255
   1e254:	1080201c 	xori	r2,r2,128
   1e258:	10bfe004 	addi	r2,r2,-128
   1e25c:	003bd206 	br	1d1a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffd1a8>
   1e260:	d9c00a45 	stb	r7,41(sp)
   1e264:	003dc006 	br	1d968 <__alt_mem_mcu_subsystem_ram_0+0x77ffd968>
   1e268:	d9c00a45 	stb	r7,41(sp)
   1e26c:	003de506 	br	1da04 <__alt_mem_mcu_subsystem_ram_0+0x77ffda04>
   1e270:	d9c00a45 	stb	r7,41(sp)
   1e274:	003df906 	br	1da5c <__alt_mem_mcu_subsystem_ram_0+0x77ffda5c>
   1e278:	d9c00a45 	stb	r7,41(sp)
   1e27c:	003e0c06 	br	1dab0 <__alt_mem_mcu_subsystem_ram_0+0x77ffdab0>
   1e280:	d9c00a45 	stb	r7,41(sp)
   1e284:	003e2506 	br	1db1c <__alt_mem_mcu_subsystem_ram_0+0x77ffdb1c>
   1e288:	d9c00a45 	stb	r7,41(sp)
   1e28c:	003d4006 	br	1d790 <__alt_mem_mcu_subsystem_ram_0+0x77ffd790>

0001e290 <__vfiprintf_internal>:
   1e290:	008000f4 	movhi	r2,3
   1e294:	300f883a 	mov	r7,r6
   1e298:	280d883a 	mov	r6,r5
   1e29c:	200b883a 	mov	r5,r4
   1e2a0:	1123b117 	ldw	r4,-28988(r2)
   1e2a4:	001d0701 	jmpi	1d070 <___vfiprintf_internal_r>

0001e2a8 <__sbprintf>:
   1e2a8:	2880030b 	ldhu	r2,12(r5)
   1e2ac:	2b001917 	ldw	r12,100(r5)
   1e2b0:	2ac0038b 	ldhu	r11,14(r5)
   1e2b4:	2a800717 	ldw	r10,28(r5)
   1e2b8:	2a400917 	ldw	r9,36(r5)
   1e2bc:	defee204 	addi	sp,sp,-1144
   1e2c0:	da001a04 	addi	r8,sp,104
   1e2c4:	00c10004 	movi	r3,1024
   1e2c8:	dc011a15 	stw	r16,1128(sp)
   1e2cc:	10bfff4c 	andi	r2,r2,65533
   1e2d0:	2821883a 	mov	r16,r5
   1e2d4:	d80b883a 	mov	r5,sp
   1e2d8:	dc811c15 	stw	r18,1136(sp)
   1e2dc:	dc411b15 	stw	r17,1132(sp)
   1e2e0:	dfc11d15 	stw	ra,1140(sp)
   1e2e4:	2025883a 	mov	r18,r4
   1e2e8:	d880030d 	sth	r2,12(sp)
   1e2ec:	db001915 	stw	r12,100(sp)
   1e2f0:	dac0038d 	sth	r11,14(sp)
   1e2f4:	da800715 	stw	r10,28(sp)
   1e2f8:	da400915 	stw	r9,36(sp)
   1e2fc:	da000015 	stw	r8,0(sp)
   1e300:	da000415 	stw	r8,16(sp)
   1e304:	d8c00215 	stw	r3,8(sp)
   1e308:	d8c00515 	stw	r3,20(sp)
   1e30c:	d8000615 	stw	zero,24(sp)
   1e310:	001d0700 	call	1d070 <___vfiprintf_internal_r>
   1e314:	1023883a 	mov	r17,r2
   1e318:	10000d0e 	bge	r2,zero,1e350 <__sbprintf+0xa8>
   1e31c:	d880030b 	ldhu	r2,12(sp)
   1e320:	1080100c 	andi	r2,r2,64
   1e324:	10000326 	beq	r2,zero,1e334 <__sbprintf+0x8c>
   1e328:	8080030b 	ldhu	r2,12(r16)
   1e32c:	10801014 	ori	r2,r2,64
   1e330:	8080030d 	sth	r2,12(r16)
   1e334:	8805883a 	mov	r2,r17
   1e338:	dfc11d17 	ldw	ra,1140(sp)
   1e33c:	dc811c17 	ldw	r18,1136(sp)
   1e340:	dc411b17 	ldw	r17,1132(sp)
   1e344:	dc011a17 	ldw	r16,1128(sp)
   1e348:	dec11e04 	addi	sp,sp,1144
   1e34c:	f800283a 	ret
   1e350:	d80b883a 	mov	r5,sp
   1e354:	9009883a 	mov	r4,r18
   1e358:	00177fc0 	call	177fc <_fflush_r>
   1e35c:	103fef26 	beq	r2,zero,1e31c <__alt_mem_mcu_subsystem_ram_0+0x77ffe31c>
   1e360:	047fffc4 	movi	r17,-1
   1e364:	003fed06 	br	1e31c <__alt_mem_mcu_subsystem_ram_0+0x77ffe31c>

0001e368 <__swbuf_r>:
   1e368:	defffb04 	addi	sp,sp,-20
   1e36c:	dc800215 	stw	r18,8(sp)
   1e370:	dc400115 	stw	r17,4(sp)
   1e374:	dc000015 	stw	r16,0(sp)
   1e378:	dfc00415 	stw	ra,16(sp)
   1e37c:	dcc00315 	stw	r19,12(sp)
   1e380:	2023883a 	mov	r17,r4
   1e384:	2825883a 	mov	r18,r5
   1e388:	3021883a 	mov	r16,r6
   1e38c:	20000226 	beq	r4,zero,1e398 <__swbuf_r+0x30>
   1e390:	20800e17 	ldw	r2,56(r4)
   1e394:	10003e26 	beq	r2,zero,1e490 <__swbuf_r+0x128>
   1e398:	80800617 	ldw	r2,24(r16)
   1e39c:	80c0030b 	ldhu	r3,12(r16)
   1e3a0:	80800215 	stw	r2,8(r16)
   1e3a4:	1880020c 	andi	r2,r3,8
   1e3a8:	10001f26 	beq	r2,zero,1e428 <__swbuf_r+0xc0>
   1e3ac:	80800417 	ldw	r2,16(r16)
   1e3b0:	10001d26 	beq	r2,zero,1e428 <__swbuf_r+0xc0>
   1e3b4:	1908000c 	andi	r4,r3,8192
   1e3b8:	94c03fcc 	andi	r19,r18,255
   1e3bc:	20002326 	beq	r4,zero,1e44c <__swbuf_r+0xe4>
   1e3c0:	80c00017 	ldw	r3,0(r16)
   1e3c4:	81000517 	ldw	r4,20(r16)
   1e3c8:	1885c83a 	sub	r2,r3,r2
   1e3cc:	1100290e 	bge	r2,r4,1e474 <__swbuf_r+0x10c>
   1e3d0:	10800044 	addi	r2,r2,1
   1e3d4:	81000217 	ldw	r4,8(r16)
   1e3d8:	19400044 	addi	r5,r3,1
   1e3dc:	81400015 	stw	r5,0(r16)
   1e3e0:	213fffc4 	addi	r4,r4,-1
   1e3e4:	81000215 	stw	r4,8(r16)
   1e3e8:	1c800005 	stb	r18,0(r3)
   1e3ec:	80c00517 	ldw	r3,20(r16)
   1e3f0:	18802926 	beq	r3,r2,1e498 <__swbuf_r+0x130>
   1e3f4:	8080030b 	ldhu	r2,12(r16)
   1e3f8:	1080004c 	andi	r2,r2,1
   1e3fc:	10000226 	beq	r2,zero,1e408 <__swbuf_r+0xa0>
   1e400:	98800298 	cmpnei	r2,r19,10
   1e404:	10002426 	beq	r2,zero,1e498 <__swbuf_r+0x130>
   1e408:	9805883a 	mov	r2,r19
   1e40c:	dfc00417 	ldw	ra,16(sp)
   1e410:	dcc00317 	ldw	r19,12(sp)
   1e414:	dc800217 	ldw	r18,8(sp)
   1e418:	dc400117 	ldw	r17,4(sp)
   1e41c:	dc000017 	ldw	r16,0(sp)
   1e420:	dec00504 	addi	sp,sp,20
   1e424:	f800283a 	ret
   1e428:	800b883a 	mov	r5,r16
   1e42c:	8809883a 	mov	r4,r17
   1e430:	0015b700 	call	15b70 <__swsetup_r>
   1e434:	10001c1e 	bne	r2,zero,1e4a8 <__swbuf_r+0x140>
   1e438:	80c0030b 	ldhu	r3,12(r16)
   1e43c:	80800417 	ldw	r2,16(r16)
   1e440:	94c03fcc 	andi	r19,r18,255
   1e444:	1908000c 	andi	r4,r3,8192
   1e448:	203fdd1e 	bne	r4,zero,1e3c0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe3c0>
   1e44c:	81001917 	ldw	r4,100(r16)
   1e450:	18c80014 	ori	r3,r3,8192
   1e454:	0177ffc4 	movi	r5,-8193
   1e458:	2148703a 	and	r4,r4,r5
   1e45c:	80c0030d 	sth	r3,12(r16)
   1e460:	80c00017 	ldw	r3,0(r16)
   1e464:	81001915 	stw	r4,100(r16)
   1e468:	81000517 	ldw	r4,20(r16)
   1e46c:	1885c83a 	sub	r2,r3,r2
   1e470:	113fd716 	blt	r2,r4,1e3d0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe3d0>
   1e474:	800b883a 	mov	r5,r16
   1e478:	8809883a 	mov	r4,r17
   1e47c:	00177fc0 	call	177fc <_fflush_r>
   1e480:	1000091e 	bne	r2,zero,1e4a8 <__swbuf_r+0x140>
   1e484:	80c00017 	ldw	r3,0(r16)
   1e488:	00800044 	movi	r2,1
   1e48c:	003fd106 	br	1e3d4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe3d4>
   1e490:	0017b9c0 	call	17b9c <__sinit>
   1e494:	003fc006 	br	1e398 <__alt_mem_mcu_subsystem_ram_0+0x77ffe398>
   1e498:	800b883a 	mov	r5,r16
   1e49c:	8809883a 	mov	r4,r17
   1e4a0:	00177fc0 	call	177fc <_fflush_r>
   1e4a4:	103fd826 	beq	r2,zero,1e408 <__alt_mem_mcu_subsystem_ram_0+0x77ffe408>
   1e4a8:	04ffffc4 	movi	r19,-1
   1e4ac:	003fd606 	br	1e408 <__alt_mem_mcu_subsystem_ram_0+0x77ffe408>

0001e4b0 <__swbuf>:
   1e4b0:	008000f4 	movhi	r2,3
   1e4b4:	280d883a 	mov	r6,r5
   1e4b8:	200b883a 	mov	r5,r4
   1e4bc:	1123b117 	ldw	r4,-28988(r2)
   1e4c0:	001e3681 	jmpi	1e368 <__swbuf_r>

0001e4c4 <_write_r>:
   1e4c4:	defffe04 	addi	sp,sp,-8
   1e4c8:	2805883a 	mov	r2,r5
   1e4cc:	dc000015 	stw	r16,0(sp)
   1e4d0:	300b883a 	mov	r5,r6
   1e4d4:	2021883a 	mov	r16,r4
   1e4d8:	380d883a 	mov	r6,r7
   1e4dc:	1009883a 	mov	r4,r2
   1e4e0:	008000f4 	movhi	r2,3
   1e4e4:	dfc00115 	stw	ra,4(sp)
   1e4e8:	102b2a15 	stw	zero,-21336(r2)
   1e4ec:	00206c00 	call	206c0 <write>
   1e4f0:	10ffffd8 	cmpnei	r3,r2,-1
   1e4f4:	18000426 	beq	r3,zero,1e508 <_write_r+0x44>
   1e4f8:	dfc00117 	ldw	ra,4(sp)
   1e4fc:	dc000017 	ldw	r16,0(sp)
   1e500:	dec00204 	addi	sp,sp,8
   1e504:	f800283a 	ret
   1e508:	00c000f4 	movhi	r3,3
   1e50c:	18eb2a17 	ldw	r3,-21336(r3)
   1e510:	183ff926 	beq	r3,zero,1e4f8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe4f8>
   1e514:	80c00015 	stw	r3,0(r16)
   1e518:	dfc00117 	ldw	ra,4(sp)
   1e51c:	dc000017 	ldw	r16,0(sp)
   1e520:	dec00204 	addi	sp,sp,8
   1e524:	f800283a 	ret

0001e528 <_close_r>:
   1e528:	defffe04 	addi	sp,sp,-8
   1e52c:	dc000015 	stw	r16,0(sp)
   1e530:	008000f4 	movhi	r2,3
   1e534:	2021883a 	mov	r16,r4
   1e538:	2809883a 	mov	r4,r5
   1e53c:	dfc00115 	stw	ra,4(sp)
   1e540:	102b2a15 	stw	zero,-21336(r2)
   1e544:	001fa9c0 	call	1fa9c <close>
   1e548:	10ffffd8 	cmpnei	r3,r2,-1
   1e54c:	18000426 	beq	r3,zero,1e560 <_close_r+0x38>
   1e550:	dfc00117 	ldw	ra,4(sp)
   1e554:	dc000017 	ldw	r16,0(sp)
   1e558:	dec00204 	addi	sp,sp,8
   1e55c:	f800283a 	ret
   1e560:	00c000f4 	movhi	r3,3
   1e564:	18eb2a17 	ldw	r3,-21336(r3)
   1e568:	183ff926 	beq	r3,zero,1e550 <__alt_mem_mcu_subsystem_ram_0+0x77ffe550>
   1e56c:	80c00015 	stw	r3,0(r16)
   1e570:	dfc00117 	ldw	ra,4(sp)
   1e574:	dc000017 	ldw	r16,0(sp)
   1e578:	dec00204 	addi	sp,sp,8
   1e57c:	f800283a 	ret

0001e580 <_fclose_r>:
   1e580:	defffc04 	addi	sp,sp,-16
   1e584:	dfc00315 	stw	ra,12(sp)
   1e588:	dc800215 	stw	r18,8(sp)
   1e58c:	dc400115 	stw	r17,4(sp)
   1e590:	dc000015 	stw	r16,0(sp)
   1e594:	28000726 	beq	r5,zero,1e5b4 <_fclose_r+0x34>
   1e598:	2023883a 	mov	r17,r4
   1e59c:	2821883a 	mov	r16,r5
   1e5a0:	20000226 	beq	r4,zero,1e5ac <_fclose_r+0x2c>
   1e5a4:	20800e17 	ldw	r2,56(r4)
   1e5a8:	10002726 	beq	r2,zero,1e648 <_fclose_r+0xc8>
   1e5ac:	8080030f 	ldh	r2,12(r16)
   1e5b0:	1000081e 	bne	r2,zero,1e5d4 <_fclose_r+0x54>
   1e5b4:	0025883a 	mov	r18,zero
   1e5b8:	9005883a 	mov	r2,r18
   1e5bc:	dfc00317 	ldw	ra,12(sp)
   1e5c0:	dc800217 	ldw	r18,8(sp)
   1e5c4:	dc400117 	ldw	r17,4(sp)
   1e5c8:	dc000017 	ldw	r16,0(sp)
   1e5cc:	dec00404 	addi	sp,sp,16
   1e5d0:	f800283a 	ret
   1e5d4:	800b883a 	mov	r5,r16
   1e5d8:	8809883a 	mov	r4,r17
   1e5dc:	00175dc0 	call	175dc <__sflush_r>
   1e5e0:	1025883a 	mov	r18,r2
   1e5e4:	80800b17 	ldw	r2,44(r16)
   1e5e8:	10000426 	beq	r2,zero,1e5fc <_fclose_r+0x7c>
   1e5ec:	81400717 	ldw	r5,28(r16)
   1e5f0:	8809883a 	mov	r4,r17
   1e5f4:	103ee83a 	callr	r2
   1e5f8:	10001716 	blt	r2,zero,1e658 <_fclose_r+0xd8>
   1e5fc:	8080030b 	ldhu	r2,12(r16)
   1e600:	1080200c 	andi	r2,r2,128
   1e604:	1000161e 	bne	r2,zero,1e660 <_fclose_r+0xe0>
   1e608:	81400c17 	ldw	r5,48(r16)
   1e60c:	28000526 	beq	r5,zero,1e624 <_fclose_r+0xa4>
   1e610:	80801004 	addi	r2,r16,64
   1e614:	28800226 	beq	r5,r2,1e620 <_fclose_r+0xa0>
   1e618:	8809883a 	mov	r4,r17
   1e61c:	0017d000 	call	17d00 <_free_r>
   1e620:	80000c15 	stw	zero,48(r16)
   1e624:	81401117 	ldw	r5,68(r16)
   1e628:	28000326 	beq	r5,zero,1e638 <_fclose_r+0xb8>
   1e62c:	8809883a 	mov	r4,r17
   1e630:	0017d000 	call	17d00 <_free_r>
   1e634:	80001115 	stw	zero,68(r16)
   1e638:	0017bac0 	call	17bac <__sfp_lock_acquire>
   1e63c:	8000030d 	sth	zero,12(r16)
   1e640:	0017bb00 	call	17bb0 <__sfp_lock_release>
   1e644:	003fdc06 	br	1e5b8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe5b8>
   1e648:	0017b9c0 	call	17b9c <__sinit>
   1e64c:	8080030f 	ldh	r2,12(r16)
   1e650:	103fd826 	beq	r2,zero,1e5b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe5b4>
   1e654:	003fdf06 	br	1e5d4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe5d4>
   1e658:	04bfffc4 	movi	r18,-1
   1e65c:	003fe706 	br	1e5fc <__alt_mem_mcu_subsystem_ram_0+0x77ffe5fc>
   1e660:	81400417 	ldw	r5,16(r16)
   1e664:	8809883a 	mov	r4,r17
   1e668:	0017d000 	call	17d00 <_free_r>
   1e66c:	003fe606 	br	1e608 <__alt_mem_mcu_subsystem_ram_0+0x77ffe608>

0001e670 <fclose>:
   1e670:	008000f4 	movhi	r2,3
   1e674:	200b883a 	mov	r5,r4
   1e678:	1123b117 	ldw	r4,-28988(r2)
   1e67c:	001e5801 	jmpi	1e580 <_fclose_r>

0001e680 <__fputwc>:
   1e680:	defff904 	addi	sp,sp,-28
   1e684:	dcc00415 	stw	r19,16(sp)
   1e688:	dc800315 	stw	r18,12(sp)
   1e68c:	dc000115 	stw	r16,4(sp)
   1e690:	dfc00615 	stw	ra,24(sp)
   1e694:	dd000515 	stw	r20,20(sp)
   1e698:	dc400215 	stw	r17,8(sp)
   1e69c:	2027883a 	mov	r19,r4
   1e6a0:	2825883a 	mov	r18,r5
   1e6a4:	3021883a 	mov	r16,r6
   1e6a8:	000fd780 	call	fd78 <__locale_mb_cur_max>
   1e6ac:	10800058 	cmpnei	r2,r2,1
   1e6b0:	1000071e 	bne	r2,zero,1e6d0 <__fputwc+0x50>
   1e6b4:	90bfffc4 	addi	r2,r18,-1
   1e6b8:	10803fe8 	cmpgeui	r2,r2,255
   1e6bc:	1000041e 	bne	r2,zero,1e6d0 <__fputwc+0x50>
   1e6c0:	900b883a 	mov	r5,r18
   1e6c4:	dc8000c5 	stb	r18,3(sp)
   1e6c8:	05000044 	movi	r20,1
   1e6cc:	00000a06 	br	1e6f8 <__fputwc+0x78>
   1e6d0:	81c01704 	addi	r7,r16,92
   1e6d4:	900d883a 	mov	r6,r18
   1e6d8:	d94000c4 	addi	r5,sp,3
   1e6dc:	9809883a 	mov	r4,r19
   1e6e0:	001f6900 	call	1f690 <_wcrtomb_r>
   1e6e4:	1029883a 	mov	r20,r2
   1e6e8:	10bfffd8 	cmpnei	r2,r2,-1
   1e6ec:	10003826 	beq	r2,zero,1e7d0 <__fputwc+0x150>
   1e6f0:	a0001f26 	beq	r20,zero,1e770 <__fputwc+0xf0>
   1e6f4:	d94000c3 	ldbu	r5,3(sp)
   1e6f8:	0023883a 	mov	r17,zero
   1e6fc:	00000a06 	br	1e728 <__fputwc+0xa8>
   1e700:	80800017 	ldw	r2,0(r16)
   1e704:	11400005 	stb	r5,0(r2)
   1e708:	80c00017 	ldw	r3,0(r16)
   1e70c:	18c00044 	addi	r3,r3,1
   1e710:	80c00015 	stw	r3,0(r16)
   1e714:	8c400044 	addi	r17,r17,1
   1e718:	d88000c4 	addi	r2,sp,3
   1e71c:	1445883a 	add	r2,r2,r17
   1e720:	8d00132e 	bgeu	r17,r20,1e770 <__fputwc+0xf0>
   1e724:	11400003 	ldbu	r5,0(r2)
   1e728:	80c00217 	ldw	r3,8(r16)
   1e72c:	18ffffc4 	addi	r3,r3,-1
   1e730:	80c00215 	stw	r3,8(r16)
   1e734:	183ff20e 	bge	r3,zero,1e700 <__alt_mem_mcu_subsystem_ram_0+0x77ffe700>
   1e738:	80800617 	ldw	r2,24(r16)
   1e73c:	18801516 	blt	r3,r2,1e794 <__fputwc+0x114>
   1e740:	80800017 	ldw	r2,0(r16)
   1e744:	11400005 	stb	r5,0(r2)
   1e748:	80800017 	ldw	r2,0(r16)
   1e74c:	10c00003 	ldbu	r3,0(r2)
   1e750:	10800044 	addi	r2,r2,1
   1e754:	18c002a0 	cmpeqi	r3,r3,10
   1e758:	1800171e 	bne	r3,zero,1e7b8 <__fputwc+0x138>
   1e75c:	80800015 	stw	r2,0(r16)
   1e760:	8c400044 	addi	r17,r17,1
   1e764:	d88000c4 	addi	r2,sp,3
   1e768:	1445883a 	add	r2,r2,r17
   1e76c:	8d3fed36 	bltu	r17,r20,1e724 <__alt_mem_mcu_subsystem_ram_0+0x77ffe724>
   1e770:	9005883a 	mov	r2,r18
   1e774:	dfc00617 	ldw	ra,24(sp)
   1e778:	dd000517 	ldw	r20,20(sp)
   1e77c:	dcc00417 	ldw	r19,16(sp)
   1e780:	dc800317 	ldw	r18,12(sp)
   1e784:	dc400217 	ldw	r17,8(sp)
   1e788:	dc000117 	ldw	r16,4(sp)
   1e78c:	dec00704 	addi	sp,sp,28
   1e790:	f800283a 	ret
   1e794:	29403fcc 	andi	r5,r5,255
   1e798:	800d883a 	mov	r6,r16
   1e79c:	9809883a 	mov	r4,r19
   1e7a0:	001e3680 	call	1e368 <__swbuf_r>
   1e7a4:	10bfffe0 	cmpeqi	r2,r2,-1
   1e7a8:	10803fcc 	andi	r2,r2,255
   1e7ac:	103fd926 	beq	r2,zero,1e714 <__alt_mem_mcu_subsystem_ram_0+0x77ffe714>
   1e7b0:	00bfffc4 	movi	r2,-1
   1e7b4:	003fef06 	br	1e774 <__alt_mem_mcu_subsystem_ram_0+0x77ffe774>
   1e7b8:	800d883a 	mov	r6,r16
   1e7bc:	01400284 	movi	r5,10
   1e7c0:	9809883a 	mov	r4,r19
   1e7c4:	001e3680 	call	1e368 <__swbuf_r>
   1e7c8:	10bfffe0 	cmpeqi	r2,r2,-1
   1e7cc:	003ff606 	br	1e7a8 <__alt_mem_mcu_subsystem_ram_0+0x77ffe7a8>
   1e7d0:	80c0030b 	ldhu	r3,12(r16)
   1e7d4:	00bfffc4 	movi	r2,-1
   1e7d8:	18c01014 	ori	r3,r3,64
   1e7dc:	80c0030d 	sth	r3,12(r16)
   1e7e0:	003fe406 	br	1e774 <__alt_mem_mcu_subsystem_ram_0+0x77ffe774>

0001e7e4 <_fputwc_r>:
   1e7e4:	3080030b 	ldhu	r2,12(r6)
   1e7e8:	10c8000c 	andi	r3,r2,8192
   1e7ec:	1800051e 	bne	r3,zero,1e804 <_fputwc_r+0x20>
   1e7f0:	30c01917 	ldw	r3,100(r6)
   1e7f4:	10880014 	ori	r2,r2,8192
   1e7f8:	3080030d 	sth	r2,12(r6)
   1e7fc:	18880014 	ori	r2,r3,8192
   1e800:	30801915 	stw	r2,100(r6)
   1e804:	001e6801 	jmpi	1e680 <__fputwc>

0001e808 <fputwc>:
   1e808:	defffc04 	addi	sp,sp,-16
   1e80c:	008000f4 	movhi	r2,3
   1e810:	dc000115 	stw	r16,4(sp)
   1e814:	1423b117 	ldw	r16,-28988(r2)
   1e818:	dc400215 	stw	r17,8(sp)
   1e81c:	dfc00315 	stw	ra,12(sp)
   1e820:	2023883a 	mov	r17,r4
   1e824:	80000226 	beq	r16,zero,1e830 <fputwc+0x28>
   1e828:	80800e17 	ldw	r2,56(r16)
   1e82c:	10001026 	beq	r2,zero,1e870 <fputwc+0x68>
   1e830:	2880030b 	ldhu	r2,12(r5)
   1e834:	10c8000c 	andi	r3,r2,8192
   1e838:	1800051e 	bne	r3,zero,1e850 <fputwc+0x48>
   1e83c:	28c01917 	ldw	r3,100(r5)
   1e840:	10880014 	ori	r2,r2,8192
   1e844:	2880030d 	sth	r2,12(r5)
   1e848:	18880014 	ori	r2,r3,8192
   1e84c:	28801915 	stw	r2,100(r5)
   1e850:	280d883a 	mov	r6,r5
   1e854:	8009883a 	mov	r4,r16
   1e858:	880b883a 	mov	r5,r17
   1e85c:	dfc00317 	ldw	ra,12(sp)
   1e860:	dc400217 	ldw	r17,8(sp)
   1e864:	dc000117 	ldw	r16,4(sp)
   1e868:	dec00404 	addi	sp,sp,16
   1e86c:	001e6801 	jmpi	1e680 <__fputwc>
   1e870:	8009883a 	mov	r4,r16
   1e874:	d9400015 	stw	r5,0(sp)
   1e878:	0017b9c0 	call	17b9c <__sinit>
   1e87c:	d9400017 	ldw	r5,0(sp)
   1e880:	003feb06 	br	1e830 <__alt_mem_mcu_subsystem_ram_0+0x77ffe830>

0001e884 <_fstat_r>:
   1e884:	defffe04 	addi	sp,sp,-8
   1e888:	2805883a 	mov	r2,r5
   1e88c:	dc000015 	stw	r16,0(sp)
   1e890:	300b883a 	mov	r5,r6
   1e894:	2021883a 	mov	r16,r4
   1e898:	1009883a 	mov	r4,r2
   1e89c:	008000f4 	movhi	r2,3
   1e8a0:	dfc00115 	stw	ra,4(sp)
   1e8a4:	102b2a15 	stw	zero,-21336(r2)
   1e8a8:	001fd300 	call	1fd30 <fstat>
   1e8ac:	10ffffd8 	cmpnei	r3,r2,-1
   1e8b0:	18000426 	beq	r3,zero,1e8c4 <_fstat_r+0x40>
   1e8b4:	dfc00117 	ldw	ra,4(sp)
   1e8b8:	dc000017 	ldw	r16,0(sp)
   1e8bc:	dec00204 	addi	sp,sp,8
   1e8c0:	f800283a 	ret
   1e8c4:	00c000f4 	movhi	r3,3
   1e8c8:	18eb2a17 	ldw	r3,-21336(r3)
   1e8cc:	183ff926 	beq	r3,zero,1e8b4 <__alt_mem_mcu_subsystem_ram_0+0x77ffe8b4>
   1e8d0:	80c00015 	stw	r3,0(r16)
   1e8d4:	dfc00117 	ldw	ra,4(sp)
   1e8d8:	dc000017 	ldw	r16,0(sp)
   1e8dc:	dec00204 	addi	sp,sp,8
   1e8e0:	f800283a 	ret

0001e8e4 <_isatty_r>:
   1e8e4:	defffe04 	addi	sp,sp,-8
   1e8e8:	dc000015 	stw	r16,0(sp)
   1e8ec:	008000f4 	movhi	r2,3
   1e8f0:	2021883a 	mov	r16,r4
   1e8f4:	2809883a 	mov	r4,r5
   1e8f8:	dfc00115 	stw	ra,4(sp)
   1e8fc:	102b2a15 	stw	zero,-21336(r2)
   1e900:	001fe500 	call	1fe50 <isatty>
   1e904:	10ffffd8 	cmpnei	r3,r2,-1
   1e908:	18000426 	beq	r3,zero,1e91c <_isatty_r+0x38>
   1e90c:	dfc00117 	ldw	ra,4(sp)
   1e910:	dc000017 	ldw	r16,0(sp)
   1e914:	dec00204 	addi	sp,sp,8
   1e918:	f800283a 	ret
   1e91c:	00c000f4 	movhi	r3,3
   1e920:	18eb2a17 	ldw	r3,-21336(r3)
   1e924:	183ff926 	beq	r3,zero,1e90c <__alt_mem_mcu_subsystem_ram_0+0x77ffe90c>
   1e928:	80c00015 	stw	r3,0(r16)
   1e92c:	dfc00117 	ldw	ra,4(sp)
   1e930:	dc000017 	ldw	r16,0(sp)
   1e934:	dec00204 	addi	sp,sp,8
   1e938:	f800283a 	ret

0001e93c <iswspace>:
   1e93c:	20804028 	cmpgeui	r2,r4,256
   1e940:	10000226 	beq	r2,zero,1e94c <iswspace+0x10>
   1e944:	0005883a 	mov	r2,zero
   1e948:	f800283a 	ret
   1e94c:	defffe04 	addi	sp,sp,-8
   1e950:	dc000015 	stw	r16,0(sp)
   1e954:	dfc00115 	stw	ra,4(sp)
   1e958:	2021883a 	mov	r16,r4
   1e95c:	000fda00 	call	fda0 <__locale_ctype_ptr>
   1e960:	1405883a 	add	r2,r2,r16
   1e964:	10800043 	ldbu	r2,1(r2)
   1e968:	1080020c 	andi	r2,r2,8
   1e96c:	dfc00117 	ldw	ra,4(sp)
   1e970:	dc000017 	ldw	r16,0(sp)
   1e974:	dec00204 	addi	sp,sp,8
   1e978:	f800283a 	ret

0001e97c <_lseek_r>:
   1e97c:	defffe04 	addi	sp,sp,-8
   1e980:	2805883a 	mov	r2,r5
   1e984:	dc000015 	stw	r16,0(sp)
   1e988:	300b883a 	mov	r5,r6
   1e98c:	2021883a 	mov	r16,r4
   1e990:	380d883a 	mov	r6,r7
   1e994:	1009883a 	mov	r4,r2
   1e998:	008000f4 	movhi	r2,3
   1e99c:	dfc00115 	stw	ra,4(sp)
   1e9a0:	102b2a15 	stw	zero,-21336(r2)
   1e9a4:	00200200 	call	20020 <lseek>
   1e9a8:	10ffffd8 	cmpnei	r3,r2,-1
   1e9ac:	18000426 	beq	r3,zero,1e9c0 <_lseek_r+0x44>
   1e9b0:	dfc00117 	ldw	ra,4(sp)
   1e9b4:	dc000017 	ldw	r16,0(sp)
   1e9b8:	dec00204 	addi	sp,sp,8
   1e9bc:	f800283a 	ret
   1e9c0:	00c000f4 	movhi	r3,3
   1e9c4:	18eb2a17 	ldw	r3,-21336(r3)
   1e9c8:	183ff926 	beq	r3,zero,1e9b0 <__alt_mem_mcu_subsystem_ram_0+0x77ffe9b0>
   1e9cc:	80c00015 	stw	r3,0(r16)
   1e9d0:	dfc00117 	ldw	ra,4(sp)
   1e9d4:	dc000017 	ldw	r16,0(sp)
   1e9d8:	dec00204 	addi	sp,sp,8
   1e9dc:	f800283a 	ret

0001e9e0 <_mbrtowc_r>:
   1e9e0:	008000f4 	movhi	r2,3
   1e9e4:	10a3b117 	ldw	r2,-28988(r2)
   1e9e8:	defffc04 	addi	sp,sp,-16
   1e9ec:	dc400215 	stw	r17,8(sp)
   1e9f0:	dc000115 	stw	r16,4(sp)
   1e9f4:	dfc00315 	stw	ra,12(sp)
   1e9f8:	2021883a 	mov	r16,r4
   1e9fc:	dc400417 	ldw	r17,16(sp)
   1ea00:	10800d17 	ldw	r2,52(r2)
   1ea04:	30000f26 	beq	r6,zero,1ea44 <_mbrtowc_r+0x64>
   1ea08:	10000b26 	beq	r2,zero,1ea38 <_mbrtowc_r+0x58>
   1ea0c:	dc400015 	stw	r17,0(sp)
   1ea10:	10803917 	ldw	r2,228(r2)
   1ea14:	8009883a 	mov	r4,r16
   1ea18:	103ee83a 	callr	r2
   1ea1c:	10ffffd8 	cmpnei	r3,r2,-1
   1ea20:	18001326 	beq	r3,zero,1ea70 <_mbrtowc_r+0x90>
   1ea24:	dfc00317 	ldw	ra,12(sp)
   1ea28:	dc400217 	ldw	r17,8(sp)
   1ea2c:	dc000117 	ldw	r16,4(sp)
   1ea30:	dec00404 	addi	sp,sp,16
   1ea34:	f800283a 	ret
   1ea38:	008000b4 	movhi	r2,2
   1ea3c:	109d7c04 	addi	r2,r2,30192
   1ea40:	003ff206 	br	1ea0c <__alt_mem_mcu_subsystem_ram_0+0x77ffea0c>
   1ea44:	10000f26 	beq	r2,zero,1ea84 <_mbrtowc_r+0xa4>
   1ea48:	dc400015 	stw	r17,0(sp)
   1ea4c:	10803917 	ldw	r2,228(r2)
   1ea50:	018000b4 	movhi	r6,2
   1ea54:	01c00044 	movi	r7,1
   1ea58:	319afb04 	addi	r6,r6,27628
   1ea5c:	000b883a 	mov	r5,zero
   1ea60:	8009883a 	mov	r4,r16
   1ea64:	103ee83a 	callr	r2
   1ea68:	10ffffd8 	cmpnei	r3,r2,-1
   1ea6c:	183fed1e 	bne	r3,zero,1ea24 <__alt_mem_mcu_subsystem_ram_0+0x77ffea24>
   1ea70:	00802284 	movi	r2,138
   1ea74:	88000015 	stw	zero,0(r17)
   1ea78:	80800015 	stw	r2,0(r16)
   1ea7c:	00bfffc4 	movi	r2,-1
   1ea80:	003fe806 	br	1ea24 <__alt_mem_mcu_subsystem_ram_0+0x77ffea24>
   1ea84:	008000b4 	movhi	r2,2
   1ea88:	109d7c04 	addi	r2,r2,30192
   1ea8c:	003fee06 	br	1ea48 <__alt_mem_mcu_subsystem_ram_0+0x77ffea48>

0001ea90 <mbrtowc>:
   1ea90:	defffc04 	addi	sp,sp,-16
   1ea94:	008000f4 	movhi	r2,3
   1ea98:	dc000115 	stw	r16,4(sp)
   1ea9c:	1423b117 	ldw	r16,-28988(r2)
   1eaa0:	dc400215 	stw	r17,8(sp)
   1eaa4:	dfc00315 	stw	ra,12(sp)
   1eaa8:	3823883a 	mov	r17,r7
   1eaac:	80800d17 	ldw	r2,52(r16)
   1eab0:	28001226 	beq	r5,zero,1eafc <mbrtowc+0x6c>
   1eab4:	10000e26 	beq	r2,zero,1eaf0 <mbrtowc+0x60>
   1eab8:	dc400015 	stw	r17,0(sp)
   1eabc:	10803917 	ldw	r2,228(r2)
   1eac0:	300f883a 	mov	r7,r6
   1eac4:	280d883a 	mov	r6,r5
   1eac8:	200b883a 	mov	r5,r4
   1eacc:	8009883a 	mov	r4,r16
   1ead0:	103ee83a 	callr	r2
   1ead4:	10ffffd8 	cmpnei	r3,r2,-1
   1ead8:	18001326 	beq	r3,zero,1eb28 <mbrtowc+0x98>
   1eadc:	dfc00317 	ldw	ra,12(sp)
   1eae0:	dc400217 	ldw	r17,8(sp)
   1eae4:	dc000117 	ldw	r16,4(sp)
   1eae8:	dec00404 	addi	sp,sp,16
   1eaec:	f800283a 	ret
   1eaf0:	008000b4 	movhi	r2,2
   1eaf4:	109d7c04 	addi	r2,r2,30192
   1eaf8:	003fef06 	br	1eab8 <__alt_mem_mcu_subsystem_ram_0+0x77ffeab8>
   1eafc:	10000f26 	beq	r2,zero,1eb3c <mbrtowc+0xac>
   1eb00:	dc400015 	stw	r17,0(sp)
   1eb04:	10803917 	ldw	r2,228(r2)
   1eb08:	018000b4 	movhi	r6,2
   1eb0c:	01c00044 	movi	r7,1
   1eb10:	319afb04 	addi	r6,r6,27628
   1eb14:	000b883a 	mov	r5,zero
   1eb18:	8009883a 	mov	r4,r16
   1eb1c:	103ee83a 	callr	r2
   1eb20:	10ffffd8 	cmpnei	r3,r2,-1
   1eb24:	183fed1e 	bne	r3,zero,1eadc <__alt_mem_mcu_subsystem_ram_0+0x77ffeadc>
   1eb28:	00802284 	movi	r2,138
   1eb2c:	80800015 	stw	r2,0(r16)
   1eb30:	88000015 	stw	zero,0(r17)
   1eb34:	00bfffc4 	movi	r2,-1
   1eb38:	003fe806 	br	1eadc <__alt_mem_mcu_subsystem_ram_0+0x77ffeadc>
   1eb3c:	008000b4 	movhi	r2,2
   1eb40:	109d7c04 	addi	r2,r2,30192
   1eb44:	003fee06 	br	1eb00 <__alt_mem_mcu_subsystem_ram_0+0x77ffeb00>

0001eb48 <_read_r>:
   1eb48:	defffe04 	addi	sp,sp,-8
   1eb4c:	2805883a 	mov	r2,r5
   1eb50:	dc000015 	stw	r16,0(sp)
   1eb54:	300b883a 	mov	r5,r6
   1eb58:	2021883a 	mov	r16,r4
   1eb5c:	380d883a 	mov	r6,r7
   1eb60:	1009883a 	mov	r4,r2
   1eb64:	008000f4 	movhi	r2,3
   1eb68:	dfc00115 	stw	ra,4(sp)
   1eb6c:	102b2a15 	stw	zero,-21336(r2)
   1eb70:	00204500 	call	20450 <read>
   1eb74:	10ffffd8 	cmpnei	r3,r2,-1
   1eb78:	18000426 	beq	r3,zero,1eb8c <_read_r+0x44>
   1eb7c:	dfc00117 	ldw	ra,4(sp)
   1eb80:	dc000017 	ldw	r16,0(sp)
   1eb84:	dec00204 	addi	sp,sp,8
   1eb88:	f800283a 	ret
   1eb8c:	00c000f4 	movhi	r3,3
   1eb90:	18eb2a17 	ldw	r3,-21336(r3)
   1eb94:	183ff926 	beq	r3,zero,1eb7c <__alt_mem_mcu_subsystem_ram_0+0x77ffeb7c>
   1eb98:	80c00015 	stw	r3,0(r16)
   1eb9c:	dfc00117 	ldw	ra,4(sp)
   1eba0:	dc000017 	ldw	r16,0(sp)
   1eba4:	dec00204 	addi	sp,sp,8
   1eba8:	f800283a 	ret

0001ebac <__sccl>:
   1ebac:	29c00003 	ldbu	r7,0(r5)
   1ebb0:	388017a0 	cmpeqi	r2,r7,94
   1ebb4:	1000191e 	bne	r2,zero,1ec1c <__sccl+0x70>
   1ebb8:	28800044 	addi	r2,r5,1
   1ebbc:	000d883a 	mov	r6,zero
   1ebc0:	0011883a 	mov	r8,zero
   1ebc4:	2007883a 	mov	r3,r4
   1ebc8:	21404004 	addi	r5,r4,256
   1ebcc:	19800005 	stb	r6,0(r3)
   1ebd0:	18c00044 	addi	r3,r3,1
   1ebd4:	197ffd1e 	bne	r3,r5,1ebcc <__alt_mem_mcu_subsystem_ram_0+0x77ffebcc>
   1ebd8:	38000e26 	beq	r7,zero,1ec14 <__sccl+0x68>
   1ebdc:	01800044 	movi	r6,1
   1ebe0:	320dc83a 	sub	r6,r6,r8
   1ebe4:	21c7883a 	add	r3,r4,r7
   1ebe8:	19800005 	stb	r6,0(r3)
   1ebec:	10c00003 	ldbu	r3,0(r2)
   1ebf0:	12400044 	addi	r9,r2,1
   1ebf4:	19400b60 	cmpeqi	r5,r3,45
   1ebf8:	28000f1e 	bne	r5,zero,1ec38 <__sccl+0x8c>
   1ebfc:	19401760 	cmpeqi	r5,r3,93
   1ec00:	28000b1e 	bne	r5,zero,1ec30 <__sccl+0x84>
   1ec04:	18001a26 	beq	r3,zero,1ec70 <__sccl+0xc4>
   1ec08:	180f883a 	mov	r7,r3
   1ec0c:	4805883a 	mov	r2,r9
   1ec10:	003ff406 	br	1ebe4 <__alt_mem_mcu_subsystem_ram_0+0x77ffebe4>
   1ec14:	10bfffc4 	addi	r2,r2,-1
   1ec18:	f800283a 	ret
   1ec1c:	29c00043 	ldbu	r7,1(r5)
   1ec20:	28800084 	addi	r2,r5,2
   1ec24:	01800044 	movi	r6,1
   1ec28:	02000044 	movi	r8,1
   1ec2c:	003fe506 	br	1ebc4 <__alt_mem_mcu_subsystem_ram_0+0x77ffebc4>
   1ec30:	4805883a 	mov	r2,r9
   1ec34:	f800283a 	ret
   1ec38:	12000043 	ldbu	r8,1(r2)
   1ec3c:	40c01760 	cmpeqi	r3,r8,93
   1ec40:	18000c1e 	bne	r3,zero,1ec74 <__sccl+0xc8>
   1ec44:	41c00b16 	blt	r8,r7,1ec74 <__sccl+0xc8>
   1ec48:	38c00044 	addi	r3,r7,1
   1ec4c:	10800084 	addi	r2,r2,2
   1ec50:	20cb883a 	add	r5,r4,r3
   1ec54:	00000106 	br	1ec5c <__sccl+0xb0>
   1ec58:	18c00044 	addi	r3,r3,1
   1ec5c:	29800005 	stb	r6,0(r5)
   1ec60:	180f883a 	mov	r7,r3
   1ec64:	29400044 	addi	r5,r5,1
   1ec68:	1a3ffb16 	blt	r3,r8,1ec58 <__alt_mem_mcu_subsystem_ram_0+0x77ffec58>
   1ec6c:	003fdf06 	br	1ebec <__alt_mem_mcu_subsystem_ram_0+0x77ffebec>
   1ec70:	f800283a 	ret
   1ec74:	01c00b44 	movi	r7,45
   1ec78:	003fe406 	br	1ec0c <__alt_mem_mcu_subsystem_ram_0+0x77ffec0c>

0001ec7c <_strtol_l.isra.0>:
   1ec7c:	defff504 	addi	sp,sp,-44
   1ec80:	ddc00815 	stw	r23,32(sp)
   1ec84:	dd800715 	stw	r22,28(sp)
   1ec88:	dcc00415 	stw	r19,16(sp)
   1ec8c:	dc800315 	stw	r18,12(sp)
   1ec90:	dc400215 	stw	r17,8(sp)
   1ec94:	dfc00a15 	stw	ra,40(sp)
   1ec98:	df000915 	stw	fp,36(sp)
   1ec9c:	dd400615 	stw	r21,24(sp)
   1eca0:	dd000515 	stw	r20,20(sp)
   1eca4:	dc000115 	stw	r16,4(sp)
   1eca8:	2825883a 	mov	r18,r5
   1ecac:	d9000015 	stw	r4,0(sp)
   1ecb0:	3027883a 	mov	r19,r6
   1ecb4:	3823883a 	mov	r17,r7
   1ecb8:	dd800b17 	ldw	r22,44(sp)
   1ecbc:	282f883a 	mov	r23,r5
   1ecc0:	00000106 	br	1ecc8 <_strtol_l.isra.0+0x4c>
   1ecc4:	a82f883a 	mov	r23,r21
   1ecc8:	bd400044 	addi	r21,r23,1
   1eccc:	ac3fffc3 	ldbu	r16,-1(r21)
   1ecd0:	b009883a 	mov	r4,r22
   1ecd4:	000fd980 	call	fd98 <__locale_ctype_ptr_l>
   1ecd8:	84003fcc 	andi	r16,r16,255
   1ecdc:	1405883a 	add	r2,r2,r16
   1ece0:	10800043 	ldbu	r2,1(r2)
   1ece4:	1080020c 	andi	r2,r2,8
   1ece8:	103ff61e 	bne	r2,zero,1ecc4 <__alt_mem_mcu_subsystem_ram_0+0x77ffecc4>
   1ecec:	80800b58 	cmpnei	r2,r16,45
   1ecf0:	10005126 	beq	r2,zero,1ee38 <_strtol_l.isra.0+0x1bc>
   1ecf4:	80800ae0 	cmpeqi	r2,r16,43
   1ecf8:	1000291e 	bne	r2,zero,1eda0 <_strtol_l.isra.0+0x124>
   1ecfc:	0039883a 	mov	fp,zero
   1ed00:	88000426 	beq	r17,zero,1ed14 <_strtol_l.isra.0+0x98>
   1ed04:	88800420 	cmpeqi	r2,r17,16
   1ed08:	10004f1e 	bne	r2,zero,1ee48 <_strtol_l.isra.0+0x1cc>
   1ed0c:	882d883a 	mov	r22,r17
   1ed10:	00000406 	br	1ed24 <_strtol_l.isra.0+0xa8>
   1ed14:	80800c20 	cmpeqi	r2,r16,48
   1ed18:	10004f1e 	bne	r2,zero,1ee58 <_strtol_l.isra.0+0x1dc>
   1ed1c:	05800284 	movi	r22,10
   1ed20:	04400284 	movi	r17,10
   1ed24:	05e00034 	movhi	r23,32768
   1ed28:	e000011e 	bne	fp,zero,1ed30 <_strtol_l.isra.0+0xb4>
   1ed2c:	bdffffc4 	addi	r23,r23,-1
   1ed30:	b00b883a 	mov	r5,r22
   1ed34:	b809883a 	mov	r4,r23
   1ed38:	000d73c0 	call	d73c <__umodsi3>
   1ed3c:	b00b883a 	mov	r5,r22
   1ed40:	b809883a 	mov	r4,r23
   1ed44:	1029883a 	mov	r20,r2
   1ed48:	000d6d80 	call	d6d8 <__udivsi3>
   1ed4c:	100f883a 	mov	r7,r2
   1ed50:	000b883a 	mov	r5,zero
   1ed54:	0005883a 	mov	r2,zero
   1ed58:	80fff404 	addi	r3,r16,-48
   1ed5c:	190002a8 	cmpgeui	r4,r3,10
   1ed60:	20000426 	beq	r4,zero,1ed74 <_strtol_l.isra.0+0xf8>
   1ed64:	80ffefc4 	addi	r3,r16,-65
   1ed68:	18c006a8 	cmpgeui	r3,r3,26
   1ed6c:	1800131e 	bne	r3,zero,1edbc <_strtol_l.isra.0+0x140>
   1ed70:	80fff244 	addi	r3,r16,-55
   1ed74:	1c40160e 	bge	r3,r17,1edd0 <_strtol_l.isra.0+0x154>
   1ed78:	293fffe0 	cmpeqi	r4,r5,-1
   1ed7c:	2000051e 	bne	r4,zero,1ed94 <_strtol_l.isra.0+0x118>
   1ed80:	38800c36 	bltu	r7,r2,1edb4 <_strtol_l.isra.0+0x138>
   1ed84:	38800a26 	beq	r7,r2,1edb0 <_strtol_l.isra.0+0x134>
   1ed88:	1589383a 	mul	r4,r2,r22
   1ed8c:	01400044 	movi	r5,1
   1ed90:	1905883a 	add	r2,r3,r4
   1ed94:	ad400044 	addi	r21,r21,1
   1ed98:	ac3fffc3 	ldbu	r16,-1(r21)
   1ed9c:	003fee06 	br	1ed58 <__alt_mem_mcu_subsystem_ram_0+0x77ffed58>
   1eda0:	bc000043 	ldbu	r16,1(r23)
   1eda4:	bd400084 	addi	r21,r23,2
   1eda8:	0039883a 	mov	fp,zero
   1edac:	003fd406 	br	1ed00 <__alt_mem_mcu_subsystem_ram_0+0x77ffed00>
   1edb0:	a0fff50e 	bge	r20,r3,1ed88 <__alt_mem_mcu_subsystem_ram_0+0x77ffed88>
   1edb4:	017fffc4 	movi	r5,-1
   1edb8:	003ff606 	br	1ed94 <__alt_mem_mcu_subsystem_ram_0+0x77ffed94>
   1edbc:	80ffe7c4 	addi	r3,r16,-97
   1edc0:	18c006a8 	cmpgeui	r3,r3,26
   1edc4:	1800021e 	bne	r3,zero,1edd0 <_strtol_l.isra.0+0x154>
   1edc8:	80ffea44 	addi	r3,r16,-87
   1edcc:	1c7fea16 	blt	r3,r17,1ed78 <__alt_mem_mcu_subsystem_ram_0+0x77ffed78>
   1edd0:	28ffffd8 	cmpnei	r3,r5,-1
   1edd4:	18001126 	beq	r3,zero,1ee1c <_strtol_l.isra.0+0x1a0>
   1edd8:	e0000126 	beq	fp,zero,1ede0 <_strtol_l.isra.0+0x164>
   1eddc:	0085c83a 	sub	r2,zero,r2
   1ede0:	98000226 	beq	r19,zero,1edec <_strtol_l.isra.0+0x170>
   1ede4:	2800251e 	bne	r5,zero,1ee7c <_strtol_l.isra.0+0x200>
   1ede8:	9c800015 	stw	r18,0(r19)
   1edec:	dfc00a17 	ldw	ra,40(sp)
   1edf0:	df000917 	ldw	fp,36(sp)
   1edf4:	ddc00817 	ldw	r23,32(sp)
   1edf8:	dd800717 	ldw	r22,28(sp)
   1edfc:	dd400617 	ldw	r21,24(sp)
   1ee00:	dd000517 	ldw	r20,20(sp)
   1ee04:	dcc00417 	ldw	r19,16(sp)
   1ee08:	dc800317 	ldw	r18,12(sp)
   1ee0c:	dc400217 	ldw	r17,8(sp)
   1ee10:	dc000117 	ldw	r16,4(sp)
   1ee14:	dec00b04 	addi	sp,sp,44
   1ee18:	f800283a 	ret
   1ee1c:	d8c00017 	ldw	r3,0(sp)
   1ee20:	00800884 	movi	r2,34
   1ee24:	18800015 	stw	r2,0(r3)
   1ee28:	98001626 	beq	r19,zero,1ee84 <_strtol_l.isra.0+0x208>
   1ee2c:	acbfffc4 	addi	r18,r21,-1
   1ee30:	b805883a 	mov	r2,r23
   1ee34:	003fec06 	br	1ede8 <__alt_mem_mcu_subsystem_ram_0+0x77ffede8>
   1ee38:	bd400084 	addi	r21,r23,2
   1ee3c:	bc000043 	ldbu	r16,1(r23)
   1ee40:	07000044 	movi	fp,1
   1ee44:	003fae06 	br	1ed00 <__alt_mem_mcu_subsystem_ram_0+0x77ffed00>
   1ee48:	80800c18 	cmpnei	r2,r16,48
   1ee4c:	10000f26 	beq	r2,zero,1ee8c <_strtol_l.isra.0+0x210>
   1ee50:	05800404 	movi	r22,16
   1ee54:	003fb306 	br	1ed24 <__alt_mem_mcu_subsystem_ram_0+0x77ffed24>
   1ee58:	a8800003 	ldbu	r2,0(r21)
   1ee5c:	108037cc 	andi	r2,r2,223
   1ee60:	10801620 	cmpeqi	r2,r2,88
   1ee64:	10000e26 	beq	r2,zero,1eea0 <_strtol_l.isra.0+0x224>
   1ee68:	ac000043 	ldbu	r16,1(r21)
   1ee6c:	05800404 	movi	r22,16
   1ee70:	ad400084 	addi	r21,r21,2
   1ee74:	04400404 	movi	r17,16
   1ee78:	003faa06 	br	1ed24 <__alt_mem_mcu_subsystem_ram_0+0x77ffed24>
   1ee7c:	102f883a 	mov	r23,r2
   1ee80:	003fea06 	br	1ee2c <__alt_mem_mcu_subsystem_ram_0+0x77ffee2c>
   1ee84:	b805883a 	mov	r2,r23
   1ee88:	003fd806 	br	1edec <__alt_mem_mcu_subsystem_ram_0+0x77ffedec>
   1ee8c:	a8800003 	ldbu	r2,0(r21)
   1ee90:	108037cc 	andi	r2,r2,223
   1ee94:	10801620 	cmpeqi	r2,r2,88
   1ee98:	103fed26 	beq	r2,zero,1ee50 <__alt_mem_mcu_subsystem_ram_0+0x77ffee50>
   1ee9c:	003ff206 	br	1ee68 <__alt_mem_mcu_subsystem_ram_0+0x77ffee68>
   1eea0:	05800204 	movi	r22,8
   1eea4:	04400204 	movi	r17,8
   1eea8:	003f9e06 	br	1ed24 <__alt_mem_mcu_subsystem_ram_0+0x77ffed24>

0001eeac <_strtol_r>:
   1eeac:	008000f4 	movhi	r2,3
   1eeb0:	10a3b117 	ldw	r2,-28988(r2)
   1eeb4:	defffe04 	addi	sp,sp,-8
   1eeb8:	dfc00115 	stw	ra,4(sp)
   1eebc:	10800d17 	ldw	r2,52(r2)
   1eec0:	1000021e 	bne	r2,zero,1eecc <_strtol_r+0x20>
   1eec4:	008000b4 	movhi	r2,2
   1eec8:	109d7c04 	addi	r2,r2,30192
   1eecc:	d8800015 	stw	r2,0(sp)
   1eed0:	001ec7c0 	call	1ec7c <_strtol_l.isra.0>
   1eed4:	dfc00117 	ldw	ra,4(sp)
   1eed8:	dec00204 	addi	sp,sp,8
   1eedc:	f800283a 	ret

0001eee0 <strtol_l>:
   1eee0:	defffe04 	addi	sp,sp,-8
   1eee4:	008000f4 	movhi	r2,3
   1eee8:	d9c00015 	stw	r7,0(sp)
   1eeec:	300f883a 	mov	r7,r6
   1eef0:	280d883a 	mov	r6,r5
   1eef4:	200b883a 	mov	r5,r4
   1eef8:	1123b117 	ldw	r4,-28988(r2)
   1eefc:	dfc00115 	stw	ra,4(sp)
   1ef00:	001ec7c0 	call	1ec7c <_strtol_l.isra.0>
   1ef04:	dfc00117 	ldw	ra,4(sp)
   1ef08:	dec00204 	addi	sp,sp,8
   1ef0c:	f800283a 	ret

0001ef10 <strtol>:
   1ef10:	008000f4 	movhi	r2,3
   1ef14:	10e3b117 	ldw	r3,-28988(r2)
   1ef18:	defffe04 	addi	sp,sp,-8
   1ef1c:	dfc00115 	stw	ra,4(sp)
   1ef20:	18800d17 	ldw	r2,52(r3)
   1ef24:	1000021e 	bne	r2,zero,1ef30 <strtol+0x20>
   1ef28:	008000b4 	movhi	r2,2
   1ef2c:	109d7c04 	addi	r2,r2,30192
   1ef30:	300f883a 	mov	r7,r6
   1ef34:	d8800015 	stw	r2,0(sp)
   1ef38:	280d883a 	mov	r6,r5
   1ef3c:	200b883a 	mov	r5,r4
   1ef40:	1809883a 	mov	r4,r3
   1ef44:	001ec7c0 	call	1ec7c <_strtol_l.isra.0>
   1ef48:	dfc00117 	ldw	ra,4(sp)
   1ef4c:	dec00204 	addi	sp,sp,8
   1ef50:	f800283a 	ret

0001ef54 <_strtoll_l.isra.0>:
   1ef54:	defff304 	addi	sp,sp,-52
   1ef58:	ddc00a15 	stw	r23,40(sp)
   1ef5c:	dd400815 	stw	r21,32(sp)
   1ef60:	dcc00615 	stw	r19,24(sp)
   1ef64:	dc800515 	stw	r18,20(sp)
   1ef68:	dc400415 	stw	r17,16(sp)
   1ef6c:	dfc00c15 	stw	ra,48(sp)
   1ef70:	df000b15 	stw	fp,44(sp)
   1ef74:	dd800915 	stw	r22,36(sp)
   1ef78:	dd000715 	stw	r20,28(sp)
   1ef7c:	dc000315 	stw	r16,12(sp)
   1ef80:	2825883a 	mov	r18,r5
   1ef84:	d9000215 	stw	r4,8(sp)
   1ef88:	3027883a 	mov	r19,r6
   1ef8c:	3823883a 	mov	r17,r7
   1ef90:	dd400d17 	ldw	r21,52(sp)
   1ef94:	282f883a 	mov	r23,r5
   1ef98:	00000106 	br	1efa0 <_strtoll_l.isra.0+0x4c>
   1ef9c:	b02f883a 	mov	r23,r22
   1efa0:	bd800044 	addi	r22,r23,1
   1efa4:	b43fffc3 	ldbu	r16,-1(r22)
   1efa8:	a809883a 	mov	r4,r21
   1efac:	000fd980 	call	fd98 <__locale_ctype_ptr_l>
   1efb0:	84003fcc 	andi	r16,r16,255
   1efb4:	1405883a 	add	r2,r2,r16
   1efb8:	10800043 	ldbu	r2,1(r2)
   1efbc:	1080020c 	andi	r2,r2,8
   1efc0:	103ff61e 	bne	r2,zero,1ef9c <__alt_mem_mcu_subsystem_ram_0+0x77ffef9c>
   1efc4:	80800b58 	cmpnei	r2,r16,45
   1efc8:	10007526 	beq	r2,zero,1f1a0 <_strtoll_l.isra.0+0x24c>
   1efcc:	80800ae0 	cmpeqi	r2,r16,43
   1efd0:	10005f1e 	bne	r2,zero,1f150 <_strtoll_l.isra.0+0x1fc>
   1efd4:	0011883a 	mov	r8,zero
   1efd8:	88004526 	beq	r17,zero,1f0f0 <_strtoll_l.isra.0+0x19c>
   1efdc:	88800420 	cmpeqi	r2,r17,16
   1efe0:	1000731e 	bne	r2,zero,1f1b0 <_strtoll_l.isra.0+0x25c>
   1efe4:	8839d7fa 	srai	fp,r17,31
   1efe8:	882f883a 	mov	r23,r17
   1efec:	40004626 	beq	r8,zero,1f108 <_strtoll_l.isra.0+0x1b4>
   1eff0:	002b883a 	mov	r21,zero
   1eff4:	05200034 	movhi	r20,32768
   1eff8:	b80d883a 	mov	r6,r23
   1effc:	e00f883a 	mov	r7,fp
   1f000:	a809883a 	mov	r4,r21
   1f004:	a00b883a 	mov	r5,r20
   1f008:	da000115 	stw	r8,4(sp)
   1f00c:	000d0840 	call	d084 <__umoddi3>
   1f010:	b80d883a 	mov	r6,r23
   1f014:	e00f883a 	mov	r7,fp
   1f018:	a809883a 	mov	r4,r21
   1f01c:	a00b883a 	mov	r5,r20
   1f020:	d8800015 	stw	r2,0(sp)
   1f024:	000caec0 	call	caec <__udivdi3>
   1f028:	813ff404 	addi	r4,r16,-48
   1f02c:	214002a8 	cmpgeui	r5,r4,10
   1f030:	100f883a 	mov	r7,r2
   1f034:	1817883a 	mov	r11,r3
   1f038:	000d883a 	mov	r6,zero
   1f03c:	0005883a 	mov	r2,zero
   1f040:	0007883a 	mov	r3,zero
   1f044:	da000117 	ldw	r8,4(sp)
   1f048:	da800017 	ldw	r10,0(sp)
   1f04c:	28000d1e 	bne	r5,zero,1f084 <_strtoll_l.isra.0+0x130>
   1f050:	2021883a 	mov	r16,r4
   1f054:	8440100e 	bge	r16,r17,1f098 <_strtoll_l.isra.0+0x144>
   1f058:	313fffe0 	cmpeqi	r4,r6,-1
   1f05c:	2000041e 	bne	r4,zero,1f070 <_strtoll_l.isra.0+0x11c>
   1f060:	58c00236 	bltu	r11,r3,1f06c <_strtoll_l.isra.0+0x118>
   1f064:	1ac02c1e 	bne	r3,r11,1f118 <_strtoll_l.isra.0+0x1c4>
   1f068:	38802b2e 	bgeu	r7,r2,1f118 <_strtoll_l.isra.0+0x1c4>
   1f06c:	01bfffc4 	movi	r6,-1
   1f070:	b5800044 	addi	r22,r22,1
   1f074:	b43fffc3 	ldbu	r16,-1(r22)
   1f078:	813ff404 	addi	r4,r16,-48
   1f07c:	214002a8 	cmpgeui	r5,r4,10
   1f080:	283ff326 	beq	r5,zero,1f050 <__alt_mem_mcu_subsystem_ram_0+0x77fff050>
   1f084:	813fefc4 	addi	r4,r16,-65
   1f088:	210006a8 	cmpgeui	r4,r4,26
   1f08c:	2000341e 	bne	r4,zero,1f160 <_strtoll_l.isra.0+0x20c>
   1f090:	843ff244 	addi	r16,r16,-55
   1f094:	847ff016 	blt	r16,r17,1f058 <__alt_mem_mcu_subsystem_ram_0+0x77fff058>
   1f098:	313fffd8 	cmpnei	r4,r6,-1
   1f09c:	20003826 	beq	r4,zero,1f180 <_strtoll_l.isra.0+0x22c>
   1f0a0:	40000426 	beq	r8,zero,1f0b4 <_strtoll_l.isra.0+0x160>
   1f0a4:	0085c83a 	sub	r2,zero,r2
   1f0a8:	1008c03a 	cmpne	r4,r2,zero
   1f0ac:	00e1c83a 	sub	r16,zero,r3
   1f0b0:	8107c83a 	sub	r3,r16,r4
   1f0b4:	98000226 	beq	r19,zero,1f0c0 <_strtoll_l.isra.0+0x16c>
   1f0b8:	30004c1e 	bne	r6,zero,1f1ec <_strtoll_l.isra.0+0x298>
   1f0bc:	9c800015 	stw	r18,0(r19)
   1f0c0:	dfc00c17 	ldw	ra,48(sp)
   1f0c4:	df000b17 	ldw	fp,44(sp)
   1f0c8:	ddc00a17 	ldw	r23,40(sp)
   1f0cc:	dd800917 	ldw	r22,36(sp)
   1f0d0:	dd400817 	ldw	r21,32(sp)
   1f0d4:	dd000717 	ldw	r20,28(sp)
   1f0d8:	dcc00617 	ldw	r19,24(sp)
   1f0dc:	dc800517 	ldw	r18,20(sp)
   1f0e0:	dc400417 	ldw	r17,16(sp)
   1f0e4:	dc000317 	ldw	r16,12(sp)
   1f0e8:	dec00d04 	addi	sp,sp,52
   1f0ec:	f800283a 	ret
   1f0f0:	80800c20 	cmpeqi	r2,r16,48
   1f0f4:	1000331e 	bne	r2,zero,1f1c4 <_strtoll_l.isra.0+0x270>
   1f0f8:	05c00284 	movi	r23,10
   1f0fc:	0039883a 	mov	fp,zero
   1f100:	04400284 	movi	r17,10
   1f104:	403fba1e 	bne	r8,zero,1eff0 <__alt_mem_mcu_subsystem_ram_0+0x77ffeff0>
   1f108:	05200034 	movhi	r20,32768
   1f10c:	057fffc4 	movi	r21,-1
   1f110:	a53fffc4 	addi	r20,r20,-1
   1f114:	003fb806 	br	1eff8 <__alt_mem_mcu_subsystem_ram_0+0x77ffeff8>
   1f118:	38801626 	beq	r7,r2,1f174 <_strtoll_l.isra.0+0x220>
   1f11c:	1dc7383a 	mul	r3,r3,r23
   1f120:	e089383a 	mul	r4,fp,r2
   1f124:	15cc383a 	mulxuu	r6,r2,r23
   1f128:	15c5383a 	mul	r2,r2,r23
   1f12c:	800bd7fa 	srai	r5,r16,31
   1f130:	1909883a 	add	r4,r3,r4
   1f134:	2189883a 	add	r4,r4,r6
   1f138:	8085883a 	add	r2,r16,r2
   1f13c:	1421803a 	cmpltu	r16,r2,r16
   1f140:	2907883a 	add	r3,r5,r4
   1f144:	80c7883a 	add	r3,r16,r3
   1f148:	01800044 	movi	r6,1
   1f14c:	003fc806 	br	1f070 <__alt_mem_mcu_subsystem_ram_0+0x77fff070>
   1f150:	bc000043 	ldbu	r16,1(r23)
   1f154:	bd800084 	addi	r22,r23,2
   1f158:	0011883a 	mov	r8,zero
   1f15c:	003f9e06 	br	1efd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffefd8>
   1f160:	813fe7c4 	addi	r4,r16,-97
   1f164:	210006a8 	cmpgeui	r4,r4,26
   1f168:	203fcb1e 	bne	r4,zero,1f098 <__alt_mem_mcu_subsystem_ram_0+0x77fff098>
   1f16c:	843fea44 	addi	r16,r16,-87
   1f170:	003fb806 	br	1f054 <__alt_mem_mcu_subsystem_ram_0+0x77fff054>
   1f174:	58ffe91e 	bne	r11,r3,1f11c <__alt_mem_mcu_subsystem_ram_0+0x77fff11c>
   1f178:	543fbc16 	blt	r10,r16,1f06c <__alt_mem_mcu_subsystem_ram_0+0x77fff06c>
   1f17c:	003fe706 	br	1f11c <__alt_mem_mcu_subsystem_ram_0+0x77fff11c>
   1f180:	d8c00217 	ldw	r3,8(sp)
   1f184:	00800884 	movi	r2,34
   1f188:	18800015 	stw	r2,0(r3)
   1f18c:	98001a26 	beq	r19,zero,1f1f8 <_strtoll_l.isra.0+0x2a4>
   1f190:	b4bfffc4 	addi	r18,r22,-1
   1f194:	a805883a 	mov	r2,r21
   1f198:	a007883a 	mov	r3,r20
   1f19c:	003fc706 	br	1f0bc <__alt_mem_mcu_subsystem_ram_0+0x77fff0bc>
   1f1a0:	bd800084 	addi	r22,r23,2
   1f1a4:	bc000043 	ldbu	r16,1(r23)
   1f1a8:	02000044 	movi	r8,1
   1f1ac:	003f8a06 	br	1efd8 <__alt_mem_mcu_subsystem_ram_0+0x77ffefd8>
   1f1b0:	80800c18 	cmpnei	r2,r16,48
   1f1b4:	10001326 	beq	r2,zero,1f204 <_strtoll_l.isra.0+0x2b0>
   1f1b8:	05c00404 	movi	r23,16
   1f1bc:	0039883a 	mov	fp,zero
   1f1c0:	003f8a06 	br	1efec <__alt_mem_mcu_subsystem_ram_0+0x77ffefec>
   1f1c4:	b0800003 	ldbu	r2,0(r22)
   1f1c8:	108037cc 	andi	r2,r2,223
   1f1cc:	10801620 	cmpeqi	r2,r2,88
   1f1d0:	10001126 	beq	r2,zero,1f218 <_strtoll_l.isra.0+0x2c4>
   1f1d4:	b4000043 	ldbu	r16,1(r22)
   1f1d8:	05c00404 	movi	r23,16
   1f1dc:	b5800084 	addi	r22,r22,2
   1f1e0:	0039883a 	mov	fp,zero
   1f1e4:	04400404 	movi	r17,16
   1f1e8:	003f8006 	br	1efec <__alt_mem_mcu_subsystem_ram_0+0x77ffefec>
   1f1ec:	102b883a 	mov	r21,r2
   1f1f0:	1829883a 	mov	r20,r3
   1f1f4:	003fe606 	br	1f190 <__alt_mem_mcu_subsystem_ram_0+0x77fff190>
   1f1f8:	a805883a 	mov	r2,r21
   1f1fc:	a007883a 	mov	r3,r20
   1f200:	003faf06 	br	1f0c0 <__alt_mem_mcu_subsystem_ram_0+0x77fff0c0>
   1f204:	b0800003 	ldbu	r2,0(r22)
   1f208:	108037cc 	andi	r2,r2,223
   1f20c:	10801620 	cmpeqi	r2,r2,88
   1f210:	103fe926 	beq	r2,zero,1f1b8 <__alt_mem_mcu_subsystem_ram_0+0x77fff1b8>
   1f214:	003fef06 	br	1f1d4 <__alt_mem_mcu_subsystem_ram_0+0x77fff1d4>
   1f218:	05c00204 	movi	r23,8
   1f21c:	0039883a 	mov	fp,zero
   1f220:	04400204 	movi	r17,8
   1f224:	003f7106 	br	1efec <__alt_mem_mcu_subsystem_ram_0+0x77ffefec>

0001f228 <_strtoll_r>:
   1f228:	008000f4 	movhi	r2,3
   1f22c:	10a3b117 	ldw	r2,-28988(r2)
   1f230:	defffe04 	addi	sp,sp,-8
   1f234:	dfc00115 	stw	ra,4(sp)
   1f238:	10800d17 	ldw	r2,52(r2)
   1f23c:	1000021e 	bne	r2,zero,1f248 <_strtoll_r+0x20>
   1f240:	008000b4 	movhi	r2,2
   1f244:	109d7c04 	addi	r2,r2,30192
   1f248:	d8800015 	stw	r2,0(sp)
   1f24c:	001ef540 	call	1ef54 <_strtoll_l.isra.0>
   1f250:	dfc00117 	ldw	ra,4(sp)
   1f254:	dec00204 	addi	sp,sp,8
   1f258:	f800283a 	ret

0001f25c <strtoll_l>:
   1f25c:	defffe04 	addi	sp,sp,-8
   1f260:	008000f4 	movhi	r2,3
   1f264:	d9c00015 	stw	r7,0(sp)
   1f268:	300f883a 	mov	r7,r6
   1f26c:	280d883a 	mov	r6,r5
   1f270:	200b883a 	mov	r5,r4
   1f274:	1123b117 	ldw	r4,-28988(r2)
   1f278:	dfc00115 	stw	ra,4(sp)
   1f27c:	001ef540 	call	1ef54 <_strtoll_l.isra.0>
   1f280:	dfc00117 	ldw	ra,4(sp)
   1f284:	dec00204 	addi	sp,sp,8
   1f288:	f800283a 	ret

0001f28c <strtoll>:
   1f28c:	008000f4 	movhi	r2,3
   1f290:	10e3b117 	ldw	r3,-28988(r2)
   1f294:	defffe04 	addi	sp,sp,-8
   1f298:	dfc00115 	stw	ra,4(sp)
   1f29c:	18800d17 	ldw	r2,52(r3)
   1f2a0:	1000021e 	bne	r2,zero,1f2ac <strtoll+0x20>
   1f2a4:	008000b4 	movhi	r2,2
   1f2a8:	109d7c04 	addi	r2,r2,30192
   1f2ac:	300f883a 	mov	r7,r6
   1f2b0:	d8800015 	stw	r2,0(sp)
   1f2b4:	280d883a 	mov	r6,r5
   1f2b8:	200b883a 	mov	r5,r4
   1f2bc:	1809883a 	mov	r4,r3
   1f2c0:	001ef540 	call	1ef54 <_strtoll_l.isra.0>
   1f2c4:	dfc00117 	ldw	ra,4(sp)
   1f2c8:	dec00204 	addi	sp,sp,8
   1f2cc:	f800283a 	ret

0001f2d0 <_strtoull_l.isra.0>:
   1f2d0:	defff504 	addi	sp,sp,-44
   1f2d4:	ddc00815 	stw	r23,32(sp)
   1f2d8:	dd800715 	stw	r22,28(sp)
   1f2dc:	dd400615 	stw	r21,24(sp)
   1f2e0:	dcc00415 	stw	r19,16(sp)
   1f2e4:	dc800315 	stw	r18,12(sp)
   1f2e8:	dc400215 	stw	r17,8(sp)
   1f2ec:	dfc00a15 	stw	ra,40(sp)
   1f2f0:	df000915 	stw	fp,36(sp)
   1f2f4:	dd000515 	stw	r20,20(sp)
   1f2f8:	dc000115 	stw	r16,4(sp)
   1f2fc:	2823883a 	mov	r17,r5
   1f300:	2027883a 	mov	r19,r4
   1f304:	3025883a 	mov	r18,r6
   1f308:	382d883a 	mov	r22,r7
   1f30c:	dd400b17 	ldw	r21,44(sp)
   1f310:	282f883a 	mov	r23,r5
   1f314:	00000106 	br	1f31c <_strtoull_l.isra.0+0x4c>
   1f318:	a02f883a 	mov	r23,r20
   1f31c:	bd000044 	addi	r20,r23,1
   1f320:	a43fffc3 	ldbu	r16,-1(r20)
   1f324:	a809883a 	mov	r4,r21
   1f328:	000fd980 	call	fd98 <__locale_ctype_ptr_l>
   1f32c:	84003fcc 	andi	r16,r16,255
   1f330:	1405883a 	add	r2,r2,r16
   1f334:	10800043 	ldbu	r2,1(r2)
   1f338:	1080020c 	andi	r2,r2,8
   1f33c:	103ff61e 	bne	r2,zero,1f318 <__alt_mem_mcu_subsystem_ram_0+0x77fff318>
   1f340:	80800b58 	cmpnei	r2,r16,45
   1f344:	10006f26 	beq	r2,zero,1f504 <_strtoull_l.isra.0+0x234>
   1f348:	80800ae0 	cmpeqi	r2,r16,43
   1f34c:	10005a1e 	bne	r2,zero,1f4b8 <_strtoull_l.isra.0+0x1e8>
   1f350:	0011883a 	mov	r8,zero
   1f354:	b0001426 	beq	r22,zero,1f3a8 <_strtoull_l.isra.0+0xd8>
   1f358:	b0800420 	cmpeqi	r2,r22,16
   1f35c:	10006d1e 	bne	r2,zero,1f514 <_strtoull_l.isra.0+0x244>
   1f360:	b039d7fa 	srai	fp,r22,31
   1f364:	013fffc4 	movi	r4,-1
   1f368:	017fffc4 	movi	r5,-1
   1f36c:	b00d883a 	mov	r6,r22
   1f370:	e00f883a 	mov	r7,fp
   1f374:	da000015 	stw	r8,0(sp)
   1f378:	000caec0 	call	caec <__udivdi3>
   1f37c:	e00f883a 	mov	r7,fp
   1f380:	b00d883a 	mov	r6,r22
   1f384:	013fffc4 	movi	r4,-1
   1f388:	017fffc4 	movi	r5,-1
   1f38c:	102f883a 	mov	r23,r2
   1f390:	182b883a 	mov	r21,r3
   1f394:	000d0840 	call	d084 <__umoddi3>
   1f398:	1013883a 	mov	r9,r2
   1f39c:	b00f883a 	mov	r7,r22
   1f3a0:	da000017 	ldw	r8,0(sp)
   1f3a4:	00000a06 	br	1f3d0 <_strtoull_l.isra.0+0x100>
   1f3a8:	80800c20 	cmpeqi	r2,r16,48
   1f3ac:	1000621e 	bne	r2,zero,1f538 <_strtoull_l.isra.0+0x268>
   1f3b0:	05e666b4 	movhi	r23,39322
   1f3b4:	054666b4 	movhi	r21,6554
   1f3b8:	02400144 	movi	r9,5
   1f3bc:	bde66644 	addi	r23,r23,-26215
   1f3c0:	ad666644 	addi	r21,r21,-26215
   1f3c4:	01c00284 	movi	r7,10
   1f3c8:	0039883a 	mov	fp,zero
   1f3cc:	05800284 	movi	r22,10
   1f3d0:	813ff404 	addi	r4,r16,-48
   1f3d4:	218002a8 	cmpgeui	r6,r4,10
   1f3d8:	000b883a 	mov	r5,zero
   1f3dc:	0005883a 	mov	r2,zero
   1f3e0:	0007883a 	mov	r3,zero
   1f3e4:	30000c1e 	bne	r6,zero,1f418 <_strtoull_l.isra.0+0x148>
   1f3e8:	2021883a 	mov	r16,r4
   1f3ec:	85800f0e 	bge	r16,r22,1f42c <_strtoull_l.isra.0+0x15c>
   1f3f0:	28000316 	blt	r5,zero,1f400 <_strtoull_l.isra.0+0x130>
   1f3f4:	a8c00236 	bltu	r21,r3,1f400 <_strtoull_l.isra.0+0x130>
   1f3f8:	1d40211e 	bne	r3,r21,1f480 <_strtoull_l.isra.0+0x1b0>
   1f3fc:	b880202e 	bgeu	r23,r2,1f480 <_strtoull_l.isra.0+0x1b0>
   1f400:	017fffc4 	movi	r5,-1
   1f404:	a5000044 	addi	r20,r20,1
   1f408:	a43fffc3 	ldbu	r16,-1(r20)
   1f40c:	813ff404 	addi	r4,r16,-48
   1f410:	218002a8 	cmpgeui	r6,r4,10
   1f414:	303ff426 	beq	r6,zero,1f3e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff3e8>
   1f418:	813fefc4 	addi	r4,r16,-65
   1f41c:	210006a8 	cmpgeui	r4,r4,26
   1f420:	2000291e 	bne	r4,zero,1f4c8 <_strtoull_l.isra.0+0x1f8>
   1f424:	843ff244 	addi	r16,r16,-55
   1f428:	85bff116 	blt	r16,r22,1f3f0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3f0>
   1f42c:	28002e16 	blt	r5,zero,1f4e8 <_strtoull_l.isra.0+0x218>
   1f430:	40000426 	beq	r8,zero,1f444 <_strtoull_l.isra.0+0x174>
   1f434:	0085c83a 	sub	r2,zero,r2
   1f438:	1008c03a 	cmpne	r4,r2,zero
   1f43c:	00e1c83a 	sub	r16,zero,r3
   1f440:	8107c83a 	sub	r3,r16,r4
   1f444:	90000226 	beq	r18,zero,1f450 <_strtoull_l.isra.0+0x180>
   1f448:	28002c1e 	bne	r5,zero,1f4fc <_strtoull_l.isra.0+0x22c>
   1f44c:	94400015 	stw	r17,0(r18)
   1f450:	dfc00a17 	ldw	ra,40(sp)
   1f454:	df000917 	ldw	fp,36(sp)
   1f458:	ddc00817 	ldw	r23,32(sp)
   1f45c:	dd800717 	ldw	r22,28(sp)
   1f460:	dd400617 	ldw	r21,24(sp)
   1f464:	dd000517 	ldw	r20,20(sp)
   1f468:	dcc00417 	ldw	r19,16(sp)
   1f46c:	dc800317 	ldw	r18,12(sp)
   1f470:	dc400217 	ldw	r17,8(sp)
   1f474:	dc000117 	ldw	r16,4(sp)
   1f478:	dec00b04 	addi	sp,sp,44
   1f47c:	f800283a 	ret
   1f480:	15c01626 	beq	r2,r23,1f4dc <_strtoull_l.isra.0+0x20c>
   1f484:	e08d383a 	mul	r6,fp,r2
   1f488:	19c7383a 	mul	r3,r3,r7
   1f48c:	11ca383a 	mulxuu	r5,r2,r7
   1f490:	11c5383a 	mul	r2,r2,r7
   1f494:	8009d7fa 	srai	r4,r16,31
   1f498:	1987883a 	add	r3,r3,r6
   1f49c:	1947883a 	add	r3,r3,r5
   1f4a0:	8085883a 	add	r2,r16,r2
   1f4a4:	1421803a 	cmpltu	r16,r2,r16
   1f4a8:	20c7883a 	add	r3,r4,r3
   1f4ac:	80c7883a 	add	r3,r16,r3
   1f4b0:	01400044 	movi	r5,1
   1f4b4:	003fd306 	br	1f404 <__alt_mem_mcu_subsystem_ram_0+0x77fff404>
   1f4b8:	bc000043 	ldbu	r16,1(r23)
   1f4bc:	bd000084 	addi	r20,r23,2
   1f4c0:	0011883a 	mov	r8,zero
   1f4c4:	003fa306 	br	1f354 <__alt_mem_mcu_subsystem_ram_0+0x77fff354>
   1f4c8:	813fe7c4 	addi	r4,r16,-97
   1f4cc:	210006a8 	cmpgeui	r4,r4,26
   1f4d0:	203fd61e 	bne	r4,zero,1f42c <__alt_mem_mcu_subsystem_ram_0+0x77fff42c>
   1f4d4:	843fea44 	addi	r16,r16,-87
   1f4d8:	003fc406 	br	1f3ec <__alt_mem_mcu_subsystem_ram_0+0x77fff3ec>
   1f4dc:	1d7fe91e 	bne	r3,r21,1f484 <__alt_mem_mcu_subsystem_ram_0+0x77fff484>
   1f4e0:	4c3fc716 	blt	r9,r16,1f400 <__alt_mem_mcu_subsystem_ram_0+0x77fff400>
   1f4e4:	003fe706 	br	1f484 <__alt_mem_mcu_subsystem_ram_0+0x77fff484>
   1f4e8:	00800884 	movi	r2,34
   1f4ec:	98800015 	stw	r2,0(r19)
   1f4f0:	00ffffc4 	movi	r3,-1
   1f4f4:	00bfffc4 	movi	r2,-1
   1f4f8:	903fd526 	beq	r18,zero,1f450 <__alt_mem_mcu_subsystem_ram_0+0x77fff450>
   1f4fc:	a47fffc4 	addi	r17,r20,-1
   1f500:	003fd206 	br	1f44c <__alt_mem_mcu_subsystem_ram_0+0x77fff44c>
   1f504:	bd000084 	addi	r20,r23,2
   1f508:	bc000043 	ldbu	r16,1(r23)
   1f50c:	02000044 	movi	r8,1
   1f510:	003f9006 	br	1f354 <__alt_mem_mcu_subsystem_ram_0+0x77fff354>
   1f514:	80800c18 	cmpnei	r2,r16,48
   1f518:	10001326 	beq	r2,zero,1f568 <_strtoull_l.isra.0+0x298>
   1f51c:	05440034 	movhi	r21,4096
   1f520:	024003c4 	movi	r9,15
   1f524:	05ffffc4 	movi	r23,-1
   1f528:	ad7fffc4 	addi	r21,r21,-1
   1f52c:	01c00404 	movi	r7,16
   1f530:	0039883a 	mov	fp,zero
   1f534:	003fa606 	br	1f3d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3d0>
   1f538:	a0800003 	ldbu	r2,0(r20)
   1f53c:	108037cc 	andi	r2,r2,223
   1f540:	10801618 	cmpnei	r2,r2,88
   1f544:	10000c26 	beq	r2,zero,1f578 <_strtoull_l.isra.0+0x2a8>
   1f548:	05480034 	movhi	r21,8192
   1f54c:	024001c4 	movi	r9,7
   1f550:	05ffffc4 	movi	r23,-1
   1f554:	ad7fffc4 	addi	r21,r21,-1
   1f558:	01c00204 	movi	r7,8
   1f55c:	0039883a 	mov	fp,zero
   1f560:	05800204 	movi	r22,8
   1f564:	003f9a06 	br	1f3d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3d0>
   1f568:	a0800003 	ldbu	r2,0(r20)
   1f56c:	108037cc 	andi	r2,r2,223
   1f570:	10801620 	cmpeqi	r2,r2,88
   1f574:	10000a26 	beq	r2,zero,1f5a0 <_strtoull_l.isra.0+0x2d0>
   1f578:	05440034 	movhi	r21,4096
   1f57c:	a4000043 	ldbu	r16,1(r20)
   1f580:	024003c4 	movi	r9,15
   1f584:	a5000084 	addi	r20,r20,2
   1f588:	05ffffc4 	movi	r23,-1
   1f58c:	ad7fffc4 	addi	r21,r21,-1
   1f590:	01c00404 	movi	r7,16
   1f594:	0039883a 	mov	fp,zero
   1f598:	05800404 	movi	r22,16
   1f59c:	003f8c06 	br	1f3d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3d0>
   1f5a0:	01800404 	movi	r6,16
   1f5a4:	000f883a 	mov	r7,zero
   1f5a8:	013fffc4 	movi	r4,-1
   1f5ac:	017fffc4 	movi	r5,-1
   1f5b0:	da000015 	stw	r8,0(sp)
   1f5b4:	000caec0 	call	caec <__udivdi3>
   1f5b8:	000f883a 	mov	r7,zero
   1f5bc:	01800404 	movi	r6,16
   1f5c0:	013fffc4 	movi	r4,-1
   1f5c4:	017fffc4 	movi	r5,-1
   1f5c8:	102f883a 	mov	r23,r2
   1f5cc:	182b883a 	mov	r21,r3
   1f5d0:	000d0840 	call	d084 <__umoddi3>
   1f5d4:	1013883a 	mov	r9,r2
   1f5d8:	01c00404 	movi	r7,16
   1f5dc:	0039883a 	mov	fp,zero
   1f5e0:	da000017 	ldw	r8,0(sp)
   1f5e4:	003f7a06 	br	1f3d0 <__alt_mem_mcu_subsystem_ram_0+0x77fff3d0>

0001f5e8 <_strtoull_r>:
   1f5e8:	008000f4 	movhi	r2,3
   1f5ec:	10a3b117 	ldw	r2,-28988(r2)
   1f5f0:	defffe04 	addi	sp,sp,-8
   1f5f4:	dfc00115 	stw	ra,4(sp)
   1f5f8:	10800d17 	ldw	r2,52(r2)
   1f5fc:	1000021e 	bne	r2,zero,1f608 <_strtoull_r+0x20>
   1f600:	008000b4 	movhi	r2,2
   1f604:	109d7c04 	addi	r2,r2,30192
   1f608:	d8800015 	stw	r2,0(sp)
   1f60c:	001f2d00 	call	1f2d0 <_strtoull_l.isra.0>
   1f610:	dfc00117 	ldw	ra,4(sp)
   1f614:	dec00204 	addi	sp,sp,8
   1f618:	f800283a 	ret

0001f61c <strtoull_l>:
   1f61c:	defffe04 	addi	sp,sp,-8
   1f620:	008000f4 	movhi	r2,3
   1f624:	d9c00015 	stw	r7,0(sp)
   1f628:	300f883a 	mov	r7,r6
   1f62c:	280d883a 	mov	r6,r5
   1f630:	200b883a 	mov	r5,r4
   1f634:	1123b117 	ldw	r4,-28988(r2)
   1f638:	dfc00115 	stw	ra,4(sp)
   1f63c:	001f2d00 	call	1f2d0 <_strtoull_l.isra.0>
   1f640:	dfc00117 	ldw	ra,4(sp)
   1f644:	dec00204 	addi	sp,sp,8
   1f648:	f800283a 	ret

0001f64c <strtoull>:
   1f64c:	008000f4 	movhi	r2,3
   1f650:	10e3b117 	ldw	r3,-28988(r2)
   1f654:	defffe04 	addi	sp,sp,-8
   1f658:	dfc00115 	stw	ra,4(sp)
   1f65c:	18800d17 	ldw	r2,52(r3)
   1f660:	1000021e 	bne	r2,zero,1f66c <strtoull+0x20>
   1f664:	008000b4 	movhi	r2,2
   1f668:	109d7c04 	addi	r2,r2,30192
   1f66c:	300f883a 	mov	r7,r6
   1f670:	d8800015 	stw	r2,0(sp)
   1f674:	280d883a 	mov	r6,r5
   1f678:	200b883a 	mov	r5,r4
   1f67c:	1809883a 	mov	r4,r3
   1f680:	001f2d00 	call	1f2d0 <_strtoull_l.isra.0>
   1f684:	dfc00117 	ldw	ra,4(sp)
   1f688:	dec00204 	addi	sp,sp,8
   1f68c:	f800283a 	ret

0001f690 <_wcrtomb_r>:
   1f690:	008000f4 	movhi	r2,3
   1f694:	10a3b117 	ldw	r2,-28988(r2)
   1f698:	defffa04 	addi	sp,sp,-24
   1f69c:	dc400415 	stw	r17,16(sp)
   1f6a0:	dc000315 	stw	r16,12(sp)
   1f6a4:	dfc00515 	stw	ra,20(sp)
   1f6a8:	2021883a 	mov	r16,r4
   1f6ac:	3823883a 	mov	r17,r7
   1f6b0:	10800d17 	ldw	r2,52(r2)
   1f6b4:	28000f26 	beq	r5,zero,1f6f4 <_wcrtomb_r+0x64>
   1f6b8:	10000b26 	beq	r2,zero,1f6e8 <_wcrtomb_r+0x58>
   1f6bc:	10803817 	ldw	r2,224(r2)
   1f6c0:	880f883a 	mov	r7,r17
   1f6c4:	8009883a 	mov	r4,r16
   1f6c8:	103ee83a 	callr	r2
   1f6cc:	10ffffd8 	cmpnei	r3,r2,-1
   1f6d0:	18001126 	beq	r3,zero,1f718 <_wcrtomb_r+0x88>
   1f6d4:	dfc00517 	ldw	ra,20(sp)
   1f6d8:	dc400417 	ldw	r17,16(sp)
   1f6dc:	dc000317 	ldw	r16,12(sp)
   1f6e0:	dec00604 	addi	sp,sp,24
   1f6e4:	f800283a 	ret
   1f6e8:	008000b4 	movhi	r2,2
   1f6ec:	109d7c04 	addi	r2,r2,30192
   1f6f0:	003ff206 	br	1f6bc <__alt_mem_mcu_subsystem_ram_0+0x77fff6bc>
   1f6f4:	10000d26 	beq	r2,zero,1f72c <_wcrtomb_r+0x9c>
   1f6f8:	10803817 	ldw	r2,224(r2)
   1f6fc:	880f883a 	mov	r7,r17
   1f700:	000d883a 	mov	r6,zero
   1f704:	d9400084 	addi	r5,sp,2
   1f708:	8009883a 	mov	r4,r16
   1f70c:	103ee83a 	callr	r2
   1f710:	10ffffd8 	cmpnei	r3,r2,-1
   1f714:	183fef1e 	bne	r3,zero,1f6d4 <__alt_mem_mcu_subsystem_ram_0+0x77fff6d4>
   1f718:	00802284 	movi	r2,138
   1f71c:	88000015 	stw	zero,0(r17)
   1f720:	80800015 	stw	r2,0(r16)
   1f724:	00bfffc4 	movi	r2,-1
   1f728:	003fea06 	br	1f6d4 <__alt_mem_mcu_subsystem_ram_0+0x77fff6d4>
   1f72c:	008000b4 	movhi	r2,2
   1f730:	109d7c04 	addi	r2,r2,30192
   1f734:	003ff006 	br	1f6f8 <__alt_mem_mcu_subsystem_ram_0+0x77fff6f8>

0001f738 <wcrtomb>:
   1f738:	defffa04 	addi	sp,sp,-24
   1f73c:	008000f4 	movhi	r2,3
   1f740:	dc000315 	stw	r16,12(sp)
   1f744:	1423b117 	ldw	r16,-28988(r2)
   1f748:	dc400415 	stw	r17,16(sp)
   1f74c:	dfc00515 	stw	ra,20(sp)
   1f750:	3023883a 	mov	r17,r6
   1f754:	80800d17 	ldw	r2,52(r16)
   1f758:	20001126 	beq	r4,zero,1f7a0 <wcrtomb+0x68>
   1f75c:	10000d26 	beq	r2,zero,1f794 <wcrtomb+0x5c>
   1f760:	10803817 	ldw	r2,224(r2)
   1f764:	280d883a 	mov	r6,r5
   1f768:	880f883a 	mov	r7,r17
   1f76c:	200b883a 	mov	r5,r4
   1f770:	8009883a 	mov	r4,r16
   1f774:	103ee83a 	callr	r2
   1f778:	10ffffd8 	cmpnei	r3,r2,-1
   1f77c:	18001126 	beq	r3,zero,1f7c4 <wcrtomb+0x8c>
   1f780:	dfc00517 	ldw	ra,20(sp)
   1f784:	dc400417 	ldw	r17,16(sp)
   1f788:	dc000317 	ldw	r16,12(sp)
   1f78c:	dec00604 	addi	sp,sp,24
   1f790:	f800283a 	ret
   1f794:	008000b4 	movhi	r2,2
   1f798:	109d7c04 	addi	r2,r2,30192
   1f79c:	003ff006 	br	1f760 <__alt_mem_mcu_subsystem_ram_0+0x77fff760>
   1f7a0:	10000d26 	beq	r2,zero,1f7d8 <wcrtomb+0xa0>
   1f7a4:	10803817 	ldw	r2,224(r2)
   1f7a8:	880f883a 	mov	r7,r17
   1f7ac:	000d883a 	mov	r6,zero
   1f7b0:	d9400084 	addi	r5,sp,2
   1f7b4:	8009883a 	mov	r4,r16
   1f7b8:	103ee83a 	callr	r2
   1f7bc:	10ffffd8 	cmpnei	r3,r2,-1
   1f7c0:	183fef1e 	bne	r3,zero,1f780 <__alt_mem_mcu_subsystem_ram_0+0x77fff780>
   1f7c4:	00802284 	movi	r2,138
   1f7c8:	80800015 	stw	r2,0(r16)
   1f7cc:	88000015 	stw	zero,0(r17)
   1f7d0:	00bfffc4 	movi	r2,-1
   1f7d4:	003fea06 	br	1f780 <__alt_mem_mcu_subsystem_ram_0+0x77fff780>
   1f7d8:	008000b4 	movhi	r2,2
   1f7dc:	109d7c04 	addi	r2,r2,30192
   1f7e0:	003ff006 	br	1f7a4 <__alt_mem_mcu_subsystem_ram_0+0x77fff7a4>

0001f7e4 <__eqdf2>:
   1f7e4:	2810d53a 	srli	r8,r5,20
   1f7e8:	3806d53a 	srli	r3,r7,20
   1f7ec:	00800434 	movhi	r2,16
   1f7f0:	4201ffcc 	andi	r8,r8,2047
   1f7f4:	10bfffc4 	addi	r2,r2,-1
   1f7f8:	4281ffd8 	cmpnei	r10,r8,2047
   1f7fc:	2892703a 	and	r9,r5,r2
   1f800:	18c1ffcc 	andi	r3,r3,2047
   1f804:	3884703a 	and	r2,r7,r2
   1f808:	280ad7fa 	srli	r5,r5,31
   1f80c:	380ed7fa 	srli	r7,r7,31
   1f810:	50000626 	beq	r10,zero,1f82c <__eqdf2+0x48>
   1f814:	1a81ffe0 	cmpeqi	r10,r3,2047
   1f818:	5000021e 	bne	r10,zero,1f824 <__eqdf2+0x40>
   1f81c:	40c0011e 	bne	r8,r3,1f824 <__eqdf2+0x40>
   1f820:	48800826 	beq	r9,r2,1f844 <__eqdf2+0x60>
   1f824:	00800044 	movi	r2,1
   1f828:	f800283a 	ret
   1f82c:	4914b03a 	or	r10,r9,r4
   1f830:	503ffc1e 	bne	r10,zero,1f824 <__alt_mem_mcu_subsystem_ram_0+0x77fff824>
   1f834:	18c1ffd8 	cmpnei	r3,r3,2047
   1f838:	183ffa1e 	bne	r3,zero,1f824 <__alt_mem_mcu_subsystem_ram_0+0x77fff824>
   1f83c:	1184b03a 	or	r2,r2,r6
   1f840:	103ff81e 	bne	r2,zero,1f824 <__alt_mem_mcu_subsystem_ram_0+0x77fff824>
   1f844:	21bff71e 	bne	r4,r6,1f824 <__alt_mem_mcu_subsystem_ram_0+0x77fff824>
   1f848:	29c00426 	beq	r5,r7,1f85c <__eqdf2+0x78>
   1f84c:	403ff51e 	bne	r8,zero,1f824 <__alt_mem_mcu_subsystem_ram_0+0x77fff824>
   1f850:	4904b03a 	or	r2,r9,r4
   1f854:	1004c03a 	cmpne	r2,r2,zero
   1f858:	f800283a 	ret
   1f85c:	0005883a 	mov	r2,zero
   1f860:	f800283a 	ret

0001f864 <__ledf2>:
   1f864:	2810d53a 	srli	r8,r5,20
   1f868:	3806d53a 	srli	r3,r7,20
   1f86c:	00800434 	movhi	r2,16
   1f870:	4201ffcc 	andi	r8,r8,2047
   1f874:	10bfffc4 	addi	r2,r2,-1
   1f878:	4241ffd8 	cmpnei	r9,r8,2047
   1f87c:	2894703a 	and	r10,r5,r2
   1f880:	18c1ffcc 	andi	r3,r3,2047
   1f884:	3884703a 	and	r2,r7,r2
   1f888:	280ad7fa 	srli	r5,r5,31
   1f88c:	380ed7fa 	srli	r7,r7,31
   1f890:	48000e26 	beq	r9,zero,1f8cc <__ledf2+0x68>
   1f894:	1a41ffd8 	cmpnei	r9,r3,2047
   1f898:	48000826 	beq	r9,zero,1f8bc <__ledf2+0x58>
   1f89c:	40000f1e 	bne	r8,zero,1f8dc <__ledf2+0x78>
   1f8a0:	5112b03a 	or	r9,r10,r4
   1f8a4:	1800131e 	bne	r3,zero,1f8f4 <__ledf2+0x90>
   1f8a8:	1196b03a 	or	r11,r2,r6
   1f8ac:	5800111e 	bne	r11,zero,1f8f4 <__ledf2+0x90>
   1f8b0:	48000d1e 	bne	r9,zero,1f8e8 <__ledf2+0x84>
   1f8b4:	0005883a 	mov	r2,zero
   1f8b8:	f800283a 	ret
   1f8bc:	1192b03a 	or	r9,r2,r6
   1f8c0:	483ff626 	beq	r9,zero,1f89c <__alt_mem_mcu_subsystem_ram_0+0x77fff89c>
   1f8c4:	00800084 	movi	r2,2
   1f8c8:	f800283a 	ret
   1f8cc:	5112b03a 	or	r9,r10,r4
   1f8d0:	483ffc1e 	bne	r9,zero,1f8c4 <__alt_mem_mcu_subsystem_ram_0+0x77fff8c4>
   1f8d4:	1a41ffd8 	cmpnei	r9,r3,2047
   1f8d8:	48001226 	beq	r9,zero,1f924 <__ledf2+0xc0>
   1f8dc:	1800131e 	bne	r3,zero,1f92c <__ledf2+0xc8>
   1f8e0:	1192b03a 	or	r9,r2,r6
   1f8e4:	4800111e 	bne	r9,zero,1f92c <__ledf2+0xc8>
   1f8e8:	00800044 	movi	r2,1
   1f8ec:	2800081e 	bne	r5,zero,1f910 <__ledf2+0xac>
   1f8f0:	f800283a 	ret
   1f8f4:	48000826 	beq	r9,zero,1f918 <__ledf2+0xb4>
   1f8f8:	29fffb1e 	bne	r5,r7,1f8e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff8e8>
   1f8fc:	40c00316 	blt	r8,r3,1f90c <__ledf2+0xa8>
   1f900:	12bff936 	bltu	r2,r10,1f8e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff8e8>
   1f904:	50800c26 	beq	r10,r2,1f938 <__ledf2+0xd4>
   1f908:	50bfea2e 	bgeu	r10,r2,1f8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff8b4>
   1f90c:	2800031e 	bne	r5,zero,1f91c <__ledf2+0xb8>
   1f910:	00bfffc4 	movi	r2,-1
   1f914:	f800283a 	ret
   1f918:	383ffd26 	beq	r7,zero,1f910 <__alt_mem_mcu_subsystem_ram_0+0x77fff910>
   1f91c:	00800044 	movi	r2,1
   1f920:	f800283a 	ret
   1f924:	1192b03a 	or	r9,r2,r6
   1f928:	483fe61e 	bne	r9,zero,1f8c4 <__alt_mem_mcu_subsystem_ram_0+0x77fff8c4>
   1f92c:	29ffee1e 	bne	r5,r7,1f8e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff8e8>
   1f930:	1a3fed16 	blt	r3,r8,1f8e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff8e8>
   1f934:	003ff106 	br	1f8fc <__alt_mem_mcu_subsystem_ram_0+0x77fff8fc>
   1f938:	313feb36 	bltu	r6,r4,1f8e8 <__alt_mem_mcu_subsystem_ram_0+0x77fff8e8>
   1f93c:	21bff336 	bltu	r4,r6,1f90c <__alt_mem_mcu_subsystem_ram_0+0x77fff90c>
   1f940:	003fdc06 	br	1f8b4 <__alt_mem_mcu_subsystem_ram_0+0x77fff8b4>

0001f944 <__unorddf2>:
   1f944:	2806d53a 	srli	r3,r5,20
   1f948:	3810d53a 	srli	r8,r7,20
   1f94c:	00800434 	movhi	r2,16
   1f950:	18c1ffcc 	andi	r3,r3,2047
   1f954:	10bfffc4 	addi	r2,r2,-1
   1f958:	18c1ffd8 	cmpnei	r3,r3,2047
   1f95c:	288a703a 	and	r5,r5,r2
   1f960:	388e703a 	and	r7,r7,r2
   1f964:	4201ffcc 	andi	r8,r8,2047
   1f968:	18000426 	beq	r3,zero,1f97c <__unorddf2+0x38>
   1f96c:	4201ffd8 	cmpnei	r8,r8,2047
   1f970:	40000626 	beq	r8,zero,1f98c <__unorddf2+0x48>
   1f974:	0005883a 	mov	r2,zero
   1f978:	f800283a 	ret
   1f97c:	214ab03a 	or	r5,r4,r5
   1f980:	283ffa26 	beq	r5,zero,1f96c <__alt_mem_mcu_subsystem_ram_0+0x77fff96c>
   1f984:	00800044 	movi	r2,1
   1f988:	f800283a 	ret
   1f98c:	398eb03a 	or	r7,r7,r6
   1f990:	3804c03a 	cmpne	r2,r7,zero
   1f994:	f800283a 	ret

0001f998 <__floatsidf>:
   1f998:	defffd04 	addi	sp,sp,-12
   1f99c:	dfc00215 	stw	ra,8(sp)
   1f9a0:	dc400115 	stw	r17,4(sp)
   1f9a4:	dc000015 	stw	r16,0(sp)
   1f9a8:	20002626 	beq	r4,zero,1fa44 <__floatsidf+0xac>
   1f9ac:	2021883a 	mov	r16,r4
   1f9b0:	2022d7fa 	srli	r17,r4,31
   1f9b4:	20002816 	blt	r4,zero,1fa58 <__floatsidf+0xc0>
   1f9b8:	8009883a 	mov	r4,r16
   1f9bc:	000facc0 	call	facc <__clzsi2>
   1f9c0:	01010784 	movi	r4,1054
   1f9c4:	2089c83a 	sub	r4,r4,r2
   1f9c8:	10c002c8 	cmpgei	r3,r2,11
   1f9cc:	2101ffcc 	andi	r4,r4,2047
   1f9d0:	18001326 	beq	r3,zero,1fa20 <__floatsidf+0x88>
   1f9d4:	10bffd44 	addi	r2,r2,-11
   1f9d8:	808a983a 	sll	r5,r16,r2
   1f9dc:	00800434 	movhi	r2,16
   1f9e0:	10bfffc4 	addi	r2,r2,-1
   1f9e4:	288a703a 	and	r5,r5,r2
   1f9e8:	0005883a 	mov	r2,zero
   1f9ec:	2008953a 	slli	r4,r4,20
   1f9f0:	8c403fcc 	andi	r17,r17,255
   1f9f4:	01800434 	movhi	r6,16
   1f9f8:	31bfffc4 	addi	r6,r6,-1
   1f9fc:	880697fa 	slli	r3,r17,31
   1fa00:	298a703a 	and	r5,r5,r6
   1fa04:	290ab03a 	or	r5,r5,r4
   1fa08:	28c6b03a 	or	r3,r5,r3
   1fa0c:	dfc00217 	ldw	ra,8(sp)
   1fa10:	dc400117 	ldw	r17,4(sp)
   1fa14:	dc000017 	ldw	r16,0(sp)
   1fa18:	dec00304 	addi	sp,sp,12
   1fa1c:	f800283a 	ret
   1fa20:	018002c4 	movi	r6,11
   1fa24:	308dc83a 	sub	r6,r6,r2
   1fa28:	818ad83a 	srl	r5,r16,r6
   1fa2c:	00c00434 	movhi	r3,16
   1fa30:	10800544 	addi	r2,r2,21
   1fa34:	18ffffc4 	addi	r3,r3,-1
   1fa38:	8084983a 	sll	r2,r16,r2
   1fa3c:	28ca703a 	and	r5,r5,r3
   1fa40:	003fea06 	br	1f9ec <__alt_mem_mcu_subsystem_ram_0+0x77fff9ec>
   1fa44:	0023883a 	mov	r17,zero
   1fa48:	0009883a 	mov	r4,zero
   1fa4c:	000b883a 	mov	r5,zero
   1fa50:	0005883a 	mov	r2,zero
   1fa54:	003fe506 	br	1f9ec <__alt_mem_mcu_subsystem_ram_0+0x77fff9ec>
   1fa58:	0121c83a 	sub	r16,zero,r4
   1fa5c:	003fd606 	br	1f9b8 <__alt_mem_mcu_subsystem_ram_0+0x77fff9b8>

0001fa60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fa60:	defffe04 	addi	sp,sp,-8
   1fa64:	dfc00115 	stw	ra,4(sp)
   1fa68:	df000015 	stw	fp,0(sp)
   1fa6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fa70:	d0a00c17 	ldw	r2,-32720(gp)
   1fa74:	10000326 	beq	r2,zero,1fa84 <alt_get_errno+0x24>
   1fa78:	d0a00c17 	ldw	r2,-32720(gp)
   1fa7c:	103ee83a 	callr	r2
   1fa80:	00000106 	br	1fa88 <alt_get_errno+0x28>
   1fa84:	d0a77a04 	addi	r2,gp,-25112
}
   1fa88:	e037883a 	mov	sp,fp
   1fa8c:	dfc00117 	ldw	ra,4(sp)
   1fa90:	df000017 	ldw	fp,0(sp)
   1fa94:	dec00204 	addi	sp,sp,8
   1fa98:	f800283a 	ret

0001fa9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1fa9c:	defffb04 	addi	sp,sp,-20
   1faa0:	dfc00415 	stw	ra,16(sp)
   1faa4:	df000315 	stw	fp,12(sp)
   1faa8:	df000304 	addi	fp,sp,12
   1faac:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1fab0:	e0bffd17 	ldw	r2,-12(fp)
   1fab4:	10000616 	blt	r2,zero,1fad0 <close+0x34>
   1fab8:	e0bffd17 	ldw	r2,-12(fp)
   1fabc:	10c00324 	muli	r3,r2,12
   1fac0:	008000b4 	movhi	r2,2
   1fac4:	109ef304 	addi	r2,r2,31692
   1fac8:	1885883a 	add	r2,r3,r2
   1facc:	00000106 	br	1fad4 <close+0x38>
   1fad0:	0005883a 	mov	r2,zero
   1fad4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   1fad8:	e0bfff17 	ldw	r2,-4(fp)
   1fadc:	10001926 	beq	r2,zero,1fb44 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1fae0:	e0bfff17 	ldw	r2,-4(fp)
   1fae4:	10800017 	ldw	r2,0(r2)
   1fae8:	10800417 	ldw	r2,16(r2)
   1faec:	10000626 	beq	r2,zero,1fb08 <close+0x6c>
   1faf0:	e0bfff17 	ldw	r2,-4(fp)
   1faf4:	10800017 	ldw	r2,0(r2)
   1faf8:	10800417 	ldw	r2,16(r2)
   1fafc:	e13fff17 	ldw	r4,-4(fp)
   1fb00:	103ee83a 	callr	r2
   1fb04:	00000106 	br	1fb0c <close+0x70>
   1fb08:	0005883a 	mov	r2,zero
   1fb0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1fb10:	e13ffd17 	ldw	r4,-12(fp)
   1fb14:	002054c0 	call	2054c <alt_release_fd>
    if (rval < 0)
   1fb18:	e0bffe17 	ldw	r2,-8(fp)
   1fb1c:	1000070e 	bge	r2,zero,1fb3c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1fb20:	001fa600 	call	1fa60 <alt_get_errno>
   1fb24:	1007883a 	mov	r3,r2
   1fb28:	e0bffe17 	ldw	r2,-8(fp)
   1fb2c:	0085c83a 	sub	r2,zero,r2
   1fb30:	18800015 	stw	r2,0(r3)
      return -1;
   1fb34:	00bfffc4 	movi	r2,-1
   1fb38:	00000706 	br	1fb58 <close+0xbc>
    }
    return 0;
   1fb3c:	0005883a 	mov	r2,zero
   1fb40:	00000506 	br	1fb58 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1fb44:	001fa600 	call	1fa60 <alt_get_errno>
   1fb48:	1007883a 	mov	r3,r2
   1fb4c:	00801444 	movi	r2,81
   1fb50:	18800015 	stw	r2,0(r3)
    return -1;
   1fb54:	00bfffc4 	movi	r2,-1
  }
}
   1fb58:	e037883a 	mov	sp,fp
   1fb5c:	dfc00117 	ldw	ra,4(sp)
   1fb60:	df000017 	ldw	fp,0(sp)
   1fb64:	dec00204 	addi	sp,sp,8
   1fb68:	f800283a 	ret

0001fb6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1fb6c:	defffc04 	addi	sp,sp,-16
   1fb70:	df000315 	stw	fp,12(sp)
   1fb74:	df000304 	addi	fp,sp,12
   1fb78:	e13fff15 	stw	r4,-4(fp)
   1fb7c:	e17ffe15 	stw	r5,-8(fp)
   1fb80:	e1bffd15 	stw	r6,-12(fp)
  return len;
   1fb84:	e0bffd17 	ldw	r2,-12(fp)
}
   1fb88:	e037883a 	mov	sp,fp
   1fb8c:	df000017 	ldw	fp,0(sp)
   1fb90:	dec00104 	addi	sp,sp,4
   1fb94:	f800283a 	ret

0001fb98 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
   1fb98:	defffd04 	addi	sp,sp,-12
   1fb9c:	dfc00215 	stw	ra,8(sp)
   1fba0:	df000115 	stw	fp,4(sp)
   1fba4:	df000104 	addi	fp,sp,4
   1fba8:	e13fff15 	stw	r4,-4(fp)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1fbac:	d1600904 	addi	r5,gp,-32732
   1fbb0:	e13fff17 	ldw	r4,-4(fp)
   1fbb4:	001fc080 	call	1fc08 <alt_dev_llist_insert>
}
   1fbb8:	e037883a 	mov	sp,fp
   1fbbc:	dfc00117 	ldw	ra,4(sp)
   1fbc0:	df000017 	ldw	fp,0(sp)
   1fbc4:	dec00204 	addi	sp,sp,8
   1fbc8:	f800283a 	ret

0001fbcc <alt_get_errno>:
{
   1fbcc:	defffe04 	addi	sp,sp,-8
   1fbd0:	dfc00115 	stw	ra,4(sp)
   1fbd4:	df000015 	stw	fp,0(sp)
   1fbd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fbdc:	d0a00c17 	ldw	r2,-32720(gp)
   1fbe0:	10000326 	beq	r2,zero,1fbf0 <alt_get_errno+0x24>
   1fbe4:	d0a00c17 	ldw	r2,-32720(gp)
   1fbe8:	103ee83a 	callr	r2
   1fbec:	00000106 	br	1fbf4 <alt_get_errno+0x28>
   1fbf0:	d0a77a04 	addi	r2,gp,-25112
}
   1fbf4:	e037883a 	mov	sp,fp
   1fbf8:	dfc00117 	ldw	ra,4(sp)
   1fbfc:	df000017 	ldw	fp,0(sp)
   1fc00:	dec00204 	addi	sp,sp,8
   1fc04:	f800283a 	ret

0001fc08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1fc08:	defffa04 	addi	sp,sp,-24
   1fc0c:	dfc00515 	stw	ra,20(sp)
   1fc10:	df000415 	stw	fp,16(sp)
   1fc14:	df000404 	addi	fp,sp,16
   1fc18:	e13ffd15 	stw	r4,-12(fp)
   1fc1c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1fc20:	e0bffd17 	ldw	r2,-12(fp)
   1fc24:	10000326 	beq	r2,zero,1fc34 <alt_dev_llist_insert+0x2c>
   1fc28:	e0bffd17 	ldw	r2,-12(fp)
   1fc2c:	10800217 	ldw	r2,8(r2)
   1fc30:	1000061e 	bne	r2,zero,1fc4c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1fc34:	001fbcc0 	call	1fbcc <alt_get_errno>
   1fc38:	1007883a 	mov	r3,r2
   1fc3c:	00800584 	movi	r2,22
   1fc40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1fc44:	00bffa84 	movi	r2,-22
   1fc48:	00001306 	br	1fc98 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1fc4c:	e0bffd17 	ldw	r2,-12(fp)
   1fc50:	e0fffc17 	ldw	r3,-16(fp)
   1fc54:	e0ffff15 	stw	r3,-4(fp)
   1fc58:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1fc5c:	e0bffe17 	ldw	r2,-8(fp)
   1fc60:	e0ffff17 	ldw	r3,-4(fp)
   1fc64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1fc68:	e0bfff17 	ldw	r2,-4(fp)
   1fc6c:	10c00017 	ldw	r3,0(r2)
   1fc70:	e0bffe17 	ldw	r2,-8(fp)
   1fc74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1fc78:	e0bfff17 	ldw	r2,-4(fp)
   1fc7c:	10800017 	ldw	r2,0(r2)
   1fc80:	e0fffe17 	ldw	r3,-8(fp)
   1fc84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1fc88:	e0bfff17 	ldw	r2,-4(fp)
   1fc8c:	e0fffe17 	ldw	r3,-8(fp)
   1fc90:	10c00015 	stw	r3,0(r2)

  return 0;  
   1fc94:	0005883a 	mov	r2,zero
}
   1fc98:	e037883a 	mov	sp,fp
   1fc9c:	dfc00117 	ldw	ra,4(sp)
   1fca0:	df000017 	ldw	fp,0(sp)
   1fca4:	dec00204 	addi	sp,sp,8
   1fca8:	f800283a 	ret

0001fcac <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
   1fcac:	defffe04 	addi	sp,sp,-8
   1fcb0:	df000115 	stw	fp,4(sp)
   1fcb4:	df000104 	addi	fp,sp,4
   1fcb8:	e13fff15 	stw	r4,-4(fp)
}
   1fcbc:	0001883a 	nop
   1fcc0:	e037883a 	mov	sp,fp
   1fcc4:	df000017 	ldw	fp,0(sp)
   1fcc8:	dec00104 	addi	sp,sp,4
   1fccc:	f800283a 	ret

0001fcd0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1fcd0:	defffe04 	addi	sp,sp,-8
   1fcd4:	df000115 	stw	fp,4(sp)
   1fcd8:	df000104 	addi	fp,sp,4
   1fcdc:	e13fff15 	stw	r4,-4(fp)
}
   1fce0:	0001883a 	nop
   1fce4:	e037883a 	mov	sp,fp
   1fce8:	df000017 	ldw	fp,0(sp)
   1fcec:	dec00104 	addi	sp,sp,4
   1fcf0:	f800283a 	ret

0001fcf4 <alt_get_errno>:
{
   1fcf4:	defffe04 	addi	sp,sp,-8
   1fcf8:	dfc00115 	stw	ra,4(sp)
   1fcfc:	df000015 	stw	fp,0(sp)
   1fd00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fd04:	d0a00c17 	ldw	r2,-32720(gp)
   1fd08:	10000326 	beq	r2,zero,1fd18 <alt_get_errno+0x24>
   1fd0c:	d0a00c17 	ldw	r2,-32720(gp)
   1fd10:	103ee83a 	callr	r2
   1fd14:	00000106 	br	1fd1c <alt_get_errno+0x28>
   1fd18:	d0a77a04 	addi	r2,gp,-25112
}
   1fd1c:	e037883a 	mov	sp,fp
   1fd20:	dfc00117 	ldw	ra,4(sp)
   1fd24:	df000017 	ldw	fp,0(sp)
   1fd28:	dec00204 	addi	sp,sp,8
   1fd2c:	f800283a 	ret

0001fd30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1fd30:	defffb04 	addi	sp,sp,-20
   1fd34:	dfc00415 	stw	ra,16(sp)
   1fd38:	df000315 	stw	fp,12(sp)
   1fd3c:	df000304 	addi	fp,sp,12
   1fd40:	e13ffe15 	stw	r4,-8(fp)
   1fd44:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1fd48:	e0bffe17 	ldw	r2,-8(fp)
   1fd4c:	10000616 	blt	r2,zero,1fd68 <fstat+0x38>
   1fd50:	e0bffe17 	ldw	r2,-8(fp)
   1fd54:	10c00324 	muli	r3,r2,12
   1fd58:	008000b4 	movhi	r2,2
   1fd5c:	109ef304 	addi	r2,r2,31692
   1fd60:	1885883a 	add	r2,r3,r2
   1fd64:	00000106 	br	1fd6c <fstat+0x3c>
   1fd68:	0005883a 	mov	r2,zero
   1fd6c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1fd70:	e0bfff17 	ldw	r2,-4(fp)
   1fd74:	10001026 	beq	r2,zero,1fdb8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1fd78:	e0bfff17 	ldw	r2,-4(fp)
   1fd7c:	10800017 	ldw	r2,0(r2)
   1fd80:	10800817 	ldw	r2,32(r2)
   1fd84:	10000726 	beq	r2,zero,1fda4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1fd88:	e0bfff17 	ldw	r2,-4(fp)
   1fd8c:	10800017 	ldw	r2,0(r2)
   1fd90:	10800817 	ldw	r2,32(r2)
   1fd94:	e17ffd17 	ldw	r5,-12(fp)
   1fd98:	e13fff17 	ldw	r4,-4(fp)
   1fd9c:	103ee83a 	callr	r2
   1fda0:	00000a06 	br	1fdcc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1fda4:	e0bffd17 	ldw	r2,-12(fp)
   1fda8:	00c80004 	movi	r3,8192
   1fdac:	10c00115 	stw	r3,4(r2)
      return 0;
   1fdb0:	0005883a 	mov	r2,zero
   1fdb4:	00000506 	br	1fdcc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1fdb8:	001fcf40 	call	1fcf4 <alt_get_errno>
   1fdbc:	1007883a 	mov	r3,r2
   1fdc0:	00801444 	movi	r2,81
   1fdc4:	18800015 	stw	r2,0(r3)
    return -1;
   1fdc8:	00bfffc4 	movi	r2,-1
  }
}
   1fdcc:	e037883a 	mov	sp,fp
   1fdd0:	dfc00117 	ldw	ra,4(sp)
   1fdd4:	df000017 	ldw	fp,0(sp)
   1fdd8:	dec00204 	addi	sp,sp,8
   1fddc:	f800283a 	ret

0001fde0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1fde0:	defffe04 	addi	sp,sp,-8
   1fde4:	dfc00115 	stw	ra,4(sp)
   1fde8:	df000015 	stw	fp,0(sp)
   1fdec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1fdf0:	01440004 	movi	r5,4096
   1fdf4:	0009883a 	mov	r4,zero
   1fdf8:	00240f40 	call	240f4 <alt_icache_flush>
#endif
}
   1fdfc:	0001883a 	nop
   1fe00:	e037883a 	mov	sp,fp
   1fe04:	dfc00117 	ldw	ra,4(sp)
   1fe08:	df000017 	ldw	fp,0(sp)
   1fe0c:	dec00204 	addi	sp,sp,8
   1fe10:	f800283a 	ret

0001fe14 <alt_get_errno>:
{
   1fe14:	defffe04 	addi	sp,sp,-8
   1fe18:	dfc00115 	stw	ra,4(sp)
   1fe1c:	df000015 	stw	fp,0(sp)
   1fe20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fe24:	d0a00c17 	ldw	r2,-32720(gp)
   1fe28:	10000326 	beq	r2,zero,1fe38 <alt_get_errno+0x24>
   1fe2c:	d0a00c17 	ldw	r2,-32720(gp)
   1fe30:	103ee83a 	callr	r2
   1fe34:	00000106 	br	1fe3c <alt_get_errno+0x28>
   1fe38:	d0a77a04 	addi	r2,gp,-25112
}
   1fe3c:	e037883a 	mov	sp,fp
   1fe40:	dfc00117 	ldw	ra,4(sp)
   1fe44:	df000017 	ldw	fp,0(sp)
   1fe48:	dec00204 	addi	sp,sp,8
   1fe4c:	f800283a 	ret

0001fe50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1fe50:	deffed04 	addi	sp,sp,-76
   1fe54:	dfc01215 	stw	ra,72(sp)
   1fe58:	df001115 	stw	fp,68(sp)
   1fe5c:	df001104 	addi	fp,sp,68
   1fe60:	e13fef15 	stw	r4,-68(fp)
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
   1fe64:	e03ff115 	stw	zero,-60(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1fe68:	e0bfef17 	ldw	r2,-68(fp)
   1fe6c:	10000616 	blt	r2,zero,1fe88 <isatty+0x38>
   1fe70:	e0bfef17 	ldw	r2,-68(fp)
   1fe74:	10c00324 	muli	r3,r2,12
   1fe78:	008000b4 	movhi	r2,2
   1fe7c:	109ef304 	addi	r2,r2,31692
   1fe80:	1885883a 	add	r2,r3,r2
   1fe84:	00000106 	br	1fe8c <isatty+0x3c>
   1fe88:	0005883a 	mov	r2,zero
   1fe8c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1fe90:	e0bfff17 	ldw	r2,-4(fp)
   1fe94:	10000e26 	beq	r2,zero,1fed0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1fe98:	e0bfff17 	ldw	r2,-4(fp)
   1fe9c:	10800017 	ldw	r2,0(r2)
   1fea0:	10800817 	ldw	r2,32(r2)
   1fea4:	1000021e 	bne	r2,zero,1feb0 <isatty+0x60>
    {
      return 1;
   1fea8:	00800044 	movi	r2,1
   1feac:	00000d06 	br	1fee4 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1feb0:	e0bff004 	addi	r2,fp,-64
   1feb4:	100b883a 	mov	r5,r2
   1feb8:	e13fef17 	ldw	r4,-68(fp)
   1febc:	001fd300 	call	1fd30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1fec0:	e0bff117 	ldw	r2,-60(fp)
   1fec4:	10880020 	cmpeqi	r2,r2,8192
   1fec8:	10803fcc 	andi	r2,r2,255
   1fecc:	00000506 	br	1fee4 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1fed0:	001fe140 	call	1fe14 <alt_get_errno>
   1fed4:	1007883a 	mov	r3,r2
   1fed8:	00801444 	movi	r2,81
   1fedc:	18800015 	stw	r2,0(r3)
    return 0;
   1fee0:	0005883a 	mov	r2,zero
  }
}
   1fee4:	e037883a 	mov	sp,fp
   1fee8:	dfc00117 	ldw	ra,4(sp)
   1feec:	df000017 	ldw	fp,0(sp)
   1fef0:	dec00204 	addi	sp,sp,8
   1fef4:	f800283a 	ret

0001fef8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1fef8:	defffc04 	addi	sp,sp,-16
   1fefc:	df000315 	stw	fp,12(sp)
   1ff00:	df000304 	addi	fp,sp,12
   1ff04:	e13fff15 	stw	r4,-4(fp)
   1ff08:	e17ffe15 	stw	r5,-8(fp)
   1ff0c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   1ff10:	e0fffe17 	ldw	r3,-8(fp)
   1ff14:	e0bfff17 	ldw	r2,-4(fp)
   1ff18:	18800c26 	beq	r3,r2,1ff4c <alt_load_section+0x54>
  {
    while( to != end )
   1ff1c:	00000806 	br	1ff40 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1ff20:	e0ffff17 	ldw	r3,-4(fp)
   1ff24:	18800104 	addi	r2,r3,4
   1ff28:	e0bfff15 	stw	r2,-4(fp)
   1ff2c:	e0bffe17 	ldw	r2,-8(fp)
   1ff30:	11000104 	addi	r4,r2,4
   1ff34:	e13ffe15 	stw	r4,-8(fp)
   1ff38:	18c00017 	ldw	r3,0(r3)
   1ff3c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   1ff40:	e0fffe17 	ldw	r3,-8(fp)
   1ff44:	e0bffd17 	ldw	r2,-12(fp)
   1ff48:	18bff51e 	bne	r3,r2,1ff20 <__alt_mem_mcu_subsystem_ram_0+0x77ffff20>
    }
  }
}
   1ff4c:	0001883a 	nop
   1ff50:	e037883a 	mov	sp,fp
   1ff54:	df000017 	ldw	fp,0(sp)
   1ff58:	dec00104 	addi	sp,sp,4
   1ff5c:	f800283a 	ret

0001ff60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1ff60:	defffe04 	addi	sp,sp,-8
   1ff64:	dfc00115 	stw	ra,4(sp)
   1ff68:	df000015 	stw	fp,0(sp)
   1ff6c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1ff70:	018000f4 	movhi	r6,3
   1ff74:	31a3c504 	addi	r6,r6,-28908
   1ff78:	014000b4 	movhi	r5,2
   1ff7c:	295c6704 	addi	r5,r5,29084
   1ff80:	010000f4 	movhi	r4,3
   1ff84:	2123c504 	addi	r4,r4,-28908
   1ff88:	001fef80 	call	1fef8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1ff8c:	01800034 	movhi	r6,0
   1ff90:	31808e04 	addi	r6,r6,568
   1ff94:	01400034 	movhi	r5,0
   1ff98:	29400804 	addi	r5,r5,32
   1ff9c:	01000034 	movhi	r4,0
   1ffa0:	21000804 	addi	r4,r4,32
   1ffa4:	001fef80 	call	1fef8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1ffa8:	018000b4 	movhi	r6,2
   1ffac:	319c6704 	addi	r6,r6,29084
   1ffb0:	014000b4 	movhi	r5,2
   1ffb4:	2953ca04 	addi	r5,r5,20264
   1ffb8:	010000b4 	movhi	r4,2
   1ffbc:	2113ca04 	addi	r4,r4,20264
   1ffc0:	001fef80 	call	1fef8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1ffc4:	0023d9c0 	call	23d9c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1ffc8:	001fde00 	call	1fde0 <alt_icache_flush_all>
}
   1ffcc:	0001883a 	nop
   1ffd0:	e037883a 	mov	sp,fp
   1ffd4:	dfc00117 	ldw	ra,4(sp)
   1ffd8:	df000017 	ldw	fp,0(sp)
   1ffdc:	dec00204 	addi	sp,sp,8
   1ffe0:	f800283a 	ret

0001ffe4 <alt_get_errno>:
{
   1ffe4:	defffe04 	addi	sp,sp,-8
   1ffe8:	dfc00115 	stw	ra,4(sp)
   1ffec:	df000015 	stw	fp,0(sp)
   1fff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fff4:	d0a00c17 	ldw	r2,-32720(gp)
   1fff8:	10000326 	beq	r2,zero,20008 <alt_get_errno+0x24>
   1fffc:	d0a00c17 	ldw	r2,-32720(gp)
   20000:	103ee83a 	callr	r2
   20004:	00000106 	br	2000c <alt_get_errno+0x28>
   20008:	d0a77a04 	addi	r2,gp,-25112
}
   2000c:	e037883a 	mov	sp,fp
   20010:	dfc00117 	ldw	ra,4(sp)
   20014:	df000017 	ldw	fp,0(sp)
   20018:	dec00204 	addi	sp,sp,8
   2001c:	f800283a 	ret

00020020 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   20020:	defff904 	addi	sp,sp,-28
   20024:	dfc00615 	stw	ra,24(sp)
   20028:	df000515 	stw	fp,20(sp)
   2002c:	df000504 	addi	fp,sp,20
   20030:	e13ffd15 	stw	r4,-12(fp)
   20034:	e17ffc15 	stw	r5,-16(fp)
   20038:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2003c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20040:	e0bffd17 	ldw	r2,-12(fp)
   20044:	10000616 	blt	r2,zero,20060 <lseek+0x40>
   20048:	e0bffd17 	ldw	r2,-12(fp)
   2004c:	10c00324 	muli	r3,r2,12
   20050:	008000b4 	movhi	r2,2
   20054:	109ef304 	addi	r2,r2,31692
   20058:	1885883a 	add	r2,r3,r2
   2005c:	00000106 	br	20064 <lseek+0x44>
   20060:	0005883a 	mov	r2,zero
   20064:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   20068:	e0bffe17 	ldw	r2,-8(fp)
   2006c:	10001026 	beq	r2,zero,200b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   20070:	e0bffe17 	ldw	r2,-8(fp)
   20074:	10800017 	ldw	r2,0(r2)
   20078:	10800717 	ldw	r2,28(r2)
   2007c:	10000926 	beq	r2,zero,200a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   20080:	e0bffe17 	ldw	r2,-8(fp)
   20084:	10800017 	ldw	r2,0(r2)
   20088:	10800717 	ldw	r2,28(r2)
   2008c:	e1bffb17 	ldw	r6,-20(fp)
   20090:	e17ffc17 	ldw	r5,-16(fp)
   20094:	e13ffe17 	ldw	r4,-8(fp)
   20098:	103ee83a 	callr	r2
   2009c:	e0bfff15 	stw	r2,-4(fp)
   200a0:	00000506 	br	200b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   200a4:	00bfde84 	movi	r2,-134
   200a8:	e0bfff15 	stw	r2,-4(fp)
   200ac:	00000206 	br	200b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   200b0:	00bfebc4 	movi	r2,-81
   200b4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   200b8:	e0bfff17 	ldw	r2,-4(fp)
   200bc:	1000070e 	bge	r2,zero,200dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   200c0:	001ffe40 	call	1ffe4 <alt_get_errno>
   200c4:	1007883a 	mov	r3,r2
   200c8:	e0bfff17 	ldw	r2,-4(fp)
   200cc:	0085c83a 	sub	r2,zero,r2
   200d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   200d4:	00bfffc4 	movi	r2,-1
   200d8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   200dc:	e0bfff17 	ldw	r2,-4(fp)
}
   200e0:	e037883a 	mov	sp,fp
   200e4:	dfc00117 	ldw	ra,4(sp)
   200e8:	df000017 	ldw	fp,0(sp)
   200ec:	dec00204 	addi	sp,sp,8
   200f0:	f800283a 	ret

000200f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   200f4:	defffd04 	addi	sp,sp,-12
   200f8:	dfc00215 	stw	ra,8(sp)
   200fc:	df000115 	stw	fp,4(sp)
   20100:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20104:	0009883a 	mov	r4,zero
   20108:	00207b80 	call	207b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2010c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20110:	00207f00 	call	207f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20114:	018000b4 	movhi	r6,2
   20118:	319c4a04 	addi	r6,r6,28968
   2011c:	014000b4 	movhi	r5,2
   20120:	295c4a04 	addi	r5,r5,28968
   20124:	010000b4 	movhi	r4,2
   20128:	211c4a04 	addi	r4,r4,28968
   2012c:	00244c80 	call	244c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20130:	0023de40 	call	23de4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20134:	010000b4 	movhi	r4,2
   20138:	210f9104 	addi	r4,r4,15940
   2013c:	0024c340 	call	24c34 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20140:	d0a77c17 	ldw	r2,-25104(gp)
   20144:	d0e77d17 	ldw	r3,-25100(gp)
   20148:	d1277e17 	ldw	r4,-25096(gp)
   2014c:	200d883a 	mov	r6,r4
   20150:	180b883a 	mov	r5,r3
   20154:	1009883a 	mov	r4,r2
   20158:	000c8e80 	call	c8e8 <main>
   2015c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20160:	01000044 	movi	r4,1
   20164:	001fa9c0 	call	1fa9c <close>
  exit (result);
   20168:	e13fff17 	ldw	r4,-4(fp)
   2016c:	0024c480 	call	24c48 <exit>

00020170 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   20170:	defffe04 	addi	sp,sp,-8
   20174:	df000115 	stw	fp,4(sp)
   20178:	df000104 	addi	fp,sp,4
   2017c:	e13fff15 	stw	r4,-4(fp)
}
   20180:	0001883a 	nop
   20184:	e037883a 	mov	sp,fp
   20188:	df000017 	ldw	fp,0(sp)
   2018c:	dec00104 	addi	sp,sp,4
   20190:	f800283a 	ret

00020194 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   20194:	defffe04 	addi	sp,sp,-8
   20198:	df000115 	stw	fp,4(sp)
   2019c:	df000104 	addi	fp,sp,4
   201a0:	e13fff15 	stw	r4,-4(fp)
}
   201a4:	0001883a 	nop
   201a8:	e037883a 	mov	sp,fp
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00104 	addi	sp,sp,4
   201b4:	f800283a 	ret

000201b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   201b8:	defff204 	addi	sp,sp,-56
   201bc:	dfc00a15 	stw	ra,40(sp)
   201c0:	df000915 	stw	fp,36(sp)
   201c4:	df000904 	addi	fp,sp,36
   201c8:	e13ff715 	stw	r4,-36(fp)
   201cc:	e1400215 	stw	r5,8(fp)
   201d0:	e1800315 	stw	r6,12(fp)
   201d4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   201d8:	e0800204 	addi	r2,fp,8
   201dc:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   201e0:	e0bff717 	ldw	r2,-36(fp)
   201e4:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   201e8:	00006f06 	br	203a8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   201ec:	e0bffec7 	ldb	r2,-5(fp)
   201f0:	10800960 	cmpeqi	r2,r2,37
   201f4:	1000041e 	bne	r2,zero,20208 <alt_printf+0x50>
        {
            alt_putchar(c);
   201f8:	e0bffec7 	ldb	r2,-5(fp)
   201fc:	1009883a 	mov	r4,r2
   20200:	00203e40 	call	203e4 <alt_putchar>
   20204:	00006806 	br	203a8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   20208:	e0bfff17 	ldw	r2,-4(fp)
   2020c:	10c00044 	addi	r3,r2,1
   20210:	e0ffff15 	stw	r3,-4(fp)
   20214:	10800003 	ldbu	r2,0(r2)
   20218:	e0bffec5 	stb	r2,-5(fp)
   2021c:	e0bffec7 	ldb	r2,-5(fp)
   20220:	10006926 	beq	r2,zero,203c8 <alt_printf+0x210>
            {
                if (c == '%')
   20224:	e0bffec7 	ldb	r2,-5(fp)
   20228:	10800958 	cmpnei	r2,r2,37
   2022c:	1000041e 	bne	r2,zero,20240 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   20230:	e0bffec7 	ldb	r2,-5(fp)
   20234:	1009883a 	mov	r4,r2
   20238:	00203e40 	call	203e4 <alt_putchar>
   2023c:	00005a06 	br	203a8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   20240:	e0bffec7 	ldb	r2,-5(fp)
   20244:	108018d8 	cmpnei	r2,r2,99
   20248:	1000081e 	bne	r2,zero,2026c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2024c:	e0bff817 	ldw	r2,-32(fp)
   20250:	10c00104 	addi	r3,r2,4
   20254:	e0fff815 	stw	r3,-32(fp)
   20258:	10800017 	ldw	r2,0(r2)
   2025c:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   20260:	e13ff917 	ldw	r4,-28(fp)
   20264:	00203e40 	call	203e4 <alt_putchar>
   20268:	00004f06 	br	203a8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2026c:	e0bffec7 	ldb	r2,-5(fp)
   20270:	10801e18 	cmpnei	r2,r2,120
   20274:	1000341e 	bne	r2,zero,20348 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   20278:	e0bff817 	ldw	r2,-32(fp)
   2027c:	10c00104 	addi	r3,r2,4
   20280:	e0fff815 	stw	r3,-32(fp)
   20284:	10800017 	ldw	r2,0(r2)
   20288:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2028c:	e0bffb17 	ldw	r2,-20(fp)
   20290:	1000031e 	bne	r2,zero,202a0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   20294:	01000c04 	movi	r4,48
   20298:	00203e40 	call	203e4 <alt_putchar>
                        continue;
   2029c:	00004206 	br	203a8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   202a0:	00800704 	movi	r2,28
   202a4:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   202a8:	00000306 	br	202b8 <alt_printf+0x100>
                        digit_shift -= 4;
   202ac:	e0bffd17 	ldw	r2,-12(fp)
   202b0:	10bfff04 	addi	r2,r2,-4
   202b4:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   202b8:	00c003c4 	movi	r3,15
   202bc:	e0bffd17 	ldw	r2,-12(fp)
   202c0:	1884983a 	sll	r2,r3,r2
   202c4:	1007883a 	mov	r3,r2
   202c8:	e0bffb17 	ldw	r2,-20(fp)
   202cc:	1884703a 	and	r2,r3,r2
   202d0:	103ff626 	beq	r2,zero,202ac <__alt_mem_mcu_subsystem_ram_0+0x780002ac>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   202d4:	00001906 	br	2033c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   202d8:	00c003c4 	movi	r3,15
   202dc:	e0bffd17 	ldw	r2,-12(fp)
   202e0:	1884983a 	sll	r2,r3,r2
   202e4:	1007883a 	mov	r3,r2
   202e8:	e0bffb17 	ldw	r2,-20(fp)
   202ec:	1886703a 	and	r3,r3,r2
   202f0:	e0bffd17 	ldw	r2,-12(fp)
   202f4:	1884d83a 	srl	r2,r3,r2
   202f8:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   202fc:	e0bffa17 	ldw	r2,-24(fp)
   20300:	108002a8 	cmpgeui	r2,r2,10
   20304:	1000041e 	bne	r2,zero,20318 <alt_printf+0x160>
                            c = '0' + digit;
   20308:	e0bffa17 	ldw	r2,-24(fp)
   2030c:	10800c04 	addi	r2,r2,48
   20310:	e0bffec5 	stb	r2,-5(fp)
   20314:	00000306 	br	20324 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   20318:	e0bffa17 	ldw	r2,-24(fp)
   2031c:	108015c4 	addi	r2,r2,87
   20320:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   20324:	e0bffec7 	ldb	r2,-5(fp)
   20328:	1009883a 	mov	r4,r2
   2032c:	00203e40 	call	203e4 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   20330:	e0bffd17 	ldw	r2,-12(fp)
   20334:	10bfff04 	addi	r2,r2,-4
   20338:	e0bffd15 	stw	r2,-12(fp)
   2033c:	e0bffd17 	ldw	r2,-12(fp)
   20340:	103fe50e 	bge	r2,zero,202d8 <__alt_mem_mcu_subsystem_ram_0+0x780002d8>
   20344:	00001806 	br	203a8 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   20348:	e0bffec7 	ldb	r2,-5(fp)
   2034c:	10801cd8 	cmpnei	r2,r2,115
   20350:	1000151e 	bne	r2,zero,203a8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   20354:	e0bff817 	ldw	r2,-32(fp)
   20358:	10c00104 	addi	r3,r2,4
   2035c:	e0fff815 	stw	r3,-32(fp)
   20360:	10800017 	ldw	r2,0(r2)
   20364:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   20368:	00000906 	br	20390 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2036c:	e0bffc17 	ldw	r2,-16(fp)
   20370:	10c00044 	addi	r3,r2,1
   20374:	e0fffc15 	stw	r3,-16(fp)
   20378:	10800003 	ldbu	r2,0(r2)
   2037c:	10803fcc 	andi	r2,r2,255
   20380:	1080201c 	xori	r2,r2,128
   20384:	10bfe004 	addi	r2,r2,-128
   20388:	1009883a 	mov	r4,r2
   2038c:	00203e40 	call	203e4 <alt_putchar>
                    while(*s)
   20390:	e0bffc17 	ldw	r2,-16(fp)
   20394:	10800003 	ldbu	r2,0(r2)
   20398:	10803fcc 	andi	r2,r2,255
   2039c:	1080201c 	xori	r2,r2,128
   203a0:	10bfe004 	addi	r2,r2,-128
   203a4:	103ff11e 	bne	r2,zero,2036c <__alt_mem_mcu_subsystem_ram_0+0x7800036c>
    while ((c = *w++) != 0)
   203a8:	e0bfff17 	ldw	r2,-4(fp)
   203ac:	10c00044 	addi	r3,r2,1
   203b0:	e0ffff15 	stw	r3,-4(fp)
   203b4:	10800003 	ldbu	r2,0(r2)
   203b8:	e0bffec5 	stb	r2,-5(fp)
   203bc:	e0bffec7 	ldb	r2,-5(fp)
   203c0:	103f8a1e 	bne	r2,zero,201ec <__alt_mem_mcu_subsystem_ram_0+0x780001ec>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   203c4:	00000106 	br	203cc <alt_printf+0x214>
                break;
   203c8:	0001883a 	nop
}
   203cc:	0001883a 	nop
   203d0:	e037883a 	mov	sp,fp
   203d4:	dfc00117 	ldw	ra,4(sp)
   203d8:	df000017 	ldw	fp,0(sp)
   203dc:	dec00504 	addi	sp,sp,20
   203e0:	f800283a 	ret

000203e4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   203e4:	defffd04 	addi	sp,sp,-12
   203e8:	dfc00215 	stw	ra,8(sp)
   203ec:	df000115 	stw	fp,4(sp)
   203f0:	df000104 	addi	fp,sp,4
   203f4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   203f8:	e13fff17 	ldw	r4,-4(fp)
   203fc:	0010f040 	call	10f04 <putchar>
#endif
#endif
}
   20400:	e037883a 	mov	sp,fp
   20404:	dfc00117 	ldw	ra,4(sp)
   20408:	df000017 	ldw	fp,0(sp)
   2040c:	dec00204 	addi	sp,sp,8
   20410:	f800283a 	ret

00020414 <alt_get_errno>:
{
   20414:	defffe04 	addi	sp,sp,-8
   20418:	dfc00115 	stw	ra,4(sp)
   2041c:	df000015 	stw	fp,0(sp)
   20420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20424:	d0a00c17 	ldw	r2,-32720(gp)
   20428:	10000326 	beq	r2,zero,20438 <alt_get_errno+0x24>
   2042c:	d0a00c17 	ldw	r2,-32720(gp)
   20430:	103ee83a 	callr	r2
   20434:	00000106 	br	2043c <alt_get_errno+0x28>
   20438:	d0a77a04 	addi	r2,gp,-25112
}
   2043c:	e037883a 	mov	sp,fp
   20440:	dfc00117 	ldw	ra,4(sp)
   20444:	df000017 	ldw	fp,0(sp)
   20448:	dec00204 	addi	sp,sp,8
   2044c:	f800283a 	ret

00020450 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   20450:	defff904 	addi	sp,sp,-28
   20454:	dfc00615 	stw	ra,24(sp)
   20458:	df000515 	stw	fp,20(sp)
   2045c:	df000504 	addi	fp,sp,20
   20460:	e13ffd15 	stw	r4,-12(fp)
   20464:	e17ffc15 	stw	r5,-16(fp)
   20468:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2046c:	e0bffd17 	ldw	r2,-12(fp)
   20470:	10000616 	blt	r2,zero,2048c <read+0x3c>
   20474:	e0bffd17 	ldw	r2,-12(fp)
   20478:	10c00324 	muli	r3,r2,12
   2047c:	008000b4 	movhi	r2,2
   20480:	109ef304 	addi	r2,r2,31692
   20484:	1885883a 	add	r2,r3,r2
   20488:	00000106 	br	20490 <read+0x40>
   2048c:	0005883a 	mov	r2,zero
   20490:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   20494:	e0bfff17 	ldw	r2,-4(fp)
   20498:	10002226 	beq	r2,zero,20524 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2049c:	e0bfff17 	ldw	r2,-4(fp)
   204a0:	10800217 	ldw	r2,8(r2)
   204a4:	108000cc 	andi	r2,r2,3
   204a8:	10800060 	cmpeqi	r2,r2,1
   204ac:	1000181e 	bne	r2,zero,20510 <read+0xc0>
        (fd->dev->read))
   204b0:	e0bfff17 	ldw	r2,-4(fp)
   204b4:	10800017 	ldw	r2,0(r2)
   204b8:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   204bc:	10001426 	beq	r2,zero,20510 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   204c0:	e0bfff17 	ldw	r2,-4(fp)
   204c4:	10800017 	ldw	r2,0(r2)
   204c8:	10800517 	ldw	r2,20(r2)
   204cc:	e0fffb17 	ldw	r3,-20(fp)
   204d0:	180d883a 	mov	r6,r3
   204d4:	e17ffc17 	ldw	r5,-16(fp)
   204d8:	e13fff17 	ldw	r4,-4(fp)
   204dc:	103ee83a 	callr	r2
   204e0:	e0bffe15 	stw	r2,-8(fp)
   204e4:	e0bffe17 	ldw	r2,-8(fp)
   204e8:	1000070e 	bge	r2,zero,20508 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   204ec:	00204140 	call	20414 <alt_get_errno>
   204f0:	1007883a 	mov	r3,r2
   204f4:	e0bffe17 	ldw	r2,-8(fp)
   204f8:	0085c83a 	sub	r2,zero,r2
   204fc:	18800015 	stw	r2,0(r3)
          return -1;
   20500:	00bfffc4 	movi	r2,-1
   20504:	00000c06 	br	20538 <read+0xe8>
        }
        return rval;
   20508:	e0bffe17 	ldw	r2,-8(fp)
   2050c:	00000a06 	br	20538 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   20510:	00204140 	call	20414 <alt_get_errno>
   20514:	1007883a 	mov	r3,r2
   20518:	00800344 	movi	r2,13
   2051c:	18800015 	stw	r2,0(r3)
   20520:	00000406 	br	20534 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   20524:	00204140 	call	20414 <alt_get_errno>
   20528:	1007883a 	mov	r3,r2
   2052c:	00801444 	movi	r2,81
   20530:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20534:	00bfffc4 	movi	r2,-1
}
   20538:	e037883a 	mov	sp,fp
   2053c:	dfc00117 	ldw	ra,4(sp)
   20540:	df000017 	ldw	fp,0(sp)
   20544:	dec00204 	addi	sp,sp,8
   20548:	f800283a 	ret

0002054c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2054c:	defffe04 	addi	sp,sp,-8
   20550:	df000115 	stw	fp,4(sp)
   20554:	df000104 	addi	fp,sp,4
   20558:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2055c:	e0bfff17 	ldw	r2,-4(fp)
   20560:	108000d0 	cmplti	r2,r2,3
   20564:	10000a1e 	bne	r2,zero,20590 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   20568:	e0bfff17 	ldw	r2,-4(fp)
   2056c:	10c00324 	muli	r3,r2,12
   20570:	008000b4 	movhi	r2,2
   20574:	1885883a 	add	r2,r3,r2
   20578:	101ef515 	stw	zero,31700(r2)
    alt_fd_list[fd].dev      = 0;
   2057c:	e0bfff17 	ldw	r2,-4(fp)
   20580:	10c00324 	muli	r3,r2,12
   20584:	008000b4 	movhi	r2,2
   20588:	1885883a 	add	r2,r3,r2
   2058c:	101ef315 	stw	zero,31692(r2)
  }
}
   20590:	0001883a 	nop
   20594:	e037883a 	mov	sp,fp
   20598:	df000017 	ldw	fp,0(sp)
   2059c:	dec00104 	addi	sp,sp,4
   205a0:	f800283a 	ret

000205a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   205a4:	defff904 	addi	sp,sp,-28
   205a8:	df000615 	stw	fp,24(sp)
   205ac:	df000604 	addi	fp,sp,24
   205b0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   205b4:	0005303a 	rdctl	r2,status
   205b8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   205bc:	e0fffd17 	ldw	r3,-12(fp)
   205c0:	00bfff84 	movi	r2,-2
   205c4:	1884703a 	and	r2,r3,r2
   205c8:	1001703a 	wrctl	status,r2
  return context;
   205cc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   205d0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   205d4:	d0a00d17 	ldw	r2,-32716(gp)
   205d8:	10c000c4 	addi	r3,r2,3
   205dc:	00bfff04 	movi	r2,-4
   205e0:	1884703a 	and	r2,r3,r2
   205e4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   205e8:	d0e00d17 	ldw	r3,-32716(gp)
   205ec:	e0bffa17 	ldw	r2,-24(fp)
   205f0:	1887883a 	add	r3,r3,r2
   205f4:	00a00034 	movhi	r2,32768
   205f8:	10800004 	addi	r2,r2,0
   205fc:	10c0062e 	bgeu	r2,r3,20618 <sbrk+0x74>
   20600:	e0bfff17 	ldw	r2,-4(fp)
   20604:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   20608:	e0bffc17 	ldw	r2,-16(fp)
   2060c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   20610:	00bfffc4 	movi	r2,-1
   20614:	00000b06 	br	20644 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   20618:	d0a00d17 	ldw	r2,-32716(gp)
   2061c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   20620:	d0e00d17 	ldw	r3,-32716(gp)
   20624:	e0bffa17 	ldw	r2,-24(fp)
   20628:	1885883a 	add	r2,r3,r2
   2062c:	d0a00d15 	stw	r2,-32716(gp)
   20630:	e0bfff17 	ldw	r2,-4(fp)
   20634:	e0bffb15 	stw	r2,-20(fp)
   20638:	e0bffb17 	ldw	r2,-20(fp)
   2063c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   20640:	e0bffe17 	ldw	r2,-8(fp)
} 
   20644:	e037883a 	mov	sp,fp
   20648:	df000017 	ldw	fp,0(sp)
   2064c:	dec00104 	addi	sp,sp,4
   20650:	f800283a 	ret

00020654 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   20654:	defffd04 	addi	sp,sp,-12
   20658:	dfc00215 	stw	ra,8(sp)
   2065c:	df000115 	stw	fp,4(sp)
   20660:	df000104 	addi	fp,sp,4
   20664:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   20668:	e13fff17 	ldw	r4,-4(fp)
   2066c:	0023c740 	call	23c74 <alt_busy_sleep>
}
   20670:	e037883a 	mov	sp,fp
   20674:	dfc00117 	ldw	ra,4(sp)
   20678:	df000017 	ldw	fp,0(sp)
   2067c:	dec00204 	addi	sp,sp,8
   20680:	f800283a 	ret

00020684 <alt_get_errno>:
{
   20684:	defffe04 	addi	sp,sp,-8
   20688:	dfc00115 	stw	ra,4(sp)
   2068c:	df000015 	stw	fp,0(sp)
   20690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20694:	d0a00c17 	ldw	r2,-32720(gp)
   20698:	10000326 	beq	r2,zero,206a8 <alt_get_errno+0x24>
   2069c:	d0a00c17 	ldw	r2,-32720(gp)
   206a0:	103ee83a 	callr	r2
   206a4:	00000106 	br	206ac <alt_get_errno+0x28>
   206a8:	d0a77a04 	addi	r2,gp,-25112
}
   206ac:	e037883a 	mov	sp,fp
   206b0:	dfc00117 	ldw	ra,4(sp)
   206b4:	df000017 	ldw	fp,0(sp)
   206b8:	dec00204 	addi	sp,sp,8
   206bc:	f800283a 	ret

000206c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   206c0:	defff904 	addi	sp,sp,-28
   206c4:	dfc00615 	stw	ra,24(sp)
   206c8:	df000515 	stw	fp,20(sp)
   206cc:	df000504 	addi	fp,sp,20
   206d0:	e13ffd15 	stw	r4,-12(fp)
   206d4:	e17ffc15 	stw	r5,-16(fp)
   206d8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   206dc:	e0bffd17 	ldw	r2,-12(fp)
   206e0:	10000616 	blt	r2,zero,206fc <write+0x3c>
   206e4:	e0bffd17 	ldw	r2,-12(fp)
   206e8:	10c00324 	muli	r3,r2,12
   206ec:	008000b4 	movhi	r2,2
   206f0:	109ef304 	addi	r2,r2,31692
   206f4:	1885883a 	add	r2,r3,r2
   206f8:	00000106 	br	20700 <write+0x40>
   206fc:	0005883a 	mov	r2,zero
   20700:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   20704:	e0bfff17 	ldw	r2,-4(fp)
   20708:	10002126 	beq	r2,zero,20790 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2070c:	e0bfff17 	ldw	r2,-4(fp)
   20710:	10800217 	ldw	r2,8(r2)
   20714:	108000cc 	andi	r2,r2,3
   20718:	10001826 	beq	r2,zero,2077c <write+0xbc>
   2071c:	e0bfff17 	ldw	r2,-4(fp)
   20720:	10800017 	ldw	r2,0(r2)
   20724:	10800617 	ldw	r2,24(r2)
   20728:	10001426 	beq	r2,zero,2077c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2072c:	e0bfff17 	ldw	r2,-4(fp)
   20730:	10800017 	ldw	r2,0(r2)
   20734:	10800617 	ldw	r2,24(r2)
   20738:	e0fffb17 	ldw	r3,-20(fp)
   2073c:	180d883a 	mov	r6,r3
   20740:	e17ffc17 	ldw	r5,-16(fp)
   20744:	e13fff17 	ldw	r4,-4(fp)
   20748:	103ee83a 	callr	r2
   2074c:	e0bffe15 	stw	r2,-8(fp)
   20750:	e0bffe17 	ldw	r2,-8(fp)
   20754:	1000070e 	bge	r2,zero,20774 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   20758:	00206840 	call	20684 <alt_get_errno>
   2075c:	1007883a 	mov	r3,r2
   20760:	e0bffe17 	ldw	r2,-8(fp)
   20764:	0085c83a 	sub	r2,zero,r2
   20768:	18800015 	stw	r2,0(r3)
        return -1;
   2076c:	00bfffc4 	movi	r2,-1
   20770:	00000c06 	br	207a4 <write+0xe4>
      }
      return rval;
   20774:	e0bffe17 	ldw	r2,-8(fp)
   20778:	00000a06 	br	207a4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2077c:	00206840 	call	20684 <alt_get_errno>
   20780:	1007883a 	mov	r3,r2
   20784:	00800344 	movi	r2,13
   20788:	18800015 	stw	r2,0(r3)
   2078c:	00000406 	br	207a0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20790:	00206840 	call	20684 <alt_get_errno>
   20794:	1007883a 	mov	r3,r2
   20798:	00801444 	movi	r2,81
   2079c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   207a0:	00bfffc4 	movi	r2,-1
}
   207a4:	e037883a 	mov	sp,fp
   207a8:	dfc00117 	ldw	ra,4(sp)
   207ac:	df000017 	ldw	fp,0(sp)
   207b0:	dec00204 	addi	sp,sp,8
   207b4:	f800283a 	ret

000207b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   207b8:	defffd04 	addi	sp,sp,-12
   207bc:	dfc00215 	stw	ra,8(sp)
   207c0:	df000115 	stw	fp,4(sp)
   207c4:	df000104 	addi	fp,sp,4
   207c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MCU_SUBSYSTEM_CPU_0, mcu_subsystem_cpu_0);
   207cc:	00249540 	call	24954 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   207d0:	00800044 	movi	r2,1
   207d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   207d8:	0001883a 	nop
   207dc:	e037883a 	mov	sp,fp
   207e0:	dfc00117 	ldw	ra,4(sp)
   207e4:	df000017 	ldw	fp,0(sp)
   207e8:	dec00204 	addi	sp,sp,8
   207ec:	f800283a 	ret

000207f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   207f0:	defffe04 	addi	sp,sp,-8
   207f4:	dfc00115 	stw	ra,4(sp)
   207f8:	df000015 	stw	fp,0(sp)
   207fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20800:	01c0fa04 	movi	r7,1000
   20804:	01800084 	movi	r6,2
   20808:	000b883a 	mov	r5,zero
   2080c:	01220234 	movhi	r4,34824
   20810:	212e3004 	addi	r4,r4,-18240
   20814:	0022f480 	call	22f48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_I2C_INIT ( I2C, i2c);
   20818:	010000b4 	movhi	r4,2
   2081c:	211f5304 	addi	r4,r4,32076
   20820:	0020abc0 	call	20abc <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20824:	01800044 	movi	r6,1
   20828:	000b883a 	mov	r5,zero
   2082c:	010000b4 	movhi	r4,2
   20830:	211f6b04 	addi	r4,r4,32172
   20834:	00225c00 	call	225c0 <altera_avalon_jtag_uart_init>
   20838:	010000b4 	movhi	r4,2
   2083c:	211f6104 	addi	r4,r4,32132
   20840:	001fb980 	call	1fb98 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
   20844:	0001883a 	nop
    ALTERA_GENERIC_QUAD_SPI_CONTROLLER2_INIT ( QSPI_CONTROLLER2_0, qspi_controller2_0);
   20848:	010000f4 	movhi	r4,3
   2084c:	21237904 	addi	r4,r4,-29212
   20850:	00237ac0 	call	237ac <altera_qspi_controller2_init>
}
   20854:	0001883a 	nop
   20858:	e037883a 	mov	sp,fp
   2085c:	dfc00117 	ldw	ra,4(sp)
   20860:	df000017 	ldw	fp,0(sp)
   20864:	dec00204 	addi	sp,sp,8
   20868:	f800283a 	ret

0002086c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   2086c:	defff904 	addi	sp,sp,-28
   20870:	dfc00615 	stw	ra,24(sp)
   20874:	df000515 	stw	fp,20(sp)
   20878:	df000504 	addi	fp,sp,20
   2087c:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
   20880:	008000b4 	movhi	r2,2
   20884:	10a1a804 	addi	r2,r2,-31072
   20888:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   2088c:	e0bffb17 	ldw	r2,-20(fp)
   20890:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   20894:	e0bffe17 	ldw	r2,-8(fp)
   20898:	10800717 	ldw	r2,28(r2)
   2089c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   208a0:	e0bffd17 	ldw	r2,-12(fp)
   208a4:	10800217 	ldw	r2,8(r2)
   208a8:	10800098 	cmpnei	r2,r2,2
   208ac:	1000251e 	bne	r2,zero,20944 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   208b0:	e0bffd17 	ldw	r2,-12(fp)
   208b4:	10c00017 	ldw	r3,0(r2)
   208b8:	e0bffd17 	ldw	r2,-12(fp)
   208bc:	10800117 	ldw	r2,4(r2)
   208c0:	e13ffc04 	addi	r4,fp,-16
   208c4:	200f883a 	mov	r7,r4
   208c8:	100d883a 	mov	r6,r2
   208cc:	180b883a 	mov	r5,r3
   208d0:	e13ffe17 	ldw	r4,-8(fp)
   208d4:	0020ffc0 	call	20ffc <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   208d8:	e0bffd17 	ldw	r2,-12(fp)
   208dc:	10c00117 	ldw	r3,4(r2)
   208e0:	e0bffc17 	ldw	r2,-16(fp)
   208e4:	1887c83a 	sub	r3,r3,r2
   208e8:	e0bffd17 	ldw	r2,-12(fp)
   208ec:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   208f0:	e0bffd17 	ldw	r2,-12(fp)
   208f4:	10c00017 	ldw	r3,0(r2)
   208f8:	e0bffc17 	ldw	r2,-16(fp)
   208fc:	1887883a 	add	r3,r3,r2
   20900:	e0bffd17 	ldw	r2,-12(fp)
   20904:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   20908:	e0bffd17 	ldw	r2,-12(fp)
   2090c:	10800117 	ldw	r2,4(r2)
   20910:	10000c26 	beq	r2,zero,20944 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20914:	01400704 	movi	r5,28
   20918:	e13ffe17 	ldw	r4,-8(fp)
   2091c:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   20920:	01400084 	movi	r5,2
   20924:	e13ffe17 	ldw	r4,-8(fp)
   20928:	00222500 	call	22250 <alt_avalon_i2c_int_enable>
   2092c:	00000e06 	br	20968 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   20930:	e0bfff17 	ldw	r2,-4(fp)
   20934:	10bfffc4 	addi	r2,r2,-1
   20938:	e0bfff15 	stw	r2,-4(fp)
   2093c:	e0bfff17 	ldw	r2,-4(fp)
   20940:	10000426 	beq	r2,zero,20954 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   20944:	e13ffe17 	ldw	r4,-8(fp)
   20948:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   2094c:	103ff81e 	bne	r2,zero,20930 <__alt_mem_mcu_subsystem_ram_0+0x78000930>
   20950:	00000106 	br	20958 <optional_irq_callback+0xec>
      {
         break;
   20954:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   20958:	e13ffe17 	ldw	r4,-8(fp)
   2095c:	0020c800 	call	20c80 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   20960:	e0bffd17 	ldw	r2,-12(fp)
   20964:	10000215 	stw	zero,8(r2)
}
   20968:	e037883a 	mov	sp,fp
   2096c:	dfc00117 	ldw	ra,4(sp)
   20970:	df000017 	ldw	fp,0(sp)
   20974:	dec00204 	addi	sp,sp,8
   20978:	f800283a 	ret

0002097c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   2097c:	defffc04 	addi	sp,sp,-16
   20980:	dfc00315 	stw	ra,12(sp)
   20984:	df000215 	stw	fp,8(sp)
   20988:	df000204 	addi	fp,sp,8
   2098c:	e13fff15 	stw	r4,-4(fp)
   20990:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
   20994:	e0bffe17 	ldw	r2,-8(fp)
   20998:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   2099c:	e1fffe17 	ldw	r7,-8(fp)
   209a0:	000d883a 	mov	r6,zero
   209a4:	014000b4 	movhi	r5,2
   209a8:	29421b04 	addi	r5,r5,2156
   209ac:	e13fff17 	ldw	r4,-4(fp)
   209b0:	0020a680 	call	20a68 <alt_avalon_i2c_register_callback>
}
   209b4:	0001883a 	nop
   209b8:	e037883a 	mov	sp,fp
   209bc:	dfc00117 	ldw	ra,4(sp)
   209c0:	df000017 	ldw	fp,0(sp)
   209c4:	dec00204 	addi	sp,sp,8
   209c8:	f800283a 	ret

000209cc <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   209cc:	defff904 	addi	sp,sp,-28
   209d0:	dfc00615 	stw	ra,24(sp)
   209d4:	df000515 	stw	fp,20(sp)
   209d8:	df000504 	addi	fp,sp,20
   209dc:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   209e0:	e0bffb17 	ldw	r2,-20(fp)
   209e4:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   209e8:	014007c4 	movi	r5,31
   209ec:	e13fff17 	ldw	r4,-4(fp)
   209f0:	00221e40 	call	221e4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   209f4:	01400704 	movi	r5,28
   209f8:	e13fff17 	ldw	r4,-4(fp)
   209fc:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   20a00:	e0bfff17 	ldw	r2,-4(fp)
   20a04:	10800617 	ldw	r2,24(r2)
   20a08:	10001126 	beq	r2,zero,20a50 <alt_avalon_i2c_irq+0x84>
  NIOS2_READ_STATUS (context);
   20a0c:	0005303a 	rdctl	r2,status
   20a10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20a14:	e0fffc17 	ldw	r3,-16(fp)
   20a18:	00bfff84 	movi	r2,-2
   20a1c:	1884703a 	and	r2,r3,r2
   20a20:	1001703a 	wrctl	status,r2
  return context;
   20a24:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
   20a28:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
   20a2c:	e0bfff17 	ldw	r2,-4(fp)
   20a30:	10800617 	ldw	r2,24(r2)
   20a34:	e13fff17 	ldw	r4,-4(fp)
   20a38:	103ee83a 	callr	r2
   20a3c:	e0bffe17 	ldw	r2,-8(fp)
   20a40:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   20a44:	e0bffd17 	ldw	r2,-12(fp)
   20a48:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   20a4c:	0001883a 	nop
   20a50:	0001883a 	nop
}
   20a54:	e037883a 	mov	sp,fp
   20a58:	dfc00117 	ldw	ra,4(sp)
   20a5c:	df000017 	ldw	fp,0(sp)
   20a60:	dec00204 	addi	sp,sp,8
   20a64:	f800283a 	ret

00020a68 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   20a68:	defffb04 	addi	sp,sp,-20
   20a6c:	df000415 	stw	fp,16(sp)
   20a70:	df000404 	addi	fp,sp,16
   20a74:	e13fff15 	stw	r4,-4(fp)
   20a78:	e17ffe15 	stw	r5,-8(fp)
   20a7c:	e1bffd15 	stw	r6,-12(fp)
   20a80:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
   20a84:	e0bfff17 	ldw	r2,-4(fp)
   20a88:	e0fffe17 	ldw	r3,-8(fp)
   20a8c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   20a90:	e0bfff17 	ldw	r2,-4(fp)
   20a94:	e0fffc17 	ldw	r3,-16(fp)
   20a98:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   20a9c:	e0bfff17 	ldw	r2,-4(fp)
   20aa0:	e0fffd17 	ldw	r3,-12(fp)
   20aa4:	10c00815 	stw	r3,32(r2)

    return ;
   20aa8:	0001883a 	nop
}
   20aac:	e037883a 	mov	sp,fp
   20ab0:	df000017 	ldw	fp,0(sp)
   20ab4:	dec00104 	addi	sp,sp,4
   20ab8:	f800283a 	ret

00020abc <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   20abc:	defff704 	addi	sp,sp,-36
   20ac0:	dfc00815 	stw	ra,32(sp)
   20ac4:	df000715 	stw	fp,28(sp)
   20ac8:	df000704 	addi	fp,sp,28
   20acc:	e13ffa15 	stw	r4,-24(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   20ad0:	e13ffa17 	ldw	r4,-24(fp)
   20ad4:	0020c800 	call	20c80 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   20ad8:	014007c4 	movi	r5,31
   20adc:	e13ffa17 	ldw	r4,-24(fp)
   20ae0:	00221e40 	call	221e4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   20ae4:	01400704 	movi	r5,28
   20ae8:	e13ffa17 	ldw	r4,-24(fp)
   20aec:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   20af0:	014000c4 	movi	r5,3
   20af4:	e13ffa17 	ldw	r4,-24(fp)
   20af8:	00223f80 	call	223f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   20afc:	014000c4 	movi	r5,3
   20b00:	e13ffa17 	ldw	r4,-24(fp)
   20b04:	00223480 	call	22348 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   20b08:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   20b0c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   20b10:	e0bffb04 	addi	r2,fp,-20
   20b14:	018000b4 	movhi	r6,2
   20b18:	31a1a804 	addi	r6,r6,-31072
   20b1c:	100b883a 	mov	r5,r2
   20b20:	e13ffa17 	ldw	r4,-24(fp)
   20b24:	0020ecc0 	call	20ecc <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   20b28:	e0bffb04 	addi	r2,fp,-20
   20b2c:	100b883a 	mov	r5,r2
   20b30:	e13ffa17 	ldw	r4,-24(fp)
   20b34:	0020d7c0 	call	20d7c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   20b38:	d1600e04 	addi	r5,gp,-32712
   20b3c:	e13ffa17 	ldw	r4,-24(fp)
   20b40:	001fc080 	call	1fc08 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   20b44:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   20b48:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
   20b4c:	e0bfff17 	ldw	r2,-4(fp)
   20b50:	10000c1e 	bne	r2,zero,20b84 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   20b54:	e0bffa17 	ldw	r2,-24(fp)
   20b58:	10c00417 	ldw	r3,16(r2)
   20b5c:	e0bffa17 	ldw	r2,-24(fp)
   20b60:	10800517 	ldw	r2,20(r2)
   20b64:	d8000015 	stw	zero,0(sp)
   20b68:	e1fffa17 	ldw	r7,-24(fp)
   20b6c:	018000b4 	movhi	r6,2
   20b70:	31827304 	addi	r6,r6,2508
   20b74:	100b883a 	mov	r5,r2
   20b78:	1809883a 	mov	r4,r3
   20b7c:	00241840 	call	24184 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   20b80:	00000406 	br	20b94 <alt_avalon_i2c_init+0xd8>
        alt_printf("failed to create semaphores\n");
   20b84:	010000b4 	movhi	r4,2
   20b88:	211c5f04 	addi	r4,r4,29052
   20b8c:	00201b80 	call	201b8 <alt_printf>
    return;
   20b90:	0001883a 	nop

}
   20b94:	e037883a 	mov	sp,fp
   20b98:	dfc00117 	ldw	ra,4(sp)
   20b9c:	df000017 	ldw	fp,0(sp)
   20ba0:	dec00204 	addi	sp,sp,8
   20ba4:	f800283a 	ret

00020ba8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   20ba8:	defffc04 	addi	sp,sp,-16
   20bac:	dfc00315 	stw	ra,12(sp)
   20bb0:	df000215 	stw	fp,8(sp)
   20bb4:	df000204 	addi	fp,sp,8
   20bb8:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   20bbc:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   20bc0:	d1600e04 	addi	r5,gp,-32712
   20bc4:	e13ffe17 	ldw	r4,-8(fp)
   20bc8:	0023ea40 	call	23ea4 <alt_find_dev>
   20bcc:	e0bfff15 	stw	r2,-4(fp)

    return dev;
   20bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   20bd4:	e037883a 	mov	sp,fp
   20bd8:	dfc00117 	ldw	ra,4(sp)
   20bdc:	df000017 	ldw	fp,0(sp)
   20be0:	dec00204 	addi	sp,sp,8
   20be4:	f800283a 	ret

00020be8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20be8:	defffc04 	addi	sp,sp,-16
   20bec:	df000315 	stw	fp,12(sp)
   20bf0:	df000304 	addi	fp,sp,12
   20bf4:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   20bf8:	e0bffd17 	ldw	r2,-12(fp)
   20bfc:	10800717 	ldw	r2,28(r2)
   20c00:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   20c04:	e0bffd17 	ldw	r2,-12(fp)
   20c08:	10800317 	ldw	r2,12(r2)
   20c0c:	10800204 	addi	r2,r2,8
   20c10:	10800037 	ldwio	r2,0(r2)
   20c14:	1080004c 	andi	r2,r2,1
   20c18:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   20c1c:	e0bffe17 	ldw	r2,-8(fp)
   20c20:	10000226 	beq	r2,zero,20c2c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   20c24:	00bffe44 	movi	r2,-7
   20c28:	00001106 	br	20c70 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	10c00617 	ldw	r3,24(r2)
   20c34:	008000b4 	movhi	r2,2
   20c38:	10821b04 	addi	r2,r2,2156
   20c3c:	1880021e 	bne	r3,r2,20c48 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   20c40:	e0bfff17 	ldw	r2,-4(fp)
   20c44:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   20c48:	e0bffd17 	ldw	r2,-12(fp)
   20c4c:	10800317 	ldw	r2,12(r2)
   20c50:	10800204 	addi	r2,r2,8
   20c54:	e0fffd17 	ldw	r3,-12(fp)
   20c58:	18c00317 	ldw	r3,12(r3)
   20c5c:	18c00204 	addi	r3,r3,8
   20c60:	18c00037 	ldwio	r3,0(r3)
   20c64:	18c00054 	ori	r3,r3,1
   20c68:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20c6c:	0005883a 	mov	r2,zero
}
   20c70:	e037883a 	mov	sp,fp
   20c74:	df000017 	ldw	fp,0(sp)
   20c78:	dec00104 	addi	sp,sp,4
   20c7c:	f800283a 	ret

00020c80 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20c80:	defffe04 	addi	sp,sp,-8
   20c84:	df000115 	stw	fp,4(sp)
   20c88:	df000104 	addi	fp,sp,4
   20c8c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   20c90:	e0bfff17 	ldw	r2,-4(fp)
   20c94:	10800317 	ldw	r2,12(r2)
   20c98:	10800204 	addi	r2,r2,8
   20c9c:	e0ffff17 	ldw	r3,-4(fp)
   20ca0:	18c00317 	ldw	r3,12(r3)
   20ca4:	18c00204 	addi	r3,r3,8
   20ca8:	19000037 	ldwio	r4,0(r3)
   20cac:	00ffff84 	movi	r3,-2
   20cb0:	20c6703a 	and	r3,r4,r3
   20cb4:	10c00035 	stwio	r3,0(r2)

}
   20cb8:	0001883a 	nop
   20cbc:	e037883a 	mov	sp,fp
   20cc0:	df000017 	ldw	fp,0(sp)
   20cc4:	dec00104 	addi	sp,sp,4
   20cc8:	f800283a 	ret

00020ccc <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20ccc:	defffd04 	addi	sp,sp,-12
   20cd0:	df000215 	stw	fp,8(sp)
   20cd4:	df000204 	addi	fp,sp,8
   20cd8:	e13fff15 	stw	r4,-4(fp)
   20cdc:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   20ce0:	e0bfff17 	ldw	r2,-4(fp)
   20ce4:	10c00d17 	ldw	r3,52(r2)
   20ce8:	e0bffe17 	ldw	r2,-8(fp)
   20cec:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   20cf0:	e0bfff17 	ldw	r2,-4(fp)
   20cf4:	10800317 	ldw	r2,12(r2)
   20cf8:	10800204 	addi	r2,r2,8
   20cfc:	10800037 	ldwio	r2,0(r2)
   20d00:	1005d07a 	srai	r2,r2,1
   20d04:	1080004c 	andi	r2,r2,1
   20d08:	1007883a 	mov	r3,r2
   20d0c:	e0bffe17 	ldw	r2,-8(fp)
   20d10:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   20d14:	e0bfff17 	ldw	r2,-4(fp)
   20d18:	10800317 	ldw	r2,12(r2)
   20d1c:	10800904 	addi	r2,r2,36
   20d20:	10800037 	ldwio	r2,0(r2)
   20d24:	1007883a 	mov	r3,r2
   20d28:	e0bffe17 	ldw	r2,-8(fp)
   20d2c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   20d30:	e0bfff17 	ldw	r2,-4(fp)
   20d34:	10800317 	ldw	r2,12(r2)
   20d38:	10800804 	addi	r2,r2,32
   20d3c:	10800037 	ldwio	r2,0(r2)
   20d40:	1007883a 	mov	r3,r2
   20d44:	e0bffe17 	ldw	r2,-8(fp)
   20d48:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   20d4c:	e0bfff17 	ldw	r2,-4(fp)
   20d50:	10800317 	ldw	r2,12(r2)
   20d54:	10800a04 	addi	r2,r2,40
   20d58:	10800037 	ldwio	r2,0(r2)
   20d5c:	1007883a 	mov	r3,r2
   20d60:	e0bffe17 	ldw	r2,-8(fp)
   20d64:	10c0030d 	sth	r3,12(r2)
}
   20d68:	0001883a 	nop
   20d6c:	e037883a 	mov	sp,fp
   20d70:	df000017 	ldw	fp,0(sp)
   20d74:	dec00104 	addi	sp,sp,4
   20d78:	f800283a 	ret

00020d7c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   20d7c:	defffd04 	addi	sp,sp,-12
   20d80:	df000215 	stw	fp,8(sp)
   20d84:	df000204 	addi	fp,sp,8
   20d88:	e13fff15 	stw	r4,-4(fp)
   20d8c:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   20d90:	e0bffe17 	ldw	r2,-8(fp)
   20d94:	10c00017 	ldw	r3,0(r2)
   20d98:	e0bfff17 	ldw	r2,-4(fp)
   20d9c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   20da0:	e0bfff17 	ldw	r2,-4(fp)
   20da4:	10800317 	ldw	r2,12(r2)
   20da8:	10c00204 	addi	r3,r2,8
   20dac:	e0bfff17 	ldw	r2,-4(fp)
   20db0:	10800317 	ldw	r2,12(r2)
   20db4:	10800204 	addi	r2,r2,8
   20db8:	10800037 	ldwio	r2,0(r2)
   20dbc:	1009883a 	mov	r4,r2
   20dc0:	00bfff44 	movi	r2,-3
   20dc4:	2088703a 	and	r4,r4,r2
   20dc8:	e0bffe17 	ldw	r2,-8(fp)
   20dcc:	10800117 	ldw	r2,4(r2)
   20dd0:	1085883a 	add	r2,r2,r2
   20dd4:	1080008c 	andi	r2,r2,2
   20dd8:	2084b03a 	or	r2,r4,r2
   20ddc:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   20de0:	e0bfff17 	ldw	r2,-4(fp)
   20de4:	10800317 	ldw	r2,12(r2)
   20de8:	10800904 	addi	r2,r2,36
   20dec:	e0fffe17 	ldw	r3,-8(fp)
   20df0:	18c0020b 	ldhu	r3,8(r3)
   20df4:	18ffffcc 	andi	r3,r3,65535
   20df8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   20dfc:	e0bfff17 	ldw	r2,-4(fp)
   20e00:	10800317 	ldw	r2,12(r2)
   20e04:	10800804 	addi	r2,r2,32
   20e08:	e0fffe17 	ldw	r3,-8(fp)
   20e0c:	18c0028b 	ldhu	r3,10(r3)
   20e10:	18ffffcc 	andi	r3,r3,65535
   20e14:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   20e18:	e0bfff17 	ldw	r2,-4(fp)
   20e1c:	10800317 	ldw	r2,12(r2)
   20e20:	10800a04 	addi	r2,r2,40
   20e24:	e0fffe17 	ldw	r3,-8(fp)
   20e28:	18c0030b 	ldhu	r3,12(r3)
   20e2c:	18ffffcc 	andi	r3,r3,65535
   20e30:	10c00035 	stwio	r3,0(r2)
}
   20e34:	0001883a 	nop
   20e38:	e037883a 	mov	sp,fp
   20e3c:	df000017 	ldw	fp,0(sp)
   20e40:	dec00104 	addi	sp,sp,4
   20e44:	f800283a 	ret

00020e48 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   20e48:	defffc04 	addi	sp,sp,-16
   20e4c:	df000315 	stw	fp,12(sp)
   20e50:	df000304 	addi	fp,sp,12
   20e54:	e13fff15 	stw	r4,-4(fp)
   20e58:	e17ffe15 	stw	r5,-8(fp)
   20e5c:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   20e60:	e0bffe17 	ldw	r2,-8(fp)
   20e64:	1080028b 	ldhu	r2,10(r2)
   20e68:	10bfffcc 	andi	r2,r2,65535
   20e6c:	10000426 	beq	r2,zero,20e80 <alt_avalon_i2c_master_config_speed_get+0x38>
   20e70:	e0bffe17 	ldw	r2,-8(fp)
   20e74:	1080020b 	ldhu	r2,8(r2)
   20e78:	10bfffcc 	andi	r2,r2,65535
   20e7c:	1000021e 	bne	r2,zero,20e88 <alt_avalon_i2c_master_config_speed_get+0x40>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   20e80:	00bfff44 	movi	r2,-3
   20e84:	00000d06 	br	20ebc <alt_avalon_i2c_master_config_speed_get+0x74>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   20e88:	e0bfff17 	ldw	r2,-4(fp)
   20e8c:	10800c17 	ldw	r2,48(r2)
   20e90:	e0fffe17 	ldw	r3,-8(fp)
   20e94:	18c0028b 	ldhu	r3,10(r3)
   20e98:	193fffcc 	andi	r4,r3,65535
   20e9c:	e0fffe17 	ldw	r3,-8(fp)
   20ea0:	18c0020b 	ldhu	r3,8(r3)
   20ea4:	18ffffcc 	andi	r3,r3,65535
   20ea8:	20c7883a 	add	r3,r4,r3
   20eac:	10c7203a 	divu	r3,r2,r3
   20eb0:	e0bffd17 	ldw	r2,-12(fp)
   20eb4:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   20eb8:	0005883a 	mov	r2,zero
}
   20ebc:	e037883a 	mov	sp,fp
   20ec0:	df000017 	ldw	fp,0(sp)
   20ec4:	dec00104 	addi	sp,sp,4
   20ec8:	f800283a 	ret

00020ecc <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   20ecc:	defffa04 	addi	sp,sp,-24
   20ed0:	df000515 	stw	fp,20(sp)
   20ed4:	df000504 	addi	fp,sp,20
   20ed8:	e13ffd15 	stw	r4,-12(fp)
   20edc:	e17ffc15 	stw	r5,-16(fp)
   20ee0:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   20ee4:	e0fffb17 	ldw	r3,-20(fp)
   20ee8:	008001b4 	movhi	r2,6
   20eec:	1086a004 	addi	r2,r2,6784
   20ef0:	10c00436 	bltu	r2,r3,20f04 <alt_avalon_i2c_master_config_speed_set+0x38>
   20ef4:	e0bffb17 	ldw	r2,-20(fp)
   20ef8:	10000226 	beq	r2,zero,20f04 <alt_avalon_i2c_master_config_speed_set+0x38>
   20efc:	e0bffb17 	ldw	r2,-20(fp)
   20f00:	1000021e 	bne	r2,zero,20f0c <alt_avalon_i2c_master_config_speed_set+0x40>
    {
        return ALT_AVALON_I2C_RANGE;
   20f04:	00bfff04 	movi	r2,-4
   20f08:	00002706 	br	20fa8 <alt_avalon_i2c_master_config_speed_set+0xdc>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   20f0c:	e0bffd17 	ldw	r2,-12(fp)
   20f10:	10c00c17 	ldw	r3,48(r2)
   20f14:	e0bffb17 	ldw	r2,-20(fp)
   20f18:	1085883a 	add	r2,r2,r2
   20f1c:	1885203a 	divu	r2,r3,r2
   20f20:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   20f24:	e0bfff17 	ldw	r2,-4(fp)
   20f28:	10800f04 	addi	r2,r2,60
   20f2c:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   20f30:	e0bfff17 	ldw	r2,-4(fp)
   20f34:	10bff104 	addi	r2,r2,-60
   20f38:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   20f3c:	e0fffb17 	ldw	r3,-20(fp)
   20f40:	008000b4 	movhi	r2,2
   20f44:	10a1a804 	addi	r2,r2,-31072
   20f48:	10c0042e 	bgeu	r2,r3,20f5c <alt_avalon_i2c_master_config_speed_set+0x90>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   20f4c:	e0bffc17 	ldw	r2,-16(fp)
   20f50:	00c00044 	movi	r3,1
   20f54:	10c00115 	stw	r3,4(r2)
   20f58:	00000206 	br	20f64 <alt_avalon_i2c_master_config_speed_set+0x98>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   20f5c:	e0bffc17 	ldw	r2,-16(fp)
   20f60:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   20f64:	e0bfff17 	ldw	r2,-4(fp)
   20f68:	1007883a 	mov	r3,r2
   20f6c:	e0bffc17 	ldw	r2,-16(fp)
   20f70:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   20f74:	e0bffe17 	ldw	r2,-8(fp)
   20f78:	1007883a 	mov	r3,r2
   20f7c:	e0bffc17 	ldw	r2,-16(fp)
   20f80:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   20f84:	e0bfff17 	ldw	r2,-4(fp)
   20f88:	1007883a 	mov	r3,r2
   20f8c:	e0bfff17 	ldw	r2,-4(fp)
   20f90:	1004d07a 	srli	r2,r2,1
   20f94:	1885c83a 	sub	r2,r3,r2
   20f98:	1007883a 	mov	r3,r2
   20f9c:	e0bffc17 	ldw	r2,-16(fp)
   20fa0:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   20fa4:	0005883a 	mov	r2,zero

}
   20fa8:	e037883a 	mov	sp,fp
   20fac:	df000017 	ldw	fp,0(sp)
   20fb0:	dec00104 	addi	sp,sp,4
   20fb4:	f800283a 	ret

00020fb8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   20fb8:	defffe04 	addi	sp,sp,-8
   20fbc:	df000115 	stw	fp,4(sp)
   20fc0:	df000104 	addi	fp,sp,4
   20fc4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   20fc8:	e0bfff17 	ldw	r2,-4(fp)
   20fcc:	10800317 	ldw	r2,12(r2)
   20fd0:	10800504 	addi	r2,r2,20
   20fd4:	10800037 	ldwio	r2,0(r2)
   20fd8:	1080004c 	andi	r2,r2,1
   20fdc:	10000226 	beq	r2,zero,20fe8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   20fe0:	00800044 	movi	r2,1
   20fe4:	00000106 	br	20fec <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   20fe8:	0005883a 	mov	r2,zero
}
   20fec:	e037883a 	mov	sp,fp
   20ff0:	df000017 	ldw	fp,0(sp)
   20ff4:	dec00104 	addi	sp,sp,4
   20ff8:	f800283a 	ret

00020ffc <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   20ffc:	defffb04 	addi	sp,sp,-20
   21000:	df000415 	stw	fp,16(sp)
   21004:	df000404 	addi	fp,sp,16
   21008:	e13fff15 	stw	r4,-4(fp)
   2100c:	e17ffe15 	stw	r5,-8(fp)
   21010:	e1bffd15 	stw	r6,-12(fp)
   21014:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
   21018:	e0bffc17 	ldw	r2,-16(fp)
   2101c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   21020:	00001506 	br	21078 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   21024:	e0bfff17 	ldw	r2,-4(fp)
   21028:	10800317 	ldw	r2,12(r2)
   2102c:	10800104 	addi	r2,r2,4
   21030:	11000037 	ldwio	r4,0(r2)
   21034:	e0bffc17 	ldw	r2,-16(fp)
   21038:	10800017 	ldw	r2,0(r2)
   2103c:	e0fffe17 	ldw	r3,-8(fp)
   21040:	1885883a 	add	r2,r3,r2
   21044:	2007883a 	mov	r3,r4
   21048:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   2104c:	e0bffc17 	ldw	r2,-16(fp)
   21050:	10800017 	ldw	r2,0(r2)
   21054:	10c00044 	addi	r3,r2,1
   21058:	e0bffc17 	ldw	r2,-16(fp)
   2105c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21060:	e0bffc17 	ldw	r2,-16(fp)
   21064:	10800017 	ldw	r2,0(r2)
   21068:	e0fffd17 	ldw	r3,-12(fp)
   2106c:	1880021e 	bne	r3,r2,21078 <alt_avalon_i2c_rx_read_available+0x7c>
   21070:	e0bffd17 	ldw	r2,-12(fp)
   21074:	1000061e 	bne	r2,zero,21090 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   21078:	e0bfff17 	ldw	r2,-4(fp)
   2107c:	10800317 	ldw	r2,12(r2)
   21080:	10800704 	addi	r2,r2,28
   21084:	10800037 	ldwio	r2,0(r2)
   21088:	103fe61e 	bne	r2,zero,21024 <__alt_mem_mcu_subsystem_ram_0+0x78001024>
    }
}
   2108c:	00000106 	br	21094 <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   21090:	0001883a 	nop
}
   21094:	0001883a 	nop
   21098:	e037883a 	mov	sp,fp
   2109c:	df000017 	ldw	fp,0(sp)
   210a0:	dec00104 	addi	sp,sp,4
   210a4:	f800283a 	ret

000210a8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   210a8:	defffa04 	addi	sp,sp,-24
   210ac:	dfc00515 	stw	ra,20(sp)
   210b0:	df000415 	stw	fp,16(sp)
   210b4:	df000404 	addi	fp,sp,16
   210b8:	e13ffd15 	stw	r4,-12(fp)
   210bc:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   210c0:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
   210c4:	008000b4 	movhi	r2,2
   210c8:	10a1a804 	addi	r2,r2,-31072
   210cc:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   210d0:	00000d06 	br	21108 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   210d4:	e0bffe17 	ldw	r2,-8(fp)
   210d8:	108002a8 	cmpgeui	r2,r2,10
   210dc:	1000021e 	bne	r2,zero,210e8 <alt_avalon_i2c_rx_read+0x40>
   210e0:	0109c404 	movi	r4,10000
   210e4:	0023c740 	call	23c74 <alt_busy_sleep>
      if (--timeout == 0)
   210e8:	e0bffe17 	ldw	r2,-8(fp)
   210ec:	10bfffc4 	addi	r2,r2,-1
   210f0:	e0bffe15 	stw	r2,-8(fp)
   210f4:	e0bffe17 	ldw	r2,-8(fp)
   210f8:	1000031e 	bne	r2,zero,21108 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   210fc:	00bfff84 	movi	r2,-2
   21100:	e0bfff15 	stw	r2,-4(fp)
        break;
   21104:	00000506 	br	2111c <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   21108:	e0bffd17 	ldw	r2,-12(fp)
   2110c:	10800317 	ldw	r2,12(r2)
   21110:	10800704 	addi	r2,r2,28
   21114:	10800037 	ldwio	r2,0(r2)
   21118:	103fee26 	beq	r2,zero,210d4 <__alt_mem_mcu_subsystem_ram_0+0x780010d4>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2111c:	e0bffd17 	ldw	r2,-12(fp)
   21120:	10800317 	ldw	r2,12(r2)
   21124:	10800104 	addi	r2,r2,4
   21128:	10800037 	ldwio	r2,0(r2)
   2112c:	1007883a 	mov	r3,r2
   21130:	e0bffc17 	ldw	r2,-16(fp)
   21134:	10c00005 	stb	r3,0(r2)
        
    return status;
   21138:	e0bfff17 	ldw	r2,-4(fp)
}
   2113c:	e037883a 	mov	sp,fp
   21140:	dfc00117 	ldw	ra,4(sp)
   21144:	df000017 	ldw	fp,0(sp)
   21148:	dec00204 	addi	sp,sp,8
   2114c:	f800283a 	ret

00021150 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   21150:	defff804 	addi	sp,sp,-32
   21154:	dfc00715 	stw	ra,28(sp)
   21158:	df000615 	stw	fp,24(sp)
   2115c:	df000604 	addi	fp,sp,24
   21160:	e13ffd15 	stw	r4,-12(fp)
   21164:	2805883a 	mov	r2,r5
   21168:	3009883a 	mov	r4,r6
   2116c:	3807883a 	mov	r3,r7
   21170:	e0bffc05 	stb	r2,-16(fp)
   21174:	2005883a 	mov	r2,r4
   21178:	e0bffb05 	stb	r2,-20(fp)
   2117c:	1805883a 	mov	r2,r3
   21180:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
   21184:	0089c404 	movi	r2,10000
   21188:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2118c:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   21190:	00000c06 	br	211c4 <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   21194:	e0bfff17 	ldw	r2,-4(fp)
   21198:	108002a8 	cmpgeui	r2,r2,10
   2119c:	1000021e 	bne	r2,zero,211a8 <alt_avalon_i2c_cmd_write+0x58>
   211a0:	0109c404 	movi	r4,10000
   211a4:	0023c740 	call	23c74 <alt_busy_sleep>
      if (--timeout == 0)
   211a8:	e0bfff17 	ldw	r2,-4(fp)
   211ac:	10bfffc4 	addi	r2,r2,-1
   211b0:	e0bfff15 	stw	r2,-4(fp)
   211b4:	e0bfff17 	ldw	r2,-4(fp)
   211b8:	1000021e 	bne	r2,zero,211c4 <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   211bc:	00bfff84 	movi	r2,-2
   211c0:	00001906 	br	21228 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   211c4:	e0bffd17 	ldw	r2,-12(fp)
   211c8:	10800317 	ldw	r2,12(r2)
   211cc:	10800404 	addi	r2,r2,16
   211d0:	10800037 	ldwio	r2,0(r2)
   211d4:	1080004c 	andi	r2,r2,1
   211d8:	103fee26 	beq	r2,zero,21194 <__alt_mem_mcu_subsystem_ram_0+0x78001194>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   211dc:	e0bffd17 	ldw	r2,-12(fp)
   211e0:	10800317 	ldw	r2,12(r2)
   211e4:	e13ffc03 	ldbu	r4,-16(fp)
   211e8:	e0fffb03 	ldbu	r3,-20(fp)
   211ec:	1806927a 	slli	r3,r3,9
   211f0:	20c8b03a 	or	r4,r4,r3
   211f4:	e0fffa03 	ldbu	r3,-24(fp)
   211f8:	1806923a 	slli	r3,r3,8
   211fc:	20c6b03a 	or	r3,r4,r3
   21200:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21204:	e0bffe04 	addi	r2,fp,-8
   21208:	100b883a 	mov	r5,r2
   2120c:	e13ffd17 	ldw	r4,-12(fp)
   21210:	00213980 	call	21398 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   21214:	e0bffe04 	addi	r2,fp,-8
   21218:	100b883a 	mov	r5,r2
   2121c:	e13ffd17 	ldw	r4,-12(fp)
   21220:	00213e40 	call	213e4 <alt_avalon_i2c_check_arblost>
    
    return status;
   21224:	e0bffe17 	ldw	r2,-8(fp)
}
   21228:	e037883a 	mov	sp,fp
   2122c:	dfc00117 	ldw	ra,4(sp)
   21230:	df000017 	ldw	fp,0(sp)
   21234:	dec00204 	addi	sp,sp,8
   21238:	f800283a 	ret

0002123c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2123c:	defffa04 	addi	sp,sp,-24
   21240:	dfc00515 	stw	ra,20(sp)
   21244:	df000415 	stw	fp,16(sp)
   21248:	df000404 	addi	fp,sp,16
   2124c:	e13ffe15 	stw	r4,-8(fp)
   21250:	e17ffd15 	stw	r5,-12(fp)
   21254:	3005883a 	mov	r2,r6
   21258:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2125c:	e0bffe17 	ldw	r2,-8(fp)
   21260:	10800d17 	ldw	r2,52(r2)
   21264:	10800058 	cmpnei	r2,r2,1
   21268:	10001c1e 	bne	r2,zero,212dc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2126c:	e0bffe17 	ldw	r2,-8(fp)
   21270:	10800917 	ldw	r2,36(r2)
   21274:	1004d1fa 	srli	r2,r2,7
   21278:	1080038c 	andi	r2,r2,14
   2127c:	1007883a 	mov	r3,r2
   21280:	e0bffd17 	ldw	r2,-12(fp)
   21284:	1884b03a 	or	r2,r3,r2
   21288:	1007883a 	mov	r3,r2
   2128c:	00bffc04 	movi	r2,-16
   21290:	1884b03a 	or	r2,r3,r2
   21294:	10803fcc 	andi	r2,r2,255
   21298:	e0fffc03 	ldbu	r3,-16(fp)
   2129c:	000f883a 	mov	r7,zero
   212a0:	180d883a 	mov	r6,r3
   212a4:	100b883a 	mov	r5,r2
   212a8:	e13ffe17 	ldw	r4,-8(fp)
   212ac:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   212b0:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   212b4:	e0bffe17 	ldw	r2,-8(fp)
   212b8:	10800917 	ldw	r2,36(r2)
   212bc:	10803fcc 	andi	r2,r2,255
   212c0:	000f883a 	mov	r7,zero
   212c4:	000d883a 	mov	r6,zero
   212c8:	100b883a 	mov	r5,r2
   212cc:	e13ffe17 	ldw	r4,-8(fp)
   212d0:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   212d4:	e0bfff15 	stw	r2,-4(fp)
   212d8:	00000e06 	br	21314 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   212dc:	e0bffe17 	ldw	r2,-8(fp)
   212e0:	10800917 	ldw	r2,36(r2)
   212e4:	1085883a 	add	r2,r2,r2
   212e8:	1007883a 	mov	r3,r2
   212ec:	e0bffd17 	ldw	r2,-12(fp)
   212f0:	1884b03a 	or	r2,r3,r2
   212f4:	10803fcc 	andi	r2,r2,255
   212f8:	e0fffc03 	ldbu	r3,-16(fp)
   212fc:	000f883a 	mov	r7,zero
   21300:	180d883a 	mov	r6,r3
   21304:	100b883a 	mov	r5,r2
   21308:	e13ffe17 	ldw	r4,-8(fp)
   2130c:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21310:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
   21314:	e0bfff17 	ldw	r2,-4(fp)
}
   21318:	e037883a 	mov	sp,fp
   2131c:	dfc00117 	ldw	ra,4(sp)
   21320:	df000017 	ldw	fp,0(sp)
   21324:	dec00204 	addi	sp,sp,8
   21328:	f800283a 	ret

0002132c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2132c:	defffd04 	addi	sp,sp,-12
   21330:	df000215 	stw	fp,8(sp)
   21334:	df000204 	addi	fp,sp,8
   21338:	e13fff15 	stw	r4,-4(fp)
   2133c:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
   21340:	e0bfff17 	ldw	r2,-4(fp)
   21344:	10c00917 	ldw	r3,36(r2)
   21348:	e0bffe17 	ldw	r2,-8(fp)
   2134c:	10c00015 	stw	r3,0(r2)
}
   21350:	0001883a 	nop
   21354:	e037883a 	mov	sp,fp
   21358:	df000017 	ldw	fp,0(sp)
   2135c:	dec00104 	addi	sp,sp,4
   21360:	f800283a 	ret

00021364 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   21364:	defffd04 	addi	sp,sp,-12
   21368:	df000215 	stw	fp,8(sp)
   2136c:	df000204 	addi	fp,sp,8
   21370:	e13fff15 	stw	r4,-4(fp)
   21374:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
   21378:	e0bfff17 	ldw	r2,-4(fp)
   2137c:	e0fffe17 	ldw	r3,-8(fp)
   21380:	10c00915 	stw	r3,36(r2)
}
   21384:	0001883a 	nop
   21388:	e037883a 	mov	sp,fp
   2138c:	df000017 	ldw	fp,0(sp)
   21390:	dec00104 	addi	sp,sp,4
   21394:	f800283a 	ret

00021398 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   21398:	defffd04 	addi	sp,sp,-12
   2139c:	df000215 	stw	fp,8(sp)
   213a0:	df000204 	addi	fp,sp,8
   213a4:	e13fff15 	stw	r4,-4(fp)
   213a8:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   213ac:	e0bfff17 	ldw	r2,-4(fp)
   213b0:	10800317 	ldw	r2,12(r2)
   213b4:	10800404 	addi	r2,r2,16
   213b8:	10800037 	ldwio	r2,0(r2)
   213bc:	1080010c 	andi	r2,r2,4
   213c0:	10000326 	beq	r2,zero,213d0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   213c4:	e0bffe17 	ldw	r2,-8(fp)
   213c8:	00fffec4 	movi	r3,-5
   213cc:	10c00015 	stw	r3,0(r2)
    }
}
   213d0:	0001883a 	nop
   213d4:	e037883a 	mov	sp,fp
   213d8:	df000017 	ldw	fp,0(sp)
   213dc:	dec00104 	addi	sp,sp,4
   213e0:	f800283a 	ret

000213e4 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   213e4:	defffd04 	addi	sp,sp,-12
   213e8:	df000215 	stw	fp,8(sp)
   213ec:	df000204 	addi	fp,sp,8
   213f0:	e13fff15 	stw	r4,-4(fp)
   213f4:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   213f8:	e0bfff17 	ldw	r2,-4(fp)
   213fc:	10800317 	ldw	r2,12(r2)
   21400:	10800404 	addi	r2,r2,16
   21404:	10800037 	ldwio	r2,0(r2)
   21408:	1080020c 	andi	r2,r2,8
   2140c:	10000326 	beq	r2,zero,2141c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   21410:	e0bffe17 	ldw	r2,-8(fp)
   21414:	00fffe84 	movi	r3,-6
   21418:	10c00015 	stw	r3,0(r2)
    }
}
   2141c:	0001883a 	nop
   21420:	e037883a 	mov	sp,fp
   21424:	df000017 	ldw	fp,0(sp)
   21428:	dec00104 	addi	sp,sp,4
   2142c:	f800283a 	ret

00021430 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   21430:	defff804 	addi	sp,sp,-32
   21434:	dfc00715 	stw	ra,28(sp)
   21438:	df000615 	stw	fp,24(sp)
   2143c:	df000604 	addi	fp,sp,24
   21440:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21444:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   21448:	e0bffa17 	ldw	r2,-24(fp)
   2144c:	10800717 	ldw	r2,28(r2)
   21450:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   21454:	e0bffe17 	ldw	r2,-8(fp)
   21458:	10800117 	ldw	r2,4(r2)
   2145c:	10800044 	addi	r2,r2,1
   21460:	1089c424 	muli	r2,r2,10000
   21464:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   21468:	e0bffc04 	addi	r2,fp,-16
   2146c:	100b883a 	mov	r5,r2
   21470:	e13ffa17 	ldw	r4,-24(fp)
   21474:	00222b80 	call	222b8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   21478:	e0bffc17 	ldw	r2,-16(fp)
   2147c:	100b883a 	mov	r5,r2
   21480:	e13ffa17 	ldw	r4,-24(fp)
   21484:	00221e40 	call	221e4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   21488:	e0bffd04 	addi	r2,fp,-12
   2148c:	100b883a 	mov	r5,r2
   21490:	e13ffa17 	ldw	r4,-24(fp)
   21494:	00213980 	call	21398 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   21498:	e0bffd17 	ldw	r2,-12(fp)
   2149c:	10002226 	beq	r2,zero,21528 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   214a0:	e0bffe17 	ldw	r2,-8(fp)
   214a4:	10800217 	ldw	r2,8(r2)
   214a8:	10001d26 	beq	r2,zero,21520 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   214ac:	00000d06 	br	214e4 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   214b0:	e0bfff17 	ldw	r2,-4(fp)
   214b4:	108002a8 	cmpgeui	r2,r2,10
   214b8:	1000021e 	bne	r2,zero,214c4 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   214bc:	0109c404 	movi	r4,10000
   214c0:	0023c740 	call	23c74 <alt_busy_sleep>
              if (--timeout == 0)
   214c4:	e0bfff17 	ldw	r2,-4(fp)
   214c8:	10bfffc4 	addi	r2,r2,-1
   214cc:	e0bfff15 	stw	r2,-4(fp)
   214d0:	e0bfff17 	ldw	r2,-4(fp)
   214d4:	1000031e 	bne	r2,zero,214e4 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   214d8:	00bfff84 	movi	r2,-2
   214dc:	e0bffd15 	stw	r2,-12(fp)
                 break;
   214e0:	00000306 	br	214f0 <alt_avalon_i2c_interrupt_transaction_status+0xc0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   214e4:	e13ffa17 	ldw	r4,-24(fp)
   214e8:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   214ec:	103ff01e 	bne	r2,zero,214b0 <__alt_mem_mcu_subsystem_ram_0+0x780014b0>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   214f0:	e0bffe17 	ldw	r2,-8(fp)
   214f4:	10800017 	ldw	r2,0(r2)
   214f8:	e0fffb04 	addi	r3,fp,-20
   214fc:	180f883a 	mov	r7,r3
   21500:	000d883a 	mov	r6,zero
   21504:	100b883a 	mov	r5,r2
   21508:	e13ffa17 	ldw	r4,-24(fp)
   2150c:	0020ffc0 	call	20ffc <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   21510:	e13ffa17 	ldw	r4,-24(fp)
   21514:	0020c800 	call	20c80 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   21518:	e0bffe17 	ldw	r2,-8(fp)
   2151c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   21520:	e0bffd17 	ldw	r2,-12(fp)
   21524:	00000a06 	br	21550 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   21528:	e0bffe17 	ldw	r2,-8(fp)
   2152c:	10800217 	ldw	r2,8(r2)
   21530:	10000626 	beq	r2,zero,2154c <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   21534:	e0bffc17 	ldw	r2,-16(fp)
   21538:	100b883a 	mov	r5,r2
   2153c:	e13ffa17 	ldw	r4,-24(fp)
   21540:	00222500 	call	22250 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   21544:	00bffe44 	movi	r2,-7
   21548:	00000106 	br	21550 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   2154c:	0005883a 	mov	r2,zero
}
   21550:	e037883a 	mov	sp,fp
   21554:	dfc00117 	ldw	ra,4(sp)
   21558:	df000017 	ldw	fp,0(sp)
   2155c:	dec00204 	addi	sp,sp,8
   21560:	f800283a 	ret

00021564 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   21564:	defff704 	addi	sp,sp,-36
   21568:	dfc00815 	stw	ra,32(sp)
   2156c:	df000715 	stw	fp,28(sp)
   21570:	df000704 	addi	fp,sp,28
   21574:	e13ffd15 	stw	r4,-12(fp)
   21578:	e17ffc15 	stw	r5,-16(fp)
   2157c:	e1bffb15 	stw	r6,-20(fp)
   21580:	3805883a 	mov	r2,r7
   21584:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21588:	0089c404 	movi	r2,10000
   2158c:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
   21590:	00002206 	br	2161c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   21594:	e0bffe17 	ldw	r2,-8(fp)
   21598:	108002a8 	cmpgeui	r2,r2,10
   2159c:	1000021e 	bne	r2,zero,215a8 <alt_avalon_i2c_master_tx+0x44>
   215a0:	0109c404 	movi	r4,10000
   215a4:	0023c740 	call	23c74 <alt_busy_sleep>
      if (use_interrupts)
   215a8:	e0bffa03 	ldbu	r2,-24(fp)
   215ac:	10000926 	beq	r2,zero,215d4 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   215b0:	00800044 	movi	r2,1
   215b4:	d8800015 	stw	r2,0(sp)
   215b8:	000f883a 	mov	r7,zero
   215bc:	e1bffb17 	ldw	r6,-20(fp)
   215c0:	e17ffc17 	ldw	r5,-16(fp)
   215c4:	e13ffd17 	ldw	r4,-12(fp)
   215c8:	0021b0c0 	call	21b0c <alt_avalon_i2c_master_transmit_using_interrupts>
   215cc:	e0bfff15 	stw	r2,-4(fp)
   215d0:	00000806 	br	215f4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   215d4:	00800044 	movi	r2,1
   215d8:	d8800015 	stw	r2,0(sp)
   215dc:	000f883a 	mov	r7,zero
   215e0:	e1bffb17 	ldw	r6,-20(fp)
   215e4:	e17ffc17 	ldw	r5,-16(fp)
   215e8:	e13ffd17 	ldw	r4,-12(fp)
   215ec:	00219500 	call	21950 <alt_avalon_i2c_master_transmit>
   215f0:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   215f4:	e0bfff17 	ldw	r2,-4(fp)
   215f8:	10bffea0 	cmpeqi	r2,r2,-6
   215fc:	1000061e 	bne	r2,zero,21618 <alt_avalon_i2c_master_tx+0xb4>
   21600:	e0bfff17 	ldw	r2,-4(fp)
   21604:	10bffee0 	cmpeqi	r2,r2,-5
   21608:	1000031e 	bne	r2,zero,21618 <alt_avalon_i2c_master_tx+0xb4>
   2160c:	e0bfff17 	ldw	r2,-4(fp)
   21610:	10bffe58 	cmpnei	r2,r2,-7
   21614:	1000061e 	bne	r2,zero,21630 <alt_avalon_i2c_master_tx+0xcc>
   21618:	0001883a 	nop
    while (retry--)
   2161c:	e0bffe17 	ldw	r2,-8(fp)
   21620:	10ffffc4 	addi	r3,r2,-1
   21624:	e0fffe15 	stw	r3,-8(fp)
   21628:	103fda1e 	bne	r2,zero,21594 <__alt_mem_mcu_subsystem_ram_0+0x78001594>
   2162c:	00000106 	br	21634 <alt_avalon_i2c_master_tx+0xd0>
      break;
   21630:	0001883a 	nop
    }

    return status;
   21634:	e0bfff17 	ldw	r2,-4(fp)
}        
   21638:	e037883a 	mov	sp,fp
   2163c:	dfc00117 	ldw	ra,4(sp)
   21640:	df000017 	ldw	fp,0(sp)
   21644:	dec00204 	addi	sp,sp,8
   21648:	f800283a 	ret

0002164c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2164c:	defff704 	addi	sp,sp,-36
   21650:	dfc00815 	stw	ra,32(sp)
   21654:	df000715 	stw	fp,28(sp)
   21658:	df000704 	addi	fp,sp,28
   2165c:	e13ffd15 	stw	r4,-12(fp)
   21660:	e17ffc15 	stw	r5,-16(fp)
   21664:	e1bffb15 	stw	r6,-20(fp)
   21668:	3805883a 	mov	r2,r7
   2166c:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   21670:	0089c404 	movi	r2,10000
   21674:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
   21678:	e0bffa03 	ldbu	r2,-24(fp)
   2167c:	10003426 	beq	r2,zero,21750 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   21680:	00001706 	br	216e0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   21684:	e0bffe17 	ldw	r2,-8(fp)
   21688:	108002a8 	cmpgeui	r2,r2,10
   2168c:	1000021e 	bne	r2,zero,21698 <alt_avalon_i2c_master_rx+0x4c>
   21690:	0109c404 	movi	r4,10000
   21694:	0023c740 	call	23c74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21698:	00800044 	movi	r2,1
   2169c:	d8800015 	stw	r2,0(sp)
   216a0:	000f883a 	mov	r7,zero
   216a4:	e1bffb17 	ldw	r6,-20(fp)
   216a8:	e17ffc17 	ldw	r5,-16(fp)
   216ac:	e13ffd17 	ldw	r4,-12(fp)
   216b0:	0021f200 	call	21f20 <alt_avalon_i2c_master_receive_using_interrupts>
   216b4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   216b8:	e0bfff17 	ldw	r2,-4(fp)
   216bc:	10bffea0 	cmpeqi	r2,r2,-6
   216c0:	1000061e 	bne	r2,zero,216dc <alt_avalon_i2c_master_rx+0x90>
   216c4:	e0bfff17 	ldw	r2,-4(fp)
   216c8:	10bffee0 	cmpeqi	r2,r2,-5
   216cc:	1000031e 	bne	r2,zero,216dc <alt_avalon_i2c_master_rx+0x90>
   216d0:	e0bfff17 	ldw	r2,-4(fp)
   216d4:	10bffe58 	cmpnei	r2,r2,-7
   216d8:	1000221e 	bne	r2,zero,21764 <alt_avalon_i2c_master_rx+0x118>
   216dc:	0001883a 	nop
      while (retry--) 
   216e0:	e0bffe17 	ldw	r2,-8(fp)
   216e4:	10ffffc4 	addi	r3,r2,-1
   216e8:	e0fffe15 	stw	r3,-8(fp)
   216ec:	103fe51e 	bne	r2,zero,21684 <__alt_mem_mcu_subsystem_ram_0+0x78001684>
   216f0:	00001f06 	br	21770 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   216f4:	e0bffe17 	ldw	r2,-8(fp)
   216f8:	108002a8 	cmpgeui	r2,r2,10
   216fc:	1000021e 	bne	r2,zero,21708 <alt_avalon_i2c_master_rx+0xbc>
   21700:	0109c404 	movi	r4,10000
   21704:	0023c740 	call	23c74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   21708:	00800044 	movi	r2,1
   2170c:	d8800015 	stw	r2,0(sp)
   21710:	000f883a 	mov	r7,zero
   21714:	e1bffb17 	ldw	r6,-20(fp)
   21718:	e17ffc17 	ldw	r5,-16(fp)
   2171c:	e13ffd17 	ldw	r4,-12(fp)
   21720:	0021d140 	call	21d14 <alt_avalon_i2c_master_receive>
   21724:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   21728:	e0bfff17 	ldw	r2,-4(fp)
   2172c:	10bffea0 	cmpeqi	r2,r2,-6
   21730:	1000061e 	bne	r2,zero,2174c <alt_avalon_i2c_master_rx+0x100>
   21734:	e0bfff17 	ldw	r2,-4(fp)
   21738:	10bffee0 	cmpeqi	r2,r2,-5
   2173c:	1000031e 	bne	r2,zero,2174c <alt_avalon_i2c_master_rx+0x100>
   21740:	e0bfff17 	ldw	r2,-4(fp)
   21744:	10bffe58 	cmpnei	r2,r2,-7
   21748:	1000081e 	bne	r2,zero,2176c <alt_avalon_i2c_master_rx+0x120>
   2174c:	0001883a 	nop
      while (retry--) 
   21750:	e0bffe17 	ldw	r2,-8(fp)
   21754:	10ffffc4 	addi	r3,r2,-1
   21758:	e0fffe15 	stw	r3,-8(fp)
   2175c:	103fe51e 	bne	r2,zero,216f4 <__alt_mem_mcu_subsystem_ram_0+0x780016f4>
   21760:	00000306 	br	21770 <alt_avalon_i2c_master_rx+0x124>
        break;
   21764:	0001883a 	nop
   21768:	00000106 	br	21770 <alt_avalon_i2c_master_rx+0x124>
        break;
   2176c:	0001883a 	nop
      }
    }
    
    return status;
   21770:	e0bfff17 	ldw	r2,-4(fp)
}        
   21774:	e037883a 	mov	sp,fp
   21778:	dfc00117 	ldw	ra,4(sp)
   2177c:	df000017 	ldw	fp,0(sp)
   21780:	dec00204 	addi	sp,sp,8
   21784:	f800283a 	ret

00021788 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   21788:	defff604 	addi	sp,sp,-40
   2178c:	dfc00915 	stw	ra,36(sp)
   21790:	df000815 	stw	fp,32(sp)
   21794:	df000804 	addi	fp,sp,32
   21798:	e13ffd15 	stw	r4,-12(fp)
   2179c:	e17ffc15 	stw	r5,-16(fp)
   217a0:	e1bffb15 	stw	r6,-20(fp)
   217a4:	e1fffa15 	stw	r7,-24(fp)
   217a8:	e0800317 	ldw	r2,12(fp)
   217ac:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   217b0:	0089c404 	movi	r2,10000
   217b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
   217b8:	e0bff903 	ldbu	r2,-28(fp)
   217bc:	10005626 	beq	r2,zero,21918 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   217c0:	00002806 	br	21864 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   217c4:	e0bffe17 	ldw	r2,-8(fp)
   217c8:	108002a8 	cmpgeui	r2,r2,10
   217cc:	1000021e 	bne	r2,zero,217d8 <alt_avalon_i2c_master_tx_rx+0x50>
   217d0:	0109c404 	movi	r4,10000
   217d4:	0023c740 	call	23c74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   217d8:	d8000015 	stw	zero,0(sp)
   217dc:	000f883a 	mov	r7,zero
   217e0:	e1bffb17 	ldw	r6,-20(fp)
   217e4:	e17ffc17 	ldw	r5,-16(fp)
   217e8:	e13ffd17 	ldw	r4,-12(fp)
   217ec:	0021b0c0 	call	21b0c <alt_avalon_i2c_master_transmit_using_interrupts>
   217f0:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	10bffea0 	cmpeqi	r2,r2,-6
   217fc:	1000191e 	bne	r2,zero,21864 <alt_avalon_i2c_master_tx_rx+0xdc>
   21800:	e0bfff17 	ldw	r2,-4(fp)
   21804:	10bffee0 	cmpeqi	r2,r2,-5
   21808:	1000161e 	bne	r2,zero,21864 <alt_avalon_i2c_master_tx_rx+0xdc>
   2180c:	e0bfff17 	ldw	r2,-4(fp)
   21810:	10bffe58 	cmpnei	r2,r2,-7
   21814:	1000011e 	bne	r2,zero,2181c <alt_avalon_i2c_master_tx_rx+0x94>
   21818:	00001206 	br	21864 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2181c:	00800044 	movi	r2,1
   21820:	d8800015 	stw	r2,0(sp)
   21824:	01c00044 	movi	r7,1
   21828:	e1800217 	ldw	r6,8(fp)
   2182c:	e17ffa17 	ldw	r5,-24(fp)
   21830:	e13ffd17 	ldw	r4,-12(fp)
   21834:	0021f200 	call	21f20 <alt_avalon_i2c_master_receive_using_interrupts>
   21838:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2183c:	e0bfff17 	ldw	r2,-4(fp)
   21840:	10bffea0 	cmpeqi	r2,r2,-6
   21844:	1000061e 	bne	r2,zero,21860 <alt_avalon_i2c_master_tx_rx+0xd8>
   21848:	e0bfff17 	ldw	r2,-4(fp)
   2184c:	10bffee0 	cmpeqi	r2,r2,-5
   21850:	1000031e 	bne	r2,zero,21860 <alt_avalon_i2c_master_tx_rx+0xd8>
   21854:	e0bfff17 	ldw	r2,-4(fp)
   21858:	10bffe58 	cmpnei	r2,r2,-7
   2185c:	1000331e 	bne	r2,zero,2192c <alt_avalon_i2c_master_tx_rx+0x1a4>
   21860:	0001883a 	nop
      while (retry--) 
   21864:	e0bffe17 	ldw	r2,-8(fp)
   21868:	10ffffc4 	addi	r3,r2,-1
   2186c:	e0fffe15 	stw	r3,-8(fp)
   21870:	103fd41e 	bne	r2,zero,217c4 <__alt_mem_mcu_subsystem_ram_0+0x780017c4>
   21874:	00003006 	br	21938 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   21878:	e0bffe17 	ldw	r2,-8(fp)
   2187c:	108002a8 	cmpgeui	r2,r2,10
   21880:	1000021e 	bne	r2,zero,2188c <alt_avalon_i2c_master_tx_rx+0x104>
   21884:	0109c404 	movi	r4,10000
   21888:	0023c740 	call	23c74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2188c:	d8000015 	stw	zero,0(sp)
   21890:	000f883a 	mov	r7,zero
   21894:	e1bffb17 	ldw	r6,-20(fp)
   21898:	e17ffc17 	ldw	r5,-16(fp)
   2189c:	e13ffd17 	ldw	r4,-12(fp)
   218a0:	00219500 	call	21950 <alt_avalon_i2c_master_transmit>
   218a4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   218a8:	e0bfff17 	ldw	r2,-4(fp)
   218ac:	10bffea0 	cmpeqi	r2,r2,-6
   218b0:	1000191e 	bne	r2,zero,21918 <alt_avalon_i2c_master_tx_rx+0x190>
   218b4:	e0bfff17 	ldw	r2,-4(fp)
   218b8:	10bffee0 	cmpeqi	r2,r2,-5
   218bc:	1000161e 	bne	r2,zero,21918 <alt_avalon_i2c_master_tx_rx+0x190>
   218c0:	e0bfff17 	ldw	r2,-4(fp)
   218c4:	10bffe58 	cmpnei	r2,r2,-7
   218c8:	1000011e 	bne	r2,zero,218d0 <alt_avalon_i2c_master_tx_rx+0x148>
   218cc:	00001206 	br	21918 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   218d0:	00800044 	movi	r2,1
   218d4:	d8800015 	stw	r2,0(sp)
   218d8:	01c00044 	movi	r7,1
   218dc:	e1800217 	ldw	r6,8(fp)
   218e0:	e17ffa17 	ldw	r5,-24(fp)
   218e4:	e13ffd17 	ldw	r4,-12(fp)
   218e8:	0021d140 	call	21d14 <alt_avalon_i2c_master_receive>
   218ec:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   218f0:	e0bfff17 	ldw	r2,-4(fp)
   218f4:	10bffea0 	cmpeqi	r2,r2,-6
   218f8:	1000061e 	bne	r2,zero,21914 <alt_avalon_i2c_master_tx_rx+0x18c>
   218fc:	e0bfff17 	ldw	r2,-4(fp)
   21900:	10bffee0 	cmpeqi	r2,r2,-5
   21904:	1000031e 	bne	r2,zero,21914 <alt_avalon_i2c_master_tx_rx+0x18c>
   21908:	e0bfff17 	ldw	r2,-4(fp)
   2190c:	10bffe58 	cmpnei	r2,r2,-7
   21910:	1000081e 	bne	r2,zero,21934 <alt_avalon_i2c_master_tx_rx+0x1ac>
   21914:	0001883a 	nop
      while (retry--) 
   21918:	e0bffe17 	ldw	r2,-8(fp)
   2191c:	10ffffc4 	addi	r3,r2,-1
   21920:	e0fffe15 	stw	r3,-8(fp)
   21924:	103fd41e 	bne	r2,zero,21878 <__alt_mem_mcu_subsystem_ram_0+0x78001878>
   21928:	00000306 	br	21938 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
   2192c:	0001883a 	nop
   21930:	00000106 	br	21938 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
   21934:	0001883a 	nop
      }
    }
    
    return status;
   21938:	e0bfff17 	ldw	r2,-4(fp)
}                                       
   2193c:	e037883a 	mov	sp,fp
   21940:	dfc00117 	ldw	ra,4(sp)
   21944:	df000017 	ldw	fp,0(sp)
   21948:	dec00204 	addi	sp,sp,8
   2194c:	f800283a 	ret

00021950 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21950:	defff704 	addi	sp,sp,-36
   21954:	dfc00815 	stw	ra,32(sp)
   21958:	df000715 	stw	fp,28(sp)
   2195c:	df000704 	addi	fp,sp,28
   21960:	e13ffd15 	stw	r4,-12(fp)
   21964:	e17ffc15 	stw	r5,-16(fp)
   21968:	e1bffb15 	stw	r6,-20(fp)
   2196c:	3807883a 	mov	r3,r7
   21970:	e0800217 	ldw	r2,8(fp)
   21974:	e0fffa05 	stb	r3,-24(fp)
   21978:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2197c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
   21980:	e0bffb17 	ldw	r2,-20(fp)
   21984:	1089c424 	muli	r2,r2,10000
   21988:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
   2198c:	e0bffb17 	ldw	r2,-20(fp)
   21990:	1000021e 	bne	r2,zero,2199c <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21994:	0005883a 	mov	r2,zero
   21998:	00005706 	br	21af8 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2199c:	e0bffa03 	ldbu	r2,-24(fp)
   219a0:	10000a1e 	bne	r2,zero,219cc <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   219a4:	e13ffd17 	ldw	r4,-12(fp)
   219a8:	0020be80 	call	20be8 <alt_avalon_i2c_enable>
   219ac:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   219b0:	e0bffe17 	ldw	r2,-8(fp)
   219b4:	10000226 	beq	r2,zero,219c0 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   219b8:	e0bffe17 	ldw	r2,-8(fp)
   219bc:	00004e06 	br	21af8 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   219c0:	01400704 	movi	r5,28
   219c4:	e13ffd17 	ldw	r4,-12(fp)
   219c8:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   219cc:	e0bffa03 	ldbu	r2,-24(fp)
   219d0:	100d883a 	mov	r6,r2
   219d4:	000b883a 	mov	r5,zero
   219d8:	e13ffd17 	ldw	r4,-12(fp)
   219dc:	002123c0 	call	2123c <alt_avalon_i2c_send_address>
   219e0:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   219e4:	e0bffe17 	ldw	r2,-8(fp)
   219e8:	1000271e 	bne	r2,zero,21a88 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   219ec:	00000f06 	br	21a2c <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   219f0:	e0bffc17 	ldw	r2,-16(fp)
   219f4:	10800003 	ldbu	r2,0(r2)
   219f8:	10803fcc 	andi	r2,r2,255
   219fc:	000f883a 	mov	r7,zero
   21a00:	000d883a 	mov	r6,zero
   21a04:	100b883a 	mov	r5,r2
   21a08:	e13ffd17 	ldw	r4,-12(fp)
   21a0c:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21a10:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
   21a14:	e0bffc17 	ldw	r2,-16(fp)
   21a18:	10800044 	addi	r2,r2,1
   21a1c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21a20:	e0bffb17 	ldw	r2,-20(fp)
   21a24:	10bfffc4 	addi	r2,r2,-1
   21a28:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21a2c:	e0bffb17 	ldw	r2,-20(fp)
   21a30:	108000b0 	cmpltui	r2,r2,2
   21a34:	1000021e 	bne	r2,zero,21a40 <alt_avalon_i2c_master_transmit+0xf0>
   21a38:	e0bffe17 	ldw	r2,-8(fp)
   21a3c:	103fec26 	beq	r2,zero,219f0 <__alt_mem_mcu_subsystem_ram_0+0x780019f0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21a40:	e0bffe17 	ldw	r2,-8(fp)
   21a44:	1000101e 	bne	r2,zero,21a88 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21a48:	e0bffc17 	ldw	r2,-16(fp)
   21a4c:	10800003 	ldbu	r2,0(r2)
   21a50:	10803fcc 	andi	r2,r2,255
   21a54:	e0fff903 	ldbu	r3,-28(fp)
   21a58:	180f883a 	mov	r7,r3
   21a5c:	000d883a 	mov	r6,zero
   21a60:	100b883a 	mov	r5,r2
   21a64:	e13ffd17 	ldw	r4,-12(fp)
   21a68:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21a6c:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
   21a70:	e0bffc17 	ldw	r2,-16(fp)
   21a74:	10800044 	addi	r2,r2,1
   21a78:	e0bffc15 	stw	r2,-16(fp)
            --size;
   21a7c:	e0bffb17 	ldw	r2,-20(fp)
   21a80:	10bfffc4 	addi	r2,r2,-1
   21a84:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21a88:	e0bff903 	ldbu	r2,-28(fp)
   21a8c:	1000101e 	bne	r2,zero,21ad0 <alt_avalon_i2c_master_transmit+0x180>
   21a90:	e0bffe17 	ldw	r2,-8(fp)
   21a94:	10001726 	beq	r2,zero,21af4 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21a98:	00000d06 	br	21ad0 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21a9c:	e0bfff17 	ldw	r2,-4(fp)
   21aa0:	108002a8 	cmpgeui	r2,r2,10
   21aa4:	1000021e 	bne	r2,zero,21ab0 <alt_avalon_i2c_master_transmit+0x160>
   21aa8:	0109c404 	movi	r4,10000
   21aac:	0023c740 	call	23c74 <alt_busy_sleep>
            if (--timeout == 0)
   21ab0:	e0bfff17 	ldw	r2,-4(fp)
   21ab4:	10bfffc4 	addi	r2,r2,-1
   21ab8:	e0bfff15 	stw	r2,-4(fp)
   21abc:	e0bfff17 	ldw	r2,-4(fp)
   21ac0:	1000031e 	bne	r2,zero,21ad0 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21ac4:	00bfff84 	movi	r2,-2
   21ac8:	e0bffe15 	stw	r2,-8(fp)
               break;
   21acc:	00000306 	br	21adc <alt_avalon_i2c_master_transmit+0x18c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21ad0:	e13ffd17 	ldw	r4,-12(fp)
   21ad4:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   21ad8:	103ff01e 	bne	r2,zero,21a9c <__alt_mem_mcu_subsystem_ram_0+0x78001a9c>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   21adc:	e0bffe04 	addi	r2,fp,-8
   21ae0:	100b883a 	mov	r5,r2
   21ae4:	e13ffd17 	ldw	r4,-12(fp)
   21ae8:	00213980 	call	21398 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21aec:	e13ffd17 	ldw	r4,-12(fp)
   21af0:	0020c800 	call	20c80 <alt_avalon_i2c_disable>
    }


    return status;
   21af4:	e0bffe17 	ldw	r2,-8(fp)
}
   21af8:	e037883a 	mov	sp,fp
   21afc:	dfc00117 	ldw	ra,4(sp)
   21b00:	df000017 	ldw	fp,0(sp)
   21b04:	dec00204 	addi	sp,sp,8
   21b08:	f800283a 	ret

00021b0c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   21b0c:	defff604 	addi	sp,sp,-40
   21b10:	dfc00915 	stw	ra,36(sp)
   21b14:	df000815 	stw	fp,32(sp)
   21b18:	df000804 	addi	fp,sp,32
   21b1c:	e13ffc15 	stw	r4,-16(fp)
   21b20:	e17ffb15 	stw	r5,-20(fp)
   21b24:	e1bffa15 	stw	r6,-24(fp)
   21b28:	3807883a 	mov	r3,r7
   21b2c:	e0800217 	ldw	r2,8(fp)
   21b30:	e0fff905 	stb	r3,-28(fp)
   21b34:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21b38:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
   21b3c:	e0bffa17 	ldw	r2,-24(fp)
   21b40:	1089c424 	muli	r2,r2,10000
   21b44:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21b48:	e0bffc17 	ldw	r2,-16(fp)
   21b4c:	10800717 	ldw	r2,28(r2)
   21b50:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
   21b54:	e0bffa17 	ldw	r2,-24(fp)
   21b58:	1000021e 	bne	r2,zero,21b64 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21b5c:	0005883a 	mov	r2,zero
   21b60:	00006706 	br	21d00 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21b64:	e0bffc17 	ldw	r2,-16(fp)
   21b68:	10c00617 	ldw	r3,24(r2)
   21b6c:	008000b4 	movhi	r2,2
   21b70:	10821b04 	addi	r2,r2,2156
   21b74:	18800226 	beq	r3,r2,21b80 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21b78:	00bfff44 	movi	r2,-3
   21b7c:	00006006 	br	21d00 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21b80:	e0bff903 	ldbu	r2,-28(fp)
   21b84:	10000a1e 	bne	r2,zero,21bb0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21b88:	e13ffc17 	ldw	r4,-16(fp)
   21b8c:	0020be80 	call	20be8 <alt_avalon_i2c_enable>
   21b90:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21b94:	e0bfff17 	ldw	r2,-4(fp)
   21b98:	10000226 	beq	r2,zero,21ba4 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   21b9c:	e0bfff17 	ldw	r2,-4(fp)
   21ba0:	00005706 	br	21d00 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21ba4:	01400704 	movi	r5,28
   21ba8:	e13ffc17 	ldw	r4,-16(fp)
   21bac:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   21bb0:	e0bff903 	ldbu	r2,-28(fp)
   21bb4:	100d883a 	mov	r6,r2
   21bb8:	000b883a 	mov	r5,zero
   21bbc:	e13ffc17 	ldw	r4,-16(fp)
   21bc0:	002123c0 	call	2123c <alt_avalon_i2c_send_address>
   21bc4:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   21bc8:	e0bfff17 	ldw	r2,-4(fp)
   21bcc:	1000271e 	bne	r2,zero,21c6c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21bd0:	00000f06 	br	21c10 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21bd4:	e0bffb17 	ldw	r2,-20(fp)
   21bd8:	10800003 	ldbu	r2,0(r2)
   21bdc:	10803fcc 	andi	r2,r2,255
   21be0:	000f883a 	mov	r7,zero
   21be4:	000d883a 	mov	r6,zero
   21be8:	100b883a 	mov	r5,r2
   21bec:	e13ffc17 	ldw	r4,-16(fp)
   21bf0:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21bf4:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
   21bf8:	e0bffb17 	ldw	r2,-20(fp)
   21bfc:	10800044 	addi	r2,r2,1
   21c00:	e0bffb15 	stw	r2,-20(fp)
            --size;
   21c04:	e0bffa17 	ldw	r2,-24(fp)
   21c08:	10bfffc4 	addi	r2,r2,-1
   21c0c:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   21c10:	e0bffa17 	ldw	r2,-24(fp)
   21c14:	108000b0 	cmpltui	r2,r2,2
   21c18:	1000021e 	bne	r2,zero,21c24 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   21c1c:	e0bfff17 	ldw	r2,-4(fp)
   21c20:	103fec26 	beq	r2,zero,21bd4 <__alt_mem_mcu_subsystem_ram_0+0x78001bd4>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21c24:	e0bfff17 	ldw	r2,-4(fp)
   21c28:	1000101e 	bne	r2,zero,21c6c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21c2c:	e0bffb17 	ldw	r2,-20(fp)
   21c30:	10800003 	ldbu	r2,0(r2)
   21c34:	10803fcc 	andi	r2,r2,255
   21c38:	e0fff803 	ldbu	r3,-32(fp)
   21c3c:	180f883a 	mov	r7,r3
   21c40:	000d883a 	mov	r6,zero
   21c44:	100b883a 	mov	r5,r2
   21c48:	e13ffc17 	ldw	r4,-16(fp)
   21c4c:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21c50:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
   21c54:	e0bffb17 	ldw	r2,-20(fp)
   21c58:	10800044 	addi	r2,r2,1
   21c5c:	e0bffb15 	stw	r2,-20(fp)
            --size;
   21c60:	e0bffa17 	ldw	r2,-24(fp)
   21c64:	10bfffc4 	addi	r2,r2,-1
   21c68:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   21c6c:	e0bfff17 	ldw	r2,-4(fp)
   21c70:	10001426 	beq	r2,zero,21cc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   21c74:	00000d06 	br	21cac <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   21c78:	e0bffe17 	ldw	r2,-8(fp)
   21c7c:	108002a8 	cmpgeui	r2,r2,10
   21c80:	1000021e 	bne	r2,zero,21c8c <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   21c84:	0109c404 	movi	r4,10000
   21c88:	0023c740 	call	23c74 <alt_busy_sleep>
            if (--timeout == 0)
   21c8c:	e0bffe17 	ldw	r2,-8(fp)
   21c90:	10bfffc4 	addi	r2,r2,-1
   21c94:	e0bffe15 	stw	r2,-8(fp)
   21c98:	e0bffe17 	ldw	r2,-8(fp)
   21c9c:	1000031e 	bne	r2,zero,21cac <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21ca0:	00bfff84 	movi	r2,-2
   21ca4:	e0bfff15 	stw	r2,-4(fp)
               break;
   21ca8:	00000306 	br	21cb8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21cac:	e13ffc17 	ldw	r4,-16(fp)
   21cb0:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   21cb4:	103ff01e 	bne	r2,zero,21c78 <__alt_mem_mcu_subsystem_ram_0+0x78001c78>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21cb8:	e13ffc17 	ldw	r4,-16(fp)
   21cbc:	0020c800 	call	20c80 <alt_avalon_i2c_disable>
   21cc0:	00000e06 	br	21cfc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   21cc4:	e0bff803 	ldbu	r2,-32(fp)
   21cc8:	10000c26 	beq	r2,zero,21cfc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21ccc:	01400704 	movi	r5,28
   21cd0:	e13ffc17 	ldw	r4,-16(fp)
   21cd4:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   21cd8:	000b883a 	mov	r5,zero
   21cdc:	e13ffc17 	ldw	r4,-16(fp)
   21ce0:	00223f80 	call	223f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   21ce4:	e0bffd17 	ldw	r2,-12(fp)
   21ce8:	00c00044 	movi	r3,1
   21cec:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   21cf0:	01400044 	movi	r5,1
   21cf4:	e13ffc17 	ldw	r4,-16(fp)
   21cf8:	00222500 	call	22250 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   21cfc:	e0bfff17 	ldw	r2,-4(fp)
}
   21d00:	e037883a 	mov	sp,fp
   21d04:	dfc00117 	ldw	ra,4(sp)
   21d08:	df000017 	ldw	fp,0(sp)
   21d0c:	dec00204 	addi	sp,sp,8
   21d10:	f800283a 	ret

00021d14 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   21d14:	defff404 	addi	sp,sp,-48
   21d18:	dfc00b15 	stw	ra,44(sp)
   21d1c:	df000a15 	stw	fp,40(sp)
   21d20:	df000a04 	addi	fp,sp,40
   21d24:	e13ffa15 	stw	r4,-24(fp)
   21d28:	e17ff915 	stw	r5,-28(fp)
   21d2c:	e1bff815 	stw	r6,-32(fp)
   21d30:	3807883a 	mov	r3,r7
   21d34:	e0800217 	ldw	r2,8(fp)
   21d38:	e0fff705 	stb	r3,-36(fp)
   21d3c:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21d40:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   21d44:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
   21d48:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   21d4c:	e0bff817 	ldw	r2,-32(fp)
   21d50:	1000021e 	bne	r2,zero,21d5c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21d54:	0005883a 	mov	r2,zero
   21d58:	00006c06 	br	21f0c <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21d5c:	e0bff703 	ldbu	r2,-36(fp)
   21d60:	10000a1e 	bne	r2,zero,21d8c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21d64:	e13ffa17 	ldw	r4,-24(fp)
   21d68:	0020be80 	call	20be8 <alt_avalon_i2c_enable>
   21d6c:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21d70:	e0bffc17 	ldw	r2,-16(fp)
   21d74:	10000226 	beq	r2,zero,21d80 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   21d78:	e0bffc17 	ldw	r2,-16(fp)
   21d7c:	00006306 	br	21f0c <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21d80:	01400704 	movi	r5,28
   21d84:	e13ffa17 	ldw	r4,-24(fp)
   21d88:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21d8c:	e0bff703 	ldbu	r2,-36(fp)
   21d90:	100d883a 	mov	r6,r2
   21d94:	01400044 	movi	r5,1
   21d98:	e13ffa17 	ldw	r4,-24(fp)
   21d9c:	002123c0 	call	2123c <alt_avalon_i2c_send_address>
   21da0:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21da4:	e0bffc17 	ldw	r2,-16(fp)
   21da8:	1000341e 	bne	r2,zero,21e7c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21dac:	00001906 	br	21e14 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21db0:	000f883a 	mov	r7,zero
   21db4:	000d883a 	mov	r6,zero
   21db8:	000b883a 	mov	r5,zero
   21dbc:	e13ffa17 	ldw	r4,-24(fp)
   21dc0:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21dc4:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
   21dc8:	e0bffd17 	ldw	r2,-12(fp)
   21dcc:	10800044 	addi	r2,r2,1
   21dd0:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   21dd4:	e0bffc17 	ldw	r2,-16(fp)
   21dd8:	10000e1e 	bne	r2,zero,21e14 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   21ddc:	e0bffb04 	addi	r2,fp,-20
   21de0:	100f883a 	mov	r7,r2
   21de4:	000d883a 	mov	r6,zero
   21de8:	e17ff917 	ldw	r5,-28(fp)
   21dec:	e13ffa17 	ldw	r4,-24(fp)
   21df0:	0020ffc0 	call	20ffc <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   21df4:	e0bffb17 	ldw	r2,-20(fp)
   21df8:	e0fff917 	ldw	r3,-28(fp)
   21dfc:	1885883a 	add	r2,r3,r2
   21e00:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
   21e04:	e0bffb17 	ldw	r2,-20(fp)
   21e08:	e0fffe17 	ldw	r3,-8(fp)
   21e0c:	1885883a 	add	r2,r3,r2
   21e10:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21e14:	e0bff817 	ldw	r2,-32(fp)
   21e18:	10bfffc4 	addi	r2,r2,-1
   21e1c:	e0fffd17 	ldw	r3,-12(fp)
   21e20:	1880022e 	bgeu	r3,r2,21e2c <alt_avalon_i2c_master_receive+0x118>
   21e24:	e0bffc17 	ldw	r2,-16(fp)
   21e28:	103fe126 	beq	r2,zero,21db0 <__alt_mem_mcu_subsystem_ram_0+0x78001db0>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   21e2c:	e0bffc17 	ldw	r2,-16(fp)
   21e30:	1000121e 	bne	r2,zero,21e7c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   21e34:	e0bff603 	ldbu	r2,-40(fp)
   21e38:	100f883a 	mov	r7,r2
   21e3c:	000d883a 	mov	r6,zero
   21e40:	000b883a 	mov	r5,zero
   21e44:	e13ffa17 	ldw	r4,-24(fp)
   21e48:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21e4c:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21e50:	00000a06 	br	21e7c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   21e54:	e17ff917 	ldw	r5,-28(fp)
   21e58:	e13ffa17 	ldw	r4,-24(fp)
   21e5c:	00210a80 	call	210a8 <alt_avalon_i2c_rx_read>
   21e60:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
   21e64:	e0bff917 	ldw	r2,-28(fp)
   21e68:	10800044 	addi	r2,r2,1
   21e6c:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
   21e70:	e0bffe17 	ldw	r2,-8(fp)
   21e74:	10800044 	addi	r2,r2,1
   21e78:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   21e7c:	e0fffe17 	ldw	r3,-8(fp)
   21e80:	e0bff817 	ldw	r2,-32(fp)
   21e84:	1880022e 	bgeu	r3,r2,21e90 <alt_avalon_i2c_master_receive+0x17c>
   21e88:	e0bffc17 	ldw	r2,-16(fp)
   21e8c:	103ff126 	beq	r2,zero,21e54 <__alt_mem_mcu_subsystem_ram_0+0x78001e54>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   21e90:	e0bff603 	ldbu	r2,-40(fp)
   21e94:	1000021e 	bne	r2,zero,21ea0 <alt_avalon_i2c_master_receive+0x18c>
   21e98:	e0bffc17 	ldw	r2,-16(fp)
   21e9c:	10001a26 	beq	r2,zero,21f08 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   21ea0:	e0bff817 	ldw	r2,-32(fp)
   21ea4:	1089c424 	muli	r2,r2,10000
   21ea8:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21eac:	00000d06 	br	21ee4 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   21eb0:	e0bfff17 	ldw	r2,-4(fp)
   21eb4:	108002a8 	cmpgeui	r2,r2,10
   21eb8:	1000021e 	bne	r2,zero,21ec4 <alt_avalon_i2c_master_receive+0x1b0>
   21ebc:	0109c404 	movi	r4,10000
   21ec0:	0023c740 	call	23c74 <alt_busy_sleep>
            if (--timeout == 0)
   21ec4:	e0bfff17 	ldw	r2,-4(fp)
   21ec8:	10bfffc4 	addi	r2,r2,-1
   21ecc:	e0bfff15 	stw	r2,-4(fp)
   21ed0:	e0bfff17 	ldw	r2,-4(fp)
   21ed4:	1000031e 	bne	r2,zero,21ee4 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   21ed8:	00bfff84 	movi	r2,-2
   21edc:	e0bffc15 	stw	r2,-16(fp)
               break;
   21ee0:	00000306 	br	21ef0 <alt_avalon_i2c_master_receive+0x1dc>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   21ee4:	e13ffa17 	ldw	r4,-24(fp)
   21ee8:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   21eec:	103ff01e 	bne	r2,zero,21eb0 <__alt_mem_mcu_subsystem_ram_0+0x78001eb0>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   21ef0:	e0bffc04 	addi	r2,fp,-16
   21ef4:	100b883a 	mov	r5,r2
   21ef8:	e13ffa17 	ldw	r4,-24(fp)
   21efc:	00213980 	call	21398 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   21f00:	e13ffa17 	ldw	r4,-24(fp)
   21f04:	0020c800 	call	20c80 <alt_avalon_i2c_disable>
    }

    return status;
   21f08:	e0bffc17 	ldw	r2,-16(fp)
}
   21f0c:	e037883a 	mov	sp,fp
   21f10:	dfc00117 	ldw	ra,4(sp)
   21f14:	df000017 	ldw	fp,0(sp)
   21f18:	dec00204 	addi	sp,sp,8
   21f1c:	f800283a 	ret

00021f20 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   21f20:	defff504 	addi	sp,sp,-44
   21f24:	dfc00a15 	stw	ra,40(sp)
   21f28:	df000915 	stw	fp,36(sp)
   21f2c:	df000904 	addi	fp,sp,36
   21f30:	e13ffb15 	stw	r4,-20(fp)
   21f34:	e17ffa15 	stw	r5,-24(fp)
   21f38:	e1bff915 	stw	r6,-28(fp)
   21f3c:	3807883a 	mov	r3,r7
   21f40:	e0800217 	ldw	r2,8(fp)
   21f44:	e0fff805 	stb	r3,-32(fp)
   21f48:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   21f4c:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   21f50:	e0bffb17 	ldw	r2,-20(fp)
   21f54:	10800717 	ldw	r2,28(r2)
   21f58:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   21f5c:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
   21f60:	e0bff917 	ldw	r2,-28(fp)
   21f64:	1000021e 	bne	r2,zero,21f70 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   21f68:	0005883a 	mov	r2,zero
   21f6c:	00006206 	br	220f8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   21f70:	e0bffb17 	ldw	r2,-20(fp)
   21f74:	10c00617 	ldw	r3,24(r2)
   21f78:	008000b4 	movhi	r2,2
   21f7c:	10821b04 	addi	r2,r2,2156
   21f80:	18800226 	beq	r3,r2,21f8c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   21f84:	00bfff44 	movi	r2,-3
   21f88:	00005b06 	br	220f8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   21f8c:	e0bff803 	ldbu	r2,-32(fp)
   21f90:	10000a1e 	bne	r2,zero,21fbc <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   21f94:	e13ffb17 	ldw	r4,-20(fp)
   21f98:	0020be80 	call	20be8 <alt_avalon_i2c_enable>
   21f9c:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   21fa0:	e0bfff17 	ldw	r2,-4(fp)
   21fa4:	10000226 	beq	r2,zero,21fb0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   21fa8:	e0bfff17 	ldw	r2,-4(fp)
   21fac:	00005206 	br	220f8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   21fb0:	01400704 	movi	r5,28
   21fb4:	e13ffb17 	ldw	r4,-20(fp)
   21fb8:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   21fbc:	e0bff803 	ldbu	r2,-32(fp)
   21fc0:	100d883a 	mov	r6,r2
   21fc4:	01400044 	movi	r5,1
   21fc8:	e13ffb17 	ldw	r4,-20(fp)
   21fcc:	002123c0 	call	2123c <alt_avalon_i2c_send_address>
   21fd0:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   21fd4:	e0bfff17 	ldw	r2,-4(fp)
   21fd8:	1000191e 	bne	r2,zero,22040 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   21fdc:	00000906 	br	22004 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   21fe0:	000f883a 	mov	r7,zero
   21fe4:	000d883a 	mov	r6,zero
   21fe8:	000b883a 	mov	r5,zero
   21fec:	e13ffb17 	ldw	r4,-20(fp)
   21ff0:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   21ff4:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
   21ff8:	e0bffd17 	ldw	r2,-12(fp)
   21ffc:	10800044 	addi	r2,r2,1
   22000:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   22004:	e0bff917 	ldw	r2,-28(fp)
   22008:	10bfffc4 	addi	r2,r2,-1
   2200c:	e0fffd17 	ldw	r3,-12(fp)
   22010:	1880022e 	bgeu	r3,r2,2201c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   22014:	e0bfff17 	ldw	r2,-4(fp)
   22018:	103ff126 	beq	r2,zero,21fe0 <__alt_mem_mcu_subsystem_ram_0+0x78001fe0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2201c:	e0bfff17 	ldw	r2,-4(fp)
   22020:	1000071e 	bne	r2,zero,22040 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   22024:	e0bff703 	ldbu	r2,-36(fp)
   22028:	100f883a 	mov	r7,r2
   2202c:	000d883a 	mov	r6,zero
   22030:	000b883a 	mov	r5,zero
   22034:	e13ffb17 	ldw	r4,-20(fp)
   22038:	00211500 	call	21150 <alt_avalon_i2c_cmd_write>
   2203c:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   22040:	e0bfff17 	ldw	r2,-4(fp)
   22044:	10001726 	beq	r2,zero,220a4 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   22048:	e0bff917 	ldw	r2,-28(fp)
   2204c:	1089c424 	muli	r2,r2,10000
   22050:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   22054:	00000d06 	br	2208c <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   22058:	e0bffe17 	ldw	r2,-8(fp)
   2205c:	108002a8 	cmpgeui	r2,r2,10
   22060:	1000021e 	bne	r2,zero,2206c <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   22064:	0109c404 	movi	r4,10000
   22068:	0023c740 	call	23c74 <alt_busy_sleep>
            if (--timeout == 0)
   2206c:	e0bffe17 	ldw	r2,-8(fp)
   22070:	10bfffc4 	addi	r2,r2,-1
   22074:	e0bffe15 	stw	r2,-8(fp)
   22078:	e0bffe17 	ldw	r2,-8(fp)
   2207c:	1000031e 	bne	r2,zero,2208c <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   22080:	00bfff84 	movi	r2,-2
   22084:	e0bfff15 	stw	r2,-4(fp)
               break;
   22088:	00000306 	br	22098 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2208c:	e13ffb17 	ldw	r4,-20(fp)
   22090:	0020fb80 	call	20fb8 <alt_avalon_i2c_is_busy>
   22094:	103ff01e 	bne	r2,zero,22058 <__alt_mem_mcu_subsystem_ram_0+0x78002058>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   22098:	e13ffb17 	ldw	r4,-20(fp)
   2209c:	0020c800 	call	20c80 <alt_avalon_i2c_disable>
   220a0:	00001406 	br	220f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   220a4:	e0bff703 	ldbu	r2,-36(fp)
   220a8:	10001226 	beq	r2,zero,220f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   220ac:	01400704 	movi	r5,28
   220b0:	e13ffb17 	ldw	r4,-20(fp)
   220b4:	00221a80 	call	221a8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   220b8:	000b883a 	mov	r5,zero
   220bc:	e13ffb17 	ldw	r4,-20(fp)
   220c0:	00223480 	call	22348 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   220c4:	e0bffc17 	ldw	r2,-16(fp)
   220c8:	00c00084 	movi	r3,2
   220cc:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   220d0:	e0bffc17 	ldw	r2,-16(fp)
   220d4:	e0fffa17 	ldw	r3,-24(fp)
   220d8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   220dc:	e0bffc17 	ldw	r2,-16(fp)
   220e0:	e0fff917 	ldw	r3,-28(fp)
   220e4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   220e8:	01400084 	movi	r5,2
   220ec:	e13ffb17 	ldw	r4,-20(fp)
   220f0:	00222500 	call	22250 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   220f4:	e0bfff17 	ldw	r2,-4(fp)
}
   220f8:	e037883a 	mov	sp,fp
   220fc:	dfc00117 	ldw	ra,4(sp)
   22100:	df000017 	ldw	fp,0(sp)
   22104:	dec00204 	addi	sp,sp,8
   22108:	f800283a 	ret

0002210c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2210c:	defffd04 	addi	sp,sp,-12
   22110:	df000215 	stw	fp,8(sp)
   22114:	df000204 	addi	fp,sp,8
   22118:	e13fff15 	stw	r4,-4(fp)
   2211c:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   22120:	e0bfff17 	ldw	r2,-4(fp)
   22124:	10800317 	ldw	r2,12(r2)
   22128:	10800404 	addi	r2,r2,16
   2212c:	10c00037 	ldwio	r3,0(r2)
   22130:	e0bfff17 	ldw	r2,-4(fp)
   22134:	10800317 	ldw	r2,12(r2)
   22138:	10800304 	addi	r2,r2,12
   2213c:	10800037 	ldwio	r2,0(r2)
   22140:	1884703a 	and	r2,r3,r2
   22144:	1007883a 	mov	r3,r2
   22148:	e0bffe17 	ldw	r2,-8(fp)
   2214c:	10c00015 	stw	r3,0(r2)
}
   22150:	0001883a 	nop
   22154:	e037883a 	mov	sp,fp
   22158:	df000017 	ldw	fp,0(sp)
   2215c:	dec00104 	addi	sp,sp,4
   22160:	f800283a 	ret

00022164 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   22164:	defffd04 	addi	sp,sp,-12
   22168:	df000215 	stw	fp,8(sp)
   2216c:	df000204 	addi	fp,sp,8
   22170:	e13fff15 	stw	r4,-4(fp)
   22174:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   22178:	e0bfff17 	ldw	r2,-4(fp)
   2217c:	10800317 	ldw	r2,12(r2)
   22180:	10800404 	addi	r2,r2,16
   22184:	10800037 	ldwio	r2,0(r2)
   22188:	1007883a 	mov	r3,r2
   2218c:	e0bffe17 	ldw	r2,-8(fp)
   22190:	10c00015 	stw	r3,0(r2)
}
   22194:	0001883a 	nop
   22198:	e037883a 	mov	sp,fp
   2219c:	df000017 	ldw	fp,0(sp)
   221a0:	dec00104 	addi	sp,sp,4
   221a4:	f800283a 	ret

000221a8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   221a8:	defffd04 	addi	sp,sp,-12
   221ac:	df000215 	stw	fp,8(sp)
   221b0:	df000204 	addi	fp,sp,8
   221b4:	e13fff15 	stw	r4,-4(fp)
   221b8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   221bc:	e0bfff17 	ldw	r2,-4(fp)
   221c0:	10800317 	ldw	r2,12(r2)
   221c4:	10800404 	addi	r2,r2,16
   221c8:	e0fffe17 	ldw	r3,-8(fp)
   221cc:	10c00035 	stwio	r3,0(r2)
}
   221d0:	0001883a 	nop
   221d4:	e037883a 	mov	sp,fp
   221d8:	df000017 	ldw	fp,0(sp)
   221dc:	dec00104 	addi	sp,sp,4
   221e0:	f800283a 	ret

000221e4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   221e4:	defffb04 	addi	sp,sp,-20
   221e8:	dfc00415 	stw	ra,16(sp)
   221ec:	df000315 	stw	fp,12(sp)
   221f0:	df000304 	addi	fp,sp,12
   221f4:	e13ffe15 	stw	r4,-8(fp)
   221f8:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   221fc:	e0bfff04 	addi	r2,fp,-4
   22200:	100b883a 	mov	r5,r2
   22204:	e13ffe17 	ldw	r4,-8(fp)
   22208:	00222b80 	call	222b8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2220c:	e0bffd17 	ldw	r2,-12(fp)
   22210:	0086303a 	nor	r3,zero,r2
   22214:	e0bfff17 	ldw	r2,-4(fp)
   22218:	1884703a 	and	r2,r3,r2
   2221c:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22220:	e0bffe17 	ldw	r2,-8(fp)
   22224:	10800317 	ldw	r2,12(r2)
   22228:	10800304 	addi	r2,r2,12
   2222c:	e0ffff17 	ldw	r3,-4(fp)
   22230:	18c007cc 	andi	r3,r3,31
   22234:	10c00035 	stwio	r3,0(r2)
}
   22238:	0001883a 	nop
   2223c:	e037883a 	mov	sp,fp
   22240:	dfc00117 	ldw	ra,4(sp)
   22244:	df000017 	ldw	fp,0(sp)
   22248:	dec00204 	addi	sp,sp,8
   2224c:	f800283a 	ret

00022250 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   22250:	defffb04 	addi	sp,sp,-20
   22254:	dfc00415 	stw	ra,16(sp)
   22258:	df000315 	stw	fp,12(sp)
   2225c:	df000304 	addi	fp,sp,12
   22260:	e13ffe15 	stw	r4,-8(fp)
   22264:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   22268:	e0bfff04 	addi	r2,fp,-4
   2226c:	100b883a 	mov	r5,r2
   22270:	e13ffe17 	ldw	r4,-8(fp)
   22274:	00222b80 	call	222b8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   22278:	e0ffff17 	ldw	r3,-4(fp)
   2227c:	e0bffd17 	ldw	r2,-12(fp)
   22280:	1884b03a 	or	r2,r3,r2
   22284:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   22288:	e0bffe17 	ldw	r2,-8(fp)
   2228c:	10800317 	ldw	r2,12(r2)
   22290:	10800304 	addi	r2,r2,12
   22294:	e0ffff17 	ldw	r3,-4(fp)
   22298:	18c007cc 	andi	r3,r3,31
   2229c:	10c00035 	stwio	r3,0(r2)
}
   222a0:	0001883a 	nop
   222a4:	e037883a 	mov	sp,fp
   222a8:	dfc00117 	ldw	ra,4(sp)
   222ac:	df000017 	ldw	fp,0(sp)
   222b0:	dec00204 	addi	sp,sp,8
   222b4:	f800283a 	ret

000222b8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   222b8:	defffd04 	addi	sp,sp,-12
   222bc:	df000215 	stw	fp,8(sp)
   222c0:	df000204 	addi	fp,sp,8
   222c4:	e13fff15 	stw	r4,-4(fp)
   222c8:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   222cc:	e0bfff17 	ldw	r2,-4(fp)
   222d0:	10800317 	ldw	r2,12(r2)
   222d4:	10800304 	addi	r2,r2,12
   222d8:	10800037 	ldwio	r2,0(r2)
   222dc:	10c007cc 	andi	r3,r2,31
   222e0:	e0bffe17 	ldw	r2,-8(fp)
   222e4:	10c00015 	stw	r3,0(r2)
}
   222e8:	0001883a 	nop
   222ec:	e037883a 	mov	sp,fp
   222f0:	df000017 	ldw	fp,0(sp)
   222f4:	dec00104 	addi	sp,sp,4
   222f8:	f800283a 	ret

000222fc <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   222fc:	defffd04 	addi	sp,sp,-12
   22300:	df000215 	stw	fp,8(sp)
   22304:	df000204 	addi	fp,sp,8
   22308:	e13fff15 	stw	r4,-4(fp)
   2230c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   22310:	e0bfff17 	ldw	r2,-4(fp)
   22314:	10800317 	ldw	r2,12(r2)
   22318:	10800204 	addi	r2,r2,8
   2231c:	10800037 	ldwio	r2,0(r2)
   22320:	1005d13a 	srai	r2,r2,4
   22324:	108000cc 	andi	r2,r2,3
   22328:	1007883a 	mov	r3,r2
   2232c:	e0bffe17 	ldw	r2,-8(fp)
   22330:	10c00015 	stw	r3,0(r2)
}
   22334:	0001883a 	nop
   22338:	e037883a 	mov	sp,fp
   2233c:	df000017 	ldw	fp,0(sp)
   22340:	dec00104 	addi	sp,sp,4
   22344:	f800283a 	ret

00022348 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   22348:	defffd04 	addi	sp,sp,-12
   2234c:	df000215 	stw	fp,8(sp)
   22350:	df000204 	addi	fp,sp,8
   22354:	e13fff15 	stw	r4,-4(fp)
   22358:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2235c:	e0bfff17 	ldw	r2,-4(fp)
   22360:	10800317 	ldw	r2,12(r2)
   22364:	10800204 	addi	r2,r2,8
   22368:	e0ffff17 	ldw	r3,-4(fp)
   2236c:	18c00317 	ldw	r3,12(r3)
   22370:	18c00204 	addi	r3,r3,8
   22374:	18c00037 	ldwio	r3,0(r3)
   22378:	1809883a 	mov	r4,r3
   2237c:	00fff3c4 	movi	r3,-49
   22380:	20c8703a 	and	r4,r4,r3
   22384:	e0fffe17 	ldw	r3,-8(fp)
   22388:	1806913a 	slli	r3,r3,4
   2238c:	18c00c0c 	andi	r3,r3,48
   22390:	20c6b03a 	or	r3,r4,r3
   22394:	10c00035 	stwio	r3,0(r2)
}
   22398:	0001883a 	nop
   2239c:	e037883a 	mov	sp,fp
   223a0:	df000017 	ldw	fp,0(sp)
   223a4:	dec00104 	addi	sp,sp,4
   223a8:	f800283a 	ret

000223ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   223ac:	defffd04 	addi	sp,sp,-12
   223b0:	df000215 	stw	fp,8(sp)
   223b4:	df000204 	addi	fp,sp,8
   223b8:	e13fff15 	stw	r4,-4(fp)
   223bc:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   223c0:	e0bfff17 	ldw	r2,-4(fp)
   223c4:	10800317 	ldw	r2,12(r2)
   223c8:	10800204 	addi	r2,r2,8
   223cc:	10800037 	ldwio	r2,0(r2)
   223d0:	1005d0ba 	srai	r2,r2,2
   223d4:	108000cc 	andi	r2,r2,3
   223d8:	1007883a 	mov	r3,r2
   223dc:	e0bffe17 	ldw	r2,-8(fp)
   223e0:	10c00015 	stw	r3,0(r2)
}
   223e4:	0001883a 	nop
   223e8:	e037883a 	mov	sp,fp
   223ec:	df000017 	ldw	fp,0(sp)
   223f0:	dec00104 	addi	sp,sp,4
   223f4:	f800283a 	ret

000223f8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   223f8:	defffd04 	addi	sp,sp,-12
   223fc:	df000215 	stw	fp,8(sp)
   22400:	df000204 	addi	fp,sp,8
   22404:	e13fff15 	stw	r4,-4(fp)
   22408:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2240c:	e0bfff17 	ldw	r2,-4(fp)
   22410:	10800317 	ldw	r2,12(r2)
   22414:	10800204 	addi	r2,r2,8
   22418:	e0ffff17 	ldw	r3,-4(fp)
   2241c:	18c00317 	ldw	r3,12(r3)
   22420:	18c00204 	addi	r3,r3,8
   22424:	18c00037 	ldwio	r3,0(r3)
   22428:	1809883a 	mov	r4,r3
   2242c:	00fffcc4 	movi	r3,-13
   22430:	20c8703a 	and	r4,r4,r3
   22434:	e0fffe17 	ldw	r3,-8(fp)
   22438:	180690ba 	slli	r3,r3,2
   2243c:	18c0030c 	andi	r3,r3,12
   22440:	20c6b03a 	or	r3,r4,r3
   22444:	10c00035 	stwio	r3,0(r2)
}
   22448:	0001883a 	nop
   2244c:	e037883a 	mov	sp,fp
   22450:	df000017 	ldw	fp,0(sp)
   22454:	dec00104 	addi	sp,sp,4
   22458:	f800283a 	ret

0002245c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2245c:	defffa04 	addi	sp,sp,-24
   22460:	dfc00515 	stw	ra,20(sp)
   22464:	df000415 	stw	fp,16(sp)
   22468:	df000404 	addi	fp,sp,16
   2246c:	e13ffe15 	stw	r4,-8(fp)
   22470:	e17ffd15 	stw	r5,-12(fp)
   22474:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22478:	e0bffe17 	ldw	r2,-8(fp)
   2247c:	10800017 	ldw	r2,0(r2)
   22480:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22484:	e0bfff17 	ldw	r2,-4(fp)
   22488:	10c00a04 	addi	r3,r2,40
   2248c:	e0bffe17 	ldw	r2,-8(fp)
   22490:	10800217 	ldw	r2,8(r2)
   22494:	100f883a 	mov	r7,r2
   22498:	e1bffc17 	ldw	r6,-16(fp)
   2249c:	e17ffd17 	ldw	r5,-12(fp)
   224a0:	1809883a 	mov	r4,r3
   224a4:	0022a900 	call	22a90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   224a8:	e037883a 	mov	sp,fp
   224ac:	dfc00117 	ldw	ra,4(sp)
   224b0:	df000017 	ldw	fp,0(sp)
   224b4:	dec00204 	addi	sp,sp,8
   224b8:	f800283a 	ret

000224bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   224bc:	defffa04 	addi	sp,sp,-24
   224c0:	dfc00515 	stw	ra,20(sp)
   224c4:	df000415 	stw	fp,16(sp)
   224c8:	df000404 	addi	fp,sp,16
   224cc:	e13ffe15 	stw	r4,-8(fp)
   224d0:	e17ffd15 	stw	r5,-12(fp)
   224d4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   224d8:	e0bffe17 	ldw	r2,-8(fp)
   224dc:	10800017 	ldw	r2,0(r2)
   224e0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   224e4:	e0bfff17 	ldw	r2,-4(fp)
   224e8:	10c00a04 	addi	r3,r2,40
   224ec:	e0bffe17 	ldw	r2,-8(fp)
   224f0:	10800217 	ldw	r2,8(r2)
   224f4:	100f883a 	mov	r7,r2
   224f8:	e1bffc17 	ldw	r6,-16(fp)
   224fc:	e17ffd17 	ldw	r5,-12(fp)
   22500:	1809883a 	mov	r4,r3
   22504:	0022cac0 	call	22cac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   22508:	e037883a 	mov	sp,fp
   2250c:	dfc00117 	ldw	ra,4(sp)
   22510:	df000017 	ldw	fp,0(sp)
   22514:	dec00204 	addi	sp,sp,8
   22518:	f800283a 	ret

0002251c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2251c:	defffc04 	addi	sp,sp,-16
   22520:	dfc00315 	stw	ra,12(sp)
   22524:	df000215 	stw	fp,8(sp)
   22528:	df000204 	addi	fp,sp,8
   2252c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22530:	e0bffe17 	ldw	r2,-8(fp)
   22534:	10800017 	ldw	r2,0(r2)
   22538:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2253c:	e0bfff17 	ldw	r2,-4(fp)
   22540:	10c00a04 	addi	r3,r2,40
   22544:	e0bffe17 	ldw	r2,-8(fp)
   22548:	10800217 	ldw	r2,8(r2)
   2254c:	100b883a 	mov	r5,r2
   22550:	1809883a 	mov	r4,r3
   22554:	00229380 	call	22938 <altera_avalon_jtag_uart_close>
}
   22558:	e037883a 	mov	sp,fp
   2255c:	dfc00117 	ldw	ra,4(sp)
   22560:	df000017 	ldw	fp,0(sp)
   22564:	dec00204 	addi	sp,sp,8
   22568:	f800283a 	ret

0002256c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2256c:	defffa04 	addi	sp,sp,-24
   22570:	dfc00515 	stw	ra,20(sp)
   22574:	df000415 	stw	fp,16(sp)
   22578:	df000404 	addi	fp,sp,16
   2257c:	e13ffe15 	stw	r4,-8(fp)
   22580:	e17ffd15 	stw	r5,-12(fp)
   22584:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   22588:	e0bffe17 	ldw	r2,-8(fp)
   2258c:	10800017 	ldw	r2,0(r2)
   22590:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   22594:	e0bfff17 	ldw	r2,-4(fp)
   22598:	10800a04 	addi	r2,r2,40
   2259c:	e1bffc17 	ldw	r6,-16(fp)
   225a0:	e17ffd17 	ldw	r5,-12(fp)
   225a4:	1009883a 	mov	r4,r2
   225a8:	00229a00 	call	229a0 <altera_avalon_jtag_uart_ioctl>
}
   225ac:	e037883a 	mov	sp,fp
   225b0:	dfc00117 	ldw	ra,4(sp)
   225b4:	df000017 	ldw	fp,0(sp)
   225b8:	dec00204 	addi	sp,sp,8
   225bc:	f800283a 	ret

000225c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   225c0:	defffa04 	addi	sp,sp,-24
   225c4:	dfc00515 	stw	ra,20(sp)
   225c8:	df000415 	stw	fp,16(sp)
   225cc:	df000404 	addi	fp,sp,16
   225d0:	e13fff15 	stw	r4,-4(fp)
   225d4:	e17ffe15 	stw	r5,-8(fp)
   225d8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   225dc:	e0bfff17 	ldw	r2,-4(fp)
   225e0:	00c00044 	movi	r3,1
   225e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   225e8:	e0bfff17 	ldw	r2,-4(fp)
   225ec:	10800017 	ldw	r2,0(r2)
   225f0:	10800104 	addi	r2,r2,4
   225f4:	1007883a 	mov	r3,r2
   225f8:	e0bfff17 	ldw	r2,-4(fp)
   225fc:	10800817 	ldw	r2,32(r2)
   22600:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   22604:	e0bffe17 	ldw	r2,-8(fp)
   22608:	e0fffd17 	ldw	r3,-12(fp)
   2260c:	d8000015 	stw	zero,0(sp)
   22610:	e1ffff17 	ldw	r7,-4(fp)
   22614:	018000b4 	movhi	r6,2
   22618:	3189a004 	addi	r6,r6,9856
   2261c:	180b883a 	mov	r5,r3
   22620:	1009883a 	mov	r4,r2
   22624:	00241840 	call	24184 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   22628:	e0bfff17 	ldw	r2,-4(fp)
   2262c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   22630:	e0bfff17 	ldw	r2,-4(fp)
   22634:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   22638:	d0e78017 	ldw	r3,-25088(gp)
   2263c:	e1ffff17 	ldw	r7,-4(fp)
   22640:	018000b4 	movhi	r6,2
   22644:	318a2404 	addi	r6,r6,10384
   22648:	180b883a 	mov	r5,r3
   2264c:	1009883a 	mov	r4,r2
   22650:	0023b1c0 	call	23b1c <alt_alarm_start>
   22654:	1000040e 	bge	r2,zero,22668 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   22658:	e0ffff17 	ldw	r3,-4(fp)
   2265c:	00a00034 	movhi	r2,32768
   22660:	10bfffc4 	addi	r2,r2,-1
   22664:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   22668:	0001883a 	nop
   2266c:	e037883a 	mov	sp,fp
   22670:	dfc00117 	ldw	ra,4(sp)
   22674:	df000017 	ldw	fp,0(sp)
   22678:	dec00204 	addi	sp,sp,8
   2267c:	f800283a 	ret

00022680 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22680:	defff704 	addi	sp,sp,-36
   22684:	df000815 	stw	fp,32(sp)
   22688:	df000804 	addi	fp,sp,32
   2268c:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22690:	e0bff817 	ldw	r2,-32(fp)
   22694:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   22698:	e0bffc17 	ldw	r2,-16(fp)
   2269c:	10800017 	ldw	r2,0(r2)
   226a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   226a4:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   226a8:	e0bffb17 	ldw	r2,-20(fp)
   226ac:	10800104 	addi	r2,r2,4
   226b0:	10800037 	ldwio	r2,0(r2)
   226b4:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   226b8:	e0bffa17 	ldw	r2,-24(fp)
   226bc:	1080c00c 	andi	r2,r2,768
   226c0:	10006d26 	beq	r2,zero,22878 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   226c4:	e0bffa17 	ldw	r2,-24(fp)
   226c8:	1080400c 	andi	r2,r2,256
   226cc:	10003426 	beq	r2,zero,227a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   226d0:	00800074 	movhi	r2,1
   226d4:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   226d8:	e0bffc17 	ldw	r2,-16(fp)
   226dc:	10800a17 	ldw	r2,40(r2)
   226e0:	10800044 	addi	r2,r2,1
   226e4:	1081ffcc 	andi	r2,r2,2047
   226e8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   226ec:	e0bffc17 	ldw	r2,-16(fp)
   226f0:	10800b17 	ldw	r2,44(r2)
   226f4:	e0fff917 	ldw	r3,-28(fp)
   226f8:	18801426 	beq	r3,r2,2274c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   226fc:	e0bffb17 	ldw	r2,-20(fp)
   22700:	10800037 	ldwio	r2,0(r2)
   22704:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   22708:	e0bffe17 	ldw	r2,-8(fp)
   2270c:	10a0000c 	andi	r2,r2,32768
   22710:	10001026 	beq	r2,zero,22754 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22714:	e0bffc17 	ldw	r2,-16(fp)
   22718:	10800a17 	ldw	r2,40(r2)
   2271c:	e0fffe17 	ldw	r3,-8(fp)
   22720:	1809883a 	mov	r4,r3
   22724:	e0fffc17 	ldw	r3,-16(fp)
   22728:	1885883a 	add	r2,r3,r2
   2272c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22730:	e0bffc17 	ldw	r2,-16(fp)
   22734:	10800a17 	ldw	r2,40(r2)
   22738:	10800044 	addi	r2,r2,1
   2273c:	10c1ffcc 	andi	r3,r2,2047
   22740:	e0bffc17 	ldw	r2,-16(fp)
   22744:	10c00a15 	stw	r3,40(r2)
      {
   22748:	003fe306 	br	226d8 <__alt_mem_mcu_subsystem_ram_0+0x780026d8>
          break;
   2274c:	0001883a 	nop
   22750:	00000106 	br	22758 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   22754:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22758:	e0bffe17 	ldw	r2,-8(fp)
   2275c:	10bfffec 	andhi	r2,r2,65535
   22760:	10000f26 	beq	r2,zero,227a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22764:	e0bffc17 	ldw	r2,-16(fp)
   22768:	10c00817 	ldw	r3,32(r2)
   2276c:	00bfff84 	movi	r2,-2
   22770:	1886703a 	and	r3,r3,r2
   22774:	e0bffc17 	ldw	r2,-16(fp)
   22778:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2277c:	e0bffb17 	ldw	r2,-20(fp)
   22780:	10800104 	addi	r2,r2,4
   22784:	1007883a 	mov	r3,r2
   22788:	e0bffc17 	ldw	r2,-16(fp)
   2278c:	10800817 	ldw	r2,32(r2)
   22790:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22794:	e0bffb17 	ldw	r2,-20(fp)
   22798:	10800104 	addi	r2,r2,4
   2279c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   227a0:	e0bffa17 	ldw	r2,-24(fp)
   227a4:	1080800c 	andi	r2,r2,512
   227a8:	103fbf26 	beq	r2,zero,226a8 <__alt_mem_mcu_subsystem_ram_0+0x780026a8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   227ac:	e0bffa17 	ldw	r2,-24(fp)
   227b0:	1004d43a 	srli	r2,r2,16
   227b4:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   227b8:	00001506 	br	22810 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   227bc:	e0bffb17 	ldw	r2,-20(fp)
   227c0:	e0fffc17 	ldw	r3,-16(fp)
   227c4:	18c00d17 	ldw	r3,52(r3)
   227c8:	e13ffc17 	ldw	r4,-16(fp)
   227cc:	20c7883a 	add	r3,r4,r3
   227d0:	18c20e03 	ldbu	r3,2104(r3)
   227d4:	18c03fcc 	andi	r3,r3,255
   227d8:	18c0201c 	xori	r3,r3,128
   227dc:	18ffe004 	addi	r3,r3,-128
   227e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   227e4:	e0bffc17 	ldw	r2,-16(fp)
   227e8:	10800d17 	ldw	r2,52(r2)
   227ec:	10800044 	addi	r2,r2,1
   227f0:	10c1ffcc 	andi	r3,r2,2047
   227f4:	e0bffc17 	ldw	r2,-16(fp)
   227f8:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   227fc:	00800044 	movi	r2,1
   22800:	e0bfff15 	stw	r2,-4(fp)

        space--;
   22804:	e0bffd17 	ldw	r2,-12(fp)
   22808:	10bfffc4 	addi	r2,r2,-1
   2280c:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   22810:	e0bffd17 	ldw	r2,-12(fp)
   22814:	10000526 	beq	r2,zero,2282c <altera_avalon_jtag_uart_irq+0x1ac>
   22818:	e0bffc17 	ldw	r2,-16(fp)
   2281c:	10c00d17 	ldw	r3,52(r2)
   22820:	e0bffc17 	ldw	r2,-16(fp)
   22824:	10800c17 	ldw	r2,48(r2)
   22828:	18bfe41e 	bne	r3,r2,227bc <__alt_mem_mcu_subsystem_ram_0+0x780027bc>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
      }

      if (space > 0)
   2282c:	e0bffd17 	ldw	r2,-12(fp)
   22830:	103f9d26 	beq	r2,zero,226a8 <__alt_mem_mcu_subsystem_ram_0+0x780026a8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22834:	e0bffc17 	ldw	r2,-16(fp)
   22838:	10c00817 	ldw	r3,32(r2)
   2283c:	00bfff44 	movi	r2,-3
   22840:	1886703a 	and	r3,r3,r2
   22844:	e0bffc17 	ldw	r2,-16(fp)
   22848:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2284c:	e0bffc17 	ldw	r2,-16(fp)
   22850:	10800017 	ldw	r2,0(r2)
   22854:	10800104 	addi	r2,r2,4
   22858:	1007883a 	mov	r3,r2
   2285c:	e0bffc17 	ldw	r2,-16(fp)
   22860:	10800817 	ldw	r2,32(r2)
   22864:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22868:	e0bffb17 	ldw	r2,-20(fp)
   2286c:	10800104 	addi	r2,r2,4
   22870:	10800037 	ldwio	r2,0(r2)
  {
   22874:	003f8c06 	br	226a8 <__alt_mem_mcu_subsystem_ram_0+0x780026a8>
      break;
   22878:	0001883a 	nop
      }
    }
  }
}
   2287c:	0001883a 	nop
   22880:	e037883a 	mov	sp,fp
   22884:	df000017 	ldw	fp,0(sp)
   22888:	dec00104 	addi	sp,sp,4
   2288c:	f800283a 	ret

00022890 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22890:	defffc04 	addi	sp,sp,-16
   22894:	df000315 	stw	fp,12(sp)
   22898:	df000304 	addi	fp,sp,12
   2289c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   228a0:	e0bffd17 	ldw	r2,-12(fp)
   228a4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   228a8:	e0bfff17 	ldw	r2,-4(fp)
   228ac:	10800017 	ldw	r2,0(r2)
   228b0:	10800104 	addi	r2,r2,4
   228b4:	10800037 	ldwio	r2,0(r2)
   228b8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   228bc:	e0bffe17 	ldw	r2,-8(fp)
   228c0:	1081000c 	andi	r2,r2,1024
   228c4:	10000b26 	beq	r2,zero,228f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   228c8:	e0bfff17 	ldw	r2,-4(fp)
   228cc:	10800017 	ldw	r2,0(r2)
   228d0:	10800104 	addi	r2,r2,4
   228d4:	1007883a 	mov	r3,r2
   228d8:	e0bfff17 	ldw	r2,-4(fp)
   228dc:	10800817 	ldw	r2,32(r2)
   228e0:	10810014 	ori	r2,r2,1024
   228e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   228e8:	e0bfff17 	ldw	r2,-4(fp)
   228ec:	10000915 	stw	zero,36(r2)
   228f0:	00000c06 	br	22924 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   228f4:	e0bfff17 	ldw	r2,-4(fp)
   228f8:	10c00917 	ldw	r3,36(r2)
   228fc:	00a00034 	movhi	r2,32768
   22900:	10bfff04 	addi	r2,r2,-4
   22904:	10c00736 	bltu	r2,r3,22924 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   22908:	e0bfff17 	ldw	r2,-4(fp)
   2290c:	10800917 	ldw	r2,36(r2)
   22910:	10c00044 	addi	r3,r2,1
   22914:	e0bfff17 	ldw	r2,-4(fp)
   22918:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   2291c:	e0bfff17 	ldw	r2,-4(fp)
   22920:	10800917 	ldw	r2,36(r2)
   22924:	d0a78017 	ldw	r2,-25088(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   22928:	e037883a 	mov	sp,fp
   2292c:	df000017 	ldw	fp,0(sp)
   22930:	dec00104 	addi	sp,sp,4
   22934:	f800283a 	ret

00022938 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22938:	defffd04 	addi	sp,sp,-12
   2293c:	df000215 	stw	fp,8(sp)
   22940:	df000204 	addi	fp,sp,8
   22944:	e13fff15 	stw	r4,-4(fp)
   22948:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2294c:	00000506 	br	22964 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22950:	e0bffe17 	ldw	r2,-8(fp)
   22954:	1090000c 	andi	r2,r2,16384
   22958:	10000226 	beq	r2,zero,22964 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2295c:	00bffd44 	movi	r2,-11
   22960:	00000b06 	br	22990 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22964:	e0bfff17 	ldw	r2,-4(fp)
   22968:	10c00d17 	ldw	r3,52(r2)
   2296c:	e0bfff17 	ldw	r2,-4(fp)
   22970:	10800c17 	ldw	r2,48(r2)
   22974:	18800526 	beq	r3,r2,2298c <altera_avalon_jtag_uart_close+0x54>
   22978:	e0bfff17 	ldw	r2,-4(fp)
   2297c:	10c00917 	ldw	r3,36(r2)
   22980:	e0bfff17 	ldw	r2,-4(fp)
   22984:	10800117 	ldw	r2,4(r2)
   22988:	18bff136 	bltu	r3,r2,22950 <__alt_mem_mcu_subsystem_ram_0+0x78002950>
    }
  }

  return 0;
   2298c:	0005883a 	mov	r2,zero
}
   22990:	e037883a 	mov	sp,fp
   22994:	df000017 	ldw	fp,0(sp)
   22998:	dec00104 	addi	sp,sp,4
   2299c:	f800283a 	ret

000229a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   229a0:	defffa04 	addi	sp,sp,-24
   229a4:	df000515 	stw	fp,20(sp)
   229a8:	df000504 	addi	fp,sp,20
   229ac:	e13ffd15 	stw	r4,-12(fp)
   229b0:	e17ffc15 	stw	r5,-16(fp)
   229b4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   229b8:	00bff9c4 	movi	r2,-25
   229bc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   229c0:	e0bffc17 	ldw	r2,-16(fp)
   229c4:	10da8060 	cmpeqi	r3,r2,27137
   229c8:	1800031e 	bne	r3,zero,229d8 <altera_avalon_jtag_uart_ioctl+0x38>
   229cc:	109a80a0 	cmpeqi	r2,r2,27138
   229d0:	1000181e 	bne	r2,zero,22a34 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   229d4:	00002906 	br	22a7c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
   229d8:	e0bffd17 	ldw	r2,-12(fp)
   229dc:	10c00117 	ldw	r3,4(r2)
   229e0:	00a00034 	movhi	r2,32768
   229e4:	10bfffc4 	addi	r2,r2,-1
   229e8:	18802126 	beq	r3,r2,22a70 <altera_avalon_jtag_uart_ioctl+0xd0>
      int timeout = *((int *)arg);
   229ec:	e0bffb17 	ldw	r2,-20(fp)
   229f0:	10800017 	ldw	r2,0(r2)
   229f4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   229f8:	e0bffe17 	ldw	r2,-8(fp)
   229fc:	10800090 	cmplti	r2,r2,2
   22a00:	1000061e 	bne	r2,zero,22a1c <altera_avalon_jtag_uart_ioctl+0x7c>
   22a04:	e0fffe17 	ldw	r3,-8(fp)
   22a08:	00a00034 	movhi	r2,32768
   22a0c:	10bfffc4 	addi	r2,r2,-1
   22a10:	18800226 	beq	r3,r2,22a1c <altera_avalon_jtag_uart_ioctl+0x7c>
   22a14:	e0bffe17 	ldw	r2,-8(fp)
   22a18:	00000206 	br	22a24 <altera_avalon_jtag_uart_ioctl+0x84>
   22a1c:	00a00034 	movhi	r2,32768
   22a20:	10bfff84 	addi	r2,r2,-2
   22a24:	e0fffd17 	ldw	r3,-12(fp)
   22a28:	18800115 	stw	r2,4(r3)
      rc = 0;
   22a2c:	e03fff15 	stw	zero,-4(fp)
    break;
   22a30:	00000f06 	br	22a70 <altera_avalon_jtag_uart_ioctl+0xd0>
    if (sp->timeout != INT_MAX)
   22a34:	e0bffd17 	ldw	r2,-12(fp)
   22a38:	10c00117 	ldw	r3,4(r2)
   22a3c:	00a00034 	movhi	r2,32768
   22a40:	10bfffc4 	addi	r2,r2,-1
   22a44:	18800c26 	beq	r3,r2,22a78 <altera_avalon_jtag_uart_ioctl+0xd8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22a48:	e0bffd17 	ldw	r2,-12(fp)
   22a4c:	10c00917 	ldw	r3,36(r2)
   22a50:	e0bffd17 	ldw	r2,-12(fp)
   22a54:	10800117 	ldw	r2,4(r2)
   22a58:	1885803a 	cmpltu	r2,r3,r2
   22a5c:	10c03fcc 	andi	r3,r2,255
   22a60:	e0bffb17 	ldw	r2,-20(fp)
   22a64:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22a68:	e03fff15 	stw	zero,-4(fp)
    break;
   22a6c:	00000206 	br	22a78 <altera_avalon_jtag_uart_ioctl+0xd8>
    break;
   22a70:	0001883a 	nop
   22a74:	00000106 	br	22a7c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   22a78:	0001883a 	nop
  }

  return rc;
   22a7c:	e0bfff17 	ldw	r2,-4(fp)
}
   22a80:	e037883a 	mov	sp,fp
   22a84:	df000017 	ldw	fp,0(sp)
   22a88:	dec00104 	addi	sp,sp,4
   22a8c:	f800283a 	ret

00022a90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22a90:	defff304 	addi	sp,sp,-52
   22a94:	dfc00c15 	stw	ra,48(sp)
   22a98:	df000b15 	stw	fp,44(sp)
   22a9c:	df000b04 	addi	fp,sp,44
   22aa0:	e13ff815 	stw	r4,-32(fp)
   22aa4:	e17ff715 	stw	r5,-36(fp)
   22aa8:	e1bff615 	stw	r6,-40(fp)
   22aac:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   22ab0:	e0bff717 	ldw	r2,-36(fp)
   22ab4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   22ab8:	00004706 	br	22bd8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22abc:	e0bff817 	ldw	r2,-32(fp)
   22ac0:	10800a17 	ldw	r2,40(r2)
   22ac4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   22ac8:	e0bff817 	ldw	r2,-32(fp)
   22acc:	10800b17 	ldw	r2,44(r2)
   22ad0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   22ad4:	e0fffd17 	ldw	r3,-12(fp)
   22ad8:	e0bffc17 	ldw	r2,-16(fp)
   22adc:	18800536 	bltu	r3,r2,22af4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22ae0:	e0fffd17 	ldw	r3,-12(fp)
   22ae4:	e0bffc17 	ldw	r2,-16(fp)
   22ae8:	1885c83a 	sub	r2,r3,r2
   22aec:	e0bffe15 	stw	r2,-8(fp)
   22af0:	00000406 	br	22b04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22af4:	00c20004 	movi	r3,2048
   22af8:	e0bffc17 	ldw	r2,-16(fp)
   22afc:	1885c83a 	sub	r2,r3,r2
   22b00:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   22b04:	e0bffe17 	ldw	r2,-8(fp)
   22b08:	10001e26 	beq	r2,zero,22b84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   22b0c:	e0fff617 	ldw	r3,-40(fp)
   22b10:	e0bffe17 	ldw	r2,-8(fp)
   22b14:	1880022e 	bgeu	r3,r2,22b20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   22b18:	e0bff617 	ldw	r2,-40(fp)
   22b1c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22b20:	e0bff817 	ldw	r2,-32(fp)
   22b24:	10c00e04 	addi	r3,r2,56
   22b28:	e0bffc17 	ldw	r2,-16(fp)
   22b2c:	1885883a 	add	r2,r3,r2
   22b30:	e1bffe17 	ldw	r6,-8(fp)
   22b34:	100b883a 	mov	r5,r2
   22b38:	e13fff17 	ldw	r4,-4(fp)
   22b3c:	00106380 	call	10638 <memcpy>
      ptr   += n;
   22b40:	e0ffff17 	ldw	r3,-4(fp)
   22b44:	e0bffe17 	ldw	r2,-8(fp)
   22b48:	1885883a 	add	r2,r3,r2
   22b4c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   22b50:	e0fff617 	ldw	r3,-40(fp)
   22b54:	e0bffe17 	ldw	r2,-8(fp)
   22b58:	1885c83a 	sub	r2,r3,r2
   22b5c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22b60:	e0fffc17 	ldw	r3,-16(fp)
   22b64:	e0bffe17 	ldw	r2,-8(fp)
   22b68:	1885883a 	add	r2,r3,r2
   22b6c:	10c1ffcc 	andi	r3,r2,2047
   22b70:	e0bff817 	ldw	r2,-32(fp)
   22b74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   22b78:	e0bff617 	ldw	r2,-40(fp)
   22b7c:	00bfcf16 	blt	zero,r2,22abc <__alt_mem_mcu_subsystem_ram_0+0x78002abc>
   22b80:	00000106 	br	22b88 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   22b84:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   22b88:	e0ffff17 	ldw	r3,-4(fp)
   22b8c:	e0bff717 	ldw	r2,-36(fp)
   22b90:	1880141e 	bne	r3,r2,22be4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22b94:	e0bff517 	ldw	r2,-44(fp)
   22b98:	1090000c 	andi	r2,r2,16384
   22b9c:	1000131e 	bne	r2,zero,22bec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22ba0:	0001883a 	nop
   22ba4:	e0bff817 	ldw	r2,-32(fp)
   22ba8:	10800a17 	ldw	r2,40(r2)
   22bac:	e0fffd17 	ldw	r3,-12(fp)
   22bb0:	1880051e 	bne	r3,r2,22bc8 <altera_avalon_jtag_uart_read+0x138>
   22bb4:	e0bff817 	ldw	r2,-32(fp)
   22bb8:	10c00917 	ldw	r3,36(r2)
   22bbc:	e0bff817 	ldw	r2,-32(fp)
   22bc0:	10800117 	ldw	r2,4(r2)
   22bc4:	18bff736 	bltu	r3,r2,22ba4 <__alt_mem_mcu_subsystem_ram_0+0x78002ba4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22bc8:	e0bff817 	ldw	r2,-32(fp)
   22bcc:	10800a17 	ldw	r2,40(r2)
   22bd0:	e0fffd17 	ldw	r3,-12(fp)
   22bd4:	18800726 	beq	r3,r2,22bf4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   22bd8:	e0bff617 	ldw	r2,-40(fp)
   22bdc:	00bfb716 	blt	zero,r2,22abc <__alt_mem_mcu_subsystem_ram_0+0x78002abc>
   22be0:	00000506 	br	22bf8 <altera_avalon_jtag_uart_read+0x168>
      break;
   22be4:	0001883a 	nop
   22be8:	00000306 	br	22bf8 <altera_avalon_jtag_uart_read+0x168>
      break;
   22bec:	0001883a 	nop
   22bf0:	00000106 	br	22bf8 <altera_avalon_jtag_uart_read+0x168>
      break;
   22bf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   22bf8:	e0ffff17 	ldw	r3,-4(fp)
   22bfc:	e0bff717 	ldw	r2,-36(fp)
   22c00:	18801826 	beq	r3,r2,22c64 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
   22c04:	0005303a 	rdctl	r2,status
   22c08:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c0c:	e0fff917 	ldw	r3,-28(fp)
   22c10:	00bfff84 	movi	r2,-2
   22c14:	1884703a 	and	r2,r3,r2
   22c18:	1001703a 	wrctl	status,r2
  return context;
   22c1c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22c20:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22c24:	e0bff817 	ldw	r2,-32(fp)
   22c28:	10800817 	ldw	r2,32(r2)
   22c2c:	10c00054 	ori	r3,r2,1
   22c30:	e0bff817 	ldw	r2,-32(fp)
   22c34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22c38:	e0bff817 	ldw	r2,-32(fp)
   22c3c:	10800017 	ldw	r2,0(r2)
   22c40:	10800104 	addi	r2,r2,4
   22c44:	1007883a 	mov	r3,r2
   22c48:	e0bff817 	ldw	r2,-32(fp)
   22c4c:	10800817 	ldw	r2,32(r2)
   22c50:	18800035 	stwio	r2,0(r3)
   22c54:	e0bffb17 	ldw	r2,-20(fp)
   22c58:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   22c5c:	e0bffa17 	ldw	r2,-24(fp)
   22c60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   22c64:	e0ffff17 	ldw	r3,-4(fp)
   22c68:	e0bff717 	ldw	r2,-36(fp)
   22c6c:	18800426 	beq	r3,r2,22c80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   22c70:	e0ffff17 	ldw	r3,-4(fp)
   22c74:	e0bff717 	ldw	r2,-36(fp)
   22c78:	1885c83a 	sub	r2,r3,r2
   22c7c:	00000606 	br	22c98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   22c80:	e0bff517 	ldw	r2,-44(fp)
   22c84:	1090000c 	andi	r2,r2,16384
   22c88:	10000226 	beq	r2,zero,22c94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   22c8c:	00bffd44 	movi	r2,-11
   22c90:	00000106 	br	22c98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   22c94:	00bffec4 	movi	r2,-5
}
   22c98:	e037883a 	mov	sp,fp
   22c9c:	dfc00117 	ldw	ra,4(sp)
   22ca0:	df000017 	ldw	fp,0(sp)
   22ca4:	dec00204 	addi	sp,sp,8
   22ca8:	f800283a 	ret

00022cac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22cac:	defff304 	addi	sp,sp,-52
   22cb0:	dfc00c15 	stw	ra,48(sp)
   22cb4:	df000b15 	stw	fp,44(sp)
   22cb8:	df000b04 	addi	fp,sp,44
   22cbc:	e13ff815 	stw	r4,-32(fp)
   22cc0:	e17ff715 	stw	r5,-36(fp)
   22cc4:	e1bff615 	stw	r6,-40(fp)
   22cc8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   22ccc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   22cd0:	e0bff717 	ldw	r2,-36(fp)
   22cd4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22cd8:	00003706 	br	22db8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   22cdc:	e0bff817 	ldw	r2,-32(fp)
   22ce0:	10800c17 	ldw	r2,48(r2)
   22ce4:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   22ce8:	e0bff817 	ldw	r2,-32(fp)
   22cec:	10800d17 	ldw	r2,52(r2)
   22cf0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   22cf4:	e0fffc17 	ldw	r3,-16(fp)
   22cf8:	e0bfff17 	ldw	r2,-4(fp)
   22cfc:	1880062e 	bgeu	r3,r2,22d18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   22d00:	e0ffff17 	ldw	r3,-4(fp)
   22d04:	e0bffc17 	ldw	r2,-16(fp)
   22d08:	1885c83a 	sub	r2,r3,r2
   22d0c:	10bfffc4 	addi	r2,r2,-1
   22d10:	e0bffe15 	stw	r2,-8(fp)
   22d14:	00000b06 	br	22d44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   22d18:	e0bfff17 	ldw	r2,-4(fp)
   22d1c:	10000526 	beq	r2,zero,22d34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   22d20:	00c20004 	movi	r3,2048
   22d24:	e0bffc17 	ldw	r2,-16(fp)
   22d28:	1885c83a 	sub	r2,r3,r2
   22d2c:	e0bffe15 	stw	r2,-8(fp)
   22d30:	00000406 	br	22d44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   22d34:	00c1ffc4 	movi	r3,2047
   22d38:	e0bffc17 	ldw	r2,-16(fp)
   22d3c:	1885c83a 	sub	r2,r3,r2
   22d40:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   22d44:	e0bffe17 	ldw	r2,-8(fp)
   22d48:	10001e26 	beq	r2,zero,22dc4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   22d4c:	e0fff617 	ldw	r3,-40(fp)
   22d50:	e0bffe17 	ldw	r2,-8(fp)
   22d54:	1880022e 	bgeu	r3,r2,22d60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   22d58:	e0bff617 	ldw	r2,-40(fp)
   22d5c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   22d60:	e0bff817 	ldw	r2,-32(fp)
   22d64:	10c20e04 	addi	r3,r2,2104
   22d68:	e0bffc17 	ldw	r2,-16(fp)
   22d6c:	1885883a 	add	r2,r3,r2
   22d70:	e1bffe17 	ldw	r6,-8(fp)
   22d74:	e17ff717 	ldw	r5,-36(fp)
   22d78:	1009883a 	mov	r4,r2
   22d7c:	00106380 	call	10638 <memcpy>
      ptr   += n;
   22d80:	e0fff717 	ldw	r3,-36(fp)
   22d84:	e0bffe17 	ldw	r2,-8(fp)
   22d88:	1885883a 	add	r2,r3,r2
   22d8c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   22d90:	e0fff617 	ldw	r3,-40(fp)
   22d94:	e0bffe17 	ldw	r2,-8(fp)
   22d98:	1885c83a 	sub	r2,r3,r2
   22d9c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22da0:	e0fffc17 	ldw	r3,-16(fp)
   22da4:	e0bffe17 	ldw	r2,-8(fp)
   22da8:	1885883a 	add	r2,r3,r2
   22dac:	10c1ffcc 	andi	r3,r2,2047
   22db0:	e0bff817 	ldw	r2,-32(fp)
   22db4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   22db8:	e0bff617 	ldw	r2,-40(fp)
   22dbc:	00bfc716 	blt	zero,r2,22cdc <__alt_mem_mcu_subsystem_ram_0+0x78002cdc>
   22dc0:	00000106 	br	22dc8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   22dc4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   22dc8:	0005303a 	rdctl	r2,status
   22dcc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22dd0:	e0fff917 	ldw	r3,-28(fp)
   22dd4:	00bfff84 	movi	r2,-2
   22dd8:	1884703a 	and	r2,r3,r2
   22ddc:	1001703a 	wrctl	status,r2
  return context;
   22de0:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   22de4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22de8:	e0bff817 	ldw	r2,-32(fp)
   22dec:	10800817 	ldw	r2,32(r2)
   22df0:	10c00094 	ori	r3,r2,2
   22df4:	e0bff817 	ldw	r2,-32(fp)
   22df8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22dfc:	e0bff817 	ldw	r2,-32(fp)
   22e00:	10800017 	ldw	r2,0(r2)
   22e04:	10800104 	addi	r2,r2,4
   22e08:	1007883a 	mov	r3,r2
   22e0c:	e0bff817 	ldw	r2,-32(fp)
   22e10:	10800817 	ldw	r2,32(r2)
   22e14:	18800035 	stwio	r2,0(r3)
   22e18:	e0bffb17 	ldw	r2,-20(fp)
   22e1c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   22e20:	e0bffa17 	ldw	r2,-24(fp)
   22e24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   22e28:	e0bff617 	ldw	r2,-40(fp)
   22e2c:	0080100e 	bge	zero,r2,22e70 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   22e30:	e0bff517 	ldw	r2,-44(fp)
   22e34:	1090000c 	andi	r2,r2,16384
   22e38:	1000101e 	bne	r2,zero,22e7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   22e3c:	0001883a 	nop
   22e40:	e0bff817 	ldw	r2,-32(fp)
   22e44:	10800d17 	ldw	r2,52(r2)
   22e48:	e0ffff17 	ldw	r3,-4(fp)
   22e4c:	1880051e 	bne	r3,r2,22e64 <altera_avalon_jtag_uart_write+0x1b8>
   22e50:	e0bff817 	ldw	r2,-32(fp)
   22e54:	10c00917 	ldw	r3,36(r2)
   22e58:	e0bff817 	ldw	r2,-32(fp)
   22e5c:	10800117 	ldw	r2,4(r2)
   22e60:	18bff736 	bltu	r3,r2,22e40 <__alt_mem_mcu_subsystem_ram_0+0x78002e40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   22e64:	e0bff817 	ldw	r2,-32(fp)
   22e68:	10800917 	ldw	r2,36(r2)
   22e6c:	1000051e 	bne	r2,zero,22e84 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   22e70:	e0bff617 	ldw	r2,-40(fp)
   22e74:	00bfd016 	blt	zero,r2,22db8 <__alt_mem_mcu_subsystem_ram_0+0x78002db8>
   22e78:	00000306 	br	22e88 <altera_avalon_jtag_uart_write+0x1dc>
        break;
   22e7c:	0001883a 	nop
   22e80:	00000106 	br	22e88 <altera_avalon_jtag_uart_write+0x1dc>
         break;
   22e84:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   22e88:	e0fff717 	ldw	r3,-36(fp)
   22e8c:	e0bffd17 	ldw	r2,-12(fp)
   22e90:	18800426 	beq	r3,r2,22ea4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   22e94:	e0fff717 	ldw	r3,-36(fp)
   22e98:	e0bffd17 	ldw	r2,-12(fp)
   22e9c:	1885c83a 	sub	r2,r3,r2
   22ea0:	00000606 	br	22ebc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   22ea4:	e0bff517 	ldw	r2,-44(fp)
   22ea8:	1090000c 	andi	r2,r2,16384
   22eac:	10000226 	beq	r2,zero,22eb8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   22eb0:	00bffd44 	movi	r2,-11
   22eb4:	00000106 	br	22ebc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   22eb8:	00bffec4 	movi	r2,-5
}
   22ebc:	e037883a 	mov	sp,fp
   22ec0:	dfc00117 	ldw	ra,4(sp)
   22ec4:	df000017 	ldw	fp,0(sp)
   22ec8:	dec00204 	addi	sp,sp,8
   22ecc:	f800283a 	ret

00022ed0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22ed0:	defffa04 	addi	sp,sp,-24
   22ed4:	dfc00515 	stw	ra,20(sp)
   22ed8:	df000415 	stw	fp,16(sp)
   22edc:	df000404 	addi	fp,sp,16
   22ee0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22ee4:	0007883a 	mov	r3,zero
   22ee8:	e0bffc17 	ldw	r2,-16(fp)
   22eec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22ef0:	e0bffc17 	ldw	r2,-16(fp)
   22ef4:	10800104 	addi	r2,r2,4
   22ef8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   22efc:	0005303a 	rdctl	r2,status
   22f00:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22f04:	e0fffd17 	ldw	r3,-12(fp)
   22f08:	00bfff84 	movi	r2,-2
   22f0c:	1884703a 	and	r2,r3,r2
   22f10:	1001703a 	wrctl	status,r2
  return context;
   22f14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22f18:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   22f1c:	00248280 	call	24828 <alt_tick>
   22f20:	e0bfff17 	ldw	r2,-4(fp)
   22f24:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   22f28:	e0bffe17 	ldw	r2,-8(fp)
   22f2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   22f30:	0001883a 	nop
   22f34:	e037883a 	mov	sp,fp
   22f38:	dfc00117 	ldw	ra,4(sp)
   22f3c:	df000017 	ldw	fp,0(sp)
   22f40:	dec00204 	addi	sp,sp,8
   22f44:	f800283a 	ret

00022f48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   22f48:	defff804 	addi	sp,sp,-32
   22f4c:	dfc00715 	stw	ra,28(sp)
   22f50:	df000615 	stw	fp,24(sp)
   22f54:	df000604 	addi	fp,sp,24
   22f58:	e13ffe15 	stw	r4,-8(fp)
   22f5c:	e17ffd15 	stw	r5,-12(fp)
   22f60:	e1bffc15 	stw	r6,-16(fp)
   22f64:	e1fffb15 	stw	r7,-20(fp)
   22f68:	e0bffb17 	ldw	r2,-20(fp)
   22f6c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22f70:	d0a78017 	ldw	r2,-25088(gp)
   22f74:	1000021e 	bne	r2,zero,22f80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   22f78:	e0bfff17 	ldw	r2,-4(fp)
   22f7c:	d0a78015 	stw	r2,-25088(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22f80:	e0bffe17 	ldw	r2,-8(fp)
   22f84:	10800104 	addi	r2,r2,4
   22f88:	00c001c4 	movi	r3,7
   22f8c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22f90:	d8000015 	stw	zero,0(sp)
   22f94:	e1fffe17 	ldw	r7,-8(fp)
   22f98:	018000b4 	movhi	r6,2
   22f9c:	318bb404 	addi	r6,r6,11984
   22fa0:	e17ffc17 	ldw	r5,-16(fp)
   22fa4:	e13ffd17 	ldw	r4,-12(fp)
   22fa8:	00241840 	call	24184 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22fac:	0001883a 	nop
   22fb0:	e037883a 	mov	sp,fp
   22fb4:	dfc00117 	ldw	ra,4(sp)
   22fb8:	df000017 	ldw	fp,0(sp)
   22fbc:	dec00204 	addi	sp,sp,8
   22fc0:	f800283a 	ret

00022fc4 <alt_qspi_controller2_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_qspi_controller2_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
   22fc4:	defff804 	addi	sp,sp,-32
   22fc8:	dfc00715 	stw	ra,28(sp)
   22fcc:	df000615 	stw	fp,24(sp)
   22fd0:	df000604 	addi	fp,sp,24
   22fd4:	e13ffb15 	stw	r4,-20(fp)
   22fd8:	e17ffa15 	stw	r5,-24(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
   22fdc:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
   22fe0:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 result = 0;
   22fe4:	e03ffd15 	stw	zero,-12(fp)
    alt_32 status = 0;
   22fe8:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
   22fec:	e0bffb17 	ldw	r2,-20(fp)
   22ff0:	1000021e 	bne	r2,zero,22ffc <alt_qspi_controller2_lock+0x38>
    {
        return -EINVAL;
   22ff4:	00bffa84 	movi	r2,-22
   22ff8:	00002c06 	br	230ac <alt_qspi_controller2_lock+0xe8>
    }

    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   22ffc:	e0bffb17 	ldw	r2,-20(fp)
   23000:	e0bffe15 	stw	r2,-8(fp)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
   23004:	e0bffa17 	ldw	r2,-24(fp)
   23008:	1004923a 	slli	r2,r2,8
   2300c:	e0bfff15 	stw	r2,-4(fp)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_PROTECT_CMD;
   23010:	e0bfff17 	ldw	r2,-4(fp)
   23014:	108000d4 	ori	r2,r2,3
   23018:	e0bfff15 	stw	r2,-4(fp)

    /* write sector protect command to QSPI_MEM_OP register to protect sectors */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   2301c:	e0bffe17 	ldw	r2,-8(fp)
   23020:	10803017 	ldw	r2,192(r2)
   23024:	10800304 	addi	r2,r2,12
   23028:	1007883a 	mov	r3,r2
   2302c:	e0bfff17 	ldw	r2,-4(fp)
   23030:	18800035 	stwio	r2,0(r3)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_qspi_poll_for_write_in_progress(qspi_flash_info);
   23034:	e13ffe17 	ldw	r4,-8(fp)
   23038:	0023aa00 	call	23aa0 <alt_qspi_poll_for_write_in_progress>
   2303c:	e0bffc15 	stw	r2,-16(fp)
    if(status != 0)
   23040:	e0bffc17 	ldw	r2,-16(fp)
   23044:	10000226 	beq	r2,zero,23050 <alt_qspi_controller2_lock+0x8c>
    {
        return status;
   23048:	e0bffc17 	ldw	r2,-16(fp)
   2304c:	00001706 	br	230ac <alt_qspi_controller2_lock+0xe8>
    }

    status = IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base);
   23050:	e0bffe17 	ldw	r2,-8(fp)
   23054:	10803017 	ldw	r2,192(r2)
   23058:	10800037 	ldwio	r2,0(r2)
   2305c:	e0bffc15 	stw	r2,-16(fp)
    result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
   23060:	e0bffc17 	ldw	r2,-16(fp)
   23064:	1005d0ba 	srai	r2,r2,2
   23068:	108001cc 	andi	r2,r2,7
   2306c:	e0fffd17 	ldw	r3,-12(fp)
   23070:	1884b03a 	or	r2,r3,r2
   23074:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 3) & 0x08; /* extract out BP4 */
   23078:	e0bffc17 	ldw	r2,-16(fp)
   2307c:	1005d0fa 	srai	r2,r2,3
   23080:	1080020c 	andi	r2,r2,8
   23084:	e0fffd17 	ldw	r3,-12(fp)
   23088:	1884b03a 	or	r2,r3,r2
   2308c:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
   23090:	e0bffc17 	ldw	r2,-16(fp)
   23094:	1005d07a 	srai	r2,r2,1
   23098:	1080040c 	andi	r2,r2,16
   2309c:	e0fffd17 	ldw	r3,-12(fp)
   230a0:	1884b03a 	or	r2,r3,r2
   230a4:	e0bffd15 	stw	r2,-12(fp)
    if(result != sectors_to_lock)
    {
        /*return -ENOLCK;*/
    }

    return 0;
   230a8:	0005883a 	mov	r2,zero
}
   230ac:	e037883a 	mov	sp,fp
   230b0:	dfc00117 	ldw	ra,4(sp)
   230b4:	df000017 	ldw	fp,0(sp)
   230b8:	dec00204 	addi	sp,sp,8
   230bc:	f800283a 	ret

000230c0 <alt_qspi_controller2_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
   230c0:	defffb04 	addi	sp,sp,-20
   230c4:	df000415 	stw	fp,16(sp)
   230c8:	df000404 	addi	fp,sp,16
   230cc:	e13ffe15 	stw	r4,-8(fp)
   230d0:	e17ffd15 	stw	r5,-12(fp)
   230d4:	e1bffc15 	stw	r6,-16(fp)
    alt_flash_dev* flash = NULL;
   230d8:	e03fff15 	stw	zero,-4(fp)
    
    /* return -EINVAL if fd,info and number_of_regions are NULL */
    if(NULL == fd || NULL == info || NULL == number_of_regions)
   230dc:	e0bffe17 	ldw	r2,-8(fp)
   230e0:	10000426 	beq	r2,zero,230f4 <alt_qspi_controller2_get_info+0x34>
   230e4:	e0bffd17 	ldw	r2,-12(fp)
   230e8:	10000226 	beq	r2,zero,230f4 <alt_qspi_controller2_get_info+0x34>
   230ec:	e0bffc17 	ldw	r2,-16(fp)
   230f0:	1000021e 	bne	r2,zero,230fc <alt_qspi_controller2_get_info+0x3c>
    {
        return -EINVAL;
   230f4:	00bffa84 	movi	r2,-22
   230f8:	00001006 	br	2313c <alt_qspi_controller2_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
   230fc:	e0bffe17 	ldw	r2,-8(fp)
   23100:	e0bfff15 	stw	r2,-4(fp)

    *number_of_regions = flash->number_of_regions;
   23104:	e0bfff17 	ldw	r2,-4(fp)
   23108:	10c00c17 	ldw	r3,48(r2)
   2310c:	e0bffc17 	ldw	r2,-16(fp)
   23110:	10c00015 	stw	r3,0(r2)

    if (!flash->number_of_regions)
   23114:	e0bfff17 	ldw	r2,-4(fp)
   23118:	10800c17 	ldw	r2,48(r2)
   2311c:	1000021e 	bne	r2,zero,23128 <alt_qspi_controller2_get_info+0x68>
    {
      return -EIO;
   23120:	00bffec4 	movi	r2,-5
   23124:	00000506 	br	2313c <alt_qspi_controller2_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
   23128:	e0bfff17 	ldw	r2,-4(fp)
   2312c:	10c00d04 	addi	r3,r2,52
   23130:	e0bffd17 	ldw	r2,-12(fp)
   23134:	10c00015 	stw	r3,0(r2)
    }

    return 0;
   23138:	0005883a 	mov	r2,zero
}
   2313c:	e037883a 	mov	sp,fp
   23140:	df000017 	ldw	fp,0(sp)
   23144:	dec00104 	addi	sp,sp,4
   23148:	f800283a 	ret

0002314c <alt_qspi_controller2_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_qspi_controller2_erase_block(alt_flash_dev *flash_info, int block_offset)
{
   2314c:	defff804 	addi	sp,sp,-32
   23150:	dfc00715 	stw	ra,28(sp)
   23154:	df000615 	stw	fp,24(sp)
   23158:	df000604 	addi	fp,sp,24
   2315c:	e13ffb15 	stw	r4,-20(fp)
   23160:	e17ffa15 	stw	r5,-24(fp)
    alt_32 ret_code = 0;
   23164:	e03fff15 	stw	zero,-4(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
   23168:	e03ffe15 	stw	zero,-8(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
   2316c:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 sector_number = 0; 
   23170:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
   23174:	e0bffb17 	ldw	r2,-20(fp)
   23178:	1000021e 	bne	r2,zero,23184 <alt_qspi_controller2_erase_block+0x38>
    {
        return -EINVAL;
   2317c:	00bffa84 	movi	r2,-22
   23180:	00004706 	br	232a0 <alt_qspi_controller2_erase_block+0x154>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   23184:	e0bffb17 	ldw	r2,-20(fp)
   23188:	e0bffd15 	stw	r2,-12(fp)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
   2318c:	e0bffa17 	ldw	r2,-24(fp)
   23190:	10000a16 	blt	r2,zero,231bc <alt_qspi_controller2_erase_block+0x70>
        || (block_offset >= qspi_flash_info->size_in_bytes)
   23194:	e0bffd17 	ldw	r2,-12(fp)
   23198:	10803117 	ldw	r2,196(r2)
   2319c:	e0fffa17 	ldw	r3,-24(fp)
   231a0:	1880062e 	bgeu	r3,r2,231bc <alt_qspi_controller2_erase_block+0x70>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0)
   231a4:	e0bffd17 	ldw	r2,-12(fp)
   231a8:	10803417 	ldw	r2,208(r2)
   231ac:	10ffffc4 	addi	r3,r2,-1
   231b0:	e0bffa17 	ldw	r2,-24(fp)
   231b4:	1884703a 	and	r2,r3,r2
   231b8:	10000226 	beq	r2,zero,231c4 <alt_qspi_controller2_erase_block+0x78>
    {
        return -EINVAL;
   231bc:	00bffa84 	movi	r2,-22
   231c0:	00003706 	br	232a0 <alt_qspi_controller2_erase_block+0x154>
    }
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);     
   231c4:	e13ffd17 	ldw	r4,-12(fp)
   231c8:	0023aa00 	call	23aa0 <alt_qspi_poll_for_write_in_progress>

    /* calculate current sector/block number */
    sector_number = (block_offset/(qspi_flash_info->sector_size));
   231cc:	e0fffa17 	ldw	r3,-24(fp)
   231d0:	e0bffd17 	ldw	r2,-12(fp)
   231d4:	10803417 	ldw	r2,208(r2)
   231d8:	1885203a 	divu	r2,r3,r2
   231dc:	e0bffc15 	stw	r2,-16(fp)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
   231e0:	e0bffc17 	ldw	r2,-16(fp)
   231e4:	1006923a 	slli	r3,r2,8
   231e8:	00804034 	movhi	r2,256
   231ec:	10bfc004 	addi	r2,r2,-256
   231f0:	1884703a 	and	r2,r3,r2
   231f4:	e0bffe15 	stw	r2,-8(fp)
    
     /* write enable command */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_WRITE_ENABLE_CMD;
   231f8:	e0bffe17 	ldw	r2,-8(fp)
   231fc:	10800114 	ori	r2,r2,4
   23200:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to EPCQ_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   23204:	e0bffd17 	ldw	r2,-12(fp)
   23208:	10803017 	ldw	r2,192(r2)
   2320c:	10800304 	addi	r2,r2,12
   23210:	1007883a 	mov	r3,r2
   23214:	e0bffe17 	ldw	r2,-8(fp)
   23218:	18800035 	stwio	r2,0(r3)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
   2321c:	e0bffc17 	ldw	r2,-16(fp)
   23220:	1006923a 	slli	r3,r2,8
   23224:	00804034 	movhi	r2,256
   23228:	10bfc004 	addi	r2,r2,-256
   2322c:	1884703a 	and	r2,r3,r2
   23230:	e0bffe15 	stw	r2,-8(fp)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_ERASE_CMD;
   23234:	e0bffe17 	ldw	r2,-8(fp)
   23238:	10800094 	ori	r2,r2,2
   2323c:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to QSPI_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
   23240:	e0bffd17 	ldw	r2,-12(fp)
   23244:	10803017 	ldw	r2,192(r2)
   23248:	10800304 	addi	r2,r2,12
   2324c:	1007883a 	mov	r3,r2
   23250:	e0bffe17 	ldw	r2,-8(fp)
   23254:	18800035 	stwio	r2,0(r3)
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);      
   23258:	e13ffd17 	ldw	r4,-12(fp)
   2325c:	0023aa00 	call	23aa0 <alt_qspi_poll_for_write_in_progress>
    
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
   23260:	e0bffd17 	ldw	r2,-12(fp)
   23264:	10803017 	ldw	r2,192(r2)
   23268:	10800404 	addi	r2,r2,16
   2326c:	10800037 	ldwio	r2,0(r2)
   23270:	1080004c 	andi	r2,r2,1
   23274:	10800058 	cmpnei	r2,r2,1
   23278:	1000081e 	bne	r2,zero,2329c <alt_qspi_controller2_erase_block+0x150>
                    ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK) ==
                            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_ACTIVE)
    {
        /* clear register */
        /* QSPI_ISR access is write one to clear (W1C) */
        IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
   2327c:	e0bffd17 	ldw	r2,-12(fp)
   23280:	10803017 	ldw	r2,192(r2)
   23284:	10800404 	addi	r2,r2,16
   23288:	1007883a 	mov	r3,r2
   2328c:	00800044 	movi	r2,1
   23290:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK );
        return -EIO; /* erase failed, sector might be protected */
   23294:	00bffec4 	movi	r2,-5
   23298:	00000106 	br	232a0 <alt_qspi_controller2_erase_block+0x154>
    }

    return ret_code;
   2329c:	e0bfff17 	ldw	r2,-4(fp)
}
   232a0:	e037883a 	mov	sp,fp
   232a4:	dfc00117 	ldw	ra,4(sp)
   232a8:	df000017 	ldw	fp,0(sp)
   232ac:	dec00204 	addi	sp,sp,8
   232b0:	f800283a 	ret

000232b4 <alt_qspi_controller2_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
   232b4:	defff304 	addi	sp,sp,-52
   232b8:	dfc00c15 	stw	ra,48(sp)
   232bc:	df000b15 	stw	fp,44(sp)
   232c0:	df000b04 	addi	fp,sp,44
   232c4:	e13ff815 	stw	r4,-32(fp)
   232c8:	e17ff715 	stw	r5,-36(fp)
   232cc:	e1bff615 	stw	r6,-40(fp)
   232d0:	e1fff515 	stw	r7,-44(fp)
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
   232d4:	e03fff15 	stw	zero,-4(fp)
    alt_u32 remaining_length = length; /** length left to write */
   232d8:	e0800217 	ldw	r2,8(fp)
   232dc:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
   232e0:	e0bff617 	ldw	r2,-40(fp)
   232e4:	e0bffd15 	stw	r2,-12(fp)

    
    alt_qspi_controller2_dev *qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   232e8:	e0bff817 	ldw	r2,-32(fp)
   232ec:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
   232f0:	e0bff717 	ldw	r2,-36(fp)
   232f4:	10001e16 	blt	r2,zero,23370 <alt_qspi_controller2_write_block+0xbc>
        || data_offset < 0
   232f8:	e0bff617 	ldw	r2,-40(fp)
   232fc:	10001c16 	blt	r2,zero,23370 <alt_qspi_controller2_write_block+0xbc>
        || NULL == flash_info
   23300:	e0bff817 	ldw	r2,-32(fp)
   23304:	10001a26 	beq	r2,zero,23370 <alt_qspi_controller2_write_block+0xbc>
        || NULL == data
   23308:	e0bff517 	ldw	r2,-44(fp)
   2330c:	10001826 	beq	r2,zero,23370 <alt_qspi_controller2_write_block+0xbc>
        || data_offset >= qspi_flash_info->size_in_bytes
   23310:	e0bffa17 	ldw	r2,-24(fp)
   23314:	10803117 	ldw	r2,196(r2)
   23318:	e0fff617 	ldw	r3,-40(fp)
   2331c:	1880142e 	bgeu	r3,r2,23370 <alt_qspi_controller2_write_block+0xbc>
        || block_offset >= qspi_flash_info->size_in_bytes
   23320:	e0bffa17 	ldw	r2,-24(fp)
   23324:	10803117 	ldw	r2,196(r2)
   23328:	e0fff717 	ldw	r3,-36(fp)
   2332c:	1880102e 	bgeu	r3,r2,23370 <alt_qspi_controller2_write_block+0xbc>
        || length > (qspi_flash_info->sector_size - (data_offset - block_offset))
   23330:	e0bffa17 	ldw	r2,-24(fp)
   23334:	10803417 	ldw	r2,208(r2)
   23338:	e13ff617 	ldw	r4,-40(fp)
   2333c:	e0fff717 	ldw	r3,-36(fp)
   23340:	20c7c83a 	sub	r3,r4,r3
   23344:	10c7c83a 	sub	r3,r2,r3
   23348:	e0800217 	ldw	r2,8(fp)
   2334c:	18800836 	bltu	r3,r2,23370 <alt_qspi_controller2_write_block+0xbc>
        || length < 0
   23350:	e0800217 	ldw	r2,8(fp)
   23354:	10000616 	blt	r2,zero,23370 <alt_qspi_controller2_write_block+0xbc>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0) 
   23358:	e0bffa17 	ldw	r2,-24(fp)
   2335c:	10803417 	ldw	r2,208(r2)
   23360:	10ffffc4 	addi	r3,r2,-1
   23364:	e0bff717 	ldw	r2,-36(fp)
   23368:	1884703a 	and	r2,r3,r2
   2336c:	10006426 	beq	r2,zero,23500 <alt_qspi_controller2_write_block+0x24c>
    {
        return -EINVAL;
   23370:	00bffa84 	movi	r2,-22
   23374:	00006506 	br	2350c <alt_qspi_controller2_write_block+0x258>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
        alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
   23378:	00bfffc4 	movi	r2,-1
   2337c:	e0bff915 	stw	r2,-28(fp)
        alt_u32 padding = 0; /** bytes to pad the next word that is written */
   23380:	e03ffc15 	stw	zero,-16(fp)
        alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
   23384:	00800104 	movi	r2,4
   23388:	e0bffb15 	stw	r2,-20(fp)

        /*
         * we need to make sure the write is word aligned
         * this should only be true at most 1 time
         */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
   2338c:	e0bffd17 	ldw	r2,-12(fp)
   23390:	108000cc 	andi	r2,r2,3
   23394:	10001526 	beq	r2,zero,233ec <alt_qspi_controller2_write_block+0x138>
        {
            /*
             * data is not word aligned
             * calculate padding bytes need to add before start of a data offset
             */
            padding = write_offset & (sizeof(alt_u32) - 1);
   23398:	e0bffd17 	ldw	r2,-12(fp)
   2339c:	108000cc 	andi	r2,r2,3
   233a0:	e0bffc15 	stw	r2,-16(fp)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
   233a4:	e0fffb17 	ldw	r3,-20(fp)
   233a8:	e0bffc17 	ldw	r2,-16(fp)
   233ac:	1885c83a 	sub	r2,r3,r2
   233b0:	e0bffb15 	stw	r2,-20(fp)

            if(bytes_to_copy > remaining_length)
   233b4:	e0bffb17 	ldw	r2,-20(fp)
   233b8:	e0fffe17 	ldw	r3,-8(fp)
   233bc:	1880022e 	bgeu	r3,r2,233c8 <alt_qspi_controller2_write_block+0x114>
            {
                bytes_to_copy = remaining_length;
   233c0:	e0bffe17 	ldw	r2,-8(fp)
   233c4:	e0bffb15 	stw	r2,-20(fp)
            }

            write_offset = write_offset - padding;
   233c8:	e0fffd17 	ldw	r3,-12(fp)
   233cc:	e0bffc17 	ldw	r2,-16(fp)
   233d0:	1885c83a 	sub	r2,r3,r2
   233d4:	e0bffd15 	stw	r2,-12(fp)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
   233d8:	e0bffd17 	ldw	r2,-12(fp)
   233dc:	108000cc 	andi	r2,r2,3
   233e0:	10000726 	beq	r2,zero,23400 <alt_qspi_controller2_write_block+0x14c>
            {
                return -EINVAL;
   233e4:	00bffa84 	movi	r2,-22
   233e8:	00004806 	br	2350c <alt_qspi_controller2_write_block+0x258>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
   233ec:	e0bffb17 	ldw	r2,-20(fp)
   233f0:	e0fffe17 	ldw	r3,-8(fp)
   233f4:	1880022e 	bgeu	r3,r2,23400 <alt_qspi_controller2_write_block+0x14c>
            {
                bytes_to_copy = remaining_length;
   233f8:	e0bffe17 	ldw	r2,-8(fp)
   233fc:	e0bffb15 	stw	r2,-20(fp)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
   23400:	e0fff904 	addi	r3,fp,-28
   23404:	e0bffc17 	ldw	r2,-16(fp)
   23408:	1889883a 	add	r4,r3,r2
   2340c:	e0fff517 	ldw	r3,-44(fp)
   23410:	e0bfff17 	ldw	r2,-4(fp)
   23414:	1885883a 	add	r2,r3,r2
   23418:	e1bffb17 	ldw	r6,-20(fp)
   2341c:	100b883a 	mov	r5,r2
   23420:	00106380 	call	10638 <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
   23424:	e0ffff17 	ldw	r3,-4(fp)
   23428:	e0bffb17 	ldw	r2,-20(fp)
   2342c:	1885883a 	add	r2,r3,r2
   23430:	e0bfff15 	stw	r2,-4(fp)
        remaining_length -= bytes_to_copy;
   23434:	e0fffe17 	ldw	r3,-8(fp)
   23438:	e0bffb17 	ldw	r2,-20(fp)
   2343c:	1885c83a 	sub	r2,r3,r2
   23440:	e0bffe15 	stw	r2,-8(fp)
           
        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
   23444:	e0bffa17 	ldw	r2,-24(fp)
   23448:	10c02e17 	ldw	r3,184(r2)
   2344c:	e0bffd17 	ldw	r2,-12(fp)
   23450:	1885883a 	add	r2,r3,r2
   23454:	e0fff917 	ldw	r3,-28(fp)
   23458:	10c00035 	stwio	r3,0(r2)
        alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
   2345c:	e13ffa17 	ldw	r4,-24(fp)
   23460:	0023aa00 	call	23aa0 <alt_qspi_poll_for_write_in_progress>
        if (IORD_32DIRECT(qspi_flash_info->data_base, write_offset) != word_to_write)
   23464:	e0bffa17 	ldw	r2,-24(fp)
   23468:	10c02e17 	ldw	r3,184(r2)
   2346c:	e0bffd17 	ldw	r2,-12(fp)
   23470:	1885883a 	add	r2,r3,r2
   23474:	10800037 	ldwio	r2,0(r2)
   23478:	1007883a 	mov	r3,r2
   2347c:	e0bff917 	ldw	r2,-28(fp)
   23480:	18800d26 	beq	r3,r2,234b8 <alt_qspi_controller2_write_block+0x204>
        {
            IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
   23484:	e0bffa17 	ldw	r2,-24(fp)
   23488:	10c02e17 	ldw	r3,184(r2)
   2348c:	e0bffd17 	ldw	r2,-12(fp)
   23490:	1885883a 	add	r2,r3,r2
   23494:	e0fff917 	ldw	r3,-28(fp)
   23498:	10c00035 	stwio	r3,0(r2)
            alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
   2349c:	e13ffa17 	ldw	r4,-24(fp)
   234a0:	0023aa00 	call	23aa0 <alt_qspi_poll_for_write_in_progress>
            IORD_32DIRECT(qspi_flash_info->data_base, write_offset);
   234a4:	e0bffa17 	ldw	r2,-24(fp)
   234a8:	10c02e17 	ldw	r3,184(r2)
   234ac:	e0bffd17 	ldw	r2,-12(fp)
   234b0:	1885883a 	add	r2,r3,r2
   234b4:	10800037 	ldwio	r2,0(r2)
        }
              
        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
   234b8:	e0bffa17 	ldw	r2,-24(fp)
   234bc:	10803017 	ldw	r2,192(r2)
   234c0:	10800404 	addi	r2,r2,16
   234c4:	10800037 	ldwio	r2,0(r2)
   234c8:	1080008c 	andi	r2,r2,2
   234cc:	10800098 	cmpnei	r2,r2,2
   234d0:	1000081e 	bne	r2,zero,234f4 <alt_qspi_controller2_write_block+0x240>
                ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK) ==
                        ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_ACTIVE)
        {
            /* clear register */
            IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
   234d4:	e0bffa17 	ldw	r2,-24(fp)
   234d8:	10803017 	ldw	r2,192(r2)
   234dc:	10800404 	addi	r2,r2,16
   234e0:	1007883a 	mov	r3,r2
   234e4:	00800084 	movi	r2,2
   234e8:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK );
            return -EIO; /** write failed, sector might be protected */
   234ec:	00bffec4 	movi	r2,-5
   234f0:	00000606 	br	2350c <alt_qspi_controller2_write_block+0x258>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
   234f4:	e0bffd17 	ldw	r2,-12(fp)
   234f8:	10800104 	addi	r2,r2,4
   234fc:	e0bffd15 	stw	r2,-12(fp)
    while (remaining_length > 0)
   23500:	e0bffe17 	ldw	r2,-8(fp)
   23504:	103f9c1e 	bne	r2,zero,23378 <__alt_mem_mcu_subsystem_ram_0+0x78003378>
    }

    return 0;
   23508:	0005883a 	mov	r2,zero
}
   2350c:	e037883a 	mov	sp,fp
   23510:	dfc00117 	ldw	ra,4(sp)
   23514:	df000017 	ldw	fp,0(sp)
   23518:	dec00204 	addi	sp,sp,8
   2351c:	f800283a 	ret

00023520 <alt_qspi_controller2_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
   23520:	defff004 	addi	sp,sp,-64
   23524:	dfc00f15 	stw	ra,60(sp)
   23528:	df000e15 	stw	fp,56(sp)
   2352c:	df000e04 	addi	fp,sp,56
   23530:	e13ff615 	stw	r4,-40(fp)
   23534:	e17ff515 	stw	r5,-44(fp)
   23538:	e1bff415 	stw	r6,-48(fp)
   2353c:	e1fff315 	stw	r7,-52(fp)
    alt_32 ret_code = 0;
   23540:	e03fff15 	stw	zero,-4(fp)

    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   23544:	e03ff915 	stw	zero,-28(fp)

    alt_u32 write_offset = offset; /** address of next byte to write */
   23548:	e0bff517 	ldw	r2,-44(fp)
   2354c:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 remaining_length = length; /** length of write data left to be written */
   23550:	e0bff317 	ldw	r2,-52(fp)
   23554:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
   23558:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 i = 0;
   2355c:	e03ffb15 	stw	zero,-20(fp)

    /* return -EINVAL if flash_info and src_addr are NULL */
    if(NULL == flash_info || NULL == src_addr)
   23560:	e0bff617 	ldw	r2,-40(fp)
   23564:	10000226 	beq	r2,zero,23570 <alt_qspi_controller2_write+0x50>
   23568:	e0bff417 	ldw	r2,-48(fp)
   2356c:	1000021e 	bne	r2,zero,23578 <alt_qspi_controller2_write+0x58>
    {
        return -EINVAL;
   23570:	00bffa84 	movi	r2,-22
   23574:	00005d06 	br	236ec <alt_qspi_controller2_write+0x1cc>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   23578:	e0bff617 	ldw	r2,-40(fp)
   2357c:	e0bff915 	stw	r2,-28(fp)
    
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
   23580:	e0bff517 	ldw	r2,-44(fp)
   23584:	e0fff317 	ldw	r3,-52(fp)
   23588:	180d883a 	mov	r6,r3
   2358c:	100b883a 	mov	r5,r2
   23590:	e13ff917 	ldw	r4,-28(fp)
   23594:	0023a040 	call	23a04 <alt_qspi_validate_read_write_arguments>
   23598:	e0bfff15 	stw	r2,-4(fp)

    if(0 != ret_code)
   2359c:	e0bfff17 	ldw	r2,-4(fp)
   235a0:	10000226 	beq	r2,zero,235ac <alt_qspi_controller2_write+0x8c>
    {
        return ret_code;
   235a4:	e0bfff17 	ldw	r2,-4(fp)
   235a8:	00005006 	br	236ec <alt_qspi_controller2_write+0x1cc>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
   235ac:	e0fff517 	ldw	r3,-44(fp)
   235b0:	e0bff917 	ldw	r2,-28(fp)
   235b4:	10803417 	ldw	r2,208(r2)
   235b8:	1885203a 	divu	r2,r3,r2
   235bc:	e0bffb15 	stw	r2,-20(fp)
   235c0:	00004306 	br	236d0 <alt_qspi_controller2_write+0x1b0>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
   235c4:	e03ff815 	stw	zero,-32(fp)
        alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
   235c8:	e03ffa15 	stw	zero,-24(fp)
        alt_u32 length_to_write = 0; /** length to write to current sector */
   235cc:	e03ff715 	stw	zero,-36(fp)

        if(0 >= remaining_length)
   235d0:	e0bffd17 	ldw	r2,-12(fp)
   235d4:	10004326 	beq	r2,zero,236e4 <alt_qspi_controller2_write+0x1c4>
        {
            break; /* out of data to write */
        }

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(qspi_flash_info->sector_size - 1);
   235d8:	e0bff917 	ldw	r2,-28(fp)
   235dc:	10803417 	ldw	r2,208(r2)
   235e0:	0085c83a 	sub	r2,zero,r2
   235e4:	e0fffe17 	ldw	r3,-8(fp)
   235e8:	1884703a 	and	r2,r3,r2
   235ec:	e0bff815 	stw	r2,-32(fp)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
   235f0:	e0fff817 	ldw	r3,-32(fp)
   235f4:	e0bffe17 	ldw	r2,-8(fp)
   235f8:	18800426 	beq	r3,r2,2360c <alt_qspi_controller2_write+0xec>
        {
            offset_within_current_sector = write_offset - block_offset;
   235fc:	e0fffe17 	ldw	r3,-8(fp)
   23600:	e0bff817 	ldw	r2,-32(fp)
   23604:	1885c83a 	sub	r2,r3,r2
   23608:	e0bffa15 	stw	r2,-24(fp)
        }

        /* erase sector */
        ret_code = alt_qspi_controller2_erase_block(flash_info, block_offset);
   2360c:	e0bff817 	ldw	r2,-32(fp)
   23610:	100b883a 	mov	r5,r2
   23614:	e13ff617 	ldw	r4,-40(fp)
   23618:	002314c0 	call	2314c <alt_qspi_controller2_erase_block>
   2361c:	e0bfff15 	stw	r2,-4(fp)

        if(0 != ret_code)
   23620:	e0bfff17 	ldw	r2,-4(fp)
   23624:	10000226 	beq	r2,zero,23630 <alt_qspi_controller2_write+0x110>
        {
            return ret_code;
   23628:	e0bfff17 	ldw	r2,-4(fp)
   2362c:	00002f06 	br	236ec <alt_qspi_controller2_write+0x1cc>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(qspi_flash_info->sector_size - offset_within_current_sector, 
   23630:	e0bff917 	ldw	r2,-28(fp)
   23634:	10c03417 	ldw	r3,208(r2)
   23638:	e0bffa17 	ldw	r2,-24(fp)
   2363c:	1887c83a 	sub	r3,r3,r2
   23640:	e0bffd17 	ldw	r2,-12(fp)
   23644:	1880012e 	bgeu	r3,r2,2364c <alt_qspi_controller2_write+0x12c>
   23648:	1805883a 	mov	r2,r3
   2364c:	e0bff715 	stw	r2,-36(fp)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_qspi_controller2_write_block(flash_info, block_offset, write_offset,
   23650:	e13ff817 	ldw	r4,-32(fp)
   23654:	e17ffe17 	ldw	r5,-8(fp)
   23658:	e0fff417 	ldw	r3,-48(fp)
   2365c:	e0bffc17 	ldw	r2,-16(fp)
   23660:	1887883a 	add	r3,r3,r2
   23664:	e0bff717 	ldw	r2,-36(fp)
   23668:	d8800015 	stw	r2,0(sp)
   2366c:	180f883a 	mov	r7,r3
   23670:	280d883a 	mov	r6,r5
   23674:	200b883a 	mov	r5,r4
   23678:	e13ff617 	ldw	r4,-40(fp)
   2367c:	00232b40 	call	232b4 <alt_qspi_controller2_write_block>
   23680:	e0bfff15 	stw	r2,-4(fp)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
   23684:	e0bfff17 	ldw	r2,-4(fp)
   23688:	10000226 	beq	r2,zero,23694 <alt_qspi_controller2_write+0x174>
        {
            return ret_code;
   2368c:	e0bfff17 	ldw	r2,-4(fp)
   23690:	00001606 	br	236ec <alt_qspi_controller2_write+0x1cc>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
   23694:	e0fffd17 	ldw	r3,-12(fp)
   23698:	e0bff717 	ldw	r2,-36(fp)
   2369c:	1885c83a 	sub	r2,r3,r2
   236a0:	e0bffd15 	stw	r2,-12(fp)
        buffer_offset += length_to_write;
   236a4:	e0fffc17 	ldw	r3,-16(fp)
   236a8:	e0bff717 	ldw	r2,-36(fp)
   236ac:	1885883a 	add	r2,r3,r2
   236b0:	e0bffc15 	stw	r2,-16(fp)
        write_offset += length_to_write; 
   236b4:	e0fffe17 	ldw	r3,-8(fp)
   236b8:	e0bff717 	ldw	r2,-36(fp)
   236bc:	1885883a 	add	r2,r3,r2
   236c0:	e0bffe15 	stw	r2,-8(fp)
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
   236c4:	e0bffb17 	ldw	r2,-20(fp)
   236c8:	10800044 	addi	r2,r2,1
   236cc:	e0bffb15 	stw	r2,-20(fp)
   236d0:	e0bff917 	ldw	r2,-28(fp)
   236d4:	10803317 	ldw	r2,204(r2)
   236d8:	e0fffb17 	ldw	r3,-20(fp)
   236dc:	18bfb936 	bltu	r3,r2,235c4 <__alt_mem_mcu_subsystem_ram_0+0x780035c4>
   236e0:	00000106 	br	236e8 <alt_qspi_controller2_write+0x1c8>
            break; /* out of data to write */
   236e4:	0001883a 	nop
    }

    return ret_code;
   236e8:	e0bfff17 	ldw	r2,-4(fp)
}
   236ec:	e037883a 	mov	sp,fp
   236f0:	dfc00117 	ldw	ra,4(sp)
   236f4:	df000017 	ldw	fp,0(sp)
   236f8:	dec00204 	addi	sp,sp,8
   236fc:	f800283a 	ret

00023700 <alt_qspi_controller2_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
   23700:	defff804 	addi	sp,sp,-32
   23704:	dfc00715 	stw	ra,28(sp)
   23708:	df000615 	stw	fp,24(sp)
   2370c:	df000604 	addi	fp,sp,24
   23710:	e13ffd15 	stw	r4,-12(fp)
   23714:	e17ffc15 	stw	r5,-16(fp)
   23718:	e1bffb15 	stw	r6,-20(fp)
   2371c:	e1fffa15 	stw	r7,-24(fp)
    alt_32 ret_code = 0;
   23720:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   23724:	e03ffe15 	stw	zero,-8(fp)
    
    /* return -EINVAL if flash_info and dest_addr are NULL */
    if(NULL == flash_info || NULL == dest_addr)
   23728:	e0bffd17 	ldw	r2,-12(fp)
   2372c:	10000226 	beq	r2,zero,23738 <alt_qspi_controller2_read+0x38>
   23730:	e0bffb17 	ldw	r2,-20(fp)
   23734:	1000021e 	bne	r2,zero,23740 <alt_qspi_controller2_read+0x40>
    {
        return -EINVAL;
   23738:	00bffa84 	movi	r2,-22
   2373c:	00001606 	br	23798 <alt_qspi_controller2_read+0x98>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   23740:	e0bffd17 	ldw	r2,-12(fp)
   23744:	e0bffe15 	stw	r2,-8(fp)

    /* validate arguments */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
   23748:	e0bffc17 	ldw	r2,-16(fp)
   2374c:	e0fffa17 	ldw	r3,-24(fp)
   23750:	180d883a 	mov	r6,r3
   23754:	100b883a 	mov	r5,r2
   23758:	e13ffe17 	ldw	r4,-8(fp)
   2375c:	0023a040 	call	23a04 <alt_qspi_validate_read_write_arguments>
   23760:	e0bfff15 	stw	r2,-4(fp)

    /* copy data from flash to destination address */
    if(0 == ret_code)
   23764:	e0bfff17 	ldw	r2,-4(fp)
   23768:	10000a1e 	bne	r2,zero,23794 <alt_qspi_controller2_read+0x94>
    {
        memcpy(dest_addr, (alt_u8*)qspi_flash_info->data_base + offset, length);
   2376c:	e0bffe17 	ldw	r2,-8(fp)
   23770:	10c02e17 	ldw	r3,184(r2)
   23774:	e0bffc17 	ldw	r2,-16(fp)
   23778:	1885883a 	add	r2,r3,r2
   2377c:	1007883a 	mov	r3,r2
   23780:	e0bffa17 	ldw	r2,-24(fp)
   23784:	100d883a 	mov	r6,r2
   23788:	180b883a 	mov	r5,r3
   2378c:	e13ffb17 	ldw	r4,-20(fp)
   23790:	00106380 	call	10638 <memcpy>
    }

    return ret_code;
   23794:	e0bfff17 	ldw	r2,-4(fp)
}
   23798:	e037883a 	mov	sp,fp
   2379c:	dfc00117 	ldw	ra,4(sp)
   237a0:	df000017 	ldw	fp,0(sp)
   237a4:	dec00204 	addi	sp,sp,8
   237a8:	f800283a 	ret

000237ac <altera_qspi_controller2_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_qspi_controller2_init(alt_qspi_controller2_dev *flash)
{
   237ac:	defffa04 	addi	sp,sp,-24
   237b0:	dfc00515 	stw	ra,20(sp)
   237b4:	df000415 	stw	fp,16(sp)
   237b8:	df000404 	addi	fp,sp,16
   237bc:	e13ffc15 	stw	r4,-16(fp)
    alt_u32 silicon_id = 0;
   237c0:	e03fff15 	stw	zero,-4(fp)
    alt_u32 size_in_bytes = 0;
   237c4:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 number_of_sectors = 0;
   237c8:	e03ffe15 	stw	zero,-8(fp)

    /* return -EINVAL if flash is NULL */
    if(NULL == flash)
   237cc:	e0bffc17 	ldw	r2,-16(fp)
   237d0:	1000021e 	bne	r2,zero,237dc <altera_qspi_controller2_init+0x30>
    {
        return -EINVAL;
   237d4:	00bffa84 	movi	r2,-22
   237d8:	00008506 	br	239f0 <altera_qspi_controller2_init+0x244>
    }
    
    /* return -ENODEV if CSR slave is not attached */
    if(NULL == (void *)flash->csr_base)
   237dc:	e0bffc17 	ldw	r2,-16(fp)
   237e0:	10803017 	ldw	r2,192(r2)
   237e4:	1000021e 	bne	r2,zero,237f0 <altera_qspi_controller2_init+0x44>
    {
        return -ENODEV;
   237e8:	00bffb44 	movi	r2,-19
   237ec:	00008006 	br	239f0 <altera_qspi_controller2_init+0x244>
     *
     * In both cases, we can determine the number of sectors, which we can use
     * to calculate a size. We compare that size to the system.h value to make sure
     * the QSPI soft IP was configured correctly.
     */
    if(0 == flash->is_epcs)
   237f0:	e0bffc17 	ldw	r2,-16(fp)
   237f4:	10803217 	ldw	r2,200(r2)
   237f8:	1000381e 	bne	r2,zero,238dc <altera_qspi_controller2_init+0x130>
    {
        /* If we're an EPCQ or QSPI, we read QSPI_RD_RDID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_RDID(flash->csr_base);
   237fc:	e0bffc17 	ldw	r2,-16(fp)
   23800:	10803017 	ldw	r2,192(r2)
   23804:	10800204 	addi	r2,r2,8
   23808:	10800037 	ldwio	r2,0(r2)
   2380c:	e0bfff15 	stw	r2,-4(fp)
        silicon_id >>= 16;
   23810:	e0bfff17 	ldw	r2,-4(fp)
   23814:	1004d43a 	srli	r2,r2,16
   23818:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &=  ALTERA_QSPI_CONTROLLER2_RDID_MASK;
   2381c:	e0bfff17 	ldw	r2,-4(fp)
   23820:	10803fcc 	andi	r2,r2,255
   23824:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCQ/QSPI device so we can figure out the number of sectors */
        /*EPCQ and QSPI share the same ID for the same capacity*/
        switch(silicon_id)
   23828:	e0bfff17 	ldw	r2,-4(fp)
   2382c:	10bffac4 	addi	r2,r2,-21
   23830:	10c00368 	cmpgeui	r3,r2,13
   23834:	1800271e 	bne	r3,zero,238d4 <altera_qspi_controller2_init+0x128>
   23838:	100690ba 	slli	r3,r2,2
   2383c:	008000b4 	movhi	r2,2
   23840:	1885883a 	add	r2,r3,r2
   23844:	108e1317 	ldw	r2,14412(r2)
   23848:	1000683a 	jmp	r2
   2384c:	00023880 	call	2388 <ad9523_setup+0x24c>
   23850:	0002388c 	andi	zero,zero,2274
   23854:	00023898 	cmpnei	zero,zero,2274
   23858:	000238a4 	muli	zero,zero,2274
   2385c:	000238b0 	cmpltui	zero,zero,2274
   23860:	000238d4 	movui	zero,2275
   23864:	000238d4 	movui	zero,2275
   23868:	000238d4 	movui	zero,2275
   2386c:	000238d4 	movui	zero,2275
   23870:	000238d4 	movui	zero,2275
   23874:	000238d4 	movui	zero,2275
   23878:	000238bc 	xorhi	zero,zero,2274
   2387c:	000238c8 	cmpgei	zero,zero,2275
        {
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI16:
            {
                number_of_sectors = 32;
   23880:	00800804 	movi	r2,32
   23884:	e0bffe15 	stw	r2,-8(fp)
                break;
   23888:	00002e06 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI32:
            {
                number_of_sectors = 64;
   2388c:	00801004 	movi	r2,64
   23890:	e0bffe15 	stw	r2,-8(fp)
                break;
   23894:	00002b06 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI64:
            {
                number_of_sectors = 128;
   23898:	00802004 	movi	r2,128
   2389c:	e0bffe15 	stw	r2,-8(fp)
                break;
   238a0:	00002806 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI128:
            {
                number_of_sectors = 256;
   238a4:	00804004 	movi	r2,256
   238a8:	e0bffe15 	stw	r2,-8(fp)
                break;
   238ac:	00002506 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI256:
            {
                number_of_sectors = 512;
   238b0:	00808004 	movi	r2,512
   238b4:	e0bffe15 	stw	r2,-8(fp)
                break;
   238b8:	00002206 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI512:
            {
                number_of_sectors = 1024;
   238bc:	00810004 	movi	r2,1024
   238c0:	e0bffe15 	stw	r2,-8(fp)
                break;
   238c4:	00001f06 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI1024:
            {
                number_of_sectors = 2048;
   238c8:	00820004 	movi	r2,2048
   238cc:	e0bffe15 	stw	r2,-8(fp)
                break;
   238d0:	00001c06 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
   238d4:	00bffb44 	movi	r2,-19
   238d8:	00004506 	br	239f0 <altera_qspi_controller2_init+0x244>
            }
        }
    }
    else {
        /* If we're an EPCS, we read QSPI_RD_SID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_SID(flash->csr_base);
   238dc:	e0bffc17 	ldw	r2,-16(fp)
   238e0:	10803017 	ldw	r2,192(r2)
   238e4:	10800104 	addi	r2,r2,4
   238e8:	10800037 	ldwio	r2,0(r2)
   238ec:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &= ALTERA_QSPI_CONTROLLER2_SID_MASK;
   238f0:	e0bfff17 	ldw	r2,-4(fp)
   238f4:	10803fcc 	andi	r2,r2,255
   238f8:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCS device so we can figure out various properties */
        switch(silicon_id)
   238fc:	e0bfff17 	ldw	r2,-4(fp)
   23900:	10c005a0 	cmpeqi	r3,r2,22
   23904:	1800071e 	bne	r3,zero,23924 <altera_qspi_controller2_init+0x178>
   23908:	10c00620 	cmpeqi	r3,r2,24
   2390c:	1800081e 	bne	r3,zero,23930 <altera_qspi_controller2_init+0x184>
   23910:	10800520 	cmpeqi	r2,r2,20
   23914:	10000926 	beq	r2,zero,2393c <altera_qspi_controller2_init+0x190>
        {
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS16:
            {
                number_of_sectors = 32;
   23918:	00800804 	movi	r2,32
   2391c:	e0bffe15 	stw	r2,-8(fp)
                break;
   23920:	00000806 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS64:
            {
                number_of_sectors = 128;
   23924:	00802004 	movi	r2,128
   23928:	e0bffe15 	stw	r2,-8(fp)
                break;
   2392c:	00000506 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS128:
            {
                number_of_sectors = 256;
   23930:	00804004 	movi	r2,256
   23934:	e0bffe15 	stw	r2,-8(fp)
                break;
   23938:	00000206 	br	23944 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
   2393c:	00bffb44 	movi	r2,-19
   23940:	00002b06 	br	239f0 <altera_qspi_controller2_init+0x244>
            }
        }
    }

    /* Calculate size of flash based on number of sectors */
    size_in_bytes = number_of_sectors * flash->sector_size;
   23944:	e0bffc17 	ldw	r2,-16(fp)
   23948:	10803417 	ldw	r2,208(r2)
   2394c:	e0fffe17 	ldw	r3,-8(fp)
   23950:	1885383a 	mul	r2,r3,r2
   23954:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Make sure calculated size is the same size given in system.h
     * Also check number of sectors is the same number given in system.h
     * Otherwise the QSPI IP was not configured correctly
     */
    if(    size_in_bytes != flash->size_in_bytes ||
   23958:	e0bffc17 	ldw	r2,-16(fp)
   2395c:	10803117 	ldw	r2,196(r2)
   23960:	e0fffd17 	ldw	r3,-12(fp)
   23964:	1880041e 	bne	r3,r2,23978 <altera_qspi_controller2_init+0x1cc>
            number_of_sectors != flash->number_of_sectors)
   23968:	e0bffc17 	ldw	r2,-16(fp)
   2396c:	10803317 	ldw	r2,204(r2)
    if(    size_in_bytes != flash->size_in_bytes ||
   23970:	e0fffe17 	ldw	r3,-8(fp)
   23974:	18800426 	beq	r3,r2,23988 <altera_qspi_controller2_init+0x1dc>
    {
        flash->dev.number_of_regions = 0;
   23978:	e0bffc17 	ldw	r2,-16(fp)
   2397c:	10000c15 	stw	zero,48(r2)
        return -ENODEV;
   23980:	00bffb44 	movi	r2,-19
   23984:	00001a06 	br	239f0 <altera_qspi_controller2_init+0x244>
    }
    else
    {
        flash->silicon_id = silicon_id;
   23988:	e0bffc17 	ldw	r2,-16(fp)
   2398c:	e0ffff17 	ldw	r3,-4(fp)
   23990:	10c03615 	stw	r3,216(r2)
        flash->number_of_sectors = number_of_sectors;
   23994:	e0bffc17 	ldw	r2,-16(fp)
   23998:	e0fffe17 	ldw	r3,-8(fp)
   2399c:	10c03315 	stw	r3,204(r2)

        /*
         * populate fields of region_info required to conform to HAL API
         * create 1 region that composed of "number_of_sectors" blocks
         */
        flash->dev.number_of_regions = 1;
   239a0:	e0bffc17 	ldw	r2,-16(fp)
   239a4:	00c00044 	movi	r3,1
   239a8:	10c00c15 	stw	r3,48(r2)
        flash->dev.region_info[0].offset = 0;
   239ac:	e0bffc17 	ldw	r2,-16(fp)
   239b0:	10000d15 	stw	zero,52(r2)
        flash->dev.region_info[0].region_size = size_in_bytes;
   239b4:	e0fffd17 	ldw	r3,-12(fp)
   239b8:	e0bffc17 	ldw	r2,-16(fp)
   239bc:	10c00e15 	stw	r3,56(r2)
        flash->dev.region_info[0].number_of_blocks = number_of_sectors;
   239c0:	e0fffe17 	ldw	r3,-8(fp)
   239c4:	e0bffc17 	ldw	r2,-16(fp)
   239c8:	10c00f15 	stw	r3,60(r2)
        flash->dev.region_info[0].block_size = flash->sector_size;
   239cc:	e0bffc17 	ldw	r2,-16(fp)
   239d0:	10803417 	ldw	r2,208(r2)
   239d4:	1007883a 	mov	r3,r2
   239d8:	e0bffc17 	ldw	r2,-16(fp)
   239dc:	10c01015 	stw	r3,64(r2)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
        alt_flash_device_register(&(flash->dev));
   239e0:	e0bffc17 	ldw	r2,-16(fp)
   239e4:	1009883a 	mov	r4,r2
   239e8:	00240c00 	call	240c0 <alt_flash_device_register>


    return 0;
   239ec:	0005883a 	mov	r2,zero
}
   239f0:	e037883a 	mov	sp,fp
   239f4:	dfc00117 	ldw	ra,4(sp)
   239f8:	df000017 	ldw	fp,0(sp)
   239fc:	dec00204 	addi	sp,sp,8
   23a00:	f800283a 	ret

00023a04 <alt_qspi_validate_read_write_arguments>:
(
        alt_qspi_controller2_dev *flash_info, /** device info */
        alt_u32 offset, /** offset of read/write */
        alt_u32 length /** length of read/write */
)
{
   23a04:	defff904 	addi	sp,sp,-28
   23a08:	df000615 	stw	fp,24(sp)
   23a0c:	df000604 	addi	fp,sp,24
   23a10:	e13ffc15 	stw	r4,-16(fp)
   23a14:	e17ffb15 	stw	r5,-20(fp)
   23a18:	e1bffa15 	stw	r6,-24(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
   23a1c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 start_address = 0;
   23a20:	e03ffe15 	stw	zero,-8(fp)
    alt_32 end_address = 0;
   23a24:	e03ffd15 	stw	zero,-12(fp)
    
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
   23a28:	e0bffc17 	ldw	r2,-16(fp)
   23a2c:	1000021e 	bne	r2,zero,23a38 <alt_qspi_validate_read_write_arguments+0x34>
   {
        return -EINVAL;
   23a30:	00bffa84 	movi	r2,-22
   23a34:	00001606 	br	23a90 <alt_qspi_validate_read_write_arguments+0x8c>
   }
    
  qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
   23a38:	e0bffc17 	ldw	r2,-16(fp)
   23a3c:	e0bfff15 	stw	r2,-4(fp)

  start_address = qspi_flash_info->data_base + offset; /** first address of read or write */
   23a40:	e0bfff17 	ldw	r2,-4(fp)
   23a44:	10802e17 	ldw	r2,184(r2)
   23a48:	e0fffb17 	ldw	r3,-20(fp)
   23a4c:	1885883a 	add	r2,r3,r2
   23a50:	e0bffe15 	stw	r2,-8(fp)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
   23a54:	e0fffe17 	ldw	r3,-8(fp)
   23a58:	e0bffa17 	ldw	r2,-24(fp)
   23a5c:	1885883a 	add	r2,r3,r2
   23a60:	e0bffd15 	stw	r2,-12(fp)

  /* make sure start and end address is less then the end address of the flash */
  if(
          start_address >= qspi_flash_info->data_end ||
   23a64:	e0bfff17 	ldw	r2,-4(fp)
   23a68:	10802f17 	ldw	r2,188(r2)
  if(
   23a6c:	e0fffe17 	ldw	r3,-8(fp)
   23a70:	1880042e 	bgeu	r3,r2,23a84 <alt_qspi_validate_read_write_arguments+0x80>
          end_address > qspi_flash_info->data_end ||
   23a74:	e0bfff17 	ldw	r2,-4(fp)
   23a78:	10c02f17 	ldw	r3,188(r2)
   23a7c:	e0bffd17 	ldw	r2,-12(fp)
          offset < 0 ||
   23a80:	1880022e 	bgeu	r3,r2,23a8c <alt_qspi_validate_read_write_arguments+0x88>
          length < 0
  )
  {
      return -EINVAL;
   23a84:	00bffa84 	movi	r2,-22
   23a88:	00000106 	br	23a90 <alt_qspi_validate_read_write_arguments+0x8c>
  }

  return 0;
   23a8c:	0005883a 	mov	r2,zero
}
   23a90:	e037883a 	mov	sp,fp
   23a94:	df000017 	ldw	fp,0(sp)
   23a98:	dec00104 	addi	sp,sp,4
   23a9c:	f800283a 	ret

00023aa0 <alt_qspi_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_qspi_poll_for_write_in_progress(alt_qspi_controller2_dev* qspi_flash_info)
{  
   23aa0:	defffc04 	addi	sp,sp,-16
   23aa4:	df000315 	stw	fp,12(sp)
   23aa8:	df000304 	addi	fp,sp,12
   23aac:	e13ffd15 	stw	r4,-12(fp)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
    alt_u32 timeout = ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE;
   23ab0:	008002f4 	movhi	r2,11
   23ab4:	10ab9804 	addi	r2,r2,-20896
   23ab8:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 counter = 0;
   23abc:	e03fff8d 	sth	zero,-2(fp)
#endif

    /* return -EINVAL if qspi_flash_info is NULL */
    if(NULL == qspi_flash_info)
   23ac0:	e0bffd17 	ldw	r2,-12(fp)
   23ac4:	10000a1e 	bne	r2,zero,23af0 <alt_qspi_poll_for_write_in_progress+0x50>
    {
        return -EINVAL;
   23ac8:	00bffa84 	movi	r2,-22
   23acc:	00000f06 	br	23b0c <alt_qspi_poll_for_write_in_progress+0x6c>
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_MASK) ==
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_BUSY)
    {
        if (counter > (ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE>>1)) alt_busy_sleep(2); /* delay 2us */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
        if(timeout <= counter )
   23ad0:	e0ffff8b 	ldhu	r3,-2(fp)
   23ad4:	e0bffe17 	ldw	r2,-8(fp)
   23ad8:	18800236 	bltu	r3,r2,23ae4 <alt_qspi_poll_for_write_in_progress+0x44>
        {
            return -ETIME;
   23adc:	00bff084 	movi	r2,-62
   23ae0:	00000a06 	br	23b0c <alt_qspi_poll_for_write_in_progress+0x6c>
        }
        
        counter++;
   23ae4:	e0bfff8b 	ldhu	r2,-2(fp)
   23ae8:	10800044 	addi	r2,r2,1
   23aec:	e0bfff8d 	sth	r2,-2(fp)
    while((IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base) &
   23af0:	e0bffd17 	ldw	r2,-12(fp)
   23af4:	10803017 	ldw	r2,192(r2)
   23af8:	10800037 	ldwio	r2,0(r2)
   23afc:	1080004c 	andi	r2,r2,1
   23b00:	10800060 	cmpeqi	r2,r2,1
   23b04:	103ff21e 	bne	r2,zero,23ad0 <__alt_mem_mcu_subsystem_ram_0+0x78003ad0>
#endif

    }

    return 0;
   23b08:	0005883a 	mov	r2,zero
}
   23b0c:	e037883a 	mov	sp,fp
   23b10:	df000017 	ldw	fp,0(sp)
   23b14:	dec00104 	addi	sp,sp,4
   23b18:	f800283a 	ret

00023b1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23b1c:	defff404 	addi	sp,sp,-48
   23b20:	df000b15 	stw	fp,44(sp)
   23b24:	df000b04 	addi	fp,sp,44
   23b28:	e13ff815 	stw	r4,-32(fp)
   23b2c:	e17ff715 	stw	r5,-36(fp)
   23b30:	e1bff615 	stw	r6,-40(fp)
   23b34:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   23b38:	e03ffe15 	stw	zero,-8(fp)
   23b3c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   23b40:	d0a78017 	ldw	r2,-25088(gp)
  
  if (alt_ticks_per_second ())
   23b44:	10004626 	beq	r2,zero,23c60 <alt_alarm_start+0x144>
  {
    if (alarm)
   23b48:	e0bff817 	ldw	r2,-32(fp)
   23b4c:	10004226 	beq	r2,zero,23c58 <alt_alarm_start+0x13c>
    {
      alarm->callback = callback;
   23b50:	e0bff817 	ldw	r2,-32(fp)
   23b54:	e0fff617 	ldw	r3,-40(fp)
   23b58:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   23b5c:	e0bff817 	ldw	r2,-32(fp)
   23b60:	e0fff517 	ldw	r3,-44(fp)
   23b64:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   23b68:	0005303a 	rdctl	r2,status
   23b6c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b70:	e0fff917 	ldw	r3,-28(fp)
   23b74:	00bfff84 	movi	r2,-2
   23b78:	1884703a 	and	r2,r3,r2
   23b7c:	1001703a 	wrctl	status,r2
  return context;
   23b80:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   23b84:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23b88:	d0a78117 	ldw	r2,-25084(gp)
   23b8c:	d0e78217 	ldw	r3,-25080(gp)
      
      current_nticks = alt_nticks();
   23b90:	e0bffe15 	stw	r2,-8(fp)
   23b94:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   23b98:	e0bff717 	ldw	r2,-36(fp)
   23b9c:	1011883a 	mov	r8,r2
   23ba0:	0013883a 	mov	r9,zero
   23ba4:	e13ffe17 	ldw	r4,-8(fp)
   23ba8:	e17fff17 	ldw	r5,-4(fp)
   23bac:	4105883a 	add	r2,r8,r4
   23bb0:	120d803a 	cmpltu	r6,r2,r8
   23bb4:	4947883a 	add	r3,r9,r5
   23bb8:	30c9883a 	add	r4,r6,r3
   23bbc:	2007883a 	mov	r3,r4
   23bc0:	1009883a 	mov	r4,r2
   23bc4:	180b883a 	mov	r5,r3
   23bc8:	01800044 	movi	r6,1
   23bcc:	000f883a 	mov	r7,zero
   23bd0:	2185883a 	add	r2,r4,r6
   23bd4:	1111803a 	cmpltu	r8,r2,r4
   23bd8:	29c7883a 	add	r3,r5,r7
   23bdc:	40c9883a 	add	r4,r8,r3
   23be0:	2007883a 	mov	r3,r4
   23be4:	1009883a 	mov	r4,r2
   23be8:	180b883a 	mov	r5,r3
   23bec:	e0bff817 	ldw	r2,-32(fp)
   23bf0:	11000215 	stw	r4,8(r2)
   23bf4:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23bf8:	e0bff817 	ldw	r2,-32(fp)
   23bfc:	d0e01304 	addi	r3,gp,-32692
   23c00:	e0fffb15 	stw	r3,-20(fp)
   23c04:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
   23c08:	e0bffa17 	ldw	r2,-24(fp)
   23c0c:	e0fffb17 	ldw	r3,-20(fp)
   23c10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23c14:	e0bffb17 	ldw	r2,-20(fp)
   23c18:	10c00017 	ldw	r3,0(r2)
   23c1c:	e0bffa17 	ldw	r2,-24(fp)
   23c20:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   23c24:	e0bffb17 	ldw	r2,-20(fp)
   23c28:	10800017 	ldw	r2,0(r2)
   23c2c:	e0fffa17 	ldw	r3,-24(fp)
   23c30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23c34:	e0bffb17 	ldw	r2,-20(fp)
   23c38:	e0fffa17 	ldw	r3,-24(fp)
   23c3c:	10c00015 	stw	r3,0(r2)
   23c40:	e0bffd17 	ldw	r2,-12(fp)
   23c44:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   23c48:	e0bffc17 	ldw	r2,-16(fp)
   23c4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23c50:	0005883a 	mov	r2,zero
   23c54:	00000306 	br	23c64 <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
   23c58:	00bffa84 	movi	r2,-22
   23c5c:	00000106 	br	23c64 <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
   23c60:	00bfde84 	movi	r2,-134
  }
}
   23c64:	e037883a 	mov	sp,fp
   23c68:	df000017 	ldw	fp,0(sp)
   23c6c:	dec00104 	addi	sp,sp,4
   23c70:	f800283a 	ret

00023c74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   23c74:	defffb04 	addi	sp,sp,-20
   23c78:	df000415 	stw	fp,16(sp)
   23c7c:	df000404 	addi	fp,sp,16
   23c80:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   23c84:	008000c4 	movi	r2,3
   23c88:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   23c8c:	e0fffe17 	ldw	r3,-8(fp)
   23c90:	008003f4 	movhi	r2,15
   23c94:	10909004 	addi	r2,r2,16960
   23c98:	1887383a 	mul	r3,r3,r2
   23c9c:	0081dcf4 	movhi	r2,1907
   23ca0:	10965004 	addi	r2,r2,22848
   23ca4:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
   23ca8:	00a00034 	movhi	r2,32768
   23cac:	10bfffc4 	addi	r2,r2,-1
   23cb0:	10c5203a 	divu	r2,r2,r3
   23cb4:	e0fffc17 	ldw	r3,-16(fp)
   23cb8:	1885203a 	divu	r2,r3,r2
   23cbc:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   23cc0:	e0bffd17 	ldw	r2,-12(fp)
   23cc4:	10002526 	beq	r2,zero,23d5c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
   23cc8:	e03fff15 	stw	zero,-4(fp)
   23ccc:	00001406 	br	23d20 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   23cd0:	00a00034 	movhi	r2,32768
   23cd4:	10bfffc4 	addi	r2,r2,-1
   23cd8:	10bfffc4 	addi	r2,r2,-1
   23cdc:	103ffe1e 	bne	r2,zero,23cd8 <__alt_mem_mcu_subsystem_ram_0+0x78003cd8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23ce0:	e0fffe17 	ldw	r3,-8(fp)
   23ce4:	008003f4 	movhi	r2,15
   23ce8:	10909004 	addi	r2,r2,16960
   23cec:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
   23cf0:	0081dcf4 	movhi	r2,1907
   23cf4:	10965004 	addi	r2,r2,22848
   23cf8:	10c7203a 	divu	r3,r2,r3
   23cfc:	00a00034 	movhi	r2,32768
   23d00:	10bfffc4 	addi	r2,r2,-1
   23d04:	10c5203a 	divu	r2,r2,r3
   23d08:	e0fffc17 	ldw	r3,-16(fp)
   23d0c:	1885c83a 	sub	r2,r3,r2
   23d10:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   23d14:	e0bfff17 	ldw	r2,-4(fp)
   23d18:	10800044 	addi	r2,r2,1
   23d1c:	e0bfff15 	stw	r2,-4(fp)
   23d20:	e0ffff17 	ldw	r3,-4(fp)
   23d24:	e0bffd17 	ldw	r2,-12(fp)
   23d28:	18bfe916 	blt	r3,r2,23cd0 <__alt_mem_mcu_subsystem_ram_0+0x78003cd0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23d2c:	e0fffe17 	ldw	r3,-8(fp)
   23d30:	008003f4 	movhi	r2,15
   23d34:	10909004 	addi	r2,r2,16960
   23d38:	1887383a 	mul	r3,r3,r2
   23d3c:	0081dcf4 	movhi	r2,1907
   23d40:	10965004 	addi	r2,r2,22848
   23d44:	10c7203a 	divu	r3,r2,r3
   23d48:	e0bffc17 	ldw	r2,-16(fp)
   23d4c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   23d50:	10bfffc4 	addi	r2,r2,-1
   23d54:	103ffe1e 	bne	r2,zero,23d50 <__alt_mem_mcu_subsystem_ram_0+0x78003d50>
   23d58:	00000b06 	br	23d88 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23d5c:	e0fffe17 	ldw	r3,-8(fp)
   23d60:	008003f4 	movhi	r2,15
   23d64:	10909004 	addi	r2,r2,16960
   23d68:	1887383a 	mul	r3,r3,r2
   23d6c:	0081dcf4 	movhi	r2,1907
   23d70:	10965004 	addi	r2,r2,22848
   23d74:	10c7203a 	divu	r3,r2,r3
   23d78:	e0bffc17 	ldw	r2,-16(fp)
   23d7c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   23d80:	10bfffc4 	addi	r2,r2,-1
   23d84:	00bffe16 	blt	zero,r2,23d80 <__alt_mem_mcu_subsystem_ram_0+0x78003d80>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   23d88:	0005883a 	mov	r2,zero
}
   23d8c:	e037883a 	mov	sp,fp
   23d90:	df000017 	ldw	fp,0(sp)
   23d94:	dec00104 	addi	sp,sp,4
   23d98:	f800283a 	ret

00023d9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23d9c:	defffe04 	addi	sp,sp,-8
   23da0:	df000115 	stw	fp,4(sp)
   23da4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   23da8:	e03fff15 	stw	zero,-4(fp)
   23dac:	00000506 	br	23dc4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   23db0:	e0bfff17 	ldw	r2,-4(fp)
   23db4:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   23db8:	e0bfff17 	ldw	r2,-4(fp)
   23dbc:	10800804 	addi	r2,r2,32
   23dc0:	e0bfff15 	stw	r2,-4(fp)
   23dc4:	e0bfff17 	ldw	r2,-4(fp)
   23dc8:	10820030 	cmpltui	r2,r2,2048
   23dcc:	103ff81e 	bne	r2,zero,23db0 <__alt_mem_mcu_subsystem_ram_0+0x78003db0>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23dd0:	0001883a 	nop
   23dd4:	e037883a 	mov	sp,fp
   23dd8:	df000017 	ldw	fp,0(sp)
   23ddc:	dec00104 	addi	sp,sp,4
   23de0:	f800283a 	ret

00023de4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23de4:	defffd04 	addi	sp,sp,-12
   23de8:	dfc00215 	stw	ra,8(sp)
   23dec:	df000115 	stw	fp,4(sp)
   23df0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23df4:	008000b4 	movhi	r2,2
   23df8:	1093c904 	addi	r2,r2,20260
   23dfc:	e0bfff15 	stw	r2,-4(fp)
   23e00:	00000606 	br	23e1c <_do_ctors+0x38>
        (*ctor) (); 
   23e04:	e0bfff17 	ldw	r2,-4(fp)
   23e08:	10800017 	ldw	r2,0(r2)
   23e0c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23e10:	e0bfff17 	ldw	r2,-4(fp)
   23e14:	10bfff04 	addi	r2,r2,-4
   23e18:	e0bfff15 	stw	r2,-4(fp)
   23e1c:	e0ffff17 	ldw	r3,-4(fp)
   23e20:	008000b4 	movhi	r2,2
   23e24:	1093ca04 	addi	r2,r2,20264
   23e28:	18bff62e 	bgeu	r3,r2,23e04 <__alt_mem_mcu_subsystem_ram_0+0x78003e04>
}
   23e2c:	0001883a 	nop
   23e30:	e037883a 	mov	sp,fp
   23e34:	dfc00117 	ldw	ra,4(sp)
   23e38:	df000017 	ldw	fp,0(sp)
   23e3c:	dec00204 	addi	sp,sp,8
   23e40:	f800283a 	ret

00023e44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23e44:	defffd04 	addi	sp,sp,-12
   23e48:	dfc00215 	stw	ra,8(sp)
   23e4c:	df000115 	stw	fp,4(sp)
   23e50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23e54:	008000b4 	movhi	r2,2
   23e58:	1093c904 	addi	r2,r2,20260
   23e5c:	e0bfff15 	stw	r2,-4(fp)
   23e60:	00000606 	br	23e7c <_do_dtors+0x38>
        (*dtor) (); 
   23e64:	e0bfff17 	ldw	r2,-4(fp)
   23e68:	10800017 	ldw	r2,0(r2)
   23e6c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23e70:	e0bfff17 	ldw	r2,-4(fp)
   23e74:	10bfff04 	addi	r2,r2,-4
   23e78:	e0bfff15 	stw	r2,-4(fp)
   23e7c:	e0ffff17 	ldw	r3,-4(fp)
   23e80:	008000b4 	movhi	r2,2
   23e84:	1093ca04 	addi	r2,r2,20264
   23e88:	18bff62e 	bgeu	r3,r2,23e64 <__alt_mem_mcu_subsystem_ram_0+0x78003e64>
}
   23e8c:	0001883a 	nop
   23e90:	e037883a 	mov	sp,fp
   23e94:	dfc00117 	ldw	ra,4(sp)
   23e98:	df000017 	ldw	fp,0(sp)
   23e9c:	dec00204 	addi	sp,sp,8
   23ea0:	f800283a 	ret

00023ea4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   23ea4:	defffa04 	addi	sp,sp,-24
   23ea8:	df000515 	stw	fp,20(sp)
   23eac:	df000504 	addi	fp,sp,20
   23eb0:	e13ffc15 	stw	r4,-16(fp)
   23eb4:	e17ffb15 	stw	r5,-20(fp)
    alt_dev* next = (alt_dev*) llist->next;
   23eb8:	e0bffb17 	ldw	r2,-20(fp)
   23ebc:	10800017 	ldw	r2,0(r2)
   23ec0:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   23ec4:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   23ec8:	0080fa04 	movi	r2,1000
   23ecc:	e0bffd15 	stw	r2,-12(fp)
    
    if (llist == NULL) { return NULL; }
   23ed0:	e0bffb17 	ldw	r2,-20(fp)
   23ed4:	1000431e 	bne	r2,zero,23fe4 <alt_find_dev+0x140>
   23ed8:	0005883a 	mov	r2,zero
   23edc:	00004506 	br	23ff4 <alt_find_dev+0x150>
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    {
        len=0;
   23ee0:	e03ffe15 	stw	zero,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   23ee4:	00001306 	br	23f34 <alt_find_dev+0x90>
        {
            if (next->name[len] != name[len]) { break; }
   23ee8:	e0bfff17 	ldw	r2,-4(fp)
   23eec:	10c00217 	ldw	r3,8(r2)
   23ef0:	e0bffe17 	ldw	r2,-8(fp)
   23ef4:	1885883a 	add	r2,r3,r2
   23ef8:	11000003 	ldbu	r4,0(r2)
   23efc:	e0bffe17 	ldw	r2,-8(fp)
   23f00:	e0fffc17 	ldw	r3,-16(fp)
   23f04:	1885883a 	add	r2,r3,r2
   23f08:	10800003 	ldbu	r2,0(r2)
   23f0c:	20c03fcc 	andi	r3,r4,255
   23f10:	18c0201c 	xori	r3,r3,128
   23f14:	18ffe004 	addi	r3,r3,-128
   23f18:	10803fcc 	andi	r2,r2,255
   23f1c:	1080201c 	xori	r2,r2,128
   23f20:	10bfe004 	addi	r2,r2,-128
   23f24:	1880181e 	bne	r3,r2,23f88 <alt_find_dev+0xe4>
            len++;
   23f28:	e0bffe17 	ldw	r2,-8(fp)
   23f2c:	10800044 	addi	r2,r2,1
   23f30:	e0bffe15 	stw	r2,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   23f34:	e0bffe17 	ldw	r2,-8(fp)
   23f38:	e0fffc17 	ldw	r3,-16(fp)
   23f3c:	1885883a 	add	r2,r3,r2
   23f40:	10800003 	ldbu	r2,0(r2)
   23f44:	10803fcc 	andi	r2,r2,255
   23f48:	1080201c 	xori	r2,r2,128
   23f4c:	10bfe004 	addi	r2,r2,-128
   23f50:	10000e26 	beq	r2,zero,23f8c <alt_find_dev+0xe8>
   23f54:	e0bfff17 	ldw	r2,-4(fp)
   23f58:	10c00217 	ldw	r3,8(r2)
   23f5c:	e0bffe17 	ldw	r2,-8(fp)
   23f60:	1885883a 	add	r2,r3,r2
   23f64:	10800003 	ldbu	r2,0(r2)
   23f68:	10803fcc 	andi	r2,r2,255
   23f6c:	1080201c 	xori	r2,r2,128
   23f70:	10bfe004 	addi	r2,r2,-128
   23f74:	10000526 	beq	r2,zero,23f8c <alt_find_dev+0xe8>
   23f78:	e0fffe17 	ldw	r3,-8(fp)
   23f7c:	e0bffd17 	ldw	r2,-12(fp)
   23f80:	18bfd916 	blt	r3,r2,23ee8 <__alt_mem_mcu_subsystem_ram_0+0x78003ee8>
   23f84:	00000106 	br	23f8c <alt_find_dev+0xe8>
            if (next->name[len] != name[len]) { break; }
   23f88:	0001883a 	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
   23f8c:	e0bffe17 	ldw	r2,-8(fp)
   23f90:	e0fffc17 	ldw	r3,-16(fp)
   23f94:	1885883a 	add	r2,r3,r2
   23f98:	10800003 	ldbu	r2,0(r2)
   23f9c:	10803fcc 	andi	r2,r2,255
   23fa0:	1080201c 	xori	r2,r2,128
   23fa4:	10bfe004 	addi	r2,r2,-128
   23fa8:	10000b1e 	bne	r2,zero,23fd8 <alt_find_dev+0x134>
   23fac:	e0bfff17 	ldw	r2,-4(fp)
   23fb0:	10c00217 	ldw	r3,8(r2)
   23fb4:	e0bffe17 	ldw	r2,-8(fp)
   23fb8:	1885883a 	add	r2,r3,r2
   23fbc:	10800003 	ldbu	r2,0(r2)
   23fc0:	10803fcc 	andi	r2,r2,255
   23fc4:	1080201c 	xori	r2,r2,128
   23fc8:	10bfe004 	addi	r2,r2,-128
   23fcc:	1000021e 	bne	r2,zero,23fd8 <alt_find_dev+0x134>
   23fd0:	e0bfff17 	ldw	r2,-4(fp)
   23fd4:	00000706 	br	23ff4 <alt_find_dev+0x150>

        next = (alt_dev*) next->llist.next;
   23fd8:	e0bfff17 	ldw	r2,-4(fp)
   23fdc:	10800017 	ldw	r2,0(r2)
   23fe0:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) llist)
   23fe4:	e0ffff17 	ldw	r3,-4(fp)
   23fe8:	e0bffb17 	ldw	r2,-20(fp)
   23fec:	18bfbc1e 	bne	r3,r2,23ee0 <__alt_mem_mcu_subsystem_ram_0+0x78003ee0>
    }
  
    /* No match found */
  
    return NULL;
   23ff0:	0005883a 	mov	r2,zero
}
   23ff4:	e037883a 	mov	sp,fp
   23ff8:	df000017 	ldw	fp,0(sp)
   23ffc:	dec00104 	addi	sp,sp,4
   24000:	f800283a 	ret

00024004 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   24004:	defffc04 	addi	sp,sp,-16
   24008:	dfc00315 	stw	ra,12(sp)
   2400c:	df000215 	stw	fp,8(sp)
   24010:	df000204 	addi	fp,sp,8
   24014:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   24018:	d1601004 	addi	r5,gp,-32704
   2401c:	e13ffe17 	ldw	r4,-8(fp)
   24020:	0023ea40 	call	23ea4 <alt_find_dev>
   24024:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
   24028:	e0bfff17 	ldw	r2,-4(fp)
   2402c:	10000926 	beq	r2,zero,24054 <alt_flash_open_dev+0x50>
   24030:	e0bfff17 	ldw	r2,-4(fp)
   24034:	10800317 	ldw	r2,12(r2)
   24038:	10000626 	beq	r2,zero,24054 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   2403c:	e0bfff17 	ldw	r2,-4(fp)
   24040:	10800317 	ldw	r2,12(r2)
   24044:	e17ffe17 	ldw	r5,-8(fp)
   24048:	e13fff17 	ldw	r4,-4(fp)
   2404c:	103ee83a 	callr	r2
   24050:	00000106 	br	24058 <alt_flash_open_dev+0x54>
  }

  return dev;
   24054:	e0bfff17 	ldw	r2,-4(fp)
}
   24058:	e037883a 	mov	sp,fp
   2405c:	dfc00117 	ldw	ra,4(sp)
   24060:	df000017 	ldw	fp,0(sp)
   24064:	dec00204 	addi	sp,sp,8
   24068:	f800283a 	ret

0002406c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   2406c:	defffd04 	addi	sp,sp,-12
   24070:	dfc00215 	stw	ra,8(sp)
   24074:	df000115 	stw	fp,4(sp)
   24078:	df000104 	addi	fp,sp,4
   2407c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   24080:	e0bfff17 	ldw	r2,-4(fp)
   24084:	10000826 	beq	r2,zero,240a8 <alt_flash_close_dev+0x3c>
   24088:	e0bfff17 	ldw	r2,-4(fp)
   2408c:	10800417 	ldw	r2,16(r2)
   24090:	10000526 	beq	r2,zero,240a8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   24094:	e0bfff17 	ldw	r2,-4(fp)
   24098:	10800417 	ldw	r2,16(r2)
   2409c:	e13fff17 	ldw	r4,-4(fp)
   240a0:	103ee83a 	callr	r2
  }
  return;
   240a4:	0001883a 	nop
   240a8:	0001883a 	nop
}
   240ac:	e037883a 	mov	sp,fp
   240b0:	dfc00117 	ldw	ra,4(sp)
   240b4:	df000017 	ldw	fp,0(sp)
   240b8:	dec00204 	addi	sp,sp,8
   240bc:	f800283a 	ret

000240c0 <alt_flash_device_register>:

int alt_flash_device_register( alt_flash_fd* fd)
{
   240c0:	defffd04 	addi	sp,sp,-12
   240c4:	dfc00215 	stw	ra,8(sp)
   240c8:	df000115 	stw	fp,4(sp)
   240cc:	df000104 	addi	fp,sp,4
   240d0:	e13fff15 	stw	r4,-4(fp)
  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   240d4:	d1601004 	addi	r5,gp,-32704
   240d8:	e13fff17 	ldw	r4,-4(fp)
   240dc:	001fc080 	call	1fc08 <alt_dev_llist_insert>
}
   240e0:	e037883a 	mov	sp,fp
   240e4:	dfc00117 	ldw	ra,4(sp)
   240e8:	df000017 	ldw	fp,0(sp)
   240ec:	dec00204 	addi	sp,sp,8
   240f0:	f800283a 	ret

000240f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   240f4:	defffb04 	addi	sp,sp,-20
   240f8:	df000415 	stw	fp,16(sp)
   240fc:	df000404 	addi	fp,sp,16
   24100:	e13ffd15 	stw	r4,-12(fp)
   24104:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24108:	e0bffc17 	ldw	r2,-16(fp)
   2410c:	10840070 	cmpltui	r2,r2,4097
   24110:	1000021e 	bne	r2,zero,2411c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24114:	00840004 	movi	r2,4096
   24118:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   2411c:	e0fffd17 	ldw	r3,-12(fp)
   24120:	e0bffc17 	ldw	r2,-16(fp)
   24124:	1885883a 	add	r2,r3,r2
   24128:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2412c:	e0bffd17 	ldw	r2,-12(fp)
   24130:	e0bfff15 	stw	r2,-4(fp)
   24134:	00000506 	br	2414c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24138:	e0bfff17 	ldw	r2,-4(fp)
   2413c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24140:	e0bfff17 	ldw	r2,-4(fp)
   24144:	10800804 	addi	r2,r2,32
   24148:	e0bfff15 	stw	r2,-4(fp)
   2414c:	e0ffff17 	ldw	r3,-4(fp)
   24150:	e0bffe17 	ldw	r2,-8(fp)
   24154:	18bff836 	bltu	r3,r2,24138 <__alt_mem_mcu_subsystem_ram_0+0x78004138>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24158:	e0bffd17 	ldw	r2,-12(fp)
   2415c:	108007cc 	andi	r2,r2,31
   24160:	10000226 	beq	r2,zero,2416c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24164:	e0bfff17 	ldw	r2,-4(fp)
   24168:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2416c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24170:	0001883a 	nop
   24174:	e037883a 	mov	sp,fp
   24178:	df000017 	ldw	fp,0(sp)
   2417c:	dec00104 	addi	sp,sp,4
   24180:	f800283a 	ret

00024184 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24184:	defff904 	addi	sp,sp,-28
   24188:	dfc00615 	stw	ra,24(sp)
   2418c:	df000515 	stw	fp,20(sp)
   24190:	df000504 	addi	fp,sp,20
   24194:	e13fff15 	stw	r4,-4(fp)
   24198:	e17ffe15 	stw	r5,-8(fp)
   2419c:	e1bffd15 	stw	r6,-12(fp)
   241a0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   241a4:	e0800217 	ldw	r2,8(fp)
   241a8:	d8800015 	stw	r2,0(sp)
   241ac:	e1fffc17 	ldw	r7,-16(fp)
   241b0:	e1bffd17 	ldw	r6,-12(fp)
   241b4:	e17ffe17 	ldw	r5,-8(fp)
   241b8:	e13fff17 	ldw	r4,-4(fp)
   241bc:	00243340 	call	24334 <alt_iic_isr_register>
}  
   241c0:	e037883a 	mov	sp,fp
   241c4:	dfc00117 	ldw	ra,4(sp)
   241c8:	df000017 	ldw	fp,0(sp)
   241cc:	dec00204 	addi	sp,sp,8
   241d0:	f800283a 	ret

000241d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   241d4:	defff904 	addi	sp,sp,-28
   241d8:	df000615 	stw	fp,24(sp)
   241dc:	df000604 	addi	fp,sp,24
   241e0:	e13ffb15 	stw	r4,-20(fp)
   241e4:	e17ffa15 	stw	r5,-24(fp)
   241e8:	e0bffa17 	ldw	r2,-24(fp)
   241ec:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   241f0:	0005303a 	rdctl	r2,status
   241f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241f8:	e0fffe17 	ldw	r3,-8(fp)
   241fc:	00bfff84 	movi	r2,-2
   24200:	1884703a 	and	r2,r3,r2
   24204:	1001703a 	wrctl	status,r2
  return context;
   24208:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2420c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   24210:	00c00044 	movi	r3,1
   24214:	e0bfff17 	ldw	r2,-4(fp)
   24218:	1884983a 	sll	r2,r3,r2
   2421c:	1007883a 	mov	r3,r2
   24220:	d0a77f17 	ldw	r2,-25092(gp)
   24224:	1884b03a 	or	r2,r3,r2
   24228:	d0a77f15 	stw	r2,-25092(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2422c:	d0a77f17 	ldw	r2,-25092(gp)
   24230:	100170fa 	wrctl	ienable,r2
   24234:	e0bffd17 	ldw	r2,-12(fp)
   24238:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2423c:	e0bffc17 	ldw	r2,-16(fp)
   24240:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24244:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24248:	0001883a 	nop
}
   2424c:	e037883a 	mov	sp,fp
   24250:	df000017 	ldw	fp,0(sp)
   24254:	dec00104 	addi	sp,sp,4
   24258:	f800283a 	ret

0002425c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2425c:	defff904 	addi	sp,sp,-28
   24260:	df000615 	stw	fp,24(sp)
   24264:	df000604 	addi	fp,sp,24
   24268:	e13ffb15 	stw	r4,-20(fp)
   2426c:	e17ffa15 	stw	r5,-24(fp)
   24270:	e0bffa17 	ldw	r2,-24(fp)
   24274:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   24278:	0005303a 	rdctl	r2,status
   2427c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24280:	e0fffe17 	ldw	r3,-8(fp)
   24284:	00bfff84 	movi	r2,-2
   24288:	1884703a 	and	r2,r3,r2
   2428c:	1001703a 	wrctl	status,r2
  return context;
   24290:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   24294:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   24298:	00c00044 	movi	r3,1
   2429c:	e0bfff17 	ldw	r2,-4(fp)
   242a0:	1884983a 	sll	r2,r3,r2
   242a4:	0084303a 	nor	r2,zero,r2
   242a8:	1007883a 	mov	r3,r2
   242ac:	d0a77f17 	ldw	r2,-25092(gp)
   242b0:	1884703a 	and	r2,r3,r2
   242b4:	d0a77f15 	stw	r2,-25092(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   242b8:	d0a77f17 	ldw	r2,-25092(gp)
   242bc:	100170fa 	wrctl	ienable,r2
   242c0:	e0bffd17 	ldw	r2,-12(fp)
   242c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   242c8:	e0bffc17 	ldw	r2,-16(fp)
   242cc:	1001703a 	wrctl	status,r2
  return 0;
   242d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   242d4:	0001883a 	nop
}
   242d8:	e037883a 	mov	sp,fp
   242dc:	df000017 	ldw	fp,0(sp)
   242e0:	dec00104 	addi	sp,sp,4
   242e4:	f800283a 	ret

000242e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   242e8:	defffc04 	addi	sp,sp,-16
   242ec:	df000315 	stw	fp,12(sp)
   242f0:	df000304 	addi	fp,sp,12
   242f4:	e13ffe15 	stw	r4,-8(fp)
   242f8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   242fc:	000530fa 	rdctl	r2,ienable
   24300:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24304:	00c00044 	movi	r3,1
   24308:	e0bffd17 	ldw	r2,-12(fp)
   2430c:	1884983a 	sll	r2,r3,r2
   24310:	1007883a 	mov	r3,r2
   24314:	e0bfff17 	ldw	r2,-4(fp)
   24318:	1884703a 	and	r2,r3,r2
   2431c:	1004c03a 	cmpne	r2,r2,zero
   24320:	10803fcc 	andi	r2,r2,255
}
   24324:	e037883a 	mov	sp,fp
   24328:	df000017 	ldw	fp,0(sp)
   2432c:	dec00104 	addi	sp,sp,4
   24330:	f800283a 	ret

00024334 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24334:	defff504 	addi	sp,sp,-44
   24338:	dfc00a15 	stw	ra,40(sp)
   2433c:	df000915 	stw	fp,36(sp)
   24340:	df000904 	addi	fp,sp,36
   24344:	e13ffa15 	stw	r4,-24(fp)
   24348:	e17ff915 	stw	r5,-28(fp)
   2434c:	e1bff815 	stw	r6,-32(fp)
   24350:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   24354:	00bffa84 	movi	r2,-22
   24358:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2435c:	e0bff917 	ldw	r2,-28(fp)
   24360:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24364:	e0bffe17 	ldw	r2,-8(fp)
   24368:	10800808 	cmpgei	r2,r2,32
   2436c:	1000241e 	bne	r2,zero,24400 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
   24370:	0005303a 	rdctl	r2,status
   24374:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24378:	e0fffc17 	ldw	r3,-16(fp)
   2437c:	00bfff84 	movi	r2,-2
   24380:	1884703a 	and	r2,r3,r2
   24384:	1001703a 	wrctl	status,r2
  return context;
   24388:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2438c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   24390:	e0bffe17 	ldw	r2,-8(fp)
   24394:	100890fa 	slli	r4,r2,3
   24398:	e0fff817 	ldw	r3,-32(fp)
   2439c:	008200f4 	movhi	r2,2051
   243a0:	2085883a 	add	r2,r4,r2
   243a4:	10eb4415 	stw	r3,-21232(r2)
    alt_irq[id].context = isr_context;
   243a8:	e0bffe17 	ldw	r2,-8(fp)
   243ac:	100890fa 	slli	r4,r2,3
   243b0:	e0fff717 	ldw	r3,-36(fp)
   243b4:	008200f4 	movhi	r2,2051
   243b8:	2085883a 	add	r2,r4,r2
   243bc:	10eb4515 	stw	r3,-21228(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   243c0:	e0bff817 	ldw	r2,-32(fp)
   243c4:	10000526 	beq	r2,zero,243dc <alt_iic_isr_register+0xa8>
   243c8:	e0bffe17 	ldw	r2,-8(fp)
   243cc:	100b883a 	mov	r5,r2
   243d0:	e13ffa17 	ldw	r4,-24(fp)
   243d4:	00241d40 	call	241d4 <alt_ic_irq_enable>
   243d8:	00000406 	br	243ec <alt_iic_isr_register+0xb8>
   243dc:	e0bffe17 	ldw	r2,-8(fp)
   243e0:	100b883a 	mov	r5,r2
   243e4:	e13ffa17 	ldw	r4,-24(fp)
   243e8:	002425c0 	call	2425c <alt_ic_irq_disable>
   243ec:	e0bfff15 	stw	r2,-4(fp)
   243f0:	e0bffd17 	ldw	r2,-12(fp)
   243f4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   243f8:	e0bffb17 	ldw	r2,-20(fp)
   243fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24400:	e0bfff17 	ldw	r2,-4(fp)
}
   24404:	e037883a 	mov	sp,fp
   24408:	dfc00117 	ldw	ra,4(sp)
   2440c:	df000017 	ldw	fp,0(sp)
   24410:	dec00204 	addi	sp,sp,8
   24414:	f800283a 	ret

00024418 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24418:	defff904 	addi	sp,sp,-28
   2441c:	dfc00615 	stw	ra,24(sp)
   24420:	df000515 	stw	fp,20(sp)
   24424:	df000504 	addi	fp,sp,20
   24428:	e13ffe15 	stw	r4,-8(fp)
   2442c:	e17ffd15 	stw	r5,-12(fp)
   24430:	e1bffc15 	stw	r6,-16(fp)
   24434:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   24438:	e1bffb17 	ldw	r6,-20(fp)
   2443c:	e17ffc17 	ldw	r5,-16(fp)
   24440:	e13ffd17 	ldw	r4,-12(fp)
   24444:	00246380 	call	24638 <open>
   24448:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   2444c:	e0bfff17 	ldw	r2,-4(fp)
   24450:	10001716 	blt	r2,zero,244b0 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   24454:	e0bfff17 	ldw	r2,-4(fp)
   24458:	10c00324 	muli	r3,r2,12
   2445c:	008000b4 	movhi	r2,2
   24460:	1885883a 	add	r2,r3,r2
   24464:	10def317 	ldw	r3,31692(r2)
   24468:	e0bffe17 	ldw	r2,-8(fp)
   2446c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24470:	e0bfff17 	ldw	r2,-4(fp)
   24474:	10c00324 	muli	r3,r2,12
   24478:	008000b4 	movhi	r2,2
   2447c:	1885883a 	add	r2,r3,r2
   24480:	10def417 	ldw	r3,31696(r2)
   24484:	e0bffe17 	ldw	r2,-8(fp)
   24488:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2448c:	e0bfff17 	ldw	r2,-4(fp)
   24490:	10c00324 	muli	r3,r2,12
   24494:	008000b4 	movhi	r2,2
   24498:	1885883a 	add	r2,r3,r2
   2449c:	10def517 	ldw	r3,31700(r2)
   244a0:	e0bffe17 	ldw	r2,-8(fp)
   244a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   244a8:	e13fff17 	ldw	r4,-4(fp)
   244ac:	002054c0 	call	2054c <alt_release_fd>
  }
} 
   244b0:	0001883a 	nop
   244b4:	e037883a 	mov	sp,fp
   244b8:	dfc00117 	ldw	ra,4(sp)
   244bc:	df000017 	ldw	fp,0(sp)
   244c0:	dec00204 	addi	sp,sp,8
   244c4:	f800283a 	ret

000244c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   244c8:	defffb04 	addi	sp,sp,-20
   244cc:	dfc00415 	stw	ra,16(sp)
   244d0:	df000315 	stw	fp,12(sp)
   244d4:	df000304 	addi	fp,sp,12
   244d8:	e13fff15 	stw	r4,-4(fp)
   244dc:	e17ffe15 	stw	r5,-8(fp)
   244e0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   244e4:	01c07fc4 	movi	r7,511
   244e8:	01800044 	movi	r6,1
   244ec:	e17fff17 	ldw	r5,-4(fp)
   244f0:	010000b4 	movhi	r4,2
   244f4:	211ef604 	addi	r4,r4,31704
   244f8:	00244180 	call	24418 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   244fc:	01c07fc4 	movi	r7,511
   24500:	000d883a 	mov	r6,zero
   24504:	e17ffe17 	ldw	r5,-8(fp)
   24508:	010000b4 	movhi	r4,2
   2450c:	211ef304 	addi	r4,r4,31692
   24510:	00244180 	call	24418 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24514:	01c07fc4 	movi	r7,511
   24518:	01800044 	movi	r6,1
   2451c:	e17ffd17 	ldw	r5,-12(fp)
   24520:	010000b4 	movhi	r4,2
   24524:	211ef904 	addi	r4,r4,31716
   24528:	00244180 	call	24418 <alt_open_fd>
}  
   2452c:	0001883a 	nop
   24530:	e037883a 	mov	sp,fp
   24534:	dfc00117 	ldw	ra,4(sp)
   24538:	df000017 	ldw	fp,0(sp)
   2453c:	dec00204 	addi	sp,sp,8
   24540:	f800283a 	ret

00024544 <alt_get_errno>:
{
   24544:	defffe04 	addi	sp,sp,-8
   24548:	dfc00115 	stw	ra,4(sp)
   2454c:	df000015 	stw	fp,0(sp)
   24550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24554:	d0a00c17 	ldw	r2,-32720(gp)
   24558:	10000326 	beq	r2,zero,24568 <alt_get_errno+0x24>
   2455c:	d0a00c17 	ldw	r2,-32720(gp)
   24560:	103ee83a 	callr	r2
   24564:	00000106 	br	2456c <alt_get_errno+0x28>
   24568:	d0a77a04 	addi	r2,gp,-25112
}
   2456c:	e037883a 	mov	sp,fp
   24570:	dfc00117 	ldw	ra,4(sp)
   24574:	df000017 	ldw	fp,0(sp)
   24578:	dec00204 	addi	sp,sp,8
   2457c:	f800283a 	ret

00024580 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24580:	defffd04 	addi	sp,sp,-12
   24584:	df000215 	stw	fp,8(sp)
   24588:	df000204 	addi	fp,sp,8
   2458c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	10800217 	ldw	r2,8(r2)
   24598:	10d00034 	orhi	r3,r2,16384
   2459c:	e0bffe17 	ldw	r2,-8(fp)
   245a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   245a4:	e03fff15 	stw	zero,-4(fp)
   245a8:	00001a06 	br	24614 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   245ac:	e0bfff17 	ldw	r2,-4(fp)
   245b0:	10c00324 	muli	r3,r2,12
   245b4:	008000b4 	movhi	r2,2
   245b8:	1885883a 	add	r2,r3,r2
   245bc:	10def317 	ldw	r3,31692(r2)
   245c0:	e0bffe17 	ldw	r2,-8(fp)
   245c4:	10800017 	ldw	r2,0(r2)
   245c8:	18800f1e 	bne	r3,r2,24608 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   245cc:	e0bfff17 	ldw	r2,-4(fp)
   245d0:	10c00324 	muli	r3,r2,12
   245d4:	008000b4 	movhi	r2,2
   245d8:	1885883a 	add	r2,r3,r2
   245dc:	109ef517 	ldw	r2,31700(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   245e0:	1000090e 	bge	r2,zero,24608 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   245e4:	e0bfff17 	ldw	r2,-4(fp)
   245e8:	10c00324 	muli	r3,r2,12
   245ec:	008000b4 	movhi	r2,2
   245f0:	109ef304 	addi	r2,r2,31692
   245f4:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   245f8:	e0fffe17 	ldw	r3,-8(fp)
   245fc:	18800226 	beq	r3,r2,24608 <alt_file_locked+0x88>
    {
      return -EACCES;
   24600:	00bffcc4 	movi	r2,-13
   24604:	00000806 	br	24628 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   24608:	e0bfff17 	ldw	r2,-4(fp)
   2460c:	10800044 	addi	r2,r2,1
   24610:	e0bfff15 	stw	r2,-4(fp)
   24614:	d0a00b17 	ldw	r2,-32724(gp)
   24618:	1007883a 	mov	r3,r2
   2461c:	e0bfff17 	ldw	r2,-4(fp)
   24620:	18bfe22e 	bgeu	r3,r2,245ac <__alt_mem_mcu_subsystem_ram_0+0x780045ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24624:	0005883a 	mov	r2,zero
}
   24628:	e037883a 	mov	sp,fp
   2462c:	df000017 	ldw	fp,0(sp)
   24630:	dec00104 	addi	sp,sp,4
   24634:	f800283a 	ret

00024638 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24638:	defff604 	addi	sp,sp,-40
   2463c:	dfc00915 	stw	ra,36(sp)
   24640:	df000815 	stw	fp,32(sp)
   24644:	df000804 	addi	fp,sp,32
   24648:	e13ffa15 	stw	r4,-24(fp)
   2464c:	e17ff915 	stw	r5,-28(fp)
   24650:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24654:	00bfffc4 	movi	r2,-1
   24658:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   2465c:	00bffb44 	movi	r2,-19
   24660:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   24664:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24668:	d1600904 	addi	r5,gp,-32732
   2466c:	e13ffa17 	ldw	r4,-24(fp)
   24670:	0023ea40 	call	23ea4 <alt_find_dev>
   24674:	e0bfff15 	stw	r2,-4(fp)
   24678:	e0bfff17 	ldw	r2,-4(fp)
   2467c:	1000051e 	bne	r2,zero,24694 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24680:	e13ffa17 	ldw	r4,-24(fp)
   24684:	00249780 	call	24978 <alt_find_file>
   24688:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   2468c:	00800044 	movi	r2,1
   24690:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24694:	e0bfff17 	ldw	r2,-4(fp)
   24698:	10002926 	beq	r2,zero,24740 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2469c:	e13fff17 	ldw	r4,-4(fp)
   246a0:	0024afc0 	call	24afc <alt_get_fd>
   246a4:	e0bffe15 	stw	r2,-8(fp)
   246a8:	e0bffe17 	ldw	r2,-8(fp)
   246ac:	1000030e 	bge	r2,zero,246bc <open+0x84>
    {
      status = index;
   246b0:	e0bffe17 	ldw	r2,-8(fp)
   246b4:	e0bffd15 	stw	r2,-12(fp)
   246b8:	00002306 	br	24748 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   246bc:	e0bffe17 	ldw	r2,-8(fp)
   246c0:	10c00324 	muli	r3,r2,12
   246c4:	008000b4 	movhi	r2,2
   246c8:	109ef304 	addi	r2,r2,31692
   246cc:	1885883a 	add	r2,r3,r2
   246d0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   246d4:	e0fff917 	ldw	r3,-28(fp)
   246d8:	00900034 	movhi	r2,16384
   246dc:	10bfffc4 	addi	r2,r2,-1
   246e0:	1886703a 	and	r3,r3,r2
   246e4:	e0bffb17 	ldw	r2,-20(fp)
   246e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   246ec:	e0bffc17 	ldw	r2,-16(fp)
   246f0:	1000051e 	bne	r2,zero,24708 <open+0xd0>
   246f4:	e13ffb17 	ldw	r4,-20(fp)
   246f8:	00245800 	call	24580 <alt_file_locked>
   246fc:	e0bffd15 	stw	r2,-12(fp)
   24700:	e0bffd17 	ldw	r2,-12(fp)
   24704:	10001016 	blt	r2,zero,24748 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24708:	e0bfff17 	ldw	r2,-4(fp)
   2470c:	10800317 	ldw	r2,12(r2)
   24710:	10000826 	beq	r2,zero,24734 <open+0xfc>
   24714:	e0bfff17 	ldw	r2,-4(fp)
   24718:	10800317 	ldw	r2,12(r2)
   2471c:	e1fff817 	ldw	r7,-32(fp)
   24720:	e1bff917 	ldw	r6,-28(fp)
   24724:	e17ffa17 	ldw	r5,-24(fp)
   24728:	e13ffb17 	ldw	r4,-20(fp)
   2472c:	103ee83a 	callr	r2
   24730:	00000106 	br	24738 <open+0x100>
   24734:	0005883a 	mov	r2,zero
   24738:	e0bffd15 	stw	r2,-12(fp)
   2473c:	00000206 	br	24748 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24740:	00bffb44 	movi	r2,-19
   24744:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24748:	e0bffd17 	ldw	r2,-12(fp)
   2474c:	1000090e 	bge	r2,zero,24774 <open+0x13c>
  {
    alt_release_fd (index);  
   24750:	e13ffe17 	ldw	r4,-8(fp)
   24754:	002054c0 	call	2054c <alt_release_fd>
    ALT_ERRNO = -status;
   24758:	00245440 	call	24544 <alt_get_errno>
   2475c:	1007883a 	mov	r3,r2
   24760:	e0bffd17 	ldw	r2,-12(fp)
   24764:	0085c83a 	sub	r2,zero,r2
   24768:	18800015 	stw	r2,0(r3)
    return -1;
   2476c:	00bfffc4 	movi	r2,-1
   24770:	00000106 	br	24778 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   24774:	e0bffe17 	ldw	r2,-8(fp)
}
   24778:	e037883a 	mov	sp,fp
   2477c:	dfc00117 	ldw	ra,4(sp)
   24780:	df000017 	ldw	fp,0(sp)
   24784:	dec00204 	addi	sp,sp,8
   24788:	f800283a 	ret

0002478c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2478c:	defffa04 	addi	sp,sp,-24
   24790:	df000515 	stw	fp,20(sp)
   24794:	df000504 	addi	fp,sp,20
   24798:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   2479c:	0005303a 	rdctl	r2,status
   247a0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247a4:	e0fffc17 	ldw	r3,-16(fp)
   247a8:	00bfff84 	movi	r2,-2
   247ac:	1884703a 	and	r2,r3,r2
   247b0:	1001703a 	wrctl	status,r2
  return context;
   247b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   247b8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   247bc:	e0bffb17 	ldw	r2,-20(fp)
   247c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   247c4:	e0bffd17 	ldw	r2,-12(fp)
   247c8:	10800017 	ldw	r2,0(r2)
   247cc:	e0fffd17 	ldw	r3,-12(fp)
   247d0:	18c00117 	ldw	r3,4(r3)
   247d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   247d8:	e0bffd17 	ldw	r2,-12(fp)
   247dc:	10800117 	ldw	r2,4(r2)
   247e0:	e0fffd17 	ldw	r3,-12(fp)
   247e4:	18c00017 	ldw	r3,0(r3)
   247e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   247ec:	e0bffd17 	ldw	r2,-12(fp)
   247f0:	e0fffd17 	ldw	r3,-12(fp)
   247f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   247f8:	e0bffd17 	ldw	r2,-12(fp)
   247fc:	e0fffd17 	ldw	r3,-12(fp)
   24800:	10c00015 	stw	r3,0(r2)
   24804:	e0bfff17 	ldw	r2,-4(fp)
   24808:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   2480c:	e0bffe17 	ldw	r2,-8(fp)
   24810:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24814:	0001883a 	nop
   24818:	e037883a 	mov	sp,fp
   2481c:	df000017 	ldw	fp,0(sp)
   24820:	dec00104 	addi	sp,sp,4
   24824:	f800283a 	ret

00024828 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24828:	defff904 	addi	sp,sp,-28
   2482c:	dfc00615 	stw	ra,24(sp)
   24830:	df000515 	stw	fp,20(sp)
   24834:	dc400415 	stw	r17,16(sp)
   24838:	dc000315 	stw	r16,12(sp)
   2483c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24840:	d0a01317 	ldw	r2,-32692(gp)
   24844:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24848:	d1278117 	ldw	r4,-25084(gp)
   2484c:	d1678217 	ldw	r5,-25080(gp)
   24850:	01800044 	movi	r6,1
   24854:	000f883a 	mov	r7,zero
   24858:	2185883a 	add	r2,r4,r6
   2485c:	1111803a 	cmpltu	r8,r2,r4
   24860:	29c7883a 	add	r3,r5,r7
   24864:	40c9883a 	add	r4,r8,r3
   24868:	2007883a 	mov	r3,r4
   2486c:	1009883a 	mov	r4,r2
   24870:	180b883a 	mov	r5,r3
   24874:	d1278115 	stw	r4,-25084(gp)
   24878:	d1678215 	stw	r5,-25080(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2487c:	00002906 	br	24924 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   24880:	e0bffd17 	ldw	r2,-12(fp)
   24884:	10800017 	ldw	r2,0(r2)
   24888:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   2488c:	e13ffd17 	ldw	r4,-12(fp)
   24890:	20800217 	ldw	r2,8(r4)
   24894:	20c00317 	ldw	r3,12(r4)
   24898:	d1278117 	ldw	r4,-25084(gp)
   2489c:	d1678217 	ldw	r5,-25080(gp)
   248a0:	28c01e36 	bltu	r5,r3,2491c <alt_tick+0xf4>
   248a4:	1940011e 	bne	r3,r5,248ac <alt_tick+0x84>
   248a8:	20801c36 	bltu	r4,r2,2491c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   248ac:	e0bffd17 	ldw	r2,-12(fp)
   248b0:	10800417 	ldw	r2,16(r2)
   248b4:	e0fffd17 	ldw	r3,-12(fp)
   248b8:	18c00517 	ldw	r3,20(r3)
   248bc:	1809883a 	mov	r4,r3
   248c0:	103ee83a 	callr	r2
   248c4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   248c8:	e0bffb17 	ldw	r2,-20(fp)
   248cc:	1000031e 	bne	r2,zero,248dc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   248d0:	e13ffd17 	ldw	r4,-12(fp)
   248d4:	002478c0 	call	2478c <alt_alarm_stop>
   248d8:	00001006 	br	2491c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   248dc:	e0bffd17 	ldw	r2,-12(fp)
   248e0:	11000217 	ldw	r4,8(r2)
   248e4:	11400317 	ldw	r5,12(r2)
   248e8:	e0bffb17 	ldw	r2,-20(fp)
   248ec:	1021883a 	mov	r16,r2
   248f0:	0023883a 	mov	r17,zero
   248f4:	2405883a 	add	r2,r4,r16
   248f8:	110d803a 	cmpltu	r6,r2,r4
   248fc:	2c47883a 	add	r3,r5,r17
   24900:	30c9883a 	add	r4,r6,r3
   24904:	2007883a 	mov	r3,r4
   24908:	1009883a 	mov	r4,r2
   2490c:	180b883a 	mov	r5,r3
   24910:	e0bffd17 	ldw	r2,-12(fp)
   24914:	11000215 	stw	r4,8(r2)
   24918:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   2491c:	e0bffc17 	ldw	r2,-16(fp)
   24920:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   24924:	e0fffd17 	ldw	r3,-12(fp)
   24928:	d0a01304 	addi	r2,gp,-32692
   2492c:	18bfd41e 	bne	r3,r2,24880 <__alt_mem_mcu_subsystem_ram_0+0x78004880>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24930:	0001883a 	nop
}
   24934:	0001883a 	nop
   24938:	e6fffe04 	addi	sp,fp,-8
   2493c:	dfc00317 	ldw	ra,12(sp)
   24940:	df000217 	ldw	fp,8(sp)
   24944:	dc400117 	ldw	r17,4(sp)
   24948:	dc000017 	ldw	r16,0(sp)
   2494c:	dec00404 	addi	sp,sp,16
   24950:	f800283a 	ret

00024954 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24954:	deffff04 	addi	sp,sp,-4
   24958:	df000015 	stw	fp,0(sp)
   2495c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24960:	000170fa 	wrctl	ienable,zero
}
   24964:	0001883a 	nop
   24968:	e037883a 	mov	sp,fp
   2496c:	df000017 	ldw	fp,0(sp)
   24970:	dec00104 	addi	sp,sp,4
   24974:	f800283a 	ret

00024978 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24978:	defffb04 	addi	sp,sp,-20
   2497c:	df000415 	stw	fp,16(sp)
   24980:	df000404 	addi	fp,sp,16
   24984:	e13ffc15 	stw	r4,-16(fp)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24988:	d0a00717 	ldw	r2,-32740(gp)
   2498c:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   24990:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   24994:	0080fa04 	movi	r2,1000
   24998:	e0bffd15 	stw	r2,-12(fp)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
   2499c:	00004f06 	br	24adc <alt_find_file+0x164>
    {
        len=0;
   249a0:	e03ffe15 	stw	zero,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   249a4:	00004306 	br	24ab4 <alt_find_file+0x13c>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
   249a8:	e0bfff17 	ldw	r2,-4(fp)
   249ac:	10c00217 	ldw	r3,8(r2)
   249b0:	e0bffe17 	ldw	r2,-8(fp)
   249b4:	1885883a 	add	r2,r3,r2
   249b8:	10800003 	ldbu	r2,0(r2)
   249bc:	10803fcc 	andi	r2,r2,255
   249c0:	1080201c 	xori	r2,r2,128
   249c4:	10bfe004 	addi	r2,r2,-128
   249c8:	10800bd8 	cmpnei	r2,r2,47
   249cc:	10000a1e 	bne	r2,zero,249f8 <alt_find_file+0x80>
   249d0:	e0bfff17 	ldw	r2,-4(fp)
   249d4:	10c00217 	ldw	r3,8(r2)
   249d8:	e0bffe17 	ldw	r2,-8(fp)
   249dc:	10800044 	addi	r2,r2,1
   249e0:	1885883a 	add	r2,r3,r2
   249e4:	10800003 	ldbu	r2,0(r2)
   249e8:	10803fcc 	andi	r2,r2,255
   249ec:	1080201c 	xori	r2,r2,128
   249f0:	10bfe004 	addi	r2,r2,-128
   249f4:	10000926 	beq	r2,zero,24a1c <alt_find_file+0xa4>
   249f8:	e0bfff17 	ldw	r2,-4(fp)
   249fc:	10c00217 	ldw	r3,8(r2)
   24a00:	e0bffe17 	ldw	r2,-8(fp)
   24a04:	1885883a 	add	r2,r3,r2
   24a08:	10800003 	ldbu	r2,0(r2)
   24a0c:	10803fcc 	andi	r2,r2,255
   24a10:	1080201c 	xori	r2,r2,128
   24a14:	10bfe004 	addi	r2,r2,-128
   24a18:	1000131e 	bne	r2,zero,24a68 <alt_find_file+0xf0>
            { 
                if ((name[len]== '/') || (name[len] == 0))
   24a1c:	e0bffe17 	ldw	r2,-8(fp)
   24a20:	e0fffc17 	ldw	r3,-16(fp)
   24a24:	1885883a 	add	r2,r3,r2
   24a28:	10800003 	ldbu	r2,0(r2)
   24a2c:	10803fcc 	andi	r2,r2,255
   24a30:	1080201c 	xori	r2,r2,128
   24a34:	10bfe004 	addi	r2,r2,-128
   24a38:	10800be0 	cmpeqi	r2,r2,47
   24a3c:	1000081e 	bne	r2,zero,24a60 <alt_find_file+0xe8>
   24a40:	e0bffe17 	ldw	r2,-8(fp)
   24a44:	e0fffc17 	ldw	r3,-16(fp)
   24a48:	1885883a 	add	r2,r3,r2
   24a4c:	10800003 	ldbu	r2,0(r2)
   24a50:	10803fcc 	andi	r2,r2,255
   24a54:	1080201c 	xori	r2,r2,128
   24a58:	10bfe004 	addi	r2,r2,-128
   24a5c:	1000191e 	bne	r2,zero,24ac4 <alt_find_file+0x14c>
                {
                    return next;
   24a60:	e0bfff17 	ldw	r2,-4(fp)
   24a64:	00002106 	br	24aec <alt_find_file+0x174>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
   24a68:	e0bfff17 	ldw	r2,-4(fp)
   24a6c:	10c00217 	ldw	r3,8(r2)
   24a70:	e0bffe17 	ldw	r2,-8(fp)
   24a74:	1885883a 	add	r2,r3,r2
   24a78:	11000003 	ldbu	r4,0(r2)
   24a7c:	e0bffe17 	ldw	r2,-8(fp)
   24a80:	e0fffc17 	ldw	r3,-16(fp)
   24a84:	1885883a 	add	r2,r3,r2
   24a88:	10800003 	ldbu	r2,0(r2)
   24a8c:	20c03fcc 	andi	r3,r4,255
   24a90:	18c0201c 	xori	r3,r3,128
   24a94:	18ffe004 	addi	r3,r3,-128
   24a98:	10803fcc 	andi	r2,r2,255
   24a9c:	1080201c 	xori	r2,r2,128
   24aa0:	10bfe004 	addi	r2,r2,-128
   24aa4:	1880091e 	bne	r3,r2,24acc <alt_find_file+0x154>
            len++;
   24aa8:	e0bffe17 	ldw	r2,-8(fp)
   24aac:	10800044 	addi	r2,r2,1
   24ab0:	e0bffe15 	stw	r2,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   24ab4:	e0fffe17 	ldw	r3,-8(fp)
   24ab8:	e0bffd17 	ldw	r2,-12(fp)
   24abc:	18bfba16 	blt	r3,r2,249a8 <__alt_mem_mcu_subsystem_ram_0+0x780049a8>
   24ac0:	00000306 	br	24ad0 <alt_find_file+0x158>
                break;
   24ac4:	0001883a 	nop
   24ac8:	00000106 	br	24ad0 <alt_find_file+0x158>
            if (next->name[len]!=name[len]) { break; }
   24acc:	0001883a 	nop
        }  
        
        next = (alt_dev*) next->llist.next;
   24ad0:	e0bfff17 	ldw	r2,-4(fp)
   24ad4:	10800017 	ldw	r2,0(r2)
   24ad8:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) &alt_fs_list)
   24adc:	e0ffff17 	ldw	r3,-4(fp)
   24ae0:	d0a00704 	addi	r2,gp,-32740
   24ae4:	18bfae1e 	bne	r3,r2,249a0 <__alt_mem_mcu_subsystem_ram_0+0x780049a0>
    }
  
    /* No match found */
  
    return NULL;     
   24ae8:	0005883a 	mov	r2,zero
}
   24aec:	e037883a 	mov	sp,fp
   24af0:	df000017 	ldw	fp,0(sp)
   24af4:	dec00104 	addi	sp,sp,4
   24af8:	f800283a 	ret

00024afc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24afc:	defffc04 	addi	sp,sp,-16
   24b00:	df000315 	stw	fp,12(sp)
   24b04:	df000304 	addi	fp,sp,12
   24b08:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   24b0c:	00bffa04 	movi	r2,-24
   24b10:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24b14:	e03fff15 	stw	zero,-4(fp)
   24b18:	00001706 	br	24b78 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   24b1c:	e0bfff17 	ldw	r2,-4(fp)
   24b20:	10c00324 	muli	r3,r2,12
   24b24:	008000b4 	movhi	r2,2
   24b28:	1885883a 	add	r2,r3,r2
   24b2c:	109ef317 	ldw	r2,31692(r2)
   24b30:	10000e1e 	bne	r2,zero,24b6c <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   24b34:	e0bfff17 	ldw	r2,-4(fp)
   24b38:	11000324 	muli	r4,r2,12
   24b3c:	e0fffd17 	ldw	r3,-12(fp)
   24b40:	008000b4 	movhi	r2,2
   24b44:	2085883a 	add	r2,r4,r2
   24b48:	10def315 	stw	r3,31692(r2)
      if (i > alt_max_fd)
   24b4c:	d0e00b17 	ldw	r3,-32724(gp)
   24b50:	e0bfff17 	ldw	r2,-4(fp)
   24b54:	1880020e 	bge	r3,r2,24b60 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   24b58:	e0bfff17 	ldw	r2,-4(fp)
   24b5c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   24b60:	e0bfff17 	ldw	r2,-4(fp)
   24b64:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   24b68:	00000706 	br	24b88 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   24b6c:	e0bfff17 	ldw	r2,-4(fp)
   24b70:	10800044 	addi	r2,r2,1
   24b74:	e0bfff15 	stw	r2,-4(fp)
   24b78:	e0bfff17 	ldw	r2,-4(fp)
   24b7c:	10800810 	cmplti	r2,r2,32
   24b80:	103fe61e 	bne	r2,zero,24b1c <__alt_mem_mcu_subsystem_ram_0+0x78004b1c>
    }
  }

 alt_get_fd_exit:
   24b84:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24b88:	e0bffe17 	ldw	r2,-8(fp)
}
   24b8c:	e037883a 	mov	sp,fp
   24b90:	df000017 	ldw	fp,0(sp)
   24b94:	dec00104 	addi	sp,sp,4
   24b98:	f800283a 	ret

00024b9c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24b9c:	defffe04 	addi	sp,sp,-8
   24ba0:	df000115 	stw	fp,4(sp)
   24ba4:	df000104 	addi	fp,sp,4
   24ba8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24bac:	e0bfff17 	ldw	r2,-4(fp)
   24bb0:	10bffe84 	addi	r2,r2,-6
   24bb4:	10c00428 	cmpgeui	r3,r2,16
   24bb8:	1800191e 	bne	r3,zero,24c20 <alt_exception_cause_generated_bad_addr+0x84>
   24bbc:	100690ba 	slli	r3,r2,2
   24bc0:	008000b4 	movhi	r2,2
   24bc4:	1885883a 	add	r2,r3,r2
   24bc8:	1092f417 	ldw	r2,19408(r2)
   24bcc:	1000683a 	jmp	r2
   24bd0:	00024c10 	cmplti	zero,zero,2352
   24bd4:	00024c10 	cmplti	zero,zero,2352
   24bd8:	00024c20 	cmpeqi	zero,zero,2352
   24bdc:	00024c20 	cmpeqi	zero,zero,2352
   24be0:	00024c20 	cmpeqi	zero,zero,2352
   24be4:	00024c10 	cmplti	zero,zero,2352
   24be8:	00024c18 	cmpnei	zero,zero,2352
   24bec:	00024c20 	cmpeqi	zero,zero,2352
   24bf0:	00024c10 	cmplti	zero,zero,2352
   24bf4:	00024c10 	cmplti	zero,zero,2352
   24bf8:	00024c20 	cmpeqi	zero,zero,2352
   24bfc:	00024c10 	cmplti	zero,zero,2352
   24c00:	00024c18 	cmpnei	zero,zero,2352
   24c04:	00024c20 	cmpeqi	zero,zero,2352
   24c08:	00024c20 	cmpeqi	zero,zero,2352
   24c0c:	00024c10 	cmplti	zero,zero,2352
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24c10:	00800044 	movi	r2,1
   24c14:	00000306 	br	24c24 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24c18:	0005883a 	mov	r2,zero
   24c1c:	00000106 	br	24c24 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   24c20:	0005883a 	mov	r2,zero
  }
}
   24c24:	e037883a 	mov	sp,fp
   24c28:	df000017 	ldw	fp,0(sp)
   24c2c:	dec00104 	addi	sp,sp,4
   24c30:	f800283a 	ret

00024c34 <atexit>:
   24c34:	200b883a 	mov	r5,r4
   24c38:	000f883a 	mov	r7,zero
   24c3c:	000d883a 	mov	r6,zero
   24c40:	0009883a 	mov	r4,zero
   24c44:	0024c7c1 	jmpi	24c7c <__register_exitproc>

00024c48 <exit>:
   24c48:	defffe04 	addi	sp,sp,-8
   24c4c:	000b883a 	mov	r5,zero
   24c50:	dc000015 	stw	r16,0(sp)
   24c54:	dfc00115 	stw	ra,4(sp)
   24c58:	2021883a 	mov	r16,r4
   24c5c:	0024d880 	call	24d88 <__call_exitprocs>
   24c60:	008000f4 	movhi	r2,3
   24c64:	1123b017 	ldw	r4,-28992(r2)
   24c68:	20800f17 	ldw	r2,60(r4)
   24c6c:	10000126 	beq	r2,zero,24c74 <exit+0x2c>
   24c70:	103ee83a 	callr	r2
   24c74:	8009883a 	mov	r4,r16
   24c78:	0024ef40 	call	24ef4 <_exit>

00024c7c <__register_exitproc>:
   24c7c:	defffa04 	addi	sp,sp,-24
   24c80:	008000f4 	movhi	r2,3
   24c84:	dc000315 	stw	r16,12(sp)
   24c88:	1423b017 	ldw	r16,-28992(r2)
   24c8c:	dc400415 	stw	r17,16(sp)
   24c90:	dfc00515 	stw	ra,20(sp)
   24c94:	80c05217 	ldw	r3,328(r16)
   24c98:	2023883a 	mov	r17,r4
   24c9c:	18003526 	beq	r3,zero,24d74 <__register_exitproc+0xf8>
   24ca0:	18800117 	ldw	r2,4(r3)
   24ca4:	11000808 	cmpgei	r4,r2,32
   24ca8:	20000d1e 	bne	r4,zero,24ce0 <__register_exitproc+0x64>
   24cac:	12400044 	addi	r9,r2,1
   24cb0:	8800211e 	bne	r17,zero,24d38 <__register_exitproc+0xbc>
   24cb4:	10800084 	addi	r2,r2,2
   24cb8:	100890ba 	slli	r4,r2,2
   24cbc:	1a400115 	stw	r9,4(r3)
   24cc0:	0005883a 	mov	r2,zero
   24cc4:	1907883a 	add	r3,r3,r4
   24cc8:	19400015 	stw	r5,0(r3)
   24ccc:	dfc00517 	ldw	ra,20(sp)
   24cd0:	dc400417 	ldw	r17,16(sp)
   24cd4:	dc000317 	ldw	r16,12(sp)
   24cd8:	dec00604 	addi	sp,sp,24
   24cdc:	f800283a 	ret
   24ce0:	00800074 	movhi	r2,1
   24ce4:	10bf7504 	addi	r2,r2,-556
   24ce8:	10002526 	beq	r2,zero,24d80 <__register_exitproc+0x104>
   24cec:	01006404 	movi	r4,400
   24cf0:	d9c00215 	stw	r7,8(sp)
   24cf4:	d9800115 	stw	r6,4(sp)
   24cf8:	d9400015 	stw	r5,0(sp)
   24cfc:	000fdd40 	call	fdd4 <malloc>
   24d00:	1007883a 	mov	r3,r2
   24d04:	10001e26 	beq	r2,zero,24d80 <__register_exitproc+0x104>
   24d08:	80805217 	ldw	r2,328(r16)
   24d0c:	18000115 	stw	zero,4(r3)
   24d10:	02400044 	movi	r9,1
   24d14:	18800015 	stw	r2,0(r3)
   24d18:	80c05215 	stw	r3,328(r16)
   24d1c:	18006215 	stw	zero,392(r3)
   24d20:	18006315 	stw	zero,396(r3)
   24d24:	0005883a 	mov	r2,zero
   24d28:	d9c00217 	ldw	r7,8(sp)
   24d2c:	d9800117 	ldw	r6,4(sp)
   24d30:	d9400017 	ldw	r5,0(sp)
   24d34:	883fdf26 	beq	r17,zero,24cb4 <__alt_mem_mcu_subsystem_ram_0+0x78004cb4>
   24d38:	100890ba 	slli	r4,r2,2
   24d3c:	02000044 	movi	r8,1
   24d40:	4090983a 	sll	r8,r8,r2
   24d44:	1909883a 	add	r4,r3,r4
   24d48:	21802215 	stw	r6,136(r4)
   24d4c:	19806217 	ldw	r6,392(r3)
   24d50:	8c400098 	cmpnei	r17,r17,2
   24d54:	320cb03a 	or	r6,r6,r8
   24d58:	19806215 	stw	r6,392(r3)
   24d5c:	21c04215 	stw	r7,264(r4)
   24d60:	883fd41e 	bne	r17,zero,24cb4 <__alt_mem_mcu_subsystem_ram_0+0x78004cb4>
   24d64:	19006317 	ldw	r4,396(r3)
   24d68:	2210b03a 	or	r8,r4,r8
   24d6c:	1a006315 	stw	r8,396(r3)
   24d70:	003fd006 	br	24cb4 <__alt_mem_mcu_subsystem_ram_0+0x78004cb4>
   24d74:	80c05304 	addi	r3,r16,332
   24d78:	80c05215 	stw	r3,328(r16)
   24d7c:	003fc806 	br	24ca0 <__alt_mem_mcu_subsystem_ram_0+0x78004ca0>
   24d80:	00bfffc4 	movi	r2,-1
   24d84:	003fd106 	br	24ccc <__alt_mem_mcu_subsystem_ram_0+0x78004ccc>

00024d88 <__call_exitprocs>:
   24d88:	defff404 	addi	sp,sp,-48
   24d8c:	008000f4 	movhi	r2,3
   24d90:	dd400715 	stw	r21,28(sp)
   24d94:	1563b017 	ldw	r21,-28992(r2)
   24d98:	dd000615 	stw	r20,24(sp)
   24d9c:	05000074 	movhi	r20,1
   24da0:	a8805204 	addi	r2,r21,328
   24da4:	df000a15 	stw	fp,40(sp)
   24da8:	dcc00515 	stw	r19,20(sp)
   24dac:	dfc00b15 	stw	ra,44(sp)
   24db0:	ddc00915 	stw	r23,36(sp)
   24db4:	dd800815 	stw	r22,32(sp)
   24db8:	dc800415 	stw	r18,16(sp)
   24dbc:	dc400315 	stw	r17,12(sp)
   24dc0:	dc000215 	stw	r16,8(sp)
   24dc4:	d9000115 	stw	r4,4(sp)
   24dc8:	2839883a 	mov	fp,r5
   24dcc:	d8800015 	stw	r2,0(sp)
   24dd0:	04c00044 	movi	r19,1
   24dd4:	a53f7904 	addi	r20,r20,-540
   24dd8:	ac805217 	ldw	r18,328(r21)
   24ddc:	90001826 	beq	r18,zero,24e40 <__call_exitprocs+0xb8>
   24de0:	ddc00017 	ldw	r23,0(sp)
   24de4:	94000117 	ldw	r16,4(r18)
   24de8:	847fffc4 	addi	r17,r16,-1
   24dec:	88000a16 	blt	r17,zero,24e18 <__call_exitprocs+0x90>
   24df0:	84000044 	addi	r16,r16,1
   24df4:	802090ba 	slli	r16,r16,2
   24df8:	9421883a 	add	r16,r18,r16
   24dfc:	e0001c26 	beq	fp,zero,24e70 <__call_exitprocs+0xe8>
   24e00:	80804017 	ldw	r2,256(r16)
   24e04:	17001a26 	beq	r2,fp,24e70 <__call_exitprocs+0xe8>
   24e08:	8c7fffc4 	addi	r17,r17,-1
   24e0c:	88bfffd8 	cmpnei	r2,r17,-1
   24e10:	843fff04 	addi	r16,r16,-4
   24e14:	103ff91e 	bne	r2,zero,24dfc <__alt_mem_mcu_subsystem_ram_0+0x78004dfc>
   24e18:	a0000926 	beq	r20,zero,24e40 <__call_exitprocs+0xb8>
   24e1c:	90c00117 	ldw	r3,4(r18)
   24e20:	90800017 	ldw	r2,0(r18)
   24e24:	18002d1e 	bne	r3,zero,24edc <__call_exitprocs+0x154>
   24e28:	10002c26 	beq	r2,zero,24edc <__call_exitprocs+0x154>
   24e2c:	9009883a 	mov	r4,r18
   24e30:	b8800015 	stw	r2,0(r23)
   24e34:	000fde40 	call	fde4 <free>
   24e38:	bc800017 	ldw	r18,0(r23)
   24e3c:	903fe91e 	bne	r18,zero,24de4 <__alt_mem_mcu_subsystem_ram_0+0x78004de4>
   24e40:	dfc00b17 	ldw	ra,44(sp)
   24e44:	df000a17 	ldw	fp,40(sp)
   24e48:	ddc00917 	ldw	r23,36(sp)
   24e4c:	dd800817 	ldw	r22,32(sp)
   24e50:	dd400717 	ldw	r21,28(sp)
   24e54:	dd000617 	ldw	r20,24(sp)
   24e58:	dcc00517 	ldw	r19,20(sp)
   24e5c:	dc800417 	ldw	r18,16(sp)
   24e60:	dc400317 	ldw	r17,12(sp)
   24e64:	dc000217 	ldw	r16,8(sp)
   24e68:	dec00c04 	addi	sp,sp,48
   24e6c:	f800283a 	ret
   24e70:	90800117 	ldw	r2,4(r18)
   24e74:	80c00017 	ldw	r3,0(r16)
   24e78:	10bfffc4 	addi	r2,r2,-1
   24e7c:	14400d26 	beq	r2,r17,24eb4 <__call_exitprocs+0x12c>
   24e80:	80000015 	stw	zero,0(r16)
   24e84:	183fe026 	beq	r3,zero,24e08 <__alt_mem_mcu_subsystem_ram_0+0x78004e08>
   24e88:	9c4c983a 	sll	r6,r19,r17
   24e8c:	90806217 	ldw	r2,392(r18)
   24e90:	95800117 	ldw	r22,4(r18)
   24e94:	3084703a 	and	r2,r6,r2
   24e98:	1000081e 	bne	r2,zero,24ebc <__call_exitprocs+0x134>
   24e9c:	183ee83a 	callr	r3
   24ea0:	90800117 	ldw	r2,4(r18)
   24ea4:	15bfcc1e 	bne	r2,r22,24dd8 <__alt_mem_mcu_subsystem_ram_0+0x78004dd8>
   24ea8:	b8800017 	ldw	r2,0(r23)
   24eac:	14bfd626 	beq	r2,r18,24e08 <__alt_mem_mcu_subsystem_ram_0+0x78004e08>
   24eb0:	003fc906 	br	24dd8 <__alt_mem_mcu_subsystem_ram_0+0x78004dd8>
   24eb4:	94400115 	stw	r17,4(r18)
   24eb8:	003ff206 	br	24e84 <__alt_mem_mcu_subsystem_ram_0+0x78004e84>
   24ebc:	90806317 	ldw	r2,396(r18)
   24ec0:	81002017 	ldw	r4,128(r16)
   24ec4:	308c703a 	and	r6,r6,r2
   24ec8:	3000081e 	bne	r6,zero,24eec <__call_exitprocs+0x164>
   24ecc:	200b883a 	mov	r5,r4
   24ed0:	d9000117 	ldw	r4,4(sp)
   24ed4:	183ee83a 	callr	r3
   24ed8:	003ff106 	br	24ea0 <__alt_mem_mcu_subsystem_ram_0+0x78004ea0>
   24edc:	902f883a 	mov	r23,r18
   24ee0:	1025883a 	mov	r18,r2
   24ee4:	903fbf1e 	bne	r18,zero,24de4 <__alt_mem_mcu_subsystem_ram_0+0x78004de4>
   24ee8:	003fd506 	br	24e40 <__alt_mem_mcu_subsystem_ram_0+0x78004e40>
   24eec:	183ee83a 	callr	r3
   24ef0:	003feb06 	br	24ea0 <__alt_mem_mcu_subsystem_ram_0+0x78004ea0>

00024ef4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24ef4:	defffd04 	addi	sp,sp,-12
   24ef8:	df000215 	stw	fp,8(sp)
   24efc:	df000204 	addi	fp,sp,8
   24f00:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24f04:	0001883a 	nop
   24f08:	e0bffe17 	ldw	r2,-8(fp)
   24f0c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24f10:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24f14:	10000226 	beq	r2,zero,24f20 <_exit+0x2c>
    ALT_SIM_FAIL();
   24f18:	002af070 	cmpltui	zero,zero,43969
   24f1c:	00000106 	br	24f24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24f20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24f24:	003fff06 	br	24f24 <__alt_mem_mcu_subsystem_ram_0+0x78004f24>
