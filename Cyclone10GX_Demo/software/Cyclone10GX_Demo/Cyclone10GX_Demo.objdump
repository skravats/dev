
Cyclone10GX_Demo.elf:     file format elf32-littlenios2
Cyclone10GX_Demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000238

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x80000020 paddr 0x80000020 align 2**12
         filesz 0x00027030 memsz 0x00027030 flags r-x
    LOAD off    0x00028050 vaddr 0x80027050 paddr 0x80028dc8 align 2**12
         filesz 0x00001d78 memsz 0x00001d78 flags rw-
    LOAD off    0x0002ab40 vaddr 0x8002ab40 paddr 0x8002ab40 align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  80000000  80000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  80000020  80000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024ba0  80000238  80000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002278  80024dd8  80024dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d78  80027050  80028dc8  00028050  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  8002ab40  8002ab40  0002ab40  2**2
                  ALLOC, SMALL_DATA
  6 .mcu_subsystem_ram_0 00000000  00000000  00000000  00029dc8  2**0
                  CONTENTS
  7 .qspi_controller2_0_avl_mem 00000000  08000000  08000000  00029dc8  2**0
                  CONTENTS
  8 .sdram_ctrl_amm_0 00000000  8002acc4  8002acc4  00029dc8  2**0
                  CONTENTS
  9 .comment      0000002c  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001788  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00071625  00000000  00000000  0002b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000155f9  00000000  00000000  0009cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019f1d  00000000  00000000  000b219e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004b08  00000000  00000000  000cc0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000078cb  00000000  00000000  000d0bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020273  00000000  00000000  000d848f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000f8704  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002108  00000000  00000000  000f8768  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  001008a5  2**0
                  CONTENTS, READONLY
 20 .cpu          00000013  00000000  00000000  001008a8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  001008bb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  001008bc  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  001008bd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  001008c8  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  001008d3  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  001008de  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000039  00000000  00000000  001008eb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     003b6d77  00000000  00000000  00100924  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000000 l    d  .entry	00000000 .entry
80000020 l    d  .exceptions	00000000 .exceptions
80000238 l    d  .text	00000000 .text
80024dd8 l    d  .rodata	00000000 .rodata
80027050 l    d  .rwdata	00000000 .rwdata
8002ab40 l    d  .bss	00000000 .bss
00000000 l    d  .mcu_subsystem_ram_0	00000000 .mcu_subsystem_ram_0
08000000 l    d  .qspi_controller2_0_avl_mem	00000000 .qspi_controller2_0_avl_mem
8002acc4 l    d  .sdram_ctrl_amm_0	00000000 .sdram_ctrl_amm_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Developer/fpga/ArrowESC/Cyclone10GX_Demo/software/Cyclone10GX_Demo_bsp//obj/HAL/src/crt0.o
80000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ad9144.c
80024dd8 l     O .rodata	00000032 ad9144_jesd204_link_modes
80024e0a l     O .rodata	00000014 ad9144_required_device_config
80024e1e l     O .rodata	0000003c ad9144_optimal_serdes_settings
80024e5a l     O .rodata	00000034 ad9144_pll_fixed_writes
800007f4 l     F .text	000002b0 ad9144_pll_setup
80025074 l     O .rodata	00000011 __func__.3521
80025088 l     O .rodata	0000000d __func__.3533
80025098 l     O .rodata	00000015 __func__.3545
800250b0 l     O .rodata	0000000e __func__.3559
800250c0 l     O .rodata	0000001a __func__.3568
800250dc l     O .rodata	0000001a __func__.3581
00000000 l    df *ABS*	00000000 ad9523.c
00000000 l    df *ABS*	00000000 ad9680.c
00000000 l    df *ABS*	00000000 adc_core.c
800252f8 l     O .rodata	0000000a __func__.3463
80025304 l     O .rodata	00000014 __func__.3496
80025318 l     O .rodata	0000000e __func__.3546
00000000 l    df *ABS*	00000000 Communication.c
00000000 l    df *ABS*	00000000 dac_buffer.c
80025328 l     O .rodata	00000800 sine_lut
00000000 l    df *ABS*	00000000 dac_core.c
80025bb0 l     O .rodata	0000000e __func__.3489
80025bc0 l     O .rodata	0000000a __func__.3506
00000000 l    df *ABS*	00000000 dmac_core.c
80025bec l     O .rodata	00000017 __func__.3436
00000000 l    df *ABS*	00000000 fru_tools.c
800261dc l     O .rodata	0000000a __func__.3336
80006740 l     F .text	00000268 insert_str
00000000 l    df *ABS*	00000000 jesd_core.c
80027050 l     O .rwdata	00000010 axi_jesd204_rx_link_status_label
80027060 l     O .rwdata	00000010 axi_jesd204_tx_link_status_label
80027070 l     O .rwdata	00000010 axi_jesd204_rx_lane_status_label
800264c8 l     O .rodata	0000000c __func__.3470
00000000 l    df *ABS*	00000000 platform_drivers.c
00000000 l    df *ABS*	00000000 xcvr_core.c
80026518 l     O .rodata	0000000b __func__.3556
00000000 l    df *ABS*	00000000 altera_a10_atx_pll.c
00000000 l    df *ABS*	00000000 altera_a10_fpll.c
00000000 l    df *ABS*	00000000 altera_a10_xcvr_channel.c
00000000 l    df *ABS*	00000000 altera_pll_common.c
80026668 l     O .rodata	0000001f __func__.3466
80026688 l     O .rodata	00000016 __func__.3487
800266a0 l     O .rodata	0000000f __func__.3498
800266b0 l     O .rodata	0000000b __func__.3509
800266bc l     O .rodata	0000000c __func__.3519
00000000 l    df *ABS*	00000000 xilinx_qpll.c
00000000 l    df *ABS*	00000000 xilinx_xcvr_channel.c
00000000 l    df *ABS*	00000000 main.c
800268fc l     O .rodata	0000000a __func__.4221
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
80027080 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mktime.c
800106d4 l     F .text	000002b0 validate_structure
80026a48 l     O .rodata	00000030 DAYS_IN_MONTH
80026a18 l     O .rodata	00000030 _DAYS_BEFORE_MONTH
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
80026ace l     O .rodata	00000010 blanks.4636
80026abe l     O .rodata	00000010 zeroes.4637
00000000 l    df *ABS*	00000000 tzcalc_limits.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzset.c
00000000 l    df *ABS*	00000000 tzset_r.c
8002ab50 l     O .bss	00000004 prev_tzenv
8002abb7 l     O .bss	0000000b __tzname_std
8002abac l     O .bss	0000000b __tzname_dst
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 vfprintf.c
80015910 l     F .text	000000c0 __sbprintf
80026b43 l     O .rodata	00000010 blanks.4651
80026b33 l     O .rodata	00000010 zeroes.4652
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 div.c
00000000 l    df *ABS*	00000000 dtoa.c
80015bec l     F .text	000001f8 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
80017734 l     F .text	00000008 __fp_lock
80017748 l     F .text	00000184 __sinit.part.0
800178cc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 gettzinfo.c
80027a18 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 month_lengths.c
00000000 l    df *ABS*	00000000 mprec.c
80026e44 l     O .rodata	0000000c p05.3456
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
8001a05c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 siscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtoul.c
8001a530 l     F .text	00000254 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
80026f78 l     O .rodata	00000010 blanks.4616
80026f68 l     O .rodata	00000010 zeroes.4617
00000000 l    df *ABS*	00000000 vfscanf.c
80026f88 l     O .rodata	00000022 basefix.4209
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8001ce14 l     F .text	000000f4 __sprint_r.part.0
80026fba l     O .rodata	00000010 blanks.4632
80026faa l     O .rodata	00000010 zeroes.4633
8001e158 l     F .text	000000c0 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 environ.c
8002ab60 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtol.c
8001eb2c l     F .text	00000230 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 strtoll.c
8001ee04 l     F .text	000002d4 _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
8001f180 l     F .text	00000318 _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
8001f910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
8001fa1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8001fa7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8001fba4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_isatty.c
8001fcc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
8001fda8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
8001fe94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
800202c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
80028da8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80020534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80027c00 l     O .rwdata	00000038 fmc_i2c
80027c38 l     O .rwdata	00001060 jtag_uart_0
80028c98 l     O .rwdata	000000dc qspi_controller2_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
8002071c l     F .text	00000110 optional_irq_callback
8002087c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80022530 l     F .text	00000210 altera_avalon_jtag_uart_irq
80022740 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80022d80 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_generic_quad_spi_controller2.c
80023950 l     F .text	0000007c alt_qspi_poll_for_write_in_progress
800238b4 l     F .text	0000009c alt_qspi_validate_read_write_arguments
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
800242c8 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
800243f4 l     F .text	0000003c alt_get_errno
80024430 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8002ab80 g     O .bss	00000004 alt_instruction_exception_handler
80010db4 g     F .text	00000018 putchar
8000b650 g     F .text	000000e8 altera_a10_acquire_arbitration
800197e4 g     F .text	00000074 _mprec_log10
80003f8c g     F .text	00000044 I2C_Read
800198c4 g     F .text	00000074 __any_on
8001e794 g     F .text	00000058 _isatty_r
80026e50 g     O .rodata	00000028 __mprec_tinytens
800077c4 g     F .text	000003c0 axi_jesd204_rx_laneinfo_read
8001ffa4 g     F .text	0000007c alt_main
80011108 g     F .text	0000008c strcpy
80010dcc g     F .text	000000cc _puts_r
8002abc4 g     O .bss	00000100 alt_irq
800073d4 g     F .text	000001f8 axi_jesd204_rx_status_read
8001e82c g     F .text	00000064 _lseek_r
800065dc g     F .text	00000164 free_FRU
80002db8 g     F .text	00000088 ad9680_spi_read
80028dc8 g       *ABS*	00000000 __flash_rwdata_start
800089c0 g     F .text	00000214 atx_lookup_cp_current
8000b5cc g     F .text	00000084 pll_update
8001f694 g     F .text	00000080 .hidden __eqdf2
8002acc4 g       *ABS*	00000000 __alt_heap_start
80001d88 g     F .text	000000e4 ad9523_sync
80008768 g     F .text	000000c0 xcvr_reset
800072d0 g     F .text	00000104 jesd_status
80010d74 g     F .text	00000038 printf
8001f540 g     F .text	000000a8 _wcrtomb_r
8001a408 g     F .text	0000005c __sseek
80017a4c g     F .text	00000010 __sinit
8001e218 g     F .text	00000148 __swbuf_r
8002ab58 g     O .bss	00000004 _daylight
8000fbac g     F .text	0000007c _setlocale_r
800178d4 g     F .text	00000068 __sfmoreglue
80020f58 g     F .text	000000a8 alt_avalon_i2c_rx_read
8001ce00 g     F .text	00000014 ungetc
80013920 g     F .text	00000024 _tzset_r
80020044 g     F .text	00000024 __malloc_unlock
8001f4cc g     F .text	00000030 strtoull_l
80006408 g     F .text	000001d4 parse_FRU
80008bd4 g     F .text	00000184 atx_lookup_lf_resistance
80009358 g     F .text	000001b0 atx_pll_recalc_rate
80022168 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
80020cf8 g     F .text	00000084 alt_avalon_i2c_master_config_speed_get
80022e74 g     F .text	000000fc alt_qspi_controller2_lock
8001bb70 g     F .text	000000f8 _sfread_r
800188c0 g     F .text	0000011c memmove
80017a38 g     F .text	00000014 _cleanup
80026524 g     O .rodata	00000050 atx_bands
8000fc50 g     F .text	00000020 __locale_ctype_ptr
800219bc g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
800189dc g     F .text	000000a4 _Balloc
80008494 g     F .text	00000048 xcvr_write
8000e7d0 g     F .text	000000e0 .hidden __gtdf2
80024804 g     F .text	00000024 altera_nios2_gen2_irq_init
80007bd0 g     F .text	0000003c i2c_write
80000000 g     F .entry	0000001c __reset
800185c0 g     F .text	00000008 __localeconv_l
80001b58 g     F .text	000000dc ad9523_calibrate
80004aa4 g     F .text	0000020c dac_data_setup
80000020 g       *ABS*	00000000 __flash_exceptions_start
8001e734 g     F .text	00000060 _fstat_r
8002ab5c g     O .bss	00000004 errno
80010f1c g     F .text	00000010 __srget
8001a384 g     F .text	00000008 __seofread
8001a9ec g     F .text	00001024 ___svfiprintf_internal_r
8002ab68 g     O .bss	00000004 alt_argv
80030d74 g       *ABS*	00000000 _gp
80020504 g     F .text	00000030 usleep
800221ac g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
8000c870 g     F .text	00000028 .hidden __bswapsi2
80020e68 g     F .text	00000044 alt_avalon_i2c_is_busy
8000158c g     F .text	0000017c ad9144_datapath_prbs_test
80027a80 g     O .rwdata	00000180 alt_fd_list
800031dc g     F .text	00000184 adc_setup
80007d0c g     F .text	00000034 spi_remove
8000faa0 g     F .text	0000007c _getc_r
80005138 g     F .text	00000074 min2date
8000fb1c g     F .text	00000090 getc
800037f8 g     F .text	000000b8 adc_set_pnsel
80010dac g     F .text	00000008 _putchar_r
80020c2c g     F .text	000000cc alt_avalon_i2c_master_config_set
80023d54 g     F .text	00000160 alt_find_dev
8000a1bc g     F .text	000001cc fpll_recalc_rate
800104e8 g     F .text	000000f0 memcpy
80022f70 g     F .text	0000008c alt_qspi_controller2_get_info
8001773c g     F .text	0000000c _cleanup_r
8001f848 g     F .text	000000c8 .hidden __floatsidf
80024378 g     F .text	0000007c alt_io_redirect
8001f714 g     F .text	000000e0 .hidden __ltdf2
800030e4 g     F .text	00000048 ad9680_remove
8001f10c g     F .text	00000030 strtoll_l
80024dd8 g       *ABS*	00000000 __DTOR_END__
80021800 g     F .text	000001bc alt_avalon_i2c_master_transmit
80010e98 g     F .text	00000010 puts
80024a4c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00000000 g       *ABS*	00000000 __alt_mem_mcu_subsystem_ram_0
8000b520 g     F .text	00000058 a10_pll_read
8001e940 g     F .text	000000b8 mbrtowc
8001973c g     F .text	000000a8 __ratio
8001e140 g     F .text	00000018 __vfiprintf_internal
80022940 g     F .text	0000021c altera_avalon_jtag_uart_read
8000fc84 g     F .text	00000010 malloc
80010d44 g     F .text	00000030 _printf_r
8000d588 g     F .text	00000064 .hidden __udivsi3
8001fd00 g     F .text	000000a8 isatty
8001e7ec g     F .text	00000040 iswspace
80007c48 g     F .text	000000c4 spi_init
80026ea0 g     O .rodata	000000c8 __mprec_tens
8001f13c g     F .text	00000044 strtoll
8000c898 g     F .text	00000074 .hidden __fixunsdfsi
80003a34 g     F .text	000004f0 adc_ramp_test
80023fa4 g     F .text	00000090 alt_icache_flush
80020a98 g     F .text	00000098 alt_avalon_i2c_enable
8002ab4c g     O .bss	00000004 __malloc_top_pad
8001bb00 g     F .text	00000070 __ssrefill_r
8001a7e8 g     F .text	00000044 strtoul
80022094 g     F .text	0000006c alt_avalon_i2c_int_disable
80007bac g     F .text	00000024 i2c_remove
800185c8 g     F .text	00000020 _localeconv_r
8001f498 g     F .text	00000034 _strtoull_r
80018ddc g     F .text	00000034 __i2b
80017ea0 g     F .text	000004a0 __sfvwrite_r
80001c34 g     F .text	00000154 ad9523_status
80000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl_amm_0
80010f2c g     F .text	00000058 _sbrk_r
80009b5c g     F .text	0000034c fpll_calc_params
8001e9f8 g     F .text	00000064 _read_r
80028da0 g     O .rwdata	00000004 alt_max_fd
8000a750 g     F .text	0000039c altera_a10_cdr_lookup_cp_current_pfd
8000b8f8 g     F .text	0000009c pll_is_enabled
8001e430 g     F .text	000000f0 _fclose_r
8001770c g     F .text	00000028 fflush
800084dc g     F .text	00000178 xcvr_setup
8002ab48 g     O .bss	00000004 __malloc_max_sbrked_mem
80021bc4 g     F .text	0000020c alt_avalon_i2c_master_receive
8000d644 g     F .text	000008c0 .hidden __adddf3
800194f0 g     F .text	00000104 __b2d
8000cf34 g     F .text	00000554 .hidden __umoddi3
8001fed0 g     F .text	000000d4 lseek
80022100 g     F .text	00000068 alt_avalon_i2c_int_enable
80007150 g     F .text	00000048 jesd_write
80028d74 g     O .rwdata	00000004 _global_impure_ptr
80019ae4 g     F .text	00000578 _realloc_r
8002acc4 g       *ABS*	00000000 __bss_end
800241e4 g     F .text	000000e4 alt_iic_isr_register
800043b0 g     F .text	000001f8 dds_set_frequency
8001ed90 g     F .text	00000030 strtol_l
80023164 g     F .text	0000026c alt_qspi_controller2_write_block
800246d8 g     F .text	0000012c alt_tick
80008f6c g     F .text	00000138 atx_pll_round_rate
8000c99c g     F .text	00000598 .hidden __udivdi3
80009fd4 g     F .text	000001e8 fpll_set_rate
80021fbc g     F .text	00000058 alt_avalon_i2c_int_status_get
8001e694 g     F .text	00000024 _fputwc_r
80026e78 g     O .rodata	00000028 __mprec_bigtens
80018bb8 g     F .text	00000110 __s2b
8000f8e0 g     F .text	0000009c .hidden __floatunsidf
80019274 g     F .text	00000058 __mcmp
80002ebc g     F .text	00000074 ad9680_test
80017a6c g     F .text	00000014 __fp_lock_all
80005a84 g     F .text	000004a8 parse_board_area
80024198 g     F .text	0000004c alt_ic_irq_enabled
80003f48 g     F .text	00000044 I2C_Write
8000a550 g     F .text	0000008c altera_a10_cdr_lookup_lf_resistor_pd
8002463c g     F .text	0000009c alt_alarm_stop
8001edc0 g     F .text	00000044 strtol
80008370 g     F .text	00000038 ad_platform_close
80020918 g     F .text	00000054 alt_avalon_i2c_register_callback
8002ab70 g     O .bss	00000004 alt_irq_active
8002096c g     F .text	000000ec alt_avalon_i2c_init
80003f24 g     F .text	00000024 I2C_Init
80000434 g     F .text	00000094 ad9144_spi_write_seq
800000fc g     F .exceptions	000000c8 alt_irq_handler
80027a58 g     O .rwdata	00000028 alt_dev_null
80022ffc g     F .text	00000168 alt_qspi_controller2_erase_block
80007104 g     F .text	0000004c jesd_read
80013404 g     F .text	00000004 __tz_unlock
80023c4c g     F .text	00000048 alt_dcache_flush_all
80018cc8 g     F .text	00000064 __hi0bits
8000f860 g     F .text	00000080 .hidden __fixdfsi
8000f9d0 g     F .text	00000014 calloc
8000312c g     F .text	00000068 adc_read
80028dc8 g       *ABS*	00000000 __ram_rwdata_end
80028d98 g     O .rwdata	00000008 alt_dev_list
80020570 g     F .text	000000f8 write
80019938 g     F .text	000000cc _putc_r
80021294 g     F .text	0000004c alt_avalon_i2c_check_arblost
80028d84 g     O .rwdata	00000008 _tzname
80022058 g     F .text	0000003c alt_avalon_i2c_int_clear
80028d8c g     O .rwdata	00000004 environ
80027050 g       *ABS*	00000000 __ram_rodata_end
8001fbe0 g     F .text	000000b0 fstat
8001f714 g     F .text	000000e0 .hidden __ledf2
80028dac g     O .rwdata	00000008 alt_avalon_i2c_list
8001900c g     F .text	00000124 __pow5mult
8001cf20 g     F .text	00001220 ___vfiprintf_internal_r
8000d5ec g     F .text	00000058 .hidden __umodsi3
80001708 g     F .text	000000f0 ad9523_spi_read
80007f40 g     F .text	00000028 gpio_get_direction
8002acc4 g       *ABS*	00000000 end
8000b40c g     F .text	00000114 altera_a10_calib_tx_pll
8001fa48 g     F .text	00000034 alt_dev_reg
8001a2b8 g     F .text	00000078 _siscanf_r
80008d58 g     F .text	00000214 atx_calc_params
8000b790 g     F .text	00000168 pll_calibration_check
80001364 g     F .text	00000228 ad9144_short_pattern_test
80002e40 g     F .text	0000007c ad9680_spi_write
80022470 g     F .text	000000c0 altera_avalon_jtag_uart_init
800001c4 g     F .exceptions	00000074 alt_instruction_exception_entry
80020a58 g     F .text	00000040 alt_avalon_i2c_open
80024dd8 g       *ABS*	00000000 __CTOR_LIST__
00000000 g       *ABS*	00000000 __alt_stack_pointer
80021414 g     F .text	000000e8 alt_avalon_i2c_master_tx
80022df8 g     F .text	0000007c alt_avalon_timer_sc_init
8000f97c g     F .text	00000054 .hidden __clzsi2
80022b5c g     F .text	00000224 altera_avalon_jtag_uart_write
80017a5c g     F .text	00000004 __sfp_lock_acquire
800187d8 g     F .text	000000e8 memchr
80013944 g     F .text	00001fb4 ___vfprintf_internal_r
80010f84 g     F .text	00000054 _sprintf_r
80017bb0 g     F .text	000002f0 _free_r
80020068 g     F .text	0000022c alt_printf
80007e2c g     F .text	00000090 gpio_get
80004cfc g     F .text	00000048 dmac_write
80026c54 g     O .rodata	00000180 _ctype_b
80003360 g     F .text	0000011c adc_set_delay
8000fc28 g     F .text	00000020 __locale_mb_cur_max
80024c38 g     F .text	0000016c __call_exitprocs
80010ea8 g     F .text	00000074 __srget_r
80008350 g     F .text	00000020 ad_platform_init
8000aaec g     F .text	00000290 altera_a10_cdr_calc_params
800042f8 g     F .text	0000006c dac_read
8001ba10 g     F .text	000000f0 _sungetc_r
8002082c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
80010984 g     F .text	000003c0 mktime
80028d7c g     O .rwdata	00000004 __malloc_sbrk_base
80000238 g     F .text	0000004c _start
800069a8 g     F .text	0000075c build_FRU_blob
8002ab74 g     O .bss	00000004 _alt_tick_rate
8001f0d8 g     F .text	00000034 _strtoll_r
80021dd0 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
800221f8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
80019130 g     F .text	00000144 __lshift
8000213c g     F .text	00000c34 ad9523_setup
8002ab78 g     O .bss	00000008 _alt_nticks
80020300 g     F .text	000000fc read
800206a0 g     F .text	0000007c alt_sys_init
8001a82c g     F .text	000001c0 __ssprint_r
800088e0 g     F .text	0000008c atx_lookup_band
8000bf70 g     F .text	00000830 daq2_init
80024b2c g     F .text	0000010c __register_exitproc
8001a46c g     F .text	000000c4 strncmp
80002f30 g     F .text	000001b4 ad9680_setup
80021638 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
8000815c g     F .text	000000a8 ad_gpio_get_range
80018e10 g     F .text	000001fc __multiply
80007f14 g     F .text	0000002c gpio_direction_output
800227e8 g     F .text	00000068 altera_avalon_jtag_uart_close
80007f68 g     F .text	000000ac gpio_set_value
80027050 g       *ABS*	00000000 __ram_rwdata_start
80024dd8 g       *ABS*	00000000 __ram_rodata_start
80026de4 g     O .rodata	00000060 __month_lengths
8000809c g     F .text	000000c0 ad_gpio_set_range
8002ab84 g     O .bss	00000028 __malloc_current_mallinfo
800195f4 g     F .text	00000148 __d2b
80004084 g     F .text	00000274 dac_buffer_load
800017f8 g     F .text	000000d4 ad9523_spi_write
8002230c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8001a784 g     F .text	00000034 _strtoul_r
800249ac g     F .text	000000a0 alt_get_fd
80023b24 g     F .text	00000128 alt_busy_sleep
8001e3d8 g     F .text	00000058 _close_r
80004cb0 g     F .text	0000004c dmac_read
80001908 g     F .text	00000250 ad9523_vco_out_map
80020eac g     F .text	000000ac alt_avalon_i2c_rx_read_available
800223cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8002acc4 g       *ABS*	00000000 __alt_stack_base
8002241c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
800075cc g     F .text	000001f8 axi_jesd204_tx_status_read
80015a20 g     F .text	00000158 __swsetup_r
8000df04 g     F .text	000008cc .hidden __divdf3
8001793c g     F .text	000000fc __sfp
80019858 g     F .text	0000006c __copybits
80027610 g     O .rwdata	00000408 __malloc_av_
80017a68 g     F .text	00000004 __sinit_lock_release
8000e8b0 g     F .text	000006dc .hidden __muldf3
8001a330 g     F .text	00000054 __sread
80007ef0 g     F .text	00000024 gpio_direction_input
80008204 g     F .text	000000bc do_div
80024828 g     F .text	00000184 alt_find_file
8001fab8 g     F .text	000000a4 alt_dev_llist_insert
80020020 g     F .text	00000024 __malloc_lock
80020454 g     F .text	000000b0 sbrk
80011224 g     F .text	00001fb4 ___svfprintf_internal_r
800212e0 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
80021248 g     F .text	0000004c alt_avalon_i2c_check_nack
800176ac g     F .text	00000060 _fflush_r
80023f70 g     F .text	00000034 alt_flash_device_register
8000a388 g     F .text	00000054 altera_a10_cdr_lookup_vco_speed
8000f9e4 g     F .text	000000bc _calloc_r
80028db4 g     O .rwdata	00000008 alt_flash_dev_list
8001f4fc g     F .text	00000044 strtoull
80013400 g     F .text	00000004 __tz_lock
8000b578 g     F .text	00000054 a10_pll_write
8002ab40 g       *ABS*	00000000 __bss_start
800105d8 g     F .text	000000fc memset
8000c7a0 g     F .text	000000d0 main
80021214 g     F .text	00000034 alt_avalon_i2c_master_target_set
8002ab6c g     O .bss	00000004 alt_envp
8002ab44 g     O .bss	00000004 __malloc_max_total_mem
8002236c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80007c0c g     F .text	0000003c i2c_read
8001e360 g     F .text	00000014 __swbuf
80008448 g     F .text	0000004c xcvr_read
80022014 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
8000a490 g     F .text	0000004c altera_a10_cdr_lookup_cp_current_pd
8000b738 g     F .text	00000058 altera_a10_release_arbitration
8001a464 g     F .text	00000008 __sclose
00000000 g       *ABS*	00000000 __alt_heap_limit
800045a8 g     F .text	00000168 dds_set_phase
8001e520 g     F .text	00000010 fclose
8001ed5c g     F .text	00000034 _strtol_r
80018498 g     F .text	00000100 _findenv_r
80015de4 g     F .text	000016a8 _dtoa_r
8000fca4 g     F .text	000007d8 _malloc_r
800159f0 g     F .text	00000030 __ascii_wctomb
8000ba24 g     F .text	00000090 pll_disable
80004890 g     F .text	00000114 dac_data_src_sel
80028da4 g     O .rwdata	00000004 alt_errno
80005490 g     F .text	00000244 six2ascii
8001cba8 g     F .text	000000d4 __submore
800090a4 g     F .text	000002b4 atx_pll_set_rate
8001fb80 g     F .text	00000024 __env_unlock
80018340 g     F .text	000000a4 _fwalk
8001047c g     F .text	00000028 _mbtowc_r
80019a04 g     F .text	000000e0 putc
8000d488 g     F .text	00000088 .hidden __divsi3
80017a94 g     F .text	0000011c _malloc_trim_r
80024dd8 g       *ABS*	00000000 __CTOR_END__
80000284 g     F .text	00000088 ad9144_spi_read
80013408 g     F .text	0000000c _tzset_unlocked
8001103c g     F .text	000000cc strcmp
80008014 g     F .text	00000088 gpio_get_value
8001a240 g     F .text	00000078 siscanf
80024dd8 g       *ABS*	00000000 __flash_rodata_start
800004c8 g     F .text	0000032c ad9144_setup_jesd204_link
80024dd8 g       *ABS*	00000000 __DTOR_LIST__
8001a7b8 g     F .text	00000030 strtoul_l
8000a4dc g     F .text	0000003c altera_a10_cdr_lookup_clklow_div
8001f694 g     F .text	00000080 .hidden __nedf2
8000c90c g     F .text	00000090 .hidden __fixunsdfdi
80020668 g     F .text	00000038 alt_irq_init
800203fc g     F .text	00000058 alt_release_fd
800018cc g     F .text	0000003c ad9523_io_update
8000404c g     F .text	00000038 SPI_Write
80010fd8 g     F .text	00000064 sprintf
80026906 g     O .rodata	00000100 .hidden __clz_tab
80008654 g     F .text	00000114 xcvr_getconfig
8002ab40 g     O .bss	00000004 _PathLocale
80024ae4 g     F .text	00000014 atexit
80004710 g     F .text	00000180 dds_set_scale
8001e374 g     F .text	00000064 _write_r
8000fc70 g     F .text	00000014 setlocale
8000ad7c g     F .text	00000150 altera_a10_cdr_pll_round_rate
80001e6c g     F .text	000002d0 ad9523_init
80028d78 g     O .rwdata	00000004 _impure_ptr
80004d44 g     F .text	0000038c dmac_start_transaction
8002ab64 g     O .bss	00000004 alt_argc
8001748c g     F .text	00000220 __sflush_r
8001e890 g     F .text	000000b0 _mbrtowc_r
80023cf4 g     F .text	00000060 _do_dtors
800211dc g     F .text	00000038 alt_avalon_i2c_master_target_get
80000aa4 g     F .text	000005bc ad9144_setup
800210ec g     F .text	000000f0 alt_avalon_i2c_send_address
80007b84 g     F .text	00000028 i2c_init
8001a078 g     F .text	000001c8 __srefill_r
8000030c g     F .text	0000007c ad9144_spi_write
80000020 g       .exceptions	00000000 alt_irq_entry
800104a4 g     F .text	00000044 __ascii_mbtowc
80001060 g     F .text	0000013c ad9144_dac_calibrate
8001948c g     F .text	00000064 __ulp
80017a80 g     F .text	00000014 __fp_unlock_all
80028d90 g     O .rwdata	00000008 alt_fs_list
800235b0 g     F .text	000000ac alt_qspi_controller2_read
80007238 g     F .text	00000098 jesd_sysref_control
8002ab54 g     O .bss	00000004 _timezone
80002d70 g     F .text	00000048 ad9523_remove
8000bab4 g     F .text	000004bc fmcdaq2_reconfig
8001bc68 g     F .text	00000f40 __ssvfiscanf_r
80000020 g       *ABS*	00000000 __ram_exceptions_start
800185e8 g     F .text	00000020 localeconv
80004364 g     F .text	0000004c dac_write
8000b994 g     F .text	00000090 pll_enable
80005f2c g     F .text	000004dc parse_multiboard_area
80018608 g     F .text	00000094 __swhatbuf_r
800222a8 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
80024034 g     F .text	00000050 alt_ic_isr_register
80020b30 g     F .text	0000004c alt_avalon_i2c_disable
80007d40 g     F .text	000000ec spi_write_and_read
80000388 g     F .text	000000ac ad9144_spi_check_status
80028dc8 g       *ABS*	00000000 _edata
80007198 g     F .text	000000a0 jesd_setup
800082c0 g     F .text	00000090 ad_reg_write_16
8002acc4 g       *ABS*	00000000 _end
80023eb4 g     F .text	00000068 alt_flash_open_dev
8001e530 g     F .text	00000164 __fputwc
80000238 g       *ABS*	00000000 __ram_exceptions_end
80022850 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80013438 g     F .text	000004e8 _tzset_unlocked_r
800083e8 g     F .text	00000060 ad_pow2
8000a5dc g     F .text	00000174 altera_a10_cdr_lookup_lf_resistor_pfd
80020b7c g     F .text	000000b0 alt_avalon_i2c_master_config_get
8000347c g     F .text	0000037c adc_delay_calibrate
8002410c g     F .text	0000008c alt_ic_irq_disable
800233d0 g     F .text	000001e0 alt_qspi_controller2_write
8001a38c g     F .text	0000007c __swrite
80028d80 g     O .rwdata	00000004 __malloc_trim_threshold
80024af8 g     F .text	00000034 exit
800183e4 g     F .text	000000b4 _fwalk_reent
800192cc g     F .text	000001c0 __mdiff
8000896c g     F .text	00000054 atx_lookup_tank
80023f1c g     F .text	00000054 alt_flash_close_dev
8000d510 g     F .text	00000078 .hidden __modsi3
00000000 g       *ABS*	00000000 __alt_data_end
80000020 g     F .exceptions	00000000 alt_exception
80017a60 g     F .text	00000004 __sfp_lock_release
8001ea5c g     F .text	000000d0 __sccl
80020d7c g     F .text	000000ec alt_avalon_i2c_master_config_speed_set
80007ebc g     F .text	00000034 gpio_remove
80026b53 g     O .rodata	00000101 _ctype_
800050d0 g     F .text	00000068 calc_zero_checksum
80021000 g     F .text	000000ec alt_avalon_i2c_cmd_write
8001f7f4 g     F .text	00000054 .hidden __unorddf2
8002365c g     F .text	00000258 altera_qspi_controller2_init
8000aecc g     F .text	00000540 altera_a10_cdr_pll_set_rate
8000a518 g     F .text	00000038 altera_a10_cdr_lookup_fastlock
80024da4 g     F .text	00000034 _exit
800083a8 g     F .text	00000040 ad_uart_read
800239cc g     F .text	00000158 alt_alarm_start
08000000 g       *ABS*	00000000 __alt_mem_qspi_controller2_0_avl_mem
80009600 g     F .text	0000055c fpll_lookup_cp_current
8001869c g     F .text	0000013c __smakebuf_r
80011194 g     F .text	00000090 strlen
8000fc48 g     F .text	00000008 __locale_ctype_ptr_l
800244e8 g     F .text	00000154 open
8000e7d0 g     F .text	000000e0 .hidden __gedf2
80009508 g     F .text	000000f8 fpll_lookup_lf_resistance
80020294 g     F .text	00000030 alt_putchar
800049a4 g     F .text	00000100 dac_setup
80015b78 g     F .text	00000074 div
800011e4 g     F .text	00000180 ad9144_status
8001cf08 g     F .text	00000018 __sprint_r
8001fc90 g     F .text	00000034 alt_icache_flush_all
80003fd0 g     F .text	00000044 SPI_Init
800051ac g     F .text	000002e4 ascii2six
80028dbc g     O .rwdata	00000004 alt_priority_mask
80024084 g     F .text	00000088 alt_ic_irq_enable
800158f8 g     F .text	00000018 __vfprintf_internal
8000a3dc g     F .text	000000b4 altera_a10_cdr_lookup_vco_speed_fix
800038b0 g     F .text	00000184 adc_pn_mon
800159d0 g     F .text	00000020 _wctomb_r
8001fb5c g     F .text	00000024 __env_lock
8000ef8c g     F .text	000008d4 .hidden __subdf3
800056d4 g     F .text	000003b0 parse_string
80013414 g     F .text	00000024 tzset
80004014 g     F .text	00000038 SPI_Read
80009ea8 g     F .text	0000012c fpll_round_rate
80018d2c g     F .text	000000b0 __lo0bits
8000119c g     F .text	00000048 ad9144_remove
800131d8 g     F .text	00000228 __tzcalc_limits
80028dc0 g     O .rwdata	00000008 alt_alarm_list
8001cc7c g     F .text	00000184 _ungetc_r
80023c94 g     F .text	00000060 _do_ctors
8001f5e8 g     F .text	000000ac wcrtomb
8001f94c g     F .text	000000d0 close
800274a4 g     O .rwdata	0000016c __global_locale
8002225c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
80003194 g     F .text	00000048 adc_write
8001fe10 g     F .text	00000084 alt_load
800214fc g     F .text	0000013c alt_avalon_i2c_master_rx
8001e6b8 g     F .text	0000007c fputwc
800185b4 g     F .text	0000000c __gettzinfo
8000fc94 g     F .text	00000010 free
80017a64 g     F .text	00000004 __sinit_lock_acquire
80018aa4 g     F .text	00000114 __multadd
80018a80 g     F .text	00000024 _Bfree
80018598 g     F .text	0000001c _getenv_r
80008828 g     F .text	000000b8 xcvr_finalize_lane_rate_change



Disassembly of section .entry:

80000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
80000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
80000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
80000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
8000000c:	00bffd16 	blt	zero,r2,80000004 <_gp+0xfffcf290>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
80000010:	00600034 	movhi	at,32768
    ori r1, r1, %lo(_start)
80000014:	08408e14 	ori	at,at,568
    jmp r1
80000018:	0800683a 	jmp	at
8000001c:	00000000 	call	80000000 <__reset>

Disassembly of section .exceptions:

80000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8000007c:	10000326 	beq	r2,zero,8000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80000080:	20000226 	beq	r4,zero,8000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80000084:	00000fc0 	call	800000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80000088:	00000706 	br	800000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80000098:	00001c40 	call	800001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8000009c:	1000021e 	bne	r2,zero,800000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
800000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
800000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
800000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
800000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
800000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
800000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
800000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
800000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
800000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
800000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
800000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
800000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
800000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
800000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
800000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
800000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
800000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
800000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
800000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
800000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
800000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
800000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
800000f8:	ef80083a 	eret

800000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
800000fc:	defff904 	addi	sp,sp,-28
80000100:	dfc00615 	stw	ra,24(sp)
80000104:	df000515 	stw	fp,20(sp)
80000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80000110:	0005313a 	rdctl	r2,ipending
80000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
80000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
80000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80000124:	00800044 	movi	r2,1
80000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8000012c:	e0ffff17 	ldw	r3,-4(fp)
80000130:	e0bffe17 	ldw	r2,-8(fp)
80000134:	1884703a 	and	r2,r3,r2
80000138:	10001126 	beq	r2,zero,80000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8000013c:	e0bffd17 	ldw	r2,-12(fp)
80000140:	100690fa 	slli	r3,r2,3
80000144:	00a000f4 	movhi	r2,32771
80000148:	1885883a 	add	r2,r3,r2
8000014c:	10eaf117 	ldw	r3,-21564(r2)
80000150:	e0bffd17 	ldw	r2,-12(fp)
80000154:	100890fa 	slli	r4,r2,3
80000158:	00a000f4 	movhi	r2,32771
8000015c:	2085883a 	add	r2,r4,r2
80000160:	10aaf217 	ldw	r2,-21560(r2)
80000164:	1009883a 	mov	r4,r2
80000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
8000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
80000170:	0005313a 	rdctl	r2,ipending
80000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
80000178:	e0bffb17 	ldw	r2,-20(fp)
8000017c:	00000706 	br	8000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
80000180:	e0bffe17 	ldw	r2,-8(fp)
80000184:	1085883a 	add	r2,r2,r2
80000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
8000018c:	e0bffd17 	ldw	r2,-12(fp)
80000190:	10800044 	addi	r2,r2,1
80000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
80000198:	003fe406 	br	8000012c <_gp+0xfffcf3b8>

    } while (1);

    active = alt_irq_pending ();
8000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
800001a0:	e0bfff17 	ldw	r2,-4(fp)
800001a4:	103fde1e 	bne	r2,zero,80000120 <_gp+0xfffcf3ac>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
800001a8:	0001883a 	nop
}
800001ac:	0001883a 	nop
800001b0:	e037883a 	mov	sp,fp
800001b4:	dfc00117 	ldw	ra,4(sp)
800001b8:	df000017 	ldw	fp,0(sp)
800001bc:	dec00204 	addi	sp,sp,8
800001c0:	f800283a 	ret

800001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
800001c4:	defffb04 	addi	sp,sp,-20
800001c8:	dfc00415 	stw	ra,16(sp)
800001cc:	df000315 	stw	fp,12(sp)
800001d0:	df000304 	addi	fp,sp,12
800001d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
800001d8:	000531fa 	rdctl	r2,exception
800001dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
800001e0:	e0bfff17 	ldw	r2,-4(fp)
800001e4:	1004d0ba 	srli	r2,r2,2
800001e8:	108007cc 	andi	r2,r2,31
800001ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
800001f0:	0005333a 	rdctl	r2,badaddr
800001f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
800001f8:	d0a78317 	ldw	r2,-25076(gp)
800001fc:	10000726 	beq	r2,zero,8000021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
80000200:	d0a78317 	ldw	r2,-25076(gp)
80000204:	e0ffff17 	ldw	r3,-4(fp)
80000208:	e1bffe17 	ldw	r6,-8(fp)
8000020c:	e17ffd17 	ldw	r5,-12(fp)
80000210:	1809883a 	mov	r4,r3
80000214:	103ee83a 	callr	r2
80000218:	00000206 	br	80000224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
8000021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
80000220:	0005883a 	mov	r2,zero
}
80000224:	e037883a 	mov	sp,fp
80000228:	dfc00117 	ldw	ra,4(sp)
8000022c:	df000017 	ldw	fp,0(sp)
80000230:	dec00204 	addi	sp,sp,8
80000234:	f800283a 	ret

Disassembly of section .text:

80000238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
80000238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
8000023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
80000240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
80000244:	00bffd16 	blt	zero,r2,8000023c <_gp+0xfffcf4c8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80000248:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
8000024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
80000250:	06a000f4 	movhi	gp,32771
    ori gp, gp, %lo(_gp)
80000254:	d6835d14 	ori	gp,gp,3444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80000258:	00a000b4 	movhi	r2,32770
    ori r2, r2, %lo(__bss_start)
8000025c:	10aad014 	ori	r2,r2,43840

    movhi r3, %hi(__bss_end)
80000260:	00e000b4 	movhi	r3,32770
    ori r3, r3, %lo(__bss_end)
80000264:	18eb3114 	ori	r3,r3,44228

    beq r2, r3, 1f
80000268:	10c00326 	beq	r2,r3,80000278 <_start+0x40>

0:
    stw zero, (r2)
8000026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
80000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80000274:	10fffd36 	bltu	r2,r3,8000026c <_gp+0xfffcf4f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
80000278:	001fe100 	call	8001fe10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
8000027c:	001ffa40 	call	8001ffa4 <alt_main>

80000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80000280:	003fff06 	br	80000280 <_gp+0xfffcf50c>

80000284 <ad9144_spi_read>:
 * @brief ad9144_spi_read
 *******************************************************************************/
int32_t ad9144_spi_read(struct ad9144_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
80000284:	defff904 	addi	sp,sp,-28
80000288:	dfc00615 	stw	ra,24(sp)
8000028c:	df000515 	stw	fp,20(sp)
80000290:	df000504 	addi	fp,sp,20
80000294:	e13ffd15 	stw	r4,-12(fp)
80000298:	2805883a 	mov	r2,r5
8000029c:	e1bffb15 	stw	r6,-20(fp)
800002a0:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
800002a4:	e0bffc0b 	ldhu	r2,-16(fp)
800002a8:	1004d23a 	srli	r2,r2,8
800002ac:	1007883a 	mov	r3,r2
800002b0:	00bfe004 	movi	r2,-128
800002b4:	1884b03a 	or	r2,r3,r2
800002b8:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
800002bc:	e0bffc0b 	ldhu	r2,-16(fp)
800002c0:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
800002c4:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
800002c8:	e0bffd17 	ldw	r2,-12(fp)
800002cc:	10800017 	ldw	r2,0(r2)
800002d0:	e0fffe44 	addi	r3,fp,-7
800002d4:	018000c4 	movi	r6,3
800002d8:	180b883a 	mov	r5,r3
800002dc:	1009883a 	mov	r4,r2
800002e0:	0007d400 	call	80007d40 <spi_write_and_read>
800002e4:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
800002e8:	e0fffec3 	ldbu	r3,-5(fp)
800002ec:	e0bffb17 	ldw	r2,-20(fp)
800002f0:	10c00005 	stb	r3,0(r2)

	return ret;
800002f4:	e0bfff17 	ldw	r2,-4(fp)
}
800002f8:	e037883a 	mov	sp,fp
800002fc:	dfc00117 	ldw	ra,4(sp)
80000300:	df000017 	ldw	fp,0(sp)
80000304:	dec00204 	addi	sp,sp,8
80000308:	f800283a 	ret

8000030c <ad9144_spi_write>:
 * @brief ad9144_spi_write
 *******************************************************************************/
int32_t ad9144_spi_write(struct ad9144_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
8000030c:	defff904 	addi	sp,sp,-28
80000310:	dfc00615 	stw	ra,24(sp)
80000314:	df000515 	stw	fp,20(sp)
80000318:	df000504 	addi	fp,sp,20
8000031c:	e13ffd15 	stw	r4,-12(fp)
80000320:	2805883a 	mov	r2,r5
80000324:	3007883a 	mov	r3,r6
80000328:	e0bffc0d 	sth	r2,-16(fp)
8000032c:	1805883a 	mov	r2,r3
80000330:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
80000334:	e0bffc0b 	ldhu	r2,-16(fp)
80000338:	1004d23a 	srli	r2,r2,8
8000033c:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
80000340:	e0bffc0b 	ldhu	r2,-16(fp)
80000344:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
80000348:	e0bffb03 	ldbu	r2,-20(fp)
8000034c:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
80000350:	e0bffd17 	ldw	r2,-12(fp)
80000354:	10800017 	ldw	r2,0(r2)
80000358:	e0fffe44 	addi	r3,fp,-7
8000035c:	018000c4 	movi	r6,3
80000360:	180b883a 	mov	r5,r3
80000364:	1009883a 	mov	r4,r2
80000368:	0007d400 	call	80007d40 <spi_write_and_read>
8000036c:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
80000370:	e0bfff17 	ldw	r2,-4(fp)
}
80000374:	e037883a 	mov	sp,fp
80000378:	dfc00117 	ldw	ra,4(sp)
8000037c:	df000017 	ldw	fp,0(sp)
80000380:	dec00204 	addi	sp,sp,8
80000384:	f800283a 	ret

80000388 <ad9144_spi_check_status>:
 *******************************************************************************/
int32_t ad9144_spi_check_status(struct ad9144_dev *dev,
				uint16_t reg_addr,
				uint8_t reg_mask,
				uint8_t exp_reg_data)
{
80000388:	defff904 	addi	sp,sp,-28
8000038c:	dfc00615 	stw	ra,24(sp)
80000390:	df000515 	stw	fp,20(sp)
80000394:	df000504 	addi	fp,sp,20
80000398:	e13ffe15 	stw	r4,-8(fp)
8000039c:	2805883a 	mov	r2,r5
800003a0:	3009883a 	mov	r4,r6
800003a4:	3807883a 	mov	r3,r7
800003a8:	e0bffd0d 	sth	r2,-12(fp)
800003ac:	2005883a 	mov	r2,r4
800003b0:	e0bffc05 	stb	r2,-16(fp)
800003b4:	1805883a 	mov	r2,r3
800003b8:	e0bffb05 	stb	r2,-20(fp)
	uint16_t timeout = 0;
800003bc:	e03fff8d 	sth	zero,-2(fp)
	uint8_t status = 0;
800003c0:	e03fff45 	stb	zero,-3(fp)
	do {
		ad9144_spi_read(dev,
800003c4:	e0bffd0b 	ldhu	r2,-12(fp)
800003c8:	e0ffff44 	addi	r3,fp,-3
800003cc:	180d883a 	mov	r6,r3
800003d0:	100b883a 	mov	r5,r2
800003d4:	e13ffe17 	ldw	r4,-8(fp)
800003d8:	00002840 	call	80000284 <ad9144_spi_read>
				reg_addr,
				&status);
		if ((status & reg_mask) == exp_reg_data) {
800003dc:	e0bfff43 	ldbu	r2,-3(fp)
800003e0:	e0fffc03 	ldbu	r3,-16(fp)
800003e4:	1884703a 	and	r2,r3,r2
800003e8:	e0fffb03 	ldbu	r3,-20(fp)
800003ec:	10803fcc 	andi	r2,r2,255
800003f0:	1880021e 	bne	r3,r2,800003fc <ad9144_spi_check_status+0x74>
			return 0;
800003f4:	0005883a 	mov	r2,zero
800003f8:	00000906 	br	80000420 <ad9144_spi_check_status+0x98>
		} else {
			timeout++;
800003fc:	e0bfff8b 	ldhu	r2,-2(fp)
80000400:	10800044 	addi	r2,r2,1
80000404:	e0bfff8d 	sth	r2,-2(fp)
			mdelay(1);
80000408:	0100fa04 	movi	r4,1000
8000040c:	00205040 	call	80020504 <usleep>
		}
	} while(timeout < 100);
80000410:	e0bfff8b 	ldhu	r2,-2(fp)
80000414:	10801930 	cmpltui	r2,r2,100
80000418:	103fea1e 	bne	r2,zero,800003c4 <_gp+0xfffcf650>

	return -1;
8000041c:	00bfffc4 	movi	r2,-1
}
80000420:	e037883a 	mov	sp,fp
80000424:	dfc00117 	ldw	ra,4(sp)
80000428:	df000017 	ldw	fp,0(sp)
8000042c:	dec00204 	addi	sp,sp,8
80000430:	f800283a 	ret

80000434 <ad9144_spi_write_seq>:
	uint16_t val;
};

int32_t ad9144_spi_write_seq(struct ad9144_dev *dev,
	const struct ad9144_reg_seq *seq, uint32_t num)
{
80000434:	defffa04 	addi	sp,sp,-24
80000438:	dfc00515 	stw	ra,20(sp)
8000043c:	df000415 	stw	fp,16(sp)
80000440:	df000404 	addi	fp,sp,16
80000444:	e13ffe15 	stw	r4,-8(fp)
80000448:	e17ffd15 	stw	r5,-12(fp)
8000044c:	e1bffc15 	stw	r6,-16(fp)
	int32_t ret = 0;
80000450:	e03fff15 	stw	zero,-4(fp)

	while (num) {
80000454:	00001406 	br	800004a8 <ad9144_spi_write_seq+0x74>
		ret |= ad9144_spi_write(dev, seq->reg, seq->val);
80000458:	e0bffd17 	ldw	r2,-12(fp)
8000045c:	1080000b 	ldhu	r2,0(r2)
80000460:	10ffffcc 	andi	r3,r2,65535
80000464:	e0bffd17 	ldw	r2,-12(fp)
80000468:	1080008b 	ldhu	r2,2(r2)
8000046c:	10803fcc 	andi	r2,r2,255
80000470:	100d883a 	mov	r6,r2
80000474:	180b883a 	mov	r5,r3
80000478:	e13ffe17 	ldw	r4,-8(fp)
8000047c:	000030c0 	call	8000030c <ad9144_spi_write>
80000480:	1007883a 	mov	r3,r2
80000484:	e0bfff17 	ldw	r2,-4(fp)
80000488:	10c4b03a 	or	r2,r2,r3
8000048c:	e0bfff15 	stw	r2,-4(fp)
		num--;
80000490:	e0bffc17 	ldw	r2,-16(fp)
80000494:	10bfffc4 	addi	r2,r2,-1
80000498:	e0bffc15 	stw	r2,-16(fp)
		seq++;
8000049c:	e0bffd17 	ldw	r2,-12(fp)
800004a0:	10800104 	addi	r2,r2,4
800004a4:	e0bffd15 	stw	r2,-12(fp)
	while (num) {
800004a8:	e0bffc17 	ldw	r2,-16(fp)
800004ac:	103fea1e 	bne	r2,zero,80000458 <_gp+0xfffcf6e4>
	}

	return 0;
800004b0:	0005883a 	mov	r2,zero
}
800004b4:	e037883a 	mov	sp,fp
800004b8:	dfc00117 	ldw	ra,4(sp)
800004bc:	df000017 	ldw	fp,0(sp)
800004c0:	dec00204 	addi	sp,sp,8
800004c4:	f800283a 	ret

800004c8 <ad9144_setup_jesd204_link>:
	{ 0x2a0, 0x06 },
};

int32_t ad9144_setup_jesd204_link(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
800004c8:	defff804 	addi	sp,sp,-32
800004cc:	dfc00715 	stw	ra,28(sp)
800004d0:	df000615 	stw	fp,24(sp)
800004d4:	df000604 	addi	fp,sp,24
800004d8:	e13ffb15 	stw	r4,-20(fp)
800004dc:	e17ffa15 	stw	r5,-24(fp)
	const struct ad9144_jesd204_link_mode *link_mode = NULL;
800004e0:	e03fff15 	stw	zero,-4(fp)
	unsigned int lane_mask;
	unsigned int val;
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
800004e4:	e03ffd15 	stw	zero,-12(fp)
800004e8:	00001406 	br	8000053c <ad9144_setup_jesd204_link+0x74>
		if (ad9144_jesd204_link_modes[i].id == init_param->jesd204_mode) {
800004ec:	e0bffd17 	ldw	r2,-12(fp)
800004f0:	10c00164 	muli	r3,r2,5
800004f4:	00a000b4 	movhi	r2,32770
800004f8:	1885883a 	add	r2,r3,r2
800004fc:	10d37603 	ldbu	r3,19928(r2)
80000500:	e0bffa17 	ldw	r2,-24(fp)
80000504:	10801703 	ldbu	r2,92(r2)
80000508:	18c03fcc 	andi	r3,r3,255
8000050c:	10803fcc 	andi	r2,r2,255
80000510:	1880071e 	bne	r3,r2,80000530 <ad9144_setup_jesd204_link+0x68>
			link_mode = &ad9144_jesd204_link_modes[i];
80000514:	e0bffd17 	ldw	r2,-12(fp)
80000518:	10c00164 	muli	r3,r2,5
8000051c:	00a000b4 	movhi	r2,32770
80000520:	10937604 	addi	r2,r2,19928
80000524:	1885883a 	add	r2,r3,r2
80000528:	e0bfff15 	stw	r2,-4(fp)
			break;
8000052c:	00000606 	br	80000548 <ad9144_setup_jesd204_link+0x80>
	for (i = 0; i < ARRAY_SIZE(ad9144_jesd204_link_modes); i++) {
80000530:	e0bffd17 	ldw	r2,-12(fp)
80000534:	10800044 	addi	r2,r2,1
80000538:	e0bffd15 	stw	r2,-12(fp)
8000053c:	e0bffd17 	ldw	r2,-12(fp)
80000540:	108002b0 	cmpltui	r2,r2,10
80000544:	103fe91e 	bne	r2,zero,800004ec <_gp+0xfffcf778>
		}
	}

	if (!link_mode)
80000548:	e0bfff17 	ldw	r2,-4(fp)
8000054c:	1000021e 	bne	r2,zero,80000558 <ad9144_setup_jesd204_link+0x90>
		return -1;
80000550:	00bfffc4 	movi	r2,-1
80000554:	0000a206 	br	800007e0 <ad9144_setup_jesd204_link+0x318>

	lane_mask = (1 << link_mode->L) - 1;
80000558:	e0bfff17 	ldw	r2,-4(fp)
8000055c:	10800083 	ldbu	r2,2(r2)
80000560:	10803fcc 	andi	r2,r2,255
80000564:	00c00044 	movi	r3,1
80000568:	1884983a 	sll	r2,r3,r2
8000056c:	10bfffc4 	addi	r2,r2,-1
80000570:	e0bffc15 	stw	r2,-16(fp)

	ad9144_spi_write(dev, REG_ILS_DID, 0x00);
80000574:	000d883a 	mov	r6,zero
80000578:	01411404 	movi	r5,1104
8000057c:	e13ffb17 	ldw	r4,-20(fp)
80000580:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_BID, 0x00);
80000584:	000d883a 	mov	r6,zero
80000588:	01411444 	movi	r5,1105
8000058c:	e13ffb17 	ldw	r4,-20(fp)
80000590:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_LID0, 0x00);
80000594:	000d883a 	mov	r6,zero
80000598:	01411484 	movi	r5,1106
8000059c:	e13ffb17 	ldw	r4,-20(fp)
800005a0:	000030c0 	call	8000030c <ad9144_spi_write>

	val = link_mode->L - 1;
800005a4:	e0bfff17 	ldw	r2,-4(fp)
800005a8:	10800083 	ldbu	r2,2(r2)
800005ac:	10803fcc 	andi	r2,r2,255
800005b0:	10bfffc4 	addi	r2,r2,-1
800005b4:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_scrambling)
800005b8:	e0bffa17 	ldw	r2,-24(fp)
800005bc:	10801783 	ldbu	r2,94(r2)
800005c0:	10803fcc 	andi	r2,r2,255
800005c4:	10000326 	beq	r2,zero,800005d4 <ad9144_setup_jesd204_link+0x10c>
		val |= 0x80;
800005c8:	e0bffe17 	ldw	r2,-8(fp)
800005cc:	10802014 	ori	r2,r2,128
800005d0:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_SCR_L, val);
800005d4:	e0bffe17 	ldw	r2,-8(fp)
800005d8:	10803fcc 	andi	r2,r2,255
800005dc:	100d883a 	mov	r6,r2
800005e0:	014114c4 	movi	r5,1107
800005e4:	e13ffb17 	ldw	r4,-20(fp)
800005e8:	000030c0 	call	8000030c <ad9144_spi_write>

	val = link_mode->F - 1;
800005ec:	e0bfff17 	ldw	r2,-4(fp)
800005f0:	108000c3 	ldbu	r2,3(r2)
800005f4:	10803fcc 	andi	r2,r2,255
800005f8:	10bfffc4 	addi	r2,r2,-1
800005fc:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_F, val);
80000600:	e0bffe17 	ldw	r2,-8(fp)
80000604:	10803fcc 	andi	r2,r2,255
80000608:	100d883a 	mov	r6,r2
8000060c:	01411504 	movi	r5,1108
80000610:	e13ffb17 	ldw	r4,-20(fp)
80000614:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_K, 0x1f);
80000618:	018007c4 	movi	r6,31
8000061c:	01411544 	movi	r5,1109
80000620:	e13ffb17 	ldw	r4,-20(fp)
80000624:	000030c0 	call	8000030c <ad9144_spi_write>

	val = link_mode->M - 1;
80000628:	e0bfff17 	ldw	r2,-4(fp)
8000062c:	10800043 	ldbu	r2,1(r2)
80000630:	10803fcc 	andi	r2,r2,255
80000634:	10bfffc4 	addi	r2,r2,-1
80000638:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_M, val);
8000063c:	e0bffe17 	ldw	r2,-8(fp)
80000640:	10803fcc 	andi	r2,r2,255
80000644:	100d883a 	mov	r6,r2
80000648:	01411584 	movi	r5,1110
8000064c:	e13ffb17 	ldw	r4,-20(fp)
80000650:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_ILS_CS_N, 0x0f); // 16 bits per sample
80000654:	018003c4 	movi	r6,15
80000658:	014115c4 	movi	r5,1111
8000065c:	e13ffb17 	ldw	r4,-20(fp)
80000660:	000030c0 	call	8000030c <ad9144_spi_write>

	val = 0x0f; // 16 bits per sample
80000664:	008003c4 	movi	r2,15
80000668:	e0bffe15 	stw	r2,-8(fp)
	if (init_param->jesd204_subclass == 1)
8000066c:	e0bffa17 	ldw	r2,-24(fp)
80000670:	10801743 	ldbu	r2,93(r2)
80000674:	10803fcc 	andi	r2,r2,255
80000678:	10800058 	cmpnei	r2,r2,1
8000067c:	1000031e 	bne	r2,zero,8000068c <ad9144_setup_jesd204_link+0x1c4>
		val |= 0x20;
80000680:	e0bffe17 	ldw	r2,-8(fp)
80000684:	10800814 	ori	r2,r2,32
80000688:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_NP, val);
8000068c:	e0bffe17 	ldw	r2,-8(fp)
80000690:	10803fcc 	andi	r2,r2,255
80000694:	100d883a 	mov	r6,r2
80000698:	01411604 	movi	r5,1112
8000069c:	e13ffb17 	ldw	r4,-20(fp)
800006a0:	000030c0 	call	8000030c <ad9144_spi_write>

	val = link_mode->S - 1;
800006a4:	e0bfff17 	ldw	r2,-4(fp)
800006a8:	10800103 	ldbu	r2,4(r2)
800006ac:	10803fcc 	andi	r2,r2,255
800006b0:	10bfffc4 	addi	r2,r2,-1
800006b4:	e0bffe15 	stw	r2,-8(fp)
	val |= 0x20; /* JESD204 version B */
800006b8:	e0bffe17 	ldw	r2,-8(fp)
800006bc:	10800814 	ori	r2,r2,32
800006c0:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_S, val);
800006c4:	e0bffe17 	ldw	r2,-8(fp)
800006c8:	10803fcc 	andi	r2,r2,255
800006cc:	100d883a 	mov	r6,r2
800006d0:	01411644 	movi	r5,1113
800006d4:	e13ffb17 	ldw	r4,-20(fp)
800006d8:	000030c0 	call	8000030c <ad9144_spi_write>

	val = link_mode->F == 0 ? 0x80 : 0x00;
800006dc:	e0bfff17 	ldw	r2,-4(fp)
800006e0:	108000c3 	ldbu	r2,3(r2)
800006e4:	10803fcc 	andi	r2,r2,255
800006e8:	1000021e 	bne	r2,zero,800006f4 <ad9144_setup_jesd204_link+0x22c>
800006ec:	00802004 	movi	r2,128
800006f0:	00000106 	br	800006f8 <ad9144_setup_jesd204_link+0x230>
800006f4:	0005883a 	mov	r2,zero
800006f8:	e0bffe15 	stw	r2,-8(fp)
	ad9144_spi_write(dev, REG_ILS_HD_CF, val);
800006fc:	e0bffe17 	ldw	r2,-8(fp)
80000700:	10803fcc 	andi	r2,r2,255
80000704:	100d883a 	mov	r6,r2
80000708:	01411684 	movi	r5,1114
8000070c:	e13ffb17 	ldw	r4,-20(fp)
80000710:	000030c0 	call	8000030c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_LANEDESKEW, lane_mask);
80000714:	e0bffc17 	ldw	r2,-16(fp)
80000718:	10803fcc 	andi	r2,r2,255
8000071c:	100d883a 	mov	r6,r2
80000720:	01411b04 	movi	r5,1132
80000724:	e13ffb17 	ldw	r4,-20(fp)
80000728:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CTRLREG1, link_mode->F);
8000072c:	e0bfff17 	ldw	r2,-4(fp)
80000730:	108000c3 	ldbu	r2,3(r2)
80000734:	10803fcc 	andi	r2,r2,255
80000738:	100d883a 	mov	r6,r2
8000073c:	01411d84 	movi	r5,1142
80000740:	e13ffb17 	ldw	r4,-20(fp)
80000744:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LANEENABLE, lane_mask);
80000748:	e0bffc17 	ldw	r2,-16(fp)
8000074c:	10803fcc 	andi	r2,r2,255
80000750:	100d883a 	mov	r6,r2
80000754:	01411f44 	movi	r5,1149
80000758:	e13ffb17 	ldw	r4,-20(fp)
8000075c:	000030c0 	call	8000030c <ad9144_spi_write>
	 * JESD204 standard the pulse length should be two frame clock cycles.
	 *
	 * 1 PCLK cycle = 4 octets
	 *   => SYNC~ pulse length = 2 * octets_per_frame / 4
	 */
	switch (link_mode->F) {
80000760:	e0bfff17 	ldw	r2,-4(fp)
80000764:	108000c3 	ldbu	r2,3(r2)
80000768:	10803fcc 	andi	r2,r2,255
8000076c:	10c00060 	cmpeqi	r3,r2,1
80000770:	1800031e 	bne	r3,zero,80000780 <ad9144_setup_jesd204_link+0x2b8>
80000774:	108000a0 	cmpeqi	r2,r2,2
80000778:	1000031e 	bne	r2,zero,80000788 <ad9144_setup_jesd204_link+0x2c0>
8000077c:	00000506 	br	80000794 <ad9144_setup_jesd204_link+0x2cc>
	case 1:
		/* 0.5 PCLK cycles */
		val = 0x0;
80000780:	e03ffe15 	stw	zero,-8(fp)
		break;
80000784:	00000606 	br	800007a0 <ad9144_setup_jesd204_link+0x2d8>
	case 2:
		/* 1 PCLK cycle */
		val = 0x1;
80000788:	00800044 	movi	r2,1
8000078c:	e0bffe15 	stw	r2,-8(fp)
		break;
80000790:	00000306 	br	800007a0 <ad9144_setup_jesd204_link+0x2d8>
	default:
		/* 2 PCLK cycles */
		val = 0x2;
80000794:	00800084 	movi	r2,2
80000798:	e0bffe15 	stw	r2,-8(fp)
		break;
8000079c:	0001883a 	nop
	}
	ad9144_spi_write(dev, REG_SYNCB_GEN_1, val << 4);
800007a0:	e0bffe17 	ldw	r2,-8(fp)
800007a4:	1004913a 	slli	r2,r2,4
800007a8:	10803fcc 	andi	r2,r2,255
800007ac:	100d883a 	mov	r6,r2
800007b0:	0140c484 	movi	r5,786
800007b4:	e13ffb17 	ldw	r4,-20(fp)
800007b8:	000030c0 	call	8000030c <ad9144_spi_write>

	dev->num_converters = link_mode->M;
800007bc:	e0bfff17 	ldw	r2,-4(fp)
800007c0:	10c00043 	ldbu	r3,1(r2)
800007c4:	e0bffb17 	ldw	r2,-20(fp)
800007c8:	10c00105 	stb	r3,4(r2)
	dev->num_lanes = link_mode->L;
800007cc:	e0bfff17 	ldw	r2,-4(fp)
800007d0:	10c00083 	ldbu	r3,2(r2)
800007d4:	e0bffb17 	ldw	r2,-20(fp)
800007d8:	10c00145 	stb	r3,5(r2)

	return 0;
800007dc:	0005883a 	mov	r2,zero
}
800007e0:	e037883a 	mov	sp,fp
800007e4:	dfc00117 	ldw	ra,4(sp)
800007e8:	df000017 	ldw	fp,0(sp)
800007ec:	dec00204 	addi	sp,sp,8
800007f0:	f800283a 	ret

800007f4 <ad9144_pll_setup>:
	{ 0x1c4, 0x7e },
};

static int32_t ad9144_pll_setup(struct ad9144_dev *dev,
				const struct ad9144_init_param *init_param)
{
800007f4:	defff404 	addi	sp,sp,-48
800007f8:	dfc00b15 	stw	ra,44(sp)
800007fc:	df000a15 	stw	fp,40(sp)
80000800:	df000a04 	addi	fp,sp,40
80000804:	e13ff715 	stw	r4,-36(fp)
80000808:	e17ff615 	stw	r5,-40(fp)
	uint32_t fref, fdac;
	uint32_t lo_div_mode;
	uint32_t ref_div_mode = 0;
8000080c:	e03ffd15 	stw	zero,-12(fp)
	uint8_t vco_param[3];
	uint32_t bcount;
	uint32_t fvco;
	int32_t ret;

	fref = init_param->pll_ref_frequency_khz;
80000810:	e0bff617 	ldw	r2,-40(fp)
80000814:	10801a17 	ldw	r2,104(r2)
80000818:	e0bfff15 	stw	r2,-4(fp)
	fdac = init_param->pll_dac_frequency_khz;
8000081c:	e0bff617 	ldw	r2,-40(fp)
80000820:	10801b17 	ldw	r2,108(r2)
80000824:	e0bffb15 	stw	r2,-20(fp)

	if (fref > 1000000 || fref < 35000)
80000828:	e0ffff17 	ldw	r3,-4(fp)
8000082c:	008003f4 	movhi	r2,15
80000830:	10909004 	addi	r2,r2,16960
80000834:	10c00336 	bltu	r2,r3,80000844 <ad9144_pll_setup+0x50>
80000838:	e0bfff17 	ldw	r2,-4(fp)
8000083c:	10a22e28 	cmpgeui	r2,r2,35000
80000840:	1000021e 	bne	r2,zero,8000084c <ad9144_pll_setup+0x58>
		return -1;
80000844:	00bfffc4 	movi	r2,-1
80000848:	00009106 	br	80000a90 <ad9144_pll_setup+0x29c>

	if (fdac > 2800000 || fdac < 420000)
8000084c:	e0fffb17 	ldw	r3,-20(fp)
80000850:	00800af4 	movhi	r2,43
80000854:	10ae6004 	addi	r2,r2,-18048
80000858:	10c00436 	bltu	r2,r3,8000086c <ad9144_pll_setup+0x78>
8000085c:	e0fffb17 	ldw	r3,-20(fp)
80000860:	008001b4 	movhi	r2,6
80000864:	109a27c4 	addi	r2,r2,26783
80000868:	10c00236 	bltu	r2,r3,80000874 <ad9144_pll_setup+0x80>
		return -1;
8000086c:	00bfffc4 	movi	r2,-1
80000870:	00008706 	br	80000a90 <ad9144_pll_setup+0x29c>

	if (fdac >= 1500000)
80000874:	e0fffb17 	ldw	r3,-20(fp)
80000878:	008005f4 	movhi	r2,23
8000087c:	10b8d7c4 	addi	r2,r2,-7329
80000880:	10c0032e 	bgeu	r2,r3,80000890 <ad9144_pll_setup+0x9c>
		lo_div_mode = 1;
80000884:	00800044 	movi	r2,1
80000888:	e0bffe15 	stw	r2,-8(fp)
8000088c:	00001006 	br	800008d0 <ad9144_pll_setup+0xdc>
	else if (fdac >= 750000)
80000890:	e0fffb17 	ldw	r3,-20(fp)
80000894:	008002f4 	movhi	r2,11
80000898:	109c6bc4 	addi	r2,r2,29103
8000089c:	10c0032e 	bgeu	r2,r3,800008ac <ad9144_pll_setup+0xb8>
		lo_div_mode = 2;
800008a0:	00800084 	movi	r2,2
800008a4:	e0bffe15 	stw	r2,-8(fp)
800008a8:	00000906 	br	800008d0 <ad9144_pll_setup+0xdc>
	else
		lo_div_mode = 3;
800008ac:	008000c4 	movi	r2,3
800008b0:	e0bffe15 	stw	r2,-8(fp)

	while (fref > 80000) {
800008b4:	00000606 	br	800008d0 <ad9144_pll_setup+0xdc>
		ref_div_mode++;
800008b8:	e0bffd17 	ldw	r2,-12(fp)
800008bc:	10800044 	addi	r2,r2,1
800008c0:	e0bffd15 	stw	r2,-12(fp)
		fref /= 2;
800008c4:	e0bfff17 	ldw	r2,-4(fp)
800008c8:	1004d07a 	srli	r2,r2,1
800008cc:	e0bfff15 	stw	r2,-4(fp)
	while (fref > 80000) {
800008d0:	e0ffff17 	ldw	r3,-4(fp)
800008d4:	00800074 	movhi	r2,1
800008d8:	108e2004 	addi	r2,r2,14464
800008dc:	10fff636 	bltu	r2,r3,800008b8 <_gp+0xfffcfb44>
	}

	fvco = fdac << (lo_div_mode + 1);
800008e0:	e0bffe17 	ldw	r2,-8(fp)
800008e4:	10800044 	addi	r2,r2,1
800008e8:	e0fffb17 	ldw	r3,-20(fp)
800008ec:	1884983a 	sll	r2,r3,r2
800008f0:	e0bffa15 	stw	r2,-24(fp)
	bcount = fdac / (2 * fref);
800008f4:	e0bfff17 	ldw	r2,-4(fp)
800008f8:	1085883a 	add	r2,r2,r2
800008fc:	1007883a 	mov	r3,r2
80000900:	e0bffb17 	ldw	r2,-20(fp)
80000904:	10c5203a 	divu	r2,r2,r3
80000908:	e0bffc15 	stw	r2,-16(fp)
	if (bcount < 6) {
8000090c:	e0bffc17 	ldw	r2,-16(fp)
80000910:	108001a8 	cmpgeui	r2,r2,6
80000914:	1000061e 	bne	r2,zero,80000930 <ad9144_pll_setup+0x13c>
		bcount *= 2;
80000918:	e0bffc17 	ldw	r2,-16(fp)
8000091c:	1085883a 	add	r2,r2,r2
80000920:	e0bffc15 	stw	r2,-16(fp)
		ref_div_mode++;
80000924:	e0bffd17 	ldw	r2,-12(fp)
80000928:	10800044 	addi	r2,r2,1
8000092c:	e0bffd15 	stw	r2,-12(fp)
	}

	if (fvco < 6300000) {
80000930:	e0fffa17 	ldw	r3,-24(fp)
80000934:	00801834 	movhi	r2,96
80000938:	108857c4 	addi	r2,r2,8543
8000093c:	10c00736 	bltu	r2,r3,8000095c <ad9144_pll_setup+0x168>
		vco_param[0] = 0x08;
80000940:	00800204 	movi	r2,8
80000944:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
80000948:	008000c4 	movi	r2,3
8000094c:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x07;
80000950:	008001c4 	movi	r2,7
80000954:	e0bff8c5 	stb	r2,-29(fp)
80000958:	00001106 	br	800009a0 <ad9144_pll_setup+0x1ac>
	} else if (fvco < 7250000) {
8000095c:	e0fffa17 	ldw	r3,-24(fp)
80000960:	00801bf4 	movhi	r2,111
80000964:	10a813c4 	addi	r2,r2,-24497
80000968:	10c00736 	bltu	r2,r3,80000988 <ad9144_pll_setup+0x194>
		vco_param[0] = 0x09;
8000096c:	00800244 	movi	r2,9
80000970:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x03;
80000974:	008000c4 	movi	r2,3
80000978:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
8000097c:	00800184 	movi	r2,6
80000980:	e0bff8c5 	stb	r2,-29(fp)
80000984:	00000606 	br	800009a0 <ad9144_pll_setup+0x1ac>
	} else {
		vco_param[0] = 0x09;
80000988:	00800244 	movi	r2,9
8000098c:	e0bff845 	stb	r2,-31(fp)
		vco_param[1] = 0x13;
80000990:	008004c4 	movi	r2,19
80000994:	e0bff885 	stb	r2,-30(fp)
		vco_param[2] = 0x06;
80000998:	00800184 	movi	r2,6
8000099c:	e0bff8c5 	stb	r2,-29(fp)
	}

	ad9144_spi_write_seq(dev, ad9144_pll_fixed_writes,
800009a0:	01800344 	movi	r6,13
800009a4:	016000b4 	movhi	r5,32770
800009a8:	29539684 	addi	r5,r5,20058
800009ac:	e13ff717 	ldw	r4,-36(fp)
800009b0:	00004340 	call	80000434 <ad9144_spi_write_seq>
		ARRAY_SIZE(ad9144_pll_fixed_writes));

	ad9144_spi_write(dev, REG_DACLOGENCNTRL, lo_div_mode);
800009b4:	e0bffe17 	ldw	r2,-8(fp)
800009b8:	10803fcc 	andi	r2,r2,255
800009bc:	100d883a 	mov	r6,r2
800009c0:	014022c4 	movi	r5,139
800009c4:	e13ff717 	ldw	r4,-36(fp)
800009c8:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACLDOCNTRL1, ref_div_mode);
800009cc:	e0bffd17 	ldw	r2,-12(fp)
800009d0:	10803fcc 	andi	r2,r2,255
800009d4:	100d883a 	mov	r6,r2
800009d8:	01402304 	movi	r5,140
800009dc:	e13ff717 	ldw	r4,-36(fp)
800009e0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACINTEGERWORD0, bcount);
800009e4:	e0bffc17 	ldw	r2,-16(fp)
800009e8:	10803fcc 	andi	r2,r2,255
800009ec:	100d883a 	mov	r6,r2
800009f0:	01402144 	movi	r5,133
800009f4:	e13ff717 	ldw	r4,-36(fp)
800009f8:	000030c0 	call	8000030c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLT5, vco_param[0]);
800009fc:	e0bff843 	ldbu	r2,-31(fp)
80000a00:	10803fcc 	andi	r2,r2,255
80000a04:	100d883a 	mov	r6,r2
80000a08:	01406d44 	movi	r5,437
80000a0c:	e13ff717 	ldw	r4,-36(fp)
80000a10:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLTB, vco_param[1]);
80000a14:	e0bff883 	ldbu	r2,-30(fp)
80000a18:	10803fcc 	andi	r2,r2,255
80000a1c:	100d883a 	mov	r6,r2
80000a20:	01406ec4 	movi	r5,443
80000a24:	e13ff717 	ldw	r4,-36(fp)
80000a28:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DACPLLT18, vco_param[2]);
80000a2c:	e0bff8c3 	ldbu	r2,-29(fp)
80000a30:	10803fcc 	andi	r2,r2,255
80000a34:	100d883a 	mov	r6,r2
80000a38:	01407144 	movi	r5,453
80000a3c:	e13ff717 	ldw	r4,-36(fp)
80000a40:	000030c0 	call	8000030c <ad9144_spi_write>

	ad9144_spi_write(dev, REG_DACPLLCNTRL, 0x10);
80000a44:	01800404 	movi	r6,16
80000a48:	014020c4 	movi	r5,131
80000a4c:	e13ff717 	ldw	r4,-36(fp)
80000a50:	000030c0 	call	8000030c <ad9144_spi_write>

	ret = ad9144_spi_check_status(dev, REG_DACPLLSTATUS, 0x22, 0x22);
80000a54:	01c00884 	movi	r7,34
80000a58:	01800884 	movi	r6,34
80000a5c:	01402104 	movi	r5,132
80000a60:	e13ff717 	ldw	r4,-36(fp)
80000a64:	00003880 	call	80000388 <ad9144_spi_check_status>
80000a68:	e0bff915 	stw	r2,-28(fp)
	if (ret == -1)
80000a6c:	e0bff917 	ldw	r2,-28(fp)
80000a70:	10bfffd8 	cmpnei	r2,r2,-1
80000a74:	1000051e 	bne	r2,zero,80000a8c <ad9144_pll_setup+0x298>
		printf("%s : DAC PLL NOT locked!.\n", __func__);
80000a78:	016000b4 	movhi	r5,32770
80000a7c:	29541d04 	addi	r5,r5,20596
80000a80:	012000b4 	movhi	r4,32770
80000a84:	2113a404 	addi	r4,r4,20112
80000a88:	0010d740 	call	80010d74 <printf>

	return ret;
80000a8c:	e0bff917 	ldw	r2,-28(fp)
}
80000a90:	e037883a 	mov	sp,fp
80000a94:	dfc00117 	ldw	ra,4(sp)
80000a98:	df000017 	ldw	fp,0(sp)
80000a9c:	dec00204 	addi	sp,sp,8
80000aa0:	f800283a 	ret

80000aa4 <ad9144_setup>:
/***************************************************************************//**
 * @brief ad9144_setup
********************************************************************************/
int32_t ad9144_setup(struct ad9144_dev **device,
		     const struct ad9144_init_param *init_param)
{
80000aa4:	defff604 	addi	sp,sp,-40
80000aa8:	dfc00915 	stw	ra,36(sp)
80000aac:	df000815 	stw	fp,32(sp)
80000ab0:	df000804 	addi	fp,sp,32
80000ab4:	e13ff915 	stw	r4,-28(fp)
80000ab8:	e17ff815 	stw	r5,-32(fp)
	uint8_t scratchpad;
	uint32_t val;
	int32_t ret;
	struct ad9144_dev *dev;

	dev = (struct ad9144_dev *)malloc(sizeof(*dev));
80000abc:	01000204 	movi	r4,8
80000ac0:	000fc840 	call	8000fc84 <malloc>
80000ac4:	e0bffc15 	stw	r2,-16(fp)
	if (!dev)
80000ac8:	e0bffc17 	ldw	r2,-16(fp)
80000acc:	1000021e 	bne	r2,zero,80000ad8 <ad9144_setup+0x34>
		return -1;
80000ad0:	00bfffc4 	movi	r2,-1
80000ad4:	00015d06 	br	8000104c <ad9144_setup+0x5a8>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
80000ad8:	e0bffc17 	ldw	r2,-16(fp)
80000adc:	e0fff817 	ldw	r3,-32(fp)
80000ae0:	180b883a 	mov	r5,r3
80000ae4:	1009883a 	mov	r4,r2
80000ae8:	0007c480 	call	80007c48 <spi_init>
80000aec:	e0bffb15 	stw	r2,-20(fp)
	if (ret == -1)
80000af0:	e0bffb17 	ldw	r2,-20(fp)
80000af4:	10bfffd8 	cmpnei	r2,r2,-1
80000af8:	1000051e 	bne	r2,zero,80000b10 <ad9144_setup+0x6c>
		printf("%s : Device descriptor failed!\n", __func__);
80000afc:	016000b4 	movhi	r5,32770
80000b00:	29542204 	addi	r5,r5,20616
80000b04:	012000b4 	movhi	r4,32770
80000b08:	2113ab04 	addi	r4,r4,20140
80000b0c:	0010d740 	call	80010d74 <printf>

	// reset
	ad9144_spi_write(dev, REG_SPI_INTFCONFA, SOFTRESET_M | SOFTRESET);
80000b10:	01802044 	movi	r6,129
80000b14:	000b883a 	mov	r5,zero
80000b18:	e13ffc17 	ldw	r4,-16(fp)
80000b1c:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SPI_INTFCONFA, init_param->spi3wire ? 0x00 : 0x18);
80000b20:	e0bff817 	ldw	r2,-32(fp)
80000b24:	10800403 	ldbu	r2,16(r2)
80000b28:	10803fcc 	andi	r2,r2,255
80000b2c:	10000226 	beq	r2,zero,80000b38 <ad9144_setup+0x94>
80000b30:	0005883a 	mov	r2,zero
80000b34:	00000106 	br	80000b3c <ad9144_setup+0x98>
80000b38:	00800604 	movi	r2,24
80000b3c:	100d883a 	mov	r6,r2
80000b40:	000b883a 	mov	r5,zero
80000b44:	e13ffc17 	ldw	r4,-16(fp)
80000b48:	000030c0 	call	8000030c <ad9144_spi_write>
	mdelay(1);
80000b4c:	0100fa04 	movi	r4,1000
80000b50:	00205040 	call	80020504 <usleep>

	ad9144_spi_read(dev, REG_SPI_PRODIDL, &chip_id);
80000b54:	e0bffac4 	addi	r2,fp,-21
80000b58:	100d883a 	mov	r6,r2
80000b5c:	01400104 	movi	r5,4
80000b60:	e13ffc17 	ldw	r4,-16(fp)
80000b64:	00002840 	call	80000284 <ad9144_spi_read>
	if(chip_id != AD9144_CHIP_ID) {
80000b68:	e0bffac3 	ldbu	r2,-21(fp)
80000b6c:	10803fcc 	andi	r2,r2,255
80000b70:	10801120 	cmpeqi	r2,r2,68
80000b74:	10000a1e 	bne	r2,zero,80000ba0 <ad9144_setup+0xfc>
		printf("%s : Invalid CHIP ID (0x%x).\n", __func__, chip_id);
80000b78:	e0bffac3 	ldbu	r2,-21(fp)
80000b7c:	10803fcc 	andi	r2,r2,255
80000b80:	100d883a 	mov	r6,r2
80000b84:	016000b4 	movhi	r5,32770
80000b88:	29542204 	addi	r5,r5,20616
80000b8c:	012000b4 	movhi	r4,32770
80000b90:	2113b304 	addi	r4,r4,20172
80000b94:	0010d740 	call	80010d74 <printf>
		return -1;
80000b98:	00bfffc4 	movi	r2,-1
80000b9c:	00012b06 	br	8000104c <ad9144_setup+0x5a8>
	}

	ad9144_spi_write(dev, REG_SPI_SCRATCHPAD, 0xAD);
80000ba0:	01802b44 	movi	r6,173
80000ba4:	01400284 	movi	r5,10
80000ba8:	e13ffc17 	ldw	r4,-16(fp)
80000bac:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_read(dev, REG_SPI_SCRATCHPAD, &scratchpad);
80000bb0:	e0bffa84 	addi	r2,fp,-22
80000bb4:	100d883a 	mov	r6,r2
80000bb8:	01400284 	movi	r5,10
80000bbc:	e13ffc17 	ldw	r4,-16(fp)
80000bc0:	00002840 	call	80000284 <ad9144_spi_read>
	if(scratchpad != 0xAD) {
80000bc4:	e0bffa83 	ldbu	r2,-22(fp)
80000bc8:	10803fcc 	andi	r2,r2,255
80000bcc:	10802b60 	cmpeqi	r2,r2,173
80000bd0:	10000a1e 	bne	r2,zero,80000bfc <ad9144_setup+0x158>
		printf("%s : scratchpad read-write failed (0x%x)!\n", __func__,
80000bd4:	e0bffa83 	ldbu	r2,-22(fp)
80000bd8:	10803fcc 	andi	r2,r2,255
80000bdc:	100d883a 	mov	r6,r2
80000be0:	016000b4 	movhi	r5,32770
80000be4:	29542204 	addi	r5,r5,20616
80000be8:	012000b4 	movhi	r4,32770
80000bec:	2113bb04 	addi	r4,r4,20204
80000bf0:	0010d740 	call	80010d74 <printf>
		       scratchpad);
		return -1;
80000bf4:	00bfffc4 	movi	r2,-1
80000bf8:	00011406 	br	8000104c <ad9144_setup+0x5a8>
	}

	// power-up and dac initialization
	ad9144_spi_write(dev, REG_PWRCNTRL0, 0x00);	// dacs - power up everything
80000bfc:	000d883a 	mov	r6,zero
80000c00:	01400444 	movi	r5,17
80000c04:	e13ffc17 	ldw	r4,-16(fp)
80000c08:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CLKCFG0, 0x00);	// clocks - power up everything
80000c0c:	000d883a 	mov	r6,zero
80000c10:	01402004 	movi	r5,128
80000c14:	e13ffc17 	ldw	r4,-16(fp)
80000c18:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYSREF_ACTRL0, 0x00);	// sysref - power up/falling edge
80000c1c:	000d883a 	mov	r6,zero
80000c20:	01402044 	movi	r5,129
80000c24:	e13ffc17 	ldw	r4,-16(fp)
80000c28:	000030c0 	call	8000030c <ad9144_spi_write>

	// required device configurations
	ad9144_spi_write_seq(dev, ad9144_required_device_config, ARRAY_SIZE(ad9144_required_device_config));
80000c2c:	01800144 	movi	r6,5
80000c30:	016000b4 	movhi	r5,32770
80000c34:	29538284 	addi	r5,r5,19978
80000c38:	e13ffc17 	ldw	r4,-16(fp)
80000c3c:	00004340 	call	80000434 <ad9144_spi_write_seq>
	ad9144_spi_write_seq(dev, ad9144_optimal_serdes_settings, ARRAY_SIZE(ad9144_optimal_serdes_settings));
80000c40:	018003c4 	movi	r6,15
80000c44:	016000b4 	movhi	r5,32770
80000c48:	29538784 	addi	r5,r5,19998
80000c4c:	e13ffc17 	ldw	r4,-16(fp)
80000c50:	00004340 	call	80000434 <ad9144_spi_write_seq>

	if (init_param->pll_enable)
80000c54:	e0bff817 	ldw	r2,-32(fp)
80000c58:	108019c3 	ldbu	r2,103(r2)
80000c5c:	10803fcc 	andi	r2,r2,255
80000c60:	10000326 	beq	r2,zero,80000c70 <ad9144_setup+0x1cc>
		ad9144_pll_setup(dev, init_param);
80000c64:	e17ff817 	ldw	r5,-32(fp)
80000c68:	e13ffc17 	ldw	r4,-16(fp)
80000c6c:	00007f40 	call	800007f4 <ad9144_pll_setup>

	// digital data path

	switch (init_param->interpolation) {
80000c70:	e0bff817 	ldw	r2,-32(fp)
80000c74:	10800443 	ldbu	r2,17(r2)
80000c78:	10803fcc 	andi	r2,r2,255
80000c7c:	10c00120 	cmpeqi	r3,r2,4
80000c80:	1800071e 	bne	r3,zero,80000ca0 <ad9144_setup+0x1fc>
80000c84:	10c00220 	cmpeqi	r3,r2,8
80000c88:	1800081e 	bne	r3,zero,80000cac <ad9144_setup+0x208>
80000c8c:	108000a0 	cmpeqi	r2,r2,2
80000c90:	10000926 	beq	r2,zero,80000cb8 <ad9144_setup+0x214>
	case 2:
		val = 0x01;
80000c94:	00800044 	movi	r2,1
80000c98:	e0bffd15 	stw	r2,-12(fp)
		break;
80000c9c:	00000806 	br	80000cc0 <ad9144_setup+0x21c>
	case 4:
		val = 0x03;
80000ca0:	008000c4 	movi	r2,3
80000ca4:	e0bffd15 	stw	r2,-12(fp)
		break;
80000ca8:	00000506 	br	80000cc0 <ad9144_setup+0x21c>
	case 8:
		val = 0x04;
80000cac:	00800104 	movi	r2,4
80000cb0:	e0bffd15 	stw	r2,-12(fp)
		break;
80000cb4:	00000206 	br	80000cc0 <ad9144_setup+0x21c>
	default:
		val = 0x00;
80000cb8:	e03ffd15 	stw	zero,-12(fp)
		break;
80000cbc:	0001883a 	nop
	}

	ad9144_spi_write(dev, REG_INTERP_MODE, val);
80000cc0:	e0bffd17 	ldw	r2,-12(fp)
80000cc4:	10803fcc 	andi	r2,r2,255
80000cc8:	100d883a 	mov	r6,r2
80000ccc:	01404484 	movi	r5,274
80000cd0:	e13ffc17 	ldw	r4,-16(fp)
80000cd4:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DATA_FORMAT, 0x00);	// 2's complement
80000cd8:	000d883a 	mov	r6,zero
80000cdc:	01404404 	movi	r5,272
80000ce0:	e13ffc17 	ldw	r4,-16(fp)
80000ce4:	000030c0 	call	8000030c <ad9144_spi_write>

	// transport layer

	ad9144_spi_write(dev, REG_MASTER_PD, 0x00);	// phy - power up
80000ce8:	000d883a 	mov	r6,zero
80000cec:	01408004 	movi	r5,512
80000cf0:	e13ffc17 	ldw	r4,-16(fp)
80000cf4:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PHY_PD, 0x00);	// phy - power up
80000cf8:	000d883a 	mov	r6,zero
80000cfc:	01408044 	movi	r5,513
80000d00:	e13ffc17 	ldw	r4,-16(fp)
80000d04:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x00);	// single link - link 0
80000d08:	000d883a 	mov	r6,zero
80000d0c:	0140c004 	movi	r5,768
80000d10:	e13ffc17 	ldw	r4,-16(fp)
80000d14:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_setup_jesd204_link(dev, init_param);
80000d18:	e17ff817 	ldw	r5,-32(fp)
80000d1c:	e13ffc17 	ldw	r4,-16(fp)
80000d20:	00004c80 	call	800004c8 <ad9144_setup_jesd204_link>

	// physical layer

	if (init_param->lane_rate_kbps < 2880000) {
80000d24:	e0bff817 	ldw	r2,-32(fp)
80000d28:	10c01517 	ldw	r3,84(r2)
80000d2c:	00800b34 	movhi	r2,44
80000d30:	10bc7fc4 	addi	r2,r2,-3585
80000d34:	10c00536 	bltu	r2,r3,80000d4c <ad9144_setup+0x2a8>
		serdes_cdr = 0x0a;
80000d38:	00800284 	movi	r2,10
80000d3c:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x06;
80000d40:	00800184 	movi	r2,6
80000d44:	e0bfff15 	stw	r2,-4(fp)
80000d48:	00000e06 	br	80000d84 <ad9144_setup+0x2e0>
	} else if (init_param->lane_rate_kbps < 5750000) {
80000d4c:	e0bff817 	ldw	r2,-32(fp)
80000d50:	10c01517 	ldw	r3,84(r2)
80000d54:	00801634 	movhi	r2,88
80000d58:	10af3bc4 	addi	r2,r2,-17169
80000d5c:	10c00536 	bltu	r2,r3,80000d74 <ad9144_setup+0x2d0>
		serdes_cdr = 0x08;
80000d60:	00800204 	movi	r2,8
80000d64:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x05;
80000d68:	00800144 	movi	r2,5
80000d6c:	e0bfff15 	stw	r2,-4(fp)
80000d70:	00000406 	br	80000d84 <ad9144_setup+0x2e0>
	} else {
		serdes_cdr = 0x28;
80000d74:	00800a04 	movi	r2,40
80000d78:	e0bffe15 	stw	r2,-8(fp)
		serdes_plldiv = 0x04;
80000d7c:	00800104 	movi	r2,4
80000d80:	e0bfff15 	stw	r2,-4(fp)
	}

	ad9144_spi_write(dev, REG_DEV_CONFIG_9, 0xb7);		// jesd termination
80000d84:	01802dc4 	movi	r6,183
80000d88:	0140aa84 	movi	r5,682
80000d8c:	e13ffc17 	ldw	r4,-16(fp)
80000d90:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_10, 0x87);		// jesd termination
80000d94:	018021c4 	movi	r6,135
80000d98:	0140aac4 	movi	r5,683
80000d9c:	e13ffc17 	ldw	r4,-16(fp)
80000da0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_11, 0xb7);		// jesd termination
80000da4:	01802dc4 	movi	r6,183
80000da8:	0140ac44 	movi	r5,689
80000dac:	e13ffc17 	ldw	r4,-16(fp)
80000db0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_DEV_CONFIG_12, 0x87);		// jesd termination
80000db4:	018021c4 	movi	r6,135
80000db8:	0140ac84 	movi	r5,690
80000dbc:	e13ffc17 	ldw	r4,-16(fp)
80000dc0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK1_CTRLREG0, 0x01);	// input termination calibration
80000dc4:	01800044 	movi	r6,1
80000dc8:	0140a9c4 	movi	r5,679
80000dcc:	e13ffc17 	ldw	r4,-16(fp)
80000dd0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_TERM_BLK2_CTRLREG0, 0x01);	// input termination calibration
80000dd4:	01800044 	movi	r6,1
80000dd8:	0140ab84 	movi	r5,686
80000ddc:	e13ffc17 	ldw	r4,-16(fp)
80000de0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SERDES_SPI_REG, 0x01);	// pclk == qbd master clock
80000de4:	01800044 	movi	r6,1
80000de8:	0140c504 	movi	r5,788
80000dec:	e13ffc17 	ldw	r4,-16(fp)
80000df0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_OPERATING_MODE_REG_0, serdes_cdr);
80000df4:	e0bffe17 	ldw	r2,-8(fp)
80000df8:	10803fcc 	andi	r2,r2,255
80000dfc:	100d883a 	mov	r6,r2
80000e00:	01408c04 	movi	r5,560
80000e04:	e13ffc17 	ldw	r4,-16(fp)
80000e08:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x00);	// cdr reset
80000e0c:	000d883a 	mov	r6,zero
80000e10:	01408184 	movi	r5,518
80000e14:	e13ffc17 	ldw	r4,-16(fp)
80000e18:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CDR_RESET, 0x01);	// cdr reset
80000e1c:	01800044 	movi	r6,1
80000e20:	01408184 	movi	r5,518
80000e24:	e13ffc17 	ldw	r4,-16(fp)
80000e28:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_REF_CLK_DIVIDER_LDO, serdes_plldiv);
80000e2c:	e0bfff17 	ldw	r2,-4(fp)
80000e30:	10803fcc 	andi	r2,r2,255
80000e34:	100d883a 	mov	r6,r2
80000e38:	0140a244 	movi	r5,649
80000e3c:	e13ffc17 	ldw	r4,-16(fp)
80000e40:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x01);	// enable serdes pll
80000e44:	01800044 	movi	r6,1
80000e48:	0140a004 	movi	r5,640
80000e4c:	e13ffc17 	ldw	r4,-16(fp)
80000e50:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNTH_ENABLE_CNTRL, 0x05);	// enable serdes calibration
80000e54:	01800144 	movi	r6,5
80000e58:	0140a004 	movi	r5,640
80000e5c:	e13ffc17 	ldw	r4,-16(fp)
80000e60:	000030c0 	call	8000030c <ad9144_spi_write>
	mdelay(20);
80000e64:	01138804 	movi	r4,20000
80000e68:	00205040 	call	80020504 <usleep>

	ret = ad9144_spi_check_status(dev, REG_PLL_STATUS, 0x01, 0x01);
80000e6c:	01c00044 	movi	r7,1
80000e70:	01800044 	movi	r6,1
80000e74:	0140a044 	movi	r5,641
80000e78:	e13ffc17 	ldw	r4,-16(fp)
80000e7c:	00003880 	call	80000388 <ad9144_spi_check_status>
80000e80:	e0bffb15 	stw	r2,-20(fp)
	if (ret == -1)
80000e84:	e0bffb17 	ldw	r2,-20(fp)
80000e88:	10bfffd8 	cmpnei	r2,r2,-1
80000e8c:	1000051e 	bne	r2,zero,80000ea4 <ad9144_setup+0x400>
		printf("%s : PLL NOT locked!.\n", __func__);
80000e90:	016000b4 	movhi	r5,32770
80000e94:	29542204 	addi	r5,r5,20616
80000e98:	012000b4 	movhi	r4,32770
80000e9c:	2113c604 	addi	r4,r4,20248
80000ea0:	0010d740 	call	80010d74 <printf>

	ad9144_spi_write(dev, REG_EQ_BIAS_REG, 0x62);	// equalizer
80000ea4:	01801884 	movi	r6,98
80000ea8:	01409a04 	movi	r5,616
80000eac:	e13ffc17 	ldw	r4,-16(fp)
80000eb0:	000030c0 	call	8000030c <ad9144_spi_write>

	// data link layer

	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_1, 0x01);	// subclass-1
80000eb4:	01800044 	movi	r6,1
80000eb8:	0140c044 	movi	r5,769
80000ebc:	e13ffc17 	ldw	r4,-16(fp)
80000ec0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_0, 0x00);	// lmfc delay
80000ec4:	000d883a 	mov	r6,zero
80000ec8:	0140c104 	movi	r5,772
80000ecc:	e13ffc17 	ldw	r4,-16(fp)
80000ed0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_DELAY_1, 0x00);	// lmfc delay
80000ed4:	000d883a 	mov	r6,zero
80000ed8:	0140c144 	movi	r5,773
80000edc:	e13ffc17 	ldw	r4,-16(fp)
80000ee0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_0, 0x0a);	// receive buffer delay
80000ee4:	01800284 	movi	r6,10
80000ee8:	0140c184 	movi	r5,774
80000eec:	e13ffc17 	ldw	r4,-16(fp)
80000ef0:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_LMFC_VAR_1, 0x0a);	// receive buffer delay
80000ef4:	01800284 	movi	r6,10
80000ef8:	0140c1c4 	movi	r5,775
80000efc:	e13ffc17 	ldw	r4,-16(fp)
80000f00:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x01);	// sync-oneshot mode
80000f04:	01800044 	movi	r6,1
80000f08:	01400e84 	movi	r5,58
80000f0c:	e13ffc17 	ldw	r4,-16(fp)
80000f10:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0x81);	// sync-enable
80000f14:	01802044 	movi	r6,129
80000f18:	01400e84 	movi	r5,58
80000f1c:	e13ffc17 	ldw	r4,-16(fp)
80000f20:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_SYNC_CTRL, 0xc1);	// sysref-armed
80000f24:	01803044 	movi	r6,193
80000f28:	01400e84 	movi	r5,58
80000f2c:	e13ffc17 	ldw	r4,-16(fp)
80000f30:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
80000f34:	e0bff817 	ldw	r2,-32(fp)
80000f38:	108017c3 	ldbu	r2,95(r2)
80000f3c:	108001cc 	andi	r2,r2,7
80000f40:	1007883a 	mov	r3,r2
			 SRC_LANE1(init_param->jesd204_lane_xbar[1]));
80000f44:	e0bff817 	ldw	r2,-32(fp)
80000f48:	10801803 	ldbu	r2,96(r2)
80000f4c:	10803fcc 	andi	r2,r2,255
80000f50:	100490fa 	slli	r2,r2,3
80000f54:	10800e0c 	andi	r2,r2,56
			 SRC_LANE0(init_param->jesd204_lane_xbar[0]) |
80000f58:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_0_1,
80000f5c:	10803fcc 	andi	r2,r2,255
80000f60:	100d883a 	mov	r6,r2
80000f64:	0140c204 	movi	r5,776
80000f68:	e13ffc17 	ldw	r4,-16(fp)
80000f6c:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
80000f70:	e0bff817 	ldw	r2,-32(fp)
80000f74:	10801843 	ldbu	r2,97(r2)
80000f78:	108001cc 	andi	r2,r2,7
80000f7c:	1007883a 	mov	r3,r2
			 SRC_LANE3(init_param->jesd204_lane_xbar[3]));
80000f80:	e0bff817 	ldw	r2,-32(fp)
80000f84:	10801883 	ldbu	r2,98(r2)
80000f88:	10803fcc 	andi	r2,r2,255
80000f8c:	100490fa 	slli	r2,r2,3
80000f90:	10800e0c 	andi	r2,r2,56
			 SRC_LANE2(init_param->jesd204_lane_xbar[2]) |
80000f94:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_2_3,
80000f98:	10803fcc 	andi	r2,r2,255
80000f9c:	100d883a 	mov	r6,r2
80000fa0:	0140c244 	movi	r5,777
80000fa4:	e13ffc17 	ldw	r4,-16(fp)
80000fa8:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
80000fac:	e0bff817 	ldw	r2,-32(fp)
80000fb0:	108018c3 	ldbu	r2,99(r2)
80000fb4:	108001cc 	andi	r2,r2,7
80000fb8:	1007883a 	mov	r3,r2
			 SRC_LANE5(init_param->jesd204_lane_xbar[5]));
80000fbc:	e0bff817 	ldw	r2,-32(fp)
80000fc0:	10801903 	ldbu	r2,100(r2)
80000fc4:	10803fcc 	andi	r2,r2,255
80000fc8:	100490fa 	slli	r2,r2,3
80000fcc:	10800e0c 	andi	r2,r2,56
			 SRC_LANE4(init_param->jesd204_lane_xbar[4]) |
80000fd0:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_4_5,
80000fd4:	10803fcc 	andi	r2,r2,255
80000fd8:	100d883a 	mov	r6,r2
80000fdc:	0140c284 	movi	r5,778
80000fe0:	e13ffc17 	ldw	r4,-16(fp)
80000fe4:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
80000fe8:	e0bff817 	ldw	r2,-32(fp)
80000fec:	10801943 	ldbu	r2,101(r2)
80000ff0:	108001cc 	andi	r2,r2,7
80000ff4:	1007883a 	mov	r3,r2
			 SRC_LANE7(init_param->jesd204_lane_xbar[7]));
80000ff8:	e0bff817 	ldw	r2,-32(fp)
80000ffc:	10801983 	ldbu	r2,102(r2)
80001000:	10803fcc 	andi	r2,r2,255
80001004:	100490fa 	slli	r2,r2,3
80001008:	10800e0c 	andi	r2,r2,56
			 SRC_LANE6(init_param->jesd204_lane_xbar[6]) |
8000100c:	1884b03a 	or	r2,r3,r2
	ad9144_spi_write(dev, REG_XBAR_LN_6_7,
80001010:	10803fcc 	andi	r2,r2,255
80001014:	100d883a 	mov	r6,r2
80001018:	0140c2c4 	movi	r5,779
8000101c:	e13ffc17 	ldw	r4,-16(fp)
80001020:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_GENERAL_JRX_CTRL_0, 0x01);	// enable link
80001024:	01800044 	movi	r6,1
80001028:	0140c004 	movi	r5,768
8000102c:	e13ffc17 	ldw	r4,-16(fp)
80001030:	000030c0 	call	8000030c <ad9144_spi_write>

	// dac calibration
	ad9144_dac_calibrate(dev);
80001034:	e13ffc17 	ldw	r4,-16(fp)
80001038:	00010600 	call	80001060 <ad9144_dac_calibrate>

	*device = dev;
8000103c:	e0bff917 	ldw	r2,-28(fp)
80001040:	e0fffc17 	ldw	r3,-16(fp)
80001044:	10c00015 	stw	r3,0(r2)

	return ret;
80001048:	e0bffb17 	ldw	r2,-20(fp)
}
8000104c:	e037883a 	mov	sp,fp
80001050:	dfc00117 	ldw	ra,4(sp)
80001054:	df000017 	ldw	fp,0(sp)
80001058:	dec00204 	addi	sp,sp,8
8000105c:	f800283a 	ret

80001060 <ad9144_dac_calibrate>:

int32_t ad9144_dac_calibrate(struct ad9144_dev *dev)
{
80001060:	defffa04 	addi	sp,sp,-24
80001064:	dfc00515 	stw	ra,20(sp)
80001068:	df000415 	stw	fp,16(sp)
8000106c:	df000404 	addi	fp,sp,16
80001070:	e13ffc15 	stw	r4,-16(fp)
	uint32_t dac_mask;
	unsigned int i;
	int ret;

	dac_mask = (1 << dev->num_converters) - 1;
80001074:	e0bffc17 	ldw	r2,-16(fp)
80001078:	10800103 	ldbu	r2,4(r2)
8000107c:	10803fcc 	andi	r2,r2,255
80001080:	00c00044 	movi	r3,1
80001084:	1884983a 	sll	r2,r3,r2
80001088:	10bfffc4 	addi	r2,r2,-1
8000108c:	e0bffe15 	stw	r2,-8(fp)

	/*
	 * DAC calibration sequence as per table 86 AD9144 datasheet Rev B.
	 */
	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x38);	// set calibration clock to 1m
80001090:	01800e04 	movi	r6,56
80001094:	014039c4 	movi	r5,231
80001098:	e13ffc17 	ldw	r4,-16(fp)
8000109c:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INIT, 0xa6);	// use isb reference of 38 to set cal
800010a0:	01802984 	movi	r6,166
800010a4:	01403b44 	movi	r5,237
800010a8:	e13ffc17 	ldw	r4,-16(fp)
800010ac:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_INDX, dac_mask);	// select all active DACs
800010b0:	e0bffe17 	ldw	r2,-8(fp)
800010b4:	10803fcc 	andi	r2,r2,255
800010b8:	100d883a 	mov	r6,r2
800010bc:	01403a04 	movi	r5,232
800010c0:	e13ffc17 	ldw	r4,-16(fp)
800010c4:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x01);	// single cal enable
800010c8:	01800044 	movi	r6,1
800010cc:	01403a44 	movi	r5,233
800010d0:	e13ffc17 	ldw	r4,-16(fp)
800010d4:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_CAL_CTRL, 0x03);	// single cal start
800010d8:	018000c4 	movi	r6,3
800010dc:	01403a44 	movi	r5,233
800010e0:	e13ffc17 	ldw	r4,-16(fp)
800010e4:	000030c0 	call	8000030c <ad9144_spi_write>
	mdelay(10);
800010e8:	0109c404 	movi	r4,10000
800010ec:	00205040 	call	80020504 <usleep>

	for (i = 0; i < dev->num_converters; i++) {
800010f0:	e03fff15 	stw	zero,-4(fp)
800010f4:	00001a06 	br	80001160 <ad9144_dac_calibrate+0x100>
		ad9144_spi_write(dev, REG_CAL_INDX, BIT(i));	// read dac-i
800010f8:	00c00044 	movi	r3,1
800010fc:	e0bfff17 	ldw	r2,-4(fp)
80001100:	1884983a 	sll	r2,r3,r2
80001104:	10803fcc 	andi	r2,r2,255
80001108:	100d883a 	mov	r6,r2
8000110c:	01403a04 	movi	r5,232
80001110:	e13ffc17 	ldw	r4,-16(fp)
80001114:	000030c0 	call	8000030c <ad9144_spi_write>

		ret = ad9144_spi_check_status(dev, REG_CAL_CTRL, 0xc0, 0x80);
80001118:	01c02004 	movi	r7,128
8000111c:	01803004 	movi	r6,192
80001120:	01403a44 	movi	r5,233
80001124:	e13ffc17 	ldw	r4,-16(fp)
80001128:	00003880 	call	80000388 <ad9144_spi_check_status>
8000112c:	e0bffd15 	stw	r2,-12(fp)
		if (ret == -1)
80001130:	e0bffd17 	ldw	r2,-12(fp)
80001134:	10bfffd8 	cmpnei	r2,r2,-1
80001138:	1000061e 	bne	r2,zero,80001154 <ad9144_dac_calibrate+0xf4>
			printf("%s: dac-%d calibration failed!\n", __func__, i);
8000113c:	e1bfff17 	ldw	r6,-4(fp)
80001140:	016000b4 	movhi	r5,32770
80001144:	29542604 	addi	r5,r5,20632
80001148:	012000b4 	movhi	r4,32770
8000114c:	2113cc04 	addi	r4,r4,20272
80001150:	0010d740 	call	80010d74 <printf>
	for (i = 0; i < dev->num_converters; i++) {
80001154:	e0bfff17 	ldw	r2,-4(fp)
80001158:	10800044 	addi	r2,r2,1
8000115c:	e0bfff15 	stw	r2,-4(fp)
80001160:	e0bffc17 	ldw	r2,-16(fp)
80001164:	10800103 	ldbu	r2,4(r2)
80001168:	10803fcc 	andi	r2,r2,255
8000116c:	e0ffff17 	ldw	r3,-4(fp)
80001170:	18bfe136 	bltu	r3,r2,800010f8 <_gp+0xfffd0384>
	}

	ad9144_spi_write(dev, REG_CAL_CLKDIV, 0x30);	// turn off cal clock
80001174:	01800c04 	movi	r6,48
80001178:	014039c4 	movi	r5,231
8000117c:	e13ffc17 	ldw	r4,-16(fp)
80001180:	000030c0 	call	8000030c <ad9144_spi_write>

	return 0;
80001184:	0005883a 	mov	r2,zero
}
80001188:	e037883a 	mov	sp,fp
8000118c:	dfc00117 	ldw	ra,4(sp)
80001190:	df000017 	ldw	fp,0(sp)
80001194:	dec00204 	addi	sp,sp,8
80001198:	f800283a 	ret

8000119c <ad9144_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9144_remove(struct ad9144_dev *dev)
{
8000119c:	defffc04 	addi	sp,sp,-16
800011a0:	dfc00315 	stw	ra,12(sp)
800011a4:	df000215 	stw	fp,8(sp)
800011a8:	df000204 	addi	fp,sp,8
800011ac:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
800011b0:	e0bffe17 	ldw	r2,-8(fp)
800011b4:	10800017 	ldw	r2,0(r2)
800011b8:	1009883a 	mov	r4,r2
800011bc:	0007d0c0 	call	80007d0c <spi_remove>
800011c0:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
800011c4:	e13ffe17 	ldw	r4,-8(fp)
800011c8:	000fc940 	call	8000fc94 <free>

	return ret;
800011cc:	e0bfff17 	ldw	r2,-4(fp)
}
800011d0:	e037883a 	mov	sp,fp
800011d4:	dfc00117 	ldw	ra,4(sp)
800011d8:	df000017 	ldw	fp,0(sp)
800011dc:	dec00204 	addi	sp,sp,8
800011e0:	f800283a 	ret

800011e4 <ad9144_status>:

/***************************************************************************//**
 * @brief ad9144_status - return the status of the JESD interface
 *******************************************************************************/
int32_t ad9144_status(struct ad9144_dev *dev)
{
800011e4:	defffa04 	addi	sp,sp,-24
800011e8:	dfc00515 	stw	ra,20(sp)
800011ec:	df000415 	stw	fp,16(sp)
800011f0:	df000404 	addi	fp,sp,16
800011f4:	e13ffc15 	stw	r4,-16(fp)

	uint8_t status = 0;
800011f8:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
800011fc:	e03fff15 	stw	zero,-4(fp)
	uint32_t lane_mask;

	lane_mask = (1 << dev->num_lanes) - 1;
80001200:	e0bffc17 	ldw	r2,-16(fp)
80001204:	10800143 	ldbu	r2,5(r2)
80001208:	10803fcc 	andi	r2,r2,255
8000120c:	00c00044 	movi	r3,1
80001210:	1884983a 	sll	r2,r3,r2
80001214:	10bfffc4 	addi	r2,r2,-1
80001218:	e0bffe15 	stw	r2,-8(fp)

	// check for jesd status on all lanes
	// failures on top are 100% guaranteed to make subsequent status checks fail

	ad9144_spi_read(dev, REG_CODEGRPSYNCFLG, &status);
8000121c:	e0bffdc4 	addi	r2,fp,-9
80001220:	100d883a 	mov	r6,r2
80001224:	01411c04 	movi	r5,1136
80001228:	e13ffc17 	ldw	r4,-16(fp)
8000122c:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != lane_mask) {
80001230:	e0bffdc3 	ldbu	r2,-9(fp)
80001234:	10803fcc 	andi	r2,r2,255
80001238:	e0fffe17 	ldw	r3,-8(fp)
8000123c:	18800a26 	beq	r3,r2,80001268 <ad9144_status+0x84>
		printf("%s : CGS NOT received (%x)!.\n", __func__, status);
80001240:	e0bffdc3 	ldbu	r2,-9(fp)
80001244:	10803fcc 	andi	r2,r2,255
80001248:	100d883a 	mov	r6,r2
8000124c:	016000b4 	movhi	r5,32770
80001250:	29542c04 	addi	r5,r5,20656
80001254:	012000b4 	movhi	r4,32770
80001258:	2113d404 	addi	r4,r4,20304
8000125c:	0010d740 	call	80010d74 <printf>
		ret = -1;
80001260:	00bfffc4 	movi	r2,-1
80001264:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_INITLANESYNCFLG, &status);
80001268:	e0bffdc4 	addi	r2,fp,-9
8000126c:	100d883a 	mov	r6,r2
80001270:	01411cc4 	movi	r5,1139
80001274:	e13ffc17 	ldw	r4,-16(fp)
80001278:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != lane_mask) {
8000127c:	e0bffdc3 	ldbu	r2,-9(fp)
80001280:	10803fcc 	andi	r2,r2,255
80001284:	e0fffe17 	ldw	r3,-8(fp)
80001288:	18800a26 	beq	r3,r2,800012b4 <ad9144_status+0xd0>
		printf("%s : ILAS NOT received (%x)!.\n", __func__, status);
8000128c:	e0bffdc3 	ldbu	r2,-9(fp)
80001290:	10803fcc 	andi	r2,r2,255
80001294:	100d883a 	mov	r6,r2
80001298:	016000b4 	movhi	r5,32770
8000129c:	29542c04 	addi	r5,r5,20656
800012a0:	012000b4 	movhi	r4,32770
800012a4:	2113dc04 	addi	r4,r4,20336
800012a8:	0010d740 	call	80010d74 <printf>
		ret = -1;
800012ac:	00bfffc4 	movi	r2,-1
800012b0:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_FRAMESYNCFLG, &status);
800012b4:	e0bffdc4 	addi	r2,fp,-9
800012b8:	100d883a 	mov	r6,r2
800012bc:	01411c44 	movi	r5,1137
800012c0:	e13ffc17 	ldw	r4,-16(fp)
800012c4:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != lane_mask) {
800012c8:	e0bffdc3 	ldbu	r2,-9(fp)
800012cc:	10803fcc 	andi	r2,r2,255
800012d0:	e0fffe17 	ldw	r3,-8(fp)
800012d4:	18800a26 	beq	r3,r2,80001300 <ad9144_status+0x11c>
		printf("%s : framer OUT OF SYNC (%x)!.\n", __func__, status);
800012d8:	e0bffdc3 	ldbu	r2,-9(fp)
800012dc:	10803fcc 	andi	r2,r2,255
800012e0:	100d883a 	mov	r6,r2
800012e4:	016000b4 	movhi	r5,32770
800012e8:	29542c04 	addi	r5,r5,20656
800012ec:	012000b4 	movhi	r4,32770
800012f0:	2113e404 	addi	r4,r4,20368
800012f4:	0010d740 	call	80010d74 <printf>
		ret = -1;
800012f8:	00bfffc4 	movi	r2,-1
800012fc:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_GOODCHKSUMFLG, &status);
80001300:	e0bffdc4 	addi	r2,fp,-9
80001304:	100d883a 	mov	r6,r2
80001308:	01411c84 	movi	r5,1138
8000130c:	e13ffc17 	ldw	r4,-16(fp)
80001310:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != lane_mask) {
80001314:	e0bffdc3 	ldbu	r2,-9(fp)
80001318:	10803fcc 	andi	r2,r2,255
8000131c:	e0fffe17 	ldw	r3,-8(fp)
80001320:	18800a26 	beq	r3,r2,8000134c <ad9144_status+0x168>
		printf("%s : check-sum MISMATCH (%x)!.\n", __func__, status);
80001324:	e0bffdc3 	ldbu	r2,-9(fp)
80001328:	10803fcc 	andi	r2,r2,255
8000132c:	100d883a 	mov	r6,r2
80001330:	016000b4 	movhi	r5,32770
80001334:	29542c04 	addi	r5,r5,20656
80001338:	012000b4 	movhi	r4,32770
8000133c:	2113ec04 	addi	r4,r4,20400
80001340:	0010d740 	call	80010d74 <printf>
		ret = -1;
80001344:	00bfffc4 	movi	r2,-1
80001348:	e0bfff15 	stw	r2,-4(fp)
	}

	return ret;
8000134c:	e0bfff17 	ldw	r2,-4(fp)
}
80001350:	e037883a 	mov	sp,fp
80001354:	dfc00117 	ldw	ra,4(sp)
80001358:	df000017 	ldw	fp,0(sp)
8000135c:	dec00204 	addi	sp,sp,8
80001360:	f800283a 	ret

80001364 <ad9144_short_pattern_test>:
/***************************************************************************//**
 * @brief ad9144_short_pattern_test
 *******************************************************************************/
int32_t ad9144_short_pattern_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
80001364:	defff604 	addi	sp,sp,-40
80001368:	dfc00915 	stw	ra,36(sp)
8000136c:	df000815 	stw	fp,32(sp)
80001370:	df000804 	addi	fp,sp,32
80001374:	e13ffb15 	stw	r4,-20(fp)
80001378:	e17ffa15 	stw	r5,-24(fp)

	uint32_t dac = 0;
8000137c:	e03fff15 	stw	zero,-4(fp)
	uint32_t sample = 0;
80001380:	e03ffe15 	stw	zero,-8(fp)
	uint8_t status = 0;
80001384:	e03ffdc5 	stb	zero,-9(fp)
	int32_t ret = 0;
80001388:	e03ffc15 	stw	zero,-16(fp)

	for (dac = 0; dac < dev->num_converters; dac++) {
8000138c:	e03fff15 	stw	zero,-4(fp)
80001390:	00007306 	br	80001560 <ad9144_short_pattern_test+0x1fc>
		for (sample = 0; sample < 4; sample++) {
80001394:	e03ffe15 	stw	zero,-8(fp)
80001398:	00006b06 	br	80001548 <ad9144_short_pattern_test+0x1e4>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x00));
8000139c:	e0bffe17 	ldw	r2,-8(fp)
800013a0:	1004913a 	slli	r2,r2,4
800013a4:	1007883a 	mov	r3,r2
800013a8:	e0bfff17 	ldw	r2,-4(fp)
800013ac:	100490ba 	slli	r2,r2,2
800013b0:	1884b03a 	or	r2,r3,r2
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
800013b4:	10803fcc 	andi	r2,r2,255
800013b8:	100d883a 	mov	r6,r2
800013bc:	0140cb04 	movi	r5,812
800013c0:	e13ffb17 	ldw	r4,-20(fp)
800013c4:	000030c0 	call	8000030c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
					 (init_param->stpl_samples[dac][sample]>>8));
800013c8:	e0fffa17 	ldw	r3,-24(fp)
800013cc:	e0bfff17 	ldw	r2,-4(fp)
800013d0:	100890ba 	slli	r4,r2,2
800013d4:	e0bffe17 	ldw	r2,-8(fp)
800013d8:	2085883a 	add	r2,r4,r2
800013dc:	10800144 	addi	r2,r2,5
800013e0:	100490ba 	slli	r2,r2,2
800013e4:	1885883a 	add	r2,r3,r2
800013e8:	10800017 	ldw	r2,0(r2)
800013ec:	1004d23a 	srli	r2,r2,8
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_2,
800013f0:	10803fcc 	andi	r2,r2,255
800013f4:	100d883a 	mov	r6,r2
800013f8:	0140cb84 	movi	r5,814
800013fc:	e13ffb17 	ldw	r4,-20(fp)
80001400:	000030c0 	call	8000030c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
					 (init_param->stpl_samples[dac][sample]>>0));
80001404:	e0fffa17 	ldw	r3,-24(fp)
80001408:	e0bfff17 	ldw	r2,-4(fp)
8000140c:	100890ba 	slli	r4,r2,2
80001410:	e0bffe17 	ldw	r2,-8(fp)
80001414:	2085883a 	add	r2,r4,r2
80001418:	10800144 	addi	r2,r2,5
8000141c:	100490ba 	slli	r2,r2,2
80001420:	1885883a 	add	r2,r3,r2
80001424:	10800017 	ldw	r2,0(r2)
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_1,
80001428:	10803fcc 	andi	r2,r2,255
8000142c:	100d883a 	mov	r6,r2
80001430:	0140cb44 	movi	r5,813
80001434:	e13ffb17 	ldw	r4,-20(fp)
80001438:	000030c0 	call	8000030c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
8000143c:	e0bffe17 	ldw	r2,-8(fp)
80001440:	1004913a 	slli	r2,r2,4
80001444:	1007883a 	mov	r3,r2
80001448:	e0bfff17 	ldw	r2,-4(fp)
8000144c:	100490ba 	slli	r2,r2,2
80001450:	1884b03a 	or	r2,r3,r2
80001454:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
80001458:	10803fcc 	andi	r2,r2,255
8000145c:	100d883a 	mov	r6,r2
80001460:	0140cb04 	movi	r5,812
80001464:	e13ffb17 	ldw	r4,-20(fp)
80001468:	000030c0 	call	8000030c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x03));
8000146c:	e0bffe17 	ldw	r2,-8(fp)
80001470:	1004913a 	slli	r2,r2,4
80001474:	1007883a 	mov	r3,r2
80001478:	e0bfff17 	ldw	r2,-4(fp)
8000147c:	100490ba 	slli	r2,r2,2
80001480:	1884b03a 	or	r2,r3,r2
80001484:	108000d4 	ori	r2,r2,3
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
80001488:	10803fcc 	andi	r2,r2,255
8000148c:	100d883a 	mov	r6,r2
80001490:	0140cb04 	movi	r5,812
80001494:	e13ffb17 	ldw	r4,-20(fp)
80001498:	000030c0 	call	8000030c <ad9144_spi_write>
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
					 ((sample << 4) | (dac << 2) | 0x01));
8000149c:	e0bffe17 	ldw	r2,-8(fp)
800014a0:	1004913a 	slli	r2,r2,4
800014a4:	1007883a 	mov	r3,r2
800014a8:	e0bfff17 	ldw	r2,-4(fp)
800014ac:	100490ba 	slli	r2,r2,2
800014b0:	1884b03a 	or	r2,r3,r2
800014b4:	10800054 	ori	r2,r2,1
			ad9144_spi_write(dev, REG_SHORT_TPL_TEST_0,
800014b8:	10803fcc 	andi	r2,r2,255
800014bc:	100d883a 	mov	r6,r2
800014c0:	0140cb04 	movi	r5,812
800014c4:	e13ffb17 	ldw	r4,-20(fp)
800014c8:	000030c0 	call	8000030c <ad9144_spi_write>

			ret = ad9144_spi_check_status(dev,
800014cc:	000f883a 	mov	r7,zero
800014d0:	01800044 	movi	r6,1
800014d4:	0140cbc4 	movi	r5,815
800014d8:	e13ffb17 	ldw	r4,-20(fp)
800014dc:	00003880 	call	80000388 <ad9144_spi_check_status>
800014e0:	e0bffc15 	stw	r2,-16(fp)
						      REG_SHORT_TPL_TEST_3,
						      0x01, 0x00);
			if (ret == -1)
800014e4:	e0bffc17 	ldw	r2,-16(fp)
800014e8:	10bfffd8 	cmpnei	r2,r2,-1
800014ec:	1000131e 	bne	r2,zero,8000153c <ad9144_short_pattern_test+0x1d8>
				printf("%s : short-pattern-test mismatch (0x%x, 0x%x 0x%x, 0x%x)!.\n",
800014f0:	e0fffa17 	ldw	r3,-24(fp)
800014f4:	e0bfff17 	ldw	r2,-4(fp)
800014f8:	100890ba 	slli	r4,r2,2
800014fc:	e0bffe17 	ldw	r2,-8(fp)
80001500:	2085883a 	add	r2,r4,r2
80001504:	10800144 	addi	r2,r2,5
80001508:	100490ba 	slli	r2,r2,2
8000150c:	1885883a 	add	r2,r3,r2
80001510:	10800017 	ldw	r2,0(r2)
80001514:	e0fffdc3 	ldbu	r3,-9(fp)
80001518:	d8c00115 	stw	r3,4(sp)
8000151c:	d8800015 	stw	r2,0(sp)
80001520:	e1fffe17 	ldw	r7,-8(fp)
80001524:	e1bfff17 	ldw	r6,-4(fp)
80001528:	016000b4 	movhi	r5,32770
8000152c:	29543004 	addi	r5,r5,20672
80001530:	012000b4 	movhi	r4,32770
80001534:	2113f404 	addi	r4,r4,20432
80001538:	0010d740 	call	80010d74 <printf>
		for (sample = 0; sample < 4; sample++) {
8000153c:	e0bffe17 	ldw	r2,-8(fp)
80001540:	10800044 	addi	r2,r2,1
80001544:	e0bffe15 	stw	r2,-8(fp)
80001548:	e0bffe17 	ldw	r2,-8(fp)
8000154c:	10800130 	cmpltui	r2,r2,4
80001550:	103f921e 	bne	r2,zero,8000139c <_gp+0xfffd0628>
	for (dac = 0; dac < dev->num_converters; dac++) {
80001554:	e0bfff17 	ldw	r2,-4(fp)
80001558:	10800044 	addi	r2,r2,1
8000155c:	e0bfff15 	stw	r2,-4(fp)
80001560:	e0bffb17 	ldw	r2,-20(fp)
80001564:	10800103 	ldbu	r2,4(r2)
80001568:	10803fcc 	andi	r2,r2,255
8000156c:	e0ffff17 	ldw	r3,-4(fp)
80001570:	18bf8836 	bltu	r3,r2,80001394 <_gp+0xfffd0620>
				       __func__, dac, sample,
				       init_param->stpl_samples[dac][sample],
				       status);
		}
	}
	return 0;
80001574:	0005883a 	mov	r2,zero
}
80001578:	e037883a 	mov	sp,fp
8000157c:	dfc00117 	ldw	ra,4(sp)
80001580:	df000017 	ldw	fp,0(sp)
80001584:	dec00204 	addi	sp,sp,8
80001588:	f800283a 	ret

8000158c <ad9144_datapath_prbs_test>:
/***************************************************************************//**
 * @brief ad9144_datapath_prbs_test
 *******************************************************************************/
int32_t ad9144_datapath_prbs_test(struct ad9144_dev *dev,
				  const struct ad9144_init_param *init_param)
{
8000158c:	defffa04 	addi	sp,sp,-24
80001590:	dfc00515 	stw	ra,20(sp)
80001594:	df000415 	stw	fp,16(sp)
80001598:	df000404 	addi	fp,sp,16
8000159c:	e13ffd15 	stw	r4,-12(fp)
800015a0:	e17ffc15 	stw	r5,-16(fp)

	uint8_t status = 0;
800015a4:	e03ffec5 	stb	zero,-5(fp)
	int32_t ret = 0;
800015a8:	e03fff15 	stw	zero,-4(fp)


	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x03));
800015ac:	e0bffc17 	ldw	r2,-16(fp)
800015b0:	10801617 	ldw	r2,88(r2)
800015b4:	100490ba 	slli	r2,r2,2
800015b8:	108000d4 	ori	r2,r2,3
800015bc:	10803fcc 	andi	r2,r2,255
800015c0:	100d883a 	mov	r6,r2
800015c4:	014052c4 	movi	r5,331
800015c8:	e13ffd17 	ldw	r4,-12(fp)
800015cc:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_write(dev, REG_PRBS, ((init_param->prbs_type << 2) | 0x01));
800015d0:	e0bffc17 	ldw	r2,-16(fp)
800015d4:	10801617 	ldw	r2,88(r2)
800015d8:	100490ba 	slli	r2,r2,2
800015dc:	10800054 	ori	r2,r2,1
800015e0:	10803fcc 	andi	r2,r2,255
800015e4:	100d883a 	mov	r6,r2
800015e8:	014052c4 	movi	r5,331
800015ec:	e13ffd17 	ldw	r4,-12(fp)
800015f0:	000030c0 	call	8000030c <ad9144_spi_write>
	mdelay(500);
800015f4:	01000234 	movhi	r4,8
800015f8:	21284804 	addi	r4,r4,-24288
800015fc:	00205040 	call	80020504 <usleep>

	ad9144_spi_write(dev, REG_SPI_PAGEINDX, 0x01);
80001600:	01800044 	movi	r6,1
80001604:	01400204 	movi	r5,8
80001608:	e13ffd17 	ldw	r4,-12(fp)
8000160c:	000030c0 	call	8000030c <ad9144_spi_write>
	ad9144_spi_read(dev, REG_PRBS, &status);
80001610:	e0bffec4 	addi	r2,fp,-5
80001614:	100d883a 	mov	r6,r2
80001618:	014052c4 	movi	r5,331
8000161c:	e13ffd17 	ldw	r4,-12(fp)
80001620:	00002840 	call	80000284 <ad9144_spi_read>
	if ((status & 0xc0) != 0xc0) {
80001624:	e0bffec3 	ldbu	r2,-5(fp)
80001628:	10803fcc 	andi	r2,r2,255
8000162c:	1080300c 	andi	r2,r2,192
80001630:	10803020 	cmpeqi	r2,r2,192
80001634:	10000a1e 	bne	r2,zero,80001660 <ad9144_datapath_prbs_test+0xd4>
		printf("%s : PRBS OUT OF SYNC (%x)!.\n", __func__, status);
80001638:	e0bffec3 	ldbu	r2,-5(fp)
8000163c:	10803fcc 	andi	r2,r2,255
80001640:	100d883a 	mov	r6,r2
80001644:	016000b4 	movhi	r5,32770
80001648:	29543704 	addi	r5,r5,20700
8000164c:	012000b4 	movhi	r4,32770
80001650:	21140304 	addi	r4,r4,20492
80001654:	0010d740 	call	80010d74 <printf>
		ret = -1;
80001658:	00bfffc4 	movi	r2,-1
8000165c:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_I, &status);
80001660:	e0bffec4 	addi	r2,fp,-5
80001664:	100d883a 	mov	r6,r2
80001668:	01405304 	movi	r5,332
8000166c:	e13ffd17 	ldw	r4,-12(fp)
80001670:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != 0x00) {
80001674:	e0bffec3 	ldbu	r2,-5(fp)
80001678:	10803fcc 	andi	r2,r2,255
8000167c:	10000a26 	beq	r2,zero,800016a8 <ad9144_datapath_prbs_test+0x11c>
		printf("%s : PRBS I channel ERRORS (%x)!.\n", __func__,
80001680:	e0bffec3 	ldbu	r2,-5(fp)
80001684:	10803fcc 	andi	r2,r2,255
80001688:	100d883a 	mov	r6,r2
8000168c:	016000b4 	movhi	r5,32770
80001690:	29543704 	addi	r5,r5,20700
80001694:	012000b4 	movhi	r4,32770
80001698:	21140b04 	addi	r4,r4,20524
8000169c:	0010d740 	call	80010d74 <printf>
		       status);
		ret = -1;
800016a0:	00bfffc4 	movi	r2,-1
800016a4:	e0bfff15 	stw	r2,-4(fp)
	}
	ad9144_spi_read(dev, REG_PRBS_ERROR_Q, &status);
800016a8:	e0bffec4 	addi	r2,fp,-5
800016ac:	100d883a 	mov	r6,r2
800016b0:	01405344 	movi	r5,333
800016b4:	e13ffd17 	ldw	r4,-12(fp)
800016b8:	00002840 	call	80000284 <ad9144_spi_read>
	if (status != 0x00) {
800016bc:	e0bffec3 	ldbu	r2,-5(fp)
800016c0:	10803fcc 	andi	r2,r2,255
800016c4:	10000a26 	beq	r2,zero,800016f0 <ad9144_datapath_prbs_test+0x164>
		printf("%s : PRBS Q channel ERRORS (%x)!.\n", __func__,
800016c8:	e0bffec3 	ldbu	r2,-5(fp)
800016cc:	10803fcc 	andi	r2,r2,255
800016d0:	100d883a 	mov	r6,r2
800016d4:	016000b4 	movhi	r5,32770
800016d8:	29543704 	addi	r5,r5,20700
800016dc:	012000b4 	movhi	r4,32770
800016e0:	21141404 	addi	r4,r4,20560
800016e4:	0010d740 	call	80010d74 <printf>
		       status);
		ret = -1;
800016e8:	00bfffc4 	movi	r2,-1
800016ec:	e0bfff15 	stw	r2,-4(fp)
	}

	return ret;
800016f0:	e0bfff17 	ldw	r2,-4(fp)
}
800016f4:	e037883a 	mov	sp,fp
800016f8:	dfc00117 	ldw	ra,4(sp)
800016fc:	df000017 	ldw	fp,0(sp)
80001700:	dec00204 	addi	sp,sp,8
80001704:	f800283a 	ret

80001708 <ad9523_spi_read>:
 * @return registerValue - The register's value or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_read(struct ad9523_dev *dev,
			uint32_t reg_addr,
			uint32_t *reg_data)
{
80001708:	defff904 	addi	sp,sp,-28
8000170c:	dfc00615 	stw	ra,24(sp)
80001710:	df000515 	stw	fp,20(sp)
80001714:	df000504 	addi	fp,sp,20
80001718:	e13ffd15 	stw	r4,-12(fp)
8000171c:	e17ffc15 	stw	r5,-16(fp)
80001720:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
80001724:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	*reg_data = 0;
80001728:	e0bffb17 	ldw	r2,-20(fp)
8000172c:	10000015 	stw	zero,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
80001730:	e03ffec5 	stb	zero,-5(fp)
80001734:	00002606 	br	800017d0 <ad9523_spi_read+0xc8>
		buf[0] = 0x80 | (reg_addr >> 8);
80001738:	e0bffc17 	ldw	r2,-16(fp)
8000173c:	1004d23a 	srli	r2,r2,8
80001740:	1007883a 	mov	r3,r2
80001744:	00bfe004 	movi	r2,-128
80001748:	1884b03a 	or	r2,r3,r2
8000174c:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
80001750:	e0bffc17 	ldw	r2,-16(fp)
80001754:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = 0x00;
80001758:	e03ffe85 	stb	zero,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
8000175c:	e0bffd17 	ldw	r2,-12(fp)
80001760:	10800017 	ldw	r2,0(r2)
80001764:	e0fffe04 	addi	r3,fp,-8
80001768:	018000c4 	movi	r6,3
8000176c:	180b883a 	mov	r5,r3
80001770:	1009883a 	mov	r4,r2
80001774:	0007d400 	call	80007d40 <spi_write_and_read>
80001778:	1007883a 	mov	r3,r2
8000177c:	e0bfff17 	ldw	r2,-4(fp)
80001780:	10c4b03a 	or	r2,r2,r3
80001784:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
80001788:	e0bffc17 	ldw	r2,-16(fp)
8000178c:	10bfffc4 	addi	r2,r2,-1
80001790:	e0bffc15 	stw	r2,-16(fp)
		*reg_data <<= 8;
80001794:	e0bffb17 	ldw	r2,-20(fp)
80001798:	10800017 	ldw	r2,0(r2)
8000179c:	1006923a 	slli	r3,r2,8
800017a0:	e0bffb17 	ldw	r2,-20(fp)
800017a4:	10c00015 	stw	r3,0(r2)
		*reg_data |= buf[2];
800017a8:	e0bffb17 	ldw	r2,-20(fp)
800017ac:	10c00017 	ldw	r3,0(r2)
800017b0:	e0bffe83 	ldbu	r2,-6(fp)
800017b4:	10803fcc 	andi	r2,r2,255
800017b8:	1886b03a 	or	r3,r3,r2
800017bc:	e0bffb17 	ldw	r2,-20(fp)
800017c0:	10c00015 	stw	r3,0(r2)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
800017c4:	e0bffec3 	ldbu	r2,-5(fp)
800017c8:	10800044 	addi	r2,r2,1
800017cc:	e0bffec5 	stb	r2,-5(fp)
800017d0:	e0fffec3 	ldbu	r3,-5(fp)
800017d4:	e0bffc17 	ldw	r2,-16(fp)
800017d8:	1004d43a 	srli	r2,r2,16
800017dc:	18bfd636 	bltu	r3,r2,80001738 <_gp+0xfffd09c4>
	}

	return ret;
800017e0:	e0bfff17 	ldw	r2,-4(fp)
}
800017e4:	e037883a 	mov	sp,fp
800017e8:	dfc00117 	ldw	ra,4(sp)
800017ec:	df000017 	ldw	fp,0(sp)
800017f0:	dec00204 	addi	sp,sp,8
800017f4:	f800283a 	ret

800017f8 <ad9523_spi_write>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_spi_write(struct ad9523_dev *dev,
			 uint32_t reg_addr,
			 uint32_t reg_data)
{
800017f8:	defff904 	addi	sp,sp,-28
800017fc:	dfc00615 	stw	ra,24(sp)
80001800:	df000515 	stw	fp,20(sp)
80001804:	df000504 	addi	fp,sp,20
80001808:	e13ffd15 	stw	r4,-12(fp)
8000180c:	e17ffc15 	stw	r5,-16(fp)
80001810:	e1bffb15 	stw	r6,-20(fp)
	uint8_t buf[3];

	int32_t ret = 0;
80001814:	e03fff15 	stw	zero,-4(fp)
	uint8_t index;

	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
80001818:	e03ffec5 	stb	zero,-5(fp)
8000181c:	00002106 	br	800018a4 <ad9523_spi_write+0xac>
		buf[0] = reg_addr >> 8;
80001820:	e0bffc17 	ldw	r2,-16(fp)
80001824:	1004d23a 	srli	r2,r2,8
80001828:	e0bffe05 	stb	r2,-8(fp)
		buf[1] = reg_addr & 0xFF;
8000182c:	e0bffc17 	ldw	r2,-16(fp)
80001830:	e0bffe45 	stb	r2,-7(fp)
		buf[2] = (reg_data >> ((AD9523_TRANSF_LEN(reg_addr) - index - 1) * 8)) & 0xFF;
80001834:	e0bffc17 	ldw	r2,-16(fp)
80001838:	1006d43a 	srli	r3,r2,16
8000183c:	e0bffec3 	ldbu	r2,-5(fp)
80001840:	1887c83a 	sub	r3,r3,r2
80001844:	00880034 	movhi	r2,8192
80001848:	10bfffc4 	addi	r2,r2,-1
8000184c:	1885883a 	add	r2,r3,r2
80001850:	100490fa 	slli	r2,r2,3
80001854:	e0fffb17 	ldw	r3,-20(fp)
80001858:	1884d83a 	srl	r2,r3,r2
8000185c:	e0bffe85 	stb	r2,-6(fp)
		ret |= spi_write_and_read(dev->spi_desc,
80001860:	e0bffd17 	ldw	r2,-12(fp)
80001864:	10800017 	ldw	r2,0(r2)
80001868:	e0fffe04 	addi	r3,fp,-8
8000186c:	018000c4 	movi	r6,3
80001870:	180b883a 	mov	r5,r3
80001874:	1009883a 	mov	r4,r2
80001878:	0007d400 	call	80007d40 <spi_write_and_read>
8000187c:	1007883a 	mov	r3,r2
80001880:	e0bfff17 	ldw	r2,-4(fp)
80001884:	10c4b03a 	or	r2,r2,r3
80001888:	e0bfff15 	stw	r2,-4(fp)
					  buf,
					  3);
		reg_addr--;
8000188c:	e0bffc17 	ldw	r2,-16(fp)
80001890:	10bfffc4 	addi	r2,r2,-1
80001894:	e0bffc15 	stw	r2,-16(fp)
	for(index = 0; index < AD9523_TRANSF_LEN(reg_addr); index++) {
80001898:	e0bffec3 	ldbu	r2,-5(fp)
8000189c:	10800044 	addi	r2,r2,1
800018a0:	e0bffec5 	stb	r2,-5(fp)
800018a4:	e0fffec3 	ldbu	r3,-5(fp)
800018a8:	e0bffc17 	ldw	r2,-16(fp)
800018ac:	1004d43a 	srli	r2,r2,16
800018b0:	18bfdb36 	bltu	r3,r2,80001820 <_gp+0xfffd0aac>
	}

	return ret;
800018b4:	e0bfff17 	ldw	r2,-4(fp)
}
800018b8:	e037883a 	mov	sp,fp
800018bc:	dfc00117 	ldw	ra,4(sp)
800018c0:	df000017 	ldw	fp,0(sp)
800018c4:	dec00204 	addi	sp,sp,8
800018c8:	f800283a 	ret

800018cc <ad9523_io_update>:
 * @brief Updates the AD9523 configuration
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_io_update(struct ad9523_dev *dev)
{
800018cc:	defffd04 	addi	sp,sp,-12
800018d0:	dfc00215 	stw	ra,8(sp)
800018d4:	df000115 	stw	fp,4(sp)
800018d8:	df000104 	addi	fp,sp,4
800018dc:	e13fff15 	stw	r4,-4(fp)
	return ad9523_spi_write(dev,
800018e0:	01800044 	movi	r6,1
800018e4:	01400074 	movhi	r5,1
800018e8:	29408d04 	addi	r5,r5,564
800018ec:	e13fff17 	ldw	r4,-4(fp)
800018f0:	00017f80 	call	800017f8 <ad9523_spi_write>
				AD9523_IO_UPDATE,
				AD9523_IO_UPDATE_EN);
}
800018f4:	e037883a 	mov	sp,fp
800018f8:	dfc00117 	ldw	ra,4(sp)
800018fc:	df000017 	ldw	fp,0(sp)
80001900:	dec00204 	addi	sp,sp,8
80001904:	f800283a 	ret

80001908 <ad9523_vco_out_map>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_vco_out_map(struct ad9523_dev *dev,
			   uint32_t ch,
			   uint32_t out)
{
80001908:	defff804 	addi	sp,sp,-32
8000190c:	dfc00715 	stw	ra,28(sp)
80001910:	df000615 	stw	fp,24(sp)
80001914:	df000604 	addi	fp,sp,24
80001918:	e13ffc15 	stw	r4,-16(fp)
8000191c:	e17ffb15 	stw	r5,-20(fp)
80001920:	e1bffa15 	stw	r6,-24(fp)
	int32_t ret;
	uint32_t mask;
	uint32_t reg_data;

	switch (ch) {
80001924:	e0bffb17 	ldw	r2,-20(fp)
80001928:	108002a8 	cmpgeui	r2,r2,10
8000192c:	1000771e 	bne	r2,zero,80001b0c <ad9523_vco_out_map+0x204>
80001930:	e0bffb17 	ldw	r2,-20(fp)
80001934:	100690ba 	slli	r3,r2,2
80001938:	00a00034 	movhi	r2,32768
8000193c:	1885883a 	add	r2,r3,r2
80001940:	10865217 	ldw	r2,6472(r2)
80001944:	1000683a 	jmp	r2
80001948:	80001970 	cmpltui	zero,r16,101
8000194c:	80001970 	cmpltui	zero,r16,101
80001950:	80001970 	cmpltui	zero,r16,101
80001954:	80001970 	cmpltui	zero,r16,101
80001958:	800019fc 	xorhi	zero,r16,103
8000195c:	800019fc 	xorhi	zero,r16,103
80001960:	800019fc 	xorhi	zero,r16,103
80001964:	80001a84 	addi	zero,r16,106
80001968:	80001a84 	addi	zero,r16,106
8000196c:	80001a84 	addi	zero,r16,106
	case 0 ... 3:
		ret = ad9523_spi_read(dev,
80001970:	e0bffd04 	addi	r2,fp,-12
80001974:	100d883a 	mov	r6,r2
80001978:	01400074 	movhi	r5,1
8000197c:	29406ec4 	addi	r5,r5,443
80001980:	e13ffc17 	ldw	r4,-16(fp)
80001984:	00017080 	call	80001708 <ad9523_spi_read>
80001988:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
8000198c:	e0bfff17 	ldw	r2,-4(fp)
80001990:	10006016 	blt	r2,zero,80001b14 <ad9523_vco_out_map+0x20c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCXO_SRC_SEL_CH0 << ch;
80001994:	00c00044 	movi	r3,1
80001998:	e0bffb17 	ldw	r2,-20(fp)
8000199c:	1884983a 	sll	r2,r3,r2
800019a0:	e0bffe15 	stw	r2,-8(fp)
		if (out) {
800019a4:	e0bffa17 	ldw	r2,-24(fp)
800019a8:	10000726 	beq	r2,zero,800019c8 <ad9523_vco_out_map+0xc0>
			reg_data |= mask;
800019ac:	e0fffd17 	ldw	r3,-12(fp)
800019b0:	e0bffe17 	ldw	r2,-8(fp)
800019b4:	1884b03a 	or	r2,r3,r2
800019b8:	e0bffd15 	stw	r2,-12(fp)
			out = AD9523_VCXO;
800019bc:	00800084 	movi	r2,2
800019c0:	e0bffa15 	stw	r2,-24(fp)
800019c4:	00000506 	br	800019dc <ad9523_vco_out_map+0xd4>
		} else {
			reg_data &= ~mask;
800019c8:	e0bffe17 	ldw	r2,-8(fp)
800019cc:	0086303a 	nor	r3,zero,r2
800019d0:	e0bffd17 	ldw	r2,-12(fp)
800019d4:	1884703a 	and	r2,r3,r2
800019d8:	e0bffd15 	stw	r2,-12(fp)
		}
		ret = ad9523_spi_write(dev,
800019dc:	e0bffd17 	ldw	r2,-12(fp)
800019e0:	100d883a 	mov	r6,r2
800019e4:	01400074 	movhi	r5,1
800019e8:	29406ec4 	addi	r5,r5,443
800019ec:	e13ffc17 	ldw	r4,-16(fp)
800019f0:	00017f80 	call	800017f8 <ad9523_spi_write>
800019f4:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
800019f8:	00004b06 	br	80001b28 <ad9523_vco_out_map+0x220>
	case 4 ... 6:
		ret = ad9523_spi_read(dev,
800019fc:	e0bffd04 	addi	r2,fp,-12
80001a00:	100d883a 	mov	r6,r2
80001a04:	01400074 	movhi	r5,1
80001a08:	29406e84 	addi	r5,r5,442
80001a0c:	e13ffc17 	ldw	r4,-16(fp)
80001a10:	00017080 	call	80001708 <ad9523_spi_read>
80001a14:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CTRL,
				      &reg_data);
		if (ret < 0)
80001a18:	e0bfff17 	ldw	r2,-4(fp)
80001a1c:	10003f16 	blt	r2,zero,80001b1c <ad9523_vco_out_map+0x214>
			break;
		mask = AD9523_PLL1_OUTP_CTRL_VCO_DIV_SEL_CH4_M2 << (ch - 4);
80001a20:	e0bffb17 	ldw	r2,-20(fp)
80001a24:	10bfff04 	addi	r2,r2,-4
80001a28:	00c00804 	movi	r3,32
80001a2c:	1884983a 	sll	r2,r3,r2
80001a30:	e0bffe15 	stw	r2,-8(fp)
		if (out)
80001a34:	e0bffa17 	ldw	r2,-24(fp)
80001a38:	10000526 	beq	r2,zero,80001a50 <ad9523_vco_out_map+0x148>
			reg_data |= mask;
80001a3c:	e0fffd17 	ldw	r3,-12(fp)
80001a40:	e0bffe17 	ldw	r2,-8(fp)
80001a44:	1884b03a 	or	r2,r3,r2
80001a48:	e0bffd15 	stw	r2,-12(fp)
80001a4c:	00000506 	br	80001a64 <ad9523_vco_out_map+0x15c>
		else
			reg_data &= ~mask;
80001a50:	e0bffe17 	ldw	r2,-8(fp)
80001a54:	0086303a 	nor	r3,zero,r2
80001a58:	e0bffd17 	ldw	r2,-12(fp)
80001a5c:	1884703a 	and	r2,r3,r2
80001a60:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
80001a64:	e0bffd17 	ldw	r2,-12(fp)
80001a68:	100d883a 	mov	r6,r2
80001a6c:	01400074 	movhi	r5,1
80001a70:	29406e84 	addi	r5,r5,442
80001a74:	e13ffc17 	ldw	r4,-16(fp)
80001a78:	00017f80 	call	800017f8 <ad9523_spi_write>
80001a7c:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CTRL,
				       reg_data);
		break;
80001a80:	00002906 	br	80001b28 <ad9523_vco_out_map+0x220>
	case 7 ... 9:
		ret = ad9523_spi_read(dev,
80001a84:	e0bffd04 	addi	r2,fp,-12
80001a88:	100d883a 	mov	r6,r2
80001a8c:	01400074 	movhi	r5,1
80001a90:	29406ec4 	addi	r5,r5,443
80001a94:	e13ffc17 	ldw	r4,-16(fp)
80001a98:	00017080 	call	80001708 <ad9523_spi_read>
80001a9c:	e0bfff15 	stw	r2,-4(fp)
				      AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				      &reg_data);
		if (ret < 0)
80001aa0:	e0bfff17 	ldw	r2,-4(fp)
80001aa4:	10001f16 	blt	r2,zero,80001b24 <ad9523_vco_out_map+0x21c>
			break;
		mask = AD9523_PLL1_OUTP_CH_CTRL_VCO_DIV_SEL_CH7_M2 << (ch - 7);
80001aa8:	e0bffb17 	ldw	r2,-20(fp)
80001aac:	10bffe44 	addi	r2,r2,-7
80001ab0:	00c00404 	movi	r3,16
80001ab4:	1884983a 	sll	r2,r3,r2
80001ab8:	e0bffe15 	stw	r2,-8(fp)
		if (out)
80001abc:	e0bffa17 	ldw	r2,-24(fp)
80001ac0:	10000526 	beq	r2,zero,80001ad8 <ad9523_vco_out_map+0x1d0>
			reg_data |= mask;
80001ac4:	e0fffd17 	ldw	r3,-12(fp)
80001ac8:	e0bffe17 	ldw	r2,-8(fp)
80001acc:	1884b03a 	or	r2,r3,r2
80001ad0:	e0bffd15 	stw	r2,-12(fp)
80001ad4:	00000506 	br	80001aec <ad9523_vco_out_map+0x1e4>
		else
			reg_data &= ~mask;
80001ad8:	e0bffe17 	ldw	r2,-8(fp)
80001adc:	0086303a 	nor	r3,zero,r2
80001ae0:	e0bffd17 	ldw	r2,-12(fp)
80001ae4:	1884703a 	and	r2,r3,r2
80001ae8:	e0bffd15 	stw	r2,-12(fp)
		ret = ad9523_spi_write(dev,
80001aec:	e0bffd17 	ldw	r2,-12(fp)
80001af0:	100d883a 	mov	r6,r2
80001af4:	01400074 	movhi	r5,1
80001af8:	29406ec4 	addi	r5,r5,443
80001afc:	e13ffc17 	ldw	r4,-16(fp)
80001b00:	00017f80 	call	800017f8 <ad9523_spi_write>
80001b04:	e0bfff15 	stw	r2,-4(fp)
				       AD9523_PLL1_OUTPUT_CHANNEL_CTRL,
				       reg_data);
		break;
80001b08:	00000706 	br	80001b28 <ad9523_vco_out_map+0x220>
	default:
		return 0;
80001b0c:	0005883a 	mov	r2,zero
80001b10:	00000c06 	br	80001b44 <ad9523_vco_out_map+0x23c>
			break;
80001b14:	0001883a 	nop
80001b18:	00000306 	br	80001b28 <ad9523_vco_out_map+0x220>
			break;
80001b1c:	0001883a 	nop
80001b20:	00000106 	br	80001b28 <ad9523_vco_out_map+0x220>
			break;
80001b24:	0001883a 	nop
	}

	dev->ad9523_st.vco_out_map[ch] = out;
80001b28:	e0bffa17 	ldw	r2,-24(fp)
80001b2c:	1009883a 	mov	r4,r2
80001b30:	e0fffc17 	ldw	r3,-16(fp)
80001b34:	e0bffb17 	ldw	r2,-20(fp)
80001b38:	1885883a 	add	r2,r3,r2
80001b3c:	11000705 	stb	r4,28(r2)

	return ret;
80001b40:	e0bfff17 	ldw	r2,-4(fp)
}
80001b44:	e037883a 	mov	sp,fp
80001b48:	dfc00117 	ldw	ra,4(sp)
80001b4c:	df000017 	ldw	fp,0(sp)
80001b50:	dec00204 	addi	sp,sp,8
80001b54:	f800283a 	ret

80001b58 <ad9523_calibrate>:

// vco calibration on default setup may not work (as it is a buffered write)
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_calibrate(struct ad9523_dev *dev)
{
80001b58:	defffb04 	addi	sp,sp,-20
80001b5c:	dfc00415 	stw	ra,16(sp)
80001b60:	df000315 	stw	fp,12(sp)
80001b64:	df000304 	addi	fp,sp,12
80001b68:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t timeout;

	ad9523_spi_write(dev,
80001b6c:	01800084 	movi	r6,2
80001b70:	01400074 	movhi	r5,1
80001b74:	29403cc4 	addi	r5,r5,243
80001b78:	e13ffd17 	ldw	r4,-12(fp)
80001b7c:	00017f80 	call	800017f8 <ad9523_spi_write>
			 AD9523_PLL2_VCO_CTRL,
			 AD9523_PLL2_VCO_CALIBRATE);
	ad9523_io_update(dev);
80001b80:	e13ffd17 	ldw	r4,-12(fp)
80001b84:	00018cc0 	call	800018cc <ad9523_io_update>

	timeout = 0;
80001b88:	e03fff15 	stw	zero,-4(fp)
	while (timeout < 100) {
80001b8c:	00000e06 	br	80001bc8 <ad9523_calibrate+0x70>
		mdelay(1);
80001b90:	0100fa04 	movi	r4,1000
80001b94:	00205040 	call	80020504 <usleep>
		timeout = timeout + 1;
80001b98:	e0bfff17 	ldw	r2,-4(fp)
80001b9c:	10800044 	addi	r2,r2,1
80001ba0:	e0bfff15 	stw	r2,-4(fp)
		ad9523_spi_read(dev,
80001ba4:	e0bffe04 	addi	r2,fp,-8
80001ba8:	100d883a 	mov	r6,r2
80001bac:	01400074 	movhi	r5,1
80001bb0:	29408b44 	addi	r5,r5,557
80001bb4:	e13ffd17 	ldw	r4,-12(fp)
80001bb8:	00017080 	call	80001708 <ad9523_spi_read>
				AD9523_READBACK_1,
				&reg_data);
		if ((reg_data & 0x1) == 0x0)
80001bbc:	e0bffe17 	ldw	r2,-8(fp)
80001bc0:	1080004c 	andi	r2,r2,1
80001bc4:	10000426 	beq	r2,zero,80001bd8 <ad9523_calibrate+0x80>
	while (timeout < 100) {
80001bc8:	e0bfff17 	ldw	r2,-4(fp)
80001bcc:	10801930 	cmpltui	r2,r2,100
80001bd0:	103fef1e 	bne	r2,zero,80001b90 <_gp+0xfffd0e1c>
80001bd4:	00000106 	br	80001bdc <ad9523_calibrate+0x84>
			break;
80001bd8:	0001883a 	nop
	}
	ad9523_spi_read(dev,
80001bdc:	e0bffe04 	addi	r2,fp,-8
80001be0:	100d883a 	mov	r6,r2
80001be4:	01400074 	movhi	r5,1
80001be8:	29408b44 	addi	r5,r5,557
80001bec:	e13ffd17 	ldw	r4,-12(fp)
80001bf0:	00017080 	call	80001708 <ad9523_spi_read>
			AD9523_READBACK_1,
			&reg_data);
	if ((reg_data & 0x1) != 0x0) {
80001bf4:	e0bffe17 	ldw	r2,-8(fp)
80001bf8:	1080004c 	andi	r2,r2,1
80001bfc:	10000726 	beq	r2,zero,80001c1c <ad9523_calibrate+0xc4>
		printf("AD9523: VCO calibration failed (%x)!\n", reg_data);
80001c00:	e0bffe17 	ldw	r2,-8(fp)
80001c04:	100b883a 	mov	r5,r2
80001c08:	012000b4 	movhi	r4,32770
80001c0c:	21143e04 	addi	r4,r4,20728
80001c10:	0010d740 	call	80010d74 <printf>
		return(-1);
80001c14:	00bfffc4 	movi	r2,-1
80001c18:	00000106 	br	80001c20 <ad9523_calibrate+0xc8>
	}

	return(0);
80001c1c:	0005883a 	mov	r2,zero
}
80001c20:	e037883a 	mov	sp,fp
80001c24:	dfc00117 	ldw	ra,4(sp)
80001c28:	df000017 	ldw	fp,0(sp)
80001c2c:	dec00204 	addi	sp,sp,8
80001c30:	f800283a 	ret

80001c34 <ad9523_status>:

// status
// calibration requires all registers to be written (not in hold registers) first.

int32_t ad9523_status(struct ad9523_dev *dev)
{
80001c34:	defff904 	addi	sp,sp,-28
80001c38:	dfc00615 	stw	ra,24(sp)
80001c3c:	df000515 	stw	fp,20(sp)
80001c40:	df000504 	addi	fp,sp,20
80001c44:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret;
	uint32_t reg_data;
	uint32_t status;
	uint32_t timeout;

	status = 0;
80001c48:	e03ffe15 	stw	zero,-8(fp)

	// vcxo + pll2 must always be okay- (is it not?)

	status = status | AD9523_READBACK_0_STAT_VCXO;
80001c4c:	e0bffe17 	ldw	r2,-8(fp)
80001c50:	10800814 	ori	r2,r2,32
80001c54:	e0bffe15 	stw	r2,-8(fp)
	status = status | AD9523_READBACK_0_STAT_PLL2_LD;
80001c58:	e0bffe17 	ldw	r2,-8(fp)
80001c5c:	10800094 	ori	r2,r2,2
80001c60:	e0bffe15 	stw	r2,-8(fp)

	if (dev->pdata->pll1_bypass_en == 0) {
80001c64:	e0bffb17 	ldw	r2,-20(fp)
80001c68:	10800b17 	ldw	r2,44(r2)
80001c6c:	10800603 	ldbu	r2,24(r2)
80001c70:	10803fcc 	andi	r2,r2,255
80001c74:	1000121e 	bne	r2,zero,80001cc0 <ad9523_status+0x8c>
		status = status | AD9523_READBACK_0_STAT_PLL2_REF_CLK;
80001c78:	e0bffe17 	ldw	r2,-8(fp)
80001c7c:	10802014 	ori	r2,r2,128
80001c80:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL2_FB_CLK;
80001c84:	e0bffe17 	ldw	r2,-8(fp)
80001c88:	10801014 	ori	r2,r2,64
80001c8c:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REF_TEST;
80001c90:	e0bffe17 	ldw	r2,-8(fp)
80001c94:	10800414 	ori	r2,r2,16
80001c98:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFB;
80001c9c:	e0bffe17 	ldw	r2,-8(fp)
80001ca0:	10800214 	ori	r2,r2,8
80001ca4:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_REFA;
80001ca8:	e0bffe17 	ldw	r2,-8(fp)
80001cac:	10800114 	ori	r2,r2,4
80001cb0:	e0bffe15 	stw	r2,-8(fp)
		status = status | AD9523_READBACK_0_STAT_PLL1_LD;
80001cb4:	e0bffe17 	ldw	r2,-8(fp)
80001cb8:	10800054 	ori	r2,r2,1
80001cbc:	e0bffe15 	stw	r2,-8(fp)
	}

	timeout = 0;
80001cc0:	e03ffd15 	stw	zero,-12(fp)
	while (timeout < 100) {
80001cc4:	00001006 	br	80001d08 <ad9523_status+0xd4>
		mdelay(1);
80001cc8:	0100fa04 	movi	r4,1000
80001ccc:	00205040 	call	80020504 <usleep>
		timeout = timeout + 1;
80001cd0:	e0bffd17 	ldw	r2,-12(fp)
80001cd4:	10800044 	addi	r2,r2,1
80001cd8:	e0bffd15 	stw	r2,-12(fp)
		ad9523_spi_read(dev,
80001cdc:	e0bffc04 	addi	r2,fp,-16
80001ce0:	100d883a 	mov	r6,r2
80001ce4:	01400074 	movhi	r5,1
80001ce8:	29408b04 	addi	r5,r5,556
80001cec:	e13ffb17 	ldw	r4,-20(fp)
80001cf0:	00017080 	call	80001708 <ad9523_spi_read>
				AD9523_READBACK_0,
				&reg_data);
		if ((reg_data & status) == status)
80001cf4:	e0fffc17 	ldw	r3,-16(fp)
80001cf8:	e0bffe17 	ldw	r2,-8(fp)
80001cfc:	1884703a 	and	r2,r3,r2
80001d00:	e0fffe17 	ldw	r3,-8(fp)
80001d04:	18800426 	beq	r3,r2,80001d18 <ad9523_status+0xe4>
	while (timeout < 100) {
80001d08:	e0bffd17 	ldw	r2,-12(fp)
80001d0c:	10801930 	cmpltui	r2,r2,100
80001d10:	103fed1e 	bne	r2,zero,80001cc8 <_gp+0xfffd0f54>
80001d14:	00000106 	br	80001d1c <ad9523_status+0xe8>
			break;
80001d18:	0001883a 	nop
	}

	ret = 0;
80001d1c:	e03fff15 	stw	zero,-4(fp)
	if ((reg_data & AD9523_READBACK_0_STAT_VCXO) != AD9523_READBACK_0_STAT_VCXO) {
80001d20:	e0bffc17 	ldw	r2,-16(fp)
80001d24:	1080080c 	andi	r2,r2,32
80001d28:	1000071e 	bne	r2,zero,80001d48 <ad9523_status+0x114>
		printf("AD9523: VCXO status errors (%x)!\n", reg_data);
80001d2c:	e0bffc17 	ldw	r2,-16(fp)
80001d30:	100b883a 	mov	r5,r2
80001d34:	012000b4 	movhi	r4,32770
80001d38:	21144804 	addi	r4,r4,20768
80001d3c:	0010d740 	call	80010d74 <printf>
		ret = -1;
80001d40:	00bfffc4 	movi	r2,-1
80001d44:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((reg_data & AD9523_READBACK_0_STAT_PLL2_LD) != AD9523_READBACK_0_STAT_PLL2_LD) {
80001d48:	e0bffc17 	ldw	r2,-16(fp)
80001d4c:	1080008c 	andi	r2,r2,2
80001d50:	1000071e 	bne	r2,zero,80001d70 <ad9523_status+0x13c>
		printf("AD9523: PLL2 NOT locked (%x)!\n", reg_data);
80001d54:	e0bffc17 	ldw	r2,-16(fp)
80001d58:	100b883a 	mov	r5,r2
80001d5c:	012000b4 	movhi	r4,32770
80001d60:	21145104 	addi	r4,r4,20804
80001d64:	0010d740 	call	80010d74 <printf>
		ret = -1;
80001d68:	00bfffc4 	movi	r2,-1
80001d6c:	e0bfff15 	stw	r2,-4(fp)
	}
	return(ret);
80001d70:	e0bfff17 	ldw	r2,-4(fp)
}
80001d74:	e037883a 	mov	sp,fp
80001d78:	dfc00117 	ldw	ra,4(sp)
80001d7c:	df000017 	ldw	fp,0(sp)
80001d80:	dec00204 	addi	sp,sp,8
80001d84:	f800283a 	ret

80001d88 <ad9523_sync>:
 * @brief Updates the AD9523 configuration.
 *
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_sync(struct ad9523_dev *dev)
{
80001d88:	defffa04 	addi	sp,sp,-24
80001d8c:	dfc00515 	stw	ra,20(sp)
80001d90:	df000415 	stw	fp,16(sp)
80001d94:	df000404 	addi	fp,sp,16
80001d98:	e13ffc15 	stw	r4,-16(fp)
	int32_t ret, tmp;
	uint32_t reg_data;

	ret = ad9523_spi_read(dev,
80001d9c:	e0bffd04 	addi	r2,fp,-12
80001da0:	100d883a 	mov	r6,r2
80001da4:	014000f4 	movhi	r5,3
80001da8:	29408c84 	addi	r5,r5,562
80001dac:	e13ffc17 	ldw	r4,-16(fp)
80001db0:	00017080 	call	80001708 <ad9523_spi_read>
80001db4:	e0bfff15 	stw	r2,-4(fp)
			      AD9523_STATUS_SIGNALS,
			      &reg_data);
	if (ret < 0)
80001db8:	e0bfff17 	ldw	r2,-4(fp)
80001dbc:	1000020e 	bge	r2,zero,80001dc8 <ad9523_sync+0x40>
		return ret;
80001dc0:	e0bfff17 	ldw	r2,-4(fp)
80001dc4:	00002406 	br	80001e58 <ad9523_sync+0xd0>

	tmp = reg_data;
80001dc8:	e0bffd17 	ldw	r2,-12(fp)
80001dcc:	e0bffe15 	stw	r2,-8(fp)
	tmp |= AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
80001dd0:	e0bffe17 	ldw	r2,-8(fp)
80001dd4:	10800074 	orhi	r2,r2,1
80001dd8:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
80001ddc:	e0bffe17 	ldw	r2,-8(fp)
80001de0:	100d883a 	mov	r6,r2
80001de4:	014000f4 	movhi	r5,3
80001de8:	29408c84 	addi	r5,r5,562
80001dec:	e13ffc17 	ldw	r4,-16(fp)
80001df0:	00017f80 	call	800017f8 <ad9523_spi_write>
80001df4:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
80001df8:	e0bfff17 	ldw	r2,-4(fp)
80001dfc:	1000020e 	bge	r2,zero,80001e08 <ad9523_sync+0x80>
		return ret;
80001e00:	e0bfff17 	ldw	r2,-4(fp)
80001e04:	00001406 	br	80001e58 <ad9523_sync+0xd0>

	ad9523_io_update(dev);
80001e08:	e13ffc17 	ldw	r4,-16(fp)
80001e0c:	00018cc0 	call	800018cc <ad9523_io_update>
	tmp &= ~AD9523_STATUS_SIGNALS_SYNC_MAN_CTRL;
80001e10:	e0fffe17 	ldw	r3,-8(fp)
80001e14:	00bffff4 	movhi	r2,65535
80001e18:	10bfffc4 	addi	r2,r2,-1
80001e1c:	1884703a 	and	r2,r3,r2
80001e20:	e0bffe15 	stw	r2,-8(fp)

	ret = ad9523_spi_write(dev,
80001e24:	e0bffe17 	ldw	r2,-8(fp)
80001e28:	100d883a 	mov	r6,r2
80001e2c:	014000f4 	movhi	r5,3
80001e30:	29408c84 	addi	r5,r5,562
80001e34:	e13ffc17 	ldw	r4,-16(fp)
80001e38:	00017f80 	call	800017f8 <ad9523_spi_write>
80001e3c:	e0bfff15 	stw	r2,-4(fp)
			       AD9523_STATUS_SIGNALS,
			       tmp);
	if (ret < 0)
80001e40:	e0bfff17 	ldw	r2,-4(fp)
80001e44:	1000020e 	bge	r2,zero,80001e50 <ad9523_sync+0xc8>
		return ret;
80001e48:	e0bfff17 	ldw	r2,-4(fp)
80001e4c:	00000206 	br	80001e58 <ad9523_sync+0xd0>

	return ad9523_io_update(dev);
80001e50:	e13ffc17 	ldw	r4,-16(fp)
80001e54:	00018cc0 	call	800018cc <ad9523_io_update>

}
80001e58:	e037883a 	mov	sp,fp
80001e5c:	dfc00117 	ldw	ra,4(sp)
80001e60:	df000017 	ldw	fp,0(sp)
80001e64:	dec00204 	addi	sp,sp,8
80001e68:	f800283a 	ret

80001e6c <ad9523_init>:
 * @brief Initialize the AD9523 data structure with the default register values.
 *
 * @return Always return 0.
 *******************************************************************************/
int32_t ad9523_init(struct ad9523_init_param *init_param)
{
80001e6c:	defffd04 	addi	sp,sp,-12
80001e70:	df000215 	stw	fp,8(sp)
80001e74:	df000204 	addi	fp,sp,8
80001e78:	e13ffe15 	stw	r4,-8(fp)

	int32_t i = 0;
80001e7c:	e03fff15 	stw	zero,-4(fp)

	init_param->pdata->vcxo_freq = 0;
80001e80:	e0bffe17 	ldw	r2,-8(fp)
80001e84:	10800417 	ldw	r2,16(r2)
80001e88:	10000015 	stw	zero,0(r2)
	init_param->pdata->spi3wire = 0;
80001e8c:	e0bffe17 	ldw	r2,-8(fp)
80001e90:	10800417 	ldw	r2,16(r2)
80001e94:	10000105 	stb	zero,4(r2)

	/* Differential/ Single-Ended Input Configuration */
	init_param->pdata->refa_diff_rcv_en = 0;
80001e98:	e0bffe17 	ldw	r2,-8(fp)
80001e9c:	10800417 	ldw	r2,16(r2)
80001ea0:	10000145 	stb	zero,5(r2)
	init_param->pdata->refb_diff_rcv_en = 0;
80001ea4:	e0bffe17 	ldw	r2,-8(fp)
80001ea8:	10800417 	ldw	r2,16(r2)
80001eac:	10000185 	stb	zero,6(r2)
	init_param->pdata->zd_in_diff_en = 0;
80001eb0:	e0bffe17 	ldw	r2,-8(fp)
80001eb4:	10800417 	ldw	r2,16(r2)
80001eb8:	100001c5 	stb	zero,7(r2)
	init_param->pdata->osc_in_diff_en = 0;
80001ebc:	e0bffe17 	ldw	r2,-8(fp)
80001ec0:	10800417 	ldw	r2,16(r2)
80001ec4:	10000205 	stb	zero,8(r2)

	/*
	 * Valid if differential input disabled
	 * if not true defaults to pos input
	 */
	init_param->pdata->refa_cmos_neg_inp_en = 0;
80001ec8:	e0bffe17 	ldw	r2,-8(fp)
80001ecc:	10800417 	ldw	r2,16(r2)
80001ed0:	10000245 	stb	zero,9(r2)
	init_param->pdata->refb_cmos_neg_inp_en = 0;
80001ed4:	e0bffe17 	ldw	r2,-8(fp)
80001ed8:	10800417 	ldw	r2,16(r2)
80001edc:	10000285 	stb	zero,10(r2)
	init_param->pdata->zd_in_cmos_neg_inp_en = 0;
80001ee0:	e0bffe17 	ldw	r2,-8(fp)
80001ee4:	10800417 	ldw	r2,16(r2)
80001ee8:	100002c5 	stb	zero,11(r2)
	init_param->pdata->osc_in_cmos_neg_inp_en = 0;
80001eec:	e0bffe17 	ldw	r2,-8(fp)
80001ef0:	10800417 	ldw	r2,16(r2)
80001ef4:	10000305 	stb	zero,12(r2)

	/* PLL1 Setting */
	init_param->pdata->refa_r_div = 1;
80001ef8:	e0bffe17 	ldw	r2,-8(fp)
80001efc:	10800417 	ldw	r2,16(r2)
80001f00:	00c00044 	movi	r3,1
80001f04:	10c0038d 	sth	r3,14(r2)
	init_param->pdata->refb_r_div = 1;
80001f08:	e0bffe17 	ldw	r2,-8(fp)
80001f0c:	10800417 	ldw	r2,16(r2)
80001f10:	00c00044 	movi	r3,1
80001f14:	10c0040d 	sth	r3,16(r2)
	init_param->pdata->pll1_feedback_div = 1;
80001f18:	e0bffe17 	ldw	r2,-8(fp)
80001f1c:	10800417 	ldw	r2,16(r2)
80001f20:	00c00044 	movi	r3,1
80001f24:	10c0048d 	sth	r3,18(r2)
	init_param->pdata->pll1_charge_pump_current_nA = 0;
80001f28:	e0bffe17 	ldw	r2,-8(fp)
80001f2c:	10800417 	ldw	r2,16(r2)
80001f30:	1000050d 	sth	zero,20(r2)
	init_param->pdata->zero_delay_mode_internal_en = 0;
80001f34:	e0bffe17 	ldw	r2,-8(fp)
80001f38:	10800417 	ldw	r2,16(r2)
80001f3c:	10000585 	stb	zero,22(r2)
	init_param->pdata->osc_in_feedback_en = 0;
80001f40:	e0bffe17 	ldw	r2,-8(fp)
80001f44:	10800417 	ldw	r2,16(r2)
80001f48:	100005c5 	stb	zero,23(r2)
	init_param->pdata->pll1_bypass_en = 1;
80001f4c:	e0bffe17 	ldw	r2,-8(fp)
80001f50:	10800417 	ldw	r2,16(r2)
80001f54:	00c00044 	movi	r3,1
80001f58:	10c00605 	stb	r3,24(r2)
	init_param->pdata->pll1_loop_filter_rzero = 1;
80001f5c:	e0bffe17 	ldw	r2,-8(fp)
80001f60:	10800417 	ldw	r2,16(r2)
80001f64:	00c00044 	movi	r3,1
80001f68:	10c00645 	stb	r3,25(r2)

	/* Reference */
	init_param->pdata->ref_mode = 0;
80001f6c:	e0bffe17 	ldw	r2,-8(fp)
80001f70:	10800417 	ldw	r2,16(r2)
80001f74:	10000685 	stb	zero,26(r2)

	/* PLL2 Setting */
	init_param->pdata->pll2_charge_pump_current_nA = 0;
80001f78:	e0bffe17 	ldw	r2,-8(fp)
80001f7c:	10800417 	ldw	r2,16(r2)
80001f80:	10000715 	stw	zero,28(r2)
	init_param->pdata->pll2_ndiv_a_cnt = 0;
80001f84:	e0bffe17 	ldw	r2,-8(fp)
80001f88:	10800417 	ldw	r2,16(r2)
80001f8c:	10000805 	stb	zero,32(r2)
	init_param->pdata->pll2_ndiv_b_cnt = 4;
80001f90:	e0bffe17 	ldw	r2,-8(fp)
80001f94:	10800417 	ldw	r2,16(r2)
80001f98:	00c00104 	movi	r3,4
80001f9c:	10c00845 	stb	r3,33(r2)
	init_param->pdata->pll2_freq_doubler_en = 0;
80001fa0:	e0bffe17 	ldw	r2,-8(fp)
80001fa4:	10800417 	ldw	r2,16(r2)
80001fa8:	10000885 	stb	zero,34(r2)
	init_param->pdata->pll2_r2_div = 0;
80001fac:	e0bffe17 	ldw	r2,-8(fp)
80001fb0:	10800417 	ldw	r2,16(r2)
80001fb4:	100008c5 	stb	zero,35(r2)
	init_param->pdata->pll2_vco_diff_m1 = 0; /* 3..5 */
80001fb8:	e0bffe17 	ldw	r2,-8(fp)
80001fbc:	10800417 	ldw	r2,16(r2)
80001fc0:	10000905 	stb	zero,36(r2)
	init_param->pdata->pll2_vco_diff_m2 = 0; /* 3..5 */
80001fc4:	e0bffe17 	ldw	r2,-8(fp)
80001fc8:	10800417 	ldw	r2,16(r2)
80001fcc:	10000945 	stb	zero,37(r2)

	/* Loop Filter PLL2 */
	init_param->pdata->rpole2 = 0;
80001fd0:	e0bffe17 	ldw	r2,-8(fp)
80001fd4:	10800417 	ldw	r2,16(r2)
80001fd8:	10000985 	stb	zero,38(r2)
	init_param->pdata->rzero = 0;
80001fdc:	e0bffe17 	ldw	r2,-8(fp)
80001fe0:	10800417 	ldw	r2,16(r2)
80001fe4:	100009c5 	stb	zero,39(r2)
	init_param->pdata->cpole1 = 0;
80001fe8:	e0bffe17 	ldw	r2,-8(fp)
80001fec:	10800417 	ldw	r2,16(r2)
80001ff0:	10000a05 	stb	zero,40(r2)
	init_param->pdata->rzero_bypass_en = 0;
80001ff4:	e0bffe17 	ldw	r2,-8(fp)
80001ff8:	10800417 	ldw	r2,16(r2)
80001ffc:	10000a45 	stb	zero,41(r2)

	/* Output Channel Configuration */
	for (i=0; i < init_param->pdata->num_channels; i++) {
80002000:	e03fff15 	stw	zero,-4(fp)
80002004:	00004306 	br	80002114 <ad9523_init+0x2a8>
		(&init_param->pdata->channels[i])->channel_num = 0;
80002008:	e0bffe17 	ldw	r2,-8(fp)
8000200c:	10800417 	ldw	r2,16(r2)
80002010:	10c00c17 	ldw	r3,48(r2)
80002014:	e0bfff17 	ldw	r2,-4(fp)
80002018:	108006a4 	muli	r2,r2,26
8000201c:	1885883a 	add	r2,r3,r2
80002020:	10000005 	stb	zero,0(r2)
		(&init_param->pdata->channels[i])->divider_output_invert_en = 0;
80002024:	e0bffe17 	ldw	r2,-8(fp)
80002028:	10800417 	ldw	r2,16(r2)
8000202c:	10c00c17 	ldw	r3,48(r2)
80002030:	e0bfff17 	ldw	r2,-4(fp)
80002034:	108006a4 	muli	r2,r2,26
80002038:	1885883a 	add	r2,r3,r2
8000203c:	10000045 	stb	zero,1(r2)
		(&init_param->pdata->channels[i])->sync_ignore_en = 0;
80002040:	e0bffe17 	ldw	r2,-8(fp)
80002044:	10800417 	ldw	r2,16(r2)
80002048:	10c00c17 	ldw	r3,48(r2)
8000204c:	e0bfff17 	ldw	r2,-4(fp)
80002050:	108006a4 	muli	r2,r2,26
80002054:	1885883a 	add	r2,r3,r2
80002058:	10000085 	stb	zero,2(r2)
		(&init_param->pdata->channels[i])->low_power_mode_en = 0;
8000205c:	e0bffe17 	ldw	r2,-8(fp)
80002060:	10800417 	ldw	r2,16(r2)
80002064:	10c00c17 	ldw	r3,48(r2)
80002068:	e0bfff17 	ldw	r2,-4(fp)
8000206c:	108006a4 	muli	r2,r2,26
80002070:	1885883a 	add	r2,r3,r2
80002074:	100000c5 	stb	zero,3(r2)
		(&init_param->pdata->channels[i])->use_alt_clock_src = 0;
80002078:	e0bffe17 	ldw	r2,-8(fp)
8000207c:	10800417 	ldw	r2,16(r2)
80002080:	10c00c17 	ldw	r3,48(r2)
80002084:	e0bfff17 	ldw	r2,-4(fp)
80002088:	108006a4 	muli	r2,r2,26
8000208c:	1885883a 	add	r2,r3,r2
80002090:	10000105 	stb	zero,4(r2)
		(&init_param->pdata->channels[i])->output_dis = 0;
80002094:	e0bffe17 	ldw	r2,-8(fp)
80002098:	10800417 	ldw	r2,16(r2)
8000209c:	10c00c17 	ldw	r3,48(r2)
800020a0:	e0bfff17 	ldw	r2,-4(fp)
800020a4:	108006a4 	muli	r2,r2,26
800020a8:	1885883a 	add	r2,r3,r2
800020ac:	10000145 	stb	zero,5(r2)
		(&init_param->pdata->channels[i])->driver_mode = LVPECL_8mA;
800020b0:	e0bffe17 	ldw	r2,-8(fp)
800020b4:	10800417 	ldw	r2,16(r2)
800020b8:	10c00c17 	ldw	r3,48(r2)
800020bc:	e0bfff17 	ldw	r2,-4(fp)
800020c0:	108006a4 	muli	r2,r2,26
800020c4:	1885883a 	add	r2,r3,r2
800020c8:	00c00044 	movi	r3,1
800020cc:	10c00185 	stb	r3,6(r2)
		(&init_param->pdata->channels[i])->divider_phase = 0;
800020d0:	e0bffe17 	ldw	r2,-8(fp)
800020d4:	10800417 	ldw	r2,16(r2)
800020d8:	10c00c17 	ldw	r3,48(r2)
800020dc:	e0bfff17 	ldw	r2,-4(fp)
800020e0:	108006a4 	muli	r2,r2,26
800020e4:	1885883a 	add	r2,r3,r2
800020e8:	100001c5 	stb	zero,7(r2)
		(&init_param->pdata->channels[i])->channel_divider = 0;
800020ec:	e0bffe17 	ldw	r2,-8(fp)
800020f0:	10800417 	ldw	r2,16(r2)
800020f4:	10c00c17 	ldw	r3,48(r2)
800020f8:	e0bfff17 	ldw	r2,-4(fp)
800020fc:	108006a4 	muli	r2,r2,26
80002100:	1885883a 	add	r2,r3,r2
80002104:	1000020d 	sth	zero,8(r2)
	for (i=0; i < init_param->pdata->num_channels; i++) {
80002108:	e0bfff17 	ldw	r2,-4(fp)
8000210c:	10800044 	addi	r2,r2,1
80002110:	e0bfff15 	stw	r2,-4(fp)
80002114:	e0bffe17 	ldw	r2,-8(fp)
80002118:	10800417 	ldw	r2,16(r2)
8000211c:	10800b17 	ldw	r2,44(r2)
80002120:	e0ffff17 	ldw	r3,-4(fp)
80002124:	18bfb816 	blt	r3,r2,80002008 <_gp+0xfffd1294>
	}
	return 0;
80002128:	0005883a 	mov	r2,zero
}
8000212c:	e037883a 	mov	sp,fp
80002130:	df000017 	ldw	fp,0(sp)
80002134:	dec00104 	addi	sp,sp,4
80002138:	f800283a 	ret

8000213c <ad9523_setup>:
 * @return Returns 0 in case of success or negative error code.
 *******************************************************************************/
int32_t ad9523_setup(struct ad9523_dev **device,
		     const struct ad9523_init_param *init_param)

{
8000213c:	defff504 	addi	sp,sp,-44
80002140:	dfc00a15 	stw	ra,40(sp)
80002144:	df000915 	stw	fp,36(sp)
80002148:	df000904 	addi	fp,sp,36
8000214c:	e13ff815 	stw	r4,-32(fp)
80002150:	e17ff715 	stw	r5,-36(fp)
	struct ad9523_channel_spec *chan;
	uint32_t active_mask = 0;
80002154:	e03fff15 	stw	zero,-4(fp)
	int32_t ret, i;
	uint32_t reg_data;
	uint32_t version_id;
	struct ad9523_dev *dev;

	dev = (struct ad9523_dev *)malloc(sizeof(*dev));
80002158:	01000c04 	movi	r4,48
8000215c:	000fc840 	call	8000fc84 <malloc>
80002160:	e0bffd15 	stw	r2,-12(fp)
	if (!dev)
80002164:	e0bffd17 	ldw	r2,-12(fp)
80002168:	1000021e 	bne	r2,zero,80002174 <ad9523_setup+0x38>
		return -1;
8000216c:	00bfffc4 	movi	r2,-1
80002170:	0002fa06 	br	80002d5c <ad9523_setup+0xc20>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
80002174:	e0bffd17 	ldw	r2,-12(fp)
80002178:	e0fff717 	ldw	r3,-36(fp)
8000217c:	180b883a 	mov	r5,r3
80002180:	1009883a 	mov	r4,r2
80002184:	0007c480 	call	80007c48 <spi_init>
80002188:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
8000218c:	e0bffc17 	ldw	r2,-16(fp)
80002190:	1000020e 	bge	r2,zero,8000219c <ad9523_setup+0x60>
		return ret;
80002194:	e0bffc17 	ldw	r2,-16(fp)
80002198:	0002f006 	br	80002d5c <ad9523_setup+0xc20>

	dev->pdata = init_param->pdata;
8000219c:	e0bff717 	ldw	r2,-36(fp)
800021a0:	10c00417 	ldw	r3,16(r2)
800021a4:	e0bffd17 	ldw	r2,-12(fp)
800021a8:	10c00b15 	stw	r3,44(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_SERIAL_PORT_CONFIG,
			       AD9523_SER_CONF_SOFT_RESET |
			       (dev->pdata->spi3wire ? 0 :
800021ac:	e0bffd17 	ldw	r2,-12(fp)
800021b0:	10800b17 	ldw	r2,44(r2)
800021b4:	10800103 	ldbu	r2,4(r2)
	ret = ad9523_spi_write(dev,
800021b8:	10803fcc 	andi	r2,r2,255
800021bc:	10000226 	beq	r2,zero,800021c8 <ad9523_setup+0x8c>
800021c0:	00800904 	movi	r2,36
800021c4:	00000106 	br	800021cc <ad9523_setup+0x90>
800021c8:	00802944 	movi	r2,165
800021cc:	100d883a 	mov	r6,r2
800021d0:	01400074 	movhi	r5,1
800021d4:	e13ffd17 	ldw	r4,-12(fp)
800021d8:	00017f80 	call	800017f8 <ad9523_spi_write>
800021dc:	e0bffc15 	stw	r2,-16(fp)
				AD9523_SER_CONF_SDO_ACTIVE));
	if (ret < 0)
800021e0:	e0bffc17 	ldw	r2,-16(fp)
800021e4:	1000020e 	bge	r2,zero,800021f0 <ad9523_setup+0xb4>
		return ret;
800021e8:	e0bffc17 	ldw	r2,-16(fp)
800021ec:	0002db06 	br	80002d5c <ad9523_setup+0xc20>
	mdelay(1);
800021f0:	0100fa04 	movi	r4,1000
800021f4:	00205040 	call	80020504 <usleep>

	ret = ad9523_spi_write(dev,
800021f8:	01800044 	movi	r6,1
800021fc:	01400074 	movhi	r5,1
80002200:	29400104 	addi	r5,r5,4
80002204:	e13ffd17 	ldw	r4,-12(fp)
80002208:	00017f80 	call	800017f8 <ad9523_spi_write>
8000220c:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_READBACK_CTRL,
			       AD9523_READBACK_CTRL_READ_BUFFERED);
	if (ret < 0)
80002210:	e0bffc17 	ldw	r2,-16(fp)
80002214:	1000020e 	bge	r2,zero,80002220 <ad9523_setup+0xe4>
		return ret;
80002218:	e0bffc17 	ldw	r2,-16(fp)
8000221c:	0002cf06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_io_update(dev);
80002220:	e13ffd17 	ldw	r4,-12(fp)
80002224:	00018cc0 	call	800018cc <ad9523_io_update>
80002228:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
8000222c:	e0bffc17 	ldw	r2,-16(fp)
80002230:	1000020e 	bge	r2,zero,8000223c <ad9523_setup+0x100>
		return ret;
80002234:	e0bffc17 	ldw	r2,-16(fp)
80002238:	0002c806 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_read(dev,
8000223c:	e0bff904 	addi	r2,fp,-28
80002240:	100d883a 	mov	r6,r2
80002244:	014000b4 	movhi	r5,2
80002248:	29400184 	addi	r5,r5,6
8000224c:	e13ffd17 	ldw	r4,-12(fp)
80002250:	00017080 	call	80001708 <ad9523_spi_read>
80002254:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &version_id);
	if (ret < 0)
80002258:	e0bffc17 	ldw	r2,-16(fp)
8000225c:	1000020e 	bge	r2,zero,80002268 <ad9523_setup+0x12c>
		return ret;
80002260:	e0bffc17 	ldw	r2,-16(fp)
80002264:	0002bd06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
80002268:	01ab6554 	movui	r6,44437
8000226c:	014000b4 	movhi	r5,2
80002270:	29400184 	addi	r5,r5,6
80002274:	e13ffd17 	ldw	r4,-12(fp)
80002278:	00017f80 	call	800017f8 <ad9523_spi_write>
8000227c:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       0xAD95);
	if (ret < 0)
80002280:	e0bffc17 	ldw	r2,-16(fp)
80002284:	1000020e 	bge	r2,zero,80002290 <ad9523_setup+0x154>
		return ret;
80002288:	e0bffc17 	ldw	r2,-16(fp)
8000228c:	0002b306 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_read(dev,
80002290:	e0bffa04 	addi	r2,fp,-24
80002294:	100d883a 	mov	r6,r2
80002298:	014000b4 	movhi	r5,2
8000229c:	29400184 	addi	r5,r5,6
800022a0:	e13ffd17 	ldw	r4,-12(fp)
800022a4:	00017080 	call	80001708 <ad9523_spi_read>
800022a8:	e0bffc15 	stw	r2,-16(fp)
			      AD9523_EEPROM_CUSTOMER_VERSION_ID,
			      &reg_data);
	if (ret < 0)
800022ac:	e0bffc17 	ldw	r2,-16(fp)
800022b0:	1000020e 	bge	r2,zero,800022bc <ad9523_setup+0x180>
		return ret;
800022b4:	e0bffc17 	ldw	r2,-16(fp)
800022b8:	0002a806 	br	80002d5c <ad9523_setup+0xc20>

	if (reg_data != 0xAD95) {
800022bc:	e0fffa17 	ldw	r3,-24(fp)
800022c0:	00ab6554 	movui	r2,44437
800022c4:	18800726 	beq	r3,r2,800022e4 <ad9523_setup+0x1a8>
		printf("AD9523: SPI write-verify failed (0x%X)!\n\r",
800022c8:	e0bffa17 	ldw	r2,-24(fp)
800022cc:	100b883a 	mov	r5,r2
800022d0:	012000b4 	movhi	r4,32770
800022d4:	21145904 	addi	r4,r4,20836
800022d8:	0010d740 	call	80010d74 <printf>
		       reg_data);
		return -1;
800022dc:	00bfffc4 	movi	r2,-1
800022e0:	00029e06 	br	80002d5c <ad9523_setup+0xc20>
	}

	ret = ad9523_spi_write(dev,
800022e4:	e0bff917 	ldw	r2,-28(fp)
800022e8:	100d883a 	mov	r6,r2
800022ec:	014000b4 	movhi	r5,2
800022f0:	29400184 	addi	r5,r5,6
800022f4:	e13ffd17 	ldw	r4,-12(fp)
800022f8:	00017f80 	call	800017f8 <ad9523_spi_write>
800022fc:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_EEPROM_CUSTOMER_VERSION_ID,
			       version_id);
	if (ret < 0)
80002300:	e0bffc17 	ldw	r2,-16(fp)
80002304:	1000020e 	bge	r2,zero,80002310 <ad9523_setup+0x1d4>
		return ret;
80002308:	e0bffc17 	ldw	r2,-16(fp)
8000230c:	00029306 	br	80002d5c <ad9523_setup+0xc20>
	/*
	 * PLL1 Setup
	 */
	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_A_DIVIDER,
			       dev->pdata->refa_r_div);
80002310:	e0bffd17 	ldw	r2,-12(fp)
80002314:	10800b17 	ldw	r2,44(r2)
80002318:	1080038b 	ldhu	r2,14(r2)
	ret = ad9523_spi_write(dev,
8000231c:	10bfffcc 	andi	r2,r2,65535
80002320:	100d883a 	mov	r6,r2
80002324:	014000b4 	movhi	r5,2
80002328:	29400444 	addi	r5,r5,17
8000232c:	e13ffd17 	ldw	r4,-12(fp)
80002330:	00017f80 	call	800017f8 <ad9523_spi_write>
80002334:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
80002338:	e0bffc17 	ldw	r2,-16(fp)
8000233c:	1000020e 	bge	r2,zero,80002348 <ad9523_setup+0x20c>
		return ret;
80002340:	e0bffc17 	ldw	r2,-16(fp)
80002344:	00028506 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_B_DIVIDER,
			       dev->pdata->refb_r_div);
80002348:	e0bffd17 	ldw	r2,-12(fp)
8000234c:	10800b17 	ldw	r2,44(r2)
80002350:	1080040b 	ldhu	r2,16(r2)
	ret = ad9523_spi_write(dev,
80002354:	10bfffcc 	andi	r2,r2,65535
80002358:	100d883a 	mov	r6,r2
8000235c:	014000b4 	movhi	r5,2
80002360:	294004c4 	addi	r5,r5,19
80002364:	e13ffd17 	ldw	r4,-12(fp)
80002368:	00017f80 	call	800017f8 <ad9523_spi_write>
8000236c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
80002370:	e0bffc17 	ldw	r2,-16(fp)
80002374:	1000020e 	bge	r2,zero,80002380 <ad9523_setup+0x244>
		return ret;
80002378:	e0bffc17 	ldw	r2,-16(fp)
8000237c:	00027706 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_FEEDBACK_DIVIDER,
			       dev->pdata->pll1_feedback_div);
80002380:	e0bffd17 	ldw	r2,-12(fp)
80002384:	10800b17 	ldw	r2,44(r2)
80002388:	1080048b 	ldhu	r2,18(r2)
	ret = ad9523_spi_write(dev,
8000238c:	10bfffcc 	andi	r2,r2,65535
80002390:	100d883a 	mov	r6,r2
80002394:	014000b4 	movhi	r5,2
80002398:	294005c4 	addi	r5,r5,23
8000239c:	e13ffd17 	ldw	r4,-12(fp)
800023a0:	00017f80 	call	800017f8 <ad9523_spi_write>
800023a4:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
800023a8:	e0bffc17 	ldw	r2,-16(fp)
800023ac:	1000020e 	bge	r2,zero,800023b8 <ad9523_setup+0x27c>
		return ret;
800023b0:	e0bffc17 	ldw	r2,-16(fp)
800023b4:	00026906 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_CHARGE_PUMP_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
800023b8:	e0bffd17 	ldw	r2,-12(fp)
800023bc:	10800b17 	ldw	r2,44(r2)
800023c0:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
800023c4:	10803fcc 	andi	r2,r2,255
800023c8:	10000a1e 	bne	r2,zero,800023f4 <ad9523_setup+0x2b8>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_CHARGE_PUMP_TRISTATE,
800023cc:	e0bffd17 	ldw	r2,-12(fp)
800023d0:	10800b17 	ldw	r2,44(r2)
800023d4:	1080050b 	ldhu	r2,20(r2)
800023d8:	10ffffcc 	andi	r3,r2,65535
800023dc:	00807d04 	movi	r2,500
800023e0:	1885203a 	divu	r2,r3,r2
800023e4:	10bfffcc 	andi	r2,r2,65535
800023e8:	10801fcc 	andi	r2,r2,127
800023ec:	1080c014 	ori	r2,r2,768
800023f0:	00000106 	br	800023f8 <ad9523_setup+0x2bc>
	ret = ad9523_spi_write(dev,
800023f4:	00802004 	movi	r2,128
800023f8:	100d883a 	mov	r6,r2
800023fc:	014000b4 	movhi	r5,2
80002400:	29400644 	addi	r5,r5,25
80002404:	e13ffd17 	ldw	r4,-12(fp)
80002408:	00017f80 	call	800017f8 <ad9523_spi_write>
8000240c:	e0bffc15 	stw	r2,-16(fp)
				      AD9523_PLL1_CHARGE_PUMP_CURRENT_nA(dev->pdata->
						      pll1_charge_pump_current_nA) |
				      AD9523_PLL1_CHARGE_PUMP_MODE_NORMAL |
				      AD9523_PLL1_BACKLASH_PW_MIN));
	if (ret < 0)
80002410:	e0bffc17 	ldw	r2,-16(fp)
80002414:	1000020e 	bge	r2,zero,80002420 <ad9523_setup+0x2e4>
		return ret;
80002418:	e0bffc17 	ldw	r2,-16(fp)
8000241c:	00024f06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_INPUT_RECEIVERS_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
80002420:	e0bffd17 	ldw	r2,-12(fp)
80002424:	10800b17 	ldw	r2,44(r2)
80002428:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
8000242c:	10803fcc 	andi	r2,r2,255
80002430:	10001226 	beq	r2,zero,8000247c <ad9523_setup+0x340>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_REFA_REFB_PWR_CTRL_EN |
80002434:	e0bffd17 	ldw	r2,-12(fp)
80002438:	10800b17 	ldw	r2,44(r2)
8000243c:	10800203 	ldbu	r2,8(r2)
80002440:	10803fcc 	andi	r2,r2,255
80002444:	10000226 	beq	r2,zero,80002450 <ad9523_setup+0x314>
80002448:	00800144 	movi	r2,5
8000244c:	00000106 	br	80002454 <ad9523_setup+0x318>
80002450:	00800104 	movi	r2,4
80002454:	e0fffd17 	ldw	r3,-12(fp)
80002458:	18c00b17 	ldw	r3,44(r3)
8000245c:	18c00303 	ldbu	r3,12(r3)
80002460:	18c03fcc 	andi	r3,r3,255
80002464:	18000226 	beq	r3,zero,80002470 <ad9523_setup+0x334>
80002468:	00c00084 	movi	r3,2
8000246c:	00000106 	br	80002474 <ad9523_setup+0x338>
80002470:	0007883a 	mov	r3,zero
80002474:	10c4b03a 	or	r2,r2,r3
80002478:	00003306 	br	80002548 <ad9523_setup+0x40c>
8000247c:	e0bffd17 	ldw	r2,-12(fp)
80002480:	10800b17 	ldw	r2,44(r2)
80002484:	10800143 	ldbu	r2,5(r2)
80002488:	10803fcc 	andi	r2,r2,255
8000248c:	10000226 	beq	r2,zero,80002498 <ad9523_setup+0x35c>
80002490:	00c00204 	movi	r3,8
80002494:	00000106 	br	8000249c <ad9523_setup+0x360>
80002498:	0007883a 	mov	r3,zero
8000249c:	e0bffd17 	ldw	r2,-12(fp)
800024a0:	10800b17 	ldw	r2,44(r2)
800024a4:	10800183 	ldbu	r2,6(r2)
800024a8:	10803fcc 	andi	r2,r2,255
800024ac:	10000226 	beq	r2,zero,800024b8 <ad9523_setup+0x37c>
800024b0:	00800404 	movi	r2,16
800024b4:	00000106 	br	800024bc <ad9523_setup+0x380>
800024b8:	0005883a 	mov	r2,zero
800024bc:	1886b03a 	or	r3,r3,r2
800024c0:	e0bffd17 	ldw	r2,-12(fp)
800024c4:	10800b17 	ldw	r2,44(r2)
800024c8:	10800203 	ldbu	r2,8(r2)
800024cc:	10803fcc 	andi	r2,r2,255
800024d0:	1004c03a 	cmpne	r2,r2,zero
800024d4:	10803fcc 	andi	r2,r2,255
800024d8:	1886b03a 	or	r3,r3,r2
800024dc:	e0bffd17 	ldw	r2,-12(fp)
800024e0:	10800b17 	ldw	r2,44(r2)
800024e4:	10800303 	ldbu	r2,12(r2)
800024e8:	10803fcc 	andi	r2,r2,255
800024ec:	10000226 	beq	r2,zero,800024f8 <ad9523_setup+0x3bc>
800024f0:	00800084 	movi	r2,2
800024f4:	00000106 	br	800024fc <ad9523_setup+0x3c0>
800024f8:	0005883a 	mov	r2,zero
800024fc:	10c6b03a 	or	r3,r2,r3
80002500:	e0bffd17 	ldw	r2,-12(fp)
80002504:	10800b17 	ldw	r2,44(r2)
80002508:	10800143 	ldbu	r2,5(r2)
8000250c:	10803fcc 	andi	r2,r2,255
80002510:	10000226 	beq	r2,zero,8000251c <ad9523_setup+0x3e0>
80002514:	00800804 	movi	r2,32
80002518:	00000106 	br	80002520 <ad9523_setup+0x3e4>
8000251c:	0005883a 	mov	r2,zero
80002520:	10c6b03a 	or	r3,r2,r3
80002524:	e0bffd17 	ldw	r2,-12(fp)
80002528:	10800b17 	ldw	r2,44(r2)
8000252c:	10800183 	ldbu	r2,6(r2)
80002530:	10803fcc 	andi	r2,r2,255
80002534:	10000226 	beq	r2,zero,80002540 <ad9523_setup+0x404>
80002538:	00801004 	movi	r2,64
8000253c:	00000106 	br	80002544 <ad9523_setup+0x408>
80002540:	0005883a 	mov	r2,zero
80002544:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
80002548:	100d883a 	mov	r6,r2
8000254c:	01400074 	movhi	r5,1
80002550:	29400684 	addi	r5,r5,26
80002554:	e13ffd17 	ldw	r4,-12(fp)
80002558:	00017f80 	call	800017f8 <ad9523_spi_write>
8000255c:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(osc_in_diff_en, AD9523_PLL1_OSC_IN_DIFF_EN) |
				      AD_IF(osc_in_cmos_neg_inp_en,
					    AD9523_PLL1_OSC_IN_CMOS_NEG_INP_EN) |
				      AD_IF(refa_diff_rcv_en, AD9523_PLL1_REFA_DIFF_RCV_EN) |
				      AD_IF(refb_diff_rcv_en, AD9523_PLL1_REFB_DIFF_RCV_EN)));
	if (ret < 0)
80002560:	e0bffc17 	ldw	r2,-16(fp)
80002564:	1000020e 	bge	r2,zero,80002570 <ad9523_setup+0x434>
		return ret;
80002568:	e0bffc17 	ldw	r2,-16(fp)
8000256c:	0001fb06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_REF_CTRL,
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
80002570:	e0bffd17 	ldw	r2,-12(fp)
80002574:	10800b17 	ldw	r2,44(r2)
80002578:	10800603 	ldbu	r2,24(r2)
	ret = ad9523_spi_write(dev,
8000257c:	10803fcc 	andi	r2,r2,255
80002580:	1000341e 	bne	r2,zero,80002654 <ad9523_setup+0x518>
			       AD_IFE(pll1_bypass_en, AD9523_PLL1_BYPASS_FEEDBACK_DIV_EN |
80002584:	e0bffd17 	ldw	r2,-12(fp)
80002588:	10800b17 	ldw	r2,44(r2)
8000258c:	108001c3 	ldbu	r2,7(r2)
80002590:	10803fcc 	andi	r2,r2,255
80002594:	10000226 	beq	r2,zero,800025a0 <ad9523_setup+0x464>
80002598:	00c00104 	movi	r3,4
8000259c:	00000106 	br	800025a4 <ad9523_setup+0x468>
800025a0:	0007883a 	mov	r3,zero
800025a4:	e0bffd17 	ldw	r2,-12(fp)
800025a8:	10800b17 	ldw	r2,44(r2)
800025ac:	108002c3 	ldbu	r2,11(r2)
800025b0:	10803fcc 	andi	r2,r2,255
800025b4:	10000226 	beq	r2,zero,800025c0 <ad9523_setup+0x484>
800025b8:	00800204 	movi	r2,8
800025bc:	00000106 	br	800025c4 <ad9523_setup+0x488>
800025c0:	0005883a 	mov	r2,zero
800025c4:	1886b03a 	or	r3,r3,r2
800025c8:	e0bffd17 	ldw	r2,-12(fp)
800025cc:	10800b17 	ldw	r2,44(r2)
800025d0:	10800583 	ldbu	r2,22(r2)
800025d4:	10803fcc 	andi	r2,r2,255
800025d8:	10000226 	beq	r2,zero,800025e4 <ad9523_setup+0x4a8>
800025dc:	00800804 	movi	r2,32
800025e0:	00000106 	br	800025e8 <ad9523_setup+0x4ac>
800025e4:	0005883a 	mov	r2,zero
800025e8:	10c6b03a 	or	r3,r2,r3
800025ec:	e0bffd17 	ldw	r2,-12(fp)
800025f0:	10800b17 	ldw	r2,44(r2)
800025f4:	108005c3 	ldbu	r2,23(r2)
800025f8:	10803fcc 	andi	r2,r2,255
800025fc:	10000226 	beq	r2,zero,80002608 <ad9523_setup+0x4cc>
80002600:	00800404 	movi	r2,16
80002604:	00000106 	br	8000260c <ad9523_setup+0x4d0>
80002608:	0005883a 	mov	r2,zero
8000260c:	10c6b03a 	or	r3,r2,r3
80002610:	e0bffd17 	ldw	r2,-12(fp)
80002614:	10800b17 	ldw	r2,44(r2)
80002618:	10800243 	ldbu	r2,9(r2)
8000261c:	10803fcc 	andi	r2,r2,255
80002620:	1004c03a 	cmpne	r2,r2,zero
80002624:	10803fcc 	andi	r2,r2,255
80002628:	1886b03a 	or	r3,r3,r2
8000262c:	e0bffd17 	ldw	r2,-12(fp)
80002630:	10800b17 	ldw	r2,44(r2)
80002634:	10800283 	ldbu	r2,10(r2)
80002638:	10803fcc 	andi	r2,r2,255
8000263c:	10000226 	beq	r2,zero,80002648 <ad9523_setup+0x50c>
80002640:	00800084 	movi	r2,2
80002644:	00000106 	br	8000264c <ad9523_setup+0x510>
80002648:	0005883a 	mov	r2,zero
8000264c:	10c4b03a 	or	r2,r2,r3
80002650:	00000106 	br	80002658 <ad9523_setup+0x51c>
	ret = ad9523_spi_write(dev,
80002654:	00801804 	movi	r2,96
80002658:	100d883a 	mov	r6,r2
8000265c:	01400074 	movhi	r5,1
80002660:	294006c4 	addi	r5,r5,27
80002664:	e13ffd17 	ldw	r4,-12(fp)
80002668:	00017f80 	call	800017f8 <ad9523_spi_write>
8000266c:	e0bffc15 	stw	r2,-16(fp)
				      AD_IF(zero_delay_mode_internal_en,
					    AD9523_PLL1_ZERO_DELAY_MODE_INT) |
				      AD_IF(osc_in_feedback_en, AD9523_PLL1_OSC_IN_PLL_FEEDBACK_EN) |
				      AD_IF(refa_cmos_neg_inp_en, AD9523_PLL1_REFA_CMOS_NEG_INP_EN) |
				      AD_IF(refb_cmos_neg_inp_en, AD9523_PLL1_REFB_CMOS_NEG_INP_EN)));
	if (ret < 0)
80002670:	e0bffc17 	ldw	r2,-16(fp)
80002674:	1000020e 	bge	r2,zero,80002680 <ad9523_setup+0x544>
		return ret;
80002678:	e0bffc17 	ldw	r2,-16(fp)
8000267c:	0001b706 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_MISC_CTRL,
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
			       AD9523_PLL1_REF_MODE(dev->pdata->ref_mode));
80002680:	e0bffd17 	ldw	r2,-12(fp)
80002684:	10800b17 	ldw	r2,44(r2)
80002688:	10800683 	ldbu	r2,26(r2)
8000268c:	10803fcc 	andi	r2,r2,255
80002690:	100490ba 	slli	r2,r2,2
			       AD9523_PLL1_REFB_INDEP_DIV_CTRL_EN |
80002694:	10802014 	ori	r2,r2,128
	ret = ad9523_spi_write(dev,
80002698:	100d883a 	mov	r6,r2
8000269c:	01400074 	movhi	r5,1
800026a0:	29400704 	addi	r5,r5,28
800026a4:	e13ffd17 	ldw	r4,-12(fp)
800026a8:	00017f80 	call	800017f8 <ad9523_spi_write>
800026ac:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
800026b0:	e0bffc17 	ldw	r2,-16(fp)
800026b4:	1000020e 	bge	r2,zero,800026c0 <ad9523_setup+0x584>
		return ret;
800026b8:	e0bffc17 	ldw	r2,-16(fp)
800026bc:	0001a706 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL1_LOOP_FILTER_CTRL,
			       AD9523_PLL1_LOOP_FILTER_RZERO(dev->pdata->
800026c0:	e0bffd17 	ldw	r2,-12(fp)
800026c4:	10800b17 	ldw	r2,44(r2)
800026c8:	10800643 	ldbu	r2,25(r2)
800026cc:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
800026d0:	108003cc 	andi	r2,r2,15
800026d4:	100d883a 	mov	r6,r2
800026d8:	01400074 	movhi	r5,1
800026dc:	29400744 	addi	r5,r5,29
800026e0:	e13ffd17 	ldw	r4,-12(fp)
800026e4:	00017f80 	call	800017f8 <ad9523_spi_write>
800026e8:	e0bffc15 	stw	r2,-16(fp)
					       pll1_loop_filter_rzero));
	if (ret < 0)
800026ec:	e0bffc17 	ldw	r2,-16(fp)
800026f0:	1000020e 	bge	r2,zero,800026fc <ad9523_setup+0x5c0>
		return ret;
800026f4:	e0bffc17 	ldw	r2,-16(fp)
800026f8:	00019806 	br	80002d5c <ad9523_setup+0xc20>
	 * PLL2 Setup
	 */

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CHARGE_PUMP,
			       AD9523_PLL2_CHARGE_PUMP_CURRENT_nA(dev->pdata->
800026fc:	e0bffd17 	ldw	r2,-12(fp)
80002700:	10800b17 	ldw	r2,44(r2)
80002704:	10c00717 	ldw	r3,28(r2)
	ret = ad9523_spi_write(dev,
80002708:	00836b04 	movi	r2,3500
8000270c:	1885203a 	divu	r2,r3,r2
80002710:	100d883a 	mov	r6,r2
80002714:	01400074 	movhi	r5,1
80002718:	29403c04 	addi	r5,r5,240
8000271c:	e13ffd17 	ldw	r4,-12(fp)
80002720:	00017f80 	call	800017f8 <ad9523_spi_write>
80002724:	e0bffc15 	stw	r2,-16(fp)
					       pll2_charge_pump_current_nA));
	if (ret < 0)
80002728:	e0bffc17 	ldw	r2,-16(fp)
8000272c:	1000020e 	bge	r2,zero,80002738 <ad9523_setup+0x5fc>
		return ret;
80002730:	e0bffc17 	ldw	r2,-16(fp)
80002734:	00018906 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_FEEDBACK_DIVIDER_AB,
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
80002738:	e0bffd17 	ldw	r2,-12(fp)
8000273c:	10800b17 	ldw	r2,44(r2)
80002740:	10800803 	ldbu	r2,32(r2)
80002744:	10803fcc 	andi	r2,r2,255
80002748:	100491ba 	slli	r2,r2,6
8000274c:	10c03fcc 	andi	r3,r2,255
			       AD9523_PLL2_FB_NDIV_B_CNT(dev->pdata->pll2_ndiv_b_cnt));
80002750:	e0bffd17 	ldw	r2,-12(fp)
80002754:	10800b17 	ldw	r2,44(r2)
80002758:	10800843 	ldbu	r2,33(r2)
8000275c:	10803fcc 	andi	r2,r2,255
80002760:	10800fcc 	andi	r2,r2,63
			       AD9523_PLL2_FB_NDIV_A_CNT(dev->pdata->pll2_ndiv_a_cnt) |
80002764:	1884b03a 	or	r2,r3,r2
	ret = ad9523_spi_write(dev,
80002768:	100d883a 	mov	r6,r2
8000276c:	01400074 	movhi	r5,1
80002770:	29403c44 	addi	r5,r5,241
80002774:	e13ffd17 	ldw	r4,-12(fp)
80002778:	00017f80 	call	800017f8 <ad9523_spi_write>
8000277c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
80002780:	e0bffc17 	ldw	r2,-16(fp)
80002784:	1000020e 	bge	r2,zero,80002790 <ad9523_setup+0x654>
		return ret;
80002788:	e0bffc17 	ldw	r2,-16(fp)
8000278c:	00017306 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_CTRL,
			       AD9523_PLL2_CHARGE_PUMP_MODE_NORMAL |
			       AD9523_PLL2_BACKLASH_CTRL_EN |
			       AD_IF(pll2_freq_doubler_en,
80002790:	e0bffd17 	ldw	r2,-12(fp)
80002794:	10800b17 	ldw	r2,44(r2)
80002798:	10800883 	ldbu	r2,34(r2)
	ret = ad9523_spi_write(dev,
8000279c:	10803fcc 	andi	r2,r2,255
800027a0:	10000226 	beq	r2,zero,800027ac <ad9523_setup+0x670>
800027a4:	00800cc4 	movi	r2,51
800027a8:	00000106 	br	800027b0 <ad9523_setup+0x674>
800027ac:	008004c4 	movi	r2,19
800027b0:	100d883a 	mov	r6,r2
800027b4:	01400074 	movhi	r5,1
800027b8:	29403c84 	addi	r5,r5,242
800027bc:	e13ffd17 	ldw	r4,-12(fp)
800027c0:	00017f80 	call	800017f8 <ad9523_spi_write>
800027c4:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_FREQ_DOUBLER_EN));
	if (ret < 0)
800027c8:	e0bffc17 	ldw	r2,-16(fp)
800027cc:	1000020e 	bge	r2,zero,800027d8 <ad9523_setup+0x69c>
		return ret;
800027d0:	e0bffc17 	ldw	r2,-16(fp)
800027d4:	00016106 	br	80002d5c <ad9523_setup+0xc20>

	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
800027d8:	e0bffd17 	ldw	r2,-12(fp)
800027dc:	10800b17 	ldw	r2,44(r2)
800027e0:	10c00017 	ldw	r3,0(r2)
800027e4:	e0bffd17 	ldw	r2,-12(fp)
800027e8:	10800b17 	ldw	r2,44(r2)
800027ec:	10800883 	ldbu	r2,34(r2)
800027f0:	10803fcc 	andi	r2,r2,255
800027f4:	10000226 	beq	r2,zero,80002800 <ad9523_setup+0x6c4>
800027f8:	00800084 	movi	r2,2
800027fc:	00000106 	br	80002804 <ad9523_setup+0x6c8>
80002800:	00800044 	movi	r2,1
80002804:	10c7383a 	mul	r3,r2,r3
				   / dev->pdata->pll2_r2_div) * AD9523_PLL2_FB_NDIV(dev->pdata->
80002808:	e0bffd17 	ldw	r2,-12(fp)
8000280c:	10800b17 	ldw	r2,44(r2)
80002810:	108008c3 	ldbu	r2,35(r2)
80002814:	10803fcc 	andi	r2,r2,255
80002818:	1885203a 	divu	r2,r3,r2
8000281c:	e0fffd17 	ldw	r3,-12(fp)
80002820:	18c00b17 	ldw	r3,44(r3)
80002824:	18c00843 	ldbu	r3,33(r3)
80002828:	18c03fcc 	andi	r3,r3,255
8000282c:	180890ba 	slli	r4,r3,2
80002830:	e0fffd17 	ldw	r3,-12(fp)
80002834:	18c00b17 	ldw	r3,44(r3)
80002838:	18c00803 	ldbu	r3,32(r3)
8000283c:	18c03fcc 	andi	r3,r3,255
80002840:	20c7883a 	add	r3,r4,r3
80002844:	10c7383a 	mul	r3,r2,r3
	dev->ad9523_st.vco_freq = (dev->pdata->vcxo_freq * (dev->pdata->pll2_freq_doubler_en ? 2 : 1)
80002848:	e0bffd17 	ldw	r2,-12(fp)
8000284c:	10c00315 	stw	r3,12(r2)
						   pll2_ndiv_a_cnt,
						   dev->pdata->
						   pll2_ndiv_b_cnt);

	ret = ad9523_spi_write(dev,
80002850:	01800084 	movi	r6,2
80002854:	01400074 	movhi	r5,1
80002858:	29403cc4 	addi	r5,r5,243
8000285c:	e13ffd17 	ldw	r4,-12(fp)
80002860:	00017f80 	call	800017f8 <ad9523_spi_write>
80002864:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_PLL2_VCO_CTRL,
			       AD9523_PLL2_VCO_CALIBRATE);
	if (ret < 0)
80002868:	e0bffc17 	ldw	r2,-16(fp)
8000286c:	1000020e 	bge	r2,zero,80002878 <ad9523_setup+0x73c>
		return ret;
80002870:	e0bffc17 	ldw	r2,-16(fp)
80002874:	00013906 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_VCO_DIVIDER,
			       AD9523_PLL2_VCO_DIV_M1(dev->pdata->
80002878:	e0bffd17 	ldw	r2,-12(fp)
8000287c:	10800b17 	ldw	r2,44(r2)
80002880:	10800903 	ldbu	r2,36(r2)
80002884:	10803fcc 	andi	r2,r2,255
80002888:	10bfff44 	addi	r2,r2,-3
8000288c:	10c000cc 	andi	r3,r2,3
					       pll2_vco_diff_m1) |
			       AD9523_PLL2_VCO_DIV_M2(dev->pdata->
80002890:	e0bffd17 	ldw	r2,-12(fp)
80002894:	10800b17 	ldw	r2,44(r2)
80002898:	10800943 	ldbu	r2,37(r2)
8000289c:	10803fcc 	andi	r2,r2,255
800028a0:	10bfff44 	addi	r2,r2,-3
800028a4:	1004913a 	slli	r2,r2,4
800028a8:	10800c0c 	andi	r2,r2,48
					       pll2_vco_diff_m1) |
800028ac:	1886b03a 	or	r3,r3,r2
					       pll2_vco_diff_m2) |
			       AD_IFE(pll2_vco_diff_m1,
800028b0:	e0bffd17 	ldw	r2,-12(fp)
800028b4:	10800b17 	ldw	r2,44(r2)
800028b8:	10800903 	ldbu	r2,36(r2)
800028bc:	10803fcc 	andi	r2,r2,255
800028c0:	10000226 	beq	r2,zero,800028cc <ad9523_setup+0x790>
800028c4:	0005883a 	mov	r2,zero
800028c8:	00000106 	br	800028d0 <ad9523_setup+0x794>
800028cc:	00800104 	movi	r2,4
					       pll2_vco_diff_m2) |
800028d0:	10c6b03a 	or	r3,r2,r3
				      0,
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
			       AD_IFE(pll2_vco_diff_m2,
800028d4:	e0bffd17 	ldw	r2,-12(fp)
800028d8:	10800b17 	ldw	r2,44(r2)
800028dc:	10800943 	ldbu	r2,37(r2)
800028e0:	10803fcc 	andi	r2,r2,255
800028e4:	10000226 	beq	r2,zero,800028f0 <ad9523_setup+0x7b4>
800028e8:	0005883a 	mov	r2,zero
800028ec:	00000106 	br	800028f4 <ad9523_setup+0x7b8>
800028f0:	00801004 	movi	r2,64
				      AD9523_PLL2_VCO_DIV_M1_PWR_DOWN_EN) |
800028f4:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
800028f8:	100d883a 	mov	r6,r2
800028fc:	01400074 	movhi	r5,1
80002900:	29403d04 	addi	r5,r5,244
80002904:	e13ffd17 	ldw	r4,-12(fp)
80002908:	00017f80 	call	800017f8 <ad9523_spi_write>
8000290c:	e0bffc15 	stw	r2,-16(fp)
				      0,
				      AD9523_PLL2_VCO_DIV_M2_PWR_DOWN_EN));
	if (ret < 0)
80002910:	e0bffc17 	ldw	r2,-16(fp)
80002914:	1000020e 	bge	r2,zero,80002920 <ad9523_setup+0x7e4>
		return ret;
80002918:	e0bffc17 	ldw	r2,-16(fp)
8000291c:	00010f06 	br	80002d5c <ad9523_setup+0xc20>

	if (dev->pdata->pll2_vco_diff_m1)
80002920:	e0bffd17 	ldw	r2,-12(fp)
80002924:	10800b17 	ldw	r2,44(r2)
80002928:	10800903 	ldbu	r2,36(r2)
8000292c:	10803fcc 	andi	r2,r2,255
80002930:	10000926 	beq	r2,zero,80002958 <ad9523_setup+0x81c>
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m1;
80002934:	e0bffd17 	ldw	r2,-12(fp)
80002938:	10c00317 	ldw	r3,12(r2)
8000293c:	e0bffd17 	ldw	r2,-12(fp)
80002940:	10800b17 	ldw	r2,44(r2)
80002944:	10800903 	ldbu	r2,36(r2)
80002948:	10803fcc 	andi	r2,r2,255
8000294c:	1887203a 	divu	r3,r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO1] =
80002950:	e0bffd17 	ldw	r2,-12(fp)
80002954:	10c00415 	stw	r3,16(r2)

	if (dev->pdata->pll2_vco_diff_m2)
80002958:	e0bffd17 	ldw	r2,-12(fp)
8000295c:	10800b17 	ldw	r2,44(r2)
80002960:	10800943 	ldbu	r2,37(r2)
80002964:	10803fcc 	andi	r2,r2,255
80002968:	10000926 	beq	r2,zero,80002990 <ad9523_setup+0x854>
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
			dev->ad9523_st.vco_freq / dev->pdata->pll2_vco_diff_m2;
8000296c:	e0bffd17 	ldw	r2,-12(fp)
80002970:	10c00317 	ldw	r3,12(r2)
80002974:	e0bffd17 	ldw	r2,-12(fp)
80002978:	10800b17 	ldw	r2,44(r2)
8000297c:	10800943 	ldbu	r2,37(r2)
80002980:	10803fcc 	andi	r2,r2,255
80002984:	1887203a 	divu	r3,r3,r2
		dev->ad9523_st.vco_out_freq[AD9523_VCO2] =
80002988:	e0bffd17 	ldw	r2,-12(fp)
8000298c:	10c00515 	stw	r3,20(r2)

	dev->ad9523_st.vco_out_freq[AD9523_VCXO] = dev->pdata->vcxo_freq;
80002990:	e0bffd17 	ldw	r2,-12(fp)
80002994:	10800b17 	ldw	r2,44(r2)
80002998:	10c00017 	ldw	r3,0(r2)
8000299c:	e0bffd17 	ldw	r2,-12(fp)
800029a0:	10c00615 	stw	r3,24(r2)

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_R2_DIVIDER,
			       AD9523_PLL2_R2_DIVIDER_VAL(dev->pdata->pll2_r2_div));
800029a4:	e0bffd17 	ldw	r2,-12(fp)
800029a8:	10800b17 	ldw	r2,44(r2)
800029ac:	108008c3 	ldbu	r2,35(r2)
800029b0:	10803fcc 	andi	r2,r2,255
	ret = ad9523_spi_write(dev,
800029b4:	108007cc 	andi	r2,r2,31
800029b8:	100d883a 	mov	r6,r2
800029bc:	01400074 	movhi	r5,1
800029c0:	29403dc4 	addi	r5,r5,247
800029c4:	e13ffd17 	ldw	r4,-12(fp)
800029c8:	00017f80 	call	800017f8 <ad9523_spi_write>
800029cc:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
800029d0:	e0bffc17 	ldw	r2,-16(fp)
800029d4:	1000020e 	bge	r2,zero,800029e0 <ad9523_setup+0x8a4>
		return ret;
800029d8:	e0bffc17 	ldw	r2,-16(fp)
800029dc:	0000df06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
			       AD9523_PLL2_LOOP_FILTER_CTRL,
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
800029e0:	e0bffd17 	ldw	r2,-12(fp)
800029e4:	10800b17 	ldw	r2,44(r2)
800029e8:	10800a03 	ldbu	r2,40(r2)
800029ec:	10803fcc 	andi	r2,r2,255
800029f0:	10c001cc 	andi	r3,r2,7
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
800029f4:	e0bffd17 	ldw	r2,-12(fp)
800029f8:	10800b17 	ldw	r2,44(r2)
800029fc:	108009c3 	ldbu	r2,39(r2)
80002a00:	10803fcc 	andi	r2,r2,255
80002a04:	100490fa 	slli	r2,r2,3
80002a08:	10800e0c 	andi	r2,r2,56
			       AD9523_PLL2_LOOP_FILTER_CPOLE1(dev->pdata->cpole1) |
80002a0c:	1886b03a 	or	r3,r3,r2
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
80002a10:	e0bffd17 	ldw	r2,-12(fp)
80002a14:	10800b17 	ldw	r2,44(r2)
80002a18:	10800983 	ldbu	r2,38(r2)
80002a1c:	10803fcc 	andi	r2,r2,255
80002a20:	100491ba 	slli	r2,r2,6
80002a24:	1080700c 	andi	r2,r2,448
			       AD9523_PLL2_LOOP_FILTER_RZERO(dev->pdata->rzero) |
80002a28:	1886b03a 	or	r3,r3,r2
			       AD_IF(rzero_bypass_en,
80002a2c:	e0bffd17 	ldw	r2,-12(fp)
80002a30:	10800b17 	ldw	r2,44(r2)
80002a34:	10800a43 	ldbu	r2,41(r2)
80002a38:	10803fcc 	andi	r2,r2,255
80002a3c:	10000226 	beq	r2,zero,80002a48 <ad9523_setup+0x90c>
80002a40:	00804004 	movi	r2,256
80002a44:	00000106 	br	80002a4c <ad9523_setup+0x910>
80002a48:	0005883a 	mov	r2,zero
			       AD9523_PLL2_LOOP_FILTER_RPOLE2(dev->pdata->rpole2) |
80002a4c:	10c4b03a 	or	r2,r2,r3
	ret = ad9523_spi_write(dev,
80002a50:	100d883a 	mov	r6,r2
80002a54:	014000b4 	movhi	r5,2
80002a58:	29403d84 	addi	r5,r5,246
80002a5c:	e13ffd17 	ldw	r4,-12(fp)
80002a60:	00017f80 	call	800017f8 <ad9523_spi_write>
80002a64:	e0bffc15 	stw	r2,-16(fp)
				     AD9523_PLL2_LOOP_FILTER_RZERO_BYPASS_EN));
	if (ret < 0)
80002a68:	e0bffc17 	ldw	r2,-16(fp)
80002a6c:	1000020e 	bge	r2,zero,80002a78 <ad9523_setup+0x93c>
		return ret;
80002a70:	e0bffc17 	ldw	r2,-16(fp)
80002a74:	0000b906 	br	80002d5c <ad9523_setup+0xc20>

	for (i = 0; i < dev->pdata->num_channels; i++) {
80002a78:	e03ffe15 	stw	zero,-8(fp)
80002a7c:	00006906 	br	80002c24 <ad9523_setup+0xae8>
		chan = &dev->pdata->channels[i];
80002a80:	e0bffd17 	ldw	r2,-12(fp)
80002a84:	10800b17 	ldw	r2,44(r2)
80002a88:	10c00c17 	ldw	r3,48(r2)
80002a8c:	e0bffe17 	ldw	r2,-8(fp)
80002a90:	108006a4 	muli	r2,r2,26
80002a94:	1885883a 	add	r2,r3,r2
80002a98:	e0bffb15 	stw	r2,-20(fp)
		if (chan->channel_num < AD9523_NUM_CHAN) {
80002a9c:	e0bffb17 	ldw	r2,-20(fp)
80002aa0:	10800003 	ldbu	r2,0(r2)
80002aa4:	10803fcc 	andi	r2,r2,255
80002aa8:	108003a8 	cmpgeui	r2,r2,14
80002aac:	10005a1e 	bne	r2,zero,80002c18 <ad9523_setup+0xadc>
			active_mask |= (1 << chan->channel_num);
80002ab0:	e0bffb17 	ldw	r2,-20(fp)
80002ab4:	10800003 	ldbu	r2,0(r2)
80002ab8:	10803fcc 	andi	r2,r2,255
80002abc:	00c00044 	movi	r3,1
80002ac0:	1884983a 	sll	r2,r3,r2
80002ac4:	1007883a 	mov	r3,r2
80002ac8:	e0bfff17 	ldw	r2,-4(fp)
80002acc:	10c4b03a 	or	r2,r2,r3
80002ad0:	e0bfff15 	stw	r2,-4(fp)
			ret = ad9523_spi_write(dev,
					       AD9523_CHANNEL_CLOCK_DIST(chan->channel_num),
80002ad4:	e0bffb17 	ldw	r2,-20(fp)
80002ad8:	10800003 	ldbu	r2,0(r2)
80002adc:	10803fcc 	andi	r2,r2,255
80002ae0:	108000e4 	muli	r2,r2,3
80002ae4:	10806484 	addi	r2,r2,402
80002ae8:	108000f4 	orhi	r2,r2,3
			ret = ad9523_spi_write(dev,
80002aec:	100b883a 	mov	r5,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
80002af0:	e0bffb17 	ldw	r2,-20(fp)
80002af4:	10800183 	ldbu	r2,6(r2)
80002af8:	10803fcc 	andi	r2,r2,255
80002afc:	10c003cc 	andi	r3,r2,15
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
80002b00:	e0bffb17 	ldw	r2,-20(fp)
80002b04:	1080020b 	ldhu	r2,8(r2)
80002b08:	10bfffcc 	andi	r2,r2,65535
80002b0c:	10bfffc4 	addi	r2,r2,-1
80002b10:	1008923a 	slli	r4,r2,8
80002b14:	00800134 	movhi	r2,4
80002b18:	10bfc004 	addi	r2,r2,-256
80002b1c:	2084703a 	and	r2,r4,r2
					       AD9523_CLK_DIST_DRIVER_MODE(chan->driver_mode) |
80002b20:	1886b03a 	or	r3,r3,r2
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
80002b24:	e0bffb17 	ldw	r2,-20(fp)
80002b28:	108001c3 	ldbu	r2,7(r2)
80002b2c:	10803fcc 	andi	r2,r2,255
80002b30:	100494ba 	slli	r2,r2,18
80002b34:	10803f2c 	andhi	r2,r2,252
					       AD9523_CLK_DIST_DIV(chan->channel_divider) |
80002b38:	1886b03a 	or	r3,r3,r2
					       (chan->sync_ignore_en ?
80002b3c:	e0bffb17 	ldw	r2,-20(fp)
80002b40:	10800083 	ldbu	r2,2(r2)
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
80002b44:	10803fcc 	andi	r2,r2,255
80002b48:	10000226 	beq	r2,zero,80002b54 <ad9523_setup+0xa18>
80002b4c:	00801004 	movi	r2,64
80002b50:	00000106 	br	80002b58 <ad9523_setup+0xa1c>
80002b54:	0005883a 	mov	r2,zero
					       AD9523_CLK_DIST_DIV_PHASE(chan->divider_phase) |
80002b58:	10c6b03a 	or	r3,r2,r3
					       (chan->divider_output_invert_en ?
80002b5c:	e0bffb17 	ldw	r2,-20(fp)
80002b60:	10800043 	ldbu	r2,1(r2)
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
80002b64:	10803fcc 	andi	r2,r2,255
80002b68:	10000226 	beq	r2,zero,80002b74 <ad9523_setup+0xa38>
80002b6c:	00802004 	movi	r2,128
80002b70:	00000106 	br	80002b78 <ad9523_setup+0xa3c>
80002b74:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_IGNORE_SYNC_EN : 0) |
80002b78:	10c6b03a 	or	r3,r2,r3
					       (chan->low_power_mode_en ?
80002b7c:	e0bffb17 	ldw	r2,-20(fp)
80002b80:	108000c3 	ldbu	r2,3(r2)
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
80002b84:	10803fcc 	andi	r2,r2,255
80002b88:	10000226 	beq	r2,zero,80002b94 <ad9523_setup+0xa58>
80002b8c:	00800404 	movi	r2,16
80002b90:	00000106 	br	80002b98 <ad9523_setup+0xa5c>
80002b94:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_INV_DIV_OUTPUT_EN : 0) |
80002b98:	10c6b03a 	or	r3,r2,r3
					       (chan->output_dis ?
80002b9c:	e0bffb17 	ldw	r2,-20(fp)
80002ba0:	10800143 	ldbu	r2,5(r2)
						AD9523_CLK_DIST_PWR_DOWN_EN : 0));
80002ba4:	10803fcc 	andi	r2,r2,255
80002ba8:	10000226 	beq	r2,zero,80002bb4 <ad9523_setup+0xa78>
80002bac:	00800804 	movi	r2,32
80002bb0:	00000106 	br	80002bb8 <ad9523_setup+0xa7c>
80002bb4:	0005883a 	mov	r2,zero
						AD9523_CLK_DIST_LOW_PWR_MODE_EN : 0) |
80002bb8:	10c4b03a 	or	r2,r2,r3
			ret = ad9523_spi_write(dev,
80002bbc:	100d883a 	mov	r6,r2
80002bc0:	e13ffd17 	ldw	r4,-12(fp)
80002bc4:	00017f80 	call	800017f8 <ad9523_spi_write>
80002bc8:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
80002bcc:	e0bffc17 	ldw	r2,-16(fp)
80002bd0:	1000020e 	bge	r2,zero,80002bdc <ad9523_setup+0xaa0>
				return ret;
80002bd4:	e0bffc17 	ldw	r2,-16(fp)
80002bd8:	00006006 	br	80002d5c <ad9523_setup+0xc20>

			ret = ad9523_vco_out_map(dev,
						 chan->channel_num,
80002bdc:	e0bffb17 	ldw	r2,-20(fp)
80002be0:	10800003 	ldbu	r2,0(r2)
			ret = ad9523_vco_out_map(dev,
80002be4:	10c03fcc 	andi	r3,r2,255
						 chan->use_alt_clock_src);
80002be8:	e0bffb17 	ldw	r2,-20(fp)
80002bec:	10800103 	ldbu	r2,4(r2)
			ret = ad9523_vco_out_map(dev,
80002bf0:	10803fcc 	andi	r2,r2,255
80002bf4:	100d883a 	mov	r6,r2
80002bf8:	180b883a 	mov	r5,r3
80002bfc:	e13ffd17 	ldw	r4,-12(fp)
80002c00:	00019080 	call	80001908 <ad9523_vco_out_map>
80002c04:	e0bffc15 	stw	r2,-16(fp)
			if (ret < 0)
80002c08:	e0bffc17 	ldw	r2,-16(fp)
80002c0c:	1000020e 	bge	r2,zero,80002c18 <ad9523_setup+0xadc>
				return ret;
80002c10:	e0bffc17 	ldw	r2,-16(fp)
80002c14:	00005106 	br	80002d5c <ad9523_setup+0xc20>
	for (i = 0; i < dev->pdata->num_channels; i++) {
80002c18:	e0bffe17 	ldw	r2,-8(fp)
80002c1c:	10800044 	addi	r2,r2,1
80002c20:	e0bffe15 	stw	r2,-8(fp)
80002c24:	e0bffd17 	ldw	r2,-12(fp)
80002c28:	10800b17 	ldw	r2,44(r2)
80002c2c:	10800b17 	ldw	r2,44(r2)
80002c30:	e0fffe17 	ldw	r3,-8(fp)
80002c34:	18bf9216 	blt	r3,r2,80002a80 <_gp+0xfffd1d0c>
		}
	}

	for(i = 0; i < AD9523_NUM_CHAN; i++) {
80002c38:	e03ffe15 	stw	zero,-8(fp)
80002c3c:	00001206 	br	80002c88 <ad9523_setup+0xb4c>
		if(!(active_mask & (1 << i))) {
80002c40:	00c00044 	movi	r3,1
80002c44:	e0bffe17 	ldw	r2,-8(fp)
80002c48:	1884983a 	sll	r2,r3,r2
80002c4c:	1007883a 	mov	r3,r2
80002c50:	e0bfff17 	ldw	r2,-4(fp)
80002c54:	1884703a 	and	r2,r3,r2
80002c58:	1000081e 	bne	r2,zero,80002c7c <ad9523_setup+0xb40>
			ad9523_spi_write(dev,
					 AD9523_CHANNEL_CLOCK_DIST(i),
80002c5c:	e0bffe17 	ldw	r2,-8(fp)
80002c60:	108000e4 	muli	r2,r2,3
80002c64:	10806484 	addi	r2,r2,402
80002c68:	108000f4 	orhi	r2,r2,3
			ad9523_spi_write(dev,
80002c6c:	01800804 	movi	r6,32
80002c70:	100b883a 	mov	r5,r2
80002c74:	e13ffd17 	ldw	r4,-12(fp)
80002c78:	00017f80 	call	800017f8 <ad9523_spi_write>
	for(i = 0; i < AD9523_NUM_CHAN; i++) {
80002c7c:	e0bffe17 	ldw	r2,-8(fp)
80002c80:	10800044 	addi	r2,r2,1
80002c84:	e0bffe15 	stw	r2,-8(fp)
80002c88:	e0bffe17 	ldw	r2,-8(fp)
80002c8c:	10800390 	cmplti	r2,r2,14
80002c90:	103feb1e 	bne	r2,zero,80002c40 <_gp+0xfffd1ecc>
					 AD9523_CLK_DIST_DRIVER_MODE(TRISTATE) |
					 AD9523_CLK_DIST_PWR_DOWN_EN);
		}
	}

	ret = ad9523_spi_write(dev,
80002c94:	000d883a 	mov	r6,zero
80002c98:	01400074 	movhi	r5,1
80002c9c:	29408cc4 	addi	r5,r5,563
80002ca0:	e13ffd17 	ldw	r4,-12(fp)
80002ca4:	00017f80 	call	800017f8 <ad9523_spi_write>
80002ca8:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_POWER_DOWN_CTRL,
			       0);
	if (ret < 0)
80002cac:	e0bffc17 	ldw	r2,-16(fp)
80002cb0:	1000020e 	bge	r2,zero,80002cbc <ad9523_setup+0xb80>
		return ret;
80002cb4:	e0bffc17 	ldw	r2,-16(fp)
80002cb8:	00002806 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_spi_write(dev,
80002cbc:	0180c084 	movi	r6,770
80002cc0:	014000f4 	movhi	r5,3
80002cc4:	29408c84 	addi	r5,r5,562
80002cc8:	e13ffd17 	ldw	r4,-12(fp)
80002ccc:	00017f80 	call	800017f8 <ad9523_spi_write>
80002cd0:	e0bffc15 	stw	r2,-16(fp)
			       AD9523_STATUS_SIGNALS,
			       AD9523_STATUS_MONITOR_01_PLL12_LOCKED);
	if (ret < 0)
80002cd4:	e0bffc17 	ldw	r2,-16(fp)
80002cd8:	1000020e 	bge	r2,zero,80002ce4 <ad9523_setup+0xba8>
		return ret;
80002cdc:	e0bffc17 	ldw	r2,-16(fp)
80002ce0:	00001e06 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_io_update(dev);
80002ce4:	e13ffd17 	ldw	r4,-12(fp)
80002ce8:	00018cc0 	call	800018cc <ad9523_io_update>
80002cec:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
80002cf0:	e0bffc17 	ldw	r2,-16(fp)
80002cf4:	1000020e 	bge	r2,zero,80002d00 <ad9523_setup+0xbc4>
		return ret;
80002cf8:	e0bffc17 	ldw	r2,-16(fp)
80002cfc:	00001706 	br	80002d5c <ad9523_setup+0xc20>

	ret = ad9523_sync(dev);
80002d00:	e13ffd17 	ldw	r4,-12(fp)
80002d04:	0001d880 	call	80001d88 <ad9523_sync>
80002d08:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
80002d0c:	e0bffc17 	ldw	r2,-16(fp)
80002d10:	1000020e 	bge	r2,zero,80002d1c <ad9523_setup+0xbe0>
		return ret;
80002d14:	e0bffc17 	ldw	r2,-16(fp)
80002d18:	00001006 	br	80002d5c <ad9523_setup+0xc20>

	ad9523_spi_write(dev,
80002d1c:	000d883a 	mov	r6,zero
80002d20:	01400074 	movhi	r5,1
80002d24:	29400104 	addi	r5,r5,4
80002d28:	e13ffd17 	ldw	r4,-12(fp)
80002d2c:	00017f80 	call	800017f8 <ad9523_spi_write>
			 AD9523_READBACK_CTRL,
			 0x0);
	ad9523_io_update(dev);
80002d30:	e13ffd17 	ldw	r4,-12(fp)
80002d34:	00018cc0 	call	800018cc <ad9523_io_update>
	ad9523_calibrate(dev);
80002d38:	e13ffd17 	ldw	r4,-12(fp)
80002d3c:	0001b580 	call	80001b58 <ad9523_calibrate>
	ad9523_sync(dev);
80002d40:	e13ffd17 	ldw	r4,-12(fp)
80002d44:	0001d880 	call	80001d88 <ad9523_sync>

	*device = dev;
80002d48:	e0bff817 	ldw	r2,-32(fp)
80002d4c:	e0fffd17 	ldw	r3,-12(fp)
80002d50:	10c00015 	stw	r3,0(r2)

	return(ad9523_status(dev));
80002d54:	e13ffd17 	ldw	r4,-12(fp)
80002d58:	0001c340 	call	80001c34 <ad9523_status>
}
80002d5c:	e037883a 	mov	sp,fp
80002d60:	dfc00117 	ldw	ra,4(sp)
80002d64:	df000017 	ldw	fp,0(sp)
80002d68:	dec00204 	addi	sp,sp,8
80002d6c:	f800283a 	ret

80002d70 <ad9523_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9523_remove(struct ad9523_dev *dev)
{
80002d70:	defffc04 	addi	sp,sp,-16
80002d74:	dfc00315 	stw	ra,12(sp)
80002d78:	df000215 	stw	fp,8(sp)
80002d7c:	df000204 	addi	fp,sp,8
80002d80:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
80002d84:	e0bffe17 	ldw	r2,-8(fp)
80002d88:	10800017 	ldw	r2,0(r2)
80002d8c:	1009883a 	mov	r4,r2
80002d90:	0007d0c0 	call	80007d0c <spi_remove>
80002d94:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
80002d98:	e13ffe17 	ldw	r4,-8(fp)
80002d9c:	000fc940 	call	8000fc94 <free>

	return ret;
80002da0:	e0bfff17 	ldw	r2,-4(fp)
}
80002da4:	e037883a 	mov	sp,fp
80002da8:	dfc00117 	ldw	ra,4(sp)
80002dac:	df000017 	ldw	fp,0(sp)
80002db0:	dec00204 	addi	sp,sp,8
80002db4:	f800283a 	ret

80002db8 <ad9680_spi_read>:
 * @brief ad9680_spi_read
 *******************************************************************************/
int32_t ad9680_spi_read(struct ad9680_dev *dev,
			uint16_t reg_addr,
			uint8_t *reg_data)
{
80002db8:	defff904 	addi	sp,sp,-28
80002dbc:	dfc00615 	stw	ra,24(sp)
80002dc0:	df000515 	stw	fp,20(sp)
80002dc4:	df000504 	addi	fp,sp,20
80002dc8:	e13ffd15 	stw	r4,-12(fp)
80002dcc:	2805883a 	mov	r2,r5
80002dd0:	e1bffb15 	stw	r6,-20(fp)
80002dd4:	e0bffc0d 	sth	r2,-16(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = 0x80 | (reg_addr >> 8);
80002dd8:	e0bffc0b 	ldhu	r2,-16(fp)
80002ddc:	1004d23a 	srli	r2,r2,8
80002de0:	1007883a 	mov	r3,r2
80002de4:	00bfe004 	movi	r2,-128
80002de8:	1884b03a 	or	r2,r3,r2
80002dec:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
80002df0:	e0bffc0b 	ldhu	r2,-16(fp)
80002df4:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = 0x00;
80002df8:	e03ffec5 	stb	zero,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
80002dfc:	e0bffd17 	ldw	r2,-12(fp)
80002e00:	10800017 	ldw	r2,0(r2)
80002e04:	e0fffe44 	addi	r3,fp,-7
80002e08:	018000c4 	movi	r6,3
80002e0c:	180b883a 	mov	r5,r3
80002e10:	1009883a 	mov	r4,r2
80002e14:	0007d400 	call	80007d40 <spi_write_and_read>
80002e18:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);
	*reg_data = buf[2];
80002e1c:	e0fffec3 	ldbu	r3,-5(fp)
80002e20:	e0bffb17 	ldw	r2,-20(fp)
80002e24:	10c00005 	stb	r3,0(r2)

	return ret;
80002e28:	e0bfff17 	ldw	r2,-4(fp)
}
80002e2c:	e037883a 	mov	sp,fp
80002e30:	dfc00117 	ldw	ra,4(sp)
80002e34:	df000017 	ldw	fp,0(sp)
80002e38:	dec00204 	addi	sp,sp,8
80002e3c:	f800283a 	ret

80002e40 <ad9680_spi_write>:
 * @brief ad9680_spi_write
 *******************************************************************************/
int32_t ad9680_spi_write(struct ad9680_dev *dev,
			 uint16_t reg_addr,
			 uint8_t reg_data)
{
80002e40:	defff904 	addi	sp,sp,-28
80002e44:	dfc00615 	stw	ra,24(sp)
80002e48:	df000515 	stw	fp,20(sp)
80002e4c:	df000504 	addi	fp,sp,20
80002e50:	e13ffd15 	stw	r4,-12(fp)
80002e54:	2805883a 	mov	r2,r5
80002e58:	3007883a 	mov	r3,r6
80002e5c:	e0bffc0d 	sth	r2,-16(fp)
80002e60:	1805883a 	mov	r2,r3
80002e64:	e0bffb05 	stb	r2,-20(fp)
	uint8_t buf[3];

	int32_t ret;

	buf[0] = reg_addr >> 8;
80002e68:	e0bffc0b 	ldhu	r2,-16(fp)
80002e6c:	1004d23a 	srli	r2,r2,8
80002e70:	e0bffe45 	stb	r2,-7(fp)
	buf[1] = reg_addr & 0xFF;
80002e74:	e0bffc0b 	ldhu	r2,-16(fp)
80002e78:	e0bffe85 	stb	r2,-6(fp)
	buf[2] = reg_data;
80002e7c:	e0bffb03 	ldbu	r2,-20(fp)
80002e80:	e0bffec5 	stb	r2,-5(fp)

	ret = spi_write_and_read(dev->spi_desc,
80002e84:	e0bffd17 	ldw	r2,-12(fp)
80002e88:	10800017 	ldw	r2,0(r2)
80002e8c:	e0fffe44 	addi	r3,fp,-7
80002e90:	018000c4 	movi	r6,3
80002e94:	180b883a 	mov	r5,r3
80002e98:	1009883a 	mov	r4,r2
80002e9c:	0007d400 	call	80007d40 <spi_write_and_read>
80002ea0:	e0bfff15 	stw	r2,-4(fp)
				 buf,
				 3);

	return ret;
80002ea4:	e0bfff17 	ldw	r2,-4(fp)
}
80002ea8:	e037883a 	mov	sp,fp
80002eac:	dfc00117 	ldw	ra,4(sp)
80002eb0:	df000017 	ldw	fp,0(sp)
80002eb4:	dec00204 	addi	sp,sp,8
80002eb8:	f800283a 	ret

80002ebc <ad9680_test>:
/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_test(struct ad9680_dev *dev,
		    uint32_t test_mode)
{
80002ebc:	defffc04 	addi	sp,sp,-16
80002ec0:	dfc00315 	stw	ra,12(sp)
80002ec4:	df000215 	stw	fp,8(sp)
80002ec8:	df000204 	addi	fp,sp,8
80002ecc:	e13fff15 	stw	r4,-4(fp)
80002ed0:	e17ffe15 	stw	r5,-8(fp)
	ad9680_spi_write(dev,
80002ed4:	e0bffe17 	ldw	r2,-8(fp)
80002ed8:	10803fcc 	andi	r2,r2,255
80002edc:	100d883a 	mov	r6,r2
80002ee0:	01415404 	movi	r5,1360
80002ee4:	e13fff17 	ldw	r4,-4(fp)
80002ee8:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_ADC_TEST_MODE,
			 test_mode);
	if (test_mode == AD9680_TEST_OFF)
80002eec:	e0bffe17 	ldw	r2,-8(fp)
80002ef0:	1000051e 	bne	r2,zero,80002f08 <ad9680_test+0x4c>
		ad9680_spi_write(dev,
80002ef4:	01800044 	movi	r6,1
80002ef8:	01415844 	movi	r5,1377
80002efc:	e13fff17 	ldw	r4,-4(fp)
80002f00:	0002e400 	call	80002e40 <ad9680_spi_write>
80002f04:	00000406 	br	80002f18 <ad9680_test+0x5c>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_2S_COMPLEMENT);
	else
		ad9680_spi_write(dev,
80002f08:	000d883a 	mov	r6,zero
80002f0c:	01415844 	movi	r5,1377
80002f10:	e13fff17 	ldw	r4,-4(fp)
80002f14:	0002e400 	call	80002e40 <ad9680_spi_write>
				 AD9680_REG_OUTPUT_MODE,
				 AD9680_FORMAT_OFFSET_BINARY);
	return(0);
80002f18:	0005883a 	mov	r2,zero
}
80002f1c:	e037883a 	mov	sp,fp
80002f20:	dfc00117 	ldw	ra,4(sp)
80002f24:	df000017 	ldw	fp,0(sp)
80002f28:	dec00204 	addi	sp,sp,8
80002f2c:	f800283a 	ret

80002f30 <ad9680_setup>:
/***************************************************************************//**
 * @brief ad9680_setup
 *******************************************************************************/
int32_t ad9680_setup(struct ad9680_dev **device,
		     const struct ad9680_init_param *init_param)
{
80002f30:	defff904 	addi	sp,sp,-28
80002f34:	dfc00615 	stw	ra,24(sp)
80002f38:	df000515 	stw	fp,20(sp)
80002f3c:	df000504 	addi	fp,sp,20
80002f40:	e13ffc15 	stw	r4,-16(fp)
80002f44:	e17ffb15 	stw	r5,-20(fp)
	uint8_t chip_id;
	uint8_t pll_stat;
	int32_t ret;
	struct ad9680_dev *dev;

	ret = 0;
80002f48:	e03fff15 	stw	zero,-4(fp)

	dev = (struct ad9680_dev *)malloc(sizeof(*dev));
80002f4c:	01000104 	movi	r4,4
80002f50:	000fc840 	call	8000fc84 <malloc>
80002f54:	e0bffe15 	stw	r2,-8(fp)
	if (!dev)
80002f58:	e0bffe17 	ldw	r2,-8(fp)
80002f5c:	1000021e 	bne	r2,zero,80002f68 <ad9680_setup+0x38>
		return -1;
80002f60:	00bfffc4 	movi	r2,-1
80002f64:	00005a06 	br	800030d0 <ad9680_setup+0x1a0>

	/* SPI */
	ret = spi_init(&dev->spi_desc, &init_param->spi_init);
80002f68:	e0bffe17 	ldw	r2,-8(fp)
80002f6c:	e0fffb17 	ldw	r3,-20(fp)
80002f70:	180b883a 	mov	r5,r3
80002f74:	1009883a 	mov	r4,r2
80002f78:	0007c480 	call	80007c48 <spi_init>
80002f7c:	e0bfff15 	stw	r2,-4(fp)

	ad9680_spi_read(dev,
80002f80:	e0bffdc4 	addi	r2,fp,-9
80002f84:	100d883a 	mov	r6,r2
80002f88:	01400104 	movi	r5,4
80002f8c:	e13ffe17 	ldw	r4,-8(fp)
80002f90:	0002db80 	call	80002db8 <ad9680_spi_read>
			AD9680_REG_CHIP_ID_LOW,
			&chip_id);
	if(chip_id != AD9680_CHIP_ID) {
80002f94:	e0bffdc3 	ldbu	r2,-9(fp)
80002f98:	10803fcc 	andi	r2,r2,255
80002f9c:	10803160 	cmpeqi	r2,r2,197
80002fa0:	1000081e 	bne	r2,zero,80002fc4 <ad9680_setup+0x94>
		printf("AD9680: Invalid CHIP ID (0x%x).\n", chip_id);
80002fa4:	e0bffdc3 	ldbu	r2,-9(fp)
80002fa8:	10803fcc 	andi	r2,r2,255
80002fac:	100b883a 	mov	r5,r2
80002fb0:	012000b4 	movhi	r4,32770
80002fb4:	21146404 	addi	r4,r4,20880
80002fb8:	0010d740 	call	80010d74 <printf>
		return -1;
80002fbc:	00bfffc4 	movi	r2,-1
80002fc0:	00004306 	br	800030d0 <ad9680_setup+0x1a0>
	}

	ad9680_spi_write(dev,
80002fc4:	01802044 	movi	r6,129
80002fc8:	000b883a 	mov	r5,zero
80002fcc:	e13ffe17 	ldw	r4,-8(fp)
80002fd0:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_INTERFACE_CONF_A,
			 0x81);	// RESET
	mdelay(250);
80002fd4:	01000134 	movhi	r4,4
80002fd8:	21342404 	addi	r4,r4,-12144
80002fdc:	00205040 	call	80020504 <usleep>

	ad9680_spi_write(dev,
80002fe0:	01800544 	movi	r6,21
80002fe4:	01415c44 	movi	r5,1393
80002fe8:	e13ffe17 	ldw	r4,-8(fp)
80002fec:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_LINK_CONTROL,
			 0x15);	// disable link, ilas enable
	ad9680_spi_write(dev,
80002ff0:	018007c4 	movi	r6,31
80002ff4:	01416344 	movi	r5,1421
80002ff8:	e13ffe17 	ldw	r4,-8(fp)
80002ffc:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_MF_CTRL,
			 0x1f);	// mf-frame-count
	ad9680_spi_write(dev,
80003000:	01800b44 	movi	r6,45
80003004:	014163c4 	movi	r5,1423
80003008:	e13ffe17 	ldw	r4,-8(fp)
8000300c:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_CSN_CONFIG,
			 0x2d);	// 14-bit
	ad9680_spi_write(dev,
80003010:	01800bc4 	movi	r6,47
80003014:	01416404 	movi	r5,1424
80003018:	e13ffe17 	ldw	r4,-8(fp)
8000301c:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_SUBCLASS_CONFIG,
			 0x2f);	// subclass-1, N'=16
	ad9680_spi_write(dev,
80003020:	01802204 	movi	r6,136
80003024:	01415c04 	movi	r5,1392
80003028:	e13ffe17 	ldw	r4,-8(fp)
8000302c:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_JESD204B_QUICK_CONFIG,
			 0x88);	// m=2, l=4, f= 1
	if (init_param->lane_rate_kbps < 6250000)
80003030:	e0bffb17 	ldw	r2,-20(fp)
80003034:	10c00417 	ldw	r3,16(r2)
80003038:	008017f4 	movhi	r2,95
8000303c:	109783c4 	addi	r2,r2,24079
80003040:	10c00536 	bltu	r2,r3,80003058 <ad9680_setup+0x128>
		ad9680_spi_write(dev,
80003044:	01800404 	movi	r6,16
80003048:	01415b84 	movi	r5,1390
8000304c:	e13ffe17 	ldw	r4,-8(fp)
80003050:	0002e400 	call	80002e40 <ad9680_spi_write>
80003054:	00000406 	br	80003068 <ad9680_setup+0x138>
				 AD9680_REG_JESD204B_LANE_RATE_CTRL,
				 0x10);	// low line rate mode must be enabled
	else
		ad9680_spi_write(dev,
80003058:	000d883a 	mov	r6,zero
8000305c:	01415b84 	movi	r5,1390
80003060:	e13ffe17 	ldw	r4,-8(fp)
80003064:	0002e400 	call	80002e40 <ad9680_spi_write>
				 AD9680_REG_JESD204B_LANE_RATE_CTRL,
				 0x00);	// low line rate mode must be disabled
	ad9680_spi_write(dev,
80003068:	01800504 	movi	r6,20
8000306c:	01415c44 	movi	r5,1393
80003070:	e13ffe17 	ldw	r4,-8(fp)
80003074:	0002e400 	call	80002e40 <ad9680_spi_write>
			 AD9680_REG_LINK_CONTROL,
			 0x14);	// link enable
	mdelay(250);
80003078:	01000134 	movhi	r4,4
8000307c:	21342404 	addi	r4,r4,-12144
80003080:	00205040 	call	80020504 <usleep>

	ad9680_spi_read(dev,
80003084:	e0bffd84 	addi	r2,fp,-10
80003088:	100d883a 	mov	r6,r2
8000308c:	01415bc4 	movi	r5,1391
80003090:	e13ffe17 	ldw	r4,-8(fp)
80003094:	0002db80 	call	80002db8 <ad9680_spi_read>
			AD9680_REG_JESD204B_PLL_LOCK_STATUS,
			&pll_stat);
	if ((pll_stat & 0x80) != 0x80) {
80003098:	e0bffd83 	ldbu	r2,-10(fp)
8000309c:	10803fcc 	andi	r2,r2,255
800030a0:	1080201c 	xori	r2,r2,128
800030a4:	10bfe004 	addi	r2,r2,-128
800030a8:	10000516 	blt	r2,zero,800030c0 <ad9680_setup+0x190>
		printf("AD9680: PLL is NOT locked!\n");
800030ac:	012000b4 	movhi	r4,32770
800030b0:	21146d04 	addi	r4,r4,20916
800030b4:	0010e980 	call	80010e98 <puts>
		ret = -1;
800030b8:	00bfffc4 	movi	r2,-1
800030bc:	e0bfff15 	stw	r2,-4(fp)
	}

	*device = dev;
800030c0:	e0bffc17 	ldw	r2,-16(fp)
800030c4:	e0fffe17 	ldw	r3,-8(fp)
800030c8:	10c00015 	stw	r3,0(r2)

	return ret;
800030cc:	e0bfff17 	ldw	r2,-4(fp)
}
800030d0:	e037883a 	mov	sp,fp
800030d4:	dfc00117 	ldw	ra,4(sp)
800030d8:	df000017 	ldw	fp,0(sp)
800030dc:	dec00204 	addi	sp,sp,8
800030e0:	f800283a 	ret

800030e4 <ad9680_remove>:
 * @param dev - The device structure.
 *
 * @return SUCCESS in case of success, negative error code otherwise.
*******************************************************************************/
int32_t ad9680_remove(struct ad9680_dev *dev)
{
800030e4:	defffc04 	addi	sp,sp,-16
800030e8:	dfc00315 	stw	ra,12(sp)
800030ec:	df000215 	stw	fp,8(sp)
800030f0:	df000204 	addi	fp,sp,8
800030f4:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = spi_remove(dev->spi_desc);
800030f8:	e0bffe17 	ldw	r2,-8(fp)
800030fc:	10800017 	ldw	r2,0(r2)
80003100:	1009883a 	mov	r4,r2
80003104:	0007d0c0 	call	80007d0c <spi_remove>
80003108:	e0bfff15 	stw	r2,-4(fp)

	free(dev);
8000310c:	e13ffe17 	ldw	r4,-8(fp)
80003110:	000fc940 	call	8000fc94 <free>

	return ret;
80003114:	e0bfff17 	ldw	r2,-4(fp)
}
80003118:	e037883a 	mov	sp,fp
8000311c:	dfc00117 	ldw	ra,4(sp)
80003120:	df000017 	ldw	fp,0(sp)
80003124:	dec00204 	addi	sp,sp,8
80003128:	f800283a 	ret

8000312c <adc_read>:
 * @brief adc_read
 *******************************************************************************/
int32_t adc_read(adc_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
8000312c:	defffb04 	addi	sp,sp,-20
80003130:	df000415 	stw	fp,16(sp)
80003134:	df000404 	addi	fp,sp,16
80003138:	e13ffe15 	stw	r4,-8(fp)
8000313c:	e17fff15 	stw	r5,-4(fp)
80003140:	e1bffd15 	stw	r6,-12(fp)
80003144:	e1fffc15 	stw	r7,-16(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
80003148:	e0fffe17 	ldw	r3,-8(fp)
8000314c:	e0bffd17 	ldw	r2,-12(fp)
80003150:	1885883a 	add	r2,r3,r2
80003154:	10800037 	ldwio	r2,0(r2)
80003158:	1007883a 	mov	r3,r2
8000315c:	e0bffc17 	ldw	r2,-16(fp)
80003160:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
80003164:	e0bffc17 	ldw	r2,-16(fp)
80003168:	10c00017 	ldw	r3,0(r2)
8000316c:	00b7abb4 	movhi	r2,57006
80003170:	10b7ab44 	addi	r2,r2,-8531
80003174:	1880021e 	bne	r3,r2,80003180 <adc_read+0x54>
		#ifdef DEBUG
			ad_printf("adc_read failed for register: %x", reg_addr);
		#endif
		return -1;
80003178:	00bfffc4 	movi	r2,-1
8000317c:	00000106 	br	80003184 <adc_read+0x58>
	} else {
		return 0;
80003180:	0005883a 	mov	r2,zero
	}
}
80003184:	e037883a 	mov	sp,fp
80003188:	df000017 	ldw	fp,0(sp)
8000318c:	dec00104 	addi	sp,sp,4
80003190:	f800283a 	ret

80003194 <adc_write>:
 * @brief adc_write
 *******************************************************************************/
int32_t adc_write(adc_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
80003194:	defffb04 	addi	sp,sp,-20
80003198:	df000415 	stw	fp,16(sp)
8000319c:	df000404 	addi	fp,sp,16
800031a0:	e13ffe15 	stw	r4,-8(fp)
800031a4:	e17fff15 	stw	r5,-4(fp)
800031a8:	e1bffd15 	stw	r6,-12(fp)
800031ac:	e1fffc15 	stw	r7,-16(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
800031b0:	e0fffe17 	ldw	r3,-8(fp)
800031b4:	e0bffd17 	ldw	r2,-12(fp)
800031b8:	1885883a 	add	r2,r3,r2
800031bc:	1007883a 	mov	r3,r2
800031c0:	e0bffc17 	ldw	r2,-16(fp)
800031c4:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return adc_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
800031c8:	0005883a 	mov	r2,zero
}
800031cc:	e037883a 	mov	sp,fp
800031d0:	df000017 	ldw	fp,0(sp)
800031d4:	dec00104 	addi	sp,sp,4
800031d8:	f800283a 	ret

800031dc <adc_setup>:

/***************************************************************************//**
 * @brief adc_setup
 *******************************************************************************/
int32_t adc_setup(adc_core core)
{
800031dc:	defff904 	addi	sp,sp,-28
800031e0:	dfc00615 	stw	ra,24(sp)
800031e4:	df000515 	stw	fp,20(sp)
800031e8:	df000504 	addi	fp,sp,20
800031ec:	e13ffb15 	stw	r4,-20(fp)
800031f0:	e17ffc15 	stw	r5,-16(fp)
	uint8_t	 index;
	uint32_t reg_data;
	uint32_t adc_clock;

	adc_read(core, ADC_REG_ID, &reg_data);
800031f4:	e0bffe04 	addi	r2,fp,-8
800031f8:	100f883a 	mov	r7,r2
800031fc:	01800104 	movi	r6,4
80003200:	e13ffb17 	ldw	r4,-20(fp)
80003204:	e17ffc17 	ldw	r5,-16(fp)
80003208:	000312c0 	call	8000312c <adc_read>
	if (reg_data)
8000320c:	e0bffe17 	ldw	r2,-8(fp)
80003210:	10000326 	beq	r2,zero,80003220 <adc_setup+0x44>
		core.master = 1;
80003214:	00800044 	movi	r2,1
80003218:	e0bffc05 	stb	r2,-16(fp)
8000321c:	00000106 	br	80003224 <adc_setup+0x48>
	else
		core.master = 0;
80003220:	e03ffc05 	stb	zero,-16(fp)

	adc_write(core, ADC_REG_RSTN, 0);
80003224:	000f883a 	mov	r7,zero
80003228:	01801004 	movi	r6,64
8000322c:	e13ffb17 	ldw	r4,-20(fp)
80003230:	e17ffc17 	ldw	r5,-16(fp)
80003234:	00031940 	call	80003194 <adc_write>
	adc_write(core, ADC_REG_RSTN, ADC_MMCM_RSTN | ADC_RSTN);
80003238:	01c000c4 	movi	r7,3
8000323c:	01801004 	movi	r6,64
80003240:	e13ffb17 	ldw	r4,-20(fp)
80003244:	e17ffc17 	ldw	r5,-16(fp)
80003248:	00031940 	call	80003194 <adc_write>

	for(index = 0; index < core.no_of_channels; index++) {
8000324c:	e03fffc5 	stb	zero,-1(fp)
80003250:	00000b06 	br	80003280 <adc_setup+0xa4>
		adc_write(core, ADC_REG_CHAN_CNTRL(index), ADC_FORMAT_SIGNEXT |
80003254:	e0bfffc3 	ldbu	r2,-1(fp)
80003258:	10800404 	addi	r2,r2,16
8000325c:	100491ba 	slli	r2,r2,6
80003260:	01c01444 	movi	r7,81
80003264:	100d883a 	mov	r6,r2
80003268:	e13ffb17 	ldw	r4,-20(fp)
8000326c:	e17ffc17 	ldw	r5,-16(fp)
80003270:	00031940 	call	80003194 <adc_write>
	for(index = 0; index < core.no_of_channels; index++) {
80003274:	e0bfffc3 	ldbu	r2,-1(fp)
80003278:	10800044 	addi	r2,r2,1
8000327c:	e0bfffc5 	stb	r2,-1(fp)
80003280:	e0bffc43 	ldbu	r2,-15(fp)
80003284:	e0ffffc3 	ldbu	r3,-1(fp)
80003288:	10803fcc 	andi	r2,r2,255
8000328c:	18bff136 	bltu	r3,r2,80003254 <_gp+0xfffd24e0>
							   ADC_FORMAT_ENABLE |
							   ADC_ENABLE);
	}

	mdelay(100);
80003290:	010000b4 	movhi	r4,2
80003294:	2121a804 	addi	r4,r4,-31072
80003298:	00205040 	call	80020504 <usleep>

	adc_read(core, ADC_REG_STATUS, &reg_data);
8000329c:	e0bffe04 	addi	r2,fp,-8
800032a0:	100f883a 	mov	r7,r2
800032a4:	01801704 	movi	r6,92
800032a8:	e13ffb17 	ldw	r4,-20(fp)
800032ac:	e17ffc17 	ldw	r5,-16(fp)
800032b0:	000312c0 	call	8000312c <adc_read>
	if(reg_data == 0x0) {
800032b4:	e0bffe17 	ldw	r2,-8(fp)
800032b8:	1000071e 	bne	r2,zero,800032d8 <adc_setup+0xfc>
		ad_printf("%s adc core Status errors.\n", __func__);
800032bc:	016000b4 	movhi	r5,32770
800032c0:	2954be04 	addi	r5,r5,21240
800032c4:	012000b4 	movhi	r4,32770
800032c8:	21147404 	addi	r4,r4,20944
800032cc:	0010d740 	call	80010d74 <printf>
		return -1;
800032d0:	00bfffc4 	movi	r2,-1
800032d4:	00001d06 	br	8000334c <adc_setup+0x170>
	}

	adc_read(core, ADC_REG_CLK_FREQ, &adc_clock);
800032d8:	e0bffd04 	addi	r2,fp,-12
800032dc:	100f883a 	mov	r7,r2
800032e0:	01801504 	movi	r6,84
800032e4:	e13ffb17 	ldw	r4,-20(fp)
800032e8:	e17ffc17 	ldw	r5,-16(fp)
800032ec:	000312c0 	call	8000312c <adc_read>
	adc_read(core, ADC_REG_CLK_RATIO, &reg_data);
800032f0:	e0bffe04 	addi	r2,fp,-8
800032f4:	100f883a 	mov	r7,r2
800032f8:	01801604 	movi	r6,88
800032fc:	e13ffb17 	ldw	r4,-20(fp)
80003300:	e17ffc17 	ldw	r5,-16(fp)
80003304:	000312c0 	call	8000312c <adc_read>
	adc_clock = (adc_clock * reg_data * 100) + 0x7fff;
80003308:	e0fffd17 	ldw	r3,-12(fp)
8000330c:	e0bffe17 	ldw	r2,-8(fp)
80003310:	1885383a 	mul	r2,r3,r2
80003314:	10801924 	muli	r2,r2,100
80003318:	109fffc4 	addi	r2,r2,32767
8000331c:	e0bffd15 	stw	r2,-12(fp)
	adc_clock = adc_clock >> 16;
80003320:	e0bffd17 	ldw	r2,-12(fp)
80003324:	1004d43a 	srli	r2,r2,16
80003328:	e0bffd15 	stw	r2,-12(fp)

	ad_printf("%s adc core initialized (%d MHz).\n", __func__, adc_clock);
8000332c:	e0bffd17 	ldw	r2,-12(fp)
80003330:	100d883a 	mov	r6,r2
80003334:	016000b4 	movhi	r5,32770
80003338:	2954be04 	addi	r5,r5,21240
8000333c:	012000b4 	movhi	r4,32770
80003340:	21147b04 	addi	r4,r4,20972
80003344:	0010d740 	call	80010d74 <printf>

	return 0;
80003348:	0005883a 	mov	r2,zero
}
8000334c:	e037883a 	mov	sp,fp
80003350:	dfc00117 	ldw	ra,4(sp)
80003354:	df000017 	ldw	fp,0(sp)
80003358:	dec00204 	addi	sp,sp,8
8000335c:	f800283a 	ret

80003360 <adc_set_delay>:
 *		and the output mode must be two's complement

 * @return 0.
*******************************************************************************/
uint32_t adc_set_delay(adc_core core, uint32_t no_of_lanes, uint32_t delay)
{
80003360:	defff704 	addi	sp,sp,-36
80003364:	dfc00815 	stw	ra,32(sp)
80003368:	df000715 	stw	fp,28(sp)
8000336c:	df000704 	addi	fp,sp,28
80003370:	e13ffb15 	stw	r4,-20(fp)
80003374:	e17ffc15 	stw	r5,-16(fp)
80003378:	e1bffa15 	stw	r6,-24(fp)
8000337c:	e1fff915 	stw	r7,-28(fp)
    uint32_t i;
    uint32_t rdata;
    uint32_t pcore_version;

    adc_read(core, 0x0, &pcore_version);
80003380:	e0bffd04 	addi	r2,fp,-12
80003384:	100f883a 	mov	r7,r2
80003388:	000d883a 	mov	r6,zero
8000338c:	e13ffb17 	ldw	r4,-20(fp)
80003390:	e17ffc17 	ldw	r5,-16(fp)
80003394:	000312c0 	call	8000312c <adc_read>
    pcore_version >>= 16;
80003398:	e0bffd17 	ldw	r2,-12(fp)
8000339c:	1004d43a 	srli	r2,r2,16
800033a0:	e0bffd15 	stw	r2,-12(fp)
    if (pcore_version < 9) {
800033a4:	e0bffd17 	ldw	r2,-12(fp)
800033a8:	10800268 	cmpgeui	r2,r2,9
800033ac:	10000a1e 	bne	r2,zero,800033d8 <adc_set_delay+0x78>
			    ad_printf(" pcore_version is : %d\n\r", pcore_version);
800033b0:	e0bffd17 	ldw	r2,-12(fp)
800033b4:	100b883a 	mov	r5,r2
800033b8:	012000b4 	movhi	r4,32770
800033bc:	21148404 	addi	r4,r4,21008
800033c0:	0010d740 	call	80010d74 <printf>
			    ad_printf(" DRIVER DOES NOT SUPPORT PCORE VERSIONS OLDER THAN 10 !");
800033c4:	012000b4 	movhi	r4,32770
800033c8:	21148b04 	addi	r4,r4,21036
800033cc:	0010d740 	call	80010d74 <printf>
			    return -1;
800033d0:	00bfffc4 	movi	r2,-1
800033d4:	00002406 	br	80003468 <adc_set_delay+0x108>
    } else {
		for (i = 0; i < no_of_lanes; i++) {
800033d8:	e03fff15 	stw	zero,-4(fp)
800033dc:	00001e06 	br	80003458 <adc_set_delay+0xf8>
			adc_write(core ,((0x200 + i)*4), delay);
800033e0:	e0bfff17 	ldw	r2,-4(fp)
800033e4:	10808004 	addi	r2,r2,512
800033e8:	100490ba 	slli	r2,r2,2
800033ec:	e1fff917 	ldw	r7,-28(fp)
800033f0:	100d883a 	mov	r6,r2
800033f4:	e13ffb17 	ldw	r4,-20(fp)
800033f8:	e17ffc17 	ldw	r5,-16(fp)
800033fc:	00031940 	call	80003194 <adc_write>
			adc_read(core ,((0x200 + i)*4), &rdata);
80003400:	e0bfff17 	ldw	r2,-4(fp)
80003404:	10808004 	addi	r2,r2,512
80003408:	100490ba 	slli	r2,r2,2
8000340c:	e0fffe04 	addi	r3,fp,-8
80003410:	180f883a 	mov	r7,r3
80003414:	100d883a 	mov	r6,r2
80003418:	e13ffb17 	ldw	r4,-20(fp)
8000341c:	e17ffc17 	ldw	r5,-16(fp)
80003420:	000312c0 	call	8000312c <adc_read>
			if (rdata != delay) {
80003424:	e0bffe17 	ldw	r2,-8(fp)
80003428:	e0fff917 	ldw	r3,-28(fp)
8000342c:	18800726 	beq	r3,r2,8000344c <adc_set_delay+0xec>
				ad_printf("adc_delay_1: sel(%2d), rcv(%04x), exp(%04x)\n\r", i, rdata, delay);
80003430:	e0bffe17 	ldw	r2,-8(fp)
80003434:	e1fff917 	ldw	r7,-28(fp)
80003438:	100d883a 	mov	r6,r2
8000343c:	e17fff17 	ldw	r5,-4(fp)
80003440:	012000b4 	movhi	r4,32770
80003444:	21149904 	addi	r4,r4,21092
80003448:	0010d740 	call	80010d74 <printf>
		for (i = 0; i < no_of_lanes; i++) {
8000344c:	e0bfff17 	ldw	r2,-4(fp)
80003450:	10800044 	addi	r2,r2,1
80003454:	e0bfff15 	stw	r2,-4(fp)
80003458:	e0ffff17 	ldw	r3,-4(fp)
8000345c:	e0bffa17 	ldw	r2,-24(fp)
80003460:	18bfdf36 	bltu	r3,r2,800033e0 <_gp+0xfffd266c>
			}
		}
    }

    return 0;
80003464:	0005883a 	mov	r2,zero
}
80003468:	e037883a 	mov	sp,fp
8000346c:	dfc00117 	ldw	ra,4(sp)
80003470:	df000017 	ldw	fp,0(sp)
80003474:	dec00204 	addi	sp,sp,8
80003478:	f800283a 	ret

8000347c <adc_delay_calibrate>:
 *
*******************************************************************************/
uint32_t adc_delay_calibrate(adc_core core,
			uint32_t no_of_lanes,
			enum adc_pn_sel sel)
{
8000347c:	deffe804 	addi	sp,sp,-96
80003480:	dfc01715 	stw	ra,92(sp)
80003484:	df001615 	stw	fp,88(sp)
80003488:	df001604 	addi	fp,sp,88
8000348c:	e13fec15 	stw	r4,-80(fp)
80003490:	e17fed15 	stw	r5,-76(fp)
80003494:	e1bfeb15 	stw	r6,-84(fp)
80003498:	e1ffea15 	stw	r7,-88(fp)
	uint8_t err_field[32] = {0};
8000349c:	e03ff515 	stw	zero,-44(fp)
800034a0:	e03ff615 	stw	zero,-40(fp)
800034a4:	e03ff715 	stw	zero,-36(fp)
800034a8:	e03ff815 	stw	zero,-32(fp)
800034ac:	e03ff915 	stw	zero,-28(fp)
800034b0:	e03ffa15 	stw	zero,-24(fp)
800034b4:	e03ffb15 	stw	zero,-20(fp)
800034b8:	e03ffc15 	stw	zero,-16(fp)
	uint16_t valid_range[5] = {0};
800034bc:	e03ff28d 	sth	zero,-54(fp)
800034c0:	e03ff30d 	sth	zero,-52(fp)
800034c4:	e03ff38d 	sth	zero,-50(fp)
800034c8:	e03ff40d 	sth	zero,-48(fp)
800034cc:	e03ff48d 	sth	zero,-46(fp)
	uint16_t invalid_range[5] = {0};
800034d0:	e03ff015 	stw	zero,-64(fp)
800034d4:	e03ff115 	stw	zero,-60(fp)
800034d8:	e03ff20d 	sth	zero,-56(fp)
	uint16_t delay = 0;
800034dc:	e03fff8d 	sth	zero,-2(fp)
	uint16_t start_valid_delay = 32;
800034e0:	00800804 	movi	r2,32
800034e4:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t start_invalid_delay = 32;
800034e8:	00800804 	movi	r2,32
800034ec:	e0bffe8d 	sth	r2,-6(fp)
	uint8_t interval = 0;
800034f0:	e03ffe45 	stb	zero,-7(fp)
	uint8_t max_interval = 0;
800034f4:	e03ffe05 	stb	zero,-8(fp)
	uint8_t max_valid_range = 0;
800034f8:	e03ffdc5 	stb	zero,-9(fp)
	uint8_t cnt_valid[5] = {0};
800034fc:	e03feec5 	stb	zero,-69(fp)
80003500:	e03fef05 	stb	zero,-68(fp)
80003504:	e03fef45 	stb	zero,-67(fp)
80003508:	e03fef85 	stb	zero,-66(fp)
8000350c:	e03fefc5 	stb	zero,-65(fp)
	uint8_t cnt_invalid = 0;
80003510:	e03ffd85 	stb	zero,-10(fp)
	uint8_t val = 0;
80003514:	e03ffd45 	stb	zero,-11(fp)
	uint8_t max_val = 32;
80003518:	00800804 	movi	r2,32
8000351c:	e0bffd05 	stb	r2,-12(fp)

	for (delay = 0; delay < 32; delay++) {
80003520:	e03fff8d 	sth	zero,-2(fp)
80003524:	00001f06 	br	800035a4 <adc_delay_calibrate+0x128>
		adc_set_delay(core, no_of_lanes, delay);
80003528:	e0bfff8b 	ldhu	r2,-2(fp)
8000352c:	100f883a 	mov	r7,r2
80003530:	e1bfeb17 	ldw	r6,-84(fp)
80003534:	e13fec17 	ldw	r4,-80(fp)
80003538:	e17fed17 	ldw	r5,-76(fp)
8000353c:	00033600 	call	80003360 <adc_set_delay>
		mdelay(20);
80003540:	01138804 	movi	r4,20000
80003544:	00205040 	call	80020504 <usleep>
		if (adc_pn_mon(core, sel) == 0) {
80003548:	e1bfea17 	ldw	r6,-88(fp)
8000354c:	e13fec17 	ldw	r4,-80(fp)
80003550:	e17fed17 	ldw	r5,-76(fp)
80003554:	00038b00 	call	800038b0 <adc_pn_mon>
80003558:	10000b1e 	bne	r2,zero,80003588 <adc_delay_calibrate+0x10c>
			err_field[delay] = 0;
8000355c:	e0bfff8b 	ldhu	r2,-2(fp)
80003560:	e085883a 	add	r2,fp,r2
80003564:	103ff505 	stb	zero,-44(r2)
			start_valid_delay = start_valid_delay == 32 ? delay : start_valid_delay;
80003568:	e0bfff0b 	ldhu	r2,-4(fp)
8000356c:	10800818 	cmpnei	r2,r2,32
80003570:	1000021e 	bne	r2,zero,8000357c <adc_delay_calibrate+0x100>
80003574:	e0bfff8b 	ldhu	r2,-2(fp)
80003578:	00000106 	br	80003580 <adc_delay_calibrate+0x104>
8000357c:	e0bfff0b 	ldhu	r2,-4(fp)
80003580:	e0bfff0d 	sth	r2,-4(fp)
80003584:	00000406 	br	80003598 <adc_delay_calibrate+0x11c>
		} else {
			err_field[delay] = 1;
80003588:	e0bfff8b 	ldhu	r2,-2(fp)
8000358c:	e085883a 	add	r2,fp,r2
80003590:	00c00044 	movi	r3,1
80003594:	10fff505 	stb	r3,-44(r2)
	for (delay = 0; delay < 32; delay++) {
80003598:	e0bfff8b 	ldhu	r2,-2(fp)
8000359c:	10800044 	addi	r2,r2,1
800035a0:	e0bfff8d 	sth	r2,-2(fp)
800035a4:	e0bfff8b 	ldhu	r2,-2(fp)
800035a8:	10800830 	cmpltui	r2,r2,32
800035ac:	103fde1e 	bne	r2,zero,80003528 <_gp+0xfffd27b4>
		}
	}
	if (start_valid_delay > 31) {
800035b0:	e0bfff0b 	ldhu	r2,-4(fp)
800035b4:	10800830 	cmpltui	r2,r2,32
800035b8:	10000c1e 	bne	r2,zero,800035ec <adc_delay_calibrate+0x170>
		ad_printf("%s FAILED.\n", __func__);
800035bc:	016000b4 	movhi	r5,32770
800035c0:	2954c104 	addi	r5,r5,21252
800035c4:	012000b4 	movhi	r4,32770
800035c8:	2114a504 	addi	r4,r4,21140
800035cc:	0010d740 	call	80010d74 <printf>
		adc_set_delay(core, no_of_lanes, 0);
800035d0:	000f883a 	mov	r7,zero
800035d4:	e1bfeb17 	ldw	r6,-84(fp)
800035d8:	e13fec17 	ldw	r4,-80(fp)
800035dc:	e17fed17 	ldw	r5,-76(fp)
800035e0:	00033600 	call	80003360 <adc_set_delay>
		return(1);
800035e4:	00800044 	movi	r2,1
800035e8:	00007e06 	br	800037e4 <adc_delay_calibrate+0x368>
	}

	start_valid_delay = 32;
800035ec:	00800804 	movi	r2,32
800035f0:	e0bfff0d 	sth	r2,-4(fp)
	start_invalid_delay = 32;
800035f4:	00800804 	movi	r2,32
800035f8:	e0bffe8d 	sth	r2,-6(fp)
	for (val = 0; val < max_val; val++) {
800035fc:	e03ffd45 	stb	zero,-11(fp)
80003600:	00004606 	br	8000371c <adc_delay_calibrate+0x2a0>
		if (err_field[val] == 0) {
80003604:	e0bffd43 	ldbu	r2,-11(fp)
80003608:	e085883a 	add	r2,fp,r2
8000360c:	10bff503 	ldbu	r2,-44(r2)
80003610:	10803fcc 	andi	r2,r2,255
80003614:	1000151e 	bne	r2,zero,8000366c <adc_delay_calibrate+0x1f0>
			if (start_valid_delay == 32) {
80003618:	e0bfff0b 	ldhu	r2,-4(fp)
8000361c:	10800818 	cmpnei	r2,r2,32
80003620:	1000021e 	bne	r2,zero,8000362c <adc_delay_calibrate+0x1b0>
				start_valid_delay = val;
80003624:	e0bffd43 	ldbu	r2,-11(fp)
80003628:	e0bfff0d 	sth	r2,-4(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
8000362c:	e0bfff0b 	ldhu	r2,-4(fp)
80003630:	10800820 	cmpeqi	r2,r2,32
80003634:	1000071e 	bne	r2,zero,80003654 <adc_delay_calibrate+0x1d8>
80003638:	e0bffe8b 	ldhu	r2,-6(fp)
8000363c:	10800820 	cmpeqi	r2,r2,32
80003640:	1000041e 	bne	r2,zero,80003654 <adc_delay_calibrate+0x1d8>
				start_valid_delay = 32;
80003644:	00800804 	movi	r2,32
80003648:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
8000364c:	00800804 	movi	r2,32
80003650:	e0bffe8d 	sth	r2,-6(fp)
			}
			cnt_valid[interval]++;
80003654:	e0bffe43 	ldbu	r2,-7(fp)
80003658:	e087883a 	add	r3,fp,r2
8000365c:	18ffeec3 	ldbu	r3,-69(r3)
80003660:	18c00044 	addi	r3,r3,1
80003664:	e085883a 	add	r2,fp,r2
80003668:	10ffeec5 	stb	r3,-69(r2)
		}
		if((err_field[val] == 1) || (val == max_val - 1)) {
8000366c:	e0bffd43 	ldbu	r2,-11(fp)
80003670:	e085883a 	add	r2,fp,r2
80003674:	10bff503 	ldbu	r2,-44(r2)
80003678:	10803fcc 	andi	r2,r2,255
8000367c:	10800060 	cmpeqi	r2,r2,1
80003680:	1000041e 	bne	r2,zero,80003694 <adc_delay_calibrate+0x218>
80003684:	e0fffd43 	ldbu	r3,-11(fp)
80003688:	e0bffd03 	ldbu	r2,-12(fp)
8000368c:	10bfffc4 	addi	r2,r2,-1
80003690:	18801f1e 	bne	r3,r2,80003710 <adc_delay_calibrate+0x294>
			if (start_invalid_delay == 32) {
80003694:	e0bffe8b 	ldhu	r2,-6(fp)
80003698:	10800818 	cmpnei	r2,r2,32
8000369c:	1000021e 	bne	r2,zero,800036a8 <adc_delay_calibrate+0x22c>
				start_invalid_delay = val;
800036a0:	e0bffd43 	ldbu	r2,-11(fp)
800036a4:	e0bffe8d 	sth	r2,-6(fp)
			}
			if (start_valid_delay != 32 && start_invalid_delay != 32 ) {
800036a8:	e0bfff0b 	ldhu	r2,-4(fp)
800036ac:	10800820 	cmpeqi	r2,r2,32
800036b0:	1000141e 	bne	r2,zero,80003704 <adc_delay_calibrate+0x288>
800036b4:	e0bffe8b 	ldhu	r2,-6(fp)
800036b8:	10800820 	cmpeqi	r2,r2,32
800036bc:	1000111e 	bne	r2,zero,80003704 <adc_delay_calibrate+0x288>
				valid_range[interval] = start_valid_delay;
800036c0:	e0bffe43 	ldbu	r2,-7(fp)
800036c4:	1085883a 	add	r2,r2,r2
800036c8:	e085883a 	add	r2,fp,r2
800036cc:	e0ffff0b 	ldhu	r3,-4(fp)
800036d0:	10fff28d 	sth	r3,-54(r2)
				invalid_range[interval] = start_invalid_delay;
800036d4:	e0bffe43 	ldbu	r2,-7(fp)
800036d8:	1085883a 	add	r2,r2,r2
800036dc:	e085883a 	add	r2,fp,r2
800036e0:	e0fffe8b 	ldhu	r3,-6(fp)
800036e4:	10fff00d 	sth	r3,-64(r2)
				start_valid_delay = 32;
800036e8:	00800804 	movi	r2,32
800036ec:	e0bfff0d 	sth	r2,-4(fp)
				start_invalid_delay = 32;
800036f0:	00800804 	movi	r2,32
800036f4:	e0bffe8d 	sth	r2,-6(fp)
				interval++;
800036f8:	e0bffe43 	ldbu	r2,-7(fp)
800036fc:	10800044 	addi	r2,r2,1
80003700:	e0bffe45 	stb	r2,-7(fp)
			}
			cnt_invalid++;
80003704:	e0bffd83 	ldbu	r2,-10(fp)
80003708:	10800044 	addi	r2,r2,1
8000370c:	e0bffd85 	stb	r2,-10(fp)
	for (val = 0; val < max_val; val++) {
80003710:	e0bffd43 	ldbu	r2,-11(fp)
80003714:	10800044 	addi	r2,r2,1
80003718:	e0bffd45 	stb	r2,-11(fp)
8000371c:	e0fffd43 	ldbu	r3,-11(fp)
80003720:	e0bffd03 	ldbu	r2,-12(fp)
80003724:	18bfb736 	bltu	r3,r2,80003604 <_gp+0xfffd2890>
		}
	}

	for (val = 0; val < 5; val++) {
80003728:	e03ffd45 	stb	zero,-11(fp)
8000372c:	00000f06 	br	8000376c <adc_delay_calibrate+0x2f0>
		if (cnt_valid[val] > max_valid_range) {
80003730:	e0bffd43 	ldbu	r2,-11(fp)
80003734:	e085883a 	add	r2,fp,r2
80003738:	10bfeec3 	ldbu	r2,-69(r2)
8000373c:	e0fffdc3 	ldbu	r3,-9(fp)
80003740:	10803fcc 	andi	r2,r2,255
80003744:	1880062e 	bgeu	r3,r2,80003760 <adc_delay_calibrate+0x2e4>
			max_valid_range = cnt_valid[val];
80003748:	e0bffd43 	ldbu	r2,-11(fp)
8000374c:	e085883a 	add	r2,fp,r2
80003750:	10bfeec3 	ldbu	r2,-69(r2)
80003754:	e0bffdc5 	stb	r2,-9(fp)
			max_interval = val;
80003758:	e0bffd43 	ldbu	r2,-11(fp)
8000375c:	e0bffe05 	stb	r2,-8(fp)
	for (val = 0; val < 5; val++) {
80003760:	e0bffd43 	ldbu	r2,-11(fp)
80003764:	10800044 	addi	r2,r2,1
80003768:	e0bffd45 	stb	r2,-11(fp)
8000376c:	e0bffd43 	ldbu	r2,-11(fp)
80003770:	10800170 	cmpltui	r2,r2,5
80003774:	103fee1e 	bne	r2,zero,80003730 <_gp+0xfffd29bc>
		}
	}

	delay = (valid_range[max_interval] + invalid_range[max_interval] - 1) / 2;
80003778:	e0bffe03 	ldbu	r2,-8(fp)
8000377c:	1085883a 	add	r2,r2,r2
80003780:	e085883a 	add	r2,fp,r2
80003784:	10bff28b 	ldhu	r2,-54(r2)
80003788:	10ffffcc 	andi	r3,r2,65535
8000378c:	e0bffe03 	ldbu	r2,-8(fp)
80003790:	1085883a 	add	r2,r2,r2
80003794:	e085883a 	add	r2,fp,r2
80003798:	10bff00b 	ldhu	r2,-64(r2)
8000379c:	10bfffcc 	andi	r2,r2,65535
800037a0:	1885883a 	add	r2,r3,r2
800037a4:	10ffffc4 	addi	r3,r2,-1
800037a8:	00800084 	movi	r2,2
800037ac:	1885283a 	div	r2,r3,r2
800037b0:	e0bfff8d 	sth	r2,-2(fp)

	ad_printf("adc_delay: setting zero error delay (%d)\n\r", delay);
800037b4:	e0bfff8b 	ldhu	r2,-2(fp)
800037b8:	100b883a 	mov	r5,r2
800037bc:	012000b4 	movhi	r4,32770
800037c0:	2114a804 	addi	r4,r4,21152
800037c4:	0010d740 	call	80010d74 <printf>
	adc_set_delay(core, no_of_lanes, delay);
800037c8:	e0bfff8b 	ldhu	r2,-2(fp)
800037cc:	100f883a 	mov	r7,r2
800037d0:	e1bfeb17 	ldw	r6,-84(fp)
800037d4:	e13fec17 	ldw	r4,-80(fp)
800037d8:	e17fed17 	ldw	r5,-76(fp)
800037dc:	00033600 	call	80003360 <adc_set_delay>
	for (delay = 0; delay < 32; delay++) {
		ad_printf("%d",err_field[delay]);
	}
#endif

    return(0);
800037e0:	0005883a 	mov	r2,zero
}
800037e4:	e037883a 	mov	sp,fp
800037e8:	dfc00117 	ldw	ra,4(sp)
800037ec:	df000017 	ldw	fp,0(sp)
800037f0:	dec00204 	addi	sp,sp,8
800037f4:	f800283a 	ret

800037f8 <adc_set_pnsel>:
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_set_pnsel(adc_core core,
		uint8_t channel,
		enum adc_pn_sel sel)
{
800037f8:	defff904 	addi	sp,sp,-28
800037fc:	dfc00615 	stw	ra,24(sp)
80003800:	df000515 	stw	fp,20(sp)
80003804:	df000504 	addi	fp,sp,20
80003808:	e13ffd15 	stw	r4,-12(fp)
8000380c:	e17ffe15 	stw	r5,-8(fp)
80003810:	3005883a 	mov	r2,r6
80003814:	e1fffb15 	stw	r7,-20(fp)
80003818:	e0bffc05 	stb	r2,-16(fp)
	uint32_t reg;

	adc_read(core, ADC_REG_CHAN_CNTRL_3(channel), &reg);
8000381c:	e0bffc03 	ldbu	r2,-16(fp)
80003820:	100491ba 	slli	r2,r2,6
80003824:	10810604 	addi	r2,r2,1048
80003828:	1007883a 	mov	r3,r2
8000382c:	e0bfff04 	addi	r2,fp,-4
80003830:	100f883a 	mov	r7,r2
80003834:	180d883a 	mov	r6,r3
80003838:	e13ffd17 	ldw	r4,-12(fp)
8000383c:	e17ffe17 	ldw	r5,-8(fp)
80003840:	000312c0 	call	8000312c <adc_read>
	reg &= ~ADC_ADC_PN_SEL(~0);
80003844:	e0ffff17 	ldw	r3,-4(fp)
80003848:	00bffc74 	movhi	r2,65521
8000384c:	10bfffc4 	addi	r2,r2,-1
80003850:	1884703a 	and	r2,r3,r2
80003854:	e0bfff15 	stw	r2,-4(fp)
	reg |= ADC_ADC_PN_SEL(sel);
80003858:	e0bffb17 	ldw	r2,-20(fp)
8000385c:	1004943a 	slli	r2,r2,16
80003860:	10c003ec 	andhi	r3,r2,15
80003864:	e0bfff17 	ldw	r2,-4(fp)
80003868:	1884b03a 	or	r2,r3,r2
8000386c:	e0bfff15 	stw	r2,-4(fp)
	adc_write(core, ADC_REG_CHAN_CNTRL_3(channel), reg);
80003870:	e0bffc03 	ldbu	r2,-16(fp)
80003874:	100491ba 	slli	r2,r2,6
80003878:	10810604 	addi	r2,r2,1048
8000387c:	1007883a 	mov	r3,r2
80003880:	e0bfff17 	ldw	r2,-4(fp)
80003884:	100f883a 	mov	r7,r2
80003888:	180d883a 	mov	r6,r3
8000388c:	e13ffd17 	ldw	r4,-12(fp)
80003890:	e17ffe17 	ldw	r5,-8(fp)
80003894:	00031940 	call	80003194 <adc_write>

	return 0;
80003898:	0005883a 	mov	r2,zero
}
8000389c:	e037883a 	mov	sp,fp
800038a0:	dfc00117 	ldw	ra,4(sp)
800038a4:	df000017 	ldw	fp,0(sp)
800038a8:	dec00204 	addi	sp,sp,8
800038ac:	f800283a 	ret

800038b0 <adc_pn_mon>:
 * @brief adc_pn_mon
 *	  Note: The device must be in PRBS test mode, when calling this function
 *******************************************************************************/
int32_t adc_pn_mon(adc_core core,
		enum adc_pn_sel sel)
{
800038b0:	defff804 	addi	sp,sp,-32
800038b4:	dfc00715 	stw	ra,28(sp)
800038b8:	df000615 	stw	fp,24(sp)
800038bc:	df000604 	addi	fp,sp,24
800038c0:	e13ffb15 	stw	r4,-20(fp)
800038c4:	e17ffc15 	stw	r5,-16(fp)
800038c8:	e1bffa15 	stw	r6,-24(fp)
	uint8_t	index;
	uint32_t reg_data;
	int32_t pn_errors = 0;
800038cc:	e03ffe15 	stw	zero,-8(fp)

	for (index = 0; index < core.no_of_channels; index++) {
800038d0:	e03fffc5 	stb	zero,-1(fp)
800038d4:	00002006 	br	80003958 <adc_pn_mon+0xa8>
 		adc_read(core, ADC_REG_CHAN_CNTRL(index), &reg_data);
800038d8:	e0bfffc3 	ldbu	r2,-1(fp)
800038dc:	10800404 	addi	r2,r2,16
800038e0:	100491ba 	slli	r2,r2,6
800038e4:	1007883a 	mov	r3,r2
800038e8:	e0bffd04 	addi	r2,fp,-12
800038ec:	100f883a 	mov	r7,r2
800038f0:	180d883a 	mov	r6,r3
800038f4:	e13ffb17 	ldw	r4,-20(fp)
800038f8:	e17ffc17 	ldw	r5,-16(fp)
800038fc:	000312c0 	call	8000312c <adc_read>
 		reg_data |= ADC_ENABLE;
80003900:	e0bffd17 	ldw	r2,-12(fp)
80003904:	10800054 	ori	r2,r2,1
80003908:	e0bffd15 	stw	r2,-12(fp)
 		adc_write(core, ADC_REG_CHAN_CNTRL(index), reg_data);
8000390c:	e0bfffc3 	ldbu	r2,-1(fp)
80003910:	10800404 	addi	r2,r2,16
80003914:	100491ba 	slli	r2,r2,6
80003918:	1007883a 	mov	r3,r2
8000391c:	e0bffd17 	ldw	r2,-12(fp)
80003920:	100f883a 	mov	r7,r2
80003924:	180d883a 	mov	r6,r3
80003928:	e13ffb17 	ldw	r4,-20(fp)
8000392c:	e17ffc17 	ldw	r5,-16(fp)
80003930:	00031940 	call	80003194 <adc_write>
		adc_set_pnsel(core, index, sel);
80003934:	e0bfffc3 	ldbu	r2,-1(fp)
80003938:	e1fffa17 	ldw	r7,-24(fp)
8000393c:	100d883a 	mov	r6,r2
80003940:	e13ffb17 	ldw	r4,-20(fp)
80003944:	e17ffc17 	ldw	r5,-16(fp)
80003948:	00037f80 	call	800037f8 <adc_set_pnsel>
	for (index = 0; index < core.no_of_channels; index++) {
8000394c:	e0bfffc3 	ldbu	r2,-1(fp)
80003950:	10800044 	addi	r2,r2,1
80003954:	e0bfffc5 	stb	r2,-1(fp)
80003958:	e0bffc43 	ldbu	r2,-15(fp)
8000395c:	e0ffffc3 	ldbu	r3,-1(fp)
80003960:	10803fcc 	andi	r2,r2,255
80003964:	18bfdc36 	bltu	r3,r2,800038d8 <_gp+0xfffd2b64>
	}
	mdelay(1);
80003968:	0100fa04 	movi	r4,1000
8000396c:	00205040 	call	80020504 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
80003970:	e03fffc5 	stb	zero,-1(fp)
80003974:	00000b06 	br	800039a4 <adc_pn_mon+0xf4>
		adc_write(core, ADC_REG_CHAN_STATUS(index), 0xff);
80003978:	e0bfffc3 	ldbu	r2,-1(fp)
8000397c:	100491ba 	slli	r2,r2,6
80003980:	10810104 	addi	r2,r2,1028
80003984:	01c03fc4 	movi	r7,255
80003988:	100d883a 	mov	r6,r2
8000398c:	e13ffb17 	ldw	r4,-20(fp)
80003990:	e17ffc17 	ldw	r5,-16(fp)
80003994:	00031940 	call	80003194 <adc_write>
	for (index = 0; index < core.no_of_channels; index++) {
80003998:	e0bfffc3 	ldbu	r2,-1(fp)
8000399c:	10800044 	addi	r2,r2,1
800039a0:	e0bfffc5 	stb	r2,-1(fp)
800039a4:	e0bffc43 	ldbu	r2,-15(fp)
800039a8:	e0ffffc3 	ldbu	r3,-1(fp)
800039ac:	10803fcc 	andi	r2,r2,255
800039b0:	18bff136 	bltu	r3,r2,80003978 <_gp+0xfffd2c04>
	}
	mdelay(100);
800039b4:	010000b4 	movhi	r4,2
800039b8:	2121a804 	addi	r4,r4,-31072
800039bc:	00205040 	call	80020504 <usleep>

	for (index = 0; index < core.no_of_channels; index++) {
800039c0:	e03fffc5 	stb	zero,-1(fp)
800039c4:	00001106 	br	80003a0c <adc_pn_mon+0x15c>
		adc_read(core, ADC_REG_CHAN_STATUS(index), &reg_data);
800039c8:	e0bfffc3 	ldbu	r2,-1(fp)
800039cc:	100491ba 	slli	r2,r2,6
800039d0:	10810104 	addi	r2,r2,1028
800039d4:	1007883a 	mov	r3,r2
800039d8:	e0bffd04 	addi	r2,fp,-12
800039dc:	100f883a 	mov	r7,r2
800039e0:	180d883a 	mov	r6,r3
800039e4:	e13ffb17 	ldw	r4,-20(fp)
800039e8:	e17ffc17 	ldw	r5,-16(fp)
800039ec:	000312c0 	call	8000312c <adc_read>
		if (reg_data != 0) {
800039f0:	e0bffd17 	ldw	r2,-12(fp)
800039f4:	10000226 	beq	r2,zero,80003a00 <adc_pn_mon+0x150>
			pn_errors = -1;
800039f8:	00bfffc4 	movi	r2,-1
800039fc:	e0bffe15 	stw	r2,-8(fp)
	for (index = 0; index < core.no_of_channels; index++) {
80003a00:	e0bfffc3 	ldbu	r2,-1(fp)
80003a04:	10800044 	addi	r2,r2,1
80003a08:	e0bfffc5 	stb	r2,-1(fp)
80003a0c:	e0bffc43 	ldbu	r2,-15(fp)
80003a10:	e0ffffc3 	ldbu	r3,-1(fp)
80003a14:	10803fcc 	andi	r2,r2,255
80003a18:	18bfeb36 	bltu	r3,r2,800039c8 <_gp+0xfffd2c54>
		}
	}

	return pn_errors;
80003a1c:	e0bffe17 	ldw	r2,-8(fp)
}
80003a20:	e037883a 	mov	sp,fp
80003a24:	dfc00117 	ldw	ra,4(sp)
80003a28:	df000017 	ldw	fp,0(sp)
80003a2c:	dec00204 	addi	sp,sp,8
80003a30:	f800283a 	ret

80003a34 <adc_ramp_test>:
 *******************************************************************************/
int32_t adc_ramp_test(adc_core core,
		uint8_t no_of_cores,
		uint32_t no_of_samples,
		uint32_t start_address)
{
80003a34:	deffd304 	addi	sp,sp,-180
80003a38:	dfc02c15 	stw	ra,176(sp)
80003a3c:	df002b15 	stw	fp,172(sp)
80003a40:	df002b04 	addi	fp,sp,172
80003a44:	e13fd815 	stw	r4,-160(fp)
80003a48:	e17fd915 	stw	r5,-156(fp)
80003a4c:	3005883a 	mov	r2,r6
80003a50:	e1ffd615 	stw	r7,-168(fp)
80003a54:	e0bfd705 	stb	r2,-164(fp)
	uint8_t	 err_cnt = 0;
80003a58:	e03fffc5 	stb	zero,-1(fp)
	uint16_t exp_data[32];
	uint16_t rcv_data[32];
	uint8_t index;
	uint32_t mask = ad_pow2(core.resolution);
80003a5c:	e0bfd983 	ldbu	r2,-154(fp)
80003a60:	10803fcc 	andi	r2,r2,255
80003a64:	1009883a 	mov	r4,r2
80003a68:	00083e80 	call	800083e8 <ad_pow2>
80003a6c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t no_of_channels = core.no_of_channels*no_of_cores;
80003a70:	e0bfd943 	ldbu	r2,-155(fp)
80003a74:	e0ffd703 	ldbu	r3,-164(fp)
80003a78:	1885383a 	mul	r2,r3,r2
80003a7c:	e0bffbc5 	stb	r2,-17(fp)
	uint32_t current_address = start_address;
80003a80:	e0800217 	ldw	r2,8(fp)
80003a84:	e0bffe15 	stw	r2,-8(fp)
	uint32_t last_address = start_address + (no_of_channels*no_of_samples)*2;
80003a88:	e0fffbc3 	ldbu	r3,-17(fp)
80003a8c:	e0bfd617 	ldw	r2,-168(fp)
80003a90:	1885383a 	mul	r2,r3,r2
80003a94:	1085883a 	add	r2,r2,r2
80003a98:	1007883a 	mov	r3,r2
80003a9c:	e0800217 	ldw	r2,8(fp)
80003aa0:	10c5883a 	add	r2,r2,r3
80003aa4:	e0bffa15 	stw	r2,-24(fp)
	uint32_t sample_count = 0;
80003aa8:	e03ffd15 	stw	zero,-12(fp)

	while (current_address < last_address) {
80003aac:	00011006 	br	80003ef0 <adc_ramp_test+0x4bc>

		// read data back from memory, one samples from each channel, min a word
		for (index=0; index<no_of_channels; index+=2) {
80003ab0:	e03fff85 	stb	zero,-2(fp)
80003ab4:	00001d06 	br	80003b2c <adc_ramp_test+0xf8>
			rcv_data[index] = ad_reg_read(current_address + index) & mask;
80003ab8:	e0ffff83 	ldbu	r3,-2(fp)
80003abc:	e0bffe17 	ldw	r2,-8(fp)
80003ac0:	1885883a 	add	r2,r3,r2
80003ac4:	10800037 	ldwio	r2,0(r2)
80003ac8:	1009883a 	mov	r4,r2
80003acc:	e0bffc17 	ldw	r2,-16(fp)
80003ad0:	1007883a 	mov	r3,r2
80003ad4:	e0bfff83 	ldbu	r2,-2(fp)
80003ad8:	20c6703a 	and	r3,r4,r3
80003adc:	1085883a 	add	r2,r2,r2
80003ae0:	e085883a 	add	r2,fp,r2
80003ae4:	10ffda0d 	sth	r3,-152(r2)
			rcv_data[index+1] = (ad_reg_read(current_address + index) >> 16) & mask;
80003ae8:	e0ffff83 	ldbu	r3,-2(fp)
80003aec:	e0bffe17 	ldw	r2,-8(fp)
80003af0:	1885883a 	add	r2,r3,r2
80003af4:	10800037 	ldwio	r2,0(r2)
80003af8:	1005d43a 	srai	r2,r2,16
80003afc:	1009883a 	mov	r4,r2
80003b00:	e0bffc17 	ldw	r2,-16(fp)
80003b04:	1007883a 	mov	r3,r2
80003b08:	e0bfff83 	ldbu	r2,-2(fp)
80003b0c:	10800044 	addi	r2,r2,1
80003b10:	20c6703a 	and	r3,r4,r3
80003b14:	1085883a 	add	r2,r2,r2
80003b18:	e085883a 	add	r2,fp,r2
80003b1c:	10ffda0d 	sth	r3,-152(r2)
		for (index=0; index<no_of_channels; index+=2) {
80003b20:	e0bfff83 	ldbu	r2,-2(fp)
80003b24:	10800084 	addi	r2,r2,2
80003b28:	e0bfff85 	stb	r2,-2(fp)
80003b2c:	e0ffff83 	ldbu	r3,-2(fp)
80003b30:	e0bffbc3 	ldbu	r2,-17(fp)
80003b34:	18bfe036 	bltu	r3,r2,80003ab8 <_gp+0xfffd2d44>
		}

		// generate expected data
		for (index=0; index<no_of_channels; index+=2) {
80003b38:	e03fff85 	stb	zero,-2(fp)
80003b3c:	00008406 	br	80003d50 <adc_ramp_test+0x31c>
			if (current_address == start_address) {
80003b40:	e0fffe17 	ldw	r3,-8(fp)
80003b44:	e0800217 	ldw	r2,8(fp)
80003b48:	1880131e 	bne	r3,r2,80003b98 <adc_ramp_test+0x164>
				exp_data[index] = rcv_data[index];
80003b4c:	e0ffff83 	ldbu	r3,-2(fp)
80003b50:	e0bfff83 	ldbu	r2,-2(fp)
80003b54:	18c7883a 	add	r3,r3,r3
80003b58:	e0c7883a 	add	r3,fp,r3
80003b5c:	18ffda0b 	ldhu	r3,-152(r3)
80003b60:	1085883a 	add	r2,r2,r2
80003b64:	e085883a 	add	r2,fp,r2
80003b68:	10ffea0d 	sth	r3,-88(r2)
				exp_data[index+1] = rcv_data[index+1];
80003b6c:	e0bfff83 	ldbu	r2,-2(fp)
80003b70:	10c00044 	addi	r3,r2,1
80003b74:	e0bfff83 	ldbu	r2,-2(fp)
80003b78:	10800044 	addi	r2,r2,1
80003b7c:	18c7883a 	add	r3,r3,r3
80003b80:	e0c7883a 	add	r3,fp,r3
80003b84:	18ffda0b 	ldhu	r3,-152(r3)
80003b88:	1085883a 	add	r2,r2,r2
80003b8c:	e085883a 	add	r2,fp,r2
80003b90:	10ffea0d 	sth	r3,-88(r2)
80003b94:	00006b06 	br	80003d44 <adc_ramp_test+0x310>
			} else {
				if(no_of_channels < 2) {
80003b98:	e0bffbc3 	ldbu	r2,-17(fp)
80003b9c:	108000a8 	cmpgeui	r2,r2,2
80003ba0:	10003f1e 	bne	r2,zero,80003ca0 <adc_ramp_test+0x26c>
					exp_data[index] = ((exp_data[index]+2) > mask) ? ((exp_data[index]+2) & mask) : (exp_data[index] + 2);
80003ba4:	e0bfff83 	ldbu	r2,-2(fp)
80003ba8:	1085883a 	add	r2,r2,r2
80003bac:	e085883a 	add	r2,fp,r2
80003bb0:	10bfea0b 	ldhu	r2,-88(r2)
80003bb4:	10bfffcc 	andi	r2,r2,65535
80003bb8:	10800084 	addi	r2,r2,2
80003bbc:	1007883a 	mov	r3,r2
80003bc0:	e0bffc17 	ldw	r2,-16(fp)
80003bc4:	10c00a2e 	bgeu	r2,r3,80003bf0 <adc_ramp_test+0x1bc>
80003bc8:	e0bfff83 	ldbu	r2,-2(fp)
80003bcc:	1085883a 	add	r2,r2,r2
80003bd0:	e085883a 	add	r2,fp,r2
80003bd4:	10bfea0b 	ldhu	r2,-88(r2)
80003bd8:	10800084 	addi	r2,r2,2
80003bdc:	1007883a 	mov	r3,r2
80003be0:	e0bffc17 	ldw	r2,-16(fp)
80003be4:	1884703a 	and	r2,r3,r2
80003be8:	1007883a 	mov	r3,r2
80003bec:	00000606 	br	80003c08 <adc_ramp_test+0x1d4>
80003bf0:	e0bfff83 	ldbu	r2,-2(fp)
80003bf4:	1085883a 	add	r2,r2,r2
80003bf8:	e085883a 	add	r2,fp,r2
80003bfc:	10bfea0b 	ldhu	r2,-88(r2)
80003c00:	10800084 	addi	r2,r2,2
80003c04:	1007883a 	mov	r3,r2
80003c08:	e0bfff83 	ldbu	r2,-2(fp)
80003c0c:	1085883a 	add	r2,r2,r2
80003c10:	e085883a 	add	r2,fp,r2
80003c14:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = ((exp_data[index+1]+2) > mask) ? ((exp_data[index+1]+2) & mask) : (exp_data[index+1] + 2);
80003c18:	e0bfff83 	ldbu	r2,-2(fp)
80003c1c:	10800044 	addi	r2,r2,1
80003c20:	1085883a 	add	r2,r2,r2
80003c24:	e085883a 	add	r2,fp,r2
80003c28:	10bfea0b 	ldhu	r2,-88(r2)
80003c2c:	10bfffcc 	andi	r2,r2,65535
80003c30:	10800084 	addi	r2,r2,2
80003c34:	1007883a 	mov	r3,r2
80003c38:	e0bffc17 	ldw	r2,-16(fp)
80003c3c:	10c00b2e 	bgeu	r2,r3,80003c6c <adc_ramp_test+0x238>
80003c40:	e0bfff83 	ldbu	r2,-2(fp)
80003c44:	10800044 	addi	r2,r2,1
80003c48:	1085883a 	add	r2,r2,r2
80003c4c:	e085883a 	add	r2,fp,r2
80003c50:	10bfea0b 	ldhu	r2,-88(r2)
80003c54:	10800084 	addi	r2,r2,2
80003c58:	1007883a 	mov	r3,r2
80003c5c:	e0bffc17 	ldw	r2,-16(fp)
80003c60:	1884703a 	and	r2,r3,r2
80003c64:	1007883a 	mov	r3,r2
80003c68:	00000706 	br	80003c88 <adc_ramp_test+0x254>
80003c6c:	e0bfff83 	ldbu	r2,-2(fp)
80003c70:	10800044 	addi	r2,r2,1
80003c74:	1085883a 	add	r2,r2,r2
80003c78:	e085883a 	add	r2,fp,r2
80003c7c:	10bfea0b 	ldhu	r2,-88(r2)
80003c80:	10800084 	addi	r2,r2,2
80003c84:	1007883a 	mov	r3,r2
80003c88:	e0bfff83 	ldbu	r2,-2(fp)
80003c8c:	10800044 	addi	r2,r2,1
80003c90:	1085883a 	add	r2,r2,r2
80003c94:	e085883a 	add	r2,fp,r2
80003c98:	10ffea0d 	sth	r3,-88(r2)
80003c9c:	00002906 	br	80003d44 <adc_ramp_test+0x310>
				} else {
					exp_data[index] = (exp_data[index] == mask) ? 0 : exp_data[index] + 1;
80003ca0:	e0bfff83 	ldbu	r2,-2(fp)
80003ca4:	1085883a 	add	r2,r2,r2
80003ca8:	e085883a 	add	r2,fp,r2
80003cac:	10bfea0b 	ldhu	r2,-88(r2)
80003cb0:	10bfffcc 	andi	r2,r2,65535
80003cb4:	e0fffc17 	ldw	r3,-16(fp)
80003cb8:	18800726 	beq	r3,r2,80003cd8 <adc_ramp_test+0x2a4>
80003cbc:	e0bfff83 	ldbu	r2,-2(fp)
80003cc0:	1085883a 	add	r2,r2,r2
80003cc4:	e085883a 	add	r2,fp,r2
80003cc8:	10bfea0b 	ldhu	r2,-88(r2)
80003ccc:	10800044 	addi	r2,r2,1
80003cd0:	1007883a 	mov	r3,r2
80003cd4:	00000106 	br	80003cdc <adc_ramp_test+0x2a8>
80003cd8:	0007883a 	mov	r3,zero
80003cdc:	e0bfff83 	ldbu	r2,-2(fp)
80003ce0:	1085883a 	add	r2,r2,r2
80003ce4:	e085883a 	add	r2,fp,r2
80003ce8:	10ffea0d 	sth	r3,-88(r2)
					exp_data[index+1] = (exp_data[index+1] == mask) ? 0 : exp_data[index+1] + 1;
80003cec:	e0bfff83 	ldbu	r2,-2(fp)
80003cf0:	10800044 	addi	r2,r2,1
80003cf4:	1085883a 	add	r2,r2,r2
80003cf8:	e085883a 	add	r2,fp,r2
80003cfc:	10bfea0b 	ldhu	r2,-88(r2)
80003d00:	10bfffcc 	andi	r2,r2,65535
80003d04:	e0fffc17 	ldw	r3,-16(fp)
80003d08:	18800826 	beq	r3,r2,80003d2c <adc_ramp_test+0x2f8>
80003d0c:	e0bfff83 	ldbu	r2,-2(fp)
80003d10:	10800044 	addi	r2,r2,1
80003d14:	1085883a 	add	r2,r2,r2
80003d18:	e085883a 	add	r2,fp,r2
80003d1c:	10bfea0b 	ldhu	r2,-88(r2)
80003d20:	10800044 	addi	r2,r2,1
80003d24:	1007883a 	mov	r3,r2
80003d28:	00000106 	br	80003d30 <adc_ramp_test+0x2fc>
80003d2c:	0007883a 	mov	r3,zero
80003d30:	e0bfff83 	ldbu	r2,-2(fp)
80003d34:	10800044 	addi	r2,r2,1
80003d38:	1085883a 	add	r2,r2,r2
80003d3c:	e085883a 	add	r2,fp,r2
80003d40:	10ffea0d 	sth	r3,-88(r2)
		for (index=0; index<no_of_channels; index+=2) {
80003d44:	e0bfff83 	ldbu	r2,-2(fp)
80003d48:	10800084 	addi	r2,r2,2
80003d4c:	e0bfff85 	stb	r2,-2(fp)
80003d50:	e0ffff83 	ldbu	r3,-2(fp)
80003d54:	e0bffbc3 	ldbu	r2,-17(fp)
80003d58:	18bf7936 	bltu	r3,r2,80003b40 <_gp+0xfffd2dcc>
				}
			}
		}

		// compare received and expected
		for (index=0; index<no_of_channels; index+=2) {
80003d5c:	e03fff85 	stb	zero,-2(fp)
80003d60:	00004e06 	br	80003e9c <adc_ramp_test+0x468>
			if ((rcv_data[index] != exp_data[index]) || (rcv_data[index+1] != exp_data[index+1])) {
80003d64:	e0bfff83 	ldbu	r2,-2(fp)
80003d68:	1085883a 	add	r2,r2,r2
80003d6c:	e085883a 	add	r2,fp,r2
80003d70:	10ffda0b 	ldhu	r3,-152(r2)
80003d74:	e0bfff83 	ldbu	r2,-2(fp)
80003d78:	1085883a 	add	r2,r2,r2
80003d7c:	e085883a 	add	r2,fp,r2
80003d80:	10bfea0b 	ldhu	r2,-88(r2)
80003d84:	18ffffcc 	andi	r3,r3,65535
80003d88:	10bfffcc 	andi	r2,r2,65535
80003d8c:	18800d1e 	bne	r3,r2,80003dc4 <adc_ramp_test+0x390>
80003d90:	e0bfff83 	ldbu	r2,-2(fp)
80003d94:	10800044 	addi	r2,r2,1
80003d98:	1085883a 	add	r2,r2,r2
80003d9c:	e085883a 	add	r2,fp,r2
80003da0:	10ffda0b 	ldhu	r3,-152(r2)
80003da4:	e0bfff83 	ldbu	r2,-2(fp)
80003da8:	10800044 	addi	r2,r2,1
80003dac:	1085883a 	add	r2,r2,r2
80003db0:	e085883a 	add	r2,fp,r2
80003db4:	10bfea0b 	ldhu	r2,-88(r2)
80003db8:	18ffffcc 	andi	r3,r3,65535
80003dbc:	10bfffcc 	andi	r2,r2,65535
80003dc0:	18803326 	beq	r3,r2,80003e90 <adc_ramp_test+0x45c>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003dc4:	e0ffff83 	ldbu	r3,-2(fp)
80003dc8:	e0bffd17 	ldw	r2,-12(fp)
80003dcc:	1887883a 	add	r3,r3,r2
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
80003dd0:	e0bfff83 	ldbu	r2,-2(fp)
80003dd4:	1085883a 	add	r2,r2,r2
80003dd8:	e085883a 	add	r2,fp,r2
80003ddc:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003de0:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index, rcv_data[index], exp_data[index]);
80003de4:	e0bfff83 	ldbu	r2,-2(fp)
80003de8:	1085883a 	add	r2,r2,r2
80003dec:	e085883a 	add	r2,fp,r2
80003df0:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003df4:	10bfffcc 	andi	r2,r2,65535
80003df8:	d8800015 	stw	r2,0(sp)
80003dfc:	200f883a 	mov	r7,r4
80003e00:	180d883a 	mov	r6,r3
80003e04:	016000b4 	movhi	r5,32770
80003e08:	2954c604 	addi	r5,r5,21272
80003e0c:	012000b4 	movhi	r4,32770
80003e10:	2114b304 	addi	r4,r4,21196
80003e14:	0010d740 	call	80010d74 <printf>
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
80003e18:	e0ffff83 	ldbu	r3,-2(fp)
80003e1c:	e0bffd17 	ldw	r2,-12(fp)
80003e20:	1885883a 	add	r2,r3,r2
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003e24:	10c00044 	addi	r3,r2,1
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
80003e28:	e0bfff83 	ldbu	r2,-2(fp)
80003e2c:	10800044 	addi	r2,r2,1
80003e30:	1085883a 	add	r2,r2,r2
80003e34:	e085883a 	add	r2,fp,r2
80003e38:	10bfda0b 	ldhu	r2,-152(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003e3c:	113fffcc 	andi	r4,r2,65535
						__func__, sample_count+index+1, rcv_data[index+1], exp_data[index+1]);
80003e40:	e0bfff83 	ldbu	r2,-2(fp)
80003e44:	10800044 	addi	r2,r2,1
80003e48:	1085883a 	add	r2,r2,r2
80003e4c:	e085883a 	add	r2,fp,r2
80003e50:	10bfea0b 	ldhu	r2,-88(r2)
				ad_printf("%s Capture Error[%d]: rcv(%08x) exp(%08x).\n",
80003e54:	10bfffcc 	andi	r2,r2,65535
80003e58:	d8800015 	stw	r2,0(sp)
80003e5c:	200f883a 	mov	r7,r4
80003e60:	180d883a 	mov	r6,r3
80003e64:	016000b4 	movhi	r5,32770
80003e68:	2954c604 	addi	r5,r5,21272
80003e6c:	012000b4 	movhi	r4,32770
80003e70:	2114b304 	addi	r4,r4,21196
80003e74:	0010d740 	call	80010d74 <printf>
				err_cnt++;
80003e78:	e0bfffc3 	ldbu	r2,-1(fp)
80003e7c:	10800044 	addi	r2,r2,1
80003e80:	e0bfffc5 	stb	r2,-1(fp)
				if (err_cnt == 50) break;
80003e84:	e0bfffc3 	ldbu	r2,-1(fp)
80003e88:	10800c98 	cmpnei	r2,r2,50
80003e8c:	10000726 	beq	r2,zero,80003eac <adc_ramp_test+0x478>
		for (index=0; index<no_of_channels; index+=2) {
80003e90:	e0bfff83 	ldbu	r2,-2(fp)
80003e94:	10800084 	addi	r2,r2,2
80003e98:	e0bfff85 	stb	r2,-2(fp)
80003e9c:	e0ffff83 	ldbu	r3,-2(fp)
80003ea0:	e0bffbc3 	ldbu	r2,-17(fp)
80003ea4:	18bfaf36 	bltu	r3,r2,80003d64 <_gp+0xfffd2ff0>
80003ea8:	00000106 	br	80003eb0 <adc_ramp_test+0x47c>
				if (err_cnt == 50) break;
80003eac:	0001883a 	nop
			}
		}
		sample_count+=index;
80003eb0:	e0bfff83 	ldbu	r2,-2(fp)
80003eb4:	e0fffd17 	ldw	r3,-12(fp)
80003eb8:	1885883a 	add	r2,r3,r2
80003ebc:	e0bffd15 	stw	r2,-12(fp)

		// increment address pointer
		current_address = (no_of_channels == 1) ? (current_address+4) :
80003ec0:	e0bffbc3 	ldbu	r2,-17(fp)
80003ec4:	10800058 	cmpnei	r2,r2,1
80003ec8:	1000031e 	bne	r2,zero,80003ed8 <adc_ramp_test+0x4a4>
80003ecc:	e0bffe17 	ldw	r2,-8(fp)
80003ed0:	10800104 	addi	r2,r2,4
80003ed4:	00000506 	br	80003eec <adc_ramp_test+0x4b8>
							(current_address+(no_of_channels*2));
80003ed8:	e0bffbc3 	ldbu	r2,-17(fp)
80003edc:	1085883a 	add	r2,r2,r2
80003ee0:	1007883a 	mov	r3,r2
		current_address = (no_of_channels == 1) ? (current_address+4) :
80003ee4:	e0bffe17 	ldw	r2,-8(fp)
80003ee8:	1885883a 	add	r2,r3,r2
80003eec:	e0bffe15 	stw	r2,-8(fp)
	while (current_address < last_address) {
80003ef0:	e0fffe17 	ldw	r3,-8(fp)
80003ef4:	e0bffa17 	ldw	r2,-24(fp)
80003ef8:	18beed36 	bltu	r3,r2,80003ab0 <_gp+0xfffd2d3c>
	}

	if (err_cnt)
80003efc:	e0bfffc3 	ldbu	r2,-1(fp)
80003f00:	10000226 	beq	r2,zero,80003f0c <adc_ramp_test+0x4d8>
		return -1;
80003f04:	00bfffc4 	movi	r2,-1
80003f08:	00000106 	br	80003f10 <adc_ramp_test+0x4dc>
	else
		return 0;
80003f0c:	0005883a 	mov	r2,zero
}
80003f10:	e037883a 	mov	sp,fp
80003f14:	dfc00117 	ldw	ra,4(sp)
80003f18:	df000017 	ldw	fp,0(sp)
80003f1c:	dec00204 	addi	sp,sp,8
80003f20:	f800283a 	ret

80003f24 <I2C_Init>:
 * @return status - Result of the initialization procedure.
 *                  Example: 1 - if initialization was successful;
 *                           0 - if initialization was unsuccessful.
*******************************************************************************/
unsigned char I2C_Init(unsigned long clockFreq)
{
80003f24:	defffe04 	addi	sp,sp,-8
80003f28:	df000115 	stw	fp,4(sp)
80003f2c:	df000104 	addi	fp,sp,4
80003f30:	e13fff15 	stw	r4,-4(fp)
    /* Add your code here. */
}
80003f34:	0001883a 	nop
80003f38:	e037883a 	mov	sp,fp
80003f3c:	df000017 	ldw	fp,0(sp)
80003f40:	dec00104 	addi	sp,sp,4
80003f44:	f800283a 	ret

80003f48 <I2C_Write>:
*******************************************************************************/
unsigned char I2C_Write(unsigned char slaveAddress,
                        unsigned char* dataBuffer,
                        unsigned char bytesNumber,
                        unsigned char stopBit)
{
80003f48:	defffb04 	addi	sp,sp,-20
80003f4c:	df000415 	stw	fp,16(sp)
80003f50:	df000404 	addi	fp,sp,16
80003f54:	2005883a 	mov	r2,r4
80003f58:	e17ffe15 	stw	r5,-8(fp)
80003f5c:	3009883a 	mov	r4,r6
80003f60:	3807883a 	mov	r3,r7
80003f64:	e0bfff05 	stb	r2,-4(fp)
80003f68:	2005883a 	mov	r2,r4
80003f6c:	e0bffd05 	stb	r2,-12(fp)
80003f70:	1805883a 	mov	r2,r3
80003f74:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
80003f78:	0001883a 	nop
80003f7c:	e037883a 	mov	sp,fp
80003f80:	df000017 	ldw	fp,0(sp)
80003f84:	dec00104 	addi	sp,sp,4
80003f88:	f800283a 	ret

80003f8c <I2C_Read>:
*******************************************************************************/
unsigned char I2C_Read(unsigned char slaveAddress,
                       unsigned char* dataBuffer,
                       unsigned char bytesNumber,
                       unsigned char stopBit)
{
80003f8c:	defffb04 	addi	sp,sp,-20
80003f90:	df000415 	stw	fp,16(sp)
80003f94:	df000404 	addi	fp,sp,16
80003f98:	2005883a 	mov	r2,r4
80003f9c:	e17ffe15 	stw	r5,-8(fp)
80003fa0:	3009883a 	mov	r4,r6
80003fa4:	3807883a 	mov	r3,r7
80003fa8:	e0bfff05 	stb	r2,-4(fp)
80003fac:	2005883a 	mov	r2,r4
80003fb0:	e0bffd05 	stb	r2,-12(fp)
80003fb4:	1805883a 	mov	r2,r3
80003fb8:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
80003fbc:	0001883a 	nop
80003fc0:	e037883a 	mov	sp,fp
80003fc4:	df000017 	ldw	fp,0(sp)
80003fc8:	dec00104 	addi	sp,sp,4
80003fcc:	f800283a 	ret

80003fd0 <SPI_Init>:
*******************************************************************************/
unsigned char SPI_Init(unsigned char lsbFirst,
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockEdg)
{
80003fd0:	defffb04 	addi	sp,sp,-20
80003fd4:	df000415 	stw	fp,16(sp)
80003fd8:	df000404 	addi	fp,sp,16
80003fdc:	2005883a 	mov	r2,r4
80003fe0:	e17ffe15 	stw	r5,-8(fp)
80003fe4:	3009883a 	mov	r4,r6
80003fe8:	3807883a 	mov	r3,r7
80003fec:	e0bfff05 	stb	r2,-4(fp)
80003ff0:	2005883a 	mov	r2,r4
80003ff4:	e0bffd05 	stb	r2,-12(fp)
80003ff8:	1805883a 	mov	r2,r3
80003ffc:	e0bffc05 	stb	r2,-16(fp)
    /* Add your code here. */
}
80004000:	0001883a 	nop
80004004:	e037883a 	mov	sp,fp
80004008:	df000017 	ldw	fp,0(sp)
8000400c:	dec00104 	addi	sp,sp,4
80004010:	f800283a 	ret

80004014 <SPI_Read>:
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char slaveDeviceId,
                       unsigned char* data,
                       unsigned char bytesNumber)
{
80004014:	defffc04 	addi	sp,sp,-16
80004018:	df000315 	stw	fp,12(sp)
8000401c:	df000304 	addi	fp,sp,12
80004020:	2005883a 	mov	r2,r4
80004024:	e17ffe15 	stw	r5,-8(fp)
80004028:	3007883a 	mov	r3,r6
8000402c:	e0bfff05 	stb	r2,-4(fp)
80004030:	1805883a 	mov	r2,r3
80004034:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
80004038:	0001883a 	nop
8000403c:	e037883a 	mov	sp,fp
80004040:	df000017 	ldw	fp,0(sp)
80004044:	dec00104 	addi	sp,sp,4
80004048:	f800283a 	ret

8000404c <SPI_Write>:
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char slaveDeviceId,
                        unsigned char* data,
                        unsigned char bytesNumber)
{
8000404c:	defffc04 	addi	sp,sp,-16
80004050:	df000315 	stw	fp,12(sp)
80004054:	df000304 	addi	fp,sp,12
80004058:	2005883a 	mov	r2,r4
8000405c:	e17ffe15 	stw	r5,-8(fp)
80004060:	3007883a 	mov	r3,r6
80004064:	e0bfff05 	stb	r2,-4(fp)
80004068:	1805883a 	mov	r2,r3
8000406c:	e0bffd05 	stb	r2,-12(fp)
    /* Add your code here. */
}
80004070:	0001883a 	nop
80004074:	e037883a 	mov	sp,fp
80004078:	df000017 	ldw	fp,0(sp)
8000407c:	dec00104 	addi	sp,sp,4
80004080:	f800283a 	ret

80004084 <dac_buffer_load>:

/******************************************************************************/
/************************ Functions Definitions *******************************/
/******************************************************************************/

uint32_t dac_buffer_load(dac_core core, uint32_t start_address) {
80004084:	defff604 	addi	sp,sp,-40
80004088:	dfc00915 	stw	ra,36(sp)
8000408c:	df000815 	stw	fp,32(sp)
80004090:	df000804 	addi	fp,sp,32
80004094:	e13ff915 	stw	r4,-28(fp)
80004098:	e17ffa15 	stw	r5,-24(fp)
8000409c:	e1bffb15 	stw	r6,-20(fp)
800040a0:	e1fff815 	stw	r7,-32(fp)

	uint32_t no_of_samples;
	uint32_t index_i, index_q;
	uint32_t index_mem = 0;
800040a4:	e03ffe15 	stw	zero,-8(fp)

	no_of_samples = sizeof(sine_lut) / sizeof(typeof(sine_lut[0]));
800040a8:	00810004 	movi	r2,1024
800040ac:	e0bffd15 	stw	r2,-12(fp)

	for (index_i = 0; index_i < no_of_samples; index_i++) {
800040b0:	e03fff15 	stw	zero,-4(fp)
800040b4:	00008306 	br	800042c4 <dac_buffer_load+0x240>
		 /* Phase shifted by 90 degree */
		index_q = (index_i + 256) % no_of_samples;
800040b8:	e0bfff17 	ldw	r2,-4(fp)
800040bc:	10804004 	addi	r2,r2,256
800040c0:	e0fffd17 	ldw	r3,-12(fp)
800040c4:	10c9203a 	divu	r4,r2,r3
800040c8:	e0fffd17 	ldw	r3,-12(fp)
800040cc:	20c7383a 	mul	r3,r4,r3
800040d0:	10c5c83a 	sub	r2,r2,r3
800040d4:	e0bffc15 	stw	r2,-16(fp)

		switch (core.no_of_channels) {
800040d8:	e0bffa43 	ldbu	r2,-23(fp)
800040dc:	10803fcc 	andi	r2,r2,255
800040e0:	10c000a0 	cmpeqi	r3,r2,2
800040e4:	1800151e 	bne	r3,zero,8000413c <dac_buffer_load+0xb8>
800040e8:	10c00120 	cmpeqi	r3,r2,4
800040ec:	1800321e 	bne	r3,zero,800041b8 <dac_buffer_load+0x134>
800040f0:	10800060 	cmpeqi	r2,r2,1
800040f4:	10006b26 	beq	r2,zero,800042a4 <dac_buffer_load+0x220>
			case 1:
				ad_reg_write_16(start_address + index_mem * 2, sine_lut[index_i]);
800040f8:	e0bffe17 	ldw	r2,-8(fp)
800040fc:	1085883a 	add	r2,r2,r2
80004100:	1007883a 	mov	r3,r2
80004104:	e0bff817 	ldw	r2,-32(fp)
80004108:	1889883a 	add	r4,r3,r2
8000410c:	e0bfff17 	ldw	r2,-4(fp)
80004110:	1087883a 	add	r3,r2,r2
80004114:	00a000b4 	movhi	r2,32770
80004118:	1885883a 	add	r2,r3,r2
8000411c:	1094ca0b 	ldhu	r2,21288(r2)
80004120:	10bfffcc 	andi	r2,r2,65535
80004124:	100b883a 	mov	r5,r2
80004128:	00082c00 	call	800082c0 <ad_reg_write_16>
				index_mem += 1;
8000412c:	e0bffe17 	ldw	r2,-8(fp)
80004130:	10800044 	addi	r2,r2,1
80004134:	e0bffe15 	stw	r2,-8(fp)
				break;
80004138:	00005f06 	br	800042b8 <dac_buffer_load+0x234>
			case 2:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
8000413c:	e0bffe17 	ldw	r2,-8(fp)
80004140:	1085883a 	add	r2,r2,r2
80004144:	1007883a 	mov	r3,r2
80004148:	e0bff817 	ldw	r2,-32(fp)
8000414c:	1889883a 	add	r4,r3,r2
80004150:	e0bfff17 	ldw	r2,-4(fp)
80004154:	1087883a 	add	r3,r2,r2
80004158:	00a000b4 	movhi	r2,32770
8000415c:	1885883a 	add	r2,r3,r2
80004160:	1094ca0b 	ldhu	r2,21288(r2)
80004164:	10bfffcc 	andi	r2,r2,65535
80004168:	100b883a 	mov	r5,r2
8000416c:	00082c00 	call	800082c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
80004170:	e0bffe17 	ldw	r2,-8(fp)
80004174:	10800044 	addi	r2,r2,1
80004178:	1085883a 	add	r2,r2,r2
8000417c:	1007883a 	mov	r3,r2
80004180:	e0bff817 	ldw	r2,-32(fp)
80004184:	1889883a 	add	r4,r3,r2
80004188:	e0bffc17 	ldw	r2,-16(fp)
8000418c:	1087883a 	add	r3,r2,r2
80004190:	00a000b4 	movhi	r2,32770
80004194:	1885883a 	add	r2,r3,r2
80004198:	1094ca0b 	ldhu	r2,21288(r2)
8000419c:	10bfffcc 	andi	r2,r2,65535
800041a0:	100b883a 	mov	r5,r2
800041a4:	00082c00 	call	800082c0 <ad_reg_write_16>
				index_mem += 2;
800041a8:	e0bffe17 	ldw	r2,-8(fp)
800041ac:	10800084 	addi	r2,r2,2
800041b0:	e0bffe15 	stw	r2,-8(fp)
				break;
800041b4:	00004006 	br	800042b8 <dac_buffer_load+0x234>
			case 4:
				ad_reg_write_16(start_address + (index_mem + 0) * 2, sine_lut[index_i]);
800041b8:	e0bffe17 	ldw	r2,-8(fp)
800041bc:	1085883a 	add	r2,r2,r2
800041c0:	1007883a 	mov	r3,r2
800041c4:	e0bff817 	ldw	r2,-32(fp)
800041c8:	1889883a 	add	r4,r3,r2
800041cc:	e0bfff17 	ldw	r2,-4(fp)
800041d0:	1087883a 	add	r3,r2,r2
800041d4:	00a000b4 	movhi	r2,32770
800041d8:	1885883a 	add	r2,r3,r2
800041dc:	1094ca0b 	ldhu	r2,21288(r2)
800041e0:	10bfffcc 	andi	r2,r2,65535
800041e4:	100b883a 	mov	r5,r2
800041e8:	00082c00 	call	800082c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 1) * 2, sine_lut[index_q]);
800041ec:	e0bffe17 	ldw	r2,-8(fp)
800041f0:	10800044 	addi	r2,r2,1
800041f4:	1085883a 	add	r2,r2,r2
800041f8:	1007883a 	mov	r3,r2
800041fc:	e0bff817 	ldw	r2,-32(fp)
80004200:	1889883a 	add	r4,r3,r2
80004204:	e0bffc17 	ldw	r2,-16(fp)
80004208:	1087883a 	add	r3,r2,r2
8000420c:	00a000b4 	movhi	r2,32770
80004210:	1885883a 	add	r2,r3,r2
80004214:	1094ca0b 	ldhu	r2,21288(r2)
80004218:	10bfffcc 	andi	r2,r2,65535
8000421c:	100b883a 	mov	r5,r2
80004220:	00082c00 	call	800082c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 2) * 2, sine_lut[index_i]);
80004224:	e0bffe17 	ldw	r2,-8(fp)
80004228:	10800084 	addi	r2,r2,2
8000422c:	1085883a 	add	r2,r2,r2
80004230:	1007883a 	mov	r3,r2
80004234:	e0bff817 	ldw	r2,-32(fp)
80004238:	1889883a 	add	r4,r3,r2
8000423c:	e0bfff17 	ldw	r2,-4(fp)
80004240:	1087883a 	add	r3,r2,r2
80004244:	00a000b4 	movhi	r2,32770
80004248:	1885883a 	add	r2,r3,r2
8000424c:	1094ca0b 	ldhu	r2,21288(r2)
80004250:	10bfffcc 	andi	r2,r2,65535
80004254:	100b883a 	mov	r5,r2
80004258:	00082c00 	call	800082c0 <ad_reg_write_16>
				ad_reg_write_16(start_address + (index_mem + 3) * 2, sine_lut[index_q]);
8000425c:	e0bffe17 	ldw	r2,-8(fp)
80004260:	108000c4 	addi	r2,r2,3
80004264:	1085883a 	add	r2,r2,r2
80004268:	1007883a 	mov	r3,r2
8000426c:	e0bff817 	ldw	r2,-32(fp)
80004270:	1889883a 	add	r4,r3,r2
80004274:	e0bffc17 	ldw	r2,-16(fp)
80004278:	1087883a 	add	r3,r2,r2
8000427c:	00a000b4 	movhi	r2,32770
80004280:	1885883a 	add	r2,r3,r2
80004284:	1094ca0b 	ldhu	r2,21288(r2)
80004288:	10bfffcc 	andi	r2,r2,65535
8000428c:	100b883a 	mov	r5,r2
80004290:	00082c00 	call	800082c0 <ad_reg_write_16>
				index_mem += 4;
80004294:	e0bffe17 	ldw	r2,-8(fp)
80004298:	10800104 	addi	r2,r2,4
8000429c:	e0bffe15 	stw	r2,-8(fp)
				break;
800042a0:	00000506 	br	800042b8 <dac_buffer_load+0x234>
			default:
				ad_printf("Unsupported mode.\n\r");
800042a4:	012000b4 	movhi	r4,32770
800042a8:	2116ca04 	addi	r4,r4,23336
800042ac:	0010d740 	call	80010d74 <printf>
				return -1;
800042b0:	00bfffc4 	movi	r2,-1
800042b4:	00000b06 	br	800042e4 <dac_buffer_load+0x260>
	for (index_i = 0; index_i < no_of_samples; index_i++) {
800042b8:	e0bfff17 	ldw	r2,-4(fp)
800042bc:	10800044 	addi	r2,r2,1
800042c0:	e0bfff15 	stw	r2,-4(fp)
800042c4:	e0ffff17 	ldw	r3,-4(fp)
800042c8:	e0bffd17 	ldw	r2,-12(fp)
800042cc:	18bf7a36 	bltu	r3,r2,800040b8 <_gp+0xfffd3344>
		}
	}

	ad_dcache_flush();
800042d0:	001fc900 	call	8001fc90 <alt_icache_flush_all>

	return (core.no_of_channels * no_of_samples);
800042d4:	e0bffa43 	ldbu	r2,-23(fp)
800042d8:	10c03fcc 	andi	r3,r2,255
800042dc:	e0bffd17 	ldw	r2,-12(fp)
800042e0:	1885383a 	mul	r2,r3,r2
}
800042e4:	e037883a 	mov	sp,fp
800042e8:	dfc00117 	ldw	ra,4(sp)
800042ec:	df000017 	ldw	fp,0(sp)
800042f0:	dec00204 	addi	sp,sp,8
800042f4:	f800283a 	ret

800042f8 <dac_read>:
 * @brief dac_read
 *******************************************************************************/
int32_t dac_read(dac_core *core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
800042f8:	defffc04 	addi	sp,sp,-16
800042fc:	df000315 	stw	fp,12(sp)
80004300:	df000304 	addi	fp,sp,12
80004304:	e13fff15 	stw	r4,-4(fp)
80004308:	e17ffe15 	stw	r5,-8(fp)
8000430c:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + 0x4000 + reg_addr));
80004310:	e0bfff17 	ldw	r2,-4(fp)
80004314:	10c00017 	ldw	r3,0(r2)
80004318:	e0bffe17 	ldw	r2,-8(fp)
8000431c:	1885883a 	add	r2,r3,r2
80004320:	10900004 	addi	r2,r2,16384
80004324:	10800037 	ldwio	r2,0(r2)
80004328:	1007883a 	mov	r3,r2
8000432c:	e0bffd17 	ldw	r2,-12(fp)
80004330:	10c00015 	stw	r3,0(r2)

	if (*reg_data == 0xDEADDEAD) {
80004334:	e0bffd17 	ldw	r2,-12(fp)
80004338:	10c00017 	ldw	r3,0(r2)
8000433c:	00b7abb4 	movhi	r2,57006
80004340:	10b7ab44 	addi	r2,r2,-8531
80004344:	1880021e 	bne	r3,r2,80004350 <dac_read+0x58>
		#ifdef DEBUG
			ad_printf("dac_read faild for register: %x", reg_addr);
		#endif
		return -1;
80004348:	00bfffc4 	movi	r2,-1
8000434c:	00000106 	br	80004354 <dac_read+0x5c>
	} else {
		return 0;
80004350:	0005883a 	mov	r2,zero
	}
}
80004354:	e037883a 	mov	sp,fp
80004358:	df000017 	ldw	fp,0(sp)
8000435c:	dec00104 	addi	sp,sp,4
80004360:	f800283a 	ret

80004364 <dac_write>:
 * @brief dac_write
 *******************************************************************************/
int32_t dac_write(dac_core *core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
80004364:	defffc04 	addi	sp,sp,-16
80004368:	df000315 	stw	fp,12(sp)
8000436c:	df000304 	addi	fp,sp,12
80004370:	e13fff15 	stw	r4,-4(fp)
80004374:	e17ffe15 	stw	r5,-8(fp)
80004378:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + 0x4000 + reg_addr), reg_data);
8000437c:	e0bfff17 	ldw	r2,-4(fp)
80004380:	10c00017 	ldw	r3,0(r2)
80004384:	e0bffe17 	ldw	r2,-8(fp)
80004388:	1885883a 	add	r2,r3,r2
8000438c:	10900004 	addi	r2,r2,16384
80004390:	1007883a 	mov	r3,r2
80004394:	e0bffd17 	ldw	r2,-12(fp)
80004398:	18800035 	stwio	r2,0(r3)
		#ifdef DEBUG
			uint32_t reg_data_r;
			return dac_read(core, reg_addr, &reg_data_r);
		#endif

	return 0;
8000439c:	0005883a 	mov	r2,zero
}
800043a0:	e037883a 	mov	sp,fp
800043a4:	df000017 	ldw	fp,0(sp)
800043a8:	dec00104 	addi	sp,sp,4
800043ac:	f800283a 	ret

800043b0 <dds_set_frequency>:
 *******************************************************************************/

// freq is in Hz (i.e. set to 1*1000*1000 for 1 MHz)

int32_t dds_set_frequency(dac_core *core, uint32_t chan, uint32_t freq)
{
800043b0:	deffed04 	addi	sp,sp,-76
800043b4:	dfc01215 	stw	ra,72(sp)
800043b8:	df001115 	stw	fp,68(sp)
800043bc:	ddc01015 	stw	r23,64(sp)
800043c0:	dd800f15 	stw	r22,60(sp)
800043c4:	dd400e15 	stw	r21,56(sp)
800043c8:	dd000d15 	stw	r20,52(sp)
800043cc:	dcc00c15 	stw	r19,48(sp)
800043d0:	dc800b15 	stw	r18,44(sp)
800043d4:	dc400a15 	stw	r17,40(sp)
800043d8:	dc000915 	stw	r16,36(sp)
800043dc:	df001104 	addi	fp,sp,68
800043e0:	e13ff115 	stw	r4,-60(fp)
800043e4:	e17ff015 	stw	r5,-64(fp)
800043e8:	e1bfef15 	stw	r6,-68(fp)
	uint32_t val;
	uint64_t val64;
	uint32_t reg;
	uint64_t dac_clk;

	dac_read(core, DAC_REG_CLK_FREQ, &val);
800043ec:	e0bff304 	addi	r2,fp,-52
800043f0:	100d883a 	mov	r6,r2
800043f4:	01401504 	movi	r5,84
800043f8:	e13ff117 	ldw	r4,-60(fp)
800043fc:	00042f80 	call	800042f8 <dac_read>
	dac_clk = val * ((100*1000*1000)/65535);
80004400:	e0bff317 	ldw	r2,-52(fp)
80004404:	10817d64 	muli	r2,r2,1525
80004408:	e0bff615 	stw	r2,-40(fp)
8000440c:	e03ff715 	stw	zero,-36(fp)
	dac_read(core, DAC_REG_CLK_RATIO, &val);
80004410:	e0bff304 	addi	r2,fp,-52
80004414:	100d883a 	mov	r6,r2
80004418:	01401604 	movi	r5,88
8000441c:	e13ff117 	ldw	r4,-60(fp)
80004420:	00042f80 	call	800042f8 <dac_read>
	dac_clk *= val;
80004424:	e0bff317 	ldw	r2,-52(fp)
80004428:	1025883a 	mov	r18,r2
8000442c:	0027883a 	mov	r19,zero
80004430:	e0bff717 	ldw	r2,-36(fp)
80004434:	1487383a 	mul	r3,r2,r18
80004438:	e0bff617 	ldw	r2,-40(fp)
8000443c:	14c5383a 	mul	r2,r2,r19
80004440:	1887883a 	add	r3,r3,r2
80004444:	e0bff617 	ldw	r2,-40(fp)
80004448:	1488383a 	mulxuu	r4,r2,r18
8000444c:	1485383a 	mul	r2,r2,r18
80004450:	102d883a 	mov	r22,r2
80004454:	202f883a 	mov	r23,r4
80004458:	1dc5883a 	add	r2,r3,r23
8000445c:	102f883a 	mov	r23,r2
80004460:	e5bff615 	stw	r22,-40(fp)
80004464:	e5fff715 	stw	r23,-36(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
80004468:	000d883a 	mov	r6,zero
8000446c:	01401104 	movi	r5,68
80004470:	e13ff117 	ldw	r4,-60(fp)
80004474:	00043640 	call	80004364 <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
80004478:	e0bff017 	ldw	r2,-64(fp)
8000447c:	1004d07a 	srli	r2,r2,1
80004480:	100690fa 	slli	r3,r2,3
80004484:	e0bff017 	ldw	r2,-64(fp)
80004488:	1080004c 	andi	r2,r2,1
8000448c:	1885883a 	add	r2,r3,r2
80004490:	100490fa 	slli	r2,r2,3
80004494:	10810104 	addi	r2,r2,1028
80004498:	e0fff204 	addi	r3,fp,-56
8000449c:	180d883a 	mov	r6,r3
800044a0:	100b883a 	mov	r5,r2
800044a4:	e13ff117 	ldw	r4,-60(fp)
800044a8:	00042f80 	call	800042f8 <dac_read>
	val64 = (uint64_t) freq * 0xFFFFULL;
800044ac:	e0bfef17 	ldw	r2,-68(fp)
800044b0:	1021883a 	mov	r16,r2
800044b4:	0023883a 	mov	r17,zero
800044b8:	00bfffd4 	movui	r2,65535
800044bc:	8887383a 	mul	r3,r17,r2
800044c0:	8005383a 	mul	r2,r16,zero
800044c4:	1887883a 	add	r3,r3,r2
800044c8:	00bfffd4 	movui	r2,65535
800044cc:	8088383a 	mulxuu	r4,r16,r2
800044d0:	8085383a 	mul	r2,r16,r2
800044d4:	1029883a 	mov	r20,r2
800044d8:	202b883a 	mov	r21,r4
800044dc:	1d45883a 	add	r2,r3,r21
800044e0:	102b883a 	mov	r21,r2
800044e4:	e53ff415 	stw	r20,-48(fp)
800044e8:	e57ff515 	stw	r21,-44(fp)
	val64 = val64 / dac_clk;
800044ec:	e1bff617 	ldw	r6,-40(fp)
800044f0:	e1fff717 	ldw	r7,-36(fp)
800044f4:	e13ff417 	ldw	r4,-48(fp)
800044f8:	e17ff517 	ldw	r5,-44(fp)
800044fc:	000c99c0 	call	8000c99c <__udivdi3>
80004500:	1009883a 	mov	r4,r2
80004504:	180b883a 	mov	r5,r3
80004508:	e13ff415 	stw	r4,-48(fp)
8000450c:	e17ff515 	stw	r5,-44(fp)
	reg = (reg & ~DAC_DDS_INCR(~0)) | DAC_DDS_INCR(val64) | 1;
80004510:	e0bff217 	ldw	r2,-56(fp)
80004514:	10ffffec 	andhi	r3,r2,65535
80004518:	e0bff417 	ldw	r2,-48(fp)
8000451c:	10bfffcc 	andi	r2,r2,65535
80004520:	1884b03a 	or	r2,r3,r2
80004524:	10800054 	ori	r2,r2,1
80004528:	e0bff215 	stw	r2,-56(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
8000452c:	e0bff017 	ldw	r2,-64(fp)
80004530:	1004d07a 	srli	r2,r2,1
80004534:	100690fa 	slli	r3,r2,3
80004538:	e0bff017 	ldw	r2,-64(fp)
8000453c:	1080004c 	andi	r2,r2,1
80004540:	1885883a 	add	r2,r3,r2
80004544:	100490fa 	slli	r2,r2,3
80004548:	10810104 	addi	r2,r2,1028
8000454c:	e0fff217 	ldw	r3,-56(fp)
80004550:	180d883a 	mov	r6,r3
80004554:	100b883a 	mov	r5,r2
80004558:	e13ff117 	ldw	r4,-60(fp)
8000455c:	00043640 	call	80004364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
80004560:	01800044 	movi	r6,1
80004564:	01401104 	movi	r5,68
80004568:	e13ff117 	ldw	r4,-60(fp)
8000456c:	00043640 	call	80004364 <dac_write>

	return 0;
80004570:	0005883a 	mov	r2,zero
}
80004574:	e6fff804 	addi	sp,fp,-32
80004578:	dfc00917 	ldw	ra,36(sp)
8000457c:	df000817 	ldw	fp,32(sp)
80004580:	ddc00717 	ldw	r23,28(sp)
80004584:	dd800617 	ldw	r22,24(sp)
80004588:	dd400517 	ldw	r21,20(sp)
8000458c:	dd000417 	ldw	r20,16(sp)
80004590:	dcc00317 	ldw	r19,12(sp)
80004594:	dc800217 	ldw	r18,8(sp)
80004598:	dc400117 	ldw	r17,4(sp)
8000459c:	dc000017 	ldw	r16,0(sp)
800045a0:	dec00a04 	addi	sp,sp,40
800045a4:	f800283a 	ret

800045a8 <dds_set_phase>:
 *******************************************************************************/

// phase is in milli(?) angles scaled to 1000 (i.e. 90*1000 is 90 degrees (pi/2))

int32_t dds_set_phase(dac_core *core, uint32_t chan, uint32_t phase)
{
800045a8:	defff404 	addi	sp,sp,-48
800045ac:	dfc00b15 	stw	ra,44(sp)
800045b0:	df000a15 	stw	fp,40(sp)
800045b4:	dcc00915 	stw	r19,36(sp)
800045b8:	dc800815 	stw	r18,32(sp)
800045bc:	dc400715 	stw	r17,28(sp)
800045c0:	dc000615 	stw	r16,24(sp)
800045c4:	df000a04 	addi	fp,sp,40
800045c8:	e13ff815 	stw	r4,-32(fp)
800045cc:	e17ff715 	stw	r5,-36(fp)
800045d0:	e1bff615 	stw	r6,-40(fp)
	uint64_t val64;
	uint32_t reg;

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
800045d4:	000d883a 	mov	r6,zero
800045d8:	01401104 	movi	r5,68
800045dc:	e13ff817 	ldw	r4,-32(fp)
800045e0:	00043640 	call	80004364 <dac_write>
	dac_read(core, DAC_REG_DDS_INIT_INCR(chan), &reg);
800045e4:	e0bff717 	ldw	r2,-36(fp)
800045e8:	1004d07a 	srli	r2,r2,1
800045ec:	100690fa 	slli	r3,r2,3
800045f0:	e0bff717 	ldw	r2,-36(fp)
800045f4:	1080004c 	andi	r2,r2,1
800045f8:	1885883a 	add	r2,r3,r2
800045fc:	100490fa 	slli	r2,r2,3
80004600:	10810104 	addi	r2,r2,1028
80004604:	e0fff904 	addi	r3,fp,-28
80004608:	180d883a 	mov	r6,r3
8000460c:	100b883a 	mov	r5,r2
80004610:	e13ff817 	ldw	r4,-32(fp)
80004614:	00042f80 	call	800042f8 <dac_read>
	val64 = (uint64_t) phase * 0x10000ULL + (360000 / 2);
80004618:	e0bff617 	ldw	r2,-40(fp)
8000461c:	1025883a 	mov	r18,r2
80004620:	0027883a 	mov	r19,zero
80004624:	9004d43a 	srli	r2,r18,16
80004628:	9822943a 	slli	r17,r19,16
8000462c:	1462b03a 	or	r17,r2,r17
80004630:	9020943a 	slli	r16,r18,16
80004634:	010000f4 	movhi	r4,3
80004638:	212fc804 	addi	r4,r4,-16608
8000463c:	000b883a 	mov	r5,zero
80004640:	8105883a 	add	r2,r16,r4
80004644:	140d803a 	cmpltu	r6,r2,r16
80004648:	8947883a 	add	r3,r17,r5
8000464c:	30c9883a 	add	r4,r6,r3
80004650:	2007883a 	mov	r3,r4
80004654:	e0bffa15 	stw	r2,-24(fp)
80004658:	e0fffb15 	stw	r3,-20(fp)
	val64 = val64 / 360000;
8000465c:	e0bffa17 	ldw	r2,-24(fp)
80004660:	e0fffb17 	ldw	r3,-20(fp)
80004664:	01800174 	movhi	r6,5
80004668:	319f9004 	addi	r6,r6,32320
8000466c:	000f883a 	mov	r7,zero
80004670:	1009883a 	mov	r4,r2
80004674:	180b883a 	mov	r5,r3
80004678:	000c99c0 	call	8000c99c <__udivdi3>
8000467c:	1009883a 	mov	r4,r2
80004680:	180b883a 	mov	r5,r3
80004684:	e13ffa15 	stw	r4,-24(fp)
80004688:	e17ffb15 	stw	r5,-20(fp)
	reg = (reg & ~DAC_DDS_INIT(~0)) | DAC_DDS_INIT(val64);
8000468c:	e0bff917 	ldw	r2,-28(fp)
80004690:	10ffffcc 	andi	r3,r2,65535
80004694:	e0bffa17 	ldw	r2,-24(fp)
80004698:	1004943a 	slli	r2,r2,16
8000469c:	1884b03a 	or	r2,r3,r2
800046a0:	e0bff915 	stw	r2,-28(fp)
	dac_write(core, DAC_REG_DDS_INIT_INCR(chan), reg);
800046a4:	e0bff717 	ldw	r2,-36(fp)
800046a8:	1004d07a 	srli	r2,r2,1
800046ac:	100690fa 	slli	r3,r2,3
800046b0:	e0bff717 	ldw	r2,-36(fp)
800046b4:	1080004c 	andi	r2,r2,1
800046b8:	1885883a 	add	r2,r3,r2
800046bc:	100490fa 	slli	r2,r2,3
800046c0:	10810104 	addi	r2,r2,1028
800046c4:	e0fff917 	ldw	r3,-28(fp)
800046c8:	180d883a 	mov	r6,r3
800046cc:	100b883a 	mov	r5,r2
800046d0:	e13ff817 	ldw	r4,-32(fp)
800046d4:	00043640 	call	80004364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
800046d8:	01800044 	movi	r6,1
800046dc:	01401104 	movi	r5,68
800046e0:	e13ff817 	ldw	r4,-32(fp)
800046e4:	00043640 	call	80004364 <dac_write>

	return 0;
800046e8:	0005883a 	mov	r2,zero
}
800046ec:	e6fffc04 	addi	sp,fp,-16
800046f0:	dfc00517 	ldw	ra,20(sp)
800046f4:	df000417 	ldw	fp,16(sp)
800046f8:	dcc00317 	ldw	r19,12(sp)
800046fc:	dc800217 	ldw	r18,8(sp)
80004700:	dc400117 	ldw	r17,4(sp)
80004704:	dc000017 	ldw	r16,0(sp)
80004708:	dec00604 	addi	sp,sp,24
8000470c:	f800283a 	ret

80004710 <dds_set_scale>:
// scale range is (-1.99 to +1.99) - hardware supports -2.0, but we ignore it.
// do not get fancy, above 1.0 (or below -1.0) will mess the dds tones.
// dds always runs 16bits-- so unless your data path handles it- stay within -1 to +1.

int32_t dds_set_scale(dac_core *core, uint32_t chan, int32_t scale_micro_units)
{
80004710:	defff504 	addi	sp,sp,-44
80004714:	dfc00a15 	stw	ra,40(sp)
80004718:	df000915 	stw	fp,36(sp)
8000471c:	dcc00815 	stw	r19,32(sp)
80004720:	dc800715 	stw	r18,28(sp)
80004724:	dc400615 	stw	r17,24(sp)
80004728:	dc000515 	stw	r16,20(sp)
8000472c:	df000904 	addi	fp,sp,36
80004730:	e13ff915 	stw	r4,-28(fp)
80004734:	e17ff815 	stw	r5,-32(fp)
80004738:	e1bff715 	stw	r6,-36(fp)
	uint32_t pcore_version;
	uint32_t scale_reg;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
8000473c:	e0bffa04 	addi	r2,fp,-24
80004740:	100d883a 	mov	r6,r2
80004744:	000b883a 	mov	r5,zero
80004748:	e13ff917 	ldw	r4,-28(fp)
8000474c:	00042f80 	call	800042f8 <dac_read>

	// only ise projects support binary shift scaling, if you think you need
	// this supported in this driver, let us know.

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 6)
80004750:	e0bffa17 	ldw	r2,-24(fp)
80004754:	1004d43a 	srli	r2,r2,16
80004758:	108001a8 	cmpgeui	r2,r2,6
8000475c:	1000071e 	bne	r2,zero,8000477c <dds_set_scale+0x6c>
	{
		ad_printf("%s ERROR: Sorry, binary scale is NOT supported!\n", __func__);
80004760:	016000b4 	movhi	r5,32770
80004764:	2956ec04 	addi	r5,r5,23472
80004768:	012000b4 	movhi	r4,32770
8000476c:	2116cf04 	addi	r4,r4,23356
80004770:	0010d740 	call	80010d74 <printf>
		return(-1);
80004774:	00bfffc4 	movi	r2,-1
80004778:	00003c06 	br	8000486c <dds_set_scale+0x15c>
	}

	scale_reg = scale_micro_units;
8000477c:	e0bff717 	ldw	r2,-36(fp)
80004780:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
80004784:	e0bff717 	ldw	r2,-36(fp)
80004788:	1000030e 	bge	r2,zero,80004798 <dds_set_scale+0x88>
		scale_reg = scale_micro_units * -1;
8000478c:	e0bff717 	ldw	r2,-36(fp)
80004790:	0085c83a 	sub	r2,zero,r2
80004794:	e0bffb15 	stw	r2,-20(fp)
	if (scale_reg >= 1999000)
80004798:	e0fffb17 	ldw	r3,-20(fp)
8000479c:	008007f4 	movhi	r2,31
800047a0:	10a025c4 	addi	r2,r2,-32617
800047a4:	10c0032e 	bgeu	r2,r3,800047b4 <dds_set_scale+0xa4>
		scale_reg = 1999000;
800047a8:	008007f4 	movhi	r2,31
800047ac:	10a02604 	addi	r2,r2,-32616
800047b0:	e0bffb15 	stw	r2,-20(fp)
	scale_reg = (uint32_t)(((uint64_t)scale_reg * 0x4000) / 1000000);
800047b4:	e0bffb17 	ldw	r2,-20(fp)
800047b8:	1025883a 	mov	r18,r2
800047bc:	0027883a 	mov	r19,zero
800047c0:	9004d4ba 	srli	r2,r18,18
800047c4:	982293ba 	slli	r17,r19,14
800047c8:	1462b03a 	or	r17,r2,r17
800047cc:	902093ba 	slli	r16,r18,14
800047d0:	018003f4 	movhi	r6,15
800047d4:	31909004 	addi	r6,r6,16960
800047d8:	000f883a 	mov	r7,zero
800047dc:	8009883a 	mov	r4,r16
800047e0:	880b883a 	mov	r5,r17
800047e4:	000c99c0 	call	8000c99c <__udivdi3>
800047e8:	1009883a 	mov	r4,r2
800047ec:	180b883a 	mov	r5,r3
800047f0:	2005883a 	mov	r2,r4
800047f4:	2807883a 	mov	r3,r5
800047f8:	e0bffb15 	stw	r2,-20(fp)
	if (scale_micro_units < 0)
800047fc:	e0bff717 	ldw	r2,-36(fp)
80004800:	1000030e 	bge	r2,zero,80004810 <dds_set_scale+0x100>
		scale_reg = scale_reg | 0x8000;
80004804:	e0bffb17 	ldw	r2,-20(fp)
80004808:	10a00014 	ori	r2,r2,32768
8000480c:	e0bffb15 	stw	r2,-20(fp)

	dac_write(core, DAC_REG_SYNC_CONTROL, 0);
80004810:	000d883a 	mov	r6,zero
80004814:	01401104 	movi	r5,68
80004818:	e13ff917 	ldw	r4,-28(fp)
8000481c:	00043640 	call	80004364 <dac_write>
	dac_write(core, DAC_REG_DDS_SCALE(chan), DAC_DDS_SCALE(scale_reg));
80004820:	e0bff817 	ldw	r2,-32(fp)
80004824:	1004d07a 	srli	r2,r2,1
80004828:	10800404 	addi	r2,r2,16
8000482c:	100690fa 	slli	r3,r2,3
80004830:	e0bff817 	ldw	r2,-32(fp)
80004834:	1080004c 	andi	r2,r2,1
80004838:	1885883a 	add	r2,r3,r2
8000483c:	100690fa 	slli	r3,r2,3
80004840:	e0bffb17 	ldw	r2,-20(fp)
80004844:	10bfffcc 	andi	r2,r2,65535
80004848:	100d883a 	mov	r6,r2
8000484c:	180b883a 	mov	r5,r3
80004850:	e13ff917 	ldw	r4,-28(fp)
80004854:	00043640 	call	80004364 <dac_write>
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
80004858:	01800044 	movi	r6,1
8000485c:	01401104 	movi	r5,68
80004860:	e13ff917 	ldw	r4,-28(fp)
80004864:	00043640 	call	80004364 <dac_write>
	return(0);
80004868:	0005883a 	mov	r2,zero
}
8000486c:	e6fffc04 	addi	sp,fp,-16
80004870:	dfc00517 	ldw	ra,20(sp)
80004874:	df000417 	ldw	fp,16(sp)
80004878:	dcc00317 	ldw	r19,12(sp)
8000487c:	dc800217 	ldw	r18,8(sp)
80004880:	dc400117 	ldw	r17,4(sp)
80004884:	dc000017 	ldw	r16,0(sp)
80004888:	dec00604 	addi	sp,sp,24
8000488c:	f800283a 	ret

80004890 <dac_data_src_sel>:
/***************************************************************************//**
 * @brief dac_data_src_sel
 *******************************************************************************/

int32_t dac_data_src_sel(dac_core *core, int32_t chan, dac_data_src src)
{
80004890:	defff804 	addi	sp,sp,-32
80004894:	dfc00715 	stw	ra,28(sp)
80004898:	df000615 	stw	fp,24(sp)
8000489c:	df000604 	addi	fp,sp,24
800048a0:	e13ffc15 	stw	r4,-16(fp)
800048a4:	e17ffb15 	stw	r5,-20(fp)
800048a8:	e1bffa15 	stw	r6,-24(fp)
	uint32_t pcore_version;
	uint32_t reg;
	int32_t i;

	dac_read(core, DAC_REG_VERSION, &pcore_version);
800048ac:	e0bffe04 	addi	r2,fp,-8
800048b0:	100d883a 	mov	r6,r2
800048b4:	000b883a 	mov	r5,zero
800048b8:	e13ffc17 	ldw	r4,-16(fp)
800048bc:	00042f80 	call	800042f8 <dac_read>

	// single core control for all channels

	if (DAC_PCORE_VERSION_MAJOR(pcore_version) < 7)
800048c0:	e0bffe17 	ldw	r2,-8(fp)
800048c4:	1004d43a 	srli	r2,r2,16
800048c8:	108001e8 	cmpgeui	r2,r2,7
800048cc:	1000131e 	bne	r2,zero,8000491c <dac_data_src_sel+0x8c>
	{
		dac_read(core, DAC_REG_DATA_CONTROL, &reg);
800048d0:	e0bffd04 	addi	r2,fp,-12
800048d4:	100d883a 	mov	r6,r2
800048d8:	01401204 	movi	r5,72
800048dc:	e13ffc17 	ldw	r4,-16(fp)
800048e0:	00042f80 	call	800042f8 <dac_read>
		reg = (reg & ~DAC_DATA_SEL(~0)) | DAC_DATA_SEL(src);
800048e4:	e0fffd17 	ldw	r3,-12(fp)
800048e8:	00bffc04 	movi	r2,-16
800048ec:	1886703a 	and	r3,r3,r2
800048f0:	e0bffa17 	ldw	r2,-24(fp)
800048f4:	108003cc 	andi	r2,r2,15
800048f8:	1884b03a 	or	r2,r3,r2
800048fc:	e0bffd15 	stw	r2,-12(fp)
		dac_write(core, DAC_REG_DATA_CONTROL, reg);
80004900:	e0bffd17 	ldw	r2,-12(fp)
80004904:	100d883a 	mov	r6,r2
80004908:	01401204 	movi	r5,72
8000490c:	e13ffc17 	ldw	r4,-16(fp)
80004910:	00043640 	call	80004364 <dac_write>
		return(0);
80004914:	0005883a 	mov	r2,zero
80004918:	00001d06 	br	80004990 <dac_data_src_sel+0x100>
	}

	// per channel source select

	for (i = 0; i < (core->no_of_channels * 2); i++)
8000491c:	e03fff15 	stw	zero,-4(fp)
80004920:	00000f06 	br	80004960 <dac_data_src_sel+0xd0>
	{
		if ((chan < 0) || (chan == i))
80004924:	e0bffb17 	ldw	r2,-20(fp)
80004928:	10000316 	blt	r2,zero,80004938 <dac_data_src_sel+0xa8>
8000492c:	e0fffb17 	ldw	r3,-20(fp)
80004930:	e0bfff17 	ldw	r2,-4(fp)
80004934:	1880071e 	bne	r3,r2,80004954 <dac_data_src_sel+0xc4>
			dac_write(core, DAC_REG_DATA_SELECT(i), src);
80004938:	e0bfff17 	ldw	r2,-4(fp)
8000493c:	100491ba 	slli	r2,r2,6
80004940:	10810604 	addi	r2,r2,1048
80004944:	e1bffa17 	ldw	r6,-24(fp)
80004948:	100b883a 	mov	r5,r2
8000494c:	e13ffc17 	ldw	r4,-16(fp)
80004950:	00043640 	call	80004364 <dac_write>
	for (i = 0; i < (core->no_of_channels * 2); i++)
80004954:	e0bfff17 	ldw	r2,-4(fp)
80004958:	10800044 	addi	r2,r2,1
8000495c:	e0bfff15 	stw	r2,-4(fp)
80004960:	e0bffc17 	ldw	r2,-16(fp)
80004964:	10800143 	ldbu	r2,5(r2)
80004968:	10803fcc 	andi	r2,r2,255
8000496c:	1085883a 	add	r2,r2,r2
80004970:	1007883a 	mov	r3,r2
80004974:	e0bfff17 	ldw	r2,-4(fp)
80004978:	10ffea16 	blt	r2,r3,80004924 <_gp+0xfffd3bb0>
	}
	dac_write(core, DAC_REG_SYNC_CONTROL, DAC_SYNC);
8000497c:	01800044 	movi	r6,1
80004980:	01401104 	movi	r5,68
80004984:	e13ffc17 	ldw	r4,-16(fp)
80004988:	00043640 	call	80004364 <dac_write>

	return(0);
8000498c:	0005883a 	mov	r2,zero
}
80004990:	e037883a 	mov	sp,fp
80004994:	dfc00117 	ldw	ra,4(sp)
80004998:	df000017 	ldw	fp,0(sp)
8000499c:	dec00204 	addi	sp,sp,8
800049a0:	f800283a 	ret

800049a4 <dac_setup>:

/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/
int32_t dac_setup(dac_core *core)
{
800049a4:	defffb04 	addi	sp,sp,-20
800049a8:	dfc00415 	stw	ra,16(sp)
800049ac:	df000315 	stw	fp,12(sp)
800049b0:	df000304 	addi	fp,sp,12
800049b4:	e13ffd15 	stw	r4,-12(fp)
	uint32_t reg_data;
	uint32_t dac_clock;

	dac_write(core, DAC_REG_RSTN, 0x00);
800049b8:	000d883a 	mov	r6,zero
800049bc:	01401004 	movi	r5,64
800049c0:	e13ffd17 	ldw	r4,-12(fp)
800049c4:	00043640 	call	80004364 <dac_write>
	dac_write(core, DAC_REG_RSTN, 0x03);
800049c8:	018000c4 	movi	r6,3
800049cc:	01401004 	movi	r5,64
800049d0:	e13ffd17 	ldw	r4,-12(fp)
800049d4:	00043640 	call	80004364 <dac_write>
	mdelay(100);
800049d8:	010000b4 	movhi	r4,2
800049dc:	2121a804 	addi	r4,r4,-31072
800049e0:	00205040 	call	80020504 <usleep>

	dac_read(core, DAC_REG_STATUS, &reg_data);
800049e4:	e0bfff04 	addi	r2,fp,-4
800049e8:	100d883a 	mov	r6,r2
800049ec:	01401704 	movi	r5,92
800049f0:	e13ffd17 	ldw	r4,-12(fp)
800049f4:	00042f80 	call	800042f8 <dac_read>
	if (reg_data == 0x0) {
800049f8:	e0bfff17 	ldw	r2,-4(fp)
800049fc:	1000071e 	bne	r2,zero,80004a1c <dac_setup+0x78>
		ad_printf("%s DAC Core Status errors.\n", __func__);
80004a00:	016000b4 	movhi	r5,32770
80004a04:	2956f004 	addi	r5,r5,23488
80004a08:	012000b4 	movhi	r4,32770
80004a0c:	2116dc04 	addi	r4,r4,23408
80004a10:	0010d740 	call	80010d74 <printf>
		return -1;
80004a14:	00bfffc4 	movi	r2,-1
80004a18:	00001d06 	br	80004a90 <dac_setup+0xec>
	}

	dac_read(core, DAC_REG_CLK_FREQ, &dac_clock);
80004a1c:	e0bffe04 	addi	r2,fp,-8
80004a20:	100d883a 	mov	r6,r2
80004a24:	01401504 	movi	r5,84
80004a28:	e13ffd17 	ldw	r4,-12(fp)
80004a2c:	00042f80 	call	800042f8 <dac_read>
	dac_read(core, DAC_REG_CLK_RATIO, &reg_data);
80004a30:	e0bfff04 	addi	r2,fp,-4
80004a34:	100d883a 	mov	r6,r2
80004a38:	01401604 	movi	r5,88
80004a3c:	e13ffd17 	ldw	r4,-12(fp)
80004a40:	00042f80 	call	800042f8 <dac_read>
	dac_clock = (dac_clock * reg_data * 100) + 0x7fff;
80004a44:	e0fffe17 	ldw	r3,-8(fp)
80004a48:	e0bfff17 	ldw	r2,-4(fp)
80004a4c:	1885383a 	mul	r2,r3,r2
80004a50:	10801924 	muli	r2,r2,100
80004a54:	109fffc4 	addi	r2,r2,32767
80004a58:	e0bffe15 	stw	r2,-8(fp)
	dac_clock = dac_clock >> 16;
80004a5c:	e0bffe17 	ldw	r2,-8(fp)
80004a60:	1004d43a 	srli	r2,r2,16
80004a64:	e0bffe15 	stw	r2,-8(fp)

	ad_printf("%s dac core initialized (%d MHz).\n", __func__, dac_clock);
80004a68:	e0bffe17 	ldw	r2,-8(fp)
80004a6c:	100d883a 	mov	r6,r2
80004a70:	016000b4 	movhi	r5,32770
80004a74:	2956f004 	addi	r5,r5,23488
80004a78:	012000b4 	movhi	r4,32770
80004a7c:	2116e304 	addi	r4,r4,23436
80004a80:	0010d740 	call	80010d74 <printf>

	dac_data_setup(core);
80004a84:	e13ffd17 	ldw	r4,-12(fp)
80004a88:	0004aa40 	call	80004aa4 <dac_data_setup>
	return 0;
80004a8c:	0005883a 	mov	r2,zero
}
80004a90:	e037883a 	mov	sp,fp
80004a94:	dfc00117 	ldw	ra,4(sp)
80004a98:	df000017 	ldw	fp,0(sp)
80004a9c:	dec00204 	addi	sp,sp,8
80004aa0:	f800283a 	ret

80004aa4 <dac_data_setup>:
/***************************************************************************//**
 * @brief dac_setup
 *******************************************************************************/

int32_t dac_data_setup(dac_core *core)
{
80004aa4:	defffb04 	addi	sp,sp,-20
80004aa8:	dfc00415 	stw	ra,16(sp)
80004aac:	df000315 	stw	fp,12(sp)
80004ab0:	df000304 	addi	fp,sp,12
80004ab4:	e13ffd15 	stw	r4,-12(fp)
	dac_channel *chan;
	uint32_t i;

	for (i = 0; i < core->no_of_channels; i++) {
80004ab8:	e03fff15 	stw	zero,-4(fp)
80004abc:	00007106 	br	80004c84 <dac_data_setup+0x1e0>
		chan = &core->channels[i];
80004ac0:	e0bffd17 	ldw	r2,-12(fp)
80004ac4:	10c00217 	ldw	r3,8(r2)
80004ac8:	e0bfff17 	ldw	r2,-4(fp)
80004acc:	10800924 	muli	r2,r2,36
80004ad0:	1885883a 	add	r2,r3,r2
80004ad4:	e0bffe15 	stw	r2,-8(fp)
		if (chan->sel == DAC_SRC_DDS)
80004ad8:	e0bffe17 	ldw	r2,-8(fp)
80004adc:	10800817 	ldw	r2,32(r2)
80004ae0:	1000551e 	bne	r2,zero,80004c38 <dac_data_setup+0x194>
		{
			dds_set_frequency(core, ((i*2)+0), chan->dds_frequency_0);
80004ae4:	e0bfff17 	ldw	r2,-4(fp)
80004ae8:	1085883a 	add	r2,r2,r2
80004aec:	1007883a 	mov	r3,r2
80004af0:	e0bffe17 	ldw	r2,-8(fp)
80004af4:	10800017 	ldw	r2,0(r2)
80004af8:	100d883a 	mov	r6,r2
80004afc:	180b883a 	mov	r5,r3
80004b00:	e13ffd17 	ldw	r4,-12(fp)
80004b04:	00043b00 	call	800043b0 <dds_set_frequency>
			dds_set_phase(core, ((i*2)+0), chan->dds_phase_0);
80004b08:	e0bfff17 	ldw	r2,-4(fp)
80004b0c:	1085883a 	add	r2,r2,r2
80004b10:	1007883a 	mov	r3,r2
80004b14:	e0bffe17 	ldw	r2,-8(fp)
80004b18:	10800117 	ldw	r2,4(r2)
80004b1c:	100d883a 	mov	r6,r2
80004b20:	180b883a 	mov	r5,r3
80004b24:	e13ffd17 	ldw	r4,-12(fp)
80004b28:	00045a80 	call	800045a8 <dds_set_phase>
			dds_set_scale(core, ((i*2)+0), chan->dds_scale_0);
80004b2c:	e0bfff17 	ldw	r2,-4(fp)
80004b30:	1085883a 	add	r2,r2,r2
80004b34:	1007883a 	mov	r3,r2
80004b38:	e0bffe17 	ldw	r2,-8(fp)
80004b3c:	10800217 	ldw	r2,8(r2)
80004b40:	100d883a 	mov	r6,r2
80004b44:	180b883a 	mov	r5,r3
80004b48:	e13ffd17 	ldw	r4,-12(fp)
80004b4c:	00047100 	call	80004710 <dds_set_scale>
			if (chan->dds_dual_tone == 0)
80004b50:	e0bffe17 	ldw	r2,-8(fp)
80004b54:	10800617 	ldw	r2,24(r2)
80004b58:	10001c1e 	bne	r2,zero,80004bcc <dac_data_setup+0x128>
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_0);
80004b5c:	e0bfff17 	ldw	r2,-4(fp)
80004b60:	1085883a 	add	r2,r2,r2
80004b64:	10c00044 	addi	r3,r2,1
80004b68:	e0bffe17 	ldw	r2,-8(fp)
80004b6c:	10800017 	ldw	r2,0(r2)
80004b70:	100d883a 	mov	r6,r2
80004b74:	180b883a 	mov	r5,r3
80004b78:	e13ffd17 	ldw	r4,-12(fp)
80004b7c:	00043b00 	call	800043b0 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_0);
80004b80:	e0bfff17 	ldw	r2,-4(fp)
80004b84:	1085883a 	add	r2,r2,r2
80004b88:	10c00044 	addi	r3,r2,1
80004b8c:	e0bffe17 	ldw	r2,-8(fp)
80004b90:	10800117 	ldw	r2,4(r2)
80004b94:	100d883a 	mov	r6,r2
80004b98:	180b883a 	mov	r5,r3
80004b9c:	e13ffd17 	ldw	r4,-12(fp)
80004ba0:	00045a80 	call	800045a8 <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_0);
80004ba4:	e0bfff17 	ldw	r2,-4(fp)
80004ba8:	1085883a 	add	r2,r2,r2
80004bac:	10c00044 	addi	r3,r2,1
80004bb0:	e0bffe17 	ldw	r2,-8(fp)
80004bb4:	10800217 	ldw	r2,8(r2)
80004bb8:	100d883a 	mov	r6,r2
80004bbc:	180b883a 	mov	r5,r3
80004bc0:	e13ffd17 	ldw	r4,-12(fp)
80004bc4:	00047100 	call	80004710 <dds_set_scale>
80004bc8:	00001b06 	br	80004c38 <dac_data_setup+0x194>
			}
			else
			{
				dds_set_frequency(core, ((i*2)+1), chan->dds_frequency_1);
80004bcc:	e0bfff17 	ldw	r2,-4(fp)
80004bd0:	1085883a 	add	r2,r2,r2
80004bd4:	10c00044 	addi	r3,r2,1
80004bd8:	e0bffe17 	ldw	r2,-8(fp)
80004bdc:	10800317 	ldw	r2,12(r2)
80004be0:	100d883a 	mov	r6,r2
80004be4:	180b883a 	mov	r5,r3
80004be8:	e13ffd17 	ldw	r4,-12(fp)
80004bec:	00043b00 	call	800043b0 <dds_set_frequency>
				dds_set_phase(core, ((i*2)+1), chan->dds_phase_1);
80004bf0:	e0bfff17 	ldw	r2,-4(fp)
80004bf4:	1085883a 	add	r2,r2,r2
80004bf8:	10c00044 	addi	r3,r2,1
80004bfc:	e0bffe17 	ldw	r2,-8(fp)
80004c00:	10800417 	ldw	r2,16(r2)
80004c04:	100d883a 	mov	r6,r2
80004c08:	180b883a 	mov	r5,r3
80004c0c:	e13ffd17 	ldw	r4,-12(fp)
80004c10:	00045a80 	call	800045a8 <dds_set_phase>
				dds_set_scale(core, ((i*2)+1), chan->dds_scale_1);
80004c14:	e0bfff17 	ldw	r2,-4(fp)
80004c18:	1085883a 	add	r2,r2,r2
80004c1c:	10c00044 	addi	r3,r2,1
80004c20:	e0bffe17 	ldw	r2,-8(fp)
80004c24:	10800517 	ldw	r2,20(r2)
80004c28:	100d883a 	mov	r6,r2
80004c2c:	180b883a 	mov	r5,r3
80004c30:	e13ffd17 	ldw	r4,-12(fp)
80004c34:	00047100 	call	80004710 <dds_set_scale>
			}
		}
		dac_write(core, DAC_REG_DATA_PATTERN(i), chan->pat_data);
80004c38:	e0bfff17 	ldw	r2,-4(fp)
80004c3c:	100491ba 	slli	r2,r2,6
80004c40:	10c10404 	addi	r3,r2,1040
80004c44:	e0bffe17 	ldw	r2,-8(fp)
80004c48:	10800717 	ldw	r2,28(r2)
80004c4c:	100d883a 	mov	r6,r2
80004c50:	180b883a 	mov	r5,r3
80004c54:	e13ffd17 	ldw	r4,-12(fp)
80004c58:	00043640 	call	80004364 <dac_write>
		dac_data_src_sel(core, i, chan->sel);
80004c5c:	e0ffff17 	ldw	r3,-4(fp)
80004c60:	e0bffe17 	ldw	r2,-8(fp)
80004c64:	10800817 	ldw	r2,32(r2)
80004c68:	100d883a 	mov	r6,r2
80004c6c:	180b883a 	mov	r5,r3
80004c70:	e13ffd17 	ldw	r4,-12(fp)
80004c74:	00048900 	call	80004890 <dac_data_src_sel>
	for (i = 0; i < core->no_of_channels; i++) {
80004c78:	e0bfff17 	ldw	r2,-4(fp)
80004c7c:	10800044 	addi	r2,r2,1
80004c80:	e0bfff15 	stw	r2,-4(fp)
80004c84:	e0bffd17 	ldw	r2,-12(fp)
80004c88:	10800143 	ldbu	r2,5(r2)
80004c8c:	10803fcc 	andi	r2,r2,255
80004c90:	e0ffff17 	ldw	r3,-4(fp)
80004c94:	18bf8a36 	bltu	r3,r2,80004ac0 <_gp+0xfffd3d4c>
	}

	return(0);
80004c98:	0005883a 	mov	r2,zero
}
80004c9c:	e037883a 	mov	sp,fp
80004ca0:	dfc00117 	ldw	ra,4(sp)
80004ca4:	df000017 	ldw	fp,0(sp)
80004ca8:	dec00204 	addi	sp,sp,8
80004cac:	f800283a 	ret

80004cb0 <dmac_read>:
 *******************************************************************************/

int32_t dmac_read(dmac_core core,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
80004cb0:	defffb04 	addi	sp,sp,-20
80004cb4:	df000415 	stw	fp,16(sp)
80004cb8:	df000404 	addi	fp,sp,16
80004cbc:	e13ffc15 	stw	r4,-16(fp)
80004cc0:	e17ffd15 	stw	r5,-12(fp)
80004cc4:	e1bffe15 	stw	r6,-8(fp)
80004cc8:	e1ffff15 	stw	r7,-4(fp)
	*reg_data = ad_reg_read((core.base_address + reg_addr));
80004ccc:	e0fffc17 	ldw	r3,-16(fp)
80004cd0:	e0800117 	ldw	r2,4(fp)
80004cd4:	1885883a 	add	r2,r3,r2
80004cd8:	10800037 	ldwio	r2,0(r2)
80004cdc:	1007883a 	mov	r3,r2
80004ce0:	e0800217 	ldw	r2,8(fp)
80004ce4:	10c00015 	stw	r3,0(r2)

	return 0;
80004ce8:	0005883a 	mov	r2,zero
}
80004cec:	e037883a 	mov	sp,fp
80004cf0:	df000017 	ldw	fp,0(sp)
80004cf4:	dec00104 	addi	sp,sp,4
80004cf8:	f800283a 	ret

80004cfc <dmac_write>:
 *******************************************************************************/

int32_t dmac_write(dmac_core core,
		uint32_t reg_addr,
		uint32_t reg_data)
{
80004cfc:	defffb04 	addi	sp,sp,-20
80004d00:	df000415 	stw	fp,16(sp)
80004d04:	df000404 	addi	fp,sp,16
80004d08:	e13ffc15 	stw	r4,-16(fp)
80004d0c:	e17ffd15 	stw	r5,-12(fp)
80004d10:	e1bffe15 	stw	r6,-8(fp)
80004d14:	e1ffff15 	stw	r7,-4(fp)
	ad_reg_write((core.base_address + reg_addr), reg_data);
80004d18:	e0fffc17 	ldw	r3,-16(fp)
80004d1c:	e0800117 	ldw	r2,4(fp)
80004d20:	1885883a 	add	r2,r3,r2
80004d24:	1007883a 	mov	r3,r2
80004d28:	e0800217 	ldw	r2,8(fp)
80004d2c:	18800035 	stwio	r2,0(r3)

	return 0;
80004d30:	0005883a 	mov	r2,zero
}
80004d34:	e037883a 	mov	sp,fp
80004d38:	df000017 	ldw	fp,0(sp)
80004d3c:	dec00104 	addi	sp,sp,4
80004d40:	f800283a 	ret

80004d44 <dmac_start_transaction>:
/***************************************************************************//**
 * @brief dmac_start_transaction
 *******************************************************************************/

int32_t dmac_start_transaction(dmac_core dma)
{
80004d44:	defff604 	addi	sp,sp,-40
80004d48:	dfc00915 	stw	ra,36(sp)
80004d4c:	df000815 	stw	fp,32(sp)
80004d50:	df000804 	addi	fp,sp,32
80004d54:	e13ffa15 	stw	r4,-24(fp)
80004d58:	e17ffb15 	stw	r5,-20(fp)
80004d5c:	e1bffc15 	stw	r6,-16(fp)
80004d60:	e1fffd15 	stw	r7,-12(fp)

	uint32_t reg_val = 0;
80004d64:	e03ffe15 	stw	zero,-8(fp)
	uint32_t timer = 0;
80004d68:	e03fff15 	stw	zero,-4(fp)

	dmac_write(dma, DMAC_REG_CTRL, 0x0);
80004d6c:	d8000115 	stw	zero,4(sp)
80004d70:	00810004 	movi	r2,1024
80004d74:	d8800015 	stw	r2,0(sp)
80004d78:	e13ffa17 	ldw	r4,-24(fp)
80004d7c:	e17ffb17 	ldw	r5,-20(fp)
80004d80:	e1bffc17 	ldw	r6,-16(fp)
80004d84:	e1fffd17 	ldw	r7,-12(fp)
80004d88:	0004cfc0 	call	80004cfc <dmac_write>
	dmac_write(dma, DMAC_REG_CTRL, DMAC_CTRL_ENABLE);
80004d8c:	00800044 	movi	r2,1
80004d90:	d8800115 	stw	r2,4(sp)
80004d94:	00810004 	movi	r2,1024
80004d98:	d8800015 	stw	r2,0(sp)
80004d9c:	e13ffa17 	ldw	r4,-24(fp)
80004da0:	e17ffb17 	ldw	r5,-20(fp)
80004da4:	e1bffc17 	ldw	r6,-16(fp)
80004da8:	e1fffd17 	ldw	r7,-12(fp)
80004dac:	0004cfc0 	call	80004cfc <dmac_write>

	dmac_write(dma, DMAC_REG_IRQ_MASK, 0x0);
80004db0:	d8000115 	stw	zero,4(sp)
80004db4:	00802004 	movi	r2,128
80004db8:	d8800015 	stw	r2,0(sp)
80004dbc:	e13ffa17 	ldw	r4,-24(fp)
80004dc0:	e17ffb17 	ldw	r5,-20(fp)
80004dc4:	e1bffc17 	ldw	r6,-16(fp)
80004dc8:	e1fffd17 	ldw	r7,-12(fp)
80004dcc:	0004cfc0 	call	80004cfc <dmac_write>

        if(dma.transfer) {
80004dd0:	e0bffd17 	ldw	r2,-12(fp)
80004dd4:	10001f26 	beq	r2,zero,80004e54 <dmac_start_transaction+0x110>
	        dmac_read(dma, DMAC_REG_TRANSFER_ID, &(dma.transfer->id));
80004dd8:	e0bffd17 	ldw	r2,-12(fp)
80004ddc:	d8800115 	stw	r2,4(sp)
80004de0:	00810104 	movi	r2,1028
80004de4:	d8800015 	stw	r2,0(sp)
80004de8:	e13ffa17 	ldw	r4,-24(fp)
80004dec:	e17ffb17 	ldw	r5,-20(fp)
80004df0:	e1bffc17 	ldw	r6,-16(fp)
80004df4:	e1fffd17 	ldw	r7,-12(fp)
80004df8:	0004cb00 	call	80004cb0 <dmac_read>
        } else {
                ad_printf("%s : Undefined DMA transfer.\n", __func__);
                return -1;
        }
	dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
80004dfc:	e0bffe04 	addi	r2,fp,-8
80004e00:	d8800115 	stw	r2,4(sp)
80004e04:	00802104 	movi	r2,132
80004e08:	d8800015 	stw	r2,0(sp)
80004e0c:	e13ffa17 	ldw	r4,-24(fp)
80004e10:	e17ffb17 	ldw	r5,-20(fp)
80004e14:	e1bffc17 	ldw	r6,-16(fp)
80004e18:	e1fffd17 	ldw	r7,-12(fp)
80004e1c:	0004cb00 	call	80004cb0 <dmac_read>

	dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
80004e20:	e0bffe17 	ldw	r2,-8(fp)
80004e24:	d8800115 	stw	r2,4(sp)
80004e28:	00802104 	movi	r2,132
80004e2c:	d8800015 	stw	r2,0(sp)
80004e30:	e13ffa17 	ldw	r4,-24(fp)
80004e34:	e17ffb17 	ldw	r5,-20(fp)
80004e38:	e1bffc17 	ldw	r6,-16(fp)
80004e3c:	e1fffd17 	ldw	r7,-12(fp)
80004e40:	0004cfc0 	call	80004cfc <dmac_write>

	if(dma.type == DMAC_RX) {
80004e44:	e0bffb03 	ldbu	r2,-20(fp)
80004e48:	10803fcc 	andi	r2,r2,255
80004e4c:	10001b1e 	bne	r2,zero,80004ebc <dmac_start_transaction+0x178>
80004e50:	00000706 	br	80004e70 <dmac_start_transaction+0x12c>
                ad_printf("%s : Undefined DMA transfer.\n", __func__);
80004e54:	016000b4 	movhi	r5,32770
80004e58:	2956fb04 	addi	r5,r5,23532
80004e5c:	012000b4 	movhi	r4,32770
80004e60:	2116f304 	addi	r4,r4,23500
80004e64:	0010d740 	call	80010d74 <printf>
                return -1;
80004e68:	00bfffc4 	movi	r2,-1
80004e6c:	00009306 	br	800050bc <dmac_start_transaction+0x378>
		dmac_write(dma, DMAC_REG_DEST_ADDRESS, dma.transfer->start_address);
80004e70:	e0bffd17 	ldw	r2,-12(fp)
80004e74:	10800117 	ldw	r2,4(r2)
80004e78:	d8800115 	stw	r2,4(sp)
80004e7c:	00810404 	movi	r2,1040
80004e80:	d8800015 	stw	r2,0(sp)
80004e84:	e13ffa17 	ldw	r4,-24(fp)
80004e88:	e17ffb17 	ldw	r5,-20(fp)
80004e8c:	e1bffc17 	ldw	r6,-16(fp)
80004e90:	e1fffd17 	ldw	r7,-12(fp)
80004e94:	0004cfc0 	call	80004cfc <dmac_write>
		dmac_write(dma, DMAC_REG_DEST_STRIDE, 0x0);
80004e98:	d8000115 	stw	zero,4(sp)
80004e9c:	00810804 	movi	r2,1056
80004ea0:	d8800015 	stw	r2,0(sp)
80004ea4:	e13ffa17 	ldw	r4,-24(fp)
80004ea8:	e17ffb17 	ldw	r5,-20(fp)
80004eac:	e1bffc17 	ldw	r6,-16(fp)
80004eb0:	e1fffd17 	ldw	r7,-12(fp)
80004eb4:	0004cfc0 	call	80004cfc <dmac_write>
80004eb8:	00001c06 	br	80004f2c <dmac_start_transaction+0x1e8>
	} else {    /* DMAC_TX */
		dmac_write(dma, DMAC_REG_SRC_ADDRESS, dma.transfer->start_address);
80004ebc:	e0bffd17 	ldw	r2,-12(fp)
80004ec0:	10800117 	ldw	r2,4(r2)
80004ec4:	d8800115 	stw	r2,4(sp)
80004ec8:	00810504 	movi	r2,1044
80004ecc:	d8800015 	stw	r2,0(sp)
80004ed0:	e13ffa17 	ldw	r4,-24(fp)
80004ed4:	e17ffb17 	ldw	r5,-20(fp)
80004ed8:	e1bffc17 	ldw	r6,-16(fp)
80004edc:	e1fffd17 	ldw	r7,-12(fp)
80004ee0:	0004cfc0 	call	80004cfc <dmac_write>
		dmac_write(dma, DMAC_REG_SRC_STRIDE, 0x0);
80004ee4:	d8000115 	stw	zero,4(sp)
80004ee8:	00810904 	movi	r2,1060
80004eec:	d8800015 	stw	r2,0(sp)
80004ef0:	e13ffa17 	ldw	r4,-24(fp)
80004ef4:	e17ffb17 	ldw	r5,-20(fp)
80004ef8:	e1bffc17 	ldw	r6,-16(fp)
80004efc:	e1fffd17 	ldw	r7,-12(fp)
80004f00:	0004cfc0 	call	80004cfc <dmac_write>
		dmac_write(dma, DMAC_REG_FLAGS, dma.flags);
80004f04:	e0bffb43 	ldbu	r2,-19(fp)
80004f08:	10803fcc 	andi	r2,r2,255
80004f0c:	d8800115 	stw	r2,4(sp)
80004f10:	00810304 	movi	r2,1036
80004f14:	d8800015 	stw	r2,0(sp)
80004f18:	e13ffa17 	ldw	r4,-24(fp)
80004f1c:	e17ffb17 	ldw	r5,-20(fp)
80004f20:	e1bffc17 	ldw	r6,-16(fp)
80004f24:	e1fffd17 	ldw	r7,-12(fp)
80004f28:	0004cfc0 	call	80004cfc <dmac_write>
	}
	dmac_write(dma, DMAC_REG_X_LENGTH, (2 * dma.transfer->no_of_samples) - 1);
80004f2c:	e0bffd17 	ldw	r2,-12(fp)
80004f30:	10800217 	ldw	r2,8(r2)
80004f34:	1085883a 	add	r2,r2,r2
80004f38:	10bfffc4 	addi	r2,r2,-1
80004f3c:	d8800115 	stw	r2,4(sp)
80004f40:	00810604 	movi	r2,1048
80004f44:	d8800015 	stw	r2,0(sp)
80004f48:	e13ffa17 	ldw	r4,-24(fp)
80004f4c:	e17ffb17 	ldw	r5,-20(fp)
80004f50:	e1bffc17 	ldw	r6,-16(fp)
80004f54:	e1fffd17 	ldw	r7,-12(fp)
80004f58:	0004cfc0 	call	80004cfc <dmac_write>
	dmac_write(dma, DMAC_REG_Y_LENGTH, 0x0);
80004f5c:	d8000115 	stw	zero,4(sp)
80004f60:	00810704 	movi	r2,1052
80004f64:	d8800015 	stw	r2,0(sp)
80004f68:	e13ffa17 	ldw	r4,-24(fp)
80004f6c:	e17ffb17 	ldw	r5,-20(fp)
80004f70:	e1bffc17 	ldw	r6,-16(fp)
80004f74:	e1fffd17 	ldw	r7,-12(fp)
80004f78:	0004cfc0 	call	80004cfc <dmac_write>

	dmac_write(dma, DMAC_REG_START_TRANSFER, 0x1);
80004f7c:	00800044 	movi	r2,1
80004f80:	d8800115 	stw	r2,4(sp)
80004f84:	00810204 	movi	r2,1032
80004f88:	d8800015 	stw	r2,0(sp)
80004f8c:	e13ffa17 	ldw	r4,-24(fp)
80004f90:	e17ffb17 	ldw	r5,-20(fp)
80004f94:	e1bffc17 	ldw	r6,-16(fp)
80004f98:	e1fffd17 	ldw	r7,-12(fp)
80004f9c:	0004cfc0 	call	80004cfc <dmac_write>
	if (dma.flags & DMAC_FLAGS_CYCLIC)
80004fa0:	e0bffb43 	ldbu	r2,-19(fp)
80004fa4:	10803fcc 	andi	r2,r2,255
80004fa8:	1080004c 	andi	r2,r2,1
80004fac:	10000226 	beq	r2,zero,80004fb8 <dmac_start_transaction+0x274>
		return 0;
80004fb0:	0005883a 	mov	r2,zero
80004fb4:	00004106 	br	800050bc <dmac_start_transaction+0x378>
	/* Wait until the new transfer is queued. */
	do {
		dmac_read(dma, DMAC_REG_START_TRANSFER, &reg_val);
80004fb8:	e0bffe04 	addi	r2,fp,-8
80004fbc:	d8800115 	stw	r2,4(sp)
80004fc0:	00810204 	movi	r2,1032
80004fc4:	d8800015 	stw	r2,0(sp)
80004fc8:	e13ffa17 	ldw	r4,-24(fp)
80004fcc:	e17ffb17 	ldw	r5,-20(fp)
80004fd0:	e1bffc17 	ldw	r6,-16(fp)
80004fd4:	e1fffd17 	ldw	r7,-12(fp)
80004fd8:	0004cb00 	call	80004cb0 <dmac_read>
	}
	while(reg_val == 1);
80004fdc:	e0bffe17 	ldw	r2,-8(fp)
80004fe0:	10800060 	cmpeqi	r2,r2,1
80004fe4:	103ff41e 	bne	r2,zero,80004fb8 <_gp+0xfffd4244>

	/* Wait until the current transfer is completed. */
	do {
		dmac_read(dma, DMAC_REG_IRQ_PENDING, &reg_val);
80004fe8:	e0bffe04 	addi	r2,fp,-8
80004fec:	d8800115 	stw	r2,4(sp)
80004ff0:	00802104 	movi	r2,132
80004ff4:	d8800015 	stw	r2,0(sp)
80004ff8:	e13ffa17 	ldw	r4,-24(fp)
80004ffc:	e17ffb17 	ldw	r5,-20(fp)
80005000:	e1bffc17 	ldw	r6,-16(fp)
80005004:	e1fffd17 	ldw	r7,-12(fp)
80005008:	0004cb00 	call	80004cb0 <dmac_read>
	}
	while(reg_val != (DMAC_IRQ_SOT | DMAC_IRQ_EOT));
8000500c:	e0bffe17 	ldw	r2,-8(fp)
80005010:	108000d8 	cmpnei	r2,r2,3
80005014:	103ff41e 	bne	r2,zero,80004fe8 <_gp+0xfffd4274>
	dmac_write(dma, DMAC_REG_IRQ_PENDING, reg_val);
80005018:	e0bffe17 	ldw	r2,-8(fp)
8000501c:	d8800115 	stw	r2,4(sp)
80005020:	00802104 	movi	r2,132
80005024:	d8800015 	stw	r2,0(sp)
80005028:	e13ffa17 	ldw	r4,-24(fp)
8000502c:	e17ffb17 	ldw	r5,-20(fp)
80005030:	e1bffc17 	ldw	r6,-16(fp)
80005034:	e1fffd17 	ldw	r7,-12(fp)
80005038:	0004cfc0 	call	80004cfc <dmac_write>

	/* Wait until the transfer with the ID transfer_id is completed. */
	do {
		dmac_read(dma, DMAC_REG_TRANSFER_DONE, &reg_val);
8000503c:	e0bffe04 	addi	r2,fp,-8
80005040:	d8800115 	stw	r2,4(sp)
80005044:	00810a04 	movi	r2,1064
80005048:	d8800015 	stw	r2,0(sp)
8000504c:	e13ffa17 	ldw	r4,-24(fp)
80005050:	e17ffb17 	ldw	r5,-20(fp)
80005054:	e1bffc17 	ldw	r6,-16(fp)
80005058:	e1fffd17 	ldw	r7,-12(fp)
8000505c:	0004cb00 	call	80004cb0 <dmac_read>
		timer++;
80005060:	e0bfff17 	ldw	r2,-4(fp)
80005064:	10800044 	addi	r2,r2,1
80005068:	e0bfff15 	stw	r2,-4(fp)
		if(timer == TIMEOUT) {
8000506c:	e0bfff17 	ldw	r2,-4(fp)
80005070:	1089c418 	cmpnei	r2,r2,10000
80005074:	1000021e 	bne	r2,zero,80005080 <dmac_start_transaction+0x33c>
			return -1;
80005078:	00bfffc4 	movi	r2,-1
8000507c:	00000f06 	br	800050bc <dmac_start_transaction+0x378>
		}
		mdelay(1);
80005080:	0100fa04 	movi	r4,1000
80005084:	00205040 	call	80020504 <usleep>
	}
	while((reg_val & (1 << dma.transfer->id)) != (1 << dma.transfer->id));
80005088:	e0bffd17 	ldw	r2,-12(fp)
8000508c:	10800017 	ldw	r2,0(r2)
80005090:	00c00044 	movi	r3,1
80005094:	1884983a 	sll	r2,r3,r2
80005098:	1007883a 	mov	r3,r2
8000509c:	e0bffe17 	ldw	r2,-8(fp)
800050a0:	1884703a 	and	r2,r3,r2
800050a4:	e0fffd17 	ldw	r3,-12(fp)
800050a8:	18c00017 	ldw	r3,0(r3)
800050ac:	01000044 	movi	r4,1
800050b0:	20c6983a 	sll	r3,r4,r3
800050b4:	10ffe11e 	bne	r2,r3,8000503c <_gp+0xfffd42c8>

#ifdef XILINX
	Xil_DCacheInvalidateRange(dma.transfer->start_address, (2 * dma.transfer->no_of_samples));
#endif

	return 0;
800050b8:	0005883a 	mov	r2,zero
}
800050bc:	e037883a 	mov	sp,fp
800050c0:	dfc00117 	ldw	ra,4(sp)
800050c4:	df000017 	ldw	fp,0(sp)
800050c8:	dec00204 	addi	sp,sp,8
800050cc:	f800283a 	ret

800050d0 <calc_zero_checksum>:
 * The modulo 256 sum of the preceding bytes (starting with the first byte
 * of the header) plus the checksum byte equals zero.
 * Platform Management FRU Information Storage Definition : section 16.2.[56]
 */
unsigned char calc_zero_checksum (unsigned char *data, size_t len)
{
800050d0:	defffb04 	addi	sp,sp,-20
800050d4:	df000415 	stw	fp,16(sp)
800050d8:	df000404 	addi	fp,sp,16
800050dc:	e13ffd15 	stw	r4,-12(fp)
800050e0:	e17ffc15 	stw	r5,-16(fp)
	size_t i;
	unsigned char tmp = 0;
800050e4:	e03ffec5 	stb	zero,-5(fp)

	for (i = 0; i <= len; i++)
800050e8:	e03fff15 	stw	zero,-4(fp)
800050ec:	00000a06 	br	80005118 <calc_zero_checksum+0x48>
		tmp += data[i];
800050f0:	e0fffd17 	ldw	r3,-12(fp)
800050f4:	e0bfff17 	ldw	r2,-4(fp)
800050f8:	1885883a 	add	r2,r3,r2
800050fc:	10800003 	ldbu	r2,0(r2)
80005100:	e0fffec3 	ldbu	r3,-5(fp)
80005104:	1885883a 	add	r2,r3,r2
80005108:	e0bffec5 	stb	r2,-5(fp)
	for (i = 0; i <= len; i++)
8000510c:	e0bfff17 	ldw	r2,-4(fp)
80005110:	10800044 	addi	r2,r2,1
80005114:	e0bfff15 	stw	r2,-4(fp)
80005118:	e0bfff17 	ldw	r2,-4(fp)
8000511c:	e0fffc17 	ldw	r3,-16(fp)
80005120:	18bff32e 	bgeu	r3,r2,800050f0 <_gp+0xfffd437c>

	return tmp;
80005124:	e0bffec3 	ldbu	r2,-5(fp)
}
80005128:	e037883a 	mov	sp,fp
8000512c:	df000017 	ldw	fp,0(sp)
80005130:	dec00104 	addi	sp,sp,4
80005134:	f800283a 	ret

80005138 <min2date>:
 *   up to : Wed Nov 24 07:56 2027
 * See:
 *   section 11, Platform Management FRU Information Storage Definition
 */
time_t min2date(unsigned int mins)
{
80005138:	defff104 	addi	sp,sp,-60
8000513c:	dfc00e15 	stw	ra,56(sp)
80005140:	df000d15 	stw	fp,52(sp)
80005144:	df000d04 	addi	fp,sp,52
80005148:	e13ff315 	stw	r4,-52(fp)
	struct tm tm;
	time_t tmp;

	/* Set up 01-Jan-1996 , and add the number of minutes to it */
	memset(&tm, 0, sizeof(struct tm));
8000514c:	e0bff404 	addi	r2,fp,-48
80005150:	01800b04 	movi	r6,44
80005154:	000b883a 	mov	r5,zero
80005158:	1009883a 	mov	r4,r2
8000515c:	00105d80 	call	800105d8 <memset>
	tm.tm_year = 96;
80005160:	00801804 	movi	r2,96
80005164:	e0bff915 	stw	r2,-28(fp)
	tm.tm_mday = 1;
80005168:	00800044 	movi	r2,1
8000516c:	e0bff715 	stw	r2,-36(fp)
	tm.tm_min += mins;
80005170:	e0bff517 	ldw	r2,-44(fp)
80005174:	1007883a 	mov	r3,r2
80005178:	e0bff317 	ldw	r2,-52(fp)
8000517c:	1885883a 	add	r2,r3,r2
80005180:	e0bff515 	stw	r2,-44(fp)
	tmp = mktime(&tm);
80005184:	e0bff404 	addi	r2,fp,-48
80005188:	1009883a 	mov	r4,r2
8000518c:	00109840 	call	80010984 <mktime>
80005190:	e0bfff15 	stw	r2,-4(fp)
	return tmp;
80005194:	e0bfff17 	ldw	r2,-4(fp)
}
80005198:	e037883a 	mov	sp,fp
8000519c:	dfc00117 	ldw	ra,4(sp)
800051a0:	df000017 	ldw	fp,0(sp)
800051a4:	dec00204 	addi	sp,sp,8
800051a8:	f800283a 	ret

800051ac <ascii2six>:
/*
 * 6-bit ASCII Packing
 * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
int ascii2six(unsigned char **dest, unsigned char *src, size_t size)
{
800051ac:	defff204 	addi	sp,sp,-56
800051b0:	dfc00d15 	stw	ra,52(sp)
800051b4:	df000c15 	stw	fp,48(sp)
800051b8:	df000c04 	addi	fp,sp,48
800051bc:	e13ff715 	stw	r4,-36(fp)
800051c0:	e17ff615 	stw	r5,-40(fp)
800051c4:	e1bff515 	stw	r6,-44(fp)
	size_t i = 0;
800051c8:	e03fff15 	stw	zero,-4(fp)
	ssize_t j;
	unsigned int k, m = 0;
800051cc:	e03ffe15 	stw	zero,-8(fp)
	unsigned char *p, *d, *e;

	if (!src || !size)
800051d0:	e0bff617 	ldw	r2,-40(fp)
800051d4:	10000226 	beq	r2,zero,800051e0 <ascii2six+0x34>
800051d8:	e0bff517 	ldw	r2,-44(fp)
800051dc:	1000021e 	bne	r2,zero,800051e8 <ascii2six+0x3c>
		return 0;
800051e0:	0005883a 	mov	r2,zero
800051e4:	0000a506 	br	8000547c <ascii2six+0x2d0>

	e = d = calloc(1, size);
800051e8:	e17ff517 	ldw	r5,-44(fp)
800051ec:	01000044 	movi	r4,1
800051f0:	000f9d00 	call	8000f9d0 <calloc>
800051f4:	e0bffc15 	stw	r2,-16(fp)
800051f8:	e0bffc17 	ldw	r2,-16(fp)
800051fc:	e0bffb15 	stw	r2,-20(fp)

	p = src;
80005200:	e0bff617 	ldw	r2,-40(fp)
80005204:	e0bffd15 	stw	r2,-12(fp)
	/*
	 * 6-bit requires uppercase chars, between 0 and 0x3f
	 */
	while (*p != '\0' && i <= size) {
80005208:	00003706 	br	800052e8 <ascii2six+0x13c>
		j = toupper(*p) - 0x20;
8000520c:	e0bffd17 	ldw	r2,-12(fp)
80005210:	10800003 	ldbu	r2,0(r2)
80005214:	e0bffac5 	stb	r2,-21(fp)
80005218:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8000521c:	1007883a 	mov	r3,r2
80005220:	e0bffac3 	ldbu	r2,-21(fp)
80005224:	10800044 	addi	r2,r2,1
80005228:	1885883a 	add	r2,r3,r2
8000522c:	10800003 	ldbu	r2,0(r2)
80005230:	10803fcc 	andi	r2,r2,255
80005234:	108000cc 	andi	r2,r2,3
80005238:	10800098 	cmpnei	r2,r2,2
8000523c:	1000031e 	bne	r2,zero,8000524c <ascii2six+0xa0>
80005240:	e0bffac3 	ldbu	r2,-21(fp)
80005244:	10bff804 	addi	r2,r2,-32
80005248:	00000106 	br	80005250 <ascii2six+0xa4>
8000524c:	e0bffac3 	ldbu	r2,-21(fp)
80005250:	10bff804 	addi	r2,r2,-32
80005254:	e0bff915 	stw	r2,-28(fp)
		if (j < 0 || j >= 0x40) {
80005258:	e0bff917 	ldw	r2,-28(fp)
8000525c:	10000316 	blt	r2,zero,8000526c <ascii2six+0xc0>
80005260:	e0bff917 	ldw	r2,-28(fp)
80005264:	10801010 	cmplti	r2,r2,64
80005268:	1000121e 	bne	r2,zero,800052b4 <ascii2six+0x108>
			printf_warn("%s : trying to convert a string '%s'\n"
8000526c:	e0bffd17 	ldw	r2,-12(fp)
80005270:	10800003 	ldbu	r2,0(r2)
80005274:	10c03fcc 	andi	r3,r2,255
80005278:	e0bffd17 	ldw	r2,-12(fp)
8000527c:	10800003 	ldbu	r2,0(r2)
80005280:	10803fcc 	andi	r2,r2,255
80005284:	d8800015 	stw	r2,0(sp)
80005288:	180f883a 	mov	r7,r3
8000528c:	e1bff617 	ldw	r6,-40(fp)
80005290:	016000b4 	movhi	r5,32770
80005294:	29587704 	addi	r5,r5,25052
80005298:	012000b4 	movhi	r4,32770
8000529c:	21170104 	addi	r4,r4,23556
800052a0:	0010d740 	call	80010d74 <printf>
					"\t\twhich includes char '%c (0x%x)', which can't be converted\n",
					__func__, src, *p, *p);
			free(e);
800052a4:	e13ffb17 	ldw	r4,-20(fp)
800052a8:	000fc940 	call	8000fc94 <free>
			return -1;
800052ac:	00bfffc4 	movi	r2,-1
800052b0:	00007206 	br	8000547c <ascii2six+0x2d0>
		}
		*d = j;
800052b4:	e0bff917 	ldw	r2,-28(fp)
800052b8:	1007883a 	mov	r3,r2
800052bc:	e0bffc17 	ldw	r2,-16(fp)
800052c0:	10c00005 	stb	r3,0(r2)
		++p, ++d, i++;
800052c4:	e0bffd17 	ldw	r2,-12(fp)
800052c8:	10800044 	addi	r2,r2,1
800052cc:	e0bffd15 	stw	r2,-12(fp)
800052d0:	e0bffc17 	ldw	r2,-16(fp)
800052d4:	10800044 	addi	r2,r2,1
800052d8:	e0bffc15 	stw	r2,-16(fp)
800052dc:	e0bfff17 	ldw	r2,-4(fp)
800052e0:	10800044 	addi	r2,r2,1
800052e4:	e0bfff15 	stw	r2,-4(fp)
	while (*p != '\0' && i <= size) {
800052e8:	e0bffd17 	ldw	r2,-12(fp)
800052ec:	10800003 	ldbu	r2,0(r2)
800052f0:	10803fcc 	andi	r2,r2,255
800052f4:	10000326 	beq	r2,zero,80005304 <ascii2six+0x158>
800052f8:	e0bfff17 	ldw	r2,-4(fp)
800052fc:	e0fff517 	ldw	r3,-44(fp)
80005300:	18bfc22e 	bgeu	r3,r2,8000520c <_gp+0xfffd4498>
	}

	/* the length of dest, should be 3/4 of size, it's zero padded at the end */
	*dest = calloc(1, size + 1);
80005304:	e0bff517 	ldw	r2,-44(fp)
80005308:	10800044 	addi	r2,r2,1
8000530c:	100b883a 	mov	r5,r2
80005310:	01000044 	movi	r4,1
80005314:	000f9d00 	call	8000f9d0 <calloc>
80005318:	1007883a 	mov	r3,r2
8000531c:	e0bff717 	ldw	r2,-36(fp)
80005320:	10c00015 	stw	r3,0(r2)
	p = *dest;
80005324:	e0bff717 	ldw	r2,-36(fp)
80005328:	10800017 	ldw	r2,0(r2)
8000532c:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i <= size ; i+= 4) {
80005330:	e03fff15 	stw	zero,-4(fp)
80005334:	00004b06 	br	80005464 <ascii2six+0x2b8>
		k = e[i];
80005338:	e0fffb17 	ldw	r3,-20(fp)
8000533c:	e0bfff17 	ldw	r2,-4(fp)
80005340:	1885883a 	add	r2,r3,r2
80005344:	10800003 	ldbu	r2,0(r2)
80005348:	10803fcc 	andi	r2,r2,255
8000534c:	e0bff815 	stw	r2,-32(fp)
		m++;
80005350:	e0bffe17 	ldw	r2,-8(fp)
80005354:	10800044 	addi	r2,r2,1
80005358:	e0bffe15 	stw	r2,-8(fp)
		if ((i + 1) < size) {
8000535c:	e0bfff17 	ldw	r2,-4(fp)
80005360:	10c00044 	addi	r3,r2,1
80005364:	e0bff517 	ldw	r2,-44(fp)
80005368:	18800e2e 	bgeu	r3,r2,800053a4 <ascii2six+0x1f8>
			k |= e[i + 1] << 6;
8000536c:	e0bfff17 	ldw	r2,-4(fp)
80005370:	10800044 	addi	r2,r2,1
80005374:	e0fffb17 	ldw	r3,-20(fp)
80005378:	1885883a 	add	r2,r3,r2
8000537c:	10800003 	ldbu	r2,0(r2)
80005380:	10803fcc 	andi	r2,r2,255
80005384:	100491ba 	slli	r2,r2,6
80005388:	1007883a 	mov	r3,r2
8000538c:	e0bff817 	ldw	r2,-32(fp)
80005390:	1884b03a 	or	r2,r3,r2
80005394:	e0bff815 	stw	r2,-32(fp)
			m++;
80005398:	e0bffe17 	ldw	r2,-8(fp)
8000539c:	10800044 	addi	r2,r2,1
800053a0:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 2) < size) {
800053a4:	e0bfff17 	ldw	r2,-4(fp)
800053a8:	10c00084 	addi	r3,r2,2
800053ac:	e0bff517 	ldw	r2,-44(fp)
800053b0:	18800e2e 	bgeu	r3,r2,800053ec <ascii2six+0x240>
			k |= e[i + 2] << 12;
800053b4:	e0bfff17 	ldw	r2,-4(fp)
800053b8:	10800084 	addi	r2,r2,2
800053bc:	e0fffb17 	ldw	r3,-20(fp)
800053c0:	1885883a 	add	r2,r3,r2
800053c4:	10800003 	ldbu	r2,0(r2)
800053c8:	10803fcc 	andi	r2,r2,255
800053cc:	1004933a 	slli	r2,r2,12
800053d0:	1007883a 	mov	r3,r2
800053d4:	e0bff817 	ldw	r2,-32(fp)
800053d8:	1884b03a 	or	r2,r3,r2
800053dc:	e0bff815 	stw	r2,-32(fp)
			m++;
800053e0:	e0bffe17 	ldw	r2,-8(fp)
800053e4:	10800044 	addi	r2,r2,1
800053e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if ((i + 3) < size) {
800053ec:	e0bfff17 	ldw	r2,-4(fp)
800053f0:	10c000c4 	addi	r3,r2,3
800053f4:	e0bff517 	ldw	r2,-44(fp)
800053f8:	18800b2e 	bgeu	r3,r2,80005428 <ascii2six+0x27c>
			k |= e[i + 3] << 18;
800053fc:	e0bfff17 	ldw	r2,-4(fp)
80005400:	108000c4 	addi	r2,r2,3
80005404:	e0fffb17 	ldw	r3,-20(fp)
80005408:	1885883a 	add	r2,r3,r2
8000540c:	10800003 	ldbu	r2,0(r2)
80005410:	10803fcc 	andi	r2,r2,255
80005414:	100494ba 	slli	r2,r2,18
80005418:	1007883a 	mov	r3,r2
8000541c:	e0bff817 	ldw	r2,-32(fp)
80005420:	1884b03a 	or	r2,r3,r2
80005424:	e0bff815 	stw	r2,-32(fp)
		}
#if __BYTE_ORDER == __BIG_ENDIAN
		k = __builtin_bswap32(k);
80005428:	e0bff817 	ldw	r2,-32(fp)
8000542c:	1009883a 	mov	r4,r2
80005430:	000c8700 	call	8000c870 <__bswapsi2>
80005434:	e0bff815 	stw	r2,-32(fp)
#endif
		memcpy(p, &k, 3);
80005438:	e0bff804 	addi	r2,fp,-32
8000543c:	018000c4 	movi	r6,3
80005440:	100b883a 	mov	r5,r2
80005444:	e13ffd17 	ldw	r4,-12(fp)
80005448:	00104e80 	call	800104e8 <memcpy>
		p += 3;
8000544c:	e0bffd17 	ldw	r2,-12(fp)
80005450:	108000c4 	addi	r2,r2,3
80005454:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i <= size ; i+= 4) {
80005458:	e0bfff17 	ldw	r2,-4(fp)
8000545c:	10800104 	addi	r2,r2,4
80005460:	e0bfff15 	stw	r2,-4(fp)
80005464:	e0bfff17 	ldw	r2,-4(fp)
80005468:	e0fff517 	ldw	r3,-44(fp)
8000546c:	18bfb22e 	bgeu	r3,r2,80005338 <_gp+0xfffd45c4>
	}

	free (e);
80005470:	e13ffb17 	ldw	r4,-20(fp)
80005474:	000fc940 	call	8000fc94 <free>

	return  m;
80005478:	e0bffe17 	ldw	r2,-8(fp)
}
8000547c:	e037883a 	mov	sp,fp
80005480:	dfc00117 	ldw	ra,4(sp)
80005484:	df000017 	ldw	fp,0(sp)
80005488:	dec00204 	addi	sp,sp,8
8000548c:	f800283a 	ret

80005490 <six2ascii>:
/*
 *  * 6-bit ASCII Unpacking
 *   * Platform Management FRU Information Storage Definition:  Section 13.[23]
 */
unsigned char * six2ascii(unsigned char *buf, size_t size)
{
80005490:	defff904 	addi	sp,sp,-28
80005494:	dfc00615 	stw	ra,24(sp)
80005498:	df000515 	stw	fp,20(sp)
8000549c:	df000504 	addi	fp,sp,20
800054a0:	e13ffc15 	stw	r4,-16(fp)
800054a4:	e17ffb15 	stw	r5,-20(fp)
	unsigned char *p, *dest;
	size_t i;

	if (!size)
800054a8:	e0bffb17 	ldw	r2,-20(fp)
800054ac:	1000021e 	bne	r2,zero,800054b8 <six2ascii+0x28>
		return NULL;
800054b0:	0005883a 	mov	r2,zero
800054b4:	00008206 	br	800056c0 <six2ascii+0x230>

	/* the length of dest, should be 4/3 of size + 1 for null termination char*/
	dest = calloc(1, ((size * 4) / 3) + 2);
800054b8:	e0bffb17 	ldw	r2,-20(fp)
800054bc:	100690ba 	slli	r3,r2,2
800054c0:	008000c4 	movi	r2,3
800054c4:	1885203a 	divu	r2,r3,r2
800054c8:	10800084 	addi	r2,r2,2
800054cc:	100b883a 	mov	r5,r2
800054d0:	01000044 	movi	r4,1
800054d4:	000f9d00 	call	8000f9d0 <calloc>
800054d8:	e0bfff15 	stw	r2,-4(fp)
	p = dest;
800054dc:	e0bfff17 	ldw	r2,-4(fp)
800054e0:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i < size; i += 3) {
800054e4:	e03ffe15 	stw	zero,-8(fp)
800054e8:	00005806 	br	8000564c <six2ascii+0x1bc>
		*dest = (buf[i] & 0x3F) + 0x20;
800054ec:	e0fffc17 	ldw	r3,-16(fp)
800054f0:	e0bffe17 	ldw	r2,-8(fp)
800054f4:	1885883a 	add	r2,r3,r2
800054f8:	10800003 	ldbu	r2,0(r2)
800054fc:	10800fcc 	andi	r2,r2,63
80005500:	10800804 	addi	r2,r2,32
80005504:	1007883a 	mov	r3,r2
80005508:	e0bfff17 	ldw	r2,-4(fp)
8000550c:	10c00005 	stb	r3,0(r2)
		/* printf("1: %i: 0x%x (%c)\n", i, *dest, *dest); */
		dest++;
80005510:	e0bfff17 	ldw	r2,-4(fp)
80005514:	10800044 	addi	r2,r2,1
80005518:	e0bfff15 	stw	r2,-4(fp)
		if ((i + 1) < size) {
8000551c:	e0bffe17 	ldw	r2,-8(fp)
80005520:	10c00044 	addi	r3,r2,1
80005524:	e0bffb17 	ldw	r2,-20(fp)
80005528:	1880172e 	bgeu	r3,r2,80005588 <six2ascii+0xf8>
			*dest = ((buf[i] & 0xC0) >> 6 | (buf[i+1] & 0x0F) << 2) + 0x20;
8000552c:	e0fffc17 	ldw	r3,-16(fp)
80005530:	e0bffe17 	ldw	r2,-8(fp)
80005534:	1885883a 	add	r2,r3,r2
80005538:	10800003 	ldbu	r2,0(r2)
8000553c:	10803fcc 	andi	r2,r2,255
80005540:	1004d1ba 	srli	r2,r2,6
80005544:	1009883a 	mov	r4,r2
80005548:	e0bffe17 	ldw	r2,-8(fp)
8000554c:	10800044 	addi	r2,r2,1
80005550:	e0fffc17 	ldw	r3,-16(fp)
80005554:	1885883a 	add	r2,r3,r2
80005558:	10800003 	ldbu	r2,0(r2)
8000555c:	10803fcc 	andi	r2,r2,255
80005560:	100490ba 	slli	r2,r2,2
80005564:	10800f0c 	andi	r2,r2,60
80005568:	2084b03a 	or	r2,r4,r2
8000556c:	10800804 	addi	r2,r2,32
80005570:	1007883a 	mov	r3,r2
80005574:	e0bfff17 	ldw	r2,-4(fp)
80005578:	10c00005 	stb	r3,0(r2)
			/* printf("2: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
8000557c:	e0bfff17 	ldw	r2,-4(fp)
80005580:	10800044 	addi	r2,r2,1
80005584:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 2) < size) {
80005588:	e0bffe17 	ldw	r2,-8(fp)
8000558c:	10c00084 	addi	r3,r2,2
80005590:	e0bffb17 	ldw	r2,-20(fp)
80005594:	1880182e 	bgeu	r3,r2,800055f8 <six2ascii+0x168>
			*dest = ((buf[i+1] & 0xF0) >> 4 | (buf[i+2] & 0x03) << 4) + 0x20;
80005598:	e0bffe17 	ldw	r2,-8(fp)
8000559c:	10800044 	addi	r2,r2,1
800055a0:	e0fffc17 	ldw	r3,-16(fp)
800055a4:	1885883a 	add	r2,r3,r2
800055a8:	10800003 	ldbu	r2,0(r2)
800055ac:	10803fcc 	andi	r2,r2,255
800055b0:	1004d13a 	srli	r2,r2,4
800055b4:	1009883a 	mov	r4,r2
800055b8:	e0bffe17 	ldw	r2,-8(fp)
800055bc:	10800084 	addi	r2,r2,2
800055c0:	e0fffc17 	ldw	r3,-16(fp)
800055c4:	1885883a 	add	r2,r3,r2
800055c8:	10800003 	ldbu	r2,0(r2)
800055cc:	10803fcc 	andi	r2,r2,255
800055d0:	1004913a 	slli	r2,r2,4
800055d4:	10800c0c 	andi	r2,r2,48
800055d8:	2084b03a 	or	r2,r4,r2
800055dc:	10800804 	addi	r2,r2,32
800055e0:	1007883a 	mov	r3,r2
800055e4:	e0bfff17 	ldw	r2,-4(fp)
800055e8:	10c00005 	stb	r3,0(r2)
			/* printf("3: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
800055ec:	e0bfff17 	ldw	r2,-4(fp)
800055f0:	10800044 	addi	r2,r2,1
800055f4:	e0bfff15 	stw	r2,-4(fp)
		}
		if ((i + 3) < size) {
800055f8:	e0bffe17 	ldw	r2,-8(fp)
800055fc:	10c000c4 	addi	r3,r2,3
80005600:	e0bffb17 	ldw	r2,-20(fp)
80005604:	18800e2e 	bgeu	r3,r2,80005640 <six2ascii+0x1b0>
			*dest = ((buf[i+2] & 0xFC) >> 2) + 0x20;
80005608:	e0bffe17 	ldw	r2,-8(fp)
8000560c:	10800084 	addi	r2,r2,2
80005610:	e0fffc17 	ldw	r3,-16(fp)
80005614:	1885883a 	add	r2,r3,r2
80005618:	10800003 	ldbu	r2,0(r2)
8000561c:	10803fcc 	andi	r2,r2,255
80005620:	1004d0ba 	srli	r2,r2,2
80005624:	10800804 	addi	r2,r2,32
80005628:	1007883a 	mov	r3,r2
8000562c:	e0bfff17 	ldw	r2,-4(fp)
80005630:	10c00005 	stb	r3,0(r2)
			/* printf("4: %i: 0x%x (%c)\n", i, *dest, *dest); */
			dest++;
80005634:	e0bfff17 	ldw	r2,-4(fp)
80005638:	10800044 	addi	r2,r2,1
8000563c:	e0bfff15 	stw	r2,-4(fp)
	for (i = 0; i < size; i += 3) {
80005640:	e0bffe17 	ldw	r2,-8(fp)
80005644:	108000c4 	addi	r2,r2,3
80005648:	e0bffe15 	stw	r2,-8(fp)
8000564c:	e0fffe17 	ldw	r3,-8(fp)
80005650:	e0bffb17 	ldw	r2,-20(fp)
80005654:	18bfa536 	bltu	r3,r2,800054ec <_gp+0xfffd4778>
		}
	}
	/* make sure strings are null terminated */
	*dest = 0;
80005658:	e0bfff17 	ldw	r2,-4(fp)
8000565c:	10000005 	stb	zero,0(r2)

	/* Drop trailing spaces & null chars */
	dest--;
80005660:	e0bfff17 	ldw	r2,-4(fp)
80005664:	10bfffc4 	addi	r2,r2,-1
80005668:	e0bfff15 	stw	r2,-4(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
8000566c:	00000806 	br	80005690 <six2ascii+0x200>
		*dest = 0;
80005670:	e0bfff17 	ldw	r2,-4(fp)
80005674:	10000005 	stb	zero,0(r2)
		dest--;
80005678:	e0bfff17 	ldw	r2,-4(fp)
8000567c:	10bfffc4 	addi	r2,r2,-1
80005680:	e0bfff15 	stw	r2,-4(fp)
		size--;
80005684:	e0bffb17 	ldw	r2,-20(fp)
80005688:	10bfffc4 	addi	r2,r2,-1
8000568c:	e0bffb15 	stw	r2,-20(fp)
	while ((*dest == 0 || *dest == ' ') && size) {
80005690:	e0bfff17 	ldw	r2,-4(fp)
80005694:	10800003 	ldbu	r2,0(r2)
80005698:	10803fcc 	andi	r2,r2,255
8000569c:	10000526 	beq	r2,zero,800056b4 <six2ascii+0x224>
800056a0:	e0bfff17 	ldw	r2,-4(fp)
800056a4:	10800003 	ldbu	r2,0(r2)
800056a8:	10803fcc 	andi	r2,r2,255
800056ac:	10800818 	cmpnei	r2,r2,32
800056b0:	1000021e 	bne	r2,zero,800056bc <six2ascii+0x22c>
800056b4:	e0bffb17 	ldw	r2,-20(fp)
800056b8:	103fed1e 	bne	r2,zero,80005670 <_gp+0xfffd48fc>
	}

	return p;
800056bc:	e0bffd17 	ldw	r2,-12(fp)
}
800056c0:	e037883a 	mov	sp,fp
800056c4:	dfc00117 	ldw	ra,4(sp)
800056c8:	df000017 	ldw	fp,0(sp)
800056cc:	dec00204 	addi	sp,sp,8
800056d0:	f800283a 	ret

800056d4 <parse_string>:
 * Extract strings from fields
 * Section 13 TYPE/LENGTH BYTE FORMAT
 * Platform Management FRU Information Storage Definition
 */
unsigned int parse_string(unsigned char *p, unsigned char **str, const char * field)
{
800056d4:	defff504 	addi	sp,sp,-44
800056d8:	dfc00a15 	stw	ra,40(sp)
800056dc:	df000915 	stw	fp,36(sp)
800056e0:	df000904 	addi	fp,sp,36
800056e4:	e13ff915 	stw	r4,-28(fp)
800056e8:	e17ff815 	stw	r5,-32(fp)
800056ec:	e1bff715 	stw	r6,-36(fp)
	size_t len, i, j;

	len = p[0] & 0x3F;
800056f0:	e0bff917 	ldw	r2,-28(fp)
800056f4:	10800003 	ldbu	r2,0(r2)
800056f8:	10803fcc 	andi	r2,r2,255
800056fc:	10800fcc 	andi	r2,r2,63
80005700:	e0bffc15 	stw	r2,-16(fp)

	if (!len) {
80005704:	e0bffc17 	ldw	r2,-16(fp)
80005708:	10000c1e 	bne	r2,zero,8000573c <parse_string+0x68>
		*str = calloc(1, 3);
8000570c:	014000c4 	movi	r5,3
80005710:	01000044 	movi	r4,1
80005714:	000f9d00 	call	8000f9d0 <calloc>
80005718:	1007883a 	mov	r3,r2
8000571c:	e0bff817 	ldw	r2,-32(fp)
80005720:	10c00015 	stw	r3,0(r2)
		*str[0] = (FRU_STRING_ASCII << 6);
80005724:	e0bff817 	ldw	r2,-32(fp)
80005728:	10800017 	ldw	r2,0(r2)
8000572c:	00fff004 	movi	r3,-64
80005730:	10c00005 	stb	r3,0(r2)
		return 1;
80005734:	00800044 	movi	r2,1
80005738:	0000cd06 	br	80005a70 <parse_string+0x39c>
	}

	switch((p[0] >> 6) & 0x3 ) {
8000573c:	e0bff917 	ldw	r2,-28(fp)
80005740:	10800003 	ldbu	r2,0(r2)
80005744:	10803fcc 	andi	r2,r2,255
80005748:	1004d1ba 	srli	r2,r2,6
8000574c:	10803fcc 	andi	r2,r2,255
80005750:	108000cc 	andi	r2,r2,3
80005754:	10c00060 	cmpeqi	r3,r2,1
80005758:	18001a1e 	bne	r3,zero,800057c4 <parse_string+0xf0>
8000575c:	10c00088 	cmpgei	r3,r2,2
80005760:	1800021e 	bne	r3,zero,8000576c <parse_string+0x98>
80005764:	10000626 	beq	r2,zero,80005780 <parse_string+0xac>
80005768:	0000bf06 	br	80005a68 <parse_string+0x394>
8000576c:	10c000a0 	cmpeqi	r3,r2,2
80005770:	1800181e 	bne	r3,zero,800057d4 <parse_string+0x100>
80005774:	108000e0 	cmpeqi	r2,r2,3
80005778:	1000461e 	bne	r2,zero,80005894 <parse_string+0x1c0>
8000577c:	0000ba06 	br	80005a68 <parse_string+0x394>
		case FRU_STRING_BINARY:
			/* binary or unspecified */
			*str = calloc(1, len + 2);
80005780:	e0bffc17 	ldw	r2,-16(fp)
80005784:	10800084 	addi	r2,r2,2
80005788:	100b883a 	mov	r5,r2
8000578c:	01000044 	movi	r4,1
80005790:	000f9d00 	call	8000f9d0 <calloc>
80005794:	1007883a 	mov	r3,r2
80005798:	e0bff817 	ldw	r2,-32(fp)
8000579c:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
800057a0:	e0bff817 	ldw	r2,-32(fp)
800057a4:	10c00017 	ldw	r3,0(r2)
800057a8:	e0bffc17 	ldw	r2,-16(fp)
800057ac:	10800044 	addi	r2,r2,1
800057b0:	100d883a 	mov	r6,r2
800057b4:	e17ff917 	ldw	r5,-28(fp)
800057b8:	1809883a 	mov	r4,r3
800057bc:	00104e80 	call	800104e8 <memcpy>
			break;
800057c0:	0000a906 	br	80005a68 <parse_string+0x394>
		case FRU_STRING_BCD:
			/* BCD plus */
			printf_err("BCD - sorry\n");
800057c4:	012000b4 	movhi	r4,32770
800057c8:	21171a04 	addi	r4,r4,23656
800057cc:	0010e980 	call	80010e98 <puts>
			break;
800057d0:	0000a506 	br	80005a68 <parse_string+0x394>
			/* 6-bit ASCII, packed */
			{
				unsigned char *tmp1, *tmp2;
				size_t tlen;

				tmp1 = six2ascii(&p[1], p[0]& 0x3F);
800057d4:	e0bff917 	ldw	r2,-28(fp)
800057d8:	10c00044 	addi	r3,r2,1
800057dc:	e0bff917 	ldw	r2,-28(fp)
800057e0:	10800003 	ldbu	r2,0(r2)
800057e4:	10803fcc 	andi	r2,r2,255
800057e8:	10800fcc 	andi	r2,r2,63
800057ec:	100b883a 	mov	r5,r2
800057f0:	1809883a 	mov	r4,r3
800057f4:	00054900 	call	80005490 <six2ascii>
800057f8:	e0bffb15 	stw	r2,-20(fp)
				tlen = strlen((char *)tmp1);
800057fc:	e13ffb17 	ldw	r4,-20(fp)
80005800:	00111940 	call	80011194 <strlen>
80005804:	e0bffd15 	stw	r2,-12(fp)
				*str = calloc(1, tlen + 2);
80005808:	e0bffd17 	ldw	r2,-12(fp)
8000580c:	10800084 	addi	r2,r2,2
80005810:	100b883a 	mov	r5,r2
80005814:	01000044 	movi	r4,1
80005818:	000f9d00 	call	8000f9d0 <calloc>
8000581c:	1007883a 	mov	r3,r2
80005820:	e0bff817 	ldw	r2,-32(fp)
80005824:	10c00015 	stw	r3,0(r2)

				tmp2 = *str;
80005828:	e0bff817 	ldw	r2,-32(fp)
8000582c:	10800017 	ldw	r2,0(r2)
80005830:	e0bffa15 	stw	r2,-24(fp)
				tmp2++;
80005834:	e0bffa17 	ldw	r2,-24(fp)
80005838:	10800044 	addi	r2,r2,1
8000583c:	e0bffa15 	stw	r2,-24(fp)
				memcpy(tmp2, tmp1, tlen + 1);
80005840:	e0bffd17 	ldw	r2,-12(fp)
80005844:	10800044 	addi	r2,r2,1
80005848:	100d883a 	mov	r6,r2
8000584c:	e17ffb17 	ldw	r5,-20(fp)
80005850:	e13ffa17 	ldw	r4,-24(fp)
80005854:	00104e80 	call	800104e8 <memcpy>
				if (tlen > 0x3F)
80005858:	e0bffd17 	ldw	r2,-12(fp)
8000585c:	10801030 	cmpltui	r2,r2,64
80005860:	1000021e 	bne	r2,zero,8000586c <parse_string+0x198>
					tlen = 0x3F;
80005864:	00800fc4 	movi	r2,63
80005868:	e0bffd15 	stw	r2,-12(fp)

				*str[0] = (FRU_STRING_ASCII << 6) | tlen;
8000586c:	e0bffd17 	ldw	r2,-12(fp)
80005870:	1009883a 	mov	r4,r2
80005874:	e0bff817 	ldw	r2,-32(fp)
80005878:	10800017 	ldw	r2,0(r2)
8000587c:	00fff004 	movi	r3,-64
80005880:	20c6b03a 	or	r3,r4,r3
80005884:	10c00005 	stb	r3,0(r2)
				free(tmp1);
80005888:	e13ffb17 	ldw	r4,-20(fp)
8000588c:	000fc940 	call	8000fc94 <free>
			}
			break;
80005890:	00007506 	br	80005a68 <parse_string+0x394>
		case FRU_STRING_ASCII:
			/* 8-bit ASCII */
			*str = calloc(1, len + 2);
80005894:	e0bffc17 	ldw	r2,-16(fp)
80005898:	10800084 	addi	r2,r2,2
8000589c:	100b883a 	mov	r5,r2
800058a0:	01000044 	movi	r4,1
800058a4:	000f9d00 	call	8000f9d0 <calloc>
800058a8:	1007883a 	mov	r3,r2
800058ac:	e0bff817 	ldw	r2,-32(fp)
800058b0:	10c00015 	stw	r3,0(r2)
			memcpy(*str, p, len + 1);
800058b4:	e0bff817 	ldw	r2,-32(fp)
800058b8:	10c00017 	ldw	r3,0(r2)
800058bc:	e0bffc17 	ldw	r2,-16(fp)
800058c0:	10800044 	addi	r2,r2,1
800058c4:	100d883a 	mov	r6,r2
800058c8:	e17ff917 	ldw	r5,-28(fp)
800058cc:	1809883a 	mov	r4,r3
800058d0:	00104e80 	call	800104e8 <memcpy>
			for (i = 1; i < len; i++) {
800058d4:	00800044 	movi	r2,1
800058d8:	e0bfff15 	stw	r2,-4(fp)
800058dc:	00005e06 	br	80005a58 <parse_string+0x384>
				if (p[i] < 0x20 || p[i] == 0x7F) {
800058e0:	e0fff917 	ldw	r3,-28(fp)
800058e4:	e0bfff17 	ldw	r2,-4(fp)
800058e8:	1885883a 	add	r2,r3,r2
800058ec:	10800003 	ldbu	r2,0(r2)
800058f0:	10803fcc 	andi	r2,r2,255
800058f4:	10800830 	cmpltui	r2,r2,32
800058f8:	1000071e 	bne	r2,zero,80005918 <parse_string+0x244>
800058fc:	e0fff917 	ldw	r3,-28(fp)
80005900:	e0bfff17 	ldw	r2,-4(fp)
80005904:	1885883a 	add	r2,r3,r2
80005908:	10800003 	ldbu	r2,0(r2)
8000590c:	10803fcc 	andi	r2,r2,255
80005910:	10801fd8 	cmpnei	r2,r2,127
80005914:	10004d1e 	bne	r2,zero,80005a4c <parse_string+0x378>
					printf_warn("Field '%s' marked as ASCII, but contains non-printable "
80005918:	e17ff717 	ldw	r5,-36(fp)
8000591c:	012000b4 	movhi	r4,32770
80005920:	21171d04 	addi	r4,r4,23668
80005924:	0010d740 	call	80010d74 <printf>
							"characters:\n", field);
					printf_warn("  Length/Type : 0x%x (length:%i; type:ASCII(%i)\n",
80005928:	e0bff917 	ldw	r2,-28(fp)
8000592c:	10800003 	ldbu	r2,0(r2)
80005930:	10c03fcc 	andi	r3,r2,255
80005934:	e0bff917 	ldw	r2,-28(fp)
80005938:	10800003 	ldbu	r2,0(r2)
8000593c:	10803fcc 	andi	r2,r2,255
80005940:	10800fcc 	andi	r2,r2,63
80005944:	01c000c4 	movi	r7,3
80005948:	100d883a 	mov	r6,r2
8000594c:	180b883a 	mov	r5,r3
80005950:	012000b4 	movhi	r4,32770
80005954:	21172e04 	addi	r4,r4,23736
80005958:	0010d740 	call	80010d74 <printf>
							p[0], p[0] & 0x3F, FRU_STRING_ASCII);
					printf_warn("  Contents : ");
8000595c:	012000b4 	movhi	r4,32770
80005960:	21173b04 	addi	r4,r4,23788
80005964:	0010d740 	call	80010d74 <printf>
					for (j = 1; j < len + 1; j++)
80005968:	00800044 	movi	r2,1
8000596c:	e0bffe15 	stw	r2,-8(fp)
80005970:	00000c06 	br	800059a4 <parse_string+0x2d0>
						printf_warn("0x%02x ", p[j]);
80005974:	e0fff917 	ldw	r3,-28(fp)
80005978:	e0bffe17 	ldw	r2,-8(fp)
8000597c:	1885883a 	add	r2,r3,r2
80005980:	10800003 	ldbu	r2,0(r2)
80005984:	10803fcc 	andi	r2,r2,255
80005988:	100b883a 	mov	r5,r2
8000598c:	012000b4 	movhi	r4,32770
80005990:	21173f04 	addi	r4,r4,23804
80005994:	0010d740 	call	80010d74 <printf>
					for (j = 1; j < len + 1; j++)
80005998:	e0bffe17 	ldw	r2,-8(fp)
8000599c:	10800044 	addi	r2,r2,1
800059a0:	e0bffe15 	stw	r2,-8(fp)
800059a4:	e0bffc17 	ldw	r2,-16(fp)
800059a8:	10800044 	addi	r2,r2,1
800059ac:	e0fffe17 	ldw	r3,-8(fp)
800059b0:	18bff036 	bltu	r3,r2,80005974 <_gp+0xfffd4c00>
					printf_warn(" |");
800059b4:	012000b4 	movhi	r4,32770
800059b8:	21174104 	addi	r4,r4,23812
800059bc:	0010d740 	call	80010d74 <printf>
					for (j = 0; j < len + 1; j++)
800059c0:	e03ffe15 	stw	zero,-8(fp)
800059c4:	00001a06 	br	80005a30 <parse_string+0x35c>
						printf_warn("%c", ((p[j] < 32) || (p[j] >= 127)) ? '.': p[j]);
800059c8:	e0fff917 	ldw	r3,-28(fp)
800059cc:	e0bffe17 	ldw	r2,-8(fp)
800059d0:	1885883a 	add	r2,r3,r2
800059d4:	10800003 	ldbu	r2,0(r2)
800059d8:	10803fcc 	andi	r2,r2,255
800059dc:	10800830 	cmpltui	r2,r2,32
800059e0:	10000d1e 	bne	r2,zero,80005a18 <parse_string+0x344>
800059e4:	e0fff917 	ldw	r3,-28(fp)
800059e8:	e0bffe17 	ldw	r2,-8(fp)
800059ec:	1885883a 	add	r2,r3,r2
800059f0:	10800003 	ldbu	r2,0(r2)
800059f4:	10803fcc 	andi	r2,r2,255
800059f8:	10801fe8 	cmpgeui	r2,r2,127
800059fc:	1000061e 	bne	r2,zero,80005a18 <parse_string+0x344>
80005a00:	e0fff917 	ldw	r3,-28(fp)
80005a04:	e0bffe17 	ldw	r2,-8(fp)
80005a08:	1885883a 	add	r2,r3,r2
80005a0c:	10800003 	ldbu	r2,0(r2)
80005a10:	10803fcc 	andi	r2,r2,255
80005a14:	00000106 	br	80005a1c <parse_string+0x348>
80005a18:	00800b84 	movi	r2,46
80005a1c:	1009883a 	mov	r4,r2
80005a20:	0010db40 	call	80010db4 <putchar>
					for (j = 0; j < len + 1; j++)
80005a24:	e0bffe17 	ldw	r2,-8(fp)
80005a28:	10800044 	addi	r2,r2,1
80005a2c:	e0bffe15 	stw	r2,-8(fp)
80005a30:	e0bffc17 	ldw	r2,-16(fp)
80005a34:	10800044 	addi	r2,r2,1
80005a38:	e0fffe17 	ldw	r3,-8(fp)
80005a3c:	18bfe236 	bltu	r3,r2,800059c8 <_gp+0xfffd4c54>
					printf_warn("|\n");
80005a40:	012000b4 	movhi	r4,32770
80005a44:	21174204 	addi	r4,r4,23816
80005a48:	0010e980 	call	80010e98 <puts>
			for (i = 1; i < len; i++) {
80005a4c:	e0bfff17 	ldw	r2,-4(fp)
80005a50:	10800044 	addi	r2,r2,1
80005a54:	e0bfff15 	stw	r2,-4(fp)
80005a58:	e0ffff17 	ldw	r3,-4(fp)
80005a5c:	e0bffc17 	ldw	r2,-16(fp)
80005a60:	18bf9f36 	bltu	r3,r2,800058e0 <_gp+0xfffd4b6c>
				}
			}
			break;
80005a64:	0001883a 	nop
	}
	return len + 1;
80005a68:	e0bffc17 	ldw	r2,-16(fp)
80005a6c:	10800044 	addi	r2,r2,1
}
80005a70:	e037883a 	mov	sp,fp
80005a74:	dfc00117 	ldw	ra,4(sp)
80005a78:	df000017 	ldw	fp,0(sp)
80005a7c:	dec00204 	addi	sp,sp,8
80005a80:	f800283a 	ret

80005a84 <parse_board_area>:
/*
 * Board Info Area Format
 * Platform Management FRU Information Storage Definition: Section 11
 */
struct BOARD_INFO * parse_board_area(unsigned char *data)
{
80005a84:	defff704 	addi	sp,sp,-36
80005a88:	dfc00815 	stw	ra,32(sp)
80005a8c:	df000715 	stw	fp,28(sp)
80005a90:	df000704 	addi	fp,sp,28
80005a94:	e13ffa15 	stw	r4,-24(fp)

	struct BOARD_INFO *fru;
	unsigned char *p;
	unsigned int len, i, j;

	fru = calloc(1, sizeof(struct BOARD_INFO));
80005a98:	01401104 	movi	r5,68
80005a9c:	01000044 	movi	r4,1
80005aa0:	000f9d00 	call	8000f9d0 <calloc>
80005aa4:	e0bffc15 	stw	r2,-16(fp)

	if (data[0] != 0x01) {
80005aa8:	e0bffa17 	ldw	r2,-24(fp)
80005aac:	10800003 	ldbu	r2,0(r2)
80005ab0:	10803fcc 	andi	r2,r2,255
80005ab4:	10800060 	cmpeqi	r2,r2,1
80005ab8:	1000081e 	bne	r2,zero,80005adc <parse_board_area+0x58>
		printf_err("Board Area Format Version mismatch: 0x%02x should be 0x01\n", data [0]);
80005abc:	e0bffa17 	ldw	r2,-24(fp)
80005ac0:	10800003 	ldbu	r2,0(r2)
80005ac4:	10803fcc 	andi	r2,r2,255
80005ac8:	100b883a 	mov	r5,r2
80005acc:	012000b4 	movhi	r4,32770
80005ad0:	21174304 	addi	r4,r4,23820
80005ad4:	0010d740 	call	80010d74 <printf>
		goto err;
80005ad8:	0000e806 	br	80005e7c <parse_board_area+0x3f8>
	}

	len = (data[1] * 8) - 1;
80005adc:	e0bffa17 	ldw	r2,-24(fp)
80005ae0:	10800044 	addi	r2,r2,1
80005ae4:	10800003 	ldbu	r2,0(r2)
80005ae8:	10803fcc 	andi	r2,r2,255
80005aec:	100490fa 	slli	r2,r2,3
80005af0:	10bfffc4 	addi	r2,r2,-1
80005af4:	e0bffe15 	stw	r2,-8(fp)
	if (calc_zero_checksum(data, len)) {
80005af8:	e17ffe17 	ldw	r5,-8(fp)
80005afc:	e13ffa17 	ldw	r4,-24(fp)
80005b00:	00050d00 	call	800050d0 <calc_zero_checksum>
80005b04:	10803fcc 	andi	r2,r2,255
80005b08:	10000426 	beq	r2,zero,80005b1c <parse_board_area+0x98>
		printf_err("Board Area Checksum failed");
80005b0c:	012000b4 	movhi	r4,32770
80005b10:	21175204 	addi	r4,r4,23880
80005b14:	0010d740 	call	80010d74 <printf>
		goto err;
80005b18:	0000d806 	br	80005e7c <parse_board_area+0x3f8>
	}

	if (data[2] != 0 && data[2] != 25) {
80005b1c:	e0bffa17 	ldw	r2,-24(fp)
80005b20:	10800084 	addi	r2,r2,2
80005b24:	10800003 	ldbu	r2,0(r2)
80005b28:	10803fcc 	andi	r2,r2,255
80005b2c:	10000f26 	beq	r2,zero,80005b6c <parse_board_area+0xe8>
80005b30:	e0bffa17 	ldw	r2,-24(fp)
80005b34:	10800084 	addi	r2,r2,2
80005b38:	10800003 	ldbu	r2,0(r2)
80005b3c:	10803fcc 	andi	r2,r2,255
80005b40:	10800660 	cmpeqi	r2,r2,25
80005b44:	1000091e 	bne	r2,zero,80005b6c <parse_board_area+0xe8>
		printf_err("Board Area is non-English - sorry: Lang code = %i\n", data[2]);
80005b48:	e0bffa17 	ldw	r2,-24(fp)
80005b4c:	10800084 	addi	r2,r2,2
80005b50:	10800003 	ldbu	r2,0(r2)
80005b54:	10803fcc 	andi	r2,r2,255
80005b58:	100b883a 	mov	r5,r2
80005b5c:	012000b4 	movhi	r4,32770
80005b60:	21175904 	addi	r4,r4,23908
80005b64:	0010d740 	call	80010d74 <printf>
		goto err;
80005b68:	0000c406 	br	80005e7c <parse_board_area+0x3f8>
	}

	len--;
80005b6c:	e0bffe17 	ldw	r2,-8(fp)
80005b70:	10bfffc4 	addi	r2,r2,-1
80005b74:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
80005b78:	00000306 	br	80005b88 <parse_board_area+0x104>
		len--;
80005b7c:	e0bffe17 	ldw	r2,-8(fp)
80005b80:	10bfffc4 	addi	r2,r2,-1
80005b84:	e0bffe15 	stw	r2,-8(fp)
	while ((data[len] == 0x00) && (len != 0))
80005b88:	e0fffa17 	ldw	r3,-24(fp)
80005b8c:	e0bffe17 	ldw	r2,-8(fp)
80005b90:	1885883a 	add	r2,r3,r2
80005b94:	10800003 	ldbu	r2,0(r2)
80005b98:	10803fcc 	andi	r2,r2,255
80005b9c:	1000021e 	bne	r2,zero,80005ba8 <parse_board_area+0x124>
80005ba0:	e0bffe17 	ldw	r2,-8(fp)
80005ba4:	103ff51e 	bne	r2,zero,80005b7c <_gp+0xfffd4e08>
	if (len == 0 || data[len] != 0xC1) {
80005ba8:	e0bffe17 	ldw	r2,-8(fp)
80005bac:	10000726 	beq	r2,zero,80005bcc <parse_board_area+0x148>
80005bb0:	e0fffa17 	ldw	r3,-24(fp)
80005bb4:	e0bffe17 	ldw	r2,-8(fp)
80005bb8:	1885883a 	add	r2,r3,r2
80005bbc:	10800003 	ldbu	r2,0(r2)
80005bc0:	10803fcc 	andi	r2,r2,255
80005bc4:	10803060 	cmpeqi	r2,r2,193
80005bc8:	10000b1e 	bne	r2,zero,80005bf8 <parse_board_area+0x174>
		printf_err("BOARD INFO not terminated properly, walking backwards len: "
80005bcc:	e0fffa17 	ldw	r3,-24(fp)
80005bd0:	e0bffe17 	ldw	r2,-8(fp)
80005bd4:	1885883a 	add	r2,r3,r2
80005bd8:	10800003 	ldbu	r2,0(r2)
80005bdc:	10803fcc 	andi	r2,r2,255
80005be0:	100d883a 	mov	r6,r2
80005be4:	e17ffe17 	ldw	r5,-8(fp)
80005be8:	012000b4 	movhi	r4,32770
80005bec:	21176604 	addi	r4,r4,23960
80005bf0:	0010d740 	call	80010d74 <printf>
				"%i:0x%02x should be 0xC1\n", len, data[len]);
		goto err;
80005bf4:	0000a106 	br	80005e7c <parse_board_area+0x3f8>
	}

	fru->mfg_date = data[3] | (data[4] << 8) | (data[5] << 16);
80005bf8:	e0bffa17 	ldw	r2,-24(fp)
80005bfc:	108000c4 	addi	r2,r2,3
80005c00:	10800003 	ldbu	r2,0(r2)
80005c04:	10c03fcc 	andi	r3,r2,255
80005c08:	e0bffa17 	ldw	r2,-24(fp)
80005c0c:	10800104 	addi	r2,r2,4
80005c10:	10800003 	ldbu	r2,0(r2)
80005c14:	10803fcc 	andi	r2,r2,255
80005c18:	1004923a 	slli	r2,r2,8
80005c1c:	1886b03a 	or	r3,r3,r2
80005c20:	e0bffa17 	ldw	r2,-24(fp)
80005c24:	10800144 	addi	r2,r2,5
80005c28:	10800003 	ldbu	r2,0(r2)
80005c2c:	10803fcc 	andi	r2,r2,255
80005c30:	1004943a 	slli	r2,r2,16
80005c34:	1884b03a 	or	r2,r3,r2
80005c38:	1007883a 	mov	r3,r2
80005c3c:	e0bffc17 	ldw	r2,-16(fp)
80005c40:	10c00115 	stw	r3,4(r2)

	p = &data[6];
80005c44:	e0bffa17 	ldw	r2,-24(fp)
80005c48:	10800184 	addi	r2,r2,6
80005c4c:	e0bfff15 	stw	r2,-4(fp)
	len -= 6;
80005c50:	e0bffe17 	ldw	r2,-8(fp)
80005c54:	10bffe84 	addi	r2,r2,-6
80005c58:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->manufacturer, "Manufacture");
80005c5c:	e0bffc17 	ldw	r2,-16(fp)
80005c60:	10800204 	addi	r2,r2,8
80005c64:	01a000b4 	movhi	r6,32770
80005c68:	31977c04 	addi	r6,r6,24048
80005c6c:	100b883a 	mov	r5,r2
80005c70:	e13fff17 	ldw	r4,-4(fp)
80005c74:	00056d40 	call	800056d4 <parse_string>
80005c78:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
80005c7c:	e0ffff17 	ldw	r3,-4(fp)
80005c80:	e0bffb17 	ldw	r2,-20(fp)
80005c84:	1885883a 	add	r2,r3,r2
80005c88:	e0bfff15 	stw	r2,-4(fp)
80005c8c:	e0fffe17 	ldw	r3,-8(fp)
80005c90:	e0bffb17 	ldw	r2,-20(fp)
80005c94:	1885c83a 	sub	r2,r3,r2
80005c98:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->product_name, "Product Name");
80005c9c:	e0bffc17 	ldw	r2,-16(fp)
80005ca0:	10800304 	addi	r2,r2,12
80005ca4:	01a000b4 	movhi	r6,32770
80005ca8:	31977f04 	addi	r6,r6,24060
80005cac:	100b883a 	mov	r5,r2
80005cb0:	e13fff17 	ldw	r4,-4(fp)
80005cb4:	00056d40 	call	800056d4 <parse_string>
80005cb8:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
80005cbc:	e0ffff17 	ldw	r3,-4(fp)
80005cc0:	e0bffb17 	ldw	r2,-20(fp)
80005cc4:	1885883a 	add	r2,r3,r2
80005cc8:	e0bfff15 	stw	r2,-4(fp)
80005ccc:	e0fffe17 	ldw	r3,-8(fp)
80005cd0:	e0bffb17 	ldw	r2,-20(fp)
80005cd4:	1885c83a 	sub	r2,r3,r2
80005cd8:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->serial_number, "Serial Number");
80005cdc:	e0bffc17 	ldw	r2,-16(fp)
80005ce0:	10800404 	addi	r2,r2,16
80005ce4:	01a000b4 	movhi	r6,32770
80005ce8:	31978304 	addi	r6,r6,24076
80005cec:	100b883a 	mov	r5,r2
80005cf0:	e13fff17 	ldw	r4,-4(fp)
80005cf4:	00056d40 	call	800056d4 <parse_string>
80005cf8:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
80005cfc:	e0ffff17 	ldw	r3,-4(fp)
80005d00:	e0bffb17 	ldw	r2,-20(fp)
80005d04:	1885883a 	add	r2,r3,r2
80005d08:	e0bfff15 	stw	r2,-4(fp)
80005d0c:	e0fffe17 	ldw	r3,-8(fp)
80005d10:	e0bffb17 	ldw	r2,-20(fp)
80005d14:	1885c83a 	sub	r2,r3,r2
80005d18:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->part_number, "Part Number");
80005d1c:	e0bffc17 	ldw	r2,-16(fp)
80005d20:	10800504 	addi	r2,r2,20
80005d24:	01a000b4 	movhi	r6,32770
80005d28:	31978704 	addi	r6,r6,24092
80005d2c:	100b883a 	mov	r5,r2
80005d30:	e13fff17 	ldw	r4,-4(fp)
80005d34:	00056d40 	call	800056d4 <parse_string>
80005d38:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
80005d3c:	e0ffff17 	ldw	r3,-4(fp)
80005d40:	e0bffb17 	ldw	r2,-20(fp)
80005d44:	1885883a 	add	r2,r3,r2
80005d48:	e0bfff15 	stw	r2,-4(fp)
80005d4c:	e0fffe17 	ldw	r3,-8(fp)
80005d50:	e0bffb17 	ldw	r2,-20(fp)
80005d54:	1885c83a 	sub	r2,r3,r2
80005d58:	e0bffe15 	stw	r2,-8(fp)

	i = parse_string(p, &fru->FRU_file_ID, "FRU File ID");
80005d5c:	e0bffc17 	ldw	r2,-16(fp)
80005d60:	10800604 	addi	r2,r2,24
80005d64:	01a000b4 	movhi	r6,32770
80005d68:	31978a04 	addi	r6,r6,24104
80005d6c:	100b883a 	mov	r5,r2
80005d70:	e13fff17 	ldw	r4,-4(fp)
80005d74:	00056d40 	call	800056d4 <parse_string>
80005d78:	e0bffb15 	stw	r2,-20(fp)
	p += i, len -= i;
80005d7c:	e0ffff17 	ldw	r3,-4(fp)
80005d80:	e0bffb17 	ldw	r2,-20(fp)
80005d84:	1885883a 	add	r2,r3,r2
80005d88:	e0bfff15 	stw	r2,-4(fp)
80005d8c:	e0fffe17 	ldw	r3,-8(fp)
80005d90:	e0bffb17 	ldw	r2,-20(fp)
80005d94:	1885c83a 	sub	r2,r3,r2
80005d98:	e0bffe15 	stw	r2,-8(fp)

	j = 0;
80005d9c:	e03ffd15 	stw	zero,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
80005da0:	00001606 	br	80005dfc <parse_board_area+0x378>
		i = parse_string(p, &fru->custom[j], "Custom Field");
80005da4:	e0bffd17 	ldw	r2,-12(fp)
80005da8:	108001c4 	addi	r2,r2,7
80005dac:	100490ba 	slli	r2,r2,2
80005db0:	e0fffc17 	ldw	r3,-16(fp)
80005db4:	1885883a 	add	r2,r3,r2
80005db8:	01a000b4 	movhi	r6,32770
80005dbc:	31978d04 	addi	r6,r6,24116
80005dc0:	100b883a 	mov	r5,r2
80005dc4:	e13fff17 	ldw	r4,-4(fp)
80005dc8:	00056d40 	call	800056d4 <parse_string>
80005dcc:	e0bffb15 	stw	r2,-20(fp)
		p += i, len -= i, j++;
80005dd0:	e0ffff17 	ldw	r3,-4(fp)
80005dd4:	e0bffb17 	ldw	r2,-20(fp)
80005dd8:	1885883a 	add	r2,r3,r2
80005ddc:	e0bfff15 	stw	r2,-4(fp)
80005de0:	e0fffe17 	ldw	r3,-8(fp)
80005de4:	e0bffb17 	ldw	r2,-20(fp)
80005de8:	1885c83a 	sub	r2,r3,r2
80005dec:	e0bffe15 	stw	r2,-8(fp)
80005df0:	e0bffd17 	ldw	r2,-12(fp)
80005df4:	10800044 	addi	r2,r2,1
80005df8:	e0bffd15 	stw	r2,-12(fp)
	while (len != 0 && j < CUSTOM_FIELDS) {
80005dfc:	e0bffe17 	ldw	r2,-8(fp)
80005e00:	10000326 	beq	r2,zero,80005e10 <parse_board_area+0x38c>
80005e04:	e0bffd17 	ldw	r2,-12(fp)
80005e08:	108002b0 	cmpltui	r2,r2,10
80005e0c:	103fe51e 	bne	r2,zero,80005da4 <_gp+0xfffd5030>
	}

	if (*p != 0xC1) {
80005e10:	e0bfff17 	ldw	r2,-4(fp)
80005e14:	10800003 	ldbu	r2,0(r2)
80005e18:	10803fcc 	andi	r2,r2,255
80005e1c:	10803060 	cmpeqi	r2,r2,193
80005e20:	1000141e 	bne	r2,zero,80005e74 <parse_board_area+0x3f0>
		printf_err("BOARD INFO not terminated properly, "
80005e24:	e0ffff17 	ldw	r3,-4(fp)
80005e28:	e0bffa17 	ldw	r2,-24(fp)
80005e2c:	1889c83a 	sub	r4,r3,r2
80005e30:	e0ffff17 	ldw	r3,-4(fp)
80005e34:	e0bffa17 	ldw	r2,-24(fp)
80005e38:	1887c83a 	sub	r3,r3,r2
80005e3c:	e0bfff17 	ldw	r2,-4(fp)
80005e40:	10800003 	ldbu	r2,0(r2)
80005e44:	11403fcc 	andi	r5,r2,255
80005e48:	e0bfff17 	ldw	r2,-4(fp)
80005e4c:	10800003 	ldbu	r2,0(r2)
80005e50:	10803fcc 	andi	r2,r2,255
80005e54:	d8800015 	stw	r2,0(sp)
80005e58:	280f883a 	mov	r7,r5
80005e5c:	180d883a 	mov	r6,r3
80005e60:	200b883a 	mov	r5,r4
80005e64:	012000b4 	movhi	r4,32770
80005e68:	21179104 	addi	r4,r4,24132
80005e6c:	0010d740 	call	80010d74 <printf>
				"offset %02i(0x%02x) : %02i(0x%02x) should be 0xC1\n",
				p - data, p - data, *p, *p);
		goto err;
80005e70:	00000206 	br	80005e7c <parse_board_area+0x3f8>
	}

	return fru;
80005e74:	e0bffc17 	ldw	r2,-16(fp)
80005e78:	00002706 	br	80005f18 <parse_board_area+0x494>

err:
	free(fru->manufacturer);
80005e7c:	e0bffc17 	ldw	r2,-16(fp)
80005e80:	10800217 	ldw	r2,8(r2)
80005e84:	1009883a 	mov	r4,r2
80005e88:	000fc940 	call	8000fc94 <free>
	free(fru->product_name);
80005e8c:	e0bffc17 	ldw	r2,-16(fp)
80005e90:	10800317 	ldw	r2,12(r2)
80005e94:	1009883a 	mov	r4,r2
80005e98:	000fc940 	call	8000fc94 <free>
	free(fru->serial_number);
80005e9c:	e0bffc17 	ldw	r2,-16(fp)
80005ea0:	10800417 	ldw	r2,16(r2)
80005ea4:	1009883a 	mov	r4,r2
80005ea8:	000fc940 	call	8000fc94 <free>
	free(fru->part_number);
80005eac:	e0bffc17 	ldw	r2,-16(fp)
80005eb0:	10800517 	ldw	r2,20(r2)
80005eb4:	1009883a 	mov	r4,r2
80005eb8:	000fc940 	call	8000fc94 <free>
	free(fru->FRU_file_ID);
80005ebc:	e0bffc17 	ldw	r2,-16(fp)
80005ec0:	10800617 	ldw	r2,24(r2)
80005ec4:	1009883a 	mov	r4,r2
80005ec8:	000fc940 	call	8000fc94 <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
80005ecc:	e03ffd15 	stw	zero,-12(fp)
80005ed0:	00000b06 	br	80005f00 <parse_board_area+0x47c>
		free(fru->custom[j]);
80005ed4:	e0fffc17 	ldw	r3,-16(fp)
80005ed8:	e0bffd17 	ldw	r2,-12(fp)
80005edc:	108001c4 	addi	r2,r2,7
80005ee0:	100490ba 	slli	r2,r2,2
80005ee4:	1885883a 	add	r2,r3,r2
80005ee8:	10800017 	ldw	r2,0(r2)
80005eec:	1009883a 	mov	r4,r2
80005ef0:	000fc940 	call	8000fc94 <free>
	for( j = 0; j < CUSTOM_FIELDS; j++)
80005ef4:	e0bffd17 	ldw	r2,-12(fp)
80005ef8:	10800044 	addi	r2,r2,1
80005efc:	e0bffd15 	stw	r2,-12(fp)
80005f00:	e0bffd17 	ldw	r2,-12(fp)
80005f04:	108002b0 	cmpltui	r2,r2,10
80005f08:	103ff21e 	bne	r2,zero,80005ed4 <_gp+0xfffd5160>
	free(fru);
80005f0c:	e13ffc17 	ldw	r4,-16(fp)
80005f10:	000fc940 	call	8000fc94 <free>
	return NULL;
80005f14:	0005883a 	mov	r2,zero
}
80005f18:	e037883a 	mov	sp,fp
80005f1c:	dfc00117 	ldw	ra,4(sp)
80005f20:	df000017 	ldw	fp,0(sp)
80005f24:	dec00204 	addi	sp,sp,8
80005f28:	f800283a 	ret

80005f2c <parse_multiboard_area>:
 * contained in the record.  * There are some FMC specific headers, defined
 * in section 5.5.1 of the FMC specification "IPMI Support". These FMC specific
 * sections have a 1 byte sub-type, and a 3 byte Unique Organization Identifier
 */
struct MULTIRECORD_INFO * parse_multiboard_area(unsigned char *data)
{
80005f2c:	defff704 	addi	sp,sp,-36
80005f30:	dfc00815 	stw	ra,32(sp)
80005f34:	df000715 	stw	fp,28(sp)
80005f38:	df000704 	addi	fp,sp,28
80005f3c:	e13ff915 	stw	r4,-28(fp)
	int i = 0, tmp, type;
80005f40:	e03fff15 	stw	zero,-4(fp)
	unsigned char *p;
	struct MULTIRECORD_INFO *multi;

	multi = calloc(1, sizeof(struct MULTIRECORD_INFO));
80005f44:	01400e04 	movi	r5,56
80005f48:	01000044 	movi	r4,1
80005f4c:	000f9d00 	call	8000f9d0 <calloc>
80005f50:	e0bffd15 	stw	r2,-12(fp)

	p = data;
80005f54:	e0bff917 	ldw	r2,-28(fp)
80005f58:	e0bffe15 	stw	r2,-8(fp)

	do {
		if (i != 0)
80005f5c:	e0bfff17 	ldw	r2,-4(fp)
80005f60:	10000926 	beq	r2,zero,80005f88 <parse_multiboard_area+0x5c>
			p += 5 + p[2];
80005f64:	e0bffe17 	ldw	r2,-8(fp)
80005f68:	10800084 	addi	r2,r2,2
80005f6c:	10800003 	ldbu	r2,0(r2)
80005f70:	10803fcc 	andi	r2,r2,255
80005f74:	10800144 	addi	r2,r2,5
80005f78:	1007883a 	mov	r3,r2
80005f7c:	e0bffe17 	ldw	r2,-8(fp)
80005f80:	10c5883a 	add	r2,r2,r3
80005f84:	e0bffe15 	stw	r2,-8(fp)
		if (p[0] >= 0x06 && p[0] <= 0xBF) {
80005f88:	e0bffe17 	ldw	r2,-8(fp)
80005f8c:	10800003 	ldbu	r2,0(r2)
80005f90:	10803fcc 	andi	r2,r2,255
80005f94:	108001b0 	cmpltui	r2,r2,6
80005f98:	10000b1e 	bne	r2,zero,80005fc8 <parse_multiboard_area+0x9c>
80005f9c:	e0bffe17 	ldw	r2,-8(fp)
80005fa0:	10800003 	ldbu	r2,0(r2)
80005fa4:	10803fcc 	andi	r2,r2,255
80005fa8:	10803028 	cmpgeui	r2,r2,192
80005fac:	1000061e 	bne	r2,zero,80005fc8 <parse_multiboard_area+0x9c>
			printf_err("MultiRecord Area %i: Invalid Record Header\n", i);
80005fb0:	e17fff17 	ldw	r5,-4(fp)
80005fb4:	012000b4 	movhi	r4,32770
80005fb8:	2117a704 	addi	r4,r4,24220
80005fbc:	0010d740 	call	80010d74 <printf>
			return NULL;
80005fc0:	0005883a 	mov	r2,zero
80005fc4:	00010b06 	br	800063f4 <parse_multiboard_area+0x4c8>
		}
		if (calc_zero_checksum(p, 4)) {
80005fc8:	01400104 	movi	r5,4
80005fcc:	e13ffe17 	ldw	r4,-8(fp)
80005fd0:	00050d00 	call	800050d0 <calc_zero_checksum>
80005fd4:	10803fcc 	andi	r2,r2,255
80005fd8:	10000a26 	beq	r2,zero,80006004 <parse_multiboard_area+0xd8>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
80005fdc:	e0bffe17 	ldw	r2,-8(fp)
80005fe0:	10800003 	ldbu	r2,0(r2)
80005fe4:	10803fcc 	andi	r2,r2,255
80005fe8:	100d883a 	mov	r6,r2
80005fec:	e17fff17 	ldw	r5,-4(fp)
80005ff0:	012000b4 	movhi	r4,32770
80005ff4:	2117b204 	addi	r4,r4,24264
80005ff8:	0010d740 	call	80010d74 <printf>
					"Header Checksum failed\n", i, p[0]);
			return NULL;
80005ffc:	0005883a 	mov	r2,zero
80006000:	0000fc06 	br	800063f4 <parse_multiboard_area+0x4c8>
		}

		if (!p[2] || ((calc_zero_checksum(p+5, p[2] - 1) + p[3]) & 0xFF)) {
80006004:	e0bffe17 	ldw	r2,-8(fp)
80006008:	10800084 	addi	r2,r2,2
8000600c:	10800003 	ldbu	r2,0(r2)
80006010:	10803fcc 	andi	r2,r2,255
80006014:	10001126 	beq	r2,zero,8000605c <parse_multiboard_area+0x130>
80006018:	e0bffe17 	ldw	r2,-8(fp)
8000601c:	10c00144 	addi	r3,r2,5
80006020:	e0bffe17 	ldw	r2,-8(fp)
80006024:	10800084 	addi	r2,r2,2
80006028:	10800003 	ldbu	r2,0(r2)
8000602c:	10803fcc 	andi	r2,r2,255
80006030:	10bfffc4 	addi	r2,r2,-1
80006034:	100b883a 	mov	r5,r2
80006038:	1809883a 	mov	r4,r3
8000603c:	00050d00 	call	800050d0 <calc_zero_checksum>
80006040:	1007883a 	mov	r3,r2
80006044:	e0bffe17 	ldw	r2,-8(fp)
80006048:	108000c4 	addi	r2,r2,3
8000604c:	10800003 	ldbu	r2,0(r2)
80006050:	1885883a 	add	r2,r3,r2
80006054:	10803fcc 	andi	r2,r2,255
80006058:	10000a26 	beq	r2,zero,80006084 <parse_multiboard_area+0x158>
			printf_err("MultiRecord Area %i (Record Type 0x%x): "
8000605c:	e0bffe17 	ldw	r2,-8(fp)
80006060:	10800003 	ldbu	r2,0(r2)
80006064:	10803fcc 	andi	r2,r2,255
80006068:	100d883a 	mov	r6,r2
8000606c:	e17fff17 	ldw	r5,-4(fp)
80006070:	012000b4 	movhi	r4,32770
80006074:	2117c204 	addi	r4,r4,24328
80006078:	0010d740 	call	80010d74 <printf>
					"Record Checksum failed\n", i, p[0]);
			return NULL;
8000607c:	0005883a 	mov	r2,zero
80006080:	0000dc06 	br	800063f4 <parse_multiboard_area+0x4c8>
		}

		/*
		 * Record Type ID
		 */
		switch(p[0]) {
80006084:	e0bffe17 	ldw	r2,-8(fp)
80006088:	10800003 	ldbu	r2,0(r2)
8000608c:	10803fcc 	andi	r2,r2,255
80006090:	0080ca0e 	bge	zero,r2,800063bc <parse_multiboard_area+0x490>
80006094:	10c000d0 	cmplti	r3,r2,3
80006098:	1800031e 	bne	r3,zero,800060a8 <parse_multiboard_area+0x17c>
8000609c:	10803ea0 	cmpeqi	r2,r2,250
800060a0:	1000391e 	bne	r2,zero,80006188 <parse_multiboard_area+0x25c>
800060a4:	0000c506 	br	800063bc <parse_multiboard_area+0x490>
			case MULTIRECORD_DC_OUTPUT:
			case MULTIRECORD_DC_INPUT:
				tmp = p[5] & 0xF;
800060a8:	e0bffe17 	ldw	r2,-8(fp)
800060ac:	10800144 	addi	r2,r2,5
800060b0:	10800003 	ldbu	r2,0(r2)
800060b4:	10803fcc 	andi	r2,r2,255
800060b8:	108003cc 	andi	r2,r2,15
800060bc:	e0bffa15 	stw	r2,-24(fp)
				if ((tmp) >= NUM_SUPPLIES)
800060c0:	e0bffa17 	ldw	r2,-24(fp)
800060c4:	10800310 	cmplti	r2,r2,12
800060c8:	1000031e 	bne	r2,zero,800060d8 <parse_multiboard_area+0x1ac>
					printf_err("Too many Supplies defined in Multirecords\n");
800060cc:	012000b4 	movhi	r4,32770
800060d0:	2117d204 	addi	r4,r4,24392
800060d4:	0010e980 	call	80010e98 <puts>

				multi->supplies[tmp] = calloc(1, p[2] + 6);
800060d8:	e0bffe17 	ldw	r2,-8(fp)
800060dc:	10800084 	addi	r2,r2,2
800060e0:	10800003 	ldbu	r2,0(r2)
800060e4:	10803fcc 	andi	r2,r2,255
800060e8:	10800184 	addi	r2,r2,6
800060ec:	100b883a 	mov	r5,r2
800060f0:	01000044 	movi	r4,1
800060f4:	000f9d00 	call	8000f9d0 <calloc>
800060f8:	1009883a 	mov	r4,r2
800060fc:	e0fffd17 	ldw	r3,-12(fp)
80006100:	e0bffa17 	ldw	r2,-24(fp)
80006104:	100490ba 	slli	r2,r2,2
80006108:	1885883a 	add	r2,r3,r2
8000610c:	11000015 	stw	r4,0(r2)
				memcpy (multi->supplies[tmp], p, p[2] + 6);
80006110:	e0fffd17 	ldw	r3,-12(fp)
80006114:	e0bffa17 	ldw	r2,-24(fp)
80006118:	100490ba 	slli	r2,r2,2
8000611c:	1885883a 	add	r2,r3,r2
80006120:	10c00017 	ldw	r3,0(r2)
80006124:	e0bffe17 	ldw	r2,-8(fp)
80006128:	10800084 	addi	r2,r2,2
8000612c:	10800003 	ldbu	r2,0(r2)
80006130:	10803fcc 	andi	r2,r2,255
80006134:	10800184 	addi	r2,r2,6
80006138:	100d883a 	mov	r6,r2
8000613c:	e17ffe17 	ldw	r5,-8(fp)
80006140:	1809883a 	mov	r4,r3
80006144:	00104e80 	call	800104e8 <memcpy>
				multi->supplies[tmp][1] = multi->supplies[tmp][1] & 0x7F;
80006148:	e0fffd17 	ldw	r3,-12(fp)
8000614c:	e0bffa17 	ldw	r2,-24(fp)
80006150:	100490ba 	slli	r2,r2,2
80006154:	1885883a 	add	r2,r3,r2
80006158:	10800017 	ldw	r2,0(r2)
8000615c:	10800044 	addi	r2,r2,1
80006160:	10c00003 	ldbu	r3,0(r2)
80006164:	e13ffd17 	ldw	r4,-12(fp)
80006168:	e0bffa17 	ldw	r2,-24(fp)
8000616c:	100490ba 	slli	r2,r2,2
80006170:	2085883a 	add	r2,r4,r2
80006174:	10800017 	ldw	r2,0(r2)
80006178:	10800044 	addi	r2,r2,1
8000617c:	18c01fcc 	andi	r3,r3,127
80006180:	10c00005 	stb	r3,0(r2)
				break;
80006184:	00009006 	br	800063c8 <parse_multiboard_area+0x49c>
			case MULTIRECORD_FMC:
				/*
				 * Use VITA's OUI: 0x0012a2 is specified in the FMC spec - Rule 5.77
				 */
				if ((p[5] | p[6] << 8 | p[7] << 16) != VITA_OUI) {
80006188:	e0bffe17 	ldw	r2,-8(fp)
8000618c:	10800144 	addi	r2,r2,5
80006190:	10800003 	ldbu	r2,0(r2)
80006194:	10c03fcc 	andi	r3,r2,255
80006198:	e0bffe17 	ldw	r2,-8(fp)
8000619c:	10800184 	addi	r2,r2,6
800061a0:	10800003 	ldbu	r2,0(r2)
800061a4:	10803fcc 	andi	r2,r2,255
800061a8:	1004923a 	slli	r2,r2,8
800061ac:	1886b03a 	or	r3,r3,r2
800061b0:	e0bffe17 	ldw	r2,-8(fp)
800061b4:	108001c4 	addi	r2,r2,7
800061b8:	10800003 	ldbu	r2,0(r2)
800061bc:	10803fcc 	andi	r2,r2,255
800061c0:	1004943a 	slli	r2,r2,16
800061c4:	1884b03a 	or	r2,r3,r2
800061c8:	1084a8a0 	cmpeqi	r2,r2,4770
800061cc:	1000151e 	bne	r2,zero,80006224 <parse_multiboard_area+0x2f8>
					printf_err("OUI Doesn't match : is 0x%06X, "
800061d0:	e0bffe17 	ldw	r2,-8(fp)
800061d4:	10800144 	addi	r2,r2,5
800061d8:	10800003 	ldbu	r2,0(r2)
800061dc:	10c03fcc 	andi	r3,r2,255
800061e0:	e0bffe17 	ldw	r2,-8(fp)
800061e4:	10800184 	addi	r2,r2,6
800061e8:	10800003 	ldbu	r2,0(r2)
800061ec:	10803fcc 	andi	r2,r2,255
800061f0:	1004923a 	slli	r2,r2,8
800061f4:	1886b03a 	or	r3,r3,r2
800061f8:	e0bffe17 	ldw	r2,-8(fp)
800061fc:	108001c4 	addi	r2,r2,7
80006200:	10800003 	ldbu	r2,0(r2)
80006204:	10803fcc 	andi	r2,r2,255
80006208:	1004943a 	slli	r2,r2,16
8000620c:	1884b03a 	or	r2,r3,r2
80006210:	0184a884 	movi	r6,4770
80006214:	100b883a 	mov	r5,r2
80006218:	012000b4 	movhi	r4,32770
8000621c:	2117dd04 	addi	r4,r4,24436
80006220:	0010d740 	call	80010d74 <printf>
						"should be 0x%06x\n", p[5] | p[6] << 8 | p[7] << 16, VITA_OUI);
				}
				/* type field is located: Header + Manufacturer ID = 5 + 3 */
				type = p[8] >> 4;
80006224:	e0bffe17 	ldw	r2,-8(fp)
80006228:	10800204 	addi	r2,r2,8
8000622c:	10800003 	ldbu	r2,0(r2)
80006230:	10803fcc 	andi	r2,r2,255
80006234:	1004d13a 	srli	r2,r2,4
80006238:	10803fcc 	andi	r2,r2,255
8000623c:	e0bffc15 	stw	r2,-16(fp)

				switch (type) {
80006240:	e0bffc17 	ldw	r2,-16(fp)
80006244:	10000326 	beq	r2,zero,80006254 <parse_multiboard_area+0x328>
80006248:	10800060 	cmpeqi	r2,r2,1
8000624c:	1000211e 	bne	r2,zero,800062d4 <parse_multiboard_area+0x3a8>
80006250:	00005406 	br	800063a4 <parse_multiboard_area+0x478>
					case MULTIRECORD_CONNECTOR:
						/* see table 7 in FMC spec */
						multi->connector = calloc(1, p[2] + 6);
80006254:	e0bffe17 	ldw	r2,-8(fp)
80006258:	10800084 	addi	r2,r2,2
8000625c:	10800003 	ldbu	r2,0(r2)
80006260:	10803fcc 	andi	r2,r2,255
80006264:	10800184 	addi	r2,r2,6
80006268:	100b883a 	mov	r5,r2
8000626c:	01000044 	movi	r4,1
80006270:	000f9d00 	call	8000f9d0 <calloc>
80006274:	1007883a 	mov	r3,r2
80006278:	e0bffd17 	ldw	r2,-12(fp)
8000627c:	10c00c15 	stw	r3,48(r2)
						memcpy (multi->connector, p, p[2] + 6);
80006280:	e0bffd17 	ldw	r2,-12(fp)
80006284:	10c00c17 	ldw	r3,48(r2)
80006288:	e0bffe17 	ldw	r2,-8(fp)
8000628c:	10800084 	addi	r2,r2,2
80006290:	10800003 	ldbu	r2,0(r2)
80006294:	10803fcc 	andi	r2,r2,255
80006298:	10800184 	addi	r2,r2,6
8000629c:	100d883a 	mov	r6,r2
800062a0:	e17ffe17 	ldw	r5,-8(fp)
800062a4:	1809883a 	mov	r4,r3
800062a8:	00104e80 	call	800104e8 <memcpy>
						/* This isn't the end 'til we re-assemble things */
						multi->connector[1] = multi->connector[1] & 0x7F;
800062ac:	e0bffd17 	ldw	r2,-12(fp)
800062b0:	10800c17 	ldw	r2,48(r2)
800062b4:	10800044 	addi	r2,r2,1
800062b8:	10c00003 	ldbu	r3,0(r2)
800062bc:	e0bffd17 	ldw	r2,-12(fp)
800062c0:	10800c17 	ldw	r2,48(r2)
800062c4:	10800044 	addi	r2,r2,1
800062c8:	18c01fcc 	andi	r3,r3,127
800062cc:	10c00005 	stb	r3,0(r2)
						break;
800062d0:	00003906 	br	800063b8 <parse_multiboard_area+0x48c>
					case MULTIRECORD_I2C:
						if (p[2] <= 5) {
800062d4:	e0bffe17 	ldw	r2,-8(fp)
800062d8:	10800084 	addi	r2,r2,2
800062dc:	10800003 	ldbu	r2,0(r2)
800062e0:	10803fcc 	andi	r2,r2,255
800062e4:	108001a8 	cmpgeui	r2,r2,6
800062e8:	1000091e 	bne	r2,zero,80006310 <parse_multiboard_area+0x3e4>
							printf_warn("I2C MultiRecord is too short (len:%i)\n"
800062ec:	e0bffe17 	ldw	r2,-8(fp)
800062f0:	10800084 	addi	r2,r2,2
800062f4:	10800003 	ldbu	r2,0(r2)
800062f8:	10803fcc 	andi	r2,r2,255
800062fc:	100b883a 	mov	r5,r2
80006300:	012000b4 	movhi	r4,32770
80006304:	2117ea04 	addi	r4,r4,24488
80006308:	0010d740 	call	80010d74 <printf>
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
							free(foo2);
							/* This isn't the end 'til we re-assemble things */
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
						}
						break;
8000630c:	00002a06 	br	800063b8 <parse_multiboard_area+0x48c>
							foo2 = six2ascii(&p[9], p[2] - 4);
80006310:	e0bffe17 	ldw	r2,-8(fp)
80006314:	10c00244 	addi	r3,r2,9
80006318:	e0bffe17 	ldw	r2,-8(fp)
8000631c:	10800084 	addi	r2,r2,2
80006320:	10800003 	ldbu	r2,0(r2)
80006324:	10803fcc 	andi	r2,r2,255
80006328:	10bfff04 	addi	r2,r2,-4
8000632c:	100b883a 	mov	r5,r2
80006330:	1809883a 	mov	r4,r3
80006334:	00054900 	call	80005490 <six2ascii>
80006338:	e0bffb15 	stw	r2,-20(fp)
							multi->i2c_devices = calloc(1, strlen((char *)foo2) + 1);
8000633c:	e13ffb17 	ldw	r4,-20(fp)
80006340:	00111940 	call	80011194 <strlen>
80006344:	10800044 	addi	r2,r2,1
80006348:	100b883a 	mov	r5,r2
8000634c:	01000044 	movi	r4,1
80006350:	000f9d00 	call	8000f9d0 <calloc>
80006354:	1007883a 	mov	r3,r2
80006358:	e0bffd17 	ldw	r2,-12(fp)
8000635c:	10c00d15 	stw	r3,52(r2)
							strcpy ((char *)multi->i2c_devices, (char *)foo2);
80006360:	e0bffd17 	ldw	r2,-12(fp)
80006364:	10800d17 	ldw	r2,52(r2)
80006368:	e17ffb17 	ldw	r5,-20(fp)
8000636c:	1009883a 	mov	r4,r2
80006370:	00111080 	call	80011108 <strcpy>
							free(foo2);
80006374:	e13ffb17 	ldw	r4,-20(fp)
80006378:	000fc940 	call	8000fc94 <free>
							multi->i2c_devices[1] = multi->i2c_devices[1] & 0x7F;
8000637c:	e0bffd17 	ldw	r2,-12(fp)
80006380:	10800d17 	ldw	r2,52(r2)
80006384:	10800044 	addi	r2,r2,1
80006388:	10c00003 	ldbu	r3,0(r2)
8000638c:	e0bffd17 	ldw	r2,-12(fp)
80006390:	10800d17 	ldw	r2,52(r2)
80006394:	10800044 	addi	r2,r2,1
80006398:	18c01fcc 	andi	r3,r3,127
8000639c:	10c00005 	stb	r3,0(r2)
						break;
800063a0:	00000506 	br	800063b8 <parse_multiboard_area+0x48c>
					default:
						printf_err("Unknown multirecord type : %i\n", type);
800063a4:	e17ffc17 	ldw	r5,-16(fp)
800063a8:	012000b4 	movhi	r4,32770
800063ac:	2117ff04 	addi	r4,r4,24572
800063b0:	0010d740 	call	80010d74 <printf>
						break;
800063b4:	0001883a 	nop
				}

				if (type == 1) {

				}
				break;
800063b8:	00000306 	br	800063c8 <parse_multiboard_area+0x49c>
			default:
				printf_err("Unknown MultiRecord Area\n");
800063bc:	012000b4 	movhi	r4,32770
800063c0:	21180704 	addi	r4,r4,24604
800063c4:	0010e980 	call	80010e98 <puts>
		}

		i++;
800063c8:	e0bfff17 	ldw	r2,-4(fp)
800063cc:	10800044 	addi	r2,r2,1
800063d0:	e0bfff15 	stw	r2,-4(fp)
	} while (!(p[1] & 0x80));
800063d4:	e0bffe17 	ldw	r2,-8(fp)
800063d8:	10800044 	addi	r2,r2,1
800063dc:	10800003 	ldbu	r2,0(r2)
800063e0:	10803fcc 	andi	r2,r2,255
800063e4:	1080201c 	xori	r2,r2,128
800063e8:	10bfe004 	addi	r2,r2,-128
800063ec:	103edb0e 	bge	r2,zero,80005f5c <_gp+0xfffd51e8>

	return multi;
800063f0:	e0bffd17 	ldw	r2,-12(fp)
}
800063f4:	e037883a 	mov	sp,fp
800063f8:	dfc00117 	ldw	ra,4(sp)
800063fc:	df000017 	ldw	fp,0(sp)
80006400:	dec00204 	addi	sp,sp,8
80006404:	f800283a 	ret

80006408 <parse_FRU>:
/*
 * Common Header Format
 * Section 8 in the Platform Management FRU Information Storage Definition
 */
struct FRU_DATA * parse_FRU (unsigned char *data)
{
80006408:	defffc04 	addi	sp,sp,-16
8000640c:	dfc00315 	stw	ra,12(sp)
80006410:	df000215 	stw	fp,8(sp)
80006414:	df000204 	addi	fp,sp,8
80006418:	e13ffe15 	stw	r4,-8(fp)
	struct FRU_DATA *fru;

	fru = calloc (1, sizeof(struct FRU_DATA));
8000641c:	01400504 	movi	r5,20
80006420:	01000044 	movi	r4,1
80006424:	000f9d00 	call	8000f9d0 <calloc>
80006428:	e0bfff15 	stw	r2,-4(fp)

	/* Check FRU version */
	if (data[0] != 0x01) {
8000642c:	e0bffe17 	ldw	r2,-8(fp)
80006430:	10800003 	ldbu	r2,0(r2)
80006434:	10803fcc 	andi	r2,r2,255
80006438:	10800060 	cmpeqi	r2,r2,1
8000643c:	1000081e 	bne	r2,zero,80006460 <parse_FRU+0x58>
		printf_err("FRU Version number mismatch 0x%02x should be 0x01\n", data[0]);
80006440:	e0bffe17 	ldw	r2,-8(fp)
80006444:	10800003 	ldbu	r2,0(r2)
80006448:	10803fcc 	andi	r2,r2,255
8000644c:	100b883a 	mov	r5,r2
80006450:	012000b4 	movhi	r4,32770
80006454:	21180e04 	addi	r4,r4,24632
80006458:	0010d740 	call	80010d74 <printf>
		goto err;
8000645c:	00005706 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Check Padding */
	if (data[6] != 0x00) {
80006460:	e0bffe17 	ldw	r2,-8(fp)
80006464:	10800184 	addi	r2,r2,6
80006468:	10800003 	ldbu	r2,0(r2)
8000646c:	10803fcc 	andi	r2,r2,255
80006470:	10000426 	beq	r2,zero,80006484 <parse_FRU+0x7c>
		printf_err("FRU byte 6 should be PAD, and be zero -- but it's not\n");
80006474:	012000b4 	movhi	r4,32770
80006478:	21181b04 	addi	r4,r4,24684
8000647c:	0010e980 	call	80010e98 <puts>
		goto err;
80006480:	00004e06 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Check header checksum */
	if (calc_zero_checksum(data, 7)) {
80006484:	014001c4 	movi	r5,7
80006488:	e13ffe17 	ldw	r4,-8(fp)
8000648c:	00050d00 	call	800050d0 <calc_zero_checksum>
80006490:	10803fcc 	andi	r2,r2,255
80006494:	10000426 	beq	r2,zero,800064a8 <parse_FRU+0xa0>
		printf_err("Common Header Checksum failed\n");
80006498:	012000b4 	movhi	r4,32770
8000649c:	21182904 	addi	r4,r4,24740
800064a0:	0010e980 	call	80010e98 <puts>
		goto err;
800064a4:	00004506 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Parse Internal Use Area */
	if (data[1]) {
800064a8:	e0bffe17 	ldw	r2,-8(fp)
800064ac:	10800044 	addi	r2,r2,1
800064b0:	10800003 	ldbu	r2,0(r2)
800064b4:	10803fcc 	andi	r2,r2,255
800064b8:	10000426 	beq	r2,zero,800064cc <parse_FRU+0xc4>
		printf_err("Internal Use Area not yet implemented - sorry\n");
800064bc:	012000b4 	movhi	r4,32770
800064c0:	21183104 	addi	r4,r4,24772
800064c4:	0010e980 	call	80010e98 <puts>
		goto err;
800064c8:	00003c06 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Parse Chassis Info Area */
	if (data[2]) {
800064cc:	e0bffe17 	ldw	r2,-8(fp)
800064d0:	10800084 	addi	r2,r2,2
800064d4:	10800003 	ldbu	r2,0(r2)
800064d8:	10803fcc 	andi	r2,r2,255
800064dc:	10000426 	beq	r2,zero,800064f0 <parse_FRU+0xe8>
		printf_err("Chassis Info Area not yet implmented - sorry\n");
800064e0:	012000b4 	movhi	r4,32770
800064e4:	21183d04 	addi	r4,r4,24820
800064e8:	0010e980 	call	80010e98 <puts>
		goto err;
800064ec:	00003306 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Parse Board Area */
	if (data[3]) {
800064f0:	e0bffe17 	ldw	r2,-8(fp)
800064f4:	108000c4 	addi	r2,r2,3
800064f8:	10800003 	ldbu	r2,0(r2)
800064fc:	10803fcc 	andi	r2,r2,255
80006500:	10001026 	beq	r2,zero,80006544 <parse_FRU+0x13c>
		fru->Board_Area = parse_board_area(&data[data[3] * 8]);
80006504:	e0bffe17 	ldw	r2,-8(fp)
80006508:	108000c4 	addi	r2,r2,3
8000650c:	10800003 	ldbu	r2,0(r2)
80006510:	10803fcc 	andi	r2,r2,255
80006514:	100490fa 	slli	r2,r2,3
80006518:	1007883a 	mov	r3,r2
8000651c:	e0bffe17 	ldw	r2,-8(fp)
80006520:	10c5883a 	add	r2,r2,r3
80006524:	1009883a 	mov	r4,r2
80006528:	0005a840 	call	80005a84 <parse_board_area>
8000652c:	1007883a 	mov	r3,r2
80006530:	e0bfff17 	ldw	r2,-4(fp)
80006534:	10c00215 	stw	r3,8(r2)
		if (!fru->Board_Area)
80006538:	e0bfff17 	ldw	r2,-4(fp)
8000653c:	10800217 	ldw	r2,8(r2)
80006540:	10001d26 	beq	r2,zero,800065b8 <parse_FRU+0x1b0>
			goto err;
	}

	/* Parse Chassis Info Area */
	if (data[4]) {
80006544:	e0bffe17 	ldw	r2,-8(fp)
80006548:	10800104 	addi	r2,r2,4
8000654c:	10800003 	ldbu	r2,0(r2)
80006550:	10803fcc 	andi	r2,r2,255
80006554:	10000426 	beq	r2,zero,80006568 <parse_FRU+0x160>
		printf_err("Chassis Info Area parsing not yet implemented - sorry\n");
80006558:	012000b4 	movhi	r4,32770
8000655c:	21184904 	addi	r4,r4,24868
80006560:	0010e980 	call	80010e98 <puts>
		goto err;
80006564:	00001506 	br	800065bc <parse_FRU+0x1b4>
	}

	/* Parse MultiRecord Area */
	if (data[5])
80006568:	e0bffe17 	ldw	r2,-8(fp)
8000656c:	10800144 	addi	r2,r2,5
80006570:	10800003 	ldbu	r2,0(r2)
80006574:	10803fcc 	andi	r2,r2,255
80006578:	10000d26 	beq	r2,zero,800065b0 <parse_FRU+0x1a8>
		fru->MultiRecord_Area = parse_multiboard_area(&data[data[5] * 8]);
8000657c:	e0bffe17 	ldw	r2,-8(fp)
80006580:	10800144 	addi	r2,r2,5
80006584:	10800003 	ldbu	r2,0(r2)
80006588:	10803fcc 	andi	r2,r2,255
8000658c:	100490fa 	slli	r2,r2,3
80006590:	1007883a 	mov	r3,r2
80006594:	e0bffe17 	ldw	r2,-8(fp)
80006598:	10c5883a 	add	r2,r2,r3
8000659c:	1009883a 	mov	r4,r2
800065a0:	0005f2c0 	call	80005f2c <parse_multiboard_area>
800065a4:	1007883a 	mov	r3,r2
800065a8:	e0bfff17 	ldw	r2,-4(fp)
800065ac:	10c00415 	stw	r3,16(r2)

	return fru;
800065b0:	e0bfff17 	ldw	r2,-4(fp)
800065b4:	00000406 	br	800065c8 <parse_FRU+0x1c0>
			goto err;
800065b8:	0001883a 	nop

err:
	free(fru);
800065bc:	e13fff17 	ldw	r4,-4(fp)
800065c0:	000fc940 	call	8000fc94 <free>
	return NULL;
800065c4:	0005883a 	mov	r2,zero

}
800065c8:	e037883a 	mov	sp,fp
800065cc:	dfc00117 	ldw	ra,4(sp)
800065d0:	df000017 	ldw	fp,0(sp)
800065d4:	dec00204 	addi	sp,sp,8
800065d8:	f800283a 	ret

800065dc <free_FRU>:

void free_FRU(struct FRU_DATA *fru)
{
800065dc:	defffc04 	addi	sp,sp,-16
800065e0:	dfc00315 	stw	ra,12(sp)
800065e4:	df000215 	stw	fp,8(sp)
800065e8:	df000204 	addi	fp,sp,8
800065ec:	e13ffe15 	stw	r4,-8(fp)
	int j;

	free(fru->Board_Area->manufacturer);
800065f0:	e0bffe17 	ldw	r2,-8(fp)
800065f4:	10800217 	ldw	r2,8(r2)
800065f8:	10800217 	ldw	r2,8(r2)
800065fc:	1009883a 	mov	r4,r2
80006600:	000fc940 	call	8000fc94 <free>
	free(fru->Board_Area->product_name);
80006604:	e0bffe17 	ldw	r2,-8(fp)
80006608:	10800217 	ldw	r2,8(r2)
8000660c:	10800317 	ldw	r2,12(r2)
80006610:	1009883a 	mov	r4,r2
80006614:	000fc940 	call	8000fc94 <free>
	free(fru->Board_Area->serial_number);
80006618:	e0bffe17 	ldw	r2,-8(fp)
8000661c:	10800217 	ldw	r2,8(r2)
80006620:	10800417 	ldw	r2,16(r2)
80006624:	1009883a 	mov	r4,r2
80006628:	000fc940 	call	8000fc94 <free>
	free(fru->Board_Area->part_number);
8000662c:	e0bffe17 	ldw	r2,-8(fp)
80006630:	10800217 	ldw	r2,8(r2)
80006634:	10800517 	ldw	r2,20(r2)
80006638:	1009883a 	mov	r4,r2
8000663c:	000fc940 	call	8000fc94 <free>
	free(fru->Board_Area->FRU_file_ID);
80006640:	e0bffe17 	ldw	r2,-8(fp)
80006644:	10800217 	ldw	r2,8(r2)
80006648:	10800617 	ldw	r2,24(r2)
8000664c:	1009883a 	mov	r4,r2
80006650:	000fc940 	call	8000fc94 <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
80006654:	e03fff15 	stw	zero,-4(fp)
80006658:	00000c06 	br	8000668c <free_FRU+0xb0>
		free(fru->Board_Area->custom[j]);
8000665c:	e0bffe17 	ldw	r2,-8(fp)
80006660:	10c00217 	ldw	r3,8(r2)
80006664:	e0bfff17 	ldw	r2,-4(fp)
80006668:	108001c4 	addi	r2,r2,7
8000666c:	100490ba 	slli	r2,r2,2
80006670:	1885883a 	add	r2,r3,r2
80006674:	10800017 	ldw	r2,0(r2)
80006678:	1009883a 	mov	r4,r2
8000667c:	000fc940 	call	8000fc94 <free>
	for(j = 0; j < CUSTOM_FIELDS; j++)
80006680:	e0bfff17 	ldw	r2,-4(fp)
80006684:	10800044 	addi	r2,r2,1
80006688:	e0bfff15 	stw	r2,-4(fp)
8000668c:	e0bfff17 	ldw	r2,-4(fp)
80006690:	10800290 	cmplti	r2,r2,10
80006694:	103ff11e 	bne	r2,zero,8000665c <_gp+0xfffd58e8>
	free(fru->Board_Area);
80006698:	e0bffe17 	ldw	r2,-8(fp)
8000669c:	10800217 	ldw	r2,8(r2)
800066a0:	1009883a 	mov	r4,r2
800066a4:	000fc940 	call	8000fc94 <free>

	for(j = 0; j < NUM_SUPPLIES; j++)
800066a8:	e03fff15 	stw	zero,-4(fp)
800066ac:	00000b06 	br	800066dc <free_FRU+0x100>
		free(fru->MultiRecord_Area->supplies[j]);
800066b0:	e0bffe17 	ldw	r2,-8(fp)
800066b4:	10c00417 	ldw	r3,16(r2)
800066b8:	e0bfff17 	ldw	r2,-4(fp)
800066bc:	100490ba 	slli	r2,r2,2
800066c0:	1885883a 	add	r2,r3,r2
800066c4:	10800017 	ldw	r2,0(r2)
800066c8:	1009883a 	mov	r4,r2
800066cc:	000fc940 	call	8000fc94 <free>
	for(j = 0; j < NUM_SUPPLIES; j++)
800066d0:	e0bfff17 	ldw	r2,-4(fp)
800066d4:	10800044 	addi	r2,r2,1
800066d8:	e0bfff15 	stw	r2,-4(fp)
800066dc:	e0bfff17 	ldw	r2,-4(fp)
800066e0:	10800310 	cmplti	r2,r2,12
800066e4:	103ff21e 	bne	r2,zero,800066b0 <_gp+0xfffd593c>
	free(fru->MultiRecord_Area->i2c_devices);
800066e8:	e0bffe17 	ldw	r2,-8(fp)
800066ec:	10800417 	ldw	r2,16(r2)
800066f0:	10800d17 	ldw	r2,52(r2)
800066f4:	1009883a 	mov	r4,r2
800066f8:	000fc940 	call	8000fc94 <free>

	free(fru->MultiRecord_Area->connector);
800066fc:	e0bffe17 	ldw	r2,-8(fp)
80006700:	10800417 	ldw	r2,16(r2)
80006704:	10800c17 	ldw	r2,48(r2)
80006708:	1009883a 	mov	r4,r2
8000670c:	000fc940 	call	8000fc94 <free>
	free(fru->MultiRecord_Area);
80006710:	e0bffe17 	ldw	r2,-8(fp)
80006714:	10800417 	ldw	r2,16(r2)
80006718:	1009883a 	mov	r4,r2
8000671c:	000fc940 	call	8000fc94 <free>

	free(fru);
80006720:	e13ffe17 	ldw	r4,-8(fp)
80006724:	000fc940 	call	8000fc94 <free>

}
80006728:	0001883a 	nop
8000672c:	e037883a 	mov	sp,fp
80006730:	dfc00117 	ldw	ra,4(sp)
80006734:	df000017 	ldw	fp,0(sp)
80006738:	dec00204 	addi	sp,sp,8
8000673c:	f800283a 	ret

80006740 <insert_str>:
/*
 * take string, and put in into the buffer
 * return the number of bytes copied
 */
static unsigned int insert_str(unsigned char *buf, const unsigned char * str, bool force)
{
80006740:	defff904 	addi	sp,sp,-28
80006744:	dfc00615 	stw	ra,24(sp)
80006748:	df000515 	stw	fp,20(sp)
8000674c:	df000504 	addi	fp,sp,20
80006750:	e13ffd15 	stw	r4,-12(fp)
80006754:	e17ffc15 	stw	r5,-16(fp)
80006758:	3005883a 	mov	r2,r6
8000675c:	e0bffb05 	stb	r2,-20(fp)
	int tmp;

	if (TYPE_CODE(str) == FRU_STRING_ASCII)
80006760:	e0bffc17 	ldw	r2,-16(fp)
80006764:	10800003 	ldbu	r2,0(r2)
80006768:	10803fcc 	andi	r2,r2,255
8000676c:	1004d1ba 	srli	r2,r2,6
80006770:	10803fcc 	andi	r2,r2,255
80006774:	108000cc 	andi	r2,r2,3
80006778:	108000d8 	cmpnei	r2,r2,3
8000677c:	1000061e 	bne	r2,zero,80006798 <insert_str+0x58>
		tmp = strlen((const char *)&str[1]);
80006780:	e0bffc17 	ldw	r2,-16(fp)
80006784:	10800044 	addi	r2,r2,1
80006788:	1009883a 	mov	r4,r2
8000678c:	00111940 	call	80011194 <strlen>
80006790:	e0bfff15 	stw	r2,-4(fp)
80006794:	00000506 	br	800067ac <insert_str+0x6c>
	else
		tmp = FIELD_LEN(str);
80006798:	e0bffc17 	ldw	r2,-16(fp)
8000679c:	10800003 	ldbu	r2,0(r2)
800067a0:	10803fcc 	andi	r2,r2,255
800067a4:	10800fcc 	andi	r2,r2,63
800067a8:	e0bfff15 	stw	r2,-4(fp)

	/* Turn ASCII into 6 bit if possible */
	if ((TYPE_CODE(str) != FRU_STRING_ASCII) || (tmp <= 0x3F && !force)) {
800067ac:	e0bffc17 	ldw	r2,-16(fp)
800067b0:	10800003 	ldbu	r2,0(r2)
800067b4:	10803fcc 	andi	r2,r2,255
800067b8:	1004d1ba 	srli	r2,r2,6
800067bc:	10803fcc 	andi	r2,r2,255
800067c0:	108000cc 	andi	r2,r2,3
800067c4:	108000d8 	cmpnei	r2,r2,3
800067c8:	1000071e 	bne	r2,zero,800067e8 <insert_str+0xa8>
800067cc:	e0bfff17 	ldw	r2,-4(fp)
800067d0:	10801008 	cmpgei	r2,r2,64
800067d4:	10001a1e 	bne	r2,zero,80006840 <insert_str+0x100>
800067d8:	e0bffb03 	ldbu	r2,-20(fp)
800067dc:	1080005c 	xori	r2,r2,1
800067e0:	10803fcc 	andi	r2,r2,255
800067e4:	10001626 	beq	r2,zero,80006840 <insert_str+0x100>
		/* It fits, so just leave it as ASCII/binary/whatever format it's in */
		buf[0] = tmp | (TYPE_CODE(str) << 6);
800067e8:	e0bffc17 	ldw	r2,-16(fp)
800067ec:	10800003 	ldbu	r2,0(r2)
800067f0:	10803fcc 	andi	r2,r2,255
800067f4:	1004d1ba 	srli	r2,r2,6
800067f8:	10803fcc 	andi	r2,r2,255
800067fc:	100491ba 	slli	r2,r2,6
80006800:	1007883a 	mov	r3,r2
80006804:	e0bfff17 	ldw	r2,-4(fp)
80006808:	1884b03a 	or	r2,r3,r2
8000680c:	1007883a 	mov	r3,r2
80006810:	e0bffd17 	ldw	r2,-12(fp)
80006814:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], &str[1], tmp);
80006818:	e0bffd17 	ldw	r2,-12(fp)
8000681c:	10c00044 	addi	r3,r2,1
80006820:	e0bffc17 	ldw	r2,-16(fp)
80006824:	10800044 	addi	r2,r2,1
80006828:	e13fff17 	ldw	r4,-4(fp)
8000682c:	200d883a 	mov	r6,r4
80006830:	100b883a 	mov	r5,r2
80006834:	1809883a 	mov	r4,r3
80006838:	00104e80 	call	800104e8 <memcpy>
8000683c:	00005306 	br	8000698c <insert_str+0x24c>
	} else {
		/* turn it into 6-bit ASCII */
		unsigned char *six = NULL;
80006840:	e03ffe15 	stw	zero,-8(fp)

		tmp = ascii2six(&six, (unsigned char *)&str[1], tmp);
80006844:	e0bffc17 	ldw	r2,-16(fp)
80006848:	10c00044 	addi	r3,r2,1
8000684c:	e13fff17 	ldw	r4,-4(fp)
80006850:	e0bffe04 	addi	r2,fp,-8
80006854:	200d883a 	mov	r6,r4
80006858:	180b883a 	mov	r5,r3
8000685c:	1009883a 	mov	r4,r2
80006860:	00051ac0 	call	800051ac <ascii2six>
80006864:	e0bfff15 	stw	r2,-4(fp)
		if (tmp < 0) {
80006868:	e0bfff17 	ldw	r2,-4(fp)
8000686c:	10002b0e 	bge	r2,zero,8000691c <insert_str+0x1dc>
			/* Counldn't encode things */
			printf_warn("couldn't encode '%s' string\n", &str[1]);
80006870:	e0bffc17 	ldw	r2,-16(fp)
80006874:	10800044 	addi	r2,r2,1
80006878:	100b883a 	mov	r5,r2
8000687c:	012000b4 	movhi	r4,32770
80006880:	21185704 	addi	r4,r4,24924
80006884:	0010d740 	call	80010d74 <printf>
			tmp = strlen((const char *)&str[1]);
80006888:	e0bffc17 	ldw	r2,-16(fp)
8000688c:	10800044 	addi	r2,r2,1
80006890:	1009883a 	mov	r4,r2
80006894:	00111940 	call	80011194 <strlen>
80006898:	e0bfff15 	stw	r2,-4(fp)
			if (tmp > 0x3F) {
8000689c:	e0bfff17 	ldw	r2,-4(fp)
800068a0:	10801010 	cmplti	r2,r2,64
800068a4:	1000071e 	bne	r2,zero,800068c4 <insert_str+0x184>
				printf_warn("fail : %d\n", tmp);
800068a8:	e17fff17 	ldw	r5,-4(fp)
800068ac:	012000b4 	movhi	r4,32770
800068b0:	21185f04 	addi	r4,r4,24956
800068b4:	0010d740 	call	80010d74 <printf>
				printf_err("String too long to fit\n");
800068b8:	012000b4 	movhi	r4,32770
800068bc:	21186204 	addi	r4,r4,24968
800068c0:	0010e980 	call	80010e98 <puts>
			}
			buf[0] = tmp | (FRU_STRING_ASCII << 6);
800068c4:	e0bfff17 	ldw	r2,-4(fp)
800068c8:	1007883a 	mov	r3,r2
800068cc:	00bff004 	movi	r2,-64
800068d0:	1884b03a 	or	r2,r3,r2
800068d4:	1007883a 	mov	r3,r2
800068d8:	e0bffd17 	ldw	r2,-12(fp)
800068dc:	10c00005 	stb	r3,0(r2)
			memcpy(&buf[1], &str[1], tmp);
800068e0:	e0bffd17 	ldw	r2,-12(fp)
800068e4:	10c00044 	addi	r3,r2,1
800068e8:	e0bffc17 	ldw	r2,-16(fp)
800068ec:	10800044 	addi	r2,r2,1
800068f0:	e13fff17 	ldw	r4,-4(fp)
800068f4:	200d883a 	mov	r6,r4
800068f8:	100b883a 	mov	r5,r2
800068fc:	1809883a 	mov	r4,r3
80006900:	00104e80 	call	800104e8 <memcpy>
			free(six);
80006904:	e0bffe17 	ldw	r2,-8(fp)
80006908:	1009883a 	mov	r4,r2
8000690c:	000fc940 	call	8000fc94 <free>
			return tmp + 1;
80006910:	e0bfff17 	ldw	r2,-4(fp)
80006914:	10800044 	addi	r2,r2,1
80006918:	00001e06 	br	80006994 <insert_str+0x254>
		}
		if (tmp > 0x3F) {
8000691c:	e0bfff17 	ldw	r2,-4(fp)
80006920:	10801010 	cmplti	r2,r2,64
80006924:	1000071e 	bne	r2,zero,80006944 <insert_str+0x204>
			printf_warn("fail : %d\n", tmp);
80006928:	e17fff17 	ldw	r5,-4(fp)
8000692c:	012000b4 	movhi	r4,32770
80006930:	21185f04 	addi	r4,r4,24956
80006934:	0010d740 	call	80010d74 <printf>
			printf_err("String too long to fit\n");
80006938:	012000b4 	movhi	r4,32770
8000693c:	21186204 	addi	r4,r4,24968
80006940:	0010e980 	call	80010e98 <puts>
		}

		buf[0] = tmp | (FRU_STRING_SIXBIT << 6);
80006944:	e0bfff17 	ldw	r2,-4(fp)
80006948:	1007883a 	mov	r3,r2
8000694c:	00bfe004 	movi	r2,-128
80006950:	1884b03a 	or	r2,r3,r2
80006954:	1007883a 	mov	r3,r2
80006958:	e0bffd17 	ldw	r2,-12(fp)
8000695c:	10c00005 	stb	r3,0(r2)
		memcpy(&buf[1], six, tmp);
80006960:	e0bffd17 	ldw	r2,-12(fp)
80006964:	10800044 	addi	r2,r2,1
80006968:	e0fffe17 	ldw	r3,-8(fp)
8000696c:	e13fff17 	ldw	r4,-4(fp)
80006970:	200d883a 	mov	r6,r4
80006974:	180b883a 	mov	r5,r3
80006978:	1009883a 	mov	r4,r2
8000697c:	00104e80 	call	800104e8 <memcpy>
		free(six);
80006980:	e0bffe17 	ldw	r2,-8(fp)
80006984:	1009883a 	mov	r4,r2
80006988:	000fc940 	call	8000fc94 <free>
	}


	return tmp + 1;
8000698c:	e0bfff17 	ldw	r2,-4(fp)
80006990:	10800044 	addi	r2,r2,1
}
80006994:	e037883a 	mov	sp,fp
80006998:	dfc00117 	ldw	ra,4(sp)
8000699c:	df000017 	ldw	fp,0(sp)
800069a0:	dec00204 	addi	sp,sp,8
800069a4:	f800283a 	ret

800069a8 <build_FRU_blob>:

/*
 * Takes the FRU structure, and builds the binary blob
 */
unsigned char * build_FRU_blob (struct FRU_DATA *fru, size_t *length, bool packed)
{
800069a8:	deffed04 	addi	sp,sp,-76
800069ac:	dfc01215 	stw	ra,72(sp)
800069b0:	df001115 	stw	fp,68(sp)
800069b4:	df001104 	addi	fp,sp,68
800069b8:	e13ff415 	stw	r4,-48(fp)
800069bc:	e17ff315 	stw	r5,-52(fp)
800069c0:	3005883a 	mov	r2,r6
800069c4:	e0bff205 	stb	r2,-56(fp)
	unsigned char *p, *buf;
	unsigned int st, len, tmp, last = 0, i = 0, j;
800069c8:	e03ffe15 	stw	zero,-8(fp)
800069cc:	e03ffd15 	stw	zero,-12(fp)

	buf = calloc(1, 1024);
800069d0:	01410004 	movi	r5,1024
800069d4:	01000044 	movi	r4,1
800069d8:	000f9d00 	call	8000f9d0 <calloc>
800069dc:	e0bffb15 	stw	r2,-20(fp)
	len = 256;
800069e0:	00804004 	movi	r2,256
800069e4:	e0bffa15 	stw	r2,-24(fp)

	buf[0] = 0x01;
800069e8:	e0bffb17 	ldw	r2,-20(fp)
800069ec:	00c00044 	movi	r3,1
800069f0:	10c00005 	stb	r3,0(r2)
	i = 8;
800069f4:	00800204 	movi	r2,8
800069f8:	e0bffd15 	stw	r2,-12(fp)
	if (fru->Internal_Area)
800069fc:	e0bff417 	ldw	r2,-48(fp)
80006a00:	10800017 	ldw	r2,0(r2)
80006a04:	10000326 	beq	r2,zero,80006a14 <build_FRU_blob+0x6c>
		printf_err("Internal Use Area not yet implemented - sorry\n");
80006a08:	012000b4 	movhi	r4,32770
80006a0c:	21183104 	addi	r4,r4,24772
80006a10:	0010e980 	call	80010e98 <puts>

	if (fru->Chassis_Info)
80006a14:	e0bff417 	ldw	r2,-48(fp)
80006a18:	10800117 	ldw	r2,4(r2)
80006a1c:	10000326 	beq	r2,zero,80006a2c <build_FRU_blob+0x84>
		printf_err("Chassis Info not yet implemented - sorry\n");
80006a20:	012000b4 	movhi	r4,32770
80006a24:	21186804 	addi	r4,r4,24992
80006a28:	0010e980 	call	80010e98 <puts>

	if (fru->Board_Area) {
80006a2c:	e0bff417 	ldw	r2,-48(fp)
80006a30:	10800217 	ldw	r2,8(r2)
80006a34:	1000cb26 	beq	r2,zero,80006d64 <build_FRU_blob+0x3bc>
		len = st = i;
80006a38:	e0bffd17 	ldw	r2,-12(fp)
80006a3c:	e0bff915 	stw	r2,-28(fp)
80006a40:	e0bff917 	ldw	r2,-28(fp)
80006a44:	e0bffa15 	stw	r2,-24(fp)
		buf[3] = i / 8;
80006a48:	e0bffd17 	ldw	r2,-12(fp)
80006a4c:	1006d0fa 	srli	r3,r2,3
80006a50:	e0bffb17 	ldw	r2,-20(fp)
80006a54:	108000c4 	addi	r2,r2,3
80006a58:	10c00005 	stb	r3,0(r2)
		buf[i] = 0x1;   /* Magic number */
80006a5c:	e0fffb17 	ldw	r3,-20(fp)
80006a60:	e0bffd17 	ldw	r2,-12(fp)
80006a64:	1885883a 	add	r2,r3,r2
80006a68:	00c00044 	movi	r3,1
80006a6c:	10c00005 	stb	r3,0(r2)
		/* buf[i+1] = length, which needs to be determined later */
		buf[i+2] = 25;  /* English */
80006a70:	e0bffd17 	ldw	r2,-12(fp)
80006a74:	10800084 	addi	r2,r2,2
80006a78:	e0fffb17 	ldw	r3,-20(fp)
80006a7c:	1885883a 	add	r2,r3,r2
80006a80:	00c00644 	movi	r3,25
80006a84:	10c00005 	stb	r3,0(r2)
		buf[i+3] = (fru->Board_Area->mfg_date) & 0xFF;
80006a88:	e0bff417 	ldw	r2,-48(fp)
80006a8c:	10800217 	ldw	r2,8(r2)
80006a90:	11000117 	ldw	r4,4(r2)
80006a94:	e0bffd17 	ldw	r2,-12(fp)
80006a98:	108000c4 	addi	r2,r2,3
80006a9c:	e0fffb17 	ldw	r3,-20(fp)
80006aa0:	1885883a 	add	r2,r3,r2
80006aa4:	2007883a 	mov	r3,r4
80006aa8:	10c00005 	stb	r3,0(r2)
		buf[i+4] = (fru->Board_Area->mfg_date >> 8) & 0xFF;
80006aac:	e0bff417 	ldw	r2,-48(fp)
80006ab0:	10800217 	ldw	r2,8(r2)
80006ab4:	10800117 	ldw	r2,4(r2)
80006ab8:	1008d23a 	srli	r4,r2,8
80006abc:	e0bffd17 	ldw	r2,-12(fp)
80006ac0:	10800104 	addi	r2,r2,4
80006ac4:	e0fffb17 	ldw	r3,-20(fp)
80006ac8:	1885883a 	add	r2,r3,r2
80006acc:	2007883a 	mov	r3,r4
80006ad0:	10c00005 	stb	r3,0(r2)
		buf[i+5] = (fru->Board_Area->mfg_date >> 16) & 0xFF;
80006ad4:	e0bff417 	ldw	r2,-48(fp)
80006ad8:	10800217 	ldw	r2,8(r2)
80006adc:	10800117 	ldw	r2,4(r2)
80006ae0:	1008d43a 	srli	r4,r2,16
80006ae4:	e0bffd17 	ldw	r2,-12(fp)
80006ae8:	10800144 	addi	r2,r2,5
80006aec:	e0fffb17 	ldw	r3,-20(fp)
80006af0:	1885883a 	add	r2,r3,r2
80006af4:	2007883a 	mov	r3,r4
80006af8:	10c00005 	stb	r3,0(r2)

		i += 6;
80006afc:	e0bffd17 	ldw	r2,-12(fp)
80006b00:	10800184 	addi	r2,r2,6
80006b04:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->manufacturer, packed);
80006b08:	e0fffb17 	ldw	r3,-20(fp)
80006b0c:	e0bffd17 	ldw	r2,-12(fp)
80006b10:	1887883a 	add	r3,r3,r2
80006b14:	e0bff417 	ldw	r2,-48(fp)
80006b18:	10800217 	ldw	r2,8(r2)
80006b1c:	10800217 	ldw	r2,8(r2)
80006b20:	e13ff203 	ldbu	r4,-56(fp)
80006b24:	200d883a 	mov	r6,r4
80006b28:	100b883a 	mov	r5,r2
80006b2c:	1809883a 	mov	r4,r3
80006b30:	00067400 	call	80006740 <insert_str>
80006b34:	1007883a 	mov	r3,r2
80006b38:	e0bffd17 	ldw	r2,-12(fp)
80006b3c:	10c5883a 	add	r2,r2,r3
80006b40:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->product_name, packed);
80006b44:	e0fffb17 	ldw	r3,-20(fp)
80006b48:	e0bffd17 	ldw	r2,-12(fp)
80006b4c:	1887883a 	add	r3,r3,r2
80006b50:	e0bff417 	ldw	r2,-48(fp)
80006b54:	10800217 	ldw	r2,8(r2)
80006b58:	10800317 	ldw	r2,12(r2)
80006b5c:	e13ff203 	ldbu	r4,-56(fp)
80006b60:	200d883a 	mov	r6,r4
80006b64:	100b883a 	mov	r5,r2
80006b68:	1809883a 	mov	r4,r3
80006b6c:	00067400 	call	80006740 <insert_str>
80006b70:	1007883a 	mov	r3,r2
80006b74:	e0bffd17 	ldw	r2,-12(fp)
80006b78:	10c5883a 	add	r2,r2,r3
80006b7c:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->serial_number, packed);
80006b80:	e0fffb17 	ldw	r3,-20(fp)
80006b84:	e0bffd17 	ldw	r2,-12(fp)
80006b88:	1887883a 	add	r3,r3,r2
80006b8c:	e0bff417 	ldw	r2,-48(fp)
80006b90:	10800217 	ldw	r2,8(r2)
80006b94:	10800417 	ldw	r2,16(r2)
80006b98:	e13ff203 	ldbu	r4,-56(fp)
80006b9c:	200d883a 	mov	r6,r4
80006ba0:	100b883a 	mov	r5,r2
80006ba4:	1809883a 	mov	r4,r3
80006ba8:	00067400 	call	80006740 <insert_str>
80006bac:	1007883a 	mov	r3,r2
80006bb0:	e0bffd17 	ldw	r2,-12(fp)
80006bb4:	10c5883a 	add	r2,r2,r3
80006bb8:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->part_number, packed);
80006bbc:	e0fffb17 	ldw	r3,-20(fp)
80006bc0:	e0bffd17 	ldw	r2,-12(fp)
80006bc4:	1887883a 	add	r3,r3,r2
80006bc8:	e0bff417 	ldw	r2,-48(fp)
80006bcc:	10800217 	ldw	r2,8(r2)
80006bd0:	10800517 	ldw	r2,20(r2)
80006bd4:	e13ff203 	ldbu	r4,-56(fp)
80006bd8:	200d883a 	mov	r6,r4
80006bdc:	100b883a 	mov	r5,r2
80006be0:	1809883a 	mov	r4,r3
80006be4:	00067400 	call	80006740 <insert_str>
80006be8:	1007883a 	mov	r3,r2
80006bec:	e0bffd17 	ldw	r2,-12(fp)
80006bf0:	10c5883a 	add	r2,r2,r3
80006bf4:	e0bffd15 	stw	r2,-12(fp)
		i += insert_str(&buf[i], fru->Board_Area->FRU_file_ID, packed);
80006bf8:	e0fffb17 	ldw	r3,-20(fp)
80006bfc:	e0bffd17 	ldw	r2,-12(fp)
80006c00:	1887883a 	add	r3,r3,r2
80006c04:	e0bff417 	ldw	r2,-48(fp)
80006c08:	10800217 	ldw	r2,8(r2)
80006c0c:	10800617 	ldw	r2,24(r2)
80006c10:	e13ff203 	ldbu	r4,-56(fp)
80006c14:	200d883a 	mov	r6,r4
80006c18:	100b883a 	mov	r5,r2
80006c1c:	1809883a 	mov	r4,r3
80006c20:	00067400 	call	80006740 <insert_str>
80006c24:	1007883a 	mov	r3,r2
80006c28:	e0bffd17 	ldw	r2,-12(fp)
80006c2c:	10c5883a 	add	r2,r2,r3
80006c30:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
80006c34:	e03ffc15 	stw	zero,-16(fp)
80006c38:	00001d06 	br	80006cb0 <build_FRU_blob+0x308>
			if (fru->Board_Area->custom[j]) {
80006c3c:	e0bff417 	ldw	r2,-48(fp)
80006c40:	10c00217 	ldw	r3,8(r2)
80006c44:	e0bffc17 	ldw	r2,-16(fp)
80006c48:	108001c4 	addi	r2,r2,7
80006c4c:	100490ba 	slli	r2,r2,2
80006c50:	1885883a 	add	r2,r3,r2
80006c54:	10800017 	ldw	r2,0(r2)
80006c58:	10001226 	beq	r2,zero,80006ca4 <build_FRU_blob+0x2fc>
				i += insert_str(&buf[i], fru->Board_Area->custom[j], packed);
80006c5c:	e0fffb17 	ldw	r3,-20(fp)
80006c60:	e0bffd17 	ldw	r2,-12(fp)
80006c64:	1889883a 	add	r4,r3,r2
80006c68:	e0bff417 	ldw	r2,-48(fp)
80006c6c:	10c00217 	ldw	r3,8(r2)
80006c70:	e0bffc17 	ldw	r2,-16(fp)
80006c74:	108001c4 	addi	r2,r2,7
80006c78:	100490ba 	slli	r2,r2,2
80006c7c:	1885883a 	add	r2,r3,r2
80006c80:	10800017 	ldw	r2,0(r2)
80006c84:	e0fff203 	ldbu	r3,-56(fp)
80006c88:	180d883a 	mov	r6,r3
80006c8c:	100b883a 	mov	r5,r2
80006c90:	00067400 	call	80006740 <insert_str>
80006c94:	1007883a 	mov	r3,r2
80006c98:	e0bffd17 	ldw	r2,-12(fp)
80006c9c:	10c5883a 	add	r2,r2,r3
80006ca0:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < CUSTOM_FIELDS; j++) {
80006ca4:	e0bffc17 	ldw	r2,-16(fp)
80006ca8:	10800044 	addi	r2,r2,1
80006cac:	e0bffc15 	stw	r2,-16(fp)
80006cb0:	e0bffc17 	ldw	r2,-16(fp)
80006cb4:	108002b0 	cmpltui	r2,r2,10
80006cb8:	103fe01e 	bne	r2,zero,80006c3c <_gp+0xfffd5ec8>
			}
		}
		buf[i] = 0xC1;
80006cbc:	e0fffb17 	ldw	r3,-20(fp)
80006cc0:	e0bffd17 	ldw	r2,-12(fp)
80006cc4:	1885883a 	add	r2,r3,r2
80006cc8:	00fff044 	movi	r3,-63
80006ccc:	10c00005 	stb	r3,0(r2)
		i++;
80006cd0:	e0bffd17 	ldw	r2,-12(fp)
80006cd4:	10800044 	addi	r2,r2,1
80006cd8:	e0bffd15 	stw	r2,-12(fp)
		i = (((i >> 3) + 1) << 3) - 1;
80006cdc:	e0bffd17 	ldw	r2,-12(fp)
80006ce0:	1004d0fa 	srli	r2,r2,3
80006ce4:	10800044 	addi	r2,r2,1
80006ce8:	100490fa 	slli	r2,r2,3
80006cec:	10bfffc4 	addi	r2,r2,-1
80006cf0:	e0bffd15 	stw	r2,-12(fp)
		len = i - st;
80006cf4:	e0fffd17 	ldw	r3,-12(fp)
80006cf8:	e0bff917 	ldw	r2,-28(fp)
80006cfc:	1885c83a 	sub	r2,r3,r2
80006d00:	e0bffa15 	stw	r2,-24(fp)
		buf[st + 1] = len / 8 + 1;
80006d04:	e0bffa17 	ldw	r2,-24(fp)
80006d08:	1004d0fa 	srli	r2,r2,3
80006d0c:	1009883a 	mov	r4,r2
80006d10:	e0bff917 	ldw	r2,-28(fp)
80006d14:	10800044 	addi	r2,r2,1
80006d18:	e0fffb17 	ldw	r3,-20(fp)
80006d1c:	1885883a 	add	r2,r3,r2
80006d20:	20c00044 	addi	r3,r4,1
80006d24:	10c00005 	stb	r3,0(r2)
		buf[i] = 256 - calc_zero_checksum(&buf[st], len);
80006d28:	e0fffb17 	ldw	r3,-20(fp)
80006d2c:	e0bff917 	ldw	r2,-28(fp)
80006d30:	1885883a 	add	r2,r3,r2
80006d34:	e17ffa17 	ldw	r5,-24(fp)
80006d38:	1009883a 	mov	r4,r2
80006d3c:	00050d00 	call	800050d0 <calc_zero_checksum>
80006d40:	1009883a 	mov	r4,r2
80006d44:	e0fffb17 	ldw	r3,-20(fp)
80006d48:	e0bffd17 	ldw	r2,-12(fp)
80006d4c:	1885883a 	add	r2,r3,r2
80006d50:	0107c83a 	sub	r3,zero,r4
80006d54:	10c00005 	stb	r3,0(r2)
		i++;
80006d58:	e0bffd17 	ldw	r2,-12(fp)
80006d5c:	10800044 	addi	r2,r2,1
80006d60:	e0bffd15 	stw	r2,-12(fp)
	}
	if (fru->Product_Info) {
	}
	if (fru->MultiRecord_Area) {
80006d64:	e0bff417 	ldw	r2,-48(fp)
80006d68:	10800417 	ldw	r2,16(r2)
80006d6c:	1000d426 	beq	r2,zero,800070c0 <build_FRU_blob+0x718>
		st = i;
80006d70:	e0bffd17 	ldw	r2,-12(fp)
80006d74:	e0bff915 	stw	r2,-28(fp)
		buf[5] = st / 8;
80006d78:	e0bff917 	ldw	r2,-28(fp)
80006d7c:	1006d0fa 	srli	r3,r2,3
80006d80:	e0bffb17 	ldw	r2,-20(fp)
80006d84:	10800144 	addi	r2,r2,5
80006d88:	10c00005 	stb	r3,0(r2)
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
80006d8c:	e03fff15 	stw	zero,-4(fp)
80006d90:	00002506 	br	80006e28 <build_FRU_blob+0x480>
			p = fru->MultiRecord_Area->supplies[tmp];
80006d94:	e0bff417 	ldw	r2,-48(fp)
80006d98:	10c00417 	ldw	r3,16(r2)
80006d9c:	e0bfff17 	ldw	r2,-4(fp)
80006da0:	100490ba 	slli	r2,r2,2
80006da4:	1885883a 	add	r2,r3,r2
80006da8:	10800017 	ldw	r2,0(r2)
80006dac:	e0bff815 	stw	r2,-32(fp)
			if (!p)
80006db0:	e0bff817 	ldw	r2,-32(fp)
80006db4:	10001826 	beq	r2,zero,80006e18 <build_FRU_blob+0x470>
				continue;
			memcpy(&buf[i], p, p[2]+ 5);
80006db8:	e0fffb17 	ldw	r3,-20(fp)
80006dbc:	e0bffd17 	ldw	r2,-12(fp)
80006dc0:	1887883a 	add	r3,r3,r2
80006dc4:	e0bff817 	ldw	r2,-32(fp)
80006dc8:	10800084 	addi	r2,r2,2
80006dcc:	10800003 	ldbu	r2,0(r2)
80006dd0:	10803fcc 	andi	r2,r2,255
80006dd4:	10800144 	addi	r2,r2,5
80006dd8:	100d883a 	mov	r6,r2
80006ddc:	e17ff817 	ldw	r5,-32(fp)
80006de0:	1809883a 	mov	r4,r3
80006de4:	00104e80 	call	800104e8 <memcpy>
			last = i + 1;
80006de8:	e0bffd17 	ldw	r2,-12(fp)
80006dec:	10800044 	addi	r2,r2,1
80006df0:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
80006df4:	e0bff817 	ldw	r2,-32(fp)
80006df8:	10800084 	addi	r2,r2,2
80006dfc:	10800003 	ldbu	r2,0(r2)
80006e00:	10c03fcc 	andi	r3,r2,255
80006e04:	e0bffd17 	ldw	r2,-12(fp)
80006e08:	1885883a 	add	r2,r3,r2
80006e0c:	10800144 	addi	r2,r2,5
80006e10:	e0bffd15 	stw	r2,-12(fp)
80006e14:	00000106 	br	80006e1c <build_FRU_blob+0x474>
				continue;
80006e18:	0001883a 	nop
		for (tmp = 0; tmp < NUM_SUPPLIES; tmp++) {
80006e1c:	e0bfff17 	ldw	r2,-4(fp)
80006e20:	10800044 	addi	r2,r2,1
80006e24:	e0bfff15 	stw	r2,-4(fp)
80006e28:	e0bfff17 	ldw	r2,-4(fp)
80006e2c:	10800330 	cmpltui	r2,r2,12
80006e30:	103fd81e 	bne	r2,zero,80006d94 <_gp+0xfffd6020>
		}
		p = fru->MultiRecord_Area->connector;
80006e34:	e0bff417 	ldw	r2,-48(fp)
80006e38:	10800417 	ldw	r2,16(r2)
80006e3c:	10800c17 	ldw	r2,48(r2)
80006e40:	e0bff815 	stw	r2,-32(fp)
		if (p) {
80006e44:	e0bff817 	ldw	r2,-32(fp)
80006e48:	10001726 	beq	r2,zero,80006ea8 <build_FRU_blob+0x500>
			memcpy(&buf[i], p, p[2]+ 5);
80006e4c:	e0fffb17 	ldw	r3,-20(fp)
80006e50:	e0bffd17 	ldw	r2,-12(fp)
80006e54:	1887883a 	add	r3,r3,r2
80006e58:	e0bff817 	ldw	r2,-32(fp)
80006e5c:	10800084 	addi	r2,r2,2
80006e60:	10800003 	ldbu	r2,0(r2)
80006e64:	10803fcc 	andi	r2,r2,255
80006e68:	10800144 	addi	r2,r2,5
80006e6c:	100d883a 	mov	r6,r2
80006e70:	e17ff817 	ldw	r5,-32(fp)
80006e74:	1809883a 	mov	r4,r3
80006e78:	00104e80 	call	800104e8 <memcpy>
			last = i + 1;
80006e7c:	e0bffd17 	ldw	r2,-12(fp)
80006e80:	10800044 	addi	r2,r2,1
80006e84:	e0bffe15 	stw	r2,-8(fp)
			i += p[2] + 5;
80006e88:	e0bff817 	ldw	r2,-32(fp)
80006e8c:	10800084 	addi	r2,r2,2
80006e90:	10800003 	ldbu	r2,0(r2)
80006e94:	10c03fcc 	andi	r3,r2,255
80006e98:	e0bffd17 	ldw	r2,-12(fp)
80006e9c:	1885883a 	add	r2,r3,r2
80006ea0:	10800144 	addi	r2,r2,5
80006ea4:	e0bffd15 	stw	r2,-12(fp)
		}
		p = fru->MultiRecord_Area->i2c_devices;
80006ea8:	e0bff417 	ldw	r2,-48(fp)
80006eac:	10800417 	ldw	r2,16(r2)
80006eb0:	10800d17 	ldw	r2,52(r2)
80006eb4:	e0bff815 	stw	r2,-32(fp)
		if (p) {
80006eb8:	e0bff817 	ldw	r2,-32(fp)
80006ebc:	10006126 	beq	r2,zero,80007044 <build_FRU_blob+0x69c>
			unsigned int len, oui = VITA_OUI;
80006ec0:	0084a884 	movi	r2,4770
80006ec4:	e0bff615 	stw	r2,-40(fp)
			unsigned char *six = NULL;
80006ec8:	e03ff515 	stw	zero,-44(fp)
			len = ascii2six(&six, p, strlen((char *)p));
80006ecc:	e13ff817 	ldw	r4,-32(fp)
80006ed0:	00111940 	call	80011194 <strlen>
80006ed4:	1007883a 	mov	r3,r2
80006ed8:	e0bff504 	addi	r2,fp,-44
80006edc:	180d883a 	mov	r6,r3
80006ee0:	e17ff817 	ldw	r5,-32(fp)
80006ee4:	1009883a 	mov	r4,r2
80006ee8:	00051ac0 	call	800051ac <ascii2six>
80006eec:	e0bff715 	stw	r2,-36(fp)

			/* Type ID, Record Format version, Length, checksum, checksum */
			sprintf((char *)&buf[i], "%c%c%c%c%c", MULTIRECORD_FMC, 0x02, len + 4, 0, 0);
80006ef0:	e0fffb17 	ldw	r3,-20(fp)
80006ef4:	e0bffd17 	ldw	r2,-12(fp)
80006ef8:	1887883a 	add	r3,r3,r2
80006efc:	e0bff717 	ldw	r2,-36(fp)
80006f00:	10800104 	addi	r2,r2,4
80006f04:	d8000215 	stw	zero,8(sp)
80006f08:	d8000115 	stw	zero,4(sp)
80006f0c:	d8800015 	stw	r2,0(sp)
80006f10:	01c00084 	movi	r7,2
80006f14:	01803e84 	movi	r6,250
80006f18:	016000b4 	movhi	r5,32770
80006f1c:	29587304 	addi	r5,r5,25036
80006f20:	1809883a 	mov	r4,r3
80006f24:	0010fd80 	call	80010fd8 <sprintf>
			/* Store OUI */
#if __BYTE_ORDER == __BIG_ENDIAN
			oui = __builtin_bswap32(oui);
80006f28:	e0bff617 	ldw	r2,-40(fp)
80006f2c:	1009883a 	mov	r4,r2
80006f30:	000c8700 	call	8000c870 <__bswapsi2>
80006f34:	e0bff615 	stw	r2,-40(fp)
#endif
			memcpy(&buf[i+5], &oui, 3);
80006f38:	e0bffd17 	ldw	r2,-12(fp)
80006f3c:	10800144 	addi	r2,r2,5
80006f40:	e0fffb17 	ldw	r3,-20(fp)
80006f44:	1885883a 	add	r2,r3,r2
80006f48:	e0fff604 	addi	r3,fp,-40
80006f4c:	018000c4 	movi	r6,3
80006f50:	180b883a 	mov	r5,r3
80006f54:	1009883a 	mov	r4,r2
80006f58:	00104e80 	call	800104e8 <memcpy>
			/* Subtype & version  - see Table 9 in FMC spec*/
			sprintf((char *)&buf[i+8], "%c", (0x1 << 4) | (0));
80006f5c:	e0bffd17 	ldw	r2,-12(fp)
80006f60:	10800204 	addi	r2,r2,8
80006f64:	e0fffb17 	ldw	r3,-20(fp)
80006f68:	1885883a 	add	r2,r3,r2
80006f6c:	01800404 	movi	r6,16
80006f70:	016000b4 	movhi	r5,32770
80006f74:	29587604 	addi	r5,r5,25048
80006f78:	1009883a 	mov	r4,r2
80006f7c:	0010fd80 	call	80010fd8 <sprintf>
			/* finally copy over the string */
			memcpy(&buf[i+9], six, len);
80006f80:	e0bffd17 	ldw	r2,-12(fp)
80006f84:	10800244 	addi	r2,r2,9
80006f88:	e0fffb17 	ldw	r3,-20(fp)
80006f8c:	1885883a 	add	r2,r3,r2
80006f90:	e0fff517 	ldw	r3,-44(fp)
80006f94:	e1bff717 	ldw	r6,-36(fp)
80006f98:	180b883a 	mov	r5,r3
80006f9c:	1009883a 	mov	r4,r2
80006fa0:	00104e80 	call	800104e8 <memcpy>
			/* Record Checksum */
			buf[i+3] = 0x100 - calc_zero_checksum(&buf[i+5], len + 3);
80006fa4:	e0bffd17 	ldw	r2,-12(fp)
80006fa8:	10800144 	addi	r2,r2,5
80006fac:	e0fffb17 	ldw	r3,-20(fp)
80006fb0:	1887883a 	add	r3,r3,r2
80006fb4:	e0bff717 	ldw	r2,-36(fp)
80006fb8:	108000c4 	addi	r2,r2,3
80006fbc:	100b883a 	mov	r5,r2
80006fc0:	1809883a 	mov	r4,r3
80006fc4:	00050d00 	call	800050d0 <calc_zero_checksum>
80006fc8:	1009883a 	mov	r4,r2
80006fcc:	e0bffd17 	ldw	r2,-12(fp)
80006fd0:	108000c4 	addi	r2,r2,3
80006fd4:	e0fffb17 	ldw	r3,-20(fp)
80006fd8:	1885883a 	add	r2,r3,r2
80006fdc:	0107c83a 	sub	r3,zero,r4
80006fe0:	10c00005 	stb	r3,0(r2)
			/* Header Checksum */
			buf[i+4] = 0x100 - calc_zero_checksum(&buf[i], 4);
80006fe4:	e0fffb17 	ldw	r3,-20(fp)
80006fe8:	e0bffd17 	ldw	r2,-12(fp)
80006fec:	1885883a 	add	r2,r3,r2
80006ff0:	01400104 	movi	r5,4
80006ff4:	1009883a 	mov	r4,r2
80006ff8:	00050d00 	call	800050d0 <calc_zero_checksum>
80006ffc:	1009883a 	mov	r4,r2
80007000:	e0bffd17 	ldw	r2,-12(fp)
80007004:	10800104 	addi	r2,r2,4
80007008:	e0fffb17 	ldw	r3,-20(fp)
8000700c:	1885883a 	add	r2,r3,r2
80007010:	0107c83a 	sub	r3,zero,r4
80007014:	10c00005 	stb	r3,0(r2)

			last = i + 1;
80007018:	e0bffd17 	ldw	r2,-12(fp)
8000701c:	10800044 	addi	r2,r2,1
80007020:	e0bffe15 	stw	r2,-8(fp)
			i += len + 9;
80007024:	e0fff717 	ldw	r3,-36(fp)
80007028:	e0bffd17 	ldw	r2,-12(fp)
8000702c:	1885883a 	add	r2,r3,r2
80007030:	10800244 	addi	r2,r2,9
80007034:	e0bffd15 	stw	r2,-12(fp)

			free(six);
80007038:	e0bff517 	ldw	r2,-44(fp)
8000703c:	1009883a 	mov	r4,r2
80007040:	000fc940 	call	8000fc94 <free>
		}
		if (last) {
80007044:	e0bffe17 	ldw	r2,-8(fp)
80007048:	10001d26 	beq	r2,zero,800070c0 <build_FRU_blob+0x718>
			buf[last] = buf[last] | 0x80;
8000704c:	e0fffb17 	ldw	r3,-20(fp)
80007050:	e0bffe17 	ldw	r2,-8(fp)
80007054:	1885883a 	add	r2,r3,r2
80007058:	11000003 	ldbu	r4,0(r2)
8000705c:	e0fffb17 	ldw	r3,-20(fp)
80007060:	e0bffe17 	ldw	r2,-8(fp)
80007064:	1885883a 	add	r2,r3,r2
80007068:	00ffe004 	movi	r3,-128
8000706c:	20c6b03a 	or	r3,r4,r3
80007070:	10c00005 	stb	r3,0(r2)
			/* redo the header checksum, since we just changed the header :( */
			buf[last + 3] = 0;
80007074:	e0bffe17 	ldw	r2,-8(fp)
80007078:	108000c4 	addi	r2,r2,3
8000707c:	e0fffb17 	ldw	r3,-20(fp)
80007080:	1885883a 	add	r2,r3,r2
80007084:	10000005 	stb	zero,0(r2)
			buf[last + 3] = 0x100 - calc_zero_checksum(&buf[last - 1], 4);
80007088:	e0bffe17 	ldw	r2,-8(fp)
8000708c:	10bfffc4 	addi	r2,r2,-1
80007090:	e0fffb17 	ldw	r3,-20(fp)
80007094:	1885883a 	add	r2,r3,r2
80007098:	01400104 	movi	r5,4
8000709c:	1009883a 	mov	r4,r2
800070a0:	00050d00 	call	800050d0 <calc_zero_checksum>
800070a4:	1009883a 	mov	r4,r2
800070a8:	e0bffe17 	ldw	r2,-8(fp)
800070ac:	108000c4 	addi	r2,r2,3
800070b0:	e0fffb17 	ldw	r3,-20(fp)
800070b4:	1885883a 	add	r2,r3,r2
800070b8:	0107c83a 	sub	r3,zero,r4
800070bc:	10c00005 	stb	r3,0(r2)
		}
	}
	buf[7] = 256 - calc_zero_checksum(buf, 6);
800070c0:	01400184 	movi	r5,6
800070c4:	e13ffb17 	ldw	r4,-20(fp)
800070c8:	00050d00 	call	800050d0 <calc_zero_checksum>
800070cc:	1007883a 	mov	r3,r2
800070d0:	e0bffb17 	ldw	r2,-20(fp)
800070d4:	108001c4 	addi	r2,r2,7
800070d8:	00c7c83a 	sub	r3,zero,r3
800070dc:	10c00005 	stb	r3,0(r2)

	*length = i;
800070e0:	e0bff317 	ldw	r2,-52(fp)
800070e4:	e0fffd17 	ldw	r3,-12(fp)
800070e8:	10c00015 	stw	r3,0(r2)
	return buf;
800070ec:	e0bffb17 	ldw	r2,-20(fp)
}
800070f0:	e037883a 	mov	sp,fp
800070f4:	dfc00117 	ldw	ra,4(sp)
800070f8:	df000017 	ldw	fp,0(sp)
800070fc:	dec00204 	addi	sp,sp,8
80007100:	f800283a 	ret

80007104 <jesd_read>:
* @brief jesd_read
*******************************************************************************/
int32_t jesd_read(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t *reg_data)
{
80007104:	defffc04 	addi	sp,sp,-16
80007108:	df000315 	stw	fp,12(sp)
8000710c:	df000304 	addi	fp,sp,12
80007110:	e13fff15 	stw	r4,-4(fp)
80007114:	e17ffe15 	stw	r5,-8(fp)
80007118:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((jesd->base_address + reg_addr));
8000711c:	e0bfff17 	ldw	r2,-4(fp)
80007120:	10c00017 	ldw	r3,0(r2)
80007124:	e0bffe17 	ldw	r2,-8(fp)
80007128:	1885883a 	add	r2,r3,r2
8000712c:	10800037 	ldwio	r2,0(r2)
80007130:	1007883a 	mov	r3,r2
80007134:	e0bffd17 	ldw	r2,-12(fp)
80007138:	10c00015 	stw	r3,0(r2)

	return 0;
8000713c:	0005883a 	mov	r2,zero
}
80007140:	e037883a 	mov	sp,fp
80007144:	df000017 	ldw	fp,0(sp)
80007148:	dec00104 	addi	sp,sp,4
8000714c:	f800283a 	ret

80007150 <jesd_write>:
* @brief jesd_write
*******************************************************************************/
int32_t jesd_write(jesd_core *jesd,
					uint32_t reg_addr,
					uint32_t reg_data)
{
80007150:	defffc04 	addi	sp,sp,-16
80007154:	df000315 	stw	fp,12(sp)
80007158:	df000304 	addi	fp,sp,12
8000715c:	e13fff15 	stw	r4,-4(fp)
80007160:	e17ffe15 	stw	r5,-8(fp)
80007164:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((jesd->base_address + reg_addr), reg_data);
80007168:	e0bfff17 	ldw	r2,-4(fp)
8000716c:	10c00017 	ldw	r3,0(r2)
80007170:	e0bffe17 	ldw	r2,-8(fp)
80007174:	1885883a 	add	r2,r3,r2
80007178:	1007883a 	mov	r3,r2
8000717c:	e0bffd17 	ldw	r2,-12(fp)
80007180:	18800035 	stwio	r2,0(r3)

	return 0;
80007184:	0005883a 	mov	r2,zero
}
80007188:	e037883a 	mov	sp,fp
8000718c:	df000017 	ldw	fp,0(sp)
80007190:	dec00104 	addi	sp,sp,4
80007194:	f800283a 	ret

80007198 <jesd_setup>:

/***************************************************************************//**
* @brief jesd_init
*******************************************************************************/
int32_t jesd_setup(jesd_core *jesd)
{
80007198:	defffd04 	addi	sp,sp,-12
8000719c:	dfc00215 	stw	ra,8(sp)
800071a0:	df000115 	stw	fp,4(sp)
800071a4:	df000104 	addi	fp,sp,4
800071a8:	e13fff15 	stw	r4,-4(fp)
	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 1);
800071ac:	01800044 	movi	r6,1
800071b0:	01403004 	movi	r5,192
800071b4:	e13fff17 	ldw	r4,-4(fp)
800071b8:	00071500 	call	80007150 <jesd_write>
	jesd_write(jesd, JESD204_REG_LINK_CONF0, (((jesd->octets_per_frame-1) << 16) |
800071bc:	e0bfff17 	ldw	r2,-4(fp)
800071c0:	108001c3 	ldbu	r2,7(r2)
800071c4:	10803fcc 	andi	r2,r2,255
800071c8:	10bfffc4 	addi	r2,r2,-1
800071cc:	1006943a 	slli	r3,r2,16
		((jesd->frames_per_multiframe*jesd->octets_per_frame)-1)));
800071d0:	e0bfff17 	ldw	r2,-4(fp)
800071d4:	10800203 	ldbu	r2,8(r2)
800071d8:	11003fcc 	andi	r4,r2,255
800071dc:	e0bfff17 	ldw	r2,-4(fp)
800071e0:	108001c3 	ldbu	r2,7(r2)
800071e4:	10803fcc 	andi	r2,r2,255
800071e8:	2085383a 	mul	r2,r4,r2
800071ec:	10bfffc4 	addi	r2,r2,-1
	jesd_write(jesd, JESD204_REG_LINK_CONF0, (((jesd->octets_per_frame-1) << 16) |
800071f0:	1884b03a 	or	r2,r3,r2
800071f4:	100d883a 	mov	r6,r2
800071f8:	01408404 	movi	r5,528
800071fc:	e13fff17 	ldw	r4,-4(fp)
80007200:	00071500 	call	80007150 <jesd_write>
	jesd_write(jesd, JESD204_REG_LINK_DISABLE, 0);
80007204:	000d883a 	mov	r6,zero
80007208:	01403004 	movi	r5,192
8000720c:	e13fff17 	ldw	r4,-4(fp)
80007210:	00071500 	call	80007150 <jesd_write>
	mdelay(100);
80007214:	010000b4 	movhi	r4,2
80007218:	2121a804 	addi	r4,r4,-31072
8000721c:	00205040 	call	80020504 <usleep>
	return(0);
80007220:	0005883a 	mov	r2,zero
}
80007224:	e037883a 	mov	sp,fp
80007228:	dfc00117 	ldw	ra,4(sp)
8000722c:	df000017 	ldw	fp,0(sp)
80007230:	dec00204 	addi	sp,sp,8
80007234:	f800283a 	ret

80007238 <jesd_sysref_control>:

/***************************************************************************//**
* @brief jesd generate SYSREF if necessar
*******************************************************************************/
int32_t jesd_sysref_control(jesd_core *jesd, uint32_t enable)
{
80007238:	defffb04 	addi	sp,sp,-20
8000723c:	dfc00415 	stw	ra,16(sp)
80007240:	df000315 	stw	fp,12(sp)
80007244:	df000304 	addi	fp,sp,12
80007248:	e13ffe15 	stw	r4,-8(fp)
8000724c:	e17ffd15 	stw	r5,-12(fp)
	gpio_desc *sysref_pin;
	if ((jesd->sysref_type == INTERN) && (jesd->subclass_mode >= 1)) {
80007250:	e0bffe17 	ldw	r2,-8(fp)
80007254:	10800417 	ldw	r2,16(r2)
80007258:	10800058 	cmpnei	r2,r2,1
8000725c:	1000161e 	bne	r2,zero,800072b8 <jesd_sysref_control+0x80>
80007260:	e0bffe17 	ldw	r2,-8(fp)
80007264:	10800343 	ldbu	r2,13(r2)
80007268:	10803fcc 	andi	r2,r2,255
8000726c:	10001226 	beq	r2,zero,800072b8 <jesd_sysref_control+0x80>

		// generate SYS_REF

		gpio_get(&sysref_pin, jesd->sysref_gpio_pin);
80007270:	e0bffe17 	ldw	r2,-8(fp)
80007274:	10800517 	ldw	r2,20(r2)
80007278:	10c03fcc 	andi	r3,r2,255
8000727c:	e0bfff04 	addi	r2,fp,-4
80007280:	180b883a 	mov	r5,r3
80007284:	1009883a 	mov	r4,r2
80007288:	0007e2c0 	call	80007e2c <gpio_get>

		gpio_set_value(sysref_pin, enable);
8000728c:	e0bfff17 	ldw	r2,-4(fp)
80007290:	e0fffd17 	ldw	r3,-12(fp)
80007294:	18c03fcc 	andi	r3,r3,255
80007298:	180b883a 	mov	r5,r3
8000729c:	1009883a 	mov	r4,r2
800072a0:	0007f680 	call	80007f68 <gpio_set_value>

		gpio_remove(sysref_pin);
800072a4:	e0bfff17 	ldw	r2,-4(fp)
800072a8:	1009883a 	mov	r4,r2
800072ac:	0007ebc0 	call	80007ebc <gpio_remove>

		mdelay(10);
800072b0:	0109c404 	movi	r4,10000
800072b4:	00205040 	call	80020504 <usleep>
	}
	return 0;
800072b8:	0005883a 	mov	r2,zero
}
800072bc:	e037883a 	mov	sp,fp
800072c0:	dfc00117 	ldw	ra,4(sp)
800072c4:	df000017 	ldw	fp,0(sp)
800072c8:	dec00204 	addi	sp,sp,8
800072cc:	f800283a 	ret

800072d0 <jesd_status>:

/***************************************************************************//**
* @brief jesd_read_status generic
*******************************************************************************/
int32_t jesd_status(jesd_core *jesd)
{
800072d0:	defffa04 	addi	sp,sp,-24
800072d4:	dfc00515 	stw	ra,20(sp)
800072d8:	df000415 	stw	fp,16(sp)
800072dc:	df000404 	addi	fp,sp,16
800072e0:	e13ffc15 	stw	r4,-16(fp)
	uint32_t status;
	int32_t timeout;
	int32_t ret;

	ret = 0;
800072e4:	e03ffe15 	stw	zero,-8(fp)
	timeout = 100;
800072e8:	00801904 	movi	r2,100
800072ec:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
800072f0:	00000e06 	br	8000732c <jesd_status+0x5c>
		mdelay(1);
800072f4:	0100fa04 	movi	r4,1000
800072f8:	00205040 	call	80020504 <usleep>
		jesd_read(jesd, 0x280, &status);
800072fc:	e0bffd04 	addi	r2,fp,-12
80007300:	100d883a 	mov	r6,r2
80007304:	0140a004 	movi	r5,640
80007308:	e13ffc17 	ldw	r4,-16(fp)
8000730c:	00071040 	call	80007104 <jesd_read>
		if ((status & 0x13) == 0x13) break;
80007310:	e0bffd17 	ldw	r2,-12(fp)
80007314:	108004cc 	andi	r2,r2,19
80007318:	108004d8 	cmpnei	r2,r2,19
8000731c:	10000626 	beq	r2,zero,80007338 <jesd_status+0x68>
		timeout = timeout - 1;
80007320:	e0bfff17 	ldw	r2,-4(fp)
80007324:	10bfffc4 	addi	r2,r2,-1
80007328:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
8000732c:	e0bfff17 	ldw	r2,-4(fp)
80007330:	00bff016 	blt	zero,r2,800072f4 <_gp+0xfffd6580>
80007334:	00000106 	br	8000733c <jesd_status+0x6c>
		if ((status & 0x13) == 0x13) break;
80007338:	0001883a 	nop
	}
	if ((status & 0x10) != 0x10) {
8000733c:	e0bffd17 	ldw	r2,-12(fp)
80007340:	1080040c 	andi	r2,r2,16
80007344:	1000091e 	bne	r2,zero,8000736c <jesd_status+0x9c>
		ad_printf("%s jesd_status: out of sync (%x)!\n", __func__, status);
80007348:	e0bffd17 	ldw	r2,-12(fp)
8000734c:	100d883a 	mov	r6,r2
80007350:	016000b4 	movhi	r5,32770
80007354:	29593204 	addi	r5,r5,25800
80007358:	012000b4 	movhi	r4,32770
8000735c:	21188d04 	addi	r4,r4,25140
80007360:	0010d740 	call	80010d74 <printf>
		ret = -1;
80007364:	00bfffc4 	movi	r2,-1
80007368:	e0bffe15 	stw	r2,-8(fp)
	}
	if ((status & 0x03) != 0x03) {
8000736c:	e0bffd17 	ldw	r2,-12(fp)
80007370:	108000cc 	andi	r2,r2,3
80007374:	108000e0 	cmpeqi	r2,r2,3
80007378:	1000091e 	bne	r2,zero,800073a0 <jesd_status+0xd0>
		ad_printf("%s jesd_status: not in data phase (%x)!\n", __func__, status);
8000737c:	e0bffd17 	ldw	r2,-12(fp)
80007380:	100d883a 	mov	r6,r2
80007384:	016000b4 	movhi	r5,32770
80007388:	29593204 	addi	r5,r5,25800
8000738c:	012000b4 	movhi	r4,32770
80007390:	21189604 	addi	r4,r4,25176
80007394:	0010d740 	call	80010d74 <printf>
		ret = -1;
80007398:	00bfffc4 	movi	r2,-1
8000739c:	e0bffe15 	stw	r2,-8(fp)
	}
	ad_printf("%s jesd_status: %x\n", __func__, status);
800073a0:	e0bffd17 	ldw	r2,-12(fp)
800073a4:	100d883a 	mov	r6,r2
800073a8:	016000b4 	movhi	r5,32770
800073ac:	29593204 	addi	r5,r5,25800
800073b0:	012000b4 	movhi	r4,32770
800073b4:	2118a104 	addi	r4,r4,25220
800073b8:	0010d740 	call	80010d74 <printf>

	return(ret);
800073bc:	e0bffe17 	ldw	r2,-8(fp)
}
800073c0:	e037883a 	mov	sp,fp
800073c4:	dfc00117 	ldw	ra,4(sp)
800073c8:	df000017 	ldw	fp,0(sp)
800073cc:	dec00204 	addi	sp,sp,8
800073d0:	f800283a 	ret

800073d4 <axi_jesd204_rx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_rx_status_read
*******************************************************************************/
int32_t axi_jesd204_rx_status_read(jesd_core *jesd)
{
800073d4:	defff804 	addi	sp,sp,-32
800073d8:	dfc00715 	stw	ra,28(sp)
800073dc:	df000615 	stw	fp,24(sp)
800073e0:	df000604 	addi	fp,sp,24
800073e4:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
800073e8:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
800073ec:	e0bffd04 	addi	r2,fp,-12
800073f0:	100d883a 	mov	r6,r2
800073f4:	01403104 	movi	r5,196
800073f8:	e13ffa17 	ldw	r4,-24(fp)
800073fc:	00071040 	call	80007104 <jesd_read>
80007400:	1007883a 	mov	r3,r2
80007404:	e0bfff17 	ldw	r2,-4(fp)
80007408:	10c4b03a 	or	r2,r2,r3
8000740c:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
80007410:	e0bffc04 	addi	r2,fp,-16
80007414:	100d883a 	mov	r6,r2
80007418:	0140a004 	movi	r5,640
8000741c:	e13ffa17 	ldw	r4,-24(fp)
80007420:	00071040 	call	80007104 <jesd_read>
80007424:	1007883a 	mov	r3,r2
80007428:	e0bfff17 	ldw	r2,-4(fp)
8000742c:	10c4b03a 	or	r2,r2,r3
80007430:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
80007434:	e0bffe04 	addi	r2,fp,-8
80007438:	100d883a 	mov	r6,r2
8000743c:	01404204 	movi	r5,264
80007440:	e13ffa17 	ldw	r4,-24(fp)
80007444:	00071040 	call	80007104 <jesd_read>
80007448:	1007883a 	mov	r3,r2
8000744c:	e0bfff17 	ldw	r2,-4(fp)
80007450:	10c4b03a 	or	r2,r2,r3
80007454:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
80007458:	e0bffb04 	addi	r2,fp,-20
8000745c:	100d883a 	mov	r6,r2
80007460:	01403204 	movi	r5,200
80007464:	e13ffa17 	ldw	r4,-24(fp)
80007468:	00071040 	call	80007104 <jesd_read>
8000746c:	1007883a 	mov	r3,r2
80007470:	e0bfff17 	ldw	r2,-4(fp)
80007474:	10c4b03a 	or	r2,r2,r3
80007478:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Rx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
8000747c:	e0bffd17 	ldw	r2,-12(fp)
80007480:	1080004c 	andi	r2,r2,1
	ad_printf("Rx link is %s\n",
80007484:	10000326 	beq	r2,zero,80007494 <axi_jesd204_rx_status_read+0xc0>
80007488:	00a000b4 	movhi	r2,32770
8000748c:	1098a604 	addi	r2,r2,25240
80007490:	00000206 	br	8000749c <axi_jesd204_rx_status_read+0xc8>
80007494:	00a000b4 	movhi	r2,32770
80007498:	1098a904 	addi	r2,r2,25252
8000749c:	100b883a 	mov	r5,r2
800074a0:	012000b4 	movhi	r4,32770
800074a4:	2118ab04 	addi	r4,r4,25260
800074a8:	0010d740 	call	80010d74 <printf>

	if (clock_ratio == 0) {
800074ac:	e0bffb17 	ldw	r2,-20(fp)
800074b0:	1000041e 	bne	r2,zero,800074c4 <axi_jesd204_rx_status_read+0xf0>
		ad_printf("Measured Link Clock: off\n");
800074b4:	012000b4 	movhi	r4,32770
800074b8:	2118af04 	addi	r4,r4,25276
800074bc:	0010e980 	call	80010e98 <puts>
800074c0:	00000806 	br	800074e4 <axi_jesd204_rx_status_read+0x110>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 100 + 0x7fff) >> 16);
800074c4:	e0bffb17 	ldw	r2,-20(fp)
800074c8:	10801924 	muli	r2,r2,100
800074cc:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
800074d0:	1004d43a 	srli	r2,r2,16
800074d4:	100b883a 	mov	r5,r2
800074d8:	012000b4 	movhi	r4,32770
800074dc:	2118b604 	addi	r4,r4,25304
800074e0:	0010d740 	call	80010d74 <printf>
	}

	if (!link_disabled) {
800074e4:	e0bffd17 	ldw	r2,-12(fp)
800074e8:	1000261e 	bne	r2,zero,80007584 <axi_jesd204_rx_status_read+0x1b0>
		ad_printf("Link status: %s\n",
			axi_jesd204_rx_link_status_label[link_status & 0x3]);
800074ec:	e0bffc17 	ldw	r2,-16(fp)
800074f0:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
800074f4:	100690ba 	slli	r3,r2,2
800074f8:	00a000b4 	movhi	r2,32770
800074fc:	1885883a 	add	r2,r3,r2
80007500:	109c1417 	ldw	r2,28752(r2)
80007504:	100b883a 	mov	r5,r2
80007508:	012000b4 	movhi	r4,32770
8000750c:	2118be04 	addi	r4,r4,25336
80007510:	0010d740 	call	80010d74 <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
80007514:	e0bffe17 	ldw	r2,-8(fp)
80007518:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
8000751c:	10000326 	beq	r2,zero,8000752c <axi_jesd204_rx_status_read+0x158>
80007520:	00a000b4 	movhi	r2,32770
80007524:	1098c304 	addi	r2,r2,25356
80007528:	00000206 	br	80007534 <axi_jesd204_rx_status_read+0x160>
8000752c:	00a000b4 	movhi	r2,32770
80007530:	1098c404 	addi	r2,r2,25360
80007534:	100b883a 	mov	r5,r2
80007538:	012000b4 	movhi	r4,32770
8000753c:	2118c504 	addi	r4,r4,25364
80007540:	0010d740 	call	80010d74 <printf>
		if (sysref_status & 2) {
80007544:	e0bffe17 	ldw	r2,-8(fp)
80007548:	1080008c 	andi	r2,r2,2
8000754c:	10001926 	beq	r2,zero,800075b4 <axi_jesd204_rx_status_read+0x1e0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
80007550:	e0bffe17 	ldw	r2,-8(fp)
80007554:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
80007558:	10000326 	beq	r2,zero,80007568 <axi_jesd204_rx_status_read+0x194>
8000755c:	00a000b4 	movhi	r2,32770
80007560:	1098c304 	addi	r2,r2,25356
80007564:	00000206 	br	80007570 <axi_jesd204_rx_status_read+0x19c>
80007568:	00a000b4 	movhi	r2,32770
8000756c:	1098c404 	addi	r2,r2,25360
80007570:	100b883a 	mov	r5,r2
80007574:	012000b4 	movhi	r4,32770
80007578:	2118cb04 	addi	r4,r4,25388
8000757c:	0010d740 	call	80010d74 <printf>
80007580:	00000c06 	br	800075b4 <axi_jesd204_rx_status_read+0x1e0>
		}

	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
80007584:	e0bffd17 	ldw	r2,-12(fp)
80007588:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
8000758c:	10000326 	beq	r2,zero,8000759c <axi_jesd204_rx_status_read+0x1c8>
80007590:	00a000b4 	movhi	r2,32770
80007594:	1098d104 	addi	r2,r2,25412
80007598:	00000206 	br	800075a4 <axi_jesd204_rx_status_read+0x1d0>
8000759c:	00a000b4 	movhi	r2,32770
800075a0:	1098d404 	addi	r2,r2,25424
800075a4:	100b883a 	mov	r5,r2
800075a8:	012000b4 	movhi	r4,32770
800075ac:	2118d704 	addi	r4,r4,25436
800075b0:	0010d740 	call	80010d74 <printf>
	}

	return ret;
800075b4:	e0bfff17 	ldw	r2,-4(fp)
}
800075b8:	e037883a 	mov	sp,fp
800075bc:	dfc00117 	ldw	ra,4(sp)
800075c0:	df000017 	ldw	fp,0(sp)
800075c4:	dec00204 	addi	sp,sp,8
800075c8:	f800283a 	ret

800075cc <axi_jesd204_tx_status_read>:

/***************************************************************************//**
* @brief axi_jesd204_tx_status_read
*******************************************************************************/
int32_t axi_jesd204_tx_status_read(jesd_core *jesd)
{
800075cc:	defff804 	addi	sp,sp,-32
800075d0:	dfc00715 	stw	ra,28(sp)
800075d4:	df000615 	stw	fp,24(sp)
800075d8:	df000604 	addi	fp,sp,24
800075dc:	e13ffa15 	stw	r4,-24(fp)
	uint32_t sysref_status;
	uint32_t link_disabled;
	uint32_t link_status;
	uint32_t clock_ratio;
	int32_t ret = 0;
800075e0:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_REG_LINK_STATE, &link_disabled);
800075e4:	e0bffd04 	addi	r2,fp,-12
800075e8:	100d883a 	mov	r6,r2
800075ec:	01403104 	movi	r5,196
800075f0:	e13ffa17 	ldw	r4,-24(fp)
800075f4:	00071040 	call	80007104 <jesd_read>
800075f8:	1007883a 	mov	r3,r2
800075fc:	e0bfff17 	ldw	r2,-4(fp)
80007600:	10c4b03a 	or	r2,r2,r3
80007604:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_STATUS, &link_status);
80007608:	e0bffc04 	addi	r2,fp,-16
8000760c:	100d883a 	mov	r6,r2
80007610:	0140a004 	movi	r5,640
80007614:	e13ffa17 	ldw	r4,-24(fp)
80007618:	00071040 	call	80007104 <jesd_read>
8000761c:	1007883a 	mov	r3,r2
80007620:	e0bfff17 	ldw	r2,-4(fp)
80007624:	10c4b03a 	or	r2,r2,r3
80007628:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_SYSREF_STATUS, &sysref_status);
8000762c:	e0bffe04 	addi	r2,fp,-8
80007630:	100d883a 	mov	r6,r2
80007634:	01404204 	movi	r5,264
80007638:	e13ffa17 	ldw	r4,-24(fp)
8000763c:	00071040 	call	80007104 <jesd_read>
80007640:	1007883a 	mov	r3,r2
80007644:	e0bfff17 	ldw	r2,-4(fp)
80007648:	10c4b03a 	or	r2,r2,r3
8000764c:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_REG_LINK_CLK_RATIO, &clock_ratio);
80007650:	e0bffb04 	addi	r2,fp,-20
80007654:	100d883a 	mov	r6,r2
80007658:	01403204 	movi	r5,200
8000765c:	e13ffa17 	ldw	r4,-24(fp)
80007660:	00071040 	call	80007104 <jesd_read>
80007664:	1007883a 	mov	r3,r2
80007668:	e0bfff17 	ldw	r2,-4(fp)
8000766c:	10c4b03a 	or	r2,r2,r3
80007670:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("Tx link is %s\n",
		(link_disabled & 0x1) ? "disabled" : "enabled");
80007674:	e0bffd17 	ldw	r2,-12(fp)
80007678:	1080004c 	andi	r2,r2,1
	ad_printf("Tx link is %s\n",
8000767c:	10000326 	beq	r2,zero,8000768c <axi_jesd204_tx_status_read+0xc0>
80007680:	00a000b4 	movhi	r2,32770
80007684:	1098a604 	addi	r2,r2,25240
80007688:	00000206 	br	80007694 <axi_jesd204_tx_status_read+0xc8>
8000768c:	00a000b4 	movhi	r2,32770
80007690:	1098a904 	addi	r2,r2,25252
80007694:	100b883a 	mov	r5,r2
80007698:	012000b4 	movhi	r4,32770
8000769c:	2118dd04 	addi	r4,r4,25460
800076a0:	0010d740 	call	80010d74 <printf>

	if (clock_ratio == 0) {
800076a4:	e0bffb17 	ldw	r2,-20(fp)
800076a8:	1000041e 	bne	r2,zero,800076bc <axi_jesd204_tx_status_read+0xf0>
		ad_printf("Measured Link Clock: off\n");
800076ac:	012000b4 	movhi	r4,32770
800076b0:	2118af04 	addi	r4,r4,25276
800076b4:	0010e980 	call	80010e98 <puts>
800076b8:	00000806 	br	800076dc <axi_jesd204_tx_status_read+0x110>
	} else {
		ad_printf("Measured Link Clock: %d MHz\n",
			(clock_ratio * 100 + 0x7fff) >> 16);;
800076bc:	e0bffb17 	ldw	r2,-20(fp)
800076c0:	10801924 	muli	r2,r2,100
800076c4:	109fffc4 	addi	r2,r2,32767
		ad_printf("Measured Link Clock: %d MHz\n",
800076c8:	1004d43a 	srli	r2,r2,16
800076cc:	100b883a 	mov	r5,r2
800076d0:	012000b4 	movhi	r4,32770
800076d4:	2118b604 	addi	r4,r4,25304
800076d8:	0010d740 	call	80010d74 <printf>
	}

	if (!link_disabled) {
800076dc:	e0bffd17 	ldw	r2,-12(fp)
800076e0:	1000261e 	bne	r2,zero,8000777c <axi_jesd204_tx_status_read+0x1b0>
		ad_printf("Link status: %s\n",
			axi_jesd204_tx_link_status_label[link_status & 0x3]);
800076e4:	e0bffc17 	ldw	r2,-16(fp)
800076e8:	108000cc 	andi	r2,r2,3
		ad_printf("Link status: %s\n",
800076ec:	100690ba 	slli	r3,r2,2
800076f0:	00a000b4 	movhi	r2,32770
800076f4:	1885883a 	add	r2,r3,r2
800076f8:	109c1817 	ldw	r2,28768(r2)
800076fc:	100b883a 	mov	r5,r2
80007700:	012000b4 	movhi	r4,32770
80007704:	2118be04 	addi	r4,r4,25336
80007708:	0010d740 	call	80010d74 <printf>
		ad_printf("SYSREF captured: %s\n",
			(sysref_status & 1) ? "Yes" : "No");
8000770c:	e0bffe17 	ldw	r2,-8(fp)
80007710:	1080004c 	andi	r2,r2,1
		ad_printf("SYSREF captured: %s\n",
80007714:	10000326 	beq	r2,zero,80007724 <axi_jesd204_tx_status_read+0x158>
80007718:	00a000b4 	movhi	r2,32770
8000771c:	1098c304 	addi	r2,r2,25356
80007720:	00000206 	br	8000772c <axi_jesd204_tx_status_read+0x160>
80007724:	00a000b4 	movhi	r2,32770
80007728:	1098c404 	addi	r2,r2,25360
8000772c:	100b883a 	mov	r5,r2
80007730:	012000b4 	movhi	r4,32770
80007734:	2118c504 	addi	r4,r4,25364
80007738:	0010d740 	call	80010d74 <printf>
		if (sysref_status & 2) {
8000773c:	e0bffe17 	ldw	r2,-8(fp)
80007740:	1080008c 	andi	r2,r2,2
80007744:	10001926 	beq	r2,zero,800077ac <axi_jesd204_tx_status_read+0x1e0>
			ad_printf("SYSREF alignment ERROR\n",
				(sysref_status & 2) ? "Yes" : "No");
80007748:	e0bffe17 	ldw	r2,-8(fp)
8000774c:	1080008c 	andi	r2,r2,2
			ad_printf("SYSREF alignment ERROR\n",
80007750:	10000326 	beq	r2,zero,80007760 <axi_jesd204_tx_status_read+0x194>
80007754:	00a000b4 	movhi	r2,32770
80007758:	1098c304 	addi	r2,r2,25356
8000775c:	00000206 	br	80007768 <axi_jesd204_tx_status_read+0x19c>
80007760:	00a000b4 	movhi	r2,32770
80007764:	1098c404 	addi	r2,r2,25360
80007768:	100b883a 	mov	r5,r2
8000776c:	012000b4 	movhi	r4,32770
80007770:	2118cb04 	addi	r4,r4,25388
80007774:	0010d740 	call	80010d74 <printf>
80007778:	00000c06 	br	800077ac <axi_jesd204_tx_status_read+0x1e0>
		}
	} else {
		ad_printf("External reset is %s\n",
			(link_disabled & 0x2) ? "asserted" : "deasserted");
8000777c:	e0bffd17 	ldw	r2,-12(fp)
80007780:	1080008c 	andi	r2,r2,2
		ad_printf("External reset is %s\n",
80007784:	10000326 	beq	r2,zero,80007794 <axi_jesd204_tx_status_read+0x1c8>
80007788:	00a000b4 	movhi	r2,32770
8000778c:	1098d104 	addi	r2,r2,25412
80007790:	00000206 	br	8000779c <axi_jesd204_tx_status_read+0x1d0>
80007794:	00a000b4 	movhi	r2,32770
80007798:	1098d404 	addi	r2,r2,25424
8000779c:	100b883a 	mov	r5,r2
800077a0:	012000b4 	movhi	r4,32770
800077a4:	2118d704 	addi	r4,r4,25436
800077a8:	0010d740 	call	80010d74 <printf>
	}

	return ret;
800077ac:	e0bfff17 	ldw	r2,-4(fp)
}
800077b0:	e037883a 	mov	sp,fp
800077b4:	dfc00117 	ldw	ra,4(sp)
800077b8:	df000017 	ldw	fp,0(sp)
800077bc:	dec00204 	addi	sp,sp,8
800077c0:	f800283a 	ret

800077c4 <axi_jesd204_rx_laneinfo_read>:
/***************************************************************************//**
* @brief axi_jesd204_rx_laneinfo_read
*******************************************************************************/
/* FIXME: This violates every single sysfs ABI recommendation */
int32_t axi_jesd204_rx_laneinfo_read(jesd_core *jesd, uint32_t lane)
{
800077c4:	defff004 	addi	sp,sp,-64
800077c8:	dfc00f15 	stw	ra,60(sp)
800077cc:	df000e15 	stw	fp,56(sp)
800077d0:	df000e04 	addi	fp,sp,56
800077d4:	e13ff715 	stw	r4,-36(fp)
800077d8:	e17ff615 	stw	r5,-40(fp)
	uint32_t lane_status;
	uint32_t lane_latency;
	uint32_t octets_per_multiframe;
	uint32_t val[4];
	int32_t ret = 0;
800077dc:	e03fff15 	stw	zero,-4(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_STATUS(lane), &lane_status);
800077e0:	e0bff617 	ldw	r2,-40(fp)
800077e4:	10800604 	addi	r2,r2,24
800077e8:	1004917a 	slli	r2,r2,5
800077ec:	e0fffe04 	addi	r3,fp,-8
800077f0:	180d883a 	mov	r6,r3
800077f4:	100b883a 	mov	r5,r2
800077f8:	e13ff717 	ldw	r4,-36(fp)
800077fc:	00071040 	call	80007104 <jesd_read>
80007800:	1007883a 	mov	r3,r2
80007804:	e0bfff17 	ldw	r2,-4(fp)
80007808:	10c4b03a 	or	r2,r2,r3
8000780c:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("CGS state: %s\n",
		axi_jesd204_rx_lane_status_label[lane_status & 0x3]);
80007810:	e0bffe17 	ldw	r2,-8(fp)
80007814:	108000cc 	andi	r2,r2,3
	ad_printf("CGS state: %s\n",
80007818:	100690ba 	slli	r3,r2,2
8000781c:	00a000b4 	movhi	r2,32770
80007820:	1885883a 	add	r2,r3,r2
80007824:	109c1c17 	ldw	r2,28784(r2)
80007828:	100b883a 	mov	r5,r2
8000782c:	012000b4 	movhi	r4,32770
80007830:	2118e104 	addi	r4,r4,25476
80007834:	0010d740 	call	80010d74 <printf>

	ad_printf("Initial Frame Synchronization: %s\n",
				(lane_status & BIT(4)) ? "Yes" : "No");
80007838:	e0bffe17 	ldw	r2,-8(fp)
8000783c:	1080040c 	andi	r2,r2,16
	ad_printf("Initial Frame Synchronization: %s\n",
80007840:	10000326 	beq	r2,zero,80007850 <axi_jesd204_rx_laneinfo_read+0x8c>
80007844:	00a000b4 	movhi	r2,32770
80007848:	1098c304 	addi	r2,r2,25356
8000784c:	00000206 	br	80007858 <axi_jesd204_rx_laneinfo_read+0x94>
80007850:	00a000b4 	movhi	r2,32770
80007854:	1098c404 	addi	r2,r2,25360
80007858:	100b883a 	mov	r5,r2
8000785c:	012000b4 	movhi	r4,32770
80007860:	2118e504 	addi	r4,r4,25492
80007864:	0010d740 	call	80010d74 <printf>

	if (!(lane_status & BIT(4)))
80007868:	e0bffe17 	ldw	r2,-8(fp)
8000786c:	1080040c 	andi	r2,r2,16
80007870:	1000021e 	bne	r2,zero,8000787c <axi_jesd204_rx_laneinfo_read+0xb8>
		return ret;
80007874:	e0bfff17 	ldw	r2,-4(fp)
80007878:	0000bd06 	br	80007b70 <axi_jesd204_rx_laneinfo_read+0x3ac>

	ret |= jesd_read(jesd, JESD204_REG_LINK_CONF0, &octets_per_multiframe);
8000787c:	e0bffc04 	addi	r2,fp,-16
80007880:	100d883a 	mov	r6,r2
80007884:	01408404 	movi	r5,528
80007888:	e13ff717 	ldw	r4,-36(fp)
8000788c:	00071040 	call	80007104 <jesd_read>
80007890:	1007883a 	mov	r3,r2
80007894:	e0bfff17 	ldw	r2,-4(fp)
80007898:	10c4b03a 	or	r2,r2,r3
8000789c:	e0bfff15 	stw	r2,-4(fp)
	octets_per_multiframe &= 0xffff;
800078a0:	e0bffc17 	ldw	r2,-16(fp)
800078a4:	10bfffcc 	andi	r2,r2,65535
800078a8:	e0bffc15 	stw	r2,-16(fp)
	octets_per_multiframe += 1;
800078ac:	e0bffc17 	ldw	r2,-16(fp)
800078b0:	10800044 	addi	r2,r2,1
800078b4:	e0bffc15 	stw	r2,-16(fp)

	ret |= jesd_read(jesd, JESD204_RX_REG_LANE_LATENCY(lane), &lane_latency);
800078b8:	e0bff617 	ldw	r2,-40(fp)
800078bc:	1004917a 	slli	r2,r2,5
800078c0:	1080c104 	addi	r2,r2,772
800078c4:	e0fffd04 	addi	r3,fp,-12
800078c8:	180d883a 	mov	r6,r3
800078cc:	100b883a 	mov	r5,r2
800078d0:	e13ff717 	ldw	r4,-36(fp)
800078d4:	00071040 	call	80007104 <jesd_read>
800078d8:	1007883a 	mov	r3,r2
800078dc:	e0bfff17 	ldw	r2,-4(fp)
800078e0:	10c4b03a 	or	r2,r2,r3
800078e4:	e0bfff15 	stw	r2,-4(fp)
	ad_printf("Lane Latency: %d Multi-frames and %d Octets\n",
800078e8:	e0fffd17 	ldw	r3,-12(fp)
800078ec:	e0bffc17 	ldw	r2,-16(fp)
800078f0:	188b203a 	divu	r5,r3,r2
800078f4:	e0bffd17 	ldw	r2,-12(fp)
800078f8:	e0fffc17 	ldw	r3,-16(fp)
800078fc:	10c9203a 	divu	r4,r2,r3
80007900:	20c7383a 	mul	r3,r4,r3
80007904:	10c5c83a 	sub	r2,r2,r3
80007908:	100d883a 	mov	r6,r2
8000790c:	012000b4 	movhi	r4,32770
80007910:	2118ee04 	addi	r4,r4,25528
80007914:	0010d740 	call	80010d74 <printf>
			lane_latency / octets_per_multiframe,
			lane_latency % octets_per_multiframe);

	ad_printf("Initial Lane Alignment Sequence: %s\n",
				(lane_status & BIT(5)) ? "Yes" : "No");
80007918:	e0bffe17 	ldw	r2,-8(fp)
8000791c:	1080080c 	andi	r2,r2,32
	ad_printf("Initial Lane Alignment Sequence: %s\n",
80007920:	10000326 	beq	r2,zero,80007930 <axi_jesd204_rx_laneinfo_read+0x16c>
80007924:	00a000b4 	movhi	r2,32770
80007928:	1098c304 	addi	r2,r2,25356
8000792c:	00000206 	br	80007938 <axi_jesd204_rx_laneinfo_read+0x174>
80007930:	00a000b4 	movhi	r2,32770
80007934:	1098c404 	addi	r2,r2,25360
80007938:	100b883a 	mov	r5,r2
8000793c:	012000b4 	movhi	r4,32770
80007940:	2118fa04 	addi	r4,r4,25576
80007944:	0010d740 	call	80010d74 <printf>

	if (!(lane_status & BIT(5)))
80007948:	e0bffe17 	ldw	r2,-8(fp)
8000794c:	1080080c 	andi	r2,r2,32
80007950:	1000021e 	bne	r2,zero,8000795c <axi_jesd204_rx_laneinfo_read+0x198>
		return ret;
80007954:	e0bfff17 	ldw	r2,-4(fp)
80007958:	00008506 	br	80007b70 <axi_jesd204_rx_laneinfo_read+0x3ac>

	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 0), &val[0]);
8000795c:	e0bff617 	ldw	r2,-40(fp)
80007960:	1004917a 	slli	r2,r2,5
80007964:	1080c404 	addi	r2,r2,784
80007968:	e0fff804 	addi	r3,fp,-32
8000796c:	180d883a 	mov	r6,r3
80007970:	100b883a 	mov	r5,r2
80007974:	e13ff717 	ldw	r4,-36(fp)
80007978:	00071040 	call	80007104 <jesd_read>
8000797c:	1007883a 	mov	r3,r2
80007980:	e0bfff17 	ldw	r2,-4(fp)
80007984:	10c4b03a 	or	r2,r2,r3
80007988:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 1), &val[1]);
8000798c:	e0bff617 	ldw	r2,-40(fp)
80007990:	1004917a 	slli	r2,r2,5
80007994:	10c0c504 	addi	r3,r2,788
80007998:	e0bff804 	addi	r2,fp,-32
8000799c:	10800104 	addi	r2,r2,4
800079a0:	100d883a 	mov	r6,r2
800079a4:	180b883a 	mov	r5,r3
800079a8:	e13ff717 	ldw	r4,-36(fp)
800079ac:	00071040 	call	80007104 <jesd_read>
800079b0:	1007883a 	mov	r3,r2
800079b4:	e0bfff17 	ldw	r2,-4(fp)
800079b8:	10c4b03a 	or	r2,r2,r3
800079bc:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 2), &val[2]);
800079c0:	e0bff617 	ldw	r2,-40(fp)
800079c4:	1004917a 	slli	r2,r2,5
800079c8:	10c0c604 	addi	r3,r2,792
800079cc:	e0bff804 	addi	r2,fp,-32
800079d0:	10800204 	addi	r2,r2,8
800079d4:	100d883a 	mov	r6,r2
800079d8:	180b883a 	mov	r5,r3
800079dc:	e13ff717 	ldw	r4,-36(fp)
800079e0:	00071040 	call	80007104 <jesd_read>
800079e4:	1007883a 	mov	r3,r2
800079e8:	e0bfff17 	ldw	r2,-4(fp)
800079ec:	10c4b03a 	or	r2,r2,r3
800079f0:	e0bfff15 	stw	r2,-4(fp)
	ret |= jesd_read(jesd, JESD204_RX_REG_ILAS(lane, 3), &val[3]);
800079f4:	e0bff617 	ldw	r2,-40(fp)
800079f8:	1004917a 	slli	r2,r2,5
800079fc:	10c0c704 	addi	r3,r2,796
80007a00:	e0bff804 	addi	r2,fp,-32
80007a04:	10800304 	addi	r2,r2,12
80007a08:	100d883a 	mov	r6,r2
80007a0c:	180b883a 	mov	r5,r3
80007a10:	e13ff717 	ldw	r4,-36(fp)
80007a14:	00071040 	call	80007104 <jesd_read>
80007a18:	1007883a 	mov	r3,r2
80007a1c:	e0bfff17 	ldw	r2,-4(fp)
80007a20:	10c4b03a 	or	r2,r2,r3
80007a24:	e0bfff15 	stw	r2,-4(fp)

	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
		(val[0] >> 16) & 0xff,
80007a28:	e0bff817 	ldw	r2,-32(fp)
80007a2c:	1004d43a 	srli	r2,r2,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a30:	11403fcc 	andi	r5,r2,255
		(val[0] >> 24) & 0xf,
80007a34:	e0bff817 	ldw	r2,-32(fp)
80007a38:	1004d63a 	srli	r2,r2,24
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a3c:	118003cc 	andi	r6,r2,15
		(val[1] >> 0) & 0x1f,
80007a40:	e0bff917 	ldw	r2,-28(fp)
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a44:	11c007cc 	andi	r7,r2,31
		(val[1] >> 8) & 0x1f,
80007a48:	e0bff917 	ldw	r2,-28(fp)
80007a4c:	1004d23a 	srli	r2,r2,8
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a50:	108007cc 	andi	r2,r2,31
		(val[1] >> 15) & 0x1,
80007a54:	e0fff917 	ldw	r3,-28(fp)
80007a58:	1806d3fa 	srli	r3,r3,15
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a5c:	18c0004c 	andi	r3,r3,1
		(val[1] >> 16) & 0xff
80007a60:	e13ff917 	ldw	r4,-28(fp)
80007a64:	2008d43a 	srli	r4,r4,16
	ad_printf("DID: %d, BID: %d, LID: %d, L: %d, SCR: %d, F: %d\n",
80007a68:	21003fcc 	andi	r4,r4,255
80007a6c:	d9000215 	stw	r4,8(sp)
80007a70:	d8c00115 	stw	r3,4(sp)
80007a74:	d8800015 	stw	r2,0(sp)
80007a78:	012000b4 	movhi	r4,32770
80007a7c:	21190404 	addi	r4,r4,25616
80007a80:	0010d740 	call	80010d74 <printf>
	);

	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
		(val[1] >> 24) & 0x1f,
80007a84:	e0bff917 	ldw	r2,-28(fp)
80007a88:	1004d63a 	srli	r2,r2,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007a8c:	120007cc 	andi	r8,r2,31
		(val[2] >> 0) & 0xff,
80007a90:	e0bffa17 	ldw	r2,-24(fp)
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007a94:	11803fcc 	andi	r6,r2,255
		(val[2] >> 8) & 0x1f,
80007a98:	e0bffa17 	ldw	r2,-24(fp)
80007a9c:	1004d23a 	srli	r2,r2,8
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007aa0:	11c007cc 	andi	r7,r2,31
		(val[2] >> 14) & 0x3,
80007aa4:	e0bffa17 	ldw	r2,-24(fp)
80007aa8:	1004d3ba 	srli	r2,r2,14
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007aac:	108000cc 	andi	r2,r2,3
		(val[2] >> 16) & 0x1f,
80007ab0:	e0fffa17 	ldw	r3,-24(fp)
80007ab4:	1806d43a 	srli	r3,r3,16
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007ab8:	18c007cc 	andi	r3,r3,31
		(val[2] >> 24) & 0x1f,
80007abc:	e13ffa17 	ldw	r4,-24(fp)
80007ac0:	2008d63a 	srli	r4,r4,24
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007ac4:	210007cc 	andi	r4,r4,31
		(val[3] >> 7) & 0x1
80007ac8:	e17ffb17 	ldw	r5,-20(fp)
80007acc:	280ad1fa 	srli	r5,r5,7
	ad_printf("K: %d, M: %d, N: %d, CS: %d, N': %d, S: %d, HD: %d\n",
80007ad0:	2940004c 	andi	r5,r5,1
80007ad4:	d9400315 	stw	r5,12(sp)
80007ad8:	d9000215 	stw	r4,8(sp)
80007adc:	d8c00115 	stw	r3,4(sp)
80007ae0:	d8800015 	stw	r2,0(sp)
80007ae4:	400b883a 	mov	r5,r8
80007ae8:	012000b4 	movhi	r4,32770
80007aec:	21191104 	addi	r4,r4,25668
80007af0:	0010d740 	call	80010d74 <printf>
	);

	ad_printf("FCHK: 0x%X, CF: %d\n",
		(val[3] >> 24) & 0xff,
80007af4:	e0bffb17 	ldw	r2,-20(fp)
80007af8:	1006d63a 	srli	r3,r2,24
		(val[3] >> 0) & 0x1f
80007afc:	e0bffb17 	ldw	r2,-20(fp)
	ad_printf("FCHK: 0x%X, CF: %d\n",
80007b00:	108007cc 	andi	r2,r2,31
80007b04:	100d883a 	mov	r6,r2
80007b08:	180b883a 	mov	r5,r3
80007b0c:	012000b4 	movhi	r4,32770
80007b10:	21191e04 	addi	r4,r4,25720
80007b14:	0010d740 	call	80010d74 <printf>
	);

	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
		(val[0] >> 28) & 0xff,
80007b18:	e0bff817 	ldw	r2,-32(fp)
80007b1c:	1008d73a 	srli	r4,r2,28
		(val[1] >> 5) & 0x1,
80007b20:	e0bff917 	ldw	r2,-28(fp)
80007b24:	1004d17a 	srli	r2,r2,5
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
80007b28:	1140004c 	andi	r5,r2,1
		(val[1] >> 6) & 0x1,
80007b2c:	e0bff917 	ldw	r2,-28(fp)
80007b30:	1004d1ba 	srli	r2,r2,6
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
80007b34:	1180004c 	andi	r6,r2,1
		(val[2] >> 29) & 0x7,
80007b38:	e0bffa17 	ldw	r2,-24(fp)
80007b3c:	1004d77a 	srli	r2,r2,29
		(val[2] >> 21) & 0x7
80007b40:	e0fffa17 	ldw	r3,-24(fp)
80007b44:	1806d57a 	srli	r3,r3,21
	ad_printf("ADJCNT: %d, PHADJ: %d, ADJDIR: %d, JESDV: %d, SUBCLASS: %d\n",
80007b48:	18c001cc 	andi	r3,r3,7
80007b4c:	d8c00115 	stw	r3,4(sp)
80007b50:	d8800015 	stw	r2,0(sp)
80007b54:	300f883a 	mov	r7,r6
80007b58:	280d883a 	mov	r6,r5
80007b5c:	200b883a 	mov	r5,r4
80007b60:	012000b4 	movhi	r4,32770
80007b64:	21192304 	addi	r4,r4,25740
80007b68:	0010d740 	call	80010d74 <printf>
	);

	return ret;
80007b6c:	e0bfff17 	ldw	r2,-4(fp)
}
80007b70:	e037883a 	mov	sp,fp
80007b74:	dfc00117 	ldw	ra,4(sp)
80007b78:	df000017 	ldw	fp,0(sp)
80007b7c:	dec00204 	addi	sp,sp,8
80007b80:	f800283a 	ret

80007b84 <i2c_init>:
 * @param init_param - The structure that contains the I2C parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_init(i2c_desc **desc,
		 const i2c_init_param *param)
{
80007b84:	defffd04 	addi	sp,sp,-12
80007b88:	df000215 	stw	fp,8(sp)
80007b8c:	df000204 	addi	fp,sp,8
80007b90:	e13fff15 	stw	r4,-4(fp)
80007b94:	e17ffe15 	stw	r5,-8(fp)

	if (param->type) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
80007b98:	0005883a 	mov	r2,zero
}
80007b9c:	e037883a 	mov	sp,fp
80007ba0:	df000017 	ldw	fp,0(sp)
80007ba4:	dec00104 	addi	sp,sp,4
80007ba8:	f800283a 	ret

80007bac <i2c_remove>:
 * @brief Free the resources allocated by i2c_init().
 * @param desc - The I2C descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t i2c_remove(i2c_desc *desc)
{
80007bac:	defffe04 	addi	sp,sp,-8
80007bb0:	df000115 	stw	fp,4(sp)
80007bb4:	df000104 	addi	fp,sp,4
80007bb8:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
80007bbc:	0005883a 	mov	r2,zero
}
80007bc0:	e037883a 	mov	sp,fp
80007bc4:	df000017 	ldw	fp,0(sp)
80007bc8:	dec00104 	addi	sp,sp,4
80007bcc:	f800283a 	ret

80007bd0 <i2c_write>:
 */
int32_t i2c_write(i2c_desc *desc,
		  uint8_t *data,
		  uint8_t bytes_number,
		  uint8_t stop_bit)
{
80007bd0:	defffb04 	addi	sp,sp,-20
80007bd4:	df000415 	stw	fp,16(sp)
80007bd8:	df000404 	addi	fp,sp,16
80007bdc:	e13fff15 	stw	r4,-4(fp)
80007be0:	e17ffe15 	stw	r5,-8(fp)
80007be4:	3005883a 	mov	r2,r6
80007be8:	3807883a 	mov	r3,r7
80007bec:	e0bffd05 	stb	r2,-12(fp)
80007bf0:	1805883a 	mov	r2,r3
80007bf4:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
80007bf8:	0005883a 	mov	r2,zero
}
80007bfc:	e037883a 	mov	sp,fp
80007c00:	df000017 	ldw	fp,0(sp)
80007c04:	dec00104 	addi	sp,sp,4
80007c08:	f800283a 	ret

80007c0c <i2c_read>:
 */
int32_t i2c_read(i2c_desc *desc,
		 uint8_t *data,
		 uint8_t bytes_number,
		 uint8_t stop_bit)
{
80007c0c:	defffb04 	addi	sp,sp,-20
80007c10:	df000415 	stw	fp,16(sp)
80007c14:	df000404 	addi	fp,sp,16
80007c18:	e13fff15 	stw	r4,-4(fp)
80007c1c:	e17ffe15 	stw	r5,-8(fp)
80007c20:	3005883a 	mov	r2,r6
80007c24:	3807883a 	mov	r3,r7
80007c28:	e0bffd05 	stb	r2,-12(fp)
80007c2c:	1805883a 	mov	r2,r3
80007c30:	e0bffc05 	stb	r2,-16(fp)

	if (stop_bit) {
		// Unused variable - fix compiler warning
	}

	return SUCCESS;
80007c34:	0005883a 	mov	r2,zero
}
80007c38:	e037883a 	mov	sp,fp
80007c3c:	df000017 	ldw	fp,0(sp)
80007c40:	dec00104 	addi	sp,sp,4
80007c44:	f800283a 	ret

80007c48 <spi_init>:
 * @param init_param - The structure that contains the SPI parameters.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_init(spi_desc **desc,
		 const spi_init_param *param)
{
80007c48:	defffb04 	addi	sp,sp,-20
80007c4c:	dfc00415 	stw	ra,16(sp)
80007c50:	df000315 	stw	fp,12(sp)
80007c54:	df000304 	addi	fp,sp,12
80007c58:	e13ffe15 	stw	r4,-8(fp)
80007c5c:	e17ffd15 	stw	r5,-12(fp)
	spi_desc *dev;

	dev = (spi_desc *)malloc(sizeof(*dev));
80007c60:	01000704 	movi	r4,28
80007c64:	000fc840 	call	8000fc84 <malloc>
80007c68:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
80007c6c:	e0bfff17 	ldw	r2,-4(fp)
80007c70:	1000021e 	bne	r2,zero,80007c7c <spi_init+0x34>
		return FAILURE;
80007c74:	00bfffc4 	movi	r2,-1
80007c78:	00001f06 	br	80007cf8 <spi_init+0xb0>

	dev->type = param->type;
80007c7c:	e0bffd17 	ldw	r2,-12(fp)
80007c80:	10c00017 	ldw	r3,0(r2)
80007c84:	e0bfff17 	ldw	r2,-4(fp)
80007c88:	10c00015 	stw	r3,0(r2)
	dev->id = 0;
80007c8c:	e0bfff17 	ldw	r2,-4(fp)
80007c90:	10000115 	stw	zero,4(r2)

	switch(dev->type) {
80007c94:	e0bfff17 	ldw	r2,-4(fp)
80007c98:	10800017 	ldw	r2,0(r2)
80007c9c:	108000e0 	cmpeqi	r2,r2,3
80007ca0:	1000041e 	bne	r2,zero,80007cb4 <spi_init+0x6c>
#ifdef NIOS_II
	case NIOS_II_SPI:
		break;
#endif
	default:
		free(dev);
80007ca4:	e13fff17 	ldw	r4,-4(fp)
80007ca8:	000fc940 	call	8000fc94 <free>
		return FAILURE;
80007cac:	00bfffc4 	movi	r2,-1
80007cb0:	00001106 	br	80007cf8 <spi_init+0xb0>
		break;
80007cb4:	0001883a 	nop
	}

	dev->chip_select = param->chip_select;
80007cb8:	e0bffd17 	ldw	r2,-12(fp)
80007cbc:	10c00103 	ldbu	r3,4(r2)
80007cc0:	e0bfff17 	ldw	r2,-4(fp)
80007cc4:	10c00405 	stb	r3,16(r2)
	dev->cpha = param->cpha;
80007cc8:	e0bffd17 	ldw	r2,-12(fp)
80007ccc:	10c00217 	ldw	r3,8(r2)
80007cd0:	e0bfff17 	ldw	r2,-4(fp)
80007cd4:	10c00515 	stw	r3,20(r2)
	dev->cpol = param->cpol;
80007cd8:	e0bffd17 	ldw	r2,-12(fp)
80007cdc:	10c00317 	ldw	r3,12(r2)
80007ce0:	e0bfff17 	ldw	r2,-4(fp)
80007ce4:	10c00615 	stw	r3,24(r2)
		free(dev);
		return FAILURE;
	}
#endif

	*desc = dev;
80007ce8:	e0bffe17 	ldw	r2,-8(fp)
80007cec:	e0ffff17 	ldw	r3,-4(fp)
80007cf0:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
80007cf4:	0005883a 	mov	r2,zero
}
80007cf8:	e037883a 	mov	sp,fp
80007cfc:	dfc00117 	ldw	ra,4(sp)
80007d00:	df000017 	ldw	fp,0(sp)
80007d04:	dec00204 	addi	sp,sp,8
80007d08:	f800283a 	ret

80007d0c <spi_remove>:
 * @brief Free the resources allocated by spi_init().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_remove(spi_desc *desc)
{
80007d0c:	defffd04 	addi	sp,sp,-12
80007d10:	dfc00215 	stw	ra,8(sp)
80007d14:	df000115 	stw	fp,4(sp)
80007d18:	df000104 	addi	fp,sp,4
80007d1c:	e13fff15 	stw	r4,-4(fp)
	free(desc);
80007d20:	e13fff17 	ldw	r4,-4(fp)
80007d24:	000fc940 	call	8000fc94 <free>

	return SUCCESS;
80007d28:	0005883a 	mov	r2,zero
}
80007d2c:	e037883a 	mov	sp,fp
80007d30:	dfc00117 	ldw	ra,4(sp)
80007d34:	df000017 	ldw	fp,0(sp)
80007d38:	dec00204 	addi	sp,sp,8
80007d3c:	f800283a 	ret

80007d40 <spi_write_and_read>:
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t spi_write_and_read(spi_desc *desc,
			   uint8_t *data,
			   uint8_t bytes_number)
{
80007d40:	defffb04 	addi	sp,sp,-20
80007d44:	df000415 	stw	fp,16(sp)
80007d48:	df000404 	addi	fp,sp,16
80007d4c:	e13ffe15 	stw	r4,-8(fp)
80007d50:	e17ffd15 	stw	r5,-12(fp)
80007d54:	3005883a 	mov	r2,r6
80007d58:	e0bffc05 	stb	r2,-16(fp)

#ifdef NIOS_II

	uint32_t i;

	IOWR_32DIRECT(FMC_SPI_BASE, 0x0c, 0x400);
80007d5c:	00c10004 	movi	r3,1024
80007d60:	008000b4 	movhi	r2,2
80007d64:	10c40b35 	stwio	r3,4140(r2)
	IOWR_32DIRECT(FMC_SPI_BASE, 0x14, ~(desc->chip_select));
80007d68:	e0bffe17 	ldw	r2,-8(fp)
80007d6c:	10800403 	ldbu	r2,16(r2)
80007d70:	10803fcc 	andi	r2,r2,255
80007d74:	0086303a 	nor	r3,zero,r2
80007d78:	008000b4 	movhi	r2,2
80007d7c:	10c40d35 	stwio	r3,4148(r2)
	for (i = 0; i < bytes_number; i++) {
80007d80:	e03fff15 	stw	zero,-4(fp)
80007d84:	00001b06 	br	80007df4 <spi_write_and_read+0xb4>
		while ((IORD_32DIRECT(FMC_SPI_BASE, 0x08) & 0x40) == 0x00) {}
80007d88:	0001883a 	nop
80007d8c:	008000b4 	movhi	r2,2
80007d90:	10840a37 	ldwio	r2,4136(r2)
80007d94:	1080100c 	andi	r2,r2,64
80007d98:	103ffc26 	beq	r2,zero,80007d8c <_gp+0xfffd7018>
		IOWR_32DIRECT(FMC_SPI_BASE, 0x04, *(data + i));
80007d9c:	e0fffd17 	ldw	r3,-12(fp)
80007da0:	e0bfff17 	ldw	r2,-4(fp)
80007da4:	1885883a 	add	r2,r3,r2
80007da8:	10800003 	ldbu	r2,0(r2)
80007dac:	10c03fcc 	andi	r3,r2,255
80007db0:	008000b4 	movhi	r2,2
80007db4:	10c40935 	stwio	r3,4132(r2)
		while ((IORD_32DIRECT(FMC_SPI_BASE, 0x08) & 0x80) == 0x00) {}
80007db8:	0001883a 	nop
80007dbc:	008000b4 	movhi	r2,2
80007dc0:	10840a37 	ldwio	r2,4136(r2)
80007dc4:	1080200c 	andi	r2,r2,128
80007dc8:	103ffc26 	beq	r2,zero,80007dbc <_gp+0xfffd7048>
		*(data + i) = IORD_32DIRECT(FMC_SPI_BASE, 0x00);
80007dcc:	008000b4 	movhi	r2,2
80007dd0:	11040837 	ldwio	r4,4128(r2)
80007dd4:	e0fffd17 	ldw	r3,-12(fp)
80007dd8:	e0bfff17 	ldw	r2,-4(fp)
80007ddc:	1885883a 	add	r2,r3,r2
80007de0:	2007883a 	mov	r3,r4
80007de4:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < bytes_number; i++) {
80007de8:	e0bfff17 	ldw	r2,-4(fp)
80007dec:	10800044 	addi	r2,r2,1
80007df0:	e0bfff15 	stw	r2,-4(fp)
80007df4:	e0bffc03 	ldbu	r2,-16(fp)
80007df8:	e0ffff17 	ldw	r3,-4(fp)
80007dfc:	18bfe236 	bltu	r3,r2,80007d88 <_gp+0xfffd7014>
	}
	IOWR_32DIRECT(FMC_SPI_BASE, 0x14, 0x000);
80007e00:	0007883a 	mov	r3,zero
80007e04:	008000b4 	movhi	r2,2
80007e08:	10c40d35 	stwio	r3,4148(r2)
	IOWR_32DIRECT(FMC_SPI_BASE, 0x0c, 0x000);
80007e0c:	0007883a 	mov	r3,zero
80007e10:	008000b4 	movhi	r2,2
80007e14:	10c40b35 	stwio	r3,4140(r2)
	Xil_Out32((XPAR_SPI_0_BASEADDR + 0x60),
		  (0x186 | (desc->cpol<<3) | (desc->cpha<<4)));

#endif

	return SUCCESS;
80007e18:	0005883a 	mov	r2,zero
}
80007e1c:	e037883a 	mov	sp,fp
80007e20:	df000017 	ldw	fp,0(sp)
80007e24:	dec00104 	addi	sp,sp,4
80007e28:	f800283a 	ret

80007e2c <gpio_get>:
 * @param gpio_number - The number of the GPIO.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get(gpio_desc **desc,
		 uint8_t gpio_number)
{
80007e2c:	defffb04 	addi	sp,sp,-20
80007e30:	dfc00415 	stw	ra,16(sp)
80007e34:	df000315 	stw	fp,12(sp)
80007e38:	df000304 	addi	fp,sp,12
80007e3c:	e13ffe15 	stw	r4,-8(fp)
80007e40:	2805883a 	mov	r2,r5
80007e44:	e0bffd05 	stb	r2,-12(fp)
	gpio_desc *dev;

	if (gpio_number < 32)
80007e48:	e0bffd03 	ldbu	r2,-12(fp)
80007e4c:	10800828 	cmpgeui	r2,r2,32
80007e50:	1000021e 	bne	r2,zero,80007e5c <gpio_get+0x30>
		return FAILURE;
80007e54:	00bfffc4 	movi	r2,-1
80007e58:	00001306 	br	80007ea8 <gpio_get+0x7c>

	dev = (gpio_desc *)malloc(sizeof(*dev));
80007e5c:	01000304 	movi	r4,12
80007e60:	000fc840 	call	8000fc84 <malloc>
80007e64:	e0bfff15 	stw	r2,-4(fp)
	if (!dev)
80007e68:	e0bfff17 	ldw	r2,-4(fp)
80007e6c:	1000021e 	bne	r2,zero,80007e78 <gpio_get+0x4c>
		return FAILURE;
80007e70:	00bfffc4 	movi	r2,-1
80007e74:	00000c06 	br	80007ea8 <gpio_get+0x7c>

	dev->number = gpio_number;
80007e78:	e0bfff17 	ldw	r2,-4(fp)
80007e7c:	e0fffd03 	ldbu	r3,-12(fp)
80007e80:	10c00205 	stb	r3,8(r2)
	dev->id 	= 0;
80007e84:	e0bfff17 	ldw	r2,-4(fp)
80007e88:	10000115 	stw	zero,4(r2)
#endif
#ifdef ZYNQ_PSU
	dev->type = ZYNQ_PSU_GPIO;
#endif
#ifdef NIOS_II
	dev->type = NIOS_II_GPIO;
80007e8c:	e0bfff17 	ldw	r2,-4(fp)
80007e90:	00c000c4 	movi	r3,3
80007e94:	10c00015 	stw	r3,0(r2)
#endif
#ifdef MICROBLAZE
	dev->type = MICROBLAZE_GPIO;
#endif

	*desc = dev;
80007e98:	e0bffe17 	ldw	r2,-8(fp)
80007e9c:	e0ffff17 	ldw	r3,-4(fp)
80007ea0:	10c00015 	stw	r3,0(r2)

	return SUCCESS;
80007ea4:	0005883a 	mov	r2,zero
}
80007ea8:	e037883a 	mov	sp,fp
80007eac:	dfc00117 	ldw	ra,4(sp)
80007eb0:	df000017 	ldw	fp,0(sp)
80007eb4:	dec00204 	addi	sp,sp,8
80007eb8:	f800283a 	ret

80007ebc <gpio_remove>:
 * @brief Free the resources allocated by gpio_get().
 * @param desc - The SPI descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_remove(gpio_desc *desc)
{
80007ebc:	defffd04 	addi	sp,sp,-12
80007ec0:	dfc00215 	stw	ra,8(sp)
80007ec4:	df000115 	stw	fp,4(sp)
80007ec8:	df000104 	addi	fp,sp,4
80007ecc:	e13fff15 	stw	r4,-4(fp)
	free(desc);
80007ed0:	e13fff17 	ldw	r4,-4(fp)
80007ed4:	000fc940 	call	8000fc94 <free>

	return SUCCESS;
80007ed8:	0005883a 	mov	r2,zero
}
80007edc:	e037883a 	mov	sp,fp
80007ee0:	dfc00117 	ldw	ra,4(sp)
80007ee4:	df000017 	ldw	fp,0(sp)
80007ee8:	dec00204 	addi	sp,sp,8
80007eec:	f800283a 	ret

80007ef0 <gpio_direction_input>:
 * @brief Enable the input direction of the specified GPIO.
 * @param desc - The GPIO descriptor.
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_input(gpio_desc *desc)
{
80007ef0:	defffe04 	addi	sp,sp,-8
80007ef4:	df000115 	stw	fp,4(sp)
80007ef8:	df000104 	addi	fp,sp,4
80007efc:	e13fff15 	stw	r4,-4(fp)
	if (desc) {
		// Unused variable - fix compiler warning
	}

	return 0;
80007f00:	0005883a 	mov	r2,zero
}
80007f04:	e037883a 	mov	sp,fp
80007f08:	df000017 	ldw	fp,0(sp)
80007f0c:	dec00104 	addi	sp,sp,4
80007f10:	f800283a 	ret

80007f14 <gpio_direction_output>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_direction_output(gpio_desc *desc,
			      uint8_t value)
{
80007f14:	defffd04 	addi	sp,sp,-12
80007f18:	df000215 	stw	fp,8(sp)
80007f1c:	df000204 	addi	fp,sp,8
80007f20:	e13fff15 	stw	r4,-4(fp)
80007f24:	2805883a 	mov	r2,r5
80007f28:	e0bffe05 	stb	r2,-8(fp)

	if (value) {
		// Unused variable - fix compiler warning
	}

	return 0;
80007f2c:	0005883a 	mov	r2,zero
}
80007f30:	e037883a 	mov	sp,fp
80007f34:	df000017 	ldw	fp,0(sp)
80007f38:	dec00104 	addi	sp,sp,4
80007f3c:	f800283a 	ret

80007f40 <gpio_get_direction>:
 *                             GPIO_IN
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_direction(gpio_desc *desc,
			   uint8_t *direction)
{
80007f40:	defffd04 	addi	sp,sp,-12
80007f44:	df000215 	stw	fp,8(sp)
80007f48:	df000204 	addi	fp,sp,8
80007f4c:	e13fff15 	stw	r4,-4(fp)
80007f50:	e17ffe15 	stw	r5,-8(fp)

	if (direction) {
		// Unused variable - fix compiler warning
	}

	return 0;
80007f54:	0005883a 	mov	r2,zero
}
80007f58:	e037883a 	mov	sp,fp
80007f5c:	df000017 	ldw	fp,0(sp)
80007f60:	dec00104 	addi	sp,sp,4
80007f64:	f800283a 	ret

80007f68 <gpio_set_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_set_value(gpio_desc *desc,
		       uint8_t value)
{
80007f68:	defff904 	addi	sp,sp,-28
80007f6c:	df000615 	stw	fp,24(sp)
80007f70:	df000604 	addi	fp,sp,24
80007f74:	e13ffb15 	stw	r4,-20(fp)
80007f78:	2805883a 	mov	r2,r5
80007f7c:	e0bffa05 	stb	r2,-24(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	pstatus = -1;
80007f80:	00bfffc4 	movi	r2,-1
80007f84:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
80007f88:	e0bffb17 	ldw	r2,-20(fp)
80007f8c:	10800203 	ldbu	r2,8(r2)
80007f90:	10803fcc 	andi	r2,r2,255
80007f94:	10bff804 	addi	r2,r2,-32
80007f98:	e0bffe15 	stw	r2,-8(fp)
	pmask = 0x1 << ppos;
80007f9c:	00c00044 	movi	r3,1
80007fa0:	e0bffe17 	ldw	r2,-8(fp)
80007fa4:	1884983a 	sll	r2,r3,r2
80007fa8:	e0bffd15 	stw	r2,-12(fp)

	switch(desc->type) {
80007fac:	e0bffb17 	ldw	r2,-20(fp)
80007fb0:	10800017 	ldw	r2,0(r2)
80007fb4:	108000e0 	cmpeqi	r2,r2,3
80007fb8:	1000011e 	bne	r2,zero,80007fc0 <gpio_set_value+0x58>
			  ((pdata & ~pmask) | (value << ppos)));
		pstatus = 0;
		break;
#endif
	default:
		break;
80007fbc:	00001006 	br	80008000 <gpio_set_value+0x98>
		pdata = IORD_32DIRECT(FMC_GPIO_BASE, 0x0);
80007fc0:	008000b4 	movhi	r2,2
80007fc4:	10843037 	ldwio	r2,4288(r2)
80007fc8:	e0bffc15 	stw	r2,-16(fp)
		IOWR_32DIRECT(FMC_GPIO_BASE, 0x0, ((pdata & ~pmask) | (value << ppos)));
80007fcc:	e0bffd17 	ldw	r2,-12(fp)
80007fd0:	0086303a 	nor	r3,zero,r2
80007fd4:	e0bffc17 	ldw	r2,-16(fp)
80007fd8:	1884703a 	and	r2,r3,r2
80007fdc:	e13ffa03 	ldbu	r4,-24(fp)
80007fe0:	e0fffe17 	ldw	r3,-8(fp)
80007fe4:	20c6983a 	sll	r3,r4,r3
80007fe8:	10c4b03a 	or	r2,r2,r3
80007fec:	1007883a 	mov	r3,r2
80007ff0:	008000b4 	movhi	r2,2
80007ff4:	10c43035 	stwio	r3,4288(r2)
		pstatus = 0;
80007ff8:	e03fff15 	stw	zero,-4(fp)
		break;
80007ffc:	0001883a 	nop
	}

	return(pstatus);
80008000:	e0bfff17 	ldw	r2,-4(fp)
}
80008004:	e037883a 	mov	sp,fp
80008008:	df000017 	ldw	fp,0(sp)
8000800c:	dec00104 	addi	sp,sp,4
80008010:	f800283a 	ret

80008014 <gpio_get_value>:
 *                         GPIO_LOW
 * @return SUCCESS in case of success, FAILURE otherwise.
 */
int32_t gpio_get_value(gpio_desc *desc,
		       uint8_t *value)
{
80008014:	defffa04 	addi	sp,sp,-24
80008018:	df000515 	stw	fp,20(sp)
8000801c:	df000504 	addi	fp,sp,20
80008020:	e13ffc15 	stw	r4,-16(fp)
80008024:	e17ffb15 	stw	r5,-20(fp)
	uint32_t pdata;
#ifdef ZYNQ
	uint32_t pmask;
#endif

	pstatus = -1;
80008028:	00bfffc4 	movi	r2,-1
8000802c:	e0bfff15 	stw	r2,-4(fp)
	ppos = desc->number - 32;
80008030:	e0bffc17 	ldw	r2,-16(fp)
80008034:	10800203 	ldbu	r2,8(r2)
80008038:	10803fcc 	andi	r2,r2,255
8000803c:	10bff804 	addi	r2,r2,-32
80008040:	e0bffe15 	stw	r2,-8(fp)
#ifdef ZYNQ
	pmask = 0x1 << ppos;
#endif

	switch(desc->type) {
80008044:	e0bffc17 	ldw	r2,-16(fp)
80008048:	10800017 	ldw	r2,0(r2)
8000804c:	108000e0 	cmpeqi	r2,r2,3
80008050:	1000011e 	bne	r2,zero,80008058 <gpio_get_value+0x44>
		*value = (pdata >> ppos) & 0x1;
		pstatus = 0;
		break;
#endif
	default:
		break;
80008054:	00000c06 	br	80008088 <gpio_get_value+0x74>
	   pdata = IORD_32DIRECT(FMC_GPIO_BASE, 0x0);
80008058:	008000b4 	movhi	r2,2
8000805c:	10843037 	ldwio	r2,4288(r2)
80008060:	e0bffd15 	stw	r2,-12(fp)
		*value = (pdata >> ppos) & 0x1;
80008064:	e0fffd17 	ldw	r3,-12(fp)
80008068:	e0bffe17 	ldw	r2,-8(fp)
8000806c:	1884d83a 	srl	r2,r3,r2
80008070:	1080004c 	andi	r2,r2,1
80008074:	1007883a 	mov	r3,r2
80008078:	e0bffb17 	ldw	r2,-20(fp)
8000807c:	10c00005 	stb	r3,0(r2)
		pstatus = 0;
80008080:	e03fff15 	stw	zero,-4(fp)
		break;
80008084:	0001883a 	nop
	}

	return(pstatus);
80008088:	e0bfff17 	ldw	r2,-4(fp)
}
8000808c:	e037883a 	mov	sp,fp
80008090:	df000017 	ldw	fp,0(sp)
80008094:	dec00104 	addi	sp,sp,4
80008098:	f800283a 	ret

8000809c <ad_gpio_set_range>:
/***************************************************************************//**
 * @brief ad_gpio_set_range
 ******************************************************************************/

int32_t ad_gpio_set_range(uint8_t start_pin, uint8_t num_pins, uint8_t data)
{
8000809c:	defff804 	addi	sp,sp,-32
800080a0:	df000715 	stw	fp,28(sp)
800080a4:	df000704 	addi	fp,sp,28
800080a8:	2005883a 	mov	r2,r4
800080ac:	2809883a 	mov	r4,r5
800080b0:	3007883a 	mov	r3,r6
800080b4:	e0bffb05 	stb	r2,-20(fp)
800080b8:	2005883a 	mov	r2,r4
800080bc:	e0bffa05 	stb	r2,-24(fp)
800080c0:	1805883a 	mov	r2,r3
800080c4:	e0bff905 	stb	r2,-28(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
800080c8:	e0bffb03 	ldbu	r2,-20(fp)
800080cc:	10800828 	cmpgeui	r2,r2,32
800080d0:	1000021e 	bne	r2,zero,800080dc <ad_gpio_set_range+0x40>
		return(-1);
800080d4:	00bfffc4 	movi	r2,-1
800080d8:	00001c06 	br	8000814c <ad_gpio_set_range+0xb0>
	}

	pstatus = -1;
800080dc:	00bfffc4 	movi	r2,-1
800080e0:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
800080e4:	e0bffb03 	ldbu	r2,-20(fp)
800080e8:	10bff804 	addi	r2,r2,-32
800080ec:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
800080f0:	e0bffa03 	ldbu	r2,-24(fp)
800080f4:	00c00044 	movi	r3,1
800080f8:	1884983a 	sll	r2,r3,r2
800080fc:	10ffffc4 	addi	r3,r2,-1
80008100:	e0bffe17 	ldw	r2,-8(fp)
80008104:	1884983a 	sll	r2,r3,r2
80008108:	e0bffd15 	stw	r2,-12(fp)
	pstatus = 0;

#endif

#ifdef NIOS_II
	pdata = IORD_32DIRECT(FMC_GPIO_BASE, 0x0);
8000810c:	008000b4 	movhi	r2,2
80008110:	10843037 	ldwio	r2,4288(r2)
80008114:	e0bffc15 	stw	r2,-16(fp)
	IOWR_32DIRECT(FMC_GPIO_BASE, 0x0, ((pdata & ~pmask) | (data << ppos)));
80008118:	e0bffd17 	ldw	r2,-12(fp)
8000811c:	0086303a 	nor	r3,zero,r2
80008120:	e0bffc17 	ldw	r2,-16(fp)
80008124:	1884703a 	and	r2,r3,r2
80008128:	e13ff903 	ldbu	r4,-28(fp)
8000812c:	e0fffe17 	ldw	r3,-8(fp)
80008130:	20c6983a 	sll	r3,r4,r3
80008134:	10c4b03a 	or	r2,r2,r3
80008138:	1007883a 	mov	r3,r2
8000813c:	008000b4 	movhi	r2,2
80008140:	10c43035 	stwio	r3,4288(r2)
	pstatus = 0;
80008144:	e03fff15 	stw	zero,-4(fp)
		  ((pdata & ~pmask) | (data << ppos)));
	pstatus = 0;

#endif

	return(pstatus);
80008148:	e0bfff17 	ldw	r2,-4(fp)
}
8000814c:	e037883a 	mov	sp,fp
80008150:	df000017 	ldw	fp,0(sp)
80008154:	dec00104 	addi	sp,sp,4
80008158:	f800283a 	ret

8000815c <ad_gpio_get_range>:
/***************************************************************************//**
 * @brief ad_gpio_get_range
 ******************************************************************************/

int32_t ad_gpio_get_range(uint8_t start_pin, uint8_t num_pins, uint32_t *data)
{
8000815c:	defff804 	addi	sp,sp,-32
80008160:	df000715 	stw	fp,28(sp)
80008164:	df000704 	addi	fp,sp,28
80008168:	2005883a 	mov	r2,r4
8000816c:	2807883a 	mov	r3,r5
80008170:	e1bff915 	stw	r6,-28(fp)
80008174:	e0bffb05 	stb	r2,-20(fp)
80008178:	1805883a 	mov	r2,r3
8000817c:	e0bffa05 	stb	r2,-24(fp)
	int32_t pstatus;
	uint32_t ppos;
	uint32_t pdata;
	uint32_t pmask;

	if (start_pin < 32) {
80008180:	e0bffb03 	ldbu	r2,-20(fp)
80008184:	10800828 	cmpgeui	r2,r2,32
80008188:	1000021e 	bne	r2,zero,80008194 <ad_gpio_get_range+0x38>
		return(-1);
8000818c:	00bfffc4 	movi	r2,-1
80008190:	00001806 	br	800081f4 <ad_gpio_get_range+0x98>
	}

	pstatus = -1;
80008194:	00bfffc4 	movi	r2,-1
80008198:	e0bfff15 	stw	r2,-4(fp)
	ppos = start_pin - 32;
8000819c:	e0bffb03 	ldbu	r2,-20(fp)
800081a0:	10bff804 	addi	r2,r2,-32
800081a4:	e0bffe15 	stw	r2,-8(fp)
	pmask = ((1 << num_pins) - 1) << ppos;
800081a8:	e0bffa03 	ldbu	r2,-24(fp)
800081ac:	00c00044 	movi	r3,1
800081b0:	1884983a 	sll	r2,r3,r2
800081b4:	10ffffc4 	addi	r3,r2,-1
800081b8:	e0bffe17 	ldw	r2,-8(fp)
800081bc:	1884983a 	sll	r2,r3,r2
800081c0:	e0bffd15 	stw	r2,-12(fp)

#endif

#ifdef NIOS_II

	pdata = IORD_32DIRECT(FMC_GPIO_BASE, 0x0);
800081c4:	008000b4 	movhi	r2,2
800081c8:	10843037 	ldwio	r2,4288(r2)
800081cc:	e0bffc15 	stw	r2,-16(fp)
	*data = (pdata & pmask) >> ppos;
800081d0:	e0fffc17 	ldw	r3,-16(fp)
800081d4:	e0bffd17 	ldw	r2,-12(fp)
800081d8:	1886703a 	and	r3,r3,r2
800081dc:	e0bffe17 	ldw	r2,-8(fp)
800081e0:	1886d83a 	srl	r3,r3,r2
800081e4:	e0bff917 	ldw	r2,-28(fp)
800081e8:	10c00015 	stw	r3,0(r2)
	pstatus = 0;
800081ec:	e03fff15 	stw	zero,-4(fp)
	*data = (pdata & pmask) >> ppos;
	pstatus = 0;

#endif

	return(pstatus);
800081f0:	e0bfff17 	ldw	r2,-4(fp)
}
800081f4:	e037883a 	mov	sp,fp
800081f8:	df000017 	ldw	fp,0(sp)
800081fc:	dec00104 	addi	sp,sp,4
80008200:	f800283a 	ret

80008204 <do_div>:

/***************************************************************************//**
 * @brief do_div
 ******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
80008204:	defff904 	addi	sp,sp,-28
80008208:	dfc00615 	stw	ra,24(sp)
8000820c:	df000515 	stw	fp,20(sp)
80008210:	df000504 	addi	fp,sp,20
80008214:	e13ffd15 	stw	r4,-12(fp)
80008218:	e17ffb15 	stw	r5,-20(fp)
8000821c:	e1bffc15 	stw	r6,-16(fp)
	uint64_t mod = 0;
80008220:	e03ffe15 	stw	zero,-8(fp)
80008224:	e03fff15 	stw	zero,-4(fp)

	mod = *n % base;
80008228:	e13ffd17 	ldw	r4,-12(fp)
8000822c:	20800017 	ldw	r2,0(r4)
80008230:	20c00117 	ldw	r3,4(r4)
80008234:	e1bffb17 	ldw	r6,-20(fp)
80008238:	e1fffc17 	ldw	r7,-16(fp)
8000823c:	1009883a 	mov	r4,r2
80008240:	180b883a 	mov	r5,r3
80008244:	000cf340 	call	8000cf34 <__umoddi3>
80008248:	1009883a 	mov	r4,r2
8000824c:	180b883a 	mov	r5,r3
80008250:	e13ffe15 	stw	r4,-8(fp)
80008254:	e17fff15 	stw	r5,-4(fp)
	*n = *n / base;
80008258:	e13ffd17 	ldw	r4,-12(fp)
8000825c:	20800017 	ldw	r2,0(r4)
80008260:	20c00117 	ldw	r3,4(r4)
80008264:	e1bffb17 	ldw	r6,-20(fp)
80008268:	e1fffc17 	ldw	r7,-16(fp)
8000826c:	1009883a 	mov	r4,r2
80008270:	180b883a 	mov	r5,r3
80008274:	000c99c0 	call	8000c99c <__udivdi3>
80008278:	1009883a 	mov	r4,r2
8000827c:	180b883a 	mov	r5,r3
80008280:	2005883a 	mov	r2,r4
80008284:	2807883a 	mov	r3,r5
80008288:	e13ffd17 	ldw	r4,-12(fp)
8000828c:	20800015 	stw	r2,0(r4)
80008290:	20c00115 	stw	r3,4(r4)

	return mod;
80008294:	e0bffe17 	ldw	r2,-8(fp)
80008298:	e0ffff17 	ldw	r3,-4(fp)
8000829c:	1009883a 	mov	r4,r2
800082a0:	180b883a 	mov	r5,r3
}
800082a4:	2005883a 	mov	r2,r4
800082a8:	2807883a 	mov	r3,r5
800082ac:	e037883a 	mov	sp,fp
800082b0:	dfc00117 	ldw	ra,4(sp)
800082b4:	df000017 	ldw	fp,0(sp)
800082b8:	dec00204 	addi	sp,sp,8
800082bc:	f800283a 	ret

800082c0 <ad_reg_write_16>:

/***************************************************************************//**
 * @brief ad_reg_write_16
 ******************************************************************************/
void ad_reg_write_16(uint32_t addr, uint32_t data)
{
800082c0:	defffc04 	addi	sp,sp,-16
800082c4:	df000315 	stw	fp,12(sp)
800082c8:	df000304 	addi	fp,sp,12
800082cc:	e13ffe15 	stw	r4,-8(fp)
800082d0:	e17ffd15 	stw	r5,-12(fp)
	uint32_t m_data;

	m_data = ad_reg_read(addr & ~0x3);
800082d4:	e0fffe17 	ldw	r3,-8(fp)
800082d8:	00bfff04 	movi	r2,-4
800082dc:	1884703a 	and	r2,r3,r2
800082e0:	10800037 	ldwio	r2,0(r2)
800082e4:	e0bfff15 	stw	r2,-4(fp)
	if ((addr & 0x3) == 0)
800082e8:	e0bffe17 	ldw	r2,-8(fp)
800082ec:	108000cc 	andi	r2,r2,3
800082f0:	1000061e 	bne	r2,zero,8000830c <ad_reg_write_16+0x4c>
		m_data = (m_data & ~0xffff) | data;
800082f4:	e0bfff17 	ldw	r2,-4(fp)
800082f8:	10bfffec 	andhi	r2,r2,65535
800082fc:	e0fffd17 	ldw	r3,-12(fp)
80008300:	1884b03a 	or	r2,r3,r2
80008304:	e0bfff15 	stw	r2,-4(fp)
80008308:	00000606 	br	80008324 <ad_reg_write_16+0x64>
	else
		m_data = (m_data & 0xffff) | (data<<16);
8000830c:	e0bfff17 	ldw	r2,-4(fp)
80008310:	10ffffcc 	andi	r3,r2,65535
80008314:	e0bffd17 	ldw	r2,-12(fp)
80008318:	1004943a 	slli	r2,r2,16
8000831c:	1884b03a 	or	r2,r3,r2
80008320:	e0bfff15 	stw	r2,-4(fp)
	ad_reg_write((addr & ~0x3), m_data);
80008324:	e0fffe17 	ldw	r3,-8(fp)
80008328:	00bfff04 	movi	r2,-4
8000832c:	1884703a 	and	r2,r3,r2
80008330:	1007883a 	mov	r3,r2
80008334:	e0bfff17 	ldw	r2,-4(fp)
80008338:	18800035 	stwio	r2,0(r3)
}
8000833c:	0001883a 	nop
80008340:	e037883a 	mov	sp,fp
80008344:	df000017 	ldw	fp,0(sp)
80008348:	dec00104 	addi	sp,sp,4
8000834c:	f800283a 	ret

80008350 <ad_platform_init>:

#ifdef ALTERA
void ad_platform_init(void)
{
80008350:	deffff04 	addi	sp,sp,-4
80008354:	df000015 	stw	fp,0(sp)
80008358:	d839883a 	mov	fp,sp
	return;
8000835c:	0001883a 	nop
}
80008360:	e037883a 	mov	sp,fp
80008364:	df000017 	ldw	fp,0(sp)
80008368:	dec00104 	addi	sp,sp,4
8000836c:	f800283a 	ret

80008370 <ad_platform_close>:

void ad_platform_close(void)
{
80008370:	defffe04 	addi	sp,sp,-8
80008374:	dfc00115 	stw	ra,4(sp)
80008378:	df000015 	stw	fp,0(sp)
8000837c:	d839883a 	mov	fp,sp
	alt_printf("%c", 0x04);
80008380:	01400104 	movi	r5,4
80008384:	012000b4 	movhi	r4,32770
80008388:	21193504 	addi	r4,r4,25812
8000838c:	00200680 	call	80020068 <alt_printf>
	return;
80008390:	0001883a 	nop
}
80008394:	e037883a 	mov	sp,fp
80008398:	dfc00117 	ldw	ra,4(sp)
8000839c:	df000017 	ldw	fp,0(sp)
800083a0:	dec00204 	addi	sp,sp,8
800083a4:	f800283a 	ret

800083a8 <ad_uart_read>:

/***************************************************************************//**
 * @brief ad_uart_read
 ******************************************************************************/
uint8_t ad_uart_read()
{
800083a8:	defffd04 	addi	sp,sp,-12
800083ac:	dfc00215 	stw	ra,8(sp)
800083b0:	df000115 	stw	fp,4(sp)
800083b4:	df000104 	addi	fp,sp,4
	}
	RecievedByte = XUartPs_ReadReg(STDIN_BASEADDRESS, XUARTPS_FIFO_OFFSET);
	/* Return the byte received */
	return (uint8_t)RecievedByte;
#else
	uint8_t RecievedByte = 0;
800083b8:	e03fffc5 	stb	zero,-1(fp)

	RecievedByte = getc(stdin);
800083bc:	d0a00117 	ldw	r2,-32764(gp)
800083c0:	10800117 	ldw	r2,4(r2)
800083c4:	1009883a 	mov	r4,r2
800083c8:	000fb1c0 	call	8000fb1c <getc>
800083cc:	e0bfffc5 	stb	r2,-1(fp)

	return RecievedByte;
800083d0:	e0bfffc3 	ldbu	r2,-1(fp)
#endif
}
800083d4:	e037883a 	mov	sp,fp
800083d8:	dfc00117 	ldw	ra,4(sp)
800083dc:	df000017 	ldw	fp,0(sp)
800083e0:	dec00204 	addi	sp,sp,8
800083e4:	f800283a 	ret

800083e8 <ad_pow2>:

/***************************************************************************//**
 * @brief ad_pow2 Create a mask for a given number of bit
 ******************************************************************************/
uint32_t ad_pow2(uint32_t number)
{
800083e8:	defffc04 	addi	sp,sp,-16
800083ec:	df000315 	stw	fp,12(sp)
800083f0:	df000304 	addi	fp,sp,12
800083f4:	e13ffd15 	stw	r4,-12(fp)

	uint32_t index;
	uint32_t mask = 1;
800083f8:	00800044 	movi	r2,1
800083fc:	e0bffe15 	stw	r2,-8(fp)

	for (index=1; index < number; index++) {
80008400:	00800044 	movi	r2,1
80008404:	e0bfff15 	stw	r2,-4(fp)
80008408:	00000706 	br	80008428 <ad_pow2+0x40>
		mask = (mask << 1) ^ 1;
8000840c:	e0bffe17 	ldw	r2,-8(fp)
80008410:	1085883a 	add	r2,r2,r2
80008414:	1080005c 	xori	r2,r2,1
80008418:	e0bffe15 	stw	r2,-8(fp)
	for (index=1; index < number; index++) {
8000841c:	e0bfff17 	ldw	r2,-4(fp)
80008420:	10800044 	addi	r2,r2,1
80008424:	e0bfff15 	stw	r2,-4(fp)
80008428:	e0ffff17 	ldw	r3,-4(fp)
8000842c:	e0bffd17 	ldw	r2,-12(fp)
80008430:	18bff636 	bltu	r3,r2,8000840c <_gp+0xfffd7698>
	}

	return mask;
80008434:	e0bffe17 	ldw	r2,-8(fp)
}
80008438:	e037883a 	mov	sp,fp
8000843c:	df000017 	ldw	fp,0(sp)
80008440:	dec00104 	addi	sp,sp,4
80008444:	f800283a 	ret

80008448 <xcvr_read>:
 * @brief xcvr_read
 ******************************************************************************/
int32_t xcvr_read(xcvr_core *core,
		  uint32_t reg_addr,
		  uint32_t *reg_data)
{
80008448:	defffc04 	addi	sp,sp,-16
8000844c:	df000315 	stw	fp,12(sp)
80008450:	df000304 	addi	fp,sp,12
80008454:	e13fff15 	stw	r4,-4(fp)
80008458:	e17ffe15 	stw	r5,-8(fp)
8000845c:	e1bffd15 	stw	r6,-12(fp)
	*reg_data = ad_reg_read((core->base_address + reg_addr));
80008460:	e0bfff17 	ldw	r2,-4(fp)
80008464:	10c00117 	ldw	r3,4(r2)
80008468:	e0bffe17 	ldw	r2,-8(fp)
8000846c:	1885883a 	add	r2,r3,r2
80008470:	10800037 	ldwio	r2,0(r2)
80008474:	1007883a 	mov	r3,r2
80008478:	e0bffd17 	ldw	r2,-12(fp)
8000847c:	10c00015 	stw	r3,0(r2)

	return 0;
80008480:	0005883a 	mov	r2,zero
}
80008484:	e037883a 	mov	sp,fp
80008488:	df000017 	ldw	fp,0(sp)
8000848c:	dec00104 	addi	sp,sp,4
80008490:	f800283a 	ret

80008494 <xcvr_write>:
 * @brief xcvr_write
 ******************************************************************************/
int32_t xcvr_write(xcvr_core *core,
		   uint32_t reg_addr,
		   uint32_t reg_data)
{
80008494:	defffc04 	addi	sp,sp,-16
80008498:	df000315 	stw	fp,12(sp)
8000849c:	df000304 	addi	fp,sp,12
800084a0:	e13fff15 	stw	r4,-4(fp)
800084a4:	e17ffe15 	stw	r5,-8(fp)
800084a8:	e1bffd15 	stw	r6,-12(fp)
	ad_reg_write((core->base_address + reg_addr), reg_data);
800084ac:	e0bfff17 	ldw	r2,-4(fp)
800084b0:	10c00117 	ldw	r3,4(r2)
800084b4:	e0bffe17 	ldw	r2,-8(fp)
800084b8:	1885883a 	add	r2,r3,r2
800084bc:	1007883a 	mov	r3,r2
800084c0:	e0bffd17 	ldw	r2,-12(fp)
800084c4:	18800035 	stwio	r2,0(r3)

	return 0;
800084c8:	0005883a 	mov	r2,zero
}
800084cc:	e037883a 	mov	sp,fp
800084d0:	df000017 	ldw	fp,0(sp)
800084d4:	dec00104 	addi	sp,sp,4
800084d8:	f800283a 	ret

800084dc <xcvr_setup>:

/*******************************************************************************
 * @brief xcvr_setup
 ******************************************************************************/
int32_t xcvr_setup(xcvr_core *core)
{
800084dc:	defff904 	addi	sp,sp,-28
800084e0:	dfc00615 	stw	ra,24(sp)
800084e4:	df000515 	stw	fp,20(sp)
800084e8:	df000504 	addi	fp,sp,20
800084ec:	e13ffb15 	stw	r4,-20(fp)
	int32_t ret = 0;
800084f0:	e03fff15 	stw	zero,-4(fp)

#ifdef ALTERA

	xcvr_write(core, XCVR_REG_RESETN, 0); // enter reset state
800084f4:	000d883a 	mov	r6,zero
800084f8:	01400404 	movi	r5,16
800084fc:	e13ffb17 	ldw	r4,-20(fp)
80008500:	00084940 	call	80008494 <xcvr_write>

	uint32_t link_clock=0;
80008504:	e03ffe15 	stw	zero,-8(fp)
	uint64_t lane_rate=0;
80008508:	e03ffc15 	stw	zero,-16(fp)
8000850c:	e03ffd15 	stw	zero,-12(fp)

	link_clock = (uint32_t)(core->lane_rate_kbps / 40);
80008510:	e0bffb17 	ldw	r2,-20(fp)
80008514:	10c00417 	ldw	r3,16(r2)
80008518:	00800a04 	movi	r2,40
8000851c:	1885203a 	divu	r2,r3,r2
80008520:	e0bffe15 	stw	r2,-8(fp)

	link_clock = fpll_round_rate(link_clock, core->ref_clock_khz);
80008524:	e0bffb17 	ldw	r2,-20(fp)
80008528:	10800717 	ldw	r2,28(r2)
8000852c:	100b883a 	mov	r5,r2
80008530:	e13ffe17 	ldw	r4,-8(fp)
80008534:	0009ea80 	call	80009ea8 <fpll_round_rate>
80008538:	e0bffe15 	stw	r2,-8(fp)
	ret |= fpll_set_rate(&(core->dev.link_pll),
8000853c:	e0bffb17 	ldw	r2,-20(fp)
80008540:	10c00a04 	addi	r3,r2,40
80008544:	e0bffb17 	ldw	r2,-20(fp)
80008548:	10800717 	ldw	r2,28(r2)
8000854c:	100d883a 	mov	r6,r2
80008550:	e17ffe17 	ldw	r5,-8(fp)
80008554:	1809883a 	mov	r4,r3
80008558:	0009fd40 	call	80009fd4 <fpll_set_rate>
8000855c:	1007883a 	mov	r3,r2
80008560:	e0bfff17 	ldw	r2,-4(fp)
80008564:	10c4b03a 	or	r2,r2,r3
80008568:	e0bfff15 	stw	r2,-4(fp)
			     link_clock,
			     core->ref_clock_khz);

	core->link_clk_khz = link_clock;
8000856c:	e0bffb17 	ldw	r2,-20(fp)
80008570:	e0fffe17 	ldw	r3,-8(fp)
80008574:	10c00815 	stw	r3,32(r2)

	if (core->rx_tx_n) {
80008578:	e0bffb17 	ldw	r2,-20(fp)
8000857c:	10800043 	ldbu	r2,1(r2)
80008580:	10803fcc 	andi	r2,r2,255
80008584:	10001526 	beq	r2,zero,800085dc <xcvr_setup+0x100>
		lane_rate = altera_a10_cdr_pll_round_rate(core->lane_rate_kbps,
80008588:	e0bffb17 	ldw	r2,-20(fp)
8000858c:	10c00417 	ldw	r3,16(r2)
80008590:	e0bffb17 	ldw	r2,-20(fp)
80008594:	10800717 	ldw	r2,28(r2)
80008598:	100b883a 	mov	r5,r2
8000859c:	1809883a 	mov	r4,r3
800085a0:	000ad7c0 	call	8000ad7c <altera_a10_cdr_pll_round_rate>
800085a4:	e0bffc15 	stw	r2,-16(fp)
800085a8:	e03ffd15 	stw	zero,-12(fp)
				core->ref_clock_khz);
		ret |= altera_a10_cdr_pll_set_rate(core,
800085ac:	e0fffc17 	ldw	r3,-16(fp)
800085b0:	e0bffb17 	ldw	r2,-20(fp)
800085b4:	10800717 	ldw	r2,28(r2)
800085b8:	100d883a 	mov	r6,r2
800085bc:	180b883a 	mov	r5,r3
800085c0:	e13ffb17 	ldw	r4,-20(fp)
800085c4:	000aecc0 	call	8000aecc <altera_a10_cdr_pll_set_rate>
800085c8:	1007883a 	mov	r3,r2
800085cc:	e0bfff17 	ldw	r2,-4(fp)
800085d0:	10c4b03a 	or	r2,r2,r3
800085d4:	e0bfff15 	stw	r2,-4(fp)
800085d8:	00001606 	br	80008634 <xcvr_setup+0x158>
						   lane_rate,
						   core->ref_clock_khz);
	} else {
		lane_rate = atx_pll_round_rate(core->lane_rate_kbps,
800085dc:	e0bffb17 	ldw	r2,-20(fp)
800085e0:	10c00417 	ldw	r3,16(r2)
800085e4:	e0bffb17 	ldw	r2,-20(fp)
800085e8:	10800717 	ldw	r2,28(r2)
800085ec:	100b883a 	mov	r5,r2
800085f0:	1809883a 	mov	r4,r3
800085f4:	0008f6c0 	call	80008f6c <atx_pll_round_rate>
800085f8:	e0bffc15 	stw	r2,-16(fp)
800085fc:	e03ffd15 	stw	zero,-12(fp)
					       core->ref_clock_khz);
		ret |= atx_pll_set_rate(core, lane_rate, core->ref_clock_khz);
80008600:	e0fffc17 	ldw	r3,-16(fp)
80008604:	e0bffb17 	ldw	r2,-20(fp)
80008608:	10800717 	ldw	r2,28(r2)
8000860c:	100d883a 	mov	r6,r2
80008610:	180b883a 	mov	r5,r3
80008614:	e13ffb17 	ldw	r4,-20(fp)
80008618:	00090a40 	call	800090a4 <atx_pll_set_rate>
8000861c:	1007883a 	mov	r3,r2
80008620:	e0bfff17 	ldw	r2,-4(fp)
80008624:	1884b03a 	or	r2,r3,r2
80008628:	e0bfff15 	stw	r2,-4(fp)
		altera_a10_calib_tx_pll(core);
8000862c:	e13ffb17 	ldw	r4,-20(fp)
80008630:	000b40c0 	call	8000b40c <altera_a10_calib_tx_pll>
	}

	xcvr_finalize_lane_rate_change(core); // bring out of reset - print  status
80008634:	e13ffb17 	ldw	r4,-20(fp)
80008638:	00088280 	call	80008828 <xcvr_finalize_lane_rate_change>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
		return(-1);
	}
#endif

	return(0);
8000863c:	0005883a 	mov	r2,zero
}
80008640:	e037883a 	mov	sp,fp
80008644:	dfc00117 	ldw	ra,4(sp)
80008648:	df000017 	ldw	fp,0(sp)
8000864c:	dec00204 	addi	sp,sp,8
80008650:	f800283a 	ret

80008654 <xcvr_getconfig>:

/*******************************************************************************
 * @brief xcvr_getconfig
 ******************************************************************************/
int32_t xcvr_getconfig(xcvr_core *core)
{
80008654:	defffb04 	addi	sp,sp,-20
80008658:	dfc00415 	stw	ra,16(sp)
8000865c:	df000315 	stw	fp,12(sp)
80008660:	df000304 	addi	fp,sp,12
80008664:	e13ffd15 	stw	r4,-12(fp)
	uint32_t regbuf;

	xcvr_read(core, XCVR_REG_SYNTH, &regbuf);
80008668:	e0bffe04 	addi	r2,fp,-8
8000866c:	100d883a 	mov	r6,r2
80008670:	01400904 	movi	r5,36
80008674:	e13ffd17 	ldw	r4,-12(fp)
80008678:	00084480 	call	80008448 <xcvr_read>
	core->num_lanes = (regbuf & XCVR_NUM_OF_LANES_MASK) >> XCVR_NUM_OF_LANES_OFFSET;
8000867c:	e0bffe17 	ldw	r2,-8(fp)
80008680:	1007883a 	mov	r3,r2
80008684:	e0bffd17 	ldw	r2,-12(fp)
80008688:	10c00005 	stb	r3,0(r2)
	core->rx_tx_n = ((regbuf & XCVR_TX_OR_RXN_MASK) >> XCVR_TX_OR_RXN_OFFSET);
8000868c:	e0bffe17 	ldw	r2,-8(fp)
80008690:	1004d23a 	srli	r2,r2,8
80008694:	1080004c 	andi	r2,r2,1
80008698:	1007883a 	mov	r3,r2
8000869c:	e0bffd17 	ldw	r2,-12(fp)
800086a0:	10c00045 	stb	r3,1(r2)
	core->dev.sys_clk_sel = (regbuf & (0x3 << 4)) >> 4;
	core->dev.out_clk_sel = regbuf & 0x7;
#endif

#ifdef ALTERA
	core->refclk_ppm = PM_1000;
800086a4:	e0bffd17 	ldw	r2,-12(fp)
800086a8:	00c000c4 	movi	r3,3
800086ac:	10c00215 	stw	r3,8(r2)

	core->dev.link_pll.type = fpll_type;
800086b0:	e0bffd17 	ldw	r2,-12(fp)
800086b4:	00c00044 	movi	r3,1
800086b8:	10c00a15 	stw	r3,40(r2)
	core->dev.atx_pll.type = atx_type;
800086bc:	e0bffd17 	ldw	r2,-12(fp)
800086c0:	10000d15 	stw	zero,52(r2)

	for (int i=1; i < core->lanes_per_link; i++) {
800086c4:	00800044 	movi	r2,1
800086c8:	e0bfff15 	stw	r2,-4(fp)
800086cc:	00001b06 	br	8000873c <xcvr_getconfig+0xe8>
		core->dev.channel_pll[i].type = core->dev.channel_pll[0].type;
800086d0:	e0bffd17 	ldw	r2,-12(fp)
800086d4:	10c01017 	ldw	r3,64(r2)
800086d8:	e13ffd17 	ldw	r4,-12(fp)
800086dc:	e0bfff17 	ldw	r2,-4(fp)
800086e0:	10800324 	muli	r2,r2,12
800086e4:	2085883a 	add	r2,r4,r2
800086e8:	10c01015 	stw	r3,64(r2)
		core->dev.channel_pll[i].base_address = core->dev.channel_pll[0].base_address + 0x1000 * i;
800086ec:	e0bffd17 	ldw	r2,-12(fp)
800086f0:	10801117 	ldw	r2,68(r2)
800086f4:	e0ffff17 	ldw	r3,-4(fp)
800086f8:	1806933a 	slli	r3,r3,12
800086fc:	10c7883a 	add	r3,r2,r3
80008700:	e13ffd17 	ldw	r4,-12(fp)
80008704:	e0bfff17 	ldw	r2,-4(fp)
80008708:	10800324 	muli	r2,r2,12
8000870c:	2085883a 	add	r2,r4,r2
80008710:	10c01115 	stw	r3,68(r2)
		core->dev.channel_pll[i].initial_recalc = core->dev.channel_pll[0].initial_recalc;
80008714:	e0bffd17 	ldw	r2,-12(fp)
80008718:	10c01203 	ldbu	r3,72(r2)
8000871c:	e13ffd17 	ldw	r4,-12(fp)
80008720:	e0bfff17 	ldw	r2,-4(fp)
80008724:	10800324 	muli	r2,r2,12
80008728:	2085883a 	add	r2,r4,r2
8000872c:	10c01205 	stb	r3,72(r2)
	for (int i=1; i < core->lanes_per_link; i++) {
80008730:	e0bfff17 	ldw	r2,-4(fp)
80008734:	10800044 	addi	r2,r2,1
80008738:	e0bfff15 	stw	r2,-4(fp)
8000873c:	e0bffd17 	ldw	r2,-12(fp)
80008740:	10800643 	ldbu	r2,25(r2)
80008744:	10803fcc 	andi	r2,r2,255
80008748:	e0ffff17 	ldw	r3,-4(fp)
8000874c:	18bfe016 	blt	r3,r2,800086d0 <_gp+0xfffd795c>
	}

#endif

	return 0;
80008750:	0005883a 	mov	r2,zero
}
80008754:	e037883a 	mov	sp,fp
80008758:	dfc00117 	ldw	ra,4(sp)
8000875c:	df000017 	ldw	fp,0(sp)
80008760:	dec00204 	addi	sp,sp,8
80008764:	f800283a 	ret

80008768 <xcvr_reset>:

/*******************************************************************************
 * @brief xcvr_reset
 ******************************************************************************/
int32_t xcvr_reset(xcvr_core *core)
{
80008768:	defffb04 	addi	sp,sp,-20
8000876c:	dfc00415 	stw	ra,16(sp)
80008770:	df000315 	stw	fp,12(sp)
80008774:	df000304 	addi	fp,sp,12
80008778:	e13ffd15 	stw	r4,-12(fp)
	uint32_t status;
	int32_t timeout;

	xcvr_write(core, XCVR_REG_RESETN, 0);
8000877c:	000d883a 	mov	r6,zero
80008780:	01400404 	movi	r5,16
80008784:	e13ffd17 	ldw	r4,-12(fp)
80008788:	00084940 	call	80008494 <xcvr_write>

	xcvr_write(core, XCVR_REG_RESETN, XCVR_RESETN);
8000878c:	01800044 	movi	r6,1
80008790:	01400404 	movi	r5,16
80008794:	e13ffd17 	ldw	r4,-12(fp)
80008798:	00084940 	call	80008494 <xcvr_write>

	timeout = 100;
8000879c:	00801904 	movi	r2,100
800087a0:	e0bfff15 	stw	r2,-4(fp)
	while (timeout > 0) {
800087a4:	00000d06 	br	800087dc <xcvr_reset+0x74>
		mdelay(1);
800087a8:	0100fa04 	movi	r4,1000
800087ac:	00205040 	call	80020504 <usleep>
		timeout = timeout - 1;
800087b0:	e0bfff17 	ldw	r2,-4(fp)
800087b4:	10bfffc4 	addi	r2,r2,-1
800087b8:	e0bfff15 	stw	r2,-4(fp)
		xcvr_read(core, XCVR_REG_STATUS, &status);
800087bc:	e0bffe04 	addi	r2,fp,-8
800087c0:	100d883a 	mov	r6,r2
800087c4:	01400504 	movi	r5,20
800087c8:	e13ffd17 	ldw	r4,-12(fp)
800087cc:	00084480 	call	80008448 <xcvr_read>
		if (status == 1)
800087d0:	e0bffe17 	ldw	r2,-8(fp)
800087d4:	10800058 	cmpnei	r2,r2,1
800087d8:	10000326 	beq	r2,zero,800087e8 <xcvr_reset+0x80>
	while (timeout > 0) {
800087dc:	e0bfff17 	ldw	r2,-4(fp)
800087e0:	00bff116 	blt	zero,r2,800087a8 <_gp+0xfffd7a34>
800087e4:	00000106 	br	800087ec <xcvr_reset+0x84>
			break;
800087e8:	0001883a 	nop
	}

	if (status == 0) {
800087ec:	e0bffe17 	ldw	r2,-8(fp)
800087f0:	1000071e 	bne	r2,zero,80008810 <xcvr_reset+0xa8>
		printf("%s ERROR: XCVR initialization failed!\n", __func__);
800087f4:	016000b4 	movhi	r5,32770
800087f8:	29594604 	addi	r5,r5,25880
800087fc:	012000b4 	movhi	r4,32770
80008800:	21193604 	addi	r4,r4,25816
80008804:	0010d740 	call	80010d74 <printf>
		return(-1);
80008808:	00bfffc4 	movi	r2,-1
8000880c:	00000106 	br	80008814 <xcvr_reset+0xac>
	}

	return(0);
80008810:	0005883a 	mov	r2,zero
}
80008814:	e037883a 	mov	sp,fp
80008818:	dfc00117 	ldw	ra,4(sp)
8000881c:	df000017 	ldw	fp,0(sp)
80008820:	dec00204 	addi	sp,sp,8
80008824:	f800283a 	ret

80008828 <xcvr_finalize_lane_rate_change>:

/*******************************************************************************
 * @brief xcvr_finalize_lane_rate_change
 ******************************************************************************/
void xcvr_finalize_lane_rate_change(xcvr_core *core)
{
80008828:	defffb04 	addi	sp,sp,-20
8000882c:	dfc00415 	stw	ra,16(sp)
80008830:	df000315 	stw	fp,12(sp)
80008834:	df000304 	addi	fp,sp,12
80008838:	e13ffd15 	stw	r4,-12(fp)
	uint32_t status;
	int timeout = 1000;
8000883c:	0080fa04 	movi	r2,1000
80008840:	e0bfff15 	stw	r2,-4(fp)
	uint32_t i;

	mdelay(100);
80008844:	010000b4 	movhi	r4,2
80008848:	2121a804 	addi	r4,r4,-31072
8000884c:	00205040 	call	80020504 <usleep>

	xcvr_write(core, XCVR_REG_RESETN, 1);
80008850:	01800044 	movi	r6,1
80008854:	01400404 	movi	r5,16
80008858:	e13ffd17 	ldw	r4,-12(fp)
8000885c:	00084940 	call	80008494 <xcvr_write>
	do {
		xcvr_read(core, XCVR_REG_STATUS, &status);
80008860:	e0bffe04 	addi	r2,fp,-8
80008864:	100d883a 	mov	r6,r2
80008868:	01400504 	movi	r5,20
8000886c:	e13ffd17 	ldw	r4,-12(fp)
80008870:	00084480 	call	80008448 <xcvr_read>
		if (status == XCVR_STATUS)
80008874:	e0bffe17 	ldw	r2,-8(fp)
80008878:	10800058 	cmpnei	r2,r2,1
8000887c:	10000726 	beq	r2,zero,8000889c <xcvr_finalize_lane_rate_change+0x74>
			break;
		mdelay(1);
80008880:	0100fa04 	movi	r4,1000
80008884:	00205040 	call	80020504 <usleep>
	} while (timeout--);
80008888:	e0bfff17 	ldw	r2,-4(fp)
8000888c:	10ffffc4 	addi	r3,r2,-1
80008890:	e0ffff15 	stw	r3,-4(fp)
80008894:	103ff21e 	bne	r2,zero,80008860 <_gp+0xfffd7aec>
80008898:	00000106 	br	800088a0 <xcvr_finalize_lane_rate_change+0x78>
			break;
8000889c:	0001883a 	nop

	if (timeout < 0) {
800088a0:	e0bfff17 	ldw	r2,-4(fp)
800088a4:	1000080e 	bge	r2,zero,800088c8 <xcvr_finalize_lane_rate_change+0xa0>
		xcvr_read(core, XCVR_REG_STATUS2, &status);
800088a8:	e0bffe04 	addi	r2,fp,-8
800088ac:	100d883a 	mov	r6,r2
800088b0:	01400604 	movi	r5,24
800088b4:	e13ffd17 	ldw	r4,-12(fp)
800088b8:	00084480 	call	80008448 <xcvr_read>
		printf("Link activation error:\n");
800088bc:	012000b4 	movhi	r4,32770
800088c0:	21194004 	addi	r4,r4,25856
800088c4:	0010e980 	call	80010e98 <puts>
			printf("\tLane %d transceiver %s ready\n", i, \
			       ((status & XCVR_STATUS2_XCVR(i)) ?"" : "not"));
		}
*/
	}
}
800088c8:	0001883a 	nop
800088cc:	e037883a 	mov	sp,fp
800088d0:	dfc00117 	ldw	ra,4(sp)
800088d4:	df000017 	ldw	fp,0(sp)
800088d8:	dec00204 	addi	sp,sp,8
800088dc:	f800283a 	ret

800088e0 <atx_lookup_band>:

/*******************************************************************************
* @brief atx_lookup_band
*******************************************************************************/
uint32_t atx_lookup_band(uint32_t fvco)
{
800088e0:	defffd04 	addi	sp,sp,-12
800088e4:	df000215 	stw	fp,8(sp)
800088e8:	df000204 	addi	fp,sp,8
800088ec:	e13ffe15 	stw	r4,-8(fp)
	uint32_t i;

	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
800088f0:	e03fff15 	stw	zero,-4(fp)
800088f4:	00001506 	br	8000894c <atx_lookup_band+0x6c>
		if (fvco > atx_bands[i]) {
800088f8:	e0bfff17 	ldw	r2,-4(fp)
800088fc:	100690ba 	slli	r3,r2,2
80008900:	00a000b4 	movhi	r2,32770
80008904:	1885883a 	add	r2,r3,r2
80008908:	10d94917 	ldw	r3,25892(r2)
8000890c:	e0bffe17 	ldw	r2,-8(fp)
80008910:	18800b2e 	bgeu	r3,r2,80008940 <atx_lookup_band+0x60>
			i = i % 8;
80008914:	e0bfff17 	ldw	r2,-4(fp)
80008918:	108001cc 	andi	r2,r2,7
8000891c:	e0bfff15 	stw	r2,-4(fp)
			if (i != 7)
80008920:	e0bfff17 	ldw	r2,-4(fp)
80008924:	108001e0 	cmpeqi	r2,r2,7
80008928:	1000031e 	bne	r2,zero,80008938 <atx_lookup_band+0x58>
				i++;
8000892c:	e0bfff17 	ldw	r2,-4(fp)
80008930:	10800044 	addi	r2,r2,1
80008934:	e0bfff15 	stw	r2,-4(fp)
			return i;
80008938:	e0bfff17 	ldw	r2,-4(fp)
8000893c:	00000706 	br	8000895c <atx_lookup_band+0x7c>
	for (i = 0; i < ARRAY_SIZE(atx_bands); i++) {
80008940:	e0bfff17 	ldw	r2,-4(fp)
80008944:	10800044 	addi	r2,r2,1
80008948:	e0bfff15 	stw	r2,-4(fp)
8000894c:	e0bfff17 	ldw	r2,-4(fp)
80008950:	10800530 	cmpltui	r2,r2,20
80008954:	103fe81e 	bne	r2,zero,800088f8 <_gp+0xfffd7b84>
		}
	}

	return 5;
80008958:	00800144 	movi	r2,5
}
8000895c:	e037883a 	mov	sp,fp
80008960:	df000017 	ldw	fp,0(sp)
80008964:	dec00104 	addi	sp,sp,4
80008968:	f800283a 	ret

8000896c <atx_lookup_tank>:

/*******************************************************************************
* @brief atx_lookup_tank
*******************************************************************************/
uint32_t atx_lookup_tank(uint32_t fvco)
{
8000896c:	defffe04 	addi	sp,sp,-8
80008970:	df000115 	stw	fp,4(sp)
80008974:	df000104 	addi	fp,sp,4
80008978:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 8800000)
8000897c:	e0ffff17 	ldw	r3,-4(fp)
80008980:	008021b4 	movhi	r2,134
80008984:	1091bfc4 	addi	r2,r2,18175
80008988:	10c00236 	bltu	r2,r3,80008994 <atx_lookup_tank+0x28>
		return 0;
8000898c:	0005883a 	mov	r2,zero
80008990:	00000706 	br	800089b0 <atx_lookup_tank+0x44>
	else if (fvco < 11400000)
80008994:	e0ffff17 	ldw	r3,-4(fp)
80008998:	00802bb4 	movhi	r2,174
8000899c:	10bccfc4 	addi	r2,r2,-3265
800089a0:	10c00236 	bltu	r2,r3,800089ac <atx_lookup_tank+0x40>
		return 1;
800089a4:	00800044 	movi	r2,1
800089a8:	00000106 	br	800089b0 <atx_lookup_tank+0x44>
	else
		return 2;
800089ac:	00800084 	movi	r2,2
}
800089b0:	e037883a 	mov	sp,fp
800089b4:	df000017 	ldw	fp,0(sp)
800089b8:	dec00104 	addi	sp,sp,4
800089bc:	f800283a 	ret

800089c0 <atx_lookup_cp_current>:

/*******************************************************************************
* @brief atx_lookup_cp_current
*******************************************************************************/
uint32_t atx_lookup_cp_current(uint32_t m)
{
800089c0:	defffe04 	addi	sp,sp,-8
800089c4:	df000115 	stw	fp,4(sp)
800089c8:	df000104 	addi	fp,sp,4
800089cc:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
800089d0:	e0bfff17 	ldw	r2,-4(fp)
800089d4:	10801968 	cmpgeui	r2,r2,101
800089d8:	1000791e 	bne	r2,zero,80008bc0 <atx_lookup_cp_current+0x200>
800089dc:	e0bfff17 	ldw	r2,-4(fp)
800089e0:	100690ba 	slli	r3,r2,2
800089e4:	00a00074 	movhi	r2,32769
800089e8:	1885883a 	add	r2,r3,r2
800089ec:	10a27d17 	ldw	r2,-30220(r2)
800089f0:	1000683a 	jmp	r2
800089f4:	80008b88 	cmpgei	zero,r16,558
800089f8:	80008b88 	cmpgei	zero,r16,558
800089fc:	80008b88 	cmpgei	zero,r16,558
80008a00:	80008b88 	cmpgei	zero,r16,558
80008a04:	80008b88 	cmpgei	zero,r16,558
80008a08:	80008b88 	cmpgei	zero,r16,558
80008a0c:	80008b88 	cmpgei	zero,r16,558
80008a10:	80008b88 	cmpgei	zero,r16,558
80008a14:	80008b88 	cmpgei	zero,r16,558
80008a18:	80008b88 	cmpgei	zero,r16,558
80008a1c:	80008b88 	cmpgei	zero,r16,558
80008a20:	80008b88 	cmpgei	zero,r16,558
80008a24:	80008b88 	cmpgei	zero,r16,558
80008a28:	80008b88 	cmpgei	zero,r16,558
80008a2c:	80008b88 	cmpgei	zero,r16,558
80008a30:	80008b88 	cmpgei	zero,r16,558
80008a34:	80008b88 	cmpgei	zero,r16,558
80008a38:	80008b88 	cmpgei	zero,r16,558
80008a3c:	80008b88 	cmpgei	zero,r16,558
80008a40:	80008b88 	cmpgei	zero,r16,558
80008a44:	80008b88 	cmpgei	zero,r16,558
80008a48:	80008b90 	cmplti	zero,r16,558
80008a4c:	80008b90 	cmplti	zero,r16,558
80008a50:	80008b90 	cmplti	zero,r16,558
80008a54:	80008b90 	cmplti	zero,r16,558
80008a58:	80008b90 	cmplti	zero,r16,558
80008a5c:	80008b90 	cmplti	zero,r16,558
80008a60:	80008b90 	cmplti	zero,r16,558
80008a64:	80008b90 	cmplti	zero,r16,558
80008a68:	80008b90 	cmplti	zero,r16,558
80008a6c:	80008b90 	cmplti	zero,r16,558
80008a70:	80008b98 	cmpnei	zero,r16,558
80008a74:	80008b98 	cmpnei	zero,r16,558
80008a78:	80008b98 	cmpnei	zero,r16,558
80008a7c:	80008b98 	cmpnei	zero,r16,558
80008a80:	80008b98 	cmpnei	zero,r16,558
80008a84:	80008b98 	cmpnei	zero,r16,558
80008a88:	80008b98 	cmpnei	zero,r16,558
80008a8c:	80008b98 	cmpnei	zero,r16,558
80008a90:	80008b98 	cmpnei	zero,r16,558
80008a94:	80008b98 	cmpnei	zero,r16,558
80008a98:	80008ba0 	cmpeqi	zero,r16,558
80008a9c:	80008ba0 	cmpeqi	zero,r16,558
80008aa0:	80008ba0 	cmpeqi	zero,r16,558
80008aa4:	80008ba0 	cmpeqi	zero,r16,558
80008aa8:	80008ba0 	cmpeqi	zero,r16,558
80008aac:	80008ba0 	cmpeqi	zero,r16,558
80008ab0:	80008ba0 	cmpeqi	zero,r16,558
80008ab4:	80008ba0 	cmpeqi	zero,r16,558
80008ab8:	80008ba0 	cmpeqi	zero,r16,558
80008abc:	80008ba0 	cmpeqi	zero,r16,558
80008ac0:	80008ba0 	cmpeqi	zero,r16,558
80008ac4:	80008ba0 	cmpeqi	zero,r16,558
80008ac8:	80008ba0 	cmpeqi	zero,r16,558
80008acc:	80008ba0 	cmpeqi	zero,r16,558
80008ad0:	80008ba0 	cmpeqi	zero,r16,558
80008ad4:	80008ba0 	cmpeqi	zero,r16,558
80008ad8:	80008ba0 	cmpeqi	zero,r16,558
80008adc:	80008ba0 	cmpeqi	zero,r16,558
80008ae0:	80008ba0 	cmpeqi	zero,r16,558
80008ae4:	80008ba0 	cmpeqi	zero,r16,558
80008ae8:	80008ba8 	cmpgeui	zero,r16,558
80008aec:	80008ba8 	cmpgeui	zero,r16,558
80008af0:	80008ba8 	cmpgeui	zero,r16,558
80008af4:	80008ba8 	cmpgeui	zero,r16,558
80008af8:	80008ba8 	cmpgeui	zero,r16,558
80008afc:	80008ba8 	cmpgeui	zero,r16,558
80008b00:	80008ba8 	cmpgeui	zero,r16,558
80008b04:	80008ba8 	cmpgeui	zero,r16,558
80008b08:	80008ba8 	cmpgeui	zero,r16,558
80008b0c:	80008ba8 	cmpgeui	zero,r16,558
80008b10:	80008bb0 	cmpltui	zero,r16,558
80008b14:	80008bb0 	cmpltui	zero,r16,558
80008b18:	80008bb0 	cmpltui	zero,r16,558
80008b1c:	80008bb0 	cmpltui	zero,r16,558
80008b20:	80008bb0 	cmpltui	zero,r16,558
80008b24:	80008bb0 	cmpltui	zero,r16,558
80008b28:	80008bb0 	cmpltui	zero,r16,558
80008b2c:	80008bb0 	cmpltui	zero,r16,558
80008b30:	80008bb0 	cmpltui	zero,r16,558
80008b34:	80008bb0 	cmpltui	zero,r16,558
80008b38:	80008bb0 	cmpltui	zero,r16,558
80008b3c:	80008bb0 	cmpltui	zero,r16,558
80008b40:	80008bb0 	cmpltui	zero,r16,558
80008b44:	80008bb0 	cmpltui	zero,r16,558
80008b48:	80008bb0 	cmpltui	zero,r16,558
80008b4c:	80008bb0 	cmpltui	zero,r16,558
80008b50:	80008bb0 	cmpltui	zero,r16,558
80008b54:	80008bb0 	cmpltui	zero,r16,558
80008b58:	80008bb0 	cmpltui	zero,r16,558
80008b5c:	80008bb0 	cmpltui	zero,r16,558
80008b60:	80008bb8 	rdprs	zero,r16,558
80008b64:	80008bb8 	rdprs	zero,r16,558
80008b68:	80008bb8 	rdprs	zero,r16,558
80008b6c:	80008bb8 	rdprs	zero,r16,558
80008b70:	80008bb8 	rdprs	zero,r16,558
80008b74:	80008bb8 	rdprs	zero,r16,558
80008b78:	80008bb8 	rdprs	zero,r16,558
80008b7c:	80008bb8 	rdprs	zero,r16,558
80008b80:	80008bb8 	rdprs	zero,r16,558
80008b84:	80008bb8 	rdprs	zero,r16,558
	case 0 ... 20:
		return 0x1a;
80008b88:	00800684 	movi	r2,26
80008b8c:	00000d06 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 21 ... 30:
		return 0x1c;
80008b90:	00800704 	movi	r2,28
80008b94:	00000b06 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 31 ... 40:
		return 0x1d;
80008b98:	00800744 	movi	r2,29
80008b9c:	00000906 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 41 ... 60:
		return 0x25;
80008ba0:	00800944 	movi	r2,37
80008ba4:	00000706 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 61 ... 70:
		return 0x26;
80008ba8:	00800984 	movi	r2,38
80008bac:	00000506 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 71 ... 90:
		return 0x1d;
80008bb0:	00800744 	movi	r2,29
80008bb4:	00000306 	br	80008bc4 <atx_lookup_cp_current+0x204>
	case 91 ... 100:
		return 0x25;
80008bb8:	00800944 	movi	r2,37
80008bbc:	00000106 	br	80008bc4 <atx_lookup_cp_current+0x204>
	default:
		return 0x26;
80008bc0:	00800984 	movi	r2,38
	}
}
80008bc4:	e037883a 	mov	sp,fp
80008bc8:	df000017 	ldw	fp,0(sp)
80008bcc:	dec00104 	addi	sp,sp,4
80008bd0:	f800283a 	ret

80008bd4 <atx_lookup_lf_resistance>:

/*******************************************************************************
* @brief atx_lookup_lf_resistance
*******************************************************************************/
uint32_t atx_lookup_lf_resistance(uint32_t m)
{
80008bd4:	defffe04 	addi	sp,sp,-8
80008bd8:	df000115 	stw	fp,4(sp)
80008bdc:	df000104 	addi	fp,sp,4
80008be0:	e13fff15 	stw	r4,-4(fp)
	switch (m) {
80008be4:	e0bfff17 	ldw	r2,-4(fp)
80008be8:	108011e8 	cmpgeui	r2,r2,71
80008bec:	1000551e 	bne	r2,zero,80008d44 <atx_lookup_lf_resistance+0x170>
80008bf0:	e0bfff17 	ldw	r2,-4(fp)
80008bf4:	100690ba 	slli	r3,r2,2
80008bf8:	00a00074 	movhi	r2,32769
80008bfc:	1885883a 	add	r2,r3,r2
80008c00:	10a30217 	ldw	r2,-29688(r2)
80008c04:	1000683a 	jmp	r2
80008c08:	80008d24 	muli	zero,r16,564
80008c0c:	80008d24 	muli	zero,r16,564
80008c10:	80008d24 	muli	zero,r16,564
80008c14:	80008d24 	muli	zero,r16,564
80008c18:	80008d24 	muli	zero,r16,564
80008c1c:	80008d24 	muli	zero,r16,564
80008c20:	80008d24 	muli	zero,r16,564
80008c24:	80008d24 	muli	zero,r16,564
80008c28:	80008d24 	muli	zero,r16,564
80008c2c:	80008d24 	muli	zero,r16,564
80008c30:	80008d24 	muli	zero,r16,564
80008c34:	80008d24 	muli	zero,r16,564
80008c38:	80008d24 	muli	zero,r16,564
80008c3c:	80008d2c 	andhi	zero,r16,564
80008c40:	80008d2c 	andhi	zero,r16,564
80008c44:	80008d2c 	andhi	zero,r16,564
80008c48:	80008d2c 	andhi	zero,r16,564
80008c4c:	80008d2c 	andhi	zero,r16,564
80008c50:	80008d2c 	andhi	zero,r16,564
80008c54:	80008d2c 	andhi	zero,r16,564
80008c58:	80008d2c 	andhi	zero,r16,564
80008c5c:	80008d34 	orhi	zero,r16,564
80008c60:	80008d34 	orhi	zero,r16,564
80008c64:	80008d34 	orhi	zero,r16,564
80008c68:	80008d34 	orhi	zero,r16,564
80008c6c:	80008d34 	orhi	zero,r16,564
80008c70:	80008d34 	orhi	zero,r16,564
80008c74:	80008d34 	orhi	zero,r16,564
80008c78:	80008d34 	orhi	zero,r16,564
80008c7c:	80008d34 	orhi	zero,r16,564
80008c80:	80008d34 	orhi	zero,r16,564
80008c84:	80008d3c 	xorhi	zero,r16,564
80008c88:	80008d3c 	xorhi	zero,r16,564
80008c8c:	80008d3c 	xorhi	zero,r16,564
80008c90:	80008d3c 	xorhi	zero,r16,564
80008c94:	80008d3c 	xorhi	zero,r16,564
80008c98:	80008d3c 	xorhi	zero,r16,564
80008c9c:	80008d3c 	xorhi	zero,r16,564
80008ca0:	80008d3c 	xorhi	zero,r16,564
80008ca4:	80008d3c 	xorhi	zero,r16,564
80008ca8:	80008d3c 	xorhi	zero,r16,564
80008cac:	80008d3c 	xorhi	zero,r16,564
80008cb0:	80008d3c 	xorhi	zero,r16,564
80008cb4:	80008d3c 	xorhi	zero,r16,564
80008cb8:	80008d3c 	xorhi	zero,r16,564
80008cbc:	80008d3c 	xorhi	zero,r16,564
80008cc0:	80008d3c 	xorhi	zero,r16,564
80008cc4:	80008d3c 	xorhi	zero,r16,564
80008cc8:	80008d3c 	xorhi	zero,r16,564
80008ccc:	80008d3c 	xorhi	zero,r16,564
80008cd0:	80008d3c 	xorhi	zero,r16,564
80008cd4:	80008d3c 	xorhi	zero,r16,564
80008cd8:	80008d3c 	xorhi	zero,r16,564
80008cdc:	80008d3c 	xorhi	zero,r16,564
80008ce0:	80008d3c 	xorhi	zero,r16,564
80008ce4:	80008d3c 	xorhi	zero,r16,564
80008ce8:	80008d3c 	xorhi	zero,r16,564
80008cec:	80008d3c 	xorhi	zero,r16,564
80008cf0:	80008d3c 	xorhi	zero,r16,564
80008cf4:	80008d3c 	xorhi	zero,r16,564
80008cf8:	80008d3c 	xorhi	zero,r16,564
80008cfc:	80008d3c 	xorhi	zero,r16,564
80008d00:	80008d3c 	xorhi	zero,r16,564
80008d04:	80008d3c 	xorhi	zero,r16,564
80008d08:	80008d3c 	xorhi	zero,r16,564
80008d0c:	80008d3c 	xorhi	zero,r16,564
80008d10:	80008d3c 	xorhi	zero,r16,564
80008d14:	80008d3c 	xorhi	zero,r16,564
80008d18:	80008d3c 	xorhi	zero,r16,564
80008d1c:	80008d3c 	xorhi	zero,r16,564
80008d20:	80008d3c 	xorhi	zero,r16,564
	case 0 ... 12:
		return 0;
80008d24:	0005883a 	mov	r2,zero
80008d28:	00000706 	br	80008d48 <atx_lookup_lf_resistance+0x174>
	case 13 ... 20:
		return 1;
80008d2c:	00800044 	movi	r2,1
80008d30:	00000506 	br	80008d48 <atx_lookup_lf_resistance+0x174>
	case 21 ... 30:
		return 0;
80008d34:	0005883a 	mov	r2,zero
80008d38:	00000306 	br	80008d48 <atx_lookup_lf_resistance+0x174>
	case 31 ... 70:
		return 1;
80008d3c:	00800044 	movi	r2,1
80008d40:	00000106 	br	80008d48 <atx_lookup_lf_resistance+0x174>
	default:
		return 2;
80008d44:	00800084 	movi	r2,2
	}
}
80008d48:	e037883a 	mov	sp,fp
80008d4c:	df000017 	ldw	fp,0(sp)
80008d50:	dec00104 	addi	sp,sp,4
80008d54:	f800283a 	ret

80008d58 <atx_calc_params>:
* @brief atx_calc_params
*******************************************************************************/
void atx_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_l, uint32_t *best_fvco)
{
80008d58:	defff204 	addi	sp,sp,-56
80008d5c:	df000d15 	stw	fp,52(sp)
80008d60:	df000d04 	addi	fp,sp,52
80008d64:	e13ff615 	stw	r4,-40(fp)
80008d68:	e17ff515 	stw	r5,-44(fp)
80008d6c:	e1bff415 	stw	r6,-48(fp)
80008d70:	e1fff315 	stw	r7,-52(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, l;
	uint32_t f, fvco, best_f;
	uint32_t pfd;

	*best_n = *best_m = *best_l = *best_fvco = 0;
80008d74:	e0800217 	ldw	r2,8(fp)
80008d78:	10000015 	stw	zero,0(r2)
80008d7c:	e0800217 	ldw	r2,8(fp)
80008d80:	10c00017 	ldw	r3,0(r2)
80008d84:	e0800117 	ldw	r2,4(fp)
80008d88:	10c00015 	stw	r3,0(r2)
80008d8c:	e0800117 	ldw	r2,4(fp)
80008d90:	10c00017 	ldw	r3,0(r2)
80008d94:	e0bff317 	ldw	r2,-52(fp)
80008d98:	10c00015 	stw	r3,0(r2)
80008d9c:	e0bff317 	ldw	r2,-52(fp)
80008da0:	10c00017 	ldw	r3,0(r2)
80008da4:	e0bff417 	ldw	r2,-48(fp)
80008da8:	10c00015 	stw	r3,0(r2)
	best_f = ULONG_MAX;
80008dac:	00bfffc4 	movi	r2,-1
80008db0:	e0bffc15 	stw	r2,-16(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_ATX_PLL_VCO_MIN / 2, fref_khz), 8);
80008db4:	e0fff617 	ldw	r3,-40(fp)
80008db8:	00800df4 	movhi	r2,55
80008dbc:	10bb9fc4 	addi	r2,r2,-4481
80008dc0:	1887883a 	add	r3,r3,r2
80008dc4:	e0bff617 	ldw	r2,-40(fp)
80008dc8:	1885203a 	divu	r2,r3,r2
80008dcc:	10c00228 	cmpgeui	r3,r2,8
80008dd0:	1800011e 	bne	r3,zero,80008dd8 <atx_calc_params+0x80>
80008dd4:	00800204 	movi	r2,8
80008dd8:	e0bffb15 	stw	r2,-20(fp)
	m_max = min_t(uint32_t, (A10_ATX_PLL_VCO_MAX / 2 * 8 / fref_khz), 127);
80008ddc:	0080dbf4 	movhi	r2,879
80008de0:	10ba0004 	addi	r2,r2,-6144
80008de4:	e0fff617 	ldw	r3,-40(fp)
80008de8:	10c5203a 	divu	r2,r2,r3
80008dec:	10c02030 	cmpltui	r3,r2,128
80008df0:	1800011e 	bne	r3,zero,80008df8 <atx_calc_params+0xa0>
80008df4:	00801fc4 	movi	r2,127
80008df8:	e0bffa15 	stw	r2,-24(fp)

	for (n = 1; n <= 8; n *= 2) {
80008dfc:	00800044 	movi	r2,1
80008e00:	e0bffe15 	stw	r2,-8(fp)
80008e04:	00004e06 	br	80008f40 <atx_calc_params+0x1e8>
		pfd = fref_khz / n;
80008e08:	e0fff617 	ldw	r3,-40(fp)
80008e0c:	e0bffe17 	ldw	r2,-8(fp)
80008e10:	1885203a 	divu	r2,r3,r2
80008e14:	e0bff915 	stw	r2,-28(fp)
		if (pfd < A10_ATX_PLL_PFD_MIN)
80008e18:	e0bff917 	ldw	r2,-28(fp)
80008e1c:	10bc0028 	cmpgeui	r2,r2,61440
80008e20:	10004b26 	beq	r2,zero,80008f50 <atx_calc_params+0x1f8>
			break;
		if (pfd > A10_ATX_PLL_VCO_MAX)
80008e24:	e0fff917 	ldw	r3,-28(fp)
80008e28:	00803734 	movhi	r2,220
80008e2c:	10ae8004 	addi	r2,r2,-17920
80008e30:	10c03f36 	bltu	r2,r3,80008f30 <atx_calc_params+0x1d8>
			continue;

		for (m = m_min; m <= m_max; m++) {
80008e34:	e0bffb17 	ldw	r2,-20(fp)
80008e38:	e0bfff15 	stw	r2,-4(fp)
80008e3c:	00003806 	br	80008f20 <atx_calc_params+0x1c8>
			fvco = fref_khz * m * 2 / n;
80008e40:	e0fff617 	ldw	r3,-40(fp)
80008e44:	e0bfff17 	ldw	r2,-4(fp)
80008e48:	1885383a 	mul	r2,r3,r2
80008e4c:	1085883a 	add	r2,r2,r2
80008e50:	1007883a 	mov	r3,r2
80008e54:	e0bffe17 	ldw	r2,-8(fp)
80008e58:	1885203a 	divu	r2,r3,r2
80008e5c:	e0bff815 	stw	r2,-32(fp)

			for (l = 1; l <= 16; l *= 2) {
80008e60:	00800044 	movi	r2,1
80008e64:	e0bffd15 	stw	r2,-12(fp)
80008e68:	00002706 	br	80008f08 <atx_calc_params+0x1b0>
				f = (fvco * 2) / l;
80008e6c:	e0bff817 	ldw	r2,-32(fp)
80008e70:	1085883a 	add	r2,r2,r2
80008e74:	1007883a 	mov	r3,r2
80008e78:	e0bffd17 	ldw	r2,-12(fp)
80008e7c:	1885203a 	divu	r2,r3,r2
80008e80:	e0bff715 	stw	r2,-36(fp)

				if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
80008e84:	e0fff717 	ldw	r3,-36(fp)
80008e88:	e0bff517 	ldw	r2,-44(fp)
80008e8c:	1885c83a 	sub	r2,r3,r2
80008e90:	1000010e 	bge	r2,zero,80008e98 <atx_calc_params+0x140>
80008e94:	0085c83a 	sub	r2,zero,r2
80008e98:	1009883a 	mov	r4,r2
80008e9c:	e0fffc17 	ldw	r3,-16(fp)
80008ea0:	e0bff517 	ldw	r2,-44(fp)
80008ea4:	1885c83a 	sub	r2,r3,r2
80008ea8:	1000010e 	bge	r2,zero,80008eb0 <atx_calc_params+0x158>
80008eac:	0085c83a 	sub	r2,zero,r2
80008eb0:	2080120e 	bge	r4,r2,80008efc <atx_calc_params+0x1a4>
					best_f = f;
80008eb4:	e0bff717 	ldw	r2,-36(fp)
80008eb8:	e0bffc15 	stw	r2,-16(fp)
					*best_n = n;
80008ebc:	e0bff417 	ldw	r2,-48(fp)
80008ec0:	e0fffe17 	ldw	r3,-8(fp)
80008ec4:	10c00015 	stw	r3,0(r2)
					*best_m = m;
80008ec8:	e0bff317 	ldw	r2,-52(fp)
80008ecc:	e0ffff17 	ldw	r3,-4(fp)
80008ed0:	10c00015 	stw	r3,0(r2)
					*best_l = l/2;
80008ed4:	e0bffd17 	ldw	r2,-12(fp)
80008ed8:	1006d07a 	srli	r3,r2,1
80008edc:	e0800117 	ldw	r2,4(fp)
80008ee0:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
80008ee4:	e0800217 	ldw	r2,8(fp)
80008ee8:	e0fff817 	ldw	r3,-32(fp)
80008eec:	10c00015 	stw	r3,0(r2)
					if (f == fout_khz)
80008ef0:	e0fff717 	ldw	r3,-36(fp)
80008ef4:	e0bff517 	ldw	r2,-44(fp)
80008ef8:	18801726 	beq	r3,r2,80008f58 <atx_calc_params+0x200>
			for (l = 1; l <= 16; l *= 2) {
80008efc:	e0bffd17 	ldw	r2,-12(fp)
80008f00:	1085883a 	add	r2,r2,r2
80008f04:	e0bffd15 	stw	r2,-12(fp)
80008f08:	e0bffd17 	ldw	r2,-12(fp)
80008f0c:	10800470 	cmpltui	r2,r2,17
80008f10:	103fd61e 	bne	r2,zero,80008e6c <_gp+0xfffd80f8>
		for (m = m_min; m <= m_max; m++) {
80008f14:	e0bfff17 	ldw	r2,-4(fp)
80008f18:	10800044 	addi	r2,r2,1
80008f1c:	e0bfff15 	stw	r2,-4(fp)
80008f20:	e0bfff17 	ldw	r2,-4(fp)
80008f24:	e0fffa17 	ldw	r3,-24(fp)
80008f28:	18bfc52e 	bgeu	r3,r2,80008e40 <_gp+0xfffd80cc>
80008f2c:	00000106 	br	80008f34 <atx_calc_params+0x1dc>
			continue;
80008f30:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
80008f34:	e0bffe17 	ldw	r2,-8(fp)
80008f38:	1085883a 	add	r2,r2,r2
80008f3c:	e0bffe15 	stw	r2,-8(fp)
80008f40:	e0bffe17 	ldw	r2,-8(fp)
80008f44:	10800270 	cmpltui	r2,r2,9
80008f48:	103faf1e 	bne	r2,zero,80008e08 <_gp+0xfffd8094>
80008f4c:	00000306 	br	80008f5c <atx_calc_params+0x204>
			break;
80008f50:	0001883a 	nop
80008f54:	00000106 	br	80008f5c <atx_calc_params+0x204>
						return;
80008f58:	0001883a 	nop
				}
			}
		}
	}
}
80008f5c:	e037883a 	mov	sp,fp
80008f60:	df000017 	ldw	fp,0(sp)
80008f64:	dec00104 	addi	sp,sp,4
80008f68:	f800283a 	ret

80008f6c <atx_pll_round_rate>:

/*******************************************************************************
* @brief atx_pll_round_rate
*******************************************************************************/
uint32_t atx_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
80008f6c:	defff204 	addi	sp,sp,-56
80008f70:	dfc00d15 	stw	ra,52(sp)
80008f74:	df000c15 	stw	fp,48(sp)
80008f78:	dc400b15 	stw	r17,44(sp)
80008f7c:	dc000a15 	stw	r16,40(sp)
80008f80:	df000c04 	addi	fp,sp,48
80008f84:	e13ff715 	stw	r4,-36(fp)
80008f88:	e17ff615 	stw	r5,-40(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
80008f8c:	e0bff717 	ldw	r2,-36(fp)
80008f90:	1004d07a 	srli	r2,r2,1
80008f94:	e0bffd15 	stw	r2,-12(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
80008f98:	e13ffa04 	addi	r4,fp,-24
80008f9c:	e0fffb04 	addi	r3,fp,-20
80008fa0:	e0bff804 	addi	r2,fp,-32
80008fa4:	d8800115 	stw	r2,4(sp)
80008fa8:	e0bff904 	addi	r2,fp,-28
80008fac:	d8800015 	stw	r2,0(sp)
80008fb0:	200f883a 	mov	r7,r4
80008fb4:	180d883a 	mov	r6,r3
80008fb8:	e17ffd17 	ldw	r5,-12(fp)
80008fbc:	e13ff617 	ldw	r4,-40(fp)
80008fc0:	0008d580 	call	80008d58 <atx_calc_params>

	if (n == 0 || m == 0 || l == 0)
80008fc4:	e0bffb17 	ldw	r2,-20(fp)
80008fc8:	10000426 	beq	r2,zero,80008fdc <atx_pll_round_rate+0x70>
80008fcc:	e0bffa17 	ldw	r2,-24(fp)
80008fd0:	10000226 	beq	r2,zero,80008fdc <atx_pll_round_rate+0x70>
80008fd4:	e0bff917 	ldw	r2,-28(fp)
80008fd8:	1000021e 	bne	r2,zero,80008fe4 <atx_pll_round_rate+0x78>
		return -1;
80008fdc:	00bfffc4 	movi	r2,-1
80008fe0:	00002906 	br	80009088 <atx_pll_round_rate+0x11c>

	tmp = (uint32_t)fref_khz * m * 4;
80008fe4:	e0fffa17 	ldw	r3,-24(fp)
80008fe8:	e0bff617 	ldw	r2,-40(fp)
80008fec:	1885383a 	mul	r2,r3,r2
80008ff0:	100490ba 	slli	r2,r2,2
80008ff4:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l * n);
80008ff8:	e13ffc17 	ldw	r4,-16(fp)
80008ffc:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009000:	1021883a 	mov	r16,r2
80009004:	1823883a 	mov	r17,r3
80009008:	e0fff917 	ldw	r3,-28(fp)
8000900c:	e0bffb17 	ldw	r2,-20(fp)
80009010:	1885383a 	mul	r2,r3,r2
80009014:	1009883a 	mov	r4,r2
80009018:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000901c:	1009883a 	mov	r4,r2
80009020:	180b883a 	mov	r5,r3
80009024:	200d883a 	mov	r6,r4
80009028:	280f883a 	mov	r7,r5
8000902c:	8009883a 	mov	r4,r16
80009030:	880b883a 	mov	r5,r17
80009034:	000df040 	call	8000df04 <__divdf3>
80009038:	1009883a 	mov	r4,r2
8000903c:	180b883a 	mov	r5,r3
80009040:	2005883a 	mov	r2,r4
80009044:	2807883a 	mov	r3,r5
80009048:	000d883a 	mov	r6,zero
8000904c:	01cff834 	movhi	r7,16352
80009050:	1009883a 	mov	r4,r2
80009054:	180b883a 	mov	r5,r3
80009058:	000d6440 	call	8000d644 <__adddf3>
8000905c:	1009883a 	mov	r4,r2
80009060:	180b883a 	mov	r5,r3
80009064:	2005883a 	mov	r2,r4
80009068:	2807883a 	mov	r3,r5
8000906c:	1009883a 	mov	r4,r2
80009070:	180b883a 	mov	r5,r3
80009074:	000c90c0 	call	8000c90c <__fixunsdfdi>
80009078:	1009883a 	mov	r4,r2
8000907c:	180b883a 	mov	r5,r3
80009080:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
80009084:	e0bffc17 	ldw	r2,-16(fp)
}
80009088:	e6fffe04 	addi	sp,fp,-8
8000908c:	dfc00317 	ldw	ra,12(sp)
80009090:	df000217 	ldw	fp,8(sp)
80009094:	dc400117 	ldw	r17,4(sp)
80009098:	dc000017 	ldw	r16,0(sp)
8000909c:	dec00404 	addi	sp,sp,16
800090a0:	f800283a 	ret

800090a4 <atx_pll_set_rate>:
/*******************************************************************************
* @brief atx_pll_set_rate
*******************************************************************************/
uint32_t atx_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
800090a4:	defff004 	addi	sp,sp,-64
800090a8:	dfc00f15 	stw	ra,60(sp)
800090ac:	df000e15 	stw	fp,56(sp)
800090b0:	df000e04 	addi	fp,sp,56
800090b4:	e13ff615 	stw	r4,-40(fp)
800090b8:	e17ff515 	stw	r5,-44(fp)
800090bc:	e1bff415 	stw	r6,-48(fp)
	uint32_t n, m, l, fout_khz;
	uint32_t fvco;
	uint32_t lfr, cpc, band, tank;

	fout_khz = l_rate_kbps / 2;
800090c0:	e0bff517 	ldw	r2,-44(fp)
800090c4:	1004d07a 	srli	r2,r2,1
800090c8:	e0bfff15 	stw	r2,-4(fp)

	atx_calc_params(fref_khz, fout_khz, &n, &m, &l, &fvco);
800090cc:	e13ff904 	addi	r4,fp,-28
800090d0:	e0fffa04 	addi	r3,fp,-24
800090d4:	e0bff704 	addi	r2,fp,-36
800090d8:	d8800115 	stw	r2,4(sp)
800090dc:	e0bff804 	addi	r2,fp,-32
800090e0:	d8800015 	stw	r2,0(sp)
800090e4:	200f883a 	mov	r7,r4
800090e8:	180d883a 	mov	r6,r3
800090ec:	e17fff17 	ldw	r5,-4(fp)
800090f0:	e13ff417 	ldw	r4,-48(fp)
800090f4:	0008d580 	call	80008d58 <atx_calc_params>
	printf("\tm: %d\n", m);
	printf("\tl: %d\n", l);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || l == 0)
800090f8:	e0bffa17 	ldw	r2,-24(fp)
800090fc:	10000426 	beq	r2,zero,80009110 <atx_pll_set_rate+0x6c>
80009100:	e0bff917 	ldw	r2,-28(fp)
80009104:	10000226 	beq	r2,zero,80009110 <atx_pll_set_rate+0x6c>
80009108:	e0bff817 	ldw	r2,-32(fp)
8000910c:	1000021e 	bne	r2,zero,80009118 <atx_pll_set_rate+0x74>
		return -1;
80009110:	00bfffc4 	movi	r2,-1
80009114:	00008b06 	br	80009344 <atx_pll_set_rate+0x2a0>
	// encodings
	switch (n) {
80009118:	e0bffa17 	ldw	r2,-24(fp)
8000911c:	10c000a0 	cmpeqi	r3,r2,2
80009120:	1800061e 	bne	r3,zero,8000913c <atx_pll_set_rate+0x98>
80009124:	10c00120 	cmpeqi	r3,r2,4
80009128:	1800071e 	bne	r3,zero,80009148 <atx_pll_set_rate+0xa4>
8000912c:	10800060 	cmpeqi	r2,r2,1
80009130:	10000826 	beq	r2,zero,80009154 <atx_pll_set_rate+0xb0>
	case 1:
		n = 0;
80009134:	e03ffa15 	stw	zero,-24(fp)
		break;
80009138:	00000906 	br	80009160 <atx_pll_set_rate+0xbc>
	case 2:
		n = 1;
8000913c:	00800044 	movi	r2,1
80009140:	e0bffa15 	stw	r2,-24(fp)
		break;
80009144:	00000606 	br	80009160 <atx_pll_set_rate+0xbc>
	case 4:
		n = 2;
80009148:	00800084 	movi	r2,2
8000914c:	e0bffa15 	stw	r2,-24(fp)
		break;
80009150:	00000306 	br	80009160 <atx_pll_set_rate+0xbc>
	default:
		n = 3;
80009154:	008000c4 	movi	r2,3
80009158:	e0bffa15 	stw	r2,-24(fp)
		break;
8000915c:	0001883a 	nop
	}

	switch (l) {
80009160:	e0bff817 	ldw	r2,-32(fp)
80009164:	10c000a0 	cmpeqi	r3,r2,2
80009168:	18000c1e 	bne	r3,zero,8000919c <atx_pll_set_rate+0xf8>
8000916c:	10c000e8 	cmpgeui	r3,r2,3
80009170:	1800031e 	bne	r3,zero,80009180 <atx_pll_set_rate+0xdc>
80009174:	10800060 	cmpeqi	r2,r2,1
80009178:	1000061e 	bne	r2,zero,80009194 <atx_pll_set_rate+0xf0>
8000917c:	00001006 	br	800091c0 <atx_pll_set_rate+0x11c>
80009180:	10c00120 	cmpeqi	r3,r2,4
80009184:	1800081e 	bne	r3,zero,800091a8 <atx_pll_set_rate+0x104>
80009188:	10800220 	cmpeqi	r2,r2,8
8000918c:	1000091e 	bne	r2,zero,800091b4 <atx_pll_set_rate+0x110>
80009190:	00000b06 	br	800091c0 <atx_pll_set_rate+0x11c>
	case 1:
		l = 0;
80009194:	e03ff815 	stw	zero,-32(fp)
		break;
80009198:	00000c06 	br	800091cc <atx_pll_set_rate+0x128>
	case 2:
		l = 1;
8000919c:	00800044 	movi	r2,1
800091a0:	e0bff815 	stw	r2,-32(fp)
		break;
800091a4:	00000906 	br	800091cc <atx_pll_set_rate+0x128>
	case 4:
		l = 2;
800091a8:	00800084 	movi	r2,2
800091ac:	e0bff815 	stw	r2,-32(fp)
		break;
800091b0:	00000606 	br	800091cc <atx_pll_set_rate+0x128>
	case 8:
		l = 3;
800091b4:	008000c4 	movi	r2,3
800091b8:	e0bff815 	stw	r2,-32(fp)
		break;
800091bc:	00000306 	br	800091cc <atx_pll_set_rate+0x128>
	default:
		l = 4;
800091c0:	00800104 	movi	r2,4
800091c4:	e0bff815 	stw	r2,-32(fp)
		break;
800091c8:	0001883a 	nop
	}

	lfr = atx_lookup_lf_resistance(m);
800091cc:	e0bff917 	ldw	r2,-28(fp)
800091d0:	1009883a 	mov	r4,r2
800091d4:	0008bd40 	call	80008bd4 <atx_lookup_lf_resistance>
800091d8:	e0bffe15 	stw	r2,-8(fp)
	cpc = atx_lookup_cp_current(m);
800091dc:	e0bff917 	ldw	r2,-28(fp)
800091e0:	1009883a 	mov	r4,r2
800091e4:	00089c00 	call	800089c0 <atx_lookup_cp_current>
800091e8:	e0bffd15 	stw	r2,-12(fp)
	band = atx_lookup_band(fvco);
800091ec:	e0bff717 	ldw	r2,-36(fp)
800091f0:	1009883a 	mov	r4,r2
800091f4:	00088e00 	call	800088e0 <atx_lookup_band>
800091f8:	e0bffc15 	stw	r2,-16(fp)
	tank = atx_lookup_tank(fvco);
800091fc:	e0bff717 	ldw	r2,-36(fp)
80009200:	1009883a 	mov	r4,r2
80009204:	000896c0 	call	8000896c <atx_lookup_tank>
80009208:	e0bffb15 	stw	r2,-20(fp)

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
8000920c:	e0bff617 	ldw	r2,-40(fp)
80009210:	10800d04 	addi	r2,r2,52
80009214:	1009883a 	mov	r4,r2
80009218:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

	pll_update(&(core->dev.atx_pll), 0x102, 0x1f, band | (tank << 3));
8000921c:	e0bff617 	ldw	r2,-40(fp)
80009220:	11000d04 	addi	r4,r2,52
80009224:	e0bffb17 	ldw	r2,-20(fp)
80009228:	100690fa 	slli	r3,r2,3
8000922c:	e0bffc17 	ldw	r2,-16(fp)
80009230:	1884b03a 	or	r2,r3,r2
80009234:	100f883a 	mov	r7,r2
80009238:	018007c4 	movi	r6,31
8000923c:	01404084 	movi	r5,258
80009240:	000b5cc0 	call	8000b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x104, 0x7f, ((cpc & 0x38) << 1) | 0x04 | lfr);
80009244:	e0bff617 	ldw	r2,-40(fp)
80009248:	11000d04 	addi	r4,r2,52
8000924c:	e0bffd17 	ldw	r2,-12(fp)
80009250:	1085883a 	add	r2,r2,r2
80009254:	10c01c0c 	andi	r3,r2,112
80009258:	e0bffe17 	ldw	r2,-8(fp)
8000925c:	1884b03a 	or	r2,r3,r2
80009260:	10800114 	ori	r2,r2,4
80009264:	100f883a 	mov	r7,r2
80009268:	01801fc4 	movi	r6,127
8000926c:	01404104 	movi	r5,260
80009270:	000b5cc0 	call	8000b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x105, 0x07, cpc & 0x7);
80009274:	e0bff617 	ldw	r2,-40(fp)
80009278:	10c00d04 	addi	r3,r2,52
8000927c:	e0bffd17 	ldw	r2,-12(fp)
80009280:	108001cc 	andi	r2,r2,7
80009284:	100f883a 	mov	r7,r2
80009288:	018001c4 	movi	r6,7
8000928c:	01404144 	movi	r5,261
80009290:	1809883a 	mov	r4,r3
80009294:	000b5cc0 	call	8000b5cc <pll_update>

	pll_update(&(core->dev.atx_pll), 0x107, 0x0c, n << 2);
80009298:	e0bff617 	ldw	r2,-40(fp)
8000929c:	10c00d04 	addi	r3,r2,52
800092a0:	e0bffa17 	ldw	r2,-24(fp)
800092a4:	100490ba 	slli	r2,r2,2
800092a8:	100f883a 	mov	r7,r2
800092ac:	01800304 	movi	r6,12
800092b0:	014041c4 	movi	r5,263
800092b4:	1809883a 	mov	r4,r3
800092b8:	000b5cc0 	call	8000b5cc <pll_update>
	pll_update(&(core->dev.atx_pll), 0x108, 0x07, l);
800092bc:	e0bff617 	ldw	r2,-40(fp)
800092c0:	10800d04 	addi	r2,r2,52
800092c4:	e0fff817 	ldw	r3,-32(fp)
800092c8:	180f883a 	mov	r7,r3
800092cc:	018001c4 	movi	r6,7
800092d0:	01404204 	movi	r5,264
800092d4:	1009883a 	mov	r4,r2
800092d8:	000b5cc0 	call	8000b5cc <pll_update>
	a10_pll_write(&(core->dev.atx_pll), 0x109, m);
800092dc:	e0bff617 	ldw	r2,-40(fp)
800092e0:	10800d04 	addi	r2,r2,52
800092e4:	e0fff917 	ldw	r3,-28(fp)
800092e8:	180d883a 	mov	r6,r3
800092ec:	01404244 	movi	r5,265
800092f0:	1009883a 	mov	r4,r2
800092f4:	000b5780 	call	8000b578 <a10_pll_write>

	pll_update(&(core->dev.atx_pll), XCVR_REG_CALIB_PLL_EN,
800092f8:	e0bff617 	ldw	r2,-40(fp)
800092fc:	10800d04 	addi	r2,r2,52
80009300:	01c00044 	movi	r7,1
80009304:	01800044 	movi	r6,1
80009308:	01404004 	movi	r5,256
8000930c:	1009883a 	mov	r4,r2
80009310:	000b5cc0 	call	8000b5cc <pll_update>
		XCVR_CALIB_PLL_EN_MASK, XCVR_CALIB_PLL_EN);

	altera_a10_release_arbitration(&(core->dev.atx_pll), TRUE);
80009314:	e0bff617 	ldw	r2,-40(fp)
80009318:	10800d04 	addi	r2,r2,52
8000931c:	01400044 	movi	r5,1
80009320:	1009883a 	mov	r4,r2
80009324:	000b7380 	call	8000b738 <altera_a10_release_arbitration>

	pll_calibration_check(&(core->dev.atx_pll));
80009328:	e0bff617 	ldw	r2,-40(fp)
8000932c:	10800d04 	addi	r2,r2,52
80009330:	1009883a 	mov	r4,r2
80009334:	000b7900 	call	8000b790 <pll_calibration_check>

	core->dev.atx_pll.initial_recalc = FALSE;
80009338:	e0bff617 	ldw	r2,-40(fp)
8000933c:	10000f05 	stb	zero,60(r2)

	return 0;
80009340:	0005883a 	mov	r2,zero
}
80009344:	e037883a 	mov	sp,fp
80009348:	dfc00117 	ldw	ra,4(sp)
8000934c:	df000017 	ldw	fp,0(sp)
80009350:	dec00204 	addi	sp,sp,8
80009354:	f800283a 	ret

80009358 <atx_pll_recalc_rate>:
/*******************************************************************************
* @brief atx_pll_recalc_rate
*******************************************************************************/
uint32_t atx_pll_recalc_rate(xcvr_core *core,
	uint32_t fref_khz)
{
80009358:	defff404 	addi	sp,sp,-48
8000935c:	dfc00b15 	stw	ra,44(sp)
80009360:	df000a15 	stw	fp,40(sp)
80009364:	dc400915 	stw	r17,36(sp)
80009368:	dc000815 	stw	r16,32(sp)
8000936c:	df000a04 	addi	fp,sp,40
80009370:	e13ff715 	stw	r4,-36(fp)
80009374:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, l;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(&(core->dev.atx_pll));
80009378:	e0bff717 	ldw	r2,-36(fp)
8000937c:	10800d04 	addi	r2,r2,52
80009380:	1009883a 	mov	r4,r2
80009384:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

	a10_pll_read(&(core->dev.atx_pll), 0x107, &div0);
80009388:	e0bff717 	ldw	r2,-36(fp)
8000938c:	10800d04 	addi	r2,r2,52
80009390:	e0fff904 	addi	r3,fp,-28
80009394:	180d883a 	mov	r6,r3
80009398:	014041c4 	movi	r5,263
8000939c:	1009883a 	mov	r4,r2
800093a0:	000b5200 	call	8000b520 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x108, &div1);
800093a4:	e0bff717 	ldw	r2,-36(fp)
800093a8:	10800d04 	addi	r2,r2,52
800093ac:	e0fff804 	addi	r3,fp,-32
800093b0:	180d883a 	mov	r6,r3
800093b4:	01404204 	movi	r5,264
800093b8:	1009883a 	mov	r4,r2
800093bc:	000b5200 	call	8000b520 <a10_pll_read>
	a10_pll_read(&(core->dev.atx_pll), 0x109, &m);
800093c0:	e0bff717 	ldw	r2,-36(fp)
800093c4:	10800d04 	addi	r2,r2,52
800093c8:	e0fffa04 	addi	r3,fp,-24
800093cc:	180d883a 	mov	r6,r3
800093d0:	01404244 	movi	r5,265
800093d4:	1009883a 	mov	r4,r2
800093d8:	000b5200 	call	8000b520 <a10_pll_read>

	altera_a10_release_arbitration(&(core->dev.atx_pll), FALSE);
800093dc:	e0bff717 	ldw	r2,-36(fp)
800093e0:	10800d04 	addi	r2,r2,52
800093e4:	000b883a 	mov	r5,zero
800093e8:	1009883a 	mov	r4,r2
800093ec:	000b7380 	call	8000b738 <altera_a10_release_arbitration>

	n = 1 << ((div0 >> 2) & 0x3);
800093f0:	e0bff917 	ldw	r2,-28(fp)
800093f4:	1004d0ba 	srli	r2,r2,2
800093f8:	108000cc 	andi	r2,r2,3
800093fc:	00c00044 	movi	r3,1
80009400:	1884983a 	sll	r2,r3,r2
80009404:	e0bffd15 	stw	r2,-12(fp)
	l = 1 << (div1 & 0x7);
80009408:	e0bff817 	ldw	r2,-32(fp)
8000940c:	108001cc 	andi	r2,r2,7
80009410:	00c00044 	movi	r3,1
80009414:	1884983a 	sll	r2,r3,r2
80009418:	e0bffc15 	stw	r2,-16(fp)

	tmp = (uint32_t)fref_khz * m;
8000941c:	e0bffa17 	ldw	r2,-24(fp)
80009420:	e0fff617 	ldw	r3,-40(fp)
80009424:	1885383a 	mul	r2,r3,r2
80009428:	e0bffb15 	stw	r2,-20(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, l*n/2);
8000942c:	e13ffb17 	ldw	r4,-20(fp)
80009430:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009434:	1021883a 	mov	r16,r2
80009438:	1823883a 	mov	r17,r3
8000943c:	e0fffc17 	ldw	r3,-16(fp)
80009440:	e0bffd17 	ldw	r2,-12(fp)
80009444:	1885383a 	mul	r2,r3,r2
80009448:	1004d07a 	srli	r2,r2,1
8000944c:	1009883a 	mov	r4,r2
80009450:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009454:	1009883a 	mov	r4,r2
80009458:	180b883a 	mov	r5,r3
8000945c:	200d883a 	mov	r6,r4
80009460:	280f883a 	mov	r7,r5
80009464:	8009883a 	mov	r4,r16
80009468:	880b883a 	mov	r5,r17
8000946c:	000df040 	call	8000df04 <__divdf3>
80009470:	1009883a 	mov	r4,r2
80009474:	180b883a 	mov	r5,r3
80009478:	2005883a 	mov	r2,r4
8000947c:	2807883a 	mov	r3,r5
80009480:	000d883a 	mov	r6,zero
80009484:	01cff834 	movhi	r7,16352
80009488:	1009883a 	mov	r4,r2
8000948c:	180b883a 	mov	r5,r3
80009490:	000d6440 	call	8000d644 <__adddf3>
80009494:	1009883a 	mov	r4,r2
80009498:	180b883a 	mov	r5,r3
8000949c:	2005883a 	mov	r2,r4
800094a0:	2807883a 	mov	r3,r5
800094a4:	1009883a 	mov	r4,r2
800094a8:	180b883a 	mov	r5,r3
800094ac:	000c90c0 	call	8000c90c <__fixunsdfdi>
800094b0:	1009883a 	mov	r4,r2
800094b4:	180b883a 	mov	r5,r3
800094b8:	e13ffb15 	stw	r4,-20(fp)

	if (tmp != 0 && core->dev.atx_pll.initial_recalc)
800094bc:	e0bffb17 	ldw	r2,-20(fp)
800094c0:	10000826 	beq	r2,zero,800094e4 <atx_pll_recalc_rate+0x18c>
800094c4:	e0bff717 	ldw	r2,-36(fp)
800094c8:	10800f03 	ldbu	r2,60(r2)
800094cc:	10803fcc 	andi	r2,r2,255
800094d0:	10000426 	beq	r2,zero,800094e4 <atx_pll_recalc_rate+0x18c>
		atx_pll_set_rate(core, tmp, fref_khz);
800094d4:	e1bff617 	ldw	r6,-40(fp)
800094d8:	e17ffb17 	ldw	r5,-20(fp)
800094dc:	e13ff717 	ldw	r4,-36(fp)
800094e0:	00090a40 	call	800090a4 <atx_pll_set_rate>

	return min_t(uint32_t, tmp * 2, ULONG_MAX);
800094e4:	e0bffb17 	ldw	r2,-20(fp)
800094e8:	1085883a 	add	r2,r2,r2
}
800094ec:	e6fffe04 	addi	sp,fp,-8
800094f0:	dfc00317 	ldw	ra,12(sp)
800094f4:	df000217 	ldw	fp,8(sp)
800094f8:	dc400117 	ldw	r17,4(sp)
800094fc:	dc000017 	ldw	r16,0(sp)
80009500:	dec00404 	addi	sp,sp,16
80009504:	f800283a 	ret

80009508 <fpll_lookup_lf_resistance>:
/*******************************************************************************
* @brief fpll_lookup_lf_resistance
*******************************************************************************/
uint32_t fpll_lookup_lf_resistance(uint32_t fvco,
	uint32_t m)
{
80009508:	defffd04 	addi	sp,sp,-12
8000950c:	df000215 	stw	fp,8(sp)
80009510:	df000204 	addi	fp,sp,8
80009514:	e13fff15 	stw	r4,-4(fp)
80009518:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
8000951c:	e0ffff17 	ldw	r3,-4(fp)
80009520:	00802274 	movhi	r2,137
80009524:	10950fc4 	addi	r2,r2,21567
80009528:	10c01136 	bltu	r2,r3,80009570 <fpll_lookup_lf_resistance+0x68>
		switch (m) {
8000952c:	e0bffe17 	ldw	r2,-8(fp)
80009530:	10c00828 	cmpgeui	r3,r2,32
80009534:	1800031e 	bne	r3,zero,80009544 <fpll_lookup_lf_resistance+0x3c>
80009538:	10800428 	cmpgeui	r2,r2,16
8000953c:	1000061e 	bne	r2,zero,80009558 <fpll_lookup_lf_resistance+0x50>
80009540:	00000306 	br	80009550 <fpll_lookup_lf_resistance+0x48>
80009544:	10801228 	cmpgeui	r2,r2,72
80009548:	1000071e 	bne	r2,zero,80009568 <fpll_lookup_lf_resistance+0x60>
8000954c:	00000406 	br	80009560 <fpll_lookup_lf_resistance+0x58>
		case 0 ... 15:
			return 2;
80009550:	00800084 	movi	r2,2
80009554:	00002606 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
80009558:	0005883a 	mov	r2,zero
8000955c:	00002406 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
80009560:	00800044 	movi	r2,1
80009564:	00002206 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
80009568:	008000c4 	movi	r2,3
8000956c:	00002006 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		}
	} else if (fvco < 12000000) {
80009570:	e0ffff17 	ldw	r3,-4(fp)
80009574:	00802df4 	movhi	r2,183
80009578:	1086bfc4 	addi	r2,r2,6911
8000957c:	10c01136 	bltu	r2,r3,800095c4 <fpll_lookup_lf_resistance+0xbc>
		switch (m) {
80009580:	e0bffe17 	ldw	r2,-8(fp)
80009584:	10c00828 	cmpgeui	r3,r2,32
80009588:	1800031e 	bne	r3,zero,80009598 <fpll_lookup_lf_resistance+0x90>
8000958c:	10800428 	cmpgeui	r2,r2,16
80009590:	1000061e 	bne	r2,zero,800095ac <fpll_lookup_lf_resistance+0xa4>
80009594:	00000306 	br	800095a4 <fpll_lookup_lf_resistance+0x9c>
80009598:	10801228 	cmpgeui	r2,r2,72
8000959c:	1000071e 	bne	r2,zero,800095bc <fpll_lookup_lf_resistance+0xb4>
800095a0:	00000406 	br	800095b4 <fpll_lookup_lf_resistance+0xac>
		case 0 ... 15:
			return 2;
800095a4:	00800084 	movi	r2,2
800095a8:	00001106 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		case 16 ... 31:
			return 0;
800095ac:	0005883a 	mov	r2,zero
800095b0:	00000f06 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		case 32 ... 71:
			return 1;
800095b4:	00800044 	movi	r2,1
800095b8:	00000d06 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
800095bc:	008000c4 	movi	r2,3
800095c0:	00000b06 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		}
	} else {
		switch (m) {
800095c4:	e0bffe17 	ldw	r2,-8(fp)
800095c8:	10c00630 	cmpltui	r3,r2,24
800095cc:	1800031e 	bne	r3,zero,800095dc <fpll_lookup_lf_resistance+0xd4>
800095d0:	10800e28 	cmpgeui	r2,r2,56
800095d4:	1000051e 	bne	r2,zero,800095ec <fpll_lookup_lf_resistance+0xe4>
800095d8:	00000206 	br	800095e4 <fpll_lookup_lf_resistance+0xdc>
		case 0 ... 23:
			return 0;
800095dc:	0005883a 	mov	r2,zero
800095e0:	00000306 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		case 24 ... 55:
			return 1;
800095e4:	00800044 	movi	r2,1
800095e8:	00000106 	br	800095f0 <fpll_lookup_lf_resistance+0xe8>
		default:
			return 3;
800095ec:	008000c4 	movi	r2,3
		}
	}
}
800095f0:	e037883a 	mov	sp,fp
800095f4:	df000017 	ldw	fp,0(sp)
800095f8:	dec00104 	addi	sp,sp,4
800095fc:	f800283a 	ret

80009600 <fpll_lookup_cp_current>:
/*******************************************************************************
* @brief fpll_lookup_cp_current
*******************************************************************************/
int32_t fpll_lookup_cp_current(uint32_t fvco,
	uint32_t m)
{
80009600:	defffd04 	addi	sp,sp,-12
80009604:	df000215 	stw	fp,8(sp)
80009608:	df000204 	addi	fp,sp,8
8000960c:	e13fff15 	stw	r4,-4(fp)
80009610:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 9000000) {
80009614:	e0ffff17 	ldw	r3,-4(fp)
80009618:	00802274 	movhi	r2,137
8000961c:	10950fc4 	addi	r2,r2,21567
80009620:	10c08136 	bltu	r2,r3,80009828 <fpll_lookup_cp_current+0x228>
		switch (m) {
80009624:	e0bffe17 	ldw	r2,-8(fp)
80009628:	10801a28 	cmpgeui	r2,r2,104
8000962c:	10007c1e 	bne	r2,zero,80009820 <fpll_lookup_cp_current+0x220>
80009630:	e0bffe17 	ldw	r2,-8(fp)
80009634:	100690ba 	slli	r3,r2,2
80009638:	00a00074 	movhi	r2,32769
8000963c:	1885883a 	add	r2,r3,r2
80009640:	10a59217 	ldw	r2,-27064(r2)
80009644:	1000683a 	jmp	r2
80009648:	800097e8 	cmpgeui	zero,r16,607
8000964c:	800097e8 	cmpgeui	zero,r16,607
80009650:	800097e8 	cmpgeui	zero,r16,607
80009654:	800097e8 	cmpgeui	zero,r16,607
80009658:	800097e8 	cmpgeui	zero,r16,607
8000965c:	800097e8 	cmpgeui	zero,r16,607
80009660:	800097e8 	cmpgeui	zero,r16,607
80009664:	800097e8 	cmpgeui	zero,r16,607
80009668:	800097e8 	cmpgeui	zero,r16,607
8000966c:	800097e8 	cmpgeui	zero,r16,607
80009670:	800097e8 	cmpgeui	zero,r16,607
80009674:	800097e8 	cmpgeui	zero,r16,607
80009678:	800097e8 	cmpgeui	zero,r16,607
8000967c:	800097e8 	cmpgeui	zero,r16,607
80009680:	800097e8 	cmpgeui	zero,r16,607
80009684:	800097e8 	cmpgeui	zero,r16,607
80009688:	800097f0 	cmpltui	zero,r16,607
8000968c:	800097f0 	cmpltui	zero,r16,607
80009690:	800097f0 	cmpltui	zero,r16,607
80009694:	800097f0 	cmpltui	zero,r16,607
80009698:	800097f0 	cmpltui	zero,r16,607
8000969c:	800097f0 	cmpltui	zero,r16,607
800096a0:	800097f0 	cmpltui	zero,r16,607
800096a4:	800097f0 	cmpltui	zero,r16,607
800096a8:	800097f8 	rdprs	zero,r16,607
800096ac:	800097f8 	rdprs	zero,r16,607
800096b0:	800097f8 	rdprs	zero,r16,607
800096b4:	800097f8 	rdprs	zero,r16,607
800096b8:	800097f8 	rdprs	zero,r16,607
800096bc:	800097f8 	rdprs	zero,r16,607
800096c0:	800097f8 	rdprs	zero,r16,607
800096c4:	800097f8 	rdprs	zero,r16,607
800096c8:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096cc:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096d0:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096d4:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096d8:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096dc:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096e0:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096e4:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096e8:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096ec:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096f0:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096f4:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096f8:	80009800 	call	88000980 <_gp+0x7fcfc0c>
800096fc:	80009800 	call	88000980 <_gp+0x7fcfc0c>
80009700:	80009800 	call	88000980 <_gp+0x7fcfc0c>
80009704:	80009800 	call	88000980 <_gp+0x7fcfc0c>
80009708:	80009808 	cmpgei	zero,r16,608
8000970c:	80009808 	cmpgei	zero,r16,608
80009710:	80009808 	cmpgei	zero,r16,608
80009714:	80009808 	cmpgei	zero,r16,608
80009718:	80009808 	cmpgei	zero,r16,608
8000971c:	80009808 	cmpgei	zero,r16,608
80009720:	80009808 	cmpgei	zero,r16,608
80009724:	80009808 	cmpgei	zero,r16,608
80009728:	80009810 	cmplti	zero,r16,608
8000972c:	80009810 	cmplti	zero,r16,608
80009730:	80009810 	cmplti	zero,r16,608
80009734:	80009810 	cmplti	zero,r16,608
80009738:	80009810 	cmplti	zero,r16,608
8000973c:	80009810 	cmplti	zero,r16,608
80009740:	80009810 	cmplti	zero,r16,608
80009744:	80009810 	cmplti	zero,r16,608
80009748:	80009810 	cmplti	zero,r16,608
8000974c:	80009810 	cmplti	zero,r16,608
80009750:	80009810 	cmplti	zero,r16,608
80009754:	80009810 	cmplti	zero,r16,608
80009758:	80009810 	cmplti	zero,r16,608
8000975c:	80009810 	cmplti	zero,r16,608
80009760:	80009810 	cmplti	zero,r16,608
80009764:	80009810 	cmplti	zero,r16,608
80009768:	80009818 	cmpnei	zero,r16,608
8000976c:	80009818 	cmpnei	zero,r16,608
80009770:	80009818 	cmpnei	zero,r16,608
80009774:	80009818 	cmpnei	zero,r16,608
80009778:	80009818 	cmpnei	zero,r16,608
8000977c:	80009818 	cmpnei	zero,r16,608
80009780:	80009818 	cmpnei	zero,r16,608
80009784:	80009818 	cmpnei	zero,r16,608
80009788:	80009818 	cmpnei	zero,r16,608
8000978c:	80009818 	cmpnei	zero,r16,608
80009790:	80009818 	cmpnei	zero,r16,608
80009794:	80009818 	cmpnei	zero,r16,608
80009798:	80009818 	cmpnei	zero,r16,608
8000979c:	80009818 	cmpnei	zero,r16,608
800097a0:	80009818 	cmpnei	zero,r16,608
800097a4:	80009818 	cmpnei	zero,r16,608
800097a8:	80009818 	cmpnei	zero,r16,608
800097ac:	80009818 	cmpnei	zero,r16,608
800097b0:	80009818 	cmpnei	zero,r16,608
800097b4:	80009818 	cmpnei	zero,r16,608
800097b8:	80009818 	cmpnei	zero,r16,608
800097bc:	80009818 	cmpnei	zero,r16,608
800097c0:	80009818 	cmpnei	zero,r16,608
800097c4:	80009818 	cmpnei	zero,r16,608
800097c8:	80009818 	cmpnei	zero,r16,608
800097cc:	80009818 	cmpnei	zero,r16,608
800097d0:	80009818 	cmpnei	zero,r16,608
800097d4:	80009818 	cmpnei	zero,r16,608
800097d8:	80009818 	cmpnei	zero,r16,608
800097dc:	80009818 	cmpnei	zero,r16,608
800097e0:	80009818 	cmpnei	zero,r16,608
800097e4:	80009818 	cmpnei	zero,r16,608
		case 0 ... 15:
			return 29;
800097e8:	00800744 	movi	r2,29
800097ec:	0000d706 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 28;
800097f0:	00800704 	movi	r2,28
800097f4:	0000d506 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 29;
800097f8:	00800744 	movi	r2,29
800097fc:	0000d306 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 32 ... 47:
			return 28;
80009800:	00800704 	movi	r2,28
80009804:	0000d106 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 48 ... 55:
			return 29;
80009808:	00800744 	movi	r2,29
8000980c:	0000cf06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 71:
			return 36;
80009810:	00800904 	movi	r2,36
80009814:	0000cd06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 72 ... 103:
			return 29;
80009818:	00800744 	movi	r2,29
8000981c:	0000cb06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
80009820:	00800904 	movi	r2,36
80009824:	0000c906 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		}
	} else if (fvco < 12000000) {
80009828:	e0ffff17 	ldw	r3,-4(fp)
8000982c:	00802df4 	movhi	r2,183
80009830:	1086bfc4 	addi	r2,r2,6911
80009834:	10c07136 	bltu	r2,r3,800099fc <fpll_lookup_cp_current+0x3fc>
		switch (m) {
80009838:	e0bffe17 	ldw	r2,-8(fp)
8000983c:	10801628 	cmpgeui	r2,r2,88
80009840:	10006c1e 	bne	r2,zero,800099f4 <fpll_lookup_cp_current+0x3f4>
80009844:	e0bffe17 	ldw	r2,-8(fp)
80009848:	100690ba 	slli	r3,r2,2
8000984c:	00a00074 	movhi	r2,32769
80009850:	1885883a 	add	r2,r3,r2
80009854:	10a61717 	ldw	r2,-26532(r2)
80009858:	1000683a 	jmp	r2
8000985c:	800099bc 	xorhi	zero,r16,614
80009860:	800099bc 	xorhi	zero,r16,614
80009864:	800099bc 	xorhi	zero,r16,614
80009868:	800099bc 	xorhi	zero,r16,614
8000986c:	800099bc 	xorhi	zero,r16,614
80009870:	800099bc 	xorhi	zero,r16,614
80009874:	800099bc 	xorhi	zero,r16,614
80009878:	800099bc 	xorhi	zero,r16,614
8000987c:	800099bc 	xorhi	zero,r16,614
80009880:	800099bc 	xorhi	zero,r16,614
80009884:	800099bc 	xorhi	zero,r16,614
80009888:	800099bc 	xorhi	zero,r16,614
8000988c:	800099bc 	xorhi	zero,r16,614
80009890:	800099bc 	xorhi	zero,r16,614
80009894:	800099bc 	xorhi	zero,r16,614
80009898:	800099bc 	xorhi	zero,r16,614
8000989c:	800099c4 	addi	zero,r16,615
800098a0:	800099c4 	addi	zero,r16,615
800098a4:	800099c4 	addi	zero,r16,615
800098a8:	800099c4 	addi	zero,r16,615
800098ac:	800099c4 	addi	zero,r16,615
800098b0:	800099c4 	addi	zero,r16,615
800098b4:	800099c4 	addi	zero,r16,615
800098b8:	800099c4 	addi	zero,r16,615
800098bc:	800099cc 	andi	zero,r16,615
800098c0:	800099cc 	andi	zero,r16,615
800098c4:	800099cc 	andi	zero,r16,615
800098c8:	800099cc 	andi	zero,r16,615
800098cc:	800099cc 	andi	zero,r16,615
800098d0:	800099cc 	andi	zero,r16,615
800098d4:	800099cc 	andi	zero,r16,615
800098d8:	800099cc 	andi	zero,r16,615
800098dc:	800099d4 	ori	zero,r16,615
800098e0:	800099d4 	ori	zero,r16,615
800098e4:	800099d4 	ori	zero,r16,615
800098e8:	800099d4 	ori	zero,r16,615
800098ec:	800099d4 	ori	zero,r16,615
800098f0:	800099d4 	ori	zero,r16,615
800098f4:	800099d4 	ori	zero,r16,615
800098f8:	800099d4 	ori	zero,r16,615
800098fc:	800099dc 	xori	zero,r16,615
80009900:	800099dc 	xori	zero,r16,615
80009904:	800099dc 	xori	zero,r16,615
80009908:	800099dc 	xori	zero,r16,615
8000990c:	800099dc 	xori	zero,r16,615
80009910:	800099dc 	xori	zero,r16,615
80009914:	800099dc 	xori	zero,r16,615
80009918:	800099dc 	xori	zero,r16,615
8000991c:	800099dc 	xori	zero,r16,615
80009920:	800099dc 	xori	zero,r16,615
80009924:	800099dc 	xori	zero,r16,615
80009928:	800099dc 	xori	zero,r16,615
8000992c:	800099dc 	xori	zero,r16,615
80009930:	800099dc 	xori	zero,r16,615
80009934:	800099dc 	xori	zero,r16,615
80009938:	800099dc 	xori	zero,r16,615
8000993c:	800099e4 	muli	zero,r16,615
80009940:	800099e4 	muli	zero,r16,615
80009944:	800099e4 	muli	zero,r16,615
80009948:	800099e4 	muli	zero,r16,615
8000994c:	800099e4 	muli	zero,r16,615
80009950:	800099e4 	muli	zero,r16,615
80009954:	800099e4 	muli	zero,r16,615
80009958:	800099e4 	muli	zero,r16,615
8000995c:	800099e4 	muli	zero,r16,615
80009960:	800099e4 	muli	zero,r16,615
80009964:	800099e4 	muli	zero,r16,615
80009968:	800099e4 	muli	zero,r16,615
8000996c:	800099e4 	muli	zero,r16,615
80009970:	800099e4 	muli	zero,r16,615
80009974:	800099e4 	muli	zero,r16,615
80009978:	800099e4 	muli	zero,r16,615
8000997c:	800099e4 	muli	zero,r16,615
80009980:	800099e4 	muli	zero,r16,615
80009984:	800099e4 	muli	zero,r16,615
80009988:	800099e4 	muli	zero,r16,615
8000998c:	800099e4 	muli	zero,r16,615
80009990:	800099e4 	muli	zero,r16,615
80009994:	800099e4 	muli	zero,r16,615
80009998:	800099e4 	muli	zero,r16,615
8000999c:	800099ec 	andhi	zero,r16,615
800099a0:	800099ec 	andhi	zero,r16,615
800099a4:	800099ec 	andhi	zero,r16,615
800099a8:	800099ec 	andhi	zero,r16,615
800099ac:	800099ec 	andhi	zero,r16,615
800099b0:	800099ec 	andhi	zero,r16,615
800099b4:	800099ec 	andhi	zero,r16,615
800099b8:	800099ec 	andhi	zero,r16,615
		case 0 ... 15:
			return 36;
800099bc:	00800904 	movi	r2,36
800099c0:	00006206 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 29;
800099c4:	00800744 	movi	r2,29
800099c8:	00006006 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 31:
			return 36;
800099cc:	00800904 	movi	r2,36
800099d0:	00005e06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 32 ... 39:
			return 28;
800099d4:	00800704 	movi	r2,28
800099d8:	00005c06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 29;
800099dc:	00800744 	movi	r2,29
800099e0:	00005a06 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 79:
			return 36;
800099e4:	00800904 	movi	r2,36
800099e8:	00005806 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 80 ... 87:
			return 29;
800099ec:	00800744 	movi	r2,29
800099f0:	00005606 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
800099f4:	00800904 	movi	r2,36
800099f8:	00005406 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		}
	} else {
		switch (m) {
800099fc:	e0bffe17 	ldw	r2,-8(fp)
80009a00:	10801028 	cmpgeui	r2,r2,64
80009a04:	1000501e 	bne	r2,zero,80009b48 <fpll_lookup_cp_current+0x548>
80009a08:	e0bffe17 	ldw	r2,-8(fp)
80009a0c:	100690ba 	slli	r3,r2,2
80009a10:	00a00074 	movhi	r2,32769
80009a14:	1885883a 	add	r2,r3,r2
80009a18:	10a68817 	ldw	r2,-26080(r2)
80009a1c:	1000683a 	jmp	r2
80009a20:	80009b20 	cmpeqi	zero,r16,620
80009a24:	80009b20 	cmpeqi	zero,r16,620
80009a28:	80009b20 	cmpeqi	zero,r16,620
80009a2c:	80009b20 	cmpeqi	zero,r16,620
80009a30:	80009b20 	cmpeqi	zero,r16,620
80009a34:	80009b20 	cmpeqi	zero,r16,620
80009a38:	80009b20 	cmpeqi	zero,r16,620
80009a3c:	80009b20 	cmpeqi	zero,r16,620
80009a40:	80009b20 	cmpeqi	zero,r16,620
80009a44:	80009b20 	cmpeqi	zero,r16,620
80009a48:	80009b20 	cmpeqi	zero,r16,620
80009a4c:	80009b20 	cmpeqi	zero,r16,620
80009a50:	80009b20 	cmpeqi	zero,r16,620
80009a54:	80009b20 	cmpeqi	zero,r16,620
80009a58:	80009b20 	cmpeqi	zero,r16,620
80009a5c:	80009b20 	cmpeqi	zero,r16,620
80009a60:	80009b28 	cmpgeui	zero,r16,620
80009a64:	80009b28 	cmpgeui	zero,r16,620
80009a68:	80009b28 	cmpgeui	zero,r16,620
80009a6c:	80009b28 	cmpgeui	zero,r16,620
80009a70:	80009b28 	cmpgeui	zero,r16,620
80009a74:	80009b28 	cmpgeui	zero,r16,620
80009a78:	80009b28 	cmpgeui	zero,r16,620
80009a7c:	80009b28 	cmpgeui	zero,r16,620
80009a80:	80009b30 	cmpltui	zero,r16,620
80009a84:	80009b30 	cmpltui	zero,r16,620
80009a88:	80009b30 	cmpltui	zero,r16,620
80009a8c:	80009b30 	cmpltui	zero,r16,620
80009a90:	80009b30 	cmpltui	zero,r16,620
80009a94:	80009b30 	cmpltui	zero,r16,620
80009a98:	80009b30 	cmpltui	zero,r16,620
80009a9c:	80009b30 	cmpltui	zero,r16,620
80009aa0:	80009b30 	cmpltui	zero,r16,620
80009aa4:	80009b30 	cmpltui	zero,r16,620
80009aa8:	80009b30 	cmpltui	zero,r16,620
80009aac:	80009b30 	cmpltui	zero,r16,620
80009ab0:	80009b30 	cmpltui	zero,r16,620
80009ab4:	80009b30 	cmpltui	zero,r16,620
80009ab8:	80009b30 	cmpltui	zero,r16,620
80009abc:	80009b30 	cmpltui	zero,r16,620
80009ac0:	80009b38 	rdprs	zero,r16,620
80009ac4:	80009b38 	rdprs	zero,r16,620
80009ac8:	80009b38 	rdprs	zero,r16,620
80009acc:	80009b38 	rdprs	zero,r16,620
80009ad0:	80009b38 	rdprs	zero,r16,620
80009ad4:	80009b38 	rdprs	zero,r16,620
80009ad8:	80009b38 	rdprs	zero,r16,620
80009adc:	80009b38 	rdprs	zero,r16,620
80009ae0:	80009b38 	rdprs	zero,r16,620
80009ae4:	80009b38 	rdprs	zero,r16,620
80009ae8:	80009b38 	rdprs	zero,r16,620
80009aec:	80009b38 	rdprs	zero,r16,620
80009af0:	80009b38 	rdprs	zero,r16,620
80009af4:	80009b38 	rdprs	zero,r16,620
80009af8:	80009b38 	rdprs	zero,r16,620
80009afc:	80009b38 	rdprs	zero,r16,620
80009b00:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b04:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b08:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b0c:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b10:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b14:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b18:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
80009b1c:	80009b40 	call	880009b4 <_gp+0x7fcfc40>
		case 0 ... 15:
			return 28;
80009b20:	00800704 	movi	r2,28
80009b24:	00000906 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 16 ... 23:
			return 36;
80009b28:	00800904 	movi	r2,36
80009b2c:	00000706 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 24 ... 39:
			return 29;
80009b30:	00800744 	movi	r2,29
80009b34:	00000506 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 40 ... 55:
			return 36;
80009b38:	00800904 	movi	r2,36
80009b3c:	00000306 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		case 56 ... 63:
			return 29;
80009b40:	00800744 	movi	r2,29
80009b44:	00000106 	br	80009b4c <fpll_lookup_cp_current+0x54c>
		default:
			return 36;
80009b48:	00800904 	movi	r2,36
		}
	}
}
80009b4c:	e037883a 	mov	sp,fp
80009b50:	df000017 	ldw	fp,0(sp)
80009b54:	dec00104 	addi	sp,sp,4
80009b58:	f800283a 	ret

80009b5c <fpll_calc_params>:
* @brief fpll_calc_params
*******************************************************************************/
int32_t fpll_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_c0, uint32_t *best_fvco)
{
80009b5c:	deffec04 	addi	sp,sp,-80
80009b60:	dfc01315 	stw	ra,76(sp)
80009b64:	df001215 	stw	fp,72(sp)
80009b68:	dc401115 	stw	r17,68(sp)
80009b6c:	dc001015 	stw	r16,64(sp)
80009b70:	df001204 	addi	fp,sp,72
80009b74:	e13ff115 	stw	r4,-60(fp)
80009b78:	e17ff015 	stw	r5,-64(fp)
80009b7c:	e1bfef15 	stw	r6,-68(fp)
80009b80:	e1ffee15 	stw	r7,-72(fp)
	uint32_t n, n_min, n_max, _n_min, _n_max;
	uint32_t m, m_min, m_max;
	uint32_t c0;
	uint32_t f, fvco, best_f;

	*best_n = *best_m = *best_c0 = *best_fvco = 0;
80009b84:	e0800317 	ldw	r2,12(fp)
80009b88:	10000015 	stw	zero,0(r2)
80009b8c:	e0800317 	ldw	r2,12(fp)
80009b90:	10c00017 	ldw	r3,0(r2)
80009b94:	e0800217 	ldw	r2,8(fp)
80009b98:	10c00015 	stw	r3,0(r2)
80009b9c:	e0800217 	ldw	r2,8(fp)
80009ba0:	10c00017 	ldw	r3,0(r2)
80009ba4:	e0bfee17 	ldw	r2,-72(fp)
80009ba8:	10c00015 	stw	r3,0(r2)
80009bac:	e0bfee17 	ldw	r2,-72(fp)
80009bb0:	10c00017 	ldw	r3,0(r2)
80009bb4:	e0bfef17 	ldw	r2,-68(fp)
80009bb8:	10c00015 	stw	r3,0(r2)

	best_f = ULONG_MAX;
80009bbc:	00bfffc4 	movi	r2,-1
80009bc0:	e0bffb15 	stw	r2,-20(fp)

	n_min = max_t(uint32_t, DIV_ROUND_UP(fref_khz, A10_FPLL_PFD_MAX), 1);
80009bc4:	e0fff117 	ldw	r3,-60(fp)
80009bc8:	00ba97d4 	movui	r2,59999
80009bcc:	1887883a 	add	r3,r3,r2
80009bd0:	008000b4 	movhi	r2,2
80009bd4:	10b52fc4 	addi	r2,r2,-11073
80009bd8:	10c0062e 	bgeu	r2,r3,80009bf4 <fpll_calc_params+0x98>
80009bdc:	e0fff117 	ldw	r3,-60(fp)
80009be0:	00ba97d4 	movui	r2,59999
80009be4:	1887883a 	add	r3,r3,r2
80009be8:	00ba9814 	movui	r2,60000
80009bec:	1885203a 	divu	r2,r3,r2
80009bf0:	00000106 	br	80009bf8 <fpll_calc_params+0x9c>
80009bf4:	00800044 	movi	r2,1
80009bf8:	e0bffa15 	stw	r2,-24(fp)
	n_max = min_t(uint32_t, fref_khz / A10_FPLL_PFD_MIN, 31);
80009bfc:	e0fff117 	ldw	r3,-60(fp)
80009c00:	00800334 	movhi	r2,12
80009c04:	10b4d5c4 	addi	r2,r2,-11433
80009c08:	10c00436 	bltu	r2,r3,80009c1c <fpll_calc_params+0xc0>
80009c0c:	e0fff117 	ldw	r3,-60(fp)
80009c10:	00986a04 	movi	r2,25000
80009c14:	1885203a 	divu	r2,r3,r2
80009c18:	00000106 	br	80009c20 <fpll_calc_params+0xc4>
80009c1c:	008007c4 	movi	r2,31
80009c20:	e0bff915 	stw	r2,-28(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_FPLL_VCO_MIN / 2, fref_khz) * n_min, 8);
80009c24:	e0fff117 	ldw	r3,-60(fp)
80009c28:	00800974 	movhi	r2,37
80009c2c:	10a7bfc4 	addi	r2,r2,-24833
80009c30:	1887883a 	add	r3,r3,r2
80009c34:	e0bff117 	ldw	r2,-60(fp)
80009c38:	1887203a 	divu	r3,r3,r2
80009c3c:	e0bffa17 	ldw	r2,-24(fp)
80009c40:	1885383a 	mul	r2,r3,r2
80009c44:	10c00228 	cmpgeui	r3,r2,8
80009c48:	1800011e 	bne	r3,zero,80009c50 <fpll_calc_params+0xf4>
80009c4c:	00800204 	movi	r2,8
80009c50:	e0bff815 	stw	r2,-32(fp)
	m_max = min_t(uint32_t, A10_FPLL_VCO_MAX / 2 * n_max / fref_khz, 127);
80009c54:	e0fff917 	ldw	r3,-28(fp)
80009c58:	00801af4 	movhi	r2,107
80009c5c:	10802504 	addi	r2,r2,148
80009c60:	1887383a 	mul	r3,r3,r2
80009c64:	e0bff117 	ldw	r2,-60(fp)
80009c68:	1885203a 	divu	r2,r3,r2
80009c6c:	10c02030 	cmpltui	r3,r2,128
80009c70:	1800011e 	bne	r3,zero,80009c78 <fpll_calc_params+0x11c>
80009c74:	00801fc4 	movi	r2,127
80009c78:	e0bff715 	stw	r2,-36(fp)
	m_min = ROUND_UP(m_min, 2);
80009c7c:	e0bff817 	ldw	r2,-32(fp)
80009c80:	10800044 	addi	r2,r2,1
80009c84:	1004d07a 	srli	r2,r2,1
80009c88:	e0bff815 	stw	r2,-32(fp)

	for (m = m_min; m < m_max; m += 1) {
80009c8c:	e0bff817 	ldw	r2,-32(fp)
80009c90:	e0bffc15 	stw	r2,-16(fp)
80009c94:	00007906 	br	80009e7c <fpll_calc_params+0x320>
		_n_min = max_t(uint32_t, n_min, DIV_ROUND_UP(fref_khz * m, A10_FPLL_VCO_MAX / 2));
80009c98:	e0fff117 	ldw	r3,-60(fp)
80009c9c:	e0bffc17 	ldw	r2,-16(fp)
80009ca0:	1887383a 	mul	r3,r3,r2
80009ca4:	00801af4 	movhi	r2,107
80009ca8:	108024c4 	addi	r2,r2,147
80009cac:	1887883a 	add	r3,r3,r2
80009cb0:	00801af4 	movhi	r2,107
80009cb4:	10802504 	addi	r2,r2,148
80009cb8:	1887203a 	divu	r3,r3,r2
80009cbc:	e0bffa17 	ldw	r2,-24(fp)
80009cc0:	10c0012e 	bgeu	r2,r3,80009cc8 <fpll_calc_params+0x16c>
80009cc4:	1805883a 	mov	r2,r3
80009cc8:	e0bff615 	stw	r2,-40(fp)
		_n_max = min_t(uint32_t, n_max, fref_khz * m / (A10_FPLL_VCO_MIN / 2));
80009ccc:	e0fff117 	ldw	r3,-60(fp)
80009cd0:	e0bffc17 	ldw	r2,-16(fp)
80009cd4:	1887383a 	mul	r3,r3,r2
80009cd8:	00800974 	movhi	r2,37
80009cdc:	10a7c004 	addi	r2,r2,-24832
80009ce0:	1887203a 	divu	r3,r3,r2
80009ce4:	e0bff917 	ldw	r2,-28(fp)
80009ce8:	1880012e 	bgeu	r3,r2,80009cf0 <fpll_calc_params+0x194>
80009cec:	1805883a 	mov	r2,r3
80009cf0:	e0bff515 	stw	r2,-44(fp)

		for (n = _n_min; n <= _n_max; n++) {
80009cf4:	e0bff617 	ldw	r2,-40(fp)
80009cf8:	e0bffd15 	stw	r2,-12(fp)
80009cfc:	00005906 	br	80009e64 <fpll_calc_params+0x308>
			fvco = fref_khz * m * 2 / n;
80009d00:	e0fff117 	ldw	r3,-60(fp)
80009d04:	e0bffc17 	ldw	r2,-16(fp)
80009d08:	1885383a 	mul	r2,r3,r2
80009d0c:	1085883a 	add	r2,r2,r2
80009d10:	1007883a 	mov	r3,r2
80009d14:	e0bffd17 	ldw	r2,-12(fp)
80009d18:	1885203a 	divu	r2,r3,r2
80009d1c:	e0bff415 	stw	r2,-48(fp)

			c0 = DIV_ROUND_CLOSEST(fvco, fout_khz * 4);
80009d20:	e13ff417 	ldw	r4,-48(fp)
80009d24:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009d28:	1021883a 	mov	r16,r2
80009d2c:	1823883a 	mov	r17,r3
80009d30:	e0bff017 	ldw	r2,-64(fp)
80009d34:	100490ba 	slli	r2,r2,2
80009d38:	1009883a 	mov	r4,r2
80009d3c:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009d40:	1009883a 	mov	r4,r2
80009d44:	180b883a 	mov	r5,r3
80009d48:	200d883a 	mov	r6,r4
80009d4c:	280f883a 	mov	r7,r5
80009d50:	8009883a 	mov	r4,r16
80009d54:	880b883a 	mov	r5,r17
80009d58:	000df040 	call	8000df04 <__divdf3>
80009d5c:	1009883a 	mov	r4,r2
80009d60:	180b883a 	mov	r5,r3
80009d64:	2005883a 	mov	r2,r4
80009d68:	2807883a 	mov	r3,r5
80009d6c:	000d883a 	mov	r6,zero
80009d70:	01cff834 	movhi	r7,16352
80009d74:	1009883a 	mov	r4,r2
80009d78:	180b883a 	mov	r5,r3
80009d7c:	000d6440 	call	8000d644 <__adddf3>
80009d80:	1009883a 	mov	r4,r2
80009d84:	180b883a 	mov	r5,r3
80009d88:	2005883a 	mov	r2,r4
80009d8c:	2807883a 	mov	r3,r5
80009d90:	1009883a 	mov	r4,r2
80009d94:	180b883a 	mov	r5,r3
80009d98:	000c8980 	call	8000c898 <__fixunsdfsi>
80009d9c:	e0bff315 	stw	r2,-52(fp)
			c0 = clamp_t(uint32_t, c0, 1, 512);
80009da0:	e0bff317 	ldw	r2,-52(fp)
80009da4:	108000b0 	cmpltui	r2,r2,2
80009da8:	1000051e 	bne	r2,zero,80009dc0 <fpll_calc_params+0x264>
80009dac:	e0bff317 	ldw	r2,-52(fp)
80009db0:	10c08070 	cmpltui	r3,r2,513
80009db4:	1800031e 	bne	r3,zero,80009dc4 <fpll_calc_params+0x268>
80009db8:	00808004 	movi	r2,512
80009dbc:	00000106 	br	80009dc4 <fpll_calc_params+0x268>
80009dc0:	00800044 	movi	r2,1
80009dc4:	e0bff315 	stw	r2,-52(fp)
			f = fvco / (c0 * 4);
80009dc8:	e0bff317 	ldw	r2,-52(fp)
80009dcc:	100490ba 	slli	r2,r2,2
80009dd0:	e0fff417 	ldw	r3,-48(fp)
80009dd4:	1885203a 	divu	r2,r3,r2
80009dd8:	e0bff215 	stw	r2,-56(fp)

			if (abs(f - fout_khz) < abs(best_f - fout_khz)) {
80009ddc:	e0fff217 	ldw	r3,-56(fp)
80009de0:	e0bff017 	ldw	r2,-64(fp)
80009de4:	1885c83a 	sub	r2,r3,r2
80009de8:	1000010e 	bge	r2,zero,80009df0 <fpll_calc_params+0x294>
80009dec:	0085c83a 	sub	r2,zero,r2
80009df0:	1009883a 	mov	r4,r2
80009df4:	e0fffb17 	ldw	r3,-20(fp)
80009df8:	e0bff017 	ldw	r2,-64(fp)
80009dfc:	1885c83a 	sub	r2,r3,r2
80009e00:	1000010e 	bge	r2,zero,80009e08 <fpll_calc_params+0x2ac>
80009e04:	0085c83a 	sub	r2,zero,r2
80009e08:	2080130e 	bge	r4,r2,80009e58 <fpll_calc_params+0x2fc>
				best_f = f;
80009e0c:	e0bff217 	ldw	r2,-56(fp)
80009e10:	e0bffb15 	stw	r2,-20(fp)
				*best_n = n;
80009e14:	e0bfef17 	ldw	r2,-68(fp)
80009e18:	e0fffd17 	ldw	r3,-12(fp)
80009e1c:	10c00015 	stw	r3,0(r2)
				*best_m = m;
80009e20:	e0bfee17 	ldw	r2,-72(fp)
80009e24:	e0fffc17 	ldw	r3,-16(fp)
80009e28:	10c00015 	stw	r3,0(r2)
				*best_c0 = c0;
80009e2c:	e0800217 	ldw	r2,8(fp)
80009e30:	e0fff317 	ldw	r3,-52(fp)
80009e34:	10c00015 	stw	r3,0(r2)
				*best_fvco = fvco;
80009e38:	e0800317 	ldw	r2,12(fp)
80009e3c:	e0fff417 	ldw	r3,-48(fp)
80009e40:	10c00015 	stw	r3,0(r2)
				if (f == fout_khz)
80009e44:	e0fff217 	ldw	r3,-56(fp)
80009e48:	e0bff017 	ldw	r2,-64(fp)
80009e4c:	1880021e 	bne	r3,r2,80009e58 <fpll_calc_params+0x2fc>
					return 0;
80009e50:	0005883a 	mov	r2,zero
80009e54:	00000d06 	br	80009e8c <fpll_calc_params+0x330>
		for (n = _n_min; n <= _n_max; n++) {
80009e58:	e0bffd17 	ldw	r2,-12(fp)
80009e5c:	10800044 	addi	r2,r2,1
80009e60:	e0bffd15 	stw	r2,-12(fp)
80009e64:	e0bffd17 	ldw	r2,-12(fp)
80009e68:	e0fff517 	ldw	r3,-44(fp)
80009e6c:	18bfa42e 	bgeu	r3,r2,80009d00 <_gp+0xfffd8f8c>
	for (m = m_min; m < m_max; m += 1) {
80009e70:	e0bffc17 	ldw	r2,-16(fp)
80009e74:	10800044 	addi	r2,r2,1
80009e78:	e0bffc15 	stw	r2,-16(fp)
80009e7c:	e0fffc17 	ldw	r3,-16(fp)
80009e80:	e0bff717 	ldw	r2,-36(fp)
80009e84:	18bf8436 	bltu	r3,r2,80009c98 <_gp+0xfffd8f24>
			}
		}
	}

	return -1;
80009e88:	00bfffc4 	movi	r2,-1
}
80009e8c:	e6fffe04 	addi	sp,fp,-8
80009e90:	dfc00317 	ldw	ra,12(sp)
80009e94:	df000217 	ldw	fp,8(sp)
80009e98:	dc400117 	ldw	r17,4(sp)
80009e9c:	dc000017 	ldw	r16,0(sp)
80009ea0:	dec00404 	addi	sp,sp,16
80009ea4:	f800283a 	ret

80009ea8 <fpll_round_rate>:

/*******************************************************************************
* @brief fpll_round_rate
*******************************************************************************/
uint32_t fpll_round_rate(uint32_t fout_khz, uint32_t fref_khz)
{
80009ea8:	defff304 	addi	sp,sp,-52
80009eac:	dfc00c15 	stw	ra,48(sp)
80009eb0:	df000b15 	stw	fp,44(sp)
80009eb4:	dc400a15 	stw	r17,40(sp)
80009eb8:	dc000915 	stw	r16,36(sp)
80009ebc:	df000b04 	addi	fp,sp,44
80009ec0:	e13ff815 	stw	r4,-32(fp)
80009ec4:	e17ff715 	stw	r5,-36(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t tmp;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
80009ec8:	e13ffb04 	addi	r4,fp,-20
80009ecc:	e0fffc04 	addi	r3,fp,-16
80009ed0:	e0bff904 	addi	r2,fp,-28
80009ed4:	d8800115 	stw	r2,4(sp)
80009ed8:	e0bffa04 	addi	r2,fp,-24
80009edc:	d8800015 	stw	r2,0(sp)
80009ee0:	200f883a 	mov	r7,r4
80009ee4:	180d883a 	mov	r6,r3
80009ee8:	e17ff817 	ldw	r5,-32(fp)
80009eec:	e13ff717 	ldw	r4,-36(fp)
80009ef0:	0009b5c0 	call	80009b5c <fpll_calc_params>

	if (n == 0 || m == 0 || c0 == 0)
80009ef4:	e0bffc17 	ldw	r2,-16(fp)
80009ef8:	10000426 	beq	r2,zero,80009f0c <fpll_round_rate+0x64>
80009efc:	e0bffb17 	ldw	r2,-20(fp)
80009f00:	10000226 	beq	r2,zero,80009f0c <fpll_round_rate+0x64>
80009f04:	e0bffa17 	ldw	r2,-24(fp)
80009f08:	1000021e 	bne	r2,zero,80009f14 <fpll_round_rate+0x6c>
		return -1;
80009f0c:	00bfffc4 	movi	r2,-1
80009f10:	00002906 	br	80009fb8 <fpll_round_rate+0x110>

	tmp = (uint32_t)fref_khz * m;
80009f14:	e0bffb17 	ldw	r2,-20(fp)
80009f18:	e0fff717 	ldw	r3,-36(fp)
80009f1c:	1885383a 	mul	r2,r3,r2
80009f20:	e0bffd15 	stw	r2,-12(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, c0 * n * 2);
80009f24:	e13ffd17 	ldw	r4,-12(fp)
80009f28:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009f2c:	1021883a 	mov	r16,r2
80009f30:	1823883a 	mov	r17,r3
80009f34:	e0fffa17 	ldw	r3,-24(fp)
80009f38:	e0bffc17 	ldw	r2,-16(fp)
80009f3c:	1885383a 	mul	r2,r3,r2
80009f40:	1085883a 	add	r2,r2,r2
80009f44:	1009883a 	mov	r4,r2
80009f48:	000f8e00 	call	8000f8e0 <__floatunsidf>
80009f4c:	1009883a 	mov	r4,r2
80009f50:	180b883a 	mov	r5,r3
80009f54:	200d883a 	mov	r6,r4
80009f58:	280f883a 	mov	r7,r5
80009f5c:	8009883a 	mov	r4,r16
80009f60:	880b883a 	mov	r5,r17
80009f64:	000df040 	call	8000df04 <__divdf3>
80009f68:	1009883a 	mov	r4,r2
80009f6c:	180b883a 	mov	r5,r3
80009f70:	2005883a 	mov	r2,r4
80009f74:	2807883a 	mov	r3,r5
80009f78:	000d883a 	mov	r6,zero
80009f7c:	01cff834 	movhi	r7,16352
80009f80:	1009883a 	mov	r4,r2
80009f84:	180b883a 	mov	r5,r3
80009f88:	000d6440 	call	8000d644 <__adddf3>
80009f8c:	1009883a 	mov	r4,r2
80009f90:	180b883a 	mov	r5,r3
80009f94:	2005883a 	mov	r2,r4
80009f98:	2807883a 	mov	r3,r5
80009f9c:	1009883a 	mov	r4,r2
80009fa0:	180b883a 	mov	r5,r3
80009fa4:	000c90c0 	call	8000c90c <__fixunsdfdi>
80009fa8:	1009883a 	mov	r4,r2
80009fac:	180b883a 	mov	r5,r3
80009fb0:	e13ffd15 	stw	r4,-12(fp)

	// fout frequency
	return min_t(uint32_t, tmp, LONG_MAX);
80009fb4:	e0bffd17 	ldw	r2,-12(fp)
}
80009fb8:	e6fffe04 	addi	sp,fp,-8
80009fbc:	dfc00317 	ldw	ra,12(sp)
80009fc0:	df000217 	ldw	fp,8(sp)
80009fc4:	dc400117 	ldw	r17,4(sp)
80009fc8:	dc000017 	ldw	r16,0(sp)
80009fcc:	dec00404 	addi	sp,sp,16
80009fd0:	f800283a 	ret

80009fd4 <fpll_set_rate>:
/*******************************************************************************
* @brief fpll_set_rate
*******************************************************************************/
int32_t fpll_set_rate(xcvr_pll *fpll, uint32_t fout_khz,
	uint32_t fref_khz)
{
80009fd4:	defff104 	addi	sp,sp,-60
80009fd8:	dfc00e15 	stw	ra,56(sp)
80009fdc:	df000d15 	stw	fp,52(sp)
80009fe0:	df000d04 	addi	fp,sp,52
80009fe4:	e13ff715 	stw	r4,-36(fp)
80009fe8:	e17ff615 	stw	r5,-40(fp)
80009fec:	e1bff515 	stw	r6,-44(fp)
	uint32_t n, m, c0;
	uint32_t fvco;
	uint32_t div0, div1;
	uint32_t lfr, cpc;

	fpll_calc_params(fref_khz, fout_khz, &n, &m, &c0, &fvco);
80009ff0:	e13ffa04 	addi	r4,fp,-24
80009ff4:	e0fffb04 	addi	r3,fp,-20
80009ff8:	e0bff804 	addi	r2,fp,-32
80009ffc:	d8800115 	stw	r2,4(sp)
8000a000:	e0bff904 	addi	r2,fp,-28
8000a004:	d8800015 	stw	r2,0(sp)
8000a008:	200f883a 	mov	r7,r4
8000a00c:	180d883a 	mov	r6,r3
8000a010:	e17ff617 	ldw	r5,-40(fp)
8000a014:	e13ff517 	ldw	r4,-44(fp)
8000a018:	0009b5c0 	call	80009b5c <fpll_calc_params>
	printf("\tm: %d\n", m);
	printf("\tc0: %d\n", c0);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || c0 == 0)
8000a01c:	e0bffb17 	ldw	r2,-20(fp)
8000a020:	10000426 	beq	r2,zero,8000a034 <fpll_set_rate+0x60>
8000a024:	e0bffa17 	ldw	r2,-24(fp)
8000a028:	10000226 	beq	r2,zero,8000a034 <fpll_set_rate+0x60>
8000a02c:	e0bff917 	ldw	r2,-28(fp)
8000a030:	1000021e 	bne	r2,zero,8000a03c <fpll_set_rate+0x68>
		return -1;
8000a034:	00bfffc4 	movi	r2,-1
8000a038:	00005b06 	br	8000a1a8 <fpll_set_rate+0x1d4>

	lfr = fpll_lookup_lf_resistance(fvco, m);
8000a03c:	e0bff817 	ldw	r2,-32(fp)
8000a040:	e0fffa17 	ldw	r3,-24(fp)
8000a044:	180b883a 	mov	r5,r3
8000a048:	1009883a 	mov	r4,r2
8000a04c:	00095080 	call	80009508 <fpll_lookup_lf_resistance>
8000a050:	e0bfff15 	stw	r2,-4(fp)
	cpc = fpll_lookup_cp_current(fvco, m);
8000a054:	e0bff817 	ldw	r2,-32(fp)
8000a058:	e0fffa17 	ldw	r3,-24(fp)
8000a05c:	180b883a 	mov	r5,r3
8000a060:	1009883a 	mov	r4,r2
8000a064:	00096000 	call	80009600 <fpll_lookup_cp_current>
8000a068:	e0bffe15 	stw	r2,-8(fp)

	if (c0 >= 512)
8000a06c:	e0bff917 	ldw	r2,-28(fp)
8000a070:	10808030 	cmpltui	r2,r2,512
8000a074:	1000011e 	bne	r2,zero,8000a07c <fpll_set_rate+0xa8>
		c0 = 0;
8000a078:	e03ff915 	stw	zero,-28(fp)

	div0 = m & 0xff;
8000a07c:	e0bffa17 	ldw	r2,-24(fp)
8000a080:	10803fcc 	andi	r2,r2,255
8000a084:	e0bffd15 	stw	r2,-12(fp)
	div1 = ((n << 3) & 0xf8);
8000a088:	e0bffb17 	ldw	r2,-20(fp)
8000a08c:	100490fa 	slli	r2,r2,3
8000a090:	10803fcc 	andi	r2,r2,255
8000a094:	e0bffc15 	stw	r2,-16(fp)

	altera_a10_acquire_arbitration(fpll);
8000a098:	e13ff717 	ldw	r4,-36(fp)
8000a09c:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER0, div0);
8000a0a0:	e1bffd17 	ldw	r6,-12(fp)
8000a0a4:	01404ac4 	movi	r5,299
8000a0a8:	e13ff717 	ldw	r4,-36(fp)
8000a0ac:	000b5780 	call	8000b578 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_DIV_COUNTER1, div1);
8000a0b0:	e1bffc17 	ldw	r6,-16(fp)
8000a0b4:	01404b04 	movi	r5,300
8000a0b8:	e13ff717 	ldw	r4,-36(fp)
8000a0bc:	000b5780 	call	8000b578 <a10_pll_write>

	div0 = c0 & 0xff;
8000a0c0:	e0bff917 	ldw	r2,-28(fp)
8000a0c4:	10803fcc 	andi	r2,r2,255
8000a0c8:	e0bffd15 	stw	r2,-12(fp)
	div1 = (c0 & 0x100) >> 4;
8000a0cc:	e0bff917 	ldw	r2,-28(fp)
8000a0d0:	1004d13a 	srli	r2,r2,4
8000a0d4:	1080040c 	andi	r2,r2,16
8000a0d8:	e0bffc15 	stw	r2,-16(fp)

	a10_pll_write(fpll, FPLL_REG_C_COUNTER2, m / 2);
8000a0dc:	e0bffa17 	ldw	r2,-24(fp)
8000a0e0:	1004d07a 	srli	r2,r2,1
8000a0e4:	100d883a 	mov	r6,r2
8000a0e8:	014043c4 	movi	r5,271
8000a0ec:	e13ff717 	ldw	r4,-36(fp)
8000a0f0:	000b5780 	call	8000b578 <a10_pll_write>
	a10_pll_write(fpll, FPLL_REG_C_COUNTER3, div0);
8000a0f4:	e1bffd17 	ldw	r6,-12(fp)
8000a0f8:	01404404 	movi	r5,272
8000a0fc:	e13ff717 	ldw	r4,-36(fp)
8000a100:	000b5780 	call	8000b578 <a10_pll_write>
	pll_update(fpll, FPLL_REG_C_COUNTER4, 0x0f, div1);
8000a104:	e1fffc17 	ldw	r7,-16(fp)
8000a108:	018003c4 	movi	r6,15
8000a10c:	01404444 	movi	r5,273
8000a110:	e13ff717 	ldw	r4,-36(fp)
8000a114:	000b5cc0 	call	8000b5cc <pll_update>

	pll_update(fpll, 0x133, 0x0c, lfr << 2);
8000a118:	e0bfff17 	ldw	r2,-4(fp)
8000a11c:	100490ba 	slli	r2,r2,2
8000a120:	100f883a 	mov	r7,r2
8000a124:	01800304 	movi	r6,12
8000a128:	01404cc4 	movi	r5,307
8000a12c:	e13ff717 	ldw	r4,-36(fp)
8000a130:	000b5cc0 	call	8000b5cc <pll_update>
	pll_update(fpll, 0x134, 0x70, (cpc & 0x7) << 4);
8000a134:	e0bffe17 	ldw	r2,-8(fp)
8000a138:	1004913a 	slli	r2,r2,4
8000a13c:	10801c0c 	andi	r2,r2,112
8000a140:	100f883a 	mov	r7,r2
8000a144:	01801c04 	movi	r6,112
8000a148:	01404d04 	movi	r5,308
8000a14c:	e13ff717 	ldw	r4,-36(fp)
8000a150:	000b5cc0 	call	8000b5cc <pll_update>
	pll_update(fpll, 0x135, 0x07, (cpc & 0x38) >> 3);
8000a154:	e0bffe17 	ldw	r2,-8(fp)
8000a158:	1004d0fa 	srli	r2,r2,3
8000a15c:	108001cc 	andi	r2,r2,7
8000a160:	100f883a 	mov	r7,r2
8000a164:	018001c4 	movi	r6,7
8000a168:	01404d44 	movi	r5,309
8000a16c:	e13ff717 	ldw	r4,-36(fp)
8000a170:	000b5cc0 	call	8000b5cc <pll_update>

	pll_update(fpll, 0x100, 0x2, 0x2);
8000a174:	01c00084 	movi	r7,2
8000a178:	01800084 	movi	r6,2
8000a17c:	01404004 	movi	r5,256
8000a180:	e13ff717 	ldw	r4,-36(fp)
8000a184:	000b5cc0 	call	8000b5cc <pll_update>
	altera_a10_release_arbitration(fpll, TRUE);
8000a188:	01400044 	movi	r5,1
8000a18c:	e13ff717 	ldw	r4,-36(fp)
8000a190:	000b7380 	call	8000b738 <altera_a10_release_arbitration>
	pll_calibration_check(fpll);
8000a194:	e13ff717 	ldw	r4,-36(fp)
8000a198:	000b7900 	call	8000b790 <pll_calibration_check>

	fpll->initial_recalc = FALSE;
8000a19c:	e0bff717 	ldw	r2,-36(fp)
8000a1a0:	10000205 	stb	zero,8(r2)

	return 0;
8000a1a4:	0005883a 	mov	r2,zero
}
8000a1a8:	e037883a 	mov	sp,fp
8000a1ac:	dfc00117 	ldw	ra,4(sp)
8000a1b0:	df000017 	ldw	fp,0(sp)
8000a1b4:	dec00204 	addi	sp,sp,8
8000a1b8:	f800283a 	ret

8000a1bc <fpll_recalc_rate>:
/*******************************************************************************
* @brief fpll_recalc_rate
*******************************************************************************/
uint32_t fpll_recalc_rate(xcvr_pll *fpll,
	uint32_t fref_khz)
{
8000a1bc:	defff404 	addi	sp,sp,-48
8000a1c0:	dfc00b15 	stw	ra,44(sp)
8000a1c4:	df000a15 	stw	fp,40(sp)
8000a1c8:	dc400915 	stw	r17,36(sp)
8000a1cc:	dc000815 	stw	r16,32(sp)
8000a1d0:	df000a04 	addi	fp,sp,40
8000a1d4:	e13ff715 	stw	r4,-36(fp)
8000a1d8:	e17ff615 	stw	r5,-40(fp)
	uint32_t m, n, c0;
	uint32_t tmp;
	uint32_t div0, div1;

	altera_a10_acquire_arbitration(fpll);
8000a1dc:	e13ff717 	ldw	r4,-36(fp)
8000a1e0:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER0, &div0);
8000a1e4:	e0bff904 	addi	r2,fp,-28
8000a1e8:	100d883a 	mov	r6,r2
8000a1ec:	01404ac4 	movi	r5,299
8000a1f0:	e13ff717 	ldw	r4,-36(fp)
8000a1f4:	000b5200 	call	8000b520 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_DIV_COUNTER1, &div1);
8000a1f8:	e0bff804 	addi	r2,fp,-32
8000a1fc:	100d883a 	mov	r6,r2
8000a200:	01404b04 	movi	r5,300
8000a204:	e13ff717 	ldw	r4,-36(fp)
8000a208:	000b5200 	call	8000b520 <a10_pll_read>

	n = (div1 >> 3) & 0x1f;
8000a20c:	e0bff817 	ldw	r2,-32(fp)
8000a210:	1004d0fa 	srli	r2,r2,3
8000a214:	108007cc 	andi	r2,r2,31
8000a218:	e0bffc15 	stw	r2,-16(fp)
	m = div0 | ((div1 & 0x1) << 8);
8000a21c:	e0bff817 	ldw	r2,-32(fp)
8000a220:	1004923a 	slli	r2,r2,8
8000a224:	10c0400c 	andi	r3,r2,256
8000a228:	e0bff917 	ldw	r2,-28(fp)
8000a22c:	1884b03a 	or	r2,r3,r2
8000a230:	e0bffd15 	stw	r2,-12(fp)

	if (m == 0)
8000a234:	e0bffd17 	ldw	r2,-12(fp)
8000a238:	1000021e 	bne	r2,zero,8000a244 <fpll_recalc_rate+0x88>
		m = 512;
8000a23c:	00808004 	movi	r2,512
8000a240:	e0bffd15 	stw	r2,-12(fp)

	 a10_pll_read(fpll, FPLL_REG_C_COUNTER3, &div0);
8000a244:	e0bff904 	addi	r2,fp,-28
8000a248:	100d883a 	mov	r6,r2
8000a24c:	01404404 	movi	r5,272
8000a250:	e13ff717 	ldw	r4,-36(fp)
8000a254:	000b5200 	call	8000b520 <a10_pll_read>
	 a10_pll_read(fpll, FPLL_REG_C_COUNTER4, &div1);
8000a258:	e0bff804 	addi	r2,fp,-32
8000a25c:	100d883a 	mov	r6,r2
8000a260:	01404444 	movi	r5,273
8000a264:	e13ff717 	ldw	r4,-36(fp)
8000a268:	000b5200 	call	8000b520 <a10_pll_read>

	altera_a10_release_arbitration(fpll, FALSE);
8000a26c:	000b883a 	mov	r5,zero
8000a270:	e13ff717 	ldw	r4,-36(fp)
8000a274:	000b7380 	call	8000b738 <altera_a10_release_arbitration>

	c0 = div0 | ((div1 & 0x8) << 5);
8000a278:	e0bff817 	ldw	r2,-32(fp)
8000a27c:	1004917a 	slli	r2,r2,5
8000a280:	10c0400c 	andi	r3,r2,256
8000a284:	e0bff917 	ldw	r2,-28(fp)
8000a288:	1884b03a 	or	r2,r3,r2
8000a28c:	e0bffb15 	stw	r2,-20(fp)

	if (c0 == 0 || n == 0)
8000a290:	e0bffb17 	ldw	r2,-20(fp)
8000a294:	10000226 	beq	r2,zero,8000a2a0 <fpll_recalc_rate+0xe4>
8000a298:	e0bffc17 	ldw	r2,-16(fp)
8000a29c:	1000021e 	bne	r2,zero,8000a2a8 <fpll_recalc_rate+0xec>
		return 0;
8000a2a0:	0005883a 	mov	r2,zero
8000a2a4:	00003106 	br	8000a36c <fpll_recalc_rate+0x1b0>

	// round rate
	tmp = (uint32_t)fref_khz * m;
8000a2a8:	e0fff617 	ldw	r3,-40(fp)
8000a2ac:	e0bffd17 	ldw	r2,-12(fp)
8000a2b0:	1885383a 	mul	r2,r3,r2
8000a2b4:	e0bffa15 	stw	r2,-24(fp)
	tmp = DIV_ROUND_CLOSEST(tmp, c0 * n * 2);
8000a2b8:	e13ffa17 	ldw	r4,-24(fp)
8000a2bc:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000a2c0:	1021883a 	mov	r16,r2
8000a2c4:	1823883a 	mov	r17,r3
8000a2c8:	e0fffb17 	ldw	r3,-20(fp)
8000a2cc:	e0bffc17 	ldw	r2,-16(fp)
8000a2d0:	1885383a 	mul	r2,r3,r2
8000a2d4:	1085883a 	add	r2,r2,r2
8000a2d8:	1009883a 	mov	r4,r2
8000a2dc:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000a2e0:	1009883a 	mov	r4,r2
8000a2e4:	180b883a 	mov	r5,r3
8000a2e8:	200d883a 	mov	r6,r4
8000a2ec:	280f883a 	mov	r7,r5
8000a2f0:	8009883a 	mov	r4,r16
8000a2f4:	880b883a 	mov	r5,r17
8000a2f8:	000df040 	call	8000df04 <__divdf3>
8000a2fc:	1009883a 	mov	r4,r2
8000a300:	180b883a 	mov	r5,r3
8000a304:	2005883a 	mov	r2,r4
8000a308:	2807883a 	mov	r3,r5
8000a30c:	000d883a 	mov	r6,zero
8000a310:	01cff834 	movhi	r7,16352
8000a314:	1009883a 	mov	r4,r2
8000a318:	180b883a 	mov	r5,r3
8000a31c:	000d6440 	call	8000d644 <__adddf3>
8000a320:	1009883a 	mov	r4,r2
8000a324:	180b883a 	mov	r5,r3
8000a328:	2005883a 	mov	r2,r4
8000a32c:	2807883a 	mov	r3,r5
8000a330:	1009883a 	mov	r4,r2
8000a334:	180b883a 	mov	r5,r3
8000a338:	000c8980 	call	8000c898 <__fixunsdfsi>
8000a33c:	e0bffa15 	stw	r2,-24(fp)

	/*
	 * Recalc configuration in case ref clock is not the same as in the FPGA
	 * project.
	 */
	if (tmp != 0 && fpll->initial_recalc)
8000a340:	e0bffa17 	ldw	r2,-24(fp)
8000a344:	10000826 	beq	r2,zero,8000a368 <fpll_recalc_rate+0x1ac>
8000a348:	e0bff717 	ldw	r2,-36(fp)
8000a34c:	10800203 	ldbu	r2,8(r2)
8000a350:	10803fcc 	andi	r2,r2,255
8000a354:	10000426 	beq	r2,zero,8000a368 <fpll_recalc_rate+0x1ac>
		fpll_set_rate(fpll, tmp, fref_khz);
8000a358:	e1bff617 	ldw	r6,-40(fp)
8000a35c:	e17ffa17 	ldw	r5,-24(fp)
8000a360:	e13ff717 	ldw	r4,-36(fp)
8000a364:	0009fd40 	call	80009fd4 <fpll_set_rate>

	return min_t(uint32_t, tmp, ULONG_MAX);
8000a368:	e0bffa17 	ldw	r2,-24(fp)
}
8000a36c:	e6fffe04 	addi	sp,fp,-8
8000a370:	dfc00317 	ldw	ra,12(sp)
8000a374:	df000217 	ldw	fp,8(sp)
8000a378:	dc400117 	ldw	r17,4(sp)
8000a37c:	dc000017 	ldw	r16,0(sp)
8000a380:	dec00404 	addi	sp,sp,16
8000a384:	f800283a 	ret

8000a388 <altera_a10_cdr_lookup_vco_speed>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed(uint32_t fvco)
{
8000a388:	defffe04 	addi	sp,sp,-8
8000a38c:	df000115 	stw	fp,4(sp)
8000a390:	df000104 	addi	fp,sp,4
8000a394:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 7000000)
8000a398:	e0ffff17 	ldw	r3,-4(fp)
8000a39c:	00801af4 	movhi	r2,107
8000a3a0:	10b3efc4 	addi	r2,r2,-12353
8000a3a4:	10c00236 	bltu	r2,r3,8000a3b0 <altera_a10_cdr_lookup_vco_speed+0x28>
		return 3;
8000a3a8:	008000c4 	movi	r2,3
8000a3ac:	00000706 	br	8000a3cc <altera_a10_cdr_lookup_vco_speed+0x44>
	else if (fvco < 12500000)
8000a3b0:	e0ffff17 	ldw	r3,-4(fp)
8000a3b4:	00802ff4 	movhi	r2,191
8000a3b8:	10af07c4 	addi	r2,r2,-17377
8000a3bc:	10c00236 	bltu	r2,r3,8000a3c8 <altera_a10_cdr_lookup_vco_speed+0x40>
		return 2;
8000a3c0:	00800084 	movi	r2,2
8000a3c4:	00000106 	br	8000a3cc <altera_a10_cdr_lookup_vco_speed+0x44>
	else
		return 0;
8000a3c8:	0005883a 	mov	r2,zero
}
8000a3cc:	e037883a 	mov	sp,fp
8000a3d0:	df000017 	ldw	fp,0(sp)
8000a3d4:	dec00104 	addi	sp,sp,4
8000a3d8:	f800283a 	ret

8000a3dc <altera_a10_cdr_lookup_vco_speed_fix>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_vco_speed_fix
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_vco_speed_fix(uint32_t fvco)
{
8000a3dc:	defffe04 	addi	sp,sp,-8
8000a3e0:	df000115 	stw	fp,4(sp)
8000a3e4:	df000104 	addi	fp,sp,4
8000a3e8:	e13fff15 	stw	r4,-4(fp)
	if (fvco < 6060000)
8000a3ec:	e0ffff17 	ldw	r3,-4(fp)
8000a3f0:	00801734 	movhi	r2,92
8000a3f4:	109df7c4 	addi	r2,r2,30687
8000a3f8:	10c00236 	bltu	r2,r3,8000a404 <altera_a10_cdr_lookup_vco_speed_fix+0x28>
		return 60;
8000a3fc:	00800f04 	movi	r2,60
8000a400:	00001f06 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 7060000)
8000a404:	e0ffff17 	ldw	r3,-4(fp)
8000a408:	00801b34 	movhi	r2,108
8000a40c:	10ae87c4 	addi	r2,r2,-17889
8000a410:	10c00236 	bltu	r2,r3,8000a41c <altera_a10_cdr_lookup_vco_speed_fix+0x40>
		return 74;
8000a414:	00801284 	movi	r2,74
8000a418:	00001906 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 9060000)
8000a41c:	e0ffff17 	ldw	r3,-4(fp)
8000a420:	008022b4 	movhi	r2,138
8000a424:	108fa7c4 	addi	r2,r2,16031
8000a428:	10c00236 	bltu	r2,r3,8000a434 <altera_a10_cdr_lookup_vco_speed_fix+0x58>
		return 90;
8000a42c:	00801684 	movi	r2,90
8000a430:	00001306 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 11350000)
8000a434:	e0ffff17 	ldw	r3,-4(fp)
8000a438:	00802b74 	movhi	r2,173
8000a43c:	108bfbc4 	addi	r2,r2,12271
8000a440:	10c00236 	bltu	r2,r3,8000a44c <altera_a10_cdr_lookup_vco_speed_fix+0x70>
		return 116;
8000a444:	00801d04 	movi	r2,116
8000a448:	00000d06 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 12760000)
8000a44c:	e0ffff17 	ldw	r3,-4(fp)
8000a450:	008030f4 	movhi	r2,195
8000a454:	10acefc4 	addi	r2,r2,-19521
8000a458:	10c00236 	bltu	r2,r3,8000a464 <altera_a10_cdr_lookup_vco_speed_fix+0x88>
		return 150;
8000a45c:	00802584 	movi	r2,150
8000a460:	00000706 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else if (fvco < 13460000)
8000a464:	e0ffff17 	ldw	r3,-4(fp)
8000a468:	00803374 	movhi	r2,205
8000a46c:	109887c4 	addi	r2,r2,25119
8000a470:	10c00236 	bltu	r2,r3,8000a47c <altera_a10_cdr_lookup_vco_speed_fix+0xa0>
		return 159;
8000a474:	008027c4 	movi	r2,159
8000a478:	00000106 	br	8000a480 <altera_a10_cdr_lookup_vco_speed_fix+0xa4>
	else
		return 174;
8000a47c:	00802b84 	movi	r2,174
}
8000a480:	e037883a 	mov	sp,fp
8000a484:	df000017 	ldw	fp,0(sp)
8000a488:	dec00104 	addi	sp,sp,4
8000a48c:	f800283a 	ret

8000a490 <altera_a10_cdr_lookup_cp_current_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pd(uint32_t fvco,
	uint32_t lpd)
{
8000a490:	defffd04 	addi	sp,sp,-12
8000a494:	df000215 	stw	fp,8(sp)
8000a498:	df000204 	addi	fp,sp,8
8000a49c:	e13fff15 	stw	r4,-4(fp)
8000a4a0:	e17ffe15 	stw	r5,-8(fp)
	if (lpd == 1 && fvco < 12000000)
8000a4a4:	e0bffe17 	ldw	r2,-8(fp)
8000a4a8:	10800058 	cmpnei	r2,r2,1
8000a4ac:	1000061e 	bne	r2,zero,8000a4c8 <altera_a10_cdr_lookup_cp_current_pd+0x38>
8000a4b0:	e0ffff17 	ldw	r3,-4(fp)
8000a4b4:	00802df4 	movhi	r2,183
8000a4b8:	1086bfc4 	addi	r2,r2,6911
8000a4bc:	10c00236 	bltu	r2,r3,8000a4c8 <altera_a10_cdr_lookup_cp_current_pd+0x38>
		return 3;
8000a4c0:	008000c4 	movi	r2,3
8000a4c4:	00000106 	br	8000a4cc <altera_a10_cdr_lookup_cp_current_pd+0x3c>
	else
		return 4;
8000a4c8:	00800104 	movi	r2,4
}
8000a4cc:	e037883a 	mov	sp,fp
8000a4d0:	df000017 	ldw	fp,0(sp)
8000a4d4:	dec00104 	addi	sp,sp,4
8000a4d8:	f800283a 	ret

8000a4dc <altera_a10_cdr_lookup_clklow_div>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_clklow_div
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_clklow_div(uint32_t fref_khz)
{
8000a4dc:	defffe04 	addi	sp,sp,-8
8000a4e0:	df000115 	stw	fp,4(sp)
8000a4e4:	df000104 	addi	fp,sp,4
8000a4e8:	e13fff15 	stw	r4,-4(fp)
	if (fref_khz > 400000)
8000a4ec:	e0ffff17 	ldw	r3,-4(fp)
8000a4f0:	008001b4 	movhi	r2,6
8000a4f4:	1086a004 	addi	r2,r2,6784
8000a4f8:	10c0022e 	bgeu	r2,r3,8000a504 <altera_a10_cdr_lookup_clklow_div+0x28>
		return 1;
8000a4fc:	00800044 	movi	r2,1
8000a500:	00000106 	br	8000a508 <altera_a10_cdr_lookup_clklow_div+0x2c>
	else
		return 0;
8000a504:	0005883a 	mov	r2,zero
}
8000a508:	e037883a 	mov	sp,fp
8000a50c:	df000017 	ldw	fp,0(sp)
8000a510:	dec00104 	addi	sp,sp,4
8000a514:	f800283a 	ret

8000a518 <altera_a10_cdr_lookup_fastlock>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_fastlock
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_fastlock(uint32_t lpd)
{
8000a518:	defffe04 	addi	sp,sp,-8
8000a51c:	df000115 	stw	fp,4(sp)
8000a520:	df000104 	addi	fp,sp,4
8000a524:	e13fff15 	stw	r4,-4(fp)
	if (lpd == 16)
8000a528:	e0bfff17 	ldw	r2,-4(fp)
8000a52c:	10800418 	cmpnei	r2,r2,16
8000a530:	1000021e 	bne	r2,zero,8000a53c <altera_a10_cdr_lookup_fastlock+0x24>
		return 1;
8000a534:	00800044 	movi	r2,1
8000a538:	00000106 	br	8000a540 <altera_a10_cdr_lookup_fastlock+0x28>
	else
		return 0;
8000a53c:	0005883a 	mov	r2,zero
}
8000a540:	e037883a 	mov	sp,fp
8000a544:	df000017 	ldw	fp,0(sp)
8000a548:	dec00104 	addi	sp,sp,4
8000a54c:	f800283a 	ret

8000a550 <altera_a10_cdr_lookup_lf_resistor_pd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pd(uint32_t fvco,
	uint32_t lpd)
{
8000a550:	defffd04 	addi	sp,sp,-12
8000a554:	df000215 	stw	fp,8(sp)
8000a558:	df000204 	addi	fp,sp,8
8000a55c:	e13fff15 	stw	r4,-4(fp)
8000a560:	e17ffe15 	stw	r5,-8(fp)
	if (fvco < 7000000) {
8000a564:	e0ffff17 	ldw	r3,-4(fp)
8000a568:	00801af4 	movhi	r2,107
8000a56c:	10b3efc4 	addi	r2,r2,-12353
8000a570:	10c00d36 	bltu	r2,r3,8000a5a8 <altera_a10_cdr_lookup_lf_resistor_pd+0x58>
		switch (lpd) {
8000a574:	e0bffe17 	ldw	r2,-8(fp)
8000a578:	10c000a0 	cmpeqi	r3,r2,2
8000a57c:	1800061e 	bne	r3,zero,8000a598 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
8000a580:	10c00120 	cmpeqi	r3,r2,4
8000a584:	1800041e 	bne	r3,zero,8000a598 <altera_a10_cdr_lookup_lf_resistor_pd+0x48>
8000a588:	10800060 	cmpeqi	r2,r2,1
8000a58c:	10000426 	beq	r2,zero,8000a5a0 <altera_a10_cdr_lookup_lf_resistor_pd+0x50>
		case 1:
			return 2;
8000a590:	00800084 	movi	r2,2
8000a594:	00000d06 	br	8000a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		case 2:
		case 4:
			return 3;
8000a598:	008000c4 	movi	r2,3
8000a59c:	00000b06 	br	8000a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
8000a5a0:	0005883a 	mov	r2,zero
8000a5a4:	00000906 	br	8000a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		}
	} else {
		switch (lpd) {
8000a5a8:	e0bffe17 	ldw	r2,-8(fp)
8000a5ac:	0080062e 	bgeu	zero,r2,8000a5c8 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
8000a5b0:	10c000f0 	cmpltui	r3,r2,3
8000a5b4:	1800021e 	bne	r3,zero,8000a5c0 <altera_a10_cdr_lookup_lf_resistor_pd+0x70>
8000a5b8:	10800120 	cmpeqi	r2,r2,4
8000a5bc:	10000226 	beq	r2,zero,8000a5c8 <altera_a10_cdr_lookup_lf_resistor_pd+0x78>
		case 1:
		case 2:
		case 4:
			return 3;
8000a5c0:	008000c4 	movi	r2,3
8000a5c4:	00000106 	br	8000a5cc <altera_a10_cdr_lookup_lf_resistor_pd+0x7c>
		default:
			return 0;
8000a5c8:	0005883a 	mov	r2,zero
		}
	}
}
8000a5cc:	e037883a 	mov	sp,fp
8000a5d0:	df000017 	ldw	fp,0(sp)
8000a5d4:	dec00104 	addi	sp,sp,4
8000a5d8:	f800283a 	ret

8000a5dc <altera_a10_cdr_lookup_lf_resistor_pfd>:

/*******************************************************************************
* @brief altera_a10_cdr_lookup_lf_resistor_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_lf_resistor_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd) {
8000a5dc:	defffc04 	addi	sp,sp,-16
8000a5e0:	df000315 	stw	fp,12(sp)
8000a5e4:	df000304 	addi	fp,sp,12
8000a5e8:	e13fff15 	stw	r4,-4(fp)
8000a5ec:	e17ffe15 	stw	r5,-8(fp)
8000a5f0:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
8000a5f4:	e0ffff17 	ldw	r3,-4(fp)
8000a5f8:	00801af4 	movhi	r2,107
8000a5fc:	10b3efc4 	addi	r2,r2,-12353
8000a600:	10c00a36 	bltu	r2,r3,8000a62c <altera_a10_cdr_lookup_lf_resistor_pfd+0x50>
		switch (m*lpfd) {
8000a604:	e0fffe17 	ldw	r3,-8(fp)
8000a608:	e0bffd17 	ldw	r2,-12(fp)
8000a60c:	1885383a 	mul	r2,r3,r2
8000a610:	10bffe04 	addi	r2,r2,-8
8000a614:	108009a8 	cmpgeui	r2,r2,38
8000a618:	1000021e 	bne	r2,zero,8000a624 <altera_a10_cdr_lookup_lf_resistor_pfd+0x48>
		case 8 ... 45:
			return 2;
8000a61c:	00800084 	movi	r2,2
8000a620:	00004706 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
8000a624:	008000c4 	movi	r2,3
8000a628:	00004506 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 9000000) {
8000a62c:	e0ffff17 	ldw	r3,-4(fp)
8000a630:	00802274 	movhi	r2,137
8000a634:	10950fc4 	addi	r2,r2,21567
8000a638:	10c01536 	bltu	r2,r3,8000a690 <altera_a10_cdr_lookup_lf_resistor_pfd+0xb4>
		switch (m*lpfd) {
8000a63c:	e0fffe17 	ldw	r3,-8(fp)
8000a640:	e0bffd17 	ldw	r2,-12(fp)
8000a644:	1885383a 	mul	r2,r3,r2
8000a648:	10c01228 	cmpgeui	r3,r2,72
8000a64c:	1800051e 	bne	r3,zero,8000a664 <altera_a10_cdr_lookup_lf_resistor_pfd+0x88>
8000a650:	10c00ea8 	cmpgeui	r3,r2,58
8000a654:	1800081e 	bne	r3,zero,8000a678 <altera_a10_cdr_lookup_lf_resistor_pfd+0x9c>
8000a658:	10800230 	cmpltui	r2,r2,8
8000a65c:	10000a1e 	bne	r2,zero,8000a688 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
8000a660:	00000306 	br	8000a670 <altera_a10_cdr_lookup_lf_resistor_pfd+0x94>
8000a664:	108015a8 	cmpgeui	r2,r2,86
8000a668:	1000071e 	bne	r2,zero,8000a688 <altera_a10_cdr_lookup_lf_resistor_pfd+0xac>
8000a66c:	00000406 	br	8000a680 <altera_a10_cdr_lookup_lf_resistor_pfd+0xa4>
		case 8 ... 57:
			return 2;
8000a670:	00800084 	movi	r2,2
8000a674:	00003206 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 58 ... 71:
			return 3;
8000a678:	008000c4 	movi	r2,3
8000a67c:	00003006 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 2;
8000a680:	00800084 	movi	r2,2
8000a684:	00002e06 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
8000a688:	008000c4 	movi	r2,3
8000a68c:	00002c06 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else if (fvco < 12000000) {
8000a690:	e0ffff17 	ldw	r3,-4(fp)
8000a694:	00802df4 	movhi	r2,183
8000a698:	1086bfc4 	addi	r2,r2,6911
8000a69c:	10c01936 	bltu	r2,r3,8000a704 <altera_a10_cdr_lookup_lf_resistor_pfd+0x128>
		switch (m*lpfd) {
8000a6a0:	e0fffe17 	ldw	r3,-8(fp)
8000a6a4:	e0bffd17 	ldw	r2,-12(fp)
8000a6a8:	1885383a 	mul	r2,r3,r2
8000a6ac:	10c01228 	cmpgeui	r3,r2,72
8000a6b0:	1800051e 	bne	r3,zero,8000a6c8 <altera_a10_cdr_lookup_lf_resistor_pfd+0xec>
8000a6b4:	10c00728 	cmpgeui	r3,r2,28
8000a6b8:	18000a1e 	bne	r3,zero,8000a6e4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x108>
8000a6bc:	10800230 	cmpltui	r2,r2,8
8000a6c0:	10000e1e 	bne	r2,zero,8000a6fc <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
8000a6c4:	00000506 	br	8000a6dc <altera_a10_cdr_lookup_lf_resistor_pfd+0x100>
8000a6c8:	10c015b0 	cmpltui	r3,r2,86
8000a6cc:	1800071e 	bne	r3,zero,8000a6ec <altera_a10_cdr_lookup_lf_resistor_pfd+0x110>
8000a6d0:	108020a8 	cmpgeui	r2,r2,130
8000a6d4:	1000091e 	bne	r2,zero,8000a6fc <altera_a10_cdr_lookup_lf_resistor_pfd+0x120>
8000a6d8:	00000606 	br	8000a6f4 <altera_a10_cdr_lookup_lf_resistor_pfd+0x118>
		case 8 ... 27:
			return 1;
8000a6dc:	00800044 	movi	r2,1
8000a6e0:	00001706 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 71:
			return 2;
8000a6e4:	00800084 	movi	r2,2
8000a6e8:	00001506 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 72 ... 85:
			return 3;
8000a6ec:	008000c4 	movi	r2,3
8000a6f0:	00001306 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 86 ... 129:
			return 2;
8000a6f4:	00800084 	movi	r2,2
8000a6f8:	00001106 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
8000a6fc:	008000c4 	movi	r2,3
8000a700:	00000f06 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		}
	} else {
		switch (m*lpfd) {
8000a704:	e0fffe17 	ldw	r3,-8(fp)
8000a708:	e0bffd17 	ldw	r2,-12(fp)
8000a70c:	1885383a 	mul	r2,r3,r2
8000a710:	10c00230 	cmpltui	r3,r2,8
8000a714:	1800091e 	bne	r3,zero,8000a73c <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
8000a718:	10c00730 	cmpltui	r3,r2,28
8000a71c:	1800031e 	bne	r3,zero,8000a72c <altera_a10_cdr_lookup_lf_resistor_pfd+0x150>
8000a720:	10800ea8 	cmpgeui	r2,r2,58
8000a724:	1000051e 	bne	r2,zero,8000a73c <altera_a10_cdr_lookup_lf_resistor_pfd+0x160>
8000a728:	00000206 	br	8000a734 <altera_a10_cdr_lookup_lf_resistor_pfd+0x158>
		case 8 ... 27:
			return 1;
8000a72c:	00800044 	movi	r2,1
8000a730:	00000306 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		case 28 ... 57:
			return 2;
8000a734:	00800084 	movi	r2,2
8000a738:	00000106 	br	8000a740 <altera_a10_cdr_lookup_lf_resistor_pfd+0x164>
		default:
			return 3;
8000a73c:	008000c4 	movi	r2,3
		}
	}
}
8000a740:	e037883a 	mov	sp,fp
8000a744:	df000017 	ldw	fp,0(sp)
8000a748:	dec00104 	addi	sp,sp,4
8000a74c:	f800283a 	ret

8000a750 <altera_a10_cdr_lookup_cp_current_pfd>:
/*******************************************************************************
* @brief altera_a10_cdr_lookup_cp_current_pfd
*******************************************************************************/
uint32_t altera_a10_cdr_lookup_cp_current_pfd(uint32_t fvco,
	uint32_t m, uint32_t lpfd)
{
8000a750:	defffc04 	addi	sp,sp,-16
8000a754:	df000315 	stw	fp,12(sp)
8000a758:	df000304 	addi	fp,sp,12
8000a75c:	e13fff15 	stw	r4,-4(fp)
8000a760:	e17ffe15 	stw	r5,-8(fp)
8000a764:	e1bffd15 	stw	r6,-12(fp)
	if (fvco < 7000000) {
8000a768:	e0ffff17 	ldw	r3,-4(fp)
8000a76c:	00801af4 	movhi	r2,107
8000a770:	10b3efc4 	addi	r2,r2,-12353
8000a774:	10c01736 	bltu	r2,r3,8000a7d4 <altera_a10_cdr_lookup_cp_current_pfd+0x84>
		switch (m*lpfd) {
8000a778:	e0fffe17 	ldw	r3,-8(fp)
8000a77c:	e0bffd17 	ldw	r2,-12(fp)
8000a780:	1885383a 	mul	r2,r3,r2
8000a784:	10c00ba8 	cmpgeui	r3,r2,46
8000a788:	1800031e 	bne	r3,zero,8000a798 <altera_a10_cdr_lookup_cp_current_pfd+0x48>
8000a78c:	10800928 	cmpgeui	r2,r2,36
8000a790:	1000081e 	bne	r2,zero,8000a7b4 <altera_a10_cdr_lookup_cp_current_pfd+0x64>
8000a794:	00000506 	br	8000a7ac <altera_a10_cdr_lookup_cp_current_pfd+0x5c>
8000a798:	10c01230 	cmpltui	r3,r2,72
8000a79c:	1800071e 	bne	r3,zero,8000a7bc <altera_a10_cdr_lookup_cp_current_pfd+0x6c>
8000a7a0:	10801c28 	cmpgeui	r2,r2,112
8000a7a4:	1000091e 	bne	r2,zero,8000a7cc <altera_a10_cdr_lookup_cp_current_pfd+0x7c>
8000a7a8:	00000606 	br	8000a7c4 <altera_a10_cdr_lookup_cp_current_pfd+0x74>
		case 0 ... 35:
			return 2;
8000a7ac:	00800084 	movi	r2,2
8000a7b0:	0000ca06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 3;
8000a7b4:	008000c4 	movi	r2,3
8000a7b8:	0000c806 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 71:
			return 1;
8000a7bc:	00800044 	movi	r2,1
8000a7c0:	0000c606 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 111:
			return 2;
8000a7c4:	00800084 	movi	r2,2
8000a7c8:	0000c406 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
8000a7cc:	008000c4 	movi	r2,3
8000a7d0:	0000c206 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 9000000) {
8000a7d4:	e0ffff17 	ldw	r3,-4(fp)
8000a7d8:	00802274 	movhi	r2,137
8000a7dc:	10950fc4 	addi	r2,r2,21567
8000a7e0:	10c02836 	bltu	r2,r3,8000a884 <altera_a10_cdr_lookup_cp_current_pfd+0x134>
		switch (m*lpfd) {
8000a7e4:	e0fffe17 	ldw	r3,-8(fp)
8000a7e8:	e0bffd17 	ldw	r2,-12(fp)
8000a7ec:	1885383a 	mul	r2,r3,r2
8000a7f0:	10c01228 	cmpgeui	r3,r2,72
8000a7f4:	1800071e 	bne	r3,zero,8000a814 <altera_a10_cdr_lookup_cp_current_pfd+0xc4>
8000a7f8:	10c00ea8 	cmpgeui	r3,r2,58
8000a7fc:	1800151e 	bne	r3,zero,8000a854 <altera_a10_cdr_lookup_cp_current_pfd+0x104>
8000a800:	10c00ba8 	cmpgeui	r3,r2,46
8000a804:	1800111e 	bne	r3,zero,8000a84c <altera_a10_cdr_lookup_cp_current_pfd+0xfc>
8000a808:	10800728 	cmpgeui	r2,r2,28
8000a80c:	10000d1e 	bne	r2,zero,8000a844 <altera_a10_cdr_lookup_cp_current_pfd+0xf4>
8000a810:	00000a06 	br	8000a83c <altera_a10_cdr_lookup_cp_current_pfd+0xec>
8000a814:	10c020a8 	cmpgeui	r3,r2,130
8000a818:	1800031e 	bne	r3,zero,8000a828 <altera_a10_cdr_lookup_cp_current_pfd+0xd8>
8000a81c:	108015a8 	cmpgeui	r2,r2,86
8000a820:	1000101e 	bne	r2,zero,8000a864 <altera_a10_cdr_lookup_cp_current_pfd+0x114>
8000a824:	00000d06 	br	8000a85c <altera_a10_cdr_lookup_cp_current_pfd+0x10c>
8000a828:	10c023b0 	cmpltui	r3,r2,142
8000a82c:	18000f1e 	bne	r3,zero,8000a86c <altera_a10_cdr_lookup_cp_current_pfd+0x11c>
8000a830:	10802da8 	cmpgeui	r2,r2,182
8000a834:	1000111e 	bne	r2,zero,8000a87c <altera_a10_cdr_lookup_cp_current_pfd+0x12c>
8000a838:	00000e06 	br	8000a874 <altera_a10_cdr_lookup_cp_current_pfd+0x124>
		case 0 ... 27:
			return 1;
8000a83c:	00800044 	movi	r2,1
8000a840:	0000a606 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 45:
			return 2;
8000a844:	00800084 	movi	r2,2
8000a848:	0000a406 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
8000a84c:	008000c4 	movi	r2,3
8000a850:	0000a206 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
8000a854:	00800044 	movi	r2,1
8000a858:	0000a006 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 4;
8000a85c:	00800104 	movi	r2,4
8000a860:	00009e06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 2;
8000a864:	00800084 	movi	r2,2
8000a868:	00009c06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 130 ... 141:
			return 3;
8000a86c:	008000c4 	movi	r2,3
8000a870:	00009a06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 142 ... 181:
			return 2;
8000a874:	00800084 	movi	r2,2
8000a878:	00009806 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
8000a87c:	008000c4 	movi	r2,3
8000a880:	00009606 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else if (fvco < 12000000) {
8000a884:	e0ffff17 	ldw	r3,-4(fp)
8000a888:	00802df4 	movhi	r2,183
8000a88c:	1086bfc4 	addi	r2,r2,6911
8000a890:	10c01b36 	bltu	r2,r3,8000a900 <altera_a10_cdr_lookup_cp_current_pfd+0x1b0>
		switch (m*lpfd) {
8000a894:	e0fffe17 	ldw	r3,-8(fp)
8000a898:	e0bffd17 	ldw	r2,-12(fp)
8000a89c:	1885383a 	mul	r2,r3,r2
8000a8a0:	10c01228 	cmpgeui	r3,r2,72
8000a8a4:	1800051e 	bne	r3,zero,8000a8bc <altera_a10_cdr_lookup_cp_current_pfd+0x16c>
8000a8a8:	10c00928 	cmpgeui	r3,r2,36
8000a8ac:	18000c1e 	bne	r3,zero,8000a8e0 <altera_a10_cdr_lookup_cp_current_pfd+0x190>
8000a8b0:	10800730 	cmpltui	r2,r2,28
8000a8b4:	1000061e 	bne	r2,zero,8000a8d0 <altera_a10_cdr_lookup_cp_current_pfd+0x180>
8000a8b8:	00000706 	br	8000a8d8 <altera_a10_cdr_lookup_cp_current_pfd+0x188>
8000a8bc:	10c015b0 	cmpltui	r3,r2,86
8000a8c0:	1800091e 	bne	r3,zero,8000a8e8 <altera_a10_cdr_lookup_cp_current_pfd+0x198>
8000a8c4:	108020a8 	cmpgeui	r2,r2,130
8000a8c8:	10000b1e 	bne	r2,zero,8000a8f8 <altera_a10_cdr_lookup_cp_current_pfd+0x1a8>
8000a8cc:	00000806 	br	8000a8f0 <altera_a10_cdr_lookup_cp_current_pfd+0x1a0>
		case 0 ... 27:
			return 3;
8000a8d0:	008000c4 	movi	r2,3
8000a8d4:	00008106 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
8000a8d8:	00800044 	movi	r2,1
8000a8dc:	00007f06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 71:
			return 2;
8000a8e0:	00800084 	movi	r2,2
8000a8e4:	00007d06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 85:
			return 1;
8000a8e8:	00800044 	movi	r2,1
8000a8ec:	00007b06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 86 ... 129:
			return 4;
8000a8f0:	00800104 	movi	r2,4
8000a8f4:	00007906 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 2;
8000a8f8:	00800084 	movi	r2,2
8000a8fc:	00007706 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		}
	} else {
		switch (m*lpfd) {
8000a900:	e0fffe17 	ldw	r3,-8(fp)
8000a904:	e0bffd17 	ldw	r2,-12(fp)
8000a908:	1885383a 	mul	r2,r3,r2
8000a90c:	10c01828 	cmpgeui	r3,r2,96
8000a910:	1800711e 	bne	r3,zero,8000aad8 <altera_a10_cdr_lookup_cp_current_pfd+0x388>
8000a914:	100690ba 	slli	r3,r2,2
8000a918:	00a00074 	movhi	r2,32769
8000a91c:	1885883a 	add	r2,r3,r2
8000a920:	10aa4a17 	ldw	r2,-22232(r2)
8000a924:	1000683a 	jmp	r2
8000a928:	8000aaa8 	cmpgeui	zero,r16,682
8000a92c:	8000aaa8 	cmpgeui	zero,r16,682
8000a930:	8000aaa8 	cmpgeui	zero,r16,682
8000a934:	8000aaa8 	cmpgeui	zero,r16,682
8000a938:	8000aaa8 	cmpgeui	zero,r16,682
8000a93c:	8000aaa8 	cmpgeui	zero,r16,682
8000a940:	8000aaa8 	cmpgeui	zero,r16,682
8000a944:	8000aaa8 	cmpgeui	zero,r16,682
8000a948:	8000aaa8 	cmpgeui	zero,r16,682
8000a94c:	8000aaa8 	cmpgeui	zero,r16,682
8000a950:	8000aaa8 	cmpgeui	zero,r16,682
8000a954:	8000aaa8 	cmpgeui	zero,r16,682
8000a958:	8000aaa8 	cmpgeui	zero,r16,682
8000a95c:	8000aaa8 	cmpgeui	zero,r16,682
8000a960:	8000aaa8 	cmpgeui	zero,r16,682
8000a964:	8000aaa8 	cmpgeui	zero,r16,682
8000a968:	8000aaa8 	cmpgeui	zero,r16,682
8000a96c:	8000aaa8 	cmpgeui	zero,r16,682
8000a970:	8000aaa8 	cmpgeui	zero,r16,682
8000a974:	8000aaa8 	cmpgeui	zero,r16,682
8000a978:	8000aaa8 	cmpgeui	zero,r16,682
8000a97c:	8000aaa8 	cmpgeui	zero,r16,682
8000a980:	8000aaa8 	cmpgeui	zero,r16,682
8000a984:	8000aaa8 	cmpgeui	zero,r16,682
8000a988:	8000aaa8 	cmpgeui	zero,r16,682
8000a98c:	8000aaa8 	cmpgeui	zero,r16,682
8000a990:	8000aaa8 	cmpgeui	zero,r16,682
8000a994:	8000aaa8 	cmpgeui	zero,r16,682
8000a998:	8000aab0 	cmpltui	zero,r16,682
8000a99c:	8000aab0 	cmpltui	zero,r16,682
8000a9a0:	8000aab0 	cmpltui	zero,r16,682
8000a9a4:	8000aab0 	cmpltui	zero,r16,682
8000a9a8:	8000aab0 	cmpltui	zero,r16,682
8000a9ac:	8000aab0 	cmpltui	zero,r16,682
8000a9b0:	8000aab0 	cmpltui	zero,r16,682
8000a9b4:	8000aab0 	cmpltui	zero,r16,682
8000a9b8:	8000aab8 	rdprs	zero,r16,682
8000a9bc:	8000aab8 	rdprs	zero,r16,682
8000a9c0:	8000aab8 	rdprs	zero,r16,682
8000a9c4:	8000aab8 	rdprs	zero,r16,682
8000a9c8:	8000aab8 	rdprs	zero,r16,682
8000a9cc:	8000aab8 	rdprs	zero,r16,682
8000a9d0:	8000aab8 	rdprs	zero,r16,682
8000a9d4:	8000aab8 	rdprs	zero,r16,682
8000a9d8:	8000aab8 	rdprs	zero,r16,682
8000a9dc:	8000aab8 	rdprs	zero,r16,682
8000a9e0:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9e4:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9e8:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9ec:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9f0:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9f4:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9f8:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000a9fc:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000aa00:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000aa04:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000aa08:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000aa0c:	8000aac0 	call	88000aac <_gp+0x7fcfd38>
8000aa10:	8000aac8 	cmpgei	zero,r16,683
8000aa14:	8000aac8 	cmpgei	zero,r16,683
8000aa18:	8000aac8 	cmpgei	zero,r16,683
8000aa1c:	8000aac8 	cmpgei	zero,r16,683
8000aa20:	8000aac8 	cmpgei	zero,r16,683
8000aa24:	8000aac8 	cmpgei	zero,r16,683
8000aa28:	8000aac8 	cmpgei	zero,r16,683
8000aa2c:	8000aac8 	cmpgei	zero,r16,683
8000aa30:	8000aac8 	cmpgei	zero,r16,683
8000aa34:	8000aac8 	cmpgei	zero,r16,683
8000aa38:	8000aac8 	cmpgei	zero,r16,683
8000aa3c:	8000aac8 	cmpgei	zero,r16,683
8000aa40:	8000aac8 	cmpgei	zero,r16,683
8000aa44:	8000aac8 	cmpgei	zero,r16,683
8000aa48:	8000aad0 	cmplti	zero,r16,683
8000aa4c:	8000aad0 	cmplti	zero,r16,683
8000aa50:	8000aad0 	cmplti	zero,r16,683
8000aa54:	8000aad0 	cmplti	zero,r16,683
8000aa58:	8000aad0 	cmplti	zero,r16,683
8000aa5c:	8000aad0 	cmplti	zero,r16,683
8000aa60:	8000aad0 	cmplti	zero,r16,683
8000aa64:	8000aad0 	cmplti	zero,r16,683
8000aa68:	8000aad0 	cmplti	zero,r16,683
8000aa6c:	8000aad0 	cmplti	zero,r16,683
8000aa70:	8000aad0 	cmplti	zero,r16,683
8000aa74:	8000aad0 	cmplti	zero,r16,683
8000aa78:	8000aad0 	cmplti	zero,r16,683
8000aa7c:	8000aad0 	cmplti	zero,r16,683
8000aa80:	8000aad0 	cmplti	zero,r16,683
8000aa84:	8000aad0 	cmplti	zero,r16,683
8000aa88:	8000aad0 	cmplti	zero,r16,683
8000aa8c:	8000aad0 	cmplti	zero,r16,683
8000aa90:	8000aad0 	cmplti	zero,r16,683
8000aa94:	8000aad0 	cmplti	zero,r16,683
8000aa98:	8000aad0 	cmplti	zero,r16,683
8000aa9c:	8000aad0 	cmplti	zero,r16,683
8000aaa0:	8000aad0 	cmplti	zero,r16,683
8000aaa4:	8000aad0 	cmplti	zero,r16,683
		case 0 ... 27:
			return 4;
8000aaa8:	00800104 	movi	r2,4
8000aaac:	00000b06 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 28 ... 35:
			return 1;
8000aab0:	00800044 	movi	r2,1
8000aab4:	00000906 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 36 ... 45:
			return 2;
8000aab8:	00800084 	movi	r2,2
8000aabc:	00000706 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 46 ... 57:
			return 3;
8000aac0:	008000c4 	movi	r2,3
8000aac4:	00000506 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 58 ... 71:
			return 1;
8000aac8:	00800044 	movi	r2,1
8000aacc:	00000306 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		case 72 ... 95:
			return 2;
8000aad0:	00800084 	movi	r2,2
8000aad4:	00000106 	br	8000aadc <altera_a10_cdr_lookup_cp_current_pfd+0x38c>
		default:
			return 3;
8000aad8:	008000c4 	movi	r2,3
		}
	}
}
8000aadc:	e037883a 	mov	sp,fp
8000aae0:	df000017 	ldw	fp,0(sp)
8000aae4:	dec00104 	addi	sp,sp,4
8000aae8:	f800283a 	ret

8000aaec <altera_a10_cdr_calc_params>:
*******************************************************************************/
void altera_a10_cdr_calc_params(uint32_t fref_khz,
	uint32_t fout_khz, uint32_t *best_n, uint32_t *best_m,
	uint32_t *best_lpfd, uint32_t *best_lpd,
	uint32_t *best_fvco)
{
8000aaec:	defff104 	addi	sp,sp,-60
8000aaf0:	df000e15 	stw	fp,56(sp)
8000aaf4:	df000e04 	addi	fp,sp,56
8000aaf8:	e13ff515 	stw	r4,-44(fp)
8000aafc:	e17ff415 	stw	r5,-48(fp)
8000ab00:	e1bff315 	stw	r6,-52(fp)
8000ab04:	e1fff215 	stw	r7,-56(fp)
	uint32_t m, m_min, m_max;
	uint32_t n, lpd, lpfd, lpfd_min;
	uint32_t fvco, target_fvco;
	uint32_t pfd;

	*best_n = *best_m = *best_lpfd = *best_lpd = *best_fvco = 0;
8000ab08:	e0800317 	ldw	r2,12(fp)
8000ab0c:	10000015 	stw	zero,0(r2)
8000ab10:	e0800317 	ldw	r2,12(fp)
8000ab14:	10c00017 	ldw	r3,0(r2)
8000ab18:	e0800217 	ldw	r2,8(fp)
8000ab1c:	10c00015 	stw	r3,0(r2)
8000ab20:	e0800217 	ldw	r2,8(fp)
8000ab24:	10c00017 	ldw	r3,0(r2)
8000ab28:	e0800117 	ldw	r2,4(fp)
8000ab2c:	10c00015 	stw	r3,0(r2)
8000ab30:	e0800117 	ldw	r2,4(fp)
8000ab34:	10c00017 	ldw	r3,0(r2)
8000ab38:	e0bff217 	ldw	r2,-56(fp)
8000ab3c:	10c00015 	stw	r3,0(r2)
8000ab40:	e0bff217 	ldw	r2,-56(fp)
8000ab44:	10c00017 	ldw	r3,0(r2)
8000ab48:	e0bff317 	ldw	r2,-52(fp)
8000ab4c:	10c00015 	stw	r3,0(r2)

	for (lpd = 1; lpd < 16; lpd *= 2) {
8000ab50:	00800044 	movi	r2,1
8000ab54:	e0bffd15 	stw	r2,-12(fp)
8000ab58:	00000906 	br	8000ab80 <altera_a10_cdr_calc_params+0x94>
		if (fout_khz >= A10_CDR_PLL_VCO_MIN / lpd)
8000ab5c:	008012f4 	movhi	r2,75
8000ab60:	10b12804 	addi	r2,r2,-15200
8000ab64:	e0fffd17 	ldw	r3,-12(fp)
8000ab68:	10c5203a 	divu	r2,r2,r3
8000ab6c:	e0fff417 	ldw	r3,-48(fp)
8000ab70:	1880072e 	bgeu	r3,r2,8000ab90 <altera_a10_cdr_calc_params+0xa4>
	for (lpd = 1; lpd < 16; lpd *= 2) {
8000ab74:	e0bffd17 	ldw	r2,-12(fp)
8000ab78:	1085883a 	add	r2,r2,r2
8000ab7c:	e0bffd15 	stw	r2,-12(fp)
8000ab80:	e0bffd17 	ldw	r2,-12(fp)
8000ab84:	10800430 	cmpltui	r2,r2,16
8000ab88:	103ff41e 	bne	r2,zero,8000ab5c <_gp+0xfffd9de8>
8000ab8c:	00000106 	br	8000ab94 <altera_a10_cdr_calc_params+0xa8>
			break;
8000ab90:	0001883a 	nop
	}

	target_fvco = fout_khz * lpd;
8000ab94:	e0fff417 	ldw	r3,-48(fp)
8000ab98:	e0bffd17 	ldw	r2,-12(fp)
8000ab9c:	1885383a 	mul	r2,r3,r2
8000aba0:	e0bffa15 	stw	r2,-24(fp)

	if (fout_khz * lpd > 5200000)
8000aba4:	e0fff417 	ldw	r3,-48(fp)
8000aba8:	e0bffd17 	ldw	r2,-12(fp)
8000abac:	1887383a 	mul	r3,r3,r2
8000abb0:	008013f4 	movhi	r2,79
8000abb4:	10962004 	addi	r2,r2,22656
8000abb8:	10c0032e 	bgeu	r2,r3,8000abc8 <altera_a10_cdr_calc_params+0xdc>
		lpfd_min = 2;
8000abbc:	00800084 	movi	r2,2
8000abc0:	e0bffb15 	stw	r2,-20(fp)
8000abc4:	00000206 	br	8000abd0 <altera_a10_cdr_calc_params+0xe4>
	else
		lpfd_min = 1;
8000abc8:	00800044 	movi	r2,1
8000abcc:	e0bffb15 	stw	r2,-20(fp)

	m_min = max_t(uint32_t, DIV_ROUND_UP(A10_CDR_PLL_VCO_MIN / 2, fref_khz), 8);
8000abd0:	e0fff517 	ldw	r3,-44(fp)
8000abd4:	00800974 	movhi	r2,37
8000abd8:	109893c4 	addi	r2,r2,25167
8000abdc:	1887883a 	add	r3,r3,r2
8000abe0:	e0bff517 	ldw	r2,-44(fp)
8000abe4:	1885203a 	divu	r2,r3,r2
8000abe8:	10c00228 	cmpgeui	r3,r2,8
8000abec:	1800011e 	bne	r3,zero,8000abf4 <altera_a10_cdr_calc_params+0x108>
8000abf0:	00800204 	movi	r2,8
8000abf4:	e0bff915 	stw	r2,-28(fp)
	m_max = min_t(uint32_t, A10_CDR_PLL_VCO_MAX * 8 / lpfd_min / fref_khz, 127);
8000abf8:	0081aff4 	movhi	r2,1727
8000abfc:	1092e004 	addi	r2,r2,19328
8000ac00:	e0fffb17 	ldw	r3,-20(fp)
8000ac04:	10c7203a 	divu	r3,r2,r3
8000ac08:	e0bff517 	ldw	r2,-44(fp)
8000ac0c:	1885203a 	divu	r2,r3,r2
8000ac10:	10c02030 	cmpltui	r3,r2,128
8000ac14:	1800011e 	bne	r3,zero,8000ac1c <altera_a10_cdr_calc_params+0x130>
8000ac18:	00801fc4 	movi	r2,127
8000ac1c:	e0bff815 	stw	r2,-32(fp)

	for (n = 1; n <= 8; n *= 2) {
8000ac20:	00800044 	movi	r2,1
8000ac24:	e0bffe15 	stw	r2,-8(fp)
8000ac28:	00004906 	br	8000ad50 <altera_a10_cdr_calc_params+0x264>
		pfd = fref_khz / n;
8000ac2c:	e0fff517 	ldw	r3,-44(fp)
8000ac30:	e0bffe17 	ldw	r2,-8(fp)
8000ac34:	1885203a 	divu	r2,r3,r2
8000ac38:	e0bff715 	stw	r2,-36(fp)
		if (pfd < A10_CDR_PLL_PFD_MIN)
8000ac3c:	e0bff717 	ldw	r2,-36(fp)
8000ac40:	10b0d428 	cmpgeui	r2,r2,50000
8000ac44:	10004626 	beq	r2,zero,8000ad60 <altera_a10_cdr_calc_params+0x274>
			break;
		if (pfd > A10_CDR_PLL_PFD_MAX)
8000ac48:	e0fff717 	ldw	r3,-36(fp)
8000ac4c:	00800334 	movhi	r2,12
8000ac50:	108d4004 	addi	r2,r2,13568
8000ac54:	10c03a36 	bltu	r2,r3,8000ad40 <altera_a10_cdr_calc_params+0x254>
			continue;

		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
8000ac58:	e0bffb17 	ldw	r2,-20(fp)
8000ac5c:	e0bffc15 	stw	r2,-16(fp)
8000ac60:	00003306 	br	8000ad30 <altera_a10_cdr_calc_params+0x244>
			for (m = m_min; m <= m_max; m++) {
8000ac64:	e0bff917 	ldw	r2,-28(fp)
8000ac68:	e0bfff15 	stw	r2,-4(fp)
8000ac6c:	00002a06 	br	8000ad18 <altera_a10_cdr_calc_params+0x22c>
				fvco = fref_khz * m * lpfd / n;
8000ac70:	e0fff517 	ldw	r3,-44(fp)
8000ac74:	e0bfff17 	ldw	r2,-4(fp)
8000ac78:	1887383a 	mul	r3,r3,r2
8000ac7c:	e0bffc17 	ldw	r2,-16(fp)
8000ac80:	1887383a 	mul	r3,r3,r2
8000ac84:	e0bffe17 	ldw	r2,-8(fp)
8000ac88:	1885203a 	divu	r2,r3,r2
8000ac8c:	e0bff615 	stw	r2,-40(fp)

				if (abs(fvco - target_fvco) < abs(*best_fvco - target_fvco)) {
8000ac90:	e0fff617 	ldw	r3,-40(fp)
8000ac94:	e0bffa17 	ldw	r2,-24(fp)
8000ac98:	1885c83a 	sub	r2,r3,r2
8000ac9c:	1000010e 	bge	r2,zero,8000aca4 <altera_a10_cdr_calc_params+0x1b8>
8000aca0:	0085c83a 	sub	r2,zero,r2
8000aca4:	1009883a 	mov	r4,r2
8000aca8:	e0800317 	ldw	r2,12(fp)
8000acac:	10c00017 	ldw	r3,0(r2)
8000acb0:	e0bffa17 	ldw	r2,-24(fp)
8000acb4:	1885c83a 	sub	r2,r3,r2
8000acb8:	1000010e 	bge	r2,zero,8000acc0 <altera_a10_cdr_calc_params+0x1d4>
8000acbc:	0085c83a 	sub	r2,zero,r2
8000acc0:	2080120e 	bge	r4,r2,8000ad0c <altera_a10_cdr_calc_params+0x220>
					*best_n = n;
8000acc4:	e0bff317 	ldw	r2,-52(fp)
8000acc8:	e0fffe17 	ldw	r3,-8(fp)
8000accc:	10c00015 	stw	r3,0(r2)
					*best_m = m;
8000acd0:	e0bff217 	ldw	r2,-56(fp)
8000acd4:	e0ffff17 	ldw	r3,-4(fp)
8000acd8:	10c00015 	stw	r3,0(r2)
					*best_lpfd = lpfd;
8000acdc:	e0800117 	ldw	r2,4(fp)
8000ace0:	e0fffc17 	ldw	r3,-16(fp)
8000ace4:	10c00015 	stw	r3,0(r2)
					*best_fvco = fvco;
8000ace8:	e0800317 	ldw	r2,12(fp)
8000acec:	e0fff617 	ldw	r3,-40(fp)
8000acf0:	10c00015 	stw	r3,0(r2)
					*best_lpd = lpd;
8000acf4:	e0800217 	ldw	r2,8(fp)
8000acf8:	e0fffd17 	ldw	r3,-12(fp)
8000acfc:	10c00015 	stw	r3,0(r2)
					if (target_fvco == fvco)
8000ad00:	e0fffa17 	ldw	r3,-24(fp)
8000ad04:	e0bff617 	ldw	r2,-40(fp)
8000ad08:	18801726 	beq	r3,r2,8000ad68 <altera_a10_cdr_calc_params+0x27c>
			for (m = m_min; m <= m_max; m++) {
8000ad0c:	e0bfff17 	ldw	r2,-4(fp)
8000ad10:	10800044 	addi	r2,r2,1
8000ad14:	e0bfff15 	stw	r2,-4(fp)
8000ad18:	e0bfff17 	ldw	r2,-4(fp)
8000ad1c:	e0fff817 	ldw	r3,-32(fp)
8000ad20:	18bfd32e 	bgeu	r3,r2,8000ac70 <_gp+0xfffd9efc>
		for (lpfd = lpfd_min; lpfd <= 2; lpfd++) {
8000ad24:	e0bffc17 	ldw	r2,-16(fp)
8000ad28:	10800044 	addi	r2,r2,1
8000ad2c:	e0bffc15 	stw	r2,-16(fp)
8000ad30:	e0bffc17 	ldw	r2,-16(fp)
8000ad34:	108000f0 	cmpltui	r2,r2,3
8000ad38:	103fca1e 	bne	r2,zero,8000ac64 <_gp+0xfffd9ef0>
8000ad3c:	00000106 	br	8000ad44 <altera_a10_cdr_calc_params+0x258>
			continue;
8000ad40:	0001883a 	nop
	for (n = 1; n <= 8; n *= 2) {
8000ad44:	e0bffe17 	ldw	r2,-8(fp)
8000ad48:	1085883a 	add	r2,r2,r2
8000ad4c:	e0bffe15 	stw	r2,-8(fp)
8000ad50:	e0bffe17 	ldw	r2,-8(fp)
8000ad54:	10800270 	cmpltui	r2,r2,9
8000ad58:	103fb41e 	bne	r2,zero,8000ac2c <_gp+0xfffd9eb8>
8000ad5c:	00000306 	br	8000ad6c <altera_a10_cdr_calc_params+0x280>
			break;
8000ad60:	0001883a 	nop
8000ad64:	00000106 	br	8000ad6c <altera_a10_cdr_calc_params+0x280>
						return;
8000ad68:	0001883a 	nop
				}
			}
		}
	}
}
8000ad6c:	e037883a 	mov	sp,fp
8000ad70:	df000017 	ldw	fp,0(sp)
8000ad74:	dec00104 	addi	sp,sp,4
8000ad78:	f800283a 	ret

8000ad7c <altera_a10_cdr_pll_round_rate>:

/*******************************************************************************
* @brief altera_a10_cdr_pll_round_rate
*******************************************************************************/
uint32_t altera_a10_cdr_pll_round_rate(uint32_t l_rate_kbps, uint32_t fref_khz)
{
8000ad7c:	defff004 	addi	sp,sp,-64
8000ad80:	dfc00f15 	stw	ra,60(sp)
8000ad84:	df000e15 	stw	fp,56(sp)
8000ad88:	dc400d15 	stw	r17,52(sp)
8000ad8c:	dc000c15 	stw	r16,48(sp)
8000ad90:	df000e04 	addi	fp,sp,56
8000ad94:	e13ff615 	stw	r4,-40(fp)
8000ad98:	e17ff515 	stw	r5,-44(fp)
	uint32_t n, m, lpfd, lpd, fout_khz;
	uint32_t fvco;
	uint32_t tmp;

	fout_khz = l_rate_kbps / 2;
8000ad9c:	e0bff617 	ldw	r2,-40(fp)
8000ada0:	1004d07a 	srli	r2,r2,1
8000ada4:	e0bffd15 	stw	r2,-12(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
8000ada8:	e13ffa04 	addi	r4,fp,-24
8000adac:	e0fffb04 	addi	r3,fp,-20
8000adb0:	e0bff704 	addi	r2,fp,-36
8000adb4:	d8800215 	stw	r2,8(sp)
8000adb8:	e0bff804 	addi	r2,fp,-32
8000adbc:	d8800115 	stw	r2,4(sp)
8000adc0:	e0bff904 	addi	r2,fp,-28
8000adc4:	d8800015 	stw	r2,0(sp)
8000adc8:	200f883a 	mov	r7,r4
8000adcc:	180d883a 	mov	r6,r3
8000add0:	e17ffd17 	ldw	r5,-12(fp)
8000add4:	e13ff517 	ldw	r4,-44(fp)
8000add8:	000aaec0 	call	8000aaec <altera_a10_cdr_calc_params>

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
8000addc:	e0bffb17 	ldw	r2,-20(fp)
8000ade0:	10000626 	beq	r2,zero,8000adfc <altera_a10_cdr_pll_round_rate+0x80>
8000ade4:	e0bffa17 	ldw	r2,-24(fp)
8000ade8:	10000426 	beq	r2,zero,8000adfc <altera_a10_cdr_pll_round_rate+0x80>
8000adec:	e0bff917 	ldw	r2,-28(fp)
8000adf0:	10000226 	beq	r2,zero,8000adfc <altera_a10_cdr_pll_round_rate+0x80>
8000adf4:	e0bff817 	ldw	r2,-32(fp)
8000adf8:	1000021e 	bne	r2,zero,8000ae04 <altera_a10_cdr_pll_round_rate+0x88>
		return -1;
8000adfc:	00bfffc4 	movi	r2,-1
8000ae00:	00002b06 	br	8000aeb0 <altera_a10_cdr_pll_round_rate+0x134>

	tmp = (uint32_t)fref_khz * m * lpfd * 2;
8000ae04:	e0fffa17 	ldw	r3,-24(fp)
8000ae08:	e0bff517 	ldw	r2,-44(fp)
8000ae0c:	1887383a 	mul	r3,r3,r2
8000ae10:	e0bff917 	ldw	r2,-28(fp)
8000ae14:	1885383a 	mul	r2,r3,r2
8000ae18:	1085883a 	add	r2,r2,r2
8000ae1c:	e0bffc15 	stw	r2,-16(fp)
	tmp = DIV_ROUND_CLOSEST_ull(tmp, n * lpd);
8000ae20:	e13ffc17 	ldw	r4,-16(fp)
8000ae24:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000ae28:	1021883a 	mov	r16,r2
8000ae2c:	1823883a 	mov	r17,r3
8000ae30:	e0fffb17 	ldw	r3,-20(fp)
8000ae34:	e0bff817 	ldw	r2,-32(fp)
8000ae38:	1885383a 	mul	r2,r3,r2
8000ae3c:	1009883a 	mov	r4,r2
8000ae40:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000ae44:	1009883a 	mov	r4,r2
8000ae48:	180b883a 	mov	r5,r3
8000ae4c:	200d883a 	mov	r6,r4
8000ae50:	280f883a 	mov	r7,r5
8000ae54:	8009883a 	mov	r4,r16
8000ae58:	880b883a 	mov	r5,r17
8000ae5c:	000df040 	call	8000df04 <__divdf3>
8000ae60:	1009883a 	mov	r4,r2
8000ae64:	180b883a 	mov	r5,r3
8000ae68:	2005883a 	mov	r2,r4
8000ae6c:	2807883a 	mov	r3,r5
8000ae70:	000d883a 	mov	r6,zero
8000ae74:	01cff834 	movhi	r7,16352
8000ae78:	1009883a 	mov	r4,r2
8000ae7c:	180b883a 	mov	r5,r3
8000ae80:	000d6440 	call	8000d644 <__adddf3>
8000ae84:	1009883a 	mov	r4,r2
8000ae88:	180b883a 	mov	r5,r3
8000ae8c:	2005883a 	mov	r2,r4
8000ae90:	2807883a 	mov	r3,r5
8000ae94:	1009883a 	mov	r4,r2
8000ae98:	180b883a 	mov	r5,r3
8000ae9c:	000c90c0 	call	8000c90c <__fixunsdfdi>
8000aea0:	1009883a 	mov	r4,r2
8000aea4:	180b883a 	mov	r5,r3
8000aea8:	e13ffc15 	stw	r4,-16(fp)

	return min_t(uint32_t, tmp, LONG_MAX);
8000aeac:	e0bffc17 	ldw	r2,-16(fp)
}
8000aeb0:	e6fffe04 	addi	sp,fp,-8
8000aeb4:	dfc00317 	ldw	ra,12(sp)
8000aeb8:	df000217 	ldw	fp,8(sp)
8000aebc:	dc400117 	ldw	r17,4(sp)
8000aec0:	dc000017 	ldw	r16,0(sp)
8000aec4:	dec00404 	addi	sp,sp,16
8000aec8:	f800283a 	ret

8000aecc <altera_a10_cdr_pll_set_rate>:
/*******************************************************************************
* @brief altera_a10_cdr_pll_set_rate
*******************************************************************************/
int32_t altera_a10_cdr_pll_set_rate(xcvr_core *core,
	uint32_t l_rate_kbps, uint32_t fref_khz)
{
8000aecc:	deffe904 	addi	sp,sp,-92
8000aed0:	dfc01615 	stw	ra,88(sp)
8000aed4:	df001515 	stw	fp,84(sp)
8000aed8:	df001504 	addi	fp,sp,84
8000aedc:	e13ff015 	stw	r4,-64(fp)
8000aee0:	e17fef15 	stw	r5,-68(fp)
8000aee4:	e1bfee15 	stw	r6,-72(fp)
	uint32_t cp_current_pd, lfr_pd;
	uint32_t cp_current_pfd, lfr_pfd;
	uint32_t clkdiv_low;
	uint32_t fast_lock;

	fout_khz = l_rate_kbps/2;
8000aee8:	e0bfef17 	ldw	r2,-68(fp)
8000aeec:	1004d07a 	srli	r2,r2,1
8000aef0:	e0bffe15 	stw	r2,-8(fp)

	altera_a10_cdr_calc_params(fref_khz, fout_khz, &n, &m, &lpfd, &lpd, &fvco);
8000aef4:	e13ff404 	addi	r4,fp,-48
8000aef8:	e0fff504 	addi	r3,fp,-44
8000aefc:	e0bff104 	addi	r2,fp,-60
8000af00:	d8800215 	stw	r2,8(sp)
8000af04:	e0bff204 	addi	r2,fp,-56
8000af08:	d8800115 	stw	r2,4(sp)
8000af0c:	e0bff304 	addi	r2,fp,-52
8000af10:	d8800015 	stw	r2,0(sp)
8000af14:	200f883a 	mov	r7,r4
8000af18:	180d883a 	mov	r6,r3
8000af1c:	e17ffe17 	ldw	r5,-8(fp)
8000af20:	e13fee17 	ldw	r4,-72(fp)
8000af24:	000aaec0 	call	8000aaec <altera_a10_cdr_calc_params>
	printf("\tlpfd: %d\n", lpfd);
	printf("\tlpd: %d\n", lpd);
	printf("\tfvco: %d\n", fvco);
#endif

	if (n == 0 || m == 0 || lpfd == 0 || lpd == 0)
8000af28:	e0bff517 	ldw	r2,-44(fp)
8000af2c:	10000626 	beq	r2,zero,8000af48 <altera_a10_cdr_pll_set_rate+0x7c>
8000af30:	e0bff417 	ldw	r2,-48(fp)
8000af34:	10000426 	beq	r2,zero,8000af48 <altera_a10_cdr_pll_set_rate+0x7c>
8000af38:	e0bff317 	ldw	r2,-52(fp)
8000af3c:	10000226 	beq	r2,zero,8000af48 <altera_a10_cdr_pll_set_rate+0x7c>
8000af40:	e0bff217 	ldw	r2,-56(fp)
8000af44:	1000021e 	bne	r2,zero,8000af50 <altera_a10_cdr_pll_set_rate+0x84>
		return -1;
8000af48:	00bfffc4 	movi	r2,-1
8000af4c:	00012a06 	br	8000b3f8 <altera_a10_cdr_pll_set_rate+0x52c>

	switch (n) {
8000af50:	e0bff517 	ldw	r2,-44(fp)
8000af54:	10c000a0 	cmpeqi	r3,r2,2
8000af58:	1800061e 	bne	r3,zero,8000af74 <altera_a10_cdr_pll_set_rate+0xa8>
8000af5c:	10c00120 	cmpeqi	r3,r2,4
8000af60:	1800071e 	bne	r3,zero,8000af80 <altera_a10_cdr_pll_set_rate+0xb4>
8000af64:	10800060 	cmpeqi	r2,r2,1
8000af68:	10000826 	beq	r2,zero,8000af8c <altera_a10_cdr_pll_set_rate+0xc0>
	case 1:
		n = 0;
8000af6c:	e03ff515 	stw	zero,-44(fp)
		break;
8000af70:	00000906 	br	8000af98 <altera_a10_cdr_pll_set_rate+0xcc>
	case 2:
		n = 1;
8000af74:	00800044 	movi	r2,1
8000af78:	e0bff515 	stw	r2,-44(fp)
		break;
8000af7c:	00000606 	br	8000af98 <altera_a10_cdr_pll_set_rate+0xcc>
	case 4:
		n = 2;
8000af80:	00800084 	movi	r2,2
8000af84:	e0bff515 	stw	r2,-44(fp)
		break;
8000af88:	00000306 	br	8000af98 <altera_a10_cdr_pll_set_rate+0xcc>
	default:
		n = 3;
8000af8c:	008000c4 	movi	r2,3
8000af90:	e0bff515 	stw	r2,-44(fp)
		break;
8000af94:	0001883a 	nop
	}

	switch (lpd) {
8000af98:	e0bff217 	ldw	r2,-56(fp)
8000af9c:	10c000a0 	cmpeqi	r3,r2,2
8000afa0:	18000d1e 	bne	r3,zero,8000afd8 <altera_a10_cdr_pll_set_rate+0x10c>
8000afa4:	10c000e8 	cmpgeui	r3,r2,3
8000afa8:	1800031e 	bne	r3,zero,8000afb8 <altera_a10_cdr_pll_set_rate+0xec>
8000afac:	10800060 	cmpeqi	r2,r2,1
8000afb0:	1000061e 	bne	r2,zero,8000afcc <altera_a10_cdr_pll_set_rate+0x100>
8000afb4:	00001106 	br	8000affc <altera_a10_cdr_pll_set_rate+0x130>
8000afb8:	10c00120 	cmpeqi	r3,r2,4
8000afbc:	1800091e 	bne	r3,zero,8000afe4 <altera_a10_cdr_pll_set_rate+0x118>
8000afc0:	10800220 	cmpeqi	r2,r2,8
8000afc4:	10000a1e 	bne	r2,zero,8000aff0 <altera_a10_cdr_pll_set_rate+0x124>
8000afc8:	00000c06 	br	8000affc <altera_a10_cdr_pll_set_rate+0x130>
	case 1:
		lpd = 1;
8000afcc:	00800044 	movi	r2,1
8000afd0:	e0bff215 	stw	r2,-56(fp)
		break;
8000afd4:	00000c06 	br	8000b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 2:
		lpd = 3;
8000afd8:	008000c4 	movi	r2,3
8000afdc:	e0bff215 	stw	r2,-56(fp)
		break;
8000afe0:	00000906 	br	8000b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 4:
		lpd = 4;
8000afe4:	00800104 	movi	r2,4
8000afe8:	e0bff215 	stw	r2,-56(fp)
		break;
8000afec:	00000606 	br	8000b008 <altera_a10_cdr_pll_set_rate+0x13c>
	case 8:
		lpd = 5;
8000aff0:	00800144 	movi	r2,5
8000aff4:	e0bff215 	stw	r2,-56(fp)
		break;
8000aff8:	00000306 	br	8000b008 <altera_a10_cdr_pll_set_rate+0x13c>
	default:
		lpd = 6;
8000affc:	00800184 	movi	r2,6
8000b000:	e0bff215 	stw	r2,-56(fp)
		break;
8000b004:	0001883a 	nop
	}

	switch (lpfd) {
8000b008:	e0bff317 	ldw	r2,-52(fp)
8000b00c:	10800060 	cmpeqi	r2,r2,1
8000b010:	10000326 	beq	r2,zero,8000b020 <altera_a10_cdr_pll_set_rate+0x154>
	case 1:
		lpfd = 2;
8000b014:	00800084 	movi	r2,2
8000b018:	e0bff315 	stw	r2,-52(fp)
		break;
8000b01c:	00000306 	br	8000b02c <altera_a10_cdr_pll_set_rate+0x160>
	default:
		lpfd = 3;
8000b020:	008000c4 	movi	r2,3
8000b024:	e0bff315 	stw	r2,-52(fp)
		break;
8000b028:	0001883a 	nop
	}

	vco_speed = altera_a10_cdr_lookup_vco_speed(fvco);
8000b02c:	e0bff117 	ldw	r2,-60(fp)
8000b030:	1009883a 	mov	r4,r2
8000b034:	000a3880 	call	8000a388 <altera_a10_cdr_lookup_vco_speed>
8000b038:	e0bffd15 	stw	r2,-12(fp)
	vco_speed_fix = altera_a10_cdr_lookup_vco_speed_fix(fvco);
8000b03c:	e0bff117 	ldw	r2,-60(fp)
8000b040:	1009883a 	mov	r4,r2
8000b044:	000a3dc0 	call	8000a3dc <altera_a10_cdr_lookup_vco_speed_fix>
8000b048:	e0bffc15 	stw	r2,-16(fp)
	clkdiv_low = altera_a10_cdr_lookup_clklow_div(fref_khz);
8000b04c:	e13fee17 	ldw	r4,-72(fp)
8000b050:	000a4dc0 	call	8000a4dc <altera_a10_cdr_lookup_clklow_div>
8000b054:	e0bffb15 	stw	r2,-20(fp)
	fast_lock = altera_a10_cdr_lookup_fastlock(lpd);
8000b058:	e0bff217 	ldw	r2,-56(fp)
8000b05c:	1009883a 	mov	r4,r2
8000b060:	000a5180 	call	8000a518 <altera_a10_cdr_lookup_fastlock>
8000b064:	e0bffa15 	stw	r2,-24(fp)
	cp_current_pd = altera_a10_cdr_lookup_cp_current_pd(fvco, lpd);
8000b068:	e0bff117 	ldw	r2,-60(fp)
8000b06c:	e0fff217 	ldw	r3,-56(fp)
8000b070:	180b883a 	mov	r5,r3
8000b074:	1009883a 	mov	r4,r2
8000b078:	000a4900 	call	8000a490 <altera_a10_cdr_lookup_cp_current_pd>
8000b07c:	e0bff915 	stw	r2,-28(fp)
	lfr_pd = altera_a10_cdr_lookup_lf_resistor_pd(fvco, lpd);
8000b080:	e0bff117 	ldw	r2,-60(fp)
8000b084:	e0fff217 	ldw	r3,-56(fp)
8000b088:	180b883a 	mov	r5,r3
8000b08c:	1009883a 	mov	r4,r2
8000b090:	000a5500 	call	8000a550 <altera_a10_cdr_lookup_lf_resistor_pd>
8000b094:	e0bff815 	stw	r2,-32(fp)
	cp_current_pfd = altera_a10_cdr_lookup_cp_current_pfd(fvco, m, lpfd);
8000b098:	e0bff117 	ldw	r2,-60(fp)
8000b09c:	e0fff417 	ldw	r3,-48(fp)
8000b0a0:	e13ff317 	ldw	r4,-52(fp)
8000b0a4:	200d883a 	mov	r6,r4
8000b0a8:	180b883a 	mov	r5,r3
8000b0ac:	1009883a 	mov	r4,r2
8000b0b0:	000a7500 	call	8000a750 <altera_a10_cdr_lookup_cp_current_pfd>
8000b0b4:	e0bff715 	stw	r2,-36(fp)
	lfr_pfd = altera_a10_cdr_lookup_lf_resistor_pfd(fvco, m, lpfd);
8000b0b8:	e0bff117 	ldw	r2,-60(fp)
8000b0bc:	e0fff417 	ldw	r3,-48(fp)
8000b0c0:	e13ff317 	ldw	r4,-52(fp)
8000b0c4:	200d883a 	mov	r6,r4
8000b0c8:	180b883a 	mov	r5,r3
8000b0cc:	1009883a 	mov	r4,r2
8000b0d0:	000a5dc0 	call	8000a5dc <altera_a10_cdr_lookup_lf_resistor_pfd>
8000b0d4:	e0bff615 	stw	r2,-40(fp)

	for (i = 0; i < core->lanes_per_link; i++) {
8000b0d8:	e03fff15 	stw	zero,-4(fp)
8000b0dc:	0000be06 	br	8000b3d8 <altera_a10_cdr_pll_set_rate+0x50c>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[i]));
8000b0e0:	e0bfff17 	ldw	r2,-4(fp)
8000b0e4:	10800324 	muli	r2,r2,12
8000b0e8:	10801004 	addi	r2,r2,64
8000b0ec:	e0fff017 	ldw	r3,-64(fp)
8000b0f0:	1885883a 	add	r2,r3,r2
8000b0f4:	1009883a 	mov	r4,r2
8000b0f8:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

		pll_update(&(core->dev.channel_pll[i]), 0x132, 0x05, ((vco_speed_fix & 0x80) >> 7) | ((vco_speed_fix & 0x40) >> 4));
8000b0fc:	e0bfff17 	ldw	r2,-4(fp)
8000b100:	10800324 	muli	r2,r2,12
8000b104:	10801004 	addi	r2,r2,64
8000b108:	e0fff017 	ldw	r3,-64(fp)
8000b10c:	1889883a 	add	r4,r3,r2
8000b110:	e0bffc17 	ldw	r2,-16(fp)
8000b114:	1004d1fa 	srli	r2,r2,7
8000b118:	10c0004c 	andi	r3,r2,1
8000b11c:	e0bffc17 	ldw	r2,-16(fp)
8000b120:	1004d13a 	srli	r2,r2,4
8000b124:	1080010c 	andi	r2,r2,4
8000b128:	1884b03a 	or	r2,r3,r2
8000b12c:	100f883a 	mov	r7,r2
8000b130:	01800144 	movi	r6,5
8000b134:	01404c84 	movi	r5,306
8000b138:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x133, 0xe0, cp_current_pd << 5);
8000b13c:	e0bfff17 	ldw	r2,-4(fp)
8000b140:	10800324 	muli	r2,r2,12
8000b144:	10801004 	addi	r2,r2,64
8000b148:	e0fff017 	ldw	r3,-64(fp)
8000b14c:	1887883a 	add	r3,r3,r2
8000b150:	e0bff917 	ldw	r2,-28(fp)
8000b154:	1004917a 	slli	r2,r2,5
8000b158:	100f883a 	mov	r7,r2
8000b15c:	01803804 	movi	r6,224
8000b160:	01404cc4 	movi	r5,307
8000b164:	1809883a 	mov	r4,r3
8000b168:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x134, 0x40, (vco_speed_fix & 0x10) << 2);
8000b16c:	e0bfff17 	ldw	r2,-4(fp)
8000b170:	10800324 	muli	r2,r2,12
8000b174:	10801004 	addi	r2,r2,64
8000b178:	e0fff017 	ldw	r3,-64(fp)
8000b17c:	1887883a 	add	r3,r3,r2
8000b180:	e0bffc17 	ldw	r2,-16(fp)
8000b184:	100490ba 	slli	r2,r2,2
8000b188:	1080100c 	andi	r2,r2,64
8000b18c:	100f883a 	mov	r7,r2
8000b190:	01801004 	movi	r6,64
8000b194:	01404d04 	movi	r5,308
8000b198:	1809883a 	mov	r4,r3
8000b19c:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x135, 0x4f, (vco_speed_fix & 0x20) << 1 | (lfr_pd << 2) | lfr_pfd);
8000b1a0:	e0bfff17 	ldw	r2,-4(fp)
8000b1a4:	10800324 	muli	r2,r2,12
8000b1a8:	10801004 	addi	r2,r2,64
8000b1ac:	e0fff017 	ldw	r3,-64(fp)
8000b1b0:	1889883a 	add	r4,r3,r2
8000b1b4:	e0bffc17 	ldw	r2,-16(fp)
8000b1b8:	1085883a 	add	r2,r2,r2
8000b1bc:	10c0100c 	andi	r3,r2,64
8000b1c0:	e0bff817 	ldw	r2,-32(fp)
8000b1c4:	100490ba 	slli	r2,r2,2
8000b1c8:	1886b03a 	or	r3,r3,r2
8000b1cc:	e0bff617 	ldw	r2,-40(fp)
8000b1d0:	1884b03a 	or	r2,r3,r2
8000b1d4:	100f883a 	mov	r7,r2
8000b1d8:	018013c4 	movi	r6,79
8000b1dc:	01404d44 	movi	r5,309
8000b1e0:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x136, 0x0f, vco_speed_fix & 0xf);
8000b1e4:	e0bfff17 	ldw	r2,-4(fp)
8000b1e8:	10800324 	muli	r2,r2,12
8000b1ec:	10801004 	addi	r2,r2,64
8000b1f0:	e0fff017 	ldw	r3,-64(fp)
8000b1f4:	1887883a 	add	r3,r3,r2
8000b1f8:	e0bffc17 	ldw	r2,-16(fp)
8000b1fc:	108003cc 	andi	r2,r2,15
8000b200:	100f883a 	mov	r7,r2
8000b204:	018003c4 	movi	r6,15
8000b208:	01404d84 	movi	r5,310
8000b20c:	1809883a 	mov	r4,r3
8000b210:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x137, 0x7c, vco_speed << 2);
8000b214:	e0bfff17 	ldw	r2,-4(fp)
8000b218:	10800324 	muli	r2,r2,12
8000b21c:	10801004 	addi	r2,r2,64
8000b220:	e0fff017 	ldw	r3,-64(fp)
8000b224:	1887883a 	add	r3,r3,r2
8000b228:	e0bffd17 	ldw	r2,-12(fp)
8000b22c:	100490ba 	slli	r2,r2,2
8000b230:	100f883a 	mov	r7,r2
8000b234:	01801f04 	movi	r6,124
8000b238:	01404dc4 	movi	r5,311
8000b23c:	1809883a 	mov	r4,r3
8000b240:	000b5cc0 	call	8000b5cc <pll_update>
		pll_update(&(core->dev.channel_pll[i]), 0x139, 0xbf, (fast_lock << 7) | (cp_current_pd << 3) | cp_current_pfd);
8000b244:	e0bfff17 	ldw	r2,-4(fp)
8000b248:	10800324 	muli	r2,r2,12
8000b24c:	10801004 	addi	r2,r2,64
8000b250:	e0fff017 	ldw	r3,-64(fp)
8000b254:	1889883a 	add	r4,r3,r2
8000b258:	e0bffa17 	ldw	r2,-24(fp)
8000b25c:	100691fa 	slli	r3,r2,7
8000b260:	e0bff917 	ldw	r2,-28(fp)
8000b264:	100490fa 	slli	r2,r2,3
8000b268:	1886b03a 	or	r3,r3,r2
8000b26c:	e0bff717 	ldw	r2,-36(fp)
8000b270:	1884b03a 	or	r2,r3,r2
8000b274:	100f883a 	mov	r7,r2
8000b278:	01802fc4 	movi	r6,191
8000b27c:	01404e44 	movi	r5,313
8000b280:	000b5cc0 	call	8000b5cc <pll_update>

		a10_pll_write(&(core->dev.channel_pll[i]), 0x13a, (clkdiv_low << 6) | (lpd << 3) | lpfd);
8000b284:	e0bfff17 	ldw	r2,-4(fp)
8000b288:	10800324 	muli	r2,r2,12
8000b28c:	10801004 	addi	r2,r2,64
8000b290:	e0fff017 	ldw	r3,-64(fp)
8000b294:	1889883a 	add	r4,r3,r2
8000b298:	e0bffb17 	ldw	r2,-20(fp)
8000b29c:	100691ba 	slli	r3,r2,6
8000b2a0:	e0bff217 	ldw	r2,-56(fp)
8000b2a4:	100490fa 	slli	r2,r2,3
8000b2a8:	1886b03a 	or	r3,r3,r2
8000b2ac:	e0bff317 	ldw	r2,-52(fp)
8000b2b0:	1884b03a 	or	r2,r3,r2
8000b2b4:	100d883a 	mov	r6,r2
8000b2b8:	01404e84 	movi	r5,314
8000b2bc:	000b5780 	call	8000b578 <a10_pll_write>
		a10_pll_write(&(core->dev.channel_pll[i]), 0x13b, m);
8000b2c0:	e0bfff17 	ldw	r2,-4(fp)
8000b2c4:	10800324 	muli	r2,r2,12
8000b2c8:	10801004 	addi	r2,r2,64
8000b2cc:	e0fff017 	ldw	r3,-64(fp)
8000b2d0:	1885883a 	add	r2,r3,r2
8000b2d4:	e0fff417 	ldw	r3,-48(fp)
8000b2d8:	180d883a 	mov	r6,r3
8000b2dc:	01404ec4 	movi	r5,315
8000b2e0:	1009883a 	mov	r4,r2
8000b2e4:	000b5780 	call	8000b578 <a10_pll_write>
		pll_update(&(core->dev.channel_pll[i]), 0x13c, 0x0c, n << 2);
8000b2e8:	e0bfff17 	ldw	r2,-4(fp)
8000b2ec:	10800324 	muli	r2,r2,12
8000b2f0:	10801004 	addi	r2,r2,64
8000b2f4:	e0fff017 	ldw	r3,-64(fp)
8000b2f8:	1887883a 	add	r3,r3,r2
8000b2fc:	e0bff517 	ldw	r2,-44(fp)
8000b300:	100490ba 	slli	r2,r2,2
8000b304:	100f883a 	mov	r7,r2
8000b308:	01800304 	movi	r6,12
8000b30c:	01404f04 	movi	r5,316
8000b310:	1809883a 	mov	r4,r3
8000b314:	000b5cc0 	call	8000b5cc <pll_update>

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CALIB_PMA_EN,
8000b318:	e0bfff17 	ldw	r2,-4(fp)
8000b31c:	10800324 	muli	r2,r2,12
8000b320:	10801004 	addi	r2,r2,64
8000b324:	e0fff017 	ldw	r3,-64(fp)
8000b328:	1885883a 	add	r2,r3,r2
8000b32c:	01c00084 	movi	r7,2
8000b330:	01800084 	movi	r6,2
8000b334:	01404004 	movi	r5,256
8000b338:	1009883a 	mov	r4,r2
8000b33c:	000b5cc0 	call	8000b5cc <pll_update>
			XCVR_CALIB_CMU_CDR_PLL_EN_MASK,
			XCVR_CALIB_CMU_CDR_PLL_EN);

		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_RATE_SWITCH_FLAG,
8000b340:	e0bfff17 	ldw	r2,-4(fp)
8000b344:	10800324 	muli	r2,r2,12
8000b348:	10801004 	addi	r2,r2,64
8000b34c:	e0fff017 	ldw	r3,-64(fp)
8000b350:	1885883a 	add	r2,r3,r2
8000b354:	000f883a 	mov	r7,zero
8000b358:	01802004 	movi	r6,128
8000b35c:	01405984 	movi	r5,358
8000b360:	1009883a 	mov	r4,r2
8000b364:	000b5cc0 	call	8000b5cc <pll_update>

		/*
		 * Disable tx_cal_busy and enable rx_cal_busy output through
		 * capability register.
		 */
		pll_update(&(core->dev.channel_pll[i]), XCVR_REG_CAPAB_PMA,
8000b368:	e0bfff17 	ldw	r2,-4(fp)
8000b36c:	10800324 	muli	r2,r2,12
8000b370:	10801004 	addi	r2,r2,64
8000b374:	e0fff017 	ldw	r3,-64(fp)
8000b378:	1885883a 	add	r2,r3,r2
8000b37c:	01c00804 	movi	r7,32
8000b380:	01800c04 	movi	r6,48
8000b384:	0140a044 	movi	r5,641
8000b388:	1009883a 	mov	r4,r2
8000b38c:	000b5cc0 	call	8000b5cc <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_EN |
			XCVR_CAPAB_TX_CAL_BUSY_DIS);

		altera_a10_release_arbitration(&(core->dev.channel_pll[i]), TRUE);
8000b390:	e0bfff17 	ldw	r2,-4(fp)
8000b394:	10800324 	muli	r2,r2,12
8000b398:	10801004 	addi	r2,r2,64
8000b39c:	e0fff017 	ldw	r3,-64(fp)
8000b3a0:	1885883a 	add	r2,r3,r2
8000b3a4:	01400044 	movi	r5,1
8000b3a8:	1009883a 	mov	r4,r2
8000b3ac:	000b7380 	call	8000b738 <altera_a10_release_arbitration>

		pll_calibration_check(&(core->dev.channel_pll[i]));
8000b3b0:	e0bfff17 	ldw	r2,-4(fp)
8000b3b4:	10800324 	muli	r2,r2,12
8000b3b8:	10801004 	addi	r2,r2,64
8000b3bc:	e0fff017 	ldw	r3,-64(fp)
8000b3c0:	1885883a 	add	r2,r3,r2
8000b3c4:	1009883a 	mov	r4,r2
8000b3c8:	000b7900 	call	8000b790 <pll_calibration_check>
	for (i = 0; i < core->lanes_per_link; i++) {
8000b3cc:	e0bfff17 	ldw	r2,-4(fp)
8000b3d0:	10800044 	addi	r2,r2,1
8000b3d4:	e0bfff15 	stw	r2,-4(fp)
8000b3d8:	e0bff017 	ldw	r2,-64(fp)
8000b3dc:	10800643 	ldbu	r2,25(r2)
8000b3e0:	10803fcc 	andi	r2,r2,255
8000b3e4:	e0ffff17 	ldw	r3,-4(fp)
8000b3e8:	18bf3d36 	bltu	r3,r2,8000b0e0 <_gp+0xfffda36c>
	}

	core->initial_recalc = FALSE;
8000b3ec:	e0bff017 	ldw	r2,-64(fp)
8000b3f0:	10000905 	stb	zero,36(r2)

	return 0;
8000b3f4:	0005883a 	mov	r2,zero
}
8000b3f8:	e037883a 	mov	sp,fp
8000b3fc:	dfc00117 	ldw	ra,4(sp)
8000b400:	df000017 	ldw	fp,0(sp)
8000b404:	dec00204 	addi	sp,sp,8
8000b408:	f800283a 	ret

8000b40c <altera_a10_calib_tx_pll>:

/*******************************************************************************
* @brief altera_a10_calib_tx_pll
*******************************************************************************/
int32_t altera_a10_calib_tx_pll(xcvr_core *core)
{
8000b40c:	defffc04 	addi	sp,sp,-16
8000b410:	dfc00315 	stw	ra,12(sp)
8000b414:	df000215 	stw	fp,8(sp)
8000b418:	df000204 	addi	fp,sp,8
8000b41c:	e13ffe15 	stw	r4,-8(fp)
	uint16_t lane;
	uint16_t err = 0;
8000b420:	e03fff0d 	sth	zero,-4(fp)

	for (lane = 0; lane < core->lanes_per_link; lane++) {
8000b424:	e03fff8d 	sth	zero,-2(fp)
8000b428:	00003106 	br	8000b4f0 <altera_a10_calib_tx_pll+0xe4>
		altera_a10_acquire_arbitration(&(core->dev.channel_pll[lane]));
8000b42c:	e0bfff8b 	ldhu	r2,-2(fp)
8000b430:	10800324 	muli	r2,r2,12
8000b434:	10801004 	addi	r2,r2,64
8000b438:	e0fffe17 	ldw	r3,-8(fp)
8000b43c:	1885883a 	add	r2,r3,r2
8000b440:	1009883a 	mov	r4,r2
8000b444:	000b6500 	call	8000b650 <altera_a10_acquire_arbitration>

		/* Perform TX termination & Vod calibration through
		   PMA calibration enable register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CALIB_PMA_EN,
8000b448:	e0bfff8b 	ldhu	r2,-2(fp)
8000b44c:	10800324 	muli	r2,r2,12
8000b450:	10801004 	addi	r2,r2,64
8000b454:	e0fffe17 	ldw	r3,-8(fp)
8000b458:	1885883a 	add	r2,r3,r2
8000b45c:	01c00804 	movi	r7,32
8000b460:	01800804 	movi	r6,32
8000b464:	01404004 	movi	r5,256
8000b468:	1009883a 	mov	r4,r2
8000b46c:	000b5cc0 	call	8000b5cc <pll_update>
			XCVR_CALIB_TX_TERM_VOD_MASK,
			XCVR_CALIB_TX_TERM_VOD_EN);

		/* Disable rx_cal_busy and enable tx_cal_busy output through
		   capability register */
		pll_update(&(core->dev.channel_pll[lane]), XCVR_REG_CAPAB_PMA,
8000b470:	e0bfff8b 	ldhu	r2,-2(fp)
8000b474:	10800324 	muli	r2,r2,12
8000b478:	10801004 	addi	r2,r2,64
8000b47c:	e0fffe17 	ldw	r3,-8(fp)
8000b480:	1885883a 	add	r2,r3,r2
8000b484:	01c00404 	movi	r7,16
8000b488:	01800c04 	movi	r6,48
8000b48c:	0140a044 	movi	r5,641
8000b490:	1009883a 	mov	r4,r2
8000b494:	000b5cc0 	call	8000b5cc <pll_update>
			XCVR_CAPAB_RX_CAL_BUSY_EN_MASK |
			XCVR_CAPAB_TX_CAL_BUSY_EN_MASK,
			XCVR_CAPAB_RX_CAL_BUSY_DIS |
			XCVR_CAPAB_TX_CAL_BUSY_EN);

		altera_a10_release_arbitration(&(core->dev.channel_pll[lane]), TRUE);
8000b498:	e0bfff8b 	ldhu	r2,-2(fp)
8000b49c:	10800324 	muli	r2,r2,12
8000b4a0:	10801004 	addi	r2,r2,64
8000b4a4:	e0fffe17 	ldw	r3,-8(fp)
8000b4a8:	1885883a 	add	r2,r3,r2
8000b4ac:	01400044 	movi	r5,1
8000b4b0:	1009883a 	mov	r4,r2
8000b4b4:	000b7380 	call	8000b738 <altera_a10_release_arbitration>

		err |= pll_calibration_check(&(core->dev.channel_pll[lane]));
8000b4b8:	e0bfff8b 	ldhu	r2,-2(fp)
8000b4bc:	10800324 	muli	r2,r2,12
8000b4c0:	10801004 	addi	r2,r2,64
8000b4c4:	e0fffe17 	ldw	r3,-8(fp)
8000b4c8:	1885883a 	add	r2,r3,r2
8000b4cc:	1009883a 	mov	r4,r2
8000b4d0:	000b7900 	call	8000b790 <pll_calibration_check>
8000b4d4:	10803fcc 	andi	r2,r2,255
8000b4d8:	e0ffff0b 	ldhu	r3,-4(fp)
8000b4dc:	1884b03a 	or	r2,r3,r2
8000b4e0:	e0bfff0d 	sth	r2,-4(fp)
	for (lane = 0; lane < core->lanes_per_link; lane++) {
8000b4e4:	e0bfff8b 	ldhu	r2,-2(fp)
8000b4e8:	10800044 	addi	r2,r2,1
8000b4ec:	e0bfff8d 	sth	r2,-2(fp)
8000b4f0:	e0bffe17 	ldw	r2,-8(fp)
8000b4f4:	10800643 	ldbu	r2,25(r2)
8000b4f8:	10803fcc 	andi	r2,r2,255
8000b4fc:	e0ffff8b 	ldhu	r3,-2(fp)
8000b500:	10bfffcc 	andi	r2,r2,65535
8000b504:	18bfc936 	bltu	r3,r2,8000b42c <_gp+0xfffda6b8>
	}

	return err;
8000b508:	e0bfff0b 	ldhu	r2,-4(fp)
}
8000b50c:	e037883a 	mov	sp,fp
8000b510:	dfc00117 	ldw	ra,4(sp)
8000b514:	df000017 	ldw	fp,0(sp)
8000b518:	dec00204 	addi	sp,sp,8
8000b51c:	f800283a 	ret

8000b520 <a10_pll_read>:
* @brief a10_pll_read
*******************************************************************************/
int32_t a10_pll_read(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t *reg_data)
{
8000b520:	defffc04 	addi	sp,sp,-16
8000b524:	df000315 	stw	fp,12(sp)
8000b528:	df000304 	addi	fp,sp,12
8000b52c:	e13fff15 	stw	r4,-4(fp)
8000b530:	e17ffe15 	stw	r5,-8(fp)
8000b534:	e1bffd15 	stw	r6,-12(fp)
	reg_addr = reg_addr << 2; // left shift 2 (byte align address)
8000b538:	e0bffe17 	ldw	r2,-8(fp)
8000b53c:	100490ba 	slli	r2,r2,2
8000b540:	e0bffe15 	stw	r2,-8(fp)
	*reg_data = ad_reg_read((mypll->base_address + reg_addr));
8000b544:	e0bfff17 	ldw	r2,-4(fp)
8000b548:	10c00117 	ldw	r3,4(r2)
8000b54c:	e0bffe17 	ldw	r2,-8(fp)
8000b550:	1885883a 	add	r2,r3,r2
8000b554:	10800037 	ldwio	r2,0(r2)
8000b558:	1007883a 	mov	r3,r2
8000b55c:	e0bffd17 	ldw	r2,-12(fp)
8000b560:	10c00015 	stw	r3,0(r2)

	return 0;
8000b564:	0005883a 	mov	r2,zero
}
8000b568:	e037883a 	mov	sp,fp
8000b56c:	df000017 	ldw	fp,0(sp)
8000b570:	dec00104 	addi	sp,sp,4
8000b574:	f800283a 	ret

8000b578 <a10_pll_write>:
* @brief a10_pll_write
*******************************************************************************/
int32_t a10_pll_write(xcvr_pll *mypll,
		uint32_t reg_addr,
		uint32_t reg_data)
{
8000b578:	defffc04 	addi	sp,sp,-16
8000b57c:	df000315 	stw	fp,12(sp)
8000b580:	df000304 	addi	fp,sp,12
8000b584:	e13fff15 	stw	r4,-4(fp)
8000b588:	e17ffe15 	stw	r5,-8(fp)
8000b58c:	e1bffd15 	stw	r6,-12(fp)
	reg_addr = reg_addr << 2; // left shift 2 (byte align address)
8000b590:	e0bffe17 	ldw	r2,-8(fp)
8000b594:	100490ba 	slli	r2,r2,2
8000b598:	e0bffe15 	stw	r2,-8(fp)
	ad_reg_write((mypll->base_address + reg_addr), reg_data);
8000b59c:	e0bfff17 	ldw	r2,-4(fp)
8000b5a0:	10c00117 	ldw	r3,4(r2)
8000b5a4:	e0bffe17 	ldw	r2,-8(fp)
8000b5a8:	1885883a 	add	r2,r3,r2
8000b5ac:	1007883a 	mov	r3,r2
8000b5b0:	e0bffd17 	ldw	r2,-12(fp)
8000b5b4:	18800035 	stwio	r2,0(r3)

	return 0;
8000b5b8:	0005883a 	mov	r2,zero
}
8000b5bc:	e037883a 	mov	sp,fp
8000b5c0:	df000017 	ldw	fp,0(sp)
8000b5c4:	dec00104 	addi	sp,sp,4
8000b5c8:	f800283a 	ret

8000b5cc <pll_update>:
/*******************************************************************************
* @brief pll_update
*******************************************************************************/
void pll_update(xcvr_pll *mypll,
	uint32_t addr, uint32_t mask, uint32_t val)
{
8000b5cc:	defff904 	addi	sp,sp,-28
8000b5d0:	dfc00615 	stw	ra,24(sp)
8000b5d4:	df000515 	stw	fp,20(sp)
8000b5d8:	df000504 	addi	fp,sp,20
8000b5dc:	e13ffe15 	stw	r4,-8(fp)
8000b5e0:	e17ffd15 	stw	r5,-12(fp)
8000b5e4:	e1bffc15 	stw	r6,-16(fp)
8000b5e8:	e1fffb15 	stw	r7,-20(fp)
	uint32_t rval;

	a10_pll_read(mypll, addr, &rval);
8000b5ec:	e0bfff04 	addi	r2,fp,-4
8000b5f0:	100d883a 	mov	r6,r2
8000b5f4:	e17ffd17 	ldw	r5,-12(fp)
8000b5f8:	e13ffe17 	ldw	r4,-8(fp)
8000b5fc:	000b5200 	call	8000b520 <a10_pll_read>
	rval &= ~mask;
8000b600:	e0bffc17 	ldw	r2,-16(fp)
8000b604:	0086303a 	nor	r3,zero,r2
8000b608:	e0bfff17 	ldw	r2,-4(fp)
8000b60c:	1884703a 	and	r2,r3,r2
8000b610:	e0bfff15 	stw	r2,-4(fp)
	rval |= val;
8000b614:	e0ffff17 	ldw	r3,-4(fp)
8000b618:	e0bffb17 	ldw	r2,-20(fp)
8000b61c:	1884b03a 	or	r2,r3,r2
8000b620:	e0bfff15 	stw	r2,-4(fp)
	a10_pll_write(mypll, addr, rval);
8000b624:	e0bfff17 	ldw	r2,-4(fp)
8000b628:	100d883a 	mov	r6,r2
8000b62c:	e17ffd17 	ldw	r5,-12(fp)
8000b630:	e13ffe17 	ldw	r4,-8(fp)
8000b634:	000b5780 	call	8000b578 <a10_pll_write>
}
8000b638:	0001883a 	nop
8000b63c:	e037883a 	mov	sp,fp
8000b640:	dfc00117 	ldw	ra,4(sp)
8000b644:	df000017 	ldw	fp,0(sp)
8000b648:	dec00204 	addi	sp,sp,8
8000b64c:	f800283a 	ret

8000b650 <altera_a10_acquire_arbitration>:

/*******************************************************************************
* @brief altera_a10_acquire_arbitration
*******************************************************************************/
uint32_t altera_a10_acquire_arbitration(xcvr_pll *mypll)
{
8000b650:	defffa04 	addi	sp,sp,-24
8000b654:	dfc00515 	stw	ra,20(sp)
8000b658:	df000415 	stw	fp,16(sp)
8000b65c:	df000404 	addi	fp,sp,16
8000b660:	e13ffc15 	stw	r4,-16(fp)
	uint32_t timeout = 0;
8000b664:	e03fff15 	stw	zero,-4(fp)
	uint32_t status;
	uint32_t arb_status;

	switch (mypll->type) {
8000b668:	e0bffc17 	ldw	r2,-16(fp)
8000b66c:	10800017 	ldw	r2,0(r2)
8000b670:	10c000b0 	cmpltui	r3,r2,2
8000b674:	1800031e 	bne	r3,zero,8000b684 <altera_a10_acquire_arbitration+0x34>
8000b678:	10800128 	cmpgeui	r2,r2,4
8000b67c:	1000071e 	bne	r2,zero,8000b69c <altera_a10_acquire_arbitration+0x4c>
8000b680:	00000306 	br	8000b690 <altera_a10_acquire_arbitration+0x40>
		case fpll_type:
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
8000b684:	0080a004 	movi	r2,640
8000b688:	e0bffe15 	stw	r2,-8(fp)
			break;
8000b68c:	00000a06 	br	8000b6b8 <altera_a10_acquire_arbitration+0x68>
		case cmu_cdr_type: // PMA
		case cmu_tx_type:
			arb_status = XCVR_REG_CAPAB_PMA;
8000b690:	0080a044 	movi	r2,641
8000b694:	e0bffe15 	stw	r2,-8(fp)
			break;
8000b698:	00000706 	br	8000b6b8 <altera_a10_acquire_arbitration+0x68>
		default:
			printf("%s: Pll type not defined!\n", __func__);
8000b69c:	016000b4 	movhi	r5,32770
8000b6a0:	29599a04 	addi	r5,r5,26216
8000b6a4:	012000b4 	movhi	r4,32770
8000b6a8:	21195d04 	addi	r4,r4,25972
8000b6ac:	0010d740 	call	80010d74 <printf>
			return -1;
8000b6b0:	00bfffc4 	movi	r2,-1
8000b6b4:	00001b06 	br	8000b724 <altera_a10_acquire_arbitration+0xd4>
		}

	a10_pll_write(mypll, XCVR_REG_ARBITRATION, XCVR_ARBITRATION_GET_AVMM);
8000b6b8:	01800084 	movi	r6,2
8000b6bc:	000b883a 	mov	r5,zero
8000b6c0:	e13ffc17 	ldw	r4,-16(fp)
8000b6c4:	000b5780 	call	8000b578 <a10_pll_write>

	do {
		a10_pll_read(mypll, arb_status, &status);
8000b6c8:	e0bffd04 	addi	r2,fp,-12
8000b6cc:	100d883a 	mov	r6,r2
8000b6d0:	e17ffe17 	ldw	r5,-8(fp)
8000b6d4:	e13ffc17 	ldw	r4,-16(fp)
8000b6d8:	000b5200 	call	8000b520 <a10_pll_read>
		if ((status & BIT(2)) == 0) {
8000b6dc:	e0bffd17 	ldw	r2,-12(fp)
8000b6e0:	1080010c 	andi	r2,r2,4
8000b6e4:	1000021e 	bne	r2,zero,8000b6f0 <altera_a10_acquire_arbitration+0xa0>
			return 0;
8000b6e8:	0005883a 	mov	r2,zero
8000b6ec:	00000d06 	br	8000b724 <altera_a10_acquire_arbitration+0xd4>
		}
		mdelay(1);
8000b6f0:	0100fa04 	movi	r4,1000
8000b6f4:	00205040 	call	80020504 <usleep>
	} while (timeout++ < 100);
8000b6f8:	e0bfff17 	ldw	r2,-4(fp)
8000b6fc:	10c00044 	addi	r3,r2,1
8000b700:	e0ffff15 	stw	r3,-4(fp)
8000b704:	10801930 	cmpltui	r2,r2,100
8000b708:	103fef1e 	bne	r2,zero,8000b6c8 <_gp+0xfffda954>

	printf("%s: Failed to acquire arbitration\n", __func__);
8000b70c:	016000b4 	movhi	r5,32770
8000b710:	29599a04 	addi	r5,r5,26216
8000b714:	012000b4 	movhi	r4,32770
8000b718:	21196404 	addi	r4,r4,26000
8000b71c:	0010d740 	call	80010d74 <printf>

	return -1;
8000b720:	00bfffc4 	movi	r2,-1
}
8000b724:	e037883a 	mov	sp,fp
8000b728:	dfc00117 	ldw	ra,4(sp)
8000b72c:	df000017 	ldw	fp,0(sp)
8000b730:	dec00204 	addi	sp,sp,8
8000b734:	f800283a 	ret

8000b738 <altera_a10_release_arbitration>:
/*******************************************************************************
* @brief altera_a10_release_arbitration
*******************************************************************************/
void altera_a10_release_arbitration(xcvr_pll *mypll,
	uint8_t run_calibration)
{
8000b738:	defffc04 	addi	sp,sp,-16
8000b73c:	dfc00315 	stw	ra,12(sp)
8000b740:	df000215 	stw	fp,8(sp)
8000b744:	df000204 	addi	fp,sp,8
8000b748:	e13fff15 	stw	r4,-4(fp)
8000b74c:	2805883a 	mov	r2,r5
8000b750:	e0bffe05 	stb	r2,-8(fp)
	a10_pll_write(mypll, XCVR_REG_ARBITRATION, (run_calibration ? 0x1 : 0x3));
8000b754:	e0bffe03 	ldbu	r2,-8(fp)
8000b758:	10000226 	beq	r2,zero,8000b764 <altera_a10_release_arbitration+0x2c>
8000b75c:	00800044 	movi	r2,1
8000b760:	00000106 	br	8000b768 <altera_a10_release_arbitration+0x30>
8000b764:	008000c4 	movi	r2,3
8000b768:	100d883a 	mov	r6,r2
8000b76c:	000b883a 	mov	r5,zero
8000b770:	e13fff17 	ldw	r4,-4(fp)
8000b774:	000b5780 	call	8000b578 <a10_pll_write>
}
8000b778:	0001883a 	nop
8000b77c:	e037883a 	mov	sp,fp
8000b780:	dfc00117 	ldw	ra,4(sp)
8000b784:	df000017 	ldw	fp,0(sp)
8000b788:	dec00204 	addi	sp,sp,8
8000b78c:	f800283a 	ret

8000b790 <pll_calibration_check>:

/*******************************************************************************
* @brief pll_calibration_check
*******************************************************************************/
uint8_t pll_calibration_check(xcvr_pll *my_pll)
{
8000b790:	defff804 	addi	sp,sp,-32
8000b794:	dfc00715 	stw	ra,28(sp)
8000b798:	df000615 	stw	fp,24(sp)
8000b79c:	df000604 	addi	fp,sp,24
8000b7a0:	e13ffa15 	stw	r4,-24(fp)
	uint32_t timeout = 0;
8000b7a4:	e03fff15 	stw	zero,-4(fp)
	uint32_t val;
	uint32_t mask;
	uint32_t arb_status;
	const char *msg;

	switch (my_pll->type) {
8000b7a8:	e0bffa17 	ldw	r2,-24(fp)
8000b7ac:	10800017 	ldw	r2,0(r2)
8000b7b0:	10c00060 	cmpeqi	r3,r2,1
8000b7b4:	1800061e 	bne	r3,zero,8000b7d0 <pll_calibration_check+0x40>
8000b7b8:	00800d2e 	bgeu	zero,r2,8000b7f0 <pll_calibration_check+0x60>
8000b7bc:	10c000a0 	cmpeqi	r3,r2,2
8000b7c0:	1800131e 	bne	r3,zero,8000b810 <pll_calibration_check+0x80>
8000b7c4:	108000e0 	cmpeqi	r2,r2,3
8000b7c8:	1000191e 	bne	r2,zero,8000b830 <pll_calibration_check+0xa0>
8000b7cc:	00002006 	br	8000b850 <pll_calibration_check+0xc0>
		case fpll_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
8000b7d0:	0080a004 	movi	r2,640
8000b7d4:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
8000b7d8:	00800084 	movi	r2,2
8000b7dc:	e0bffe15 	stw	r2,-8(fp)
			msg = "FPLL calibration";
8000b7e0:	00a000b4 	movhi	r2,32770
8000b7e4:	10996d04 	addi	r2,r2,26036
8000b7e8:	e0bffc15 	stw	r2,-16(fp)
			break;
8000b7ec:	00002306 	br	8000b87c <pll_calibration_check+0xec>
		case atx_type:
			arb_status = XCVR_REG_CAPAB_PLL_STAT;
8000b7f0:	0080a004 	movi	r2,640
8000b7f4:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_PLL_CAL_BSY_MASK;
8000b7f8:	00800084 	movi	r2,2
8000b7fc:	e0bffe15 	stw	r2,-8(fp)
			msg = "ATX PLL calibration";
8000b800:	00a000b4 	movhi	r2,32770
8000b804:	10997204 	addi	r2,r2,26056
8000b808:	e0bffc15 	stw	r2,-16(fp)
			break;
8000b80c:	00001b06 	br	8000b87c <pll_calibration_check+0xec>
		case cmu_cdr_type: // PMA RX
			arb_status = XCVR_REG_CAPAB_PMA;
8000b810:	0080a044 	movi	r2,641
8000b814:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_RX_CAL_BUSY_MASK;
8000b818:	00800084 	movi	r2,2
8000b81c:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/CDR PLL calibration";
8000b820:	00a000b4 	movhi	r2,32770
8000b824:	10997704 	addi	r2,r2,26076
8000b828:	e0bffc15 	stw	r2,-16(fp)
			break;
8000b82c:	00001306 	br	8000b87c <pll_calibration_check+0xec>
		case cmu_tx_type: // PMA TX
			arb_status = XCVR_REG_CAPAB_PMA;
8000b830:	0080a044 	movi	r2,641
8000b834:	e0bffd15 	stw	r2,-12(fp)
			mask = XCVR_CAPAB_TX_CAL_BUSY_MASK;
8000b838:	00800044 	movi	r2,1
8000b83c:	e0bffe15 	stw	r2,-8(fp)
			msg = "CMU/TX PLL calibration";
8000b840:	00a000b4 	movhi	r2,32770
8000b844:	10997d04 	addi	r2,r2,26100
8000b848:	e0bffc15 	stw	r2,-16(fp)
			break;
8000b84c:	00000b06 	br	8000b87c <pll_calibration_check+0xec>
		default:
			printf("%s: %x Pll type not defined!\n", __func__,
				my_pll->type);
8000b850:	e0bffa17 	ldw	r2,-24(fp)
8000b854:	10800017 	ldw	r2,0(r2)
			printf("%s: %x Pll type not defined!\n", __func__,
8000b858:	100d883a 	mov	r6,r2
8000b85c:	016000b4 	movhi	r5,32770
8000b860:	2959a204 	addi	r5,r5,26248
8000b864:	012000b4 	movhi	r4,32770
8000b868:	21198304 	addi	r4,r4,26124
8000b86c:	0010d740 	call	80010d74 <printf>
			return -1;
8000b870:	00bfffc4 	movi	r2,-1
8000b874:	00001b06 	br	8000b8e4 <pll_calibration_check+0x154>
		}
	/* Wait max 100ms for cal_busy to de-assert */
	do {
8000b878:	0001883a 	nop
		udelay(100);
8000b87c:	01001904 	movi	r4,100
8000b880:	00205040 	call	80020504 <usleep>

		/* Read PLL calibration status from capability register */
		a10_pll_read(my_pll, arb_status, &val);
8000b884:	e0bffb04 	addi	r2,fp,-20
8000b888:	100d883a 	mov	r6,r2
8000b88c:	e17ffd17 	ldw	r5,-12(fp)
8000b890:	e13ffa17 	ldw	r4,-24(fp)
8000b894:	000b5200 	call	8000b520 <a10_pll_read>
		if ((val & mask) == 0x00) {
8000b898:	e0fffb17 	ldw	r3,-20(fp)
8000b89c:	e0bffe17 	ldw	r2,-8(fp)
8000b8a0:	1884703a 	and	r2,r3,r2
8000b8a4:	1000021e 	bne	r2,zero,8000b8b0 <pll_calibration_check+0x120>
#ifdef DEBUG
			printf("%s OK (%d us, addr 0x%x)\n", msg,
				timeout * 100, my_pll->base_address);
#endif
			return 0;
8000b8a8:	0005883a 	mov	r2,zero
8000b8ac:	00000d06 	br	8000b8e4 <pll_calibration_check+0x154>
		}
	} while (timeout++ < 1000);
8000b8b0:	e0bfff17 	ldw	r2,-4(fp)
8000b8b4:	10c00044 	addi	r3,r2,1
8000b8b8:	e0ffff15 	stw	r3,-4(fp)
8000b8bc:	1080fa30 	cmpltui	r2,r2,1000
8000b8c0:	103fed1e 	bne	r2,zero,8000b878 <_gp+0xfffdab04>

	printf("%s FAILED (addr 0x%x)\n", msg,
8000b8c4:	e0bffa17 	ldw	r2,-24(fp)
8000b8c8:	10800117 	ldw	r2,4(r2)
8000b8cc:	100d883a 	mov	r6,r2
8000b8d0:	e17ffc17 	ldw	r5,-16(fp)
8000b8d4:	012000b4 	movhi	r4,32770
8000b8d8:	21198b04 	addi	r4,r4,26156
8000b8dc:	0010d740 	call	80010d74 <printf>
		my_pll->base_address);

	return 1;
8000b8e0:	00800044 	movi	r2,1
}
8000b8e4:	e037883a 	mov	sp,fp
8000b8e8:	dfc00117 	ldw	ra,4(sp)
8000b8ec:	df000017 	ldw	fp,0(sp)
8000b8f0:	dec00204 	addi	sp,sp,8
8000b8f4:	f800283a 	ret

8000b8f8 <pll_is_enabled>:

/*******************************************************************************
* @brief pll_is_enabled
*******************************************************************************/
uint32_t pll_is_enabled(xcvr_pll *mypll)
{
8000b8f8:	defffc04 	addi	sp,sp,-16
8000b8fc:	dfc00315 	stw	ra,12(sp)
8000b900:	df000215 	stw	fp,8(sp)
8000b904:	df000204 	addi	fp,sp,8
8000b908:	e13ffe15 	stw	r4,-8(fp)
	switch (mypll->type) {
8000b90c:	e0bffe17 	ldw	r2,-8(fp)
8000b910:	10800017 	ldw	r2,0(r2)
8000b914:	10c000b0 	cmpltui	r3,r2,2
8000b918:	1800101e 	bne	r3,zero,8000b95c <pll_is_enabled+0x64>
8000b91c:	10800128 	cmpgeui	r2,r2,4
8000b920:	1000071e 	bne	r2,zero,8000b940 <pll_is_enabled+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
8000b924:	016000b4 	movhi	r5,32770
8000b928:	2959a804 	addi	r5,r5,26272
8000b92c:	012000b4 	movhi	r4,32770
8000b930:	21199104 	addi	r4,r4,26180
8000b934:	0010d740 	call	80010d74 <printf>
				__func__);
			return 0;
8000b938:	0005883a 	mov	r2,zero
8000b93c:	00001006 	br	8000b980 <pll_is_enabled+0x88>
		default:
			printf("%s: Pll type not defined!\n", __func__);
8000b940:	016000b4 	movhi	r5,32770
8000b944:	2959a804 	addi	r5,r5,26272
8000b948:	012000b4 	movhi	r4,32770
8000b94c:	21195d04 	addi	r4,r4,25972
8000b950:	0010d740 	call	80010d74 <printf>
			return -1;
8000b954:	00bfffc4 	movi	r2,-1
8000b958:	00000906 	br	8000b980 <pll_is_enabled+0x88>
			break;
8000b95c:	0001883a 	nop
		}
	uint32_t ret;
	a10_pll_read(mypll, 0x2e0, &ret);
8000b960:	e0bfff04 	addi	r2,fp,-4
8000b964:	100d883a 	mov	r6,r2
8000b968:	0140b804 	movi	r5,736
8000b96c:	e13ffe17 	ldw	r4,-8(fp)
8000b970:	000b5200 	call	8000b520 <a10_pll_read>
	return ret != 0x3;
8000b974:	e0bfff17 	ldw	r2,-4(fp)
8000b978:	108000d8 	cmpnei	r2,r2,3
8000b97c:	10803fcc 	andi	r2,r2,255
}
8000b980:	e037883a 	mov	sp,fp
8000b984:	dfc00117 	ldw	ra,4(sp)
8000b988:	df000017 	ldw	fp,0(sp)
8000b98c:	dec00204 	addi	sp,sp,8
8000b990:	f800283a 	ret

8000b994 <pll_enable>:

/*******************************************************************************
* @brief pll_enable
*******************************************************************************/
uint32_t pll_enable(xcvr_pll *mypll)
{
8000b994:	defffd04 	addi	sp,sp,-12
8000b998:	dfc00215 	stw	ra,8(sp)
8000b99c:	df000115 	stw	fp,4(sp)
8000b9a0:	df000104 	addi	fp,sp,4
8000b9a4:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
8000b9a8:	e0bfff17 	ldw	r2,-4(fp)
8000b9ac:	10800017 	ldw	r2,0(r2)
8000b9b0:	10c000b0 	cmpltui	r3,r2,2
8000b9b4:	1800101e 	bne	r3,zero,8000b9f8 <pll_enable+0x64>
8000b9b8:	10800128 	cmpgeui	r2,r2,4
8000b9bc:	1000071e 	bne	r2,zero,8000b9dc <pll_enable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n",
8000b9c0:	016000b4 	movhi	r5,32770
8000b9c4:	2959ac04 	addi	r5,r5,26288
8000b9c8:	012000b4 	movhi	r4,32770
8000b9cc:	21199104 	addi	r4,r4,26180
8000b9d0:	0010d740 	call	80010d74 <printf>
				__func__);
			return 0;
8000b9d4:	0005883a 	mov	r2,zero
8000b9d8:	00000d06 	br	8000ba10 <pll_enable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
8000b9dc:	016000b4 	movhi	r5,32770
8000b9e0:	2959ac04 	addi	r5,r5,26288
8000b9e4:	012000b4 	movhi	r4,32770
8000b9e8:	21195d04 	addi	r4,r4,25972
8000b9ec:	0010d740 	call	80010d74 <printf>
			return -1;
8000b9f0:	00bfffc4 	movi	r2,-1
8000b9f4:	00000606 	br	8000ba10 <pll_enable+0x7c>
			break;
8000b9f8:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x2);
8000b9fc:	01800084 	movi	r6,2
8000ba00:	0140b804 	movi	r5,736
8000ba04:	e13fff17 	ldw	r4,-4(fp)
8000ba08:	000b5780 	call	8000b578 <a10_pll_write>
		return 0;
8000ba0c:	0005883a 	mov	r2,zero
}
8000ba10:	e037883a 	mov	sp,fp
8000ba14:	dfc00117 	ldw	ra,4(sp)
8000ba18:	df000017 	ldw	fp,0(sp)
8000ba1c:	dec00204 	addi	sp,sp,8
8000ba20:	f800283a 	ret

8000ba24 <pll_disable>:

/*******************************************************************************
* @brief pll_disable
*******************************************************************************/
uint32_t pll_disable(xcvr_pll *mypll)
{
8000ba24:	defffd04 	addi	sp,sp,-12
8000ba28:	dfc00215 	stw	ra,8(sp)
8000ba2c:	df000115 	stw	fp,4(sp)
8000ba30:	df000104 	addi	fp,sp,4
8000ba34:	e13fff15 	stw	r4,-4(fp)
	switch (mypll->type) {
8000ba38:	e0bfff17 	ldw	r2,-4(fp)
8000ba3c:	10800017 	ldw	r2,0(r2)
8000ba40:	10c000b0 	cmpltui	r3,r2,2
8000ba44:	1800101e 	bne	r3,zero,8000ba88 <pll_disable+0x64>
8000ba48:	10800128 	cmpgeui	r2,r2,4
8000ba4c:	1000071e 	bne	r2,zero,8000ba6c <pll_disable+0x48>
		case fpll_type:
		case atx_type:
			break;
		case cmu_cdr_type: // PMA RX
		case cmu_tx_type: // PMA TX
			printf("%s: PMA has no powerdown option!\n", __func__);
8000ba50:	016000b4 	movhi	r5,32770
8000ba54:	2959af04 	addi	r5,r5,26300
8000ba58:	012000b4 	movhi	r4,32770
8000ba5c:	21199104 	addi	r4,r4,26180
8000ba60:	0010d740 	call	80010d74 <printf>
			return 0;
8000ba64:	0005883a 	mov	r2,zero
8000ba68:	00000d06 	br	8000baa0 <pll_disable+0x7c>
		default:
			printf("%s: Pll type not defined!\n", __func__);
8000ba6c:	016000b4 	movhi	r5,32770
8000ba70:	2959af04 	addi	r5,r5,26300
8000ba74:	012000b4 	movhi	r4,32770
8000ba78:	21195d04 	addi	r4,r4,25972
8000ba7c:	0010d740 	call	80010d74 <printf>
			return -1;
8000ba80:	00bfffc4 	movi	r2,-1
8000ba84:	00000606 	br	8000baa0 <pll_disable+0x7c>
			break;
8000ba88:	0001883a 	nop
		}
		a10_pll_write(mypll, 0x2e0, 0x3);
8000ba8c:	018000c4 	movi	r6,3
8000ba90:	0140b804 	movi	r5,736
8000ba94:	e13fff17 	ldw	r4,-4(fp)
8000ba98:	000b5780 	call	8000b578 <a10_pll_write>
	return 0;
8000ba9c:	0005883a 	mov	r2,zero
}
8000baa0:	e037883a 	mov	sp,fp
8000baa4:	dfc00117 	ldw	ra,4(sp)
8000baa8:	df000017 	ldw	fp,0(sp)
8000baac:	dec00204 	addi	sp,sp,8
8000bab0:	f800283a 	ret

8000bab4 <fmcdaq2_reconfig>:
int fmcdaq2_reconfig(struct ad9144_init_param *p_ad9144_param,
           xcvr_core *p_ad9144_xcvr,
           struct ad9680_init_param *p_ad9680_param,
           xcvr_core *p_ad9680_xcvr,
           struct ad9523_platform_data *p_ad9523_param)
{
8000bab4:	defff904 	addi	sp,sp,-28
8000bab8:	dfc00615 	stw	ra,24(sp)
8000babc:	df000515 	stw	fp,20(sp)
8000bac0:	df000504 	addi	fp,sp,20
8000bac4:	e13ffe15 	stw	r4,-8(fp)
8000bac8:	e17ffd15 	stw	r5,-12(fp)
8000bacc:	e1bffc15 	stw	r6,-16(fp)
8000bad0:	e1fffb15 	stw	r7,-20(fp)
   uint8_t mode = 0;
8000bad4:	e03fffc5 	stb	zero,-1(fp)

   printf ("Available sampling rates:\n");
8000bad8:	012000b4 	movhi	r4,32770
8000badc:	2119b204 	addi	r4,r4,26312
8000bae0:	0010e980 	call	80010e98 <puts>
   printf ("\t1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
8000bae4:	012000b4 	movhi	r4,32770
8000bae8:	2119b904 	addi	r4,r4,26340
8000baec:	0010e980 	call	80010e98 <puts>
   printf ("\t2 - ADC  500 MSPS; DAC 1000 MSPS\n");
8000baf0:	012000b4 	movhi	r4,32770
8000baf4:	2119c204 	addi	r4,r4,26376
8000baf8:	0010e980 	call	80010e98 <puts>
   printf ("\t3 - ADC  500 MSPS; DAC  500 MSPS\n");
8000bafc:	012000b4 	movhi	r4,32770
8000bb00:	2119cb04 	addi	r4,r4,26412
8000bb04:	0010e980 	call	80010e98 <puts>
   printf ("\t4 - ADC  600 MSPS; DAC  600 MSPS\n");
8000bb08:	012000b4 	movhi	r4,32770
8000bb0c:	2119d404 	addi	r4,r4,26448
8000bb10:	0010e980 	call	80010e98 <puts>
   printf ("\t5 - ADC 1000 MSPS; DAC 2000 MSPS (2x interpolation)\n");
8000bb14:	012000b4 	movhi	r4,32770
8000bb18:	2119dd04 	addi	r4,r4,26484
8000bb1c:	0010e980 	call	80010e98 <puts>
   printf ("choose an option [default 1]:\n");
8000bb20:	012000b4 	movhi	r4,32770
8000bb24:	2119eb04 	addi	r4,r4,26540
8000bb28:	0010e980 	call	80010e98 <puts>

   mode = ad_uart_read();
8000bb2c:	00083a80 	call	800083a8 <ad_uart_read>
8000bb30:	e0bfffc5 	stb	r2,-1(fp)

   switch (mode) {
8000bb34:	e0bfffc3 	ldbu	r2,-1(fp)
8000bb38:	10c00ce0 	cmpeqi	r3,r2,51
8000bb3c:	1800661e 	bne	r3,zero,8000bcd8 <fmcdaq2_reconfig+0x224>
8000bb40:	10c00d08 	cmpgei	r3,r2,52
8000bb44:	1800031e 	bne	r3,zero,8000bb54 <fmcdaq2_reconfig+0xa0>
8000bb48:	10800ca0 	cmpeqi	r2,r2,50
8000bb4c:	1000ac1e 	bne	r2,zero,8000be00 <fmcdaq2_reconfig+0x34c>
8000bb50:	0000f506 	br	8000bf28 <fmcdaq2_reconfig+0x474>
8000bb54:	10c00d20 	cmpeqi	r3,r2,52
8000bb58:	1800151e 	bne	r3,zero,8000bbb0 <fmcdaq2_reconfig+0xfc>
8000bb5c:	10800d60 	cmpeqi	r2,r2,53
8000bb60:	1000f126 	beq	r2,zero,8000bf28 <fmcdaq2_reconfig+0x474>
   case '5':
      /* REF clock = 100 MHz */
      p_ad9523_param->channels[DAC_DEVICE_CLK].channel_divider = 10;
8000bb64:	e0800217 	ldw	r2,8(fp)
8000bb68:	10800c17 	ldw	r2,48(r2)
8000bb6c:	00c00284 	movi	r3,10
8000bb70:	10c0020d 	sth	r3,8(r2)
      p_ad9144_param->pll_ref_frequency_khz = 100000;
8000bb74:	e0fffe17 	ldw	r3,-8(fp)
8000bb78:	008000b4 	movhi	r2,2
8000bb7c:	10a1a804 	addi	r2,r2,-31072
8000bb80:	18801a15 	stw	r2,104(r3)

      /* DAC at 2 GHz using the internal PLL and 2 times interpolation */
      p_ad9144_param->interpolation = 2;
8000bb84:	e0bffe17 	ldw	r2,-8(fp)
8000bb88:	00c00084 	movi	r3,2
8000bb8c:	10c00445 	stb	r3,17(r2)
      p_ad9144_param->pll_enable = 1;
8000bb90:	e0bffe17 	ldw	r2,-8(fp)
8000bb94:	00c00044 	movi	r3,1
8000bb98:	10c019c5 	stb	r3,103(r2)
      p_ad9144_param->pll_dac_frequency_khz = 2000000;
8000bb9c:	e0fffe17 	ldw	r3,-8(fp)
8000bba0:	008007f4 	movhi	r2,31
8000bba4:	10a12004 	addi	r2,r2,-31616
8000bba8:	18801b15 	stw	r2,108(r3)
      break;
8000bbac:	0000ea06 	br	8000bf58 <fmcdaq2_reconfig+0x4a4>
   case '4':
      printf ("4 - ADC  600 MSPS; DAC  600 MSPS\n");
8000bbb0:	012000b4 	movhi	r4,32770
8000bbb4:	2119f304 	addi	r4,r4,26572
8000bbb8:	0010e980 	call	80010e98 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 5;
8000bbbc:	e0800217 	ldw	r2,8(fp)
8000bbc0:	00c00144 	movi	r3,5
8000bbc4:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
8000bbc8:	e0800217 	ldw	r2,8(fp)
8000bbcc:	10800c17 	ldw	r2,48(r2)
8000bbd0:	10800d04 	addi	r2,r2,52
8000bbd4:	00c00084 	movi	r3,2
8000bbd8:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
8000bbdc:	e0800217 	ldw	r2,8(fp)
8000bbe0:	10800c17 	ldw	r2,48(r2)
8000bbe4:	00c00044 	movi	r3,1
8000bbe8:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
8000bbec:	e0800217 	ldw	r2,8(fp)
8000bbf0:	10800c17 	ldw	r2,48(r2)
8000bbf4:	10800684 	addi	r2,r2,26
8000bbf8:	00c02004 	movi	r3,128
8000bbfc:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
8000bc00:	e0800217 	ldw	r2,8(fp)
8000bc04:	10800c17 	ldw	r2,48(r2)
8000bc08:	10801384 	addi	r2,r2,78
8000bc0c:	00c02004 	movi	r3,128
8000bc10:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 2;
8000bc14:	e0800217 	ldw	r2,8(fp)
8000bc18:	10800c17 	ldw	r2,48(r2)
8000bc1c:	10802704 	addi	r2,r2,156
8000bc20:	00c00084 	movi	r3,2
8000bc24:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 1;
8000bc28:	e0800217 	ldw	r2,8(fp)
8000bc2c:	10800c17 	ldw	r2,48(r2)
8000bc30:	10801a04 	addi	r2,r2,104
8000bc34:	00c00044 	movi	r3,1
8000bc38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 128;
8000bc3c:	e0800217 	ldw	r2,8(fp)
8000bc40:	10800c17 	ldw	r2,48(r2)
8000bc44:	10802084 	addi	r2,r2,130
8000bc48:	00c02004 	movi	r3,128
8000bc4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 128;
8000bc50:	e0800217 	ldw	r2,8(fp)
8000bc54:	10800c17 	ldw	r2,48(r2)
8000bc58:	10802d84 	addi	r2,r2,182
8000bc5c:	00c02004 	movi	r3,128
8000bc60:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
8000bc64:	e0bffd17 	ldw	r2,-12(fp)
8000bc68:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 6000000;
8000bc6c:	e0fffe17 	ldw	r3,-8(fp)
8000bc70:	00801734 	movhi	r2,92
8000bc74:	10a36004 	addi	r2,r2,-29312
8000bc78:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 6000000;
8000bc7c:	e0fffd17 	ldw	r3,-12(fp)
8000bc80:	00801734 	movhi	r2,92
8000bc84:	10a36004 	addi	r2,r2,-29312
8000bc88:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 300000;
8000bc8c:	e0fffd17 	ldw	r3,-12(fp)
8000bc90:	00800174 	movhi	r2,5
8000bc94:	10a4f804 	addi	r2,r2,-27680
8000bc98:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
8000bc9c:	e0bffb17 	ldw	r2,-20(fp)
8000bca0:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 6000000;
8000bca4:	e0fffc17 	ldw	r3,-16(fp)
8000bca8:	00801734 	movhi	r2,92
8000bcac:	10a36004 	addi	r2,r2,-29312
8000bcb0:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 6000000;
8000bcb4:	e0fffb17 	ldw	r3,-20(fp)
8000bcb8:	00801734 	movhi	r2,92
8000bcbc:	10a36004 	addi	r2,r2,-29312
8000bcc0:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 300000;
8000bcc4:	e0fffb17 	ldw	r3,-20(fp)
8000bcc8:	00800174 	movhi	r2,5
8000bccc:	10a4f804 	addi	r2,r2,-27680
8000bcd0:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
8000bcd4:	0000a006 	br	8000bf58 <fmcdaq2_reconfig+0x4a4>
   case '3':
      printf ("3 - ADC  500 MSPS; DAC  500 MSPS\n");
8000bcd8:	012000b4 	movhi	r4,32770
8000bcdc:	2119fc04 	addi	r4,r4,26608
8000bce0:	0010e980 	call	80010e98 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 3;
8000bce4:	e0800217 	ldw	r2,8(fp)
8000bce8:	00c000c4 	movi	r3,3
8000bcec:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 4;
8000bcf0:	e0800217 	ldw	r2,8(fp)
8000bcf4:	10800c17 	ldw	r2,48(r2)
8000bcf8:	10800d04 	addi	r2,r2,52
8000bcfc:	00c00104 	movi	r3,4
8000bd00:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 2;
8000bd04:	e0800217 	ldw	r2,8(fp)
8000bd08:	10800c17 	ldw	r2,48(r2)
8000bd0c:	00c00084 	movi	r3,2
8000bd10:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 256;
8000bd14:	e0800217 	ldw	r2,8(fp)
8000bd18:	10800c17 	ldw	r2,48(r2)
8000bd1c:	10800684 	addi	r2,r2,26
8000bd20:	00c04004 	movi	r3,256
8000bd24:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 256;
8000bd28:	e0800217 	ldw	r2,8(fp)
8000bd2c:	10800c17 	ldw	r2,48(r2)
8000bd30:	10801384 	addi	r2,r2,78
8000bd34:	00c04004 	movi	r3,256
8000bd38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 4;
8000bd3c:	e0800217 	ldw	r2,8(fp)
8000bd40:	10800c17 	ldw	r2,48(r2)
8000bd44:	10802704 	addi	r2,r2,156
8000bd48:	00c00104 	movi	r3,4
8000bd4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 2;
8000bd50:	e0800217 	ldw	r2,8(fp)
8000bd54:	10800c17 	ldw	r2,48(r2)
8000bd58:	10801a04 	addi	r2,r2,104
8000bd5c:	00c00084 	movi	r3,2
8000bd60:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 256;
8000bd64:	e0800217 	ldw	r2,8(fp)
8000bd68:	10800c17 	ldw	r2,48(r2)
8000bd6c:	10802084 	addi	r2,r2,130
8000bd70:	00c04004 	movi	r3,256
8000bd74:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 256;
8000bd78:	e0800217 	ldw	r2,8(fp)
8000bd7c:	10800c17 	ldw	r2,48(r2)
8000bd80:	10802d84 	addi	r2,r2,182
8000bd84:	00c04004 	movi	r3,256
8000bd88:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
8000bd8c:	e0bffd17 	ldw	r2,-12(fp)
8000bd90:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 5000000;
8000bd94:	e0fffe17 	ldw	r3,-8(fp)
8000bd98:	00801334 	movhi	r2,76
8000bd9c:	1092d004 	addi	r2,r2,19264
8000bda0:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 5000000;
8000bda4:	e0fffd17 	ldw	r3,-12(fp)
8000bda8:	00801334 	movhi	r2,76
8000bdac:	1092d004 	addi	r2,r2,19264
8000bdb0:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 250000;
8000bdb4:	e0fffd17 	ldw	r3,-12(fp)
8000bdb8:	00800134 	movhi	r2,4
8000bdbc:	10b42404 	addi	r2,r2,-12144
8000bdc0:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
8000bdc4:	e0bffb17 	ldw	r2,-20(fp)
8000bdc8:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 5000000;
8000bdcc:	e0fffc17 	ldw	r3,-16(fp)
8000bdd0:	00801334 	movhi	r2,76
8000bdd4:	1092d004 	addi	r2,r2,19264
8000bdd8:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 5000000;
8000bddc:	e0fffb17 	ldw	r3,-20(fp)
8000bde0:	00801334 	movhi	r2,76
8000bde4:	1092d004 	addi	r2,r2,19264
8000bde8:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 250000;
8000bdec:	e0fffb17 	ldw	r3,-20(fp)
8000bdf0:	00800134 	movhi	r2,4
8000bdf4:	10b42404 	addi	r2,r2,-12144
8000bdf8:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
8000bdfc:	00005606 	br	8000bf58 <fmcdaq2_reconfig+0x4a4>
   case '2':
      printf ("2 - ADC  500 MSPS; DAC 1000 MSPS\n");
8000be00:	012000b4 	movhi	r4,32770
8000be04:	211a0504 	addi	r4,r4,26644
8000be08:	0010e980 	call	80010e98 <puts>
      p_ad9523_param->pll2_vco_diff_m1 = 3;
8000be0c:	e0800217 	ldw	r2,8(fp)
8000be10:	00c000c4 	movi	r3,3
8000be14:	10c00905 	stb	r3,36(r2)
      (&p_ad9523_param->channels[DAC_FPGA_CLK])->channel_divider = 2;
8000be18:	e0800217 	ldw	r2,8(fp)
8000be1c:	10800c17 	ldw	r2,48(r2)
8000be20:	10800d04 	addi	r2,r2,52
8000be24:	00c00084 	movi	r3,2
8000be28:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_CLK])->channel_divider = 1;
8000be2c:	e0800217 	ldw	r2,8(fp)
8000be30:	10800c17 	ldw	r2,48(r2)
8000be34:	00c00044 	movi	r3,1
8000be38:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_DEVICE_SYSREF])->channel_divider = 128;
8000be3c:	e0800217 	ldw	r2,8(fp)
8000be40:	10800c17 	ldw	r2,48(r2)
8000be44:	10800684 	addi	r2,r2,26
8000be48:	00c02004 	movi	r3,128
8000be4c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[DAC_FPGA_SYSREF])->channel_divider = 128;
8000be50:	e0800217 	ldw	r2,8(fp)
8000be54:	10800c17 	ldw	r2,48(r2)
8000be58:	10801384 	addi	r2,r2,78
8000be5c:	00c02004 	movi	r3,128
8000be60:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_CLK])->channel_divider = 4;
8000be64:	e0800217 	ldw	r2,8(fp)
8000be68:	10800c17 	ldw	r2,48(r2)
8000be6c:	10802704 	addi	r2,r2,156
8000be70:	00c00104 	movi	r3,4
8000be74:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_CLK])->channel_divider = 2;
8000be78:	e0800217 	ldw	r2,8(fp)
8000be7c:	10800c17 	ldw	r2,48(r2)
8000be80:	10801a04 	addi	r2,r2,104
8000be84:	00c00084 	movi	r3,2
8000be88:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_DEVICE_SYSREF])->channel_divider = 256;
8000be8c:	e0800217 	ldw	r2,8(fp)
8000be90:	10800c17 	ldw	r2,48(r2)
8000be94:	10802084 	addi	r2,r2,130
8000be98:	00c04004 	movi	r3,256
8000be9c:	10c0020d 	sth	r3,8(r2)
      (&p_ad9523_param->channels[ADC_FPGA_SYSREF])->channel_divider = 256;
8000bea0:	e0800217 	ldw	r2,8(fp)
8000bea4:	10800c17 	ldw	r2,48(r2)
8000bea8:	10802d84 	addi	r2,r2,182
8000beac:	00c04004 	movi	r3,256
8000beb0:	10c0020d 	sth	r3,8(r2)
      p_ad9144_xcvr->reconfig_bypass = 0;
8000beb4:	e0bffd17 	ldw	r2,-12(fp)
8000beb8:	10000605 	stb	zero,24(r2)
      p_ad9144_param->lane_rate_kbps = 10000000;
8000bebc:	e0fffe17 	ldw	r3,-8(fp)
8000bec0:	00802674 	movhi	r2,153
8000bec4:	10a5a004 	addi	r2,r2,-27008
8000bec8:	18801515 	stw	r2,84(r3)
      p_ad9144_xcvr->lane_rate_kbps = 10000000;
8000becc:	e0fffd17 	ldw	r3,-12(fp)
8000bed0:	00802674 	movhi	r2,153
8000bed4:	10a5a004 	addi	r2,r2,-27008
8000bed8:	18800415 	stw	r2,16(r3)
      p_ad9144_xcvr->ref_rate_khz = 500000;
8000bedc:	e0fffd17 	ldw	r3,-12(fp)
8000bee0:	00800234 	movhi	r2,8
8000bee4:	10a84804 	addi	r2,r2,-24288
8000bee8:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->reconfig_bypass = 0;
8000beec:	e0bffb17 	ldw	r2,-20(fp)
8000bef0:	10000605 	stb	zero,24(r2)
      p_ad9680_param->lane_rate_kbps = 5000000;
8000bef4:	e0fffc17 	ldw	r3,-16(fp)
8000bef8:	00801334 	movhi	r2,76
8000befc:	1092d004 	addi	r2,r2,19264
8000bf00:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->lane_rate_kbps = 5000000;
8000bf04:	e0fffb17 	ldw	r3,-20(fp)
8000bf08:	00801334 	movhi	r2,76
8000bf0c:	1092d004 	addi	r2,r2,19264
8000bf10:	18800415 	stw	r2,16(r3)
      p_ad9680_xcvr->ref_rate_khz = 250000;
8000bf14:	e0fffb17 	ldw	r3,-20(fp)
8000bf18:	00800134 	movhi	r2,4
8000bf1c:	10b42404 	addi	r2,r2,-12144
8000bf20:	18800515 	stw	r2,20(r3)

      p_ad9680_xcvr->dev.lpm_enable = 1;
      p_ad9680_xcvr->dev.cpll_enable = 1;
      p_ad9680_xcvr->dev.out_clk_sel = 4;
#endif
      break;
8000bf24:	00000c06 	br	8000bf58 <fmcdaq2_reconfig+0x4a4>
   default:
      printf ("1 - ADC 1000 MSPS; DAC 1000 MSPS\n");
8000bf28:	012000b4 	movhi	r4,32770
8000bf2c:	211a0e04 	addi	r4,r4,26680
8000bf30:	0010e980 	call	80010e98 <puts>
      p_ad9144_xcvr->ref_rate_khz = 500000;
8000bf34:	e0fffd17 	ldw	r3,-12(fp)
8000bf38:	00800234 	movhi	r2,8
8000bf3c:	10a84804 	addi	r2,r2,-24288
8000bf40:	18800515 	stw	r2,20(r3)
      p_ad9680_xcvr->ref_rate_khz = 500000;
8000bf44:	e0fffb17 	ldw	r3,-20(fp)
8000bf48:	00800234 	movhi	r2,8
8000bf4c:	10a84804 	addi	r2,r2,-24288
8000bf50:	18800515 	stw	r2,20(r3)
      break;
8000bf54:	0001883a 	nop
   }

   return(0);
8000bf58:	0005883a 	mov	r2,zero
}
8000bf5c:	e037883a 	mov	sp,fp
8000bf60:	dfc00117 	ldw	ra,4(sp)
8000bf64:	df000017 	ldw	fp,0(sp)
8000bf68:	dec00204 	addi	sp,sp,8
8000bf6c:	f800283a 	ret

8000bf70 <daq2_init>:


int daq2_init()
{
8000bf70:	defefd04 	addi	sp,sp,-1036
8000bf74:	dfc10215 	stw	ra,1032(sp)
8000bf78:	df010115 	stw	fp,1028(sp)
8000bf7c:	df010104 	addi	fp,sp,1028

   spi_init_param ad9523_spi_param;
   spi_init_param ad9144_spi_param;
   spi_init_param ad9680_spi_param;

   ad9523_spi_param.type = NIOS_II_SPI;
8000bf80:	008000c4 	movi	r2,3
8000bf84:	e0bffb15 	stw	r2,-20(fp)
   ad9144_spi_param.type = NIOS_II_SPI;
8000bf88:	008000c4 	movi	r2,3
8000bf8c:	e0bff715 	stw	r2,-36(fp)
   ad9680_spi_param.type = NIOS_II_SPI;
8000bf90:	008000c4 	movi	r2,3
8000bf94:	e0bff315 	stw	r2,-52(fp)

   ad9523_spi_param.chip_select = SPI_CHIP_SELECT(0);
8000bf98:	00bfff84 	movi	r2,-2
8000bf9c:	e0bffc05 	stb	r2,-16(fp)
   ad9144_spi_param.chip_select = SPI_CHIP_SELECT(1);
8000bfa0:	00bfff44 	movi	r2,-3
8000bfa4:	e0bff805 	stb	r2,-32(fp)
   ad9680_spi_param.chip_select = SPI_CHIP_SELECT(2);
8000bfa8:	00bffec4 	movi	r2,-5
8000bfac:	e0bff405 	stb	r2,-48(fp)
   ad9523_spi_param.cpha = 0;
8000bfb0:	e03ffd15 	stw	zero,-12(fp)
   ad9144_spi_param.cpha = 0;
8000bfb4:	e03ff915 	stw	zero,-28(fp)
   ad9680_spi_param.cpha = 0;
8000bfb8:	e03ff515 	stw	zero,-44(fp)
   ad9523_spi_param.cpol = 0;
8000bfbc:	e03ffe15 	stw	zero,-8(fp)
   ad9144_spi_param.cpol = 0;
8000bfc0:	e03ffa15 	stw	zero,-24(fp)
   ad9680_spi_param.cpol = 0;
8000bfc4:	e03ff615 	stw	zero,-40(fp)
   struct ad9523_platform_data   ad9523_pdata;
   struct ad9523_init_param   ad9523_param;
   struct ad9144_init_param   ad9144_param;
   struct ad9680_init_param   ad9680_param;

   ad9523_param.spi_init = ad9523_spi_param;
8000bfc8:	e0bffb17 	ldw	r2,-20(fp)
8000bfcc:	e0bfa915 	stw	r2,-348(fp)
8000bfd0:	e0bffc17 	ldw	r2,-16(fp)
8000bfd4:	e0bfaa15 	stw	r2,-344(fp)
8000bfd8:	e0bffd17 	ldw	r2,-12(fp)
8000bfdc:	e0bfab15 	stw	r2,-340(fp)
8000bfe0:	e0bffe17 	ldw	r2,-8(fp)
8000bfe4:	e0bfac15 	stw	r2,-336(fp)
   ad9144_param.spi_init = ad9144_spi_param;
8000bfe8:	e0bff717 	ldw	r2,-36(fp)
8000bfec:	e0bf8d15 	stw	r2,-460(fp)
8000bff0:	e0bff817 	ldw	r2,-32(fp)
8000bff4:	e0bf8e15 	stw	r2,-456(fp)
8000bff8:	e0bff917 	ldw	r2,-28(fp)
8000bffc:	e0bf8f15 	stw	r2,-452(fp)
8000c000:	e0bffa17 	ldw	r2,-24(fp)
8000c004:	e0bf9015 	stw	r2,-448(fp)
   ad9680_param.spi_init = ad9680_spi_param;
8000c008:	e0bff317 	ldw	r2,-52(fp)
8000c00c:	e0bf8815 	stw	r2,-480(fp)
8000c010:	e0bff417 	ldw	r2,-48(fp)
8000c014:	e0bf8915 	stw	r2,-476(fp)
8000c018:	e0bff517 	ldw	r2,-44(fp)
8000c01c:	e0bf8a15 	stw	r2,-472(fp)
8000c020:	e0bff617 	ldw	r2,-40(fp)
8000c024:	e0bf8b15 	stw	r2,-468(fp)
   dmac_core               ad9680_dma;
   dmac_xfer               rx_xfer;
   dmac_xfer               tx_xfer;


   ad9144_xcvr.base_address = AD9144_JESD204_LINK_MANAGEMENT_BASE;
8000c028:	008001b4 	movhi	r2,6
8000c02c:	10a80004 	addi	r2,r2,-24576
8000c030:	e0bf3f15 	stw	r2,-772(fp)
   ad9144_xcvr.dev.link_pll.base_address = AD9144_JESD204_LINK_PLL_RECONFIG_BASE;
8000c034:	008001b4 	movhi	r2,6
8000c038:	10a00004 	addi	r2,r2,-32768
8000c03c:	e0bf4915 	stw	r2,-732(fp)
   ad9144_xcvr.dev.atx_pll.base_address = AD9144_JESD204_LANE_PLL_RECONFIG_BASE;
8000c040:	008001b4 	movhi	r2,6
8000c044:	10ac0004 	addi	r2,r2,-20480
8000c048:	e0bf4c15 	stw	r2,-720(fp)
   ad9144_core.base_address = AD9144_CORE_BASE;
8000c04c:	00800134 	movhi	r2,4
8000c050:	e0bf8215 	stw	r2,-504(fp)
   ad9680_xcvr.base_address = AD9680_JESD204_LINK_MANAGEMENT_BASE;
8000c054:	008001b4 	movhi	r2,6
8000c058:	10a40004 	addi	r2,r2,-28672
8000c05c:	e0bf0f15 	stw	r2,-964(fp)
   ad9680_xcvr.dev.link_pll.base_address = AD9680_JESD204_LINK_PLL_RECONFIG_BASE;
8000c060:	00800174 	movhi	r2,5
8000c064:	109c0004 	addi	r2,r2,28672
8000c068:	e0bf1915 	stw	r2,-924(fp)
   ad9680_core.base_address = AD9680_CORE_BASE;
8000c06c:	008000f4 	movhi	r2,3
8000c070:	e0bf3c15 	stw	r2,-784(fp)
   ad9144_jesd.base_address = AD9144_JESD204_LINK_RECONFIG_BASE;
8000c074:	008000f4 	movhi	r2,3
8000c078:	10a00004 	addi	r2,r2,-32768
8000c07c:	e0bf6a15 	stw	r2,-600(fp)
   ad9680_jesd.base_address = AD9680_JESD204_LINK_RECONFIG_BASE;
8000c080:	008000b4 	movhi	r2,2
8000c084:	10900004 	addi	r2,r2,16384
8000c088:	e0bf3615 	stw	r2,-808(fp)

   ad9144_xcvr.dev.channel_pll[0].type = cmu_tx_type;
8000c08c:	008000c4 	movi	r2,3
8000c090:	e0bf4e15 	stw	r2,-712(fp)
   ad9680_xcvr.dev.channel_pll[0].type = cmu_cdr_type;
8000c094:	00800084 	movi	r2,2
8000c098:	e0bf1e15 	stw	r2,-904(fp)
   ad9144_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S0_BASE;
8000c09c:	00800174 	movhi	r2,5
8000c0a0:	10980004 	addi	r2,r2,24576
8000c0a4:	e0bf4f15 	stw	r2,-708(fp)
   ad9680_xcvr.dev.channel_pll[0].base_address = AVL_ADXCFG_0_RCFG_S1_BASE;
8000c0a8:	00800174 	movhi	r2,5
8000c0ac:	10880004 	addi	r2,r2,8192
8000c0b0:	e0bf1f15 	stw	r2,-900(fp)

   ad9680_dma.base_address = AD9680_DMA_BASE;
8000c0b4:	008000f4 	movhi	r2,3
8000c0b8:	10b40004 	addi	r2,r2,-12288
8000c0bc:	e0bf0a15 	stw	r2,-984(fp)
   ad9144_dma.base_address = AD9144_DMA_BASE;
8000c0c0:	008000f4 	movhi	r2,3
8000c0c4:	10b80004 	addi	r2,r2,-8192
8000c0c8:	e0bf6615 	stw	r2,-616(fp)
   rx_xfer.start_address =  0x800000;
8000c0cc:	00802034 	movhi	r2,128
8000c0d0:	e0bf0815 	stw	r2,-992(fp)
   tx_xfer.start_address =  0x900000;
8000c0d4:	00802434 	movhi	r2,144
8000c0d8:	e0bf0515 	stw	r2,-1004(fp)

   //******************************************************************************
   // clock distribution device (AD9523) configuration
   //******************************************************************************
   ad9523_pdata.num_channels = 8;
8000c0dc:	00800204 	movi	r2,8
8000c0e0:	e0bfb915 	stw	r2,-284(fp)
   ad9523_pdata.channels = &ad9523_channels[0];
8000c0e4:	e0bfbf04 	addi	r2,fp,-260
8000c0e8:	e0bfba15 	stw	r2,-280(fp)
   ad9523_param.pdata = &ad9523_pdata;
8000c0ec:	e0bfae04 	addi	r2,fp,-328
8000c0f0:	e0bfad15 	stw	r2,-332(fp)
   ad9523_init(&ad9523_param);
8000c0f4:	e0bfa904 	addi	r2,fp,-348
8000c0f8:	1009883a 	mov	r4,r2
8000c0fc:	0001e6c0 	call	80001e6c <ad9523_init>

   // dac device-clk-sysref, fpga-clk-sysref

   ad9523_channels[DAC_DEVICE_CLK].channel_num = 1;
8000c100:	00800044 	movi	r2,1
8000c104:	e0bfbf05 	stb	r2,-260(fp)
   ad9523_channels[DAC_DEVICE_CLK].channel_divider = 1;
8000c108:	00800044 	movi	r2,1
8000c10c:	e0bfc10d 	sth	r2,-252(fp)
   ad9523_channels[DAC_DEVICE_SYSREF].channel_num = 7;
8000c110:	008001c4 	movi	r2,7
8000c114:	e0bfc585 	stb	r2,-234(fp)
   ad9523_channels[DAC_DEVICE_SYSREF].channel_divider = 128;
8000c118:	00802004 	movi	r2,128
8000c11c:	e0bfc78d 	sth	r2,-226(fp)
   ad9523_channels[DAC_FPGA_CLK].channel_num = 9;
8000c120:	00800244 	movi	r2,9
8000c124:	e0bfcc05 	stb	r2,-208(fp)
   ad9523_channels[DAC_FPGA_CLK].channel_divider = 2;
8000c128:	00800084 	movi	r2,2
8000c12c:	e0bfce0d 	sth	r2,-200(fp)
   ad9523_channels[DAC_FPGA_SYSREF].channel_num = 8;
8000c130:	00800204 	movi	r2,8
8000c134:	e0bfd285 	stb	r2,-182(fp)
   ad9523_channels[DAC_FPGA_SYSREF].channel_divider = 128;
8000c138:	00802004 	movi	r2,128
8000c13c:	e0bfd48d 	sth	r2,-174(fp)

   // adc device-clk-sysref, fpga-clk-sysref

   ad9523_channels[ADC_DEVICE_CLK].channel_num = 13;
8000c140:	00800344 	movi	r2,13
8000c144:	e0bfd905 	stb	r2,-156(fp)
   ad9523_channels[ADC_DEVICE_CLK].channel_divider = 1;
8000c148:	00800044 	movi	r2,1
8000c14c:	e0bfdb0d 	sth	r2,-148(fp)
   ad9523_channels[ADC_DEVICE_SYSREF].channel_num = 6;
8000c150:	00800184 	movi	r2,6
8000c154:	e0bfdf85 	stb	r2,-130(fp)
   ad9523_channels[ADC_DEVICE_SYSREF].channel_divider = 128;
8000c158:	00802004 	movi	r2,128
8000c15c:	e0bfe18d 	sth	r2,-122(fp)
   ad9523_channels[ADC_FPGA_CLK].channel_num = 4;
8000c160:	00800104 	movi	r2,4
8000c164:	e0bfe605 	stb	r2,-104(fp)
   ad9523_channels[ADC_FPGA_CLK].channel_divider = 2;
8000c168:	00800084 	movi	r2,2
8000c16c:	e0bfe80d 	sth	r2,-96(fp)
   ad9523_channels[ADC_FPGA_SYSREF].channel_num = 5;
8000c170:	00800144 	movi	r2,5
8000c174:	e0bfec85 	stb	r2,-78(fp)
   ad9523_channels[ADC_FPGA_SYSREF].channel_divider = 128;
8000c178:	00802004 	movi	r2,128
8000c17c:	e0bfee8d 	sth	r2,-70(fp)

   // VCXO 125MHz

   ad9523_pdata.vcxo_freq = 125000000;
8000c180:	0081dcf4 	movhi	r2,1907
8000c184:	10965004 	addi	r2,r2,22848
8000c188:	e0bfae15 	stw	r2,-328(fp)
   ad9523_pdata.spi3wire = 1;
8000c18c:	00800044 	movi	r2,1
8000c190:	e0bfaf05 	stb	r2,-324(fp)
   ad9523_pdata.osc_in_diff_en = 1;
8000c194:	00800044 	movi	r2,1
8000c198:	e0bfb005 	stb	r2,-320(fp)
   ad9523_pdata.pll2_charge_pump_current_nA = 413000;
8000c19c:	008001b4 	movhi	r2,6
8000c1a0:	10935204 	addi	r2,r2,19784
8000c1a4:	e0bfb515 	stw	r2,-300(fp)
   ad9523_pdata.pll2_freq_doubler_en = 0;
8000c1a8:	e03fb685 	stb	zero,-294(fp)
   ad9523_pdata.pll2_r2_div = 1;
8000c1ac:	00800044 	movi	r2,1
8000c1b0:	e0bfb6c5 	stb	r2,-293(fp)
   ad9523_pdata.pll2_ndiv_a_cnt = 0;
8000c1b4:	e03fb605 	stb	zero,-296(fp)
   ad9523_pdata.pll2_ndiv_b_cnt = 6;
8000c1b8:	00800184 	movi	r2,6
8000c1bc:	e0bfb645 	stb	r2,-295(fp)
   ad9523_pdata.pll2_vco_diff_m1 = 3;
8000c1c0:	008000c4 	movi	r2,3
8000c1c4:	e0bfb705 	stb	r2,-292(fp)
   ad9523_pdata.pll2_vco_diff_m2 = 0;
8000c1c8:	e03fb745 	stb	zero,-291(fp)
   ad9523_pdata.rpole2 = 0;
8000c1cc:	e03fb785 	stb	zero,-290(fp)
   ad9523_pdata.rzero = 7;
8000c1d0:	008001c4 	movi	r2,7
8000c1d4:	e0bfb7c5 	stb	r2,-289(fp)
   ad9523_pdata.cpole1 = 2;
8000c1d8:	00800084 	movi	r2,2
8000c1dc:	e0bfb805 	stb	r2,-288(fp)

   ad9144_xcvr.ref_rate_khz = 500000;
8000c1e0:	00800234 	movhi	r2,8
8000c1e4:	10a84804 	addi	r2,r2,-24288
8000c1e8:	e0bf4315 	stw	r2,-756(fp)
   ad9680_xcvr.ref_rate_khz = 500000;
8000c1ec:	00800234 	movhi	r2,8
8000c1f0:	10a84804 	addi	r2,r2,-24288
8000c1f4:	e0bf1315 	stw	r2,-948(fp)
   //******************************************************************************
   // DAC (AD9144) and the transmit path (AXI_ADXCVR,
   // JESD204, AXI_AD9144, TX DMAC) configuration
   //******************************************************************************

   xcvr_getconfig(&ad9144_xcvr);
8000c1f8:	e0bf3e04 	addi	r2,fp,-776
8000c1fc:	1009883a 	mov	r4,r2
8000c200:	00086540 	call	80008654 <xcvr_getconfig>
   ad9144_xcvr.reconfig_bypass = 1;
8000c204:	00800044 	movi	r2,1
8000c208:	e0bf4405 	stb	r2,-752(fp)

   ad9144_xcvr.lane_rate_kbps = 10000000;
8000c20c:	00802674 	movhi	r2,153
8000c210:	10a5a004 	addi	r2,r2,-27008
8000c214:	e0bf4215 	stw	r2,-760(fp)

   ad9144_jesd.rx_tx_n = 0;
8000c218:	e03f6b05 	stb	zero,-596(fp)
   ad9144_jesd.scramble_enable = 1;
8000c21c:	00800044 	movi	r2,1
8000c220:	e0bf6b45 	stb	r2,-595(fp)
   ad9144_jesd.octets_per_frame = 1;
8000c224:	00800044 	movi	r2,1
8000c228:	e0bf6bc5 	stb	r2,-593(fp)
   ad9144_jesd.frames_per_multiframe = 32;
8000c22c:	00800804 	movi	r2,32
8000c230:	e0bf6c05 	stb	r2,-592(fp)
   ad9144_jesd.subclass_mode = 1;
8000c234:	00800044 	movi	r2,1
8000c238:	e0bf6d45 	stb	r2,-587(fp)

   ad9144_channels[0].dds_dual_tone = 0;
8000c23c:	e03f7615 	stw	zero,-552(fp)
   ad9144_channels[0].dds_frequency_0 = 33*1000*1000;
8000c240:	00807e34 	movhi	r2,504
8000c244:	10a29004 	addi	r2,r2,-30144
8000c248:	e0bf7015 	stw	r2,-576(fp)
   ad9144_channels[0].dds_phase_0 = 0;
8000c24c:	e03f7115 	stw	zero,-572(fp)
   ad9144_channels[0].dds_scale_0 = 500000;
8000c250:	00800234 	movhi	r2,8
8000c254:	10a84804 	addi	r2,r2,-24288
8000c258:	e0bf7215 	stw	r2,-568(fp)
   ad9144_channels[0].pat_data = 0xb1b0a1a0;
8000c25c:	00ac6c74 	movhi	r2,45489
8000c260:	10a86804 	addi	r2,r2,-24160
8000c264:	e0bf7715 	stw	r2,-548(fp)
   ad9144_channels[1].dds_dual_tone = 0;
8000c268:	e03f7f15 	stw	zero,-516(fp)
   ad9144_channels[1].dds_frequency_0 = 11*1000*1000;
8000c26c:	00802a34 	movhi	r2,168
8000c270:	10b63004 	addi	r2,r2,-10048
8000c274:	e0bf7915 	stw	r2,-540(fp)
   ad9144_channels[1].dds_phase_0 = 0;
8000c278:	e03f7a15 	stw	zero,-536(fp)
   ad9144_channels[1].dds_scale_0 = 500000;
8000c27c:	00800234 	movhi	r2,8
8000c280:	10a84804 	addi	r2,r2,-24288
8000c284:	e0bf7b15 	stw	r2,-532(fp)
   ad9144_channels[1].pat_data = 0xd1d0c1c0;
8000c288:	00b47474 	movhi	r2,53713
8000c28c:	10b07004 	addi	r2,r2,-15936
8000c290:	e0bf8015 	stw	r2,-512(fp)
   ad9144_channels[0].sel = DAC_SRC_DDS;
8000c294:	e03f7815 	stw	zero,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_DDS;
8000c298:	e03f8115 	stw	zero,-508(fp)

   ad9144_param.lane_rate_kbps = 10000000;
8000c29c:	00802674 	movhi	r2,153
8000c2a0:	10a5a004 	addi	r2,r2,-27008
8000c2a4:	e0bfa215 	stw	r2,-376(fp)
   ad9144_param.spi3wire = 1;
8000c2a8:	00800044 	movi	r2,1
8000c2ac:	e0bf9105 	stb	r2,-444(fp)
   ad9144_param.interpolation = 1;
8000c2b0:	00800044 	movi	r2,1
8000c2b4:	e0bf9145 	stb	r2,-443(fp)
   ad9144_param.pll_enable = 0;
8000c2b8:	e03fa6c5 	stb	zero,-357(fp)
   ad9144_param.jesd204_subclass = 1;
8000c2bc:	00800044 	movi	r2,1
8000c2c0:	e0bfa445 	stb	r2,-367(fp)
   ad9144_param.jesd204_scrambling = 1;
8000c2c4:	00800044 	movi	r2,1
8000c2c8:	e0bfa485 	stb	r2,-366(fp)
   ad9144_param.jesd204_mode = 4;
8000c2cc:	00800104 	movi	r2,4
8000c2d0:	e0bfa405 	stb	r2,-368(fp)
   for(n=0; n<ARRAY_SIZE(ad9144_param.jesd204_lane_xbar); n++)
8000c2d4:	e03fff15 	stw	zero,-4(fp)
8000c2d8:	00000806 	br	8000c2fc <daq2_init+0x38c>
      ad9144_param.jesd204_lane_xbar[n] = n;
8000c2dc:	e0bfff17 	ldw	r2,-4(fp)
8000c2e0:	1007883a 	mov	r3,r2
8000c2e4:	e0bfff17 	ldw	r2,-4(fp)
8000c2e8:	e085883a 	add	r2,fp,r2
8000c2ec:	10ffa4c5 	stb	r3,-365(r2)
   for(n=0; n<ARRAY_SIZE(ad9144_param.jesd204_lane_xbar); n++)
8000c2f0:	e0bfff17 	ldw	r2,-4(fp)
8000c2f4:	10800044 	addi	r2,r2,1
8000c2f8:	e0bfff15 	stw	r2,-4(fp)
8000c2fc:	e0bfff17 	ldw	r2,-4(fp)
8000c300:	10800230 	cmpltui	r2,r2,8
8000c304:	103ff51e 	bne	r2,zero,8000c2dc <_gp+0xfffdb568>

   ad9144_core.no_of_channels = 2;
8000c308:	00800084 	movi	r2,2
8000c30c:	e0bf8345 	stb	r2,-499(fp)
   ad9144_core.resolution = 16;
8000c310:	00800404 	movi	r2,16
8000c314:	e0bf8305 	stb	r2,-500(fp)
   ad9144_core.channels = &ad9144_channels[0];
8000c318:	e0bf7004 	addi	r2,fp,-576
8000c31c:	e0bf8415 	stw	r2,-496(fp)

   ad9144_param.stpl_samples[0][0] = (ad9144_channels[0].pat_data >> 0)  & 0xffff;
8000c320:	e0bf7717 	ldw	r2,-548(fp)
8000c324:	10bfffcc 	andi	r2,r2,65535
8000c328:	e0bf9215 	stw	r2,-440(fp)
   ad9144_param.stpl_samples[0][1] = (ad9144_channels[0].pat_data >> 16) & 0xffff;
8000c32c:	e0bf7717 	ldw	r2,-548(fp)
8000c330:	1004d43a 	srli	r2,r2,16
8000c334:	e0bf9315 	stw	r2,-436(fp)
   ad9144_param.stpl_samples[0][2] = (ad9144_channels[0].pat_data >> 0)  & 0xffff;
8000c338:	e0bf7717 	ldw	r2,-548(fp)
8000c33c:	10bfffcc 	andi	r2,r2,65535
8000c340:	e0bf9415 	stw	r2,-432(fp)
   ad9144_param.stpl_samples[0][3] = (ad9144_channels[0].pat_data >> 16) & 0xffff;
8000c344:	e0bf7717 	ldw	r2,-548(fp)
8000c348:	1004d43a 	srli	r2,r2,16
8000c34c:	e0bf9515 	stw	r2,-428(fp)
   ad9144_param.stpl_samples[1][0] = (ad9144_channels[1].pat_data >> 0)  & 0xffff;
8000c350:	e0bf8017 	ldw	r2,-512(fp)
8000c354:	10bfffcc 	andi	r2,r2,65535
8000c358:	e0bf9615 	stw	r2,-424(fp)
   ad9144_param.stpl_samples[1][1] = (ad9144_channels[1].pat_data >> 16) & 0xffff;
8000c35c:	e0bf8017 	ldw	r2,-512(fp)
8000c360:	1004d43a 	srli	r2,r2,16
8000c364:	e0bf9715 	stw	r2,-420(fp)
   ad9144_param.stpl_samples[1][2] = (ad9144_channels[1].pat_data >> 0)  & 0xffff;
8000c368:	e0bf8017 	ldw	r2,-512(fp)
8000c36c:	10bfffcc 	andi	r2,r2,65535
8000c370:	e0bf9815 	stw	r2,-416(fp)
   ad9144_param.stpl_samples[1][3] = (ad9144_channels[1].pat_data >> 16) & 0xffff;
8000c374:	e0bf8017 	ldw	r2,-512(fp)
8000c378:	1004d43a 	srli	r2,r2,16
8000c37c:	e0bf9915 	stw	r2,-412(fp)
   //******************************************************************************
   // ADC (AD9680) and the receive path ( AXI_ADXCVR,
   // JESD204, AXI_AD9680, TX DMAC) configuration
   //******************************************************************************

   ad9680_param.lane_rate_kbps = 10000000;
8000c380:	00802674 	movhi	r2,153
8000c384:	10a5a004 	addi	r2,r2,-27008
8000c388:	e0bf8c15 	stw	r2,-464(fp)

   xcvr_getconfig(&ad9680_xcvr);
8000c38c:	e0bf0e04 	addi	r2,fp,-968
8000c390:	1009883a 	mov	r4,r2
8000c394:	00086540 	call	80008654 <xcvr_getconfig>
   ad9680_xcvr.reconfig_bypass = 1;
8000c398:	00800044 	movi	r2,1
8000c39c:	e0bf1405 	stb	r2,-944(fp)

   ad9680_xcvr.rx_tx_n = 1;
8000c3a0:	00800044 	movi	r2,1
8000c3a4:	e0bf0e45 	stb	r2,-967(fp)
   ad9680_xcvr.lane_rate_kbps = ad9680_param.lane_rate_kbps;
8000c3a8:	e0bf8c17 	ldw	r2,-464(fp)
8000c3ac:	e0bf1215 	stw	r2,-952(fp)

   ad9680_jesd.scramble_enable = 1;
8000c3b0:	00800044 	movi	r2,1
8000c3b4:	e0bf3745 	stb	r2,-803(fp)
   ad9680_jesd.octets_per_frame = 1;
8000c3b8:	00800044 	movi	r2,1
8000c3bc:	e0bf37c5 	stb	r2,-801(fp)
   ad9680_jesd.frames_per_multiframe = 32;
8000c3c0:	00800804 	movi	r2,32
8000c3c4:	e0bf3805 	stb	r2,-800(fp)
   ad9680_jesd.subclass_mode = 1;
8000c3c8:	00800044 	movi	r2,1
8000c3cc:	e0bf3945 	stb	r2,-795(fp)

   ad9680_core.no_of_channels = 2;
8000c3d0:	00800084 	movi	r2,2
8000c3d4:	e0bf3d45 	stb	r2,-779(fp)
   ad9680_core.resolution = 14;
8000c3d8:	00800384 	movi	r2,14
8000c3dc:	e0bf3d85 	stb	r2,-778(fp)

   //******************************************************************************
   // configure the receiver DMA
   //******************************************************************************

   ad9680_dma.type = DMAC_RX;
8000c3e0:	e03f0b05 	stb	zero,-980(fp)
   ad9680_dma.transfer = &rx_xfer;
8000c3e4:	e0bf0704 	addi	r2,fp,-996
8000c3e8:	e0bf0d15 	stw	r2,-972(fp)
   rx_xfer.id = 0;
8000c3ec:	e03f0715 	stw	zero,-996(fp)
   rx_xfer.no_of_samples = 32768;
8000c3f0:	00a00014 	movui	r2,32768
8000c3f4:	e0bf0915 	stw	r2,-988(fp)

   ad9144_dma.type = DMAC_TX;
8000c3f8:	00800044 	movi	r2,1
8000c3fc:	e0bf6705 	stb	r2,-612(fp)
   ad9144_dma.transfer = &tx_xfer;
8000c400:	e0bf0404 	addi	r2,fp,-1008
8000c404:	e0bf6915 	stw	r2,-604(fp)
   ad9144_dma.flags = DMAC_FLAGS_TLAST;
8000c408:	00800084 	movi	r2,2
8000c40c:	e0bf6745 	stb	r2,-611(fp)
   tx_xfer.id = 0;
8000c410:	e03f0415 	stw	zero,-1008(fp)
   tx_xfer.no_of_samples = dac_buffer_load(ad9144_core, tx_xfer.start_address);
8000c414:	e0bf0517 	ldw	r2,-1004(fp)
8000c418:	100f883a 	mov	r7,r2
8000c41c:	e13f8217 	ldw	r4,-504(fp)
8000c420:	e17f8317 	ldw	r5,-500(fp)
8000c424:	e1bf8417 	ldw	r6,-496(fp)
8000c428:	00040840 	call	80004084 <dac_buffer_load>
8000c42c:	e0bf0615 	stw	r2,-1000(fp)

   // change the default JESD configurations, if required
   fmcdaq2_reconfig(&ad9144_param,
8000c430:	e0bfad17 	ldw	r2,-332(fp)
8000c434:	e1bf0e04 	addi	r6,fp,-968
8000c438:	e17f8804 	addi	r5,fp,-480
8000c43c:	e13f3e04 	addi	r4,fp,-776
8000c440:	e0ff8d04 	addi	r3,fp,-460
8000c444:	d8800015 	stw	r2,0(sp)
8000c448:	300f883a 	mov	r7,r6
8000c44c:	280d883a 	mov	r6,r5
8000c450:	200b883a 	mov	r5,r4
8000c454:	1809883a 	mov	r4,r3
8000c458:	000bab40 	call	8000bab4 <fmcdaq2_reconfig>
   gpio_desc *clkd_sync;
   gpio_desc *dac_reset;
   gpio_desc *dac_txen;
   gpio_desc *adc_pd;

   gpio_get(&clkd_sync, GPIO_CLKD_SYNC);
8000c45c:	e0bf0304 	addi	r2,fp,-1012
8000c460:	01400984 	movi	r5,38
8000c464:	1009883a 	mov	r4,r2
8000c468:	0007e2c0 	call	80007e2c <gpio_get>
   gpio_get(&dac_reset, GPIO_DAC_RESET);
8000c46c:	e0bf0204 	addi	r2,fp,-1016
8000c470:	01400a04 	movi	r5,40
8000c474:	1009883a 	mov	r4,r2
8000c478:	0007e2c0 	call	80007e2c <gpio_get>
   gpio_get(&dac_txen,  GPIO_DAC_TXEN);
8000c47c:	e0bf0104 	addi	r2,fp,-1020
8000c480:	01400a44 	movi	r5,41
8000c484:	1009883a 	mov	r4,r2
8000c488:	0007e2c0 	call	80007e2c <gpio_get>
   gpio_get(&adc_pd,    GPIO_ADC_PD);
8000c48c:	e0bf0004 	addi	r2,fp,-1024
8000c490:	01400a84 	movi	r5,42
8000c494:	1009883a 	mov	r4,r2
8000c498:	0007e2c0 	call	80007e2c <gpio_get>

   gpio_set_value(clkd_sync, 0);
8000c49c:	e0bf0317 	ldw	r2,-1012(fp)
8000c4a0:	000b883a 	mov	r5,zero
8000c4a4:	1009883a 	mov	r4,r2
8000c4a8:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(dac_reset, 0);
8000c4ac:	e0bf0217 	ldw	r2,-1016(fp)
8000c4b0:	000b883a 	mov	r5,zero
8000c4b4:	1009883a 	mov	r4,r2
8000c4b8:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(dac_txen,  0);
8000c4bc:	e0bf0117 	ldw	r2,-1020(fp)
8000c4c0:	000b883a 	mov	r5,zero
8000c4c4:	1009883a 	mov	r4,r2
8000c4c8:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(adc_pd,    1);
8000c4cc:	e0bf0017 	ldw	r2,-1024(fp)
8000c4d0:	01400044 	movi	r5,1
8000c4d4:	1009883a 	mov	r4,r2
8000c4d8:	0007f680 	call	80007f68 <gpio_set_value>
   mdelay(5);
8000c4dc:	0104e204 	movi	r4,5000
8000c4e0:	00205040 	call	80020504 <usleep>

   gpio_set_value(clkd_sync, 1);
8000c4e4:	e0bf0317 	ldw	r2,-1012(fp)
8000c4e8:	01400044 	movi	r5,1
8000c4ec:	1009883a 	mov	r4,r2
8000c4f0:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(dac_reset, 1);
8000c4f4:	e0bf0217 	ldw	r2,-1016(fp)
8000c4f8:	01400044 	movi	r5,1
8000c4fc:	1009883a 	mov	r4,r2
8000c500:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(dac_txen,  1);
8000c504:	e0bf0117 	ldw	r2,-1020(fp)
8000c508:	01400044 	movi	r5,1
8000c50c:	1009883a 	mov	r4,r2
8000c510:	0007f680 	call	80007f68 <gpio_set_value>
   gpio_set_value(adc_pd,    0);
8000c514:	e0bf0017 	ldw	r2,-1024(fp)
8000c518:	000b883a 	mov	r5,zero
8000c51c:	1009883a 	mov	r4,r2
8000c520:	0007f680 	call	80007f68 <gpio_set_value>

   // setup clocks

   ad9523_setup(&ad9523_device, &ad9523_param);
8000c524:	e0ffa904 	addi	r3,fp,-348
8000c528:	e0bf8704 	addi	r2,fp,-484
8000c52c:	180b883a 	mov	r5,r3
8000c530:	1009883a 	mov	r4,r2
8000c534:	000213c0 	call	8000213c <ad9523_setup>
   // Both sequences are interleaved here so that the transceivers which might
   // be shared between the DAC and ADC link are enabled at the same time.


   // ADC
   ad9680_setup(&ad9680_device, &ad9680_param);
8000c538:	e0ff8804 	addi	r3,fp,-480
8000c53c:	e0bf8504 	addi	r2,fp,-492
8000c540:	180b883a 	mov	r5,r3
8000c544:	1009883a 	mov	r4,r2
8000c548:	0002f300 	call	80002f30 <ad9680_setup>

   // DAC FPGA JESD204 link layer
   jesd_setup(&ad9144_jesd);
8000c54c:	e0bf6a04 	addi	r2,fp,-600
8000c550:	1009883a 	mov	r4,r2
8000c554:	00071980 	call	80007198 <jesd_setup>

   // ADC and DAC FPGA JESD204 PHY layer
#ifdef ALTERA
   xcvr_setup(&ad9144_xcvr);
8000c558:	e0bf3e04 	addi	r2,fp,-776
8000c55c:	1009883a 	mov	r4,r2
8000c560:	00084dc0 	call	800084dc <xcvr_setup>
   xcvr_setup(&ad9680_xcvr);
8000c564:	e0bf0e04 	addi	r2,fp,-968
8000c568:	1009883a 	mov	r4,r2
8000c56c:	00084dc0 	call	800084dc <xcvr_setup>
#endif

   // ADC FPGA JESD204 link layer
   jesd_setup(&ad9680_jesd);
8000c570:	e0bf3604 	addi	r2,fp,-808
8000c574:	1009883a 	mov	r4,r2
8000c578:	00071980 	call	80007198 <jesd_setup>

   // DAC
   ad9144_setup(&ad9144_device, &ad9144_param);
8000c57c:	e0ff8d04 	addi	r3,fp,-460
8000c580:	e0bf8604 	addi	r2,fp,-488
8000c584:	180b883a 	mov	r5,r3
8000c588:	1009883a 	mov	r4,r2
8000c58c:	0000aa40 	call	80000aa4 <ad9144_setup>

   // JESD core status
   axi_jesd204_tx_status_read(&ad9144_jesd);
8000c590:	e0bf6a04 	addi	r2,fp,-600
8000c594:	1009883a 	mov	r4,r2
8000c598:	00075cc0 	call	800075cc <axi_jesd204_tx_status_read>
   axi_jesd204_rx_status_read(&ad9680_jesd);
8000c59c:	e0bf3604 	addi	r2,fp,-808
8000c5a0:	1009883a 	mov	r4,r2
8000c5a4:	00073d40 	call	800073d4 <axi_jesd204_rx_status_read>

   // interface core set up
   adc_setup(ad9680_core);
8000c5a8:	e13f3c17 	ldw	r4,-784(fp)
8000c5ac:	e17f3d17 	ldw	r5,-780(fp)
8000c5b0:	00031dc0 	call	800031dc <adc_setup>
   dac_setup(&ad9144_core);
8000c5b4:	e0bf8204 	addi	r2,fp,-504
8000c5b8:	1009883a 	mov	r4,r2
8000c5bc:	00049a40 	call	800049a4 <dac_setup>

   ad9144_status(ad9144_device);
8000c5c0:	e0bf8617 	ldw	r2,-488(fp)
8000c5c4:	1009883a 	mov	r4,r2
8000c5c8:	00011e40 	call	800011e4 <ad9144_status>

   //******************************************************************************
   // transport path testing
   //******************************************************************************

   ad9144_channels[0].sel = DAC_SRC_SED;
8000c5cc:	00800044 	movi	r2,1
8000c5d0:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_SED;
8000c5d4:	00800044 	movi	r2,1
8000c5d8:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
8000c5dc:	e0bf8204 	addi	r2,fp,-504
8000c5e0:	1009883a 	mov	r4,r2
8000c5e4:	0004aa40 	call	80004aa4 <dac_data_setup>
   ad9144_short_pattern_test(ad9144_device, &ad9144_param);
8000c5e8:	e0bf8617 	ldw	r2,-488(fp)
8000c5ec:	e0ff8d04 	addi	r3,fp,-460
8000c5f0:	180b883a 	mov	r5,r3
8000c5f4:	1009883a 	mov	r4,r2
8000c5f8:	00013640 	call	80001364 <ad9144_short_pattern_test>

   // PN7 data path test

   ad9144_channels[0].sel = DAC_SRC_PN23;
8000c5fc:	00800184 	movi	r2,6
8000c600:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_PN23;
8000c604:	00800184 	movi	r2,6
8000c608:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
8000c60c:	e0bf8204 	addi	r2,fp,-504
8000c610:	1009883a 	mov	r4,r2
8000c614:	0004aa40 	call	80004aa4 <dac_data_setup>
   ad9144_param.prbs_type = AD9144_PRBS7;
8000c618:	e03fa315 	stw	zero,-372(fp)
   ad9144_datapath_prbs_test(ad9144_device, &ad9144_param);
8000c61c:	e0bf8617 	ldw	r2,-488(fp)
8000c620:	e0ff8d04 	addi	r3,fp,-460
8000c624:	180b883a 	mov	r5,r3
8000c628:	1009883a 	mov	r4,r2
8000c62c:	000158c0 	call	8000158c <ad9144_datapath_prbs_test>

   // PN15 data path test

   ad9144_channels[0].sel = DAC_SRC_PN31;
8000c630:	008001c4 	movi	r2,7
8000c634:	e0bf7815 	stw	r2,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_PN31;
8000c638:	008001c4 	movi	r2,7
8000c63c:	e0bf8115 	stw	r2,-508(fp)
   dac_data_setup(&ad9144_core);
8000c640:	e0bf8204 	addi	r2,fp,-504
8000c644:	1009883a 	mov	r4,r2
8000c648:	0004aa40 	call	80004aa4 <dac_data_setup>
   ad9144_param.prbs_type = AD9144_PRBS15;
8000c64c:	00800044 	movi	r2,1
8000c650:	e0bfa315 	stw	r2,-372(fp)
   ad9144_datapath_prbs_test(ad9144_device, &ad9144_param);
8000c654:	e0bf8617 	ldw	r2,-488(fp)
8000c658:	e0ff8d04 	addi	r3,fp,-460
8000c65c:	180b883a 	mov	r5,r3
8000c660:	1009883a 	mov	r4,r2
8000c664:	000158c0 	call	8000158c <ad9144_datapath_prbs_test>

   //******************************************************************************
   // receive path testing
   //******************************************************************************

   ad9680_test(ad9680_device, AD9680_TEST_PN9);
8000c668:	e0bf8517 	ldw	r2,-492(fp)
8000c66c:	01400184 	movi	r5,6
8000c670:	1009883a 	mov	r4,r2
8000c674:	0002ebc0 	call	80002ebc <ad9680_test>
   if(adc_pn_mon(ad9680_core, ADC_PN9) == -1) {
8000c678:	000d883a 	mov	r6,zero
8000c67c:	e13f3c17 	ldw	r4,-784(fp)
8000c680:	e17f3d17 	ldw	r5,-780(fp)
8000c684:	00038b00 	call	800038b0 <adc_pn_mon>
8000c688:	10bfffd8 	cmpnei	r2,r2,-1
8000c68c:	1000051e 	bne	r2,zero,8000c6a4 <daq2_init+0x734>
      printf("%s ad9680 - PN9 sequence mismatch!\n", __func__);
8000c690:	016000b4 	movhi	r5,32770
8000c694:	295a3f04 	addi	r5,r5,26876
8000c698:	012000b4 	movhi	r4,32770
8000c69c:	211a1704 	addi	r4,r4,26716
8000c6a0:	0010d740 	call	80010d74 <printf>
   };
   ad9680_test(ad9680_device, AD9680_TEST_PN23);
8000c6a4:	e0bf8517 	ldw	r2,-492(fp)
8000c6a8:	01400144 	movi	r5,5
8000c6ac:	1009883a 	mov	r4,r2
8000c6b0:	0002ebc0 	call	80002ebc <ad9680_test>
   if(adc_pn_mon(ad9680_core, ADC_PN23A) == -1) {
8000c6b4:	01800044 	movi	r6,1
8000c6b8:	e13f3c17 	ldw	r4,-784(fp)
8000c6bc:	e17f3d17 	ldw	r5,-780(fp)
8000c6c0:	00038b00 	call	800038b0 <adc_pn_mon>
8000c6c4:	10bfffd8 	cmpnei	r2,r2,-1
8000c6c8:	1000051e 	bne	r2,zero,8000c6e0 <daq2_init+0x770>
      printf("%s ad9680 - PN23 sequence mismatch!\n", __func__);
8000c6cc:	016000b4 	movhi	r5,32770
8000c6d0:	295a3f04 	addi	r5,r5,26876
8000c6d4:	012000b4 	movhi	r4,32770
8000c6d8:	211a2004 	addi	r4,r4,26752
8000c6dc:	0010d740 	call	80010d74 <printf>

   if(!dmac_start_transaction(ad9144_dma)) {
      printf("daq2: transmit data from memory\n");
   };
#else
   ad9144_channels[0].sel = DAC_SRC_DDS;
8000c6e0:	e03f7815 	stw	zero,-544(fp)
   ad9144_channels[1].sel = DAC_SRC_DDS;
8000c6e4:	e03f8115 	stw	zero,-508(fp)
   dac_data_setup(&ad9144_core);
8000c6e8:	e0bf8204 	addi	r2,fp,-504
8000c6ec:	1009883a 	mov	r4,r2
8000c6f0:	0004aa40 	call	80004aa4 <dac_data_setup>

   printf("daq2: setup and configuration is done\n");
8000c6f4:	012000b4 	movhi	r4,32770
8000c6f8:	211a2a04 	addi	r4,r4,26792
8000c6fc:	0010e980 	call	80010e98 <puts>
#endif
   //******************************************************************************
   // external loopback - capture data with DMA
   //******************************************************************************

   ad9680_test(ad9680_device, AD9680_TEST_OFF);
8000c700:	e0bf8517 	ldw	r2,-492(fp)
8000c704:	000b883a 	mov	r5,zero
8000c708:	1009883a 	mov	r4,r2
8000c70c:	0002ebc0 	call	80002ebc <ad9680_test>
   if(!dmac_start_transaction(ad9680_dma)) {
8000c710:	e13f0a17 	ldw	r4,-984(fp)
8000c714:	e17f0b17 	ldw	r5,-980(fp)
8000c718:	e1bf0c17 	ldw	r6,-976(fp)
8000c71c:	e1ff0d17 	ldw	r7,-972(fp)
8000c720:	0004d440 	call	80004d44 <dmac_start_transaction>
8000c724:	1000031e 	bne	r2,zero,8000c734 <daq2_init+0x7c4>
      printf("daq2: RX capture done.\n");
8000c728:	012000b4 	movhi	r4,32770
8000c72c:	211a3404 	addi	r4,r4,26832
8000c730:	0010e980 	call	80010e98 <puts>
   };

   /* Memory deallocation for devices and spi */
   ad9144_remove(ad9144_device);
8000c734:	e0bf8617 	ldw	r2,-488(fp)
8000c738:	1009883a 	mov	r4,r2
8000c73c:	000119c0 	call	8000119c <ad9144_remove>
   ad9523_remove(ad9523_device);
8000c740:	e0bf8717 	ldw	r2,-484(fp)
8000c744:	1009883a 	mov	r4,r2
8000c748:	0002d700 	call	80002d70 <ad9523_remove>
   ad9680_remove(ad9680_device);
8000c74c:	e0bf8517 	ldw	r2,-492(fp)
8000c750:	1009883a 	mov	r4,r2
8000c754:	00030e40 	call	800030e4 <ad9680_remove>

   /* Memory deallocation for gpios */
   gpio_remove(clkd_sync);
8000c758:	e0bf0317 	ldw	r2,-1012(fp)
8000c75c:	1009883a 	mov	r4,r2
8000c760:	0007ebc0 	call	80007ebc <gpio_remove>
   gpio_remove(dac_reset);
8000c764:	e0bf0217 	ldw	r2,-1016(fp)
8000c768:	1009883a 	mov	r4,r2
8000c76c:	0007ebc0 	call	80007ebc <gpio_remove>
   gpio_remove(dac_txen);
8000c770:	e0bf0117 	ldw	r2,-1020(fp)
8000c774:	1009883a 	mov	r4,r2
8000c778:	0007ebc0 	call	80007ebc <gpio_remove>
   gpio_remove(adc_pd);
8000c77c:	e0bf0017 	ldw	r2,-1024(fp)
8000c780:	1009883a 	mov	r4,r2
8000c784:	0007ebc0 	call	80007ebc <gpio_remove>

   return 0;
8000c788:	0005883a 	mov	r2,zero
}
8000c78c:	e037883a 	mov	sp,fp
8000c790:	dfc00117 	ldw	ra,4(sp)
8000c794:	df000017 	ldw	fp,0(sp)
8000c798:	dec00204 	addi	sp,sp,8
8000c79c:	f800283a 	ret

8000c7a0 <main>:

int main()
{
8000c7a0:	defefa04 	addi	sp,sp,-1048
8000c7a4:	dfc10515 	stw	ra,1044(sp)
8000c7a8:	df010415 	stw	fp,1040(sp)
8000c7ac:	df010404 	addi	fp,sp,1040
   alt_flash_fd* fd;
   int number_of_regions;
   flash_region region;
   char buffer[1024] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
8000c7b0:	e0befc04 	addi	r2,fp,-1040
8000c7b4:	00c10004 	movi	r3,1024
8000c7b8:	180d883a 	mov	r6,r3
8000c7bc:	000b883a 	mov	r5,zero
8000c7c0:	1009883a 	mov	r4,r2
8000c7c4:	00105d80 	call	800105d8 <memset>
8000c7c8:	00800044 	movi	r2,1
8000c7cc:	e0befc05 	stb	r2,-1040(fp)
8000c7d0:	00800084 	movi	r2,2
8000c7d4:	e0befc45 	stb	r2,-1039(fp)
8000c7d8:	008000c4 	movi	r2,3
8000c7dc:	e0befc85 	stb	r2,-1038(fp)
8000c7e0:	00800104 	movi	r2,4
8000c7e4:	e0befcc5 	stb	r2,-1037(fp)
8000c7e8:	00800144 	movi	r2,5
8000c7ec:	e0befd05 	stb	r2,-1036(fp)
8000c7f0:	00800184 	movi	r2,6
8000c7f4:	e0befd45 	stb	r2,-1035(fp)
8000c7f8:	008001c4 	movi	r2,7
8000c7fc:	e0befd85 	stb	r2,-1034(fp)
8000c800:	00800204 	movi	r2,8
8000c804:	e0befdc5 	stb	r2,-1033(fp)
8000c808:	00800244 	movi	r2,9
8000c80c:	e0befe05 	stb	r2,-1032(fp)
8000c810:	00800284 	movi	r2,10
8000c814:	e0befe45 	stb	r2,-1031(fp)
8000c818:	008002c4 	movi	r2,11
8000c81c:	e0befe85 	stb	r2,-1030(fp)
8000c820:	00800304 	movi	r2,12
8000c824:	e0befec5 	stb	r2,-1029(fp)
8000c828:	00800344 	movi	r2,13
8000c82c:	e0beff05 	stb	r2,-1028(fp)
8000c830:	00800384 	movi	r2,14
8000c834:	e0beff45 	stb	r2,-1027(fp)
8000c838:	008003c4 	movi	r2,15
8000c83c:	e0beff85 	stb	r2,-1026(fp)
8000c840:	00800404 	movi	r2,16
8000c844:	e0beffc5 	stb	r2,-1025(fp)


   int i;
   unsigned int reg;

   daq2_init();
8000c848:	000bf700 	call	8000bf70 <daq2_init>

   printf("Hello from Nios II!\n");
8000c84c:	012000b4 	movhi	r4,32770
8000c850:	211a3a04 	addi	r4,r4,26856
8000c854:	0010e980 	call	80010e98 <puts>
   //alt_qspi_controller2_erase_block(fd, 0);
   //alt_qspi_controller2_write(fd, 0, "Hello World 123456789\0", 22);

   //alt_qspi_controller2_read(fd, 0, buffer, 256);
*/
   return 0;
8000c858:	0005883a 	mov	r2,zero
}
8000c85c:	e037883a 	mov	sp,fp
8000c860:	dfc00117 	ldw	ra,4(sp)
8000c864:	df000017 	ldw	fp,0(sp)
8000c868:	dec00204 	addi	sp,sp,8
8000c86c:	f800283a 	ret

8000c870 <__bswapsi2>:
8000c870:	200a963a 	slli	r5,r4,24
8000c874:	2004d63a 	srli	r2,r4,24
8000c878:	2007d23a 	srai	r3,r4,8
8000c87c:	2008923a 	slli	r4,r4,8
8000c880:	1144b03a 	or	r2,r2,r5
8000c884:	18ffc00c 	andi	r3,r3,65280
8000c888:	10c4b03a 	or	r2,r2,r3
8000c88c:	21003fec 	andhi	r4,r4,255
8000c890:	1104b03a 	or	r2,r2,r4
8000c894:	f800283a 	ret

8000c898 <__fixunsdfsi>:
8000c898:	defffd04 	addi	sp,sp,-12
8000c89c:	000d883a 	mov	r6,zero
8000c8a0:	01d07834 	movhi	r7,16864
8000c8a4:	dc400115 	stw	r17,4(sp)
8000c8a8:	dc000015 	stw	r16,0(sp)
8000c8ac:	dfc00215 	stw	ra,8(sp)
8000c8b0:	2023883a 	mov	r17,r4
8000c8b4:	2821883a 	mov	r16,r5
8000c8b8:	000e7d00 	call	8000e7d0 <__gedf2>
8000c8bc:	1000080e 	bge	r2,zero,8000c8e0 <__fixunsdfsi+0x48>
8000c8c0:	8809883a 	mov	r4,r17
8000c8c4:	800b883a 	mov	r5,r16
8000c8c8:	000f8600 	call	8000f860 <__fixdfsi>
8000c8cc:	dfc00217 	ldw	ra,8(sp)
8000c8d0:	dc400117 	ldw	r17,4(sp)
8000c8d4:	dc000017 	ldw	r16,0(sp)
8000c8d8:	dec00304 	addi	sp,sp,12
8000c8dc:	f800283a 	ret
8000c8e0:	000d883a 	mov	r6,zero
8000c8e4:	01d07834 	movhi	r7,16864
8000c8e8:	8809883a 	mov	r4,r17
8000c8ec:	800b883a 	mov	r5,r16
8000c8f0:	000ef8c0 	call	8000ef8c <__subdf3>
8000c8f4:	180b883a 	mov	r5,r3
8000c8f8:	1009883a 	mov	r4,r2
8000c8fc:	000f8600 	call	8000f860 <__fixdfsi>
8000c900:	00e00034 	movhi	r3,32768
8000c904:	10c5883a 	add	r2,r2,r3
8000c908:	003ff006 	br	8000c8cc <_gp+0xfffdbb58>

8000c90c <__fixunsdfdi>:
8000c90c:	defffc04 	addi	sp,sp,-16
8000c910:	000d883a 	mov	r6,zero
8000c914:	01cf7c34 	movhi	r7,15856
8000c918:	dfc00315 	stw	ra,12(sp)
8000c91c:	dc800215 	stw	r18,8(sp)
8000c920:	dc400115 	stw	r17,4(sp)
8000c924:	dc000015 	stw	r16,0(sp)
8000c928:	2025883a 	mov	r18,r4
8000c92c:	2823883a 	mov	r17,r5
8000c930:	000e8b00 	call	8000e8b0 <__muldf3>
8000c934:	180b883a 	mov	r5,r3
8000c938:	1009883a 	mov	r4,r2
8000c93c:	000c8980 	call	8000c898 <__fixunsdfsi>
8000c940:	1009883a 	mov	r4,r2
8000c944:	1021883a 	mov	r16,r2
8000c948:	000f8e00 	call	8000f8e0 <__floatunsidf>
8000c94c:	000d883a 	mov	r6,zero
8000c950:	01d07c34 	movhi	r7,16880
8000c954:	1009883a 	mov	r4,r2
8000c958:	180b883a 	mov	r5,r3
8000c95c:	000e8b00 	call	8000e8b0 <__muldf3>
8000c960:	100d883a 	mov	r6,r2
8000c964:	180f883a 	mov	r7,r3
8000c968:	9009883a 	mov	r4,r18
8000c96c:	880b883a 	mov	r5,r17
8000c970:	000ef8c0 	call	8000ef8c <__subdf3>
8000c974:	180b883a 	mov	r5,r3
8000c978:	1009883a 	mov	r4,r2
8000c97c:	000c8980 	call	8000c898 <__fixunsdfsi>
8000c980:	8007883a 	mov	r3,r16
8000c984:	dfc00317 	ldw	ra,12(sp)
8000c988:	dc800217 	ldw	r18,8(sp)
8000c98c:	dc400117 	ldw	r17,4(sp)
8000c990:	dc000017 	ldw	r16,0(sp)
8000c994:	dec00404 	addi	sp,sp,16
8000c998:	f800283a 	ret

8000c99c <__udivdi3>:
8000c99c:	defff504 	addi	sp,sp,-44
8000c9a0:	dd400615 	stw	r21,24(sp)
8000c9a4:	dc000115 	stw	r16,4(sp)
8000c9a8:	dfc00a15 	stw	ra,40(sp)
8000c9ac:	df000915 	stw	fp,36(sp)
8000c9b0:	ddc00815 	stw	r23,32(sp)
8000c9b4:	dd800715 	stw	r22,28(sp)
8000c9b8:	dd000515 	stw	r20,20(sp)
8000c9bc:	dcc00415 	stw	r19,16(sp)
8000c9c0:	dc800315 	stw	r18,12(sp)
8000c9c4:	dc400215 	stw	r17,8(sp)
8000c9c8:	202b883a 	mov	r21,r4
8000c9cc:	2821883a 	mov	r16,r5
8000c9d0:	38003e1e 	bne	r7,zero,8000cacc <__udivdi3+0x130>
8000c9d4:	3827883a 	mov	r19,r7
8000c9d8:	3023883a 	mov	r17,r6
8000c9dc:	2025883a 	mov	r18,r4
8000c9e0:	29804c2e 	bgeu	r5,r6,8000cb14 <__udivdi3+0x178>
8000c9e4:	00bfffd4 	movui	r2,65535
8000c9e8:	282d883a 	mov	r22,r5
8000c9ec:	1180a02e 	bgeu	r2,r6,8000cc70 <__udivdi3+0x2d4>
8000c9f0:	00804034 	movhi	r2,256
8000c9f4:	30813036 	bltu	r6,r2,8000ceb8 <__udivdi3+0x51c>
8000c9f8:	3006d63a 	srli	r3,r6,24
8000c9fc:	04c00604 	movi	r19,24
8000ca00:	00a000b4 	movhi	r2,32770
8000ca04:	1885883a 	add	r2,r3,r2
8000ca08:	109a4183 	ldbu	r2,26886(r2)
8000ca0c:	14e7883a 	add	r19,r2,r19
8000ca10:	00800804 	movi	r2,32
8000ca14:	14c5c83a 	sub	r2,r2,r19
8000ca18:	10000526 	beq	r2,zero,8000ca30 <__udivdi3+0x94>
8000ca1c:	80a0983a 	sll	r16,r16,r2
8000ca20:	ace6d83a 	srl	r19,r21,r19
8000ca24:	30a2983a 	sll	r17,r6,r2
8000ca28:	a8a4983a 	sll	r18,r21,r2
8000ca2c:	9c2cb03a 	or	r22,r19,r16
8000ca30:	882ad43a 	srli	r21,r17,16
8000ca34:	b009883a 	mov	r4,r22
8000ca38:	8d3fffcc 	andi	r20,r17,65535
8000ca3c:	a80b883a 	mov	r5,r21
8000ca40:	000d5ec0 	call	8000d5ec <__umodsi3>
8000ca44:	a80b883a 	mov	r5,r21
8000ca48:	b009883a 	mov	r4,r22
8000ca4c:	1027883a 	mov	r19,r2
8000ca50:	000d5880 	call	8000d588 <__udivsi3>
8000ca54:	1021883a 	mov	r16,r2
8000ca58:	9826943a 	slli	r19,r19,16
8000ca5c:	9004d43a 	srli	r2,r18,16
8000ca60:	a407383a 	mul	r3,r20,r16
8000ca64:	9884b03a 	or	r2,r19,r2
8000ca68:	10c0052e 	bgeu	r2,r3,8000ca80 <__udivdi3+0xe4>
8000ca6c:	1445883a 	add	r2,r2,r17
8000ca70:	813fffc4 	addi	r4,r16,-1
8000ca74:	14400136 	bltu	r2,r17,8000ca7c <__udivdi3+0xe0>
8000ca78:	10c12836 	bltu	r2,r3,8000cf1c <__udivdi3+0x580>
8000ca7c:	2021883a 	mov	r16,r4
8000ca80:	10e7c83a 	sub	r19,r2,r3
8000ca84:	a80b883a 	mov	r5,r21
8000ca88:	9809883a 	mov	r4,r19
8000ca8c:	000d5ec0 	call	8000d5ec <__umodsi3>
8000ca90:	102d883a 	mov	r22,r2
8000ca94:	a80b883a 	mov	r5,r21
8000ca98:	9809883a 	mov	r4,r19
8000ca9c:	000d5880 	call	8000d588 <__udivsi3>
8000caa0:	b02c943a 	slli	r22,r22,16
8000caa4:	a0a9383a 	mul	r20,r20,r2
8000caa8:	94bfffcc 	andi	r18,r18,65535
8000caac:	b4a4b03a 	or	r18,r22,r18
8000cab0:	9500752e 	bgeu	r18,r20,8000cc88 <__udivdi3+0x2ec>
8000cab4:	8ca5883a 	add	r18,r17,r18
8000cab8:	10ffffc4 	addi	r3,r2,-1
8000cabc:	94407136 	bltu	r18,r17,8000cc84 <__udivdi3+0x2e8>
8000cac0:	9500702e 	bgeu	r18,r20,8000cc84 <__udivdi3+0x2e8>
8000cac4:	10bfff84 	addi	r2,r2,-2
8000cac8:	00006f06 	br	8000cc88 <__udivdi3+0x2ec>
8000cacc:	29c05036 	bltu	r5,r7,8000cc10 <__udivdi3+0x274>
8000cad0:	00bfffd4 	movui	r2,65535
8000cad4:	11c05c2e 	bgeu	r2,r7,8000cc48 <__udivdi3+0x2ac>
8000cad8:	00804034 	movhi	r2,256
8000cadc:	3880f036 	bltu	r7,r2,8000cea0 <__udivdi3+0x504>
8000cae0:	3806d63a 	srli	r3,r7,24
8000cae4:	01000604 	movi	r4,24
8000cae8:	00a000b4 	movhi	r2,32770
8000caec:	1885883a 	add	r2,r3,r2
8000caf0:	10da4183 	ldbu	r3,26886(r2)
8000caf4:	1907883a 	add	r3,r3,r4
8000caf8:	01000804 	movi	r4,32
8000cafc:	20edc83a 	sub	r22,r4,r3
8000cb00:	b000691e 	bne	r22,zero,8000cca8 <__udivdi3+0x30c>
8000cb04:	3c00f636 	bltu	r7,r16,8000cee0 <__udivdi3+0x544>
8000cb08:	a985403a 	cmpgeu	r2,r21,r6
8000cb0c:	0007883a 	mov	r3,zero
8000cb10:	00004106 	br	8000cc18 <__udivdi3+0x27c>
8000cb14:	3000041e 	bne	r6,zero,8000cb28 <__udivdi3+0x18c>
8000cb18:	000b883a 	mov	r5,zero
8000cb1c:	01000044 	movi	r4,1
8000cb20:	000d5880 	call	8000d588 <__udivsi3>
8000cb24:	1023883a 	mov	r17,r2
8000cb28:	00bfffd4 	movui	r2,65535
8000cb2c:	14404b2e 	bgeu	r2,r17,8000cc5c <__udivdi3+0x2c0>
8000cb30:	00804034 	movhi	r2,256
8000cb34:	8880e536 	bltu	r17,r2,8000cecc <__udivdi3+0x530>
8000cb38:	8806d63a 	srli	r3,r17,24
8000cb3c:	04c00604 	movi	r19,24
8000cb40:	00a000b4 	movhi	r2,32770
8000cb44:	1885883a 	add	r2,r3,r2
8000cb48:	109a4183 	ldbu	r2,26886(r2)
8000cb4c:	14e7883a 	add	r19,r2,r19
8000cb50:	00800804 	movi	r2,32
8000cb54:	14c5c83a 	sub	r2,r2,r19
8000cb58:	1000981e 	bne	r2,zero,8000cdbc <__udivdi3+0x420>
8000cb5c:	8828d43a 	srli	r20,r17,16
8000cb60:	8461c83a 	sub	r16,r16,r17
8000cb64:	8d7fffcc 	andi	r21,r17,65535
8000cb68:	00c00044 	movi	r3,1
8000cb6c:	8009883a 	mov	r4,r16
8000cb70:	a00b883a 	mov	r5,r20
8000cb74:	d8c00015 	stw	r3,0(sp)
8000cb78:	000d5ec0 	call	8000d5ec <__umodsi3>
8000cb7c:	8009883a 	mov	r4,r16
8000cb80:	a00b883a 	mov	r5,r20
8000cb84:	1027883a 	mov	r19,r2
8000cb88:	000d5880 	call	8000d588 <__udivsi3>
8000cb8c:	1021883a 	mov	r16,r2
8000cb90:	9826943a 	slli	r19,r19,16
8000cb94:	9004d43a 	srli	r2,r18,16
8000cb98:	8549383a 	mul	r4,r16,r21
8000cb9c:	d8c00017 	ldw	r3,0(sp)
8000cba0:	9884b03a 	or	r2,r19,r2
8000cba4:	1100052e 	bgeu	r2,r4,8000cbbc <__udivdi3+0x220>
8000cba8:	1445883a 	add	r2,r2,r17
8000cbac:	817fffc4 	addi	r5,r16,-1
8000cbb0:	14400136 	bltu	r2,r17,8000cbb8 <__udivdi3+0x21c>
8000cbb4:	1100dc36 	bltu	r2,r4,8000cf28 <__udivdi3+0x58c>
8000cbb8:	2821883a 	mov	r16,r5
8000cbbc:	1127c83a 	sub	r19,r2,r4
8000cbc0:	a00b883a 	mov	r5,r20
8000cbc4:	9809883a 	mov	r4,r19
8000cbc8:	d8c00015 	stw	r3,0(sp)
8000cbcc:	000d5ec0 	call	8000d5ec <__umodsi3>
8000cbd0:	102d883a 	mov	r22,r2
8000cbd4:	a00b883a 	mov	r5,r20
8000cbd8:	9809883a 	mov	r4,r19
8000cbdc:	000d5880 	call	8000d588 <__udivsi3>
8000cbe0:	b02c943a 	slli	r22,r22,16
8000cbe4:	156b383a 	mul	r21,r2,r21
8000cbe8:	94bfffcc 	andi	r18,r18,65535
8000cbec:	b4a4b03a 	or	r18,r22,r18
8000cbf0:	d8c00017 	ldw	r3,0(sp)
8000cbf4:	9540292e 	bgeu	r18,r21,8000cc9c <__udivdi3+0x300>
8000cbf8:	8ca5883a 	add	r18,r17,r18
8000cbfc:	113fffc4 	addi	r4,r2,-1
8000cc00:	94402536 	bltu	r18,r17,8000cc98 <__udivdi3+0x2fc>
8000cc04:	9540242e 	bgeu	r18,r21,8000cc98 <__udivdi3+0x2fc>
8000cc08:	10bfff84 	addi	r2,r2,-2
8000cc0c:	00002306 	br	8000cc9c <__udivdi3+0x300>
8000cc10:	0007883a 	mov	r3,zero
8000cc14:	0005883a 	mov	r2,zero
8000cc18:	dfc00a17 	ldw	ra,40(sp)
8000cc1c:	df000917 	ldw	fp,36(sp)
8000cc20:	ddc00817 	ldw	r23,32(sp)
8000cc24:	dd800717 	ldw	r22,28(sp)
8000cc28:	dd400617 	ldw	r21,24(sp)
8000cc2c:	dd000517 	ldw	r20,20(sp)
8000cc30:	dcc00417 	ldw	r19,16(sp)
8000cc34:	dc800317 	ldw	r18,12(sp)
8000cc38:	dc400217 	ldw	r17,8(sp)
8000cc3c:	dc000117 	ldw	r16,4(sp)
8000cc40:	dec00b04 	addi	sp,sp,44
8000cc44:	f800283a 	ret
8000cc48:	38804030 	cmpltui	r2,r7,256
8000cc4c:	1000971e 	bne	r2,zero,8000ceac <__udivdi3+0x510>
8000cc50:	3806d23a 	srli	r3,r7,8
8000cc54:	01000204 	movi	r4,8
8000cc58:	003fa306 	br	8000cae8 <_gp+0xfffdbd74>
8000cc5c:	88804030 	cmpltui	r2,r17,256
8000cc60:	1000981e 	bne	r2,zero,8000cec4 <__udivdi3+0x528>
8000cc64:	8806d23a 	srli	r3,r17,8
8000cc68:	04c00204 	movi	r19,8
8000cc6c:	003fb406 	br	8000cb40 <_gp+0xfffdbdcc>
8000cc70:	30804030 	cmpltui	r2,r6,256
8000cc74:	1000981e 	bne	r2,zero,8000ced8 <__udivdi3+0x53c>
8000cc78:	3006d23a 	srli	r3,r6,8
8000cc7c:	04c00204 	movi	r19,8
8000cc80:	003f5f06 	br	8000ca00 <_gp+0xfffdbc8c>
8000cc84:	1805883a 	mov	r2,r3
8000cc88:	800c943a 	slli	r6,r16,16
8000cc8c:	0007883a 	mov	r3,zero
8000cc90:	3084b03a 	or	r2,r6,r2
8000cc94:	003fe006 	br	8000cc18 <_gp+0xfffdbea4>
8000cc98:	2005883a 	mov	r2,r4
8000cc9c:	800c943a 	slli	r6,r16,16
8000cca0:	3084b03a 	or	r2,r6,r2
8000cca4:	003fdc06 	br	8000cc18 <_gp+0xfffdbea4>
8000cca8:	30f8d83a 	srl	fp,r6,r3
8000ccac:	3d8e983a 	sll	r7,r7,r22
8000ccb0:	80eed83a 	srl	r23,r16,r3
8000ccb4:	a8c6d83a 	srl	r3,r21,r3
8000ccb8:	e1f8b03a 	or	fp,fp,r7
8000ccbc:	e024d43a 	srli	r18,fp,16
8000ccc0:	85a0983a 	sll	r16,r16,r22
8000ccc4:	b809883a 	mov	r4,r23
8000ccc8:	900b883a 	mov	r5,r18
8000cccc:	1c22b03a 	or	r17,r3,r16
8000ccd0:	35a8983a 	sll	r20,r6,r22
8000ccd4:	000d5ec0 	call	8000d5ec <__umodsi3>
8000ccd8:	b809883a 	mov	r4,r23
8000ccdc:	900b883a 	mov	r5,r18
8000cce0:	1027883a 	mov	r19,r2
8000cce4:	000d5880 	call	8000d588 <__udivsi3>
8000cce8:	1021883a 	mov	r16,r2
8000ccec:	e0ffffcc 	andi	r3,fp,65535
8000ccf0:	9826943a 	slli	r19,r19,16
8000ccf4:	8804d43a 	srli	r2,r17,16
8000ccf8:	1c09383a 	mul	r4,r3,r16
8000ccfc:	9884b03a 	or	r2,r19,r2
8000cd00:	1100042e 	bgeu	r2,r4,8000cd14 <__udivdi3+0x378>
8000cd04:	1705883a 	add	r2,r2,fp
8000cd08:	817fffc4 	addi	r5,r16,-1
8000cd0c:	17007b2e 	bgeu	r2,fp,8000cefc <__udivdi3+0x560>
8000cd10:	2821883a 	mov	r16,r5
8000cd14:	1127c83a 	sub	r19,r2,r4
8000cd18:	900b883a 	mov	r5,r18
8000cd1c:	9809883a 	mov	r4,r19
8000cd20:	d8c00015 	stw	r3,0(sp)
8000cd24:	000d5ec0 	call	8000d5ec <__umodsi3>
8000cd28:	9809883a 	mov	r4,r19
8000cd2c:	900b883a 	mov	r5,r18
8000cd30:	102f883a 	mov	r23,r2
8000cd34:	000d5880 	call	8000d588 <__udivsi3>
8000cd38:	d8c00017 	ldw	r3,0(sp)
8000cd3c:	b82e943a 	slli	r23,r23,16
8000cd40:	8c7fffcc 	andi	r17,r17,65535
8000cd44:	1889383a 	mul	r4,r3,r2
8000cd48:	bc62b03a 	or	r17,r23,r17
8000cd4c:	8900042e 	bgeu	r17,r4,8000cd60 <__udivdi3+0x3c4>
8000cd50:	8f23883a 	add	r17,r17,fp
8000cd54:	10ffffc4 	addi	r3,r2,-1
8000cd58:	8f00642e 	bgeu	r17,fp,8000ceec <__udivdi3+0x550>
8000cd5c:	1805883a 	mov	r2,r3
8000cd60:	8020943a 	slli	r16,r16,16
8000cd64:	a17fffcc 	andi	r5,r20,65535
8000cd68:	a00cd43a 	srli	r6,r20,16
8000cd6c:	8084b03a 	or	r2,r16,r2
8000cd70:	10ffffcc 	andi	r3,r2,65535
8000cd74:	1028d43a 	srli	r20,r2,16
8000cd78:	1951383a 	mul	r8,r3,r5
8000cd7c:	1987383a 	mul	r3,r3,r6
8000cd80:	a14b383a 	mul	r5,r20,r5
8000cd84:	400ed43a 	srli	r7,r8,16
8000cd88:	8923c83a 	sub	r17,r17,r4
8000cd8c:	1947883a 	add	r3,r3,r5
8000cd90:	38c7883a 	add	r3,r7,r3
8000cd94:	a1a9383a 	mul	r20,r20,r6
8000cd98:	1940022e 	bgeu	r3,r5,8000cda4 <__udivdi3+0x408>
8000cd9c:	01000074 	movhi	r4,1
8000cda0:	a129883a 	add	r20,r20,r4
8000cda4:	180cd43a 	srli	r6,r3,16
8000cda8:	3529883a 	add	r20,r6,r20
8000cdac:	8d003a36 	bltu	r17,r20,8000ce98 <__udivdi3+0x4fc>
8000cdb0:	8d003426 	beq	r17,r20,8000ce84 <__udivdi3+0x4e8>
8000cdb4:	0007883a 	mov	r3,zero
8000cdb8:	003f9706 	br	8000cc18 <_gp+0xfffdbea4>
8000cdbc:	88a2983a 	sll	r17,r17,r2
8000cdc0:	84ecd83a 	srl	r22,r16,r19
8000cdc4:	80a0983a 	sll	r16,r16,r2
8000cdc8:	8828d43a 	srli	r20,r17,16
8000cdcc:	b009883a 	mov	r4,r22
8000cdd0:	ace6d83a 	srl	r19,r21,r19
8000cdd4:	a00b883a 	mov	r5,r20
8000cdd8:	a8a4983a 	sll	r18,r21,r2
8000cddc:	000d5ec0 	call	8000d5ec <__umodsi3>
8000cde0:	b009883a 	mov	r4,r22
8000cde4:	a00b883a 	mov	r5,r20
8000cde8:	9c26b03a 	or	r19,r19,r16
8000cdec:	1021883a 	mov	r16,r2
8000cdf0:	000d5880 	call	8000d588 <__udivsi3>
8000cdf4:	102f883a 	mov	r23,r2
8000cdf8:	8d7fffcc 	andi	r21,r17,65535
8000cdfc:	8020943a 	slli	r16,r16,16
8000ce00:	9804d43a 	srli	r2,r19,16
8000ce04:	aded383a 	mul	r22,r21,r23
8000ce08:	8084b03a 	or	r2,r16,r2
8000ce0c:	1580062e 	bgeu	r2,r22,8000ce28 <__udivdi3+0x48c>
8000ce10:	1445883a 	add	r2,r2,r17
8000ce14:	b8ffffc4 	addi	r3,r23,-1
8000ce18:	14403e36 	bltu	r2,r17,8000cf14 <__udivdi3+0x578>
8000ce1c:	15803d2e 	bgeu	r2,r22,8000cf14 <__udivdi3+0x578>
8000ce20:	bdffff84 	addi	r23,r23,-2
8000ce24:	1445883a 	add	r2,r2,r17
8000ce28:	15adc83a 	sub	r22,r2,r22
8000ce2c:	a00b883a 	mov	r5,r20
8000ce30:	b009883a 	mov	r4,r22
8000ce34:	000d5ec0 	call	8000d5ec <__umodsi3>
8000ce38:	1021883a 	mov	r16,r2
8000ce3c:	b009883a 	mov	r4,r22
8000ce40:	a00b883a 	mov	r5,r20
8000ce44:	000d5880 	call	8000d588 <__udivsi3>
8000ce48:	8020943a 	slli	r16,r16,16
8000ce4c:	a889383a 	mul	r4,r21,r2
8000ce50:	9cffffcc 	andi	r19,r19,65535
8000ce54:	84e0b03a 	or	r16,r16,r19
8000ce58:	8100062e 	bgeu	r16,r4,8000ce74 <__udivdi3+0x4d8>
8000ce5c:	8461883a 	add	r16,r16,r17
8000ce60:	10ffffc4 	addi	r3,r2,-1
8000ce64:	84402936 	bltu	r16,r17,8000cf0c <__udivdi3+0x570>
8000ce68:	8100282e 	bgeu	r16,r4,8000cf0c <__udivdi3+0x570>
8000ce6c:	10bfff84 	addi	r2,r2,-2
8000ce70:	8461883a 	add	r16,r16,r17
8000ce74:	b806943a 	slli	r3,r23,16
8000ce78:	8121c83a 	sub	r16,r16,r4
8000ce7c:	1886b03a 	or	r3,r3,r2
8000ce80:	003f3a06 	br	8000cb6c <_gp+0xfffdbdf8>
8000ce84:	1806943a 	slli	r3,r3,16
8000ce88:	ad88983a 	sll	r4,r21,r22
8000ce8c:	423fffcc 	andi	r8,r8,65535
8000ce90:	1a07883a 	add	r3,r3,r8
8000ce94:	20ffc72e 	bgeu	r4,r3,8000cdb4 <_gp+0xfffdc040>
8000ce98:	10bfffc4 	addi	r2,r2,-1
8000ce9c:	003fc506 	br	8000cdb4 <_gp+0xfffdc040>
8000cea0:	3806d43a 	srli	r3,r7,16
8000cea4:	01000404 	movi	r4,16
8000cea8:	003f0f06 	br	8000cae8 <_gp+0xfffdbd74>
8000ceac:	3807883a 	mov	r3,r7
8000ceb0:	0009883a 	mov	r4,zero
8000ceb4:	003f0c06 	br	8000cae8 <_gp+0xfffdbd74>
8000ceb8:	3006d43a 	srli	r3,r6,16
8000cebc:	04c00404 	movi	r19,16
8000cec0:	003ecf06 	br	8000ca00 <_gp+0xfffdbc8c>
8000cec4:	8807883a 	mov	r3,r17
8000cec8:	003f1d06 	br	8000cb40 <_gp+0xfffdbdcc>
8000cecc:	8806d43a 	srli	r3,r17,16
8000ced0:	04c00404 	movi	r19,16
8000ced4:	003f1a06 	br	8000cb40 <_gp+0xfffdbdcc>
8000ced8:	3007883a 	mov	r3,r6
8000cedc:	003ec806 	br	8000ca00 <_gp+0xfffdbc8c>
8000cee0:	0007883a 	mov	r3,zero
8000cee4:	00800044 	movi	r2,1
8000cee8:	003f4b06 	br	8000cc18 <_gp+0xfffdbea4>
8000ceec:	893f9b2e 	bgeu	r17,r4,8000cd5c <_gp+0xfffdbfe8>
8000cef0:	10bfff84 	addi	r2,r2,-2
8000cef4:	8f23883a 	add	r17,r17,fp
8000cef8:	003f9906 	br	8000cd60 <_gp+0xfffdbfec>
8000cefc:	113f842e 	bgeu	r2,r4,8000cd10 <_gp+0xfffdbf9c>
8000cf00:	843fff84 	addi	r16,r16,-2
8000cf04:	1705883a 	add	r2,r2,fp
8000cf08:	003f8206 	br	8000cd14 <_gp+0xfffdbfa0>
8000cf0c:	1805883a 	mov	r2,r3
8000cf10:	003fd806 	br	8000ce74 <_gp+0xfffdc100>
8000cf14:	182f883a 	mov	r23,r3
8000cf18:	003fc306 	br	8000ce28 <_gp+0xfffdc0b4>
8000cf1c:	843fff84 	addi	r16,r16,-2
8000cf20:	1445883a 	add	r2,r2,r17
8000cf24:	003ed606 	br	8000ca80 <_gp+0xfffdbd0c>
8000cf28:	843fff84 	addi	r16,r16,-2
8000cf2c:	1445883a 	add	r2,r2,r17
8000cf30:	003f2206 	br	8000cbbc <_gp+0xfffdbe48>

8000cf34 <__umoddi3>:
8000cf34:	defff404 	addi	sp,sp,-48
8000cf38:	df000a15 	stw	fp,40(sp)
8000cf3c:	dc400315 	stw	r17,12(sp)
8000cf40:	dc000215 	stw	r16,8(sp)
8000cf44:	dfc00b15 	stw	ra,44(sp)
8000cf48:	ddc00915 	stw	r23,36(sp)
8000cf4c:	dd800815 	stw	r22,32(sp)
8000cf50:	dd400715 	stw	r21,28(sp)
8000cf54:	dd000615 	stw	r20,24(sp)
8000cf58:	dcc00515 	stw	r19,20(sp)
8000cf5c:	dc800415 	stw	r18,16(sp)
8000cf60:	2021883a 	mov	r16,r4
8000cf64:	2823883a 	mov	r17,r5
8000cf68:	2839883a 	mov	fp,r5
8000cf6c:	38003c1e 	bne	r7,zero,8000d060 <__umoddi3+0x12c>
8000cf70:	3825883a 	mov	r18,r7
8000cf74:	3027883a 	mov	r19,r6
8000cf78:	2029883a 	mov	r20,r4
8000cf7c:	29804e2e 	bgeu	r5,r6,8000d0b8 <__umoddi3+0x184>
8000cf80:	00bfffd4 	movui	r2,65535
8000cf84:	11809736 	bltu	r2,r6,8000d1e4 <__umoddi3+0x2b0>
8000cf88:	30804030 	cmpltui	r2,r6,256
8000cf8c:	10012c1e 	bne	r2,zero,8000d440 <__umoddi3+0x50c>
8000cf90:	3006d23a 	srli	r3,r6,8
8000cf94:	04800204 	movi	r18,8
8000cf98:	00a000b4 	movhi	r2,32770
8000cf9c:	1885883a 	add	r2,r3,r2
8000cfa0:	115a4183 	ldbu	r5,26886(r2)
8000cfa4:	00800804 	movi	r2,32
8000cfa8:	2c8b883a 	add	r5,r5,r18
8000cfac:	1165c83a 	sub	r18,r2,r5
8000cfb0:	90000526 	beq	r18,zero,8000cfc8 <__umoddi3+0x94>
8000cfb4:	8c8e983a 	sll	r7,r17,r18
8000cfb8:	814ad83a 	srl	r5,r16,r5
8000cfbc:	34a6983a 	sll	r19,r6,r18
8000cfc0:	84a8983a 	sll	r20,r16,r18
8000cfc4:	29f8b03a 	or	fp,r5,r7
8000cfc8:	982ed43a 	srli	r23,r19,16
8000cfcc:	e009883a 	mov	r4,fp
8000cfd0:	9dbfffcc 	andi	r22,r19,65535
8000cfd4:	b80b883a 	mov	r5,r23
8000cfd8:	000d5ec0 	call	8000d5ec <__umodsi3>
8000cfdc:	b80b883a 	mov	r5,r23
8000cfe0:	e009883a 	mov	r4,fp
8000cfe4:	102b883a 	mov	r21,r2
8000cfe8:	000d5880 	call	8000d588 <__udivsi3>
8000cfec:	a82a943a 	slli	r21,r21,16
8000cff0:	a006d43a 	srli	r3,r20,16
8000cff4:	b085383a 	mul	r2,r22,r2
8000cff8:	a8c6b03a 	or	r3,r21,r3
8000cffc:	1880032e 	bgeu	r3,r2,8000d00c <__umoddi3+0xd8>
8000d000:	1cc7883a 	add	r3,r3,r19
8000d004:	1cc00136 	bltu	r3,r19,8000d00c <__umoddi3+0xd8>
8000d008:	18811736 	bltu	r3,r2,8000d468 <__umoddi3+0x534>
8000d00c:	18abc83a 	sub	r21,r3,r2
8000d010:	b80b883a 	mov	r5,r23
8000d014:	a809883a 	mov	r4,r21
8000d018:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d01c:	1023883a 	mov	r17,r2
8000d020:	b80b883a 	mov	r5,r23
8000d024:	a809883a 	mov	r4,r21
8000d028:	000d5880 	call	8000d588 <__udivsi3>
8000d02c:	8822943a 	slli	r17,r17,16
8000d030:	b085383a 	mul	r2,r22,r2
8000d034:	a0ffffcc 	andi	r3,r20,65535
8000d038:	88c6b03a 	or	r3,r17,r3
8000d03c:	1880042e 	bgeu	r3,r2,8000d050 <__umoddi3+0x11c>
8000d040:	1cc7883a 	add	r3,r3,r19
8000d044:	1cc00236 	bltu	r3,r19,8000d050 <__umoddi3+0x11c>
8000d048:	1880012e 	bgeu	r3,r2,8000d050 <__umoddi3+0x11c>
8000d04c:	1cc7883a 	add	r3,r3,r19
8000d050:	1885c83a 	sub	r2,r3,r2
8000d054:	1484d83a 	srl	r2,r2,r18
8000d058:	0007883a 	mov	r3,zero
8000d05c:	00004b06 	br	8000d18c <__umoddi3+0x258>
8000d060:	29c04836 	bltu	r5,r7,8000d184 <__umoddi3+0x250>
8000d064:	00bfffd4 	movui	r2,65535
8000d068:	11c0542e 	bgeu	r2,r7,8000d1bc <__umoddi3+0x288>
8000d06c:	00804034 	movhi	r2,256
8000d070:	3880e836 	bltu	r7,r2,8000d414 <__umoddi3+0x4e0>
8000d074:	3808d63a 	srli	r4,r7,24
8000d078:	00800604 	movi	r2,24
8000d07c:	00e000b4 	movhi	r3,32770
8000d080:	20c7883a 	add	r3,r4,r3
8000d084:	1cda4183 	ldbu	r19,26886(r3)
8000d088:	00c00804 	movi	r3,32
8000d08c:	98a7883a 	add	r19,r19,r2
8000d090:	1ce9c83a 	sub	r20,r3,r19
8000d094:	a000581e 	bne	r20,zero,8000d1f8 <__umoddi3+0x2c4>
8000d098:	3c400136 	bltu	r7,r17,8000d0a0 <__umoddi3+0x16c>
8000d09c:	8180f436 	bltu	r16,r6,8000d470 <__umoddi3+0x53c>
8000d0a0:	8185c83a 	sub	r2,r16,r6
8000d0a4:	89cfc83a 	sub	r7,r17,r7
8000d0a8:	808b803a 	cmpltu	r5,r16,r2
8000d0ac:	3979c83a 	sub	fp,r7,r5
8000d0b0:	e007883a 	mov	r3,fp
8000d0b4:	00003506 	br	8000d18c <__umoddi3+0x258>
8000d0b8:	3000041e 	bne	r6,zero,8000d0cc <__umoddi3+0x198>
8000d0bc:	000b883a 	mov	r5,zero
8000d0c0:	01000044 	movi	r4,1
8000d0c4:	000d5880 	call	8000d588 <__udivsi3>
8000d0c8:	1027883a 	mov	r19,r2
8000d0cc:	00bfffd4 	movui	r2,65535
8000d0d0:	14c03f2e 	bgeu	r2,r19,8000d1d0 <__umoddi3+0x29c>
8000d0d4:	00804034 	movhi	r2,256
8000d0d8:	9880d436 	bltu	r19,r2,8000d42c <__umoddi3+0x4f8>
8000d0dc:	9806d63a 	srli	r3,r19,24
8000d0e0:	04800604 	movi	r18,24
8000d0e4:	00a000b4 	movhi	r2,32770
8000d0e8:	1885883a 	add	r2,r3,r2
8000d0ec:	10da4183 	ldbu	r3,26886(r2)
8000d0f0:	00800804 	movi	r2,32
8000d0f4:	1c87883a 	add	r3,r3,r18
8000d0f8:	10e5c83a 	sub	r18,r2,r3
8000d0fc:	90008a1e 	bne	r18,zero,8000d328 <__umoddi3+0x3f4>
8000d100:	982cd43a 	srli	r22,r19,16
8000d104:	8ce3c83a 	sub	r17,r17,r19
8000d108:	9d7fffcc 	andi	r21,r19,65535
8000d10c:	b00b883a 	mov	r5,r22
8000d110:	8809883a 	mov	r4,r17
8000d114:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d118:	b00b883a 	mov	r5,r22
8000d11c:	8809883a 	mov	r4,r17
8000d120:	1021883a 	mov	r16,r2
8000d124:	000d5880 	call	8000d588 <__udivsi3>
8000d128:	8020943a 	slli	r16,r16,16
8000d12c:	a006d43a 	srli	r3,r20,16
8000d130:	1545383a 	mul	r2,r2,r21
8000d134:	80c6b03a 	or	r3,r16,r3
8000d138:	1880042e 	bgeu	r3,r2,8000d14c <__umoddi3+0x218>
8000d13c:	1cc7883a 	add	r3,r3,r19
8000d140:	1cc00236 	bltu	r3,r19,8000d14c <__umoddi3+0x218>
8000d144:	1880012e 	bgeu	r3,r2,8000d14c <__umoddi3+0x218>
8000d148:	1cc7883a 	add	r3,r3,r19
8000d14c:	18a1c83a 	sub	r16,r3,r2
8000d150:	b00b883a 	mov	r5,r22
8000d154:	8009883a 	mov	r4,r16
8000d158:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d15c:	1023883a 	mov	r17,r2
8000d160:	b00b883a 	mov	r5,r22
8000d164:	8009883a 	mov	r4,r16
8000d168:	000d5880 	call	8000d588 <__udivsi3>
8000d16c:	8822943a 	slli	r17,r17,16
8000d170:	1545383a 	mul	r2,r2,r21
8000d174:	a53fffcc 	andi	r20,r20,65535
8000d178:	8d06b03a 	or	r3,r17,r20
8000d17c:	18bfb42e 	bgeu	r3,r2,8000d050 <_gp+0xfffdc2dc>
8000d180:	003faf06 	br	8000d040 <_gp+0xfffdc2cc>
8000d184:	2005883a 	mov	r2,r4
8000d188:	2807883a 	mov	r3,r5
8000d18c:	dfc00b17 	ldw	ra,44(sp)
8000d190:	df000a17 	ldw	fp,40(sp)
8000d194:	ddc00917 	ldw	r23,36(sp)
8000d198:	dd800817 	ldw	r22,32(sp)
8000d19c:	dd400717 	ldw	r21,28(sp)
8000d1a0:	dd000617 	ldw	r20,24(sp)
8000d1a4:	dcc00517 	ldw	r19,20(sp)
8000d1a8:	dc800417 	ldw	r18,16(sp)
8000d1ac:	dc400317 	ldw	r17,12(sp)
8000d1b0:	dc000217 	ldw	r16,8(sp)
8000d1b4:	dec00c04 	addi	sp,sp,48
8000d1b8:	f800283a 	ret
8000d1bc:	38804030 	cmpltui	r2,r7,256
8000d1c0:	1000911e 	bne	r2,zero,8000d408 <__umoddi3+0x4d4>
8000d1c4:	3808d23a 	srli	r4,r7,8
8000d1c8:	00800204 	movi	r2,8
8000d1cc:	003fab06 	br	8000d07c <_gp+0xfffdc308>
8000d1d0:	98804030 	cmpltui	r2,r19,256
8000d1d4:	1000981e 	bne	r2,zero,8000d438 <__umoddi3+0x504>
8000d1d8:	9806d23a 	srli	r3,r19,8
8000d1dc:	04800204 	movi	r18,8
8000d1e0:	003fc006 	br	8000d0e4 <_gp+0xfffdc370>
8000d1e4:	00804034 	movhi	r2,256
8000d1e8:	30808d36 	bltu	r6,r2,8000d420 <__umoddi3+0x4ec>
8000d1ec:	3006d63a 	srli	r3,r6,24
8000d1f0:	04800604 	movi	r18,24
8000d1f4:	003f6806 	br	8000cf98 <_gp+0xfffdc224>
8000d1f8:	34eed83a 	srl	r23,r6,r19
8000d1fc:	3d0e983a 	sll	r7,r7,r20
8000d200:	8cf8d83a 	srl	fp,r17,r19
8000d204:	84c4d83a 	srl	r2,r16,r19
8000d208:	b9eeb03a 	or	r23,r23,r7
8000d20c:	b82cd43a 	srli	r22,r23,16
8000d210:	8d22983a 	sll	r17,r17,r20
8000d214:	e009883a 	mov	r4,fp
8000d218:	b00b883a 	mov	r5,r22
8000d21c:	3524983a 	sll	r18,r6,r20
8000d220:	1462b03a 	or	r17,r2,r17
8000d224:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d228:	e009883a 	mov	r4,fp
8000d22c:	b00b883a 	mov	r5,r22
8000d230:	102b883a 	mov	r21,r2
8000d234:	000d5880 	call	8000d588 <__udivsi3>
8000d238:	100d883a 	mov	r6,r2
8000d23c:	b8ffffcc 	andi	r3,r23,65535
8000d240:	a82a943a 	slli	r21,r21,16
8000d244:	8804d43a 	srli	r2,r17,16
8000d248:	1989383a 	mul	r4,r3,r6
8000d24c:	8520983a 	sll	r16,r16,r20
8000d250:	a884b03a 	or	r2,r21,r2
8000d254:	1100042e 	bgeu	r2,r4,8000d268 <__umoddi3+0x334>
8000d258:	15c5883a 	add	r2,r2,r23
8000d25c:	317fffc4 	addi	r5,r6,-1
8000d260:	15c07d2e 	bgeu	r2,r23,8000d458 <__umoddi3+0x524>
8000d264:	280d883a 	mov	r6,r5
8000d268:	112bc83a 	sub	r21,r2,r4
8000d26c:	b00b883a 	mov	r5,r22
8000d270:	a809883a 	mov	r4,r21
8000d274:	d9800115 	stw	r6,4(sp)
8000d278:	d8c00015 	stw	r3,0(sp)
8000d27c:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d280:	b00b883a 	mov	r5,r22
8000d284:	a809883a 	mov	r4,r21
8000d288:	1039883a 	mov	fp,r2
8000d28c:	000d5880 	call	8000d588 <__udivsi3>
8000d290:	d8c00017 	ldw	r3,0(sp)
8000d294:	e038943a 	slli	fp,fp,16
8000d298:	8c7fffcc 	andi	r17,r17,65535
8000d29c:	1887383a 	mul	r3,r3,r2
8000d2a0:	e462b03a 	or	r17,fp,r17
8000d2a4:	d9800117 	ldw	r6,4(sp)
8000d2a8:	88c0042e 	bgeu	r17,r3,8000d2bc <__umoddi3+0x388>
8000d2ac:	8de3883a 	add	r17,r17,r23
8000d2b0:	113fffc4 	addi	r4,r2,-1
8000d2b4:	8dc0642e 	bgeu	r17,r23,8000d448 <__umoddi3+0x514>
8000d2b8:	2005883a 	mov	r2,r4
8000d2bc:	3008943a 	slli	r4,r6,16
8000d2c0:	917fffcc 	andi	r5,r18,65535
8000d2c4:	9010d43a 	srli	r8,r18,16
8000d2c8:	2084b03a 	or	r2,r4,r2
8000d2cc:	11bfffcc 	andi	r6,r2,65535
8000d2d0:	1004d43a 	srli	r2,r2,16
8000d2d4:	314f383a 	mul	r7,r6,r5
8000d2d8:	320d383a 	mul	r6,r6,r8
8000d2dc:	114b383a 	mul	r5,r2,r5
8000d2e0:	3808d43a 	srli	r4,r7,16
8000d2e4:	88e3c83a 	sub	r17,r17,r3
8000d2e8:	314d883a 	add	r6,r6,r5
8000d2ec:	2189883a 	add	r4,r4,r6
8000d2f0:	1205383a 	mul	r2,r2,r8
8000d2f4:	2140022e 	bgeu	r4,r5,8000d300 <__umoddi3+0x3cc>
8000d2f8:	00c00074 	movhi	r3,1
8000d2fc:	10c5883a 	add	r2,r2,r3
8000d300:	2006d43a 	srli	r3,r4,16
8000d304:	2008943a 	slli	r4,r4,16
8000d308:	39ffffcc 	andi	r7,r7,65535
8000d30c:	1885883a 	add	r2,r3,r2
8000d310:	21c9883a 	add	r4,r4,r7
8000d314:	88802f36 	bltu	r17,r2,8000d3d4 <__umoddi3+0x4a0>
8000d318:	88805726 	beq	r17,r2,8000d478 <__umoddi3+0x544>
8000d31c:	8887c83a 	sub	r3,r17,r2
8000d320:	200d883a 	mov	r6,r4
8000d324:	00003006 	br	8000d3e8 <__umoddi3+0x4b4>
8000d328:	9ca6983a 	sll	r19,r19,r18
8000d32c:	88e8d83a 	srl	r20,r17,r3
8000d330:	80c6d83a 	srl	r3,r16,r3
8000d334:	982cd43a 	srli	r22,r19,16
8000d338:	8ca2983a 	sll	r17,r17,r18
8000d33c:	a009883a 	mov	r4,r20
8000d340:	b00b883a 	mov	r5,r22
8000d344:	1c6eb03a 	or	r23,r3,r17
8000d348:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d34c:	a009883a 	mov	r4,r20
8000d350:	b00b883a 	mov	r5,r22
8000d354:	1023883a 	mov	r17,r2
8000d358:	000d5880 	call	8000d588 <__udivsi3>
8000d35c:	9d7fffcc 	andi	r21,r19,65535
8000d360:	8822943a 	slli	r17,r17,16
8000d364:	b806d43a 	srli	r3,r23,16
8000d368:	a885383a 	mul	r2,r21,r2
8000d36c:	84a8983a 	sll	r20,r16,r18
8000d370:	88c6b03a 	or	r3,r17,r3
8000d374:	1880042e 	bgeu	r3,r2,8000d388 <__umoddi3+0x454>
8000d378:	1cc7883a 	add	r3,r3,r19
8000d37c:	1cc00236 	bltu	r3,r19,8000d388 <__umoddi3+0x454>
8000d380:	1880012e 	bgeu	r3,r2,8000d388 <__umoddi3+0x454>
8000d384:	1cc7883a 	add	r3,r3,r19
8000d388:	18a3c83a 	sub	r17,r3,r2
8000d38c:	8809883a 	mov	r4,r17
8000d390:	b00b883a 	mov	r5,r22
8000d394:	000d5ec0 	call	8000d5ec <__umodsi3>
8000d398:	1021883a 	mov	r16,r2
8000d39c:	8809883a 	mov	r4,r17
8000d3a0:	b00b883a 	mov	r5,r22
8000d3a4:	000d5880 	call	8000d588 <__udivsi3>
8000d3a8:	8022943a 	slli	r17,r16,16
8000d3ac:	a885383a 	mul	r2,r21,r2
8000d3b0:	bdffffcc 	andi	r23,r23,65535
8000d3b4:	8de2b03a 	or	r17,r17,r23
8000d3b8:	8880042e 	bgeu	r17,r2,8000d3cc <__umoddi3+0x498>
8000d3bc:	8ce3883a 	add	r17,r17,r19
8000d3c0:	8cc00236 	bltu	r17,r19,8000d3cc <__umoddi3+0x498>
8000d3c4:	8880012e 	bgeu	r17,r2,8000d3cc <__umoddi3+0x498>
8000d3c8:	8ce3883a 	add	r17,r17,r19
8000d3cc:	88a3c83a 	sub	r17,r17,r2
8000d3d0:	003f4e06 	br	8000d10c <_gp+0xfffdc398>
8000d3d4:	248dc83a 	sub	r6,r4,r18
8000d3d8:	15c5c83a 	sub	r2,r2,r23
8000d3dc:	2189803a 	cmpltu	r4,r4,r6
8000d3e0:	1109c83a 	sub	r4,r2,r4
8000d3e4:	8907c83a 	sub	r3,r17,r4
8000d3e8:	818dc83a 	sub	r6,r16,r6
8000d3ec:	81a1803a 	cmpltu	r16,r16,r6
8000d3f0:	1c23c83a 	sub	r17,r3,r16
8000d3f4:	8ce0983a 	sll	r16,r17,r19
8000d3f8:	3504d83a 	srl	r2,r6,r20
8000d3fc:	8d06d83a 	srl	r3,r17,r20
8000d400:	8084b03a 	or	r2,r16,r2
8000d404:	003f6106 	br	8000d18c <_gp+0xfffdc418>
8000d408:	3809883a 	mov	r4,r7
8000d40c:	0005883a 	mov	r2,zero
8000d410:	003f1a06 	br	8000d07c <_gp+0xfffdc308>
8000d414:	3808d43a 	srli	r4,r7,16
8000d418:	00800404 	movi	r2,16
8000d41c:	003f1706 	br	8000d07c <_gp+0xfffdc308>
8000d420:	3006d43a 	srli	r3,r6,16
8000d424:	04800404 	movi	r18,16
8000d428:	003edb06 	br	8000cf98 <_gp+0xfffdc224>
8000d42c:	9806d43a 	srli	r3,r19,16
8000d430:	04800404 	movi	r18,16
8000d434:	003f2b06 	br	8000d0e4 <_gp+0xfffdc370>
8000d438:	9807883a 	mov	r3,r19
8000d43c:	003f2906 	br	8000d0e4 <_gp+0xfffdc370>
8000d440:	3007883a 	mov	r3,r6
8000d444:	003ed406 	br	8000cf98 <_gp+0xfffdc224>
8000d448:	88ff9b2e 	bgeu	r17,r3,8000d2b8 <_gp+0xfffdc544>
8000d44c:	10bfff84 	addi	r2,r2,-2
8000d450:	8de3883a 	add	r17,r17,r23
8000d454:	003f9906 	br	8000d2bc <_gp+0xfffdc548>
8000d458:	113f822e 	bgeu	r2,r4,8000d264 <_gp+0xfffdc4f0>
8000d45c:	31bfff84 	addi	r6,r6,-2
8000d460:	15c5883a 	add	r2,r2,r23
8000d464:	003f8006 	br	8000d268 <_gp+0xfffdc4f4>
8000d468:	1cc7883a 	add	r3,r3,r19
8000d46c:	003ee706 	br	8000d00c <_gp+0xfffdc298>
8000d470:	8005883a 	mov	r2,r16
8000d474:	003f0e06 	br	8000d0b0 <_gp+0xfffdc33c>
8000d478:	813fd636 	bltu	r16,r4,8000d3d4 <_gp+0xfffdc660>
8000d47c:	200d883a 	mov	r6,r4
8000d480:	0007883a 	mov	r3,zero
8000d484:	003fd806 	br	8000d3e8 <_gp+0xfffdc674>

8000d488 <__divsi3>:
8000d488:	20001c16 	blt	r4,zero,8000d4fc <__divsi3+0x74>
8000d48c:	000f883a 	mov	r7,zero
8000d490:	2800020e 	bge	r5,zero,8000d49c <__divsi3+0x14>
8000d494:	014bc83a 	sub	r5,zero,r5
8000d498:	39c0005c 	xori	r7,r7,1
8000d49c:	200d883a 	mov	r6,r4
8000d4a0:	2900192e 	bgeu	r5,r4,8000d508 <__divsi3+0x80>
8000d4a4:	00800804 	movi	r2,32
8000d4a8:	00c00044 	movi	r3,1
8000d4ac:	00000206 	br	8000d4b8 <__divsi3+0x30>
8000d4b0:	10001026 	beq	r2,zero,8000d4f4 <__divsi3+0x6c>
8000d4b4:	28000516 	blt	r5,zero,8000d4cc <__divsi3+0x44>
8000d4b8:	294b883a 	add	r5,r5,r5
8000d4bc:	10bfffc4 	addi	r2,r2,-1
8000d4c0:	18c7883a 	add	r3,r3,r3
8000d4c4:	293ffa36 	bltu	r5,r4,8000d4b0 <_gp+0xfffdc73c>
8000d4c8:	18000a26 	beq	r3,zero,8000d4f4 <__divsi3+0x6c>
8000d4cc:	0005883a 	mov	r2,zero
8000d4d0:	31400236 	bltu	r6,r5,8000d4dc <__divsi3+0x54>
8000d4d4:	314dc83a 	sub	r6,r6,r5
8000d4d8:	10c4b03a 	or	r2,r2,r3
8000d4dc:	1806d07a 	srli	r3,r3,1
8000d4e0:	280ad07a 	srli	r5,r5,1
8000d4e4:	183ffa1e 	bne	r3,zero,8000d4d0 <_gp+0xfffdc75c>
8000d4e8:	38000126 	beq	r7,zero,8000d4f0 <__divsi3+0x68>
8000d4ec:	0085c83a 	sub	r2,zero,r2
8000d4f0:	f800283a 	ret
8000d4f4:	0005883a 	mov	r2,zero
8000d4f8:	003ffb06 	br	8000d4e8 <_gp+0xfffdc774>
8000d4fc:	0109c83a 	sub	r4,zero,r4
8000d500:	01c00044 	movi	r7,1
8000d504:	003fe206 	br	8000d490 <_gp+0xfffdc71c>
8000d508:	00c00044 	movi	r3,1
8000d50c:	003fef06 	br	8000d4cc <_gp+0xfffdc758>

8000d510 <__modsi3>:
8000d510:	20001816 	blt	r4,zero,8000d574 <__modsi3+0x64>
8000d514:	000f883a 	mov	r7,zero
8000d518:	2005883a 	mov	r2,r4
8000d51c:	28001316 	blt	r5,zero,8000d56c <__modsi3+0x5c>
8000d520:	2900172e 	bgeu	r5,r4,8000d580 <__modsi3+0x70>
8000d524:	01800804 	movi	r6,32
8000d528:	00c00044 	movi	r3,1
8000d52c:	00000206 	br	8000d538 <__modsi3+0x28>
8000d530:	30000b26 	beq	r6,zero,8000d560 <__modsi3+0x50>
8000d534:	28000516 	blt	r5,zero,8000d54c <__modsi3+0x3c>
8000d538:	294b883a 	add	r5,r5,r5
8000d53c:	31bfffc4 	addi	r6,r6,-1
8000d540:	18c7883a 	add	r3,r3,r3
8000d544:	293ffa36 	bltu	r5,r4,8000d530 <_gp+0xfffdc7bc>
8000d548:	18000526 	beq	r3,zero,8000d560 <__modsi3+0x50>
8000d54c:	1806d07a 	srli	r3,r3,1
8000d550:	11400136 	bltu	r2,r5,8000d558 <__modsi3+0x48>
8000d554:	1145c83a 	sub	r2,r2,r5
8000d558:	280ad07a 	srli	r5,r5,1
8000d55c:	183ffb1e 	bne	r3,zero,8000d54c <_gp+0xfffdc7d8>
8000d560:	38000126 	beq	r7,zero,8000d568 <__modsi3+0x58>
8000d564:	0085c83a 	sub	r2,zero,r2
8000d568:	f800283a 	ret
8000d56c:	014bc83a 	sub	r5,zero,r5
8000d570:	003feb06 	br	8000d520 <_gp+0xfffdc7ac>
8000d574:	0109c83a 	sub	r4,zero,r4
8000d578:	01c00044 	movi	r7,1
8000d57c:	003fe606 	br	8000d518 <_gp+0xfffdc7a4>
8000d580:	00c00044 	movi	r3,1
8000d584:	003ff106 	br	8000d54c <_gp+0xfffdc7d8>

8000d588 <__udivsi3>:
8000d588:	200d883a 	mov	r6,r4
8000d58c:	2900152e 	bgeu	r5,r4,8000d5e4 <__udivsi3+0x5c>
8000d590:	28001416 	blt	r5,zero,8000d5e4 <__udivsi3+0x5c>
8000d594:	00800804 	movi	r2,32
8000d598:	00c00044 	movi	r3,1
8000d59c:	00000206 	br	8000d5a8 <__udivsi3+0x20>
8000d5a0:	10000e26 	beq	r2,zero,8000d5dc <__udivsi3+0x54>
8000d5a4:	28000516 	blt	r5,zero,8000d5bc <__udivsi3+0x34>
8000d5a8:	294b883a 	add	r5,r5,r5
8000d5ac:	10bfffc4 	addi	r2,r2,-1
8000d5b0:	18c7883a 	add	r3,r3,r3
8000d5b4:	293ffa36 	bltu	r5,r4,8000d5a0 <_gp+0xfffdc82c>
8000d5b8:	18000826 	beq	r3,zero,8000d5dc <__udivsi3+0x54>
8000d5bc:	0005883a 	mov	r2,zero
8000d5c0:	31400236 	bltu	r6,r5,8000d5cc <__udivsi3+0x44>
8000d5c4:	314dc83a 	sub	r6,r6,r5
8000d5c8:	10c4b03a 	or	r2,r2,r3
8000d5cc:	1806d07a 	srli	r3,r3,1
8000d5d0:	280ad07a 	srli	r5,r5,1
8000d5d4:	183ffa1e 	bne	r3,zero,8000d5c0 <_gp+0xfffdc84c>
8000d5d8:	f800283a 	ret
8000d5dc:	0005883a 	mov	r2,zero
8000d5e0:	f800283a 	ret
8000d5e4:	00c00044 	movi	r3,1
8000d5e8:	003ff406 	br	8000d5bc <_gp+0xfffdc848>

8000d5ec <__umodsi3>:
8000d5ec:	2005883a 	mov	r2,r4
8000d5f0:	2900122e 	bgeu	r5,r4,8000d63c <__umodsi3+0x50>
8000d5f4:	28001116 	blt	r5,zero,8000d63c <__umodsi3+0x50>
8000d5f8:	01800804 	movi	r6,32
8000d5fc:	00c00044 	movi	r3,1
8000d600:	00000206 	br	8000d60c <__umodsi3+0x20>
8000d604:	30000b26 	beq	r6,zero,8000d634 <__umodsi3+0x48>
8000d608:	28000516 	blt	r5,zero,8000d620 <__umodsi3+0x34>
8000d60c:	294b883a 	add	r5,r5,r5
8000d610:	31bfffc4 	addi	r6,r6,-1
8000d614:	18c7883a 	add	r3,r3,r3
8000d618:	293ffa36 	bltu	r5,r4,8000d604 <_gp+0xfffdc890>
8000d61c:	18000626 	beq	r3,zero,8000d638 <__umodsi3+0x4c>
8000d620:	1806d07a 	srli	r3,r3,1
8000d624:	11400136 	bltu	r2,r5,8000d62c <__umodsi3+0x40>
8000d628:	1145c83a 	sub	r2,r2,r5
8000d62c:	280ad07a 	srli	r5,r5,1
8000d630:	183ffb1e 	bne	r3,zero,8000d620 <_gp+0xfffdc8ac>
8000d634:	f800283a 	ret
8000d638:	f800283a 	ret
8000d63c:	00c00044 	movi	r3,1
8000d640:	003ff706 	br	8000d620 <_gp+0xfffdc8ac>

8000d644 <__adddf3>:
8000d644:	02400434 	movhi	r9,16
8000d648:	defffb04 	addi	sp,sp,-20
8000d64c:	4a7fffc4 	addi	r9,r9,-1
8000d650:	2a50703a 	and	r8,r5,r9
8000d654:	3a54703a 	and	r10,r7,r9
8000d658:	3816d7fa 	srli	r11,r7,31
8000d65c:	dc800215 	stw	r18,8(sp)
8000d660:	380ed53a 	srli	r7,r7,20
8000d664:	2824d7fa 	srli	r18,r5,31
8000d668:	280ad53a 	srli	r5,r5,20
8000d66c:	400490fa 	slli	r2,r8,3
8000d670:	501490fa 	slli	r10,r10,3
8000d674:	2010d77a 	srli	r8,r4,29
8000d678:	3006d77a 	srli	r3,r6,29
8000d67c:	dc000015 	stw	r16,0(sp)
8000d680:	39c1ffcc 	andi	r7,r7,2047
8000d684:	2c01ffcc 	andi	r16,r5,2047
8000d688:	dfc00415 	stw	ra,16(sp)
8000d68c:	dcc00315 	stw	r19,12(sp)
8000d690:	dc400115 	stw	r17,4(sp)
8000d694:	93403fcc 	andi	r13,r18,255
8000d698:	5b803fcc 	andi	r14,r11,255
8000d69c:	1a86b03a 	or	r3,r3,r10
8000d6a0:	4090b03a 	or	r8,r8,r2
8000d6a4:	201890fa 	slli	r12,r4,3
8000d6a8:	301490fa 	slli	r10,r6,3
8000d6ac:	81cbc83a 	sub	r5,r16,r7
8000d6b0:	6b805426 	beq	r13,r14,8000d804 <__adddf3+0x1c0>
8000d6b4:	0140420e 	bge	zero,r5,8000d7c0 <__adddf3+0x17c>
8000d6b8:	38006e1e 	bne	r7,zero,8000d874 <__adddf3+0x230>
8000d6bc:	1a84b03a 	or	r2,r3,r10
8000d6c0:	1000ce26 	beq	r2,zero,8000d9fc <__adddf3+0x3b8>
8000d6c4:	28bfffc4 	addi	r2,r5,-1
8000d6c8:	1001171e 	bne	r2,zero,8000db28 <__adddf3+0x4e4>
8000d6cc:	62a3c83a 	sub	r17,r12,r10
8000d6d0:	40c9c83a 	sub	r4,r8,r3
8000d6d4:	6445803a 	cmpltu	r2,r12,r17
8000d6d8:	2091c83a 	sub	r8,r4,r2
8000d6dc:	04000044 	movi	r16,1
8000d6e0:	4080202c 	andhi	r2,r8,128
8000d6e4:	1000b126 	beq	r2,zero,8000d9ac <__adddf3+0x368>
8000d6e8:	04c02034 	movhi	r19,128
8000d6ec:	9cffffc4 	addi	r19,r19,-1
8000d6f0:	44e6703a 	and	r19,r8,r19
8000d6f4:	9800ec26 	beq	r19,zero,8000daa8 <__adddf3+0x464>
8000d6f8:	9809883a 	mov	r4,r19
8000d6fc:	000f97c0 	call	8000f97c <__clzsi2>
8000d700:	10fffe04 	addi	r3,r2,-8
8000d704:	19000808 	cmpgei	r4,r3,32
8000d708:	2000ed1e 	bne	r4,zero,8000dac0 <__adddf3+0x47c>
8000d70c:	01000804 	movi	r4,32
8000d710:	20c9c83a 	sub	r4,r4,r3
8000d714:	8908d83a 	srl	r4,r17,r4
8000d718:	98e6983a 	sll	r19,r19,r3
8000d71c:	88e2983a 	sll	r17,r17,r3
8000d720:	24c8b03a 	or	r4,r4,r19
8000d724:	1c00ea16 	blt	r3,r16,8000dad0 <__adddf3+0x48c>
8000d728:	1c21c83a 	sub	r16,r3,r16
8000d72c:	82000044 	addi	r8,r16,1
8000d730:	40800808 	cmpgei	r2,r8,32
8000d734:	1001001e 	bne	r2,zero,8000db38 <__adddf3+0x4f4>
8000d738:	00800804 	movi	r2,32
8000d73c:	1205c83a 	sub	r2,r2,r8
8000d740:	8a06d83a 	srl	r3,r17,r8
8000d744:	88a2983a 	sll	r17,r17,r2
8000d748:	2084983a 	sll	r2,r4,r2
8000d74c:	2210d83a 	srl	r8,r4,r8
8000d750:	8822c03a 	cmpne	r17,r17,zero
8000d754:	10c4b03a 	or	r2,r2,r3
8000d758:	1462b03a 	or	r17,r2,r17
8000d75c:	888001cc 	andi	r2,r17,7
8000d760:	0021883a 	mov	r16,zero
8000d764:	10000726 	beq	r2,zero,8000d784 <__adddf3+0x140>
8000d768:	888003cc 	andi	r2,r17,15
8000d76c:	10800120 	cmpeqi	r2,r2,4
8000d770:	1000041e 	bne	r2,zero,8000d784 <__adddf3+0x140>
8000d774:	88c00104 	addi	r3,r17,4
8000d778:	1c63803a 	cmpltu	r17,r3,r17
8000d77c:	4451883a 	add	r8,r8,r17
8000d780:	1823883a 	mov	r17,r3
8000d784:	4080202c 	andhi	r2,r8,128
8000d788:	10016b26 	beq	r2,zero,8000dd38 <__adddf3+0x6f4>
8000d78c:	84000044 	addi	r16,r16,1
8000d790:	8081ffe0 	cmpeqi	r2,r16,2047
8000d794:	8401ffcc 	andi	r16,r16,2047
8000d798:	1000bf1e 	bne	r2,zero,8000da98 <__adddf3+0x454>
8000d79c:	013fe034 	movhi	r4,65408
8000d7a0:	213fffc4 	addi	r4,r4,-1
8000d7a4:	4108703a 	and	r4,r8,r4
8000d7a8:	2004977a 	slli	r2,r4,29
8000d7ac:	8822d0fa 	srli	r17,r17,3
8000d7b0:	2008927a 	slli	r4,r4,9
8000d7b4:	1444b03a 	or	r2,r2,r17
8000d7b8:	2008d33a 	srli	r4,r4,12
8000d7bc:	00006106 	br	8000d944 <__adddf3+0x300>
8000d7c0:	2800951e 	bne	r5,zero,8000da18 <__adddf3+0x3d4>
8000d7c4:	80800044 	addi	r2,r16,1
8000d7c8:	1081ffcc 	andi	r2,r2,2047
8000d7cc:	10800088 	cmpgei	r2,r2,2
8000d7d0:	1000cb26 	beq	r2,zero,8000db00 <__adddf3+0x4bc>
8000d7d4:	62a3c83a 	sub	r17,r12,r10
8000d7d8:	40e7c83a 	sub	r19,r8,r3
8000d7dc:	6449803a 	cmpltu	r4,r12,r17
8000d7e0:	9927c83a 	sub	r19,r19,r4
8000d7e4:	9880202c 	andhi	r2,r19,128
8000d7e8:	1000e11e 	bne	r2,zero,8000db70 <__adddf3+0x52c>
8000d7ec:	8ccab03a 	or	r5,r17,r19
8000d7f0:	283fc01e 	bne	r5,zero,8000d6f4 <_gp+0xfffdc980>
8000d7f4:	0005883a 	mov	r2,zero
8000d7f8:	0025883a 	mov	r18,zero
8000d7fc:	0021883a 	mov	r16,zero
8000d800:	00004c06 	br	8000d934 <__adddf3+0x2f0>
8000d804:	01409d0e 	bge	zero,r5,8000da7c <__adddf3+0x438>
8000d808:	38005d26 	beq	r7,zero,8000d980 <__adddf3+0x33c>
8000d80c:	8181ffe0 	cmpeqi	r6,r16,2047
8000d810:	3000431e 	bne	r6,zero,8000d920 <__adddf3+0x2dc>
8000d814:	18c02034 	orhi	r3,r3,128
8000d818:	28800e48 	cmpgei	r2,r5,57
8000d81c:	1000da26 	beq	r2,zero,8000db88 <__adddf3+0x544>
8000d820:	1aa2b03a 	or	r17,r3,r10
8000d824:	8822c03a 	cmpne	r17,r17,zero
8000d828:	8b23883a 	add	r17,r17,r12
8000d82c:	8b05803a 	cmpltu	r2,r17,r12
8000d830:	4091883a 	add	r8,r8,r2
8000d834:	4080202c 	andhi	r2,r8,128
8000d838:	10005c26 	beq	r2,zero,8000d9ac <__adddf3+0x368>
8000d83c:	84000044 	addi	r16,r16,1
8000d840:	8181ffe0 	cmpeqi	r6,r16,2047
8000d844:	3000941e 	bne	r6,zero,8000da98 <__adddf3+0x454>
8000d848:	013fe034 	movhi	r4,65408
8000d84c:	213fffc4 	addi	r4,r4,-1
8000d850:	8804d07a 	srli	r2,r17,1
8000d854:	4108703a 	and	r4,r8,r4
8000d858:	200697fa 	slli	r3,r4,31
8000d85c:	8c40004c 	andi	r17,r17,1
8000d860:	1462b03a 	or	r17,r2,r17
8000d864:	1c62b03a 	or	r17,r3,r17
8000d868:	2010d07a 	srli	r8,r4,1
8000d86c:	888001cc 	andi	r2,r17,7
8000d870:	003fbc06 	br	8000d764 <_gp+0xfffdc9f0>
8000d874:	8181ffe0 	cmpeqi	r6,r16,2047
8000d878:	3000291e 	bne	r6,zero,8000d920 <__adddf3+0x2dc>
8000d87c:	18c02034 	orhi	r3,r3,128
8000d880:	28800e48 	cmpgei	r2,r5,57
8000d884:	1000981e 	bne	r2,zero,8000dae8 <__adddf3+0x4a4>
8000d888:	28800808 	cmpgei	r2,r5,32
8000d88c:	1000cb26 	beq	r2,zero,8000dbbc <__adddf3+0x578>
8000d890:	2c7ff804 	addi	r17,r5,-32
8000d894:	29000820 	cmpeqi	r4,r5,32
8000d898:	1c44d83a 	srl	r2,r3,r17
8000d89c:	2000041e 	bne	r4,zero,8000d8b0 <__adddf3+0x26c>
8000d8a0:	01001004 	movi	r4,64
8000d8a4:	214bc83a 	sub	r5,r4,r5
8000d8a8:	1946983a 	sll	r3,r3,r5
8000d8ac:	50d4b03a 	or	r10,r10,r3
8000d8b0:	5022c03a 	cmpne	r17,r10,zero
8000d8b4:	88a2b03a 	or	r17,r17,r2
8000d8b8:	00008d06 	br	8000daf0 <__adddf3+0x4ac>
8000d8bc:	10016e26 	beq	r2,zero,8000de78 <__adddf3+0x834>
8000d8c0:	1a94b03a 	or	r10,r3,r10
8000d8c4:	5000e726 	beq	r10,zero,8000dc64 <__adddf3+0x620>
8000d8c8:	400ad0fa 	srli	r5,r8,3
8000d8cc:	01c80034 	movhi	r7,8192
8000d8d0:	4010977a 	slli	r8,r8,29
8000d8d4:	39ffffc4 	addi	r7,r7,-1
8000d8d8:	21c4703a 	and	r2,r4,r7
8000d8dc:	2a40022c 	andhi	r9,r5,8
8000d8e0:	1204b03a 	or	r2,r2,r8
8000d8e4:	48000726 	beq	r9,zero,8000d904 <__adddf3+0x2c0>
8000d8e8:	1808d0fa 	srli	r4,r3,3
8000d8ec:	2200022c 	andhi	r8,r4,8
8000d8f0:	4000041e 	bne	r8,zero,8000d904 <__adddf3+0x2c0>
8000d8f4:	1804977a 	slli	r2,r3,29
8000d8f8:	31c6703a 	and	r3,r6,r7
8000d8fc:	200b883a 	mov	r5,r4
8000d900:	1884b03a 	or	r2,r3,r2
8000d904:	280a90fa 	slli	r5,r5,3
8000d908:	1008d77a 	srli	r4,r2,29
8000d90c:	101890fa 	slli	r12,r2,3
8000d910:	6825883a 	mov	r18,r13
8000d914:	2150b03a 	or	r8,r4,r5
8000d918:	0401ffc4 	movi	r16,2047
8000d91c:	01800044 	movi	r6,1
8000d920:	4004977a 	slli	r2,r8,29
8000d924:	6018d0fa 	srli	r12,r12,3
8000d928:	400ad0fa 	srli	r5,r8,3
8000d92c:	1304b03a 	or	r2,r2,r12
8000d930:	3000261e 	bne	r6,zero,8000d9cc <__adddf3+0x388>
8000d934:	01000434 	movhi	r4,16
8000d938:	213fffc4 	addi	r4,r4,-1
8000d93c:	2908703a 	and	r4,r5,r4
8000d940:	8401ffcc 	andi	r16,r16,2047
8000d944:	8020953a 	slli	r16,r16,20
8000d948:	00c00434 	movhi	r3,16
8000d94c:	94803fcc 	andi	r18,r18,255
8000d950:	902497fa 	slli	r18,r18,31
8000d954:	18ffffc4 	addi	r3,r3,-1
8000d958:	20c6703a 	and	r3,r4,r3
8000d95c:	1c06b03a 	or	r3,r3,r16
8000d960:	1c86b03a 	or	r3,r3,r18
8000d964:	dfc00417 	ldw	ra,16(sp)
8000d968:	dcc00317 	ldw	r19,12(sp)
8000d96c:	dc800217 	ldw	r18,8(sp)
8000d970:	dc400117 	ldw	r17,4(sp)
8000d974:	dc000017 	ldw	r16,0(sp)
8000d978:	dec00504 	addi	sp,sp,20
8000d97c:	f800283a 	ret
8000d980:	1a84b03a 	or	r2,r3,r10
8000d984:	10001d26 	beq	r2,zero,8000d9fc <__adddf3+0x3b8>
8000d988:	28bfffc4 	addi	r2,r5,-1
8000d98c:	1000b11e 	bne	r2,zero,8000dc54 <__adddf3+0x610>
8000d990:	62a3883a 	add	r17,r12,r10
8000d994:	8b05803a 	cmpltu	r2,r17,r12
8000d998:	40c9883a 	add	r4,r8,r3
8000d99c:	2091883a 	add	r8,r4,r2
8000d9a0:	4080202c 	andhi	r2,r8,128
8000d9a4:	10011a1e 	bne	r2,zero,8000de10 <__adddf3+0x7cc>
8000d9a8:	04000044 	movi	r16,1
8000d9ac:	888001cc 	andi	r2,r17,7
8000d9b0:	103f6d1e 	bne	r2,zero,8000d768 <_gp+0xfffdc9f4>
8000d9b4:	8822d0fa 	srli	r17,r17,3
8000d9b8:	4004977a 	slli	r2,r8,29
8000d9bc:	8181ffe0 	cmpeqi	r6,r16,2047
8000d9c0:	400ad0fa 	srli	r5,r8,3
8000d9c4:	8884b03a 	or	r2,r17,r2
8000d9c8:	303fda26 	beq	r6,zero,8000d934 <_gp+0xfffdcbc0>
8000d9cc:	2886b03a 	or	r3,r5,r2
8000d9d0:	18014826 	beq	r3,zero,8000def4 <__adddf3+0x8b0>
8000d9d4:	00c00434 	movhi	r3,16
8000d9d8:	29000234 	orhi	r4,r5,8
8000d9dc:	18ffffc4 	addi	r3,r3,-1
8000d9e0:	20c8703a 	and	r4,r4,r3
8000d9e4:	0401ffc4 	movi	r16,2047
8000d9e8:	003fd606 	br	8000d944 <_gp+0xfffdcbd0>
8000d9ec:	5825883a 	mov	r18,r11
8000d9f0:	380b883a 	mov	r5,r7
8000d9f4:	1811883a 	mov	r8,r3
8000d9f8:	5019883a 	mov	r12,r10
8000d9fc:	4004977a 	slli	r2,r8,29
8000da00:	6018d0fa 	srli	r12,r12,3
8000da04:	2821883a 	mov	r16,r5
8000da08:	2981ffe0 	cmpeqi	r6,r5,2047
8000da0c:	1304b03a 	or	r2,r2,r12
8000da10:	400ad0fa 	srli	r5,r8,3
8000da14:	003fc606 	br	8000d930 <_gp+0xfffdcbbc>
8000da18:	80007326 	beq	r16,zero,8000dbe8 <__adddf3+0x5a4>
8000da1c:	3881ffe0 	cmpeqi	r2,r7,2047
8000da20:	1000ae1e 	bne	r2,zero,8000dcdc <__adddf3+0x698>
8000da24:	014bc83a 	sub	r5,zero,r5
8000da28:	42002034 	orhi	r8,r8,128
8000da2c:	28800e48 	cmpgei	r2,r5,57
8000da30:	1000d41e 	bne	r2,zero,8000dd84 <__adddf3+0x740>
8000da34:	28800808 	cmpgei	r2,r5,32
8000da38:	1000fa1e 	bne	r2,zero,8000de24 <__adddf3+0x7e0>
8000da3c:	00800804 	movi	r2,32
8000da40:	1145c83a 	sub	r2,r2,r5
8000da44:	40a2983a 	sll	r17,r8,r2
8000da48:	6148d83a 	srl	r4,r12,r5
8000da4c:	6084983a 	sll	r2,r12,r2
8000da50:	414ad83a 	srl	r5,r8,r5
8000da54:	8922b03a 	or	r17,r17,r4
8000da58:	1004c03a 	cmpne	r2,r2,zero
8000da5c:	88a2b03a 	or	r17,r17,r2
8000da60:	1947c83a 	sub	r3,r3,r5
8000da64:	5463c83a 	sub	r17,r10,r17
8000da68:	5449803a 	cmpltu	r4,r10,r17
8000da6c:	1911c83a 	sub	r8,r3,r4
8000da70:	5825883a 	mov	r18,r11
8000da74:	3821883a 	mov	r16,r7
8000da78:	003f1906 	br	8000d6e0 <_gp+0xfffdc96c>
8000da7c:	28007c1e 	bne	r5,zero,8000dc70 <__adddf3+0x62c>
8000da80:	81400044 	addi	r5,r16,1
8000da84:	2881ffcc 	andi	r2,r5,2047
8000da88:	10800088 	cmpgei	r2,r2,2
8000da8c:	10009926 	beq	r2,zero,8000dcf4 <__adddf3+0x6b0>
8000da90:	2881ffe0 	cmpeqi	r2,r5,2047
8000da94:	10005c26 	beq	r2,zero,8000dc08 <__adddf3+0x5c4>
8000da98:	0401ffc4 	movi	r16,2047
8000da9c:	0009883a 	mov	r4,zero
8000daa0:	0005883a 	mov	r2,zero
8000daa4:	003fa706 	br	8000d944 <_gp+0xfffdcbd0>
8000daa8:	8809883a 	mov	r4,r17
8000daac:	000f97c0 	call	8000f97c <__clzsi2>
8000dab0:	10800804 	addi	r2,r2,32
8000dab4:	10fffe04 	addi	r3,r2,-8
8000dab8:	19000808 	cmpgei	r4,r3,32
8000dabc:	203f1326 	beq	r4,zero,8000d70c <_gp+0xfffdc998>
8000dac0:	14fff604 	addi	r19,r2,-40
8000dac4:	8cc8983a 	sll	r4,r17,r19
8000dac8:	0023883a 	mov	r17,zero
8000dacc:	1c3f160e 	bge	r3,r16,8000d728 <_gp+0xfffdc9b4>
8000dad0:	023fe034 	movhi	r8,65408
8000dad4:	423fffc4 	addi	r8,r8,-1
8000dad8:	80e1c83a 	sub	r16,r16,r3
8000dadc:	2210703a 	and	r8,r4,r8
8000dae0:	888001cc 	andi	r2,r17,7
8000dae4:	003f1f06 	br	8000d764 <_gp+0xfffdc9f0>
8000dae8:	1aa2b03a 	or	r17,r3,r10
8000daec:	8822c03a 	cmpne	r17,r17,zero
8000daf0:	6463c83a 	sub	r17,r12,r17
8000daf4:	6445803a 	cmpltu	r2,r12,r17
8000daf8:	4091c83a 	sub	r8,r8,r2
8000dafc:	003ef806 	br	8000d6e0 <_gp+0xfffdc96c>
8000db00:	4304b03a 	or	r2,r8,r12
8000db04:	1a8ab03a 	or	r5,r3,r10
8000db08:	80004a1e 	bne	r16,zero,8000dc34 <__adddf3+0x5f0>
8000db0c:	1000a01e 	bne	r2,zero,8000dd90 <__adddf3+0x74c>
8000db10:	2800cf26 	beq	r5,zero,8000de50 <__adddf3+0x80c>
8000db14:	5825883a 	mov	r18,r11
8000db18:	1811883a 	mov	r8,r3
8000db1c:	5019883a 	mov	r12,r10
8000db20:	000d883a 	mov	r6,zero
8000db24:	003f7e06 	br	8000d920 <_gp+0xfffdcbac>
8000db28:	2941ffe0 	cmpeqi	r5,r5,2047
8000db2c:	28004d1e 	bne	r5,zero,8000dc64 <__adddf3+0x620>
8000db30:	100b883a 	mov	r5,r2
8000db34:	003f5206 	br	8000d880 <_gp+0xfffdcb0c>
8000db38:	843ff844 	addi	r16,r16,-31
8000db3c:	40800820 	cmpeqi	r2,r8,32
8000db40:	2406d83a 	srl	r3,r4,r16
8000db44:	1000041e 	bne	r2,zero,8000db58 <__adddf3+0x514>
8000db48:	04c01004 	movi	r19,64
8000db4c:	9a11c83a 	sub	r8,r19,r8
8000db50:	2226983a 	sll	r19,r4,r8
8000db54:	8ce2b03a 	or	r17,r17,r19
8000db58:	8822c03a 	cmpne	r17,r17,zero
8000db5c:	88e2b03a 	or	r17,r17,r3
8000db60:	888001cc 	andi	r2,r17,7
8000db64:	0011883a 	mov	r8,zero
8000db68:	0021883a 	mov	r16,zero
8000db6c:	003f9006 	br	8000d9b0 <_gp+0xfffdcc3c>
8000db70:	5323c83a 	sub	r17,r10,r12
8000db74:	1a09c83a 	sub	r4,r3,r8
8000db78:	5455803a 	cmpltu	r10,r10,r17
8000db7c:	22a7c83a 	sub	r19,r4,r10
8000db80:	5825883a 	mov	r18,r11
8000db84:	003edb06 	br	8000d6f4 <_gp+0xfffdc980>
8000db88:	28800808 	cmpgei	r2,r5,32
8000db8c:	10006d1e 	bne	r2,zero,8000dd44 <__adddf3+0x700>
8000db90:	00800804 	movi	r2,32
8000db94:	1145c83a 	sub	r2,r2,r5
8000db98:	18a2983a 	sll	r17,r3,r2
8000db9c:	5148d83a 	srl	r4,r10,r5
8000dba0:	5094983a 	sll	r10,r10,r2
8000dba4:	1946d83a 	srl	r3,r3,r5
8000dba8:	8922b03a 	or	r17,r17,r4
8000dbac:	5014c03a 	cmpne	r10,r10,zero
8000dbb0:	8aa2b03a 	or	r17,r17,r10
8000dbb4:	40d1883a 	add	r8,r8,r3
8000dbb8:	003f1b06 	br	8000d828 <_gp+0xfffdcab4>
8000dbbc:	00800804 	movi	r2,32
8000dbc0:	1145c83a 	sub	r2,r2,r5
8000dbc4:	18a2983a 	sll	r17,r3,r2
8000dbc8:	5148d83a 	srl	r4,r10,r5
8000dbcc:	5094983a 	sll	r10,r10,r2
8000dbd0:	1946d83a 	srl	r3,r3,r5
8000dbd4:	8922b03a 	or	r17,r17,r4
8000dbd8:	5014c03a 	cmpne	r10,r10,zero
8000dbdc:	8aa2b03a 	or	r17,r17,r10
8000dbe0:	40d1c83a 	sub	r8,r8,r3
8000dbe4:	003fc206 	br	8000daf0 <_gp+0xfffdcd7c>
8000dbe8:	4304b03a 	or	r2,r8,r12
8000dbec:	103f7f26 	beq	r2,zero,8000d9ec <_gp+0xfffdcc78>
8000dbf0:	28bfffd8 	cmpnei	r2,r5,-1
8000dbf4:	10009926 	beq	r2,zero,8000de5c <__adddf3+0x818>
8000dbf8:	3881ffe0 	cmpeqi	r2,r7,2047
8000dbfc:	1000371e 	bne	r2,zero,8000dcdc <__adddf3+0x698>
8000dc00:	014a303a 	nor	r5,zero,r5
8000dc04:	003f8906 	br	8000da2c <_gp+0xfffdccb8>
8000dc08:	6295883a 	add	r10,r12,r10
8000dc0c:	40c9883a 	add	r4,r8,r3
8000dc10:	5311803a 	cmpltu	r8,r10,r12
8000dc14:	2209883a 	add	r4,r4,r8
8000dc18:	202297fa 	slli	r17,r4,31
8000dc1c:	5014d07a 	srli	r10,r10,1
8000dc20:	2010d07a 	srli	r8,r4,1
8000dc24:	2821883a 	mov	r16,r5
8000dc28:	8aa2b03a 	or	r17,r17,r10
8000dc2c:	888001cc 	andi	r2,r17,7
8000dc30:	003ecc06 	br	8000d764 <_gp+0xfffdc9f0>
8000dc34:	1000641e 	bne	r2,zero,8000ddc8 <__adddf3+0x784>
8000dc38:	28009426 	beq	r5,zero,8000de8c <__adddf3+0x848>
8000dc3c:	5825883a 	mov	r18,r11
8000dc40:	1811883a 	mov	r8,r3
8000dc44:	5019883a 	mov	r12,r10
8000dc48:	0401ffc4 	movi	r16,2047
8000dc4c:	01800044 	movi	r6,1
8000dc50:	003f3306 	br	8000d920 <_gp+0xfffdcbac>
8000dc54:	2941ffe0 	cmpeqi	r5,r5,2047
8000dc58:	2800021e 	bne	r5,zero,8000dc64 <__adddf3+0x620>
8000dc5c:	100b883a 	mov	r5,r2
8000dc60:	003eed06 	br	8000d818 <_gp+0xfffdcaa4>
8000dc64:	0401ffc4 	movi	r16,2047
8000dc68:	01800044 	movi	r6,1
8000dc6c:	003f2c06 	br	8000d920 <_gp+0xfffdcbac>
8000dc70:	80003f1e 	bne	r16,zero,8000dd70 <__adddf3+0x72c>
8000dc74:	4304b03a 	or	r2,r8,r12
8000dc78:	103f5d26 	beq	r2,zero,8000d9f0 <_gp+0xfffdcc7c>
8000dc7c:	28bfffd8 	cmpnei	r2,r5,-1
8000dc80:	10009126 	beq	r2,zero,8000dec8 <__adddf3+0x884>
8000dc84:	3881ffe0 	cmpeqi	r2,r7,2047
8000dc88:	1000151e 	bne	r2,zero,8000dce0 <__adddf3+0x69c>
8000dc8c:	014a303a 	nor	r5,zero,r5
8000dc90:	28800e48 	cmpgei	r2,r5,57
8000dc94:	1000601e 	bne	r2,zero,8000de18 <__adddf3+0x7d4>
8000dc98:	28800808 	cmpgei	r2,r5,32
8000dc9c:	10007f1e 	bne	r2,zero,8000de9c <__adddf3+0x858>
8000dca0:	00800804 	movi	r2,32
8000dca4:	1145c83a 	sub	r2,r2,r5
8000dca8:	40a2983a 	sll	r17,r8,r2
8000dcac:	6148d83a 	srl	r4,r12,r5
8000dcb0:	6084983a 	sll	r2,r12,r2
8000dcb4:	414ad83a 	srl	r5,r8,r5
8000dcb8:	8922b03a 	or	r17,r17,r4
8000dcbc:	1004c03a 	cmpne	r2,r2,zero
8000dcc0:	88a2b03a 	or	r17,r17,r2
8000dcc4:	1947883a 	add	r3,r3,r5
8000dcc8:	8aa3883a 	add	r17,r17,r10
8000dccc:	8a89803a 	cmpltu	r4,r17,r10
8000dcd0:	20d1883a 	add	r8,r4,r3
8000dcd4:	3821883a 	mov	r16,r7
8000dcd8:	003ed606 	br	8000d834 <_gp+0xfffdcac0>
8000dcdc:	5825883a 	mov	r18,r11
8000dce0:	0401ffc4 	movi	r16,2047
8000dce4:	1811883a 	mov	r8,r3
8000dce8:	5019883a 	mov	r12,r10
8000dcec:	01800044 	movi	r6,1
8000dcf0:	003f0b06 	br	8000d920 <_gp+0xfffdcbac>
8000dcf4:	4304b03a 	or	r2,r8,r12
8000dcf8:	803ef01e 	bne	r16,zero,8000d8bc <_gp+0xfffdcb48>
8000dcfc:	103f8626 	beq	r2,zero,8000db18 <_gp+0xfffdcda4>
8000dd00:	1a84b03a 	or	r2,r3,r10
8000dd04:	103f8626 	beq	r2,zero,8000db20 <_gp+0xfffdcdac>
8000dd08:	62a3883a 	add	r17,r12,r10
8000dd0c:	40c9883a 	add	r4,r8,r3
8000dd10:	8b05803a 	cmpltu	r2,r17,r12
8000dd14:	2091883a 	add	r8,r4,r2
8000dd18:	40c0202c 	andhi	r3,r8,128
8000dd1c:	888001cc 	andi	r2,r17,7
8000dd20:	183f2326 	beq	r3,zero,8000d9b0 <_gp+0xfffdcc3c>
8000dd24:	00ffe034 	movhi	r3,65408
8000dd28:	18ffffc4 	addi	r3,r3,-1
8000dd2c:	40d0703a 	and	r8,r8,r3
8000dd30:	04000044 	movi	r16,1
8000dd34:	003e8b06 	br	8000d764 <_gp+0xfffdc9f0>
8000dd38:	8819883a 	mov	r12,r17
8000dd3c:	8181ffe0 	cmpeqi	r6,r16,2047
8000dd40:	003ef706 	br	8000d920 <_gp+0xfffdcbac>
8000dd44:	2c7ff804 	addi	r17,r5,-32
8000dd48:	29000820 	cmpeqi	r4,r5,32
8000dd4c:	1c44d83a 	srl	r2,r3,r17
8000dd50:	2000041e 	bne	r4,zero,8000dd64 <__adddf3+0x720>
8000dd54:	01001004 	movi	r4,64
8000dd58:	214bc83a 	sub	r5,r4,r5
8000dd5c:	1946983a 	sll	r3,r3,r5
8000dd60:	50d4b03a 	or	r10,r10,r3
8000dd64:	5022c03a 	cmpne	r17,r10,zero
8000dd68:	88a2b03a 	or	r17,r17,r2
8000dd6c:	003eae06 	br	8000d828 <_gp+0xfffdcab4>
8000dd70:	3881ffe0 	cmpeqi	r2,r7,2047
8000dd74:	103fda1e 	bne	r2,zero,8000dce0 <_gp+0xfffdcf6c>
8000dd78:	014bc83a 	sub	r5,zero,r5
8000dd7c:	42002034 	orhi	r8,r8,128
8000dd80:	003fc306 	br	8000dc90 <_gp+0xfffdcf1c>
8000dd84:	4322b03a 	or	r17,r8,r12
8000dd88:	8822c03a 	cmpne	r17,r17,zero
8000dd8c:	003f3506 	br	8000da64 <_gp+0xfffdccf0>
8000dd90:	283f6326 	beq	r5,zero,8000db20 <_gp+0xfffdcdac>
8000dd94:	62a3c83a 	sub	r17,r12,r10
8000dd98:	6445803a 	cmpltu	r2,r12,r17
8000dd9c:	40c9c83a 	sub	r4,r8,r3
8000dda0:	2089c83a 	sub	r4,r4,r2
8000dda4:	2080202c 	andhi	r2,r4,128
8000dda8:	10004d26 	beq	r2,zero,8000dee0 <__adddf3+0x89c>
8000ddac:	5323c83a 	sub	r17,r10,r12
8000ddb0:	1a09c83a 	sub	r4,r3,r8
8000ddb4:	5455803a 	cmpltu	r10,r10,r17
8000ddb8:	2291c83a 	sub	r8,r4,r10
8000ddbc:	888001cc 	andi	r2,r17,7
8000ddc0:	5825883a 	mov	r18,r11
8000ddc4:	003e6706 	br	8000d764 <_gp+0xfffdc9f0>
8000ddc8:	283fa626 	beq	r5,zero,8000dc64 <_gp+0xfffdcef0>
8000ddcc:	400ad0fa 	srli	r5,r8,3
8000ddd0:	01c80034 	movhi	r7,8192
8000ddd4:	4010977a 	slli	r8,r8,29
8000ddd8:	39ffffc4 	addi	r7,r7,-1
8000dddc:	21c4703a 	and	r2,r4,r7
8000dde0:	2a40022c 	andhi	r9,r5,8
8000dde4:	1204b03a 	or	r2,r2,r8
8000dde8:	483ec626 	beq	r9,zero,8000d904 <_gp+0xfffdcb90>
8000ddec:	1808d0fa 	srli	r4,r3,3
8000ddf0:	2200022c 	andhi	r8,r4,8
8000ddf4:	403ec31e 	bne	r8,zero,8000d904 <_gp+0xfffdcb90>
8000ddf8:	1804977a 	slli	r2,r3,29
8000ddfc:	31c6703a 	and	r3,r6,r7
8000de00:	200b883a 	mov	r5,r4
8000de04:	1884b03a 	or	r2,r3,r2
8000de08:	701b883a 	mov	r13,r14
8000de0c:	003ebd06 	br	8000d904 <_gp+0xfffdcb90>
8000de10:	04000084 	movi	r16,2
8000de14:	003e8c06 	br	8000d848 <_gp+0xfffdcad4>
8000de18:	4322b03a 	or	r17,r8,r12
8000de1c:	8822c03a 	cmpne	r17,r17,zero
8000de20:	003fa906 	br	8000dcc8 <_gp+0xfffdcf54>
8000de24:	28bff804 	addi	r2,r5,-32
8000de28:	29000820 	cmpeqi	r4,r5,32
8000de2c:	4084d83a 	srl	r2,r8,r2
8000de30:	2000041e 	bne	r4,zero,8000de44 <__adddf3+0x800>
8000de34:	01001004 	movi	r4,64
8000de38:	214bc83a 	sub	r5,r4,r5
8000de3c:	4148983a 	sll	r4,r8,r5
8000de40:	6118b03a 	or	r12,r12,r4
8000de44:	6022c03a 	cmpne	r17,r12,zero
8000de48:	88a2b03a 	or	r17,r17,r2
8000de4c:	003f0506 	br	8000da64 <_gp+0xfffdccf0>
8000de50:	0005883a 	mov	r2,zero
8000de54:	0025883a 	mov	r18,zero
8000de58:	003eb606 	br	8000d934 <_gp+0xfffdcbc0>
8000de5c:	5323c83a 	sub	r17,r10,r12
8000de60:	1a09c83a 	sub	r4,r3,r8
8000de64:	5455803a 	cmpltu	r10,r10,r17
8000de68:	2291c83a 	sub	r8,r4,r10
8000de6c:	5825883a 	mov	r18,r11
8000de70:	3821883a 	mov	r16,r7
8000de74:	003e1a06 	br	8000d6e0 <_gp+0xfffdc96c>
8000de78:	1811883a 	mov	r8,r3
8000de7c:	5019883a 	mov	r12,r10
8000de80:	0401ffc4 	movi	r16,2047
8000de84:	01800044 	movi	r6,1
8000de88:	003ea506 	br	8000d920 <_gp+0xfffdcbac>
8000de8c:	0025883a 	mov	r18,zero
8000de90:	480b883a 	mov	r5,r9
8000de94:	00bfffc4 	movi	r2,-1
8000de98:	003ece06 	br	8000d9d4 <_gp+0xfffdcc60>
8000de9c:	28bff804 	addi	r2,r5,-32
8000dea0:	29000820 	cmpeqi	r4,r5,32
8000dea4:	4084d83a 	srl	r2,r8,r2
8000dea8:	2000041e 	bne	r4,zero,8000debc <__adddf3+0x878>
8000deac:	01001004 	movi	r4,64
8000deb0:	214bc83a 	sub	r5,r4,r5
8000deb4:	4148983a 	sll	r4,r8,r5
8000deb8:	6118b03a 	or	r12,r12,r4
8000debc:	6022c03a 	cmpne	r17,r12,zero
8000dec0:	88a2b03a 	or	r17,r17,r2
8000dec4:	003f8006 	br	8000dcc8 <_gp+0xfffdcf54>
8000dec8:	62a3883a 	add	r17,r12,r10
8000decc:	40c9883a 	add	r4,r8,r3
8000ded0:	8a95803a 	cmpltu	r10,r17,r10
8000ded4:	2291883a 	add	r8,r4,r10
8000ded8:	3821883a 	mov	r16,r7
8000dedc:	003e5506 	br	8000d834 <_gp+0xfffdcac0>
8000dee0:	890ab03a 	or	r5,r17,r4
8000dee4:	283fda26 	beq	r5,zero,8000de50 <_gp+0xfffdd0dc>
8000dee8:	888001cc 	andi	r2,r17,7
8000deec:	2011883a 	mov	r8,r4
8000def0:	003eaf06 	br	8000d9b0 <_gp+0xfffdcc3c>
8000def4:	0005883a 	mov	r2,zero
8000def8:	0401ffc4 	movi	r16,2047
8000defc:	0009883a 	mov	r4,zero
8000df00:	003e9006 	br	8000d944 <_gp+0xfffdcbd0>

8000df04 <__divdf3>:
8000df04:	defff104 	addi	sp,sp,-60
8000df08:	dc400615 	stw	r17,24(sp)
8000df0c:	2822d53a 	srli	r17,r5,20
8000df10:	dd000915 	stw	r20,36(sp)
8000df14:	2828d7fa 	srli	r20,r5,31
8000df18:	dc800715 	stw	r18,28(sp)
8000df1c:	04800434 	movhi	r18,16
8000df20:	dd800b15 	stw	r22,44(sp)
8000df24:	94bfffc4 	addi	r18,r18,-1
8000df28:	dfc00e15 	stw	ra,56(sp)
8000df2c:	df000d15 	stw	fp,52(sp)
8000df30:	ddc00c15 	stw	r23,48(sp)
8000df34:	dd400a15 	stw	r21,40(sp)
8000df38:	dcc00815 	stw	r19,32(sp)
8000df3c:	dc000515 	stw	r16,20(sp)
8000df40:	8c41ffcc 	andi	r17,r17,2047
8000df44:	2ca4703a 	and	r18,r5,r18
8000df48:	a5803fcc 	andi	r22,r20,255
8000df4c:	88007c26 	beq	r17,zero,8000e140 <__divdf3+0x23c>
8000df50:	8881ffe0 	cmpeqi	r2,r17,2047
8000df54:	2027883a 	mov	r19,r4
8000df58:	1000331e 	bne	r2,zero,8000e028 <__divdf3+0x124>
8000df5c:	900a90fa 	slli	r5,r18,3
8000df60:	2020d77a 	srli	r16,r4,29
8000df64:	202690fa 	slli	r19,r4,3
8000df68:	29402034 	orhi	r5,r5,128
8000df6c:	8c7f0044 	addi	r17,r17,-1023
8000df70:	8160b03a 	or	r16,r16,r5
8000df74:	002f883a 	mov	r23,zero
8000df78:	0011883a 	mov	r8,zero
8000df7c:	3806d53a 	srli	r3,r7,20
8000df80:	3838d7fa 	srli	fp,r7,31
8000df84:	01000434 	movhi	r4,16
8000df88:	213fffc4 	addi	r4,r4,-1
8000df8c:	18c1ffcc 	andi	r3,r3,2047
8000df90:	300b883a 	mov	r5,r6
8000df94:	3924703a 	and	r18,r7,r4
8000df98:	e2403fcc 	andi	r9,fp,255
8000df9c:	18008826 	beq	r3,zero,8000e1c0 <__divdf3+0x2bc>
8000dfa0:	1881ffe0 	cmpeqi	r2,r3,2047
8000dfa4:	10007f1e 	bne	r2,zero,8000e1a4 <__divdf3+0x2a0>
8000dfa8:	900890fa 	slli	r4,r18,3
8000dfac:	302ad77a 	srli	r21,r6,29
8000dfb0:	300a90fa 	slli	r5,r6,3
8000dfb4:	18ff0044 	addi	r3,r3,-1023
8000dfb8:	21002034 	orhi	r4,r4,128
8000dfbc:	88e3c83a 	sub	r17,r17,r3
8000dfc0:	a92ab03a 	or	r21,r21,r4
8000dfc4:	0007883a 	mov	r3,zero
8000dfc8:	b9000428 	cmpgeui	r4,r23,16
8000dfcc:	a724f03a 	xor	r18,r20,fp
8000dfd0:	2000b71e 	bne	r4,zero,8000e2b0 <__divdf3+0x3ac>
8000dfd4:	b80890ba 	slli	r4,r23,2
8000dfd8:	00a00074 	movhi	r2,32769
8000dfdc:	2085883a 	add	r2,r4,r2
8000dfe0:	10b7fa17 	ldw	r2,-8216(r2)
8000dfe4:	1000683a 	jmp	r2
8000dfe8:	8000e2b0 	cmpltui	zero,r16,906
8000dfec:	8000e0bc 	xorhi	zero,r16,898
8000dff0:	8000e130 	cmpltui	zero,r16,900
8000dff4:	8000e054 	ori	zero,r16,897
8000dff8:	8000e130 	cmpltui	zero,r16,900
8000dffc:	8000e26c 	andhi	zero,r16,905
8000e000:	8000e130 	cmpltui	zero,r16,900
8000e004:	8000e054 	ori	zero,r16,897
8000e008:	8000e0bc 	xorhi	zero,r16,898
8000e00c:	8000e0bc 	xorhi	zero,r16,898
8000e010:	8000e26c 	andhi	zero,r16,905
8000e014:	8000e054 	ori	zero,r16,897
8000e018:	8000e044 	addi	zero,r16,897
8000e01c:	8000e044 	addi	zero,r16,897
8000e020:	8000e044 	addi	zero,r16,897
8000e024:	8000e284 	addi	zero,r16,906
8000e028:	24a0b03a 	or	r16,r4,r18
8000e02c:	80007d1e 	bne	r16,zero,8000e224 <__divdf3+0x320>
8000e030:	05c00204 	movi	r23,8
8000e034:	0027883a 	mov	r19,zero
8000e038:	0441ffc4 	movi	r17,2047
8000e03c:	02000084 	movi	r8,2
8000e040:	003fce06 	br	8000df7c <_gp+0xfffdd208>
8000e044:	802b883a 	mov	r21,r16
8000e048:	980b883a 	mov	r5,r19
8000e04c:	b013883a 	mov	r9,r22
8000e050:	4007883a 	mov	r3,r8
8000e054:	188000a0 	cmpeqi	r2,r3,2
8000e058:	4825883a 	mov	r18,r9
8000e05c:	1000171e 	bne	r2,zero,8000e0bc <__divdf3+0x1b8>
8000e060:	188000e0 	cmpeqi	r2,r3,3
8000e064:	1001c11e 	bne	r2,zero,8000e76c <__divdf3+0x868>
8000e068:	18c00060 	cmpeqi	r3,r3,1
8000e06c:	1800301e 	bne	r3,zero,8000e130 <__divdf3+0x22c>
8000e070:	8980ffc4 	addi	r6,r17,1023
8000e074:	01802a0e 	bge	zero,r6,8000e120 <__divdf3+0x21c>
8000e078:	288001cc 	andi	r2,r5,7
8000e07c:	1001951e 	bne	r2,zero,8000e6d4 <__divdf3+0x7d0>
8000e080:	280ad0fa 	srli	r5,r5,3
8000e084:	a880402c 	andhi	r2,r21,256
8000e088:	10000426 	beq	r2,zero,8000e09c <__divdf3+0x198>
8000e08c:	00bfc034 	movhi	r2,65280
8000e090:	10bfffc4 	addi	r2,r2,-1
8000e094:	a8aa703a 	and	r21,r21,r2
8000e098:	89810004 	addi	r6,r17,1024
8000e09c:	3081ffc8 	cmpgei	r2,r6,2047
8000e0a0:	1000061e 	bne	r2,zero,8000e0bc <__divdf3+0x1b8>
8000e0a4:	a826977a 	slli	r19,r21,29
8000e0a8:	a820927a 	slli	r16,r21,9
8000e0ac:	3101ffcc 	andi	r4,r6,2047
8000e0b0:	9966b03a 	or	r19,r19,r5
8000e0b4:	8020d33a 	srli	r16,r16,12
8000e0b8:	00000306 	br	8000e0c8 <__divdf3+0x1c4>
8000e0bc:	0101ffc4 	movi	r4,2047
8000e0c0:	0021883a 	mov	r16,zero
8000e0c4:	0027883a 	mov	r19,zero
8000e0c8:	2008953a 	slli	r4,r4,20
8000e0cc:	90803fcc 	andi	r2,r18,255
8000e0d0:	00c00434 	movhi	r3,16
8000e0d4:	18ffffc4 	addi	r3,r3,-1
8000e0d8:	100497fa 	slli	r2,r2,31
8000e0dc:	80e0703a 	and	r16,r16,r3
8000e0e0:	8106b03a 	or	r3,r16,r4
8000e0e4:	1886b03a 	or	r3,r3,r2
8000e0e8:	9805883a 	mov	r2,r19
8000e0ec:	dfc00e17 	ldw	ra,56(sp)
8000e0f0:	df000d17 	ldw	fp,52(sp)
8000e0f4:	ddc00c17 	ldw	r23,48(sp)
8000e0f8:	dd800b17 	ldw	r22,44(sp)
8000e0fc:	dd400a17 	ldw	r21,40(sp)
8000e100:	dd000917 	ldw	r20,36(sp)
8000e104:	dcc00817 	ldw	r19,32(sp)
8000e108:	dc800717 	ldw	r18,28(sp)
8000e10c:	dc400617 	ldw	r17,24(sp)
8000e110:	dc000517 	ldw	r16,20(sp)
8000e114:	dec00f04 	addi	sp,sp,60
8000e118:	f800283a 	ret
8000e11c:	017fffc4 	movi	r5,-1
8000e120:	04000044 	movi	r16,1
8000e124:	81a1c83a 	sub	r16,r16,r6
8000e128:	80800e48 	cmpgei	r2,r16,57
8000e12c:	10013826 	beq	r2,zero,8000e610 <__divdf3+0x70c>
8000e130:	0009883a 	mov	r4,zero
8000e134:	0021883a 	mov	r16,zero
8000e138:	0027883a 	mov	r19,zero
8000e13c:	003fe206 	br	8000e0c8 <_gp+0xfffdd354>
8000e140:	24a0b03a 	or	r16,r4,r18
8000e144:	202b883a 	mov	r21,r4
8000e148:	80003b26 	beq	r16,zero,8000e238 <__divdf3+0x334>
8000e14c:	d9c00115 	stw	r7,4(sp)
8000e150:	d9800015 	stw	r6,0(sp)
8000e154:	90012426 	beq	r18,zero,8000e5e8 <__divdf3+0x6e4>
8000e158:	9009883a 	mov	r4,r18
8000e15c:	000f97c0 	call	8000f97c <__clzsi2>
8000e160:	d9800017 	ldw	r6,0(sp)
8000e164:	d9c00117 	ldw	r7,4(sp)
8000e168:	10fffd44 	addi	r3,r2,-11
8000e16c:	19000748 	cmpgei	r4,r3,29
8000e170:	2001191e 	bne	r4,zero,8000e5d8 <__divdf3+0x6d4>
8000e174:	04000744 	movi	r16,29
8000e178:	14fffe04 	addi	r19,r2,-8
8000e17c:	80e1c83a 	sub	r16,r16,r3
8000e180:	94ca983a 	sll	r5,r18,r19
8000e184:	ac20d83a 	srl	r16,r21,r16
8000e188:	ace6983a 	sll	r19,r21,r19
8000e18c:	8160b03a 	or	r16,r16,r5
8000e190:	047f0344 	movi	r17,-1011
8000e194:	88a3c83a 	sub	r17,r17,r2
8000e198:	002f883a 	mov	r23,zero
8000e19c:	0011883a 	mov	r8,zero
8000e1a0:	003f7606 	br	8000df7c <_gp+0xfffdd208>
8000e1a4:	91aab03a 	or	r21,r18,r6
8000e1a8:	8c7e0044 	addi	r17,r17,-2047
8000e1ac:	a800271e 	bne	r21,zero,8000e24c <__divdf3+0x348>
8000e1b0:	bdc00094 	ori	r23,r23,2
8000e1b4:	000b883a 	mov	r5,zero
8000e1b8:	00c00084 	movi	r3,2
8000e1bc:	003f8206 	br	8000dfc8 <_gp+0xfffdd254>
8000e1c0:	91aab03a 	or	r21,r18,r6
8000e1c4:	a8002526 	beq	r21,zero,8000e25c <__divdf3+0x358>
8000e1c8:	9000f926 	beq	r18,zero,8000e5b0 <__divdf3+0x6ac>
8000e1cc:	9009883a 	mov	r4,r18
8000e1d0:	d9800215 	stw	r6,8(sp)
8000e1d4:	da000115 	stw	r8,4(sp)
8000e1d8:	da400015 	stw	r9,0(sp)
8000e1dc:	000f97c0 	call	8000f97c <__clzsi2>
8000e1e0:	da400017 	ldw	r9,0(sp)
8000e1e4:	da000117 	ldw	r8,4(sp)
8000e1e8:	d9800217 	ldw	r6,8(sp)
8000e1ec:	10fffd44 	addi	r3,r2,-11
8000e1f0:	19000748 	cmpgei	r4,r3,29
8000e1f4:	2000ea1e 	bne	r4,zero,8000e5a0 <__divdf3+0x69c>
8000e1f8:	05400744 	movi	r21,29
8000e1fc:	117ffe04 	addi	r5,r2,-8
8000e200:	a8ebc83a 	sub	r21,r21,r3
8000e204:	9148983a 	sll	r4,r18,r5
8000e208:	356ad83a 	srl	r21,r6,r21
8000e20c:	314a983a 	sll	r5,r6,r5
8000e210:	a92ab03a 	or	r21,r21,r4
8000e214:	1463883a 	add	r17,r2,r17
8000e218:	8c40fcc4 	addi	r17,r17,1011
8000e21c:	0007883a 	mov	r3,zero
8000e220:	003f6906 	br	8000dfc8 <_gp+0xfffdd254>
8000e224:	9021883a 	mov	r16,r18
8000e228:	05c00304 	movi	r23,12
8000e22c:	0441ffc4 	movi	r17,2047
8000e230:	020000c4 	movi	r8,3
8000e234:	003f5106 	br	8000df7c <_gp+0xfffdd208>
8000e238:	05c00104 	movi	r23,4
8000e23c:	0027883a 	mov	r19,zero
8000e240:	0023883a 	mov	r17,zero
8000e244:	02000044 	movi	r8,1
8000e248:	003f4c06 	br	8000df7c <_gp+0xfffdd208>
8000e24c:	bdc000d4 	ori	r23,r23,3
8000e250:	902b883a 	mov	r21,r18
8000e254:	00c000c4 	movi	r3,3
8000e258:	003f5b06 	br	8000dfc8 <_gp+0xfffdd254>
8000e25c:	bdc00054 	ori	r23,r23,1
8000e260:	000b883a 	mov	r5,zero
8000e264:	00c00044 	movi	r3,1
8000e268:	003f5706 	br	8000dfc8 <_gp+0xfffdd254>
8000e26c:	04000434 	movhi	r16,16
8000e270:	0025883a 	mov	r18,zero
8000e274:	843fffc4 	addi	r16,r16,-1
8000e278:	04ffffc4 	movi	r19,-1
8000e27c:	0101ffc4 	movi	r4,2047
8000e280:	003f9106 	br	8000e0c8 <_gp+0xfffdd354>
8000e284:	8080022c 	andhi	r2,r16,8
8000e288:	1000a526 	beq	r2,zero,8000e520 <__divdf3+0x61c>
8000e28c:	a880022c 	andhi	r2,r21,8
8000e290:	1000a31e 	bne	r2,zero,8000e520 <__divdf3+0x61c>
8000e294:	00800434 	movhi	r2,16
8000e298:	ac000234 	orhi	r16,r21,8
8000e29c:	10bfffc4 	addi	r2,r2,-1
8000e2a0:	80a0703a 	and	r16,r16,r2
8000e2a4:	e025883a 	mov	r18,fp
8000e2a8:	2827883a 	mov	r19,r5
8000e2ac:	003ff306 	br	8000e27c <_gp+0xfffdd508>
8000e2b0:	ac00b536 	bltu	r21,r16,8000e588 <__divdf3+0x684>
8000e2b4:	8540b326 	beq	r16,r21,8000e584 <__divdf3+0x680>
8000e2b8:	8c7fffc4 	addi	r17,r17,-1
8000e2bc:	8029883a 	mov	r20,r16
8000e2c0:	000d883a 	mov	r6,zero
8000e2c4:	2804d63a 	srli	r2,r5,24
8000e2c8:	a820923a 	slli	r16,r21,8
8000e2cc:	a009883a 	mov	r4,r20
8000e2d0:	282e923a 	slli	r23,r5,8
8000e2d4:	1420b03a 	or	r16,r2,r16
8000e2d8:	802cd43a 	srli	r22,r16,16
8000e2dc:	d9800015 	stw	r6,0(sp)
8000e2e0:	873fffcc 	andi	fp,r16,65535
8000e2e4:	b00b883a 	mov	r5,r22
8000e2e8:	000d5880 	call	8000d588 <__udivsi3>
8000e2ec:	a009883a 	mov	r4,r20
8000e2f0:	b00b883a 	mov	r5,r22
8000e2f4:	102b883a 	mov	r21,r2
8000e2f8:	000d5ec0 	call	8000d5ec <__umodsi3>
8000e2fc:	1006943a 	slli	r3,r2,16
8000e300:	9804d43a 	srli	r2,r19,16
8000e304:	e569383a 	mul	r20,fp,r21
8000e308:	d9800017 	ldw	r6,0(sp)
8000e30c:	10c4b03a 	or	r2,r2,r3
8000e310:	1500042e 	bgeu	r2,r20,8000e324 <__divdf3+0x420>
8000e314:	1405883a 	add	r2,r2,r16
8000e318:	a8ffffc4 	addi	r3,r21,-1
8000e31c:	1400d92e 	bgeu	r2,r16,8000e684 <__divdf3+0x780>
8000e320:	182b883a 	mov	r21,r3
8000e324:	1529c83a 	sub	r20,r2,r20
8000e328:	b00b883a 	mov	r5,r22
8000e32c:	a009883a 	mov	r4,r20
8000e330:	d9800115 	stw	r6,4(sp)
8000e334:	000d5880 	call	8000d588 <__udivsi3>
8000e338:	b00b883a 	mov	r5,r22
8000e33c:	a009883a 	mov	r4,r20
8000e340:	d8800015 	stw	r2,0(sp)
8000e344:	000d5ec0 	call	8000d5ec <__umodsi3>
8000e348:	d8c00017 	ldw	r3,0(sp)
8000e34c:	1004943a 	slli	r2,r2,16
8000e350:	9cffffcc 	andi	r19,r19,65535
8000e354:	e0d1383a 	mul	r8,fp,r3
8000e358:	98a6b03a 	or	r19,r19,r2
8000e35c:	d9800117 	ldw	r6,4(sp)
8000e360:	9a00042e 	bgeu	r19,r8,8000e374 <__divdf3+0x470>
8000e364:	9c27883a 	add	r19,r19,r16
8000e368:	18bfffc4 	addi	r2,r3,-1
8000e36c:	9c00c12e 	bgeu	r19,r16,8000e674 <__divdf3+0x770>
8000e370:	1007883a 	mov	r3,r2
8000e374:	a82a943a 	slli	r21,r21,16
8000e378:	b828d43a 	srli	r20,r23,16
8000e37c:	b9ffffcc 	andi	r7,r23,65535
8000e380:	a8eab03a 	or	r21,r21,r3
8000e384:	a804d43a 	srli	r2,r21,16
8000e388:	a93fffcc 	andi	r4,r21,65535
8000e38c:	21cb383a 	mul	r5,r4,r7
8000e390:	11d3383a 	mul	r9,r2,r7
8000e394:	a109383a 	mul	r4,r20,r4
8000e398:	2806d43a 	srli	r3,r5,16
8000e39c:	9a27c83a 	sub	r19,r19,r8
8000e3a0:	2249883a 	add	r4,r4,r9
8000e3a4:	1907883a 	add	r3,r3,r4
8000e3a8:	1509383a 	mul	r4,r2,r20
8000e3ac:	1a40022e 	bgeu	r3,r9,8000e3b8 <__divdf3+0x4b4>
8000e3b0:	00800074 	movhi	r2,1
8000e3b4:	2089883a 	add	r4,r4,r2
8000e3b8:	1804d43a 	srli	r2,r3,16
8000e3bc:	1806943a 	slli	r3,r3,16
8000e3c0:	297fffcc 	andi	r5,r5,65535
8000e3c4:	1105883a 	add	r2,r2,r4
8000e3c8:	1947883a 	add	r3,r3,r5
8000e3cc:	98806236 	bltu	r19,r2,8000e558 <__divdf3+0x654>
8000e3d0:	9880b026 	beq	r19,r2,8000e694 <__divdf3+0x790>
8000e3d4:	9885c83a 	sub	r2,r19,r2
8000e3d8:	30c7c83a 	sub	r3,r6,r3
8000e3dc:	30e7803a 	cmpltu	r19,r6,r3
8000e3e0:	d9c00115 	stw	r7,4(sp)
8000e3e4:	d8c00015 	stw	r3,0(sp)
8000e3e8:	14e7c83a 	sub	r19,r2,r19
8000e3ec:	8980ffc4 	addi	r6,r17,1023
8000e3f0:	84c0af26 	beq	r16,r19,8000e6b0 <__divdf3+0x7ac>
8000e3f4:	9809883a 	mov	r4,r19
8000e3f8:	b00b883a 	mov	r5,r22
8000e3fc:	d9800315 	stw	r6,12(sp)
8000e400:	000d5880 	call	8000d588 <__udivsi3>
8000e404:	9809883a 	mov	r4,r19
8000e408:	b00b883a 	mov	r5,r22
8000e40c:	d8800215 	stw	r2,8(sp)
8000e410:	000d5ec0 	call	8000d5ec <__umodsi3>
8000e414:	d8c00017 	ldw	r3,0(sp)
8000e418:	da000217 	ldw	r8,8(sp)
8000e41c:	1008943a 	slli	r4,r2,16
8000e420:	1804d43a 	srli	r2,r3,16
8000e424:	e227383a 	mul	r19,fp,r8
8000e428:	d9800317 	ldw	r6,12(sp)
8000e42c:	1104b03a 	or	r2,r2,r4
8000e430:	d9c00117 	ldw	r7,4(sp)
8000e434:	14c0062e 	bgeu	r2,r19,8000e450 <__divdf3+0x54c>
8000e438:	1405883a 	add	r2,r2,r16
8000e43c:	413fffc4 	addi	r4,r8,-1
8000e440:	1400a236 	bltu	r2,r16,8000e6cc <__divdf3+0x7c8>
8000e444:	14c0a12e 	bgeu	r2,r19,8000e6cc <__divdf3+0x7c8>
8000e448:	423fff84 	addi	r8,r8,-2
8000e44c:	1405883a 	add	r2,r2,r16
8000e450:	14e7c83a 	sub	r19,r2,r19
8000e454:	b00b883a 	mov	r5,r22
8000e458:	9809883a 	mov	r4,r19
8000e45c:	d9800415 	stw	r6,16(sp)
8000e460:	d8c00315 	stw	r3,12(sp)
8000e464:	d9c00215 	stw	r7,8(sp)
8000e468:	da000115 	stw	r8,4(sp)
8000e46c:	000d5880 	call	8000d588 <__udivsi3>
8000e470:	b00b883a 	mov	r5,r22
8000e474:	9809883a 	mov	r4,r19
8000e478:	d8800015 	stw	r2,0(sp)
8000e47c:	000d5ec0 	call	8000d5ec <__umodsi3>
8000e480:	da400017 	ldw	r9,0(sp)
8000e484:	d8c00317 	ldw	r3,12(sp)
8000e488:	1004943a 	slli	r2,r2,16
8000e48c:	e279383a 	mul	fp,fp,r9
8000e490:	18ffffcc 	andi	r3,r3,65535
8000e494:	1886b03a 	or	r3,r3,r2
8000e498:	da000117 	ldw	r8,4(sp)
8000e49c:	d9c00217 	ldw	r7,8(sp)
8000e4a0:	d9800417 	ldw	r6,16(sp)
8000e4a4:	1f00062e 	bgeu	r3,fp,8000e4c0 <__divdf3+0x5bc>
8000e4a8:	1c07883a 	add	r3,r3,r16
8000e4ac:	48bfffc4 	addi	r2,r9,-1
8000e4b0:	1c008436 	bltu	r3,r16,8000e6c4 <__divdf3+0x7c0>
8000e4b4:	1f00832e 	bgeu	r3,fp,8000e6c4 <__divdf3+0x7c0>
8000e4b8:	4a7fff84 	addi	r9,r9,-2
8000e4bc:	1c07883a 	add	r3,r3,r16
8000e4c0:	400a943a 	slli	r5,r8,16
8000e4c4:	1f07c83a 	sub	r3,r3,fp
8000e4c8:	2a4ab03a 	or	r5,r5,r9
8000e4cc:	2812d43a 	srli	r9,r5,16
8000e4d0:	293fffcc 	andi	r4,r5,65535
8000e4d4:	3911383a 	mul	r8,r7,r4
8000e4d8:	a109383a 	mul	r4,r20,r4
8000e4dc:	49cf383a 	mul	r7,r9,r7
8000e4e0:	4004d43a 	srli	r2,r8,16
8000e4e4:	a269383a 	mul	r20,r20,r9
8000e4e8:	21c9883a 	add	r4,r4,r7
8000e4ec:	1105883a 	add	r2,r2,r4
8000e4f0:	11c0022e 	bgeu	r2,r7,8000e4fc <__divdf3+0x5f8>
8000e4f4:	01000074 	movhi	r4,1
8000e4f8:	a129883a 	add	r20,r20,r4
8000e4fc:	1008d43a 	srli	r4,r2,16
8000e500:	1004943a 	slli	r2,r2,16
8000e504:	423fffcc 	andi	r8,r8,65535
8000e508:	2529883a 	add	r20,r4,r20
8000e50c:	1205883a 	add	r2,r2,r8
8000e510:	1d000a36 	bltu	r3,r20,8000e53c <__divdf3+0x638>
8000e514:	1d000826 	beq	r3,r20,8000e538 <__divdf3+0x634>
8000e518:	29400054 	ori	r5,r5,1
8000e51c:	003ed506 	br	8000e074 <_gp+0xfffdd300>
8000e520:	00800434 	movhi	r2,16
8000e524:	84000234 	orhi	r16,r16,8
8000e528:	10bfffc4 	addi	r2,r2,-1
8000e52c:	80a0703a 	and	r16,r16,r2
8000e530:	a025883a 	mov	r18,r20
8000e534:	003f5106 	br	8000e27c <_gp+0xfffdd508>
8000e538:	103ece26 	beq	r2,zero,8000e074 <_gp+0xfffdd300>
8000e53c:	80c7883a 	add	r3,r16,r3
8000e540:	293fffc4 	addi	r4,r5,-1
8000e544:	1c005636 	bltu	r3,r16,8000e6a0 <__divdf3+0x79c>
8000e548:	1d006f36 	bltu	r3,r20,8000e708 <__divdf3+0x804>
8000e54c:	1d009c26 	beq	r3,r20,8000e7c0 <__divdf3+0x8bc>
8000e550:	200b883a 	mov	r5,r4
8000e554:	003ff006 	br	8000e518 <_gp+0xfffdd7a4>
8000e558:	35cd883a 	add	r6,r6,r23
8000e55c:	35c9803a 	cmpltu	r4,r6,r23
8000e560:	2409883a 	add	r4,r4,r16
8000e564:	24e7883a 	add	r19,r4,r19
8000e568:	a93fffc4 	addi	r4,r21,-1
8000e56c:	84c0232e 	bgeu	r16,r19,8000e5fc <__divdf3+0x6f8>
8000e570:	98805f36 	bltu	r19,r2,8000e6f0 <__divdf3+0x7ec>
8000e574:	14c08f26 	beq	r2,r19,8000e7b4 <__divdf3+0x8b0>
8000e578:	9885c83a 	sub	r2,r19,r2
8000e57c:	202b883a 	mov	r21,r4
8000e580:	003f9506 	br	8000e3d8 <_gp+0xfffdd664>
8000e584:	997f4c36 	bltu	r19,r5,8000e2b8 <_gp+0xfffdd544>
8000e588:	800697fa 	slli	r3,r16,31
8000e58c:	9804d07a 	srli	r2,r19,1
8000e590:	980c97fa 	slli	r6,r19,31
8000e594:	8028d07a 	srli	r20,r16,1
8000e598:	18a6b03a 	or	r19,r3,r2
8000e59c:	003f4906 	br	8000e2c4 <_gp+0xfffdd550>
8000e5a0:	157ff604 	addi	r21,r2,-40
8000e5a4:	356a983a 	sll	r21,r6,r21
8000e5a8:	000b883a 	mov	r5,zero
8000e5ac:	003f1906 	br	8000e214 <_gp+0xfffdd4a0>
8000e5b0:	3009883a 	mov	r4,r6
8000e5b4:	da000215 	stw	r8,8(sp)
8000e5b8:	da400115 	stw	r9,4(sp)
8000e5bc:	d9800015 	stw	r6,0(sp)
8000e5c0:	000f97c0 	call	8000f97c <__clzsi2>
8000e5c4:	10800804 	addi	r2,r2,32
8000e5c8:	da000217 	ldw	r8,8(sp)
8000e5cc:	da400117 	ldw	r9,4(sp)
8000e5d0:	d9800017 	ldw	r6,0(sp)
8000e5d4:	003f0506 	br	8000e1ec <_gp+0xfffdd478>
8000e5d8:	143ff604 	addi	r16,r2,-40
8000e5dc:	ac20983a 	sll	r16,r21,r16
8000e5e0:	0027883a 	mov	r19,zero
8000e5e4:	003eea06 	br	8000e190 <_gp+0xfffdd41c>
8000e5e8:	000f97c0 	call	8000f97c <__clzsi2>
8000e5ec:	10800804 	addi	r2,r2,32
8000e5f0:	d9c00117 	ldw	r7,4(sp)
8000e5f4:	d9800017 	ldw	r6,0(sp)
8000e5f8:	003edb06 	br	8000e168 <_gp+0xfffdd3f4>
8000e5fc:	84ffde1e 	bne	r16,r19,8000e578 <_gp+0xfffdd804>
8000e600:	35ffdb2e 	bgeu	r6,r23,8000e570 <_gp+0xfffdd7fc>
8000e604:	8085c83a 	sub	r2,r16,r2
8000e608:	202b883a 	mov	r21,r4
8000e60c:	003f7206 	br	8000e3d8 <_gp+0xfffdd664>
8000e610:	80800808 	cmpgei	r2,r16,32
8000e614:	1000441e 	bne	r2,zero,8000e728 <__divdf3+0x824>
8000e618:	8c410784 	addi	r17,r17,1054
8000e61c:	2c06d83a 	srl	r3,r5,r16
8000e620:	ac44983a 	sll	r2,r21,r17
8000e624:	2c4a983a 	sll	r5,r5,r17
8000e628:	ac2ad83a 	srl	r21,r21,r16
8000e62c:	10c4b03a 	or	r2,r2,r3
8000e630:	280ac03a 	cmpne	r5,r5,zero
8000e634:	1144b03a 	or	r2,r2,r5
8000e638:	10c001cc 	andi	r3,r2,7
8000e63c:	18000726 	beq	r3,zero,8000e65c <__divdf3+0x758>
8000e640:	10c003cc 	andi	r3,r2,15
8000e644:	18c00120 	cmpeqi	r3,r3,4
8000e648:	1800041e 	bne	r3,zero,8000e65c <__divdf3+0x758>
8000e64c:	100b883a 	mov	r5,r2
8000e650:	28800104 	addi	r2,r5,4
8000e654:	114b803a 	cmpltu	r5,r2,r5
8000e658:	a96b883a 	add	r21,r21,r5
8000e65c:	a8c0202c 	andhi	r3,r21,128
8000e660:	18004f26 	beq	r3,zero,8000e7a0 <__divdf3+0x89c>
8000e664:	01000044 	movi	r4,1
8000e668:	0021883a 	mov	r16,zero
8000e66c:	0027883a 	mov	r19,zero
8000e670:	003e9506 	br	8000e0c8 <_gp+0xfffdd354>
8000e674:	9a3f3e2e 	bgeu	r19,r8,8000e370 <_gp+0xfffdd5fc>
8000e678:	18ffff84 	addi	r3,r3,-2
8000e67c:	9c27883a 	add	r19,r19,r16
8000e680:	003f3c06 	br	8000e374 <_gp+0xfffdd600>
8000e684:	153f262e 	bgeu	r2,r20,8000e320 <_gp+0xfffdd5ac>
8000e688:	ad7fff84 	addi	r21,r21,-2
8000e68c:	1405883a 	add	r2,r2,r16
8000e690:	003f2406 	br	8000e324 <_gp+0xfffdd5b0>
8000e694:	30ffb036 	bltu	r6,r3,8000e558 <_gp+0xfffdd7e4>
8000e698:	0005883a 	mov	r2,zero
8000e69c:	003f4e06 	br	8000e3d8 <_gp+0xfffdd664>
8000e6a0:	200b883a 	mov	r5,r4
8000e6a4:	1d3f9c1e 	bne	r3,r20,8000e518 <_gp+0xfffdd7a4>
8000e6a8:	15ff9b1e 	bne	r2,r23,8000e518 <_gp+0xfffdd7a4>
8000e6ac:	003e7106 	br	8000e074 <_gp+0xfffdd300>
8000e6b0:	01be9a0e 	bge	zero,r6,8000e11c <_gp+0xfffdd3a8>
8000e6b4:	000b883a 	mov	r5,zero
8000e6b8:	00800044 	movi	r2,1
8000e6bc:	a8ab883a 	add	r21,r21,r2
8000e6c0:	003e7006 	br	8000e084 <_gp+0xfffdd310>
8000e6c4:	1013883a 	mov	r9,r2
8000e6c8:	003f7d06 	br	8000e4c0 <_gp+0xfffdd74c>
8000e6cc:	2011883a 	mov	r8,r4
8000e6d0:	003f5f06 	br	8000e450 <_gp+0xfffdd6dc>
8000e6d4:	288003cc 	andi	r2,r5,15
8000e6d8:	10800118 	cmpnei	r2,r2,4
8000e6dc:	103e6826 	beq	r2,zero,8000e080 <_gp+0xfffdd30c>
8000e6e0:	2cc00104 	addi	r19,r5,4
8000e6e4:	9945803a 	cmpltu	r2,r19,r5
8000e6e8:	980ad0fa 	srli	r5,r19,3
8000e6ec:	003ff306 	br	8000e6bc <_gp+0xfffdd948>
8000e6f0:	35cd883a 	add	r6,r6,r23
8000e6f4:	35c9803a 	cmpltu	r4,r6,r23
8000e6f8:	2409883a 	add	r4,r4,r16
8000e6fc:	24e7883a 	add	r19,r4,r19
8000e700:	ad7fff84 	addi	r21,r21,-2
8000e704:	003f3306 	br	8000e3d4 <_gp+0xfffdd660>
8000e708:	bdc9883a 	add	r4,r23,r23
8000e70c:	25ef803a 	cmpltu	r23,r4,r23
8000e710:	bc21883a 	add	r16,r23,r16
8000e714:	1c07883a 	add	r3,r3,r16
8000e718:	297fff84 	addi	r5,r5,-2
8000e71c:	202f883a 	mov	r23,r4
8000e720:	1d3fe126 	beq	r3,r20,8000e6a8 <_gp+0xfffdd934>
8000e724:	003f7c06 	br	8000e518 <_gp+0xfffdd7a4>
8000e728:	013ff844 	movi	r4,-31
8000e72c:	2189c83a 	sub	r4,r4,r6
8000e730:	84000820 	cmpeqi	r16,r16,32
8000e734:	a908d83a 	srl	r4,r21,r4
8000e738:	8000031e 	bne	r16,zero,8000e748 <__divdf3+0x844>
8000e73c:	8c010f84 	addi	r16,r17,1086
8000e740:	ac20983a 	sll	r16,r21,r16
8000e744:	2c0ab03a 	or	r5,r5,r16
8000e748:	280ac03a 	cmpne	r5,r5,zero
8000e74c:	290ab03a 	or	r5,r5,r4
8000e750:	2d4001cc 	andi	r21,r5,7
8000e754:	a8000b1e 	bne	r21,zero,8000e784 <__divdf3+0x880>
8000e758:	0021883a 	mov	r16,zero
8000e75c:	280ad0fa 	srli	r5,r5,3
8000e760:	0009883a 	mov	r4,zero
8000e764:	2d66b03a 	or	r19,r5,r21
8000e768:	003e5706 	br	8000e0c8 <_gp+0xfffdd354>
8000e76c:	00800434 	movhi	r2,16
8000e770:	ac000234 	orhi	r16,r21,8
8000e774:	10bfffc4 	addi	r2,r2,-1
8000e778:	80a0703a 	and	r16,r16,r2
8000e77c:	2827883a 	mov	r19,r5
8000e780:	003ebe06 	br	8000e27c <_gp+0xfffdd508>
8000e784:	288003cc 	andi	r2,r5,15
8000e788:	10800118 	cmpnei	r2,r2,4
8000e78c:	10000226 	beq	r2,zero,8000e798 <__divdf3+0x894>
8000e790:	002b883a 	mov	r21,zero
8000e794:	003fae06 	br	8000e650 <_gp+0xfffdd8dc>
8000e798:	2805883a 	mov	r2,r5
8000e79c:	002b883a 	mov	r21,zero
8000e7a0:	a820927a 	slli	r16,r21,9
8000e7a4:	100b883a 	mov	r5,r2
8000e7a8:	a82a977a 	slli	r21,r21,29
8000e7ac:	8020d33a 	srli	r16,r16,12
8000e7b0:	003fea06 	br	8000e75c <_gp+0xfffdd9e8>
8000e7b4:	30ffce36 	bltu	r6,r3,8000e6f0 <_gp+0xfffdd97c>
8000e7b8:	202b883a 	mov	r21,r4
8000e7bc:	003fb606 	br	8000e698 <_gp+0xfffdd924>
8000e7c0:	b8bfd136 	bltu	r23,r2,8000e708 <_gp+0xfffdd994>
8000e7c4:	200b883a 	mov	r5,r4
8000e7c8:	15ff531e 	bne	r2,r23,8000e518 <_gp+0xfffdd7a4>
8000e7cc:	003e2906 	br	8000e074 <_gp+0xfffdd300>

8000e7d0 <__gedf2>:
8000e7d0:	2810d53a 	srli	r8,r5,20
8000e7d4:	3806d53a 	srli	r3,r7,20
8000e7d8:	00800434 	movhi	r2,16
8000e7dc:	4201ffcc 	andi	r8,r8,2047
8000e7e0:	10bfffc4 	addi	r2,r2,-1
8000e7e4:	4241ffd8 	cmpnei	r9,r8,2047
8000e7e8:	2894703a 	and	r10,r5,r2
8000e7ec:	18c1ffcc 	andi	r3,r3,2047
8000e7f0:	3884703a 	and	r2,r7,r2
8000e7f4:	280ad7fa 	srli	r5,r5,31
8000e7f8:	380ed7fa 	srli	r7,r7,31
8000e7fc:	48000e26 	beq	r9,zero,8000e838 <__gedf2+0x68>
8000e800:	1a41ffd8 	cmpnei	r9,r3,2047
8000e804:	48000826 	beq	r9,zero,8000e828 <__gedf2+0x58>
8000e808:	40000f1e 	bne	r8,zero,8000e848 <__gedf2+0x78>
8000e80c:	5112b03a 	or	r9,r10,r4
8000e810:	1800131e 	bne	r3,zero,8000e860 <__gedf2+0x90>
8000e814:	1196b03a 	or	r11,r2,r6
8000e818:	5800111e 	bne	r11,zero,8000e860 <__gedf2+0x90>
8000e81c:	48000d1e 	bne	r9,zero,8000e854 <__gedf2+0x84>
8000e820:	0005883a 	mov	r2,zero
8000e824:	f800283a 	ret
8000e828:	1192b03a 	or	r9,r2,r6
8000e82c:	483ff626 	beq	r9,zero,8000e808 <_gp+0xfffdda94>
8000e830:	00bfff84 	movi	r2,-2
8000e834:	f800283a 	ret
8000e838:	5112b03a 	or	r9,r10,r4
8000e83c:	483ffc1e 	bne	r9,zero,8000e830 <_gp+0xfffddabc>
8000e840:	1a41ffd8 	cmpnei	r9,r3,2047
8000e844:	48001226 	beq	r9,zero,8000e890 <__gedf2+0xc0>
8000e848:	1800131e 	bne	r3,zero,8000e898 <__gedf2+0xc8>
8000e84c:	1192b03a 	or	r9,r2,r6
8000e850:	4800111e 	bne	r9,zero,8000e898 <__gedf2+0xc8>
8000e854:	00800044 	movi	r2,1
8000e858:	2800081e 	bne	r5,zero,8000e87c <__gedf2+0xac>
8000e85c:	f800283a 	ret
8000e860:	48000826 	beq	r9,zero,8000e884 <__gedf2+0xb4>
8000e864:	29fffb1e 	bne	r5,r7,8000e854 <_gp+0xfffddae0>
8000e868:	40c00316 	blt	r8,r3,8000e878 <__gedf2+0xa8>
8000e86c:	12bff936 	bltu	r2,r10,8000e854 <_gp+0xfffddae0>
8000e870:	50800c26 	beq	r10,r2,8000e8a4 <__gedf2+0xd4>
8000e874:	50bfea2e 	bgeu	r10,r2,8000e820 <_gp+0xfffddaac>
8000e878:	2800031e 	bne	r5,zero,8000e888 <__gedf2+0xb8>
8000e87c:	00bfffc4 	movi	r2,-1
8000e880:	f800283a 	ret
8000e884:	383ffd26 	beq	r7,zero,8000e87c <_gp+0xfffddb08>
8000e888:	00800044 	movi	r2,1
8000e88c:	f800283a 	ret
8000e890:	1192b03a 	or	r9,r2,r6
8000e894:	483fe61e 	bne	r9,zero,8000e830 <_gp+0xfffddabc>
8000e898:	29ffee1e 	bne	r5,r7,8000e854 <_gp+0xfffddae0>
8000e89c:	1a3fed16 	blt	r3,r8,8000e854 <_gp+0xfffddae0>
8000e8a0:	003ff106 	br	8000e868 <_gp+0xfffddaf4>
8000e8a4:	313feb36 	bltu	r6,r4,8000e854 <_gp+0xfffddae0>
8000e8a8:	21bff336 	bltu	r4,r6,8000e878 <_gp+0xfffddb04>
8000e8ac:	003fdc06 	br	8000e820 <_gp+0xfffddaac>

8000e8b0 <__muldf3>:
8000e8b0:	defff404 	addi	sp,sp,-48
8000e8b4:	dc400315 	stw	r17,12(sp)
8000e8b8:	2822d53a 	srli	r17,r5,20
8000e8bc:	dd000615 	stw	r20,24(sp)
8000e8c0:	2828d7fa 	srli	r20,r5,31
8000e8c4:	dc800415 	stw	r18,16(sp)
8000e8c8:	04800434 	movhi	r18,16
8000e8cc:	dd400715 	stw	r21,28(sp)
8000e8d0:	94bfffc4 	addi	r18,r18,-1
8000e8d4:	dfc00b15 	stw	ra,44(sp)
8000e8d8:	df000a15 	stw	fp,40(sp)
8000e8dc:	ddc00915 	stw	r23,36(sp)
8000e8e0:	dd800815 	stw	r22,32(sp)
8000e8e4:	dcc00515 	stw	r19,20(sp)
8000e8e8:	dc000215 	stw	r16,8(sp)
8000e8ec:	8c41ffcc 	andi	r17,r17,2047
8000e8f0:	2ca4703a 	and	r18,r5,r18
8000e8f4:	a5403fcc 	andi	r21,r20,255
8000e8f8:	88006226 	beq	r17,zero,8000ea84 <__muldf3+0x1d4>
8000e8fc:	8881ffe0 	cmpeqi	r2,r17,2047
8000e900:	2027883a 	mov	r19,r4
8000e904:	1000361e 	bne	r2,zero,8000e9e0 <__muldf3+0x130>
8000e908:	900a90fa 	slli	r5,r18,3
8000e90c:	2020d77a 	srli	r16,r4,29
8000e910:	202690fa 	slli	r19,r4,3
8000e914:	29402034 	orhi	r5,r5,128
8000e918:	8c7f0044 	addi	r17,r17,-1023
8000e91c:	8160b03a 	or	r16,r16,r5
8000e920:	0025883a 	mov	r18,zero
8000e924:	002f883a 	mov	r23,zero
8000e928:	3804d53a 	srli	r2,r7,20
8000e92c:	382cd7fa 	srli	r22,r7,31
8000e930:	01000434 	movhi	r4,16
8000e934:	213fffc4 	addi	r4,r4,-1
8000e938:	1081ffcc 	andi	r2,r2,2047
8000e93c:	3011883a 	mov	r8,r6
8000e940:	390e703a 	and	r7,r7,r4
8000e944:	b7003fcc 	andi	fp,r22,255
8000e948:	10006e26 	beq	r2,zero,8000eb04 <__muldf3+0x254>
8000e94c:	10c1ffe0 	cmpeqi	r3,r2,2047
8000e950:	1800651e 	bne	r3,zero,8000eae8 <__muldf3+0x238>
8000e954:	380890fa 	slli	r4,r7,3
8000e958:	3006d77a 	srli	r3,r6,29
8000e95c:	301090fa 	slli	r8,r6,3
8000e960:	10bf0044 	addi	r2,r2,-1023
8000e964:	21002034 	orhi	r4,r4,128
8000e968:	1908b03a 	or	r4,r3,r4
8000e96c:	88a3883a 	add	r17,r17,r2
8000e970:	0015883a 	mov	r10,zero
8000e974:	a584f03a 	xor	r2,r20,r22
8000e978:	91800428 	cmpgeui	r6,r18,16
8000e97c:	100f883a 	mov	r7,r2
8000e980:	8a400044 	addi	r9,r17,1
8000e984:	10803fcc 	andi	r2,r2,255
8000e988:	3000791e 	bne	r6,zero,8000eb70 <__muldf3+0x2c0>
8000e98c:	900a90ba 	slli	r5,r18,2
8000e990:	00e00074 	movhi	r3,32769
8000e994:	28c7883a 	add	r3,r5,r3
8000e998:	18fa6817 	ldw	r3,-5728(r3)
8000e99c:	1800683a 	jmp	r3
8000e9a0:	8000eb70 	cmpltui	zero,r16,941
8000e9a4:	8000ea08 	cmpgei	zero,r16,936
8000e9a8:	8000ea08 	cmpgei	zero,r16,936
8000e9ac:	8000ede4 	muli	zero,r16,951
8000e9b0:	8000e9fc 	xorhi	zero,r16,935
8000e9b4:	8000e9fc 	xorhi	zero,r16,935
8000e9b8:	8000edb8 	rdprs	zero,r16,950
8000e9bc:	8000ede4 	muli	zero,r16,951
8000e9c0:	8000e9fc 	xorhi	zero,r16,935
8000e9c4:	8000edb8 	rdprs	zero,r16,950
8000e9c8:	8000e9fc 	xorhi	zero,r16,935
8000e9cc:	8000ede4 	muli	zero,r16,951
8000e9d0:	8000edd0 	cmplti	zero,r16,951
8000e9d4:	8000edd0 	cmplti	zero,r16,951
8000e9d8:	8000edd0 	cmplti	zero,r16,951
8000e9dc:	8000edec 	andhi	zero,r16,951
8000e9e0:	9120b03a 	or	r16,r18,r4
8000e9e4:	8000e71e 	bne	r16,zero,8000ed84 <__muldf3+0x4d4>
8000e9e8:	04800204 	movi	r18,8
8000e9ec:	0027883a 	mov	r19,zero
8000e9f0:	0441ffc4 	movi	r17,2047
8000e9f4:	05c00084 	movi	r23,2
8000e9f8:	003fcb06 	br	8000e928 <_gp+0xfffddbb4>
8000e9fc:	8009883a 	mov	r4,r16
8000ea00:	9811883a 	mov	r8,r19
8000ea04:	b815883a 	mov	r10,r23
8000ea08:	50c000a0 	cmpeqi	r3,r10,2
8000ea0c:	100f883a 	mov	r7,r2
8000ea10:	1800531e 	bne	r3,zero,8000eb60 <__muldf3+0x2b0>
8000ea14:	508000e0 	cmpeqi	r2,r10,3
8000ea18:	1001561e 	bne	r2,zero,8000ef74 <__muldf3+0x6c4>
8000ea1c:	50800060 	cmpeqi	r2,r10,1
8000ea20:	1000b926 	beq	r2,zero,8000ed08 <__muldf3+0x458>
8000ea24:	0007883a 	mov	r3,zero
8000ea28:	0021883a 	mov	r16,zero
8000ea2c:	0027883a 	mov	r19,zero
8000ea30:	38803fcc 	andi	r2,r7,255
8000ea34:	01000434 	movhi	r4,16
8000ea38:	1806953a 	slli	r3,r3,20
8000ea3c:	213fffc4 	addi	r4,r4,-1
8000ea40:	100497fa 	slli	r2,r2,31
8000ea44:	8120703a 	and	r16,r16,r4
8000ea48:	80c6b03a 	or	r3,r16,r3
8000ea4c:	1886b03a 	or	r3,r3,r2
8000ea50:	9805883a 	mov	r2,r19
8000ea54:	dfc00b17 	ldw	ra,44(sp)
8000ea58:	df000a17 	ldw	fp,40(sp)
8000ea5c:	ddc00917 	ldw	r23,36(sp)
8000ea60:	dd800817 	ldw	r22,32(sp)
8000ea64:	dd400717 	ldw	r21,28(sp)
8000ea68:	dd000617 	ldw	r20,24(sp)
8000ea6c:	dcc00517 	ldw	r19,20(sp)
8000ea70:	dc800417 	ldw	r18,16(sp)
8000ea74:	dc400317 	ldw	r17,12(sp)
8000ea78:	dc000217 	ldw	r16,8(sp)
8000ea7c:	dec00c04 	addi	sp,sp,48
8000ea80:	f800283a 	ret
8000ea84:	9120b03a 	or	r16,r18,r4
8000ea88:	202d883a 	mov	r22,r4
8000ea8c:	8000b826 	beq	r16,zero,8000ed70 <__muldf3+0x4c0>
8000ea90:	d9c00115 	stw	r7,4(sp)
8000ea94:	d9800015 	stw	r6,0(sp)
8000ea98:	90010626 	beq	r18,zero,8000eeb4 <__muldf3+0x604>
8000ea9c:	9009883a 	mov	r4,r18
8000eaa0:	000f97c0 	call	8000f97c <__clzsi2>
8000eaa4:	d9800017 	ldw	r6,0(sp)
8000eaa8:	d9c00117 	ldw	r7,4(sp)
8000eaac:	10fffd44 	addi	r3,r2,-11
8000eab0:	19000748 	cmpgei	r4,r3,29
8000eab4:	2000fb1e 	bne	r4,zero,8000eea4 <__muldf3+0x5f4>
8000eab8:	04000744 	movi	r16,29
8000eabc:	14fffe04 	addi	r19,r2,-8
8000eac0:	80e1c83a 	sub	r16,r16,r3
8000eac4:	94ca983a 	sll	r5,r18,r19
8000eac8:	b420d83a 	srl	r16,r22,r16
8000eacc:	b4e6983a 	sll	r19,r22,r19
8000ead0:	8160b03a 	or	r16,r16,r5
8000ead4:	047f0344 	movi	r17,-1011
8000ead8:	88a3c83a 	sub	r17,r17,r2
8000eadc:	0025883a 	mov	r18,zero
8000eae0:	002f883a 	mov	r23,zero
8000eae4:	003f9006 	br	8000e928 <_gp+0xfffddbb4>
8000eae8:	31c8b03a 	or	r4,r6,r7
8000eaec:	8c41ffc4 	addi	r17,r17,2047
8000eaf0:	2000ad1e 	bne	r4,zero,8000eda8 <__muldf3+0x4f8>
8000eaf4:	94800094 	ori	r18,r18,2
8000eaf8:	0011883a 	mov	r8,zero
8000eafc:	02800084 	movi	r10,2
8000eb00:	003f9c06 	br	8000e974 <_gp+0xfffddc00>
8000eb04:	31c8b03a 	or	r4,r6,r7
8000eb08:	2000a326 	beq	r4,zero,8000ed98 <__muldf3+0x4e8>
8000eb0c:	3800f226 	beq	r7,zero,8000eed8 <__muldf3+0x628>
8000eb10:	3809883a 	mov	r4,r7
8000eb14:	d9800115 	stw	r6,4(sp)
8000eb18:	d9c00015 	stw	r7,0(sp)
8000eb1c:	000f97c0 	call	8000f97c <__clzsi2>
8000eb20:	d9c00017 	ldw	r7,0(sp)
8000eb24:	d9800117 	ldw	r6,4(sp)
8000eb28:	113ffd44 	addi	r4,r2,-11
8000eb2c:	20c00748 	cmpgei	r3,r4,29
8000eb30:	1800e51e 	bne	r3,zero,8000eec8 <__muldf3+0x618>
8000eb34:	00c00744 	movi	r3,29
8000eb38:	123ffe04 	addi	r8,r2,-8
8000eb3c:	1907c83a 	sub	r3,r3,r4
8000eb40:	30c6d83a 	srl	r3,r6,r3
8000eb44:	3a08983a 	sll	r4,r7,r8
8000eb48:	3210983a 	sll	r8,r6,r8
8000eb4c:	1908b03a 	or	r4,r3,r4
8000eb50:	88a3c83a 	sub	r17,r17,r2
8000eb54:	8c7f0344 	addi	r17,r17,-1011
8000eb58:	0015883a 	mov	r10,zero
8000eb5c:	003f8506 	br	8000e974 <_gp+0xfffddc00>
8000eb60:	00c1ffc4 	movi	r3,2047
8000eb64:	0021883a 	mov	r16,zero
8000eb68:	0027883a 	mov	r19,zero
8000eb6c:	003fb006 	br	8000ea30 <_gp+0xfffddcbc>
8000eb70:	9806d43a 	srli	r3,r19,16
8000eb74:	4014d43a 	srli	r10,r8,16
8000eb78:	9cffffcc 	andi	r19,r19,65535
8000eb7c:	423fffcc 	andi	r8,r8,65535
8000eb80:	44cb383a 	mul	r5,r8,r19
8000eb84:	1a0d383a 	mul	r6,r3,r8
8000eb88:	54c5383a 	mul	r2,r10,r19
8000eb8c:	2818d43a 	srli	r12,r5,16
8000eb90:	1a9d383a 	mul	r14,r3,r10
8000eb94:	1185883a 	add	r2,r2,r6
8000eb98:	6099883a 	add	r12,r12,r2
8000eb9c:	6180022e 	bgeu	r12,r6,8000eba8 <__muldf3+0x2f8>
8000eba0:	00800074 	movhi	r2,1
8000eba4:	709d883a 	add	r14,r14,r2
8000eba8:	201ed43a 	srli	r15,r4,16
8000ebac:	213fffcc 	andi	r4,r4,65535
8000ebb0:	24cd383a 	mul	r6,r4,r19
8000ebb4:	191b383a 	mul	r13,r3,r4
8000ebb8:	7ce7383a 	mul	r19,r15,r19
8000ebbc:	3016d43a 	srli	r11,r6,16
8000ebc0:	6004943a 	slli	r2,r12,16
8000ebc4:	9b67883a 	add	r19,r19,r13
8000ebc8:	297fffcc 	andi	r5,r5,65535
8000ebcc:	5ce7883a 	add	r19,r11,r19
8000ebd0:	6018d43a 	srli	r12,r12,16
8000ebd4:	1157883a 	add	r11,r2,r5
8000ebd8:	1bc7383a 	mul	r3,r3,r15
8000ebdc:	9b40022e 	bgeu	r19,r13,8000ebe8 <__muldf3+0x338>
8000ebe0:	00800074 	movhi	r2,1
8000ebe4:	1887883a 	add	r3,r3,r2
8000ebe8:	8028d43a 	srli	r20,r16,16
8000ebec:	80bfffcc 	andi	r2,r16,65535
8000ebf0:	40ab383a 	mul	r21,r8,r2
8000ebf4:	508b383a 	mul	r5,r10,r2
8000ebf8:	a211383a 	mul	r8,r20,r8
8000ebfc:	981a943a 	slli	r13,r19,16
8000ec00:	a824d43a 	srli	r18,r21,16
8000ec04:	9826d43a 	srli	r19,r19,16
8000ec08:	31bfffcc 	andi	r6,r6,65535
8000ec0c:	2a0b883a 	add	r5,r5,r8
8000ec10:	699b883a 	add	r13,r13,r6
8000ec14:	914b883a 	add	r5,r18,r5
8000ec18:	98e7883a 	add	r19,r19,r3
8000ec1c:	634d883a 	add	r6,r12,r13
8000ec20:	5515383a 	mul	r10,r10,r20
8000ec24:	2a00022e 	bgeu	r5,r8,8000ec30 <__muldf3+0x380>
8000ec28:	00c00074 	movhi	r3,1
8000ec2c:	50d5883a 	add	r10,r10,r3
8000ec30:	2091383a 	mul	r8,r4,r2
8000ec34:	a121383a 	mul	r16,r20,r4
8000ec38:	7885383a 	mul	r2,r15,r2
8000ec3c:	4018d43a 	srli	r12,r8,16
8000ec40:	2824d43a 	srli	r18,r5,16
8000ec44:	280a943a 	slli	r5,r5,16
8000ec48:	1405883a 	add	r2,r2,r16
8000ec4c:	ad7fffcc 	andi	r21,r21,65535
8000ec50:	6085883a 	add	r2,r12,r2
8000ec54:	92a5883a 	add	r18,r18,r10
8000ec58:	2d4b883a 	add	r5,r5,r21
8000ec5c:	7d09383a 	mul	r4,r15,r20
8000ec60:	1400022e 	bgeu	r2,r16,8000ec6c <__muldf3+0x3bc>
8000ec64:	00c00074 	movhi	r3,1
8000ec68:	20c9883a 	add	r4,r4,r3
8000ec6c:	1006943a 	slli	r3,r2,16
8000ec70:	423fffcc 	andi	r8,r8,65535
8000ec74:	338d883a 	add	r6,r6,r14
8000ec78:	1a07883a 	add	r3,r3,r8
8000ec7c:	335b803a 	cmpltu	r13,r6,r13
8000ec80:	1cc7883a 	add	r3,r3,r19
8000ec84:	314d883a 	add	r6,r6,r5
8000ec88:	1b5d883a 	add	r14,r3,r13
8000ec8c:	314b803a 	cmpltu	r5,r6,r5
8000ec90:	7495883a 	add	r10,r14,r18
8000ec94:	1018d43a 	srli	r12,r2,16
8000ec98:	5151883a 	add	r8,r10,r5
8000ec9c:	1cc7803a 	cmpltu	r3,r3,r19
8000eca0:	7361803a 	cmpltu	r16,r14,r13
8000eca4:	1c20b03a 	or	r16,r3,r16
8000eca8:	414b803a 	cmpltu	r5,r8,r5
8000ecac:	5495803a 	cmpltu	r10,r10,r18
8000ecb0:	8321883a 	add	r16,r16,r12
8000ecb4:	514ab03a 	or	r5,r10,r5
8000ecb8:	8161883a 	add	r16,r16,r5
8000ecbc:	8121883a 	add	r16,r16,r4
8000ecc0:	3004927a 	slli	r2,r6,9
8000ecc4:	4008d5fa 	srli	r4,r8,23
8000ecc8:	8020927a 	slli	r16,r16,9
8000eccc:	300cd5fa 	srli	r6,r6,23
8000ecd0:	12c4b03a 	or	r2,r2,r11
8000ecd4:	4010927a 	slli	r8,r8,9
8000ecd8:	8108b03a 	or	r4,r16,r4
8000ecdc:	1004c03a 	cmpne	r2,r2,zero
8000ece0:	1184b03a 	or	r2,r2,r6
8000ece4:	20c0402c 	andhi	r3,r4,256
8000ece8:	1210b03a 	or	r8,r2,r8
8000ecec:	18008226 	beq	r3,zero,8000eef8 <__muldf3+0x648>
8000ecf0:	4006d07a 	srli	r3,r8,1
8000ecf4:	200a97fa 	slli	r5,r4,31
8000ecf8:	4080004c 	andi	r2,r8,1
8000ecfc:	2008d07a 	srli	r4,r4,1
8000ed00:	1884b03a 	or	r2,r3,r2
8000ed04:	1150b03a 	or	r8,r2,r5
8000ed08:	48c0ffc4 	addi	r3,r9,1023
8000ed0c:	00c0420e 	bge	zero,r3,8000ee18 <__muldf3+0x568>
8000ed10:	408001cc 	andi	r2,r8,7
8000ed14:	10000726 	beq	r2,zero,8000ed34 <__muldf3+0x484>
8000ed18:	408003cc 	andi	r2,r8,15
8000ed1c:	10800120 	cmpeqi	r2,r2,4
8000ed20:	1000041e 	bne	r2,zero,8000ed34 <__muldf3+0x484>
8000ed24:	41400104 	addi	r5,r8,4
8000ed28:	2a05803a 	cmpltu	r2,r5,r8
8000ed2c:	2089883a 	add	r4,r4,r2
8000ed30:	2811883a 	mov	r8,r5
8000ed34:	2080402c 	andhi	r2,r4,256
8000ed38:	10000426 	beq	r2,zero,8000ed4c <__muldf3+0x49c>
8000ed3c:	00bfc034 	movhi	r2,65280
8000ed40:	10bfffc4 	addi	r2,r2,-1
8000ed44:	2088703a 	and	r4,r4,r2
8000ed48:	48c10004 	addi	r3,r9,1024
8000ed4c:	1881ffc8 	cmpgei	r2,r3,2047
8000ed50:	103f831e 	bne	r2,zero,8000eb60 <_gp+0xfffdddec>
8000ed54:	4004d0fa 	srli	r2,r8,3
8000ed58:	2026977a 	slli	r19,r4,29
8000ed5c:	2020927a 	slli	r16,r4,9
8000ed60:	18c1ffcc 	andi	r3,r3,2047
8000ed64:	98a6b03a 	or	r19,r19,r2
8000ed68:	8020d33a 	srli	r16,r16,12
8000ed6c:	003f3006 	br	8000ea30 <_gp+0xfffddcbc>
8000ed70:	04800104 	movi	r18,4
8000ed74:	0027883a 	mov	r19,zero
8000ed78:	0023883a 	mov	r17,zero
8000ed7c:	05c00044 	movi	r23,1
8000ed80:	003ee906 	br	8000e928 <_gp+0xfffddbb4>
8000ed84:	9021883a 	mov	r16,r18
8000ed88:	0441ffc4 	movi	r17,2047
8000ed8c:	04800304 	movi	r18,12
8000ed90:	05c000c4 	movi	r23,3
8000ed94:	003ee406 	br	8000e928 <_gp+0xfffddbb4>
8000ed98:	94800054 	ori	r18,r18,1
8000ed9c:	0011883a 	mov	r8,zero
8000eda0:	02800044 	movi	r10,1
8000eda4:	003ef306 	br	8000e974 <_gp+0xfffddc00>
8000eda8:	948000d4 	ori	r18,r18,3
8000edac:	3809883a 	mov	r4,r7
8000edb0:	028000c4 	movi	r10,3
8000edb4:	003eef06 	br	8000e974 <_gp+0xfffddc00>
8000edb8:	04000434 	movhi	r16,16
8000edbc:	000f883a 	mov	r7,zero
8000edc0:	843fffc4 	addi	r16,r16,-1
8000edc4:	04ffffc4 	movi	r19,-1
8000edc8:	00c1ffc4 	movi	r3,2047
8000edcc:	003f1806 	br	8000ea30 <_gp+0xfffddcbc>
8000edd0:	8009883a 	mov	r4,r16
8000edd4:	9811883a 	mov	r8,r19
8000edd8:	a805883a 	mov	r2,r21
8000eddc:	b815883a 	mov	r10,r23
8000ede0:	003f0906 	br	8000ea08 <_gp+0xfffddc94>
8000ede4:	e005883a 	mov	r2,fp
8000ede8:	003f0706 	br	8000ea08 <_gp+0xfffddc94>
8000edec:	8080022c 	andhi	r2,r16,8
8000edf0:	10002626 	beq	r2,zero,8000ee8c <__muldf3+0x5dc>
8000edf4:	2080022c 	andhi	r2,r4,8
8000edf8:	1000241e 	bne	r2,zero,8000ee8c <__muldf3+0x5dc>
8000edfc:	00800434 	movhi	r2,16
8000ee00:	24000234 	orhi	r16,r4,8
8000ee04:	10bfffc4 	addi	r2,r2,-1
8000ee08:	80a0703a 	and	r16,r16,r2
8000ee0c:	b00f883a 	mov	r7,r22
8000ee10:	4027883a 	mov	r19,r8
8000ee14:	003fec06 	br	8000edc8 <_gp+0xfffde054>
8000ee18:	04000044 	movi	r16,1
8000ee1c:	80e1c83a 	sub	r16,r16,r3
8000ee20:	80800e48 	cmpgei	r2,r16,57
8000ee24:	103eff1e 	bne	r2,zero,8000ea24 <_gp+0xfffddcb0>
8000ee28:	80800808 	cmpgei	r2,r16,32
8000ee2c:	1000341e 	bne	r2,zero,8000ef00 <__muldf3+0x650>
8000ee30:	4a410784 	addi	r9,r9,1054
8000ee34:	2246983a 	sll	r3,r4,r9
8000ee38:	4404d83a 	srl	r2,r8,r16
8000ee3c:	4252983a 	sll	r9,r8,r9
8000ee40:	2408d83a 	srl	r4,r4,r16
8000ee44:	1886b03a 	or	r3,r3,r2
8000ee48:	4812c03a 	cmpne	r9,r9,zero
8000ee4c:	1a46b03a 	or	r3,r3,r9
8000ee50:	188001cc 	andi	r2,r3,7
8000ee54:	10000726 	beq	r2,zero,8000ee74 <__muldf3+0x5c4>
8000ee58:	188003cc 	andi	r2,r3,15
8000ee5c:	10800120 	cmpeqi	r2,r2,4
8000ee60:	1000041e 	bne	r2,zero,8000ee74 <__muldf3+0x5c4>
8000ee64:	1805883a 	mov	r2,r3
8000ee68:	10c00104 	addi	r3,r2,4
8000ee6c:	1885803a 	cmpltu	r2,r3,r2
8000ee70:	2089883a 	add	r4,r4,r2
8000ee74:	2080202c 	andhi	r2,r4,128
8000ee78:	10003426 	beq	r2,zero,8000ef4c <__muldf3+0x69c>
8000ee7c:	00c00044 	movi	r3,1
8000ee80:	0021883a 	mov	r16,zero
8000ee84:	0027883a 	mov	r19,zero
8000ee88:	003ee906 	br	8000ea30 <_gp+0xfffddcbc>
8000ee8c:	00800434 	movhi	r2,16
8000ee90:	84000234 	orhi	r16,r16,8
8000ee94:	10bfffc4 	addi	r2,r2,-1
8000ee98:	80a0703a 	and	r16,r16,r2
8000ee9c:	a00f883a 	mov	r7,r20
8000eea0:	003fc906 	br	8000edc8 <_gp+0xfffde054>
8000eea4:	143ff604 	addi	r16,r2,-40
8000eea8:	b420983a 	sll	r16,r22,r16
8000eeac:	0027883a 	mov	r19,zero
8000eeb0:	003f0806 	br	8000ead4 <_gp+0xfffddd60>
8000eeb4:	000f97c0 	call	8000f97c <__clzsi2>
8000eeb8:	10800804 	addi	r2,r2,32
8000eebc:	d9c00117 	ldw	r7,4(sp)
8000eec0:	d9800017 	ldw	r6,0(sp)
8000eec4:	003ef906 	br	8000eaac <_gp+0xfffddd38>
8000eec8:	113ff604 	addi	r4,r2,-40
8000eecc:	3108983a 	sll	r4,r6,r4
8000eed0:	0011883a 	mov	r8,zero
8000eed4:	003f1e06 	br	8000eb50 <_gp+0xfffddddc>
8000eed8:	3009883a 	mov	r4,r6
8000eedc:	d9c00115 	stw	r7,4(sp)
8000eee0:	d9800015 	stw	r6,0(sp)
8000eee4:	000f97c0 	call	8000f97c <__clzsi2>
8000eee8:	10800804 	addi	r2,r2,32
8000eeec:	d9c00117 	ldw	r7,4(sp)
8000eef0:	d9800017 	ldw	r6,0(sp)
8000eef4:	003f0c06 	br	8000eb28 <_gp+0xfffdddb4>
8000eef8:	8813883a 	mov	r9,r17
8000eefc:	003f8206 	br	8000ed08 <_gp+0xfffddf94>
8000ef00:	00bff844 	movi	r2,-31
8000ef04:	10c7c83a 	sub	r3,r2,r3
8000ef08:	84000820 	cmpeqi	r16,r16,32
8000ef0c:	20c6d83a 	srl	r3,r4,r3
8000ef10:	8000031e 	bne	r16,zero,8000ef20 <__muldf3+0x670>
8000ef14:	4a410f84 	addi	r9,r9,1086
8000ef18:	2260983a 	sll	r16,r4,r9
8000ef1c:	4410b03a 	or	r8,r8,r16
8000ef20:	4004c03a 	cmpne	r2,r8,zero
8000ef24:	10c4b03a 	or	r2,r2,r3
8000ef28:	110001cc 	andi	r4,r2,7
8000ef2c:	20000c1e 	bne	r4,zero,8000ef60 <__muldf3+0x6b0>
8000ef30:	0021883a 	mov	r16,zero
8000ef34:	1004d0fa 	srli	r2,r2,3
8000ef38:	0007883a 	mov	r3,zero
8000ef3c:	1126b03a 	or	r19,r2,r4
8000ef40:	003ebb06 	br	8000ea30 <_gp+0xfffddcbc>
8000ef44:	1007883a 	mov	r3,r2
8000ef48:	0009883a 	mov	r4,zero
8000ef4c:	2020927a 	slli	r16,r4,9
8000ef50:	1805883a 	mov	r2,r3
8000ef54:	2008977a 	slli	r4,r4,29
8000ef58:	8020d33a 	srli	r16,r16,12
8000ef5c:	003ff506 	br	8000ef34 <_gp+0xfffde1c0>
8000ef60:	10c003cc 	andi	r3,r2,15
8000ef64:	18c00118 	cmpnei	r3,r3,4
8000ef68:	183ff626 	beq	r3,zero,8000ef44 <_gp+0xfffde1d0>
8000ef6c:	0009883a 	mov	r4,zero
8000ef70:	003fbd06 	br	8000ee68 <_gp+0xfffde0f4>
8000ef74:	00800434 	movhi	r2,16
8000ef78:	24000234 	orhi	r16,r4,8
8000ef7c:	10bfffc4 	addi	r2,r2,-1
8000ef80:	80a0703a 	and	r16,r16,r2
8000ef84:	4027883a 	mov	r19,r8
8000ef88:	003f8f06 	br	8000edc8 <_gp+0xfffde054>

8000ef8c <__subdf3>:
8000ef8c:	00800434 	movhi	r2,16
8000ef90:	10bfffc4 	addi	r2,r2,-1
8000ef94:	3814d53a 	srli	r10,r7,20
8000ef98:	defffb04 	addi	sp,sp,-20
8000ef9c:	2890703a 	and	r8,r5,r2
8000efa0:	3884703a 	and	r2,r7,r2
8000efa4:	2816d7fa 	srli	r11,r5,31
8000efa8:	400690fa 	slli	r3,r8,3
8000efac:	dcc00315 	stw	r19,12(sp)
8000efb0:	280ad53a 	srli	r5,r5,20
8000efb4:	2010d77a 	srli	r8,r4,29
8000efb8:	100490fa 	slli	r2,r2,3
8000efbc:	3026d77a 	srli	r19,r6,29
8000efc0:	5281ffcc 	andi	r10,r10,2047
8000efc4:	dc800215 	stw	r18,8(sp)
8000efc8:	dc000015 	stw	r16,0(sp)
8000efcc:	dfc00415 	stw	ra,16(sp)
8000efd0:	dc400115 	stw	r17,4(sp)
8000efd4:	5301ffd8 	cmpnei	r12,r10,2047
8000efd8:	5825883a 	mov	r18,r11
8000efdc:	2c01ffcc 	andi	r16,r5,2047
8000efe0:	5ac03fcc 	andi	r11,r11,255
8000efe4:	40d0b03a 	or	r8,r8,r3
8000efe8:	201290fa 	slli	r9,r4,3
8000efec:	380ed7fa 	srli	r7,r7,31
8000eff0:	9884b03a 	or	r2,r19,r2
8000eff4:	301a90fa 	slli	r13,r6,3
8000eff8:	60007326 	beq	r12,zero,8000f1c8 <__subdf3+0x23c>
8000effc:	39c0005c 	xori	r7,r7,1
8000f000:	8287c83a 	sub	r3,r16,r10
8000f004:	3ac05426 	beq	r7,r11,8000f158 <__subdf3+0x1cc>
8000f008:	00c0420e 	bge	zero,r3,8000f114 <__subdf3+0x188>
8000f00c:	5000721e 	bne	r10,zero,8000f1d8 <__subdf3+0x24c>
8000f010:	1348b03a 	or	r4,r2,r13
8000f014:	2000d126 	beq	r4,zero,8000f35c <__subdf3+0x3d0>
8000f018:	193fffc4 	addi	r4,r3,-1
8000f01c:	20011a1e 	bne	r4,zero,8000f488 <__subdf3+0x4fc>
8000f020:	4b63c83a 	sub	r17,r9,r13
8000f024:	4089c83a 	sub	r4,r8,r2
8000f028:	4c51803a 	cmpltu	r8,r9,r17
8000f02c:	2211c83a 	sub	r8,r4,r8
8000f030:	04000044 	movi	r16,1
8000f034:	4080202c 	andhi	r2,r8,128
8000f038:	1000b526 	beq	r2,zero,8000f310 <__subdf3+0x384>
8000f03c:	04c02034 	movhi	r19,128
8000f040:	9cffffc4 	addi	r19,r19,-1
8000f044:	44e6703a 	and	r19,r8,r19
8000f048:	9800ef26 	beq	r19,zero,8000f408 <__subdf3+0x47c>
8000f04c:	9809883a 	mov	r4,r19
8000f050:	000f97c0 	call	8000f97c <__clzsi2>
8000f054:	10fffe04 	addi	r3,r2,-8
8000f058:	19000808 	cmpgei	r4,r3,32
8000f05c:	2000f01e 	bne	r4,zero,8000f420 <__subdf3+0x494>
8000f060:	01000804 	movi	r4,32
8000f064:	20c9c83a 	sub	r4,r4,r3
8000f068:	8908d83a 	srl	r4,r17,r4
8000f06c:	98e6983a 	sll	r19,r19,r3
8000f070:	88e2983a 	sll	r17,r17,r3
8000f074:	24c8b03a 	or	r4,r4,r19
8000f078:	1c00ed16 	blt	r3,r16,8000f430 <__subdf3+0x4a4>
8000f07c:	1c21c83a 	sub	r16,r3,r16
8000f080:	82000044 	addi	r8,r16,1
8000f084:	40800808 	cmpgei	r2,r8,32
8000f088:	1001031e 	bne	r2,zero,8000f498 <__subdf3+0x50c>
8000f08c:	00800804 	movi	r2,32
8000f090:	1205c83a 	sub	r2,r2,r8
8000f094:	8a06d83a 	srl	r3,r17,r8
8000f098:	88a2983a 	sll	r17,r17,r2
8000f09c:	2084983a 	sll	r2,r4,r2
8000f0a0:	2210d83a 	srl	r8,r4,r8
8000f0a4:	8822c03a 	cmpne	r17,r17,zero
8000f0a8:	10c4b03a 	or	r2,r2,r3
8000f0ac:	1462b03a 	or	r17,r2,r17
8000f0b0:	888001cc 	andi	r2,r17,7
8000f0b4:	0021883a 	mov	r16,zero
8000f0b8:	10000726 	beq	r2,zero,8000f0d8 <__subdf3+0x14c>
8000f0bc:	888003cc 	andi	r2,r17,15
8000f0c0:	10800120 	cmpeqi	r2,r2,4
8000f0c4:	1000041e 	bne	r2,zero,8000f0d8 <__subdf3+0x14c>
8000f0c8:	88c00104 	addi	r3,r17,4
8000f0cc:	1c63803a 	cmpltu	r17,r3,r17
8000f0d0:	4451883a 	add	r8,r8,r17
8000f0d4:	1823883a 	mov	r17,r3
8000f0d8:	4080202c 	andhi	r2,r8,128
8000f0dc:	10016d26 	beq	r2,zero,8000f694 <__subdf3+0x708>
8000f0e0:	84000044 	addi	r16,r16,1
8000f0e4:	8081ffe0 	cmpeqi	r2,r16,2047
8000f0e8:	8401ffcc 	andi	r16,r16,2047
8000f0ec:	1000c21e 	bne	r2,zero,8000f3f8 <__subdf3+0x46c>
8000f0f0:	013fe034 	movhi	r4,65408
8000f0f4:	213fffc4 	addi	r4,r4,-1
8000f0f8:	4108703a 	and	r4,r8,r4
8000f0fc:	2004977a 	slli	r2,r4,29
8000f100:	8822d0fa 	srli	r17,r17,3
8000f104:	2008927a 	slli	r4,r4,9
8000f108:	1444b03a 	or	r2,r2,r17
8000f10c:	2008d33a 	srli	r4,r4,12
8000f110:	00006506 	br	8000f2a8 <__subdf3+0x31c>
8000f114:	1800981e 	bne	r3,zero,8000f378 <__subdf3+0x3ec>
8000f118:	80c00044 	addi	r3,r16,1
8000f11c:	18c1ffcc 	andi	r3,r3,2047
8000f120:	18c00088 	cmpgei	r3,r3,2
8000f124:	1800ce26 	beq	r3,zero,8000f460 <__subdf3+0x4d4>
8000f128:	4b63c83a 	sub	r17,r9,r13
8000f12c:	40a7c83a 	sub	r19,r8,r2
8000f130:	4c49803a 	cmpltu	r4,r9,r17
8000f134:	9927c83a 	sub	r19,r19,r4
8000f138:	98c0202c 	andhi	r3,r19,128
8000f13c:	1800e41e 	bne	r3,zero,8000f4d0 <__subdf3+0x544>
8000f140:	8ccab03a 	or	r5,r17,r19
8000f144:	283fc01e 	bne	r5,zero,8000f048 <_gp+0xfffde2d4>
8000f148:	0005883a 	mov	r2,zero
8000f14c:	0025883a 	mov	r18,zero
8000f150:	0021883a 	mov	r16,zero
8000f154:	00005006 	br	8000f298 <__subdf3+0x30c>
8000f158:	00c0a00e 	bge	zero,r3,8000f3dc <__subdf3+0x450>
8000f15c:	50006126 	beq	r10,zero,8000f2e4 <__subdf3+0x358>
8000f160:	8101ffe0 	cmpeqi	r4,r16,2047
8000f164:	2000471e 	bne	r4,zero,8000f284 <__subdf3+0x2f8>
8000f168:	10802034 	orhi	r2,r2,128
8000f16c:	19000e48 	cmpgei	r4,r3,57
8000f170:	2000dd26 	beq	r4,zero,8000f4e8 <__subdf3+0x55c>
8000f174:	1344b03a 	or	r2,r2,r13
8000f178:	1022c03a 	cmpne	r17,r2,zero
8000f17c:	8a63883a 	add	r17,r17,r9
8000f180:	8a53803a 	cmpltu	r9,r17,r9
8000f184:	4251883a 	add	r8,r8,r9
8000f188:	4080202c 	andhi	r2,r8,128
8000f18c:	10006026 	beq	r2,zero,8000f310 <__subdf3+0x384>
8000f190:	84000044 	addi	r16,r16,1
8000f194:	8101ffe0 	cmpeqi	r4,r16,2047
8000f198:	2000971e 	bne	r4,zero,8000f3f8 <__subdf3+0x46c>
8000f19c:	013fe034 	movhi	r4,65408
8000f1a0:	213fffc4 	addi	r4,r4,-1
8000f1a4:	8804d07a 	srli	r2,r17,1
8000f1a8:	4108703a 	and	r4,r8,r4
8000f1ac:	200697fa 	slli	r3,r4,31
8000f1b0:	8c40004c 	andi	r17,r17,1
8000f1b4:	1462b03a 	or	r17,r2,r17
8000f1b8:	1c62b03a 	or	r17,r3,r17
8000f1bc:	2010d07a 	srli	r8,r4,1
8000f1c0:	888001cc 	andi	r2,r17,7
8000f1c4:	003fbc06 	br	8000f0b8 <_gp+0xfffde344>
8000f1c8:	1346b03a 	or	r3,r2,r13
8000f1cc:	183f8b26 	beq	r3,zero,8000effc <_gp+0xfffde288>
8000f1d0:	39c03fcc 	andi	r7,r7,255
8000f1d4:	003f8a06 	br	8000f000 <_gp+0xfffde28c>
8000f1d8:	8101ffe0 	cmpeqi	r4,r16,2047
8000f1dc:	2000291e 	bne	r4,zero,8000f284 <__subdf3+0x2f8>
8000f1e0:	10802034 	orhi	r2,r2,128
8000f1e4:	19000e48 	cmpgei	r4,r3,57
8000f1e8:	2000971e 	bne	r4,zero,8000f448 <__subdf3+0x4bc>
8000f1ec:	19000808 	cmpgei	r4,r3,32
8000f1f0:	2000ca26 	beq	r4,zero,8000f51c <__subdf3+0x590>
8000f1f4:	1c7ff804 	addi	r17,r3,-32
8000f1f8:	19000820 	cmpeqi	r4,r3,32
8000f1fc:	144ad83a 	srl	r5,r2,r17
8000f200:	2000041e 	bne	r4,zero,8000f214 <__subdf3+0x288>
8000f204:	01001004 	movi	r4,64
8000f208:	20c7c83a 	sub	r3,r4,r3
8000f20c:	10c4983a 	sll	r2,r2,r3
8000f210:	689ab03a 	or	r13,r13,r2
8000f214:	6822c03a 	cmpne	r17,r13,zero
8000f218:	8962b03a 	or	r17,r17,r5
8000f21c:	00008c06 	br	8000f450 <__subdf3+0x4c4>
8000f220:	18016b26 	beq	r3,zero,8000f7d0 <__subdf3+0x844>
8000f224:	135ab03a 	or	r13,r2,r13
8000f228:	6800e626 	beq	r13,zero,8000f5c4 <__subdf3+0x638>
8000f22c:	4006d0fa 	srli	r3,r8,3
8000f230:	01480034 	movhi	r5,8192
8000f234:	4010977a 	slli	r8,r8,29
8000f238:	297fffc4 	addi	r5,r5,-1
8000f23c:	2152703a 	and	r9,r4,r5
8000f240:	19c0022c 	andhi	r7,r3,8
8000f244:	4a12b03a 	or	r9,r9,r8
8000f248:	38000726 	beq	r7,zero,8000f268 <__subdf3+0x2dc>
8000f24c:	1008d0fa 	srli	r4,r2,3
8000f250:	21c0022c 	andhi	r7,r4,8
8000f254:	3800041e 	bne	r7,zero,8000f268 <__subdf3+0x2dc>
8000f258:	1012977a 	slli	r9,r2,29
8000f25c:	3144703a 	and	r2,r6,r5
8000f260:	2007883a 	mov	r3,r4
8000f264:	1252b03a 	or	r9,r2,r9
8000f268:	4808d77a 	srli	r4,r9,29
8000f26c:	180690fa 	slli	r3,r3,3
8000f270:	481290fa 	slli	r9,r9,3
8000f274:	5c80004c 	andi	r18,r11,1
8000f278:	20d0b03a 	or	r8,r4,r3
8000f27c:	0401ffc4 	movi	r16,2047
8000f280:	01000044 	movi	r4,1
8000f284:	4822d0fa 	srli	r17,r9,3
8000f288:	4004977a 	slli	r2,r8,29
8000f28c:	400ad0fa 	srli	r5,r8,3
8000f290:	8884b03a 	or	r2,r17,r2
8000f294:	2000261e 	bne	r4,zero,8000f330 <__subdf3+0x3a4>
8000f298:	01000434 	movhi	r4,16
8000f29c:	213fffc4 	addi	r4,r4,-1
8000f2a0:	2908703a 	and	r4,r5,r4
8000f2a4:	8401ffcc 	andi	r16,r16,2047
8000f2a8:	8020953a 	slli	r16,r16,20
8000f2ac:	00c00434 	movhi	r3,16
8000f2b0:	94803fcc 	andi	r18,r18,255
8000f2b4:	902497fa 	slli	r18,r18,31
8000f2b8:	18ffffc4 	addi	r3,r3,-1
8000f2bc:	20c6703a 	and	r3,r4,r3
8000f2c0:	1c06b03a 	or	r3,r3,r16
8000f2c4:	1c86b03a 	or	r3,r3,r18
8000f2c8:	dfc00417 	ldw	ra,16(sp)
8000f2cc:	dcc00317 	ldw	r19,12(sp)
8000f2d0:	dc800217 	ldw	r18,8(sp)
8000f2d4:	dc400117 	ldw	r17,4(sp)
8000f2d8:	dc000017 	ldw	r16,0(sp)
8000f2dc:	dec00504 	addi	sp,sp,20
8000f2e0:	f800283a 	ret
8000f2e4:	1348b03a 	or	r4,r2,r13
8000f2e8:	20001c26 	beq	r4,zero,8000f35c <__subdf3+0x3d0>
8000f2ec:	193fffc4 	addi	r4,r3,-1
8000f2f0:	2000b01e 	bne	r4,zero,8000f5b4 <__subdf3+0x628>
8000f2f4:	4b63883a 	add	r17,r9,r13
8000f2f8:	4089883a 	add	r4,r8,r2
8000f2fc:	8a51803a 	cmpltu	r8,r17,r9
8000f300:	2211883a 	add	r8,r4,r8
8000f304:	4080202c 	andhi	r2,r8,128
8000f308:	1001181e 	bne	r2,zero,8000f76c <__subdf3+0x7e0>
8000f30c:	04000044 	movi	r16,1
8000f310:	888001cc 	andi	r2,r17,7
8000f314:	103f691e 	bne	r2,zero,8000f0bc <_gp+0xfffde348>
8000f318:	4004977a 	slli	r2,r8,29
8000f31c:	8822d0fa 	srli	r17,r17,3
8000f320:	8101ffe0 	cmpeqi	r4,r16,2047
8000f324:	400ad0fa 	srli	r5,r8,3
8000f328:	1444b03a 	or	r2,r2,r17
8000f32c:	203fda26 	beq	r4,zero,8000f298 <_gp+0xfffde524>
8000f330:	2886b03a 	or	r3,r5,r2
8000f334:	18014626 	beq	r3,zero,8000f850 <__subdf3+0x8c4>
8000f338:	00c00434 	movhi	r3,16
8000f33c:	29000234 	orhi	r4,r5,8
8000f340:	18ffffc4 	addi	r3,r3,-1
8000f344:	20c8703a 	and	r4,r4,r3
8000f348:	0401ffc4 	movi	r16,2047
8000f34c:	003fd606 	br	8000f2a8 <_gp+0xfffde534>
8000f350:	5007883a 	mov	r3,r10
8000f354:	1011883a 	mov	r8,r2
8000f358:	6813883a 	mov	r9,r13
8000f35c:	4822d0fa 	srli	r17,r9,3
8000f360:	4004977a 	slli	r2,r8,29
8000f364:	1821883a 	mov	r16,r3
8000f368:	1901ffe0 	cmpeqi	r4,r3,2047
8000f36c:	400ad0fa 	srli	r5,r8,3
8000f370:	8884b03a 	or	r2,r17,r2
8000f374:	003fc706 	br	8000f294 <_gp+0xfffde520>
8000f378:	3825883a 	mov	r18,r7
8000f37c:	80007226 	beq	r16,zero,8000f548 <__subdf3+0x5bc>
8000f380:	5101ffe0 	cmpeqi	r4,r10,2047
8000f384:	2000ad1e 	bne	r4,zero,8000f63c <__subdf3+0x6b0>
8000f388:	00c7c83a 	sub	r3,zero,r3
8000f38c:	42002034 	orhi	r8,r8,128
8000f390:	19000e48 	cmpgei	r4,r3,57
8000f394:	2000d21e 	bne	r4,zero,8000f6e0 <__subdf3+0x754>
8000f398:	19000808 	cmpgei	r4,r3,32
8000f39c:	2000f81e 	bne	r4,zero,8000f780 <__subdf3+0x7f4>
8000f3a0:	01000804 	movi	r4,32
8000f3a4:	20c9c83a 	sub	r4,r4,r3
8000f3a8:	4122983a 	sll	r17,r8,r4
8000f3ac:	48cad83a 	srl	r5,r9,r3
8000f3b0:	4908983a 	sll	r4,r9,r4
8000f3b4:	40c6d83a 	srl	r3,r8,r3
8000f3b8:	8962b03a 	or	r17,r17,r5
8000f3bc:	2008c03a 	cmpne	r4,r4,zero
8000f3c0:	8922b03a 	or	r17,r17,r4
8000f3c4:	10c5c83a 	sub	r2,r2,r3
8000f3c8:	6c63c83a 	sub	r17,r13,r17
8000f3cc:	6c49803a 	cmpltu	r4,r13,r17
8000f3d0:	1111c83a 	sub	r8,r2,r4
8000f3d4:	5021883a 	mov	r16,r10
8000f3d8:	003f1606 	br	8000f034 <_gp+0xfffde2c0>
8000f3dc:	18007c1e 	bne	r3,zero,8000f5d0 <__subdf3+0x644>
8000f3e0:	81400044 	addi	r5,r16,1
8000f3e4:	28c1ffcc 	andi	r3,r5,2047
8000f3e8:	18c00088 	cmpgei	r3,r3,2
8000f3ec:	18009826 	beq	r3,zero,8000f650 <__subdf3+0x6c4>
8000f3f0:	28c1ffe0 	cmpeqi	r3,r5,2047
8000f3f4:	18005c26 	beq	r3,zero,8000f568 <__subdf3+0x5dc>
8000f3f8:	0401ffc4 	movi	r16,2047
8000f3fc:	0009883a 	mov	r4,zero
8000f400:	0005883a 	mov	r2,zero
8000f404:	003fa806 	br	8000f2a8 <_gp+0xfffde534>
8000f408:	8809883a 	mov	r4,r17
8000f40c:	000f97c0 	call	8000f97c <__clzsi2>
8000f410:	10800804 	addi	r2,r2,32
8000f414:	10fffe04 	addi	r3,r2,-8
8000f418:	19000808 	cmpgei	r4,r3,32
8000f41c:	203f1026 	beq	r4,zero,8000f060 <_gp+0xfffde2ec>
8000f420:	14fff604 	addi	r19,r2,-40
8000f424:	8cc8983a 	sll	r4,r17,r19
8000f428:	0023883a 	mov	r17,zero
8000f42c:	1c3f130e 	bge	r3,r16,8000f07c <_gp+0xfffde308>
8000f430:	023fe034 	movhi	r8,65408
8000f434:	423fffc4 	addi	r8,r8,-1
8000f438:	80e1c83a 	sub	r16,r16,r3
8000f43c:	2210703a 	and	r8,r4,r8
8000f440:	888001cc 	andi	r2,r17,7
8000f444:	003f1c06 	br	8000f0b8 <_gp+0xfffde344>
8000f448:	1344b03a 	or	r2,r2,r13
8000f44c:	1022c03a 	cmpne	r17,r2,zero
8000f450:	4c63c83a 	sub	r17,r9,r17
8000f454:	4c53803a 	cmpltu	r9,r9,r17
8000f458:	4251c83a 	sub	r8,r8,r9
8000f45c:	003ef506 	br	8000f034 <_gp+0xfffde2c0>
8000f460:	4246b03a 	or	r3,r8,r9
8000f464:	134ab03a 	or	r5,r2,r13
8000f468:	80004a1e 	bne	r16,zero,8000f594 <__subdf3+0x608>
8000f46c:	18009f1e 	bne	r3,zero,8000f6ec <__subdf3+0x760>
8000f470:	2800ce26 	beq	r5,zero,8000f7ac <__subdf3+0x820>
8000f474:	3825883a 	mov	r18,r7
8000f478:	1011883a 	mov	r8,r2
8000f47c:	6813883a 	mov	r9,r13
8000f480:	0009883a 	mov	r4,zero
8000f484:	003f7f06 	br	8000f284 <_gp+0xfffde510>
8000f488:	18c1ffe0 	cmpeqi	r3,r3,2047
8000f48c:	18004d1e 	bne	r3,zero,8000f5c4 <__subdf3+0x638>
8000f490:	2007883a 	mov	r3,r4
8000f494:	003f5306 	br	8000f1e4 <_gp+0xfffde470>
8000f498:	843ff844 	addi	r16,r16,-31
8000f49c:	40800820 	cmpeqi	r2,r8,32
8000f4a0:	2406d83a 	srl	r3,r4,r16
8000f4a4:	1000041e 	bne	r2,zero,8000f4b8 <__subdf3+0x52c>
8000f4a8:	04c01004 	movi	r19,64
8000f4ac:	9a11c83a 	sub	r8,r19,r8
8000f4b0:	2226983a 	sll	r19,r4,r8
8000f4b4:	8ce2b03a 	or	r17,r17,r19
8000f4b8:	8822c03a 	cmpne	r17,r17,zero
8000f4bc:	88e2b03a 	or	r17,r17,r3
8000f4c0:	888001cc 	andi	r2,r17,7
8000f4c4:	0011883a 	mov	r8,zero
8000f4c8:	0021883a 	mov	r16,zero
8000f4cc:	003f9106 	br	8000f314 <_gp+0xfffde5a0>
8000f4d0:	6a63c83a 	sub	r17,r13,r9
8000f4d4:	1209c83a 	sub	r4,r2,r8
8000f4d8:	6c67803a 	cmpltu	r19,r13,r17
8000f4dc:	24e7c83a 	sub	r19,r4,r19
8000f4e0:	3825883a 	mov	r18,r7
8000f4e4:	003ed806 	br	8000f048 <_gp+0xfffde2d4>
8000f4e8:	19000808 	cmpgei	r4,r3,32
8000f4ec:	20006c1e 	bne	r4,zero,8000f6a0 <__subdf3+0x714>
8000f4f0:	01000804 	movi	r4,32
8000f4f4:	20c9c83a 	sub	r4,r4,r3
8000f4f8:	1122983a 	sll	r17,r2,r4
8000f4fc:	68cad83a 	srl	r5,r13,r3
8000f500:	691a983a 	sll	r13,r13,r4
8000f504:	10c4d83a 	srl	r2,r2,r3
8000f508:	8962b03a 	or	r17,r17,r5
8000f50c:	681ac03a 	cmpne	r13,r13,zero
8000f510:	8b62b03a 	or	r17,r17,r13
8000f514:	4091883a 	add	r8,r8,r2
8000f518:	003f1806 	br	8000f17c <_gp+0xfffde408>
8000f51c:	01000804 	movi	r4,32
8000f520:	20c9c83a 	sub	r4,r4,r3
8000f524:	1122983a 	sll	r17,r2,r4
8000f528:	68cad83a 	srl	r5,r13,r3
8000f52c:	691a983a 	sll	r13,r13,r4
8000f530:	10c4d83a 	srl	r2,r2,r3
8000f534:	8962b03a 	or	r17,r17,r5
8000f538:	681ac03a 	cmpne	r13,r13,zero
8000f53c:	8b62b03a 	or	r17,r17,r13
8000f540:	4091c83a 	sub	r8,r8,r2
8000f544:	003fc206 	br	8000f450 <_gp+0xfffde6dc>
8000f548:	4248b03a 	or	r4,r8,r9
8000f54c:	203f8026 	beq	r4,zero,8000f350 <_gp+0xfffde5dc>
8000f550:	193fffd8 	cmpnei	r4,r3,-1
8000f554:	20009826 	beq	r4,zero,8000f7b8 <__subdf3+0x82c>
8000f558:	5101ffe0 	cmpeqi	r4,r10,2047
8000f55c:	2000371e 	bne	r4,zero,8000f63c <__subdf3+0x6b0>
8000f560:	00c6303a 	nor	r3,zero,r3
8000f564:	003f8a06 	br	8000f390 <_gp+0xfffde61c>
8000f568:	4b5b883a 	add	r13,r9,r13
8000f56c:	4089883a 	add	r4,r8,r2
8000f570:	6a51803a 	cmpltu	r8,r13,r9
8000f574:	2209883a 	add	r4,r4,r8
8000f578:	202297fa 	slli	r17,r4,31
8000f57c:	681ad07a 	srli	r13,r13,1
8000f580:	2010d07a 	srli	r8,r4,1
8000f584:	2821883a 	mov	r16,r5
8000f588:	8b62b03a 	or	r17,r17,r13
8000f58c:	888001cc 	andi	r2,r17,7
8000f590:	003ec906 	br	8000f0b8 <_gp+0xfffde344>
8000f594:	1800631e 	bne	r3,zero,8000f724 <__subdf3+0x798>
8000f598:	28009226 	beq	r5,zero,8000f7e4 <__subdf3+0x858>
8000f59c:	3825883a 	mov	r18,r7
8000f5a0:	1011883a 	mov	r8,r2
8000f5a4:	6813883a 	mov	r9,r13
8000f5a8:	0401ffc4 	movi	r16,2047
8000f5ac:	01000044 	movi	r4,1
8000f5b0:	003f3406 	br	8000f284 <_gp+0xfffde510>
8000f5b4:	18c1ffe0 	cmpeqi	r3,r3,2047
8000f5b8:	1800021e 	bne	r3,zero,8000f5c4 <__subdf3+0x638>
8000f5bc:	2007883a 	mov	r3,r4
8000f5c0:	003eea06 	br	8000f16c <_gp+0xfffde3f8>
8000f5c4:	0401ffc4 	movi	r16,2047
8000f5c8:	01000044 	movi	r4,1
8000f5cc:	003f2d06 	br	8000f284 <_gp+0xfffde510>
8000f5d0:	80003e1e 	bne	r16,zero,8000f6cc <__subdf3+0x740>
8000f5d4:	4248b03a 	or	r4,r8,r9
8000f5d8:	203f5d26 	beq	r4,zero,8000f350 <_gp+0xfffde5dc>
8000f5dc:	193fffd8 	cmpnei	r4,r3,-1
8000f5e0:	20009026 	beq	r4,zero,8000f824 <__subdf3+0x898>
8000f5e4:	5101ffe0 	cmpeqi	r4,r10,2047
8000f5e8:	2000141e 	bne	r4,zero,8000f63c <__subdf3+0x6b0>
8000f5ec:	00c6303a 	nor	r3,zero,r3
8000f5f0:	19000e48 	cmpgei	r4,r3,57
8000f5f4:	20005f1e 	bne	r4,zero,8000f774 <__subdf3+0x7e8>
8000f5f8:	19000808 	cmpgei	r4,r3,32
8000f5fc:	20007e1e 	bne	r4,zero,8000f7f8 <__subdf3+0x86c>
8000f600:	01000804 	movi	r4,32
8000f604:	20c9c83a 	sub	r4,r4,r3
8000f608:	4122983a 	sll	r17,r8,r4
8000f60c:	48cad83a 	srl	r5,r9,r3
8000f610:	4908983a 	sll	r4,r9,r4
8000f614:	40c6d83a 	srl	r3,r8,r3
8000f618:	8962b03a 	or	r17,r17,r5
8000f61c:	2008c03a 	cmpne	r4,r4,zero
8000f620:	8922b03a 	or	r17,r17,r4
8000f624:	10c5883a 	add	r2,r2,r3
8000f628:	8b63883a 	add	r17,r17,r13
8000f62c:	8b49803a 	cmpltu	r4,r17,r13
8000f630:	2091883a 	add	r8,r4,r2
8000f634:	5021883a 	mov	r16,r10
8000f638:	003ed306 	br	8000f188 <_gp+0xfffde414>
8000f63c:	0401ffc4 	movi	r16,2047
8000f640:	1011883a 	mov	r8,r2
8000f644:	6813883a 	mov	r9,r13
8000f648:	01000044 	movi	r4,1
8000f64c:	003f0d06 	br	8000f284 <_gp+0xfffde510>
8000f650:	4246b03a 	or	r3,r8,r9
8000f654:	803ef21e 	bne	r16,zero,8000f220 <_gp+0xfffde4ac>
8000f658:	183f8726 	beq	r3,zero,8000f478 <_gp+0xfffde704>
8000f65c:	1346b03a 	or	r3,r2,r13
8000f660:	183f8726 	beq	r3,zero,8000f480 <_gp+0xfffde70c>
8000f664:	4b63883a 	add	r17,r9,r13
8000f668:	4089883a 	add	r4,r8,r2
8000f66c:	8a51803a 	cmpltu	r8,r17,r9
8000f670:	2211883a 	add	r8,r4,r8
8000f674:	40c0202c 	andhi	r3,r8,128
8000f678:	888001cc 	andi	r2,r17,7
8000f67c:	183f2526 	beq	r3,zero,8000f314 <_gp+0xfffde5a0>
8000f680:	00ffe034 	movhi	r3,65408
8000f684:	18ffffc4 	addi	r3,r3,-1
8000f688:	40d0703a 	and	r8,r8,r3
8000f68c:	04000044 	movi	r16,1
8000f690:	003e8906 	br	8000f0b8 <_gp+0xfffde344>
8000f694:	8813883a 	mov	r9,r17
8000f698:	8101ffe0 	cmpeqi	r4,r16,2047
8000f69c:	003ef906 	br	8000f284 <_gp+0xfffde510>
8000f6a0:	1c7ff804 	addi	r17,r3,-32
8000f6a4:	19400820 	cmpeqi	r5,r3,32
8000f6a8:	1448d83a 	srl	r4,r2,r17
8000f6ac:	2800041e 	bne	r5,zero,8000f6c0 <__subdf3+0x734>
8000f6b0:	01401004 	movi	r5,64
8000f6b4:	28c7c83a 	sub	r3,r5,r3
8000f6b8:	10c4983a 	sll	r2,r2,r3
8000f6bc:	689ab03a 	or	r13,r13,r2
8000f6c0:	6822c03a 	cmpne	r17,r13,zero
8000f6c4:	8922b03a 	or	r17,r17,r4
8000f6c8:	003eac06 	br	8000f17c <_gp+0xfffde408>
8000f6cc:	5101ffe0 	cmpeqi	r4,r10,2047
8000f6d0:	203fda1e 	bne	r4,zero,8000f63c <_gp+0xfffde8c8>
8000f6d4:	00c7c83a 	sub	r3,zero,r3
8000f6d8:	42002034 	orhi	r8,r8,128
8000f6dc:	003fc406 	br	8000f5f0 <_gp+0xfffde87c>
8000f6e0:	4262b03a 	or	r17,r8,r9
8000f6e4:	8822c03a 	cmpne	r17,r17,zero
8000f6e8:	003f3706 	br	8000f3c8 <_gp+0xfffde654>
8000f6ec:	283f6426 	beq	r5,zero,8000f480 <_gp+0xfffde70c>
8000f6f0:	4b63c83a 	sub	r17,r9,r13
8000f6f4:	4c49803a 	cmpltu	r4,r9,r17
8000f6f8:	4087c83a 	sub	r3,r8,r2
8000f6fc:	1907c83a 	sub	r3,r3,r4
8000f700:	1900202c 	andhi	r4,r3,128
8000f704:	20004d26 	beq	r4,zero,8000f83c <__subdf3+0x8b0>
8000f708:	6a63c83a 	sub	r17,r13,r9
8000f70c:	1209c83a 	sub	r4,r2,r8
8000f710:	6c5b803a 	cmpltu	r13,r13,r17
8000f714:	2351c83a 	sub	r8,r4,r13
8000f718:	888001cc 	andi	r2,r17,7
8000f71c:	3825883a 	mov	r18,r7
8000f720:	003e6506 	br	8000f0b8 <_gp+0xfffde344>
8000f724:	283fa726 	beq	r5,zero,8000f5c4 <_gp+0xfffde850>
8000f728:	4006d0fa 	srli	r3,r8,3
8000f72c:	01480034 	movhi	r5,8192
8000f730:	4010977a 	slli	r8,r8,29
8000f734:	297fffc4 	addi	r5,r5,-1
8000f738:	2152703a 	and	r9,r4,r5
8000f73c:	1a80022c 	andhi	r10,r3,8
8000f740:	4a12b03a 	or	r9,r9,r8
8000f744:	503ec826 	beq	r10,zero,8000f268 <_gp+0xfffde4f4>
8000f748:	1008d0fa 	srli	r4,r2,3
8000f74c:	2200022c 	andhi	r8,r4,8
8000f750:	403ec51e 	bne	r8,zero,8000f268 <_gp+0xfffde4f4>
8000f754:	1012977a 	slli	r9,r2,29
8000f758:	3144703a 	and	r2,r6,r5
8000f75c:	2007883a 	mov	r3,r4
8000f760:	1252b03a 	or	r9,r2,r9
8000f764:	3817883a 	mov	r11,r7
8000f768:	003ebf06 	br	8000f268 <_gp+0xfffde4f4>
8000f76c:	04000084 	movi	r16,2
8000f770:	003e8a06 	br	8000f19c <_gp+0xfffde428>
8000f774:	4262b03a 	or	r17,r8,r9
8000f778:	8822c03a 	cmpne	r17,r17,zero
8000f77c:	003faa06 	br	8000f628 <_gp+0xfffde8b4>
8000f780:	193ff804 	addi	r4,r3,-32
8000f784:	19400820 	cmpeqi	r5,r3,32
8000f788:	4108d83a 	srl	r4,r8,r4
8000f78c:	2800041e 	bne	r5,zero,8000f7a0 <__subdf3+0x814>
8000f790:	01401004 	movi	r5,64
8000f794:	28c7c83a 	sub	r3,r5,r3
8000f798:	40d0983a 	sll	r8,r8,r3
8000f79c:	4a12b03a 	or	r9,r9,r8
8000f7a0:	4822c03a 	cmpne	r17,r9,zero
8000f7a4:	8922b03a 	or	r17,r17,r4
8000f7a8:	003f0706 	br	8000f3c8 <_gp+0xfffde654>
8000f7ac:	0005883a 	mov	r2,zero
8000f7b0:	0025883a 	mov	r18,zero
8000f7b4:	003eb806 	br	8000f298 <_gp+0xfffde524>
8000f7b8:	6a63c83a 	sub	r17,r13,r9
8000f7bc:	1209c83a 	sub	r4,r2,r8
8000f7c0:	6c5b803a 	cmpltu	r13,r13,r17
8000f7c4:	2351c83a 	sub	r8,r4,r13
8000f7c8:	5021883a 	mov	r16,r10
8000f7cc:	003e1906 	br	8000f034 <_gp+0xfffde2c0>
8000f7d0:	1011883a 	mov	r8,r2
8000f7d4:	6813883a 	mov	r9,r13
8000f7d8:	0401ffc4 	movi	r16,2047
8000f7dc:	01000044 	movi	r4,1
8000f7e0:	003ea806 	br	8000f284 <_gp+0xfffde510>
8000f7e4:	01400434 	movhi	r5,16
8000f7e8:	0025883a 	mov	r18,zero
8000f7ec:	297fffc4 	addi	r5,r5,-1
8000f7f0:	00bfffc4 	movi	r2,-1
8000f7f4:	003ed006 	br	8000f338 <_gp+0xfffde5c4>
8000f7f8:	193ff804 	addi	r4,r3,-32
8000f7fc:	19400820 	cmpeqi	r5,r3,32
8000f800:	4108d83a 	srl	r4,r8,r4
8000f804:	2800041e 	bne	r5,zero,8000f818 <__subdf3+0x88c>
8000f808:	01401004 	movi	r5,64
8000f80c:	28c7c83a 	sub	r3,r5,r3
8000f810:	40d0983a 	sll	r8,r8,r3
8000f814:	4a12b03a 	or	r9,r9,r8
8000f818:	4822c03a 	cmpne	r17,r9,zero
8000f81c:	8922b03a 	or	r17,r17,r4
8000f820:	003f8106 	br	8000f628 <_gp+0xfffde8b4>
8000f824:	4b63883a 	add	r17,r9,r13
8000f828:	4089883a 	add	r4,r8,r2
8000f82c:	8b5b803a 	cmpltu	r13,r17,r13
8000f830:	2351883a 	add	r8,r4,r13
8000f834:	5021883a 	mov	r16,r10
8000f838:	003e5306 	br	8000f188 <_gp+0xfffde414>
8000f83c:	88cab03a 	or	r5,r17,r3
8000f840:	283fda26 	beq	r5,zero,8000f7ac <_gp+0xfffdea38>
8000f844:	888001cc 	andi	r2,r17,7
8000f848:	1811883a 	mov	r8,r3
8000f84c:	003eb106 	br	8000f314 <_gp+0xfffde5a0>
8000f850:	0005883a 	mov	r2,zero
8000f854:	0401ffc4 	movi	r16,2047
8000f858:	0009883a 	mov	r4,zero
8000f85c:	003e9206 	br	8000f2a8 <_gp+0xfffde534>

8000f860 <__fixdfsi>:
8000f860:	280cd53a 	srli	r6,r5,20
8000f864:	00c00434 	movhi	r3,16
8000f868:	18ffffc4 	addi	r3,r3,-1
8000f86c:	3181ffcc 	andi	r6,r6,2047
8000f870:	31c0ffd0 	cmplti	r7,r6,1023
8000f874:	28c6703a 	and	r3,r5,r3
8000f878:	280ad7fa 	srli	r5,r5,31
8000f87c:	3800121e 	bne	r7,zero,8000f8c8 <__fixdfsi+0x68>
8000f880:	30810790 	cmplti	r2,r6,1054
8000f884:	10000c26 	beq	r2,zero,8000f8b8 <__fixdfsi+0x58>
8000f888:	01c10cc4 	movi	r7,1075
8000f88c:	398fc83a 	sub	r7,r7,r6
8000f890:	38800808 	cmpgei	r2,r7,32
8000f894:	18c00434 	orhi	r3,r3,16
8000f898:	10000d1e 	bne	r2,zero,8000f8d0 <__fixdfsi+0x70>
8000f89c:	30befb44 	addi	r2,r6,-1043
8000f8a0:	1884983a 	sll	r2,r3,r2
8000f8a4:	21c8d83a 	srl	r4,r4,r7
8000f8a8:	1104b03a 	or	r2,r2,r4
8000f8ac:	28000726 	beq	r5,zero,8000f8cc <__fixdfsi+0x6c>
8000f8b0:	0085c83a 	sub	r2,zero,r2
8000f8b4:	f800283a 	ret
8000f8b8:	00a00034 	movhi	r2,32768
8000f8bc:	10bfffc4 	addi	r2,r2,-1
8000f8c0:	2885883a 	add	r2,r5,r2
8000f8c4:	f800283a 	ret
8000f8c8:	0005883a 	mov	r2,zero
8000f8cc:	f800283a 	ret
8000f8d0:	008104c4 	movi	r2,1043
8000f8d4:	1185c83a 	sub	r2,r2,r6
8000f8d8:	1884d83a 	srl	r2,r3,r2
8000f8dc:	003ff306 	br	8000f8ac <_gp+0xfffdeb38>

8000f8e0 <__floatunsidf>:
8000f8e0:	defffe04 	addi	sp,sp,-8
8000f8e4:	dfc00115 	stw	ra,4(sp)
8000f8e8:	dc000015 	stw	r16,0(sp)
8000f8ec:	20001f26 	beq	r4,zero,8000f96c <__floatunsidf+0x8c>
8000f8f0:	2021883a 	mov	r16,r4
8000f8f4:	000f97c0 	call	8000f97c <__clzsi2>
8000f8f8:	01010784 	movi	r4,1054
8000f8fc:	2089c83a 	sub	r4,r4,r2
8000f900:	10c002c8 	cmpgei	r3,r2,11
8000f904:	2101ffcc 	andi	r4,r4,2047
8000f908:	18000f26 	beq	r3,zero,8000f948 <__floatunsidf+0x68>
8000f90c:	10bffd44 	addi	r2,r2,-11
8000f910:	8086983a 	sll	r3,r16,r2
8000f914:	00800434 	movhi	r2,16
8000f918:	10bfffc4 	addi	r2,r2,-1
8000f91c:	1886703a 	and	r3,r3,r2
8000f920:	0005883a 	mov	r2,zero
8000f924:	2008953a 	slli	r4,r4,20
8000f928:	01400434 	movhi	r5,16
8000f92c:	297fffc4 	addi	r5,r5,-1
8000f930:	1946703a 	and	r3,r3,r5
8000f934:	1906b03a 	or	r3,r3,r4
8000f938:	dfc00117 	ldw	ra,4(sp)
8000f93c:	dc000017 	ldw	r16,0(sp)
8000f940:	dec00204 	addi	sp,sp,8
8000f944:	f800283a 	ret
8000f948:	00c002c4 	movi	r3,11
8000f94c:	1887c83a 	sub	r3,r3,r2
8000f950:	80c6d83a 	srl	r3,r16,r3
8000f954:	01400434 	movhi	r5,16
8000f958:	10800544 	addi	r2,r2,21
8000f95c:	297fffc4 	addi	r5,r5,-1
8000f960:	8084983a 	sll	r2,r16,r2
8000f964:	1946703a 	and	r3,r3,r5
8000f968:	003fee06 	br	8000f924 <_gp+0xfffdebb0>
8000f96c:	0009883a 	mov	r4,zero
8000f970:	0007883a 	mov	r3,zero
8000f974:	0005883a 	mov	r2,zero
8000f978:	003fea06 	br	8000f924 <_gp+0xfffdebb0>

8000f97c <__clzsi2>:
8000f97c:	00bfffd4 	movui	r2,65535
8000f980:	11000436 	bltu	r2,r4,8000f994 <__clzsi2+0x18>
8000f984:	20804030 	cmpltui	r2,r4,256
8000f988:	10000b26 	beq	r2,zero,8000f9b8 <__clzsi2+0x3c>
8000f98c:	01400804 	movi	r5,32
8000f990:	00000406 	br	8000f9a4 <__clzsi2+0x28>
8000f994:	00804034 	movhi	r2,256
8000f998:	20800a36 	bltu	r4,r2,8000f9c4 <__clzsi2+0x48>
8000f99c:	2008d63a 	srli	r4,r4,24
8000f9a0:	01400204 	movi	r5,8
8000f9a4:	00e000b4 	movhi	r3,32770
8000f9a8:	20c7883a 	add	r3,r4,r3
8000f9ac:	189a4183 	ldbu	r2,26886(r3)
8000f9b0:	2885c83a 	sub	r2,r5,r2
8000f9b4:	f800283a 	ret
8000f9b8:	2008d23a 	srli	r4,r4,8
8000f9bc:	01400604 	movi	r5,24
8000f9c0:	003ff806 	br	8000f9a4 <_gp+0xfffdec30>
8000f9c4:	2008d43a 	srli	r4,r4,16
8000f9c8:	01400404 	movi	r5,16
8000f9cc:	003ff506 	br	8000f9a4 <_gp+0xfffdec30>

8000f9d0 <calloc>:
8000f9d0:	00a000f4 	movhi	r2,32771
8000f9d4:	280d883a 	mov	r6,r5
8000f9d8:	200b883a 	mov	r5,r4
8000f9dc:	11235e17 	ldw	r4,-29320(r2)
8000f9e0:	000f9e41 	jmpi	8000f9e4 <_calloc_r>

8000f9e4 <_calloc_r>:
8000f9e4:	298b383a 	mul	r5,r5,r6
8000f9e8:	defffe04 	addi	sp,sp,-8
8000f9ec:	dc000015 	stw	r16,0(sp)
8000f9f0:	dfc00115 	stw	ra,4(sp)
8000f9f4:	000fca40 	call	8000fca4 <_malloc_r>
8000f9f8:	1021883a 	mov	r16,r2
8000f9fc:	10001626 	beq	r2,zero,8000fa58 <_calloc_r+0x74>
8000fa00:	11bfff17 	ldw	r6,-4(r2)
8000fa04:	00bfff04 	movi	r2,-4
8000fa08:	308c703a 	and	r6,r6,r2
8000fa0c:	31bfff04 	addi	r6,r6,-4
8000fa10:	30800968 	cmpgeui	r2,r6,37
8000fa14:	10001a1e 	bne	r2,zero,8000fa80 <_calloc_r+0x9c>
8000fa18:	30800530 	cmpltui	r2,r6,20
8000fa1c:	1000131e 	bne	r2,zero,8000fa6c <_calloc_r+0x88>
8000fa20:	80000015 	stw	zero,0(r16)
8000fa24:	80000115 	stw	zero,4(r16)
8000fa28:	30800728 	cmpgeui	r2,r6,28
8000fa2c:	10001826 	beq	r2,zero,8000fa90 <_calloc_r+0xac>
8000fa30:	80000215 	stw	zero,8(r16)
8000fa34:	80000315 	stw	zero,12(r16)
8000fa38:	31800920 	cmpeqi	r6,r6,36
8000fa3c:	30001626 	beq	r6,zero,8000fa98 <_calloc_r+0xb4>
8000fa40:	80000415 	stw	zero,16(r16)
8000fa44:	80800604 	addi	r2,r16,24
8000fa48:	80000515 	stw	zero,20(r16)
8000fa4c:	10000015 	stw	zero,0(r2)
8000fa50:	10000115 	stw	zero,4(r2)
8000fa54:	10000215 	stw	zero,8(r2)
8000fa58:	8005883a 	mov	r2,r16
8000fa5c:	dfc00117 	ldw	ra,4(sp)
8000fa60:	dc000017 	ldw	r16,0(sp)
8000fa64:	dec00204 	addi	sp,sp,8
8000fa68:	f800283a 	ret
8000fa6c:	8005883a 	mov	r2,r16
8000fa70:	10000015 	stw	zero,0(r2)
8000fa74:	10000115 	stw	zero,4(r2)
8000fa78:	10000215 	stw	zero,8(r2)
8000fa7c:	003ff606 	br	8000fa58 <_gp+0xfffdece4>
8000fa80:	000b883a 	mov	r5,zero
8000fa84:	8009883a 	mov	r4,r16
8000fa88:	00105d80 	call	800105d8 <memset>
8000fa8c:	003ff206 	br	8000fa58 <_gp+0xfffdece4>
8000fa90:	80800204 	addi	r2,r16,8
8000fa94:	003ff606 	br	8000fa70 <_gp+0xfffdecfc>
8000fa98:	80800404 	addi	r2,r16,16
8000fa9c:	003ff406 	br	8000fa70 <_gp+0xfffdecfc>

8000faa0 <_getc_r>:
8000faa0:	defffd04 	addi	sp,sp,-12
8000faa4:	dc000115 	stw	r16,4(sp)
8000faa8:	dfc00215 	stw	ra,8(sp)
8000faac:	2021883a 	mov	r16,r4
8000fab0:	20000226 	beq	r4,zero,8000fabc <_getc_r+0x1c>
8000fab4:	20800e17 	ldw	r2,56(r4)
8000fab8:	10000c26 	beq	r2,zero,8000faec <_getc_r+0x4c>
8000fabc:	28800117 	ldw	r2,4(r5)
8000fac0:	10bfffc4 	addi	r2,r2,-1
8000fac4:	28800115 	stw	r2,4(r5)
8000fac8:	10000f16 	blt	r2,zero,8000fb08 <_getc_r+0x68>
8000facc:	28800017 	ldw	r2,0(r5)
8000fad0:	10c00044 	addi	r3,r2,1
8000fad4:	28c00015 	stw	r3,0(r5)
8000fad8:	10800003 	ldbu	r2,0(r2)
8000fadc:	dfc00217 	ldw	ra,8(sp)
8000fae0:	dc000117 	ldw	r16,4(sp)
8000fae4:	dec00304 	addi	sp,sp,12
8000fae8:	f800283a 	ret
8000faec:	d9400015 	stw	r5,0(sp)
8000faf0:	0017a4c0 	call	80017a4c <__sinit>
8000faf4:	d9400017 	ldw	r5,0(sp)
8000faf8:	28800117 	ldw	r2,4(r5)
8000fafc:	10bfffc4 	addi	r2,r2,-1
8000fb00:	28800115 	stw	r2,4(r5)
8000fb04:	103ff10e 	bge	r2,zero,8000facc <_gp+0xfffded58>
8000fb08:	8009883a 	mov	r4,r16
8000fb0c:	dfc00217 	ldw	ra,8(sp)
8000fb10:	dc000117 	ldw	r16,4(sp)
8000fb14:	dec00304 	addi	sp,sp,12
8000fb18:	0010ea81 	jmpi	80010ea8 <__srget_r>

8000fb1c <getc>:
8000fb1c:	defffd04 	addi	sp,sp,-12
8000fb20:	00a000f4 	movhi	r2,32771
8000fb24:	dc400115 	stw	r17,4(sp)
8000fb28:	14635e17 	ldw	r17,-29320(r2)
8000fb2c:	dc000015 	stw	r16,0(sp)
8000fb30:	dfc00215 	stw	ra,8(sp)
8000fb34:	2021883a 	mov	r16,r4
8000fb38:	88000226 	beq	r17,zero,8000fb44 <getc+0x28>
8000fb3c:	88800e17 	ldw	r2,56(r17)
8000fb40:	10000d26 	beq	r2,zero,8000fb78 <getc+0x5c>
8000fb44:	80800117 	ldw	r2,4(r16)
8000fb48:	10bfffc4 	addi	r2,r2,-1
8000fb4c:	80800115 	stw	r2,4(r16)
8000fb50:	10000f16 	blt	r2,zero,8000fb90 <getc+0x74>
8000fb54:	80800017 	ldw	r2,0(r16)
8000fb58:	10c00044 	addi	r3,r2,1
8000fb5c:	80c00015 	stw	r3,0(r16)
8000fb60:	10800003 	ldbu	r2,0(r2)
8000fb64:	dfc00217 	ldw	ra,8(sp)
8000fb68:	dc400117 	ldw	r17,4(sp)
8000fb6c:	dc000017 	ldw	r16,0(sp)
8000fb70:	dec00304 	addi	sp,sp,12
8000fb74:	f800283a 	ret
8000fb78:	8809883a 	mov	r4,r17
8000fb7c:	0017a4c0 	call	80017a4c <__sinit>
8000fb80:	80800117 	ldw	r2,4(r16)
8000fb84:	10bfffc4 	addi	r2,r2,-1
8000fb88:	80800115 	stw	r2,4(r16)
8000fb8c:	103ff10e 	bge	r2,zero,8000fb54 <_gp+0xfffdede0>
8000fb90:	800b883a 	mov	r5,r16
8000fb94:	8809883a 	mov	r4,r17
8000fb98:	dfc00217 	ldw	ra,8(sp)
8000fb9c:	dc400117 	ldw	r17,4(sp)
8000fba0:	dc000017 	ldw	r16,0(sp)
8000fba4:	dec00304 	addi	sp,sp,12
8000fba8:	0010ea81 	jmpi	80010ea8 <__srget_r>

8000fbac <_setlocale_r>:
8000fbac:	30001b26 	beq	r6,zero,8000fc1c <_setlocale_r+0x70>
8000fbb0:	016000b4 	movhi	r5,32770
8000fbb4:	defffe04 	addi	sp,sp,-8
8000fbb8:	295a8304 	addi	r5,r5,27148
8000fbbc:	3009883a 	mov	r4,r6
8000fbc0:	dc000015 	stw	r16,0(sp)
8000fbc4:	dfc00115 	stw	ra,4(sp)
8000fbc8:	3021883a 	mov	r16,r6
8000fbcc:	001103c0 	call	8001103c <strcmp>
8000fbd0:	1000061e 	bne	r2,zero,8000fbec <_setlocale_r+0x40>
8000fbd4:	00a000b4 	movhi	r2,32770
8000fbd8:	109a8204 	addi	r2,r2,27144
8000fbdc:	dfc00117 	ldw	ra,4(sp)
8000fbe0:	dc000017 	ldw	r16,0(sp)
8000fbe4:	dec00204 	addi	sp,sp,8
8000fbe8:	f800283a 	ret
8000fbec:	016000b4 	movhi	r5,32770
8000fbf0:	295a8204 	addi	r5,r5,27144
8000fbf4:	8009883a 	mov	r4,r16
8000fbf8:	001103c0 	call	8001103c <strcmp>
8000fbfc:	103ff526 	beq	r2,zero,8000fbd4 <_gp+0xfffdee60>
8000fc00:	016000b4 	movhi	r5,32770
8000fc04:	295aa704 	addi	r5,r5,27292
8000fc08:	8009883a 	mov	r4,r16
8000fc0c:	001103c0 	call	8001103c <strcmp>
8000fc10:	103ff026 	beq	r2,zero,8000fbd4 <_gp+0xfffdee60>
8000fc14:	0005883a 	mov	r2,zero
8000fc18:	003ff006 	br	8000fbdc <_gp+0xfffdee68>
8000fc1c:	00a000b4 	movhi	r2,32770
8000fc20:	109a8204 	addi	r2,r2,27144
8000fc24:	f800283a 	ret

8000fc28 <__locale_mb_cur_max>:
8000fc28:	00a000f4 	movhi	r2,32771
8000fc2c:	10a35e17 	ldw	r2,-29320(r2)
8000fc30:	10800d17 	ldw	r2,52(r2)
8000fc34:	1000021e 	bne	r2,zero,8000fc40 <__locale_mb_cur_max+0x18>
8000fc38:	00a000b4 	movhi	r2,32770
8000fc3c:	109d2904 	addi	r2,r2,29860
8000fc40:	10804a07 	ldb	r2,296(r2)
8000fc44:	f800283a 	ret

8000fc48 <__locale_ctype_ptr_l>:
8000fc48:	20803b17 	ldw	r2,236(r4)
8000fc4c:	f800283a 	ret

8000fc50 <__locale_ctype_ptr>:
8000fc50:	00a000f4 	movhi	r2,32771
8000fc54:	10a35e17 	ldw	r2,-29320(r2)
8000fc58:	10800d17 	ldw	r2,52(r2)
8000fc5c:	1000021e 	bne	r2,zero,8000fc68 <__locale_ctype_ptr+0x18>
8000fc60:	00a000b4 	movhi	r2,32770
8000fc64:	109d2904 	addi	r2,r2,29860
8000fc68:	10803b17 	ldw	r2,236(r2)
8000fc6c:	f800283a 	ret

8000fc70 <setlocale>:
8000fc70:	00a000f4 	movhi	r2,32771
8000fc74:	280d883a 	mov	r6,r5
8000fc78:	200b883a 	mov	r5,r4
8000fc7c:	11235e17 	ldw	r4,-29320(r2)
8000fc80:	000fbac1 	jmpi	8000fbac <_setlocale_r>

8000fc84 <malloc>:
8000fc84:	00a000f4 	movhi	r2,32771
8000fc88:	200b883a 	mov	r5,r4
8000fc8c:	11235e17 	ldw	r4,-29320(r2)
8000fc90:	000fca41 	jmpi	8000fca4 <_malloc_r>

8000fc94 <free>:
8000fc94:	00a000f4 	movhi	r2,32771
8000fc98:	200b883a 	mov	r5,r4
8000fc9c:	11235e17 	ldw	r4,-29320(r2)
8000fca0:	0017bb01 	jmpi	80017bb0 <_free_r>

8000fca4 <_malloc_r>:
8000fca4:	defff804 	addi	sp,sp,-32
8000fca8:	dc400115 	stw	r17,4(sp)
8000fcac:	2c4002c4 	addi	r17,r5,11
8000fcb0:	dcc00315 	stw	r19,12(sp)
8000fcb4:	dfc00715 	stw	ra,28(sp)
8000fcb8:	dd800615 	stw	r22,24(sp)
8000fcbc:	dd400515 	stw	r21,20(sp)
8000fcc0:	dd000415 	stw	r20,16(sp)
8000fcc4:	dc800215 	stw	r18,8(sp)
8000fcc8:	dc000015 	stw	r16,0(sp)
8000fccc:	888005e8 	cmpgeui	r2,r17,23
8000fcd0:	2027883a 	mov	r19,r4
8000fcd4:	1000241e 	bne	r2,zero,8000fd68 <_malloc_r+0xc4>
8000fcd8:	29400468 	cmpgeui	r5,r5,17
8000fcdc:	28009e1e 	bne	r5,zero,8000ff58 <_malloc_r+0x2b4>
8000fce0:	00200200 	call	80020020 <__malloc_lock>
8000fce4:	04400404 	movi	r17,16
8000fce8:	00800604 	movi	r2,24
8000fcec:	01800084 	movi	r6,2
8000fcf0:	04a000b4 	movhi	r18,32770
8000fcf4:	949d8404 	addi	r18,r18,30224
8000fcf8:	9085883a 	add	r2,r18,r2
8000fcfc:	14000117 	ldw	r16,4(r2)
8000fd00:	10fffe04 	addi	r3,r2,-8
8000fd04:	80c10e26 	beq	r16,r3,80010140 <_malloc_r+0x49c>
8000fd08:	80800117 	ldw	r2,4(r16)
8000fd0c:	81000317 	ldw	r4,12(r16)
8000fd10:	00ffff04 	movi	r3,-4
8000fd14:	10c4703a 	and	r2,r2,r3
8000fd18:	81400217 	ldw	r5,8(r16)
8000fd1c:	8085883a 	add	r2,r16,r2
8000fd20:	10c00117 	ldw	r3,4(r2)
8000fd24:	29000315 	stw	r4,12(r5)
8000fd28:	21400215 	stw	r5,8(r4)
8000fd2c:	18c00054 	ori	r3,r3,1
8000fd30:	10c00115 	stw	r3,4(r2)
8000fd34:	9809883a 	mov	r4,r19
8000fd38:	00200440 	call	80020044 <__malloc_unlock>
8000fd3c:	80800204 	addi	r2,r16,8
8000fd40:	dfc00717 	ldw	ra,28(sp)
8000fd44:	dd800617 	ldw	r22,24(sp)
8000fd48:	dd400517 	ldw	r21,20(sp)
8000fd4c:	dd000417 	ldw	r20,16(sp)
8000fd50:	dcc00317 	ldw	r19,12(sp)
8000fd54:	dc800217 	ldw	r18,8(sp)
8000fd58:	dc400117 	ldw	r17,4(sp)
8000fd5c:	dc000017 	ldw	r16,0(sp)
8000fd60:	dec00804 	addi	sp,sp,32
8000fd64:	f800283a 	ret
8000fd68:	00bffe04 	movi	r2,-8
8000fd6c:	88a2703a 	and	r17,r17,r2
8000fd70:	88007916 	blt	r17,zero,8000ff58 <_malloc_r+0x2b4>
8000fd74:	89407836 	bltu	r17,r5,8000ff58 <_malloc_r+0x2b4>
8000fd78:	00200200 	call	80020020 <__malloc_lock>
8000fd7c:	88807e28 	cmpgeui	r2,r17,504
8000fd80:	10011326 	beq	r2,zero,800101d0 <_malloc_r+0x52c>
8000fd84:	8804d27a 	srli	r2,r17,9
8000fd88:	10007726 	beq	r2,zero,8000ff68 <_malloc_r+0x2c4>
8000fd8c:	10c00168 	cmpgeui	r3,r2,5
8000fd90:	1800f71e 	bne	r3,zero,80010170 <_malloc_r+0x4cc>
8000fd94:	8804d1ba 	srli	r2,r17,6
8000fd98:	11800e44 	addi	r6,r2,57
8000fd9c:	300890fa 	slli	r4,r6,3
8000fda0:	12000e04 	addi	r8,r2,56
8000fda4:	04a000b4 	movhi	r18,32770
8000fda8:	949d8404 	addi	r18,r18,30224
8000fdac:	9109883a 	add	r4,r18,r4
8000fdb0:	24000117 	ldw	r16,4(r4)
8000fdb4:	213ffe04 	addi	r4,r4,-8
8000fdb8:	24001126 	beq	r4,r16,8000fe00 <_malloc_r+0x15c>
8000fdbc:	80800117 	ldw	r2,4(r16)
8000fdc0:	00ffff04 	movi	r3,-4
8000fdc4:	10c4703a 	and	r2,r2,r3
8000fdc8:	1447c83a 	sub	r3,r2,r17
8000fdcc:	19400408 	cmpgei	r5,r3,16
8000fdd0:	2800d71e 	bne	r5,zero,80010130 <_malloc_r+0x48c>
8000fdd4:	1800d80e 	bge	r3,zero,80010138 <_malloc_r+0x494>
8000fdd8:	01ffff04 	movi	r7,-4
8000fddc:	00000606 	br	8000fdf8 <_malloc_r+0x154>
8000fde0:	80800117 	ldw	r2,4(r16)
8000fde4:	11c4703a 	and	r2,r2,r7
8000fde8:	1447c83a 	sub	r3,r2,r17
8000fdec:	19400408 	cmpgei	r5,r3,16
8000fdf0:	2800cf1e 	bne	r5,zero,80010130 <_malloc_r+0x48c>
8000fdf4:	1800d00e 	bge	r3,zero,80010138 <_malloc_r+0x494>
8000fdf8:	84000317 	ldw	r16,12(r16)
8000fdfc:	243ff81e 	bne	r4,r16,8000fde0 <_gp+0xfffdf06c>
8000fe00:	94000417 	ldw	r16,16(r18)
8000fe04:	016000b4 	movhi	r5,32770
8000fe08:	295d8604 	addi	r5,r5,30232
8000fe0c:	81405a26 	beq	r16,r5,8000ff78 <_malloc_r+0x2d4>
8000fe10:	80c00117 	ldw	r3,4(r16)
8000fe14:	00bfff04 	movi	r2,-4
8000fe18:	188e703a 	and	r7,r3,r2
8000fe1c:	3c45c83a 	sub	r2,r7,r17
8000fe20:	10c00410 	cmplti	r3,r2,16
8000fe24:	1800db26 	beq	r3,zero,80010194 <_malloc_r+0x4f0>
8000fe28:	91400515 	stw	r5,20(r18)
8000fe2c:	91400415 	stw	r5,16(r18)
8000fe30:	1000c70e 	bge	r2,zero,80010150 <_malloc_r+0x4ac>
8000fe34:	38808028 	cmpgeui	r2,r7,512
8000fe38:	1000f91e 	bne	r2,zero,80010220 <_malloc_r+0x57c>
8000fe3c:	3804d0fa 	srli	r2,r7,3
8000fe40:	92000117 	ldw	r8,4(r18)
8000fe44:	10c00044 	addi	r3,r2,1
8000fe48:	100fd0ba 	srai	r7,r2,2
8000fe4c:	180690fa 	slli	r3,r3,3
8000fe50:	00800044 	movi	r2,1
8000fe54:	11c4983a 	sll	r2,r2,r7
8000fe58:	90c7883a 	add	r3,r18,r3
8000fe5c:	19000017 	ldw	r4,0(r3)
8000fe60:	1204b03a 	or	r2,r2,r8
8000fe64:	19fffe04 	addi	r7,r3,-8
8000fe68:	81c00315 	stw	r7,12(r16)
8000fe6c:	81000215 	stw	r4,8(r16)
8000fe70:	90800115 	stw	r2,4(r18)
8000fe74:	1c000015 	stw	r16,0(r3)
8000fe78:	24000315 	stw	r16,12(r4)
8000fe7c:	3007d0ba 	srai	r3,r6,2
8000fe80:	01000044 	movi	r4,1
8000fe84:	20c8983a 	sll	r4,r4,r3
8000fe88:	11004036 	bltu	r2,r4,8000ff8c <_malloc_r+0x2e8>
8000fe8c:	2086703a 	and	r3,r4,r2
8000fe90:	18000a1e 	bne	r3,zero,8000febc <_malloc_r+0x218>
8000fe94:	00ffff04 	movi	r3,-4
8000fe98:	2109883a 	add	r4,r4,r4
8000fe9c:	30cc703a 	and	r6,r6,r3
8000fea0:	2086703a 	and	r3,r4,r2
8000fea4:	31800104 	addi	r6,r6,4
8000fea8:	1800041e 	bne	r3,zero,8000febc <_malloc_r+0x218>
8000feac:	2109883a 	add	r4,r4,r4
8000feb0:	2086703a 	and	r3,r4,r2
8000feb4:	31800104 	addi	r6,r6,4
8000feb8:	183ffc26 	beq	r3,zero,8000feac <_gp+0xfffdf138>
8000febc:	027fff04 	movi	r9,-4
8000fec0:	301490fa 	slli	r10,r6,3
8000fec4:	3017883a 	mov	r11,r6
8000fec8:	9295883a 	add	r10,r18,r10
8000fecc:	5011883a 	mov	r8,r10
8000fed0:	44000317 	ldw	r16,12(r8)
8000fed4:	4400c126 	beq	r8,r16,800101dc <_malloc_r+0x538>
8000fed8:	80800117 	ldw	r2,4(r16)
8000fedc:	1244703a 	and	r2,r2,r9
8000fee0:	1447c83a 	sub	r3,r2,r17
8000fee4:	19c00408 	cmpgei	r7,r3,16
8000fee8:	3800081e 	bne	r7,zero,8000ff0c <_malloc_r+0x268>
8000feec:	1800c00e 	bge	r3,zero,800101f0 <_malloc_r+0x54c>
8000fef0:	84000317 	ldw	r16,12(r16)
8000fef4:	4400b926 	beq	r8,r16,800101dc <_malloc_r+0x538>
8000fef8:	80800117 	ldw	r2,4(r16)
8000fefc:	1244703a 	and	r2,r2,r9
8000ff00:	1447c83a 	sub	r3,r2,r17
8000ff04:	19c00410 	cmplti	r7,r3,16
8000ff08:	383ff81e 	bne	r7,zero,8000feec <_gp+0xfffdf178>
8000ff0c:	81000317 	ldw	r4,12(r16)
8000ff10:	81800217 	ldw	r6,8(r16)
8000ff14:	89c00054 	ori	r7,r17,1
8000ff18:	81c00115 	stw	r7,4(r16)
8000ff1c:	31000315 	stw	r4,12(r6)
8000ff20:	21800215 	stw	r6,8(r4)
8000ff24:	8463883a 	add	r17,r16,r17
8000ff28:	94400515 	stw	r17,20(r18)
8000ff2c:	94400415 	stw	r17,16(r18)
8000ff30:	19000054 	ori	r4,r3,1
8000ff34:	89000115 	stw	r4,4(r17)
8000ff38:	8085883a 	add	r2,r16,r2
8000ff3c:	89400315 	stw	r5,12(r17)
8000ff40:	89400215 	stw	r5,8(r17)
8000ff44:	10c00015 	stw	r3,0(r2)
8000ff48:	9809883a 	mov	r4,r19
8000ff4c:	00200440 	call	80020044 <__malloc_unlock>
8000ff50:	80800204 	addi	r2,r16,8
8000ff54:	003f7a06 	br	8000fd40 <_gp+0xfffdefcc>
8000ff58:	00800304 	movi	r2,12
8000ff5c:	98800015 	stw	r2,0(r19)
8000ff60:	0005883a 	mov	r2,zero
8000ff64:	003f7606 	br	8000fd40 <_gp+0xfffdefcc>
8000ff68:	01008004 	movi	r4,512
8000ff6c:	01801004 	movi	r6,64
8000ff70:	02000fc4 	movi	r8,63
8000ff74:	003f8b06 	br	8000fda4 <_gp+0xfffdf030>
8000ff78:	3007d0ba 	srai	r3,r6,2
8000ff7c:	01000044 	movi	r4,1
8000ff80:	90800117 	ldw	r2,4(r18)
8000ff84:	20c8983a 	sll	r4,r4,r3
8000ff88:	113fc02e 	bgeu	r2,r4,8000fe8c <_gp+0xfffdf118>
8000ff8c:	94000217 	ldw	r16,8(r18)
8000ff90:	00bfff04 	movi	r2,-4
8000ff94:	85400117 	ldw	r21,4(r16)
8000ff98:	a8aa703a 	and	r21,r21,r2
8000ff9c:	ac400336 	bltu	r21,r17,8000ffac <_malloc_r+0x308>
8000ffa0:	ac45c83a 	sub	r2,r21,r17
8000ffa4:	10c00408 	cmpgei	r3,r2,16
8000ffa8:	1800571e 	bne	r3,zero,80010108 <_malloc_r+0x464>
8000ffac:	00a000f4 	movhi	r2,32771
8000ffb0:	10a35f17 	ldw	r2,-29316(r2)
8000ffb4:	00e000f4 	movhi	r3,32771
8000ffb8:	1d2ad317 	ldw	r20,-21684(r3)
8000ffbc:	10bfffd8 	cmpnei	r2,r2,-1
8000ffc0:	8d29883a 	add	r20,r17,r20
8000ffc4:	1000da26 	beq	r2,zero,80010330 <_malloc_r+0x68c>
8000ffc8:	a50403c4 	addi	r20,r20,4111
8000ffcc:	00bc0004 	movi	r2,-4096
8000ffd0:	a0a8703a 	and	r20,r20,r2
8000ffd4:	a00b883a 	mov	r5,r20
8000ffd8:	9809883a 	mov	r4,r19
8000ffdc:	0010f2c0 	call	80010f2c <_sbrk_r>
8000ffe0:	102d883a 	mov	r22,r2
8000ffe4:	10bfffd8 	cmpnei	r2,r2,-1
8000ffe8:	1000ab26 	beq	r2,zero,80010298 <_malloc_r+0x5f4>
8000ffec:	8547883a 	add	r3,r16,r21
8000fff0:	b0c0a836 	bltu	r22,r3,80010294 <_malloc_r+0x5f0>
8000fff4:	00a000f4 	movhi	r2,32771
8000fff8:	10aae117 	ldw	r2,-21628(r2)
8000fffc:	012000f4 	movhi	r4,32771
80010000:	a085883a 	add	r2,r20,r2
80010004:	20aae115 	stw	r2,-21628(r4)
80010008:	1d80e226 	beq	r3,r22,80010394 <_malloc_r+0x6f0>
8001000c:	012000f4 	movhi	r4,32771
80010010:	21235f17 	ldw	r4,-29316(r4)
80010014:	213fffd8 	cmpnei	r4,r4,-1
80010018:	2000f226 	beq	r4,zero,800103e4 <_malloc_r+0x740>
8001001c:	b0c7c83a 	sub	r3,r22,r3
80010020:	1885883a 	add	r2,r3,r2
80010024:	00e000f4 	movhi	r3,32771
80010028:	18aae115 	stw	r2,-21628(r3)
8001002c:	b0c001cc 	andi	r3,r22,7
80010030:	1800cf26 	beq	r3,zero,80010370 <_malloc_r+0x6cc>
80010034:	b0edc83a 	sub	r22,r22,r3
80010038:	00840204 	movi	r2,4104
8001003c:	b5800204 	addi	r22,r22,8
80010040:	10c5c83a 	sub	r2,r2,r3
80010044:	b529883a 	add	r20,r22,r20
80010048:	a503ffcc 	andi	r20,r20,4095
8001004c:	1529c83a 	sub	r20,r2,r20
80010050:	a00b883a 	mov	r5,r20
80010054:	9809883a 	mov	r4,r19
80010058:	0010f2c0 	call	80010f2c <_sbrk_r>
8001005c:	10ffffe0 	cmpeqi	r3,r2,-1
80010060:	1800dd1e 	bne	r3,zero,800103d8 <_malloc_r+0x734>
80010064:	1587c83a 	sub	r3,r2,r22
80010068:	1d07883a 	add	r3,r3,r20
8001006c:	18c00054 	ori	r3,r3,1
80010070:	00a000f4 	movhi	r2,32771
80010074:	10aae117 	ldw	r2,-21628(r2)
80010078:	95800215 	stw	r22,8(r18)
8001007c:	012000f4 	movhi	r4,32771
80010080:	a085883a 	add	r2,r20,r2
80010084:	20aae115 	stw	r2,-21628(r4)
80010088:	b0c00115 	stw	r3,4(r22)
8001008c:	84800f26 	beq	r16,r18,800100cc <_malloc_r+0x428>
80010090:	a8c00428 	cmpgeui	r3,r21,16
80010094:	1800cd26 	beq	r3,zero,800103cc <_malloc_r+0x728>
80010098:	81000117 	ldw	r4,4(r16)
8001009c:	017ffe04 	movi	r5,-8
800100a0:	a8fffd04 	addi	r3,r21,-12
800100a4:	1946703a 	and	r3,r3,r5
800100a8:	2100004c 	andi	r4,r4,1
800100ac:	20c8b03a 	or	r4,r4,r3
800100b0:	81000115 	stw	r4,4(r16)
800100b4:	01400144 	movi	r5,5
800100b8:	80c9883a 	add	r4,r16,r3
800100bc:	21400115 	stw	r5,4(r4)
800100c0:	21400215 	stw	r5,8(r4)
800100c4:	18c00430 	cmpltui	r3,r3,16
800100c8:	1800da26 	beq	r3,zero,80010434 <_malloc_r+0x790>
800100cc:	00e000f4 	movhi	r3,32771
800100d0:	18ead217 	ldw	r3,-21688(r3)
800100d4:	1880022e 	bgeu	r3,r2,800100e0 <_malloc_r+0x43c>
800100d8:	00e000f4 	movhi	r3,32771
800100dc:	18aad215 	stw	r2,-21688(r3)
800100e0:	94000217 	ldw	r16,8(r18)
800100e4:	00e000f4 	movhi	r3,32771
800100e8:	192ad117 	ldw	r4,-21692(r3)
800100ec:	80c00117 	ldw	r3,4(r16)
800100f0:	017fff04 	movi	r5,-4
800100f4:	1946703a 	and	r3,r3,r5
800100f8:	20806b2e 	bgeu	r4,r2,800102a8 <_malloc_r+0x604>
800100fc:	012000f4 	movhi	r4,32771
80010100:	20aad115 	stw	r2,-21692(r4)
80010104:	00006806 	br	800102a8 <_malloc_r+0x604>
80010108:	88c00054 	ori	r3,r17,1
8001010c:	80c00115 	stw	r3,4(r16)
80010110:	8463883a 	add	r17,r16,r17
80010114:	10800054 	ori	r2,r2,1
80010118:	94400215 	stw	r17,8(r18)
8001011c:	88800115 	stw	r2,4(r17)
80010120:	9809883a 	mov	r4,r19
80010124:	00200440 	call	80020044 <__malloc_unlock>
80010128:	80800204 	addi	r2,r16,8
8001012c:	003f0406 	br	8000fd40 <_gp+0xfffdefcc>
80010130:	400d883a 	mov	r6,r8
80010134:	003f3206 	br	8000fe00 <_gp+0xfffdf08c>
80010138:	81000317 	ldw	r4,12(r16)
8001013c:	003ef606 	br	8000fd18 <_gp+0xfffdefa4>
80010140:	14000317 	ldw	r16,12(r2)
80010144:	31800084 	addi	r6,r6,2
80010148:	143f2d26 	beq	r2,r16,8000fe00 <_gp+0xfffdf08c>
8001014c:	003eee06 	br	8000fd08 <_gp+0xfffdef94>
80010150:	81c5883a 	add	r2,r16,r7
80010154:	11400117 	ldw	r5,4(r2)
80010158:	9809883a 	mov	r4,r19
8001015c:	29400054 	ori	r5,r5,1
80010160:	11400115 	stw	r5,4(r2)
80010164:	00200440 	call	80020044 <__malloc_unlock>
80010168:	80800204 	addi	r2,r16,8
8001016c:	003ef406 	br	8000fd40 <_gp+0xfffdefcc>
80010170:	10c00568 	cmpgeui	r3,r2,21
80010174:	18004326 	beq	r3,zero,80010284 <_malloc_r+0x5e0>
80010178:	10c01568 	cmpgeui	r3,r2,85
8001017c:	18006e1e 	bne	r3,zero,80010338 <_malloc_r+0x694>
80010180:	8804d33a 	srli	r2,r17,12
80010184:	11801bc4 	addi	r6,r2,111
80010188:	12001b84 	addi	r8,r2,110
8001018c:	300890fa 	slli	r4,r6,3
80010190:	003f0406 	br	8000fda4 <_gp+0xfffdf030>
80010194:	88c00054 	ori	r3,r17,1
80010198:	80c00115 	stw	r3,4(r16)
8001019c:	8463883a 	add	r17,r16,r17
800101a0:	94400515 	stw	r17,20(r18)
800101a4:	94400415 	stw	r17,16(r18)
800101a8:	10c00054 	ori	r3,r2,1
800101ac:	88c00115 	stw	r3,4(r17)
800101b0:	89400315 	stw	r5,12(r17)
800101b4:	89400215 	stw	r5,8(r17)
800101b8:	81c7883a 	add	r3,r16,r7
800101bc:	18800015 	stw	r2,0(r3)
800101c0:	9809883a 	mov	r4,r19
800101c4:	00200440 	call	80020044 <__malloc_unlock>
800101c8:	80800204 	addi	r2,r16,8
800101cc:	003edc06 	br	8000fd40 <_gp+0xfffdefcc>
800101d0:	880cd0fa 	srli	r6,r17,3
800101d4:	88800204 	addi	r2,r17,8
800101d8:	003ec506 	br	8000fcf0 <_gp+0xfffdef7c>
800101dc:	5ac00044 	addi	r11,r11,1
800101e0:	588000cc 	andi	r2,r11,3
800101e4:	42000204 	addi	r8,r8,8
800101e8:	103f391e 	bne	r2,zero,8000fed0 <_gp+0xfffdf15c>
800101ec:	00003e06 	br	800102e8 <_malloc_r+0x644>
800101f0:	8085883a 	add	r2,r16,r2
800101f4:	10c00117 	ldw	r3,4(r2)
800101f8:	81000317 	ldw	r4,12(r16)
800101fc:	81400217 	ldw	r5,8(r16)
80010200:	18c00054 	ori	r3,r3,1
80010204:	10c00115 	stw	r3,4(r2)
80010208:	29000315 	stw	r4,12(r5)
8001020c:	21400215 	stw	r5,8(r4)
80010210:	9809883a 	mov	r4,r19
80010214:	00200440 	call	80020044 <__malloc_unlock>
80010218:	80800204 	addi	r2,r16,8
8001021c:	003ec806 	br	8000fd40 <_gp+0xfffdefcc>
80010220:	3804d27a 	srli	r2,r7,9
80010224:	10c00168 	cmpgeui	r3,r2,5
80010228:	18002726 	beq	r3,zero,800102c8 <_malloc_r+0x624>
8001022c:	10c00568 	cmpgeui	r3,r2,21
80010230:	1800511e 	bne	r3,zero,80010378 <_malloc_r+0x6d4>
80010234:	11001704 	addi	r4,r2,92
80010238:	200890fa 	slli	r4,r4,3
8001023c:	108016c4 	addi	r2,r2,91
80010240:	9109883a 	add	r4,r18,r4
80010244:	20c00017 	ldw	r3,0(r4)
80010248:	213ffe04 	addi	r4,r4,-8
8001024c:	20c04126 	beq	r4,r3,80010354 <_malloc_r+0x6b0>
80010250:	023fff04 	movi	r8,-4
80010254:	18800117 	ldw	r2,4(r3)
80010258:	1204703a 	and	r2,r2,r8
8001025c:	3880022e 	bgeu	r7,r2,80010268 <_malloc_r+0x5c4>
80010260:	18c00217 	ldw	r3,8(r3)
80010264:	20fffb1e 	bne	r4,r3,80010254 <_gp+0xfffdf4e0>
80010268:	19000317 	ldw	r4,12(r3)
8001026c:	90800117 	ldw	r2,4(r18)
80010270:	81000315 	stw	r4,12(r16)
80010274:	80c00215 	stw	r3,8(r16)
80010278:	24000215 	stw	r16,8(r4)
8001027c:	1c000315 	stw	r16,12(r3)
80010280:	003efe06 	br	8000fe7c <_gp+0xfffdf108>
80010284:	11801704 	addi	r6,r2,92
80010288:	120016c4 	addi	r8,r2,91
8001028c:	300890fa 	slli	r4,r6,3
80010290:	003ec406 	br	8000fda4 <_gp+0xfffdf030>
80010294:	84805626 	beq	r16,r18,800103f0 <_malloc_r+0x74c>
80010298:	94000217 	ldw	r16,8(r18)
8001029c:	00bfff04 	movi	r2,-4
800102a0:	80c00117 	ldw	r3,4(r16)
800102a4:	1886703a 	and	r3,r3,r2
800102a8:	1c45c83a 	sub	r2,r3,r17
800102ac:	1c400236 	bltu	r3,r17,800102b8 <_malloc_r+0x614>
800102b0:	10c00408 	cmpgei	r3,r2,16
800102b4:	183f941e 	bne	r3,zero,80010108 <_gp+0xfffdf394>
800102b8:	9809883a 	mov	r4,r19
800102bc:	00200440 	call	80020044 <__malloc_unlock>
800102c0:	0005883a 	mov	r2,zero
800102c4:	003e9e06 	br	8000fd40 <_gp+0xfffdefcc>
800102c8:	3804d1ba 	srli	r2,r7,6
800102cc:	11000e44 	addi	r4,r2,57
800102d0:	200890fa 	slli	r4,r4,3
800102d4:	10800e04 	addi	r2,r2,56
800102d8:	003fd906 	br	80010240 <_gp+0xfffdf4cc>
800102dc:	52800017 	ldw	r10,0(r10)
800102e0:	31bfffc4 	addi	r6,r6,-1
800102e4:	50c0631e 	bne	r10,r3,80010474 <_malloc_r+0x7d0>
800102e8:	308000cc 	andi	r2,r6,3
800102ec:	50fffe04 	addi	r3,r10,-8
800102f0:	103ffa1e 	bne	r2,zero,800102dc <_gp+0xfffdf568>
800102f4:	90c00117 	ldw	r3,4(r18)
800102f8:	0104303a 	nor	r2,zero,r4
800102fc:	10c4703a 	and	r2,r2,r3
80010300:	90800115 	stw	r2,4(r18)
80010304:	2109883a 	add	r4,r4,r4
80010308:	113f2036 	bltu	r2,r4,8000ff8c <_gp+0xfffdf218>
8001030c:	203f1f26 	beq	r4,zero,8000ff8c <_gp+0xfffdf218>
80010310:	2086703a 	and	r3,r4,r2
80010314:	1800041e 	bne	r3,zero,80010328 <_malloc_r+0x684>
80010318:	2109883a 	add	r4,r4,r4
8001031c:	2086703a 	and	r3,r4,r2
80010320:	5ac00104 	addi	r11,r11,4
80010324:	183ffc26 	beq	r3,zero,80010318 <_gp+0xfffdf5a4>
80010328:	580d883a 	mov	r6,r11
8001032c:	003ee406 	br	8000fec0 <_gp+0xfffdf14c>
80010330:	a5000404 	addi	r20,r20,16
80010334:	003f2706 	br	8000ffd4 <_gp+0xfffdf260>
80010338:	10c05568 	cmpgeui	r3,r2,341
8001033c:	18001c1e 	bne	r3,zero,800103b0 <_malloc_r+0x70c>
80010340:	8804d3fa 	srli	r2,r17,15
80010344:	11801e04 	addi	r6,r2,120
80010348:	12001dc4 	addi	r8,r2,119
8001034c:	300890fa 	slli	r4,r6,3
80010350:	003e9406 	br	8000fda4 <_gp+0xfffdf030>
80010354:	100fd0ba 	srai	r7,r2,2
80010358:	00800044 	movi	r2,1
8001035c:	92000117 	ldw	r8,4(r18)
80010360:	11c4983a 	sll	r2,r2,r7
80010364:	1204b03a 	or	r2,r2,r8
80010368:	90800115 	stw	r2,4(r18)
8001036c:	003fc006 	br	80010270 <_gp+0xfffdf4fc>
80010370:	00840004 	movi	r2,4096
80010374:	003f3306 	br	80010044 <_gp+0xfffdf2d0>
80010378:	10c01568 	cmpgeui	r3,r2,85
8001037c:	1800221e 	bne	r3,zero,80010408 <_malloc_r+0x764>
80010380:	3804d33a 	srli	r2,r7,12
80010384:	11001bc4 	addi	r4,r2,111
80010388:	200890fa 	slli	r4,r4,3
8001038c:	10801b84 	addi	r2,r2,110
80010390:	003fab06 	br	80010240 <_gp+0xfffdf4cc>
80010394:	1903ffcc 	andi	r4,r3,4095
80010398:	203f1c1e 	bne	r4,zero,8001000c <_gp+0xfffdf298>
8001039c:	91000217 	ldw	r4,8(r18)
800103a0:	ad07883a 	add	r3,r21,r20
800103a4:	18c00054 	ori	r3,r3,1
800103a8:	20c00115 	stw	r3,4(r4)
800103ac:	003f4706 	br	800100cc <_gp+0xfffdf358>
800103b0:	10815568 	cmpgeui	r2,r2,1365
800103b4:	10001b1e 	bne	r2,zero,80010424 <_malloc_r+0x780>
800103b8:	8804d4ba 	srli	r2,r17,18
800103bc:	11801f44 	addi	r6,r2,125
800103c0:	12001f04 	addi	r8,r2,124
800103c4:	300890fa 	slli	r4,r6,3
800103c8:	003e7606 	br	8000fda4 <_gp+0xfffdf030>
800103cc:	00800044 	movi	r2,1
800103d0:	b0800115 	stw	r2,4(r22)
800103d4:	003fb806 	br	800102b8 <_gp+0xfffdf544>
800103d8:	00c00044 	movi	r3,1
800103dc:	0029883a 	mov	r20,zero
800103e0:	003f2306 	br	80010070 <_gp+0xfffdf2fc>
800103e4:	00a000f4 	movhi	r2,32771
800103e8:	15a35f15 	stw	r22,-29316(r2)
800103ec:	003f0f06 	br	8001002c <_gp+0xfffdf2b8>
800103f0:	00a000f4 	movhi	r2,32771
800103f4:	10aae117 	ldw	r2,-21628(r2)
800103f8:	012000f4 	movhi	r4,32771
800103fc:	a085883a 	add	r2,r20,r2
80010400:	20aae115 	stw	r2,-21628(r4)
80010404:	003f0106 	br	8001000c <_gp+0xfffdf298>
80010408:	10c05568 	cmpgeui	r3,r2,341
8001040c:	18000f1e 	bne	r3,zero,8001044c <_malloc_r+0x7a8>
80010410:	3804d3fa 	srli	r2,r7,15
80010414:	11001e04 	addi	r4,r2,120
80010418:	200890fa 	slli	r4,r4,3
8001041c:	10801dc4 	addi	r2,r2,119
80010420:	003f8706 	br	80010240 <_gp+0xfffdf4cc>
80010424:	0100fe04 	movi	r4,1016
80010428:	01801fc4 	movi	r6,127
8001042c:	02001f84 	movi	r8,126
80010430:	003e5c06 	br	8000fda4 <_gp+0xfffdf030>
80010434:	81400204 	addi	r5,r16,8
80010438:	9809883a 	mov	r4,r19
8001043c:	0017bb00 	call	80017bb0 <_free_r>
80010440:	00a000f4 	movhi	r2,32771
80010444:	10aae117 	ldw	r2,-21628(r2)
80010448:	003f2006 	br	800100cc <_gp+0xfffdf358>
8001044c:	10815568 	cmpgeui	r2,r2,1365
80010450:	1000051e 	bne	r2,zero,80010468 <_malloc_r+0x7c4>
80010454:	3804d4ba 	srli	r2,r7,18
80010458:	11001f44 	addi	r4,r2,125
8001045c:	200890fa 	slli	r4,r4,3
80010460:	10801f04 	addi	r2,r2,124
80010464:	003f7606 	br	80010240 <_gp+0xfffdf4cc>
80010468:	0100fe04 	movi	r4,1016
8001046c:	00801f84 	movi	r2,126
80010470:	003f7306 	br	80010240 <_gp+0xfffdf4cc>
80010474:	90800117 	ldw	r2,4(r18)
80010478:	003fa206 	br	80010304 <_gp+0xfffdf590>

8001047c <_mbtowc_r>:
8001047c:	00a000f4 	movhi	r2,32771
80010480:	10a35e17 	ldw	r2,-29320(r2)
80010484:	d8c00017 	ldw	r3,0(sp)
80010488:	10800d17 	ldw	r2,52(r2)
8001048c:	1000021e 	bne	r2,zero,80010498 <_mbtowc_r+0x1c>
80010490:	00a000b4 	movhi	r2,32770
80010494:	109d2904 	addi	r2,r2,29860
80010498:	d8c00015 	stw	r3,0(sp)
8001049c:	10803917 	ldw	r2,228(r2)
800104a0:	1000683a 	jmp	r2

800104a4 <__ascii_mbtowc>:
800104a4:	deffff04 	addi	sp,sp,-4
800104a8:	28000826 	beq	r5,zero,800104cc <__ascii_mbtowc+0x28>
800104ac:	30000926 	beq	r6,zero,800104d4 <__ascii_mbtowc+0x30>
800104b0:	38000b26 	beq	r7,zero,800104e0 <__ascii_mbtowc+0x3c>
800104b4:	30800003 	ldbu	r2,0(r6)
800104b8:	28800015 	stw	r2,0(r5)
800104bc:	30800003 	ldbu	r2,0(r6)
800104c0:	1004c03a 	cmpne	r2,r2,zero
800104c4:	dec00104 	addi	sp,sp,4
800104c8:	f800283a 	ret
800104cc:	d80b883a 	mov	r5,sp
800104d0:	303ff71e 	bne	r6,zero,800104b0 <_gp+0xfffdf73c>
800104d4:	0005883a 	mov	r2,zero
800104d8:	dec00104 	addi	sp,sp,4
800104dc:	f800283a 	ret
800104e0:	00bfff84 	movi	r2,-2
800104e4:	003ff706 	br	800104c4 <_gp+0xfffdf750>

800104e8 <memcpy>:
800104e8:	30c00430 	cmpltui	r3,r6,16
800104ec:	2005883a 	mov	r2,r4
800104f0:	1800321e 	bne	r3,zero,800105bc <memcpy+0xd4>
800104f4:	2906b03a 	or	r3,r5,r4
800104f8:	18c000cc 	andi	r3,r3,3
800104fc:	1800321e 	bne	r3,zero,800105c8 <memcpy+0xe0>
80010500:	32fffc04 	addi	r11,r6,-16
80010504:	5816d13a 	srli	r11,r11,4
80010508:	2811883a 	mov	r8,r5
8001050c:	200f883a 	mov	r7,r4
80010510:	5ac00044 	addi	r11,r11,1
80010514:	5816913a 	slli	r11,r11,4
80010518:	22c7883a 	add	r3,r4,r11
8001051c:	41000017 	ldw	r4,0(r8)
80010520:	42800117 	ldw	r10,4(r8)
80010524:	42400217 	ldw	r9,8(r8)
80010528:	42000404 	addi	r8,r8,16
8001052c:	39000015 	stw	r4,0(r7)
80010530:	413fff17 	ldw	r4,-4(r8)
80010534:	3a800115 	stw	r10,4(r7)
80010538:	3a400215 	stw	r9,8(r7)
8001053c:	39c00404 	addi	r7,r7,16
80010540:	393fff15 	stw	r4,-4(r7)
80010544:	19fff51e 	bne	r3,r7,8001051c <_gp+0xfffdf7a8>
80010548:	310003cc 	andi	r4,r6,15
8001054c:	21c00130 	cmpltui	r7,r4,4
80010550:	2acb883a 	add	r5,r5,r11
80010554:	38001e1e 	bne	r7,zero,800105d0 <memcpy+0xe8>
80010558:	213fff04 	addi	r4,r4,-4
8001055c:	200ed0ba 	srli	r7,r4,2
80010560:	1811883a 	mov	r8,r3
80010564:	2809883a 	mov	r4,r5
80010568:	381290ba 	slli	r9,r7,2
8001056c:	4a400104 	addi	r9,r9,4
80010570:	4953883a 	add	r9,r9,r5
80010574:	22800017 	ldw	r10,0(r4)
80010578:	42000104 	addi	r8,r8,4
8001057c:	21000104 	addi	r4,r4,4
80010580:	42bfff15 	stw	r10,-4(r8)
80010584:	227ffb1e 	bne	r4,r9,80010574 <_gp+0xfffdf800>
80010588:	39000044 	addi	r4,r7,1
8001058c:	200890ba 	slli	r4,r4,2
80010590:	318000cc 	andi	r6,r6,3
80010594:	1907883a 	add	r3,r3,r4
80010598:	290b883a 	add	r5,r5,r4
8001059c:	30000926 	beq	r6,zero,800105c4 <memcpy+0xdc>
800105a0:	198d883a 	add	r6,r3,r6
800105a4:	29400044 	addi	r5,r5,1
800105a8:	29ffffc3 	ldbu	r7,-1(r5)
800105ac:	18c00044 	addi	r3,r3,1
800105b0:	19ffffc5 	stb	r7,-1(r3)
800105b4:	19bffb1e 	bne	r3,r6,800105a4 <_gp+0xfffdf830>
800105b8:	f800283a 	ret
800105bc:	2007883a 	mov	r3,r4
800105c0:	303ff71e 	bne	r6,zero,800105a0 <_gp+0xfffdf82c>
800105c4:	f800283a 	ret
800105c8:	2007883a 	mov	r3,r4
800105cc:	003ff406 	br	800105a0 <_gp+0xfffdf82c>
800105d0:	200d883a 	mov	r6,r4
800105d4:	003ff106 	br	8001059c <_gp+0xfffdf828>

800105d8 <memset>:
800105d8:	20c000cc 	andi	r3,r4,3
800105dc:	2005883a 	mov	r2,r4
800105e0:	18003726 	beq	r3,zero,800106c0 <memset+0xe8>
800105e4:	31ffffc4 	addi	r7,r6,-1
800105e8:	30003326 	beq	r6,zero,800106b8 <memset+0xe0>
800105ec:	2811883a 	mov	r8,r5
800105f0:	2007883a 	mov	r3,r4
800105f4:	00000306 	br	80010604 <memset+0x2c>
800105f8:	39ffffc4 	addi	r7,r7,-1
800105fc:	39bfffe0 	cmpeqi	r6,r7,-1
80010600:	30002d1e 	bne	r6,zero,800106b8 <memset+0xe0>
80010604:	18c00044 	addi	r3,r3,1
80010608:	1a3fffc5 	stb	r8,-1(r3)
8001060c:	198000cc 	andi	r6,r3,3
80010610:	303ff91e 	bne	r6,zero,800105f8 <_gp+0xfffdf884>
80010614:	39000128 	cmpgeui	r4,r7,4
80010618:	20002226 	beq	r4,zero,800106a4 <memset+0xcc>
8001061c:	29003fcc 	andi	r4,r5,255
80010620:	200c923a 	slli	r6,r4,8
80010624:	3a000430 	cmpltui	r8,r7,16
80010628:	3108b03a 	or	r4,r6,r4
8001062c:	200c943a 	slli	r6,r4,16
80010630:	310cb03a 	or	r6,r6,r4
80010634:	4000251e 	bne	r8,zero,800106cc <memset+0xf4>
80010638:	3a3ffc04 	addi	r8,r7,-16
8001063c:	4010d13a 	srli	r8,r8,4
80010640:	42000044 	addi	r8,r8,1
80010644:	4010913a 	slli	r8,r8,4
80010648:	1a11883a 	add	r8,r3,r8
8001064c:	19800015 	stw	r6,0(r3)
80010650:	19800115 	stw	r6,4(r3)
80010654:	19800215 	stw	r6,8(r3)
80010658:	18c00404 	addi	r3,r3,16
8001065c:	19bfff15 	stw	r6,-4(r3)
80010660:	40fffa1e 	bne	r8,r3,8001064c <_gp+0xfffdf8d8>
80010664:	39c003cc 	andi	r7,r7,15
80010668:	39000130 	cmpltui	r4,r7,4
8001066c:	20000d1e 	bne	r4,zero,800106a4 <memset+0xcc>
80010670:	38ffff04 	addi	r3,r7,-4
80010674:	1806d0ba 	srli	r3,r3,2
80010678:	42400104 	addi	r9,r8,4
8001067c:	4009883a 	mov	r4,r8
80010680:	181490ba 	slli	r10,r3,2
80010684:	5253883a 	add	r9,r10,r9
80010688:	21800015 	stw	r6,0(r4)
8001068c:	21000104 	addi	r4,r4,4
80010690:	227ffd1e 	bne	r4,r9,80010688 <_gp+0xfffdf914>
80010694:	18c00044 	addi	r3,r3,1
80010698:	180690ba 	slli	r3,r3,2
8001069c:	39c000cc 	andi	r7,r7,3
800106a0:	40c7883a 	add	r3,r8,r3
800106a4:	38000526 	beq	r7,zero,800106bc <memset+0xe4>
800106a8:	19cf883a 	add	r7,r3,r7
800106ac:	18c00044 	addi	r3,r3,1
800106b0:	197fffc5 	stb	r5,-1(r3)
800106b4:	38fffd1e 	bne	r7,r3,800106ac <_gp+0xfffdf938>
800106b8:	f800283a 	ret
800106bc:	f800283a 	ret
800106c0:	2007883a 	mov	r3,r4
800106c4:	300f883a 	mov	r7,r6
800106c8:	003fd206 	br	80010614 <_gp+0xfffdf8a0>
800106cc:	1811883a 	mov	r8,r3
800106d0:	003fe706 	br	80010670 <_gp+0xfffdf8fc>

800106d4 <validate_structure>:
800106d4:	defffb04 	addi	sp,sp,-20
800106d8:	dc800215 	stw	r18,8(sp)
800106dc:	2025883a 	mov	r18,r4
800106e0:	21000017 	ldw	r4,0(r4)
800106e4:	dfc00415 	stw	ra,16(sp)
800106e8:	dcc00315 	stw	r19,12(sp)
800106ec:	dc400115 	stw	r17,4(sp)
800106f0:	dc000015 	stw	r16,0(sp)
800106f4:	20800f28 	cmpgeui	r2,r4,60
800106f8:	10007c1e 	bne	r2,zero,800108ec <validate_structure+0x218>
800106fc:	91000117 	ldw	r4,4(r18)
80010700:	20800f28 	cmpgeui	r2,r4,60
80010704:	1000711e 	bne	r2,zero,800108cc <validate_structure+0x1f8>
80010708:	91000217 	ldw	r4,8(r18)
8001070c:	20800628 	cmpgeui	r2,r4,24
80010710:	1000661e 	bne	r2,zero,800108ac <validate_structure+0x1d8>
80010714:	94000417 	ldw	r16,16(r18)
80010718:	80800328 	cmpgeui	r2,r16,12
8001071c:	1000591e 	bne	r2,zero,80010884 <validate_structure+0x1b0>
80010720:	94400517 	ldw	r17,20(r18)
80010724:	888000cc 	andi	r2,r17,3
80010728:	10000a1e 	bne	r2,zero,80010754 <validate_structure+0x80>
8001072c:	01401904 	movi	r5,100
80010730:	8809883a 	mov	r4,r17
80010734:	000d5100 	call	8000d510 <__modsi3>
80010738:	10000226 	beq	r2,zero,80010744 <validate_structure+0x70>
8001073c:	01800744 	movi	r6,29
80010740:	00000506 	br	80010758 <validate_structure+0x84>
80010744:	01406404 	movi	r5,400
80010748:	8901db04 	addi	r4,r17,1900
8001074c:	000d5100 	call	8000d510 <__modsi3>
80010750:	103ffa26 	beq	r2,zero,8001073c <_gp+0xfffdf9c8>
80010754:	01800704 	movi	r6,28
80010758:	94400317 	ldw	r17,12(r18)
8001075c:	04401e0e 	bge	zero,r17,800107d8 <validate_structure+0x104>
80010760:	04e000b4 	movhi	r19,32770
80010764:	9cda9204 	addi	r19,r19,27208
80010768:	800890ba 	slli	r4,r16,2
8001076c:	80c00044 	addi	r3,r16,1
80010770:	9909883a 	add	r4,r19,r4
80010774:	00000806 	br	80010798 <validate_structure+0xc4>
80010778:	20800017 	ldw	r2,0(r4)
8001077c:	1440250e 	bge	r2,r17,80010814 <validate_structure+0x140>
80010780:	88a3c83a 	sub	r17,r17,r2
80010784:	90c00415 	stw	r3,16(r18)
80010788:	94400315 	stw	r17,12(r18)
8001078c:	28002a26 	beq	r5,zero,80010838 <validate_structure+0x164>
80010790:	18c00044 	addi	r3,r3,1
80010794:	21000104 	addi	r4,r4,4
80010798:	188000a0 	cmpeqi	r2,r3,2
8001079c:	19400318 	cmpnei	r5,r3,12
800107a0:	103ff526 	beq	r2,zero,80010778 <_gp+0xfffdfa04>
800107a4:	34401b0e 	bge	r6,r17,80010814 <validate_structure+0x140>
800107a8:	89a3c83a 	sub	r17,r17,r6
800107ac:	94400315 	stw	r17,12(r18)
800107b0:	90c00415 	stw	r3,16(r18)
800107b4:	003ff606 	br	80010790 <_gp+0xfffdfa1c>
800107b8:	80800060 	cmpeqi	r2,r16,1
800107bc:	10001c1e 	bne	r2,zero,80010830 <validate_structure+0x15c>
800107c0:	800690ba 	slli	r3,r16,2
800107c4:	00a000b4 	movhi	r2,32770
800107c8:	1885883a 	add	r2,r3,r2
800107cc:	109a9217 	ldw	r2,27208(r2)
800107d0:	88a3883a 	add	r17,r17,r2
800107d4:	04400d16 	blt	zero,r17,8001080c <validate_structure+0x138>
800107d8:	843fffc4 	addi	r16,r16,-1
800107dc:	80bfffd8 	cmpnei	r2,r16,-1
800107e0:	103ff51e 	bne	r2,zero,800107b8 <_gp+0xfffdfa44>
800107e4:	94000517 	ldw	r16,20(r18)
800107e8:	813fffc4 	addi	r4,r16,-1
800107ec:	91000515 	stw	r4,20(r18)
800107f0:	208000cc 	andi	r2,r4,3
800107f4:	10001926 	beq	r2,zero,8001085c <validate_structure+0x188>
800107f8:	01800704 	movi	r6,28
800107fc:	008007c4 	movi	r2,31
80010800:	88a3883a 	add	r17,r17,r2
80010804:	040002c4 	movi	r16,11
80010808:	047ff30e 	bge	zero,r17,800107d8 <_gp+0xfffdfa64>
8001080c:	94000415 	stw	r16,16(r18)
80010810:	94400315 	stw	r17,12(r18)
80010814:	dfc00417 	ldw	ra,16(sp)
80010818:	dcc00317 	ldw	r19,12(sp)
8001081c:	dc800217 	ldw	r18,8(sp)
80010820:	dc400117 	ldw	r17,4(sp)
80010824:	dc000017 	ldw	r16,0(sp)
80010828:	dec00504 	addi	sp,sp,20
8001082c:	f800283a 	ret
80010830:	3005883a 	mov	r2,r6
80010834:	003fe606 	br	800107d0 <_gp+0xfffdfa5c>
80010838:	94000517 	ldw	r16,20(r18)
8001083c:	90000415 	stw	zero,16(r18)
80010840:	81000044 	addi	r4,r16,1
80010844:	91000515 	stw	r4,20(r18)
80010848:	208000cc 	andi	r2,r4,3
8001084c:	10000826 	beq	r2,zero,80010870 <validate_structure+0x19c>
80010850:	01800704 	movi	r6,28
80010854:	0021883a 	mov	r16,zero
80010858:	003fc306 	br	80010768 <_gp+0xfffdf9f4>
8001085c:	01401904 	movi	r5,100
80010860:	000d5100 	call	8000d510 <__modsi3>
80010864:	10002926 	beq	r2,zero,8001090c <validate_structure+0x238>
80010868:	01800744 	movi	r6,29
8001086c:	003fe306 	br	800107fc <_gp+0xfffdfa88>
80010870:	01401904 	movi	r5,100
80010874:	000d5100 	call	8000d510 <__modsi3>
80010878:	10002926 	beq	r2,zero,80010920 <validate_structure+0x24c>
8001087c:	01800744 	movi	r6,29
80010880:	003ff406 	br	80010854 <_gp+0xfffdfae0>
80010884:	8009883a 	mov	r4,r16
80010888:	01400304 	movi	r5,12
8001088c:	0015b780 	call	80015b78 <div>
80010890:	94400517 	ldw	r17,20(r18)
80010894:	1821883a 	mov	r16,r3
80010898:	88a3883a 	add	r17,r17,r2
8001089c:	94400515 	stw	r17,20(r18)
800108a0:	18002416 	blt	r3,zero,80010934 <validate_structure+0x260>
800108a4:	90c00415 	stw	r3,16(r18)
800108a8:	003f9e06 	br	80010724 <_gp+0xfffdf9b0>
800108ac:	01400604 	movi	r5,24
800108b0:	0015b780 	call	80015b78 <div>
800108b4:	91000317 	ldw	r4,12(r18)
800108b8:	2085883a 	add	r2,r4,r2
800108bc:	90800315 	stw	r2,12(r18)
800108c0:	18002b16 	blt	r3,zero,80010970 <validate_structure+0x29c>
800108c4:	90c00215 	stw	r3,8(r18)
800108c8:	003f9206 	br	80010714 <_gp+0xfffdf9a0>
800108cc:	01400f04 	movi	r5,60
800108d0:	0015b780 	call	80015b78 <div>
800108d4:	91000217 	ldw	r4,8(r18)
800108d8:	2089883a 	add	r4,r4,r2
800108dc:	91000215 	stw	r4,8(r18)
800108e0:	18001e16 	blt	r3,zero,8001095c <validate_structure+0x288>
800108e4:	90c00115 	stw	r3,4(r18)
800108e8:	003f8806 	br	8001070c <_gp+0xfffdf998>
800108ec:	01400f04 	movi	r5,60
800108f0:	0015b780 	call	80015b78 <div>
800108f4:	91000117 	ldw	r4,4(r18)
800108f8:	2089883a 	add	r4,r4,r2
800108fc:	91000115 	stw	r4,4(r18)
80010900:	18001116 	blt	r3,zero,80010948 <validate_structure+0x274>
80010904:	90c00015 	stw	r3,0(r18)
80010908:	003f7d06 	br	80010700 <_gp+0xfffdf98c>
8001090c:	01406404 	movi	r5,400
80010910:	8101dac4 	addi	r4,r16,1899
80010914:	000d5100 	call	8000d510 <__modsi3>
80010918:	103fb71e 	bne	r2,zero,800107f8 <_gp+0xfffdfa84>
8001091c:	003fd206 	br	80010868 <_gp+0xfffdfaf4>
80010920:	01406404 	movi	r5,400
80010924:	8101db44 	addi	r4,r16,1901
80010928:	000d5100 	call	8000d510 <__modsi3>
8001092c:	103fc81e 	bne	r2,zero,80010850 <_gp+0xfffdfadc>
80010930:	003fd206 	br	8001087c <_gp+0xfffdfb08>
80010934:	1c000304 	addi	r16,r3,12
80010938:	8c7fffc4 	addi	r17,r17,-1
8001093c:	94000415 	stw	r16,16(r18)
80010940:	94400515 	stw	r17,20(r18)
80010944:	003f7706 	br	80010724 <_gp+0xfffdf9b0>
80010948:	18c00f04 	addi	r3,r3,60
8001094c:	213fffc4 	addi	r4,r4,-1
80010950:	90c00015 	stw	r3,0(r18)
80010954:	91000115 	stw	r4,4(r18)
80010958:	003f6906 	br	80010700 <_gp+0xfffdf98c>
8001095c:	18c00f04 	addi	r3,r3,60
80010960:	213fffc4 	addi	r4,r4,-1
80010964:	90c00115 	stw	r3,4(r18)
80010968:	91000215 	stw	r4,8(r18)
8001096c:	003f6706 	br	8001070c <_gp+0xfffdf998>
80010970:	18c00604 	addi	r3,r3,24
80010974:	10bfffc4 	addi	r2,r2,-1
80010978:	90c00215 	stw	r3,8(r18)
8001097c:	90800315 	stw	r2,12(r18)
80010980:	003f6406 	br	80010714 <_gp+0xfffdf9a0>

80010984 <mktime>:
80010984:	defff804 	addi	sp,sp,-32
80010988:	dfc00715 	stw	ra,28(sp)
8001098c:	dd400515 	stw	r21,20(sp)
80010990:	dd000415 	stw	r20,16(sp)
80010994:	dcc00315 	stw	r19,12(sp)
80010998:	dc800215 	stw	r18,8(sp)
8001099c:	dc400115 	stw	r17,4(sp)
800109a0:	2025883a 	mov	r18,r4
800109a4:	dd800615 	stw	r22,24(sp)
800109a8:	dc000015 	stw	r16,0(sp)
800109ac:	00185b40 	call	800185b4 <__gettzinfo>
800109b0:	9009883a 	mov	r4,r18
800109b4:	1029883a 	mov	r20,r2
800109b8:	00106d40 	call	800106d4 <validate_structure>
800109bc:	90c00417 	ldw	r3,16(r18)
800109c0:	90800117 	ldw	r2,4(r18)
800109c4:	95400217 	ldw	r21,8(r18)
800109c8:	180c90ba 	slli	r6,r3,2
800109cc:	012000b4 	movhi	r4,32770
800109d0:	10800f24 	muli	r2,r2,60
800109d4:	91400017 	ldw	r5,0(r18)
800109d8:	94400317 	ldw	r17,12(r18)
800109dc:	3109883a 	add	r4,r6,r4
800109e0:	ad438424 	muli	r21,r21,3600
800109e4:	211a8617 	ldw	r4,27160(r4)
800109e8:	1145883a 	add	r2,r2,r5
800109ec:	8c7fffc4 	addi	r17,r17,-1
800109f0:	18c00088 	cmpgei	r3,r3,2
800109f4:	94c00517 	ldw	r19,20(r18)
800109f8:	156b883a 	add	r21,r2,r21
800109fc:	8923883a 	add	r17,r17,r4
80010a00:	18000226 	beq	r3,zero,80010a0c <mktime+0x88>
80010a04:	988000cc 	andi	r2,r19,3
80010a08:	10006526 	beq	r2,zero,80010ba0 <mktime+0x21c>
80010a0c:	98c9c404 	addi	r3,r19,10000
80010a10:	94400715 	stw	r17,28(r18)
80010a14:	18d38868 	cmpgeui	r3,r3,20001
80010a18:	1800b11e 	bne	r3,zero,80010ce0 <mktime+0x35c>
80010a1c:	988011d0 	cmplti	r2,r19,71
80010a20:	10003f1e 	bne	r2,zero,80010b20 <mktime+0x19c>
80010a24:	04001184 	movi	r16,70
80010a28:	00000a06 	br	80010a54 <mktime+0xd0>
80010a2c:	000d5100 	call	8000d510 <__modsi3>
80010a30:	8101db04 	addi	r4,r16,1900
80010a34:	01406404 	movi	r5,400
80010a38:	1000021e 	bne	r2,zero,80010a44 <mktime+0xc0>
80010a3c:	000d5100 	call	8000d510 <__modsi3>
80010a40:	1000081e 	bne	r2,zero,80010a64 <mktime+0xe0>
80010a44:	00805b84 	movi	r2,366
80010a48:	84000044 	addi	r16,r16,1
80010a4c:	88a3883a 	add	r17,r17,r2
80010a50:	84c00826 	beq	r16,r19,80010a74 <mktime+0xf0>
80010a54:	808000cc 	andi	r2,r16,3
80010a58:	8009883a 	mov	r4,r16
80010a5c:	01401904 	movi	r5,100
80010a60:	103ff226 	beq	r2,zero,80010a2c <_gp+0xfffdfcb8>
80010a64:	00805b44 	movi	r2,365
80010a68:	84000044 	addi	r16,r16,1
80010a6c:	88a3883a 	add	r17,r17,r2
80010a70:	84fff81e 	bne	r16,r19,80010a54 <_gp+0xfffdfce0>
80010a74:	00800074 	movhi	r2,1
80010a78:	10946004 	addi	r2,r2,20864
80010a7c:	8885383a 	mul	r2,r17,r2
80010a80:	156b883a 	add	r21,r2,r21
80010a84:	00134000 	call	80013400 <__tz_lock>
80010a88:	00134080 	call	80013408 <_tzset_unlocked>
80010a8c:	00a000f4 	movhi	r2,32771
80010a90:	14ead617 	ldw	r19,-21672(r2)
80010a94:	98005b26 	beq	r19,zero,80010c04 <mktime+0x280>
80010a98:	91000517 	ldw	r4,20(r18)
80010a9c:	95800817 	ldw	r22,32(r18)
80010aa0:	2101db04 	addi	r4,r4,1900
80010aa4:	b027883a 	mov	r19,r22
80010aa8:	0580010e 	bge	zero,r22,80010ab0 <mktime+0x12c>
80010aac:	04c00044 	movi	r19,1
80010ab0:	a0800117 	ldw	r2,4(r20)
80010ab4:	11004226 	beq	r2,r4,80010bc0 <mktime+0x23c>
80010ab8:	00131d80 	call	800131d8 <__tzcalc_limits>
80010abc:	1000401e 	bne	r2,zero,80010bc0 <mktime+0x23c>
80010ac0:	98800060 	cmpeqi	r2,r19,1
80010ac4:	10004f26 	beq	r2,zero,80010c04 <mktime+0x280>
80010ac8:	a0c00f17 	ldw	r3,60(r20)
80010acc:	a8eb883a 	add	r21,r21,r3
80010ad0:	04c00044 	movi	r19,1
80010ad4:	00134040 	call	80013404 <__tz_unlock>
80010ad8:	014001c4 	movi	r5,7
80010adc:	94c00815 	stw	r19,32(r18)
80010ae0:	89000104 	addi	r4,r17,4
80010ae4:	000d5100 	call	8000d510 <__modsi3>
80010ae8:	1000010e 	bge	r2,zero,80010af0 <mktime+0x16c>
80010aec:	108001c4 	addi	r2,r2,7
80010af0:	90800615 	stw	r2,24(r18)
80010af4:	a805883a 	mov	r2,r21
80010af8:	dfc00717 	ldw	ra,28(sp)
80010afc:	dd800617 	ldw	r22,24(sp)
80010b00:	dd400517 	ldw	r21,20(sp)
80010b04:	dd000417 	ldw	r20,16(sp)
80010b08:	dcc00317 	ldw	r19,12(sp)
80010b0c:	dc800217 	ldw	r18,8(sp)
80010b10:	dc400117 	ldw	r17,4(sp)
80010b14:	dc000017 	ldw	r16,0(sp)
80010b18:	dec00804 	addi	sp,sp,32
80010b1c:	f800283a 	ret
80010b20:	988011a0 	cmpeqi	r2,r19,70
80010b24:	10003a1e 	bne	r2,zero,80010c10 <mktime+0x28c>
80010b28:	98801160 	cmpeqi	r2,r19,69
80010b2c:	04001144 	movi	r16,69
80010b30:	1000181e 	bne	r2,zero,80010b94 <mktime+0x210>
80010b34:	808000cc 	andi	r2,r16,3
80010b38:	8009883a 	mov	r4,r16
80010b3c:	01401904 	movi	r5,100
80010b40:	1000061e 	bne	r2,zero,80010b5c <mktime+0x1d8>
80010b44:	000d5100 	call	8000d510 <__modsi3>
80010b48:	8101db04 	addi	r4,r16,1900
80010b4c:	01406404 	movi	r5,400
80010b50:	1000191e 	bne	r2,zero,80010bb8 <mktime+0x234>
80010b54:	000d5100 	call	8000d510 <__modsi3>
80010b58:	10001726 	beq	r2,zero,80010bb8 <mktime+0x234>
80010b5c:	00805b44 	movi	r2,365
80010b60:	843fffc4 	addi	r16,r16,-1
80010b64:	88a3c83a 	sub	r17,r17,r2
80010b68:	84fff21e 	bne	r16,r19,80010b34 <_gp+0xfffdfdc0>
80010b6c:	808000cc 	andi	r2,r16,3
80010b70:	1000081e 	bne	r2,zero,80010b94 <mktime+0x210>
80010b74:	01401904 	movi	r5,100
80010b78:	8009883a 	mov	r4,r16
80010b7c:	000d5100 	call	8000d510 <__modsi3>
80010b80:	1000551e 	bne	r2,zero,80010cd8 <mktime+0x354>
80010b84:	01406404 	movi	r5,400
80010b88:	8101db04 	addi	r4,r16,1900
80010b8c:	000d5100 	call	8000d510 <__modsi3>
80010b90:	10005126 	beq	r2,zero,80010cd8 <mktime+0x354>
80010b94:	00805b44 	movi	r2,365
80010b98:	88a3c83a 	sub	r17,r17,r2
80010b9c:	003fb506 	br	80010a74 <_gp+0xfffdfd00>
80010ba0:	01401904 	movi	r5,100
80010ba4:	9809883a 	mov	r4,r19
80010ba8:	000d5100 	call	8000d510 <__modsi3>
80010bac:	10001a26 	beq	r2,zero,80010c18 <mktime+0x294>
80010bb0:	8c400044 	addi	r17,r17,1
80010bb4:	003f9506 	br	80010a0c <_gp+0xfffdfc98>
80010bb8:	00805b84 	movi	r2,366
80010bbc:	003fe806 	br	80010b60 <_gp+0xfffdfdec>
80010bc0:	a1000e17 	ldw	r4,56(r20)
80010bc4:	a0800817 	ldw	r2,32(r20)
80010bc8:	a0c00f17 	ldw	r3,60(r20)
80010bcc:	208bc83a 	sub	r5,r4,r2
80010bd0:	a9400216 	blt	r21,r5,80010bdc <mktime+0x258>
80010bd4:	20c9c83a 	sub	r4,r4,r3
80010bd8:	a93fb916 	blt	r21,r4,80010ac0 <_gp+0xfffdfd4c>
80010bdc:	a1000717 	ldw	r4,28(r20)
80010be0:	a4c00017 	ldw	r19,0(r20)
80010be4:	20c9c83a 	sub	r4,r4,r3
80010be8:	98001026 	beq	r19,zero,80010c2c <mktime+0x2a8>
80010bec:	a9003716 	blt	r21,r4,80010ccc <mktime+0x348>
80010bf0:	a940360e 	bge	r21,r5,80010ccc <mktime+0x348>
80010bf4:	b03fb51e 	bne	r22,zero,80010acc <_gp+0xfffdfd58>
80010bf8:	10c5c83a 	sub	r2,r2,r3
80010bfc:	04c00044 	movi	r19,1
80010c00:	00001006 	br	80010c44 <mktime+0x2c0>
80010c04:	a0800817 	ldw	r2,32(r20)
80010c08:	a8ab883a 	add	r21,r21,r2
80010c0c:	003fb106 	br	80010ad4 <_gp+0xfffdfd60>
80010c10:	04001184 	movi	r16,70
80010c14:	003f9706 	br	80010a74 <_gp+0xfffdfd00>
80010c18:	01406404 	movi	r5,400
80010c1c:	9901db04 	addi	r4,r19,1900
80010c20:	000d5100 	call	8000d510 <__modsi3>
80010c24:	103f791e 	bne	r2,zero,80010a0c <_gp+0xfffdfc98>
80010c28:	003fe106 	br	80010bb0 <_gp+0xfffdfe3c>
80010c2c:	a900240e 	bge	r21,r4,80010cc0 <mktime+0x33c>
80010c30:	a9402316 	blt	r21,r5,80010cc0 <mktime+0x33c>
80010c34:	05bff40e 	bge	zero,r22,80010c08 <_gp+0xfffdfe94>
80010c38:	10c5c83a 	sub	r2,r2,r3
80010c3c:	0085c83a 	sub	r2,zero,r2
80010c40:	0027883a 	mov	r19,zero
80010c44:	90c00017 	ldw	r3,0(r18)
80010c48:	9009883a 	mov	r4,r18
80010c4c:	95800317 	ldw	r22,12(r18)
80010c50:	1887883a 	add	r3,r3,r2
80010c54:	90c00015 	stw	r3,0(r18)
80010c58:	a8ab883a 	add	r21,r21,r2
80010c5c:	00106d40 	call	800106d4 <validate_structure>
80010c60:	90800317 	ldw	r2,12(r18)
80010c64:	1585c83a 	sub	r2,r2,r22
80010c68:	103f9526 	beq	r2,zero,80010ac0 <_gp+0xfffdfd4c>
80010c6c:	10c00088 	cmpgei	r3,r2,2
80010c70:	18002c26 	beq	r3,zero,80010d24 <mktime+0x3a0>
80010c74:	00bfffc4 	movi	r2,-1
80010c78:	95800717 	ldw	r22,28(r18)
80010c7c:	88a3883a 	add	r17,r17,r2
80010c80:	15ad883a 	add	r22,r2,r22
80010c84:	b0001a16 	blt	r22,zero,80010cf0 <mktime+0x36c>
80010c88:	808000cc 	andi	r2,r16,3
80010c8c:	1000161e 	bne	r2,zero,80010ce8 <mktime+0x364>
80010c90:	01401904 	movi	r5,100
80010c94:	8009883a 	mov	r4,r16
80010c98:	000d5100 	call	8000d510 <__modsi3>
80010c9c:	1000041e 	bne	r2,zero,80010cb0 <mktime+0x32c>
80010ca0:	01406404 	movi	r5,400
80010ca4:	8101db04 	addi	r4,r16,1900
80010ca8:	000d5100 	call	8000d510 <__modsi3>
80010cac:	10000e1e 	bne	r2,zero,80010ce8 <mktime+0x364>
80010cb0:	00805b84 	movi	r2,366
80010cb4:	b0801f0e 	bge	r22,r2,80010d34 <mktime+0x3b0>
80010cb8:	95800715 	stw	r22,28(r18)
80010cbc:	003f8006 	br	80010ac0 <_gp+0xfffdfd4c>
80010cc0:	b03f8216 	blt	r22,zero,80010acc <_gp+0xfffdfd58>
80010cc4:	b03f811e 	bne	r22,zero,80010acc <_gp+0xfffdfd58>
80010cc8:	003fcb06 	br	80010bf8 <_gp+0xfffdfe84>
80010ccc:	05bfda16 	blt	zero,r22,80010c38 <_gp+0xfffdfec4>
80010cd0:	0027883a 	mov	r19,zero
80010cd4:	003fcc06 	br	80010c08 <_gp+0xfffdfe94>
80010cd8:	00805b84 	movi	r2,366
80010cdc:	003fae06 	br	80010b98 <_gp+0xfffdfe24>
80010ce0:	057fffc4 	movi	r21,-1
80010ce4:	003f8306 	br	80010af4 <_gp+0xfffdfd80>
80010ce8:	00805b44 	movi	r2,365
80010cec:	003ff106 	br	80010cb4 <_gp+0xfffdff40>
80010cf0:	813fffc4 	addi	r4,r16,-1
80010cf4:	208000cc 	andi	r2,r4,3
80010cf8:	1000101e 	bne	r2,zero,80010d3c <mktime+0x3b8>
80010cfc:	01401904 	movi	r5,100
80010d00:	000d5100 	call	8000d510 <__modsi3>
80010d04:	1000041e 	bne	r2,zero,80010d18 <mktime+0x394>
80010d08:	01406404 	movi	r5,400
80010d0c:	8101dac4 	addi	r4,r16,1899
80010d10:	000d5100 	call	8000d510 <__modsi3>
80010d14:	1000091e 	bne	r2,zero,80010d3c <mktime+0x3b8>
80010d18:	00805b44 	movi	r2,365
80010d1c:	90800715 	stw	r2,28(r18)
80010d20:	003f6706 	br	80010ac0 <_gp+0xfffdfd4c>
80010d24:	10ffffd0 	cmplti	r3,r2,-1
80010d28:	183fd326 	beq	r3,zero,80010c78 <_gp+0xfffdff04>
80010d2c:	00800044 	movi	r2,1
80010d30:	003fd106 	br	80010c78 <_gp+0xfffdff04>
80010d34:	b085c83a 	sub	r2,r22,r2
80010d38:	003ff806 	br	80010d1c <_gp+0xfffdffa8>
80010d3c:	00805b04 	movi	r2,364
80010d40:	003ff606 	br	80010d1c <_gp+0xfffdffa8>

80010d44 <_printf_r>:
80010d44:	defffd04 	addi	sp,sp,-12
80010d48:	2805883a 	mov	r2,r5
80010d4c:	dfc00015 	stw	ra,0(sp)
80010d50:	d9800115 	stw	r6,4(sp)
80010d54:	d9c00215 	stw	r7,8(sp)
80010d58:	21400217 	ldw	r5,8(r4)
80010d5c:	d9c00104 	addi	r7,sp,4
80010d60:	100d883a 	mov	r6,r2
80010d64:	00139440 	call	80013944 <___vfprintf_internal_r>
80010d68:	dfc00017 	ldw	ra,0(sp)
80010d6c:	dec00304 	addi	sp,sp,12
80010d70:	f800283a 	ret

80010d74 <printf>:
80010d74:	defffc04 	addi	sp,sp,-16
80010d78:	dfc00015 	stw	ra,0(sp)
80010d7c:	d9400115 	stw	r5,4(sp)
80010d80:	d9800215 	stw	r6,8(sp)
80010d84:	d9c00315 	stw	r7,12(sp)
80010d88:	00a000f4 	movhi	r2,32771
80010d8c:	10a35e17 	ldw	r2,-29320(r2)
80010d90:	200b883a 	mov	r5,r4
80010d94:	d9800104 	addi	r6,sp,4
80010d98:	11000217 	ldw	r4,8(r2)
80010d9c:	00158f80 	call	800158f8 <__vfprintf_internal>
80010da0:	dfc00017 	ldw	ra,0(sp)
80010da4:	dec00404 	addi	sp,sp,16
80010da8:	f800283a 	ret

80010dac <_putchar_r>:
80010dac:	21800217 	ldw	r6,8(r4)
80010db0:	00199381 	jmpi	80019938 <_putc_r>

80010db4 <putchar>:
80010db4:	00a000f4 	movhi	r2,32771
80010db8:	10a35e17 	ldw	r2,-29320(r2)
80010dbc:	200b883a 	mov	r5,r4
80010dc0:	11800217 	ldw	r6,8(r2)
80010dc4:	1009883a 	mov	r4,r2
80010dc8:	00199381 	jmpi	80019938 <_putc_r>

80010dcc <_puts_r>:
80010dcc:	defff504 	addi	sp,sp,-44
80010dd0:	dc000815 	stw	r16,32(sp)
80010dd4:	2021883a 	mov	r16,r4
80010dd8:	2809883a 	mov	r4,r5
80010ddc:	dc400915 	stw	r17,36(sp)
80010de0:	dfc00a15 	stw	ra,40(sp)
80010de4:	2823883a 	mov	r17,r5
80010de8:	00111940 	call	80011194 <strlen>
80010dec:	11000044 	addi	r4,r2,1
80010df0:	d8800515 	stw	r2,20(sp)
80010df4:	00800044 	movi	r2,1
80010df8:	00e000b4 	movhi	r3,32770
80010dfc:	d8800715 	stw	r2,28(sp)
80010e00:	d8800404 	addi	r2,sp,16
80010e04:	18da9e04 	addi	r3,r3,27256
80010e08:	d8800115 	stw	r2,4(sp)
80010e0c:	00800084 	movi	r2,2
80010e10:	dc400415 	stw	r17,16(sp)
80010e14:	d8c00615 	stw	r3,24(sp)
80010e18:	d9000315 	stw	r4,12(sp)
80010e1c:	d8800215 	stw	r2,8(sp)
80010e20:	81400217 	ldw	r5,8(r16)
80010e24:	80000226 	beq	r16,zero,80010e30 <_puts_r+0x64>
80010e28:	80800e17 	ldw	r2,56(r16)
80010e2c:	10001326 	beq	r2,zero,80010e7c <_puts_r+0xb0>
80010e30:	2880030b 	ldhu	r2,12(r5)
80010e34:	10c8000c 	andi	r3,r2,8192
80010e38:	1800061e 	bne	r3,zero,80010e54 <_puts_r+0x88>
80010e3c:	28c01917 	ldw	r3,100(r5)
80010e40:	0137ffc4 	movi	r4,-8193
80010e44:	10880014 	ori	r2,r2,8192
80010e48:	1906703a 	and	r3,r3,r4
80010e4c:	2880030d 	sth	r2,12(r5)
80010e50:	28c01915 	stw	r3,100(r5)
80010e54:	d9800104 	addi	r6,sp,4
80010e58:	8009883a 	mov	r4,r16
80010e5c:	0017ea00 	call	80017ea0 <__sfvwrite_r>
80010e60:	10000b1e 	bne	r2,zero,80010e90 <_puts_r+0xc4>
80010e64:	00800284 	movi	r2,10
80010e68:	dfc00a17 	ldw	ra,40(sp)
80010e6c:	dc400917 	ldw	r17,36(sp)
80010e70:	dc000817 	ldw	r16,32(sp)
80010e74:	dec00b04 	addi	sp,sp,44
80010e78:	f800283a 	ret
80010e7c:	8009883a 	mov	r4,r16
80010e80:	d9400015 	stw	r5,0(sp)
80010e84:	0017a4c0 	call	80017a4c <__sinit>
80010e88:	d9400017 	ldw	r5,0(sp)
80010e8c:	003fe806 	br	80010e30 <_gp+0xfffe00bc>
80010e90:	00bfffc4 	movi	r2,-1
80010e94:	003ff406 	br	80010e68 <_gp+0xfffe00f4>

80010e98 <puts>:
80010e98:	00a000f4 	movhi	r2,32771
80010e9c:	200b883a 	mov	r5,r4
80010ea0:	11235e17 	ldw	r4,-29320(r2)
80010ea4:	0010dcc1 	jmpi	80010dcc <_puts_r>

80010ea8 <__srget_r>:
80010ea8:	defffd04 	addi	sp,sp,-12
80010eac:	dc400115 	stw	r17,4(sp)
80010eb0:	dc000015 	stw	r16,0(sp)
80010eb4:	dfc00215 	stw	ra,8(sp)
80010eb8:	2023883a 	mov	r17,r4
80010ebc:	2821883a 	mov	r16,r5
80010ec0:	20000226 	beq	r4,zero,80010ecc <__srget_r+0x24>
80010ec4:	20800e17 	ldw	r2,56(r4)
80010ec8:	10001026 	beq	r2,zero,80010f0c <__srget_r+0x64>
80010ecc:	800b883a 	mov	r5,r16
80010ed0:	8809883a 	mov	r4,r17
80010ed4:	001a0780 	call	8001a078 <__srefill_r>
80010ed8:	10000e1e 	bne	r2,zero,80010f14 <__srget_r+0x6c>
80010edc:	80c00017 	ldw	r3,0(r16)
80010ee0:	80800117 	ldw	r2,4(r16)
80010ee4:	19000044 	addi	r4,r3,1
80010ee8:	10bfffc4 	addi	r2,r2,-1
80010eec:	80800115 	stw	r2,4(r16)
80010ef0:	81000015 	stw	r4,0(r16)
80010ef4:	18800003 	ldbu	r2,0(r3)
80010ef8:	dfc00217 	ldw	ra,8(sp)
80010efc:	dc400117 	ldw	r17,4(sp)
80010f00:	dc000017 	ldw	r16,0(sp)
80010f04:	dec00304 	addi	sp,sp,12
80010f08:	f800283a 	ret
80010f0c:	0017a4c0 	call	80017a4c <__sinit>
80010f10:	003fee06 	br	80010ecc <_gp+0xfffe0158>
80010f14:	00bfffc4 	movi	r2,-1
80010f18:	003ff706 	br	80010ef8 <_gp+0xfffe0184>

80010f1c <__srget>:
80010f1c:	00a000f4 	movhi	r2,32771
80010f20:	200b883a 	mov	r5,r4
80010f24:	11235e17 	ldw	r4,-29320(r2)
80010f28:	0010ea81 	jmpi	80010ea8 <__srget_r>

80010f2c <_sbrk_r>:
80010f2c:	defffe04 	addi	sp,sp,-8
80010f30:	dc000015 	stw	r16,0(sp)
80010f34:	00a000f4 	movhi	r2,32771
80010f38:	2021883a 	mov	r16,r4
80010f3c:	2809883a 	mov	r4,r5
80010f40:	dfc00115 	stw	ra,4(sp)
80010f44:	102ad715 	stw	zero,-21668(r2)
80010f48:	00204540 	call	80020454 <sbrk>
80010f4c:	10ffffd8 	cmpnei	r3,r2,-1
80010f50:	18000426 	beq	r3,zero,80010f64 <_sbrk_r+0x38>
80010f54:	dfc00117 	ldw	ra,4(sp)
80010f58:	dc000017 	ldw	r16,0(sp)
80010f5c:	dec00204 	addi	sp,sp,8
80010f60:	f800283a 	ret
80010f64:	00e000f4 	movhi	r3,32771
80010f68:	18ead717 	ldw	r3,-21668(r3)
80010f6c:	183ff926 	beq	r3,zero,80010f54 <_gp+0xfffe01e0>
80010f70:	80c00015 	stw	r3,0(r16)
80010f74:	dfc00117 	ldw	ra,4(sp)
80010f78:	dc000017 	ldw	r16,0(sp)
80010f7c:	dec00204 	addi	sp,sp,8
80010f80:	f800283a 	ret

80010f84 <_sprintf_r>:
80010f84:	deffe404 	addi	sp,sp,-112
80010f88:	2811883a 	mov	r8,r5
80010f8c:	dfc01a15 	stw	ra,104(sp)
80010f90:	d9c01b15 	stw	r7,108(sp)
80010f94:	00a00034 	movhi	r2,32768
80010f98:	00fffff4 	movhi	r3,65535
80010f9c:	10bfffc4 	addi	r2,r2,-1
80010fa0:	18c08204 	addi	r3,r3,520
80010fa4:	d9c01b04 	addi	r7,sp,108
80010fa8:	d80b883a 	mov	r5,sp
80010fac:	d8c00315 	stw	r3,12(sp)
80010fb0:	da000015 	stw	r8,0(sp)
80010fb4:	da000415 	stw	r8,16(sp)
80010fb8:	d8800515 	stw	r2,20(sp)
80010fbc:	d8800215 	stw	r2,8(sp)
80010fc0:	00112240 	call	80011224 <___svfprintf_internal_r>
80010fc4:	d8c00017 	ldw	r3,0(sp)
80010fc8:	18000005 	stb	zero,0(r3)
80010fcc:	dfc01a17 	ldw	ra,104(sp)
80010fd0:	dec01c04 	addi	sp,sp,112
80010fd4:	f800283a 	ret

80010fd8 <sprintf>:
80010fd8:	deffe304 	addi	sp,sp,-116
80010fdc:	2011883a 	mov	r8,r4
80010fe0:	dfc01a15 	stw	ra,104(sp)
80010fe4:	d9801b15 	stw	r6,108(sp)
80010fe8:	d9c01c15 	stw	r7,112(sp)
80010fec:	00a000f4 	movhi	r2,32771
80010ff0:	11235e17 	ldw	r4,-29320(r2)
80010ff4:	00fffff4 	movhi	r3,65535
80010ff8:	00a00034 	movhi	r2,32768
80010ffc:	10bfffc4 	addi	r2,r2,-1
80011000:	18c08204 	addi	r3,r3,520
80011004:	280d883a 	mov	r6,r5
80011008:	d9c01b04 	addi	r7,sp,108
8001100c:	d80b883a 	mov	r5,sp
80011010:	d8c00315 	stw	r3,12(sp)
80011014:	da000015 	stw	r8,0(sp)
80011018:	da000415 	stw	r8,16(sp)
8001101c:	d8800515 	stw	r2,20(sp)
80011020:	d8800215 	stw	r2,8(sp)
80011024:	00112240 	call	80011224 <___svfprintf_internal_r>
80011028:	d8c00017 	ldw	r3,0(sp)
8001102c:	18000005 	stb	zero,0(r3)
80011030:	dfc01a17 	ldw	ra,104(sp)
80011034:	dec01d04 	addi	sp,sp,116
80011038:	f800283a 	ret

8001103c <strcmp>:
8001103c:	2144b03a 	or	r2,r4,r5
80011040:	108000cc 	andi	r2,r2,3
80011044:	1000171e 	bne	r2,zero,800110a4 <strcmp+0x68>
80011048:	20800017 	ldw	r2,0(r4)
8001104c:	28c00017 	ldw	r3,0(r5)
80011050:	10c0141e 	bne	r2,r3,800110a4 <strcmp+0x68>
80011054:	027fbff4 	movhi	r9,65279
80011058:	4a7fbfc4 	addi	r9,r9,-257
8001105c:	1247883a 	add	r3,r2,r9
80011060:	02202074 	movhi	r8,32897
80011064:	0084303a 	nor	r2,zero,r2
80011068:	1884703a 	and	r2,r3,r2
8001106c:	42202004 	addi	r8,r8,-32640
80011070:	1204703a 	and	r2,r2,r8
80011074:	10000226 	beq	r2,zero,80011080 <strcmp+0x44>
80011078:	00002106 	br	80011100 <strcmp+0xc4>
8001107c:	1000201e 	bne	r2,zero,80011100 <strcmp+0xc4>
80011080:	21000104 	addi	r4,r4,4
80011084:	20c00017 	ldw	r3,0(r4)
80011088:	29400104 	addi	r5,r5,4
8001108c:	29800017 	ldw	r6,0(r5)
80011090:	1a45883a 	add	r2,r3,r9
80011094:	00ce303a 	nor	r7,zero,r3
80011098:	11c4703a 	and	r2,r2,r7
8001109c:	1204703a 	and	r2,r2,r8
800110a0:	19bff626 	beq	r3,r6,8001107c <_gp+0xfffe0308>
800110a4:	20800003 	ldbu	r2,0(r4)
800110a8:	10c03fcc 	andi	r3,r2,255
800110ac:	18c0201c 	xori	r3,r3,128
800110b0:	18ffe004 	addi	r3,r3,-128
800110b4:	1800081e 	bne	r3,zero,800110d8 <strcmp+0x9c>
800110b8:	00000d06 	br	800110f0 <strcmp+0xb4>
800110bc:	21000044 	addi	r4,r4,1
800110c0:	20800003 	ldbu	r2,0(r4)
800110c4:	29400044 	addi	r5,r5,1
800110c8:	10c03fcc 	andi	r3,r2,255
800110cc:	18c0201c 	xori	r3,r3,128
800110d0:	18ffe004 	addi	r3,r3,-128
800110d4:	18000626 	beq	r3,zero,800110f0 <strcmp+0xb4>
800110d8:	29800007 	ldb	r6,0(r5)
800110dc:	19bff726 	beq	r3,r6,800110bc <_gp+0xfffe0348>
800110e0:	28c00003 	ldbu	r3,0(r5)
800110e4:	10803fcc 	andi	r2,r2,255
800110e8:	10c5c83a 	sub	r2,r2,r3
800110ec:	f800283a 	ret
800110f0:	28c00003 	ldbu	r3,0(r5)
800110f4:	0005883a 	mov	r2,zero
800110f8:	10c5c83a 	sub	r2,r2,r3
800110fc:	f800283a 	ret
80011100:	0005883a 	mov	r2,zero
80011104:	f800283a 	ret

80011108 <strcpy>:
80011108:	2906b03a 	or	r3,r5,r4
8001110c:	18c000cc 	andi	r3,r3,3
80011110:	2005883a 	mov	r2,r4
80011114:	18001d1e 	bne	r3,zero,8001118c <strcpy+0x84>
80011118:	29c00017 	ldw	r7,0(r5)
8001111c:	027fbff4 	movhi	r9,65279
80011120:	4a7fbfc4 	addi	r9,r9,-257
80011124:	3a47883a 	add	r3,r7,r9
80011128:	01c8303a 	nor	r4,zero,r7
8001112c:	02202074 	movhi	r8,32897
80011130:	1906703a 	and	r3,r3,r4
80011134:	42202004 	addi	r8,r8,-32640
80011138:	1a06703a 	and	r3,r3,r8
8001113c:	100d883a 	mov	r6,r2
80011140:	1800091e 	bne	r3,zero,80011168 <strcpy+0x60>
80011144:	31800104 	addi	r6,r6,4
80011148:	29400104 	addi	r5,r5,4
8001114c:	31ffff15 	stw	r7,-4(r6)
80011150:	29c00017 	ldw	r7,0(r5)
80011154:	3a47883a 	add	r3,r7,r9
80011158:	01d4303a 	nor	r10,zero,r7
8001115c:	1a86703a 	and	r3,r3,r10
80011160:	1a06703a 	and	r3,r3,r8
80011164:	183ff726 	beq	r3,zero,80011144 <_gp+0xfffe03d0>
80011168:	29400044 	addi	r5,r5,1
8001116c:	28ffffc3 	ldbu	r3,-1(r5)
80011170:	31800044 	addi	r6,r6,1
80011174:	30ffffc5 	stb	r3,-1(r6)
80011178:	18c03fcc 	andi	r3,r3,255
8001117c:	18c0201c 	xori	r3,r3,128
80011180:	18ffe004 	addi	r3,r3,-128
80011184:	183ff81e 	bne	r3,zero,80011168 <_gp+0xfffe03f4>
80011188:	f800283a 	ret
8001118c:	200d883a 	mov	r6,r4
80011190:	003ff506 	br	80011168 <_gp+0xfffe03f4>

80011194 <strlen>:
80011194:	20c000cc 	andi	r3,r4,3
80011198:	2005883a 	mov	r2,r4
8001119c:	18000826 	beq	r3,zero,800111c0 <strlen+0x2c>
800111a0:	20c00007 	ldb	r3,0(r4)
800111a4:	1800031e 	bne	r3,zero,800111b4 <strlen+0x20>
800111a8:	00001c06 	br	8001121c <strlen+0x88>
800111ac:	20c00007 	ldb	r3,0(r4)
800111b0:	18001826 	beq	r3,zero,80011214 <strlen+0x80>
800111b4:	21000044 	addi	r4,r4,1
800111b8:	20c000cc 	andi	r3,r4,3
800111bc:	183ffb1e 	bne	r3,zero,800111ac <_gp+0xfffe0438>
800111c0:	21400017 	ldw	r5,0(r4)
800111c4:	01ffbff4 	movhi	r7,65279
800111c8:	39ffbfc4 	addi	r7,r7,-257
800111cc:	29c7883a 	add	r3,r5,r7
800111d0:	01a02074 	movhi	r6,32897
800111d4:	014a303a 	nor	r5,zero,r5
800111d8:	1946703a 	and	r3,r3,r5
800111dc:	31a02004 	addi	r6,r6,-32640
800111e0:	1986703a 	and	r3,r3,r6
800111e4:	1800091e 	bne	r3,zero,8001120c <strlen+0x78>
800111e8:	21000104 	addi	r4,r4,4
800111ec:	21400017 	ldw	r5,0(r4)
800111f0:	29c7883a 	add	r3,r5,r7
800111f4:	014a303a 	nor	r5,zero,r5
800111f8:	1946703a 	and	r3,r3,r5
800111fc:	1986703a 	and	r3,r3,r6
80011200:	183ff926 	beq	r3,zero,800111e8 <_gp+0xfffe0474>
80011204:	00000106 	br	8001120c <strlen+0x78>
80011208:	21000044 	addi	r4,r4,1
8001120c:	20c00007 	ldb	r3,0(r4)
80011210:	183ffd1e 	bne	r3,zero,80011208 <_gp+0xfffe0494>
80011214:	2085c83a 	sub	r2,r4,r2
80011218:	f800283a 	ret
8001121c:	0005883a 	mov	r2,zero
80011220:	f800283a 	ret

80011224 <___svfprintf_internal_r>:
80011224:	deffbd04 	addi	sp,sp,-268
80011228:	dfc04215 	stw	ra,264(sp)
8001122c:	ddc04015 	stw	r23,256(sp)
80011230:	dc003915 	stw	r16,228(sp)
80011234:	d9400415 	stw	r5,16(sp)
80011238:	2821883a 	mov	r16,r5
8001123c:	d9000515 	stw	r4,20(sp)
80011240:	302f883a 	mov	r23,r6
80011244:	d9c00815 	stw	r7,32(sp)
80011248:	df004115 	stw	fp,260(sp)
8001124c:	dd803f15 	stw	r22,252(sp)
80011250:	dd403e15 	stw	r21,248(sp)
80011254:	dd003d15 	stw	r20,244(sp)
80011258:	dcc03c15 	stw	r19,240(sp)
8001125c:	dc803b15 	stw	r18,236(sp)
80011260:	dc403a15 	stw	r17,232(sp)
80011264:	00185c80 	call	800185c8 <_localeconv_r>
80011268:	10800017 	ldw	r2,0(r2)
8001126c:	1009883a 	mov	r4,r2
80011270:	d8801015 	stw	r2,64(sp)
80011274:	00111940 	call	80011194 <strlen>
80011278:	d8800f15 	stw	r2,60(sp)
8001127c:	8080030b 	ldhu	r2,12(r16)
80011280:	1080200c 	andi	r2,r2,128
80011284:	10000226 	beq	r2,zero,80011290 <___svfprintf_internal_r+0x6c>
80011288:	80800417 	ldw	r2,16(r16)
8001128c:	10054326 	beq	r2,zero,8001279c <___svfprintf_internal_r+0x1578>
80011290:	dd402904 	addi	r21,sp,164
80011294:	dd401c15 	stw	r21,112(sp)
80011298:	d8001e15 	stw	zero,120(sp)
8001129c:	d8001d15 	stw	zero,116(sp)
800112a0:	d8000a15 	stw	zero,40(sp)
800112a4:	d8000b15 	stw	zero,44(sp)
800112a8:	d8000c15 	stw	zero,48(sp)
800112ac:	a811883a 	mov	r8,r21
800112b0:	d8000e15 	stw	zero,56(sp)
800112b4:	d8001115 	stw	zero,68(sp)
800112b8:	d8000615 	stw	zero,24(sp)
800112bc:	b839883a 	mov	fp,r23
800112c0:	e0800007 	ldb	r2,0(fp)
800112c4:	10008c26 	beq	r2,zero,800114f8 <___svfprintf_internal_r+0x2d4>
800112c8:	10800960 	cmpeqi	r2,r2,37
800112cc:	e021883a 	mov	r16,fp
800112d0:	10000226 	beq	r2,zero,800112dc <___svfprintf_internal_r+0xb8>
800112d4:	00001706 	br	80011334 <___svfprintf_internal_r+0x110>
800112d8:	18000426 	beq	r3,zero,800112ec <___svfprintf_internal_r+0xc8>
800112dc:	84000044 	addi	r16,r16,1
800112e0:	80800007 	ldb	r2,0(r16)
800112e4:	10c00958 	cmpnei	r3,r2,37
800112e8:	103ffb1e 	bne	r2,zero,800112d8 <_gp+0xfffe0564>
800112ec:	8723c83a 	sub	r17,r16,fp
800112f0:	88000e26 	beq	r17,zero,8001132c <___svfprintf_internal_r+0x108>
800112f4:	d8c01e17 	ldw	r3,120(sp)
800112f8:	d8801d17 	ldw	r2,116(sp)
800112fc:	47000015 	stw	fp,0(r8)
80011300:	1c47883a 	add	r3,r3,r17
80011304:	10800044 	addi	r2,r2,1
80011308:	d8801d15 	stw	r2,116(sp)
8001130c:	44400115 	stw	r17,4(r8)
80011310:	d8c01e15 	stw	r3,120(sp)
80011314:	10800208 	cmpgei	r2,r2,8
80011318:	1000701e 	bne	r2,zero,800114dc <___svfprintf_internal_r+0x2b8>
8001131c:	42000204 	addi	r8,r8,8
80011320:	d8800617 	ldw	r2,24(sp)
80011324:	1445883a 	add	r2,r2,r17
80011328:	d8800615 	stw	r2,24(sp)
8001132c:	80800007 	ldb	r2,0(r16)
80011330:	10007126 	beq	r2,zero,800114f8 <___svfprintf_internal_r+0x2d4>
80011334:	87000044 	addi	fp,r16,1
80011338:	84000047 	ldb	r16,1(r16)
8001133c:	d8001545 	stb	zero,85(sp)
80011340:	0009883a 	mov	r4,zero
80011344:	000b883a 	mov	r5,zero
80011348:	05bfffc4 	movi	r22,-1
8001134c:	0023883a 	mov	r17,zero
80011350:	0017883a 	mov	r11,zero
80011354:	e7000044 	addi	fp,fp,1
80011358:	80bff804 	addi	r2,r16,-32
8001135c:	10c01668 	cmpgeui	r3,r2,89
80011360:	1800cd1e 	bne	r3,zero,80011698 <___svfprintf_internal_r+0x474>
80011364:	100490ba 	slli	r2,r2,2
80011368:	00e00074 	movhi	r3,32769
8001136c:	10c7883a 	add	r3,r2,r3
80011370:	1884de17 	ldw	r2,4984(r3)
80011374:	1000683a 	jmp	r2
80011378:	80011bf0 	cmpltui	zero,r16,1135
8001137c:	80011698 	cmpnei	zero,r16,1114
80011380:	80011698 	cmpnei	zero,r16,1114
80011384:	80011be4 	muli	zero,r16,1135
80011388:	80011698 	cmpnei	zero,r16,1114
8001138c:	80011698 	cmpnei	zero,r16,1114
80011390:	80011698 	cmpnei	zero,r16,1114
80011394:	80011698 	cmpnei	zero,r16,1114
80011398:	80011698 	cmpnei	zero,r16,1114
8001139c:	80011698 	cmpnei	zero,r16,1114
800113a0:	80011bbc 	xorhi	zero,r16,1134
800113a4:	80011ccc 	andi	zero,r16,1139
800113a8:	80011698 	cmpnei	zero,r16,1114
800113ac:	80011cb4 	orhi	zero,r16,1138
800113b0:	80011c70 	cmpltui	zero,r16,1137
800113b4:	80011698 	cmpnei	zero,r16,1114
800113b8:	80011c64 	muli	zero,r16,1137
800113bc:	80011668 	cmpgeui	zero,r16,1113
800113c0:	80011668 	cmpgeui	zero,r16,1113
800113c4:	80011668 	cmpgeui	zero,r16,1113
800113c8:	80011668 	cmpgeui	zero,r16,1113
800113cc:	80011668 	cmpgeui	zero,r16,1113
800113d0:	80011668 	cmpgeui	zero,r16,1113
800113d4:	80011668 	cmpgeui	zero,r16,1113
800113d8:	80011668 	cmpgeui	zero,r16,1113
800113dc:	80011668 	cmpgeui	zero,r16,1113
800113e0:	80011698 	cmpnei	zero,r16,1114
800113e4:	80011698 	cmpnei	zero,r16,1114
800113e8:	80011698 	cmpnei	zero,r16,1114
800113ec:	80011698 	cmpnei	zero,r16,1114
800113f0:	80011698 	cmpnei	zero,r16,1114
800113f4:	80011698 	cmpnei	zero,r16,1114
800113f8:	80011698 	cmpnei	zero,r16,1114
800113fc:	80011698 	cmpnei	zero,r16,1114
80011400:	80011698 	cmpnei	zero,r16,1114
80011404:	80011698 	cmpnei	zero,r16,1114
80011408:	80011db8 	rdprs	zero,r16,1142
8001140c:	80011ce8 	cmpgeui	zero,r16,1139
80011410:	80011698 	cmpnei	zero,r16,1114
80011414:	80011ce8 	cmpgeui	zero,r16,1139
80011418:	80011698 	cmpnei	zero,r16,1114
8001141c:	80011698 	cmpnei	zero,r16,1114
80011420:	80011698 	cmpnei	zero,r16,1114
80011424:	80011698 	cmpnei	zero,r16,1114
80011428:	80011cdc 	xori	zero,r16,1139
8001142c:	80011698 	cmpnei	zero,r16,1114
80011430:	80011698 	cmpnei	zero,r16,1114
80011434:	800115b8 	rdprs	zero,r16,1110
80011438:	80011698 	cmpnei	zero,r16,1114
8001143c:	80011698 	cmpnei	zero,r16,1114
80011440:	80011698 	cmpnei	zero,r16,1114
80011444:	80011698 	cmpnei	zero,r16,1114
80011448:	80011698 	cmpnei	zero,r16,1114
8001144c:	80011554 	ori	zero,r16,1109
80011450:	80011698 	cmpnei	zero,r16,1114
80011454:	80011698 	cmpnei	zero,r16,1114
80011458:	80011b74 	orhi	zero,r16,1133
8001145c:	80011698 	cmpnei	zero,r16,1114
80011460:	80011698 	cmpnei	zero,r16,1114
80011464:	80011698 	cmpnei	zero,r16,1114
80011468:	80011698 	cmpnei	zero,r16,1114
8001146c:	80011698 	cmpnei	zero,r16,1114
80011470:	80011698 	cmpnei	zero,r16,1114
80011474:	80011698 	cmpnei	zero,r16,1114
80011478:	80011698 	cmpnei	zero,r16,1114
8001147c:	80011698 	cmpnei	zero,r16,1114
80011480:	80011698 	cmpnei	zero,r16,1114
80011484:	800117f8 	rdprs	zero,r16,1119
80011488:	800117bc 	xorhi	zero,r16,1118
8001148c:	80011ce8 	cmpgeui	zero,r16,1139
80011490:	80011ce8 	cmpgeui	zero,r16,1139
80011494:	80011ce8 	cmpgeui	zero,r16,1139
80011498:	800117b0 	cmpltui	zero,r16,1118
8001149c:	800117bc 	xorhi	zero,r16,1118
800114a0:	80011698 	cmpnei	zero,r16,1114
800114a4:	80011698 	cmpnei	zero,r16,1114
800114a8:	8001179c 	xori	zero,r16,1118
800114ac:	80011698 	cmpnei	zero,r16,1114
800114b0:	80011760 	cmpeqi	zero,r16,1117
800114b4:	800115bc 	xorhi	zero,r16,1110
800114b8:	800116b0 	cmpltui	zero,r16,1114
800114bc:	80011754 	ori	zero,r16,1117
800114c0:	80011698 	cmpnei	zero,r16,1114
800114c4:	800116f0 	cmpltui	zero,r16,1115
800114c8:	80011698 	cmpnei	zero,r16,1114
800114cc:	80011558 	cmpnei	zero,r16,1109
800114d0:	80011698 	cmpnei	zero,r16,1114
800114d4:	80011698 	cmpnei	zero,r16,1114
800114d8:	80011c1c 	xori	zero,r16,1136
800114dc:	d9400417 	ldw	r5,16(sp)
800114e0:	d9000517 	ldw	r4,20(sp)
800114e4:	d9801c04 	addi	r6,sp,112
800114e8:	001a82c0 	call	8001a82c <__ssprint_r>
800114ec:	1000081e 	bne	r2,zero,80011510 <___svfprintf_internal_r+0x2ec>
800114f0:	a811883a 	mov	r8,r21
800114f4:	003f8a06 	br	80011320 <_gp+0xfffe05ac>
800114f8:	d8801e17 	ldw	r2,120(sp)
800114fc:	10000426 	beq	r2,zero,80011510 <___svfprintf_internal_r+0x2ec>
80011500:	d9400417 	ldw	r5,16(sp)
80011504:	d9000517 	ldw	r4,20(sp)
80011508:	d9801c04 	addi	r6,sp,112
8001150c:	001a82c0 	call	8001a82c <__ssprint_r>
80011510:	d8800417 	ldw	r2,16(sp)
80011514:	1080030b 	ldhu	r2,12(r2)
80011518:	1080100c 	andi	r2,r2,64
8001151c:	10067c1e 	bne	r2,zero,80012f10 <___svfprintf_internal_r+0x1cec>
80011520:	d8800617 	ldw	r2,24(sp)
80011524:	dfc04217 	ldw	ra,264(sp)
80011528:	df004117 	ldw	fp,260(sp)
8001152c:	ddc04017 	ldw	r23,256(sp)
80011530:	dd803f17 	ldw	r22,252(sp)
80011534:	dd403e17 	ldw	r21,248(sp)
80011538:	dd003d17 	ldw	r20,244(sp)
8001153c:	dcc03c17 	ldw	r19,240(sp)
80011540:	dc803b17 	ldw	r18,236(sp)
80011544:	dc403a17 	ldw	r17,232(sp)
80011548:	dc003917 	ldw	r16,228(sp)
8001154c:	dec04304 	addi	sp,sp,268
80011550:	f800283a 	ret
80011554:	5ac00414 	ori	r11,r11,16
80011558:	5880080c 	andi	r2,r11,32
8001155c:	1003d626 	beq	r2,zero,800124b8 <___svfprintf_internal_r+0x1294>
80011560:	d8c00817 	ldw	r3,32(sp)
80011564:	00800044 	movi	r2,1
80011568:	1d000017 	ldw	r20,0(r3)
8001156c:	1dc00117 	ldw	r23,4(r3)
80011570:	18c00204 	addi	r3,r3,8
80011574:	d8c00815 	stw	r3,32(sp)
80011578:	d8001545 	stb	zero,85(sp)
8001157c:	b0ffffe0 	cmpeqi	r3,r22,-1
80011580:	1800191e 	bne	r3,zero,800115e8 <___svfprintf_internal_r+0x3c4>
80011584:	0019883a 	mov	r12,zero
80011588:	04ffdfc4 	movi	r19,-129
8001158c:	a5c6b03a 	or	r3,r20,r23
80011590:	5ce6703a 	and	r19,r11,r19
80011594:	1800161e 	bne	r3,zero,800115f0 <___svfprintf_internal_r+0x3cc>
80011598:	b004f31e 	bne	r22,zero,80012968 <___svfprintf_internal_r+0x1744>
8001159c:	1003a01e 	bne	r2,zero,80012420 <___svfprintf_internal_r+0x11fc>
800115a0:	5dc0004c 	andi	r23,r11,1
800115a4:	b803ef26 	beq	r23,zero,80012564 <___svfprintf_internal_r+0x1340>
800115a8:	00800c04 	movi	r2,48
800115ac:	d88028c5 	stb	r2,163(sp)
800115b0:	dc8028c4 	addi	r18,sp,163
800115b4:	00023206 	br	80011e80 <___svfprintf_internal_r+0xc5c>
800115b8:	5ac00414 	ori	r11,r11,16
800115bc:	5880080c 	andi	r2,r11,32
800115c0:	1003c926 	beq	r2,zero,800124e8 <___svfprintf_internal_r+0x12c4>
800115c4:	d8c00817 	ldw	r3,32(sp)
800115c8:	d8001545 	stb	zero,85(sp)
800115cc:	0005883a 	mov	r2,zero
800115d0:	1d000017 	ldw	r20,0(r3)
800115d4:	1dc00117 	ldw	r23,4(r3)
800115d8:	18c00204 	addi	r3,r3,8
800115dc:	d8c00815 	stw	r3,32(sp)
800115e0:	b0ffffe0 	cmpeqi	r3,r22,-1
800115e4:	183fe726 	beq	r3,zero,80011584 <_gp+0xfffe0810>
800115e8:	5827883a 	mov	r19,r11
800115ec:	0019883a 	mov	r12,zero
800115f0:	10c00060 	cmpeqi	r3,r2,1
800115f4:	18020c1e 	bne	r3,zero,80011e28 <___svfprintf_internal_r+0xc04>
800115f8:	108000a0 	cmpeqi	r2,r2,2
800115fc:	1002121e 	bne	r2,zero,80011e48 <___svfprintf_internal_r+0xc24>
80011600:	a807883a 	mov	r3,r21
80011604:	00000106 	br	8001160c <___svfprintf_internal_r+0x3e8>
80011608:	9007883a 	mov	r3,r18
8001160c:	a008d0fa 	srli	r4,r20,3
80011610:	b80a977a 	slli	r5,r23,29
80011614:	b82ed0fa 	srli	r23,r23,3
80011618:	a50001cc 	andi	r20,r20,7
8001161c:	a0800c04 	addi	r2,r20,48
80011620:	2928b03a 	or	r20,r5,r4
80011624:	18bfffc5 	stb	r2,-1(r3)
80011628:	a5c8b03a 	or	r4,r20,r23
8001162c:	1cbfffc4 	addi	r18,r3,-1
80011630:	203ff51e 	bne	r4,zero,80011608 <_gp+0xfffe0894>
80011634:	9900004c 	andi	r4,r19,1
80011638:	20021026 	beq	r4,zero,80011e7c <___svfprintf_internal_r+0xc58>
8001163c:	10803fcc 	andi	r2,r2,255
80011640:	1080201c 	xori	r2,r2,128
80011644:	10bfe004 	addi	r2,r2,-128
80011648:	10800c18 	cmpnei	r2,r2,48
8001164c:	10020b26 	beq	r2,zero,80011e7c <___svfprintf_internal_r+0xc58>
80011650:	18ffff84 	addi	r3,r3,-2
80011654:	00800c04 	movi	r2,48
80011658:	90bfffc5 	stb	r2,-1(r18)
8001165c:	a8efc83a 	sub	r23,r21,r3
80011660:	1825883a 	mov	r18,r3
80011664:	00020606 	br	80011e80 <___svfprintf_internal_r+0xc5c>
80011668:	0023883a 	mov	r17,zero
8001166c:	80bff404 	addi	r2,r16,-48
80011670:	e7000044 	addi	fp,fp,1
80011674:	8c4002a4 	muli	r17,r17,10
80011678:	e43fffc7 	ldb	r16,-1(fp)
8001167c:	1463883a 	add	r17,r2,r17
80011680:	80bff404 	addi	r2,r16,-48
80011684:	10c002b0 	cmpltui	r3,r2,10
80011688:	183ff91e 	bne	r3,zero,80011670 <_gp+0xfffe08fc>
8001168c:	80bff804 	addi	r2,r16,-32
80011690:	10c01668 	cmpgeui	r3,r2,89
80011694:	183f3326 	beq	r3,zero,80011364 <_gp+0xfffe05f0>
80011698:	21003fcc 	andi	r4,r4,255
8001169c:	2006ca1e 	bne	r4,zero,800131c8 <___svfprintf_internal_r+0x1fa4>
800116a0:	803f9526 	beq	r16,zero,800114f8 <_gp+0xfffe0784>
800116a4:	dc001f05 	stb	r16,124(sp)
800116a8:	d8001545 	stb	zero,85(sp)
800116ac:	00005806 	br	80011810 <___svfprintf_internal_r+0x5ec>
800116b0:	d8c00817 	ldw	r3,32(sp)
800116b4:	00800c04 	movi	r2,48
800116b8:	d8801585 	stb	r2,86(sp)
800116bc:	00801e04 	movi	r2,120
800116c0:	012000b4 	movhi	r4,32770
800116c4:	d88015c5 	stb	r2,87(sp)
800116c8:	18800104 	addi	r2,r3,4
800116cc:	d8800815 	stw	r2,32(sp)
800116d0:	209aa804 	addi	r2,r4,27296
800116d4:	d8800e15 	stw	r2,56(sp)
800116d8:	1d000017 	ldw	r20,0(r3)
800116dc:	002f883a 	mov	r23,zero
800116e0:	5ac00094 	ori	r11,r11,2
800116e4:	00800084 	movi	r2,2
800116e8:	04001e04 	movi	r16,120
800116ec:	003fa206 	br	80011578 <_gp+0xfffe0804>
800116f0:	d8800817 	ldw	r2,32(sp)
800116f4:	d8001545 	stb	zero,85(sp)
800116f8:	14800017 	ldw	r18,0(r2)
800116fc:	14c00104 	addi	r19,r2,4
80011700:	90044d26 	beq	r18,zero,80012838 <___svfprintf_internal_r+0x1614>
80011704:	da000815 	stw	r8,32(sp)
80011708:	dac00715 	stw	r11,28(sp)
8001170c:	b0bfffe0 	cmpeqi	r2,r22,-1
80011710:	1004f11e 	bne	r2,zero,80012ad8 <___svfprintf_internal_r+0x18b4>
80011714:	b00d883a 	mov	r6,r22
80011718:	000b883a 	mov	r5,zero
8001171c:	9009883a 	mov	r4,r18
80011720:	00187d80 	call	800187d8 <memchr>
80011724:	dac00717 	ldw	r11,28(sp)
80011728:	da000817 	ldw	r8,32(sp)
8001172c:	1005a826 	beq	r2,zero,80012dd0 <___svfprintf_internal_r+0x1bac>
80011730:	14afc83a 	sub	r23,r2,r18
80011734:	db001543 	ldbu	r12,85(sp)
80011738:	b829883a 	mov	r20,r23
8001173c:	b804ee16 	blt	r23,zero,80012af8 <___svfprintf_internal_r+0x18d4>
80011740:	dcc00815 	stw	r19,32(sp)
80011744:	002d883a 	mov	r22,zero
80011748:	5827883a 	mov	r19,r11
8001174c:	d8000915 	stw	zero,36(sp)
80011750:	0001cf06 	br	80011e90 <___svfprintf_internal_r+0xc6c>
80011754:	5ac00814 	ori	r11,r11,32
80011758:	e4000007 	ldb	r16,0(fp)
8001175c:	003efd06 	br	80011354 <_gp+0xfffe05e0>
80011760:	21003fcc 	andi	r4,r4,255
80011764:	2006941e 	bne	r4,zero,800131b8 <___svfprintf_internal_r+0x1f94>
80011768:	d9000817 	ldw	r4,32(sp)
8001176c:	5880080c 	andi	r2,r11,32
80011770:	20c00017 	ldw	r3,0(r4)
80011774:	21000104 	addi	r4,r4,4
80011778:	d9000815 	stw	r4,32(sp)
8001177c:	1003851e 	bne	r2,zero,80012594 <___svfprintf_internal_r+0x1370>
80011780:	5880040c 	andi	r2,r11,16
80011784:	1004561e 	bne	r2,zero,800128e0 <___svfprintf_internal_r+0x16bc>
80011788:	5ac0100c 	andi	r11,r11,64
8001178c:	58045426 	beq	r11,zero,800128e0 <___svfprintf_internal_r+0x16bc>
80011790:	d8800617 	ldw	r2,24(sp)
80011794:	1880000d 	sth	r2,0(r3)
80011798:	003ec906 	br	800112c0 <_gp+0xfffe054c>
8001179c:	e4000007 	ldb	r16,0(fp)
800117a0:	80801b18 	cmpnei	r2,r16,108
800117a4:	10041326 	beq	r2,zero,800127f4 <___svfprintf_internal_r+0x15d0>
800117a8:	5ac00414 	ori	r11,r11,16
800117ac:	003ee906 	br	80011354 <_gp+0xfffe05e0>
800117b0:	5ac01014 	ori	r11,r11,64
800117b4:	e4000007 	ldb	r16,0(fp)
800117b8:	003ee606 	br	80011354 <_gp+0xfffe05e0>
800117bc:	21003fcc 	andi	r4,r4,255
800117c0:	20067b1e 	bne	r4,zero,800131b0 <___svfprintf_internal_r+0x1f8c>
800117c4:	5880080c 	andi	r2,r11,32
800117c8:	10018026 	beq	r2,zero,80011dcc <___svfprintf_internal_r+0xba8>
800117cc:	d8800817 	ldw	r2,32(sp)
800117d0:	15000017 	ldw	r20,0(r2)
800117d4:	15c00117 	ldw	r23,4(r2)
800117d8:	10800204 	addi	r2,r2,8
800117dc:	d8800815 	stw	r2,32(sp)
800117e0:	b8018716 	blt	r23,zero,80011e00 <___svfprintf_internal_r+0xbdc>
800117e4:	b0bfffd8 	cmpnei	r2,r22,-1
800117e8:	db001543 	ldbu	r12,85(sp)
800117ec:	10018d26 	beq	r2,zero,80011e24 <___svfprintf_internal_r+0xc00>
800117f0:	00800044 	movi	r2,1
800117f4:	003f6406 	br	80011588 <_gp+0xfffe0814>
800117f8:	d8c00817 	ldw	r3,32(sp)
800117fc:	d8001545 	stb	zero,85(sp)
80011800:	18800017 	ldw	r2,0(r3)
80011804:	18c00104 	addi	r3,r3,4
80011808:	d8c00815 	stw	r3,32(sp)
8001180c:	d8801f05 	stb	r2,124(sp)
80011810:	5827883a 	mov	r19,r11
80011814:	05000044 	movi	r20,1
80011818:	05c00044 	movi	r23,1
8001181c:	002d883a 	mov	r22,zero
80011820:	d8000915 	stw	zero,36(sp)
80011824:	dc801f04 	addi	r18,sp,124
80011828:	0005883a 	mov	r2,zero
8001182c:	9b00008c 	andi	r12,r19,2
80011830:	60000126 	beq	r12,zero,80011838 <___svfprintf_internal_r+0x614>
80011834:	a5000084 	addi	r20,r20,2
80011838:	9ac0210c 	andi	r11,r19,132
8001183c:	d8c01e17 	ldw	r3,120(sp)
80011840:	5800381e 	bne	r11,zero,80011924 <___svfprintf_internal_r+0x700>
80011844:	8d1bc83a 	sub	r13,r17,r20
80011848:	0340360e 	bge	zero,r13,80011924 <___svfprintf_internal_r+0x700>
8001184c:	01e000b4 	movhi	r7,32770
80011850:	69000450 	cmplti	r4,r13,17
80011854:	39dab384 	addi	r7,r7,27342
80011858:	d8801d17 	ldw	r2,116(sp)
8001185c:	2000271e 	bne	r4,zero,800118fc <___svfprintf_internal_r+0x6d8>
80011860:	dc001315 	stw	r16,76(sp)
80011864:	dc401415 	stw	r17,80(sp)
80011868:	03800404 	movi	r14,16
8001186c:	db000d15 	stw	r12,52(sp)
80011870:	dac01215 	stw	r11,72(sp)
80011874:	6821883a 	mov	r16,r13
80011878:	3823883a 	mov	r17,r7
8001187c:	00000406 	br	80011890 <___svfprintf_internal_r+0x66c>
80011880:	843ffc04 	addi	r16,r16,-16
80011884:	81000448 	cmpgei	r4,r16,17
80011888:	42000204 	addi	r8,r8,8
8001188c:	20001526 	beq	r4,zero,800118e4 <___svfprintf_internal_r+0x6c0>
80011890:	10800044 	addi	r2,r2,1
80011894:	18c00404 	addi	r3,r3,16
80011898:	44400015 	stw	r17,0(r8)
8001189c:	43800115 	stw	r14,4(r8)
800118a0:	d8c01e15 	stw	r3,120(sp)
800118a4:	d8801d15 	stw	r2,116(sp)
800118a8:	11000208 	cmpgei	r4,r2,8
800118ac:	203ff426 	beq	r4,zero,80011880 <_gp+0xfffe0b0c>
800118b0:	d9400417 	ldw	r5,16(sp)
800118b4:	d9000517 	ldw	r4,20(sp)
800118b8:	d9801c04 	addi	r6,sp,112
800118bc:	db800715 	stw	r14,28(sp)
800118c0:	001a82c0 	call	8001a82c <__ssprint_r>
800118c4:	103f121e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800118c8:	843ffc04 	addi	r16,r16,-16
800118cc:	81000448 	cmpgei	r4,r16,17
800118d0:	d8c01e17 	ldw	r3,120(sp)
800118d4:	d8801d17 	ldw	r2,116(sp)
800118d8:	a811883a 	mov	r8,r21
800118dc:	db800717 	ldw	r14,28(sp)
800118e0:	203feb1e 	bne	r4,zero,80011890 <_gp+0xfffe0b1c>
800118e4:	801b883a 	mov	r13,r16
800118e8:	880f883a 	mov	r7,r17
800118ec:	db000d17 	ldw	r12,52(sp)
800118f0:	dac01217 	ldw	r11,72(sp)
800118f4:	dc001317 	ldw	r16,76(sp)
800118f8:	dc401417 	ldw	r17,80(sp)
800118fc:	10800044 	addi	r2,r2,1
80011900:	1b47883a 	add	r3,r3,r13
80011904:	d8801d15 	stw	r2,116(sp)
80011908:	41c00015 	stw	r7,0(r8)
8001190c:	43400115 	stw	r13,4(r8)
80011910:	d8c01e15 	stw	r3,120(sp)
80011914:	10800208 	cmpgei	r2,r2,8
80011918:	1003f41e 	bne	r2,zero,800128ec <___svfprintf_internal_r+0x16c8>
8001191c:	d8801547 	ldb	r2,85(sp)
80011920:	42000204 	addi	r8,r8,8
80011924:	10000c26 	beq	r2,zero,80011958 <___svfprintf_internal_r+0x734>
80011928:	d8801d17 	ldw	r2,116(sp)
8001192c:	d9001544 	addi	r4,sp,85
80011930:	18c00044 	addi	r3,r3,1
80011934:	10800044 	addi	r2,r2,1
80011938:	41000015 	stw	r4,0(r8)
8001193c:	01000044 	movi	r4,1
80011940:	d8801d15 	stw	r2,116(sp)
80011944:	41000115 	stw	r4,4(r8)
80011948:	d8c01e15 	stw	r3,120(sp)
8001194c:	10800208 	cmpgei	r2,r2,8
80011950:	1002391e 	bne	r2,zero,80012238 <___svfprintf_internal_r+0x1014>
80011954:	42000204 	addi	r8,r8,8
80011958:	60000c26 	beq	r12,zero,8001198c <___svfprintf_internal_r+0x768>
8001195c:	d8801d17 	ldw	r2,116(sp)
80011960:	d9001584 	addi	r4,sp,86
80011964:	18c00084 	addi	r3,r3,2
80011968:	10800044 	addi	r2,r2,1
8001196c:	41000015 	stw	r4,0(r8)
80011970:	01000084 	movi	r4,2
80011974:	d8801d15 	stw	r2,116(sp)
80011978:	41000115 	stw	r4,4(r8)
8001197c:	d8c01e15 	stw	r3,120(sp)
80011980:	10800208 	cmpgei	r2,r2,8
80011984:	1002381e 	bne	r2,zero,80012268 <___svfprintf_internal_r+0x1044>
80011988:	42000204 	addi	r8,r8,8
8001198c:	5ac02018 	cmpnei	r11,r11,128
80011990:	58019326 	beq	r11,zero,80011fe0 <___svfprintf_internal_r+0xdbc>
80011994:	b5edc83a 	sub	r22,r22,r23
80011998:	0580330e 	bge	zero,r22,80011a68 <___svfprintf_internal_r+0x844>
8001199c:	02e000b4 	movhi	r11,32770
800119a0:	b1000450 	cmplti	r4,r22,17
800119a4:	5adaaf84 	addi	r11,r11,27326
800119a8:	d8801d17 	ldw	r2,116(sp)
800119ac:	2000251e 	bne	r4,zero,80011a44 <___svfprintf_internal_r+0x820>
800119b0:	dc000d15 	stw	r16,52(sp)
800119b4:	02800404 	movi	r10,16
800119b8:	b021883a 	mov	r16,r22
800119bc:	982d883a 	mov	r22,r19
800119c0:	8827883a 	mov	r19,r17
800119c4:	5823883a 	mov	r17,r11
800119c8:	00000406 	br	800119dc <___svfprintf_internal_r+0x7b8>
800119cc:	843ffc04 	addi	r16,r16,-16
800119d0:	81000448 	cmpgei	r4,r16,17
800119d4:	42000204 	addi	r8,r8,8
800119d8:	20001526 	beq	r4,zero,80011a30 <___svfprintf_internal_r+0x80c>
800119dc:	10800044 	addi	r2,r2,1
800119e0:	18c00404 	addi	r3,r3,16
800119e4:	44400015 	stw	r17,0(r8)
800119e8:	42800115 	stw	r10,4(r8)
800119ec:	d8c01e15 	stw	r3,120(sp)
800119f0:	d8801d15 	stw	r2,116(sp)
800119f4:	11000208 	cmpgei	r4,r2,8
800119f8:	203ff426 	beq	r4,zero,800119cc <_gp+0xfffe0c58>
800119fc:	d9400417 	ldw	r5,16(sp)
80011a00:	d9000517 	ldw	r4,20(sp)
80011a04:	d9801c04 	addi	r6,sp,112
80011a08:	da800715 	stw	r10,28(sp)
80011a0c:	001a82c0 	call	8001a82c <__ssprint_r>
80011a10:	103ebf1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80011a14:	843ffc04 	addi	r16,r16,-16
80011a18:	81000448 	cmpgei	r4,r16,17
80011a1c:	d8c01e17 	ldw	r3,120(sp)
80011a20:	d8801d17 	ldw	r2,116(sp)
80011a24:	a811883a 	mov	r8,r21
80011a28:	da800717 	ldw	r10,28(sp)
80011a2c:	203feb1e 	bne	r4,zero,800119dc <_gp+0xfffe0c68>
80011a30:	8817883a 	mov	r11,r17
80011a34:	9823883a 	mov	r17,r19
80011a38:	b027883a 	mov	r19,r22
80011a3c:	802d883a 	mov	r22,r16
80011a40:	dc000d17 	ldw	r16,52(sp)
80011a44:	10800044 	addi	r2,r2,1
80011a48:	1d87883a 	add	r3,r3,r22
80011a4c:	d8801d15 	stw	r2,116(sp)
80011a50:	42c00015 	stw	r11,0(r8)
80011a54:	45800115 	stw	r22,4(r8)
80011a58:	d8c01e15 	stw	r3,120(sp)
80011a5c:	10800208 	cmpgei	r2,r2,8
80011a60:	10020b1e 	bne	r2,zero,80012290 <___svfprintf_internal_r+0x106c>
80011a64:	42000204 	addi	r8,r8,8
80011a68:	9880400c 	andi	r2,r19,256
80011a6c:	10010e1e 	bne	r2,zero,80011ea8 <___svfprintf_internal_r+0xc84>
80011a70:	d8801d17 	ldw	r2,116(sp)
80011a74:	1dc7883a 	add	r3,r3,r23
80011a78:	44800015 	stw	r18,0(r8)
80011a7c:	10800044 	addi	r2,r2,1
80011a80:	d8801d15 	stw	r2,116(sp)
80011a84:	45c00115 	stw	r23,4(r8)
80011a88:	d8c01e15 	stw	r3,120(sp)
80011a8c:	10800208 	cmpgei	r2,r2,8
80011a90:	1001a01e 	bne	r2,zero,80012114 <___svfprintf_internal_r+0xef0>
80011a94:	42000204 	addi	r8,r8,8
80011a98:	9cc0010c 	andi	r19,r19,4
80011a9c:	98002c26 	beq	r19,zero,80011b50 <___svfprintf_internal_r+0x92c>
80011aa0:	8d21c83a 	sub	r16,r17,r20
80011aa4:	04002a0e 	bge	zero,r16,80011b50 <___svfprintf_internal_r+0x92c>
80011aa8:	01e000b4 	movhi	r7,32770
80011aac:	81000450 	cmplti	r4,r16,17
80011ab0:	39dab384 	addi	r7,r7,27342
80011ab4:	d8801d17 	ldw	r2,116(sp)
80011ab8:	20001d1e 	bne	r4,zero,80011b30 <___svfprintf_internal_r+0x90c>
80011abc:	04800404 	movi	r18,16
80011ac0:	dcc00517 	ldw	r19,20(sp)
80011ac4:	dd800417 	ldw	r22,16(sp)
80011ac8:	382f883a 	mov	r23,r7
80011acc:	00000406 	br	80011ae0 <___svfprintf_internal_r+0x8bc>
80011ad0:	843ffc04 	addi	r16,r16,-16
80011ad4:	81000448 	cmpgei	r4,r16,17
80011ad8:	42000204 	addi	r8,r8,8
80011adc:	20001326 	beq	r4,zero,80011b2c <___svfprintf_internal_r+0x908>
80011ae0:	10800044 	addi	r2,r2,1
80011ae4:	18c00404 	addi	r3,r3,16
80011ae8:	45c00015 	stw	r23,0(r8)
80011aec:	44800115 	stw	r18,4(r8)
80011af0:	d8c01e15 	stw	r3,120(sp)
80011af4:	d8801d15 	stw	r2,116(sp)
80011af8:	11000208 	cmpgei	r4,r2,8
80011afc:	203ff426 	beq	r4,zero,80011ad0 <_gp+0xfffe0d5c>
80011b00:	d9801c04 	addi	r6,sp,112
80011b04:	b00b883a 	mov	r5,r22
80011b08:	9809883a 	mov	r4,r19
80011b0c:	001a82c0 	call	8001a82c <__ssprint_r>
80011b10:	103e7f1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80011b14:	843ffc04 	addi	r16,r16,-16
80011b18:	81000448 	cmpgei	r4,r16,17
80011b1c:	d8c01e17 	ldw	r3,120(sp)
80011b20:	d8801d17 	ldw	r2,116(sp)
80011b24:	a811883a 	mov	r8,r21
80011b28:	203fed1e 	bne	r4,zero,80011ae0 <_gp+0xfffe0d6c>
80011b2c:	b80f883a 	mov	r7,r23
80011b30:	10800044 	addi	r2,r2,1
80011b34:	1c07883a 	add	r3,r3,r16
80011b38:	d8801d15 	stw	r2,116(sp)
80011b3c:	41c00015 	stw	r7,0(r8)
80011b40:	44000115 	stw	r16,4(r8)
80011b44:	d8c01e15 	stw	r3,120(sp)
80011b48:	10800210 	cmplti	r2,r2,8
80011b4c:	10027e26 	beq	r2,zero,80012548 <___svfprintf_internal_r+0x1324>
80011b50:	8d00010e 	bge	r17,r20,80011b58 <___svfprintf_internal_r+0x934>
80011b54:	a023883a 	mov	r17,r20
80011b58:	d8800617 	ldw	r2,24(sp)
80011b5c:	1445883a 	add	r2,r2,r17
80011b60:	d8800615 	stw	r2,24(sp)
80011b64:	1801521e 	bne	r3,zero,800120b0 <___svfprintf_internal_r+0xe8c>
80011b68:	d8001d15 	stw	zero,116(sp)
80011b6c:	a811883a 	mov	r8,r21
80011b70:	003dd306 	br	800112c0 <_gp+0xfffe054c>
80011b74:	21003fcc 	andi	r4,r4,255
80011b78:	20058b1e 	bne	r4,zero,800131a8 <___svfprintf_internal_r+0x1f84>
80011b7c:	00a000b4 	movhi	r2,32770
80011b80:	109aa304 	addi	r2,r2,27276
80011b84:	d8800e15 	stw	r2,56(sp)
80011b88:	5880080c 	andi	r2,r11,32
80011b8c:	10002a26 	beq	r2,zero,80011c38 <___svfprintf_internal_r+0xa14>
80011b90:	d8800817 	ldw	r2,32(sp)
80011b94:	15000017 	ldw	r20,0(r2)
80011b98:	15c00117 	ldw	r23,4(r2)
80011b9c:	10800204 	addi	r2,r2,8
80011ba0:	d8800815 	stw	r2,32(sp)
80011ba4:	5880004c 	andi	r2,r11,1
80011ba8:	10000226 	beq	r2,zero,80011bb4 <___svfprintf_internal_r+0x990>
80011bac:	a5c4b03a 	or	r2,r20,r23
80011bb0:	1002721e 	bne	r2,zero,8001257c <___svfprintf_internal_r+0x1358>
80011bb4:	00800084 	movi	r2,2
80011bb8:	003e6f06 	br	80011578 <_gp+0xfffe0804>
80011bbc:	d8800817 	ldw	r2,32(sp)
80011bc0:	e4000003 	ldbu	r16,0(fp)
80011bc4:	14400017 	ldw	r17,0(r2)
80011bc8:	10800104 	addi	r2,r2,4
80011bcc:	8802f016 	blt	r17,zero,80012790 <___svfprintf_internal_r+0x156c>
80011bd0:	d8800815 	stw	r2,32(sp)
80011bd4:	84003fcc 	andi	r16,r16,255
80011bd8:	8400201c 	xori	r16,r16,128
80011bdc:	843fe004 	addi	r16,r16,-128
80011be0:	003ddc06 	br	80011354 <_gp+0xfffe05e0>
80011be4:	5ac00054 	ori	r11,r11,1
80011be8:	e4000007 	ldb	r16,0(fp)
80011bec:	003dd906 	br	80011354 <_gp+0xfffe05e0>
80011bf0:	28803fcc 	andi	r2,r5,255
80011bf4:	1080201c 	xori	r2,r2,128
80011bf8:	10bfe004 	addi	r2,r2,-128
80011bfc:	e4000003 	ldbu	r16,0(fp)
80011c00:	103ff41e 	bne	r2,zero,80011bd4 <_gp+0xfffe0e60>
80011c04:	84003fcc 	andi	r16,r16,255
80011c08:	8400201c 	xori	r16,r16,128
80011c0c:	01000044 	movi	r4,1
80011c10:	01400804 	movi	r5,32
80011c14:	843fe004 	addi	r16,r16,-128
80011c18:	003dce06 	br	80011354 <_gp+0xfffe05e0>
80011c1c:	21003fcc 	andi	r4,r4,255
80011c20:	2005591e 	bne	r4,zero,80013188 <___svfprintf_internal_r+0x1f64>
80011c24:	00a000b4 	movhi	r2,32770
80011c28:	109aa804 	addi	r2,r2,27296
80011c2c:	d8800e15 	stw	r2,56(sp)
80011c30:	5880080c 	andi	r2,r11,32
80011c34:	103fd61e 	bne	r2,zero,80011b90 <_gp+0xfffe0e1c>
80011c38:	d8c00817 	ldw	r3,32(sp)
80011c3c:	5880040c 	andi	r2,r11,16
80011c40:	1d000017 	ldw	r20,0(r3)
80011c44:	18c00104 	addi	r3,r3,4
80011c48:	d8c00815 	stw	r3,32(sp)
80011c4c:	1002471e 	bne	r2,zero,8001256c <___svfprintf_internal_r+0x1348>
80011c50:	5880100c 	andi	r2,r11,64
80011c54:	10024526 	beq	r2,zero,8001256c <___svfprintf_internal_r+0x1348>
80011c58:	a53fffcc 	andi	r20,r20,65535
80011c5c:	002f883a 	mov	r23,zero
80011c60:	003fd006 	br	80011ba4 <_gp+0xfffe0e30>
80011c64:	5ac02014 	ori	r11,r11,128
80011c68:	e4000007 	ldb	r16,0(fp)
80011c6c:	003db906 	br	80011354 <_gp+0xfffe05e0>
80011c70:	e4000007 	ldb	r16,0(fp)
80011c74:	e0c00044 	addi	r3,fp,1
80011c78:	80800aa0 	cmpeqi	r2,r16,42
80011c7c:	1005291e 	bne	r2,zero,80013124 <___svfprintf_internal_r+0x1f00>
80011c80:	80bff404 	addi	r2,r16,-48
80011c84:	118002b0 	cmpltui	r6,r2,10
80011c88:	1839883a 	mov	fp,r3
80011c8c:	002d883a 	mov	r22,zero
80011c90:	303db126 	beq	r6,zero,80011358 <_gp+0xfffe05e4>
80011c94:	e7000044 	addi	fp,fp,1
80011c98:	b58002a4 	muli	r22,r22,10
80011c9c:	e43fffc7 	ldb	r16,-1(fp)
80011ca0:	b0ad883a 	add	r22,r22,r2
80011ca4:	80bff404 	addi	r2,r16,-48
80011ca8:	10c002b0 	cmpltui	r3,r2,10
80011cac:	183ff91e 	bne	r3,zero,80011c94 <_gp+0xfffe0f20>
80011cb0:	003da906 	br	80011358 <_gp+0xfffe05e4>
80011cb4:	e4000003 	ldbu	r16,0(fp)
80011cb8:	84003fcc 	andi	r16,r16,255
80011cbc:	8400201c 	xori	r16,r16,128
80011cc0:	5ac00114 	ori	r11,r11,4
80011cc4:	843fe004 	addi	r16,r16,-128
80011cc8:	003da206 	br	80011354 <_gp+0xfffe05e0>
80011ccc:	01000044 	movi	r4,1
80011cd0:	01400ac4 	movi	r5,43
80011cd4:	e4000007 	ldb	r16,0(fp)
80011cd8:	003d9e06 	br	80011354 <_gp+0xfffe05e0>
80011cdc:	5ac00214 	ori	r11,r11,8
80011ce0:	e4000007 	ldb	r16,0(fp)
80011ce4:	003d9b06 	br	80011354 <_gp+0xfffe05e0>
80011ce8:	21003fcc 	andi	r4,r4,255
80011cec:	2005381e 	bne	r4,zero,800131d0 <___svfprintf_internal_r+0x1fac>
80011cf0:	d8c00817 	ldw	r3,32(sp)
80011cf4:	00a00034 	movhi	r2,32768
80011cf8:	10bfffc4 	addi	r2,r2,-1
80011cfc:	1d000117 	ldw	r20,4(r3)
80011d00:	1cc00017 	ldw	r19,0(r3)
80011d04:	01dffc34 	movhi	r7,32752
80011d08:	a0a4703a 	and	r18,r20,r2
80011d0c:	01bfffc4 	movi	r6,-1
80011d10:	18800204 	addi	r2,r3,8
80011d14:	39ffffc4 	addi	r7,r7,-1
80011d18:	9809883a 	mov	r4,r19
80011d1c:	900b883a 	mov	r5,r18
80011d20:	da000915 	stw	r8,36(sp)
80011d24:	dac00715 	stw	r11,28(sp)
80011d28:	dd000c15 	stw	r20,48(sp)
80011d2c:	dcc00b15 	stw	r19,44(sp)
80011d30:	d8800815 	stw	r2,32(sp)
80011d34:	001f7f40 	call	8001f7f4 <__unorddf2>
80011d38:	dac00717 	ldw	r11,28(sp)
80011d3c:	da000917 	ldw	r8,36(sp)
80011d40:	1002191e 	bne	r2,zero,800125a8 <___svfprintf_internal_r+0x1384>
80011d44:	01dffc34 	movhi	r7,32752
80011d48:	01bfffc4 	movi	r6,-1
80011d4c:	39ffffc4 	addi	r7,r7,-1
80011d50:	9809883a 	mov	r4,r19
80011d54:	900b883a 	mov	r5,r18
80011d58:	001f7140 	call	8001f714 <__ledf2>
80011d5c:	dac00717 	ldw	r11,28(sp)
80011d60:	da000917 	ldw	r8,36(sp)
80011d64:	0082100e 	bge	zero,r2,800125a8 <___svfprintf_internal_r+0x1384>
80011d68:	000d883a 	mov	r6,zero
80011d6c:	000f883a 	mov	r7,zero
80011d70:	9809883a 	mov	r4,r19
80011d74:	a00b883a 	mov	r5,r20
80011d78:	001f7140 	call	8001f714 <__ledf2>
80011d7c:	dac00717 	ldw	r11,28(sp)
80011d80:	da000917 	ldw	r8,36(sp)
80011d84:	1003c316 	blt	r2,zero,80012c94 <___svfprintf_internal_r+0x1a70>
80011d88:	db001543 	ldbu	r12,85(sp)
80011d8c:	80801208 	cmpgei	r2,r16,72
80011d90:	10034e1e 	bne	r2,zero,80012acc <___svfprintf_internal_r+0x18a8>
80011d94:	04a000b4 	movhi	r18,32770
80011d98:	949a9f04 	addi	r18,r18,27260
80011d9c:	04ffdfc4 	movi	r19,-129
80011da0:	5ce6703a 	and	r19,r11,r19
80011da4:	050000c4 	movi	r20,3
80011da8:	05c000c4 	movi	r23,3
80011dac:	002d883a 	mov	r22,zero
80011db0:	d8000915 	stw	zero,36(sp)
80011db4:	00003606 	br	80011e90 <___svfprintf_internal_r+0xc6c>
80011db8:	21003fcc 	andi	r4,r4,255
80011dbc:	2005001e 	bne	r4,zero,800131c0 <___svfprintf_internal_r+0x1f9c>
80011dc0:	5ac00414 	ori	r11,r11,16
80011dc4:	5880080c 	andi	r2,r11,32
80011dc8:	103e801e 	bne	r2,zero,800117cc <_gp+0xfffe0a58>
80011dcc:	d8c00817 	ldw	r3,32(sp)
80011dd0:	5880040c 	andi	r2,r11,16
80011dd4:	1d000017 	ldw	r20,0(r3)
80011dd8:	18c00104 	addi	r3,r3,4
80011ddc:	d8c00815 	stw	r3,32(sp)
80011de0:	1001e41e 	bne	r2,zero,80012574 <___svfprintf_internal_r+0x1350>
80011de4:	5880100c 	andi	r2,r11,64
80011de8:	1001e226 	beq	r2,zero,80012574 <___svfprintf_internal_r+0x1350>
80011dec:	a53fffcc 	andi	r20,r20,65535
80011df0:	a520001c 	xori	r20,r20,32768
80011df4:	a5200004 	addi	r20,r20,-32768
80011df8:	a02fd7fa 	srai	r23,r20,31
80011dfc:	b83e790e 	bge	r23,zero,800117e4 <_gp+0xfffe0a70>
80011e00:	0529c83a 	sub	r20,zero,r20
80011e04:	a004c03a 	cmpne	r2,r20,zero
80011e08:	05efc83a 	sub	r23,zero,r23
80011e0c:	b8afc83a 	sub	r23,r23,r2
80011e10:	00800b44 	movi	r2,45
80011e14:	d8801545 	stb	r2,85(sp)
80011e18:	b0bfffd8 	cmpnei	r2,r22,-1
80011e1c:	03000b44 	movi	r12,45
80011e20:	103e731e 	bne	r2,zero,800117f0 <_gp+0xfffe0a7c>
80011e24:	5827883a 	mov	r19,r11
80011e28:	b8028f1e 	bne	r23,zero,80012868 <___svfprintf_internal_r+0x1644>
80011e2c:	a08002a8 	cmpgeui	r2,r20,10
80011e30:	10028d1e 	bne	r2,zero,80012868 <___svfprintf_internal_r+0x1644>
80011e34:	a5000c04 	addi	r20,r20,48
80011e38:	dd0028c5 	stb	r20,163(sp)
80011e3c:	05c00044 	movi	r23,1
80011e40:	dc8028c4 	addi	r18,sp,163
80011e44:	00000e06 	br	80011e80 <___svfprintf_internal_r+0xc5c>
80011e48:	d9000e17 	ldw	r4,56(sp)
80011e4c:	a825883a 	mov	r18,r21
80011e50:	a08003cc 	andi	r2,r20,15
80011e54:	b806973a 	slli	r3,r23,28
80011e58:	2085883a 	add	r2,r4,r2
80011e5c:	a028d13a 	srli	r20,r20,4
80011e60:	10800003 	ldbu	r2,0(r2)
80011e64:	b82ed13a 	srli	r23,r23,4
80011e68:	94bfffc4 	addi	r18,r18,-1
80011e6c:	1d28b03a 	or	r20,r3,r20
80011e70:	90800005 	stb	r2,0(r18)
80011e74:	a5c4b03a 	or	r2,r20,r23
80011e78:	103ff51e 	bne	r2,zero,80011e50 <_gp+0xfffe10dc>
80011e7c:	acafc83a 	sub	r23,r21,r18
80011e80:	b029883a 	mov	r20,r22
80011e84:	b5c0010e 	bge	r22,r23,80011e8c <___svfprintf_internal_r+0xc68>
80011e88:	b829883a 	mov	r20,r23
80011e8c:	d8000915 	stw	zero,36(sp)
80011e90:	60803fcc 	andi	r2,r12,255
80011e94:	1080201c 	xori	r2,r2,128
80011e98:	10bfe004 	addi	r2,r2,-128
80011e9c:	103e6326 	beq	r2,zero,8001182c <_gp+0xfffe0ab8>
80011ea0:	a5000044 	addi	r20,r20,1
80011ea4:	003e6106 	br	8001182c <_gp+0xfffe0ab8>
80011ea8:	84001990 	cmplti	r16,r16,102
80011eac:	8000a11e 	bne	r16,zero,80012134 <___svfprintf_internal_r+0xf10>
80011eb0:	d9000b17 	ldw	r4,44(sp)
80011eb4:	d9400c17 	ldw	r5,48(sp)
80011eb8:	000d883a 	mov	r6,zero
80011ebc:	000f883a 	mov	r7,zero
80011ec0:	da000d15 	stw	r8,52(sp)
80011ec4:	d8c00715 	stw	r3,28(sp)
80011ec8:	001f6940 	call	8001f694 <__eqdf2>
80011ecc:	d8c00717 	ldw	r3,28(sp)
80011ed0:	da000d17 	ldw	r8,52(sp)
80011ed4:	1000f61e 	bne	r2,zero,800122b0 <___svfprintf_internal_r+0x108c>
80011ed8:	d8801d17 	ldw	r2,116(sp)
80011edc:	012000b4 	movhi	r4,32770
80011ee0:	211aaf04 	addi	r4,r4,27324
80011ee4:	10800044 	addi	r2,r2,1
80011ee8:	18c00044 	addi	r3,r3,1
80011eec:	41000015 	stw	r4,0(r8)
80011ef0:	01000044 	movi	r4,1
80011ef4:	d8801d15 	stw	r2,116(sp)
80011ef8:	41000115 	stw	r4,4(r8)
80011efc:	d8c01e15 	stw	r3,120(sp)
80011f00:	10800208 	cmpgei	r2,r2,8
80011f04:	1002ca1e 	bne	r2,zero,80012a30 <___svfprintf_internal_r+0x180c>
80011f08:	42000204 	addi	r8,r8,8
80011f0c:	d8801617 	ldw	r2,88(sp)
80011f10:	d8c00a17 	ldw	r3,40(sp)
80011f14:	10c00416 	blt	r2,r3,80011f28 <___svfprintf_internal_r+0xd04>
80011f18:	9880004c 	andi	r2,r19,1
80011f1c:	1000021e 	bne	r2,zero,80011f28 <___svfprintf_internal_r+0xd04>
80011f20:	d8c01e17 	ldw	r3,120(sp)
80011f24:	003edc06 	br	80011a98 <_gp+0xfffe0d24>
80011f28:	d8801017 	ldw	r2,64(sp)
80011f2c:	d8c01e17 	ldw	r3,120(sp)
80011f30:	d9000f17 	ldw	r4,60(sp)
80011f34:	40800015 	stw	r2,0(r8)
80011f38:	d8801d17 	ldw	r2,116(sp)
80011f3c:	20c7883a 	add	r3,r4,r3
80011f40:	41000115 	stw	r4,4(r8)
80011f44:	10800044 	addi	r2,r2,1
80011f48:	d8801d15 	stw	r2,116(sp)
80011f4c:	d8c01e15 	stw	r3,120(sp)
80011f50:	10800208 	cmpgei	r2,r2,8
80011f54:	10022e1e 	bne	r2,zero,80012810 <___svfprintf_internal_r+0x15ec>
80011f58:	42000204 	addi	r8,r8,8
80011f5c:	d8800a17 	ldw	r2,40(sp)
80011f60:	143fffc4 	addi	r16,r2,-1
80011f64:	043ecc0e 	bge	zero,r16,80011a98 <_gp+0xfffe0d24>
80011f68:	02e000b4 	movhi	r11,32770
80011f6c:	81000450 	cmplti	r4,r16,17
80011f70:	5adaaf84 	addi	r11,r11,27326
80011f74:	d8801d17 	ldw	r2,116(sp)
80011f78:	20027f1e 	bne	r4,zero,80012978 <___svfprintf_internal_r+0x1754>
80011f7c:	04800404 	movi	r18,16
80011f80:	dd800517 	ldw	r22,20(sp)
80011f84:	582f883a 	mov	r23,r11
80011f88:	00000406 	br	80011f9c <___svfprintf_internal_r+0xd78>
80011f8c:	42000204 	addi	r8,r8,8
80011f90:	843ffc04 	addi	r16,r16,-16
80011f94:	81000448 	cmpgei	r4,r16,17
80011f98:	20027626 	beq	r4,zero,80012974 <___svfprintf_internal_r+0x1750>
80011f9c:	10800044 	addi	r2,r2,1
80011fa0:	18c00404 	addi	r3,r3,16
80011fa4:	45c00015 	stw	r23,0(r8)
80011fa8:	44800115 	stw	r18,4(r8)
80011fac:	d8c01e15 	stw	r3,120(sp)
80011fb0:	d8801d15 	stw	r2,116(sp)
80011fb4:	11000208 	cmpgei	r4,r2,8
80011fb8:	203ff426 	beq	r4,zero,80011f8c <_gp+0xfffe1218>
80011fbc:	d9400417 	ldw	r5,16(sp)
80011fc0:	d9801c04 	addi	r6,sp,112
80011fc4:	b009883a 	mov	r4,r22
80011fc8:	001a82c0 	call	8001a82c <__ssprint_r>
80011fcc:	103d501e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80011fd0:	d8c01e17 	ldw	r3,120(sp)
80011fd4:	d8801d17 	ldw	r2,116(sp)
80011fd8:	a811883a 	mov	r8,r21
80011fdc:	003fec06 	br	80011f90 <_gp+0xfffe121c>
80011fe0:	8d0fc83a 	sub	r7,r17,r20
80011fe4:	01fe6b0e 	bge	zero,r7,80011994 <_gp+0xfffe0c20>
80011fe8:	02e000b4 	movhi	r11,32770
80011fec:	39000450 	cmplti	r4,r7,17
80011ff0:	5adaaf84 	addi	r11,r11,27326
80011ff4:	d8801d17 	ldw	r2,116(sp)
80011ff8:	2000231e 	bne	r4,zero,80012088 <___svfprintf_internal_r+0xe64>
80011ffc:	dc000d15 	stw	r16,52(sp)
80012000:	dc401215 	stw	r17,72(sp)
80012004:	03000404 	movi	r12,16
80012008:	3821883a 	mov	r16,r7
8001200c:	5823883a 	mov	r17,r11
80012010:	00000406 	br	80012024 <___svfprintf_internal_r+0xe00>
80012014:	843ffc04 	addi	r16,r16,-16
80012018:	81000448 	cmpgei	r4,r16,17
8001201c:	42000204 	addi	r8,r8,8
80012020:	20001526 	beq	r4,zero,80012078 <___svfprintf_internal_r+0xe54>
80012024:	10800044 	addi	r2,r2,1
80012028:	18c00404 	addi	r3,r3,16
8001202c:	44400015 	stw	r17,0(r8)
80012030:	43000115 	stw	r12,4(r8)
80012034:	d8c01e15 	stw	r3,120(sp)
80012038:	d8801d15 	stw	r2,116(sp)
8001203c:	11000208 	cmpgei	r4,r2,8
80012040:	203ff426 	beq	r4,zero,80012014 <_gp+0xfffe12a0>
80012044:	d9400417 	ldw	r5,16(sp)
80012048:	d9000517 	ldw	r4,20(sp)
8001204c:	d9801c04 	addi	r6,sp,112
80012050:	db000715 	stw	r12,28(sp)
80012054:	001a82c0 	call	8001a82c <__ssprint_r>
80012058:	103d2d1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
8001205c:	843ffc04 	addi	r16,r16,-16
80012060:	81000448 	cmpgei	r4,r16,17
80012064:	d8c01e17 	ldw	r3,120(sp)
80012068:	d8801d17 	ldw	r2,116(sp)
8001206c:	a811883a 	mov	r8,r21
80012070:	db000717 	ldw	r12,28(sp)
80012074:	203feb1e 	bne	r4,zero,80012024 <_gp+0xfffe12b0>
80012078:	800f883a 	mov	r7,r16
8001207c:	8817883a 	mov	r11,r17
80012080:	dc000d17 	ldw	r16,52(sp)
80012084:	dc401217 	ldw	r17,72(sp)
80012088:	10800044 	addi	r2,r2,1
8001208c:	19c7883a 	add	r3,r3,r7
80012090:	d8801d15 	stw	r2,116(sp)
80012094:	42c00015 	stw	r11,0(r8)
80012098:	41c00115 	stw	r7,4(r8)
8001209c:	d8c01e15 	stw	r3,120(sp)
800120a0:	10800208 	cmpgei	r2,r2,8
800120a4:	10023d1e 	bne	r2,zero,8001299c <___svfprintf_internal_r+0x1778>
800120a8:	42000204 	addi	r8,r8,8
800120ac:	003e3906 	br	80011994 <_gp+0xfffe0c20>
800120b0:	d9400417 	ldw	r5,16(sp)
800120b4:	d9000517 	ldw	r4,20(sp)
800120b8:	d9801c04 	addi	r6,sp,112
800120bc:	001a82c0 	call	8001a82c <__ssprint_r>
800120c0:	103ea926 	beq	r2,zero,80011b68 <_gp+0xfffe0df4>
800120c4:	003d1206 	br	80011510 <_gp+0xfffe079c>
800120c8:	d9400417 	ldw	r5,16(sp)
800120cc:	d9000517 	ldw	r4,20(sp)
800120d0:	d9801c04 	addi	r6,sp,112
800120d4:	001a82c0 	call	8001a82c <__ssprint_r>
800120d8:	103d0d1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800120dc:	d9001617 	ldw	r4,88(sp)
800120e0:	d8c01e17 	ldw	r3,120(sp)
800120e4:	d8801d17 	ldw	r2,116(sp)
800120e8:	a811883a 	mov	r8,r21
800120ec:	20036b16 	blt	r4,zero,80012e9c <___svfprintf_internal_r+0x1c78>
800120f0:	d9000a17 	ldw	r4,40(sp)
800120f4:	10800044 	addi	r2,r2,1
800120f8:	d8801d15 	stw	r2,116(sp)
800120fc:	20c7883a 	add	r3,r4,r3
80012100:	44800015 	stw	r18,0(r8)
80012104:	41000115 	stw	r4,4(r8)
80012108:	d8c01e15 	stw	r3,120(sp)
8001210c:	10800208 	cmpgei	r2,r2,8
80012110:	103e6026 	beq	r2,zero,80011a94 <_gp+0xfffe0d20>
80012114:	d9400417 	ldw	r5,16(sp)
80012118:	d9000517 	ldw	r4,20(sp)
8001211c:	d9801c04 	addi	r6,sp,112
80012120:	001a82c0 	call	8001a82c <__ssprint_r>
80012124:	103cfa1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012128:	d8c01e17 	ldw	r3,120(sp)
8001212c:	a811883a 	mov	r8,r21
80012130:	003e5906 	br	80011a98 <_gp+0xfffe0d24>
80012134:	d8800a17 	ldw	r2,40(sp)
80012138:	da801d17 	ldw	r10,116(sp)
8001213c:	18c00044 	addi	r3,r3,1
80012140:	10800088 	cmpgei	r2,r2,2
80012144:	54000044 	addi	r16,r10,1
80012148:	45c00204 	addi	r23,r8,8
8001214c:	1000f226 	beq	r2,zero,80012518 <___svfprintf_internal_r+0x12f4>
80012150:	00800044 	movi	r2,1
80012154:	40800115 	stw	r2,4(r8)
80012158:	44800015 	stw	r18,0(r8)
8001215c:	d8c01e15 	stw	r3,120(sp)
80012160:	dc001d15 	stw	r16,116(sp)
80012164:	80800210 	cmplti	r2,r16,8
80012168:	1001ed26 	beq	r2,zero,80012920 <___svfprintf_internal_r+0x16fc>
8001216c:	d8800f17 	ldw	r2,60(sp)
80012170:	d9001017 	ldw	r4,64(sp)
80012174:	84000044 	addi	r16,r16,1
80012178:	1887883a 	add	r3,r3,r2
8001217c:	b8800115 	stw	r2,4(r23)
80012180:	b9000015 	stw	r4,0(r23)
80012184:	d8c01e15 	stw	r3,120(sp)
80012188:	dc001d15 	stw	r16,116(sp)
8001218c:	80800208 	cmpgei	r2,r16,8
80012190:	1001ec1e 	bne	r2,zero,80012944 <___svfprintf_internal_r+0x1720>
80012194:	bdc00204 	addi	r23,r23,8
80012198:	d8800a17 	ldw	r2,40(sp)
8001219c:	d9000b17 	ldw	r4,44(sp)
800121a0:	d9400c17 	ldw	r5,48(sp)
800121a4:	133fffc4 	addi	r12,r2,-1
800121a8:	ba000204 	addi	r8,r23,8
800121ac:	85800044 	addi	r22,r16,1
800121b0:	000d883a 	mov	r6,zero
800121b4:	000f883a 	mov	r7,zero
800121b8:	d8c01215 	stw	r3,72(sp)
800121bc:	db000915 	stw	r12,36(sp)
800121c0:	da000715 	stw	r8,28(sp)
800121c4:	dd800d15 	stw	r22,52(sp)
800121c8:	001f6940 	call	8001f694 <__eqdf2>
800121cc:	da000717 	ldw	r8,28(sp)
800121d0:	db000917 	ldw	r12,36(sp)
800121d4:	db400d17 	ldw	r13,52(sp)
800121d8:	d8c01217 	ldw	r3,72(sp)
800121dc:	10009326 	beq	r2,zero,8001242c <___svfprintf_internal_r+0x1208>
800121e0:	94800044 	addi	r18,r18,1
800121e4:	1b07883a 	add	r3,r3,r12
800121e8:	bc800015 	stw	r18,0(r23)
800121ec:	bb000115 	stw	r12,4(r23)
800121f0:	d8c01e15 	stw	r3,120(sp)
800121f4:	dd801d15 	stw	r22,116(sp)
800121f8:	b2800208 	cmpgei	r10,r22,8
800121fc:	5001721e 	bne	r10,zero,800127c8 <___svfprintf_internal_r+0x15a4>
80012200:	b8800404 	addi	r2,r23,16
80012204:	85800084 	addi	r22,r16,2
80012208:	402f883a 	mov	r23,r8
8001220c:	1011883a 	mov	r8,r2
80012210:	d9001117 	ldw	r4,68(sp)
80012214:	d8801844 	addi	r2,sp,97
80012218:	b8800015 	stw	r2,0(r23)
8001221c:	20c7883a 	add	r3,r4,r3
80012220:	b9000115 	stw	r4,4(r23)
80012224:	d8c01e15 	stw	r3,120(sp)
80012228:	dd801d15 	stw	r22,116(sp)
8001222c:	b2800210 	cmplti	r10,r22,8
80012230:	503e191e 	bne	r10,zero,80011a98 <_gp+0xfffe0d24>
80012234:	003fb706 	br	80012114 <_gp+0xfffe13a0>
80012238:	d9400417 	ldw	r5,16(sp)
8001223c:	d9000517 	ldw	r4,20(sp)
80012240:	d9801c04 	addi	r6,sp,112
80012244:	dac00d15 	stw	r11,52(sp)
80012248:	db000715 	stw	r12,28(sp)
8001224c:	001a82c0 	call	8001a82c <__ssprint_r>
80012250:	103caf1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012254:	d8c01e17 	ldw	r3,120(sp)
80012258:	a811883a 	mov	r8,r21
8001225c:	dac00d17 	ldw	r11,52(sp)
80012260:	db000717 	ldw	r12,28(sp)
80012264:	003dbc06 	br	80011958 <_gp+0xfffe0be4>
80012268:	d9400417 	ldw	r5,16(sp)
8001226c:	d9000517 	ldw	r4,20(sp)
80012270:	d9801c04 	addi	r6,sp,112
80012274:	dac00715 	stw	r11,28(sp)
80012278:	001a82c0 	call	8001a82c <__ssprint_r>
8001227c:	103ca41e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012280:	d8c01e17 	ldw	r3,120(sp)
80012284:	a811883a 	mov	r8,r21
80012288:	dac00717 	ldw	r11,28(sp)
8001228c:	003dbf06 	br	8001198c <_gp+0xfffe0c18>
80012290:	d9400417 	ldw	r5,16(sp)
80012294:	d9000517 	ldw	r4,20(sp)
80012298:	d9801c04 	addi	r6,sp,112
8001229c:	001a82c0 	call	8001a82c <__ssprint_r>
800122a0:	103c9b1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800122a4:	d8c01e17 	ldw	r3,120(sp)
800122a8:	a811883a 	mov	r8,r21
800122ac:	003dee06 	br	80011a68 <_gp+0xfffe0cf4>
800122b0:	d9001617 	ldw	r4,88(sp)
800122b4:	0101c10e 	bge	zero,r4,800129bc <___svfprintf_internal_r+0x1798>
800122b8:	d8800917 	ldw	r2,36(sp)
800122bc:	d9000a17 	ldw	r4,40(sp)
800122c0:	1021883a 	mov	r16,r2
800122c4:	20810d16 	blt	r4,r2,800126fc <___svfprintf_internal_r+0x14d8>
800122c8:	04000a0e 	bge	zero,r16,800122f4 <___svfprintf_internal_r+0x10d0>
800122cc:	d8801d17 	ldw	r2,116(sp)
800122d0:	1c07883a 	add	r3,r3,r16
800122d4:	44800015 	stw	r18,0(r8)
800122d8:	10800044 	addi	r2,r2,1
800122dc:	d8801d15 	stw	r2,116(sp)
800122e0:	44000115 	stw	r16,4(r8)
800122e4:	d8c01e15 	stw	r3,120(sp)
800122e8:	10800208 	cmpgei	r2,r2,8
800122ec:	10026d1e 	bne	r2,zero,80012ca4 <___svfprintf_internal_r+0x1a80>
800122f0:	42000204 	addi	r8,r8,8
800122f4:	80014e16 	blt	r16,zero,80012830 <___svfprintf_internal_r+0x160c>
800122f8:	d8800917 	ldw	r2,36(sp)
800122fc:	1421c83a 	sub	r16,r2,r16
80012300:	04010116 	blt	zero,r16,80012708 <___svfprintf_internal_r+0x14e4>
80012304:	d8801617 	ldw	r2,88(sp)
80012308:	d9000a17 	ldw	r4,40(sp)
8001230c:	11000216 	blt	r2,r4,80012318 <___svfprintf_internal_r+0x10f4>
80012310:	9900004c 	andi	r4,r19,1
80012314:	20000c26 	beq	r4,zero,80012348 <___svfprintf_internal_r+0x1124>
80012318:	d9001017 	ldw	r4,64(sp)
8001231c:	d9400f17 	ldw	r5,60(sp)
80012320:	41000015 	stw	r4,0(r8)
80012324:	d9001d17 	ldw	r4,116(sp)
80012328:	1947883a 	add	r3,r3,r5
8001232c:	41400115 	stw	r5,4(r8)
80012330:	21000044 	addi	r4,r4,1
80012334:	d9001d15 	stw	r4,116(sp)
80012338:	d8c01e15 	stw	r3,120(sp)
8001233c:	21000208 	cmpgei	r4,r4,8
80012340:	2002611e 	bne	r4,zero,80012cc8 <___svfprintf_internal_r+0x1aa4>
80012344:	42000204 	addi	r8,r8,8
80012348:	d9000a17 	ldw	r4,40(sp)
8001234c:	d9400917 	ldw	r5,36(sp)
80012350:	2085c83a 	sub	r2,r4,r2
80012354:	2149c83a 	sub	r4,r4,r5
80012358:	1021883a 	mov	r16,r2
8001235c:	2080010e 	bge	r4,r2,80012364 <___svfprintf_internal_r+0x1140>
80012360:	2021883a 	mov	r16,r4
80012364:	04000c0e 	bge	zero,r16,80012398 <___svfprintf_internal_r+0x1174>
80012368:	d9000917 	ldw	r4,36(sp)
8001236c:	1c07883a 	add	r3,r3,r16
80012370:	44000115 	stw	r16,4(r8)
80012374:	9125883a 	add	r18,r18,r4
80012378:	d9001d17 	ldw	r4,116(sp)
8001237c:	44800015 	stw	r18,0(r8)
80012380:	d8c01e15 	stw	r3,120(sp)
80012384:	21000044 	addi	r4,r4,1
80012388:	d9001d15 	stw	r4,116(sp)
8001238c:	21000208 	cmpgei	r4,r4,8
80012390:	2002841e 	bne	r4,zero,80012da4 <___svfprintf_internal_r+0x1b80>
80012394:	42000204 	addi	r8,r8,8
80012398:	8000010e 	bge	r16,zero,800123a0 <___svfprintf_internal_r+0x117c>
8001239c:	0021883a 	mov	r16,zero
800123a0:	1421c83a 	sub	r16,r2,r16
800123a4:	043dbc0e 	bge	zero,r16,80011a98 <_gp+0xfffe0d24>
800123a8:	02e000b4 	movhi	r11,32770
800123ac:	81000450 	cmplti	r4,r16,17
800123b0:	5adaaf84 	addi	r11,r11,27326
800123b4:	d8801d17 	ldw	r2,116(sp)
800123b8:	20016f1e 	bne	r4,zero,80012978 <___svfprintf_internal_r+0x1754>
800123bc:	04800404 	movi	r18,16
800123c0:	dd800517 	ldw	r22,20(sp)
800123c4:	582f883a 	mov	r23,r11
800123c8:	00000406 	br	800123dc <___svfprintf_internal_r+0x11b8>
800123cc:	42000204 	addi	r8,r8,8
800123d0:	843ffc04 	addi	r16,r16,-16
800123d4:	81000448 	cmpgei	r4,r16,17
800123d8:	20016626 	beq	r4,zero,80012974 <___svfprintf_internal_r+0x1750>
800123dc:	10800044 	addi	r2,r2,1
800123e0:	18c00404 	addi	r3,r3,16
800123e4:	45c00015 	stw	r23,0(r8)
800123e8:	44800115 	stw	r18,4(r8)
800123ec:	d8c01e15 	stw	r3,120(sp)
800123f0:	d8801d15 	stw	r2,116(sp)
800123f4:	11000208 	cmpgei	r4,r2,8
800123f8:	203ff426 	beq	r4,zero,800123cc <_gp+0xfffe1658>
800123fc:	d9400417 	ldw	r5,16(sp)
80012400:	d9801c04 	addi	r6,sp,112
80012404:	b009883a 	mov	r4,r22
80012408:	001a82c0 	call	8001a82c <__ssprint_r>
8001240c:	103c401e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012410:	d8c01e17 	ldw	r3,120(sp)
80012414:	d8801d17 	ldw	r2,116(sp)
80012418:	a811883a 	mov	r8,r21
8001241c:	003fec06 	br	800123d0 <_gp+0xfffe165c>
80012420:	002f883a 	mov	r23,zero
80012424:	a825883a 	mov	r18,r21
80012428:	003e9506 	br	80011e80 <_gp+0xfffe110c>
8001242c:	033f780e 	bge	zero,r12,80012210 <_gp+0xfffe149c>
80012430:	60800450 	cmplti	r2,r12,17
80012434:	02e000b4 	movhi	r11,32770
80012438:	1003241e 	bne	r2,zero,800130cc <___svfprintf_internal_r+0x1ea8>
8001243c:	5adaaf84 	addi	r11,r11,27326
80012440:	b805883a 	mov	r2,r23
80012444:	dc400715 	stw	r17,28(sp)
80012448:	982f883a 	mov	r23,r19
8001244c:	04800404 	movi	r18,16
80012450:	6023883a 	mov	r17,r12
80012454:	dd800517 	ldw	r22,20(sp)
80012458:	5827883a 	mov	r19,r11
8001245c:	6821883a 	mov	r16,r13
80012460:	00000506 	br	80012478 <___svfprintf_internal_r+0x1254>
80012464:	10800204 	addi	r2,r2,8
80012468:	8c7ffc04 	addi	r17,r17,-16
8001246c:	89000448 	cmpgei	r4,r17,17
80012470:	20017626 	beq	r4,zero,80012a4c <___svfprintf_internal_r+0x1828>
80012474:	84000044 	addi	r16,r16,1
80012478:	18c00404 	addi	r3,r3,16
8001247c:	14c00015 	stw	r19,0(r2)
80012480:	14800115 	stw	r18,4(r2)
80012484:	d8c01e15 	stw	r3,120(sp)
80012488:	dc001d15 	stw	r16,116(sp)
8001248c:	81000208 	cmpgei	r4,r16,8
80012490:	203ff426 	beq	r4,zero,80012464 <_gp+0xfffe16f0>
80012494:	d9400417 	ldw	r5,16(sp)
80012498:	d9801c04 	addi	r6,sp,112
8001249c:	b009883a 	mov	r4,r22
800124a0:	001a82c0 	call	8001a82c <__ssprint_r>
800124a4:	103c1a1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800124a8:	dc001d17 	ldw	r16,116(sp)
800124ac:	d8c01e17 	ldw	r3,120(sp)
800124b0:	a805883a 	mov	r2,r21
800124b4:	003fec06 	br	80012468 <_gp+0xfffe16f4>
800124b8:	d8c00817 	ldw	r3,32(sp)
800124bc:	5880040c 	andi	r2,r11,16
800124c0:	1d000017 	ldw	r20,0(r3)
800124c4:	18c00104 	addi	r3,r3,4
800124c8:	d8c00815 	stw	r3,32(sp)
800124cc:	1000031e 	bne	r2,zero,800124dc <___svfprintf_internal_r+0x12b8>
800124d0:	5880100c 	andi	r2,r11,64
800124d4:	10000126 	beq	r2,zero,800124dc <___svfprintf_internal_r+0x12b8>
800124d8:	a53fffcc 	andi	r20,r20,65535
800124dc:	002f883a 	mov	r23,zero
800124e0:	00800044 	movi	r2,1
800124e4:	003c2406 	br	80011578 <_gp+0xfffe0804>
800124e8:	d8c00817 	ldw	r3,32(sp)
800124ec:	5880040c 	andi	r2,r11,16
800124f0:	1d000017 	ldw	r20,0(r3)
800124f4:	18c00104 	addi	r3,r3,4
800124f8:	d8c00815 	stw	r3,32(sp)
800124fc:	1000031e 	bne	r2,zero,8001250c <___svfprintf_internal_r+0x12e8>
80012500:	5880100c 	andi	r2,r11,64
80012504:	10000126 	beq	r2,zero,8001250c <___svfprintf_internal_r+0x12e8>
80012508:	a53fffcc 	andi	r20,r20,65535
8001250c:	002f883a 	mov	r23,zero
80012510:	0005883a 	mov	r2,zero
80012514:	003c1806 	br	80011578 <_gp+0xfffe0804>
80012518:	9880004c 	andi	r2,r19,1
8001251c:	103f0c1e 	bne	r2,zero,80012150 <_gp+0xfffe13dc>
80012520:	00800044 	movi	r2,1
80012524:	dc001d15 	stw	r16,116(sp)
80012528:	44800015 	stw	r18,0(r8)
8001252c:	40800115 	stw	r2,4(r8)
80012530:	d8c01e15 	stw	r3,120(sp)
80012534:	84000208 	cmpgei	r16,r16,8
80012538:	8000a31e 	bne	r16,zero,800127c8 <___svfprintf_internal_r+0x15a4>
8001253c:	55800084 	addi	r22,r10,2
80012540:	42000404 	addi	r8,r8,16
80012544:	003f3206 	br	80012210 <_gp+0xfffe149c>
80012548:	d9400417 	ldw	r5,16(sp)
8001254c:	d9000517 	ldw	r4,20(sp)
80012550:	d9801c04 	addi	r6,sp,112
80012554:	001a82c0 	call	8001a82c <__ssprint_r>
80012558:	103bed1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
8001255c:	d8c01e17 	ldw	r3,120(sp)
80012560:	003d7b06 	br	80011b50 <_gp+0xfffe0ddc>
80012564:	a825883a 	mov	r18,r21
80012568:	003e4506 	br	80011e80 <_gp+0xfffe110c>
8001256c:	002f883a 	mov	r23,zero
80012570:	003d8c06 	br	80011ba4 <_gp+0xfffe0e30>
80012574:	a02fd7fa 	srai	r23,r20,31
80012578:	003c9906 	br	800117e0 <_gp+0xfffe0a6c>
8001257c:	00800c04 	movi	r2,48
80012580:	d8801585 	stb	r2,86(sp)
80012584:	dc0015c5 	stb	r16,87(sp)
80012588:	5ac00094 	ori	r11,r11,2
8001258c:	00800084 	movi	r2,2
80012590:	003bf906 	br	80011578 <_gp+0xfffe0804>
80012594:	d9000617 	ldw	r4,24(sp)
80012598:	2005d7fa 	srai	r2,r4,31
8001259c:	19000015 	stw	r4,0(r3)
800125a0:	18800115 	stw	r2,4(r3)
800125a4:	003b4606 	br	800112c0 <_gp+0xfffe054c>
800125a8:	d9000b17 	ldw	r4,44(sp)
800125ac:	d9400c17 	ldw	r5,48(sp)
800125b0:	da000915 	stw	r8,36(sp)
800125b4:	200d883a 	mov	r6,r4
800125b8:	280f883a 	mov	r7,r5
800125bc:	dac00715 	stw	r11,28(sp)
800125c0:	001f7f40 	call	8001f7f4 <__unorddf2>
800125c4:	dac00717 	ldw	r11,28(sp)
800125c8:	da000917 	ldw	r8,36(sp)
800125cc:	1002a01e 	bne	r2,zero,80013050 <___svfprintf_internal_r+0x1e2c>
800125d0:	053ff7c4 	movi	r20,-33
800125d4:	b0bfffe0 	cmpeqi	r2,r22,-1
800125d8:	8528703a 	and	r20,r16,r20
800125dc:	1001d91e 	bne	r2,zero,80012d44 <___svfprintf_internal_r+0x1b20>
800125e0:	a08011d8 	cmpnei	r2,r20,71
800125e4:	10014b26 	beq	r2,zero,80012b14 <___svfprintf_internal_r+0x18f0>
800125e8:	d8800c17 	ldw	r2,48(sp)
800125ec:	5cc04014 	ori	r19,r11,256
800125f0:	1001c716 	blt	r2,zero,80012d10 <___svfprintf_internal_r+0x1aec>
800125f4:	d8c00c17 	ldw	r3,48(sp)
800125f8:	d8000705 	stb	zero,28(sp)
800125fc:	808019a0 	cmpeqi	r2,r16,102
80012600:	d8800d15 	stw	r2,52(sp)
80012604:	1001d11e 	bne	r2,zero,80012d4c <___svfprintf_internal_r+0x1b28>
80012608:	834011a0 	cmpeqi	r13,r16,70
8001260c:	6802041e 	bne	r13,zero,80012e20 <___svfprintf_internal_r+0x1bfc>
80012610:	a0801158 	cmpnei	r2,r20,69
80012614:	10014226 	beq	r2,zero,80012b20 <___svfprintf_internal_r+0x18fc>
80012618:	d8801a04 	addi	r2,sp,104
8001261c:	d8800315 	stw	r2,12(sp)
80012620:	d9400b17 	ldw	r5,44(sp)
80012624:	d8801704 	addi	r2,sp,92
80012628:	d9000517 	ldw	r4,20(sp)
8001262c:	d8800215 	stw	r2,8(sp)
80012630:	d8801604 	addi	r2,sp,88
80012634:	180d883a 	mov	r6,r3
80012638:	d8800115 	stw	r2,4(sp)
8001263c:	dd800015 	stw	r22,0(sp)
80012640:	01c00084 	movi	r7,2
80012644:	da001315 	stw	r8,76(sp)
80012648:	db401215 	stw	r13,72(sp)
8001264c:	dac00a15 	stw	r11,40(sp)
80012650:	d8c00915 	stw	r3,36(sp)
80012654:	0015de40 	call	80015de4 <_dtoa_r>
80012658:	1025883a 	mov	r18,r2
8001265c:	808019d8 	cmpnei	r2,r16,103
80012660:	d8c00917 	ldw	r3,36(sp)
80012664:	dac00a17 	ldw	r11,40(sp)
80012668:	db401217 	ldw	r13,72(sp)
8001266c:	da001317 	ldw	r8,76(sp)
80012670:	1002c31e 	bne	r2,zero,80013180 <___svfprintf_internal_r+0x1f5c>
80012674:	5880004c 	andi	r2,r11,1
80012678:	10014d26 	beq	r2,zero,80012bb0 <___svfprintf_internal_r+0x198c>
8001267c:	95af883a 	add	r23,r18,r22
80012680:	d9000b17 	ldw	r4,44(sp)
80012684:	000d883a 	mov	r6,zero
80012688:	000f883a 	mov	r7,zero
8001268c:	180b883a 	mov	r5,r3
80012690:	da000a15 	stw	r8,40(sp)
80012694:	dac00915 	stw	r11,36(sp)
80012698:	001f6940 	call	8001f694 <__eqdf2>
8001269c:	dac00917 	ldw	r11,36(sp)
800126a0:	da000a17 	ldw	r8,40(sp)
800126a4:	1001911e 	bne	r2,zero,80012cec <___svfprintf_internal_r+0x1ac8>
800126a8:	b805883a 	mov	r2,r23
800126ac:	1485c83a 	sub	r2,r2,r18
800126b0:	d8800a15 	stw	r2,40(sp)
800126b4:	d8801617 	ldw	r2,88(sp)
800126b8:	a50011d8 	cmpnei	r20,r20,71
800126bc:	d8800915 	stw	r2,36(sp)
800126c0:	a0014226 	beq	r20,zero,80012bcc <___svfprintf_internal_r+0x19a8>
800126c4:	d8800d17 	ldw	r2,52(sp)
800126c8:	10014526 	beq	r2,zero,80012be0 <___svfprintf_internal_r+0x19bc>
800126cc:	d8800917 	ldw	r2,36(sp)
800126d0:	0082780e 	bge	zero,r2,800130b4 <___svfprintf_internal_r+0x1e90>
800126d4:	b002661e 	bne	r22,zero,80013070 <___svfprintf_internal_r+0x1e4c>
800126d8:	5ac0004c 	andi	r11,r11,1
800126dc:	5802641e 	bne	r11,zero,80013070 <___svfprintf_internal_r+0x1e4c>
800126e0:	ddc00917 	ldw	r23,36(sp)
800126e4:	b829883a 	mov	r20,r23
800126e8:	d8800707 	ldb	r2,28(sp)
800126ec:	1001581e 	bne	r2,zero,80012c50 <___svfprintf_internal_r+0x1a2c>
800126f0:	db001543 	ldbu	r12,85(sp)
800126f4:	002d883a 	mov	r22,zero
800126f8:	003de506 	br	80011e90 <_gp+0xfffe111c>
800126fc:	2021883a 	mov	r16,r4
80012700:	043ef216 	blt	zero,r16,800122cc <_gp+0xfffe1558>
80012704:	003efb06 	br	800122f4 <_gp+0xfffe1580>
80012708:	02e000b4 	movhi	r11,32770
8001270c:	81000450 	cmplti	r4,r16,17
80012710:	5adaaf84 	addi	r11,r11,27326
80012714:	d8801d17 	ldw	r2,116(sp)
80012718:	2000e21e 	bne	r4,zero,80012aa4 <___svfprintf_internal_r+0x1880>
8001271c:	dc800715 	stw	r18,28(sp)
80012720:	dc400d15 	stw	r17,52(sp)
80012724:	05c00404 	movi	r23,16
80012728:	8023883a 	mov	r17,r16
8001272c:	dd800517 	ldw	r22,20(sp)
80012730:	dc000417 	ldw	r16,16(sp)
80012734:	5825883a 	mov	r18,r11
80012738:	00000406 	br	8001274c <___svfprintf_internal_r+0x1528>
8001273c:	42000204 	addi	r8,r8,8
80012740:	8c7ffc04 	addi	r17,r17,-16
80012744:	89000448 	cmpgei	r4,r17,17
80012748:	2000d226 	beq	r4,zero,80012a94 <___svfprintf_internal_r+0x1870>
8001274c:	10800044 	addi	r2,r2,1
80012750:	18c00404 	addi	r3,r3,16
80012754:	44800015 	stw	r18,0(r8)
80012758:	45c00115 	stw	r23,4(r8)
8001275c:	d8c01e15 	stw	r3,120(sp)
80012760:	d8801d15 	stw	r2,116(sp)
80012764:	11000208 	cmpgei	r4,r2,8
80012768:	203ff426 	beq	r4,zero,8001273c <_gp+0xfffe19c8>
8001276c:	d9801c04 	addi	r6,sp,112
80012770:	800b883a 	mov	r5,r16
80012774:	b009883a 	mov	r4,r22
80012778:	001a82c0 	call	8001a82c <__ssprint_r>
8001277c:	103b641e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012780:	d8c01e17 	ldw	r3,120(sp)
80012784:	d8801d17 	ldw	r2,116(sp)
80012788:	a811883a 	mov	r8,r21
8001278c:	003fec06 	br	80012740 <_gp+0xfffe19cc>
80012790:	0463c83a 	sub	r17,zero,r17
80012794:	d8800815 	stw	r2,32(sp)
80012798:	003d4706 	br	80011cb8 <_gp+0xfffe0f44>
8001279c:	d9000517 	ldw	r4,20(sp)
800127a0:	01401004 	movi	r5,64
800127a4:	000fca40 	call	8000fca4 <_malloc_r>
800127a8:	d8c00417 	ldw	r3,16(sp)
800127ac:	18800015 	stw	r2,0(r3)
800127b0:	18800415 	stw	r2,16(r3)
800127b4:	10027626 	beq	r2,zero,80013190 <___svfprintf_internal_r+0x1f6c>
800127b8:	d8c00417 	ldw	r3,16(sp)
800127bc:	00801004 	movi	r2,64
800127c0:	18800515 	stw	r2,20(r3)
800127c4:	003ab206 	br	80011290 <_gp+0xfffe051c>
800127c8:	d9400417 	ldw	r5,16(sp)
800127cc:	d9000517 	ldw	r4,20(sp)
800127d0:	d9801c04 	addi	r6,sp,112
800127d4:	001a82c0 	call	8001a82c <__ssprint_r>
800127d8:	103b4d1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800127dc:	da801d17 	ldw	r10,116(sp)
800127e0:	d8c01e17 	ldw	r3,120(sp)
800127e4:	da002b04 	addi	r8,sp,172
800127e8:	55800044 	addi	r22,r10,1
800127ec:	a82f883a 	mov	r23,r21
800127f0:	003e8706 	br	80012210 <_gp+0xfffe149c>
800127f4:	e4000043 	ldbu	r16,1(fp)
800127f8:	5ac00814 	ori	r11,r11,32
800127fc:	e7000044 	addi	fp,fp,1
80012800:	84003fcc 	andi	r16,r16,255
80012804:	8400201c 	xori	r16,r16,128
80012808:	843fe004 	addi	r16,r16,-128
8001280c:	003ad106 	br	80011354 <_gp+0xfffe05e0>
80012810:	d9400417 	ldw	r5,16(sp)
80012814:	d9000517 	ldw	r4,20(sp)
80012818:	d9801c04 	addi	r6,sp,112
8001281c:	001a82c0 	call	8001a82c <__ssprint_r>
80012820:	103b3b1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012824:	d8c01e17 	ldw	r3,120(sp)
80012828:	a811883a 	mov	r8,r21
8001282c:	003dcb06 	br	80011f5c <_gp+0xfffe11e8>
80012830:	0021883a 	mov	r16,zero
80012834:	003eb006 	br	800122f8 <_gp+0xfffe1584>
80012838:	b08001f0 	cmpltui	r2,r22,7
8001283c:	b029883a 	mov	r20,r22
80012840:	1000af26 	beq	r2,zero,80012b00 <___svfprintf_internal_r+0x18dc>
80012844:	04a000b4 	movhi	r18,32770
80012848:	dcc00815 	stw	r19,32(sp)
8001284c:	a02f883a 	mov	r23,r20
80012850:	5827883a 	mov	r19,r11
80012854:	002d883a 	mov	r22,zero
80012858:	d8000915 	stw	zero,36(sp)
8001285c:	949aad04 	addi	r18,r18,27316
80012860:	0005883a 	mov	r2,zero
80012864:	003bf106 	br	8001182c <_gp+0xfffe0ab8>
80012868:	dc000715 	stw	r16,28(sp)
8001286c:	dc400915 	stw	r17,36(sp)
80012870:	a021883a 	mov	r16,r20
80012874:	b823883a 	mov	r17,r23
80012878:	a825883a 	mov	r18,r21
8001287c:	4029883a 	mov	r20,r8
80012880:	602f883a 	mov	r23,r12
80012884:	8009883a 	mov	r4,r16
80012888:	880b883a 	mov	r5,r17
8001288c:	01800284 	movi	r6,10
80012890:	000f883a 	mov	r7,zero
80012894:	000cf340 	call	8000cf34 <__umoddi3>
80012898:	10800c04 	addi	r2,r2,48
8001289c:	94bfffc4 	addi	r18,r18,-1
800128a0:	8009883a 	mov	r4,r16
800128a4:	880b883a 	mov	r5,r17
800128a8:	90800005 	stb	r2,0(r18)
800128ac:	01800284 	movi	r6,10
800128b0:	000f883a 	mov	r7,zero
800128b4:	000c99c0 	call	8000c99c <__udivdi3>
800128b8:	1021883a 	mov	r16,r2
800128bc:	10c4b03a 	or	r2,r2,r3
800128c0:	1823883a 	mov	r17,r3
800128c4:	103fef1e 	bne	r2,zero,80012884 <_gp+0xfffe1b10>
800128c8:	b819883a 	mov	r12,r23
800128cc:	dc000717 	ldw	r16,28(sp)
800128d0:	dc400917 	ldw	r17,36(sp)
800128d4:	a011883a 	mov	r8,r20
800128d8:	acafc83a 	sub	r23,r21,r18
800128dc:	003d6806 	br	80011e80 <_gp+0xfffe110c>
800128e0:	d8800617 	ldw	r2,24(sp)
800128e4:	18800015 	stw	r2,0(r3)
800128e8:	003a7506 	br	800112c0 <_gp+0xfffe054c>
800128ec:	d9400417 	ldw	r5,16(sp)
800128f0:	d9000517 	ldw	r4,20(sp)
800128f4:	d9801c04 	addi	r6,sp,112
800128f8:	dac00d15 	stw	r11,52(sp)
800128fc:	db000715 	stw	r12,28(sp)
80012900:	001a82c0 	call	8001a82c <__ssprint_r>
80012904:	103b021e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012908:	d8c01e17 	ldw	r3,120(sp)
8001290c:	d8801547 	ldb	r2,85(sp)
80012910:	a811883a 	mov	r8,r21
80012914:	dac00d17 	ldw	r11,52(sp)
80012918:	db000717 	ldw	r12,28(sp)
8001291c:	003c0106 	br	80011924 <_gp+0xfffe0bb0>
80012920:	d9400417 	ldw	r5,16(sp)
80012924:	d9000517 	ldw	r4,20(sp)
80012928:	d9801c04 	addi	r6,sp,112
8001292c:	001a82c0 	call	8001a82c <__ssprint_r>
80012930:	103af71e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012934:	d8c01e17 	ldw	r3,120(sp)
80012938:	dc001d17 	ldw	r16,116(sp)
8001293c:	a82f883a 	mov	r23,r21
80012940:	003e0a06 	br	8001216c <_gp+0xfffe13f8>
80012944:	d9400417 	ldw	r5,16(sp)
80012948:	d9000517 	ldw	r4,20(sp)
8001294c:	d9801c04 	addi	r6,sp,112
80012950:	001a82c0 	call	8001a82c <__ssprint_r>
80012954:	103aee1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012958:	d8c01e17 	ldw	r3,120(sp)
8001295c:	dc001d17 	ldw	r16,116(sp)
80012960:	a82f883a 	mov	r23,r21
80012964:	003e0c06 	br	80012198 <_gp+0xfffe1424>
80012968:	10c00060 	cmpeqi	r3,r2,1
8001296c:	183b2226 	beq	r3,zero,800115f8 <_gp+0xfffe0884>
80012970:	003d3006 	br	80011e34 <_gp+0xfffe10c0>
80012974:	b817883a 	mov	r11,r23
80012978:	10800044 	addi	r2,r2,1
8001297c:	42c00015 	stw	r11,0(r8)
80012980:	44000115 	stw	r16,4(r8)
80012984:	1c07883a 	add	r3,r3,r16
80012988:	d8801d15 	stw	r2,116(sp)
8001298c:	d8c01e15 	stw	r3,120(sp)
80012990:	10800208 	cmpgei	r2,r2,8
80012994:	103c3f26 	beq	r2,zero,80011a94 <_gp+0xfffe0d20>
80012998:	003dde06 	br	80012114 <_gp+0xfffe13a0>
8001299c:	d9400417 	ldw	r5,16(sp)
800129a0:	d9000517 	ldw	r4,20(sp)
800129a4:	d9801c04 	addi	r6,sp,112
800129a8:	001a82c0 	call	8001a82c <__ssprint_r>
800129ac:	103ad81e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
800129b0:	d8c01e17 	ldw	r3,120(sp)
800129b4:	a811883a 	mov	r8,r21
800129b8:	003bf606 	br	80011994 <_gp+0xfffe0c20>
800129bc:	d8801d17 	ldw	r2,116(sp)
800129c0:	016000b4 	movhi	r5,32770
800129c4:	295aaf04 	addi	r5,r5,27324
800129c8:	10800044 	addi	r2,r2,1
800129cc:	18c00044 	addi	r3,r3,1
800129d0:	41400015 	stw	r5,0(r8)
800129d4:	01400044 	movi	r5,1
800129d8:	d8801d15 	stw	r2,116(sp)
800129dc:	41400115 	stw	r5,4(r8)
800129e0:	d8c01e15 	stw	r3,120(sp)
800129e4:	10800208 	cmpgei	r2,r2,8
800129e8:	1000cd1e 	bne	r2,zero,80012d20 <___svfprintf_internal_r+0x1afc>
800129ec:	42000204 	addi	r8,r8,8
800129f0:	2000021e 	bne	r4,zero,800129fc <___svfprintf_internal_r+0x17d8>
800129f4:	d8800a17 	ldw	r2,40(sp)
800129f8:	10004326 	beq	r2,zero,80012b08 <___svfprintf_internal_r+0x18e4>
800129fc:	d8801017 	ldw	r2,64(sp)
80012a00:	d9400f17 	ldw	r5,60(sp)
80012a04:	40800015 	stw	r2,0(r8)
80012a08:	d8801d17 	ldw	r2,116(sp)
80012a0c:	28c7883a 	add	r3,r5,r3
80012a10:	41400115 	stw	r5,4(r8)
80012a14:	10800044 	addi	r2,r2,1
80012a18:	d8c01e15 	stw	r3,120(sp)
80012a1c:	d8801d15 	stw	r2,116(sp)
80012a20:	11400208 	cmpgei	r5,r2,8
80012a24:	283da81e 	bne	r5,zero,800120c8 <_gp+0xfffe1354>
80012a28:	42000204 	addi	r8,r8,8
80012a2c:	003daf06 	br	800120ec <_gp+0xfffe1378>
80012a30:	d9400417 	ldw	r5,16(sp)
80012a34:	d9000517 	ldw	r4,20(sp)
80012a38:	d9801c04 	addi	r6,sp,112
80012a3c:	001a82c0 	call	8001a82c <__ssprint_r>
80012a40:	103ab31e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012a44:	a811883a 	mov	r8,r21
80012a48:	003d3006 	br	80011f0c <_gp+0xfffe1198>
80012a4c:	8819883a 	mov	r12,r17
80012a50:	dc400717 	ldw	r17,28(sp)
80012a54:	9817883a 	mov	r11,r19
80012a58:	85800044 	addi	r22,r16,1
80012a5c:	b827883a 	mov	r19,r23
80012a60:	102f883a 	mov	r23,r2
80012a64:	10800204 	addi	r2,r2,8
80012a68:	1b07883a 	add	r3,r3,r12
80012a6c:	bac00015 	stw	r11,0(r23)
80012a70:	bb000115 	stw	r12,4(r23)
80012a74:	d8c01e15 	stw	r3,120(sp)
80012a78:	dd801d15 	stw	r22,116(sp)
80012a7c:	b1000208 	cmpgei	r4,r22,8
80012a80:	203f511e 	bne	r4,zero,800127c8 <_gp+0xfffe1a54>
80012a84:	b5800044 	addi	r22,r22,1
80012a88:	12000204 	addi	r8,r2,8
80012a8c:	102f883a 	mov	r23,r2
80012a90:	003ddf06 	br	80012210 <_gp+0xfffe149c>
80012a94:	8821883a 	mov	r16,r17
80012a98:	9017883a 	mov	r11,r18
80012a9c:	dc400d17 	ldw	r17,52(sp)
80012aa0:	dc800717 	ldw	r18,28(sp)
80012aa4:	10800044 	addi	r2,r2,1
80012aa8:	1c07883a 	add	r3,r3,r16
80012aac:	d8801d15 	stw	r2,116(sp)
80012ab0:	42c00015 	stw	r11,0(r8)
80012ab4:	44000115 	stw	r16,4(r8)
80012ab8:	d8c01e15 	stw	r3,120(sp)
80012abc:	10800208 	cmpgei	r2,r2,8
80012ac0:	1000ee1e 	bne	r2,zero,80012e7c <___svfprintf_internal_r+0x1c58>
80012ac4:	42000204 	addi	r8,r8,8
80012ac8:	003e0e06 	br	80012304 <_gp+0xfffe1590>
80012acc:	04a000b4 	movhi	r18,32770
80012ad0:	949aa004 	addi	r18,r18,27264
80012ad4:	003cb106 	br	80011d9c <_gp+0xfffe1028>
80012ad8:	9009883a 	mov	r4,r18
80012adc:	00111940 	call	80011194 <strlen>
80012ae0:	102f883a 	mov	r23,r2
80012ae4:	db001543 	ldbu	r12,85(sp)
80012ae8:	1029883a 	mov	r20,r2
80012aec:	dac00717 	ldw	r11,28(sp)
80012af0:	da000817 	ldw	r8,32(sp)
80012af4:	103b120e 	bge	r2,zero,80011740 <_gp+0xfffe09cc>
80012af8:	0029883a 	mov	r20,zero
80012afc:	003b1006 	br	80011740 <_gp+0xfffe09cc>
80012b00:	05000184 	movi	r20,6
80012b04:	003f4f06 	br	80012844 <_gp+0xfffe1ad0>
80012b08:	9880004c 	andi	r2,r19,1
80012b0c:	103be226 	beq	r2,zero,80011a98 <_gp+0xfffe0d24>
80012b10:	003fba06 	br	800129fc <_gp+0xfffe1c88>
80012b14:	b03eb41e 	bne	r22,zero,800125e8 <_gp+0xfffe1874>
80012b18:	05800044 	movi	r22,1
80012b1c:	003eb206 	br	800125e8 <_gp+0xfffe1874>
80012b20:	d8801a04 	addi	r2,sp,104
80012b24:	d8800315 	stw	r2,12(sp)
80012b28:	d9400b17 	ldw	r5,44(sp)
80012b2c:	d8801704 	addi	r2,sp,92
80012b30:	d9000517 	ldw	r4,20(sp)
80012b34:	b3000044 	addi	r12,r22,1
80012b38:	d8800215 	stw	r2,8(sp)
80012b3c:	d8801604 	addi	r2,sp,88
80012b40:	db000015 	stw	r12,0(sp)
80012b44:	180d883a 	mov	r6,r3
80012b48:	d8800115 	stw	r2,4(sp)
80012b4c:	01c00084 	movi	r7,2
80012b50:	da001415 	stw	r8,80(sp)
80012b54:	db401315 	stw	r13,76(sp)
80012b58:	dac01215 	stw	r11,72(sp)
80012b5c:	db000a15 	stw	r12,40(sp)
80012b60:	d8c00915 	stw	r3,36(sp)
80012b64:	0015de40 	call	80015de4 <_dtoa_r>
80012b68:	d8c00917 	ldw	r3,36(sp)
80012b6c:	db000a17 	ldw	r12,40(sp)
80012b70:	dac01217 	ldw	r11,72(sp)
80012b74:	db401317 	ldw	r13,76(sp)
80012b78:	da001417 	ldw	r8,80(sp)
80012b7c:	1025883a 	mov	r18,r2
80012b80:	808011d8 	cmpnei	r2,r16,71
80012b84:	1001651e 	bne	r2,zero,8001311c <___svfprintf_internal_r+0x1ef8>
80012b88:	5880004c 	andi	r2,r11,1
80012b8c:	10015d26 	beq	r2,zero,80013104 <___svfprintf_internal_r+0x1ee0>
80012b90:	932f883a 	add	r23,r18,r12
80012b94:	683eba26 	beq	r13,zero,80012680 <_gp+0xfffe190c>
80012b98:	90800007 	ldb	r2,0(r18)
80012b9c:	10800c20 	cmpeqi	r2,r2,48
80012ba0:	1001131e 	bne	r2,zero,80012ff0 <___svfprintf_internal_r+0x1dcc>
80012ba4:	db001617 	ldw	r12,88(sp)
80012ba8:	bb2f883a 	add	r23,r23,r12
80012bac:	003eb406 	br	80012680 <_gp+0xfffe190c>
80012bb0:	d8801617 	ldw	r2,88(sp)
80012bb4:	a50011e0 	cmpeqi	r20,r20,71
80012bb8:	d8800915 	stw	r2,36(sp)
80012bbc:	d8801a17 	ldw	r2,104(sp)
80012bc0:	1485c83a 	sub	r2,r2,r18
80012bc4:	d8800a15 	stw	r2,40(sp)
80012bc8:	a0000526 	beq	r20,zero,80012be0 <___svfprintf_internal_r+0x19bc>
80012bcc:	d8c00917 	ldw	r3,36(sp)
80012bd0:	18bfff50 	cmplti	r2,r3,-3
80012bd4:	1000011e 	bne	r2,zero,80012bdc <___svfprintf_internal_r+0x19b8>
80012bd8:	b0c0220e 	bge	r22,r3,80012c64 <___svfprintf_internal_r+0x1a40>
80012bdc:	843fff84 	addi	r16,r16,-2
80012be0:	d8800917 	ldw	r2,36(sp)
80012be4:	dc001845 	stb	r16,97(sp)
80012be8:	15ffffc4 	addi	r23,r2,-1
80012bec:	ddc01615 	stw	r23,88(sp)
80012bf0:	b8012716 	blt	r23,zero,80013090 <___svfprintf_internal_r+0x1e6c>
80012bf4:	00800ac4 	movi	r2,43
80012bf8:	d8801885 	stb	r2,98(sp)
80012bfc:	b8800290 	cmplti	r2,r23,10
80012c00:	1000d126 	beq	r2,zero,80012f48 <___svfprintf_internal_r+0x1d24>
80012c04:	bdc00c04 	addi	r23,r23,48
80012c08:	00800c04 	movi	r2,48
80012c0c:	d88018c5 	stb	r2,99(sp)
80012c10:	ddc01905 	stb	r23,100(sp)
80012c14:	d8c01944 	addi	r3,sp,101
80012c18:	d9000a17 	ldw	r4,40(sp)
80012c1c:	d8801844 	addi	r2,sp,97
80012c20:	1887c83a 	sub	r3,r3,r2
80012c24:	d8c01115 	stw	r3,68(sp)
80012c28:	20800088 	cmpgei	r2,r4,2
80012c2c:	192f883a 	add	r23,r3,r4
80012c30:	10011c26 	beq	r2,zero,800130a4 <___svfprintf_internal_r+0x1e80>
80012c34:	d8800f17 	ldw	r2,60(sp)
80012c38:	b8af883a 	add	r23,r23,r2
80012c3c:	b829883a 	mov	r20,r23
80012c40:	b800010e 	bge	r23,zero,80012c48 <___svfprintf_internal_r+0x1a24>
80012c44:	0029883a 	mov	r20,zero
80012c48:	d8000915 	stw	zero,36(sp)
80012c4c:	003ea606 	br	800126e8 <_gp+0xfffe1974>
80012c50:	00800b44 	movi	r2,45
80012c54:	d8801545 	stb	r2,85(sp)
80012c58:	002d883a 	mov	r22,zero
80012c5c:	00800b44 	movi	r2,45
80012c60:	003c8f06 	br	80011ea0 <_gp+0xfffe112c>
80012c64:	d8800917 	ldw	r2,36(sp)
80012c68:	d8c00a17 	ldw	r3,40(sp)
80012c6c:	10c06016 	blt	r2,r3,80012df0 <___svfprintf_internal_r+0x1bcc>
80012c70:	5ac0004c 	andi	r11,r11,1
80012c74:	5800f026 	beq	r11,zero,80013038 <___svfprintf_internal_r+0x1e14>
80012c78:	d8800917 	ldw	r2,36(sp)
80012c7c:	d8c00f17 	ldw	r3,60(sp)
80012c80:	10ef883a 	add	r23,r2,r3
80012c84:	b829883a 	mov	r20,r23
80012c88:	b8006316 	blt	r23,zero,80012e18 <___svfprintf_internal_r+0x1bf4>
80012c8c:	040019c4 	movi	r16,103
80012c90:	003e9506 	br	800126e8 <_gp+0xfffe1974>
80012c94:	00800b44 	movi	r2,45
80012c98:	d8801545 	stb	r2,85(sp)
80012c9c:	03000b44 	movi	r12,45
80012ca0:	003c3a06 	br	80011d8c <_gp+0xfffe1018>
80012ca4:	d9400417 	ldw	r5,16(sp)
80012ca8:	d9000517 	ldw	r4,20(sp)
80012cac:	d9801c04 	addi	r6,sp,112
80012cb0:	001a82c0 	call	8001a82c <__ssprint_r>
80012cb4:	103a161e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012cb8:	d8c01e17 	ldw	r3,120(sp)
80012cbc:	a811883a 	mov	r8,r21
80012cc0:	803d8d0e 	bge	r16,zero,800122f8 <_gp+0xfffe1584>
80012cc4:	003eda06 	br	80012830 <_gp+0xfffe1abc>
80012cc8:	d9400417 	ldw	r5,16(sp)
80012ccc:	d9000517 	ldw	r4,20(sp)
80012cd0:	d9801c04 	addi	r6,sp,112
80012cd4:	001a82c0 	call	8001a82c <__ssprint_r>
80012cd8:	103a0d1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012cdc:	d8801617 	ldw	r2,88(sp)
80012ce0:	d8c01e17 	ldw	r3,120(sp)
80012ce4:	a811883a 	mov	r8,r21
80012ce8:	003d9706 	br	80012348 <_gp+0xfffe15d4>
80012cec:	d8801a17 	ldw	r2,104(sp)
80012cf0:	01000c04 	movi	r4,48
80012cf4:	15fe6d2e 	bgeu	r2,r23,800126ac <_gp+0xfffe1938>
80012cf8:	10c00044 	addi	r3,r2,1
80012cfc:	d8c01a15 	stw	r3,104(sp)
80012d00:	11000005 	stb	r4,0(r2)
80012d04:	d8801a17 	ldw	r2,104(sp)
80012d08:	15fffb36 	bltu	r2,r23,80012cf8 <_gp+0xfffe1f84>
80012d0c:	003e6706 	br	800126ac <_gp+0xfffe1938>
80012d10:	10e0003c 	xorhi	r3,r2,32768
80012d14:	00800b44 	movi	r2,45
80012d18:	d8800705 	stb	r2,28(sp)
80012d1c:	003e3706 	br	800125fc <_gp+0xfffe1888>
80012d20:	d9400417 	ldw	r5,16(sp)
80012d24:	d9000517 	ldw	r4,20(sp)
80012d28:	d9801c04 	addi	r6,sp,112
80012d2c:	001a82c0 	call	8001a82c <__ssprint_r>
80012d30:	1039f71e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012d34:	d9001617 	ldw	r4,88(sp)
80012d38:	d8c01e17 	ldw	r3,120(sp)
80012d3c:	a811883a 	mov	r8,r21
80012d40:	003f2b06 	br	800129f0 <_gp+0xfffe1c7c>
80012d44:	05800184 	movi	r22,6
80012d48:	003e2706 	br	800125e8 <_gp+0xfffe1874>
80012d4c:	d8801a04 	addi	r2,sp,104
80012d50:	d8800315 	stw	r2,12(sp)
80012d54:	d9400b17 	ldw	r5,44(sp)
80012d58:	d8801704 	addi	r2,sp,92
80012d5c:	d9000517 	ldw	r4,20(sp)
80012d60:	d8800215 	stw	r2,8(sp)
80012d64:	d8801604 	addi	r2,sp,88
80012d68:	180d883a 	mov	r6,r3
80012d6c:	d8800115 	stw	r2,4(sp)
80012d70:	dd800015 	stw	r22,0(sp)
80012d74:	01c000c4 	movi	r7,3
80012d78:	da001215 	stw	r8,72(sp)
80012d7c:	dac00a15 	stw	r11,40(sp)
80012d80:	d8c00915 	stw	r3,36(sp)
80012d84:	0015de40 	call	80015de4 <_dtoa_r>
80012d88:	1025883a 	mov	r18,r2
80012d8c:	15af883a 	add	r23,r2,r22
80012d90:	b019883a 	mov	r12,r22
80012d94:	d8c00917 	ldw	r3,36(sp)
80012d98:	dac00a17 	ldw	r11,40(sp)
80012d9c:	da001217 	ldw	r8,72(sp)
80012da0:	003f7d06 	br	80012b98 <_gp+0xfffe1e24>
80012da4:	d9400417 	ldw	r5,16(sp)
80012da8:	d9000517 	ldw	r4,20(sp)
80012dac:	d9801c04 	addi	r6,sp,112
80012db0:	001a82c0 	call	8001a82c <__ssprint_r>
80012db4:	1039d61e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012db8:	d8801617 	ldw	r2,88(sp)
80012dbc:	d9000a17 	ldw	r4,40(sp)
80012dc0:	d8c01e17 	ldw	r3,120(sp)
80012dc4:	a811883a 	mov	r8,r21
80012dc8:	2085c83a 	sub	r2,r4,r2
80012dcc:	003d7206 	br	80012398 <_gp+0xfffe1624>
80012dd0:	b029883a 	mov	r20,r22
80012dd4:	b02f883a 	mov	r23,r22
80012dd8:	dcc00815 	stw	r19,32(sp)
80012ddc:	db001543 	ldbu	r12,85(sp)
80012de0:	5827883a 	mov	r19,r11
80012de4:	002d883a 	mov	r22,zero
80012de8:	d8000915 	stw	zero,36(sp)
80012dec:	003c2806 	br	80011e90 <_gp+0xfffe111c>
80012df0:	d8800a17 	ldw	r2,40(sp)
80012df4:	d8c00f17 	ldw	r3,60(sp)
80012df8:	10ef883a 	add	r23,r2,r3
80012dfc:	d8800917 	ldw	r2,36(sp)
80012e00:	00800316 	blt	zero,r2,80012e10 <___svfprintf_internal_r+0x1bec>
80012e04:	d8800917 	ldw	r2,36(sp)
80012e08:	b8afc83a 	sub	r23,r23,r2
80012e0c:	bdc00044 	addi	r23,r23,1
80012e10:	b829883a 	mov	r20,r23
80012e14:	b83f9d0e 	bge	r23,zero,80012c8c <_gp+0xfffe1f18>
80012e18:	0029883a 	mov	r20,zero
80012e1c:	003f9b06 	br	80012c8c <_gp+0xfffe1f18>
80012e20:	d8801a04 	addi	r2,sp,104
80012e24:	d8800315 	stw	r2,12(sp)
80012e28:	d9400b17 	ldw	r5,44(sp)
80012e2c:	d8801704 	addi	r2,sp,92
80012e30:	d9000517 	ldw	r4,20(sp)
80012e34:	d8800215 	stw	r2,8(sp)
80012e38:	d8801604 	addi	r2,sp,88
80012e3c:	180d883a 	mov	r6,r3
80012e40:	d8800115 	stw	r2,4(sp)
80012e44:	dd800015 	stw	r22,0(sp)
80012e48:	01c000c4 	movi	r7,3
80012e4c:	da001315 	stw	r8,76(sp)
80012e50:	db401215 	stw	r13,72(sp)
80012e54:	dac00a15 	stw	r11,40(sp)
80012e58:	d8c00915 	stw	r3,36(sp)
80012e5c:	0015de40 	call	80015de4 <_dtoa_r>
80012e60:	1025883a 	mov	r18,r2
80012e64:	b019883a 	mov	r12,r22
80012e68:	d8c00917 	ldw	r3,36(sp)
80012e6c:	dac00a17 	ldw	r11,40(sp)
80012e70:	db401217 	ldw	r13,72(sp)
80012e74:	da001317 	ldw	r8,76(sp)
80012e78:	003f4506 	br	80012b90 <_gp+0xfffe1e1c>
80012e7c:	d9400417 	ldw	r5,16(sp)
80012e80:	d9000517 	ldw	r4,20(sp)
80012e84:	d9801c04 	addi	r6,sp,112
80012e88:	001a82c0 	call	8001a82c <__ssprint_r>
80012e8c:	1039a01e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012e90:	d8c01e17 	ldw	r3,120(sp)
80012e94:	a811883a 	mov	r8,r21
80012e98:	003d1a06 	br	80012304 <_gp+0xfffe1590>
80012e9c:	02e000b4 	movhi	r11,32770
80012ea0:	217ffc08 	cmpgei	r5,r4,-16
80012ea4:	5adaaf84 	addi	r11,r11,27326
80012ea8:	0121c83a 	sub	r16,zero,r4
80012eac:	28001c1e 	bne	r5,zero,80012f20 <___svfprintf_internal_r+0x1cfc>
80012eb0:	05c00404 	movi	r23,16
80012eb4:	582d883a 	mov	r22,r11
80012eb8:	00000406 	br	80012ecc <___svfprintf_internal_r+0x1ca8>
80012ebc:	42000204 	addi	r8,r8,8
80012ec0:	843ffc04 	addi	r16,r16,-16
80012ec4:	81000448 	cmpgei	r4,r16,17
80012ec8:	20001426 	beq	r4,zero,80012f1c <___svfprintf_internal_r+0x1cf8>
80012ecc:	10800044 	addi	r2,r2,1
80012ed0:	18c00404 	addi	r3,r3,16
80012ed4:	45800015 	stw	r22,0(r8)
80012ed8:	45c00115 	stw	r23,4(r8)
80012edc:	d8c01e15 	stw	r3,120(sp)
80012ee0:	d8801d15 	stw	r2,116(sp)
80012ee4:	11000208 	cmpgei	r4,r2,8
80012ee8:	203ff426 	beq	r4,zero,80012ebc <_gp+0xfffe2148>
80012eec:	d9400417 	ldw	r5,16(sp)
80012ef0:	d9000517 	ldw	r4,20(sp)
80012ef4:	d9801c04 	addi	r6,sp,112
80012ef8:	001a82c0 	call	8001a82c <__ssprint_r>
80012efc:	1039841e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80012f00:	d8c01e17 	ldw	r3,120(sp)
80012f04:	d8801d17 	ldw	r2,116(sp)
80012f08:	a811883a 	mov	r8,r21
80012f0c:	003fec06 	br	80012ec0 <_gp+0xfffe214c>
80012f10:	00bfffc4 	movi	r2,-1
80012f14:	d8800615 	stw	r2,24(sp)
80012f18:	00398106 	br	80011520 <_gp+0xfffe07ac>
80012f1c:	b017883a 	mov	r11,r22
80012f20:	10800044 	addi	r2,r2,1
80012f24:	1c07883a 	add	r3,r3,r16
80012f28:	42c00015 	stw	r11,0(r8)
80012f2c:	44000115 	stw	r16,4(r8)
80012f30:	d8c01e15 	stw	r3,120(sp)
80012f34:	d8801d15 	stw	r2,116(sp)
80012f38:	11000208 	cmpgei	r4,r2,8
80012f3c:	2000851e 	bne	r4,zero,80013154 <___svfprintf_internal_r+0x1f30>
80012f40:	42000204 	addi	r8,r8,8
80012f44:	003c6a06 	br	800120f0 <_gp+0xfffe137c>
80012f48:	dd801bc4 	addi	r22,sp,111
80012f4c:	dc000915 	stw	r16,36(sp)
80012f50:	b029883a 	mov	r20,r22
80012f54:	b821883a 	mov	r16,r23
80012f58:	dac00d15 	stw	r11,52(sp)
80012f5c:	982f883a 	mov	r23,r19
80012f60:	4027883a 	mov	r19,r8
80012f64:	00000106 	br	80012f6c <___svfprintf_internal_r+0x1d48>
80012f68:	1829883a 	mov	r20,r3
80012f6c:	8009883a 	mov	r4,r16
80012f70:	01400284 	movi	r5,10
80012f74:	000d5100 	call	8000d510 <__modsi3>
80012f78:	10800c04 	addi	r2,r2,48
80012f7c:	8009883a 	mov	r4,r16
80012f80:	a0bfffc5 	stb	r2,-1(r20)
80012f84:	01400284 	movi	r5,10
80012f88:	000d4880 	call	8000d488 <__divsi3>
80012f8c:	1021883a 	mov	r16,r2
80012f90:	10800288 	cmpgei	r2,r2,10
80012f94:	a0ffffc4 	addi	r3,r20,-1
80012f98:	103ff31e 	bne	r2,zero,80012f68 <_gp+0xfffe21f4>
80012f9c:	9811883a 	mov	r8,r19
80012fa0:	b827883a 	mov	r19,r23
80012fa4:	802f883a 	mov	r23,r16
80012fa8:	b8800c04 	addi	r2,r23,48
80012fac:	a53fff84 	addi	r20,r20,-2
80012fb0:	18bfffc5 	stb	r2,-1(r3)
80012fb4:	dac00d17 	ldw	r11,52(sp)
80012fb8:	dc000917 	ldw	r16,36(sp)
80012fbc:	a5806e2e 	bgeu	r20,r22,80013178 <___svfprintf_internal_r+0x1f54>
80012fc0:	d90018c4 	addi	r4,sp,99
80012fc4:	00000106 	br	80012fcc <___svfprintf_internal_r+0x1da8>
80012fc8:	a0800003 	ldbu	r2,0(r20)
80012fcc:	21000044 	addi	r4,r4,1
80012fd0:	a5000044 	addi	r20,r20,1
80012fd4:	20bfffc5 	stb	r2,-1(r4)
80012fd8:	a5bffb1e 	bne	r20,r22,80012fc8 <_gp+0xfffe2254>
80012fdc:	d8801c04 	addi	r2,sp,112
80012fe0:	10c7c83a 	sub	r3,r2,r3
80012fe4:	d88018c4 	addi	r2,sp,99
80012fe8:	10c7883a 	add	r3,r2,r3
80012fec:	003f0a06 	br	80012c18 <_gp+0xfffe1ea4>
80012ff0:	d9000b17 	ldw	r4,44(sp)
80012ff4:	180b883a 	mov	r5,r3
80012ff8:	000d883a 	mov	r6,zero
80012ffc:	000f883a 	mov	r7,zero
80013000:	da001315 	stw	r8,76(sp)
80013004:	dac00a15 	stw	r11,40(sp)
80013008:	d8c00915 	stw	r3,36(sp)
8001300c:	db001215 	stw	r12,72(sp)
80013010:	001f6940 	call	8001f694 <__eqdf2>
80013014:	d8c00917 	ldw	r3,36(sp)
80013018:	dac00a17 	ldw	r11,40(sp)
8001301c:	da001317 	ldw	r8,76(sp)
80013020:	103ee026 	beq	r2,zero,80012ba4 <_gp+0xfffe1e30>
80013024:	db001217 	ldw	r12,72(sp)
80013028:	00800044 	movi	r2,1
8001302c:	1319c83a 	sub	r12,r2,r12
80013030:	db001615 	stw	r12,88(sp)
80013034:	003edc06 	br	80012ba8 <_gp+0xfffe1e34>
80013038:	1029883a 	mov	r20,r2
8001303c:	1000010e 	bge	r2,zero,80013044 <___svfprintf_internal_r+0x1e20>
80013040:	0029883a 	mov	r20,zero
80013044:	ddc00917 	ldw	r23,36(sp)
80013048:	040019c4 	movi	r16,103
8001304c:	003da606 	br	800126e8 <_gp+0xfffe1974>
80013050:	d8800c17 	ldw	r2,48(sp)
80013054:	10002316 	blt	r2,zero,800130e4 <___svfprintf_internal_r+0x1ec0>
80013058:	db001543 	ldbu	r12,85(sp)
8001305c:	80801208 	cmpgei	r2,r16,72
80013060:	10001d1e 	bne	r2,zero,800130d8 <___svfprintf_internal_r+0x1eb4>
80013064:	04a000b4 	movhi	r18,32770
80013068:	949aa104 	addi	r18,r18,27268
8001306c:	003b4b06 	br	80011d9c <_gp+0xfffe1028>
80013070:	d8800917 	ldw	r2,36(sp)
80013074:	d8c00f17 	ldw	r3,60(sp)
80013078:	10ef883a 	add	r23,r2,r3
8001307c:	bdaf883a 	add	r23,r23,r22
80013080:	b829883a 	mov	r20,r23
80013084:	b83d980e 	bge	r23,zero,800126e8 <_gp+0xfffe1974>
80013088:	0029883a 	mov	r20,zero
8001308c:	003d9606 	br	800126e8 <_gp+0xfffe1974>
80013090:	05c00044 	movi	r23,1
80013094:	b8afc83a 	sub	r23,r23,r2
80013098:	00800b44 	movi	r2,45
8001309c:	d8801885 	stb	r2,98(sp)
800130a0:	003ed606 	br	80012bfc <_gp+0xfffe1e88>
800130a4:	5880004c 	andi	r2,r11,1
800130a8:	d8800915 	stw	r2,36(sp)
800130ac:	103ee11e 	bne	r2,zero,80012c34 <_gp+0xfffe1ec0>
800130b0:	003ff306 	br	80013080 <_gp+0xfffe230c>
800130b4:	b0000f1e 	bne	r22,zero,800130f4 <___svfprintf_internal_r+0x1ed0>
800130b8:	5ac0004c 	andi	r11,r11,1
800130bc:	58000d1e 	bne	r11,zero,800130f4 <___svfprintf_internal_r+0x1ed0>
800130c0:	05000044 	movi	r20,1
800130c4:	05c00044 	movi	r23,1
800130c8:	003d8706 	br	800126e8 <_gp+0xfffe1974>
800130cc:	4005883a 	mov	r2,r8
800130d0:	5adaaf84 	addi	r11,r11,27326
800130d4:	003e6406 	br	80012a68 <_gp+0xfffe1cf4>
800130d8:	04a000b4 	movhi	r18,32770
800130dc:	949aa204 	addi	r18,r18,27272
800130e0:	003b2e06 	br	80011d9c <_gp+0xfffe1028>
800130e4:	00800b44 	movi	r2,45
800130e8:	d8801545 	stb	r2,85(sp)
800130ec:	03000b44 	movi	r12,45
800130f0:	003fda06 	br	8001305c <_gp+0xfffe22e8>
800130f4:	d8800f17 	ldw	r2,60(sp)
800130f8:	15c00044 	addi	r23,r2,1
800130fc:	bdaf883a 	add	r23,r23,r22
80013100:	003fdf06 	br	80013080 <_gp+0xfffe230c>
80013104:	d8801617 	ldw	r2,88(sp)
80013108:	d8800915 	stw	r2,36(sp)
8001310c:	d8801a17 	ldw	r2,104(sp)
80013110:	1485c83a 	sub	r2,r2,r18
80013114:	d8800a15 	stw	r2,40(sp)
80013118:	003eac06 	br	80012bcc <_gp+0xfffe1e58>
8001311c:	932f883a 	add	r23,r18,r12
80013120:	003d5706 	br	80012680 <_gp+0xfffe190c>
80013124:	d8800817 	ldw	r2,32(sp)
80013128:	15800017 	ldw	r22,0(r2)
8001312c:	10800104 	addi	r2,r2,4
80013130:	b000010e 	bge	r22,zero,80013138 <___svfprintf_internal_r+0x1f14>
80013134:	05bfffc4 	movi	r22,-1
80013138:	e4000043 	ldbu	r16,1(fp)
8001313c:	d8800815 	stw	r2,32(sp)
80013140:	1839883a 	mov	fp,r3
80013144:	84003fcc 	andi	r16,r16,255
80013148:	8400201c 	xori	r16,r16,128
8001314c:	843fe004 	addi	r16,r16,-128
80013150:	00388006 	br	80011354 <_gp+0xfffe05e0>
80013154:	d9400417 	ldw	r5,16(sp)
80013158:	d9000517 	ldw	r4,20(sp)
8001315c:	d9801c04 	addi	r6,sp,112
80013160:	001a82c0 	call	8001a82c <__ssprint_r>
80013164:	1038ea1e 	bne	r2,zero,80011510 <_gp+0xfffe079c>
80013168:	d8c01e17 	ldw	r3,120(sp)
8001316c:	d8801d17 	ldw	r2,116(sp)
80013170:	a811883a 	mov	r8,r21
80013174:	003bde06 	br	800120f0 <_gp+0xfffe137c>
80013178:	d8c018c4 	addi	r3,sp,99
8001317c:	003ea606 	br	80012c18 <_gp+0xfffe1ea4>
80013180:	b019883a 	mov	r12,r22
80013184:	003e7e06 	br	80012b80 <_gp+0xfffe1e0c>
80013188:	d9401545 	stb	r5,85(sp)
8001318c:	003aa506 	br	80011c24 <_gp+0xfffe0eb0>
80013190:	d8c00517 	ldw	r3,20(sp)
80013194:	00800304 	movi	r2,12
80013198:	18800015 	stw	r2,0(r3)
8001319c:	00bfffc4 	movi	r2,-1
800131a0:	d8800615 	stw	r2,24(sp)
800131a4:	0038de06 	br	80011520 <_gp+0xfffe07ac>
800131a8:	d9401545 	stb	r5,85(sp)
800131ac:	003a7306 	br	80011b7c <_gp+0xfffe0e08>
800131b0:	d9401545 	stb	r5,85(sp)
800131b4:	00398306 	br	800117c4 <_gp+0xfffe0a50>
800131b8:	d9401545 	stb	r5,85(sp)
800131bc:	00396a06 	br	80011768 <_gp+0xfffe09f4>
800131c0:	d9401545 	stb	r5,85(sp)
800131c4:	003afe06 	br	80011dc0 <_gp+0xfffe104c>
800131c8:	d9401545 	stb	r5,85(sp)
800131cc:	00393406 	br	800116a0 <_gp+0xfffe092c>
800131d0:	d9401545 	stb	r5,85(sp)
800131d4:	003ac606 	br	80011cf0 <_gp+0xfffe0f7c>

800131d8 <__tzcalc_limits>:
800131d8:	defff204 	addi	sp,sp,-56
800131dc:	dd000815 	stw	r20,32(sp)
800131e0:	dcc00715 	stw	r19,28(sp)
800131e4:	dfc00d15 	stw	ra,52(sp)
800131e8:	2027883a 	mov	r19,r4
800131ec:	df000c15 	stw	fp,48(sp)
800131f0:	ddc00b15 	stw	r23,44(sp)
800131f4:	dd800a15 	stw	r22,40(sp)
800131f8:	dd400915 	stw	r21,36(sp)
800131fc:	dc800615 	stw	r18,24(sp)
80013200:	dc400515 	stw	r17,20(sp)
80013204:	dc000415 	stw	r16,16(sp)
80013208:	00185b40 	call	800185b4 <__gettzinfo>
8001320c:	1029883a 	mov	r20,r2
80013210:	9881ec90 	cmplti	r2,r19,1970
80013214:	1000671e 	bne	r2,zero,800133b4 <__tzcalc_limits+0x1dc>
80013218:	9c3e1384 	addi	r16,r19,-1970
8001321c:	98be13c4 	addi	r2,r19,-1969
80013220:	1005d0ba 	srai	r2,r2,2
80013224:	84005b64 	muli	r16,r16,365
80013228:	993e24c4 	addi	r4,r19,-1901
8001322c:	017fe704 	movi	r5,-100
80013230:	a4c00115 	stw	r19,4(r20)
80013234:	80a1883a 	add	r16,r16,r2
80013238:	000d4880 	call	8000d488 <__divsi3>
8001323c:	993e6fc4 	addi	r4,r19,-1601
80013240:	01406404 	movi	r5,400
80013244:	80a1883a 	add	r16,r16,r2
80013248:	000d4880 	call	8000d488 <__divsi3>
8001324c:	9809883a 	mov	r4,r19
80013250:	01401904 	movi	r5,100
80013254:	80a1883a 	add	r16,r16,r2
80013258:	000d5100 	call	8000d510 <__modsi3>
8001325c:	9809883a 	mov	r4,r19
80013260:	01406404 	movi	r5,400
80013264:	1023883a 	mov	r17,r2
80013268:	000d5100 	call	8000d510 <__modsi3>
8001326c:	102f003a 	cmpeq	r23,r2,zero
80013270:	bdc00c24 	muli	r23,r23,48
80013274:	05a000b4 	movhi	r22,32770
80013278:	05400074 	movhi	r21,1
8001327c:	100d883a 	mov	r6,r2
80013280:	a4800204 	addi	r18,r20,8
80013284:	a7001004 	addi	fp,r20,64
80013288:	9cc000cc 	andi	r19,r19,3
8001328c:	b59b7904 	addi	r22,r22,28132
80013290:	ad546004 	addi	r21,r21,20864
80013294:	90800007 	ldb	r2,0(r18)
80013298:	92400317 	ldw	r9,12(r18)
8001329c:	10c01298 	cmpnei	r3,r2,74
800132a0:	18004626 	beq	r3,zero,800133bc <__tzcalc_limits+0x1e4>
800132a4:	10801118 	cmpnei	r2,r2,68
800132a8:	10001a1e 	bne	r2,zero,80013314 <__tzcalc_limits+0x13c>
800132ac:	8245883a 	add	r2,r16,r9
800132b0:	91000417 	ldw	r4,16(r18)
800132b4:	1545383a 	mul	r2,r2,r21
800132b8:	90c00617 	ldw	r3,24(r18)
800132bc:	94800704 	addi	r18,r18,28
800132c0:	1105883a 	add	r2,r2,r4
800132c4:	10c5883a 	add	r2,r2,r3
800132c8:	90bffe15 	stw	r2,-8(r18)
800132cc:	e4bff11e 	bne	fp,r18,80013294 <_gp+0xfffe2520>
800132d0:	a0c00717 	ldw	r3,28(r20)
800132d4:	a1000e17 	ldw	r4,56(r20)
800132d8:	00800044 	movi	r2,1
800132dc:	1906803a 	cmplt	r3,r3,r4
800132e0:	a0c00015 	stw	r3,0(r20)
800132e4:	dfc00d17 	ldw	ra,52(sp)
800132e8:	df000c17 	ldw	fp,48(sp)
800132ec:	ddc00b17 	ldw	r23,44(sp)
800132f0:	dd800a17 	ldw	r22,40(sp)
800132f4:	dd400917 	ldw	r21,36(sp)
800132f8:	dd000817 	ldw	r20,32(sp)
800132fc:	dcc00717 	ldw	r19,28(sp)
80013300:	dc800617 	ldw	r18,24(sp)
80013304:	dc400517 	ldw	r17,20(sp)
80013308:	dc000417 	ldw	r16,16(sp)
8001330c:	dec00e04 	addi	sp,sp,56
80013310:	f800283a 	ret
80013314:	98003526 	beq	r19,zero,800133ec <__tzcalc_limits+0x214>
80013318:	b805883a 	mov	r2,r23
8001331c:	90c00117 	ldw	r3,4(r18)
80013320:	1591883a 	add	r8,r2,r22
80013324:	18800090 	cmplti	r2,r3,2
80013328:	1000331e 	bne	r2,zero,800133f8 <__tzcalc_limits+0x220>
8001332c:	180690ba 	slli	r3,r3,2
80013330:	4005883a 	mov	r2,r8
80013334:	800f883a 	mov	r7,r16
80013338:	18ffff04 	addi	r3,r3,-4
8001333c:	40c7883a 	add	r3,r8,r3
80013340:	11000017 	ldw	r4,0(r2)
80013344:	10800104 	addi	r2,r2,4
80013348:	390f883a 	add	r7,r7,r4
8001334c:	18bffc1e 	bne	r3,r2,80013340 <_gp+0xfffe25cc>
80013350:	1811883a 	mov	r8,r3
80013354:	39000104 	addi	r4,r7,4
80013358:	014001c4 	movi	r5,7
8001335c:	da000315 	stw	r8,12(sp)
80013360:	da400215 	stw	r9,8(sp)
80013364:	d9800115 	stw	r6,4(sp)
80013368:	d9c00015 	stw	r7,0(sp)
8001336c:	000d5100 	call	8000d510 <__modsi3>
80013370:	da400217 	ldw	r9,8(sp)
80013374:	d9c00017 	ldw	r7,0(sp)
80013378:	d9800117 	ldw	r6,4(sp)
8001337c:	4885c83a 	sub	r2,r9,r2
80013380:	da000317 	ldw	r8,12(sp)
80013384:	1000010e 	bge	r2,zero,8001338c <__tzcalc_limits+0x1b4>
80013388:	108001c4 	addi	r2,r2,7
8001338c:	90c00217 	ldw	r3,8(r18)
80013390:	41000017 	ldw	r4,0(r8)
80013394:	18ffffc4 	addi	r3,r3,-1
80013398:	18c001e4 	muli	r3,r3,7
8001339c:	1885883a 	add	r2,r3,r2
800133a0:	11000216 	blt	r2,r4,800133ac <__tzcalc_limits+0x1d4>
800133a4:	10bffe44 	addi	r2,r2,-7
800133a8:	113ffe0e 	bge	r2,r4,800133a4 <_gp+0xfffe2630>
800133ac:	11c5883a 	add	r2,r2,r7
800133b0:	003fbf06 	br	800132b0 <_gp+0xfffe253c>
800133b4:	0005883a 	mov	r2,zero
800133b8:	003fca06 	br	800132e4 <_gp+0xfffe2570>
800133bc:	8245883a 	add	r2,r16,r9
800133c0:	9800061e 	bne	r19,zero,800133dc <__tzcalc_limits+0x204>
800133c4:	88000526 	beq	r17,zero,800133dc <__tzcalc_limits+0x204>
800133c8:	4a400f10 	cmplti	r9,r9,60
800133cc:	4800011e 	bne	r9,zero,800133d4 <__tzcalc_limits+0x1fc>
800133d0:	10800044 	addi	r2,r2,1
800133d4:	10bfffc4 	addi	r2,r2,-1
800133d8:	003fb506 	br	800132b0 <_gp+0xfffe253c>
800133dc:	303ffd1e 	bne	r6,zero,800133d4 <_gp+0xfffe2660>
800133e0:	4a400f10 	cmplti	r9,r9,60
800133e4:	483ffb1e 	bne	r9,zero,800133d4 <_gp+0xfffe2660>
800133e8:	003ff906 	br	800133d0 <_gp+0xfffe265c>
800133ec:	883fca26 	beq	r17,zero,80013318 <_gp+0xfffe25a4>
800133f0:	00800c04 	movi	r2,48
800133f4:	003fc906 	br	8001331c <_gp+0xfffe25a8>
800133f8:	800f883a 	mov	r7,r16
800133fc:	003fd506 	br	80013354 <_gp+0xfffe25e0>

80013400 <__tz_lock>:
80013400:	f800283a 	ret

80013404 <__tz_unlock>:
80013404:	f800283a 	ret

80013408 <_tzset_unlocked>:
80013408:	00a000f4 	movhi	r2,32771
8001340c:	11235e17 	ldw	r4,-29320(r2)
80013410:	00134381 	jmpi	80013438 <_tzset_unlocked_r>

80013414 <tzset>:
80013414:	deffff04 	addi	sp,sp,-4
80013418:	dfc00015 	stw	ra,0(sp)
8001341c:	00134000 	call	80013400 <__tz_lock>
80013420:	00a000f4 	movhi	r2,32771
80013424:	11235e17 	ldw	r4,-29320(r2)
80013428:	00134380 	call	80013438 <_tzset_unlocked_r>
8001342c:	dfc00017 	ldw	ra,0(sp)
80013430:	dec00104 	addi	sp,sp,4
80013434:	00134041 	jmpi	80013404 <__tz_unlock>

80013438 <_tzset_unlocked_r>:
80013438:	deffee04 	addi	sp,sp,-72
8001343c:	dc800b15 	stw	r18,44(sp)
80013440:	dc400a15 	stw	r17,40(sp)
80013444:	dfc01115 	stw	ra,68(sp)
80013448:	ddc01015 	stw	r23,64(sp)
8001344c:	dd800f15 	stw	r22,60(sp)
80013450:	dd400e15 	stw	r21,56(sp)
80013454:	dd000d15 	stw	r20,52(sp)
80013458:	dcc00c15 	stw	r19,48(sp)
8001345c:	dc000915 	stw	r16,36(sp)
80013460:	2023883a 	mov	r17,r4
80013464:	00185b40 	call	800185b4 <__gettzinfo>
80013468:	016000b4 	movhi	r5,32770
8001346c:	295ab804 	addi	r5,r5,27360
80013470:	8809883a 	mov	r4,r17
80013474:	1025883a 	mov	r18,r2
80013478:	00185980 	call	80018598 <_getenv_r>
8001347c:	1000b726 	beq	r2,zero,8001375c <_tzset_unlocked_r+0x324>
80013480:	1021883a 	mov	r16,r2
80013484:	00a000f4 	movhi	r2,32771
80013488:	116ad417 	ldw	r5,-21680(r2)
8001348c:	28001026 	beq	r5,zero,800134d0 <_tzset_unlocked_r+0x98>
80013490:	8009883a 	mov	r4,r16
80013494:	001103c0 	call	8001103c <strcmp>
80013498:	10000b1e 	bne	r2,zero,800134c8 <_tzset_unlocked_r+0x90>
8001349c:	dfc01117 	ldw	ra,68(sp)
800134a0:	ddc01017 	ldw	r23,64(sp)
800134a4:	dd800f17 	ldw	r22,60(sp)
800134a8:	dd400e17 	ldw	r21,56(sp)
800134ac:	dd000d17 	ldw	r20,52(sp)
800134b0:	dcc00c17 	ldw	r19,48(sp)
800134b4:	dc800b17 	ldw	r18,44(sp)
800134b8:	dc400a17 	ldw	r17,40(sp)
800134bc:	dc000917 	ldw	r16,36(sp)
800134c0:	dec01204 	addi	sp,sp,72
800134c4:	f800283a 	ret
800134c8:	00a000f4 	movhi	r2,32771
800134cc:	116ad417 	ldw	r5,-21680(r2)
800134d0:	2809883a 	mov	r4,r5
800134d4:	000fc940 	call	8000fc94 <free>
800134d8:	8009883a 	mov	r4,r16
800134dc:	00111940 	call	80011194 <strlen>
800134e0:	11400044 	addi	r5,r2,1
800134e4:	8809883a 	mov	r4,r17
800134e8:	000fca40 	call	8000fca4 <_malloc_r>
800134ec:	00e000f4 	movhi	r3,32771
800134f0:	18aad415 	stw	r2,-21680(r3)
800134f4:	10000326 	beq	r2,zero,80013504 <_tzset_unlocked_r+0xcc>
800134f8:	800b883a 	mov	r5,r16
800134fc:	1009883a 	mov	r4,r2
80013500:	00111080 	call	80011108 <strcpy>
80013504:	80800007 	ldb	r2,0(r16)
80013508:	10800e98 	cmpnei	r2,r2,58
8001350c:	10008e26 	beq	r2,zero,80013748 <_tzset_unlocked_r+0x310>
80013510:	dc400704 	addi	r17,sp,28
80013514:	01a000f4 	movhi	r6,32771
80013518:	016000b4 	movhi	r5,32770
8001351c:	880f883a 	mov	r7,r17
80013520:	31aaedc4 	addi	r6,r6,-21577
80013524:	295aba04 	addi	r5,r5,27368
80013528:	8009883a 	mov	r4,r16
8001352c:	001a2400 	call	8001a240 <siscanf>
80013530:	00bfda0e 	bge	zero,r2,8001349c <_gp+0xfffe2728>
80013534:	d8800717 	ldw	r2,28(sp)
80013538:	80a1883a 	add	r16,r16,r2
8001353c:	80800007 	ldb	r2,0(r16)
80013540:	10c00b58 	cmpnei	r3,r2,45
80013544:	18009526 	beq	r3,zero,8001379c <_tzset_unlocked_r+0x364>
80013548:	10800ad8 	cmpnei	r2,r2,43
8001354c:	10008026 	beq	r2,zero,80013750 <_tzset_unlocked_r+0x318>
80013550:	05400044 	movi	r21,1
80013554:	dd000504 	addi	r20,sp,20
80013558:	dcc00484 	addi	r19,sp,18
8001355c:	016000b4 	movhi	r5,32770
80013560:	dc400315 	stw	r17,12(sp)
80013564:	dd000215 	stw	r20,8(sp)
80013568:	dc400115 	stw	r17,4(sp)
8001356c:	dcc00015 	stw	r19,0(sp)
80013570:	880f883a 	mov	r7,r17
80013574:	d9800404 	addi	r6,sp,16
80013578:	295abe04 	addi	r5,r5,27384
8001357c:	8009883a 	mov	r4,r16
80013580:	d800048d 	sth	zero,18(sp)
80013584:	d800050d 	sth	zero,20(sp)
80013588:	001a2400 	call	8001a240 <siscanf>
8001358c:	00bfc30e 	bge	zero,r2,8001349c <_gp+0xfffe2728>
80013590:	d880048b 	ldhu	r2,18(sp)
80013594:	d8c0040b 	ldhu	r3,16(sp)
80013598:	d900050b 	ldhu	r4,20(sp)
8001359c:	10800f24 	muli	r2,r2,60
800135a0:	18c38424 	muli	r3,r3,3600
800135a4:	01a000f4 	movhi	r6,32771
800135a8:	1105883a 	add	r2,r2,r4
800135ac:	10c5883a 	add	r2,r2,r3
800135b0:	d9000717 	ldw	r4,28(sp)
800135b4:	1545383a 	mul	r2,r2,r21
800135b8:	00e000f4 	movhi	r3,32771
800135bc:	8121883a 	add	r16,r16,r4
800135c0:	016000b4 	movhi	r5,32770
800135c4:	056000f4 	movhi	r21,32771
800135c8:	18eaedc4 	addi	r3,r3,-21577
800135cc:	90800815 	stw	r2,32(r18)
800135d0:	880f883a 	mov	r7,r17
800135d4:	00a000f4 	movhi	r2,32771
800135d8:	31aaeb04 	addi	r6,r6,-21588
800135dc:	295aba04 	addi	r5,r5,27368
800135e0:	8009883a 	mov	r4,r16
800135e4:	ad636104 	addi	r21,r21,-29308
800135e8:	10e36115 	stw	r3,-29308(r2)
800135ec:	001a2400 	call	8001a240 <siscanf>
800135f0:	00806d0e 	bge	zero,r2,800137a8 <_tzset_unlocked_r+0x370>
800135f4:	00a000f4 	movhi	r2,32771
800135f8:	10aaeb04 	addi	r2,r2,-21588
800135fc:	a8800115 	stw	r2,4(r21)
80013600:	d8800717 	ldw	r2,28(sp)
80013604:	80a1883a 	add	r16,r16,r2
80013608:	80800007 	ldb	r2,0(r16)
8001360c:	10c00b58 	cmpnei	r3,r2,45
80013610:	1800b926 	beq	r3,zero,800138f8 <_tzset_unlocked_r+0x4c0>
80013614:	10800ad8 	cmpnei	r2,r2,43
80013618:	10006c26 	beq	r2,zero,800137cc <_tzset_unlocked_r+0x394>
8001361c:	05400044 	movi	r21,1
80013620:	016000b4 	movhi	r5,32770
80013624:	dc400315 	stw	r17,12(sp)
80013628:	dd000215 	stw	r20,8(sp)
8001362c:	dc400115 	stw	r17,4(sp)
80013630:	dcc00015 	stw	r19,0(sp)
80013634:	880f883a 	mov	r7,r17
80013638:	d9800404 	addi	r6,sp,16
8001363c:	295abe04 	addi	r5,r5,27384
80013640:	8009883a 	mov	r4,r16
80013644:	d800040d 	sth	zero,16(sp)
80013648:	d800048d 	sth	zero,18(sp)
8001364c:	d800050d 	sth	zero,20(sp)
80013650:	d8000715 	stw	zero,28(sp)
80013654:	001a2400 	call	8001a240 <siscanf>
80013658:	0080a30e 	bge	zero,r2,800138e8 <_tzset_unlocked_r+0x4b0>
8001365c:	d880048b 	ldhu	r2,18(sp)
80013660:	d8c0040b 	ldhu	r3,16(sp)
80013664:	d900050b 	ldhu	r4,20(sp)
80013668:	10800f24 	muli	r2,r2,60
8001366c:	18c38424 	muli	r3,r3,3600
80013670:	1105883a 	add	r2,r2,r4
80013674:	10c5883a 	add	r2,r2,r3
80013678:	1545383a 	mul	r2,r2,r21
8001367c:	90800f15 	stw	r2,60(r18)
80013680:	d8800717 	ldw	r2,28(sp)
80013684:	95c00204 	addi	r23,r18,8
80013688:	002d883a 	mov	r22,zero
8001368c:	80a1883a 	add	r16,r16,r2
80013690:	85400007 	ldb	r21,0(r16)
80013694:	a8800b18 	cmpnei	r2,r21,44
80013698:	1000051e 	bne	r2,zero,800136b0 <_tzset_unlocked_r+0x278>
8001369c:	85400043 	ldbu	r21,1(r16)
800136a0:	84000044 	addi	r16,r16,1
800136a4:	ad403fcc 	andi	r21,r21,255
800136a8:	ad40201c 	xori	r21,r21,128
800136ac:	ad7fe004 	addi	r21,r21,-128
800136b0:	a8801358 	cmpnei	r2,r21,77
800136b4:	10005626 	beq	r2,zero,80013810 <_tzset_unlocked_r+0x3d8>
800136b8:	ad401298 	cmpnei	r21,r21,74
800136bc:	a8004826 	beq	r21,zero,800137e0 <_tzset_unlocked_r+0x3a8>
800136c0:	05401104 	movi	r21,68
800136c4:	01800284 	movi	r6,10
800136c8:	d9400804 	addi	r5,sp,32
800136cc:	8009883a 	mov	r4,r16
800136d0:	001a7e80 	call	8001a7e8 <strtoul>
800136d4:	d8c00817 	ldw	r3,32(sp)
800136d8:	d880068d 	sth	r2,26(sp)
800136dc:	1c004326 	beq	r3,r16,800137ec <_tzset_unlocked_r+0x3b4>
800136e0:	10bfffcc 	andi	r2,r2,65535
800136e4:	bd400005 	stb	r21,0(r23)
800136e8:	b8800315 	stw	r2,12(r23)
800136ec:	1821883a 	mov	r16,r3
800136f0:	00800084 	movi	r2,2
800136f4:	d880040d 	sth	r2,16(sp)
800136f8:	d800048d 	sth	zero,18(sp)
800136fc:	d800050d 	sth	zero,20(sp)
80013700:	d8000715 	stw	zero,28(sp)
80013704:	80800007 	ldb	r2,0(r16)
80013708:	10800bd8 	cmpnei	r2,r2,47
8001370c:	10006226 	beq	r2,zero,80013898 <_tzset_unlocked_r+0x460>
80013710:	00870804 	movi	r2,7200
80013714:	b8800415 	stw	r2,16(r23)
80013718:	bdc00704 	addi	r23,r23,28
8001371c:	b0002e26 	beq	r22,zero,800137d8 <_tzset_unlocked_r+0x3a0>
80013720:	91000117 	ldw	r4,4(r18)
80013724:	00131d80 	call	800131d8 <__tzcalc_limits>
80013728:	90c00817 	ldw	r3,32(r18)
8001372c:	90800f17 	ldw	r2,60(r18)
80013730:	012000f4 	movhi	r4,32771
80013734:	20ead515 	stw	r3,-21676(r4)
80013738:	10c4c03a 	cmpne	r2,r2,r3
8001373c:	00e000f4 	movhi	r3,32771
80013740:	18aad615 	stw	r2,-21672(r3)
80013744:	003f5506 	br	8001349c <_gp+0xfffe2728>
80013748:	84000044 	addi	r16,r16,1
8001374c:	003f7006 	br	80013510 <_gp+0xfffe279c>
80013750:	84000044 	addi	r16,r16,1
80013754:	05400044 	movi	r21,1
80013758:	003f7e06 	br	80013554 <_gp+0xfffe27e0>
8001375c:	00a000f4 	movhi	r2,32771
80013760:	00e000f4 	movhi	r3,32771
80013764:	112ad417 	ldw	r4,-21680(r2)
80013768:	182ad515 	stw	zero,-21676(r3)
8001376c:	00a000b4 	movhi	r2,32770
80013770:	00e000f4 	movhi	r3,32771
80013774:	109ab904 	addi	r2,r2,27364
80013778:	182ad615 	stw	zero,-21672(r3)
8001377c:	00e000f4 	movhi	r3,32771
80013780:	18a36115 	stw	r2,-29308(r3)
80013784:	00e000f4 	movhi	r3,32771
80013788:	18a36215 	stw	r2,-29304(r3)
8001378c:	000fc940 	call	8000fc94 <free>
80013790:	00a000f4 	movhi	r2,32771
80013794:	102ad415 	stw	zero,-21680(r2)
80013798:	003f4006 	br	8001349c <_gp+0xfffe2728>
8001379c:	84000044 	addi	r16,r16,1
800137a0:	057fffc4 	movi	r21,-1
800137a4:	003f6b06 	br	80013554 <_gp+0xfffe27e0>
800137a8:	00a000f4 	movhi	r2,32771
800137ac:	10a36117 	ldw	r2,-29308(r2)
800137b0:	90c00817 	ldw	r3,32(r18)
800137b4:	a8800115 	stw	r2,4(r21)
800137b8:	00a000f4 	movhi	r2,32771
800137bc:	10ead515 	stw	r3,-21676(r2)
800137c0:	00a000f4 	movhi	r2,32771
800137c4:	102ad615 	stw	zero,-21672(r2)
800137c8:	003f3406 	br	8001349c <_gp+0xfffe2728>
800137cc:	84000044 	addi	r16,r16,1
800137d0:	05400044 	movi	r21,1
800137d4:	003f9206 	br	80013620 <_gp+0xfffe28ac>
800137d8:	05800044 	movi	r22,1
800137dc:	003fac06 	br	80013690 <_gp+0xfffe291c>
800137e0:	84000044 	addi	r16,r16,1
800137e4:	05401284 	movi	r21,74
800137e8:	003fb606 	br	800136c4 <_gp+0xfffe2950>
800137ec:	00801344 	movi	r2,77
800137f0:	b0004426 	beq	r22,zero,80013904 <_tzset_unlocked_r+0x4cc>
800137f4:	90800905 	stb	r2,36(r18)
800137f8:	008002c4 	movi	r2,11
800137fc:	90800a15 	stw	r2,40(r18)
80013800:	00800044 	movi	r2,1
80013804:	90800b15 	stw	r2,44(r18)
80013808:	90000c15 	stw	zero,48(r18)
8001380c:	003fb706 	br	800136ec <_gp+0xfffe2978>
80013810:	d8800684 	addi	r2,sp,26
80013814:	d8800215 	stw	r2,8(sp)
80013818:	016000b4 	movhi	r5,32770
8001381c:	d8800604 	addi	r2,sp,24
80013820:	dc400315 	stw	r17,12(sp)
80013824:	dc400115 	stw	r17,4(sp)
80013828:	d8800015 	stw	r2,0(sp)
8001382c:	880f883a 	mov	r7,r17
80013830:	d9800584 	addi	r6,sp,22
80013834:	295ac304 	addi	r5,r5,27404
80013838:	8009883a 	mov	r4,r16
8001383c:	001a2400 	call	8001a240 <siscanf>
80013840:	108000d8 	cmpnei	r2,r2,3
80013844:	103f151e 	bne	r2,zero,8001349c <_gp+0xfffe2728>
80013848:	d8c0058b 	ldhu	r3,22(sp)
8001384c:	18bfffc4 	addi	r2,r3,-1
80013850:	10bfffcc 	andi	r2,r2,65535
80013854:	10800328 	cmpgeui	r2,r2,12
80013858:	103f101e 	bne	r2,zero,8001349c <_gp+0xfffe2728>
8001385c:	d900060b 	ldhu	r4,24(sp)
80013860:	20bfffc4 	addi	r2,r4,-1
80013864:	10bfffcc 	andi	r2,r2,65535
80013868:	10800168 	cmpgeui	r2,r2,5
8001386c:	103f0b1e 	bne	r2,zero,8001349c <_gp+0xfffe2728>
80013870:	d880068b 	ldhu	r2,26(sp)
80013874:	114001e8 	cmpgeui	r5,r2,7
80013878:	283f081e 	bne	r5,zero,8001349c <_gp+0xfffe2728>
8001387c:	bd400005 	stb	r21,0(r23)
80013880:	b8c00115 	stw	r3,4(r23)
80013884:	b9000215 	stw	r4,8(r23)
80013888:	b8800315 	stw	r2,12(r23)
8001388c:	d8800717 	ldw	r2,28(sp)
80013890:	80a1883a 	add	r16,r16,r2
80013894:	003f9606 	br	800136f0 <_gp+0xfffe297c>
80013898:	016000b4 	movhi	r5,32770
8001389c:	8009883a 	mov	r4,r16
800138a0:	dc400315 	stw	r17,12(sp)
800138a4:	dd000215 	stw	r20,8(sp)
800138a8:	dc400115 	stw	r17,4(sp)
800138ac:	dcc00015 	stw	r19,0(sp)
800138b0:	880f883a 	mov	r7,r17
800138b4:	d9800404 	addi	r6,sp,16
800138b8:	295ac804 	addi	r5,r5,27424
800138bc:	001a2400 	call	8001a240 <siscanf>
800138c0:	d880048b 	ldhu	r2,18(sp)
800138c4:	d8c0040b 	ldhu	r3,16(sp)
800138c8:	d900050b 	ldhu	r4,20(sp)
800138cc:	10800f24 	muli	r2,r2,60
800138d0:	18c38424 	muli	r3,r3,3600
800138d4:	1105883a 	add	r2,r2,r4
800138d8:	10c5883a 	add	r2,r2,r3
800138dc:	d8c00717 	ldw	r3,28(sp)
800138e0:	80e1883a 	add	r16,r16,r3
800138e4:	003f8b06 	br	80013714 <_gp+0xfffe29a0>
800138e8:	90800817 	ldw	r2,32(r18)
800138ec:	10bc7c04 	addi	r2,r2,-3600
800138f0:	90800f15 	stw	r2,60(r18)
800138f4:	003f6206 	br	80013680 <_gp+0xfffe290c>
800138f8:	84000044 	addi	r16,r16,1
800138fc:	057fffc4 	movi	r21,-1
80013900:	003f4706 	br	80013620 <_gp+0xfffe28ac>
80013904:	90800205 	stb	r2,8(r18)
80013908:	008000c4 	movi	r2,3
8001390c:	90800315 	stw	r2,12(r18)
80013910:	00800084 	movi	r2,2
80013914:	90800415 	stw	r2,16(r18)
80013918:	90000515 	stw	zero,20(r18)
8001391c:	003f7306 	br	800136ec <_gp+0xfffe2978>

80013920 <_tzset_r>:
80013920:	defffe04 	addi	sp,sp,-8
80013924:	dfc00115 	stw	ra,4(sp)
80013928:	d9000015 	stw	r4,0(sp)
8001392c:	00134000 	call	80013400 <__tz_lock>
80013930:	d9000017 	ldw	r4,0(sp)
80013934:	00134380 	call	80013438 <_tzset_unlocked_r>
80013938:	dfc00117 	ldw	ra,4(sp)
8001393c:	dec00204 	addi	sp,sp,8
80013940:	00134041 	jmpi	80013404 <__tz_unlock>

80013944 <___vfprintf_internal_r>:
80013944:	deffbe04 	addi	sp,sp,-264
80013948:	dfc04115 	stw	ra,260(sp)
8001394c:	ddc03f15 	stw	r23,252(sp)
80013950:	dc403915 	stw	r17,228(sp)
80013954:	dc003815 	stw	r16,224(sp)
80013958:	2023883a 	mov	r17,r4
8001395c:	d9000415 	stw	r4,16(sp)
80013960:	282f883a 	mov	r23,r5
80013964:	3021883a 	mov	r16,r6
80013968:	d9c00715 	stw	r7,28(sp)
8001396c:	df004015 	stw	fp,256(sp)
80013970:	dd803e15 	stw	r22,248(sp)
80013974:	dd403d15 	stw	r21,244(sp)
80013978:	dd003c15 	stw	r20,240(sp)
8001397c:	dcc03b15 	stw	r19,236(sp)
80013980:	dc803a15 	stw	r18,232(sp)
80013984:	00185c80 	call	800185c8 <_localeconv_r>
80013988:	10800017 	ldw	r2,0(r2)
8001398c:	1009883a 	mov	r4,r2
80013990:	d8800f15 	stw	r2,60(sp)
80013994:	00111940 	call	80011194 <strlen>
80013998:	d8800c15 	stw	r2,48(sp)
8001399c:	88000226 	beq	r17,zero,800139a8 <___vfprintf_internal_r+0x64>
800139a0:	88800e17 	ldw	r2,56(r17)
800139a4:	1000b426 	beq	r2,zero,80013c78 <___vfprintf_internal_r+0x334>
800139a8:	b880030b 	ldhu	r2,12(r23)
800139ac:	10c8000c 	andi	r3,r2,8192
800139b0:	1800061e 	bne	r3,zero,800139cc <___vfprintf_internal_r+0x88>
800139b4:	b8c01917 	ldw	r3,100(r23)
800139b8:	0137ffc4 	movi	r4,-8193
800139bc:	10880014 	ori	r2,r2,8192
800139c0:	1906703a 	and	r3,r3,r4
800139c4:	b880030d 	sth	r2,12(r23)
800139c8:	b8c01915 	stw	r3,100(r23)
800139cc:	10c0020c 	andi	r3,r2,8
800139d0:	18009826 	beq	r3,zero,80013c34 <___vfprintf_internal_r+0x2f0>
800139d4:	b8c00417 	ldw	r3,16(r23)
800139d8:	18009626 	beq	r3,zero,80013c34 <___vfprintf_internal_r+0x2f0>
800139dc:	1080068c 	andi	r2,r2,26
800139e0:	10800298 	cmpnei	r2,r2,10
800139e4:	10009b26 	beq	r2,zero,80013c54 <___vfprintf_internal_r+0x310>
800139e8:	d8802804 	addi	r2,sp,160
800139ec:	d8801b15 	stw	r2,108(sp)
800139f0:	d8001d15 	stw	zero,116(sp)
800139f4:	d8001c15 	stw	zero,112(sp)
800139f8:	d8000915 	stw	zero,36(sp)
800139fc:	d8000a15 	stw	zero,40(sp)
80013a00:	d8000b15 	stw	zero,44(sp)
80013a04:	1011883a 	mov	r8,r2
80013a08:	d8000e15 	stw	zero,56(sp)
80013a0c:	d8001015 	stw	zero,64(sp)
80013a10:	d8000515 	stw	zero,20(sp)
80013a14:	8039883a 	mov	fp,r16
80013a18:	e0800007 	ldb	r2,0(fp)
80013a1c:	10023626 	beq	r2,zero,800142f8 <___vfprintf_internal_r+0x9b4>
80013a20:	10800960 	cmpeqi	r2,r2,37
80013a24:	e023883a 	mov	r17,fp
80013a28:	10000226 	beq	r2,zero,80013a34 <___vfprintf_internal_r+0xf0>
80013a2c:	00001706 	br	80013a8c <___vfprintf_internal_r+0x148>
80013a30:	18000426 	beq	r3,zero,80013a44 <___vfprintf_internal_r+0x100>
80013a34:	8c400044 	addi	r17,r17,1
80013a38:	88800007 	ldb	r2,0(r17)
80013a3c:	10c00958 	cmpnei	r3,r2,37
80013a40:	103ffb1e 	bne	r2,zero,80013a30 <_gp+0xfffe2cbc>
80013a44:	8f21c83a 	sub	r16,r17,fp
80013a48:	80000e26 	beq	r16,zero,80013a84 <___vfprintf_internal_r+0x140>
80013a4c:	d8c01d17 	ldw	r3,116(sp)
80013a50:	d8801c17 	ldw	r2,112(sp)
80013a54:	47000015 	stw	fp,0(r8)
80013a58:	1c07883a 	add	r3,r3,r16
80013a5c:	10800044 	addi	r2,r2,1
80013a60:	d8801c15 	stw	r2,112(sp)
80013a64:	44000115 	stw	r16,4(r8)
80013a68:	d8c01d15 	stw	r3,116(sp)
80013a6c:	10800208 	cmpgei	r2,r2,8
80013a70:	10038c1e 	bne	r2,zero,800148a4 <___vfprintf_internal_r+0xf60>
80013a74:	42000204 	addi	r8,r8,8
80013a78:	d8800517 	ldw	r2,20(sp)
80013a7c:	1405883a 	add	r2,r2,r16
80013a80:	d8800515 	stw	r2,20(sp)
80013a84:	88800007 	ldb	r2,0(r17)
80013a88:	10021b26 	beq	r2,zero,800142f8 <___vfprintf_internal_r+0x9b4>
80013a8c:	8f000044 	addi	fp,r17,1
80013a90:	8c400047 	ldb	r17,1(r17)
80013a94:	d8001445 	stb	zero,81(sp)
80013a98:	0009883a 	mov	r4,zero
80013a9c:	000b883a 	mov	r5,zero
80013aa0:	05bfffc4 	movi	r22,-1
80013aa4:	0025883a 	mov	r18,zero
80013aa8:	0017883a 	mov	r11,zero
80013aac:	e7000044 	addi	fp,fp,1
80013ab0:	88bff804 	addi	r2,r17,-32
80013ab4:	10c01668 	cmpgeui	r3,r2,89
80013ab8:	1800c41e 	bne	r3,zero,80013dcc <___vfprintf_internal_r+0x488>
80013abc:	100490ba 	slli	r2,r2,2
80013ac0:	00e00074 	movhi	r3,32769
80013ac4:	10c7883a 	add	r3,r2,r3
80013ac8:	188eb417 	ldw	r2,15056(r3)
80013acc:	1000683a 	jmp	r2
80013ad0:	800143cc 	andi	zero,r16,1295
80013ad4:	80013dcc 	andi	zero,r16,1271
80013ad8:	80013dcc 	andi	zero,r16,1271
80013adc:	800143c0 	call	8800143c <_gp+0x7fd06c8>
80013ae0:	80013dcc 	andi	zero,r16,1271
80013ae4:	80013dcc 	andi	zero,r16,1271
80013ae8:	80013dcc 	andi	zero,r16,1271
80013aec:	80013dcc 	andi	zero,r16,1271
80013af0:	80013dcc 	andi	zero,r16,1271
80013af4:	80013dcc 	andi	zero,r16,1271
80013af8:	80014398 	cmpnei	zero,r16,1294
80013afc:	80014388 	cmpgei	zero,r16,1294
80013b00:	80013dcc 	andi	zero,r16,1271
80013b04:	8001443c 	xorhi	zero,r16,1296
80013b08:	800143f8 	rdprs	zero,r16,1295
80013b0c:	80013dcc 	andi	zero,r16,1271
80013b10:	80014454 	ori	zero,r16,1297
80013b14:	80013d9c 	xori	zero,r16,1270
80013b18:	80013d9c 	xori	zero,r16,1270
80013b1c:	80013d9c 	xori	zero,r16,1270
80013b20:	80013d9c 	xori	zero,r16,1270
80013b24:	80013d9c 	xori	zero,r16,1270
80013b28:	80013d9c 	xori	zero,r16,1270
80013b2c:	80013d9c 	xori	zero,r16,1270
80013b30:	80013d9c 	xori	zero,r16,1270
80013b34:	80013d9c 	xori	zero,r16,1270
80013b38:	80013dcc 	andi	zero,r16,1271
80013b3c:	80013dcc 	andi	zero,r16,1271
80013b40:	80013dcc 	andi	zero,r16,1271
80013b44:	80013dcc 	andi	zero,r16,1271
80013b48:	80013dcc 	andi	zero,r16,1271
80013b4c:	80013dcc 	andi	zero,r16,1271
80013b50:	80013dcc 	andi	zero,r16,1271
80013b54:	80013dcc 	andi	zero,r16,1271
80013b58:	80013dcc 	andi	zero,r16,1271
80013b5c:	80013dcc 	andi	zero,r16,1271
80013b60:	80014530 	cmpltui	zero,r16,1300
80013b64:	80014460 	cmpeqi	zero,r16,1297
80013b68:	80013dcc 	andi	zero,r16,1271
80013b6c:	80014460 	cmpeqi	zero,r16,1297
80013b70:	80013dcc 	andi	zero,r16,1271
80013b74:	80013dcc 	andi	zero,r16,1271
80013b78:	80013dcc 	andi	zero,r16,1271
80013b7c:	80013dcc 	andi	zero,r16,1271
80013b80:	800145c0 	call	8800145c <_gp+0x7fd06e8>
80013b84:	80013dcc 	andi	zero,r16,1271
80013b88:	80013dcc 	andi	zero,r16,1271
80013b8c:	80013ce8 	cmpgeui	zero,r16,1267
80013b90:	80013dcc 	andi	zero,r16,1271
80013b94:	80013dcc 	andi	zero,r16,1271
80013b98:	80013dcc 	andi	zero,r16,1271
80013b9c:	80013dcc 	andi	zero,r16,1271
80013ba0:	80013dcc 	andi	zero,r16,1271
80013ba4:	80013c84 	addi	zero,r16,1266
80013ba8:	80013dcc 	andi	zero,r16,1271
80013bac:	80013dcc 	andi	zero,r16,1271
80013bb0:	80014340 	call	88001434 <_gp+0x7fd06c0>
80013bb4:	80013dcc 	andi	zero,r16,1271
80013bb8:	80013dcc 	andi	zero,r16,1271
80013bbc:	80013dcc 	andi	zero,r16,1271
80013bc0:	80013dcc 	andi	zero,r16,1271
80013bc4:	80013dcc 	andi	zero,r16,1271
80013bc8:	80013dcc 	andi	zero,r16,1271
80013bcc:	80013dcc 	andi	zero,r16,1271
80013bd0:	80013dcc 	andi	zero,r16,1271
80013bd4:	80013dcc 	andi	zero,r16,1271
80013bd8:	80013dcc 	andi	zero,r16,1271
80013bdc:	80013f74 	orhi	zero,r16,1277
80013be0:	80013f38 	rdprs	zero,r16,1276
80013be4:	80014460 	cmpeqi	zero,r16,1297
80013be8:	80014460 	cmpeqi	zero,r16,1297
80013bec:	80014460 	cmpeqi	zero,r16,1297
80013bf0:	80013f2c 	andhi	zero,r16,1276
80013bf4:	80013f38 	rdprs	zero,r16,1276
80013bf8:	80013dcc 	andi	zero,r16,1271
80013bfc:	80013dcc 	andi	zero,r16,1271
80013c00:	80013f18 	cmpnei	zero,r16,1276
80013c04:	80013dcc 	andi	zero,r16,1271
80013c08:	80013edc 	xori	zero,r16,1275
80013c0c:	80013cec 	andhi	zero,r16,1267
80013c10:	80013e38 	rdprs	zero,r16,1272
80013c14:	80013e2c 	andhi	zero,r16,1272
80013c18:	80013dcc 	andi	zero,r16,1271
80013c1c:	80013e78 	rdprs	zero,r16,1273
80013c20:	80013dcc 	andi	zero,r16,1271
80013c24:	80013c88 	cmpgei	zero,r16,1266
80013c28:	80013dcc 	andi	zero,r16,1271
80013c2c:	80013dcc 	andi	zero,r16,1271
80013c30:	80013de4 	muli	zero,r16,1271
80013c34:	d9000417 	ldw	r4,16(sp)
80013c38:	b80b883a 	mov	r5,r23
80013c3c:	0015a200 	call	80015a20 <__swsetup_r>
80013c40:	1006581e 	bne	r2,zero,800155a4 <___vfprintf_internal_r+0x1c60>
80013c44:	b880030b 	ldhu	r2,12(r23)
80013c48:	1080068c 	andi	r2,r2,26
80013c4c:	10800298 	cmpnei	r2,r2,10
80013c50:	103f651e 	bne	r2,zero,800139e8 <_gp+0xfffe2c74>
80013c54:	b880038f 	ldh	r2,14(r23)
80013c58:	103f6316 	blt	r2,zero,800139e8 <_gp+0xfffe2c74>
80013c5c:	d9c00717 	ldw	r7,28(sp)
80013c60:	d9000417 	ldw	r4,16(sp)
80013c64:	800d883a 	mov	r6,r16
80013c68:	b80b883a 	mov	r5,r23
80013c6c:	00159100 	call	80015910 <__sbprintf>
80013c70:	d8800515 	stw	r2,20(sp)
80013c74:	0001a506 	br	8001430c <___vfprintf_internal_r+0x9c8>
80013c78:	d9000417 	ldw	r4,16(sp)
80013c7c:	0017a4c0 	call	80017a4c <__sinit>
80013c80:	003f4906 	br	800139a8 <_gp+0xfffe2c34>
80013c84:	5ac00414 	ori	r11,r11,16
80013c88:	5880080c 	andi	r2,r11,32
80013c8c:	10039f26 	beq	r2,zero,80014b0c <___vfprintf_internal_r+0x11c8>
80013c90:	d8c00717 	ldw	r3,28(sp)
80013c94:	00800044 	movi	r2,1
80013c98:	1c000017 	ldw	r16,0(r3)
80013c9c:	1d400117 	ldw	r21,4(r3)
80013ca0:	18c00204 	addi	r3,r3,8
80013ca4:	d8c00715 	stw	r3,28(sp)
80013ca8:	d8001445 	stb	zero,81(sp)
80013cac:	b0ffffe0 	cmpeqi	r3,r22,-1
80013cb0:	1800191e 	bne	r3,zero,80013d18 <___vfprintf_internal_r+0x3d4>
80013cb4:	0019883a 	mov	r12,zero
80013cb8:	053fdfc4 	movi	r20,-129
80013cbc:	8546b03a 	or	r3,r16,r21
80013cc0:	5d28703a 	and	r20,r11,r20
80013cc4:	1800161e 	bne	r3,zero,80013d20 <___vfprintf_internal_r+0x3dc>
80013cc8:	b0052a1e 	bne	r22,zero,80015174 <___vfprintf_internal_r+0x1830>
80013ccc:	10035e1e 	bne	r2,zero,80014a48 <___vfprintf_internal_r+0x1104>
80013cd0:	5c00004c 	andi	r16,r11,1
80013cd4:	8003ac26 	beq	r16,zero,80014b88 <___vfprintf_internal_r+0x1244>
80013cd8:	00800c04 	movi	r2,48
80013cdc:	d88027c5 	stb	r2,159(sp)
80013ce0:	dcc027c4 	addi	r19,sp,159
80013ce4:	00002306 	br	80013d74 <___vfprintf_internal_r+0x430>
80013ce8:	5ac00414 	ori	r11,r11,16
80013cec:	5880080c 	andi	r2,r11,32
80013cf0:	10037a26 	beq	r2,zero,80014adc <___vfprintf_internal_r+0x1198>
80013cf4:	d8c00717 	ldw	r3,28(sp)
80013cf8:	d8001445 	stb	zero,81(sp)
80013cfc:	0005883a 	mov	r2,zero
80013d00:	1c000017 	ldw	r16,0(r3)
80013d04:	1d400117 	ldw	r21,4(r3)
80013d08:	18c00204 	addi	r3,r3,8
80013d0c:	d8c00715 	stw	r3,28(sp)
80013d10:	b0ffffe0 	cmpeqi	r3,r22,-1
80013d14:	183fe726 	beq	r3,zero,80013cb4 <_gp+0xfffe2f40>
80013d18:	5829883a 	mov	r20,r11
80013d1c:	0019883a 	mov	r12,zero
80013d20:	10c00060 	cmpeqi	r3,r2,1
80013d24:	18021e1e 	bne	r3,zero,800145a0 <___vfprintf_internal_r+0xc5c>
80013d28:	108000a0 	cmpeqi	r2,r2,2
80013d2c:	1002fa1e 	bne	r2,zero,80014918 <___vfprintf_internal_r+0xfd4>
80013d30:	d8c02804 	addi	r3,sp,160
80013d34:	00000106 	br	80013d3c <___vfprintf_internal_r+0x3f8>
80013d38:	9807883a 	mov	r3,r19
80013d3c:	8008d0fa 	srli	r4,r16,3
80013d40:	a80a977a 	slli	r5,r21,29
80013d44:	a82ad0fa 	srli	r21,r21,3
80013d48:	840001cc 	andi	r16,r16,7
80013d4c:	80800c04 	addi	r2,r16,48
80013d50:	2920b03a 	or	r16,r5,r4
80013d54:	18bfffc5 	stb	r2,-1(r3)
80013d58:	8548b03a 	or	r4,r16,r21
80013d5c:	1cffffc4 	addi	r19,r3,-1
80013d60:	203ff51e 	bne	r4,zero,80013d38 <_gp+0xfffe2fc4>
80013d64:	a100004c 	andi	r4,r20,1
80013d68:	2003741e 	bne	r4,zero,80014b3c <___vfprintf_internal_r+0x11f8>
80013d6c:	d8802804 	addi	r2,sp,160
80013d70:	14e1c83a 	sub	r16,r2,r19
80013d74:	b02b883a 	mov	r21,r22
80013d78:	b400010e 	bge	r22,r16,80013d80 <___vfprintf_internal_r+0x43c>
80013d7c:	802b883a 	mov	r21,r16
80013d80:	d8000815 	stw	zero,32(sp)
80013d84:	60803fcc 	andi	r2,r12,255
80013d88:	1080201c 	xori	r2,r2,128
80013d8c:	10bfe004 	addi	r2,r2,-128
80013d90:	10008526 	beq	r2,zero,80013fa8 <___vfprintf_internal_r+0x664>
80013d94:	ad400044 	addi	r21,r21,1
80013d98:	00008306 	br	80013fa8 <___vfprintf_internal_r+0x664>
80013d9c:	0025883a 	mov	r18,zero
80013da0:	88bff404 	addi	r2,r17,-48
80013da4:	e7000044 	addi	fp,fp,1
80013da8:	948002a4 	muli	r18,r18,10
80013dac:	e47fffc7 	ldb	r17,-1(fp)
80013db0:	14a5883a 	add	r18,r2,r18
80013db4:	88bff404 	addi	r2,r17,-48
80013db8:	10c002b0 	cmpltui	r3,r2,10
80013dbc:	183ff91e 	bne	r3,zero,80013da4 <_gp+0xfffe3030>
80013dc0:	88bff804 	addi	r2,r17,-32
80013dc4:	10c01668 	cmpgeui	r3,r2,89
80013dc8:	183f3c26 	beq	r3,zero,80013abc <_gp+0xfffe2d48>
80013dcc:	21003fcc 	andi	r4,r4,255
80013dd0:	2006b91e 	bne	r4,zero,800158b8 <___vfprintf_internal_r+0x1f74>
80013dd4:	88014826 	beq	r17,zero,800142f8 <___vfprintf_internal_r+0x9b4>
80013dd8:	dc401e05 	stb	r17,120(sp)
80013ddc:	d8001445 	stb	zero,81(sp)
80013de0:	00006a06 	br	80013f8c <___vfprintf_internal_r+0x648>
80013de4:	21003fcc 	andi	r4,r4,255
80013de8:	2006bd1e 	bne	r4,zero,800158e0 <___vfprintf_internal_r+0x1f9c>
80013dec:	00a000b4 	movhi	r2,32770
80013df0:	109aa804 	addi	r2,r2,27296
80013df4:	d8800e15 	stw	r2,56(sp)
80013df8:	5880080c 	andi	r2,r11,32
80013dfc:	10015726 	beq	r2,zero,8001435c <___vfprintf_internal_r+0xa18>
80013e00:	d8800717 	ldw	r2,28(sp)
80013e04:	14000017 	ldw	r16,0(r2)
80013e08:	15400117 	ldw	r21,4(r2)
80013e0c:	10800204 	addi	r2,r2,8
80013e10:	d8800715 	stw	r2,28(sp)
80013e14:	5880004c 	andi	r2,r11,1
80013e18:	10000226 	beq	r2,zero,80013e24 <___vfprintf_internal_r+0x4e0>
80013e1c:	8544b03a 	or	r2,r16,r21
80013e20:	10035f1e 	bne	r2,zero,80014ba0 <___vfprintf_internal_r+0x125c>
80013e24:	00800084 	movi	r2,2
80013e28:	003f9f06 	br	80013ca8 <_gp+0xfffe2f34>
80013e2c:	5ac00814 	ori	r11,r11,32
80013e30:	e4400007 	ldb	r17,0(fp)
80013e34:	003f1d06 	br	80013aac <_gp+0xfffe2d38>
80013e38:	d8c00717 	ldw	r3,28(sp)
80013e3c:	00800c04 	movi	r2,48
80013e40:	d8801485 	stb	r2,82(sp)
80013e44:	00801e04 	movi	r2,120
80013e48:	012000b4 	movhi	r4,32770
80013e4c:	d88014c5 	stb	r2,83(sp)
80013e50:	18800104 	addi	r2,r3,4
80013e54:	d8800715 	stw	r2,28(sp)
80013e58:	209aa804 	addi	r2,r4,27296
80013e5c:	d8800e15 	stw	r2,56(sp)
80013e60:	1c000017 	ldw	r16,0(r3)
80013e64:	002b883a 	mov	r21,zero
80013e68:	5ac00094 	ori	r11,r11,2
80013e6c:	00800084 	movi	r2,2
80013e70:	04401e04 	movi	r17,120
80013e74:	003f8c06 	br	80013ca8 <_gp+0xfffe2f34>
80013e78:	d8800717 	ldw	r2,28(sp)
80013e7c:	d8001445 	stb	zero,81(sp)
80013e80:	14c00017 	ldw	r19,0(r2)
80013e84:	15000104 	addi	r20,r2,4
80013e88:	9803de26 	beq	r19,zero,80014e04 <___vfprintf_internal_r+0x14c0>
80013e8c:	da000715 	stw	r8,28(sp)
80013e90:	dac00615 	stw	r11,24(sp)
80013e94:	b0bfffe0 	cmpeqi	r2,r22,-1
80013e98:	1004e21e 	bne	r2,zero,80015224 <___vfprintf_internal_r+0x18e0>
80013e9c:	b00d883a 	mov	r6,r22
80013ea0:	000b883a 	mov	r5,zero
80013ea4:	9809883a 	mov	r4,r19
80013ea8:	00187d80 	call	800187d8 <memchr>
80013eac:	dac00617 	ldw	r11,24(sp)
80013eb0:	da000717 	ldw	r8,28(sp)
80013eb4:	1005b326 	beq	r2,zero,80015584 <___vfprintf_internal_r+0x1c40>
80013eb8:	14e1c83a 	sub	r16,r2,r19
80013ebc:	db001443 	ldbu	r12,81(sp)
80013ec0:	802b883a 	mov	r21,r16
80013ec4:	8004df16 	blt	r16,zero,80015244 <___vfprintf_internal_r+0x1900>
80013ec8:	dd000715 	stw	r20,28(sp)
80013ecc:	002d883a 	mov	r22,zero
80013ed0:	5829883a 	mov	r20,r11
80013ed4:	d8000815 	stw	zero,32(sp)
80013ed8:	003faa06 	br	80013d84 <_gp+0xfffe3010>
80013edc:	21003fcc 	andi	r4,r4,255
80013ee0:	2006791e 	bne	r4,zero,800158c8 <___vfprintf_internal_r+0x1f84>
80013ee4:	d9000717 	ldw	r4,28(sp)
80013ee8:	5880080c 	andi	r2,r11,32
80013eec:	20c00017 	ldw	r3,0(r4)
80013ef0:	21000104 	addi	r4,r4,4
80013ef4:	d9000715 	stw	r4,28(sp)
80013ef8:	10032f1e 	bne	r2,zero,80014bb8 <___vfprintf_internal_r+0x1274>
80013efc:	5880040c 	andi	r2,r11,16
80013f00:	1003e81e 	bne	r2,zero,80014ea4 <___vfprintf_internal_r+0x1560>
80013f04:	5ac0100c 	andi	r11,r11,64
80013f08:	5803e626 	beq	r11,zero,80014ea4 <___vfprintf_internal_r+0x1560>
80013f0c:	d8800517 	ldw	r2,20(sp)
80013f10:	1880000d 	sth	r2,0(r3)
80013f14:	003ec006 	br	80013a18 <_gp+0xfffe2ca4>
80013f18:	e4400007 	ldb	r17,0(fp)
80013f1c:	88801b18 	cmpnei	r2,r17,108
80013f20:	1003b126 	beq	r2,zero,80014de8 <___vfprintf_internal_r+0x14a4>
80013f24:	5ac00414 	ori	r11,r11,16
80013f28:	003ee006 	br	80013aac <_gp+0xfffe2d38>
80013f2c:	5ac01014 	ori	r11,r11,64
80013f30:	e4400007 	ldb	r17,0(fp)
80013f34:	003edd06 	br	80013aac <_gp+0xfffe2d38>
80013f38:	21003fcc 	andi	r4,r4,255
80013f3c:	2006661e 	bne	r4,zero,800158d8 <___vfprintf_internal_r+0x1f94>
80013f40:	5880080c 	andi	r2,r11,32
80013f44:	10017f26 	beq	r2,zero,80014544 <___vfprintf_internal_r+0xc00>
80013f48:	d8800717 	ldw	r2,28(sp)
80013f4c:	14000017 	ldw	r16,0(r2)
80013f50:	15400117 	ldw	r21,4(r2)
80013f54:	10800204 	addi	r2,r2,8
80013f58:	d8800715 	stw	r2,28(sp)
80013f5c:	a8018616 	blt	r21,zero,80014578 <___vfprintf_internal_r+0xc34>
80013f60:	b0bfffd8 	cmpnei	r2,r22,-1
80013f64:	db001443 	ldbu	r12,81(sp)
80013f68:	10018c26 	beq	r2,zero,8001459c <___vfprintf_internal_r+0xc58>
80013f6c:	00800044 	movi	r2,1
80013f70:	003f5106 	br	80013cb8 <_gp+0xfffe2f44>
80013f74:	d8c00717 	ldw	r3,28(sp)
80013f78:	d8001445 	stb	zero,81(sp)
80013f7c:	18800017 	ldw	r2,0(r3)
80013f80:	18c00104 	addi	r3,r3,4
80013f84:	d8c00715 	stw	r3,28(sp)
80013f88:	d8801e05 	stb	r2,120(sp)
80013f8c:	5829883a 	mov	r20,r11
80013f90:	05400044 	movi	r21,1
80013f94:	04000044 	movi	r16,1
80013f98:	002d883a 	mov	r22,zero
80013f9c:	d8000815 	stw	zero,32(sp)
80013fa0:	dcc01e04 	addi	r19,sp,120
80013fa4:	0005883a 	mov	r2,zero
80013fa8:	a300008c 	andi	r12,r20,2
80013fac:	60000126 	beq	r12,zero,80013fb4 <___vfprintf_internal_r+0x670>
80013fb0:	ad400084 	addi	r21,r21,2
80013fb4:	a2c0210c 	andi	r11,r20,132
80013fb8:	d8c01d17 	ldw	r3,116(sp)
80013fbc:	5800381e 	bne	r11,zero,800140a0 <___vfprintf_internal_r+0x75c>
80013fc0:	955bc83a 	sub	r13,r18,r21
80013fc4:	0340360e 	bge	zero,r13,800140a0 <___vfprintf_internal_r+0x75c>
80013fc8:	01e000b4 	movhi	r7,32770
80013fcc:	69000450 	cmplti	r4,r13,17
80013fd0:	39dad0c4 	addi	r7,r7,27459
80013fd4:	d8801c17 	ldw	r2,112(sp)
80013fd8:	2000271e 	bne	r4,zero,80014078 <___vfprintf_internal_r+0x734>
80013fdc:	dc401215 	stw	r17,72(sp)
80013fe0:	dc001315 	stw	r16,76(sp)
80013fe4:	03800404 	movi	r14,16
80013fe8:	db000d15 	stw	r12,52(sp)
80013fec:	dac01115 	stw	r11,68(sp)
80013ff0:	6821883a 	mov	r16,r13
80013ff4:	3823883a 	mov	r17,r7
80013ff8:	00000406 	br	8001400c <___vfprintf_internal_r+0x6c8>
80013ffc:	843ffc04 	addi	r16,r16,-16
80014000:	81000448 	cmpgei	r4,r16,17
80014004:	42000204 	addi	r8,r8,8
80014008:	20001526 	beq	r4,zero,80014060 <___vfprintf_internal_r+0x71c>
8001400c:	10800044 	addi	r2,r2,1
80014010:	18c00404 	addi	r3,r3,16
80014014:	44400015 	stw	r17,0(r8)
80014018:	43800115 	stw	r14,4(r8)
8001401c:	d8c01d15 	stw	r3,116(sp)
80014020:	d8801c15 	stw	r2,112(sp)
80014024:	11000208 	cmpgei	r4,r2,8
80014028:	203ff426 	beq	r4,zero,80013ffc <_gp+0xfffe3288>
8001402c:	d9000417 	ldw	r4,16(sp)
80014030:	d9801b04 	addi	r6,sp,108
80014034:	b80b883a 	mov	r5,r23
80014038:	db800615 	stw	r14,24(sp)
8001403c:	001cf080 	call	8001cf08 <__sprint_r>
80014040:	1000af1e 	bne	r2,zero,80014300 <___vfprintf_internal_r+0x9bc>
80014044:	843ffc04 	addi	r16,r16,-16
80014048:	81000448 	cmpgei	r4,r16,17
8001404c:	d8c01d17 	ldw	r3,116(sp)
80014050:	d8801c17 	ldw	r2,112(sp)
80014054:	da002804 	addi	r8,sp,160
80014058:	db800617 	ldw	r14,24(sp)
8001405c:	203feb1e 	bne	r4,zero,8001400c <_gp+0xfffe3298>
80014060:	801b883a 	mov	r13,r16
80014064:	880f883a 	mov	r7,r17
80014068:	db000d17 	ldw	r12,52(sp)
8001406c:	dac01117 	ldw	r11,68(sp)
80014070:	dc001317 	ldw	r16,76(sp)
80014074:	dc401217 	ldw	r17,72(sp)
80014078:	10800044 	addi	r2,r2,1
8001407c:	1b47883a 	add	r3,r3,r13
80014080:	d8801c15 	stw	r2,112(sp)
80014084:	41c00015 	stw	r7,0(r8)
80014088:	43400115 	stw	r13,4(r8)
8001408c:	d8c01d15 	stw	r3,116(sp)
80014090:	10800208 	cmpgei	r2,r2,8
80014094:	1003c01e 	bne	r2,zero,80014f98 <___vfprintf_internal_r+0x1654>
80014098:	d8801447 	ldb	r2,81(sp)
8001409c:	42000204 	addi	r8,r8,8
800140a0:	10000c26 	beq	r2,zero,800140d4 <___vfprintf_internal_r+0x790>
800140a4:	d8801c17 	ldw	r2,112(sp)
800140a8:	d9001444 	addi	r4,sp,81
800140ac:	18c00044 	addi	r3,r3,1
800140b0:	10800044 	addi	r2,r2,1
800140b4:	41000015 	stw	r4,0(r8)
800140b8:	01000044 	movi	r4,1
800140bc:	d8801c15 	stw	r2,112(sp)
800140c0:	41000115 	stw	r4,4(r8)
800140c4:	d8c01d15 	stw	r3,116(sp)
800140c8:	10800208 	cmpgei	r2,r2,8
800140cc:	1001fc1e 	bne	r2,zero,800148c0 <___vfprintf_internal_r+0xf7c>
800140d0:	42000204 	addi	r8,r8,8
800140d4:	60000c26 	beq	r12,zero,80014108 <___vfprintf_internal_r+0x7c4>
800140d8:	d8801c17 	ldw	r2,112(sp)
800140dc:	d9001484 	addi	r4,sp,82
800140e0:	18c00084 	addi	r3,r3,2
800140e4:	10800044 	addi	r2,r2,1
800140e8:	41000015 	stw	r4,0(r8)
800140ec:	01000084 	movi	r4,2
800140f0:	d8801c15 	stw	r2,112(sp)
800140f4:	41000115 	stw	r4,4(r8)
800140f8:	d8c01d15 	stw	r3,116(sp)
800140fc:	10800208 	cmpgei	r2,r2,8
80014100:	1001fb1e 	bne	r2,zero,800148f0 <___vfprintf_internal_r+0xfac>
80014104:	42000204 	addi	r8,r8,8
80014108:	5ac02018 	cmpnei	r11,r11,128
8001410c:	58014f26 	beq	r11,zero,8001464c <___vfprintf_internal_r+0xd08>
80014110:	b42dc83a 	sub	r22,r22,r16
80014114:	0580350e 	bge	zero,r22,800141ec <___vfprintf_internal_r+0x8a8>
80014118:	02e000b4 	movhi	r11,32770
8001411c:	b1000450 	cmplti	r4,r22,17
80014120:	5adaccc4 	addi	r11,r11,27443
80014124:	d8801c17 	ldw	r2,112(sp)
80014128:	2000271e 	bne	r4,zero,800141c8 <___vfprintf_internal_r+0x884>
8001412c:	a009883a 	mov	r4,r20
80014130:	dc400d15 	stw	r17,52(sp)
80014134:	8029883a 	mov	r20,r16
80014138:	02800404 	movi	r10,16
8001413c:	b021883a 	mov	r16,r22
80014140:	5823883a 	mov	r17,r11
80014144:	202d883a 	mov	r22,r4
80014148:	00000406 	br	8001415c <___vfprintf_internal_r+0x818>
8001414c:	843ffc04 	addi	r16,r16,-16
80014150:	81000448 	cmpgei	r4,r16,17
80014154:	42000204 	addi	r8,r8,8
80014158:	20001526 	beq	r4,zero,800141b0 <___vfprintf_internal_r+0x86c>
8001415c:	10800044 	addi	r2,r2,1
80014160:	18c00404 	addi	r3,r3,16
80014164:	44400015 	stw	r17,0(r8)
80014168:	42800115 	stw	r10,4(r8)
8001416c:	d8c01d15 	stw	r3,116(sp)
80014170:	d8801c15 	stw	r2,112(sp)
80014174:	11000208 	cmpgei	r4,r2,8
80014178:	203ff426 	beq	r4,zero,8001414c <_gp+0xfffe33d8>
8001417c:	d9000417 	ldw	r4,16(sp)
80014180:	d9801b04 	addi	r6,sp,108
80014184:	b80b883a 	mov	r5,r23
80014188:	da800615 	stw	r10,24(sp)
8001418c:	001cf080 	call	8001cf08 <__sprint_r>
80014190:	10005b1e 	bne	r2,zero,80014300 <___vfprintf_internal_r+0x9bc>
80014194:	843ffc04 	addi	r16,r16,-16
80014198:	81000448 	cmpgei	r4,r16,17
8001419c:	d8c01d17 	ldw	r3,116(sp)
800141a0:	d8801c17 	ldw	r2,112(sp)
800141a4:	da002804 	addi	r8,sp,160
800141a8:	da800617 	ldw	r10,24(sp)
800141ac:	203feb1e 	bne	r4,zero,8001415c <_gp+0xfffe33e8>
800141b0:	8817883a 	mov	r11,r17
800141b4:	dc400d17 	ldw	r17,52(sp)
800141b8:	b009883a 	mov	r4,r22
800141bc:	802d883a 	mov	r22,r16
800141c0:	a021883a 	mov	r16,r20
800141c4:	2029883a 	mov	r20,r4
800141c8:	10800044 	addi	r2,r2,1
800141cc:	1d87883a 	add	r3,r3,r22
800141d0:	d8801c15 	stw	r2,112(sp)
800141d4:	42c00015 	stw	r11,0(r8)
800141d8:	45800115 	stw	r22,4(r8)
800141dc:	d8c01d15 	stw	r3,116(sp)
800141e0:	10800208 	cmpgei	r2,r2,8
800141e4:	1001da1e 	bne	r2,zero,80014950 <___vfprintf_internal_r+0x100c>
800141e8:	42000204 	addi	r8,r8,8
800141ec:	a080400c 	andi	r2,r20,256
800141f0:	1000f61e 	bne	r2,zero,800145cc <___vfprintf_internal_r+0xc88>
800141f4:	d8801c17 	ldw	r2,112(sp)
800141f8:	1c07883a 	add	r3,r3,r16
800141fc:	44c00015 	stw	r19,0(r8)
80014200:	10800044 	addi	r2,r2,1
80014204:	44000115 	stw	r16,4(r8)
80014208:	d8801c15 	stw	r2,112(sp)
8001420c:	d8c01d15 	stw	r3,116(sp)
80014210:	10800208 	cmpgei	r2,r2,8
80014214:	10015a1e 	bne	r2,zero,80014780 <___vfprintf_internal_r+0xe3c>
80014218:	42000204 	addi	r8,r8,8
8001421c:	a500010c 	andi	r20,r20,4
80014220:	a0002b26 	beq	r20,zero,800142d0 <___vfprintf_internal_r+0x98c>
80014224:	9561c83a 	sub	r16,r18,r21
80014228:	0400290e 	bge	zero,r16,800142d0 <___vfprintf_internal_r+0x98c>
8001422c:	01e000b4 	movhi	r7,32770
80014230:	81000450 	cmplti	r4,r16,17
80014234:	39dad0c4 	addi	r7,r7,27459
80014238:	d8801c17 	ldw	r2,112(sp)
8001423c:	20001c1e 	bne	r4,zero,800142b0 <___vfprintf_internal_r+0x96c>
80014240:	04400404 	movi	r17,16
80014244:	dcc00417 	ldw	r19,16(sp)
80014248:	3829883a 	mov	r20,r7
8001424c:	00000406 	br	80014260 <___vfprintf_internal_r+0x91c>
80014250:	843ffc04 	addi	r16,r16,-16
80014254:	81000448 	cmpgei	r4,r16,17
80014258:	42000204 	addi	r8,r8,8
8001425c:	20001326 	beq	r4,zero,800142ac <___vfprintf_internal_r+0x968>
80014260:	10800044 	addi	r2,r2,1
80014264:	18c00404 	addi	r3,r3,16
80014268:	45000015 	stw	r20,0(r8)
8001426c:	44400115 	stw	r17,4(r8)
80014270:	d8c01d15 	stw	r3,116(sp)
80014274:	d8801c15 	stw	r2,112(sp)
80014278:	11000208 	cmpgei	r4,r2,8
8001427c:	203ff426 	beq	r4,zero,80014250 <_gp+0xfffe34dc>
80014280:	d9801b04 	addi	r6,sp,108
80014284:	b80b883a 	mov	r5,r23
80014288:	9809883a 	mov	r4,r19
8001428c:	001cf080 	call	8001cf08 <__sprint_r>
80014290:	10001b1e 	bne	r2,zero,80014300 <___vfprintf_internal_r+0x9bc>
80014294:	843ffc04 	addi	r16,r16,-16
80014298:	81000448 	cmpgei	r4,r16,17
8001429c:	d8c01d17 	ldw	r3,116(sp)
800142a0:	d8801c17 	ldw	r2,112(sp)
800142a4:	da002804 	addi	r8,sp,160
800142a8:	203fed1e 	bne	r4,zero,80014260 <_gp+0xfffe34ec>
800142ac:	a00f883a 	mov	r7,r20
800142b0:	10800044 	addi	r2,r2,1
800142b4:	1c07883a 	add	r3,r3,r16
800142b8:	d8801c15 	stw	r2,112(sp)
800142bc:	41c00015 	stw	r7,0(r8)
800142c0:	44000115 	stw	r16,4(r8)
800142c4:	d8c01d15 	stw	r3,116(sp)
800142c8:	10800210 	cmplti	r2,r2,8
800142cc:	10022726 	beq	r2,zero,80014b6c <___vfprintf_internal_r+0x1228>
800142d0:	9540010e 	bge	r18,r21,800142d8 <___vfprintf_internal_r+0x994>
800142d4:	a825883a 	mov	r18,r21
800142d8:	d8800517 	ldw	r2,20(sp)
800142dc:	1485883a 	add	r2,r2,r18
800142e0:	d8800515 	stw	r2,20(sp)
800142e4:	18010d1e 	bne	r3,zero,8001471c <___vfprintf_internal_r+0xdd8>
800142e8:	e0800007 	ldb	r2,0(fp)
800142ec:	d8001c15 	stw	zero,112(sp)
800142f0:	da002804 	addi	r8,sp,160
800142f4:	103dca1e 	bne	r2,zero,80013a20 <_gp+0xfffe2cac>
800142f8:	d8801d17 	ldw	r2,116(sp)
800142fc:	1003f81e 	bne	r2,zero,800152e0 <___vfprintf_internal_r+0x199c>
80014300:	b880030b 	ldhu	r2,12(r23)
80014304:	1080100c 	andi	r2,r2,64
80014308:	1004a61e 	bne	r2,zero,800155a4 <___vfprintf_internal_r+0x1c60>
8001430c:	d8800517 	ldw	r2,20(sp)
80014310:	dfc04117 	ldw	ra,260(sp)
80014314:	df004017 	ldw	fp,256(sp)
80014318:	ddc03f17 	ldw	r23,252(sp)
8001431c:	dd803e17 	ldw	r22,248(sp)
80014320:	dd403d17 	ldw	r21,244(sp)
80014324:	dd003c17 	ldw	r20,240(sp)
80014328:	dcc03b17 	ldw	r19,236(sp)
8001432c:	dc803a17 	ldw	r18,232(sp)
80014330:	dc403917 	ldw	r17,228(sp)
80014334:	dc003817 	ldw	r16,224(sp)
80014338:	dec04204 	addi	sp,sp,264
8001433c:	f800283a 	ret
80014340:	21003fcc 	andi	r4,r4,255
80014344:	2005681e 	bne	r4,zero,800158e8 <___vfprintf_internal_r+0x1fa4>
80014348:	00a000b4 	movhi	r2,32770
8001434c:	109aa304 	addi	r2,r2,27276
80014350:	d8800e15 	stw	r2,56(sp)
80014354:	5880080c 	andi	r2,r11,32
80014358:	103ea91e 	bne	r2,zero,80013e00 <_gp+0xfffe308c>
8001435c:	d8c00717 	ldw	r3,28(sp)
80014360:	5880040c 	andi	r2,r11,16
80014364:	1c000017 	ldw	r16,0(r3)
80014368:	18c00104 	addi	r3,r3,4
8001436c:	d8c00715 	stw	r3,28(sp)
80014370:	1002071e 	bne	r2,zero,80014b90 <___vfprintf_internal_r+0x124c>
80014374:	5880100c 	andi	r2,r11,64
80014378:	10020526 	beq	r2,zero,80014b90 <___vfprintf_internal_r+0x124c>
8001437c:	843fffcc 	andi	r16,r16,65535
80014380:	002b883a 	mov	r21,zero
80014384:	003ea306 	br	80013e14 <_gp+0xfffe30a0>
80014388:	01000044 	movi	r4,1
8001438c:	01400ac4 	movi	r5,43
80014390:	e4400007 	ldb	r17,0(fp)
80014394:	003dc506 	br	80013aac <_gp+0xfffe2d38>
80014398:	d8800717 	ldw	r2,28(sp)
8001439c:	e4400003 	ldbu	r17,0(fp)
800143a0:	14800017 	ldw	r18,0(r2)
800143a4:	10800104 	addi	r2,r2,4
800143a8:	90028116 	blt	r18,zero,80014db0 <___vfprintf_internal_r+0x146c>
800143ac:	d8800715 	stw	r2,28(sp)
800143b0:	8c403fcc 	andi	r17,r17,255
800143b4:	8c40201c 	xori	r17,r17,128
800143b8:	8c7fe004 	addi	r17,r17,-128
800143bc:	003dbb06 	br	80013aac <_gp+0xfffe2d38>
800143c0:	5ac00054 	ori	r11,r11,1
800143c4:	e4400007 	ldb	r17,0(fp)
800143c8:	003db806 	br	80013aac <_gp+0xfffe2d38>
800143cc:	28803fcc 	andi	r2,r5,255
800143d0:	1080201c 	xori	r2,r2,128
800143d4:	10bfe004 	addi	r2,r2,-128
800143d8:	e4400003 	ldbu	r17,0(fp)
800143dc:	103ff41e 	bne	r2,zero,800143b0 <_gp+0xfffe363c>
800143e0:	8c403fcc 	andi	r17,r17,255
800143e4:	8c40201c 	xori	r17,r17,128
800143e8:	01000044 	movi	r4,1
800143ec:	01400804 	movi	r5,32
800143f0:	8c7fe004 	addi	r17,r17,-128
800143f4:	003dad06 	br	80013aac <_gp+0xfffe2d38>
800143f8:	e4400007 	ldb	r17,0(fp)
800143fc:	e0c00044 	addi	r3,fp,1
80014400:	88800aa0 	cmpeqi	r2,r17,42
80014404:	10051c1e 	bne	r2,zero,80015878 <___vfprintf_internal_r+0x1f34>
80014408:	88bff404 	addi	r2,r17,-48
8001440c:	118002b0 	cmpltui	r6,r2,10
80014410:	1839883a 	mov	fp,r3
80014414:	002d883a 	mov	r22,zero
80014418:	303da526 	beq	r6,zero,80013ab0 <_gp+0xfffe2d3c>
8001441c:	e7000044 	addi	fp,fp,1
80014420:	b58002a4 	muli	r22,r22,10
80014424:	e47fffc7 	ldb	r17,-1(fp)
80014428:	b0ad883a 	add	r22,r22,r2
8001442c:	88bff404 	addi	r2,r17,-48
80014430:	10c002b0 	cmpltui	r3,r2,10
80014434:	183ff91e 	bne	r3,zero,8001441c <_gp+0xfffe36a8>
80014438:	003d9d06 	br	80013ab0 <_gp+0xfffe2d3c>
8001443c:	e4400003 	ldbu	r17,0(fp)
80014440:	8c403fcc 	andi	r17,r17,255
80014444:	8c40201c 	xori	r17,r17,128
80014448:	5ac00114 	ori	r11,r11,4
8001444c:	8c7fe004 	addi	r17,r17,-128
80014450:	003d9606 	br	80013aac <_gp+0xfffe2d38>
80014454:	5ac02014 	ori	r11,r11,128
80014458:	e4400007 	ldb	r17,0(fp)
8001445c:	003d9306 	br	80013aac <_gp+0xfffe2d38>
80014460:	21003fcc 	andi	r4,r4,255
80014464:	2005161e 	bne	r4,zero,800158c0 <___vfprintf_internal_r+0x1f7c>
80014468:	d8c00717 	ldw	r3,28(sp)
8001446c:	00a00034 	movhi	r2,32768
80014470:	10bfffc4 	addi	r2,r2,-1
80014474:	1d000117 	ldw	r20,4(r3)
80014478:	1cc00017 	ldw	r19,0(r3)
8001447c:	01dffc34 	movhi	r7,32752
80014480:	a0a0703a 	and	r16,r20,r2
80014484:	01bfffc4 	movi	r6,-1
80014488:	18800204 	addi	r2,r3,8
8001448c:	39ffffc4 	addi	r7,r7,-1
80014490:	9809883a 	mov	r4,r19
80014494:	800b883a 	mov	r5,r16
80014498:	da000815 	stw	r8,32(sp)
8001449c:	dac00615 	stw	r11,24(sp)
800144a0:	dd000b15 	stw	r20,44(sp)
800144a4:	dcc00a15 	stw	r19,40(sp)
800144a8:	d8800715 	stw	r2,28(sp)
800144ac:	001f7f40 	call	8001f7f4 <__unorddf2>
800144b0:	dac00617 	ldw	r11,24(sp)
800144b4:	da000817 	ldw	r8,32(sp)
800144b8:	1001c41e 	bne	r2,zero,80014bcc <___vfprintf_internal_r+0x1288>
800144bc:	01dffc34 	movhi	r7,32752
800144c0:	01bfffc4 	movi	r6,-1
800144c4:	39ffffc4 	addi	r7,r7,-1
800144c8:	9809883a 	mov	r4,r19
800144cc:	800b883a 	mov	r5,r16
800144d0:	001f7140 	call	8001f714 <__ledf2>
800144d4:	dac00617 	ldw	r11,24(sp)
800144d8:	da000817 	ldw	r8,32(sp)
800144dc:	0081bb0e 	bge	zero,r2,80014bcc <___vfprintf_internal_r+0x1288>
800144e0:	000d883a 	mov	r6,zero
800144e4:	000f883a 	mov	r7,zero
800144e8:	9809883a 	mov	r4,r19
800144ec:	a00b883a 	mov	r5,r20
800144f0:	001f7140 	call	8001f714 <__ledf2>
800144f4:	dac00617 	ldw	r11,24(sp)
800144f8:	da000817 	ldw	r8,32(sp)
800144fc:	1003db16 	blt	r2,zero,8001546c <___vfprintf_internal_r+0x1b28>
80014500:	db001443 	ldbu	r12,81(sp)
80014504:	88801208 	cmpgei	r2,r17,72
80014508:	1003431e 	bne	r2,zero,80015218 <___vfprintf_internal_r+0x18d4>
8001450c:	04e000b4 	movhi	r19,32770
80014510:	9cda9f04 	addi	r19,r19,27260
80014514:	053fdfc4 	movi	r20,-129
80014518:	5d28703a 	and	r20,r11,r20
8001451c:	054000c4 	movi	r21,3
80014520:	040000c4 	movi	r16,3
80014524:	002d883a 	mov	r22,zero
80014528:	d8000815 	stw	zero,32(sp)
8001452c:	003e1506 	br	80013d84 <_gp+0xfffe3010>
80014530:	21003fcc 	andi	r4,r4,255
80014534:	2004ee1e 	bne	r4,zero,800158f0 <___vfprintf_internal_r+0x1fac>
80014538:	5ac00414 	ori	r11,r11,16
8001453c:	5880080c 	andi	r2,r11,32
80014540:	103e811e 	bne	r2,zero,80013f48 <_gp+0xfffe31d4>
80014544:	d8c00717 	ldw	r3,28(sp)
80014548:	5880040c 	andi	r2,r11,16
8001454c:	1c000017 	ldw	r16,0(r3)
80014550:	18c00104 	addi	r3,r3,4
80014554:	d8c00715 	stw	r3,28(sp)
80014558:	10018f1e 	bne	r2,zero,80014b98 <___vfprintf_internal_r+0x1254>
8001455c:	5880100c 	andi	r2,r11,64
80014560:	10018d26 	beq	r2,zero,80014b98 <___vfprintf_internal_r+0x1254>
80014564:	843fffcc 	andi	r16,r16,65535
80014568:	8420001c 	xori	r16,r16,32768
8001456c:	84200004 	addi	r16,r16,-32768
80014570:	802bd7fa 	srai	r21,r16,31
80014574:	a83e7a0e 	bge	r21,zero,80013f60 <_gp+0xfffe31ec>
80014578:	0421c83a 	sub	r16,zero,r16
8001457c:	8004c03a 	cmpne	r2,r16,zero
80014580:	056bc83a 	sub	r21,zero,r21
80014584:	a8abc83a 	sub	r21,r21,r2
80014588:	00800b44 	movi	r2,45
8001458c:	d8801445 	stb	r2,81(sp)
80014590:	b0bfffd8 	cmpnei	r2,r22,-1
80014594:	03000b44 	movi	r12,45
80014598:	103e741e 	bne	r2,zero,80013f6c <_gp+0xfffe31f8>
8001459c:	5829883a 	mov	r20,r11
800145a0:	a802241e 	bne	r21,zero,80014e34 <___vfprintf_internal_r+0x14f0>
800145a4:	808002a8 	cmpgeui	r2,r16,10
800145a8:	1002221e 	bne	r2,zero,80014e34 <___vfprintf_internal_r+0x14f0>
800145ac:	84000c04 	addi	r16,r16,48
800145b0:	dc0027c5 	stb	r16,159(sp)
800145b4:	dcc027c4 	addi	r19,sp,159
800145b8:	04000044 	movi	r16,1
800145bc:	003ded06 	br	80013d74 <_gp+0xfffe3000>
800145c0:	5ac00214 	ori	r11,r11,8
800145c4:	e4400007 	ldb	r17,0(fp)
800145c8:	003d3806 	br	80013aac <_gp+0xfffe2d38>
800145cc:	8c401990 	cmplti	r17,r17,102
800145d0:	8800731e 	bne	r17,zero,800147a0 <___vfprintf_internal_r+0xe5c>
800145d4:	d9000a17 	ldw	r4,40(sp)
800145d8:	d9400b17 	ldw	r5,44(sp)
800145dc:	000d883a 	mov	r6,zero
800145e0:	000f883a 	mov	r7,zero
800145e4:	da000d15 	stw	r8,52(sp)
800145e8:	d8c00615 	stw	r3,24(sp)
800145ec:	001f6940 	call	8001f694 <__eqdf2>
800145f0:	d8c00617 	ldw	r3,24(sp)
800145f4:	da000d17 	ldw	r8,52(sp)
800145f8:	1000dd1e 	bne	r2,zero,80014970 <___vfprintf_internal_r+0x102c>
800145fc:	d8801c17 	ldw	r2,112(sp)
80014600:	012000b4 	movhi	r4,32770
80014604:	211aaf04 	addi	r4,r4,27324
80014608:	10800044 	addi	r2,r2,1
8001460c:	18c00044 	addi	r3,r3,1
80014610:	41000015 	stw	r4,0(r8)
80014614:	01000044 	movi	r4,1
80014618:	d8801c15 	stw	r2,112(sp)
8001461c:	41000115 	stw	r4,4(r8)
80014620:	d8c01d15 	stw	r3,116(sp)
80014624:	10800208 	cmpgei	r2,r2,8
80014628:	1001da1e 	bne	r2,zero,80014d94 <___vfprintf_internal_r+0x1450>
8001462c:	42000204 	addi	r8,r8,8
80014630:	d8801517 	ldw	r2,84(sp)
80014634:	d8c00917 	ldw	r3,36(sp)
80014638:	10c21d16 	blt	r2,r3,80014eb0 <___vfprintf_internal_r+0x156c>
8001463c:	a080004c 	andi	r2,r20,1
80014640:	10021b1e 	bne	r2,zero,80014eb0 <___vfprintf_internal_r+0x156c>
80014644:	d8c01d17 	ldw	r3,116(sp)
80014648:	003ef406 	br	8001421c <_gp+0xfffe34a8>
8001464c:	954fc83a 	sub	r7,r18,r21
80014650:	01feaf0e 	bge	zero,r7,80014110 <_gp+0xfffe339c>
80014654:	02e000b4 	movhi	r11,32770
80014658:	39000450 	cmplti	r4,r7,17
8001465c:	5adaccc4 	addi	r11,r11,27443
80014660:	d8801c17 	ldw	r2,112(sp)
80014664:	2000231e 	bne	r4,zero,800146f4 <___vfprintf_internal_r+0xdb0>
80014668:	dc400d15 	stw	r17,52(sp)
8001466c:	dc001115 	stw	r16,68(sp)
80014670:	03000404 	movi	r12,16
80014674:	3821883a 	mov	r16,r7
80014678:	5823883a 	mov	r17,r11
8001467c:	00000406 	br	80014690 <___vfprintf_internal_r+0xd4c>
80014680:	843ffc04 	addi	r16,r16,-16
80014684:	81000448 	cmpgei	r4,r16,17
80014688:	42000204 	addi	r8,r8,8
8001468c:	20001526 	beq	r4,zero,800146e4 <___vfprintf_internal_r+0xda0>
80014690:	10800044 	addi	r2,r2,1
80014694:	18c00404 	addi	r3,r3,16
80014698:	44400015 	stw	r17,0(r8)
8001469c:	43000115 	stw	r12,4(r8)
800146a0:	d8c01d15 	stw	r3,116(sp)
800146a4:	d8801c15 	stw	r2,112(sp)
800146a8:	11000208 	cmpgei	r4,r2,8
800146ac:	203ff426 	beq	r4,zero,80014680 <_gp+0xfffe390c>
800146b0:	d9000417 	ldw	r4,16(sp)
800146b4:	d9801b04 	addi	r6,sp,108
800146b8:	b80b883a 	mov	r5,r23
800146bc:	db000615 	stw	r12,24(sp)
800146c0:	001cf080 	call	8001cf08 <__sprint_r>
800146c4:	103f0e1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
800146c8:	843ffc04 	addi	r16,r16,-16
800146cc:	81000448 	cmpgei	r4,r16,17
800146d0:	d8c01d17 	ldw	r3,116(sp)
800146d4:	d8801c17 	ldw	r2,112(sp)
800146d8:	da002804 	addi	r8,sp,160
800146dc:	db000617 	ldw	r12,24(sp)
800146e0:	203feb1e 	bne	r4,zero,80014690 <_gp+0xfffe391c>
800146e4:	800f883a 	mov	r7,r16
800146e8:	8817883a 	mov	r11,r17
800146ec:	dc001117 	ldw	r16,68(sp)
800146f0:	dc400d17 	ldw	r17,52(sp)
800146f4:	10800044 	addi	r2,r2,1
800146f8:	19c7883a 	add	r3,r3,r7
800146fc:	d8801c15 	stw	r2,112(sp)
80014700:	42c00015 	stw	r11,0(r8)
80014704:	41c00115 	stw	r7,4(r8)
80014708:	d8c01d15 	stw	r3,116(sp)
8001470c:	10800208 	cmpgei	r2,r2,8
80014710:	1002a01e 	bne	r2,zero,80015194 <___vfprintf_internal_r+0x1850>
80014714:	42000204 	addi	r8,r8,8
80014718:	003e7d06 	br	80014110 <_gp+0xfffe339c>
8001471c:	d9000417 	ldw	r4,16(sp)
80014720:	d9801b04 	addi	r6,sp,108
80014724:	b80b883a 	mov	r5,r23
80014728:	001cf080 	call	8001cf08 <__sprint_r>
8001472c:	103eee26 	beq	r2,zero,800142e8 <_gp+0xfffe3574>
80014730:	003ef306 	br	80014300 <_gp+0xfffe358c>
80014734:	d9000417 	ldw	r4,16(sp)
80014738:	d9801b04 	addi	r6,sp,108
8001473c:	b80b883a 	mov	r5,r23
80014740:	001cf080 	call	8001cf08 <__sprint_r>
80014744:	103eee1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014748:	d9001517 	ldw	r4,84(sp)
8001474c:	d8c01d17 	ldw	r3,116(sp)
80014750:	d8801c17 	ldw	r2,112(sp)
80014754:	da002804 	addi	r8,sp,160
80014758:	2003a916 	blt	r4,zero,80015600 <___vfprintf_internal_r+0x1cbc>
8001475c:	d9000917 	ldw	r4,36(sp)
80014760:	10800044 	addi	r2,r2,1
80014764:	d8801c15 	stw	r2,112(sp)
80014768:	20c7883a 	add	r3,r4,r3
8001476c:	44c00015 	stw	r19,0(r8)
80014770:	41000115 	stw	r4,4(r8)
80014774:	d8c01d15 	stw	r3,116(sp)
80014778:	10800208 	cmpgei	r2,r2,8
8001477c:	103ea626 	beq	r2,zero,80014218 <_gp+0xfffe34a4>
80014780:	d9000417 	ldw	r4,16(sp)
80014784:	d9801b04 	addi	r6,sp,108
80014788:	b80b883a 	mov	r5,r23
8001478c:	001cf080 	call	8001cf08 <__sprint_r>
80014790:	103edb1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014794:	d8c01d17 	ldw	r3,116(sp)
80014798:	da002804 	addi	r8,sp,160
8001479c:	003e9f06 	br	8001421c <_gp+0xfffe34a8>
800147a0:	d8800917 	ldw	r2,36(sp)
800147a4:	da801c17 	ldw	r10,112(sp)
800147a8:	18c00044 	addi	r3,r3,1
800147ac:	10800088 	cmpgei	r2,r2,2
800147b0:	54000044 	addi	r16,r10,1
800147b4:	44400204 	addi	r17,r8,8
800147b8:	1001eb26 	beq	r2,zero,80014f68 <___vfprintf_internal_r+0x1624>
800147bc:	00800044 	movi	r2,1
800147c0:	40800115 	stw	r2,4(r8)
800147c4:	44c00015 	stw	r19,0(r8)
800147c8:	d8c01d15 	stw	r3,116(sp)
800147cc:	dc001c15 	stw	r16,112(sp)
800147d0:	80800210 	cmplti	r2,r16,8
800147d4:	10025526 	beq	r2,zero,8001512c <___vfprintf_internal_r+0x17e8>
800147d8:	d8800c17 	ldw	r2,48(sp)
800147dc:	d9000f17 	ldw	r4,60(sp)
800147e0:	84000044 	addi	r16,r16,1
800147e4:	1887883a 	add	r3,r3,r2
800147e8:	88800115 	stw	r2,4(r17)
800147ec:	89000015 	stw	r4,0(r17)
800147f0:	d8c01d15 	stw	r3,116(sp)
800147f4:	dc001c15 	stw	r16,112(sp)
800147f8:	80800208 	cmpgei	r2,r16,8
800147fc:	1002541e 	bne	r2,zero,80015150 <___vfprintf_internal_r+0x180c>
80014800:	8c400204 	addi	r17,r17,8
80014804:	d8800917 	ldw	r2,36(sp)
80014808:	d9000a17 	ldw	r4,40(sp)
8001480c:	d9400b17 	ldw	r5,44(sp)
80014810:	133fffc4 	addi	r12,r2,-1
80014814:	8a000204 	addi	r8,r17,8
80014818:	85800044 	addi	r22,r16,1
8001481c:	000d883a 	mov	r6,zero
80014820:	000f883a 	mov	r7,zero
80014824:	d8c01115 	stw	r3,68(sp)
80014828:	db000815 	stw	r12,32(sp)
8001482c:	da000615 	stw	r8,24(sp)
80014830:	dd800d15 	stw	r22,52(sp)
80014834:	001f6940 	call	8001f694 <__eqdf2>
80014838:	da000617 	ldw	r8,24(sp)
8001483c:	db000817 	ldw	r12,32(sp)
80014840:	db400d17 	ldw	r13,52(sp)
80014844:	d8c01117 	ldw	r3,68(sp)
80014848:	10008226 	beq	r2,zero,80014a54 <___vfprintf_internal_r+0x1110>
8001484c:	9cc00044 	addi	r19,r19,1
80014850:	1b07883a 	add	r3,r3,r12
80014854:	8cc00015 	stw	r19,0(r17)
80014858:	8b000115 	stw	r12,4(r17)
8001485c:	d8c01d15 	stw	r3,116(sp)
80014860:	dd801c15 	stw	r22,112(sp)
80014864:	b2800208 	cmpgei	r10,r22,8
80014868:	5001541e 	bne	r10,zero,80014dbc <___vfprintf_internal_r+0x1478>
8001486c:	88800404 	addi	r2,r17,16
80014870:	85800084 	addi	r22,r16,2
80014874:	4023883a 	mov	r17,r8
80014878:	1011883a 	mov	r8,r2
8001487c:	d9001017 	ldw	r4,64(sp)
80014880:	d8801744 	addi	r2,sp,93
80014884:	88800015 	stw	r2,0(r17)
80014888:	20c7883a 	add	r3,r4,r3
8001488c:	89000115 	stw	r4,4(r17)
80014890:	d8c01d15 	stw	r3,116(sp)
80014894:	dd801c15 	stw	r22,112(sp)
80014898:	b2800210 	cmplti	r10,r22,8
8001489c:	503e5f1e 	bne	r10,zero,8001421c <_gp+0xfffe34a8>
800148a0:	003fb706 	br	80014780 <_gp+0xfffe3a0c>
800148a4:	d9000417 	ldw	r4,16(sp)
800148a8:	d9801b04 	addi	r6,sp,108
800148ac:	b80b883a 	mov	r5,r23
800148b0:	001cf080 	call	8001cf08 <__sprint_r>
800148b4:	103e921e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
800148b8:	da002804 	addi	r8,sp,160
800148bc:	003c6e06 	br	80013a78 <_gp+0xfffe2d04>
800148c0:	d9000417 	ldw	r4,16(sp)
800148c4:	d9801b04 	addi	r6,sp,108
800148c8:	b80b883a 	mov	r5,r23
800148cc:	dac00d15 	stw	r11,52(sp)
800148d0:	db000615 	stw	r12,24(sp)
800148d4:	001cf080 	call	8001cf08 <__sprint_r>
800148d8:	103e891e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
800148dc:	d8c01d17 	ldw	r3,116(sp)
800148e0:	da002804 	addi	r8,sp,160
800148e4:	dac00d17 	ldw	r11,52(sp)
800148e8:	db000617 	ldw	r12,24(sp)
800148ec:	003df906 	br	800140d4 <_gp+0xfffe3360>
800148f0:	d9000417 	ldw	r4,16(sp)
800148f4:	d9801b04 	addi	r6,sp,108
800148f8:	b80b883a 	mov	r5,r23
800148fc:	dac00615 	stw	r11,24(sp)
80014900:	001cf080 	call	8001cf08 <__sprint_r>
80014904:	103e7e1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014908:	d8c01d17 	ldw	r3,116(sp)
8001490c:	da002804 	addi	r8,sp,160
80014910:	dac00617 	ldw	r11,24(sp)
80014914:	003dfc06 	br	80014108 <_gp+0xfffe3394>
80014918:	d9000e17 	ldw	r4,56(sp)
8001491c:	dcc02804 	addi	r19,sp,160
80014920:	808003cc 	andi	r2,r16,15
80014924:	a806973a 	slli	r3,r21,28
80014928:	2085883a 	add	r2,r4,r2
8001492c:	8020d13a 	srli	r16,r16,4
80014930:	10800003 	ldbu	r2,0(r2)
80014934:	a82ad13a 	srli	r21,r21,4
80014938:	9cffffc4 	addi	r19,r19,-1
8001493c:	1c20b03a 	or	r16,r3,r16
80014940:	98800005 	stb	r2,0(r19)
80014944:	8544b03a 	or	r2,r16,r21
80014948:	103ff51e 	bne	r2,zero,80014920 <_gp+0xfffe3bac>
8001494c:	003d0706 	br	80013d6c <_gp+0xfffe2ff8>
80014950:	d9000417 	ldw	r4,16(sp)
80014954:	d9801b04 	addi	r6,sp,108
80014958:	b80b883a 	mov	r5,r23
8001495c:	001cf080 	call	8001cf08 <__sprint_r>
80014960:	103e671e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014964:	d8c01d17 	ldw	r3,116(sp)
80014968:	da002804 	addi	r8,sp,160
8001496c:	003e1f06 	br	800141ec <_gp+0xfffe3478>
80014970:	d9001517 	ldw	r4,84(sp)
80014974:	0100ea0e 	bge	zero,r4,80014d20 <___vfprintf_internal_r+0x13dc>
80014978:	d8800817 	ldw	r2,32(sp)
8001497c:	d9000917 	ldw	r4,36(sp)
80014980:	1021883a 	mov	r16,r2
80014984:	2080010e 	bge	r4,r2,8001498c <___vfprintf_internal_r+0x1048>
80014988:	2021883a 	mov	r16,r4
8001498c:	04000a0e 	bge	zero,r16,800149b8 <___vfprintf_internal_r+0x1074>
80014990:	d8801c17 	ldw	r2,112(sp)
80014994:	1c07883a 	add	r3,r3,r16
80014998:	44c00015 	stw	r19,0(r8)
8001499c:	10800044 	addi	r2,r2,1
800149a0:	d8801c15 	stw	r2,112(sp)
800149a4:	44000115 	stw	r16,4(r8)
800149a8:	d8c01d15 	stw	r3,116(sp)
800149ac:	10800208 	cmpgei	r2,r2,8
800149b0:	1002a61e 	bne	r2,zero,8001544c <___vfprintf_internal_r+0x1b08>
800149b4:	42000204 	addi	r8,r8,8
800149b8:	8000010e 	bge	r16,zero,800149c0 <___vfprintf_internal_r+0x107c>
800149bc:	0021883a 	mov	r16,zero
800149c0:	d8800817 	ldw	r2,32(sp)
800149c4:	1421c83a 	sub	r16,r2,r16
800149c8:	0401910e 	bge	zero,r16,80015010 <___vfprintf_internal_r+0x16cc>
800149cc:	02e000b4 	movhi	r11,32770
800149d0:	81000450 	cmplti	r4,r16,17
800149d4:	5adaccc4 	addi	r11,r11,27443
800149d8:	d8801c17 	ldw	r2,112(sp)
800149dc:	20017d1e 	bne	r4,zero,80014fd4 <___vfprintf_internal_r+0x1690>
800149e0:	dc800615 	stw	r18,24(sp)
800149e4:	04400404 	movi	r17,16
800149e8:	dd800417 	ldw	r22,16(sp)
800149ec:	5825883a 	mov	r18,r11
800149f0:	00000406 	br	80014a04 <___vfprintf_internal_r+0x10c0>
800149f4:	42000204 	addi	r8,r8,8
800149f8:	843ffc04 	addi	r16,r16,-16
800149fc:	81000448 	cmpgei	r4,r16,17
80014a00:	20017226 	beq	r4,zero,80014fcc <___vfprintf_internal_r+0x1688>
80014a04:	10800044 	addi	r2,r2,1
80014a08:	18c00404 	addi	r3,r3,16
80014a0c:	44800015 	stw	r18,0(r8)
80014a10:	44400115 	stw	r17,4(r8)
80014a14:	d8c01d15 	stw	r3,116(sp)
80014a18:	d8801c15 	stw	r2,112(sp)
80014a1c:	11000208 	cmpgei	r4,r2,8
80014a20:	203ff426 	beq	r4,zero,800149f4 <_gp+0xfffe3c80>
80014a24:	d9801b04 	addi	r6,sp,108
80014a28:	b80b883a 	mov	r5,r23
80014a2c:	b009883a 	mov	r4,r22
80014a30:	001cf080 	call	8001cf08 <__sprint_r>
80014a34:	103e321e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014a38:	d8c01d17 	ldw	r3,116(sp)
80014a3c:	d8801c17 	ldw	r2,112(sp)
80014a40:	da002804 	addi	r8,sp,160
80014a44:	003fec06 	br	800149f8 <_gp+0xfffe3c84>
80014a48:	0021883a 	mov	r16,zero
80014a4c:	dcc02804 	addi	r19,sp,160
80014a50:	003cc806 	br	80013d74 <_gp+0xfffe3000>
80014a54:	033f890e 	bge	zero,r12,8001487c <_gp+0xfffe3b08>
80014a58:	60800450 	cmplti	r2,r12,17
80014a5c:	02e000b4 	movhi	r11,32770
80014a60:	10036c1e 	bne	r2,zero,80015814 <___vfprintf_internal_r+0x1ed0>
80014a64:	5adaccc4 	addi	r11,r11,27443
80014a68:	dc800615 	stw	r18,24(sp)
80014a6c:	dd000815 	stw	r20,32(sp)
80014a70:	04c00404 	movi	r19,16
80014a74:	6025883a 	mov	r18,r12
80014a78:	dd800417 	ldw	r22,16(sp)
80014a7c:	6821883a 	mov	r16,r13
80014a80:	5829883a 	mov	r20,r11
80014a84:	00000506 	br	80014a9c <___vfprintf_internal_r+0x1158>
80014a88:	8c400204 	addi	r17,r17,8
80014a8c:	94bffc04 	addi	r18,r18,-16
80014a90:	90800448 	cmpgei	r2,r18,17
80014a94:	1001c726 	beq	r2,zero,800151b4 <___vfprintf_internal_r+0x1870>
80014a98:	84000044 	addi	r16,r16,1
80014a9c:	18c00404 	addi	r3,r3,16
80014aa0:	8d000015 	stw	r20,0(r17)
80014aa4:	8cc00115 	stw	r19,4(r17)
80014aa8:	d8c01d15 	stw	r3,116(sp)
80014aac:	dc001c15 	stw	r16,112(sp)
80014ab0:	80800208 	cmpgei	r2,r16,8
80014ab4:	103ff426 	beq	r2,zero,80014a88 <_gp+0xfffe3d14>
80014ab8:	d9801b04 	addi	r6,sp,108
80014abc:	b80b883a 	mov	r5,r23
80014ac0:	b009883a 	mov	r4,r22
80014ac4:	001cf080 	call	8001cf08 <__sprint_r>
80014ac8:	103e0d1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014acc:	dc001c17 	ldw	r16,112(sp)
80014ad0:	d8c01d17 	ldw	r3,116(sp)
80014ad4:	dc402804 	addi	r17,sp,160
80014ad8:	003fec06 	br	80014a8c <_gp+0xfffe3d18>
80014adc:	d8c00717 	ldw	r3,28(sp)
80014ae0:	5880040c 	andi	r2,r11,16
80014ae4:	1c000017 	ldw	r16,0(r3)
80014ae8:	18c00104 	addi	r3,r3,4
80014aec:	d8c00715 	stw	r3,28(sp)
80014af0:	1000031e 	bne	r2,zero,80014b00 <___vfprintf_internal_r+0x11bc>
80014af4:	5880100c 	andi	r2,r11,64
80014af8:	10000126 	beq	r2,zero,80014b00 <___vfprintf_internal_r+0x11bc>
80014afc:	843fffcc 	andi	r16,r16,65535
80014b00:	002b883a 	mov	r21,zero
80014b04:	0005883a 	mov	r2,zero
80014b08:	003c6706 	br	80013ca8 <_gp+0xfffe2f34>
80014b0c:	d8c00717 	ldw	r3,28(sp)
80014b10:	5880040c 	andi	r2,r11,16
80014b14:	1c000017 	ldw	r16,0(r3)
80014b18:	18c00104 	addi	r3,r3,4
80014b1c:	d8c00715 	stw	r3,28(sp)
80014b20:	1000031e 	bne	r2,zero,80014b30 <___vfprintf_internal_r+0x11ec>
80014b24:	5880100c 	andi	r2,r11,64
80014b28:	10000126 	beq	r2,zero,80014b30 <___vfprintf_internal_r+0x11ec>
80014b2c:	843fffcc 	andi	r16,r16,65535
80014b30:	002b883a 	mov	r21,zero
80014b34:	00800044 	movi	r2,1
80014b38:	003c5b06 	br	80013ca8 <_gp+0xfffe2f34>
80014b3c:	10803fcc 	andi	r2,r2,255
80014b40:	1080201c 	xori	r2,r2,128
80014b44:	10bfe004 	addi	r2,r2,-128
80014b48:	10800c18 	cmpnei	r2,r2,48
80014b4c:	103c8726 	beq	r2,zero,80013d6c <_gp+0xfffe2ff8>
80014b50:	00800c04 	movi	r2,48
80014b54:	18ffff84 	addi	r3,r3,-2
80014b58:	98bfffc5 	stb	r2,-1(r19)
80014b5c:	d8802804 	addi	r2,sp,160
80014b60:	10e1c83a 	sub	r16,r2,r3
80014b64:	1827883a 	mov	r19,r3
80014b68:	003c8206 	br	80013d74 <_gp+0xfffe3000>
80014b6c:	d9000417 	ldw	r4,16(sp)
80014b70:	d9801b04 	addi	r6,sp,108
80014b74:	b80b883a 	mov	r5,r23
80014b78:	001cf080 	call	8001cf08 <__sprint_r>
80014b7c:	103de01e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014b80:	d8c01d17 	ldw	r3,116(sp)
80014b84:	003dd206 	br	800142d0 <_gp+0xfffe355c>
80014b88:	dcc02804 	addi	r19,sp,160
80014b8c:	003c7906 	br	80013d74 <_gp+0xfffe3000>
80014b90:	002b883a 	mov	r21,zero
80014b94:	003c9f06 	br	80013e14 <_gp+0xfffe30a0>
80014b98:	802bd7fa 	srai	r21,r16,31
80014b9c:	003cef06 	br	80013f5c <_gp+0xfffe31e8>
80014ba0:	00800c04 	movi	r2,48
80014ba4:	d8801485 	stb	r2,82(sp)
80014ba8:	dc4014c5 	stb	r17,83(sp)
80014bac:	5ac00094 	ori	r11,r11,2
80014bb0:	00800084 	movi	r2,2
80014bb4:	003c3c06 	br	80013ca8 <_gp+0xfffe2f34>
80014bb8:	d9000517 	ldw	r4,20(sp)
80014bbc:	2005d7fa 	srai	r2,r4,31
80014bc0:	19000015 	stw	r4,0(r3)
80014bc4:	18800115 	stw	r2,4(r3)
80014bc8:	003b9306 	br	80013a18 <_gp+0xfffe2ca4>
80014bcc:	d9000a17 	ldw	r4,40(sp)
80014bd0:	d9400b17 	ldw	r5,44(sp)
80014bd4:	da000815 	stw	r8,32(sp)
80014bd8:	200d883a 	mov	r6,r4
80014bdc:	280f883a 	mov	r7,r5
80014be0:	dac00615 	stw	r11,24(sp)
80014be4:	001f7f40 	call	8001f7f4 <__unorddf2>
80014be8:	dac00617 	ldw	r11,24(sp)
80014bec:	da000817 	ldw	r8,32(sp)
80014bf0:	1002e91e 	bne	r2,zero,80015798 <___vfprintf_internal_r+0x1e54>
80014bf4:	00fff7c4 	movi	r3,-33
80014bf8:	b0bfffe0 	cmpeqi	r2,r22,-1
80014bfc:	88ea703a 	and	r21,r17,r3
80014c00:	1002531e 	bne	r2,zero,80015550 <___vfprintf_internal_r+0x1c0c>
80014c04:	a88011d8 	cmpnei	r2,r21,71
80014c08:	1001ba26 	beq	r2,zero,800152f4 <___vfprintf_internal_r+0x19b0>
80014c0c:	d8800b17 	ldw	r2,44(sp)
80014c10:	5d004014 	ori	r20,r11,256
80014c14:	10022b16 	blt	r2,zero,800154c4 <___vfprintf_internal_r+0x1b80>
80014c18:	d8c00b17 	ldw	r3,44(sp)
80014c1c:	d8000605 	stb	zero,24(sp)
80014c20:	888019a0 	cmpeqi	r2,r17,102
80014c24:	d8800d15 	stw	r2,52(sp)
80014c28:	1002331e 	bne	r2,zero,800154f8 <___vfprintf_internal_r+0x1bb4>
80014c2c:	8b4011a0 	cmpeqi	r13,r17,70
80014c30:	68018d1e 	bne	r13,zero,80015268 <___vfprintf_internal_r+0x1924>
80014c34:	a8801158 	cmpnei	r2,r21,69
80014c38:	1001b126 	beq	r2,zero,80015300 <___vfprintf_internal_r+0x19bc>
80014c3c:	d8801904 	addi	r2,sp,100
80014c40:	d8800315 	stw	r2,12(sp)
80014c44:	d9400a17 	ldw	r5,40(sp)
80014c48:	d8801604 	addi	r2,sp,88
80014c4c:	d9000417 	ldw	r4,16(sp)
80014c50:	d8800215 	stw	r2,8(sp)
80014c54:	d8801504 	addi	r2,sp,84
80014c58:	180d883a 	mov	r6,r3
80014c5c:	d8800115 	stw	r2,4(sp)
80014c60:	dd800015 	stw	r22,0(sp)
80014c64:	01c00084 	movi	r7,2
80014c68:	da001215 	stw	r8,72(sp)
80014c6c:	db401115 	stw	r13,68(sp)
80014c70:	dac00915 	stw	r11,36(sp)
80014c74:	d8c00815 	stw	r3,32(sp)
80014c78:	0015de40 	call	80015de4 <_dtoa_r>
80014c7c:	1027883a 	mov	r19,r2
80014c80:	888019d8 	cmpnei	r2,r17,103
80014c84:	d8c00817 	ldw	r3,32(sp)
80014c88:	dac00917 	ldw	r11,36(sp)
80014c8c:	db401117 	ldw	r13,68(sp)
80014c90:	da001217 	ldw	r8,72(sp)
80014c94:	10030e1e 	bne	r2,zero,800158d0 <___vfprintf_internal_r+0x1f8c>
80014c98:	5880004c 	andi	r2,r11,1
80014c9c:	10025026 	beq	r2,zero,800155e0 <___vfprintf_internal_r+0x1c9c>
80014ca0:	9da1883a 	add	r16,r19,r22
80014ca4:	d9000a17 	ldw	r4,40(sp)
80014ca8:	000d883a 	mov	r6,zero
80014cac:	000f883a 	mov	r7,zero
80014cb0:	180b883a 	mov	r5,r3
80014cb4:	da000915 	stw	r8,36(sp)
80014cb8:	dac00815 	stw	r11,32(sp)
80014cbc:	001f6940 	call	8001f694 <__eqdf2>
80014cc0:	dac00817 	ldw	r11,32(sp)
80014cc4:	da000917 	ldw	r8,36(sp)
80014cc8:	1001f51e 	bne	r2,zero,800154a0 <___vfprintf_internal_r+0x1b5c>
80014ccc:	8005883a 	mov	r2,r16
80014cd0:	14c5c83a 	sub	r2,r2,r19
80014cd4:	d8800915 	stw	r2,36(sp)
80014cd8:	d8801517 	ldw	r2,84(sp)
80014cdc:	a8c011d8 	cmpnei	r3,r21,71
80014ce0:	d8800815 	stw	r2,32(sp)
80014ce4:	1801a726 	beq	r3,zero,80015384 <___vfprintf_internal_r+0x1a40>
80014ce8:	d8800d17 	ldw	r2,52(sp)
80014cec:	1001aa26 	beq	r2,zero,80015398 <___vfprintf_internal_r+0x1a54>
80014cf0:	d8800817 	ldw	r2,32(sp)
80014cf4:	0082c10e 	bge	zero,r2,800157fc <___vfprintf_internal_r+0x1eb8>
80014cf8:	b002b61e 	bne	r22,zero,800157d4 <___vfprintf_internal_r+0x1e90>
80014cfc:	5ac0004c 	andi	r11,r11,1
80014d00:	5802b41e 	bne	r11,zero,800157d4 <___vfprintf_internal_r+0x1e90>
80014d04:	dc000817 	ldw	r16,32(sp)
80014d08:	802b883a 	mov	r21,r16
80014d0c:	d8800607 	ldb	r2,24(sp)
80014d10:	1001bd1e 	bne	r2,zero,80015408 <___vfprintf_internal_r+0x1ac4>
80014d14:	db001443 	ldbu	r12,81(sp)
80014d18:	002d883a 	mov	r22,zero
80014d1c:	003c1906 	br	80013d84 <_gp+0xfffe3010>
80014d20:	d8801c17 	ldw	r2,112(sp)
80014d24:	016000b4 	movhi	r5,32770
80014d28:	295aaf04 	addi	r5,r5,27324
80014d2c:	10800044 	addi	r2,r2,1
80014d30:	18c00044 	addi	r3,r3,1
80014d34:	41400015 	stw	r5,0(r8)
80014d38:	01400044 	movi	r5,1
80014d3c:	d8801c15 	stw	r2,112(sp)
80014d40:	41400115 	stw	r5,4(r8)
80014d44:	d8c01d15 	stw	r3,116(sp)
80014d48:	10800208 	cmpgei	r2,r2,8
80014d4c:	1001e11e 	bne	r2,zero,800154d4 <___vfprintf_internal_r+0x1b90>
80014d50:	42000204 	addi	r8,r8,8
80014d54:	2000021e 	bne	r4,zero,80014d60 <___vfprintf_internal_r+0x141c>
80014d58:	d8800917 	ldw	r2,36(sp)
80014d5c:	10013f26 	beq	r2,zero,8001525c <___vfprintf_internal_r+0x1918>
80014d60:	d8800f17 	ldw	r2,60(sp)
80014d64:	d9400c17 	ldw	r5,48(sp)
80014d68:	40800015 	stw	r2,0(r8)
80014d6c:	d8801c17 	ldw	r2,112(sp)
80014d70:	28c7883a 	add	r3,r5,r3
80014d74:	41400115 	stw	r5,4(r8)
80014d78:	10800044 	addi	r2,r2,1
80014d7c:	d8c01d15 	stw	r3,116(sp)
80014d80:	d8801c15 	stw	r2,112(sp)
80014d84:	11400208 	cmpgei	r5,r2,8
80014d88:	283e6a1e 	bne	r5,zero,80014734 <_gp+0xfffe39c0>
80014d8c:	42000204 	addi	r8,r8,8
80014d90:	003e7106 	br	80014758 <_gp+0xfffe39e4>
80014d94:	d9000417 	ldw	r4,16(sp)
80014d98:	d9801b04 	addi	r6,sp,108
80014d9c:	b80b883a 	mov	r5,r23
80014da0:	001cf080 	call	8001cf08 <__sprint_r>
80014da4:	103d561e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014da8:	da002804 	addi	r8,sp,160
80014dac:	003e2006 	br	80014630 <_gp+0xfffe38bc>
80014db0:	04a5c83a 	sub	r18,zero,r18
80014db4:	d8800715 	stw	r2,28(sp)
80014db8:	003da106 	br	80014440 <_gp+0xfffe36cc>
80014dbc:	d9000417 	ldw	r4,16(sp)
80014dc0:	d9801b04 	addi	r6,sp,108
80014dc4:	b80b883a 	mov	r5,r23
80014dc8:	001cf080 	call	8001cf08 <__sprint_r>
80014dcc:	103d4c1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014dd0:	da801c17 	ldw	r10,112(sp)
80014dd4:	d8c01d17 	ldw	r3,116(sp)
80014dd8:	da002a04 	addi	r8,sp,168
80014ddc:	55800044 	addi	r22,r10,1
80014de0:	dc402804 	addi	r17,sp,160
80014de4:	003ea506 	br	8001487c <_gp+0xfffe3b08>
80014de8:	e4400043 	ldbu	r17,1(fp)
80014dec:	5ac00814 	ori	r11,r11,32
80014df0:	e7000044 	addi	fp,fp,1
80014df4:	8c403fcc 	andi	r17,r17,255
80014df8:	8c40201c 	xori	r17,r17,128
80014dfc:	8c7fe004 	addi	r17,r17,-128
80014e00:	003b2a06 	br	80013aac <_gp+0xfffe2d38>
80014e04:	b08001f0 	cmpltui	r2,r22,7
80014e08:	b02b883a 	mov	r21,r22
80014e0c:	10011126 	beq	r2,zero,80015254 <___vfprintf_internal_r+0x1910>
80014e10:	04e000b4 	movhi	r19,32770
80014e14:	dd000715 	stw	r20,28(sp)
80014e18:	a821883a 	mov	r16,r21
80014e1c:	5829883a 	mov	r20,r11
80014e20:	002d883a 	mov	r22,zero
80014e24:	d8000815 	stw	zero,32(sp)
80014e28:	9cdaad04 	addi	r19,r19,27316
80014e2c:	0005883a 	mov	r2,zero
80014e30:	003c5d06 	br	80013fa8 <_gp+0xfffe3234>
80014e34:	dc400615 	stw	r17,24(sp)
80014e38:	dcc02804 	addi	r19,sp,160
80014e3c:	a823883a 	mov	r17,r21
80014e40:	da000815 	stw	r8,32(sp)
80014e44:	602b883a 	mov	r21,r12
80014e48:	8009883a 	mov	r4,r16
80014e4c:	880b883a 	mov	r5,r17
80014e50:	01800284 	movi	r6,10
80014e54:	000f883a 	mov	r7,zero
80014e58:	000cf340 	call	8000cf34 <__umoddi3>
80014e5c:	10800c04 	addi	r2,r2,48
80014e60:	9cffffc4 	addi	r19,r19,-1
80014e64:	8009883a 	mov	r4,r16
80014e68:	880b883a 	mov	r5,r17
80014e6c:	98800005 	stb	r2,0(r19)
80014e70:	01800284 	movi	r6,10
80014e74:	000f883a 	mov	r7,zero
80014e78:	000c99c0 	call	8000c99c <__udivdi3>
80014e7c:	1021883a 	mov	r16,r2
80014e80:	10c4b03a 	or	r2,r2,r3
80014e84:	1823883a 	mov	r17,r3
80014e88:	103fef1e 	bne	r2,zero,80014e48 <_gp+0xfffe40d4>
80014e8c:	d8802804 	addi	r2,sp,160
80014e90:	dc400617 	ldw	r17,24(sp)
80014e94:	da000817 	ldw	r8,32(sp)
80014e98:	a819883a 	mov	r12,r21
80014e9c:	14e1c83a 	sub	r16,r2,r19
80014ea0:	003bb406 	br	80013d74 <_gp+0xfffe3000>
80014ea4:	d8800517 	ldw	r2,20(sp)
80014ea8:	18800015 	stw	r2,0(r3)
80014eac:	003ada06 	br	80013a18 <_gp+0xfffe2ca4>
80014eb0:	d8800f17 	ldw	r2,60(sp)
80014eb4:	d8c01d17 	ldw	r3,116(sp)
80014eb8:	d9000c17 	ldw	r4,48(sp)
80014ebc:	40800015 	stw	r2,0(r8)
80014ec0:	d8801c17 	ldw	r2,112(sp)
80014ec4:	20c7883a 	add	r3,r4,r3
80014ec8:	41000115 	stw	r4,4(r8)
80014ecc:	10800044 	addi	r2,r2,1
80014ed0:	d8801c15 	stw	r2,112(sp)
80014ed4:	d8c01d15 	stw	r3,116(sp)
80014ed8:	10800208 	cmpgei	r2,r2,8
80014edc:	1000c61e 	bne	r2,zero,800151f8 <___vfprintf_internal_r+0x18b4>
80014ee0:	42000204 	addi	r8,r8,8
80014ee4:	d8800917 	ldw	r2,36(sp)
80014ee8:	143fffc4 	addi	r16,r2,-1
80014eec:	043ccb0e 	bge	zero,r16,8001421c <_gp+0xfffe34a8>
80014ef0:	02e000b4 	movhi	r11,32770
80014ef4:	81000450 	cmplti	r4,r16,17
80014ef8:	5adaccc4 	addi	r11,r11,27443
80014efc:	d8801c17 	ldw	r2,112(sp)
80014f00:	2000a01e 	bne	r4,zero,80015184 <___vfprintf_internal_r+0x1840>
80014f04:	04400404 	movi	r17,16
80014f08:	dcc00417 	ldw	r19,16(sp)
80014f0c:	582d883a 	mov	r22,r11
80014f10:	00000406 	br	80014f24 <___vfprintf_internal_r+0x15e0>
80014f14:	42000204 	addi	r8,r8,8
80014f18:	843ffc04 	addi	r16,r16,-16
80014f1c:	81000448 	cmpgei	r4,r16,17
80014f20:	20009726 	beq	r4,zero,80015180 <___vfprintf_internal_r+0x183c>
80014f24:	10800044 	addi	r2,r2,1
80014f28:	18c00404 	addi	r3,r3,16
80014f2c:	45800015 	stw	r22,0(r8)
80014f30:	44400115 	stw	r17,4(r8)
80014f34:	d8c01d15 	stw	r3,116(sp)
80014f38:	d8801c15 	stw	r2,112(sp)
80014f3c:	11000208 	cmpgei	r4,r2,8
80014f40:	203ff426 	beq	r4,zero,80014f14 <_gp+0xfffe41a0>
80014f44:	d9801b04 	addi	r6,sp,108
80014f48:	b80b883a 	mov	r5,r23
80014f4c:	9809883a 	mov	r4,r19
80014f50:	001cf080 	call	8001cf08 <__sprint_r>
80014f54:	103cea1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014f58:	d8c01d17 	ldw	r3,116(sp)
80014f5c:	d8801c17 	ldw	r2,112(sp)
80014f60:	da002804 	addi	r8,sp,160
80014f64:	003fec06 	br	80014f18 <_gp+0xfffe41a4>
80014f68:	a080004c 	andi	r2,r20,1
80014f6c:	103e131e 	bne	r2,zero,800147bc <_gp+0xfffe3a48>
80014f70:	00800044 	movi	r2,1
80014f74:	dc001c15 	stw	r16,112(sp)
80014f78:	44c00015 	stw	r19,0(r8)
80014f7c:	40800115 	stw	r2,4(r8)
80014f80:	d8c01d15 	stw	r3,116(sp)
80014f84:	84000208 	cmpgei	r16,r16,8
80014f88:	803f8c1e 	bne	r16,zero,80014dbc <_gp+0xfffe4048>
80014f8c:	55800084 	addi	r22,r10,2
80014f90:	42000404 	addi	r8,r8,16
80014f94:	003e3906 	br	8001487c <_gp+0xfffe3b08>
80014f98:	d9000417 	ldw	r4,16(sp)
80014f9c:	d9801b04 	addi	r6,sp,108
80014fa0:	b80b883a 	mov	r5,r23
80014fa4:	dac00d15 	stw	r11,52(sp)
80014fa8:	db000615 	stw	r12,24(sp)
80014fac:	001cf080 	call	8001cf08 <__sprint_r>
80014fb0:	103cd31e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80014fb4:	d8c01d17 	ldw	r3,116(sp)
80014fb8:	d8801447 	ldb	r2,81(sp)
80014fbc:	da002804 	addi	r8,sp,160
80014fc0:	dac00d17 	ldw	r11,52(sp)
80014fc4:	db000617 	ldw	r12,24(sp)
80014fc8:	003c3506 	br	800140a0 <_gp+0xfffe332c>
80014fcc:	9017883a 	mov	r11,r18
80014fd0:	dc800617 	ldw	r18,24(sp)
80014fd4:	10800044 	addi	r2,r2,1
80014fd8:	1c07883a 	add	r3,r3,r16
80014fdc:	d8801c15 	stw	r2,112(sp)
80014fe0:	42c00015 	stw	r11,0(r8)
80014fe4:	44000115 	stw	r16,4(r8)
80014fe8:	d8c01d15 	stw	r3,116(sp)
80014fec:	10800208 	cmpgei	r2,r2,8
80014ff0:	10009626 	beq	r2,zero,8001524c <___vfprintf_internal_r+0x1908>
80014ff4:	d9000417 	ldw	r4,16(sp)
80014ff8:	d9801b04 	addi	r6,sp,108
80014ffc:	b80b883a 	mov	r5,r23
80015000:	001cf080 	call	8001cf08 <__sprint_r>
80015004:	103cbe1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015008:	d8c01d17 	ldw	r3,116(sp)
8001500c:	da002804 	addi	r8,sp,160
80015010:	d8801517 	ldw	r2,84(sp)
80015014:	d9000917 	ldw	r4,36(sp)
80015018:	11000216 	blt	r2,r4,80015024 <___vfprintf_internal_r+0x16e0>
8001501c:	a100004c 	andi	r4,r20,1
80015020:	20000c26 	beq	r4,zero,80015054 <___vfprintf_internal_r+0x1710>
80015024:	d9000f17 	ldw	r4,60(sp)
80015028:	d9400c17 	ldw	r5,48(sp)
8001502c:	41000015 	stw	r4,0(r8)
80015030:	d9001c17 	ldw	r4,112(sp)
80015034:	1947883a 	add	r3,r3,r5
80015038:	41400115 	stw	r5,4(r8)
8001503c:	21000044 	addi	r4,r4,1
80015040:	d9001c15 	stw	r4,112(sp)
80015044:	d8c01d15 	stw	r3,116(sp)
80015048:	21000208 	cmpgei	r4,r4,8
8001504c:	20010b1e 	bne	r4,zero,8001547c <___vfprintf_internal_r+0x1b38>
80015050:	42000204 	addi	r8,r8,8
80015054:	d9000917 	ldw	r4,36(sp)
80015058:	d9400817 	ldw	r5,32(sp)
8001505c:	2085c83a 	sub	r2,r4,r2
80015060:	2149c83a 	sub	r4,r4,r5
80015064:	1021883a 	mov	r16,r2
80015068:	2080010e 	bge	r4,r2,80015070 <___vfprintf_internal_r+0x172c>
8001506c:	2021883a 	mov	r16,r4
80015070:	04000c0e 	bge	zero,r16,800150a4 <___vfprintf_internal_r+0x1760>
80015074:	d9000817 	ldw	r4,32(sp)
80015078:	1c07883a 	add	r3,r3,r16
8001507c:	44000115 	stw	r16,4(r8)
80015080:	9927883a 	add	r19,r19,r4
80015084:	d9001c17 	ldw	r4,112(sp)
80015088:	44c00015 	stw	r19,0(r8)
8001508c:	d8c01d15 	stw	r3,116(sp)
80015090:	21000044 	addi	r4,r4,1
80015094:	d9001c15 	stw	r4,112(sp)
80015098:	21000208 	cmpgei	r4,r4,8
8001509c:	20012e1e 	bne	r4,zero,80015558 <___vfprintf_internal_r+0x1c14>
800150a0:	42000204 	addi	r8,r8,8
800150a4:	8000010e 	bge	r16,zero,800150ac <___vfprintf_internal_r+0x1768>
800150a8:	0021883a 	mov	r16,zero
800150ac:	1421c83a 	sub	r16,r2,r16
800150b0:	043c5a0e 	bge	zero,r16,8001421c <_gp+0xfffe34a8>
800150b4:	02e000b4 	movhi	r11,32770
800150b8:	81000450 	cmplti	r4,r16,17
800150bc:	5adaccc4 	addi	r11,r11,27443
800150c0:	d8801c17 	ldw	r2,112(sp)
800150c4:	20002f1e 	bne	r4,zero,80015184 <___vfprintf_internal_r+0x1840>
800150c8:	04400404 	movi	r17,16
800150cc:	dcc00417 	ldw	r19,16(sp)
800150d0:	582d883a 	mov	r22,r11
800150d4:	00000406 	br	800150e8 <___vfprintf_internal_r+0x17a4>
800150d8:	42000204 	addi	r8,r8,8
800150dc:	843ffc04 	addi	r16,r16,-16
800150e0:	81000448 	cmpgei	r4,r16,17
800150e4:	20002626 	beq	r4,zero,80015180 <___vfprintf_internal_r+0x183c>
800150e8:	10800044 	addi	r2,r2,1
800150ec:	18c00404 	addi	r3,r3,16
800150f0:	45800015 	stw	r22,0(r8)
800150f4:	44400115 	stw	r17,4(r8)
800150f8:	d8c01d15 	stw	r3,116(sp)
800150fc:	d8801c15 	stw	r2,112(sp)
80015100:	11000208 	cmpgei	r4,r2,8
80015104:	203ff426 	beq	r4,zero,800150d8 <_gp+0xfffe4364>
80015108:	d9801b04 	addi	r6,sp,108
8001510c:	b80b883a 	mov	r5,r23
80015110:	9809883a 	mov	r4,r19
80015114:	001cf080 	call	8001cf08 <__sprint_r>
80015118:	103c791e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
8001511c:	d8c01d17 	ldw	r3,116(sp)
80015120:	d8801c17 	ldw	r2,112(sp)
80015124:	da002804 	addi	r8,sp,160
80015128:	003fec06 	br	800150dc <_gp+0xfffe4368>
8001512c:	d9000417 	ldw	r4,16(sp)
80015130:	d9801b04 	addi	r6,sp,108
80015134:	b80b883a 	mov	r5,r23
80015138:	001cf080 	call	8001cf08 <__sprint_r>
8001513c:	103c701e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015140:	d8c01d17 	ldw	r3,116(sp)
80015144:	dc001c17 	ldw	r16,112(sp)
80015148:	dc402804 	addi	r17,sp,160
8001514c:	003da206 	br	800147d8 <_gp+0xfffe3a64>
80015150:	d9000417 	ldw	r4,16(sp)
80015154:	d9801b04 	addi	r6,sp,108
80015158:	b80b883a 	mov	r5,r23
8001515c:	001cf080 	call	8001cf08 <__sprint_r>
80015160:	103c671e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015164:	d8c01d17 	ldw	r3,116(sp)
80015168:	dc001c17 	ldw	r16,112(sp)
8001516c:	dc402804 	addi	r17,sp,160
80015170:	003da406 	br	80014804 <_gp+0xfffe3a90>
80015174:	10c00060 	cmpeqi	r3,r2,1
80015178:	183aeb26 	beq	r3,zero,80013d28 <_gp+0xfffe2fb4>
8001517c:	003d0b06 	br	800145ac <_gp+0xfffe3838>
80015180:	b017883a 	mov	r11,r22
80015184:	10800044 	addi	r2,r2,1
80015188:	1c07883a 	add	r3,r3,r16
8001518c:	42c00015 	stw	r11,0(r8)
80015190:	003c1c06 	br	80014204 <_gp+0xfffe3490>
80015194:	d9000417 	ldw	r4,16(sp)
80015198:	d9801b04 	addi	r6,sp,108
8001519c:	b80b883a 	mov	r5,r23
800151a0:	001cf080 	call	8001cf08 <__sprint_r>
800151a4:	103c561e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
800151a8:	d8c01d17 	ldw	r3,116(sp)
800151ac:	da002804 	addi	r8,sp,160
800151b0:	003bd706 	br	80014110 <_gp+0xfffe339c>
800151b4:	9019883a 	mov	r12,r18
800151b8:	a017883a 	mov	r11,r20
800151bc:	dc800617 	ldw	r18,24(sp)
800151c0:	dd000817 	ldw	r20,32(sp)
800151c4:	85800044 	addi	r22,r16,1
800151c8:	88800204 	addi	r2,r17,8
800151cc:	1b07883a 	add	r3,r3,r12
800151d0:	8ac00015 	stw	r11,0(r17)
800151d4:	8b000115 	stw	r12,4(r17)
800151d8:	d8c01d15 	stw	r3,116(sp)
800151dc:	dd801c15 	stw	r22,112(sp)
800151e0:	b1000208 	cmpgei	r4,r22,8
800151e4:	203ef51e 	bne	r4,zero,80014dbc <_gp+0xfffe4048>
800151e8:	b5800044 	addi	r22,r22,1
800151ec:	12000204 	addi	r8,r2,8
800151f0:	1023883a 	mov	r17,r2
800151f4:	003da106 	br	8001487c <_gp+0xfffe3b08>
800151f8:	d9000417 	ldw	r4,16(sp)
800151fc:	d9801b04 	addi	r6,sp,108
80015200:	b80b883a 	mov	r5,r23
80015204:	001cf080 	call	8001cf08 <__sprint_r>
80015208:	103c3d1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
8001520c:	d8c01d17 	ldw	r3,116(sp)
80015210:	da002804 	addi	r8,sp,160
80015214:	003f3306 	br	80014ee4 <_gp+0xfffe4170>
80015218:	04e000b4 	movhi	r19,32770
8001521c:	9cdaa004 	addi	r19,r19,27264
80015220:	003cbc06 	br	80014514 <_gp+0xfffe37a0>
80015224:	9809883a 	mov	r4,r19
80015228:	00111940 	call	80011194 <strlen>
8001522c:	1021883a 	mov	r16,r2
80015230:	db001443 	ldbu	r12,81(sp)
80015234:	102b883a 	mov	r21,r2
80015238:	dac00617 	ldw	r11,24(sp)
8001523c:	da000717 	ldw	r8,28(sp)
80015240:	103b210e 	bge	r2,zero,80013ec8 <_gp+0xfffe3154>
80015244:	002b883a 	mov	r21,zero
80015248:	003b1f06 	br	80013ec8 <_gp+0xfffe3154>
8001524c:	42000204 	addi	r8,r8,8
80015250:	003f6f06 	br	80015010 <_gp+0xfffe429c>
80015254:	05400184 	movi	r21,6
80015258:	003eed06 	br	80014e10 <_gp+0xfffe409c>
8001525c:	a080004c 	andi	r2,r20,1
80015260:	103bee26 	beq	r2,zero,8001421c <_gp+0xfffe34a8>
80015264:	003ebe06 	br	80014d60 <_gp+0xfffe3fec>
80015268:	d8801904 	addi	r2,sp,100
8001526c:	d8800315 	stw	r2,12(sp)
80015270:	d9400a17 	ldw	r5,40(sp)
80015274:	d8801604 	addi	r2,sp,88
80015278:	d9000417 	ldw	r4,16(sp)
8001527c:	d8800215 	stw	r2,8(sp)
80015280:	d8801504 	addi	r2,sp,84
80015284:	180d883a 	mov	r6,r3
80015288:	d8800115 	stw	r2,4(sp)
8001528c:	dd800015 	stw	r22,0(sp)
80015290:	01c000c4 	movi	r7,3
80015294:	da001215 	stw	r8,72(sp)
80015298:	db401115 	stw	r13,68(sp)
8001529c:	dac00915 	stw	r11,36(sp)
800152a0:	d8c00815 	stw	r3,32(sp)
800152a4:	0015de40 	call	80015de4 <_dtoa_r>
800152a8:	d8c00817 	ldw	r3,32(sp)
800152ac:	dac00917 	ldw	r11,36(sp)
800152b0:	db401117 	ldw	r13,68(sp)
800152b4:	da001217 	ldw	r8,72(sp)
800152b8:	1027883a 	mov	r19,r2
800152bc:	b019883a 	mov	r12,r22
800152c0:	9b21883a 	add	r16,r19,r12
800152c4:	683e7726 	beq	r13,zero,80014ca4 <_gp+0xfffe3f30>
800152c8:	98800007 	ldb	r2,0(r19)
800152cc:	10800c20 	cmpeqi	r2,r2,48
800152d0:	1001191e 	bne	r2,zero,80015738 <___vfprintf_internal_r+0x1df4>
800152d4:	db001517 	ldw	r12,84(sp)
800152d8:	8321883a 	add	r16,r16,r12
800152dc:	003e7106 	br	80014ca4 <_gp+0xfffe3f30>
800152e0:	d9000417 	ldw	r4,16(sp)
800152e4:	d9801b04 	addi	r6,sp,108
800152e8:	b80b883a 	mov	r5,r23
800152ec:	001cf080 	call	8001cf08 <__sprint_r>
800152f0:	003c0306 	br	80014300 <_gp+0xfffe358c>
800152f4:	b03e451e 	bne	r22,zero,80014c0c <_gp+0xfffe3e98>
800152f8:	05800044 	movi	r22,1
800152fc:	003e4306 	br	80014c0c <_gp+0xfffe3e98>
80015300:	d8801904 	addi	r2,sp,100
80015304:	d8800315 	stw	r2,12(sp)
80015308:	d9400a17 	ldw	r5,40(sp)
8001530c:	d8801604 	addi	r2,sp,88
80015310:	d9000417 	ldw	r4,16(sp)
80015314:	b3000044 	addi	r12,r22,1
80015318:	d8800215 	stw	r2,8(sp)
8001531c:	d8801504 	addi	r2,sp,84
80015320:	db000015 	stw	r12,0(sp)
80015324:	180d883a 	mov	r6,r3
80015328:	d8800115 	stw	r2,4(sp)
8001532c:	01c00084 	movi	r7,2
80015330:	da001315 	stw	r8,76(sp)
80015334:	db401215 	stw	r13,72(sp)
80015338:	dac01115 	stw	r11,68(sp)
8001533c:	db000915 	stw	r12,36(sp)
80015340:	d8c00815 	stw	r3,32(sp)
80015344:	0015de40 	call	80015de4 <_dtoa_r>
80015348:	d8c00817 	ldw	r3,32(sp)
8001534c:	db000917 	ldw	r12,36(sp)
80015350:	dac01117 	ldw	r11,68(sp)
80015354:	db401217 	ldw	r13,72(sp)
80015358:	da001317 	ldw	r8,76(sp)
8001535c:	1027883a 	mov	r19,r2
80015360:	888011d8 	cmpnei	r2,r17,71
80015364:	1001391e 	bne	r2,zero,8001584c <___vfprintf_internal_r+0x1f08>
80015368:	5880004c 	andi	r2,r11,1
8001536c:	103fd41e 	bne	r2,zero,800152c0 <_gp+0xfffe454c>
80015370:	d8801517 	ldw	r2,84(sp)
80015374:	d8800815 	stw	r2,32(sp)
80015378:	d8801917 	ldw	r2,100(sp)
8001537c:	14c5c83a 	sub	r2,r2,r19
80015380:	d8800915 	stw	r2,36(sp)
80015384:	d8c00817 	ldw	r3,32(sp)
80015388:	18bfff50 	cmplti	r2,r3,-3
8001538c:	1000011e 	bne	r2,zero,80015394 <___vfprintf_internal_r+0x1a50>
80015390:	b0c0220e 	bge	r22,r3,8001541c <___vfprintf_internal_r+0x1ad8>
80015394:	8c7fff84 	addi	r17,r17,-2
80015398:	d8800817 	ldw	r2,32(sp)
8001539c:	dc401745 	stb	r17,93(sp)
800153a0:	143fffc4 	addi	r16,r2,-1
800153a4:	dc001515 	stw	r16,84(sp)
800153a8:	80010f16 	blt	r16,zero,800157e8 <___vfprintf_internal_r+0x1ea4>
800153ac:	00800ac4 	movi	r2,43
800153b0:	d8801785 	stb	r2,94(sp)
800153b4:	80800290 	cmplti	r2,r16,10
800153b8:	1000bb26 	beq	r2,zero,800156a8 <___vfprintf_internal_r+0x1d64>
800153bc:	84000c04 	addi	r16,r16,48
800153c0:	00800c04 	movi	r2,48
800153c4:	d88017c5 	stb	r2,95(sp)
800153c8:	dc001805 	stb	r16,96(sp)
800153cc:	d8c01844 	addi	r3,sp,97
800153d0:	d9000917 	ldw	r4,36(sp)
800153d4:	d8801744 	addi	r2,sp,93
800153d8:	1887c83a 	sub	r3,r3,r2
800153dc:	d8c01015 	stw	r3,64(sp)
800153e0:	20800088 	cmpgei	r2,r4,2
800153e4:	1921883a 	add	r16,r3,r4
800153e8:	1000f326 	beq	r2,zero,800157b8 <___vfprintf_internal_r+0x1e74>
800153ec:	d8800c17 	ldw	r2,48(sp)
800153f0:	80a1883a 	add	r16,r16,r2
800153f4:	802b883a 	mov	r21,r16
800153f8:	8000010e 	bge	r16,zero,80015400 <___vfprintf_internal_r+0x1abc>
800153fc:	002b883a 	mov	r21,zero
80015400:	d8000815 	stw	zero,32(sp)
80015404:	003e4106 	br	80014d0c <_gp+0xfffe3f98>
80015408:	00800b44 	movi	r2,45
8001540c:	d8801445 	stb	r2,81(sp)
80015410:	002d883a 	mov	r22,zero
80015414:	00800b44 	movi	r2,45
80015418:	003a5e06 	br	80013d94 <_gp+0xfffe3020>
8001541c:	d8800817 	ldw	r2,32(sp)
80015420:	d8c00917 	ldw	r3,36(sp)
80015424:	10c06216 	blt	r2,r3,800155b0 <___vfprintf_internal_r+0x1c6c>
80015428:	5ac0004c 	andi	r11,r11,1
8001542c:	5800d426 	beq	r11,zero,80015780 <___vfprintf_internal_r+0x1e3c>
80015430:	d8800817 	ldw	r2,32(sp)
80015434:	d8c00c17 	ldw	r3,48(sp)
80015438:	10e1883a 	add	r16,r2,r3
8001543c:	802b883a 	mov	r21,r16
80015440:	80006516 	blt	r16,zero,800155d8 <___vfprintf_internal_r+0x1c94>
80015444:	044019c4 	movi	r17,103
80015448:	003e3006 	br	80014d0c <_gp+0xfffe3f98>
8001544c:	d9000417 	ldw	r4,16(sp)
80015450:	d9801b04 	addi	r6,sp,108
80015454:	b80b883a 	mov	r5,r23
80015458:	001cf080 	call	8001cf08 <__sprint_r>
8001545c:	103ba81e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015460:	d8c01d17 	ldw	r3,116(sp)
80015464:	da002804 	addi	r8,sp,160
80015468:	003d5306 	br	800149b8 <_gp+0xfffe3c44>
8001546c:	00800b44 	movi	r2,45
80015470:	d8801445 	stb	r2,81(sp)
80015474:	03000b44 	movi	r12,45
80015478:	003c2206 	br	80014504 <_gp+0xfffe3790>
8001547c:	d9000417 	ldw	r4,16(sp)
80015480:	d9801b04 	addi	r6,sp,108
80015484:	b80b883a 	mov	r5,r23
80015488:	001cf080 	call	8001cf08 <__sprint_r>
8001548c:	103b9c1e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015490:	d8801517 	ldw	r2,84(sp)
80015494:	d8c01d17 	ldw	r3,116(sp)
80015498:	da002804 	addi	r8,sp,160
8001549c:	003eed06 	br	80015054 <_gp+0xfffe42e0>
800154a0:	d8801917 	ldw	r2,100(sp)
800154a4:	01000c04 	movi	r4,48
800154a8:	143e092e 	bgeu	r2,r16,80014cd0 <_gp+0xfffe3f5c>
800154ac:	10c00044 	addi	r3,r2,1
800154b0:	d8c01915 	stw	r3,100(sp)
800154b4:	11000005 	stb	r4,0(r2)
800154b8:	d8801917 	ldw	r2,100(sp)
800154bc:	143ffb36 	bltu	r2,r16,800154ac <_gp+0xfffe4738>
800154c0:	003e0306 	br	80014cd0 <_gp+0xfffe3f5c>
800154c4:	10e0003c 	xorhi	r3,r2,32768
800154c8:	00800b44 	movi	r2,45
800154cc:	d8800605 	stb	r2,24(sp)
800154d0:	003dd306 	br	80014c20 <_gp+0xfffe3eac>
800154d4:	d9000417 	ldw	r4,16(sp)
800154d8:	d9801b04 	addi	r6,sp,108
800154dc:	b80b883a 	mov	r5,r23
800154e0:	001cf080 	call	8001cf08 <__sprint_r>
800154e4:	103b861e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
800154e8:	d9001517 	ldw	r4,84(sp)
800154ec:	d8c01d17 	ldw	r3,116(sp)
800154f0:	da002804 	addi	r8,sp,160
800154f4:	003e1706 	br	80014d54 <_gp+0xfffe3fe0>
800154f8:	d8801904 	addi	r2,sp,100
800154fc:	d8800315 	stw	r2,12(sp)
80015500:	d9400a17 	ldw	r5,40(sp)
80015504:	d8801604 	addi	r2,sp,88
80015508:	d9000417 	ldw	r4,16(sp)
8001550c:	d8800215 	stw	r2,8(sp)
80015510:	d8801504 	addi	r2,sp,84
80015514:	180d883a 	mov	r6,r3
80015518:	d8800115 	stw	r2,4(sp)
8001551c:	dd800015 	stw	r22,0(sp)
80015520:	01c000c4 	movi	r7,3
80015524:	da001115 	stw	r8,68(sp)
80015528:	dac00915 	stw	r11,36(sp)
8001552c:	d8c00815 	stw	r3,32(sp)
80015530:	0015de40 	call	80015de4 <_dtoa_r>
80015534:	1027883a 	mov	r19,r2
80015538:	15a1883a 	add	r16,r2,r22
8001553c:	b019883a 	mov	r12,r22
80015540:	d8c00817 	ldw	r3,32(sp)
80015544:	dac00917 	ldw	r11,36(sp)
80015548:	da001117 	ldw	r8,68(sp)
8001554c:	003f5e06 	br	800152c8 <_gp+0xfffe4554>
80015550:	05800184 	movi	r22,6
80015554:	003dad06 	br	80014c0c <_gp+0xfffe3e98>
80015558:	d9000417 	ldw	r4,16(sp)
8001555c:	d9801b04 	addi	r6,sp,108
80015560:	b80b883a 	mov	r5,r23
80015564:	001cf080 	call	8001cf08 <__sprint_r>
80015568:	103b651e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
8001556c:	d8801517 	ldw	r2,84(sp)
80015570:	d9000917 	ldw	r4,36(sp)
80015574:	d8c01d17 	ldw	r3,116(sp)
80015578:	da002804 	addi	r8,sp,160
8001557c:	2085c83a 	sub	r2,r4,r2
80015580:	003ec806 	br	800150a4 <_gp+0xfffe4330>
80015584:	b02b883a 	mov	r21,r22
80015588:	b021883a 	mov	r16,r22
8001558c:	dd000715 	stw	r20,28(sp)
80015590:	db001443 	ldbu	r12,81(sp)
80015594:	5829883a 	mov	r20,r11
80015598:	002d883a 	mov	r22,zero
8001559c:	d8000815 	stw	zero,32(sp)
800155a0:	0039f806 	br	80013d84 <_gp+0xfffe3010>
800155a4:	00bfffc4 	movi	r2,-1
800155a8:	d8800515 	stw	r2,20(sp)
800155ac:	003b5706 	br	8001430c <_gp+0xfffe3598>
800155b0:	d8800917 	ldw	r2,36(sp)
800155b4:	d8c00c17 	ldw	r3,48(sp)
800155b8:	10e1883a 	add	r16,r2,r3
800155bc:	d8800817 	ldw	r2,32(sp)
800155c0:	00800316 	blt	zero,r2,800155d0 <___vfprintf_internal_r+0x1c8c>
800155c4:	d8800817 	ldw	r2,32(sp)
800155c8:	80a1c83a 	sub	r16,r16,r2
800155cc:	84000044 	addi	r16,r16,1
800155d0:	802b883a 	mov	r21,r16
800155d4:	803f9b0e 	bge	r16,zero,80015444 <_gp+0xfffe46d0>
800155d8:	002b883a 	mov	r21,zero
800155dc:	003f9906 	br	80015444 <_gp+0xfffe46d0>
800155e0:	d8c01517 	ldw	r3,84(sp)
800155e4:	a88011e0 	cmpeqi	r2,r21,71
800155e8:	d8c00815 	stw	r3,32(sp)
800155ec:	d8c01917 	ldw	r3,100(sp)
800155f0:	1cc7c83a 	sub	r3,r3,r19
800155f4:	d8c00915 	stw	r3,36(sp)
800155f8:	103f621e 	bne	r2,zero,80015384 <_gp+0xfffe4610>
800155fc:	003f6606 	br	80015398 <_gp+0xfffe4624>
80015600:	02e000b4 	movhi	r11,32770
80015604:	217ffc08 	cmpgei	r5,r4,-16
80015608:	5adaccc4 	addi	r11,r11,27443
8001560c:	0121c83a 	sub	r16,zero,r4
80015610:	28001b1e 	bne	r5,zero,80015680 <___vfprintf_internal_r+0x1d3c>
80015614:	b82d883a 	mov	r22,r23
80015618:	04400404 	movi	r17,16
8001561c:	582f883a 	mov	r23,r11
80015620:	00000406 	br	80015634 <___vfprintf_internal_r+0x1cf0>
80015624:	42000204 	addi	r8,r8,8
80015628:	843ffc04 	addi	r16,r16,-16
8001562c:	81000448 	cmpgei	r4,r16,17
80015630:	20001126 	beq	r4,zero,80015678 <___vfprintf_internal_r+0x1d34>
80015634:	10800044 	addi	r2,r2,1
80015638:	18c00404 	addi	r3,r3,16
8001563c:	45c00015 	stw	r23,0(r8)
80015640:	44400115 	stw	r17,4(r8)
80015644:	d8c01d15 	stw	r3,116(sp)
80015648:	d8801c15 	stw	r2,112(sp)
8001564c:	11000208 	cmpgei	r4,r2,8
80015650:	203ff426 	beq	r4,zero,80015624 <_gp+0xfffe48b0>
80015654:	d9000417 	ldw	r4,16(sp)
80015658:	d9801b04 	addi	r6,sp,108
8001565c:	b00b883a 	mov	r5,r22
80015660:	001cf080 	call	8001cf08 <__sprint_r>
80015664:	1000901e 	bne	r2,zero,800158a8 <___vfprintf_internal_r+0x1f64>
80015668:	d8c01d17 	ldw	r3,116(sp)
8001566c:	d8801c17 	ldw	r2,112(sp)
80015670:	da002804 	addi	r8,sp,160
80015674:	003fec06 	br	80015628 <_gp+0xfffe48b4>
80015678:	b817883a 	mov	r11,r23
8001567c:	b02f883a 	mov	r23,r22
80015680:	10800044 	addi	r2,r2,1
80015684:	1c07883a 	add	r3,r3,r16
80015688:	42c00015 	stw	r11,0(r8)
8001568c:	44000115 	stw	r16,4(r8)
80015690:	d8c01d15 	stw	r3,116(sp)
80015694:	d8801c15 	stw	r2,112(sp)
80015698:	11000208 	cmpgei	r4,r2,8
8001569c:	20006d1e 	bne	r4,zero,80015854 <___vfprintf_internal_r+0x1f10>
800156a0:	42000204 	addi	r8,r8,8
800156a4:	003c2d06 	br	8001475c <_gp+0xfffe39e8>
800156a8:	dd801ac4 	addi	r22,sp,107
800156ac:	b02b883a 	mov	r21,r22
800156b0:	dac00815 	stw	r11,32(sp)
800156b4:	da000d15 	stw	r8,52(sp)
800156b8:	00000106 	br	800156c0 <___vfprintf_internal_r+0x1d7c>
800156bc:	182b883a 	mov	r21,r3
800156c0:	8009883a 	mov	r4,r16
800156c4:	01400284 	movi	r5,10
800156c8:	000d5100 	call	8000d510 <__modsi3>
800156cc:	10800c04 	addi	r2,r2,48
800156d0:	8009883a 	mov	r4,r16
800156d4:	a8bfffc5 	stb	r2,-1(r21)
800156d8:	01400284 	movi	r5,10
800156dc:	000d4880 	call	8000d488 <__divsi3>
800156e0:	1021883a 	mov	r16,r2
800156e4:	10800288 	cmpgei	r2,r2,10
800156e8:	a8ffffc4 	addi	r3,r21,-1
800156ec:	103ff31e 	bne	r2,zero,800156bc <_gp+0xfffe4948>
800156f0:	80800c04 	addi	r2,r16,48
800156f4:	ad7fff84 	addi	r21,r21,-2
800156f8:	18bfffc5 	stb	r2,-1(r3)
800156fc:	dac00817 	ldw	r11,32(sp)
80015700:	da000d17 	ldw	r8,52(sp)
80015704:	ad806a2e 	bgeu	r21,r22,800158b0 <___vfprintf_internal_r+0x1f6c>
80015708:	d90017c4 	addi	r4,sp,95
8001570c:	00000106 	br	80015714 <___vfprintf_internal_r+0x1dd0>
80015710:	a8800003 	ldbu	r2,0(r21)
80015714:	21000044 	addi	r4,r4,1
80015718:	ad400044 	addi	r21,r21,1
8001571c:	20bfffc5 	stb	r2,-1(r4)
80015720:	adbffb1e 	bne	r21,r22,80015710 <_gp+0xfffe499c>
80015724:	d8801b04 	addi	r2,sp,108
80015728:	10c7c83a 	sub	r3,r2,r3
8001572c:	d88017c4 	addi	r2,sp,95
80015730:	10c7883a 	add	r3,r2,r3
80015734:	003f2606 	br	800153d0 <_gp+0xfffe465c>
80015738:	d9000a17 	ldw	r4,40(sp)
8001573c:	180b883a 	mov	r5,r3
80015740:	000d883a 	mov	r6,zero
80015744:	000f883a 	mov	r7,zero
80015748:	da001215 	stw	r8,72(sp)
8001574c:	dac00915 	stw	r11,36(sp)
80015750:	d8c00815 	stw	r3,32(sp)
80015754:	db001115 	stw	r12,68(sp)
80015758:	001f6940 	call	8001f694 <__eqdf2>
8001575c:	d8c00817 	ldw	r3,32(sp)
80015760:	dac00917 	ldw	r11,36(sp)
80015764:	da001217 	ldw	r8,72(sp)
80015768:	103eda26 	beq	r2,zero,800152d4 <_gp+0xfffe4560>
8001576c:	db001117 	ldw	r12,68(sp)
80015770:	00800044 	movi	r2,1
80015774:	1319c83a 	sub	r12,r2,r12
80015778:	db001515 	stw	r12,84(sp)
8001577c:	003ed606 	br	800152d8 <_gp+0xfffe4564>
80015780:	102b883a 	mov	r21,r2
80015784:	1000010e 	bge	r2,zero,8001578c <___vfprintf_internal_r+0x1e48>
80015788:	002b883a 	mov	r21,zero
8001578c:	dc000817 	ldw	r16,32(sp)
80015790:	044019c4 	movi	r17,103
80015794:	003d5d06 	br	80014d0c <_gp+0xfffe3f98>
80015798:	d8800b17 	ldw	r2,44(sp)
8001579c:	10002316 	blt	r2,zero,8001582c <___vfprintf_internal_r+0x1ee8>
800157a0:	db001443 	ldbu	r12,81(sp)
800157a4:	88801208 	cmpgei	r2,r17,72
800157a8:	10001d1e 	bne	r2,zero,80015820 <___vfprintf_internal_r+0x1edc>
800157ac:	04e000b4 	movhi	r19,32770
800157b0:	9cdaa104 	addi	r19,r19,27268
800157b4:	003b5706 	br	80014514 <_gp+0xfffe37a0>
800157b8:	5880004c 	andi	r2,r11,1
800157bc:	d8800815 	stw	r2,32(sp)
800157c0:	103f0a1e 	bne	r2,zero,800153ec <_gp+0xfffe4678>
800157c4:	802b883a 	mov	r21,r16
800157c8:	803d500e 	bge	r16,zero,80014d0c <_gp+0xfffe3f98>
800157cc:	002b883a 	mov	r21,zero
800157d0:	003d4e06 	br	80014d0c <_gp+0xfffe3f98>
800157d4:	d8800817 	ldw	r2,32(sp)
800157d8:	d8c00c17 	ldw	r3,48(sp)
800157dc:	10e1883a 	add	r16,r2,r3
800157e0:	85a1883a 	add	r16,r16,r22
800157e4:	003ff706 	br	800157c4 <_gp+0xfffe4a50>
800157e8:	04000044 	movi	r16,1
800157ec:	80a1c83a 	sub	r16,r16,r2
800157f0:	00800b44 	movi	r2,45
800157f4:	d8801785 	stb	r2,94(sp)
800157f8:	003eee06 	br	800153b4 <_gp+0xfffe4640>
800157fc:	b0000f1e 	bne	r22,zero,8001583c <___vfprintf_internal_r+0x1ef8>
80015800:	5ac0004c 	andi	r11,r11,1
80015804:	58000d1e 	bne	r11,zero,8001583c <___vfprintf_internal_r+0x1ef8>
80015808:	05400044 	movi	r21,1
8001580c:	04000044 	movi	r16,1
80015810:	003d3e06 	br	80014d0c <_gp+0xfffe3f98>
80015814:	4005883a 	mov	r2,r8
80015818:	5adaccc4 	addi	r11,r11,27443
8001581c:	003e6b06 	br	800151cc <_gp+0xfffe4458>
80015820:	04e000b4 	movhi	r19,32770
80015824:	9cdaa204 	addi	r19,r19,27272
80015828:	003b3a06 	br	80014514 <_gp+0xfffe37a0>
8001582c:	00800b44 	movi	r2,45
80015830:	d8801445 	stb	r2,81(sp)
80015834:	03000b44 	movi	r12,45
80015838:	003fda06 	br	800157a4 <_gp+0xfffe4a30>
8001583c:	d8800c17 	ldw	r2,48(sp)
80015840:	14000044 	addi	r16,r2,1
80015844:	85a1883a 	add	r16,r16,r22
80015848:	003fde06 	br	800157c4 <_gp+0xfffe4a50>
8001584c:	9b21883a 	add	r16,r19,r12
80015850:	003d1406 	br	80014ca4 <_gp+0xfffe3f30>
80015854:	d9000417 	ldw	r4,16(sp)
80015858:	d9801b04 	addi	r6,sp,108
8001585c:	b80b883a 	mov	r5,r23
80015860:	001cf080 	call	8001cf08 <__sprint_r>
80015864:	103aa61e 	bne	r2,zero,80014300 <_gp+0xfffe358c>
80015868:	d8c01d17 	ldw	r3,116(sp)
8001586c:	d8801c17 	ldw	r2,112(sp)
80015870:	da002804 	addi	r8,sp,160
80015874:	003bb906 	br	8001475c <_gp+0xfffe39e8>
80015878:	d8800717 	ldw	r2,28(sp)
8001587c:	15800017 	ldw	r22,0(r2)
80015880:	10800104 	addi	r2,r2,4
80015884:	b000010e 	bge	r22,zero,8001588c <___vfprintf_internal_r+0x1f48>
80015888:	05bfffc4 	movi	r22,-1
8001588c:	e4400043 	ldbu	r17,1(fp)
80015890:	d8800715 	stw	r2,28(sp)
80015894:	1839883a 	mov	fp,r3
80015898:	8c403fcc 	andi	r17,r17,255
8001589c:	8c40201c 	xori	r17,r17,128
800158a0:	8c7fe004 	addi	r17,r17,-128
800158a4:	00388106 	br	80013aac <_gp+0xfffe2d38>
800158a8:	b02f883a 	mov	r23,r22
800158ac:	003a9406 	br	80014300 <_gp+0xfffe358c>
800158b0:	d8c017c4 	addi	r3,sp,95
800158b4:	003ec606 	br	800153d0 <_gp+0xfffe465c>
800158b8:	d9401445 	stb	r5,81(sp)
800158bc:	00394506 	br	80013dd4 <_gp+0xfffe3060>
800158c0:	d9401445 	stb	r5,81(sp)
800158c4:	003ae806 	br	80014468 <_gp+0xfffe36f4>
800158c8:	d9401445 	stb	r5,81(sp)
800158cc:	00398506 	br	80013ee4 <_gp+0xfffe3170>
800158d0:	b019883a 	mov	r12,r22
800158d4:	003ea206 	br	80015360 <_gp+0xfffe45ec>
800158d8:	d9401445 	stb	r5,81(sp)
800158dc:	00399806 	br	80013f40 <_gp+0xfffe31cc>
800158e0:	d9401445 	stb	r5,81(sp)
800158e4:	00394106 	br	80013dec <_gp+0xfffe3078>
800158e8:	d9401445 	stb	r5,81(sp)
800158ec:	003a9606 	br	80014348 <_gp+0xfffe35d4>
800158f0:	d9401445 	stb	r5,81(sp)
800158f4:	003b1006 	br	80014538 <_gp+0xfffe37c4>

800158f8 <__vfprintf_internal>:
800158f8:	00a000f4 	movhi	r2,32771
800158fc:	300f883a 	mov	r7,r6
80015900:	280d883a 	mov	r6,r5
80015904:	200b883a 	mov	r5,r4
80015908:	11235e17 	ldw	r4,-29320(r2)
8001590c:	00139441 	jmpi	80013944 <___vfprintf_internal_r>

80015910 <__sbprintf>:
80015910:	2880030b 	ldhu	r2,12(r5)
80015914:	2b001917 	ldw	r12,100(r5)
80015918:	2ac0038b 	ldhu	r11,14(r5)
8001591c:	2a800717 	ldw	r10,28(r5)
80015920:	2a400917 	ldw	r9,36(r5)
80015924:	defee204 	addi	sp,sp,-1144
80015928:	da001a04 	addi	r8,sp,104
8001592c:	00c10004 	movi	r3,1024
80015930:	dc011a15 	stw	r16,1128(sp)
80015934:	10bfff4c 	andi	r2,r2,65533
80015938:	2821883a 	mov	r16,r5
8001593c:	d80b883a 	mov	r5,sp
80015940:	dc811c15 	stw	r18,1136(sp)
80015944:	dc411b15 	stw	r17,1132(sp)
80015948:	dfc11d15 	stw	ra,1140(sp)
8001594c:	2025883a 	mov	r18,r4
80015950:	d880030d 	sth	r2,12(sp)
80015954:	db001915 	stw	r12,100(sp)
80015958:	dac0038d 	sth	r11,14(sp)
8001595c:	da800715 	stw	r10,28(sp)
80015960:	da400915 	stw	r9,36(sp)
80015964:	da000015 	stw	r8,0(sp)
80015968:	da000415 	stw	r8,16(sp)
8001596c:	d8c00215 	stw	r3,8(sp)
80015970:	d8c00515 	stw	r3,20(sp)
80015974:	d8000615 	stw	zero,24(sp)
80015978:	00139440 	call	80013944 <___vfprintf_internal_r>
8001597c:	1023883a 	mov	r17,r2
80015980:	10000d0e 	bge	r2,zero,800159b8 <__sbprintf+0xa8>
80015984:	d880030b 	ldhu	r2,12(sp)
80015988:	1080100c 	andi	r2,r2,64
8001598c:	10000326 	beq	r2,zero,8001599c <__sbprintf+0x8c>
80015990:	8080030b 	ldhu	r2,12(r16)
80015994:	10801014 	ori	r2,r2,64
80015998:	8080030d 	sth	r2,12(r16)
8001599c:	8805883a 	mov	r2,r17
800159a0:	dfc11d17 	ldw	ra,1140(sp)
800159a4:	dc811c17 	ldw	r18,1136(sp)
800159a8:	dc411b17 	ldw	r17,1132(sp)
800159ac:	dc011a17 	ldw	r16,1128(sp)
800159b0:	dec11e04 	addi	sp,sp,1144
800159b4:	f800283a 	ret
800159b8:	d80b883a 	mov	r5,sp
800159bc:	9009883a 	mov	r4,r18
800159c0:	00176ac0 	call	800176ac <_fflush_r>
800159c4:	103fef26 	beq	r2,zero,80015984 <_gp+0xfffe4c10>
800159c8:	047fffc4 	movi	r17,-1
800159cc:	003fed06 	br	80015984 <_gp+0xfffe4c10>

800159d0 <_wctomb_r>:
800159d0:	00a000f4 	movhi	r2,32771
800159d4:	10a35e17 	ldw	r2,-29320(r2)
800159d8:	10800d17 	ldw	r2,52(r2)
800159dc:	1000021e 	bne	r2,zero,800159e8 <_wctomb_r+0x18>
800159e0:	00a000b4 	movhi	r2,32770
800159e4:	109d2904 	addi	r2,r2,29860
800159e8:	10803817 	ldw	r2,224(r2)
800159ec:	1000683a 	jmp	r2

800159f0 <__ascii_wctomb>:
800159f0:	28000526 	beq	r5,zero,80015a08 <__ascii_wctomb+0x18>
800159f4:	30804030 	cmpltui	r2,r6,256
800159f8:	10000526 	beq	r2,zero,80015a10 <__ascii_wctomb+0x20>
800159fc:	29800005 	stb	r6,0(r5)
80015a00:	00800044 	movi	r2,1
80015a04:	f800283a 	ret
80015a08:	0005883a 	mov	r2,zero
80015a0c:	f800283a 	ret
80015a10:	00802284 	movi	r2,138
80015a14:	20800015 	stw	r2,0(r4)
80015a18:	00bfffc4 	movi	r2,-1
80015a1c:	f800283a 	ret

80015a20 <__swsetup_r>:
80015a20:	00a000f4 	movhi	r2,32771
80015a24:	10a35e17 	ldw	r2,-29320(r2)
80015a28:	defffd04 	addi	sp,sp,-12
80015a2c:	dc400115 	stw	r17,4(sp)
80015a30:	dc000015 	stw	r16,0(sp)
80015a34:	dfc00215 	stw	ra,8(sp)
80015a38:	2023883a 	mov	r17,r4
80015a3c:	2821883a 	mov	r16,r5
80015a40:	10000226 	beq	r2,zero,80015a4c <__swsetup_r+0x2c>
80015a44:	10c00e17 	ldw	r3,56(r2)
80015a48:	18003226 	beq	r3,zero,80015b14 <__swsetup_r+0xf4>
80015a4c:	8080030b 	ldhu	r2,12(r16)
80015a50:	10c0020c 	andi	r3,r2,8
80015a54:	1009883a 	mov	r4,r2
80015a58:	18000f26 	beq	r3,zero,80015a98 <__swsetup_r+0x78>
80015a5c:	80c00417 	ldw	r3,16(r16)
80015a60:	18001526 	beq	r3,zero,80015ab8 <__swsetup_r+0x98>
80015a64:	1100004c 	andi	r4,r2,1
80015a68:	20001d1e 	bne	r4,zero,80015ae0 <__swsetup_r+0xc0>
80015a6c:	1080008c 	andi	r2,r2,2
80015a70:	10002b1e 	bne	r2,zero,80015b20 <__swsetup_r+0x100>
80015a74:	80800517 	ldw	r2,20(r16)
80015a78:	80800215 	stw	r2,8(r16)
80015a7c:	18001d26 	beq	r3,zero,80015af4 <__swsetup_r+0xd4>
80015a80:	0005883a 	mov	r2,zero
80015a84:	dfc00217 	ldw	ra,8(sp)
80015a88:	dc400117 	ldw	r17,4(sp)
80015a8c:	dc000017 	ldw	r16,0(sp)
80015a90:	dec00304 	addi	sp,sp,12
80015a94:	f800283a 	ret
80015a98:	2080040c 	andi	r2,r4,16
80015a9c:	10003026 	beq	r2,zero,80015b60 <__swsetup_r+0x140>
80015aa0:	2080010c 	andi	r2,r4,4
80015aa4:	1000201e 	bne	r2,zero,80015b28 <__swsetup_r+0x108>
80015aa8:	80c00417 	ldw	r3,16(r16)
80015aac:	20800214 	ori	r2,r4,8
80015ab0:	8080030d 	sth	r2,12(r16)
80015ab4:	183feb1e 	bne	r3,zero,80015a64 <_gp+0xfffe4cf0>
80015ab8:	1100a00c 	andi	r4,r2,640
80015abc:	21008020 	cmpeqi	r4,r4,512
80015ac0:	203fe81e 	bne	r4,zero,80015a64 <_gp+0xfffe4cf0>
80015ac4:	8809883a 	mov	r4,r17
80015ac8:	800b883a 	mov	r5,r16
80015acc:	001869c0 	call	8001869c <__smakebuf_r>
80015ad0:	8080030b 	ldhu	r2,12(r16)
80015ad4:	80c00417 	ldw	r3,16(r16)
80015ad8:	1100004c 	andi	r4,r2,1
80015adc:	203fe326 	beq	r4,zero,80015a6c <_gp+0xfffe4cf8>
80015ae0:	80800517 	ldw	r2,20(r16)
80015ae4:	80000215 	stw	zero,8(r16)
80015ae8:	0085c83a 	sub	r2,zero,r2
80015aec:	80800615 	stw	r2,24(r16)
80015af0:	183fe31e 	bne	r3,zero,80015a80 <_gp+0xfffe4d0c>
80015af4:	80c0030b 	ldhu	r3,12(r16)
80015af8:	0005883a 	mov	r2,zero
80015afc:	1900200c 	andi	r4,r3,128
80015b00:	203fe026 	beq	r4,zero,80015a84 <_gp+0xfffe4d10>
80015b04:	18c01014 	ori	r3,r3,64
80015b08:	80c0030d 	sth	r3,12(r16)
80015b0c:	00bfffc4 	movi	r2,-1
80015b10:	003fdc06 	br	80015a84 <_gp+0xfffe4d10>
80015b14:	1009883a 	mov	r4,r2
80015b18:	0017a4c0 	call	80017a4c <__sinit>
80015b1c:	003fcb06 	br	80015a4c <_gp+0xfffe4cd8>
80015b20:	0005883a 	mov	r2,zero
80015b24:	003fd406 	br	80015a78 <_gp+0xfffe4d04>
80015b28:	81400c17 	ldw	r5,48(r16)
80015b2c:	28000626 	beq	r5,zero,80015b48 <__swsetup_r+0x128>
80015b30:	80801004 	addi	r2,r16,64
80015b34:	28800326 	beq	r5,r2,80015b44 <__swsetup_r+0x124>
80015b38:	8809883a 	mov	r4,r17
80015b3c:	0017bb00 	call	80017bb0 <_free_r>
80015b40:	8100030b 	ldhu	r4,12(r16)
80015b44:	80000c15 	stw	zero,48(r16)
80015b48:	80c00417 	ldw	r3,16(r16)
80015b4c:	00bff6c4 	movi	r2,-37
80015b50:	1108703a 	and	r4,r2,r4
80015b54:	80000115 	stw	zero,4(r16)
80015b58:	80c00015 	stw	r3,0(r16)
80015b5c:	003fd306 	br	80015aac <_gp+0xfffe4d38>
80015b60:	00800244 	movi	r2,9
80015b64:	88800015 	stw	r2,0(r17)
80015b68:	20801014 	ori	r2,r4,64
80015b6c:	8080030d 	sth	r2,12(r16)
80015b70:	00bfffc4 	movi	r2,-1
80015b74:	003fc306 	br	80015a84 <_gp+0xfffe4d10>

80015b78 <div>:
80015b78:	defffc04 	addi	sp,sp,-16
80015b7c:	dfc00315 	stw	ra,12(sp)
80015b80:	dc800215 	stw	r18,8(sp)
80015b84:	dc400115 	stw	r17,4(sp)
80015b88:	dc000015 	stw	r16,0(sp)
80015b8c:	2825883a 	mov	r18,r5
80015b90:	2021883a 	mov	r16,r4
80015b94:	000d4880 	call	8000d488 <__divsi3>
80015b98:	900b883a 	mov	r5,r18
80015b9c:	8009883a 	mov	r4,r16
80015ba0:	1023883a 	mov	r17,r2
80015ba4:	000d5100 	call	8000d510 <__modsi3>
80015ba8:	1007883a 	mov	r3,r2
80015bac:	80000b16 	blt	r16,zero,80015bdc <div+0x64>
80015bb0:	10000716 	blt	r2,zero,80015bd0 <div+0x58>
80015bb4:	8805883a 	mov	r2,r17
80015bb8:	dfc00317 	ldw	ra,12(sp)
80015bbc:	dc800217 	ldw	r18,8(sp)
80015bc0:	dc400117 	ldw	r17,4(sp)
80015bc4:	dc000017 	ldw	r16,0(sp)
80015bc8:	dec00404 	addi	sp,sp,16
80015bcc:	f800283a 	ret
80015bd0:	8c400044 	addi	r17,r17,1
80015bd4:	1487c83a 	sub	r3,r2,r18
80015bd8:	003ff606 	br	80015bb4 <_gp+0xfffe4e40>
80015bdc:	00bff50e 	bge	zero,r2,80015bb4 <_gp+0xfffe4e40>
80015be0:	8c7fffc4 	addi	r17,r17,-1
80015be4:	1487883a 	add	r3,r2,r18
80015be8:	003ff206 	br	80015bb4 <_gp+0xfffe4e40>

80015bec <quorem>:
80015bec:	defff704 	addi	sp,sp,-36
80015bf0:	dc800215 	stw	r18,8(sp)
80015bf4:	20800417 	ldw	r2,16(r4)
80015bf8:	2c800417 	ldw	r18,16(r5)
80015bfc:	dfc00815 	stw	ra,32(sp)
80015c00:	ddc00715 	stw	r23,28(sp)
80015c04:	dd800615 	stw	r22,24(sp)
80015c08:	dd400515 	stw	r21,20(sp)
80015c0c:	dd000415 	stw	r20,16(sp)
80015c10:	dcc00315 	stw	r19,12(sp)
80015c14:	dc400115 	stw	r17,4(sp)
80015c18:	dc000015 	stw	r16,0(sp)
80015c1c:	14806f16 	blt	r2,r18,80015ddc <quorem+0x1f0>
80015c20:	94bfffc4 	addi	r18,r18,-1
80015c24:	902e90ba 	slli	r23,r18,2
80015c28:	2c400504 	addi	r17,r5,20
80015c2c:	25400504 	addi	r21,r4,20
80015c30:	8de9883a 	add	r20,r17,r23
80015c34:	282d883a 	mov	r22,r5
80015c38:	adef883a 	add	r23,r21,r23
80015c3c:	a1400017 	ldw	r5,0(r20)
80015c40:	2021883a 	mov	r16,r4
80015c44:	b9000017 	ldw	r4,0(r23)
80015c48:	29400044 	addi	r5,r5,1
80015c4c:	000d5880 	call	8000d588 <__udivsi3>
80015c50:	1027883a 	mov	r19,r2
80015c54:	10002c26 	beq	r2,zero,80015d08 <quorem+0x11c>
80015c58:	8813883a 	mov	r9,r17
80015c5c:	a811883a 	mov	r8,r21
80015c60:	0015883a 	mov	r10,zero
80015c64:	0007883a 	mov	r3,zero
80015c68:	4a400104 	addi	r9,r9,4
80015c6c:	49ffff17 	ldw	r7,-4(r9)
80015c70:	41800017 	ldw	r6,0(r8)
80015c74:	42000104 	addi	r8,r8,4
80015c78:	397fffcc 	andi	r5,r7,65535
80015c7c:	2ccb383a 	mul	r5,r5,r19
80015c80:	3808d43a 	srli	r4,r7,16
80015c84:	32ffffcc 	andi	r11,r6,65535
80015c88:	2a8b883a 	add	r5,r5,r10
80015c8c:	28bfffcc 	andi	r2,r5,65535
80015c90:	280ed43a 	srli	r7,r5,16
80015c94:	24c9383a 	mul	r4,r4,r19
80015c98:	1887c83a 	sub	r3,r3,r2
80015c9c:	1ac5883a 	add	r2,r3,r11
80015ca0:	3006d43a 	srli	r3,r6,16
80015ca4:	21c9883a 	add	r4,r4,r7
80015ca8:	100bd43a 	srai	r5,r2,16
80015cac:	21bfffcc 	andi	r6,r4,65535
80015cb0:	1987c83a 	sub	r3,r3,r6
80015cb4:	1947883a 	add	r3,r3,r5
80015cb8:	180c943a 	slli	r6,r3,16
80015cbc:	10bfffcc 	andi	r2,r2,65535
80015cc0:	2014d43a 	srli	r10,r4,16
80015cc4:	3084b03a 	or	r2,r6,r2
80015cc8:	40bfff15 	stw	r2,-4(r8)
80015ccc:	1807d43a 	srai	r3,r3,16
80015cd0:	a27fe52e 	bgeu	r20,r9,80015c68 <_gp+0xfffe4ef4>
80015cd4:	b8800017 	ldw	r2,0(r23)
80015cd8:	10000b1e 	bne	r2,zero,80015d08 <quorem+0x11c>
80015cdc:	b8bfff04 	addi	r2,r23,-4
80015ce0:	a880082e 	bgeu	r21,r2,80015d04 <quorem+0x118>
80015ce4:	b8ffff17 	ldw	r3,-4(r23)
80015ce8:	18000326 	beq	r3,zero,80015cf8 <quorem+0x10c>
80015cec:	00000506 	br	80015d04 <quorem+0x118>
80015cf0:	10c00017 	ldw	r3,0(r2)
80015cf4:	1800031e 	bne	r3,zero,80015d04 <quorem+0x118>
80015cf8:	10bfff04 	addi	r2,r2,-4
80015cfc:	94bfffc4 	addi	r18,r18,-1
80015d00:	a8bffb36 	bltu	r21,r2,80015cf0 <_gp+0xfffe4f7c>
80015d04:	84800415 	stw	r18,16(r16)
80015d08:	b00b883a 	mov	r5,r22
80015d0c:	8009883a 	mov	r4,r16
80015d10:	00192740 	call	80019274 <__mcmp>
80015d14:	10002516 	blt	r2,zero,80015dac <quorem+0x1c0>
80015d18:	9cc00044 	addi	r19,r19,1
80015d1c:	a80d883a 	mov	r6,r21
80015d20:	0007883a 	mov	r3,zero
80015d24:	8c400104 	addi	r17,r17,4
80015d28:	88bfff17 	ldw	r2,-4(r17)
80015d2c:	31400017 	ldw	r5,0(r6)
80015d30:	31800104 	addi	r6,r6,4
80015d34:	113fffcc 	andi	r4,r2,65535
80015d38:	1907c83a 	sub	r3,r3,r4
80015d3c:	293fffcc 	andi	r4,r5,65535
80015d40:	1909883a 	add	r4,r3,r4
80015d44:	1004d43a 	srli	r2,r2,16
80015d48:	2806d43a 	srli	r3,r5,16
80015d4c:	200fd43a 	srai	r7,r4,16
80015d50:	217fffcc 	andi	r5,r4,65535
80015d54:	1887c83a 	sub	r3,r3,r2
80015d58:	19c7883a 	add	r3,r3,r7
80015d5c:	1808943a 	slli	r4,r3,16
80015d60:	1807d43a 	srai	r3,r3,16
80015d64:	2148b03a 	or	r4,r4,r5
80015d68:	313fff15 	stw	r4,-4(r6)
80015d6c:	a47fed2e 	bgeu	r20,r17,80015d24 <_gp+0xfffe4fb0>
80015d70:	900690ba 	slli	r3,r18,2
80015d74:	a8c7883a 	add	r3,r21,r3
80015d78:	18800017 	ldw	r2,0(r3)
80015d7c:	10000b1e 	bne	r2,zero,80015dac <quorem+0x1c0>
80015d80:	18bfff04 	addi	r2,r3,-4
80015d84:	a880082e 	bgeu	r21,r2,80015da8 <quorem+0x1bc>
80015d88:	18ffff17 	ldw	r3,-4(r3)
80015d8c:	18000326 	beq	r3,zero,80015d9c <quorem+0x1b0>
80015d90:	00000506 	br	80015da8 <quorem+0x1bc>
80015d94:	10c00017 	ldw	r3,0(r2)
80015d98:	1800031e 	bne	r3,zero,80015da8 <quorem+0x1bc>
80015d9c:	10bfff04 	addi	r2,r2,-4
80015da0:	94bfffc4 	addi	r18,r18,-1
80015da4:	a8bffb36 	bltu	r21,r2,80015d94 <_gp+0xfffe5020>
80015da8:	84800415 	stw	r18,16(r16)
80015dac:	9805883a 	mov	r2,r19
80015db0:	dfc00817 	ldw	ra,32(sp)
80015db4:	ddc00717 	ldw	r23,28(sp)
80015db8:	dd800617 	ldw	r22,24(sp)
80015dbc:	dd400517 	ldw	r21,20(sp)
80015dc0:	dd000417 	ldw	r20,16(sp)
80015dc4:	dcc00317 	ldw	r19,12(sp)
80015dc8:	dc800217 	ldw	r18,8(sp)
80015dcc:	dc400117 	ldw	r17,4(sp)
80015dd0:	dc000017 	ldw	r16,0(sp)
80015dd4:	dec00904 	addi	sp,sp,36
80015dd8:	f800283a 	ret
80015ddc:	0005883a 	mov	r2,zero
80015de0:	003ff306 	br	80015db0 <_gp+0xfffe503c>

80015de4 <_dtoa_r>:
80015de4:	20801017 	ldw	r2,64(r4)
80015de8:	deffe004 	addi	sp,sp,-128
80015dec:	dd001a15 	stw	r20,104(sp)
80015df0:	dcc01915 	stw	r19,100(sp)
80015df4:	dc001615 	stw	r16,88(sp)
80015df8:	dfc01f15 	stw	ra,124(sp)
80015dfc:	df001e15 	stw	fp,120(sp)
80015e00:	ddc01d15 	stw	r23,116(sp)
80015e04:	dd801c15 	stw	r22,112(sp)
80015e08:	dd401b15 	stw	r21,108(sp)
80015e0c:	dc801815 	stw	r18,96(sp)
80015e10:	dc401715 	stw	r17,92(sp)
80015e14:	d9400115 	stw	r5,4(sp)
80015e18:	d9c00215 	stw	r7,8(sp)
80015e1c:	2021883a 	mov	r16,r4
80015e20:	3029883a 	mov	r20,r6
80015e24:	3027883a 	mov	r19,r6
80015e28:	10000826 	beq	r2,zero,80015e4c <_dtoa_r+0x68>
80015e2c:	21801117 	ldw	r6,68(r4)
80015e30:	00c00044 	movi	r3,1
80015e34:	100b883a 	mov	r5,r2
80015e38:	1986983a 	sll	r3,r3,r6
80015e3c:	11800115 	stw	r6,4(r2)
80015e40:	10c00215 	stw	r3,8(r2)
80015e44:	0018a800 	call	80018a80 <_Bfree>
80015e48:	80001015 	stw	zero,64(r16)
80015e4c:	a000b216 	blt	r20,zero,80016118 <_dtoa_r+0x334>
80015e50:	d8802217 	ldw	r2,136(sp)
80015e54:	00dffc34 	movhi	r3,32752
80015e58:	10000015 	stw	zero,0(r2)
80015e5c:	a09ffc2c 	andhi	r2,r20,32752
80015e60:	10c0b726 	beq	r2,r3,80016140 <_dtoa_r+0x35c>
80015e64:	d9000117 	ldw	r4,4(sp)
80015e68:	000d883a 	mov	r6,zero
80015e6c:	000f883a 	mov	r7,zero
80015e70:	980b883a 	mov	r5,r19
80015e74:	001f6940 	call	8001f694 <__eqdf2>
80015e78:	1000181e 	bne	r2,zero,80015edc <_dtoa_r+0xf8>
80015e7c:	d8c02117 	ldw	r3,132(sp)
80015e80:	00800044 	movi	r2,1
80015e84:	18800015 	stw	r2,0(r3)
80015e88:	d8802317 	ldw	r2,140(sp)
80015e8c:	1000d026 	beq	r2,zero,800161d0 <_dtoa_r+0x3ec>
80015e90:	d8c02317 	ldw	r3,140(sp)
80015e94:	00a000b4 	movhi	r2,32770
80015e98:	109aaf44 	addi	r2,r2,27325
80015e9c:	05a000b4 	movhi	r22,32770
80015ea0:	18800015 	stw	r2,0(r3)
80015ea4:	b59aaf04 	addi	r22,r22,27324
80015ea8:	b005883a 	mov	r2,r22
80015eac:	dfc01f17 	ldw	ra,124(sp)
80015eb0:	df001e17 	ldw	fp,120(sp)
80015eb4:	ddc01d17 	ldw	r23,116(sp)
80015eb8:	dd801c17 	ldw	r22,112(sp)
80015ebc:	dd401b17 	ldw	r21,108(sp)
80015ec0:	dd001a17 	ldw	r20,104(sp)
80015ec4:	dcc01917 	ldw	r19,100(sp)
80015ec8:	dc801817 	ldw	r18,96(sp)
80015ecc:	dc401717 	ldw	r17,92(sp)
80015ed0:	dc001617 	ldw	r16,88(sp)
80015ed4:	dec02004 	addi	sp,sp,128
80015ed8:	f800283a 	ret
80015edc:	dc800117 	ldw	r18,4(sp)
80015ee0:	d8801404 	addi	r2,sp,80
80015ee4:	a022d53a 	srli	r17,r20,20
80015ee8:	d8800015 	stw	r2,0(sp)
80015eec:	d9c01504 	addi	r7,sp,84
80015ef0:	900b883a 	mov	r5,r18
80015ef4:	980d883a 	mov	r6,r19
80015ef8:	8009883a 	mov	r4,r16
80015efc:	00195f40 	call	800195f4 <__d2b>
80015f00:	102f883a 	mov	r23,r2
80015f04:	8800a91e 	bne	r17,zero,800161ac <_dtoa_r+0x3c8>
80015f08:	dc801417 	ldw	r18,80(sp)
80015f0c:	dc401517 	ldw	r17,84(sp)
80015f10:	9463883a 	add	r17,r18,r17
80015f14:	88810c84 	addi	r2,r17,1074
80015f18:	10c00850 	cmplti	r3,r2,33
80015f1c:	18035d1e 	bne	r3,zero,80016c94 <_dtoa_r+0xeb0>
80015f20:	01001004 	movi	r4,64
80015f24:	2085c83a 	sub	r2,r4,r2
80015f28:	a0a8983a 	sll	r20,r20,r2
80015f2c:	d8800117 	ldw	r2,4(sp)
80015f30:	89010484 	addi	r4,r17,1042
80015f34:	1108d83a 	srl	r4,r2,r4
80015f38:	a108b03a 	or	r4,r20,r4
80015f3c:	000f8e00 	call	8000f8e0 <__floatunsidf>
80015f40:	1009883a 	mov	r4,r2
80015f44:	017f8434 	movhi	r5,65040
80015f48:	00800044 	movi	r2,1
80015f4c:	194b883a 	add	r5,r3,r5
80015f50:	8c7fffc4 	addi	r17,r17,-1
80015f54:	d8800b15 	stw	r2,44(sp)
80015f58:	000d883a 	mov	r6,zero
80015f5c:	01cffe34 	movhi	r7,16376
80015f60:	000ef8c0 	call	8000ef8c <__subdf3>
80015f64:	0198dbf4 	movhi	r6,25455
80015f68:	01cff4f4 	movhi	r7,16339
80015f6c:	3190d844 	addi	r6,r6,17249
80015f70:	39e1e9c4 	addi	r7,r7,-30809
80015f74:	1009883a 	mov	r4,r2
80015f78:	180b883a 	mov	r5,r3
80015f7c:	000e8b00 	call	8000e8b0 <__muldf3>
80015f80:	01a2d874 	movhi	r6,35681
80015f84:	01cff1f4 	movhi	r7,16327
80015f88:	31b22cc4 	addi	r6,r6,-14157
80015f8c:	39e28a04 	addi	r7,r7,-30168
80015f90:	180b883a 	mov	r5,r3
80015f94:	1009883a 	mov	r4,r2
80015f98:	000d6440 	call	8000d644 <__adddf3>
80015f9c:	8809883a 	mov	r4,r17
80015fa0:	102b883a 	mov	r21,r2
80015fa4:	1829883a 	mov	r20,r3
80015fa8:	001f8480 	call	8001f848 <__floatsidf>
80015fac:	019427f4 	movhi	r6,20639
80015fb0:	01cff4f4 	movhi	r7,16339
80015fb4:	319e7ec4 	addi	r6,r6,31227
80015fb8:	39d104c4 	addi	r7,r7,17427
80015fbc:	1009883a 	mov	r4,r2
80015fc0:	180b883a 	mov	r5,r3
80015fc4:	000e8b00 	call	8000e8b0 <__muldf3>
80015fc8:	100d883a 	mov	r6,r2
80015fcc:	180f883a 	mov	r7,r3
80015fd0:	a809883a 	mov	r4,r21
80015fd4:	a00b883a 	mov	r5,r20
80015fd8:	000d6440 	call	8000d644 <__adddf3>
80015fdc:	1009883a 	mov	r4,r2
80015fe0:	180b883a 	mov	r5,r3
80015fe4:	102b883a 	mov	r21,r2
80015fe8:	1829883a 	mov	r20,r3
80015fec:	000f8600 	call	8000f860 <__fixdfsi>
80015ff0:	000d883a 	mov	r6,zero
80015ff4:	000f883a 	mov	r7,zero
80015ff8:	a809883a 	mov	r4,r21
80015ffc:	a00b883a 	mov	r5,r20
80016000:	d8800315 	stw	r2,12(sp)
80016004:	001f7140 	call	8001f714 <__ledf2>
80016008:	10029416 	blt	r2,zero,80016a5c <_dtoa_r+0xc78>
8001600c:	dd000317 	ldw	r20,12(sp)
80016010:	a08005e8 	cmpgeui	r2,r20,23
80016014:	1002811e 	bne	r2,zero,80016a1c <_dtoa_r+0xc38>
80016018:	a00690fa 	slli	r3,r20,3
8001601c:	00a000b4 	movhi	r2,32770
80016020:	109ba804 	addi	r2,r2,28320
80016024:	10c5883a 	add	r2,r2,r3
80016028:	11000017 	ldw	r4,0(r2)
8001602c:	11400117 	ldw	r5,4(r2)
80016030:	d9800117 	ldw	r6,4(sp)
80016034:	980f883a 	mov	r7,r19
80016038:	000e7d00 	call	8000e7d0 <__gedf2>
8001603c:	0083110e 	bge	zero,r2,80016c84 <_dtoa_r+0xea0>
80016040:	a0bfffc4 	addi	r2,r20,-1
80016044:	d8800315 	stw	r2,12(sp)
80016048:	d8000915 	stw	zero,36(sp)
8001604c:	9463c83a 	sub	r17,r18,r17
80016050:	8d7fffc4 	addi	r21,r17,-1
80016054:	a8027c16 	blt	r21,zero,80016a48 <_dtoa_r+0xc64>
80016058:	d8000515 	stw	zero,20(sp)
8001605c:	d8800317 	ldw	r2,12(sp)
80016060:	10027116 	blt	r2,zero,80016a28 <_dtoa_r+0xc44>
80016064:	a8ab883a 	add	r21,r21,r2
80016068:	d8800815 	stw	r2,32(sp)
8001606c:	d8000715 	stw	zero,28(sp)
80016070:	d8c00217 	ldw	r3,8(sp)
80016074:	188002a8 	cmpgeui	r2,r3,10
80016078:	1000581e 	bne	r2,zero,800161dc <_dtoa_r+0x3f8>
8001607c:	18800190 	cmplti	r2,r3,6
80016080:	1003021e 	bne	r2,zero,80016c8c <_dtoa_r+0xea8>
80016084:	18bfff04 	addi	r2,r3,-4
80016088:	d8800215 	stw	r2,8(sp)
8001608c:	0023883a 	mov	r17,zero
80016090:	d8c00217 	ldw	r3,8(sp)
80016094:	188000e0 	cmpeqi	r2,r3,3
80016098:	1003e11e 	bne	r2,zero,80017020 <_dtoa_r+0x123c>
8001609c:	18800108 	cmpgei	r2,r3,4
800160a0:	1003a826 	beq	r2,zero,80016f44 <_dtoa_r+0x1160>
800160a4:	d8c00217 	ldw	r3,8(sp)
800160a8:	18800120 	cmpeqi	r2,r3,4
800160ac:	1003311e 	bne	r2,zero,80016d74 <_dtoa_r+0xf90>
800160b0:	18800160 	cmpeqi	r2,r3,5
800160b4:	1004b326 	beq	r2,zero,80017384 <_dtoa_r+0x15a0>
800160b8:	00800044 	movi	r2,1
800160bc:	d8800615 	stw	r2,24(sp)
800160c0:	d8800317 	ldw	r2,12(sp)
800160c4:	d8c02017 	ldw	r3,128(sp)
800160c8:	10c5883a 	add	r2,r2,r3
800160cc:	d8800a15 	stw	r2,40(sp)
800160d0:	10800044 	addi	r2,r2,1
800160d4:	d8800415 	stw	r2,16(sp)
800160d8:	100d883a 	mov	r6,r2
800160dc:	00800116 	blt	zero,r2,800160e4 <_dtoa_r+0x300>
800160e0:	01800044 	movi	r6,1
800160e4:	80001115 	stw	zero,68(r16)
800160e8:	30800610 	cmplti	r2,r6,24
800160ec:	dc800417 	ldw	r18,16(sp)
800160f0:	1004da1e 	bne	r2,zero,8001745c <_dtoa_r+0x1678>
800160f4:	00c00044 	movi	r3,1
800160f8:	00800104 	movi	r2,4
800160fc:	1085883a 	add	r2,r2,r2
80016100:	11000504 	addi	r4,r2,20
80016104:	180b883a 	mov	r5,r3
80016108:	18c00044 	addi	r3,r3,1
8001610c:	313ffb2e 	bgeu	r6,r4,800160fc <_gp+0xfffe5388>
80016110:	81401115 	stw	r5,68(r16)
80016114:	00003d06 	br	8001620c <_dtoa_r+0x428>
80016118:	04e00034 	movhi	r19,32768
8001611c:	d8c02217 	ldw	r3,136(sp)
80016120:	9cffffc4 	addi	r19,r19,-1
80016124:	a4e6703a 	and	r19,r20,r19
80016128:	00800044 	movi	r2,1
8001612c:	9829883a 	mov	r20,r19
80016130:	18800015 	stw	r2,0(r3)
80016134:	a09ffc2c 	andhi	r2,r20,32752
80016138:	00dffc34 	movhi	r3,32752
8001613c:	10ff491e 	bne	r2,r3,80015e64 <_gp+0xfffe50f0>
80016140:	d8c02117 	ldw	r3,132(sp)
80016144:	0089c3c4 	movi	r2,9999
80016148:	18800015 	stw	r2,0(r3)
8001614c:	d8800117 	ldw	r2,4(sp)
80016150:	10000d1e 	bne	r2,zero,80016188 <_dtoa_r+0x3a4>
80016154:	01800434 	movhi	r6,16
80016158:	31bfffc4 	addi	r6,r6,-1
8001615c:	a18c703a 	and	r6,r20,r6
80016160:	3000091e 	bne	r6,zero,80016188 <_dtoa_r+0x3a4>
80016164:	d8802317 	ldw	r2,140(sp)
80016168:	05a000b4 	movhi	r22,32770
8001616c:	1004c226 	beq	r2,zero,80017478 <_dtoa_r+0x1694>
80016170:	00a000b4 	movhi	r2,32770
80016174:	b59b7504 	addi	r22,r22,28116
80016178:	109b7704 	addi	r2,r2,28124
8001617c:	d8c02317 	ldw	r3,140(sp)
80016180:	18800015 	stw	r2,0(r3)
80016184:	003f4806 	br	80015ea8 <_gp+0xfffe5134>
80016188:	d8802317 	ldw	r2,140(sp)
8001618c:	05a000b4 	movhi	r22,32770
80016190:	1000021e 	bne	r2,zero,8001619c <_dtoa_r+0x3b8>
80016194:	b59b7804 	addi	r22,r22,28128
80016198:	003f4306 	br	80015ea8 <_gp+0xfffe5134>
8001619c:	00a000b4 	movhi	r2,32770
800161a0:	b59b7804 	addi	r22,r22,28128
800161a4:	109b78c4 	addi	r2,r2,28131
800161a8:	003ff406 	br	8001617c <_gp+0xfffe5408>
800161ac:	01400434 	movhi	r5,16
800161b0:	297fffc4 	addi	r5,r5,-1
800161b4:	994a703a 	and	r5,r19,r5
800161b8:	9009883a 	mov	r4,r18
800161bc:	294ffc34 	orhi	r5,r5,16368
800161c0:	8c7f0044 	addi	r17,r17,-1023
800161c4:	dc801417 	ldw	r18,80(sp)
800161c8:	d8000b15 	stw	zero,44(sp)
800161cc:	003f6206 	br	80015f58 <_gp+0xfffe51e4>
800161d0:	05a000b4 	movhi	r22,32770
800161d4:	b59aaf04 	addi	r22,r22,27324
800161d8:	003f3306 	br	80015ea8 <_gp+0xfffe5134>
800161dc:	00800044 	movi	r2,1
800161e0:	d8800615 	stw	r2,24(sp)
800161e4:	00bfffc4 	movi	r2,-1
800161e8:	04bfffc4 	movi	r18,-1
800161ec:	04400044 	movi	r17,1
800161f0:	d8000215 	stw	zero,8(sp)
800161f4:	d8800415 	stw	r2,16(sp)
800161f8:	d8002015 	stw	zero,128(sp)
800161fc:	d8800417 	ldw	r2,16(sp)
80016200:	80001115 	stw	zero,68(r16)
80016204:	000b883a 	mov	r5,zero
80016208:	d8800a15 	stw	r2,40(sp)
8001620c:	8009883a 	mov	r4,r16
80016210:	00189dc0 	call	800189dc <_Balloc>
80016214:	80801015 	stw	r2,64(r16)
80016218:	948003e8 	cmpgeui	r18,r18,15
8001621c:	102d883a 	mov	r22,r2
80016220:	9000d11e 	bne	r18,zero,80016568 <_dtoa_r+0x784>
80016224:	8800d026 	beq	r17,zero,80016568 <_dtoa_r+0x784>
80016228:	d9000317 	ldw	r4,12(sp)
8001622c:	0102f40e 	bge	zero,r4,80016e00 <_dtoa_r+0x101c>
80016230:	208003cc 	andi	r2,r4,15
80016234:	100690fa 	slli	r3,r2,3
80016238:	2025d13a 	srai	r18,r4,4
8001623c:	00a000b4 	movhi	r2,32770
80016240:	109ba804 	addi	r2,r2,28320
80016244:	10c5883a 	add	r2,r2,r3
80016248:	90c0040c 	andi	r3,r18,16
8001624c:	12800017 	ldw	r10,0(r2)
80016250:	17000117 	ldw	fp,4(r2)
80016254:	18038e26 	beq	r3,zero,80017090 <_dtoa_r+0x12ac>
80016258:	00a000b4 	movhi	r2,32770
8001625c:	109b9e04 	addi	r2,r2,28280
80016260:	11800817 	ldw	r6,32(r2)
80016264:	11c00917 	ldw	r7,36(r2)
80016268:	d9000117 	ldw	r4,4(sp)
8001626c:	980b883a 	mov	r5,r19
80016270:	da800e15 	stw	r10,56(sp)
80016274:	000df040 	call	8000df04 <__divdf3>
80016278:	da800e17 	ldw	r10,56(sp)
8001627c:	d8800c15 	stw	r2,48(sp)
80016280:	d8c00d15 	stw	r3,52(sp)
80016284:	948003cc 	andi	r18,r18,15
80016288:	044000c4 	movi	r17,3
8001628c:	90001126 	beq	r18,zero,800162d4 <_dtoa_r+0x4f0>
80016290:	052000b4 	movhi	r20,32770
80016294:	a51b9e04 	addi	r20,r20,28280
80016298:	5005883a 	mov	r2,r10
8001629c:	e007883a 	mov	r3,fp
800162a0:	9180004c 	andi	r6,r18,1
800162a4:	1009883a 	mov	r4,r2
800162a8:	9025d07a 	srai	r18,r18,1
800162ac:	180b883a 	mov	r5,r3
800162b0:	30000426 	beq	r6,zero,800162c4 <_dtoa_r+0x4e0>
800162b4:	a1800017 	ldw	r6,0(r20)
800162b8:	a1c00117 	ldw	r7,4(r20)
800162bc:	8c400044 	addi	r17,r17,1
800162c0:	000e8b00 	call	8000e8b0 <__muldf3>
800162c4:	a5000204 	addi	r20,r20,8
800162c8:	903ff51e 	bne	r18,zero,800162a0 <_gp+0xfffe552c>
800162cc:	1015883a 	mov	r10,r2
800162d0:	1839883a 	mov	fp,r3
800162d4:	d9000c17 	ldw	r4,48(sp)
800162d8:	d9400d17 	ldw	r5,52(sp)
800162dc:	500d883a 	mov	r6,r10
800162e0:	e00f883a 	mov	r7,fp
800162e4:	000df040 	call	8000df04 <__divdf3>
800162e8:	1025883a 	mov	r18,r2
800162ec:	1829883a 	mov	r20,r3
800162f0:	d8800917 	ldw	r2,36(sp)
800162f4:	10000626 	beq	r2,zero,80016310 <_dtoa_r+0x52c>
800162f8:	000d883a 	mov	r6,zero
800162fc:	01cffc34 	movhi	r7,16368
80016300:	9009883a 	mov	r4,r18
80016304:	a00b883a 	mov	r5,r20
80016308:	001f7140 	call	8001f714 <__ledf2>
8001630c:	1003d416 	blt	r2,zero,80017260 <_dtoa_r+0x147c>
80016310:	8809883a 	mov	r4,r17
80016314:	001f8480 	call	8001f848 <__floatsidf>
80016318:	900d883a 	mov	r6,r18
8001631c:	a00f883a 	mov	r7,r20
80016320:	1009883a 	mov	r4,r2
80016324:	180b883a 	mov	r5,r3
80016328:	000e8b00 	call	8000e8b0 <__muldf3>
8001632c:	000d883a 	mov	r6,zero
80016330:	01d00734 	movhi	r7,16412
80016334:	1009883a 	mov	r4,r2
80016338:	180b883a 	mov	r5,r3
8001633c:	000d6440 	call	8000d644 <__adddf3>
80016340:	d8800c15 	stw	r2,48(sp)
80016344:	00bf3034 	movhi	r2,64704
80016348:	1885883a 	add	r2,r3,r2
8001634c:	d8800d15 	stw	r2,52(sp)
80016350:	d8800417 	ldw	r2,16(sp)
80016354:	10031526 	beq	r2,zero,80016fac <_dtoa_r+0x11c8>
80016358:	d8800317 	ldw	r2,12(sp)
8001635c:	d8801215 	stw	r2,72(sp)
80016360:	d8800417 	ldw	r2,16(sp)
80016364:	d8800e15 	stw	r2,56(sp)
80016368:	9009883a 	mov	r4,r18
8001636c:	a00b883a 	mov	r5,r20
80016370:	000f8600 	call	8000f860 <__fixdfsi>
80016374:	d8c00e17 	ldw	r3,56(sp)
80016378:	17000c04 	addi	fp,r2,48
8001637c:	18ffffc4 	addi	r3,r3,-1
80016380:	180890fa 	slli	r4,r3,3
80016384:	00e000b4 	movhi	r3,32770
80016388:	18dba804 	addi	r3,r3,28320
8001638c:	1907883a 	add	r3,r3,r4
80016390:	1a800017 	ldw	r10,0(r3)
80016394:	1a400117 	ldw	r9,4(r3)
80016398:	1009883a 	mov	r4,r2
8001639c:	da801115 	stw	r10,68(sp)
800163a0:	da401015 	stw	r9,64(sp)
800163a4:	001f8480 	call	8001f848 <__floatsidf>
800163a8:	100d883a 	mov	r6,r2
800163ac:	180f883a 	mov	r7,r3
800163b0:	9009883a 	mov	r4,r18
800163b4:	a00b883a 	mov	r5,r20
800163b8:	000ef8c0 	call	8000ef8c <__subdf3>
800163bc:	1025883a 	mov	r18,r2
800163c0:	da401017 	ldw	r9,64(sp)
800163c4:	da801117 	ldw	r10,68(sp)
800163c8:	d8800617 	ldw	r2,24(sp)
800163cc:	e011883a 	mov	r8,fp
800163d0:	df000f15 	stw	fp,60(sp)
800163d4:	da001315 	stw	r8,76(sp)
800163d8:	1823883a 	mov	r17,r3
800163dc:	b7000044 	addi	fp,r22,1
800163e0:	500d883a 	mov	r6,r10
800163e4:	480f883a 	mov	r7,r9
800163e8:	10034126 	beq	r2,zero,800170f0 <_dtoa_r+0x130c>
800163ec:	0009883a 	mov	r4,zero
800163f0:	014ff834 	movhi	r5,16352
800163f4:	000df040 	call	8000df04 <__divdf3>
800163f8:	d9800c17 	ldw	r6,48(sp)
800163fc:	d9c00d17 	ldw	r7,52(sp)
80016400:	1009883a 	mov	r4,r2
80016404:	180b883a 	mov	r5,r3
80016408:	000ef8c0 	call	8000ef8c <__subdf3>
8001640c:	1829883a 	mov	r20,r3
80016410:	d8c00f17 	ldw	r3,60(sp)
80016414:	900d883a 	mov	r6,r18
80016418:	880f883a 	mov	r7,r17
8001641c:	b0c00005 	stb	r3,0(r22)
80016420:	1009883a 	mov	r4,r2
80016424:	a00b883a 	mov	r5,r20
80016428:	d8800c15 	stw	r2,48(sp)
8001642c:	000e7d00 	call	8000e7d0 <__gedf2>
80016430:	0083d116 	blt	zero,r2,80017378 <_dtoa_r+0x1594>
80016434:	900d883a 	mov	r6,r18
80016438:	880f883a 	mov	r7,r17
8001643c:	0009883a 	mov	r4,zero
80016440:	014ffc34 	movhi	r5,16368
80016444:	000ef8c0 	call	8000ef8c <__subdf3>
80016448:	d9000c17 	ldw	r4,48(sp)
8001644c:	100d883a 	mov	r6,r2
80016450:	180f883a 	mov	r7,r3
80016454:	a00b883a 	mov	r5,r20
80016458:	000e7d00 	call	8000e7d0 <__gedf2>
8001645c:	da001317 	ldw	r8,76(sp)
80016460:	0083d716 	blt	zero,r2,800173c0 <_dtoa_r+0x15dc>
80016464:	d8c00e17 	ldw	r3,56(sp)
80016468:	18800060 	cmpeqi	r2,r3,1
8001646c:	10003e1e 	bne	r2,zero,80016568 <_dtoa_r+0x784>
80016470:	b0c7883a 	add	r3,r22,r3
80016474:	dd400e15 	stw	r21,56(sp)
80016478:	ddc00d15 	stw	r23,52(sp)
8001647c:	dd400c17 	ldw	r21,48(sp)
80016480:	182f883a 	mov	r23,r3
80016484:	dcc00c15 	stw	r19,48(sp)
80016488:	00000806 	br	800164ac <_dtoa_r+0x6c8>
8001648c:	000ef8c0 	call	8000ef8c <__subdf3>
80016490:	a80d883a 	mov	r6,r21
80016494:	a00f883a 	mov	r7,r20
80016498:	1009883a 	mov	r4,r2
8001649c:	180b883a 	mov	r5,r3
800164a0:	001f7140 	call	8001f714 <__ledf2>
800164a4:	1003c416 	blt	r2,zero,800173b8 <_dtoa_r+0x15d4>
800164a8:	e5c02c26 	beq	fp,r23,8001655c <_dtoa_r+0x778>
800164ac:	a809883a 	mov	r4,r21
800164b0:	a00b883a 	mov	r5,r20
800164b4:	000d883a 	mov	r6,zero
800164b8:	01d00934 	movhi	r7,16420
800164bc:	000e8b00 	call	8000e8b0 <__muldf3>
800164c0:	000d883a 	mov	r6,zero
800164c4:	01d00934 	movhi	r7,16420
800164c8:	9009883a 	mov	r4,r18
800164cc:	880b883a 	mov	r5,r17
800164d0:	102b883a 	mov	r21,r2
800164d4:	1829883a 	mov	r20,r3
800164d8:	000e8b00 	call	8000e8b0 <__muldf3>
800164dc:	180b883a 	mov	r5,r3
800164e0:	1009883a 	mov	r4,r2
800164e4:	1823883a 	mov	r17,r3
800164e8:	1025883a 	mov	r18,r2
800164ec:	000f8600 	call	8000f860 <__fixdfsi>
800164f0:	1009883a 	mov	r4,r2
800164f4:	1027883a 	mov	r19,r2
800164f8:	001f8480 	call	8001f848 <__floatsidf>
800164fc:	9009883a 	mov	r4,r18
80016500:	880b883a 	mov	r5,r17
80016504:	100d883a 	mov	r6,r2
80016508:	180f883a 	mov	r7,r3
8001650c:	000ef8c0 	call	8000ef8c <__subdf3>
80016510:	e7000044 	addi	fp,fp,1
80016514:	9cc00c04 	addi	r19,r19,48
80016518:	a80d883a 	mov	r6,r21
8001651c:	a00f883a 	mov	r7,r20
80016520:	1009883a 	mov	r4,r2
80016524:	180b883a 	mov	r5,r3
80016528:	e4ffffc5 	stb	r19,-1(fp)
8001652c:	1025883a 	mov	r18,r2
80016530:	1823883a 	mov	r17,r3
80016534:	001f7140 	call	8001f714 <__ledf2>
80016538:	900d883a 	mov	r6,r18
8001653c:	880f883a 	mov	r7,r17
80016540:	0009883a 	mov	r4,zero
80016544:	014ffc34 	movhi	r5,16368
80016548:	103fd00e 	bge	r2,zero,8001648c <_gp+0xfffe5718>
8001654c:	d8801217 	ldw	r2,72(sp)
80016550:	ddc00d17 	ldw	r23,52(sp)
80016554:	d8800315 	stw	r2,12(sp)
80016558:	0001ab06 	br	80016c08 <_dtoa_r+0xe24>
8001655c:	dd400e17 	ldw	r21,56(sp)
80016560:	ddc00d17 	ldw	r23,52(sp)
80016564:	dcc00c17 	ldw	r19,48(sp)
80016568:	d8801517 	ldw	r2,84(sp)
8001656c:	10008f16 	blt	r2,zero,800167ac <_dtoa_r+0x9c8>
80016570:	d9000317 	ldw	r4,12(sp)
80016574:	20c003c8 	cmpgei	r3,r4,15
80016578:	18008c1e 	bne	r3,zero,800167ac <_dtoa_r+0x9c8>
8001657c:	200690fa 	slli	r3,r4,3
80016580:	00a000b4 	movhi	r2,32770
80016584:	109ba804 	addi	r2,r2,28320
80016588:	10c5883a 	add	r2,r2,r3
8001658c:	14400017 	ldw	r17,0(r2)
80016590:	14800117 	ldw	r18,4(r2)
80016594:	d8802017 	ldw	r2,128(sp)
80016598:	1001fe16 	blt	r2,zero,80016d94 <_dtoa_r+0xfb0>
8001659c:	dd000117 	ldw	r20,4(sp)
800165a0:	880d883a 	mov	r6,r17
800165a4:	900f883a 	mov	r7,r18
800165a8:	a009883a 	mov	r4,r20
800165ac:	980b883a 	mov	r5,r19
800165b0:	000df040 	call	8000df04 <__divdf3>
800165b4:	180b883a 	mov	r5,r3
800165b8:	1009883a 	mov	r4,r2
800165bc:	000f8600 	call	8000f860 <__fixdfsi>
800165c0:	1009883a 	mov	r4,r2
800165c4:	d8800115 	stw	r2,4(sp)
800165c8:	001f8480 	call	8001f848 <__floatsidf>
800165cc:	880d883a 	mov	r6,r17
800165d0:	900f883a 	mov	r7,r18
800165d4:	1009883a 	mov	r4,r2
800165d8:	180b883a 	mov	r5,r3
800165dc:	000e8b00 	call	8000e8b0 <__muldf3>
800165e0:	100d883a 	mov	r6,r2
800165e4:	a009883a 	mov	r4,r20
800165e8:	980b883a 	mov	r5,r19
800165ec:	180f883a 	mov	r7,r3
800165f0:	000ef8c0 	call	8000ef8c <__subdf3>
800165f4:	da000117 	ldw	r8,4(sp)
800165f8:	1009883a 	mov	r4,r2
800165fc:	180b883a 	mov	r5,r3
80016600:	40800c04 	addi	r2,r8,48
80016604:	b0800005 	stb	r2,0(r22)
80016608:	d8800417 	ldw	r2,16(sp)
8001660c:	b7000044 	addi	fp,r22,1
80016610:	11800060 	cmpeqi	r6,r2,1
80016614:	2005883a 	mov	r2,r4
80016618:	30003d1e 	bne	r6,zero,80016710 <_dtoa_r+0x92c>
8001661c:	01d00934 	movhi	r7,16420
80016620:	000e8b00 	call	8000e8b0 <__muldf3>
80016624:	000d883a 	mov	r6,zero
80016628:	000f883a 	mov	r7,zero
8001662c:	1009883a 	mov	r4,r2
80016630:	180b883a 	mov	r5,r3
80016634:	1029883a 	mov	r20,r2
80016638:	182b883a 	mov	r21,r3
8001663c:	001f6940 	call	8001f694 <__eqdf2>
80016640:	10017126 	beq	r2,zero,80016c08 <_dtoa_r+0xe24>
80016644:	d8800417 	ldw	r2,16(sp)
80016648:	dc000215 	stw	r16,8(sp)
8001664c:	b4c00084 	addi	r19,r22,2
80016650:	b085883a 	add	r2,r22,r2
80016654:	a821883a 	mov	r16,r21
80016658:	dd800115 	stw	r22,4(sp)
8001665c:	a02b883a 	mov	r21,r20
80016660:	1029883a 	mov	r20,r2
80016664:	00000a06 	br	80016690 <_dtoa_r+0x8ac>
80016668:	000e8b00 	call	8000e8b0 <__muldf3>
8001666c:	000d883a 	mov	r6,zero
80016670:	000f883a 	mov	r7,zero
80016674:	1009883a 	mov	r4,r2
80016678:	180b883a 	mov	r5,r3
8001667c:	102b883a 	mov	r21,r2
80016680:	1821883a 	mov	r16,r3
80016684:	9cc00044 	addi	r19,r19,1
80016688:	001f6940 	call	8001f694 <__eqdf2>
8001668c:	10026c26 	beq	r2,zero,80017040 <_dtoa_r+0x125c>
80016690:	880d883a 	mov	r6,r17
80016694:	900f883a 	mov	r7,r18
80016698:	a809883a 	mov	r4,r21
8001669c:	800b883a 	mov	r5,r16
800166a0:	000df040 	call	8000df04 <__divdf3>
800166a4:	180b883a 	mov	r5,r3
800166a8:	1009883a 	mov	r4,r2
800166ac:	000f8600 	call	8000f860 <__fixdfsi>
800166b0:	1009883a 	mov	r4,r2
800166b4:	102d883a 	mov	r22,r2
800166b8:	001f8480 	call	8001f848 <__floatsidf>
800166bc:	880d883a 	mov	r6,r17
800166c0:	900f883a 	mov	r7,r18
800166c4:	1009883a 	mov	r4,r2
800166c8:	180b883a 	mov	r5,r3
800166cc:	000e8b00 	call	8000e8b0 <__muldf3>
800166d0:	100d883a 	mov	r6,r2
800166d4:	180f883a 	mov	r7,r3
800166d8:	a809883a 	mov	r4,r21
800166dc:	800b883a 	mov	r5,r16
800166e0:	000ef8c0 	call	8000ef8c <__subdf3>
800166e4:	b2400c04 	addi	r9,r22,48
800166e8:	9a7fffc5 	stb	r9,-1(r19)
800166ec:	000d883a 	mov	r6,zero
800166f0:	01d00934 	movhi	r7,16420
800166f4:	1009883a 	mov	r4,r2
800166f8:	180b883a 	mov	r5,r3
800166fc:	9839883a 	mov	fp,r19
80016700:	a4ffd91e 	bne	r20,r19,80016668 <_gp+0xfffe58f4>
80016704:	b011883a 	mov	r8,r22
80016708:	dc000217 	ldw	r16,8(sp)
8001670c:	dd800117 	ldw	r22,4(sp)
80016710:	100d883a 	mov	r6,r2
80016714:	180f883a 	mov	r7,r3
80016718:	1009883a 	mov	r4,r2
8001671c:	180b883a 	mov	r5,r3
80016720:	da000115 	stw	r8,4(sp)
80016724:	000d6440 	call	8000d644 <__adddf3>
80016728:	880d883a 	mov	r6,r17
8001672c:	900f883a 	mov	r7,r18
80016730:	1009883a 	mov	r4,r2
80016734:	180b883a 	mov	r5,r3
80016738:	1029883a 	mov	r20,r2
8001673c:	1827883a 	mov	r19,r3
80016740:	000e7d00 	call	8000e7d0 <__gedf2>
80016744:	da000117 	ldw	r8,4(sp)
80016748:	00800a16 	blt	zero,r2,80016774 <_dtoa_r+0x990>
8001674c:	880d883a 	mov	r6,r17
80016750:	900f883a 	mov	r7,r18
80016754:	a009883a 	mov	r4,r20
80016758:	980b883a 	mov	r5,r19
8001675c:	da000115 	stw	r8,4(sp)
80016760:	001f6940 	call	8001f694 <__eqdf2>
80016764:	1001281e 	bne	r2,zero,80016c08 <_dtoa_r+0xe24>
80016768:	da000117 	ldw	r8,4(sp)
8001676c:	4200004c 	andi	r8,r8,1
80016770:	40012526 	beq	r8,zero,80016c08 <_dtoa_r+0xe24>
80016774:	e23fffc3 	ldbu	r8,-1(fp)
80016778:	00000306 	br	80016788 <_dtoa_r+0x9a4>
8001677c:	b0c29726 	beq	r22,r3,800171dc <_dtoa_r+0x13f8>
80016780:	1a3fffc3 	ldbu	r8,-1(r3)
80016784:	1839883a 	mov	fp,r3
80016788:	40803fcc 	andi	r2,r8,255
8001678c:	1080201c 	xori	r2,r2,128
80016790:	10bfe004 	addi	r2,r2,-128
80016794:	10800e60 	cmpeqi	r2,r2,57
80016798:	e0ffffc4 	addi	r3,fp,-1
8001679c:	103ff71e 	bne	r2,zero,8001677c <_gp+0xfffe5a08>
800167a0:	42000044 	addi	r8,r8,1
800167a4:	1a000005 	stb	r8,0(r3)
800167a8:	00011706 	br	80016c08 <_dtoa_r+0xe24>
800167ac:	d8c00617 	ldw	r3,24(sp)
800167b0:	1800b626 	beq	r3,zero,80016a8c <_dtoa_r+0xca8>
800167b4:	d8c00217 	ldw	r3,8(sp)
800167b8:	18c00088 	cmpgei	r3,r3,2
800167bc:	18016326 	beq	r3,zero,80016d4c <_dtoa_r+0xf68>
800167c0:	d8800417 	ldw	r2,16(sp)
800167c4:	14bfffc4 	addi	r18,r2,-1
800167c8:	d8800717 	ldw	r2,28(sp)
800167cc:	14821f16 	blt	r2,r18,8001704c <_dtoa_r+0x1268>
800167d0:	14a5c83a 	sub	r18,r2,r18
800167d4:	d8800417 	ldw	r2,16(sp)
800167d8:	10023b16 	blt	r2,zero,800170c8 <_dtoa_r+0x12e4>
800167dc:	d8c00517 	ldw	r3,20(sp)
800167e0:	a8ab883a 	add	r21,r21,r2
800167e4:	10c5883a 	add	r2,r2,r3
800167e8:	1829883a 	mov	r20,r3
800167ec:	d8800515 	stw	r2,20(sp)
800167f0:	01400044 	movi	r5,1
800167f4:	8009883a 	mov	r4,r16
800167f8:	0018ddc0 	call	80018ddc <__i2b>
800167fc:	1023883a 	mov	r17,r2
80016800:	0500080e 	bge	zero,r20,80016824 <_dtoa_r+0xa40>
80016804:	0540070e 	bge	zero,r21,80016824 <_dtoa_r+0xa40>
80016808:	a005883a 	mov	r2,r20
8001680c:	ad013716 	blt	r21,r20,80016cec <_dtoa_r+0xf08>
80016810:	d8c00517 	ldw	r3,20(sp)
80016814:	a0a9c83a 	sub	r20,r20,r2
80016818:	a8abc83a 	sub	r21,r21,r2
8001681c:	1887c83a 	sub	r3,r3,r2
80016820:	d8c00515 	stw	r3,20(sp)
80016824:	d8800717 	ldw	r2,28(sp)
80016828:	10000926 	beq	r2,zero,80016850 <_dtoa_r+0xa6c>
8001682c:	d8c00617 	ldw	r3,24(sp)
80016830:	1801fd26 	beq	r3,zero,80017028 <_dtoa_r+0x1244>
80016834:	14b9c83a 	sub	fp,r2,r18
80016838:	90012e1e 	bne	r18,zero,80016cf4 <_dtoa_r+0xf10>
8001683c:	b80b883a 	mov	r5,r23
80016840:	e00d883a 	mov	r6,fp
80016844:	8009883a 	mov	r4,r16
80016848:	001900c0 	call	8001900c <__pow5mult>
8001684c:	102f883a 	mov	r23,r2
80016850:	01400044 	movi	r5,1
80016854:	8009883a 	mov	r4,r16
80016858:	0018ddc0 	call	80018ddc <__i2b>
8001685c:	d9800817 	ldw	r6,32(sp)
80016860:	1025883a 	mov	r18,r2
80016864:	3000f61e 	bne	r6,zero,80016c40 <_dtoa_r+0xe5c>
80016868:	d8800217 	ldw	r2,8(sp)
8001686c:	10800090 	cmplti	r2,r2,2
80016870:	10010d1e 	bne	r2,zero,80016ca8 <_dtoa_r+0xec4>
80016874:	00800044 	movi	r2,1
80016878:	1545883a 	add	r2,r2,r21
8001687c:	108007cc 	andi	r2,r2,31
80016880:	1000ed26 	beq	r2,zero,80016c38 <_dtoa_r+0xe54>
80016884:	00c00804 	movi	r3,32
80016888:	1887c83a 	sub	r3,r3,r2
8001688c:	19000150 	cmplti	r4,r3,5
80016890:	2002f41e 	bne	r4,zero,80017464 <_dtoa_r+0x1680>
80016894:	00c00704 	movi	r3,28
80016898:	1885c83a 	sub	r2,r3,r2
8001689c:	d8c00517 	ldw	r3,20(sp)
800168a0:	a0a9883a 	add	r20,r20,r2
800168a4:	a8ab883a 	add	r21,r21,r2
800168a8:	1887883a 	add	r3,r3,r2
800168ac:	d8c00515 	stw	r3,20(sp)
800168b0:	d8800517 	ldw	r2,20(sp)
800168b4:	00807916 	blt	zero,r2,80016a9c <_dtoa_r+0xcb8>
800168b8:	0540050e 	bge	zero,r21,800168d0 <_dtoa_r+0xaec>
800168bc:	900b883a 	mov	r5,r18
800168c0:	a80d883a 	mov	r6,r21
800168c4:	8009883a 	mov	r4,r16
800168c8:	00191300 	call	80019130 <__lshift>
800168cc:	1025883a 	mov	r18,r2
800168d0:	d8800917 	ldw	r2,36(sp)
800168d4:	1000771e 	bne	r2,zero,80016ab4 <_dtoa_r+0xcd0>
800168d8:	d8800417 	ldw	r2,16(sp)
800168dc:	00818f0e 	bge	zero,r2,80016f1c <_dtoa_r+0x1138>
800168e0:	d8800617 	ldw	r2,24(sp)
800168e4:	10008526 	beq	r2,zero,80016afc <_dtoa_r+0xd18>
800168e8:	05011216 	blt	zero,r20,80016d34 <_dtoa_r+0xf50>
800168ec:	d8800817 	ldw	r2,32(sp)
800168f0:	1001721e 	bne	r2,zero,80016ebc <_dtoa_r+0x10d8>
800168f4:	8829883a 	mov	r20,r17
800168f8:	d8c00417 	ldw	r3,16(sp)
800168fc:	b0bfffc4 	addi	r2,r22,-1
80016900:	b027883a 	mov	r19,r22
80016904:	10c5883a 	add	r2,r2,r3
80016908:	d8800515 	stw	r2,20(sp)
8001690c:	d8800117 	ldw	r2,4(sp)
80016910:	dd800715 	stw	r22,28(sp)
80016914:	1080004c 	andi	r2,r2,1
80016918:	d8800615 	stw	r2,24(sp)
8001691c:	900b883a 	mov	r5,r18
80016920:	b809883a 	mov	r4,r23
80016924:	0015bec0 	call	80015bec <quorem>
80016928:	880b883a 	mov	r5,r17
8001692c:	b809883a 	mov	r4,r23
80016930:	102d883a 	mov	r22,r2
80016934:	00192740 	call	80019274 <__mcmp>
80016938:	900b883a 	mov	r5,r18
8001693c:	a00d883a 	mov	r6,r20
80016940:	8009883a 	mov	r4,r16
80016944:	102b883a 	mov	r21,r2
80016948:	00192cc0 	call	800192cc <__mdiff>
8001694c:	1007883a 	mov	r3,r2
80016950:	10800317 	ldw	r2,12(r2)
80016954:	b7000c04 	addi	fp,r22,48
80016958:	180b883a 	mov	r5,r3
8001695c:	10016b1e 	bne	r2,zero,80016f0c <_dtoa_r+0x1128>
80016960:	b809883a 	mov	r4,r23
80016964:	d8c00415 	stw	r3,16(sp)
80016968:	00192740 	call	80019274 <__mcmp>
8001696c:	d8c00417 	ldw	r3,16(sp)
80016970:	8009883a 	mov	r4,r16
80016974:	d8800115 	stw	r2,4(sp)
80016978:	180b883a 	mov	r5,r3
8001697c:	0018a800 	call	80018a80 <_Bfree>
80016980:	d8800117 	ldw	r2,4(sp)
80016984:	1000051e 	bne	r2,zero,8001699c <_dtoa_r+0xbb8>
80016988:	d8c00217 	ldw	r3,8(sp)
8001698c:	1800031e 	bne	r3,zero,8001699c <_dtoa_r+0xbb8>
80016990:	d8800617 	ldw	r2,24(sp)
80016994:	10028d26 	beq	r2,zero,800173cc <_dtoa_r+0x15e8>
80016998:	d8800217 	ldw	r2,8(sp)
8001699c:	a801b316 	blt	r21,zero,8001706c <_dtoa_r+0x1288>
800169a0:	a800041e 	bne	r21,zero,800169b4 <_dtoa_r+0xbd0>
800169a4:	d8c00217 	ldw	r3,8(sp)
800169a8:	1800021e 	bne	r3,zero,800169b4 <_dtoa_r+0xbd0>
800169ac:	d8c00617 	ldw	r3,24(sp)
800169b0:	1801ae26 	beq	r3,zero,8001706c <_dtoa_r+0x1288>
800169b4:	9d400044 	addi	r21,r19,1
800169b8:	0081bc16 	blt	zero,r2,800170ac <_dtoa_r+0x12c8>
800169bc:	d8800517 	ldw	r2,20(sp)
800169c0:	9f000005 	stb	fp,0(r19)
800169c4:	14c1c426 	beq	r2,r19,800170d8 <_dtoa_r+0x12f4>
800169c8:	b80b883a 	mov	r5,r23
800169cc:	000f883a 	mov	r7,zero
800169d0:	01800284 	movi	r6,10
800169d4:	8009883a 	mov	r4,r16
800169d8:	0018aa40 	call	80018aa4 <__multadd>
800169dc:	102f883a 	mov	r23,r2
800169e0:	000f883a 	mov	r7,zero
800169e4:	01800284 	movi	r6,10
800169e8:	880b883a 	mov	r5,r17
800169ec:	8009883a 	mov	r4,r16
800169f0:	8d014226 	beq	r17,r20,80016efc <_dtoa_r+0x1118>
800169f4:	0018aa40 	call	80018aa4 <__multadd>
800169f8:	a00b883a 	mov	r5,r20
800169fc:	000f883a 	mov	r7,zero
80016a00:	01800284 	movi	r6,10
80016a04:	8009883a 	mov	r4,r16
80016a08:	1023883a 	mov	r17,r2
80016a0c:	0018aa40 	call	80018aa4 <__multadd>
80016a10:	1029883a 	mov	r20,r2
80016a14:	a827883a 	mov	r19,r21
80016a18:	003fc006 	br	8001691c <_gp+0xfffe5ba8>
80016a1c:	00800044 	movi	r2,1
80016a20:	d8800915 	stw	r2,36(sp)
80016a24:	003d8906 	br	8001604c <_gp+0xfffe52d8>
80016a28:	d8c00517 	ldw	r3,20(sp)
80016a2c:	d8800317 	ldw	r2,12(sp)
80016a30:	d8000815 	stw	zero,32(sp)
80016a34:	1887c83a 	sub	r3,r3,r2
80016a38:	0085c83a 	sub	r2,zero,r2
80016a3c:	d8c00515 	stw	r3,20(sp)
80016a40:	d8800715 	stw	r2,28(sp)
80016a44:	003d8a06 	br	80016070 <_gp+0xfffe52fc>
80016a48:	04800044 	movi	r18,1
80016a4c:	9445c83a 	sub	r2,r18,r17
80016a50:	d8800515 	stw	r2,20(sp)
80016a54:	002b883a 	mov	r21,zero
80016a58:	003d8006 	br	8001605c <_gp+0xfffe52e8>
80016a5c:	dd800317 	ldw	r22,12(sp)
80016a60:	b009883a 	mov	r4,r22
80016a64:	001f8480 	call	8001f848 <__floatsidf>
80016a68:	a80d883a 	mov	r6,r21
80016a6c:	a00f883a 	mov	r7,r20
80016a70:	1009883a 	mov	r4,r2
80016a74:	180b883a 	mov	r5,r3
80016a78:	001f6940 	call	8001f694 <__eqdf2>
80016a7c:	103d6326 	beq	r2,zero,8001600c <_gp+0xfffe5298>
80016a80:	b0bfffc4 	addi	r2,r22,-1
80016a84:	d8800315 	stw	r2,12(sp)
80016a88:	003d6006 	br	8001600c <_gp+0xfffe5298>
80016a8c:	dc800717 	ldw	r18,28(sp)
80016a90:	dd000517 	ldw	r20,20(sp)
80016a94:	0023883a 	mov	r17,zero
80016a98:	003f5906 	br	80016800 <_gp+0xfffe5a8c>
80016a9c:	b80b883a 	mov	r5,r23
80016aa0:	100d883a 	mov	r6,r2
80016aa4:	8009883a 	mov	r4,r16
80016aa8:	00191300 	call	80019130 <__lshift>
80016aac:	102f883a 	mov	r23,r2
80016ab0:	003f8106 	br	800168b8 <_gp+0xfffe5b44>
80016ab4:	900b883a 	mov	r5,r18
80016ab8:	b809883a 	mov	r4,r23
80016abc:	00192740 	call	80019274 <__mcmp>
80016ac0:	103f850e 	bge	r2,zero,800168d8 <_gp+0xfffe5b64>
80016ac4:	b80b883a 	mov	r5,r23
80016ac8:	000f883a 	mov	r7,zero
80016acc:	01800284 	movi	r6,10
80016ad0:	8009883a 	mov	r4,r16
80016ad4:	0018aa40 	call	80018aa4 <__multadd>
80016ad8:	102f883a 	mov	r23,r2
80016adc:	d8800317 	ldw	r2,12(sp)
80016ae0:	10bfffc4 	addi	r2,r2,-1
80016ae4:	d8800315 	stw	r2,12(sp)
80016ae8:	d8800617 	ldw	r2,24(sp)
80016aec:	1002441e 	bne	r2,zero,80017400 <_dtoa_r+0x161c>
80016af0:	d8800a17 	ldw	r2,40(sp)
80016af4:	00824d0e 	bge	zero,r2,8001742c <_dtoa_r+0x1648>
80016af8:	d8800415 	stw	r2,16(sp)
80016afc:	b039883a 	mov	fp,r22
80016b00:	dcc00417 	ldw	r19,16(sp)
80016b04:	00000206 	br	80016b10 <_dtoa_r+0xd2c>
80016b08:	0018aa40 	call	80018aa4 <__multadd>
80016b0c:	102f883a 	mov	r23,r2
80016b10:	900b883a 	mov	r5,r18
80016b14:	b809883a 	mov	r4,r23
80016b18:	0015bec0 	call	80015bec <quorem>
80016b1c:	12000c04 	addi	r8,r2,48
80016b20:	e7000044 	addi	fp,fp,1
80016b24:	e23fffc5 	stb	r8,-1(fp)
80016b28:	e585c83a 	sub	r2,fp,r22
80016b2c:	000f883a 	mov	r7,zero
80016b30:	01800284 	movi	r6,10
80016b34:	b80b883a 	mov	r5,r23
80016b38:	8009883a 	mov	r4,r16
80016b3c:	14fff216 	blt	r2,r19,80016b08 <_gp+0xfffe5d94>
80016b40:	002b883a 	mov	r21,zero
80016b44:	b80b883a 	mov	r5,r23
80016b48:	01800044 	movi	r6,1
80016b4c:	8009883a 	mov	r4,r16
80016b50:	da000115 	stw	r8,4(sp)
80016b54:	00191300 	call	80019130 <__lshift>
80016b58:	900b883a 	mov	r5,r18
80016b5c:	1009883a 	mov	r4,r2
80016b60:	102f883a 	mov	r23,r2
80016b64:	00192740 	call	80019274 <__mcmp>
80016b68:	da000117 	ldw	r8,4(sp)
80016b6c:	e0ffffc3 	ldbu	r3,-1(fp)
80016b70:	00801116 	blt	zero,r2,80016bb8 <_dtoa_r+0xdd4>
80016b74:	1000021e 	bne	r2,zero,80016b80 <_dtoa_r+0xd9c>
80016b78:	4200004c 	andi	r8,r8,1
80016b7c:	40000e1e 	bne	r8,zero,80016bb8 <_dtoa_r+0xdd4>
80016b80:	1805883a 	mov	r2,r3
80016b84:	00000206 	br	80016b90 <_dtoa_r+0xdac>
80016b88:	e0bfff83 	ldbu	r2,-2(fp)
80016b8c:	1839883a 	mov	fp,r3
80016b90:	10803fcc 	andi	r2,r2,255
80016b94:	1080201c 	xori	r2,r2,128
80016b98:	10bfe004 	addi	r2,r2,-128
80016b9c:	10800c18 	cmpnei	r2,r2,48
80016ba0:	e0ffffc4 	addi	r3,fp,-1
80016ba4:	103ff826 	beq	r2,zero,80016b88 <_gp+0xfffe5e14>
80016ba8:	00000b06 	br	80016bd8 <_dtoa_r+0xdf4>
80016bac:	2580e926 	beq	r4,r22,80016f54 <_dtoa_r+0x1170>
80016bb0:	20ffffc3 	ldbu	r3,-1(r4)
80016bb4:	2039883a 	mov	fp,r4
80016bb8:	18803fcc 	andi	r2,r3,255
80016bbc:	1080201c 	xori	r2,r2,128
80016bc0:	10bfe004 	addi	r2,r2,-128
80016bc4:	10800e60 	cmpeqi	r2,r2,57
80016bc8:	e13fffc4 	addi	r4,fp,-1
80016bcc:	103ff71e 	bne	r2,zero,80016bac <_gp+0xfffe5e38>
80016bd0:	18c00044 	addi	r3,r3,1
80016bd4:	20c00005 	stb	r3,0(r4)
80016bd8:	900b883a 	mov	r5,r18
80016bdc:	8009883a 	mov	r4,r16
80016be0:	0018a800 	call	80018a80 <_Bfree>
80016be4:	88000826 	beq	r17,zero,80016c08 <_dtoa_r+0xe24>
80016be8:	a8000426 	beq	r21,zero,80016bfc <_dtoa_r+0xe18>
80016bec:	ac400326 	beq	r21,r17,80016bfc <_dtoa_r+0xe18>
80016bf0:	a80b883a 	mov	r5,r21
80016bf4:	8009883a 	mov	r4,r16
80016bf8:	0018a800 	call	80018a80 <_Bfree>
80016bfc:	880b883a 	mov	r5,r17
80016c00:	8009883a 	mov	r4,r16
80016c04:	0018a800 	call	80018a80 <_Bfree>
80016c08:	b80b883a 	mov	r5,r23
80016c0c:	8009883a 	mov	r4,r16
80016c10:	0018a800 	call	80018a80 <_Bfree>
80016c14:	d8800317 	ldw	r2,12(sp)
80016c18:	d8c02117 	ldw	r3,132(sp)
80016c1c:	e0000005 	stb	zero,0(fp)
80016c20:	10800044 	addi	r2,r2,1
80016c24:	18800015 	stw	r2,0(r3)
80016c28:	d8802317 	ldw	r2,140(sp)
80016c2c:	103c9e26 	beq	r2,zero,80015ea8 <_gp+0xfffe5134>
80016c30:	17000015 	stw	fp,0(r2)
80016c34:	003c9c06 	br	80015ea8 <_gp+0xfffe5134>
80016c38:	00800704 	movi	r2,28
80016c3c:	003f1706 	br	8001689c <_gp+0xfffe5b28>
80016c40:	100b883a 	mov	r5,r2
80016c44:	8009883a 	mov	r4,r16
80016c48:	001900c0 	call	8001900c <__pow5mult>
80016c4c:	1025883a 	mov	r18,r2
80016c50:	d8800217 	ldw	r2,8(sp)
80016c54:	10800090 	cmplti	r2,r2,2
80016c58:	1000951e 	bne	r2,zero,80016eb0 <_dtoa_r+0x10cc>
80016c5c:	d8000815 	stw	zero,32(sp)
80016c60:	90800417 	ldw	r2,16(r18)
80016c64:	10800104 	addi	r2,r2,4
80016c68:	100490ba 	slli	r2,r2,2
80016c6c:	9085883a 	add	r2,r18,r2
80016c70:	11000017 	ldw	r4,0(r2)
80016c74:	0018cc80 	call	80018cc8 <__hi0bits>
80016c78:	00c00804 	movi	r3,32
80016c7c:	1885c83a 	sub	r2,r3,r2
80016c80:	003efd06 	br	80016878 <_gp+0xfffe5b04>
80016c84:	d8000915 	stw	zero,36(sp)
80016c88:	003cf006 	br	8001604c <_gp+0xfffe52d8>
80016c8c:	04400044 	movi	r17,1
80016c90:	003cff06 	br	80016090 <_gp+0xfffe531c>
80016c94:	01000804 	movi	r4,32
80016c98:	2089c83a 	sub	r4,r4,r2
80016c9c:	d8800117 	ldw	r2,4(sp)
80016ca0:	1108983a 	sll	r4,r2,r4
80016ca4:	003ca506 	br	80015f3c <_gp+0xfffe51c8>
80016ca8:	d8800117 	ldw	r2,4(sp)
80016cac:	103ef11e 	bne	r2,zero,80016874 <_gp+0xfffe5b00>
80016cb0:	00800434 	movhi	r2,16
80016cb4:	10bfffc4 	addi	r2,r2,-1
80016cb8:	9884703a 	and	r2,r19,r2
80016cbc:	1000f91e 	bne	r2,zero,800170a4 <_dtoa_r+0x12c0>
80016cc0:	9cdffc2c 	andhi	r19,r19,32752
80016cc4:	9800f726 	beq	r19,zero,800170a4 <_dtoa_r+0x12c0>
80016cc8:	d8800517 	ldw	r2,20(sp)
80016ccc:	ad400044 	addi	r21,r21,1
80016cd0:	10800044 	addi	r2,r2,1
80016cd4:	d8800515 	stw	r2,20(sp)
80016cd8:	00800044 	movi	r2,1
80016cdc:	d8c00817 	ldw	r3,32(sp)
80016ce0:	d8800815 	stw	r2,32(sp)
80016ce4:	183ee326 	beq	r3,zero,80016874 <_gp+0xfffe5b00>
80016ce8:	003fdd06 	br	80016c60 <_gp+0xfffe5eec>
80016cec:	a805883a 	mov	r2,r21
80016cf0:	003ec706 	br	80016810 <_gp+0xfffe5a9c>
80016cf4:	900d883a 	mov	r6,r18
80016cf8:	880b883a 	mov	r5,r17
80016cfc:	8009883a 	mov	r4,r16
80016d00:	001900c0 	call	8001900c <__pow5mult>
80016d04:	b80d883a 	mov	r6,r23
80016d08:	100b883a 	mov	r5,r2
80016d0c:	8009883a 	mov	r4,r16
80016d10:	1023883a 	mov	r17,r2
80016d14:	0018e100 	call	80018e10 <__multiply>
80016d18:	1025883a 	mov	r18,r2
80016d1c:	b80b883a 	mov	r5,r23
80016d20:	8009883a 	mov	r4,r16
80016d24:	0018a800 	call	80018a80 <_Bfree>
80016d28:	902f883a 	mov	r23,r18
80016d2c:	e03ec826 	beq	fp,zero,80016850 <_gp+0xfffe5adc>
80016d30:	003ec206 	br	8001683c <_gp+0xfffe5ac8>
80016d34:	880b883a 	mov	r5,r17
80016d38:	a00d883a 	mov	r6,r20
80016d3c:	8009883a 	mov	r4,r16
80016d40:	00191300 	call	80019130 <__lshift>
80016d44:	1023883a 	mov	r17,r2
80016d48:	003ee806 	br	800168ec <_gp+0xfffe5b78>
80016d4c:	d8c00b17 	ldw	r3,44(sp)
80016d50:	18012a26 	beq	r3,zero,800171fc <_dtoa_r+0x1418>
80016d54:	d8c00517 	ldw	r3,20(sp)
80016d58:	10810cc4 	addi	r2,r2,1075
80016d5c:	a8ab883a 	add	r21,r21,r2
80016d60:	1885883a 	add	r2,r3,r2
80016d64:	1829883a 	mov	r20,r3
80016d68:	dc800717 	ldw	r18,28(sp)
80016d6c:	d8800515 	stw	r2,20(sp)
80016d70:	003e9f06 	br	800167f0 <_gp+0xfffe5a7c>
80016d74:	00800044 	movi	r2,1
80016d78:	d8800615 	stw	r2,24(sp)
80016d7c:	d8802017 	ldw	r2,128(sp)
80016d80:	0080a20e 	bge	zero,r2,8001700c <_dtoa_r+0x1228>
80016d84:	d8800a15 	stw	r2,40(sp)
80016d88:	d8800415 	stw	r2,16(sp)
80016d8c:	100d883a 	mov	r6,r2
80016d90:	003cd406 	br	800160e4 <_gp+0xfffe5370>
80016d94:	d8800417 	ldw	r2,16(sp)
80016d98:	00be0016 	blt	zero,r2,8001659c <_gp+0xfffe5828>
80016d9c:	1000981e 	bne	r2,zero,80017000 <_dtoa_r+0x121c>
80016da0:	8809883a 	mov	r4,r17
80016da4:	900b883a 	mov	r5,r18
80016da8:	000d883a 	mov	r6,zero
80016dac:	01d00534 	movhi	r7,16404
80016db0:	000e8b00 	call	8000e8b0 <__muldf3>
80016db4:	d9800117 	ldw	r6,4(sp)
80016db8:	980f883a 	mov	r7,r19
80016dbc:	1009883a 	mov	r4,r2
80016dc0:	180b883a 	mov	r5,r3
80016dc4:	000e7d00 	call	8000e7d0 <__gedf2>
80016dc8:	0025883a 	mov	r18,zero
80016dcc:	0023883a 	mov	r17,zero
80016dd0:	1000570e 	bge	r2,zero,80016f30 <_dtoa_r+0x114c>
80016dd4:	00800c44 	movi	r2,49
80016dd8:	b0800005 	stb	r2,0(r22)
80016ddc:	d8800317 	ldw	r2,12(sp)
80016de0:	b7000044 	addi	fp,r22,1
80016de4:	10800044 	addi	r2,r2,1
80016de8:	d8800315 	stw	r2,12(sp)
80016dec:	900b883a 	mov	r5,r18
80016df0:	8009883a 	mov	r4,r16
80016df4:	0018a800 	call	80018a80 <_Bfree>
80016df8:	883f801e 	bne	r17,zero,80016bfc <_gp+0xfffe5e88>
80016dfc:	003f8206 	br	80016c08 <_gp+0xfffe5e94>
80016e00:	d8800317 	ldw	r2,12(sp)
80016e04:	10011226 	beq	r2,zero,80017250 <_dtoa_r+0x146c>
80016e08:	0089c83a 	sub	r4,zero,r2
80016e0c:	208003cc 	andi	r2,r4,15
80016e10:	100690fa 	slli	r3,r2,3
80016e14:	00a000b4 	movhi	r2,32770
80016e18:	109ba804 	addi	r2,r2,28320
80016e1c:	10c5883a 	add	r2,r2,r3
80016e20:	2011d13a 	srai	r8,r4,4
80016e24:	11800017 	ldw	r6,0(r2)
80016e28:	11c00117 	ldw	r7,4(r2)
80016e2c:	d9000117 	ldw	r4,4(sp)
80016e30:	980b883a 	mov	r5,r19
80016e34:	da000c15 	stw	r8,48(sp)
80016e38:	000e8b00 	call	8000e8b0 <__muldf3>
80016e3c:	da000c17 	ldw	r8,48(sp)
80016e40:	1025883a 	mov	r18,r2
80016e44:	1829883a 	mov	r20,r3
80016e48:	40017d26 	beq	r8,zero,80017440 <_dtoa_r+0x165c>
80016e4c:	072000b4 	movhi	fp,32770
80016e50:	e71b9e04 	addi	fp,fp,28280
80016e54:	dc000c15 	stw	r16,48(sp)
80016e58:	000f883a 	mov	r7,zero
80016e5c:	e021883a 	mov	r16,fp
80016e60:	04400084 	movi	r17,2
80016e64:	4039883a 	mov	fp,r8
80016e68:	e180004c 	andi	r6,fp,1
80016e6c:	1009883a 	mov	r4,r2
80016e70:	e039d07a 	srai	fp,fp,1
80016e74:	180b883a 	mov	r5,r3
80016e78:	30000526 	beq	r6,zero,80016e90 <_dtoa_r+0x10ac>
80016e7c:	81c00117 	ldw	r7,4(r16)
80016e80:	81800017 	ldw	r6,0(r16)
80016e84:	8c400044 	addi	r17,r17,1
80016e88:	000e8b00 	call	8000e8b0 <__muldf3>
80016e8c:	01c00044 	movi	r7,1
80016e90:	84000204 	addi	r16,r16,8
80016e94:	e03ff41e 	bne	fp,zero,80016e68 <_gp+0xfffe60f4>
80016e98:	39c03fcc 	andi	r7,r7,255
80016e9c:	dc000c17 	ldw	r16,48(sp)
80016ea0:	383d1326 	beq	r7,zero,800162f0 <_gp+0xfffe557c>
80016ea4:	1025883a 	mov	r18,r2
80016ea8:	1829883a 	mov	r20,r3
80016eac:	003d1006 	br	800162f0 <_gp+0xfffe557c>
80016eb0:	d8800117 	ldw	r2,4(sp)
80016eb4:	103f7e26 	beq	r2,zero,80016cb0 <_gp+0xfffe5f3c>
80016eb8:	003f6806 	br	80016c5c <_gp+0xfffe5ee8>
80016ebc:	89400117 	ldw	r5,4(r17)
80016ec0:	8009883a 	mov	r4,r16
80016ec4:	00189dc0 	call	800189dc <_Balloc>
80016ec8:	89800417 	ldw	r6,16(r17)
80016ecc:	89400304 	addi	r5,r17,12
80016ed0:	11000304 	addi	r4,r2,12
80016ed4:	31800084 	addi	r6,r6,2
80016ed8:	300c90ba 	slli	r6,r6,2
80016edc:	1027883a 	mov	r19,r2
80016ee0:	00104e80 	call	800104e8 <memcpy>
80016ee4:	01800044 	movi	r6,1
80016ee8:	980b883a 	mov	r5,r19
80016eec:	8009883a 	mov	r4,r16
80016ef0:	00191300 	call	80019130 <__lshift>
80016ef4:	1029883a 	mov	r20,r2
80016ef8:	003e7f06 	br	800168f8 <_gp+0xfffe5b84>
80016efc:	0018aa40 	call	80018aa4 <__multadd>
80016f00:	1023883a 	mov	r17,r2
80016f04:	1029883a 	mov	r20,r2
80016f08:	003ec206 	br	80016a14 <_gp+0xfffe5ca0>
80016f0c:	8009883a 	mov	r4,r16
80016f10:	0018a800 	call	80018a80 <_Bfree>
80016f14:	00800044 	movi	r2,1
80016f18:	003ea006 	br	8001699c <_gp+0xfffe5c28>
80016f1c:	d8800217 	ldw	r2,8(sp)
80016f20:	108000d0 	cmplti	r2,r2,3
80016f24:	103e6e1e 	bne	r2,zero,800168e0 <_gp+0xfffe5b6c>
80016f28:	d8800417 	ldw	r2,16(sp)
80016f2c:	1000bd26 	beq	r2,zero,80017224 <_dtoa_r+0x1440>
80016f30:	d8802017 	ldw	r2,128(sp)
80016f34:	b039883a 	mov	fp,r22
80016f38:	0084303a 	nor	r2,zero,r2
80016f3c:	d8800315 	stw	r2,12(sp)
80016f40:	003faa06 	br	80016dec <_gp+0xfffe6078>
80016f44:	188000a0 	cmpeqi	r2,r3,2
80016f48:	10010e26 	beq	r2,zero,80017384 <_dtoa_r+0x15a0>
80016f4c:	d8000615 	stw	zero,24(sp)
80016f50:	003f8a06 	br	80016d7c <_gp+0xfffe6008>
80016f54:	d8800317 	ldw	r2,12(sp)
80016f58:	10800044 	addi	r2,r2,1
80016f5c:	d8800315 	stw	r2,12(sp)
80016f60:	00800c44 	movi	r2,49
80016f64:	b0800005 	stb	r2,0(r22)
80016f68:	003f1b06 	br	80016bd8 <_gp+0xfffe5e64>
80016f6c:	8809883a 	mov	r4,r17
80016f70:	001f8480 	call	8001f848 <__floatsidf>
80016f74:	900d883a 	mov	r6,r18
80016f78:	a00f883a 	mov	r7,r20
80016f7c:	1009883a 	mov	r4,r2
80016f80:	180b883a 	mov	r5,r3
80016f84:	000e8b00 	call	8000e8b0 <__muldf3>
80016f88:	000d883a 	mov	r6,zero
80016f8c:	01d00734 	movhi	r7,16412
80016f90:	1009883a 	mov	r4,r2
80016f94:	180b883a 	mov	r5,r3
80016f98:	000d6440 	call	8000d644 <__adddf3>
80016f9c:	d8800c15 	stw	r2,48(sp)
80016fa0:	00bf3034 	movhi	r2,64704
80016fa4:	1885883a 	add	r2,r3,r2
80016fa8:	d8800d15 	stw	r2,52(sp)
80016fac:	9009883a 	mov	r4,r18
80016fb0:	a00b883a 	mov	r5,r20
80016fb4:	000d883a 	mov	r6,zero
80016fb8:	01d00534 	movhi	r7,16404
80016fbc:	000ef8c0 	call	8000ef8c <__subdf3>
80016fc0:	df000c17 	ldw	fp,48(sp)
80016fc4:	dd000d17 	ldw	r20,52(sp)
80016fc8:	1009883a 	mov	r4,r2
80016fcc:	e00d883a 	mov	r6,fp
80016fd0:	a00f883a 	mov	r7,r20
80016fd4:	180b883a 	mov	r5,r3
80016fd8:	1025883a 	mov	r18,r2
80016fdc:	1823883a 	mov	r17,r3
80016fe0:	000e7d00 	call	8000e7d0 <__gedf2>
80016fe4:	00807a16 	blt	zero,r2,800171d0 <_dtoa_r+0x13ec>
80016fe8:	a1e0003c 	xorhi	r7,r20,32768
80016fec:	e00d883a 	mov	r6,fp
80016ff0:	9009883a 	mov	r4,r18
80016ff4:	880b883a 	mov	r5,r17
80016ff8:	001f7140 	call	8001f714 <__ledf2>
80016ffc:	103d5a0e 	bge	r2,zero,80016568 <_gp+0xfffe57f4>
80017000:	0025883a 	mov	r18,zero
80017004:	0023883a 	mov	r17,zero
80017008:	003fc906 	br	80016f30 <_gp+0xfffe61bc>
8001700c:	00800044 	movi	r2,1
80017010:	04800044 	movi	r18,1
80017014:	d8800415 	stw	r2,16(sp)
80017018:	d8802015 	stw	r2,128(sp)
8001701c:	003c7706 	br	800161fc <_gp+0xfffe5488>
80017020:	d8000615 	stw	zero,24(sp)
80017024:	003c2606 	br	800160c0 <_gp+0xfffe534c>
80017028:	d9800717 	ldw	r6,28(sp)
8001702c:	b80b883a 	mov	r5,r23
80017030:	8009883a 	mov	r4,r16
80017034:	001900c0 	call	8001900c <__pow5mult>
80017038:	102f883a 	mov	r23,r2
8001703c:	003e0406 	br	80016850 <_gp+0xfffe5adc>
80017040:	dd800117 	ldw	r22,4(sp)
80017044:	dc000217 	ldw	r16,8(sp)
80017048:	003eef06 	br	80016c08 <_gp+0xfffe5e94>
8001704c:	d8800717 	ldw	r2,28(sp)
80017050:	d8c00817 	ldw	r3,32(sp)
80017054:	dc800715 	stw	r18,28(sp)
80017058:	9085c83a 	sub	r2,r18,r2
8001705c:	1885883a 	add	r2,r3,r2
80017060:	d8800815 	stw	r2,32(sp)
80017064:	0025883a 	mov	r18,zero
80017068:	003dda06 	br	800167d4 <_gp+0xfffe5a60>
8001706c:	b02b883a 	mov	r21,r22
80017070:	e011883a 	mov	r8,fp
80017074:	dd800717 	ldw	r22,28(sp)
80017078:	9f000044 	addi	fp,r19,1
8001707c:	00809816 	blt	zero,r2,800172e0 <_dtoa_r+0x14fc>
80017080:	882b883a 	mov	r21,r17
80017084:	9a000005 	stb	r8,0(r19)
80017088:	a023883a 	mov	r17,r20
8001708c:	003ed206 	br	80016bd8 <_gp+0xfffe5e64>
80017090:	d8800117 	ldw	r2,4(sp)
80017094:	dcc00d15 	stw	r19,52(sp)
80017098:	04400084 	movi	r17,2
8001709c:	d8800c15 	stw	r2,48(sp)
800170a0:	003c7a06 	br	8001628c <_gp+0xfffe5518>
800170a4:	0005883a 	mov	r2,zero
800170a8:	003f0c06 	br	80016cdc <_gp+0xfffe5f68>
800170ac:	e011883a 	mov	r8,fp
800170b0:	40800e58 	cmpnei	r2,r8,57
800170b4:	a839883a 	mov	fp,r21
800170b8:	dd800717 	ldw	r22,28(sp)
800170bc:	10009726 	beq	r2,zero,8001731c <_dtoa_r+0x1538>
800170c0:	42000044 	addi	r8,r8,1
800170c4:	003fee06 	br	80017080 <_gp+0xfffe630c>
800170c8:	d8800517 	ldw	r2,20(sp)
800170cc:	d8c00417 	ldw	r3,16(sp)
800170d0:	10e9c83a 	sub	r20,r2,r3
800170d4:	003dc606 	br	800167f0 <_gp+0xfffe5a7c>
800170d8:	e011883a 	mov	r8,fp
800170dc:	dd800717 	ldw	r22,28(sp)
800170e0:	a839883a 	mov	fp,r21
800170e4:	882b883a 	mov	r21,r17
800170e8:	a023883a 	mov	r17,r20
800170ec:	003e9506 	br	80016b44 <_gp+0xfffe5dd0>
800170f0:	d9000c17 	ldw	r4,48(sp)
800170f4:	d9400d17 	ldw	r5,52(sp)
800170f8:	000e8b00 	call	8000e8b0 <__muldf3>
800170fc:	d8800c15 	stw	r2,48(sp)
80017100:	d8800f17 	ldw	r2,60(sp)
80017104:	d8c00d15 	stw	r3,52(sp)
80017108:	b0800005 	stb	r2,0(r22)
8001710c:	d8800e17 	ldw	r2,56(sp)
80017110:	10800058 	cmpnei	r2,r2,1
80017114:	10001f26 	beq	r2,zero,80017194 <_dtoa_r+0x13b0>
80017118:	d8800e17 	ldw	r2,56(sp)
8001711c:	8807883a 	mov	r3,r17
80017120:	dc000e15 	stw	r16,56(sp)
80017124:	b089883a 	add	r4,r22,r2
80017128:	2021883a 	mov	r16,r4
8001712c:	9005883a 	mov	r2,r18
80017130:	000d883a 	mov	r6,zero
80017134:	01d00934 	movhi	r7,16420
80017138:	1009883a 	mov	r4,r2
8001713c:	180b883a 	mov	r5,r3
80017140:	000e8b00 	call	8000e8b0 <__muldf3>
80017144:	180b883a 	mov	r5,r3
80017148:	1009883a 	mov	r4,r2
8001714c:	1825883a 	mov	r18,r3
80017150:	1023883a 	mov	r17,r2
80017154:	000f8600 	call	8000f860 <__fixdfsi>
80017158:	1009883a 	mov	r4,r2
8001715c:	1029883a 	mov	r20,r2
80017160:	001f8480 	call	8001f848 <__floatsidf>
80017164:	100d883a 	mov	r6,r2
80017168:	180f883a 	mov	r7,r3
8001716c:	8809883a 	mov	r4,r17
80017170:	900b883a 	mov	r5,r18
80017174:	e7000044 	addi	fp,fp,1
80017178:	a5000c04 	addi	r20,r20,48
8001717c:	000ef8c0 	call	8000ef8c <__subdf3>
80017180:	e53fffc5 	stb	r20,-1(fp)
80017184:	e43fea1e 	bne	fp,r16,80017130 <_gp+0xfffe63bc>
80017188:	dc000e17 	ldw	r16,56(sp)
8001718c:	1025883a 	mov	r18,r2
80017190:	1823883a 	mov	r17,r3
80017194:	d9000c17 	ldw	r4,48(sp)
80017198:	d9400d17 	ldw	r5,52(sp)
8001719c:	000d883a 	mov	r6,zero
800171a0:	01cff834 	movhi	r7,16352
800171a4:	000d6440 	call	8000d644 <__adddf3>
800171a8:	100d883a 	mov	r6,r2
800171ac:	180f883a 	mov	r7,r3
800171b0:	9009883a 	mov	r4,r18
800171b4:	880b883a 	mov	r5,r17
800171b8:	000e7d00 	call	8000e7d0 <__gedf2>
800171bc:	00805d0e 	bge	zero,r2,80017334 <_dtoa_r+0x1550>
800171c0:	d8801217 	ldw	r2,72(sp)
800171c4:	e23fffc3 	ldbu	r8,-1(fp)
800171c8:	d8800315 	stw	r2,12(sp)
800171cc:	003d6e06 	br	80016788 <_gp+0xfffe5a14>
800171d0:	0025883a 	mov	r18,zero
800171d4:	0023883a 	mov	r17,zero
800171d8:	003efe06 	br	80016dd4 <_gp+0xfffe6060>
800171dc:	00800c04 	movi	r2,48
800171e0:	b0800005 	stb	r2,0(r22)
800171e4:	d8800317 	ldw	r2,12(sp)
800171e8:	e23fffc3 	ldbu	r8,-1(fp)
800171ec:	b007883a 	mov	r3,r22
800171f0:	10800044 	addi	r2,r2,1
800171f4:	d8800315 	stw	r2,12(sp)
800171f8:	003d6906 	br	800167a0 <_gp+0xfffe5a2c>
800171fc:	d8c01417 	ldw	r3,80(sp)
80017200:	d9000517 	ldw	r4,20(sp)
80017204:	00800d84 	movi	r2,54
80017208:	10c5c83a 	sub	r2,r2,r3
8001720c:	a8ab883a 	add	r21,r21,r2
80017210:	2085883a 	add	r2,r4,r2
80017214:	2029883a 	mov	r20,r4
80017218:	dc800717 	ldw	r18,28(sp)
8001721c:	d8800515 	stw	r2,20(sp)
80017220:	003d7306 	br	800167f0 <_gp+0xfffe5a7c>
80017224:	900b883a 	mov	r5,r18
80017228:	8009883a 	mov	r4,r16
8001722c:	000f883a 	mov	r7,zero
80017230:	01800144 	movi	r6,5
80017234:	0018aa40 	call	80018aa4 <__multadd>
80017238:	100b883a 	mov	r5,r2
8001723c:	b809883a 	mov	r4,r23
80017240:	1025883a 	mov	r18,r2
80017244:	00192740 	call	80019274 <__mcmp>
80017248:	00bee216 	blt	zero,r2,80016dd4 <_gp+0xfffe6060>
8001724c:	003f3806 	br	80016f30 <_gp+0xfffe61bc>
80017250:	dc800117 	ldw	r18,4(sp)
80017254:	9829883a 	mov	r20,r19
80017258:	04400084 	movi	r17,2
8001725c:	003c2406 	br	800162f0 <_gp+0xfffe557c>
80017260:	d8800417 	ldw	r2,16(sp)
80017264:	103f4126 	beq	r2,zero,80016f6c <_gp+0xfffe61f8>
80017268:	df000a17 	ldw	fp,40(sp)
8001726c:	073cbe0e 	bge	zero,fp,80016568 <_gp+0xfffe57f4>
80017270:	a00b883a 	mov	r5,r20
80017274:	000d883a 	mov	r6,zero
80017278:	01d00934 	movhi	r7,16420
8001727c:	9009883a 	mov	r4,r18
80017280:	000e8b00 	call	8000e8b0 <__muldf3>
80017284:	89000044 	addi	r4,r17,1
80017288:	1025883a 	mov	r18,r2
8001728c:	1829883a 	mov	r20,r3
80017290:	001f8480 	call	8001f848 <__floatsidf>
80017294:	900d883a 	mov	r6,r18
80017298:	a00f883a 	mov	r7,r20
8001729c:	1009883a 	mov	r4,r2
800172a0:	180b883a 	mov	r5,r3
800172a4:	000e8b00 	call	8000e8b0 <__muldf3>
800172a8:	000d883a 	mov	r6,zero
800172ac:	01d00734 	movhi	r7,16412
800172b0:	1009883a 	mov	r4,r2
800172b4:	180b883a 	mov	r5,r3
800172b8:	000d6440 	call	8000d644 <__adddf3>
800172bc:	d8800c15 	stw	r2,48(sp)
800172c0:	d8800317 	ldw	r2,12(sp)
800172c4:	df000e15 	stw	fp,56(sp)
800172c8:	10bfffc4 	addi	r2,r2,-1
800172cc:	d8801215 	stw	r2,72(sp)
800172d0:	00bf3034 	movhi	r2,64704
800172d4:	1885883a 	add	r2,r3,r2
800172d8:	d8800d15 	stw	r2,52(sp)
800172dc:	003c2206 	br	80016368 <_gp+0xfffe55f4>
800172e0:	b80b883a 	mov	r5,r23
800172e4:	01800044 	movi	r6,1
800172e8:	8009883a 	mov	r4,r16
800172ec:	da000115 	stw	r8,4(sp)
800172f0:	00191300 	call	80019130 <__lshift>
800172f4:	900b883a 	mov	r5,r18
800172f8:	1009883a 	mov	r4,r2
800172fc:	102f883a 	mov	r23,r2
80017300:	00192740 	call	80019274 <__mcmp>
80017304:	da000117 	ldw	r8,4(sp)
80017308:	0080390e 	bge	zero,r2,800173f0 <_dtoa_r+0x160c>
8001730c:	42000e60 	cmpeqi	r8,r8,57
80017310:	4000021e 	bne	r8,zero,8001731c <_dtoa_r+0x1538>
80017314:	aa000c44 	addi	r8,r21,49
80017318:	003f5906 	br	80017080 <_gp+0xfffe630c>
8001731c:	00800e44 	movi	r2,57
80017320:	882b883a 	mov	r21,r17
80017324:	98800005 	stb	r2,0(r19)
80017328:	a023883a 	mov	r17,r20
8001732c:	00c00e44 	movi	r3,57
80017330:	003e2106 	br	80016bb8 <_gp+0xfffe5e44>
80017334:	d9800c17 	ldw	r6,48(sp)
80017338:	d9c00d17 	ldw	r7,52(sp)
8001733c:	0009883a 	mov	r4,zero
80017340:	014ff834 	movhi	r5,16352
80017344:	000ef8c0 	call	8000ef8c <__subdf3>
80017348:	100d883a 	mov	r6,r2
8001734c:	180f883a 	mov	r7,r3
80017350:	9009883a 	mov	r4,r18
80017354:	880b883a 	mov	r5,r17
80017358:	001f7140 	call	8001f714 <__ledf2>
8001735c:	10000216 	blt	r2,zero,80017368 <_dtoa_r+0x1584>
80017360:	003c8106 	br	80016568 <_gp+0xfffe57f4>
80017364:	1839883a 	mov	fp,r3
80017368:	e0bfffc7 	ldb	r2,-1(fp)
8001736c:	e0ffffc4 	addi	r3,fp,-1
80017370:	10800c20 	cmpeqi	r2,r2,48
80017374:	103ffb1e 	bne	r2,zero,80017364 <_gp+0xfffe65f0>
80017378:	d8801217 	ldw	r2,72(sp)
8001737c:	d8800315 	stw	r2,12(sp)
80017380:	003e2106 	br	80016c08 <_gp+0xfffe5e94>
80017384:	80001115 	stw	zero,68(r16)
80017388:	000b883a 	mov	r5,zero
8001738c:	8009883a 	mov	r4,r16
80017390:	00189dc0 	call	800189dc <_Balloc>
80017394:	102d883a 	mov	r22,r2
80017398:	80801015 	stw	r2,64(r16)
8001739c:	00bfffc4 	movi	r2,-1
800173a0:	d8800415 	stw	r2,16(sp)
800173a4:	d8800a15 	stw	r2,40(sp)
800173a8:	00800044 	movi	r2,1
800173ac:	d8002015 	stw	zero,128(sp)
800173b0:	d8800615 	stw	r2,24(sp)
800173b4:	003c6c06 	br	80016568 <_gp+0xfffe57f4>
800173b8:	ddc00d17 	ldw	r23,52(sp)
800173bc:	9811883a 	mov	r8,r19
800173c0:	d8801217 	ldw	r2,72(sp)
800173c4:	d8800315 	stw	r2,12(sp)
800173c8:	003cef06 	br	80016788 <_gp+0xfffe5a14>
800173cc:	e0800e60 	cmpeqi	r2,fp,57
800173d0:	b007883a 	mov	r3,r22
800173d4:	e011883a 	mov	r8,fp
800173d8:	dd800717 	ldw	r22,28(sp)
800173dc:	9f000044 	addi	fp,r19,1
800173e0:	103fce1e 	bne	r2,zero,8001731c <_gp+0xfffe65a8>
800173e4:	057f260e 	bge	zero,r21,80017080 <_gp+0xfffe630c>
800173e8:	1a000c44 	addi	r8,r3,49
800173ec:	003f2406 	br	80017080 <_gp+0xfffe630c>
800173f0:	103f231e 	bne	r2,zero,80017080 <_gp+0xfffe630c>
800173f4:	4080004c 	andi	r2,r8,1
800173f8:	103f2126 	beq	r2,zero,80017080 <_gp+0xfffe630c>
800173fc:	003fc306 	br	8001730c <_gp+0xfffe6598>
80017400:	880b883a 	mov	r5,r17
80017404:	000f883a 	mov	r7,zero
80017408:	01800284 	movi	r6,10
8001740c:	8009883a 	mov	r4,r16
80017410:	0018aa40 	call	80018aa4 <__multadd>
80017414:	1023883a 	mov	r17,r2
80017418:	d8800a17 	ldw	r2,40(sp)
8001741c:	00800a0e 	bge	zero,r2,80017448 <_dtoa_r+0x1664>
80017420:	d8800415 	stw	r2,16(sp)
80017424:	053d310e 	bge	zero,r20,800168ec <_gp+0xfffe5b78>
80017428:	003e4206 	br	80016d34 <_gp+0xfffe5fc0>
8001742c:	d8800217 	ldw	r2,8(sp)
80017430:	108000c8 	cmpgei	r2,r2,3
80017434:	1000121e 	bne	r2,zero,80017480 <_dtoa_r+0x169c>
80017438:	d8800a17 	ldw	r2,40(sp)
8001743c:	003dae06 	br	80016af8 <_gp+0xfffe5d84>
80017440:	04400084 	movi	r17,2
80017444:	003baa06 	br	800162f0 <_gp+0xfffe557c>
80017448:	d8800217 	ldw	r2,8(sp)
8001744c:	108000c8 	cmpgei	r2,r2,3
80017450:	10000b1e 	bne	r2,zero,80017480 <_dtoa_r+0x169c>
80017454:	d8800a17 	ldw	r2,40(sp)
80017458:	003ff106 	br	80017420 <_gp+0xfffe66ac>
8001745c:	000b883a 	mov	r5,zero
80017460:	003b6a06 	br	8001620c <_gp+0xfffe5498>
80017464:	18c00120 	cmpeqi	r3,r3,4
80017468:	183d111e 	bne	r3,zero,800168b0 <_gp+0xfffe5b3c>
8001746c:	00c00f04 	movi	r3,60
80017470:	1885c83a 	sub	r2,r3,r2
80017474:	003d0906 	br	8001689c <_gp+0xfffe5b28>
80017478:	b59b7504 	addi	r22,r22,28116
8001747c:	003a8a06 	br	80015ea8 <_gp+0xfffe5134>
80017480:	d8800a17 	ldw	r2,40(sp)
80017484:	d8800415 	stw	r2,16(sp)
80017488:	003ea706 	br	80016f28 <_gp+0xfffe61b4>

8001748c <__sflush_r>:
8001748c:	2880030b 	ldhu	r2,12(r5)
80017490:	defffb04 	addi	sp,sp,-20
80017494:	dcc00315 	stw	r19,12(sp)
80017498:	dc000015 	stw	r16,0(sp)
8001749c:	dfc00415 	stw	ra,16(sp)
800174a0:	dc800215 	stw	r18,8(sp)
800174a4:	dc400115 	stw	r17,4(sp)
800174a8:	10c0020c 	andi	r3,r2,8
800174ac:	2821883a 	mov	r16,r5
800174b0:	2027883a 	mov	r19,r4
800174b4:	1800351e 	bne	r3,zero,8001758c <__sflush_r+0x100>
800174b8:	28c00117 	ldw	r3,4(r5)
800174bc:	10820014 	ori	r2,r2,2048
800174c0:	2880030d 	sth	r2,12(r5)
800174c4:	00c04b0e 	bge	zero,r3,800175f4 <__sflush_r+0x168>
800174c8:	82000a17 	ldw	r8,40(r16)
800174cc:	40004b26 	beq	r8,zero,800175fc <__sflush_r+0x170>
800174d0:	9c400017 	ldw	r17,0(r19)
800174d4:	10c4000c 	andi	r3,r2,4096
800174d8:	98000015 	stw	zero,0(r19)
800174dc:	81400717 	ldw	r5,28(r16)
800174e0:	1800701e 	bne	r3,zero,800176a4 <__sflush_r+0x218>
800174e4:	000d883a 	mov	r6,zero
800174e8:	01c00044 	movi	r7,1
800174ec:	9809883a 	mov	r4,r19
800174f0:	403ee83a 	callr	r8
800174f4:	100d883a 	mov	r6,r2
800174f8:	10bfffd8 	cmpnei	r2,r2,-1
800174fc:	10004926 	beq	r2,zero,80017624 <__sflush_r+0x198>
80017500:	8080030b 	ldhu	r2,12(r16)
80017504:	82000a17 	ldw	r8,40(r16)
80017508:	81400717 	ldw	r5,28(r16)
8001750c:	10c0010c 	andi	r3,r2,4
80017510:	18000626 	beq	r3,zero,8001752c <__sflush_r+0xa0>
80017514:	80c00117 	ldw	r3,4(r16)
80017518:	80800c17 	ldw	r2,48(r16)
8001751c:	30cdc83a 	sub	r6,r6,r3
80017520:	10000226 	beq	r2,zero,8001752c <__sflush_r+0xa0>
80017524:	80800f17 	ldw	r2,60(r16)
80017528:	308dc83a 	sub	r6,r6,r2
8001752c:	000f883a 	mov	r7,zero
80017530:	9809883a 	mov	r4,r19
80017534:	403ee83a 	callr	r8
80017538:	10ffffd8 	cmpnei	r3,r2,-1
8001753c:	18004226 	beq	r3,zero,80017648 <__sflush_r+0x1bc>
80017540:	80c0030b 	ldhu	r3,12(r16)
80017544:	81000417 	ldw	r4,16(r16)
80017548:	80000115 	stw	zero,4(r16)
8001754c:	197dffcc 	andi	r5,r3,63487
80017550:	8140030d 	sth	r5,12(r16)
80017554:	81000015 	stw	r4,0(r16)
80017558:	18c4000c 	andi	r3,r3,4096
8001755c:	18000126 	beq	r3,zero,80017564 <__sflush_r+0xd8>
80017560:	80801415 	stw	r2,80(r16)
80017564:	81400c17 	ldw	r5,48(r16)
80017568:	9c400015 	stw	r17,0(r19)
8001756c:	28002326 	beq	r5,zero,800175fc <__sflush_r+0x170>
80017570:	80801004 	addi	r2,r16,64
80017574:	28800226 	beq	r5,r2,80017580 <__sflush_r+0xf4>
80017578:	9809883a 	mov	r4,r19
8001757c:	0017bb00 	call	80017bb0 <_free_r>
80017580:	80000c15 	stw	zero,48(r16)
80017584:	0005883a 	mov	r2,zero
80017588:	00001d06 	br	80017600 <__sflush_r+0x174>
8001758c:	2c800417 	ldw	r18,16(r5)
80017590:	90001a26 	beq	r18,zero,800175fc <__sflush_r+0x170>
80017594:	2c400017 	ldw	r17,0(r5)
80017598:	108000cc 	andi	r2,r2,3
8001759c:	2c800015 	stw	r18,0(r5)
800175a0:	8ca3c83a 	sub	r17,r17,r18
800175a4:	10001d26 	beq	r2,zero,8001761c <__sflush_r+0x190>
800175a8:	0005883a 	mov	r2,zero
800175ac:	80800215 	stw	r2,8(r16)
800175b0:	04400316 	blt	zero,r17,800175c0 <__sflush_r+0x134>
800175b4:	00001106 	br	800175fc <__sflush_r+0x170>
800175b8:	90a5883a 	add	r18,r18,r2
800175bc:	04400f0e 	bge	zero,r17,800175fc <__sflush_r+0x170>
800175c0:	80800917 	ldw	r2,36(r16)
800175c4:	81400717 	ldw	r5,28(r16)
800175c8:	880f883a 	mov	r7,r17
800175cc:	900d883a 	mov	r6,r18
800175d0:	9809883a 	mov	r4,r19
800175d4:	103ee83a 	callr	r2
800175d8:	88a3c83a 	sub	r17,r17,r2
800175dc:	00bff616 	blt	zero,r2,800175b8 <_gp+0xfffe6844>
800175e0:	80c0030b 	ldhu	r3,12(r16)
800175e4:	00bfffc4 	movi	r2,-1
800175e8:	18c01014 	ori	r3,r3,64
800175ec:	80c0030d 	sth	r3,12(r16)
800175f0:	00000306 	br	80017600 <__sflush_r+0x174>
800175f4:	28c00f17 	ldw	r3,60(r5)
800175f8:	00ffb316 	blt	zero,r3,800174c8 <_gp+0xfffe6754>
800175fc:	0005883a 	mov	r2,zero
80017600:	dfc00417 	ldw	ra,16(sp)
80017604:	dcc00317 	ldw	r19,12(sp)
80017608:	dc800217 	ldw	r18,8(sp)
8001760c:	dc400117 	ldw	r17,4(sp)
80017610:	dc000017 	ldw	r16,0(sp)
80017614:	dec00504 	addi	sp,sp,20
80017618:	f800283a 	ret
8001761c:	28800517 	ldw	r2,20(r5)
80017620:	003fe206 	br	800175ac <_gp+0xfffe6838>
80017624:	98800017 	ldw	r2,0(r19)
80017628:	103fb526 	beq	r2,zero,80017500 <_gp+0xfffe678c>
8001762c:	10c00760 	cmpeqi	r3,r2,29
80017630:	1800021e 	bne	r3,zero,8001763c <__sflush_r+0x1b0>
80017634:	10800598 	cmpnei	r2,r2,22
80017638:	103fe91e 	bne	r2,zero,800175e0 <_gp+0xfffe686c>
8001763c:	9c400015 	stw	r17,0(r19)
80017640:	0005883a 	mov	r2,zero
80017644:	003fee06 	br	80017600 <_gp+0xfffe688c>
80017648:	99400017 	ldw	r5,0(r19)
8001764c:	28c007b0 	cmpltui	r3,r5,30
80017650:	18000f26 	beq	r3,zero,80017690 <__sflush_r+0x204>
80017654:	00c81034 	movhi	r3,8256
80017658:	18c00044 	addi	r3,r3,1
8001765c:	1946d83a 	srl	r3,r3,r5
80017660:	8100030b 	ldhu	r4,12(r16)
80017664:	18c0004c 	andi	r3,r3,1
80017668:	18000a26 	beq	r3,zero,80017694 <__sflush_r+0x208>
8001766c:	80c00417 	ldw	r3,16(r16)
80017670:	21bdffcc 	andi	r6,r4,63487
80017674:	8180030d 	sth	r6,12(r16)
80017678:	80000115 	stw	zero,4(r16)
8001767c:	80c00015 	stw	r3,0(r16)
80017680:	2104000c 	andi	r4,r4,4096
80017684:	203fb726 	beq	r4,zero,80017564 <_gp+0xfffe67f0>
80017688:	283fb61e 	bne	r5,zero,80017564 <_gp+0xfffe67f0>
8001768c:	003fb406 	br	80017560 <_gp+0xfffe67ec>
80017690:	8100030b 	ldhu	r4,12(r16)
80017694:	21001014 	ori	r4,r4,64
80017698:	8100030d 	sth	r4,12(r16)
8001769c:	00bfffc4 	movi	r2,-1
800176a0:	003fd706 	br	80017600 <_gp+0xfffe688c>
800176a4:	81801417 	ldw	r6,80(r16)
800176a8:	003f9806 	br	8001750c <_gp+0xfffe6798>

800176ac <_fflush_r>:
800176ac:	defffd04 	addi	sp,sp,-12
800176b0:	dc000115 	stw	r16,4(sp)
800176b4:	dfc00215 	stw	ra,8(sp)
800176b8:	2021883a 	mov	r16,r4
800176bc:	20000226 	beq	r4,zero,800176c8 <_fflush_r+0x1c>
800176c0:	20800e17 	ldw	r2,56(r4)
800176c4:	10000726 	beq	r2,zero,800176e4 <_fflush_r+0x38>
800176c8:	2880030f 	ldh	r2,12(r5)
800176cc:	10000a1e 	bne	r2,zero,800176f8 <_fflush_r+0x4c>
800176d0:	0005883a 	mov	r2,zero
800176d4:	dfc00217 	ldw	ra,8(sp)
800176d8:	dc000117 	ldw	r16,4(sp)
800176dc:	dec00304 	addi	sp,sp,12
800176e0:	f800283a 	ret
800176e4:	d9400015 	stw	r5,0(sp)
800176e8:	0017a4c0 	call	80017a4c <__sinit>
800176ec:	d9400017 	ldw	r5,0(sp)
800176f0:	2880030f 	ldh	r2,12(r5)
800176f4:	103ff626 	beq	r2,zero,800176d0 <_gp+0xfffe695c>
800176f8:	8009883a 	mov	r4,r16
800176fc:	dfc00217 	ldw	ra,8(sp)
80017700:	dc000117 	ldw	r16,4(sp)
80017704:	dec00304 	addi	sp,sp,12
80017708:	001748c1 	jmpi	8001748c <__sflush_r>

8001770c <fflush>:
8001770c:	200b883a 	mov	r5,r4
80017710:	20000326 	beq	r4,zero,80017720 <fflush+0x14>
80017714:	00a000f4 	movhi	r2,32771
80017718:	11235e17 	ldw	r4,-29320(r2)
8001771c:	00176ac1 	jmpi	800176ac <_fflush_r>
80017720:	00a000f4 	movhi	r2,32771
80017724:	11235d17 	ldw	r4,-29324(r2)
80017728:	01600074 	movhi	r5,32769
8001772c:	295dab04 	addi	r5,r5,30380
80017730:	00183e41 	jmpi	800183e4 <_fwalk_reent>

80017734 <__fp_lock>:
80017734:	0005883a 	mov	r2,zero
80017738:	f800283a 	ret

8001773c <_cleanup_r>:
8001773c:	016000b4 	movhi	r5,32770
80017740:	29790c04 	addi	r5,r5,-7120
80017744:	00183e41 	jmpi	800183e4 <_fwalk_reent>

80017748 <__sinit.part.0>:
80017748:	defff804 	addi	sp,sp,-32
8001774c:	00a00074 	movhi	r2,32769
80017750:	dfc00715 	stw	ra,28(sp)
80017754:	dd800615 	stw	r22,24(sp)
80017758:	dd400515 	stw	r21,20(sp)
8001775c:	dd000415 	stw	r20,16(sp)
80017760:	dcc00315 	stw	r19,12(sp)
80017764:	dc800215 	stw	r18,8(sp)
80017768:	dc400115 	stw	r17,4(sp)
8001776c:	dc000015 	stw	r16,0(sp)
80017770:	109dcf04 	addi	r2,r2,30524
80017774:	24000117 	ldw	r16,4(r4)
80017778:	20800f15 	stw	r2,60(r4)
8001777c:	20c0bb04 	addi	r3,r4,748
80017780:	008000c4 	movi	r2,3
80017784:	20c0ba15 	stw	r3,744(r4)
80017788:	2080b915 	stw	r2,740(r4)
8001778c:	2000b815 	stw	zero,736(r4)
80017790:	00800104 	movi	r2,4
80017794:	2025883a 	mov	r18,r4
80017798:	01800204 	movi	r6,8
8001779c:	81001704 	addi	r4,r16,92
800177a0:	000b883a 	mov	r5,zero
800177a4:	80001915 	stw	zero,100(r16)
800177a8:	80000015 	stw	zero,0(r16)
800177ac:	80000115 	stw	zero,4(r16)
800177b0:	80000215 	stw	zero,8(r16)
800177b4:	80800315 	stw	r2,12(r16)
800177b8:	80000415 	stw	zero,16(r16)
800177bc:	80000515 	stw	zero,20(r16)
800177c0:	80000615 	stw	zero,24(r16)
800177c4:	00105d80 	call	800105d8 <memset>
800177c8:	05a000b4 	movhi	r22,32770
800177cc:	94400217 	ldw	r17,8(r18)
800177d0:	056000b4 	movhi	r21,32770
800177d4:	052000b4 	movhi	r20,32770
800177d8:	04e000b4 	movhi	r19,32770
800177dc:	b5a8cc04 	addi	r22,r22,-23760
800177e0:	ad68e304 	addi	r21,r21,-23668
800177e4:	a5290204 	addi	r20,r20,-23544
800177e8:	9ce91904 	addi	r19,r19,-23452
800177ec:	00800074 	movhi	r2,1
800177f0:	85800815 	stw	r22,32(r16)
800177f4:	85400915 	stw	r21,36(r16)
800177f8:	85000a15 	stw	r20,40(r16)
800177fc:	84c00b15 	stw	r19,44(r16)
80017800:	84000715 	stw	r16,28(r16)
80017804:	10800284 	addi	r2,r2,10
80017808:	89001704 	addi	r4,r17,92
8001780c:	01800204 	movi	r6,8
80017810:	000b883a 	mov	r5,zero
80017814:	88001915 	stw	zero,100(r17)
80017818:	88000015 	stw	zero,0(r17)
8001781c:	88000115 	stw	zero,4(r17)
80017820:	88000215 	stw	zero,8(r17)
80017824:	88800315 	stw	r2,12(r17)
80017828:	88000415 	stw	zero,16(r17)
8001782c:	88000515 	stw	zero,20(r17)
80017830:	88000615 	stw	zero,24(r17)
80017834:	00105d80 	call	800105d8 <memset>
80017838:	94000317 	ldw	r16,12(r18)
8001783c:	008000b4 	movhi	r2,2
80017840:	8c400715 	stw	r17,28(r17)
80017844:	8d800815 	stw	r22,32(r17)
80017848:	8d400915 	stw	r21,36(r17)
8001784c:	8d000a15 	stw	r20,40(r17)
80017850:	8cc00b15 	stw	r19,44(r17)
80017854:	10800484 	addi	r2,r2,18
80017858:	80001915 	stw	zero,100(r16)
8001785c:	80000015 	stw	zero,0(r16)
80017860:	80000115 	stw	zero,4(r16)
80017864:	80000215 	stw	zero,8(r16)
80017868:	80800315 	stw	r2,12(r16)
8001786c:	80000415 	stw	zero,16(r16)
80017870:	80000515 	stw	zero,20(r16)
80017874:	80000615 	stw	zero,24(r16)
80017878:	01800204 	movi	r6,8
8001787c:	000b883a 	mov	r5,zero
80017880:	81001704 	addi	r4,r16,92
80017884:	00105d80 	call	800105d8 <memset>
80017888:	00800044 	movi	r2,1
8001788c:	84000715 	stw	r16,28(r16)
80017890:	85800815 	stw	r22,32(r16)
80017894:	85400915 	stw	r21,36(r16)
80017898:	85000a15 	stw	r20,40(r16)
8001789c:	84c00b15 	stw	r19,44(r16)
800178a0:	90800e15 	stw	r2,56(r18)
800178a4:	dfc00717 	ldw	ra,28(sp)
800178a8:	dd800617 	ldw	r22,24(sp)
800178ac:	dd400517 	ldw	r21,20(sp)
800178b0:	dd000417 	ldw	r20,16(sp)
800178b4:	dcc00317 	ldw	r19,12(sp)
800178b8:	dc800217 	ldw	r18,8(sp)
800178bc:	dc400117 	ldw	r17,4(sp)
800178c0:	dc000017 	ldw	r16,0(sp)
800178c4:	dec00804 	addi	sp,sp,32
800178c8:	f800283a 	ret

800178cc <__fp_unlock>:
800178cc:	0005883a 	mov	r2,zero
800178d0:	f800283a 	ret

800178d4 <__sfmoreglue>:
800178d4:	defffc04 	addi	sp,sp,-16
800178d8:	dc400115 	stw	r17,4(sp)
800178dc:	2c7fffc4 	addi	r17,r5,-1
800178e0:	8c401a24 	muli	r17,r17,104
800178e4:	dc800215 	stw	r18,8(sp)
800178e8:	2825883a 	mov	r18,r5
800178ec:	89401d04 	addi	r5,r17,116
800178f0:	dc000015 	stw	r16,0(sp)
800178f4:	dfc00315 	stw	ra,12(sp)
800178f8:	000fca40 	call	8000fca4 <_malloc_r>
800178fc:	1021883a 	mov	r16,r2
80017900:	10000726 	beq	r2,zero,80017920 <__sfmoreglue+0x4c>
80017904:	11000304 	addi	r4,r2,12
80017908:	10000015 	stw	zero,0(r2)
8001790c:	14800115 	stw	r18,4(r2)
80017910:	11000215 	stw	r4,8(r2)
80017914:	89801a04 	addi	r6,r17,104
80017918:	000b883a 	mov	r5,zero
8001791c:	00105d80 	call	800105d8 <memset>
80017920:	8005883a 	mov	r2,r16
80017924:	dfc00317 	ldw	ra,12(sp)
80017928:	dc800217 	ldw	r18,8(sp)
8001792c:	dc400117 	ldw	r17,4(sp)
80017930:	dc000017 	ldw	r16,0(sp)
80017934:	dec00404 	addi	sp,sp,16
80017938:	f800283a 	ret

8001793c <__sfp>:
8001793c:	defffc04 	addi	sp,sp,-16
80017940:	00a000f4 	movhi	r2,32771
80017944:	dc400115 	stw	r17,4(sp)
80017948:	14635d17 	ldw	r17,-29324(r2)
8001794c:	dc800215 	stw	r18,8(sp)
80017950:	dfc00315 	stw	ra,12(sp)
80017954:	88800e17 	ldw	r2,56(r17)
80017958:	dc000015 	stw	r16,0(sp)
8001795c:	2025883a 	mov	r18,r4
80017960:	10002926 	beq	r2,zero,80017a08 <__sfp+0xcc>
80017964:	8c40b804 	addi	r17,r17,736
80017968:	88800117 	ldw	r2,4(r17)
8001796c:	8c000217 	ldw	r16,8(r17)
80017970:	10bfffc4 	addi	r2,r2,-1
80017974:	1000050e 	bge	r2,zero,8001798c <__sfp+0x50>
80017978:	00001f06 	br	800179f8 <__sfp+0xbc>
8001797c:	10bfffc4 	addi	r2,r2,-1
80017980:	10ffffd8 	cmpnei	r3,r2,-1
80017984:	84001a04 	addi	r16,r16,104
80017988:	18001b26 	beq	r3,zero,800179f8 <__sfp+0xbc>
8001798c:	80c0030f 	ldh	r3,12(r16)
80017990:	183ffa1e 	bne	r3,zero,8001797c <_gp+0xfffe6c08>
80017994:	00bffff4 	movhi	r2,65535
80017998:	10800044 	addi	r2,r2,1
8001799c:	80001915 	stw	zero,100(r16)
800179a0:	80000015 	stw	zero,0(r16)
800179a4:	80000115 	stw	zero,4(r16)
800179a8:	80000215 	stw	zero,8(r16)
800179ac:	80800315 	stw	r2,12(r16)
800179b0:	80000415 	stw	zero,16(r16)
800179b4:	80000515 	stw	zero,20(r16)
800179b8:	80000615 	stw	zero,24(r16)
800179bc:	01800204 	movi	r6,8
800179c0:	000b883a 	mov	r5,zero
800179c4:	81001704 	addi	r4,r16,92
800179c8:	00105d80 	call	800105d8 <memset>
800179cc:	80000c15 	stw	zero,48(r16)
800179d0:	80000d15 	stw	zero,52(r16)
800179d4:	80001115 	stw	zero,68(r16)
800179d8:	80001215 	stw	zero,72(r16)
800179dc:	8005883a 	mov	r2,r16
800179e0:	dfc00317 	ldw	ra,12(sp)
800179e4:	dc800217 	ldw	r18,8(sp)
800179e8:	dc400117 	ldw	r17,4(sp)
800179ec:	dc000017 	ldw	r16,0(sp)
800179f0:	dec00404 	addi	sp,sp,16
800179f4:	f800283a 	ret
800179f8:	88800017 	ldw	r2,0(r17)
800179fc:	10000526 	beq	r2,zero,80017a14 <__sfp+0xd8>
80017a00:	1023883a 	mov	r17,r2
80017a04:	003fd806 	br	80017968 <_gp+0xfffe6bf4>
80017a08:	8809883a 	mov	r4,r17
80017a0c:	00177480 	call	80017748 <__sinit.part.0>
80017a10:	003fd406 	br	80017964 <_gp+0xfffe6bf0>
80017a14:	01400104 	movi	r5,4
80017a18:	9009883a 	mov	r4,r18
80017a1c:	00178d40 	call	800178d4 <__sfmoreglue>
80017a20:	88800015 	stw	r2,0(r17)
80017a24:	103ff61e 	bne	r2,zero,80017a00 <_gp+0xfffe6c8c>
80017a28:	00800304 	movi	r2,12
80017a2c:	90800015 	stw	r2,0(r18)
80017a30:	0021883a 	mov	r16,zero
80017a34:	003fe906 	br	800179dc <_gp+0xfffe6c68>

80017a38 <_cleanup>:
80017a38:	00a000f4 	movhi	r2,32771
80017a3c:	11235d17 	ldw	r4,-29324(r2)
80017a40:	016000b4 	movhi	r5,32770
80017a44:	29790c04 	addi	r5,r5,-7120
80017a48:	00183e41 	jmpi	800183e4 <_fwalk_reent>

80017a4c <__sinit>:
80017a4c:	20800e17 	ldw	r2,56(r4)
80017a50:	10000126 	beq	r2,zero,80017a58 <__sinit+0xc>
80017a54:	f800283a 	ret
80017a58:	00177481 	jmpi	80017748 <__sinit.part.0>

80017a5c <__sfp_lock_acquire>:
80017a5c:	f800283a 	ret

80017a60 <__sfp_lock_release>:
80017a60:	f800283a 	ret

80017a64 <__sinit_lock_acquire>:
80017a64:	f800283a 	ret

80017a68 <__sinit_lock_release>:
80017a68:	f800283a 	ret

80017a6c <__fp_lock_all>:
80017a6c:	00a000f4 	movhi	r2,32771
80017a70:	11235e17 	ldw	r4,-29320(r2)
80017a74:	01600074 	movhi	r5,32769
80017a78:	295dcd04 	addi	r5,r5,30516
80017a7c:	00183401 	jmpi	80018340 <_fwalk>

80017a80 <__fp_unlock_all>:
80017a80:	00a000f4 	movhi	r2,32771
80017a84:	11235e17 	ldw	r4,-29320(r2)
80017a88:	01600074 	movhi	r5,32769
80017a8c:	295e3304 	addi	r5,r5,30924
80017a90:	00183401 	jmpi	80018340 <_fwalk>

80017a94 <_malloc_trim_r>:
80017a94:	defffb04 	addi	sp,sp,-20
80017a98:	dcc00315 	stw	r19,12(sp)
80017a9c:	04e000b4 	movhi	r19,32770
80017aa0:	dc800215 	stw	r18,8(sp)
80017aa4:	dc400115 	stw	r17,4(sp)
80017aa8:	dc000015 	stw	r16,0(sp)
80017aac:	dfc00415 	stw	ra,16(sp)
80017ab0:	2821883a 	mov	r16,r5
80017ab4:	9cdd8404 	addi	r19,r19,30224
80017ab8:	2025883a 	mov	r18,r4
80017abc:	00200200 	call	80020020 <__malloc_lock>
80017ac0:	98800217 	ldw	r2,8(r19)
80017ac4:	14400117 	ldw	r17,4(r2)
80017ac8:	00bfff04 	movi	r2,-4
80017acc:	88a2703a 	and	r17,r17,r2
80017ad0:	8c21c83a 	sub	r16,r17,r16
80017ad4:	8403fbc4 	addi	r16,r16,4079
80017ad8:	8020d33a 	srli	r16,r16,12
80017adc:	843fffc4 	addi	r16,r16,-1
80017ae0:	8020933a 	slli	r16,r16,12
80017ae4:	80840008 	cmpgei	r2,r16,4096
80017ae8:	10000626 	beq	r2,zero,80017b04 <_malloc_trim_r+0x70>
80017aec:	000b883a 	mov	r5,zero
80017af0:	9009883a 	mov	r4,r18
80017af4:	0010f2c0 	call	80010f2c <_sbrk_r>
80017af8:	98c00217 	ldw	r3,8(r19)
80017afc:	1c47883a 	add	r3,r3,r17
80017b00:	10c00a26 	beq	r2,r3,80017b2c <_malloc_trim_r+0x98>
80017b04:	9009883a 	mov	r4,r18
80017b08:	00200440 	call	80020044 <__malloc_unlock>
80017b0c:	0005883a 	mov	r2,zero
80017b10:	dfc00417 	ldw	ra,16(sp)
80017b14:	dcc00317 	ldw	r19,12(sp)
80017b18:	dc800217 	ldw	r18,8(sp)
80017b1c:	dc400117 	ldw	r17,4(sp)
80017b20:	dc000017 	ldw	r16,0(sp)
80017b24:	dec00504 	addi	sp,sp,20
80017b28:	f800283a 	ret
80017b2c:	040bc83a 	sub	r5,zero,r16
80017b30:	9009883a 	mov	r4,r18
80017b34:	0010f2c0 	call	80010f2c <_sbrk_r>
80017b38:	10bfffd8 	cmpnei	r2,r2,-1
80017b3c:	10000d26 	beq	r2,zero,80017b74 <_malloc_trim_r+0xe0>
80017b40:	00a000f4 	movhi	r2,32771
80017b44:	10aae117 	ldw	r2,-21628(r2)
80017b48:	98c00217 	ldw	r3,8(r19)
80017b4c:	8c23c83a 	sub	r17,r17,r16
80017b50:	8c400054 	ori	r17,r17,1
80017b54:	1421c83a 	sub	r16,r2,r16
80017b58:	1c400115 	stw	r17,4(r3)
80017b5c:	00a000f4 	movhi	r2,32771
80017b60:	9009883a 	mov	r4,r18
80017b64:	142ae115 	stw	r16,-21628(r2)
80017b68:	00200440 	call	80020044 <__malloc_unlock>
80017b6c:	00800044 	movi	r2,1
80017b70:	003fe706 	br	80017b10 <_gp+0xfffe6d9c>
80017b74:	000b883a 	mov	r5,zero
80017b78:	9009883a 	mov	r4,r18
80017b7c:	0010f2c0 	call	80010f2c <_sbrk_r>
80017b80:	99000217 	ldw	r4,8(r19)
80017b84:	1107c83a 	sub	r3,r2,r4
80017b88:	19400410 	cmplti	r5,r3,16
80017b8c:	283fdd1e 	bne	r5,zero,80017b04 <_gp+0xfffe6d90>
80017b90:	016000f4 	movhi	r5,32771
80017b94:	29635f17 	ldw	r5,-29316(r5)
80017b98:	18c00054 	ori	r3,r3,1
80017b9c:	20c00115 	stw	r3,4(r4)
80017ba0:	1145c83a 	sub	r2,r2,r5
80017ba4:	016000f4 	movhi	r5,32771
80017ba8:	28aae115 	stw	r2,-21628(r5)
80017bac:	003fd506 	br	80017b04 <_gp+0xfffe6d90>

80017bb0 <_free_r>:
80017bb0:	28004126 	beq	r5,zero,80017cb8 <_free_r+0x108>
80017bb4:	defffd04 	addi	sp,sp,-12
80017bb8:	dc400115 	stw	r17,4(sp)
80017bbc:	dc000015 	stw	r16,0(sp)
80017bc0:	2023883a 	mov	r17,r4
80017bc4:	2821883a 	mov	r16,r5
80017bc8:	dfc00215 	stw	ra,8(sp)
80017bcc:	00200200 	call	80020020 <__malloc_lock>
80017bd0:	81bfff17 	ldw	r6,-4(r16)
80017bd4:	00bfff84 	movi	r2,-2
80017bd8:	80fffe04 	addi	r3,r16,-8
80017bdc:	3084703a 	and	r2,r6,r2
80017be0:	012000b4 	movhi	r4,32770
80017be4:	188f883a 	add	r7,r3,r2
80017be8:	211d8404 	addi	r4,r4,30224
80017bec:	39400117 	ldw	r5,4(r7)
80017bf0:	22000217 	ldw	r8,8(r4)
80017bf4:	027fff04 	movi	r9,-4
80017bf8:	2a4a703a 	and	r5,r5,r9
80017bfc:	41c03f26 	beq	r8,r7,80017cfc <_free_r+0x14c>
80017c00:	39400115 	stw	r5,4(r7)
80017c04:	3180004c 	andi	r6,r6,1
80017c08:	3951883a 	add	r8,r7,r5
80017c0c:	30002b1e 	bne	r6,zero,80017cbc <_free_r+0x10c>
80017c10:	82bffe17 	ldw	r10,-8(r16)
80017c14:	41800117 	ldw	r6,4(r8)
80017c18:	022000b4 	movhi	r8,32770
80017c1c:	1a87c83a 	sub	r3,r3,r10
80017c20:	1a400217 	ldw	r9,8(r3)
80017c24:	421d8604 	addi	r8,r8,30232
80017c28:	1285883a 	add	r2,r2,r10
80017c2c:	3180004c 	andi	r6,r6,1
80017c30:	4a005d26 	beq	r9,r8,80017da8 <_free_r+0x1f8>
80017c34:	1a000317 	ldw	r8,12(r3)
80017c38:	4a000315 	stw	r8,12(r9)
80017c3c:	42400215 	stw	r9,8(r8)
80017c40:	30002126 	beq	r6,zero,80017cc8 <_free_r+0x118>
80017c44:	11400054 	ori	r5,r2,1
80017c48:	19400115 	stw	r5,4(r3)
80017c4c:	188b883a 	add	r5,r3,r2
80017c50:	28800015 	stw	r2,0(r5)
80017c54:	11408028 	cmpgeui	r5,r2,512
80017c58:	28004226 	beq	r5,zero,80017d64 <_free_r+0x1b4>
80017c5c:	100ad27a 	srli	r5,r2,9
80017c60:	29800168 	cmpgeui	r6,r5,5
80017c64:	30005b1e 	bne	r6,zero,80017dd4 <_free_r+0x224>
80017c68:	100ad1ba 	srli	r5,r2,6
80017c6c:	29800e44 	addi	r6,r5,57
80017c70:	300c90fa 	slli	r6,r6,3
80017c74:	29c00e04 	addi	r7,r5,56
80017c78:	218d883a 	add	r6,r4,r6
80017c7c:	31400017 	ldw	r5,0(r6)
80017c80:	31bffe04 	addi	r6,r6,-8
80017c84:	31406226 	beq	r6,r5,80017e10 <_free_r+0x260>
80017c88:	01ffff04 	movi	r7,-4
80017c8c:	29000117 	ldw	r4,4(r5)
80017c90:	21c8703a 	and	r4,r4,r7
80017c94:	11005c2e 	bgeu	r2,r4,80017e08 <_free_r+0x258>
80017c98:	29400217 	ldw	r5,8(r5)
80017c9c:	317ffb1e 	bne	r6,r5,80017c8c <_gp+0xfffe6f18>
80017ca0:	30800317 	ldw	r2,12(r6)
80017ca4:	18800315 	stw	r2,12(r3)
80017ca8:	19800215 	stw	r6,8(r3)
80017cac:	10c00215 	stw	r3,8(r2)
80017cb0:	30c00315 	stw	r3,12(r6)
80017cb4:	00002506 	br	80017d4c <_free_r+0x19c>
80017cb8:	f800283a 	ret
80017cbc:	41800117 	ldw	r6,4(r8)
80017cc0:	3180004c 	andi	r6,r6,1
80017cc4:	303fdf1e 	bne	r6,zero,80017c44 <_gp+0xfffe6ed0>
80017cc8:	39800217 	ldw	r6,8(r7)
80017ccc:	022000b4 	movhi	r8,32770
80017cd0:	1145883a 	add	r2,r2,r5
80017cd4:	421d8604 	addi	r8,r8,30232
80017cd8:	12800054 	ori	r10,r2,1
80017cdc:	1893883a 	add	r9,r3,r2
80017ce0:	32005326 	beq	r6,r8,80017e30 <_free_r+0x280>
80017ce4:	39400317 	ldw	r5,12(r7)
80017ce8:	31400315 	stw	r5,12(r6)
80017cec:	29800215 	stw	r6,8(r5)
80017cf0:	1a800115 	stw	r10,4(r3)
80017cf4:	48800015 	stw	r2,0(r9)
80017cf8:	003fd606 	br	80017c54 <_gp+0xfffe6ee0>
80017cfc:	3180004c 	andi	r6,r6,1
80017d00:	1145883a 	add	r2,r2,r5
80017d04:	3000071e 	bne	r6,zero,80017d24 <_free_r+0x174>
80017d08:	81fffe17 	ldw	r7,-8(r16)
80017d0c:	19c7c83a 	sub	r3,r3,r7
80017d10:	19400317 	ldw	r5,12(r3)
80017d14:	19800217 	ldw	r6,8(r3)
80017d18:	11c5883a 	add	r2,r2,r7
80017d1c:	31400315 	stw	r5,12(r6)
80017d20:	29800215 	stw	r6,8(r5)
80017d24:	016000f4 	movhi	r5,32771
80017d28:	11800054 	ori	r6,r2,1
80017d2c:	29636017 	ldw	r5,-29312(r5)
80017d30:	19800115 	stw	r6,4(r3)
80017d34:	20c00215 	stw	r3,8(r4)
80017d38:	11400436 	bltu	r2,r5,80017d4c <_free_r+0x19c>
80017d3c:	00a000f4 	movhi	r2,32771
80017d40:	116ad317 	ldw	r5,-21684(r2)
80017d44:	8809883a 	mov	r4,r17
80017d48:	0017a940 	call	80017a94 <_malloc_trim_r>
80017d4c:	8809883a 	mov	r4,r17
80017d50:	dfc00217 	ldw	ra,8(sp)
80017d54:	dc400117 	ldw	r17,4(sp)
80017d58:	dc000017 	ldw	r16,0(sp)
80017d5c:	dec00304 	addi	sp,sp,12
80017d60:	00200441 	jmpi	80020044 <__malloc_unlock>
80017d64:	100ad0fa 	srli	r5,r2,3
80017d68:	21c00117 	ldw	r7,4(r4)
80017d6c:	28800044 	addi	r2,r5,1
80017d70:	280dd0ba 	srai	r6,r5,2
80017d74:	100490fa 	slli	r2,r2,3
80017d78:	01400044 	movi	r5,1
80017d7c:	298a983a 	sll	r5,r5,r6
80017d80:	2085883a 	add	r2,r4,r2
80017d84:	11800017 	ldw	r6,0(r2)
80017d88:	29cab03a 	or	r5,r5,r7
80017d8c:	11fffe04 	addi	r7,r2,-8
80017d90:	19c00315 	stw	r7,12(r3)
80017d94:	19800215 	stw	r6,8(r3)
80017d98:	21400115 	stw	r5,4(r4)
80017d9c:	10c00015 	stw	r3,0(r2)
80017da0:	30c00315 	stw	r3,12(r6)
80017da4:	003fe906 	br	80017d4c <_gp+0xfffe6fd8>
80017da8:	3000391e 	bne	r6,zero,80017e90 <_free_r+0x2e0>
80017dac:	39800217 	ldw	r6,8(r7)
80017db0:	39000317 	ldw	r4,12(r7)
80017db4:	2885883a 	add	r2,r5,r2
80017db8:	11400054 	ori	r5,r2,1
80017dbc:	31000315 	stw	r4,12(r6)
80017dc0:	21800215 	stw	r6,8(r4)
80017dc4:	19400115 	stw	r5,4(r3)
80017dc8:	1887883a 	add	r3,r3,r2
80017dcc:	18800015 	stw	r2,0(r3)
80017dd0:	003fde06 	br	80017d4c <_gp+0xfffe6fd8>
80017dd4:	29800568 	cmpgeui	r6,r5,21
80017dd8:	30000726 	beq	r6,zero,80017df8 <_free_r+0x248>
80017ddc:	29801568 	cmpgeui	r6,r5,85
80017de0:	30001a1e 	bne	r6,zero,80017e4c <_free_r+0x29c>
80017de4:	100ad33a 	srli	r5,r2,12
80017de8:	29801bc4 	addi	r6,r5,111
80017dec:	29c01b84 	addi	r7,r5,110
80017df0:	300c90fa 	slli	r6,r6,3
80017df4:	003fa006 	br	80017c78 <_gp+0xfffe6f04>
80017df8:	29801704 	addi	r6,r5,92
80017dfc:	29c016c4 	addi	r7,r5,91
80017e00:	300c90fa 	slli	r6,r6,3
80017e04:	003f9c06 	br	80017c78 <_gp+0xfffe6f04>
80017e08:	280d883a 	mov	r6,r5
80017e0c:	003fa406 	br	80017ca0 <_gp+0xfffe6f2c>
80017e10:	380bd0ba 	srai	r5,r7,2
80017e14:	01c00044 	movi	r7,1
80017e18:	22000117 	ldw	r8,4(r4)
80017e1c:	394a983a 	sll	r5,r7,r5
80017e20:	3005883a 	mov	r2,r6
80017e24:	2a0ab03a 	or	r5,r5,r8
80017e28:	21400115 	stw	r5,4(r4)
80017e2c:	003f9d06 	br	80017ca4 <_gp+0xfffe6f30>
80017e30:	20c00515 	stw	r3,20(r4)
80017e34:	20c00415 	stw	r3,16(r4)
80017e38:	19800315 	stw	r6,12(r3)
80017e3c:	19800215 	stw	r6,8(r3)
80017e40:	1a800115 	stw	r10,4(r3)
80017e44:	48800015 	stw	r2,0(r9)
80017e48:	003fc006 	br	80017d4c <_gp+0xfffe6fd8>
80017e4c:	29805568 	cmpgeui	r6,r5,341
80017e50:	3000051e 	bne	r6,zero,80017e68 <_free_r+0x2b8>
80017e54:	100ad3fa 	srli	r5,r2,15
80017e58:	29801e04 	addi	r6,r5,120
80017e5c:	29c01dc4 	addi	r7,r5,119
80017e60:	300c90fa 	slli	r6,r6,3
80017e64:	003f8406 	br	80017c78 <_gp+0xfffe6f04>
80017e68:	29415568 	cmpgeui	r5,r5,1365
80017e6c:	2800051e 	bne	r5,zero,80017e84 <_free_r+0x2d4>
80017e70:	100ad4ba 	srli	r5,r2,18
80017e74:	29801f44 	addi	r6,r5,125
80017e78:	29c01f04 	addi	r7,r5,124
80017e7c:	300c90fa 	slli	r6,r6,3
80017e80:	003f7d06 	br	80017c78 <_gp+0xfffe6f04>
80017e84:	0180fe04 	movi	r6,1016
80017e88:	01c01f84 	movi	r7,126
80017e8c:	003f7a06 	br	80017c78 <_gp+0xfffe6f04>
80017e90:	11000054 	ori	r4,r2,1
80017e94:	19000115 	stw	r4,4(r3)
80017e98:	38800015 	stw	r2,0(r7)
80017e9c:	003fab06 	br	80017d4c <_gp+0xfffe6fd8>

80017ea0 <__sfvwrite_r>:
80017ea0:	30800217 	ldw	r2,8(r6)
80017ea4:	1000bb26 	beq	r2,zero,80018194 <__sfvwrite_r+0x2f4>
80017ea8:	2a00030b 	ldhu	r8,12(r5)
80017eac:	defff404 	addi	sp,sp,-48
80017eb0:	dd400715 	stw	r21,28(sp)
80017eb4:	dd000615 	stw	r20,24(sp)
80017eb8:	dc000215 	stw	r16,8(sp)
80017ebc:	dfc00b15 	stw	ra,44(sp)
80017ec0:	df000a15 	stw	fp,40(sp)
80017ec4:	ddc00915 	stw	r23,36(sp)
80017ec8:	dd800815 	stw	r22,32(sp)
80017ecc:	dcc00515 	stw	r19,20(sp)
80017ed0:	dc800415 	stw	r18,16(sp)
80017ed4:	dc400315 	stw	r17,12(sp)
80017ed8:	4080020c 	andi	r2,r8,8
80017edc:	2821883a 	mov	r16,r5
80017ee0:	202b883a 	mov	r21,r4
80017ee4:	3029883a 	mov	r20,r6
80017ee8:	10002426 	beq	r2,zero,80017f7c <__sfvwrite_r+0xdc>
80017eec:	28800417 	ldw	r2,16(r5)
80017ef0:	10002226 	beq	r2,zero,80017f7c <__sfvwrite_r+0xdc>
80017ef4:	4080008c 	andi	r2,r8,2
80017ef8:	a4400017 	ldw	r17,0(r20)
80017efc:	10002726 	beq	r2,zero,80017f9c <__sfvwrite_r+0xfc>
80017f00:	80c00917 	ldw	r3,36(r16)
80017f04:	80800717 	ldw	r2,28(r16)
80017f08:	05a00034 	movhi	r22,32768
80017f0c:	0027883a 	mov	r19,zero
80017f10:	0025883a 	mov	r18,zero
80017f14:	b5bf0004 	addi	r22,r22,-1024
80017f18:	980d883a 	mov	r6,r19
80017f1c:	100b883a 	mov	r5,r2
80017f20:	a809883a 	mov	r4,r21
80017f24:	90001126 	beq	r18,zero,80017f6c <__sfvwrite_r+0xcc>
80017f28:	900f883a 	mov	r7,r18
80017f2c:	b480012e 	bgeu	r22,r18,80017f34 <__sfvwrite_r+0x94>
80017f30:	b00f883a 	mov	r7,r22
80017f34:	183ee83a 	callr	r3
80017f38:	00809c0e 	bge	zero,r2,800181ac <__sfvwrite_r+0x30c>
80017f3c:	a0c00217 	ldw	r3,8(r20)
80017f40:	98a7883a 	add	r19,r19,r2
80017f44:	90a5c83a 	sub	r18,r18,r2
80017f48:	1885c83a 	sub	r2,r3,r2
80017f4c:	a0800215 	stw	r2,8(r20)
80017f50:	10008326 	beq	r2,zero,80018160 <__sfvwrite_r+0x2c0>
80017f54:	80800717 	ldw	r2,28(r16)
80017f58:	80c00917 	ldw	r3,36(r16)
80017f5c:	980d883a 	mov	r6,r19
80017f60:	100b883a 	mov	r5,r2
80017f64:	a809883a 	mov	r4,r21
80017f68:	903fef1e 	bne	r18,zero,80017f28 <_gp+0xfffe71b4>
80017f6c:	8cc00017 	ldw	r19,0(r17)
80017f70:	8c800117 	ldw	r18,4(r17)
80017f74:	8c400204 	addi	r17,r17,8
80017f78:	003fe706 	br	80017f18 <_gp+0xfffe71a4>
80017f7c:	800b883a 	mov	r5,r16
80017f80:	a809883a 	mov	r4,r21
80017f84:	0015a200 	call	80015a20 <__swsetup_r>
80017f88:	1000eb1e 	bne	r2,zero,80018338 <__sfvwrite_r+0x498>
80017f8c:	8200030b 	ldhu	r8,12(r16)
80017f90:	a4400017 	ldw	r17,0(r20)
80017f94:	4080008c 	andi	r2,r8,2
80017f98:	103fd91e 	bne	r2,zero,80017f00 <_gp+0xfffe718c>
80017f9c:	4080004c 	andi	r2,r8,1
80017fa0:	10004e1e 	bne	r2,zero,800180dc <__sfvwrite_r+0x23c>
80017fa4:	00a00034 	movhi	r2,32768
80017fa8:	10bfff84 	addi	r2,r2,-2
80017fac:	00e00034 	movhi	r3,32768
80017fb0:	85c00217 	ldw	r23,8(r16)
80017fb4:	81000017 	ldw	r4,0(r16)
80017fb8:	d8800015 	stw	r2,0(sp)
80017fbc:	18bfffc4 	addi	r2,r3,-1
80017fc0:	0039883a 	mov	fp,zero
80017fc4:	0025883a 	mov	r18,zero
80017fc8:	d8800115 	stw	r2,4(sp)
80017fcc:	90003f26 	beq	r18,zero,800180cc <__sfvwrite_r+0x22c>
80017fd0:	4080800c 	andi	r2,r8,512
80017fd4:	10009126 	beq	r2,zero,8001821c <__sfvwrite_r+0x37c>
80017fd8:	b82d883a 	mov	r22,r23
80017fdc:	95c0b436 	bltu	r18,r23,800182b0 <__sfvwrite_r+0x410>
80017fe0:	4081200c 	andi	r2,r8,1152
80017fe4:	10002526 	beq	r2,zero,8001807c <__sfvwrite_r+0x1dc>
80017fe8:	81800517 	ldw	r6,20(r16)
80017fec:	81400417 	ldw	r5,16(r16)
80017ff0:	90800044 	addi	r2,r18,1
80017ff4:	318000e4 	muli	r6,r6,3
80017ff8:	216fc83a 	sub	r23,r4,r5
80017ffc:	15c5883a 	add	r2,r2,r23
80018000:	3026d7fa 	srli	r19,r6,31
80018004:	99a7883a 	add	r19,r19,r6
80018008:	9827d07a 	srai	r19,r19,1
8001800c:	980d883a 	mov	r6,r19
80018010:	9880022e 	bgeu	r19,r2,8001801c <__sfvwrite_r+0x17c>
80018014:	1027883a 	mov	r19,r2
80018018:	100d883a 	mov	r6,r2
8001801c:	4201000c 	andi	r8,r8,1024
80018020:	4000a826 	beq	r8,zero,800182c4 <__sfvwrite_r+0x424>
80018024:	300b883a 	mov	r5,r6
80018028:	a809883a 	mov	r4,r21
8001802c:	000fca40 	call	8000fca4 <_malloc_r>
80018030:	102d883a 	mov	r22,r2
80018034:	1000bc26 	beq	r2,zero,80018328 <__sfvwrite_r+0x488>
80018038:	81400417 	ldw	r5,16(r16)
8001803c:	b80d883a 	mov	r6,r23
80018040:	1009883a 	mov	r4,r2
80018044:	00104e80 	call	800104e8 <memcpy>
80018048:	8080030b 	ldhu	r2,12(r16)
8001804c:	00fedfc4 	movi	r3,-1153
80018050:	10c4703a 	and	r2,r2,r3
80018054:	10802014 	ori	r2,r2,128
80018058:	8080030d 	sth	r2,12(r16)
8001805c:	b5c9883a 	add	r4,r22,r23
80018060:	9dc5c83a 	sub	r2,r19,r23
80018064:	85800415 	stw	r22,16(r16)
80018068:	81000015 	stw	r4,0(r16)
8001806c:	84c00515 	stw	r19,20(r16)
80018070:	902f883a 	mov	r23,r18
80018074:	80800215 	stw	r2,8(r16)
80018078:	902d883a 	mov	r22,r18
8001807c:	b00d883a 	mov	r6,r22
80018080:	e00b883a 	mov	r5,fp
80018084:	00188c00 	call	800188c0 <memmove>
80018088:	80800217 	ldw	r2,8(r16)
8001808c:	81800017 	ldw	r6,0(r16)
80018090:	9027883a 	mov	r19,r18
80018094:	15c5c83a 	sub	r2,r2,r23
80018098:	358d883a 	add	r6,r6,r22
8001809c:	80800215 	stw	r2,8(r16)
800180a0:	81800015 	stw	r6,0(r16)
800180a4:	0025883a 	mov	r18,zero
800180a8:	a0800217 	ldw	r2,8(r20)
800180ac:	e4f9883a 	add	fp,fp,r19
800180b0:	14e7c83a 	sub	r19,r2,r19
800180b4:	a4c00215 	stw	r19,8(r20)
800180b8:	98002926 	beq	r19,zero,80018160 <__sfvwrite_r+0x2c0>
800180bc:	8200030b 	ldhu	r8,12(r16)
800180c0:	85c00217 	ldw	r23,8(r16)
800180c4:	81000017 	ldw	r4,0(r16)
800180c8:	903fc11e 	bne	r18,zero,80017fd0 <_gp+0xfffe725c>
800180cc:	8f000017 	ldw	fp,0(r17)
800180d0:	8c800117 	ldw	r18,4(r17)
800180d4:	8c400204 	addi	r17,r17,8
800180d8:	003fbc06 	br	80017fcc <_gp+0xfffe7258>
800180dc:	002d883a 	mov	r22,zero
800180e0:	0005883a 	mov	r2,zero
800180e4:	0039883a 	mov	fp,zero
800180e8:	0027883a 	mov	r19,zero
800180ec:	98003426 	beq	r19,zero,800181c0 <__sfvwrite_r+0x320>
800180f0:	10003726 	beq	r2,zero,800181d0 <__sfvwrite_r+0x330>
800180f4:	b02f883a 	mov	r23,r22
800180f8:	9d80012e 	bgeu	r19,r22,80018100 <__sfvwrite_r+0x260>
800180fc:	982f883a 	mov	r23,r19
80018100:	81000017 	ldw	r4,0(r16)
80018104:	80800417 	ldw	r2,16(r16)
80018108:	81c00517 	ldw	r7,20(r16)
8001810c:	1100032e 	bgeu	r2,r4,8001811c <__sfvwrite_r+0x27c>
80018110:	84800217 	ldw	r18,8(r16)
80018114:	3ca5883a 	add	r18,r7,r18
80018118:	95c03516 	blt	r18,r23,800181f0 <__sfvwrite_r+0x350>
8001811c:	b9c07716 	blt	r23,r7,800182fc <__sfvwrite_r+0x45c>
80018120:	80800917 	ldw	r2,36(r16)
80018124:	81400717 	ldw	r5,28(r16)
80018128:	e00d883a 	mov	r6,fp
8001812c:	a809883a 	mov	r4,r21
80018130:	103ee83a 	callr	r2
80018134:	1025883a 	mov	r18,r2
80018138:	00801c0e 	bge	zero,r2,800181ac <__sfvwrite_r+0x30c>
8001813c:	b4adc83a 	sub	r22,r22,r18
80018140:	b0001626 	beq	r22,zero,8001819c <__sfvwrite_r+0x2fc>
80018144:	00800044 	movi	r2,1
80018148:	a0c00217 	ldw	r3,8(r20)
8001814c:	e4b9883a 	add	fp,fp,r18
80018150:	9ca7c83a 	sub	r19,r19,r18
80018154:	1ca5c83a 	sub	r18,r3,r18
80018158:	a4800215 	stw	r18,8(r20)
8001815c:	903fe31e 	bne	r18,zero,800180ec <_gp+0xfffe7378>
80018160:	0005883a 	mov	r2,zero
80018164:	dfc00b17 	ldw	ra,44(sp)
80018168:	df000a17 	ldw	fp,40(sp)
8001816c:	ddc00917 	ldw	r23,36(sp)
80018170:	dd800817 	ldw	r22,32(sp)
80018174:	dd400717 	ldw	r21,28(sp)
80018178:	dd000617 	ldw	r20,24(sp)
8001817c:	dcc00517 	ldw	r19,20(sp)
80018180:	dc800417 	ldw	r18,16(sp)
80018184:	dc400317 	ldw	r17,12(sp)
80018188:	dc000217 	ldw	r16,8(sp)
8001818c:	dec00c04 	addi	sp,sp,48
80018190:	f800283a 	ret
80018194:	0005883a 	mov	r2,zero
80018198:	f800283a 	ret
8001819c:	800b883a 	mov	r5,r16
800181a0:	a809883a 	mov	r4,r21
800181a4:	00176ac0 	call	800176ac <_fflush_r>
800181a8:	103fe726 	beq	r2,zero,80018148 <_gp+0xfffe73d4>
800181ac:	8080030b 	ldhu	r2,12(r16)
800181b0:	10801014 	ori	r2,r2,64
800181b4:	8080030d 	sth	r2,12(r16)
800181b8:	00bfffc4 	movi	r2,-1
800181bc:	003fe906 	br	80018164 <_gp+0xfffe73f0>
800181c0:	8cc00117 	ldw	r19,4(r17)
800181c4:	8f000017 	ldw	fp,0(r17)
800181c8:	8c400204 	addi	r17,r17,8
800181cc:	983ffc26 	beq	r19,zero,800181c0 <_gp+0xfffe744c>
800181d0:	980d883a 	mov	r6,r19
800181d4:	01400284 	movi	r5,10
800181d8:	e009883a 	mov	r4,fp
800181dc:	00187d80 	call	800187d8 <memchr>
800181e0:	10004426 	beq	r2,zero,800182f4 <__sfvwrite_r+0x454>
800181e4:	10800044 	addi	r2,r2,1
800181e8:	172dc83a 	sub	r22,r2,fp
800181ec:	003fc106 	br	800180f4 <_gp+0xfffe7380>
800181f0:	e00b883a 	mov	r5,fp
800181f4:	900d883a 	mov	r6,r18
800181f8:	00188c00 	call	800188c0 <memmove>
800181fc:	80800017 	ldw	r2,0(r16)
80018200:	800b883a 	mov	r5,r16
80018204:	a809883a 	mov	r4,r21
80018208:	1485883a 	add	r2,r2,r18
8001820c:	80800015 	stw	r2,0(r16)
80018210:	00176ac0 	call	800176ac <_fflush_r>
80018214:	103fc926 	beq	r2,zero,8001813c <_gp+0xfffe73c8>
80018218:	003fe406 	br	800181ac <_gp+0xfffe7438>
8001821c:	80800417 	ldw	r2,16(r16)
80018220:	11001136 	bltu	r2,r4,80018268 <__sfvwrite_r+0x3c8>
80018224:	84c00517 	ldw	r19,20(r16)
80018228:	94c00f36 	bltu	r18,r19,80018268 <__sfvwrite_r+0x3c8>
8001822c:	d8800017 	ldw	r2,0(sp)
80018230:	1480222e 	bgeu	r2,r18,800182bc <__sfvwrite_r+0x41c>
80018234:	d9000117 	ldw	r4,4(sp)
80018238:	980b883a 	mov	r5,r19
8001823c:	000d4880 	call	8000d488 <__divsi3>
80018240:	14cf383a 	mul	r7,r2,r19
80018244:	81400717 	ldw	r5,28(r16)
80018248:	80800917 	ldw	r2,36(r16)
8001824c:	e00d883a 	mov	r6,fp
80018250:	a809883a 	mov	r4,r21
80018254:	103ee83a 	callr	r2
80018258:	00bfd40e 	bge	zero,r2,800181ac <_gp+0xfffe7438>
8001825c:	1027883a 	mov	r19,r2
80018260:	94e5c83a 	sub	r18,r18,r19
80018264:	003f9006 	br	800180a8 <_gp+0xfffe7334>
80018268:	b827883a 	mov	r19,r23
8001826c:	95c0012e 	bgeu	r18,r23,80018274 <__sfvwrite_r+0x3d4>
80018270:	9027883a 	mov	r19,r18
80018274:	980d883a 	mov	r6,r19
80018278:	e00b883a 	mov	r5,fp
8001827c:	00188c00 	call	800188c0 <memmove>
80018280:	80800217 	ldw	r2,8(r16)
80018284:	81000017 	ldw	r4,0(r16)
80018288:	14c5c83a 	sub	r2,r2,r19
8001828c:	24c9883a 	add	r4,r4,r19
80018290:	80800215 	stw	r2,8(r16)
80018294:	81000015 	stw	r4,0(r16)
80018298:	103ff11e 	bne	r2,zero,80018260 <_gp+0xfffe74ec>
8001829c:	800b883a 	mov	r5,r16
800182a0:	a809883a 	mov	r4,r21
800182a4:	00176ac0 	call	800176ac <_fflush_r>
800182a8:	103fed26 	beq	r2,zero,80018260 <_gp+0xfffe74ec>
800182ac:	003fbf06 	br	800181ac <_gp+0xfffe7438>
800182b0:	902f883a 	mov	r23,r18
800182b4:	902d883a 	mov	r22,r18
800182b8:	003f7006 	br	8001807c <_gp+0xfffe7308>
800182bc:	9009883a 	mov	r4,r18
800182c0:	003fdd06 	br	80018238 <_gp+0xfffe74c4>
800182c4:	a809883a 	mov	r4,r21
800182c8:	0019ae40 	call	80019ae4 <_realloc_r>
800182cc:	102d883a 	mov	r22,r2
800182d0:	103f621e 	bne	r2,zero,8001805c <_gp+0xfffe72e8>
800182d4:	81400417 	ldw	r5,16(r16)
800182d8:	a809883a 	mov	r4,r21
800182dc:	0017bb00 	call	80017bb0 <_free_r>
800182e0:	8080030b 	ldhu	r2,12(r16)
800182e4:	00c00304 	movi	r3,12
800182e8:	a8c00015 	stw	r3,0(r21)
800182ec:	10bfdfcc 	andi	r2,r2,65407
800182f0:	003faf06 	br	800181b0 <_gp+0xfffe743c>
800182f4:	9d800044 	addi	r22,r19,1
800182f8:	003f7e06 	br	800180f4 <_gp+0xfffe7380>
800182fc:	b80d883a 	mov	r6,r23
80018300:	e00b883a 	mov	r5,fp
80018304:	00188c00 	call	800188c0 <memmove>
80018308:	80c00217 	ldw	r3,8(r16)
8001830c:	80800017 	ldw	r2,0(r16)
80018310:	b825883a 	mov	r18,r23
80018314:	1dc7c83a 	sub	r3,r3,r23
80018318:	15ef883a 	add	r23,r2,r23
8001831c:	80c00215 	stw	r3,8(r16)
80018320:	85c00015 	stw	r23,0(r16)
80018324:	003f8506 	br	8001813c <_gp+0xfffe73c8>
80018328:	00800304 	movi	r2,12
8001832c:	a8800015 	stw	r2,0(r21)
80018330:	8080030b 	ldhu	r2,12(r16)
80018334:	003f9e06 	br	800181b0 <_gp+0xfffe743c>
80018338:	00bfffc4 	movi	r2,-1
8001833c:	003f8906 	br	80018164 <_gp+0xfffe73f0>

80018340 <_fwalk>:
80018340:	defffa04 	addi	sp,sp,-24
80018344:	dc800215 	stw	r18,8(sp)
80018348:	dfc00515 	stw	ra,20(sp)
8001834c:	dd000415 	stw	r20,16(sp)
80018350:	dcc00315 	stw	r19,12(sp)
80018354:	dc400115 	stw	r17,4(sp)
80018358:	dc000015 	stw	r16,0(sp)
8001835c:	2480b804 	addi	r18,r4,736
80018360:	90001e26 	beq	r18,zero,800183dc <_fwalk+0x9c>
80018364:	2827883a 	mov	r19,r5
80018368:	0029883a 	mov	r20,zero
8001836c:	94400117 	ldw	r17,4(r18)
80018370:	94000217 	ldw	r16,8(r18)
80018374:	8c7fffc4 	addi	r17,r17,-1
80018378:	88000d16 	blt	r17,zero,800183b0 <_fwalk+0x70>
8001837c:	8080030b 	ldhu	r2,12(r16)
80018380:	8c7fffc4 	addi	r17,r17,-1
80018384:	8009883a 	mov	r4,r16
80018388:	108000b0 	cmpltui	r2,r2,2
8001838c:	1000051e 	bne	r2,zero,800183a4 <_fwalk+0x64>
80018390:	8080038f 	ldh	r2,14(r16)
80018394:	10bfffe0 	cmpeqi	r2,r2,-1
80018398:	1000021e 	bne	r2,zero,800183a4 <_fwalk+0x64>
8001839c:	983ee83a 	callr	r19
800183a0:	a0a8b03a 	or	r20,r20,r2
800183a4:	88bfffd8 	cmpnei	r2,r17,-1
800183a8:	84001a04 	addi	r16,r16,104
800183ac:	103ff31e 	bne	r2,zero,8001837c <_gp+0xfffe7608>
800183b0:	94800017 	ldw	r18,0(r18)
800183b4:	903fed1e 	bne	r18,zero,8001836c <_gp+0xfffe75f8>
800183b8:	a005883a 	mov	r2,r20
800183bc:	dfc00517 	ldw	ra,20(sp)
800183c0:	dd000417 	ldw	r20,16(sp)
800183c4:	dcc00317 	ldw	r19,12(sp)
800183c8:	dc800217 	ldw	r18,8(sp)
800183cc:	dc400117 	ldw	r17,4(sp)
800183d0:	dc000017 	ldw	r16,0(sp)
800183d4:	dec00604 	addi	sp,sp,24
800183d8:	f800283a 	ret
800183dc:	0029883a 	mov	r20,zero
800183e0:	003ff506 	br	800183b8 <_gp+0xfffe7644>

800183e4 <_fwalk_reent>:
800183e4:	defff904 	addi	sp,sp,-28
800183e8:	dcc00315 	stw	r19,12(sp)
800183ec:	dfc00615 	stw	ra,24(sp)
800183f0:	dd400515 	stw	r21,20(sp)
800183f4:	dd000415 	stw	r20,16(sp)
800183f8:	dc800215 	stw	r18,8(sp)
800183fc:	dc400115 	stw	r17,4(sp)
80018400:	dc000015 	stw	r16,0(sp)
80018404:	24c0b804 	addi	r19,r4,736
80018408:	98002126 	beq	r19,zero,80018490 <_fwalk_reent+0xac>
8001840c:	2829883a 	mov	r20,r5
80018410:	2025883a 	mov	r18,r4
80018414:	002b883a 	mov	r21,zero
80018418:	9c400117 	ldw	r17,4(r19)
8001841c:	9c000217 	ldw	r16,8(r19)
80018420:	8c7fffc4 	addi	r17,r17,-1
80018424:	88000e16 	blt	r17,zero,80018460 <_fwalk_reent+0x7c>
80018428:	8080030b 	ldhu	r2,12(r16)
8001842c:	8c7fffc4 	addi	r17,r17,-1
80018430:	800b883a 	mov	r5,r16
80018434:	108000b0 	cmpltui	r2,r2,2
80018438:	9009883a 	mov	r4,r18
8001843c:	1000051e 	bne	r2,zero,80018454 <_fwalk_reent+0x70>
80018440:	8080038f 	ldh	r2,14(r16)
80018444:	10bfffe0 	cmpeqi	r2,r2,-1
80018448:	1000021e 	bne	r2,zero,80018454 <_fwalk_reent+0x70>
8001844c:	a03ee83a 	callr	r20
80018450:	a8aab03a 	or	r21,r21,r2
80018454:	88bfffd8 	cmpnei	r2,r17,-1
80018458:	84001a04 	addi	r16,r16,104
8001845c:	103ff21e 	bne	r2,zero,80018428 <_gp+0xfffe76b4>
80018460:	9cc00017 	ldw	r19,0(r19)
80018464:	983fec1e 	bne	r19,zero,80018418 <_gp+0xfffe76a4>
80018468:	a805883a 	mov	r2,r21
8001846c:	dfc00617 	ldw	ra,24(sp)
80018470:	dd400517 	ldw	r21,20(sp)
80018474:	dd000417 	ldw	r20,16(sp)
80018478:	dcc00317 	ldw	r19,12(sp)
8001847c:	dc800217 	ldw	r18,8(sp)
80018480:	dc400117 	ldw	r17,4(sp)
80018484:	dc000017 	ldw	r16,0(sp)
80018488:	dec00704 	addi	sp,sp,28
8001848c:	f800283a 	ret
80018490:	002b883a 	mov	r21,zero
80018494:	003ff406 	br	80018468 <_gp+0xfffe76f4>

80018498 <_findenv_r>:
80018498:	defff904 	addi	sp,sp,-28
8001849c:	dd400515 	stw	r21,20(sp)
800184a0:	dd000415 	stw	r20,16(sp)
800184a4:	dcc00315 	stw	r19,12(sp)
800184a8:	dc000015 	stw	r16,0(sp)
800184ac:	dfc00615 	stw	ra,24(sp)
800184b0:	dc800215 	stw	r18,8(sp)
800184b4:	dc400115 	stw	r17,4(sp)
800184b8:	202b883a 	mov	r21,r4
800184bc:	2829883a 	mov	r20,r5
800184c0:	3027883a 	mov	r19,r6
800184c4:	001fb5c0 	call	8001fb5c <__env_lock>
800184c8:	00a000f4 	movhi	r2,32771
800184cc:	14236317 	ldw	r16,-29300(r2)
800184d0:	80001a26 	beq	r16,zero,8001853c <_findenv_r+0xa4>
800184d4:	a0800007 	ldb	r2,0(r20)
800184d8:	10002d26 	beq	r2,zero,80018590 <_findenv_r+0xf8>
800184dc:	10800f58 	cmpnei	r2,r2,61
800184e0:	a00d883a 	mov	r6,r20
800184e4:	1000021e 	bne	r2,zero,800184f0 <_findenv_r+0x58>
800184e8:	00001406 	br	8001853c <_findenv_r+0xa4>
800184ec:	18001326 	beq	r3,zero,8001853c <_findenv_r+0xa4>
800184f0:	31800044 	addi	r6,r6,1
800184f4:	30800007 	ldb	r2,0(r6)
800184f8:	10c00f58 	cmpnei	r3,r2,61
800184fc:	103ffb1e 	bne	r2,zero,800184ec <_gp+0xfffe7778>
80018500:	3523c83a 	sub	r17,r6,r20
80018504:	81000017 	ldw	r4,0(r16)
80018508:	20000c26 	beq	r4,zero,8001853c <_findenv_r+0xa4>
8001850c:	880d883a 	mov	r6,r17
80018510:	a00b883a 	mov	r5,r20
80018514:	001a46c0 	call	8001a46c <strncmp>
80018518:	1000051e 	bne	r2,zero,80018530 <_findenv_r+0x98>
8001851c:	84800017 	ldw	r18,0(r16)
80018520:	9465883a 	add	r18,r18,r17
80018524:	90800007 	ldb	r2,0(r18)
80018528:	10800f58 	cmpnei	r2,r2,61
8001852c:	10000f26 	beq	r2,zero,8001856c <_findenv_r+0xd4>
80018530:	84000104 	addi	r16,r16,4
80018534:	81000017 	ldw	r4,0(r16)
80018538:	203ff41e 	bne	r4,zero,8001850c <_gp+0xfffe7798>
8001853c:	a809883a 	mov	r4,r21
80018540:	001fb800 	call	8001fb80 <__env_unlock>
80018544:	0005883a 	mov	r2,zero
80018548:	dfc00617 	ldw	ra,24(sp)
8001854c:	dd400517 	ldw	r21,20(sp)
80018550:	dd000417 	ldw	r20,16(sp)
80018554:	dcc00317 	ldw	r19,12(sp)
80018558:	dc800217 	ldw	r18,8(sp)
8001855c:	dc400117 	ldw	r17,4(sp)
80018560:	dc000017 	ldw	r16,0(sp)
80018564:	dec00704 	addi	sp,sp,28
80018568:	f800283a 	ret
8001856c:	00a000f4 	movhi	r2,32771
80018570:	10a36317 	ldw	r2,-29300(r2)
80018574:	a809883a 	mov	r4,r21
80018578:	80a1c83a 	sub	r16,r16,r2
8001857c:	8021d0ba 	srai	r16,r16,2
80018580:	9c000015 	stw	r16,0(r19)
80018584:	001fb800 	call	8001fb80 <__env_unlock>
80018588:	90800044 	addi	r2,r18,1
8001858c:	003fee06 	br	80018548 <_gp+0xfffe77d4>
80018590:	0023883a 	mov	r17,zero
80018594:	003fdb06 	br	80018504 <_gp+0xfffe7790>

80018598 <_getenv_r>:
80018598:	defffe04 	addi	sp,sp,-8
8001859c:	d80d883a 	mov	r6,sp
800185a0:	dfc00115 	stw	ra,4(sp)
800185a4:	00184980 	call	80018498 <_findenv_r>
800185a8:	dfc00117 	ldw	ra,4(sp)
800185ac:	dec00204 	addi	sp,sp,8
800185b0:	f800283a 	ret

800185b4 <__gettzinfo>:
800185b4:	00a000b4 	movhi	r2,32770
800185b8:	109e8604 	addi	r2,r2,31256
800185bc:	f800283a 	ret

800185c0 <__localeconv_l>:
800185c0:	20803c04 	addi	r2,r4,240
800185c4:	f800283a 	ret

800185c8 <_localeconv_r>:
800185c8:	00a000f4 	movhi	r2,32771
800185cc:	10a35e17 	ldw	r2,-29320(r2)
800185d0:	10800d17 	ldw	r2,52(r2)
800185d4:	1000021e 	bne	r2,zero,800185e0 <_localeconv_r+0x18>
800185d8:	00a000b4 	movhi	r2,32770
800185dc:	109d2904 	addi	r2,r2,29860
800185e0:	10803c04 	addi	r2,r2,240
800185e4:	f800283a 	ret

800185e8 <localeconv>:
800185e8:	00a000f4 	movhi	r2,32771
800185ec:	10a35e17 	ldw	r2,-29320(r2)
800185f0:	10800d17 	ldw	r2,52(r2)
800185f4:	1000021e 	bne	r2,zero,80018600 <localeconv+0x18>
800185f8:	00a000b4 	movhi	r2,32770
800185fc:	109d2904 	addi	r2,r2,29860
80018600:	10803c04 	addi	r2,r2,240
80018604:	f800283a 	ret

80018608 <__swhatbuf_r>:
80018608:	deffed04 	addi	sp,sp,-76
8001860c:	dc001015 	stw	r16,64(sp)
80018610:	2821883a 	mov	r16,r5
80018614:	2940038f 	ldh	r5,14(r5)
80018618:	dc401115 	stw	r17,68(sp)
8001861c:	dfc01215 	stw	ra,72(sp)
80018620:	3023883a 	mov	r17,r6
80018624:	2800100e 	bge	r5,zero,80018668 <__swhatbuf_r+0x60>
80018628:	8080030b 	ldhu	r2,12(r16)
8001862c:	38000015 	stw	zero,0(r7)
80018630:	1080200c 	andi	r2,r2,128
80018634:	1000081e 	bne	r2,zero,80018658 <__swhatbuf_r+0x50>
80018638:	00810004 	movi	r2,1024
8001863c:	88800015 	stw	r2,0(r17)
80018640:	0005883a 	mov	r2,zero
80018644:	dfc01217 	ldw	ra,72(sp)
80018648:	dc401117 	ldw	r17,68(sp)
8001864c:	dc001017 	ldw	r16,64(sp)
80018650:	dec01304 	addi	sp,sp,76
80018654:	f800283a 	ret
80018658:	00801004 	movi	r2,64
8001865c:	88800015 	stw	r2,0(r17)
80018660:	0005883a 	mov	r2,zero
80018664:	003ff706 	br	80018644 <_gp+0xfffe78d0>
80018668:	d9800104 	addi	r6,sp,4
8001866c:	d9c00015 	stw	r7,0(sp)
80018670:	001e7340 	call	8001e734 <_fstat_r>
80018674:	d9c00017 	ldw	r7,0(sp)
80018678:	103feb16 	blt	r2,zero,80018628 <_gp+0xfffe78b4>
8001867c:	d8c00217 	ldw	r3,8(sp)
80018680:	00820004 	movi	r2,2048
80018684:	18fc000c 	andi	r3,r3,61440
80018688:	18c80020 	cmpeqi	r3,r3,8192
8001868c:	38c00015 	stw	r3,0(r7)
80018690:	00c10004 	movi	r3,1024
80018694:	88c00015 	stw	r3,0(r17)
80018698:	003fea06 	br	80018644 <_gp+0xfffe78d0>

8001869c <__smakebuf_r>:
8001869c:	28c0030b 	ldhu	r3,12(r5)
800186a0:	defffa04 	addi	sp,sp,-24
800186a4:	dc000215 	stw	r16,8(sp)
800186a8:	dfc00515 	stw	ra,20(sp)
800186ac:	dc800415 	stw	r18,16(sp)
800186b0:	dc400315 	stw	r17,12(sp)
800186b4:	18c0008c 	andi	r3,r3,2
800186b8:	2821883a 	mov	r16,r5
800186bc:	18000b26 	beq	r3,zero,800186ec <__smakebuf_r+0x50>
800186c0:	28c010c4 	addi	r3,r5,67
800186c4:	28c00015 	stw	r3,0(r5)
800186c8:	28c00415 	stw	r3,16(r5)
800186cc:	00c00044 	movi	r3,1
800186d0:	28c00515 	stw	r3,20(r5)
800186d4:	dfc00517 	ldw	ra,20(sp)
800186d8:	dc800417 	ldw	r18,16(sp)
800186dc:	dc400317 	ldw	r17,12(sp)
800186e0:	dc000217 	ldw	r16,8(sp)
800186e4:	dec00604 	addi	sp,sp,24
800186e8:	f800283a 	ret
800186ec:	d9c00104 	addi	r7,sp,4
800186f0:	d80d883a 	mov	r6,sp
800186f4:	2023883a 	mov	r17,r4
800186f8:	00186080 	call	80018608 <__swhatbuf_r>
800186fc:	1025883a 	mov	r18,r2
80018700:	d8800117 	ldw	r2,4(sp)
80018704:	10001b1e 	bne	r2,zero,80018774 <__smakebuf_r+0xd8>
80018708:	d9400017 	ldw	r5,0(sp)
8001870c:	8809883a 	mov	r4,r17
80018710:	000fca40 	call	8000fca4 <_malloc_r>
80018714:	10002426 	beq	r2,zero,800187a8 <__smakebuf_r+0x10c>
80018718:	01200074 	movhi	r4,32769
8001871c:	211dcf04 	addi	r4,r4,30524
80018720:	80c0030b 	ldhu	r3,12(r16)
80018724:	89000f15 	stw	r4,60(r17)
80018728:	80800015 	stw	r2,0(r16)
8001872c:	80800415 	stw	r2,16(r16)
80018730:	d8800017 	ldw	r2,0(sp)
80018734:	d9400117 	ldw	r5,4(sp)
80018738:	18c02014 	ori	r3,r3,128
8001873c:	80c0030d 	sth	r3,12(r16)
80018740:	80800515 	stw	r2,20(r16)
80018744:	2800031e 	bne	r5,zero,80018754 <__smakebuf_r+0xb8>
80018748:	90c6b03a 	or	r3,r18,r3
8001874c:	80c0030d 	sth	r3,12(r16)
80018750:	003fe006 	br	800186d4 <_gp+0xfffe7960>
80018754:	8140038f 	ldh	r5,14(r16)
80018758:	8809883a 	mov	r4,r17
8001875c:	001e7940 	call	8001e794 <_isatty_r>
80018760:	80c0030b 	ldhu	r3,12(r16)
80018764:	103ff826 	beq	r2,zero,80018748 <_gp+0xfffe79d4>
80018768:	18ffff0c 	andi	r3,r3,65532
8001876c:	18c00054 	ori	r3,r3,1
80018770:	003ff506 	br	80018748 <_gp+0xfffe79d4>
80018774:	8140038f 	ldh	r5,14(r16)
80018778:	8809883a 	mov	r4,r17
8001877c:	001e7940 	call	8001e794 <_isatty_r>
80018780:	103fe126 	beq	r2,zero,80018708 <_gp+0xfffe7994>
80018784:	8080030b 	ldhu	r2,12(r16)
80018788:	80c010c4 	addi	r3,r16,67
8001878c:	80c00015 	stw	r3,0(r16)
80018790:	10800054 	ori	r2,r2,1
80018794:	8080030d 	sth	r2,12(r16)
80018798:	00800044 	movi	r2,1
8001879c:	80c00415 	stw	r3,16(r16)
800187a0:	80800515 	stw	r2,20(r16)
800187a4:	003fd806 	br	80018708 <_gp+0xfffe7994>
800187a8:	8080030b 	ldhu	r2,12(r16)
800187ac:	10c0800c 	andi	r3,r2,512
800187b0:	183fc81e 	bne	r3,zero,800186d4 <_gp+0xfffe7960>
800187b4:	10bfff0c 	andi	r2,r2,65532
800187b8:	10800094 	ori	r2,r2,2
800187bc:	80c010c4 	addi	r3,r16,67
800187c0:	8080030d 	sth	r2,12(r16)
800187c4:	00800044 	movi	r2,1
800187c8:	80c00015 	stw	r3,0(r16)
800187cc:	80c00415 	stw	r3,16(r16)
800187d0:	80800515 	stw	r2,20(r16)
800187d4:	003fbf06 	br	800186d4 <_gp+0xfffe7960>

800187d8 <memchr>:
800187d8:	208000cc 	andi	r2,r4,3
800187dc:	280f883a 	mov	r7,r5
800187e0:	10003526 	beq	r2,zero,800188b8 <memchr+0xe0>
800187e4:	30bfffc4 	addi	r2,r6,-1
800187e8:	30001926 	beq	r6,zero,80018850 <memchr+0x78>
800187ec:	20c00003 	ldbu	r3,0(r4)
800187f0:	29803fcc 	andi	r6,r5,255
800187f4:	30c0061e 	bne	r6,r3,80018810 <memchr+0x38>
800187f8:	00001706 	br	80018858 <memchr+0x80>
800187fc:	10bfffc4 	addi	r2,r2,-1
80018800:	10ffffe0 	cmpeqi	r3,r2,-1
80018804:	1800121e 	bne	r3,zero,80018850 <memchr+0x78>
80018808:	20c00003 	ldbu	r3,0(r4)
8001880c:	19801226 	beq	r3,r6,80018858 <memchr+0x80>
80018810:	21000044 	addi	r4,r4,1
80018814:	20c000cc 	andi	r3,r4,3
80018818:	183ff81e 	bne	r3,zero,800187fc <_gp+0xfffe7a88>
8001881c:	10c00130 	cmpltui	r3,r2,4
80018820:	18000f26 	beq	r3,zero,80018860 <memchr+0x88>
80018824:	10000a26 	beq	r2,zero,80018850 <memchr+0x78>
80018828:	20c00003 	ldbu	r3,0(r4)
8001882c:	29403fcc 	andi	r5,r5,255
80018830:	28c00926 	beq	r5,r3,80018858 <memchr+0x80>
80018834:	2085883a 	add	r2,r4,r2
80018838:	38c03fcc 	andi	r3,r7,255
8001883c:	00000206 	br	80018848 <memchr+0x70>
80018840:	21400003 	ldbu	r5,0(r4)
80018844:	28c00426 	beq	r5,r3,80018858 <memchr+0x80>
80018848:	21000044 	addi	r4,r4,1
8001884c:	113ffc1e 	bne	r2,r4,80018840 <_gp+0xfffe7acc>
80018850:	0005883a 	mov	r2,zero
80018854:	f800283a 	ret
80018858:	2005883a 	mov	r2,r4
8001885c:	f800283a 	ret
80018860:	280c923a 	slli	r6,r5,8
80018864:	2a403fcc 	andi	r9,r5,255
80018868:	02bfbff4 	movhi	r10,65279
8001886c:	31bfffcc 	andi	r6,r6,65535
80018870:	3246b03a 	or	r3,r6,r9
80018874:	1812943a 	slli	r9,r3,16
80018878:	02202074 	movhi	r8,32897
8001887c:	52bfbfc4 	addi	r10,r10,-257
80018880:	48d2b03a 	or	r9,r9,r3
80018884:	42202004 	addi	r8,r8,-32640
80018888:	20c00017 	ldw	r3,0(r4)
8001888c:	48c6f03a 	xor	r3,r9,r3
80018890:	1a8d883a 	add	r6,r3,r10
80018894:	00c6303a 	nor	r3,zero,r3
80018898:	30c6703a 	and	r3,r6,r3
8001889c:	1a06703a 	and	r3,r3,r8
800188a0:	183fe11e 	bne	r3,zero,80018828 <_gp+0xfffe7ab4>
800188a4:	10bfff04 	addi	r2,r2,-4
800188a8:	10c00128 	cmpgeui	r3,r2,4
800188ac:	21000104 	addi	r4,r4,4
800188b0:	183ff51e 	bne	r3,zero,80018888 <_gp+0xfffe7b14>
800188b4:	003fdb06 	br	80018824 <_gp+0xfffe7ab0>
800188b8:	3005883a 	mov	r2,r6
800188bc:	003fd706 	br	8001881c <_gp+0xfffe7aa8>

800188c0 <memmove>:
800188c0:	2005883a 	mov	r2,r4
800188c4:	29000a2e 	bgeu	r5,r4,800188f0 <memmove+0x30>
800188c8:	2989883a 	add	r4,r5,r6
800188cc:	1100082e 	bgeu	r2,r4,800188f0 <memmove+0x30>
800188d0:	1187883a 	add	r3,r2,r6
800188d4:	30003926 	beq	r6,zero,800189bc <memmove+0xfc>
800188d8:	213fffc4 	addi	r4,r4,-1
800188dc:	21400003 	ldbu	r5,0(r4)
800188e0:	18ffffc4 	addi	r3,r3,-1
800188e4:	19400005 	stb	r5,0(r3)
800188e8:	10fffb1e 	bne	r2,r3,800188d8 <_gp+0xfffe7b64>
800188ec:	f800283a 	ret
800188f0:	30c00430 	cmpltui	r3,r6,16
800188f4:	1800321e 	bne	r3,zero,800189c0 <memmove+0x100>
800188f8:	2886b03a 	or	r3,r5,r2
800188fc:	18c000cc 	andi	r3,r3,3
80018900:	1800321e 	bne	r3,zero,800189cc <memmove+0x10c>
80018904:	327ffc04 	addi	r9,r6,-16
80018908:	4812d13a 	srli	r9,r9,4
8001890c:	2811883a 	mov	r8,r5
80018910:	100f883a 	mov	r7,r2
80018914:	4a400044 	addi	r9,r9,1
80018918:	4812913a 	slli	r9,r9,4
8001891c:	1247883a 	add	r3,r2,r9
80018920:	41000017 	ldw	r4,0(r8)
80018924:	39c00404 	addi	r7,r7,16
80018928:	42000404 	addi	r8,r8,16
8001892c:	393ffc15 	stw	r4,-16(r7)
80018930:	413ffd17 	ldw	r4,-12(r8)
80018934:	393ffd15 	stw	r4,-12(r7)
80018938:	413ffe17 	ldw	r4,-8(r8)
8001893c:	393ffe15 	stw	r4,-8(r7)
80018940:	413fff17 	ldw	r4,-4(r8)
80018944:	393fff15 	stw	r4,-4(r7)
80018948:	19fff51e 	bne	r3,r7,80018920 <_gp+0xfffe7bac>
8001894c:	310003cc 	andi	r4,r6,15
80018950:	21c00130 	cmpltui	r7,r4,4
80018954:	2a4b883a 	add	r5,r5,r9
80018958:	38001e1e 	bne	r7,zero,800189d4 <memmove+0x114>
8001895c:	213fff04 	addi	r4,r4,-4
80018960:	200ed0ba 	srli	r7,r4,2
80018964:	2811883a 	mov	r8,r5
80018968:	1809883a 	mov	r4,r3
8001896c:	381290ba 	slli	r9,r7,2
80018970:	4a400104 	addi	r9,r9,4
80018974:	48d3883a 	add	r9,r9,r3
80018978:	42000104 	addi	r8,r8,4
8001897c:	42bfff17 	ldw	r10,-4(r8)
80018980:	21000104 	addi	r4,r4,4
80018984:	22bfff15 	stw	r10,-4(r4)
80018988:	227ffb1e 	bne	r4,r9,80018978 <_gp+0xfffe7c04>
8001898c:	39000044 	addi	r4,r7,1
80018990:	200890ba 	slli	r4,r4,2
80018994:	318000cc 	andi	r6,r6,3
80018998:	1907883a 	add	r3,r3,r4
8001899c:	290b883a 	add	r5,r5,r4
800189a0:	30000926 	beq	r6,zero,800189c8 <memmove+0x108>
800189a4:	298d883a 	add	r6,r5,r6
800189a8:	29400044 	addi	r5,r5,1
800189ac:	29ffffc3 	ldbu	r7,-1(r5)
800189b0:	18c00044 	addi	r3,r3,1
800189b4:	19ffffc5 	stb	r7,-1(r3)
800189b8:	317ffb1e 	bne	r6,r5,800189a8 <_gp+0xfffe7c34>
800189bc:	f800283a 	ret
800189c0:	1007883a 	mov	r3,r2
800189c4:	303ff71e 	bne	r6,zero,800189a4 <_gp+0xfffe7c30>
800189c8:	f800283a 	ret
800189cc:	1007883a 	mov	r3,r2
800189d0:	003ff406 	br	800189a4 <_gp+0xfffe7c30>
800189d4:	200d883a 	mov	r6,r4
800189d8:	003ff106 	br	800189a0 <_gp+0xfffe7c2c>

800189dc <_Balloc>:
800189dc:	20801317 	ldw	r2,76(r4)
800189e0:	defffc04 	addi	sp,sp,-16
800189e4:	dc400115 	stw	r17,4(sp)
800189e8:	dc000015 	stw	r16,0(sp)
800189ec:	dfc00315 	stw	ra,12(sp)
800189f0:	dc800215 	stw	r18,8(sp)
800189f4:	2021883a 	mov	r16,r4
800189f8:	2823883a 	mov	r17,r5
800189fc:	10000e26 	beq	r2,zero,80018a38 <_Balloc+0x5c>
80018a00:	880690ba 	slli	r3,r17,2
80018a04:	10c7883a 	add	r3,r2,r3
80018a08:	18800017 	ldw	r2,0(r3)
80018a0c:	10001126 	beq	r2,zero,80018a54 <_Balloc+0x78>
80018a10:	11000017 	ldw	r4,0(r2)
80018a14:	19000015 	stw	r4,0(r3)
80018a18:	10000415 	stw	zero,16(r2)
80018a1c:	10000315 	stw	zero,12(r2)
80018a20:	dfc00317 	ldw	ra,12(sp)
80018a24:	dc800217 	ldw	r18,8(sp)
80018a28:	dc400117 	ldw	r17,4(sp)
80018a2c:	dc000017 	ldw	r16,0(sp)
80018a30:	dec00404 	addi	sp,sp,16
80018a34:	f800283a 	ret
80018a38:	01800844 	movi	r6,33
80018a3c:	01400104 	movi	r5,4
80018a40:	000f9e40 	call	8000f9e4 <_calloc_r>
80018a44:	80801315 	stw	r2,76(r16)
80018a48:	103fed1e 	bne	r2,zero,80018a00 <_gp+0xfffe7c8c>
80018a4c:	0005883a 	mov	r2,zero
80018a50:	003ff306 	br	80018a20 <_gp+0xfffe7cac>
80018a54:	04800044 	movi	r18,1
80018a58:	9464983a 	sll	r18,r18,r17
80018a5c:	01400044 	movi	r5,1
80018a60:	8009883a 	mov	r4,r16
80018a64:	91800144 	addi	r6,r18,5
80018a68:	300c90ba 	slli	r6,r6,2
80018a6c:	000f9e40 	call	8000f9e4 <_calloc_r>
80018a70:	103ff626 	beq	r2,zero,80018a4c <_gp+0xfffe7cd8>
80018a74:	14400115 	stw	r17,4(r2)
80018a78:	14800215 	stw	r18,8(r2)
80018a7c:	003fe606 	br	80018a18 <_gp+0xfffe7ca4>

80018a80 <_Bfree>:
80018a80:	28000726 	beq	r5,zero,80018aa0 <_Bfree+0x20>
80018a84:	28c00117 	ldw	r3,4(r5)
80018a88:	20801317 	ldw	r2,76(r4)
80018a8c:	180690ba 	slli	r3,r3,2
80018a90:	10c5883a 	add	r2,r2,r3
80018a94:	10c00017 	ldw	r3,0(r2)
80018a98:	28c00015 	stw	r3,0(r5)
80018a9c:	11400015 	stw	r5,0(r2)
80018aa0:	f800283a 	ret

80018aa4 <__multadd>:
80018aa4:	defffa04 	addi	sp,sp,-24
80018aa8:	dc800315 	stw	r18,12(sp)
80018aac:	dc400215 	stw	r17,8(sp)
80018ab0:	dc000115 	stw	r16,4(sp)
80018ab4:	2823883a 	mov	r17,r5
80018ab8:	2c000417 	ldw	r16,16(r5)
80018abc:	2025883a 	mov	r18,r4
80018ac0:	dfc00515 	stw	ra,20(sp)
80018ac4:	29000504 	addi	r4,r5,20
80018ac8:	dcc00415 	stw	r19,16(sp)
80018acc:	000b883a 	mov	r5,zero
80018ad0:	20800017 	ldw	r2,0(r4)
80018ad4:	21000104 	addi	r4,r4,4
80018ad8:	29400044 	addi	r5,r5,1
80018adc:	10ffffcc 	andi	r3,r2,65535
80018ae0:	1987383a 	mul	r3,r3,r6
80018ae4:	1004d43a 	srli	r2,r2,16
80018ae8:	19c7883a 	add	r3,r3,r7
80018aec:	118f383a 	mul	r7,r2,r6
80018af0:	1804d43a 	srli	r2,r3,16
80018af4:	18ffffcc 	andi	r3,r3,65535
80018af8:	388f883a 	add	r7,r7,r2
80018afc:	3804943a 	slli	r2,r7,16
80018b00:	380ed43a 	srli	r7,r7,16
80018b04:	10c7883a 	add	r3,r2,r3
80018b08:	20ffff15 	stw	r3,-4(r4)
80018b0c:	2c3ff016 	blt	r5,r16,80018ad0 <_gp+0xfffe7d5c>
80018b10:	38000826 	beq	r7,zero,80018b34 <__multadd+0x90>
80018b14:	88800217 	ldw	r2,8(r17)
80018b18:	80800e0e 	bge	r16,r2,80018b54 <__multadd+0xb0>
80018b1c:	80800144 	addi	r2,r16,5
80018b20:	100490ba 	slli	r2,r2,2
80018b24:	84000044 	addi	r16,r16,1
80018b28:	8885883a 	add	r2,r17,r2
80018b2c:	11c00015 	stw	r7,0(r2)
80018b30:	8c000415 	stw	r16,16(r17)
80018b34:	8805883a 	mov	r2,r17
80018b38:	dfc00517 	ldw	ra,20(sp)
80018b3c:	dcc00417 	ldw	r19,16(sp)
80018b40:	dc800317 	ldw	r18,12(sp)
80018b44:	dc400217 	ldw	r17,8(sp)
80018b48:	dc000117 	ldw	r16,4(sp)
80018b4c:	dec00604 	addi	sp,sp,24
80018b50:	f800283a 	ret
80018b54:	89400117 	ldw	r5,4(r17)
80018b58:	9009883a 	mov	r4,r18
80018b5c:	d9c00015 	stw	r7,0(sp)
80018b60:	29400044 	addi	r5,r5,1
80018b64:	00189dc0 	call	800189dc <_Balloc>
80018b68:	89800417 	ldw	r6,16(r17)
80018b6c:	89400304 	addi	r5,r17,12
80018b70:	11000304 	addi	r4,r2,12
80018b74:	31800084 	addi	r6,r6,2
80018b78:	300c90ba 	slli	r6,r6,2
80018b7c:	1027883a 	mov	r19,r2
80018b80:	00104e80 	call	800104e8 <memcpy>
80018b84:	d9c00017 	ldw	r7,0(sp)
80018b88:	88000926 	beq	r17,zero,80018bb0 <__multadd+0x10c>
80018b8c:	88c00117 	ldw	r3,4(r17)
80018b90:	90801317 	ldw	r2,76(r18)
80018b94:	180690ba 	slli	r3,r3,2
80018b98:	10c5883a 	add	r2,r2,r3
80018b9c:	10c00017 	ldw	r3,0(r2)
80018ba0:	88c00015 	stw	r3,0(r17)
80018ba4:	14400015 	stw	r17,0(r2)
80018ba8:	9823883a 	mov	r17,r19
80018bac:	003fdb06 	br	80018b1c <_gp+0xfffe7da8>
80018bb0:	9823883a 	mov	r17,r19
80018bb4:	003fd906 	br	80018b1c <_gp+0xfffe7da8>

80018bb8 <__s2b>:
80018bb8:	defff904 	addi	sp,sp,-28
80018bbc:	dcc00315 	stw	r19,12(sp)
80018bc0:	dc000015 	stw	r16,0(sp)
80018bc4:	2027883a 	mov	r19,r4
80018bc8:	2821883a 	mov	r16,r5
80018bcc:	39000204 	addi	r4,r7,8
80018bd0:	01400244 	movi	r5,9
80018bd4:	dd000415 	stw	r20,16(sp)
80018bd8:	dc800215 	stw	r18,8(sp)
80018bdc:	dfc00615 	stw	ra,24(sp)
80018be0:	dd400515 	stw	r21,20(sp)
80018be4:	dc400115 	stw	r17,4(sp)
80018be8:	3825883a 	mov	r18,r7
80018bec:	3029883a 	mov	r20,r6
80018bf0:	000d4880 	call	8000d488 <__divsi3>
80018bf4:	10c00090 	cmplti	r3,r2,2
80018bf8:	1800311e 	bne	r3,zero,80018cc0 <__s2b+0x108>
80018bfc:	00c00044 	movi	r3,1
80018c00:	000b883a 	mov	r5,zero
80018c04:	18c7883a 	add	r3,r3,r3
80018c08:	29400044 	addi	r5,r5,1
80018c0c:	18bffd16 	blt	r3,r2,80018c04 <_gp+0xfffe7e90>
80018c10:	9809883a 	mov	r4,r19
80018c14:	00189dc0 	call	800189dc <_Balloc>
80018c18:	d8c00717 	ldw	r3,28(sp)
80018c1c:	10c00515 	stw	r3,20(r2)
80018c20:	00c00044 	movi	r3,1
80018c24:	10c00415 	stw	r3,16(r2)
80018c28:	a0c00290 	cmplti	r3,r20,10
80018c2c:	1800211e 	bne	r3,zero,80018cb4 <__s2b+0xfc>
80018c30:	85400244 	addi	r21,r16,9
80018c34:	a823883a 	mov	r17,r21
80018c38:	8521883a 	add	r16,r16,r20
80018c3c:	8c400044 	addi	r17,r17,1
80018c40:	89ffffc7 	ldb	r7,-1(r17)
80018c44:	01800284 	movi	r6,10
80018c48:	100b883a 	mov	r5,r2
80018c4c:	39fff404 	addi	r7,r7,-48
80018c50:	9809883a 	mov	r4,r19
80018c54:	0018aa40 	call	80018aa4 <__multadd>
80018c58:	847ff81e 	bne	r16,r17,80018c3c <_gp+0xfffe7ec8>
80018c5c:	ad21883a 	add	r16,r21,r20
80018c60:	843ffe04 	addi	r16,r16,-8
80018c64:	a4800a0e 	bge	r20,r18,80018c90 <__s2b+0xd8>
80018c68:	9523c83a 	sub	r17,r18,r20
80018c6c:	8463883a 	add	r17,r16,r17
80018c70:	84000044 	addi	r16,r16,1
80018c74:	81ffffc7 	ldb	r7,-1(r16)
80018c78:	01800284 	movi	r6,10
80018c7c:	100b883a 	mov	r5,r2
80018c80:	39fff404 	addi	r7,r7,-48
80018c84:	9809883a 	mov	r4,r19
80018c88:	0018aa40 	call	80018aa4 <__multadd>
80018c8c:	8c3ff81e 	bne	r17,r16,80018c70 <_gp+0xfffe7efc>
80018c90:	dfc00617 	ldw	ra,24(sp)
80018c94:	dd400517 	ldw	r21,20(sp)
80018c98:	dd000417 	ldw	r20,16(sp)
80018c9c:	dcc00317 	ldw	r19,12(sp)
80018ca0:	dc800217 	ldw	r18,8(sp)
80018ca4:	dc400117 	ldw	r17,4(sp)
80018ca8:	dc000017 	ldw	r16,0(sp)
80018cac:	dec00704 	addi	sp,sp,28
80018cb0:	f800283a 	ret
80018cb4:	84000284 	addi	r16,r16,10
80018cb8:	05000244 	movi	r20,9
80018cbc:	003fe906 	br	80018c64 <_gp+0xfffe7ef0>
80018cc0:	000b883a 	mov	r5,zero
80018cc4:	003fd206 	br	80018c10 <_gp+0xfffe7e9c>

80018cc8 <__hi0bits>:
80018cc8:	20bfffec 	andhi	r2,r4,65535
80018ccc:	1000151e 	bne	r2,zero,80018d24 <__hi0bits+0x5c>
80018cd0:	2008943a 	slli	r4,r4,16
80018cd4:	00800404 	movi	r2,16
80018cd8:	20ffc02c 	andhi	r3,r4,65280
80018cdc:	1800021e 	bne	r3,zero,80018ce8 <__hi0bits+0x20>
80018ce0:	2008923a 	slli	r4,r4,8
80018ce4:	10800204 	addi	r2,r2,8
80018ce8:	20fc002c 	andhi	r3,r4,61440
80018cec:	1800021e 	bne	r3,zero,80018cf8 <__hi0bits+0x30>
80018cf0:	2008913a 	slli	r4,r4,4
80018cf4:	10800104 	addi	r2,r2,4
80018cf8:	20f0002c 	andhi	r3,r4,49152
80018cfc:	1800021e 	bne	r3,zero,80018d08 <__hi0bits+0x40>
80018d00:	200890ba 	slli	r4,r4,2
80018d04:	10800084 	addi	r2,r2,2
80018d08:	20000516 	blt	r4,zero,80018d20 <__hi0bits+0x58>
80018d0c:	2110002c 	andhi	r4,r4,16384
80018d10:	20000226 	beq	r4,zero,80018d1c <__hi0bits+0x54>
80018d14:	10800044 	addi	r2,r2,1
80018d18:	f800283a 	ret
80018d1c:	00800804 	movi	r2,32
80018d20:	f800283a 	ret
80018d24:	0005883a 	mov	r2,zero
80018d28:	003feb06 	br	80018cd8 <_gp+0xfffe7f64>

80018d2c <__lo0bits>:
80018d2c:	20c00017 	ldw	r3,0(r4)
80018d30:	188001cc 	andi	r2,r3,7
80018d34:	10000826 	beq	r2,zero,80018d58 <__lo0bits+0x2c>
80018d38:	1880004c 	andi	r2,r3,1
80018d3c:	10001f1e 	bne	r2,zero,80018dbc <__lo0bits+0x90>
80018d40:	1880008c 	andi	r2,r3,2
80018d44:	10001f26 	beq	r2,zero,80018dc4 <__lo0bits+0x98>
80018d48:	1806d07a 	srli	r3,r3,1
80018d4c:	00800044 	movi	r2,1
80018d50:	20c00015 	stw	r3,0(r4)
80018d54:	f800283a 	ret
80018d58:	18bfffcc 	andi	r2,r3,65535
80018d5c:	10001426 	beq	r2,zero,80018db0 <__lo0bits+0x84>
80018d60:	0005883a 	mov	r2,zero
80018d64:	19403fcc 	andi	r5,r3,255
80018d68:	2800021e 	bne	r5,zero,80018d74 <__lo0bits+0x48>
80018d6c:	1806d23a 	srli	r3,r3,8
80018d70:	10800204 	addi	r2,r2,8
80018d74:	194003cc 	andi	r5,r3,15
80018d78:	2800021e 	bne	r5,zero,80018d84 <__lo0bits+0x58>
80018d7c:	1806d13a 	srli	r3,r3,4
80018d80:	10800104 	addi	r2,r2,4
80018d84:	194000cc 	andi	r5,r3,3
80018d88:	2800021e 	bne	r5,zero,80018d94 <__lo0bits+0x68>
80018d8c:	1806d0ba 	srli	r3,r3,2
80018d90:	10800084 	addi	r2,r2,2
80018d94:	1940004c 	andi	r5,r3,1
80018d98:	2800031e 	bne	r5,zero,80018da8 <__lo0bits+0x7c>
80018d9c:	1806d07a 	srli	r3,r3,1
80018da0:	18000c26 	beq	r3,zero,80018dd4 <__lo0bits+0xa8>
80018da4:	10800044 	addi	r2,r2,1
80018da8:	20c00015 	stw	r3,0(r4)
80018dac:	f800283a 	ret
80018db0:	1806d43a 	srli	r3,r3,16
80018db4:	00800404 	movi	r2,16
80018db8:	003fea06 	br	80018d64 <_gp+0xfffe7ff0>
80018dbc:	0005883a 	mov	r2,zero
80018dc0:	f800283a 	ret
80018dc4:	1806d0ba 	srli	r3,r3,2
80018dc8:	00800084 	movi	r2,2
80018dcc:	20c00015 	stw	r3,0(r4)
80018dd0:	f800283a 	ret
80018dd4:	00800804 	movi	r2,32
80018dd8:	f800283a 	ret

80018ddc <__i2b>:
80018ddc:	defffe04 	addi	sp,sp,-8
80018de0:	dc000015 	stw	r16,0(sp)
80018de4:	2821883a 	mov	r16,r5
80018de8:	01400044 	movi	r5,1
80018dec:	dfc00115 	stw	ra,4(sp)
80018df0:	00189dc0 	call	800189dc <_Balloc>
80018df4:	01000044 	movi	r4,1
80018df8:	14000515 	stw	r16,20(r2)
80018dfc:	11000415 	stw	r4,16(r2)
80018e00:	dfc00117 	ldw	ra,4(sp)
80018e04:	dc000017 	ldw	r16,0(sp)
80018e08:	dec00204 	addi	sp,sp,8
80018e0c:	f800283a 	ret

80018e10 <__multiply>:
80018e10:	defffa04 	addi	sp,sp,-24
80018e14:	dc800215 	stw	r18,8(sp)
80018e18:	dc400115 	stw	r17,4(sp)
80018e1c:	34800417 	ldw	r18,16(r6)
80018e20:	2c400417 	ldw	r17,16(r5)
80018e24:	dd000415 	stw	r20,16(sp)
80018e28:	dcc00315 	stw	r19,12(sp)
80018e2c:	dfc00515 	stw	ra,20(sp)
80018e30:	dc000015 	stw	r16,0(sp)
80018e34:	2827883a 	mov	r19,r5
80018e38:	3029883a 	mov	r20,r6
80018e3c:	8c80050e 	bge	r17,r18,80018e54 <__multiply+0x44>
80018e40:	8807883a 	mov	r3,r17
80018e44:	3027883a 	mov	r19,r6
80018e48:	9023883a 	mov	r17,r18
80018e4c:	2829883a 	mov	r20,r5
80018e50:	1825883a 	mov	r18,r3
80018e54:	98800217 	ldw	r2,8(r19)
80018e58:	8ca1883a 	add	r16,r17,r18
80018e5c:	99400117 	ldw	r5,4(r19)
80018e60:	1400010e 	bge	r2,r16,80018e68 <__multiply+0x58>
80018e64:	29400044 	addi	r5,r5,1
80018e68:	00189dc0 	call	800189dc <_Balloc>
80018e6c:	801290ba 	slli	r9,r16,2
80018e70:	12800504 	addi	r10,r2,20
80018e74:	5253883a 	add	r9,r10,r9
80018e78:	5240042e 	bgeu	r10,r9,80018e8c <__multiply+0x7c>
80018e7c:	5007883a 	mov	r3,r10
80018e80:	18000015 	stw	zero,0(r3)
80018e84:	18c00104 	addi	r3,r3,4
80018e88:	1a7ffd36 	bltu	r3,r9,80018e80 <_gp+0xfffe810c>
80018e8c:	901690ba 	slli	r11,r18,2
80018e90:	881090ba 	slli	r8,r17,2
80018e94:	a1800504 	addi	r6,r20,20
80018e98:	99400504 	addi	r5,r19,20
80018e9c:	32d7883a 	add	r11,r6,r11
80018ea0:	2a11883a 	add	r8,r5,r8
80018ea4:	32c00636 	bltu	r6,r11,80018ec0 <__multiply+0xb0>
80018ea8:	00004506 	br	80018fc0 <__multiply+0x1b0>
80018eac:	681ad43a 	srli	r13,r13,16
80018eb0:	6800241e 	bne	r13,zero,80018f44 <__multiply+0x134>
80018eb4:	31800104 	addi	r6,r6,4
80018eb8:	52800104 	addi	r10,r10,4
80018ebc:	32c0402e 	bgeu	r6,r11,80018fc0 <__multiply+0x1b0>
80018ec0:	33400017 	ldw	r13,0(r6)
80018ec4:	6bffffcc 	andi	r15,r13,65535
80018ec8:	783ff826 	beq	r15,zero,80018eac <_gp+0xfffe8138>
80018ecc:	501d883a 	mov	r14,r10
80018ed0:	281b883a 	mov	r13,r5
80018ed4:	0023883a 	mov	r17,zero
80018ed8:	00000106 	br	80018ee0 <__multiply+0xd0>
80018edc:	f81d883a 	mov	r14,ra
80018ee0:	69000017 	ldw	r4,0(r13)
80018ee4:	73000017 	ldw	r12,0(r14)
80018ee8:	77c00104 	addi	ra,r14,4
80018eec:	21ffffcc 	andi	r7,r4,65535
80018ef0:	3bcf383a 	mul	r7,r7,r15
80018ef4:	2006d43a 	srli	r3,r4,16
80018ef8:	613fffcc 	andi	r4,r12,65535
80018efc:	390f883a 	add	r7,r7,r4
80018f00:	3c4f883a 	add	r7,r7,r17
80018f04:	1bc7383a 	mul	r3,r3,r15
80018f08:	6018d43a 	srli	r12,r12,16
80018f0c:	3808d43a 	srli	r4,r7,16
80018f10:	39ffffcc 	andi	r7,r7,65535
80018f14:	1b07883a 	add	r3,r3,r12
80018f18:	1907883a 	add	r3,r3,r4
80018f1c:	1808943a 	slli	r4,r3,16
80018f20:	6b400104 	addi	r13,r13,4
80018f24:	1822d43a 	srli	r17,r3,16
80018f28:	21ceb03a 	or	r7,r4,r7
80018f2c:	f9ffff15 	stw	r7,-4(ra)
80018f30:	6a3fea36 	bltu	r13,r8,80018edc <_gp+0xfffe8168>
80018f34:	74400115 	stw	r17,4(r14)
80018f38:	33400017 	ldw	r13,0(r6)
80018f3c:	681ad43a 	srli	r13,r13,16
80018f40:	683fdc26 	beq	r13,zero,80018eb4 <_gp+0xfffe8140>
80018f44:	50c00017 	ldw	r3,0(r10)
80018f48:	501d883a 	mov	r14,r10
80018f4c:	2819883a 	mov	r12,r5
80018f50:	180f883a 	mov	r7,r3
80018f54:	0023883a 	mov	r17,zero
80018f58:	00000106 	br	80018f60 <__multiply+0x150>
80018f5c:	781d883a 	mov	r14,r15
80018f60:	6100000b 	ldhu	r4,0(r12)
80018f64:	380ed43a 	srli	r7,r7,16
80018f68:	18ffffcc 	andi	r3,r3,65535
80018f6c:	2349383a 	mul	r4,r4,r13
80018f70:	73c00104 	addi	r15,r14,4
80018f74:	63000104 	addi	r12,r12,4
80018f78:	21c9883a 	add	r4,r4,r7
80018f7c:	2449883a 	add	r4,r4,r17
80018f80:	200e943a 	slli	r7,r4,16
80018f84:	2008d43a 	srli	r4,r4,16
80018f88:	38c6b03a 	or	r3,r7,r3
80018f8c:	78ffff15 	stw	r3,-4(r15)
80018f90:	60ffff8b 	ldhu	r3,-2(r12)
80018f94:	71c00117 	ldw	r7,4(r14)
80018f98:	1b47383a 	mul	r3,r3,r13
80018f9c:	3c7fffcc 	andi	r17,r7,65535
80018fa0:	1c47883a 	add	r3,r3,r17
80018fa4:	1907883a 	add	r3,r3,r4
80018fa8:	1822d43a 	srli	r17,r3,16
80018fac:	623feb36 	bltu	r12,r8,80018f5c <_gp+0xfffe81e8>
80018fb0:	70c00115 	stw	r3,4(r14)
80018fb4:	31800104 	addi	r6,r6,4
80018fb8:	52800104 	addi	r10,r10,4
80018fbc:	32ffc036 	bltu	r6,r11,80018ec0 <_gp+0xfffe814c>
80018fc0:	0400090e 	bge	zero,r16,80018fe8 <__multiply+0x1d8>
80018fc4:	48ffff17 	ldw	r3,-4(r9)
80018fc8:	4a7fff04 	addi	r9,r9,-4
80018fcc:	18000326 	beq	r3,zero,80018fdc <__multiply+0x1cc>
80018fd0:	00000506 	br	80018fe8 <__multiply+0x1d8>
80018fd4:	48c00017 	ldw	r3,0(r9)
80018fd8:	1800031e 	bne	r3,zero,80018fe8 <__multiply+0x1d8>
80018fdc:	843fffc4 	addi	r16,r16,-1
80018fe0:	4a7fff04 	addi	r9,r9,-4
80018fe4:	803ffb1e 	bne	r16,zero,80018fd4 <_gp+0xfffe8260>
80018fe8:	14000415 	stw	r16,16(r2)
80018fec:	dfc00517 	ldw	ra,20(sp)
80018ff0:	dd000417 	ldw	r20,16(sp)
80018ff4:	dcc00317 	ldw	r19,12(sp)
80018ff8:	dc800217 	ldw	r18,8(sp)
80018ffc:	dc400117 	ldw	r17,4(sp)
80019000:	dc000017 	ldw	r16,0(sp)
80019004:	dec00604 	addi	sp,sp,24
80019008:	f800283a 	ret

8001900c <__pow5mult>:
8001900c:	defffb04 	addi	sp,sp,-20
80019010:	dcc00315 	stw	r19,12(sp)
80019014:	dc000015 	stw	r16,0(sp)
80019018:	dfc00415 	stw	ra,16(sp)
8001901c:	dc800215 	stw	r18,8(sp)
80019020:	dc400115 	stw	r17,4(sp)
80019024:	308000cc 	andi	r2,r6,3
80019028:	3021883a 	mov	r16,r6
8001902c:	2027883a 	mov	r19,r4
80019030:	1000371e 	bne	r2,zero,80019110 <__pow5mult+0x104>
80019034:	2825883a 	mov	r18,r5
80019038:	8021d0ba 	srai	r16,r16,2
8001903c:	80002326 	beq	r16,zero,800190cc <__pow5mult+0xc0>
80019040:	9c401217 	ldw	r17,72(r19)
80019044:	88001d1e 	bne	r17,zero,800190bc <__pow5mult+0xb0>
80019048:	01400044 	movi	r5,1
8001904c:	9809883a 	mov	r4,r19
80019050:	00189dc0 	call	800189dc <_Balloc>
80019054:	1023883a 	mov	r17,r2
80019058:	00809c44 	movi	r2,625
8001905c:	88800515 	stw	r2,20(r17)
80019060:	00800044 	movi	r2,1
80019064:	88800415 	stw	r2,16(r17)
80019068:	9c401215 	stw	r17,72(r19)
8001906c:	88000015 	stw	zero,0(r17)
80019070:	00001206 	br	800190bc <__pow5mult+0xb0>
80019074:	880d883a 	mov	r6,r17
80019078:	900b883a 	mov	r5,r18
8001907c:	9809883a 	mov	r4,r19
80019080:	0018e100 	call	80018e10 <__multiply>
80019084:	90002026 	beq	r18,zero,80019108 <__pow5mult+0xfc>
80019088:	91000117 	ldw	r4,4(r18)
8001908c:	98c01317 	ldw	r3,76(r19)
80019090:	200890ba 	slli	r4,r4,2
80019094:	1907883a 	add	r3,r3,r4
80019098:	19000017 	ldw	r4,0(r3)
8001909c:	91000015 	stw	r4,0(r18)
800190a0:	1c800015 	stw	r18,0(r3)
800190a4:	1025883a 	mov	r18,r2
800190a8:	8021d07a 	srai	r16,r16,1
800190ac:	80000726 	beq	r16,zero,800190cc <__pow5mult+0xc0>
800190b0:	88800017 	ldw	r2,0(r17)
800190b4:	10000d26 	beq	r2,zero,800190ec <__pow5mult+0xe0>
800190b8:	1023883a 	mov	r17,r2
800190bc:	8080004c 	andi	r2,r16,1
800190c0:	103fec1e 	bne	r2,zero,80019074 <_gp+0xfffe8300>
800190c4:	8021d07a 	srai	r16,r16,1
800190c8:	803ff91e 	bne	r16,zero,800190b0 <_gp+0xfffe833c>
800190cc:	9005883a 	mov	r2,r18
800190d0:	dfc00417 	ldw	ra,16(sp)
800190d4:	dcc00317 	ldw	r19,12(sp)
800190d8:	dc800217 	ldw	r18,8(sp)
800190dc:	dc400117 	ldw	r17,4(sp)
800190e0:	dc000017 	ldw	r16,0(sp)
800190e4:	dec00504 	addi	sp,sp,20
800190e8:	f800283a 	ret
800190ec:	880d883a 	mov	r6,r17
800190f0:	880b883a 	mov	r5,r17
800190f4:	9809883a 	mov	r4,r19
800190f8:	0018e100 	call	80018e10 <__multiply>
800190fc:	88800015 	stw	r2,0(r17)
80019100:	10000015 	stw	zero,0(r2)
80019104:	003fec06 	br	800190b8 <_gp+0xfffe8344>
80019108:	1025883a 	mov	r18,r2
8001910c:	003fe606 	br	800190a8 <_gp+0xfffe8334>
80019110:	100490ba 	slli	r2,r2,2
80019114:	00e000b4 	movhi	r3,32770
80019118:	000f883a 	mov	r7,zero
8001911c:	10c7883a 	add	r3,r2,r3
80019120:	199b9017 	ldw	r6,28224(r3)
80019124:	0018aa40 	call	80018aa4 <__multadd>
80019128:	1025883a 	mov	r18,r2
8001912c:	003fc206 	br	80019038 <_gp+0xfffe82c4>

80019130 <__lshift>:
80019130:	defff904 	addi	sp,sp,-28
80019134:	dd000415 	stw	r20,16(sp)
80019138:	dc000015 	stw	r16,0(sp)
8001913c:	2d000417 	ldw	r20,16(r5)
80019140:	3021d17a 	srai	r16,r6,5
80019144:	28800217 	ldw	r2,8(r5)
80019148:	dd400515 	stw	r21,20(sp)
8001914c:	8529883a 	add	r20,r16,r20
80019150:	dcc00315 	stw	r19,12(sp)
80019154:	dc800215 	stw	r18,8(sp)
80019158:	dc400115 	stw	r17,4(sp)
8001915c:	dfc00615 	stw	ra,24(sp)
80019160:	a4400044 	addi	r17,r20,1
80019164:	2825883a 	mov	r18,r5
80019168:	302b883a 	mov	r21,r6
8001916c:	2027883a 	mov	r19,r4
80019170:	29400117 	ldw	r5,4(r5)
80019174:	1440030e 	bge	r2,r17,80019184 <__lshift+0x54>
80019178:	1085883a 	add	r2,r2,r2
8001917c:	29400044 	addi	r5,r5,1
80019180:	147ffd16 	blt	r2,r17,80019178 <_gp+0xfffe8404>
80019184:	9809883a 	mov	r4,r19
80019188:	00189dc0 	call	800189dc <_Balloc>
8001918c:	10c00504 	addi	r3,r2,20
80019190:	0400360e 	bge	zero,r16,8001926c <__lshift+0x13c>
80019194:	800890ba 	slli	r4,r16,2
80019198:	1909883a 	add	r4,r3,r4
8001919c:	18c00104 	addi	r3,r3,4
800191a0:	183fff15 	stw	zero,-4(r3)
800191a4:	193ffd1e 	bne	r3,r4,8001919c <_gp+0xfffe8428>
800191a8:	92000417 	ldw	r8,16(r18)
800191ac:	90c00504 	addi	r3,r18,20
800191b0:	a98007cc 	andi	r6,r21,31
800191b4:	401090ba 	slli	r8,r8,2
800191b8:	1a11883a 	add	r8,r3,r8
800191bc:	30002326 	beq	r6,zero,8001924c <__lshift+0x11c>
800191c0:	02800804 	movi	r10,32
800191c4:	5195c83a 	sub	r10,r10,r6
800191c8:	000f883a 	mov	r7,zero
800191cc:	00000106 	br	800191d4 <__lshift+0xa4>
800191d0:	4809883a 	mov	r4,r9
800191d4:	19400017 	ldw	r5,0(r3)
800191d8:	22400104 	addi	r9,r4,4
800191dc:	18c00104 	addi	r3,r3,4
800191e0:	298a983a 	sll	r5,r5,r6
800191e4:	29cab03a 	or	r5,r5,r7
800191e8:	497fff15 	stw	r5,-4(r9)
800191ec:	197fff17 	ldw	r5,-4(r3)
800191f0:	2a8ed83a 	srl	r7,r5,r10
800191f4:	1a3ff636 	bltu	r3,r8,800191d0 <_gp+0xfffe845c>
800191f8:	21c00115 	stw	r7,4(r4)
800191fc:	3800191e 	bne	r7,zero,80019264 <__lshift+0x134>
80019200:	8c7fffc4 	addi	r17,r17,-1
80019204:	14400415 	stw	r17,16(r2)
80019208:	90000726 	beq	r18,zero,80019228 <__lshift+0xf8>
8001920c:	91000117 	ldw	r4,4(r18)
80019210:	98c01317 	ldw	r3,76(r19)
80019214:	200890ba 	slli	r4,r4,2
80019218:	1907883a 	add	r3,r3,r4
8001921c:	19000017 	ldw	r4,0(r3)
80019220:	91000015 	stw	r4,0(r18)
80019224:	1c800015 	stw	r18,0(r3)
80019228:	dfc00617 	ldw	ra,24(sp)
8001922c:	dd400517 	ldw	r21,20(sp)
80019230:	dd000417 	ldw	r20,16(sp)
80019234:	dcc00317 	ldw	r19,12(sp)
80019238:	dc800217 	ldw	r18,8(sp)
8001923c:	dc400117 	ldw	r17,4(sp)
80019240:	dc000017 	ldw	r16,0(sp)
80019244:	dec00704 	addi	sp,sp,28
80019248:	f800283a 	ret
8001924c:	18c00104 	addi	r3,r3,4
80019250:	197fff17 	ldw	r5,-4(r3)
80019254:	21000104 	addi	r4,r4,4
80019258:	217fff15 	stw	r5,-4(r4)
8001925c:	1a3ffb36 	bltu	r3,r8,8001924c <_gp+0xfffe84d8>
80019260:	003fe706 	br	80019200 <_gp+0xfffe848c>
80019264:	a4400084 	addi	r17,r20,2
80019268:	003fe506 	br	80019200 <_gp+0xfffe848c>
8001926c:	1809883a 	mov	r4,r3
80019270:	003fcd06 	br	800191a8 <_gp+0xfffe8434>

80019274 <__mcmp>:
80019274:	20800417 	ldw	r2,16(r4)
80019278:	28c00417 	ldw	r3,16(r5)
8001927c:	10c5c83a 	sub	r2,r2,r3
80019280:	1000101e 	bne	r2,zero,800192c4 <__mcmp+0x50>
80019284:	180c90ba 	slli	r6,r3,2
80019288:	21000504 	addi	r4,r4,20
8001928c:	29400504 	addi	r5,r5,20
80019290:	2187883a 	add	r3,r4,r6
80019294:	298b883a 	add	r5,r5,r6
80019298:	00000106 	br	800192a0 <__mcmp+0x2c>
8001929c:	20c00a2e 	bgeu	r4,r3,800192c8 <__mcmp+0x54>
800192a0:	18ffff04 	addi	r3,r3,-4
800192a4:	297fff04 	addi	r5,r5,-4
800192a8:	19c00017 	ldw	r7,0(r3)
800192ac:	29800017 	ldw	r6,0(r5)
800192b0:	39bffa26 	beq	r7,r6,8001929c <_gp+0xfffe8528>
800192b4:	39800236 	bltu	r7,r6,800192c0 <__mcmp+0x4c>
800192b8:	00800044 	movi	r2,1
800192bc:	f800283a 	ret
800192c0:	00bfffc4 	movi	r2,-1
800192c4:	f800283a 	ret
800192c8:	f800283a 	ret

800192cc <__mdiff>:
800192cc:	defffa04 	addi	sp,sp,-24
800192d0:	dc800215 	stw	r18,8(sp)
800192d4:	30800417 	ldw	r2,16(r6)
800192d8:	2c800417 	ldw	r18,16(r5)
800192dc:	dd000415 	stw	r20,16(sp)
800192e0:	dcc00315 	stw	r19,12(sp)
800192e4:	dc400115 	stw	r17,4(sp)
800192e8:	dc000015 	stw	r16,0(sp)
800192ec:	dfc00515 	stw	ra,20(sp)
800192f0:	90a5c83a 	sub	r18,r18,r2
800192f4:	2827883a 	mov	r19,r5
800192f8:	3029883a 	mov	r20,r6
800192fc:	2c000504 	addi	r16,r5,20
80019300:	34400504 	addi	r17,r6,20
80019304:	9000131e 	bne	r18,zero,80019354 <__mdiff+0x88>
80019308:	100490ba 	slli	r2,r2,2
8001930c:	8087883a 	add	r3,r16,r2
80019310:	8885883a 	add	r2,r17,r2
80019314:	00000106 	br	8001931c <__mdiff+0x50>
80019318:	80c0562e 	bgeu	r16,r3,80019474 <__mdiff+0x1a8>
8001931c:	18ffff04 	addi	r3,r3,-4
80019320:	10bfff04 	addi	r2,r2,-4
80019324:	19c00017 	ldw	r7,0(r3)
80019328:	11400017 	ldw	r5,0(r2)
8001932c:	397ffa26 	beq	r7,r5,80019318 <_gp+0xfffe85a4>
80019330:	39400a2e 	bgeu	r7,r5,8001935c <__mdiff+0x90>
80019334:	8007883a 	mov	r3,r16
80019338:	9805883a 	mov	r2,r19
8001933c:	8821883a 	mov	r16,r17
80019340:	a027883a 	mov	r19,r20
80019344:	1823883a 	mov	r17,r3
80019348:	1029883a 	mov	r20,r2
8001934c:	04800044 	movi	r18,1
80019350:	00000206 	br	8001935c <__mdiff+0x90>
80019354:	903ff716 	blt	r18,zero,80019334 <_gp+0xfffe85c0>
80019358:	0025883a 	mov	r18,zero
8001935c:	99400117 	ldw	r5,4(r19)
80019360:	00189dc0 	call	800189dc <_Balloc>
80019364:	9a000417 	ldw	r8,16(r19)
80019368:	a2800417 	ldw	r10,16(r20)
8001936c:	11800504 	addi	r6,r2,20
80019370:	401290ba 	slli	r9,r8,2
80019374:	501490ba 	slli	r10,r10,2
80019378:	14800315 	stw	r18,12(r2)
8001937c:	8253883a 	add	r9,r16,r9
80019380:	8a95883a 	add	r10,r17,r10
80019384:	0007883a 	mov	r3,zero
80019388:	00000106 	br	80019390 <__mdiff+0xc4>
8001938c:	3821883a 	mov	r16,r7
80019390:	81000017 	ldw	r4,0(r16)
80019394:	89c00017 	ldw	r7,0(r17)
80019398:	31800104 	addi	r6,r6,4
8001939c:	217fffcc 	andi	r5,r4,65535
800193a0:	28cb883a 	add	r5,r5,r3
800193a4:	38ffffcc 	andi	r3,r7,65535
800193a8:	28cbc83a 	sub	r5,r5,r3
800193ac:	380ed43a 	srli	r7,r7,16
800193b0:	2006d43a 	srli	r3,r4,16
800193b4:	2809d43a 	srai	r4,r5,16
800193b8:	297fffcc 	andi	r5,r5,65535
800193bc:	19c7c83a 	sub	r3,r3,r7
800193c0:	1907883a 	add	r3,r3,r4
800193c4:	1808943a 	slli	r4,r3,16
800193c8:	8c400104 	addi	r17,r17,4
800193cc:	81c00104 	addi	r7,r16,4
800193d0:	214ab03a 	or	r5,r4,r5
800193d4:	317fff15 	stw	r5,-4(r6)
800193d8:	1807d43a 	srai	r3,r3,16
800193dc:	8abfeb36 	bltu	r17,r10,8001938c <_gp+0xfffe8618>
800193e0:	3a40152e 	bgeu	r7,r9,80019438 <__mdiff+0x16c>
800193e4:	3015883a 	mov	r10,r6
800193e8:	39000017 	ldw	r4,0(r7)
800193ec:	52800104 	addi	r10,r10,4
800193f0:	39c00104 	addi	r7,r7,4
800193f4:	217fffcc 	andi	r5,r4,65535
800193f8:	28cb883a 	add	r5,r5,r3
800193fc:	2817d43a 	srai	r11,r5,16
80019400:	2006d43a 	srli	r3,r4,16
80019404:	293fffcc 	andi	r4,r5,65535
80019408:	1ac7883a 	add	r3,r3,r11
8001940c:	180a943a 	slli	r5,r3,16
80019410:	1807d43a 	srai	r3,r3,16
80019414:	290ab03a 	or	r5,r5,r4
80019418:	517fff15 	stw	r5,-4(r10)
8001941c:	3a7ff236 	bltu	r7,r9,800193e8 <_gp+0xfffe8674>
80019420:	4c07c83a 	sub	r3,r9,r16
80019424:	18fffec4 	addi	r3,r3,-5
80019428:	1806d0ba 	srli	r3,r3,2
8001942c:	18c00044 	addi	r3,r3,1
80019430:	180690ba 	slli	r3,r3,2
80019434:	30cd883a 	add	r6,r6,r3
80019438:	31bfff04 	addi	r6,r6,-4
8001943c:	2800041e 	bne	r5,zero,80019450 <__mdiff+0x184>
80019440:	31bfff04 	addi	r6,r6,-4
80019444:	30c00017 	ldw	r3,0(r6)
80019448:	423fffc4 	addi	r8,r8,-1
8001944c:	183ffc26 	beq	r3,zero,80019440 <_gp+0xfffe86cc>
80019450:	12000415 	stw	r8,16(r2)
80019454:	dfc00517 	ldw	ra,20(sp)
80019458:	dd000417 	ldw	r20,16(sp)
8001945c:	dcc00317 	ldw	r19,12(sp)
80019460:	dc800217 	ldw	r18,8(sp)
80019464:	dc400117 	ldw	r17,4(sp)
80019468:	dc000017 	ldw	r16,0(sp)
8001946c:	dec00604 	addi	sp,sp,24
80019470:	f800283a 	ret
80019474:	000b883a 	mov	r5,zero
80019478:	00189dc0 	call	800189dc <_Balloc>
8001947c:	00c00044 	movi	r3,1
80019480:	10c00415 	stw	r3,16(r2)
80019484:	10000515 	stw	zero,20(r2)
80019488:	003ff206 	br	80019454 <_gp+0xfffe86e0>

8001948c <__ulp>:
8001948c:	295ffc2c 	andhi	r5,r5,32752
80019490:	00ff3034 	movhi	r3,64704
80019494:	28c7883a 	add	r3,r5,r3
80019498:	00c0020e 	bge	zero,r3,800194a4 <__ulp+0x18>
8001949c:	0005883a 	mov	r2,zero
800194a0:	f800283a 	ret
800194a4:	00c7c83a 	sub	r3,zero,r3
800194a8:	1807d53a 	srai	r3,r3,20
800194ac:	18800508 	cmpgei	r2,r3,20
800194b0:	10000b26 	beq	r2,zero,800194e0 <__ulp+0x54>
800194b4:	18bffb04 	addi	r2,r3,-20
800194b8:	110007c8 	cmpgei	r4,r2,31
800194bc:	0007883a 	mov	r3,zero
800194c0:	2000051e 	bne	r4,zero,800194d8 <__ulp+0x4c>
800194c4:	010007c4 	movi	r4,31
800194c8:	2089c83a 	sub	r4,r4,r2
800194cc:	00800044 	movi	r2,1
800194d0:	1104983a 	sll	r2,r2,r4
800194d4:	f800283a 	ret
800194d8:	00800044 	movi	r2,1
800194dc:	f800283a 	ret
800194e0:	01400234 	movhi	r5,8
800194e4:	28c7d83a 	sra	r3,r5,r3
800194e8:	0005883a 	mov	r2,zero
800194ec:	f800283a 	ret

800194f0 <__b2d>:
800194f0:	defffa04 	addi	sp,sp,-24
800194f4:	dc000015 	stw	r16,0(sp)
800194f8:	24000417 	ldw	r16,16(r4)
800194fc:	dc800215 	stw	r18,8(sp)
80019500:	24800504 	addi	r18,r4,20
80019504:	802090ba 	slli	r16,r16,2
80019508:	dc400115 	stw	r17,4(sp)
8001950c:	dd000415 	stw	r20,16(sp)
80019510:	9421883a 	add	r16,r18,r16
80019514:	847fff17 	ldw	r17,-4(r16)
80019518:	dcc00315 	stw	r19,12(sp)
8001951c:	2829883a 	mov	r20,r5
80019520:	8809883a 	mov	r4,r17
80019524:	dfc00515 	stw	ra,20(sp)
80019528:	0018cc80 	call	80018cc8 <__hi0bits>
8001952c:	00c00804 	movi	r3,32
80019530:	1889c83a 	sub	r4,r3,r2
80019534:	a1000015 	stw	r4,0(r20)
80019538:	110002c8 	cmpgei	r4,r2,11
8001953c:	84ffff04 	addi	r19,r16,-4
80019540:	2000121e 	bne	r4,zero,8001958c <__b2d+0x9c>
80019544:	014002c4 	movi	r5,11
80019548:	2889c83a 	sub	r4,r5,r2
8001954c:	8906d83a 	srl	r3,r17,r4
80019550:	18cffc34 	orhi	r3,r3,16368
80019554:	94c0212e 	bgeu	r18,r19,800195dc <__b2d+0xec>
80019558:	817ffe17 	ldw	r5,-8(r16)
8001955c:	290ad83a 	srl	r5,r5,r4
80019560:	10800544 	addi	r2,r2,21
80019564:	8884983a 	sll	r2,r17,r2
80019568:	1144b03a 	or	r2,r2,r5
8001956c:	dfc00517 	ldw	ra,20(sp)
80019570:	dd000417 	ldw	r20,16(sp)
80019574:	dcc00317 	ldw	r19,12(sp)
80019578:	dc800217 	ldw	r18,8(sp)
8001957c:	dc400117 	ldw	r17,4(sp)
80019580:	dc000017 	ldw	r16,0(sp)
80019584:	dec00604 	addi	sp,sp,24
80019588:	f800283a 	ret
8001958c:	117ffd44 	addi	r5,r2,-11
80019590:	94c00e2e 	bgeu	r18,r19,800195cc <__b2d+0xdc>
80019594:	80bffe17 	ldw	r2,-8(r16)
80019598:	28000e26 	beq	r5,zero,800195d4 <__b2d+0xe4>
8001959c:	1949c83a 	sub	r4,r3,r5
800195a0:	8946983a 	sll	r3,r17,r5
800195a4:	1122d83a 	srl	r17,r2,r4
800195a8:	81bffe04 	addi	r6,r16,-8
800195ac:	18cffc34 	orhi	r3,r3,16368
800195b0:	1c46b03a 	or	r3,r3,r17
800195b4:	1144983a 	sll	r2,r2,r5
800195b8:	91bfec2e 	bgeu	r18,r6,8001956c <_gp+0xfffe87f8>
800195bc:	817ffd17 	ldw	r5,-12(r16)
800195c0:	2908d83a 	srl	r4,r5,r4
800195c4:	1104b03a 	or	r2,r2,r4
800195c8:	003fe806 	br	8001956c <_gp+0xfffe87f8>
800195cc:	2800051e 	bne	r5,zero,800195e4 <__b2d+0xf4>
800195d0:	0005883a 	mov	r2,zero
800195d4:	88cffc34 	orhi	r3,r17,16368
800195d8:	003fe406 	br	8001956c <_gp+0xfffe87f8>
800195dc:	000b883a 	mov	r5,zero
800195e0:	003fdf06 	br	80019560 <_gp+0xfffe87ec>
800195e4:	8946983a 	sll	r3,r17,r5
800195e8:	0005883a 	mov	r2,zero
800195ec:	18cffc34 	orhi	r3,r3,16368
800195f0:	003fde06 	br	8001956c <_gp+0xfffe87f8>

800195f4 <__d2b>:
800195f4:	defff804 	addi	sp,sp,-32
800195f8:	dc400315 	stw	r17,12(sp)
800195fc:	3023883a 	mov	r17,r6
80019600:	dd000615 	stw	r20,24(sp)
80019604:	dc000215 	stw	r16,8(sp)
80019608:	2829883a 	mov	r20,r5
8001960c:	8820d53a 	srli	r16,r17,20
80019610:	01400044 	movi	r5,1
80019614:	dcc00515 	stw	r19,20(sp)
80019618:	dc800415 	stw	r18,16(sp)
8001961c:	dfc00715 	stw	ra,28(sp)
80019620:	3825883a 	mov	r18,r7
80019624:	00189dc0 	call	800189dc <_Balloc>
80019628:	01800434 	movhi	r6,16
8001962c:	31bfffc4 	addi	r6,r6,-1
80019630:	8401ffcc 	andi	r16,r16,2047
80019634:	1027883a 	mov	r19,r2
80019638:	89a2703a 	and	r17,r17,r6
8001963c:	80000126 	beq	r16,zero,80019644 <__d2b+0x50>
80019640:	8c400434 	orhi	r17,r17,16
80019644:	dc400115 	stw	r17,4(sp)
80019648:	a0001f26 	beq	r20,zero,800196c8 <__d2b+0xd4>
8001964c:	d809883a 	mov	r4,sp
80019650:	dd000015 	stw	r20,0(sp)
80019654:	0018d2c0 	call	80018d2c <__lo0bits>
80019658:	d8c00117 	ldw	r3,4(sp)
8001965c:	10002b1e 	bne	r2,zero,8001970c <__d2b+0x118>
80019660:	d9000017 	ldw	r4,0(sp)
80019664:	98c00615 	stw	r3,24(r19)
80019668:	99000515 	stw	r4,20(r19)
8001966c:	18003126 	beq	r3,zero,80019734 <__d2b+0x140>
80019670:	04400084 	movi	r17,2
80019674:	9c400415 	stw	r17,16(r19)
80019678:	80001c1e 	bne	r16,zero,800196ec <__d2b+0xf8>
8001967c:	880690ba 	slli	r3,r17,2
80019680:	10bef384 	addi	r2,r2,-1074
80019684:	90800015 	stw	r2,0(r18)
80019688:	98c5883a 	add	r2,r19,r3
8001968c:	11000417 	ldw	r4,16(r2)
80019690:	8822917a 	slli	r17,r17,5
80019694:	0018cc80 	call	80018cc8 <__hi0bits>
80019698:	88a3c83a 	sub	r17,r17,r2
8001969c:	d8800817 	ldw	r2,32(sp)
800196a0:	14400015 	stw	r17,0(r2)
800196a4:	9805883a 	mov	r2,r19
800196a8:	dfc00717 	ldw	ra,28(sp)
800196ac:	dd000617 	ldw	r20,24(sp)
800196b0:	dcc00517 	ldw	r19,20(sp)
800196b4:	dc800417 	ldw	r18,16(sp)
800196b8:	dc400317 	ldw	r17,12(sp)
800196bc:	dc000217 	ldw	r16,8(sp)
800196c0:	dec00804 	addi	sp,sp,32
800196c4:	f800283a 	ret
800196c8:	d9000104 	addi	r4,sp,4
800196cc:	0018d2c0 	call	80018d2c <__lo0bits>
800196d0:	00c00044 	movi	r3,1
800196d4:	98c00415 	stw	r3,16(r19)
800196d8:	d8c00117 	ldw	r3,4(sp)
800196dc:	10800804 	addi	r2,r2,32
800196e0:	04400044 	movi	r17,1
800196e4:	98c00515 	stw	r3,20(r19)
800196e8:	803fe426 	beq	r16,zero,8001967c <_gp+0xfffe8908>
800196ec:	00c00d44 	movi	r3,53
800196f0:	843ef344 	addi	r16,r16,-1075
800196f4:	80a1883a 	add	r16,r16,r2
800196f8:	1885c83a 	sub	r2,r3,r2
800196fc:	d8c00817 	ldw	r3,32(sp)
80019700:	94000015 	stw	r16,0(r18)
80019704:	18800015 	stw	r2,0(r3)
80019708:	003fe606 	br	800196a4 <_gp+0xfffe8930>
8001970c:	01000804 	movi	r4,32
80019710:	2089c83a 	sub	r4,r4,r2
80019714:	1908983a 	sll	r4,r3,r4
80019718:	d9400017 	ldw	r5,0(sp)
8001971c:	1886d83a 	srl	r3,r3,r2
80019720:	2148b03a 	or	r4,r4,r5
80019724:	99000515 	stw	r4,20(r19)
80019728:	d8c00115 	stw	r3,4(sp)
8001972c:	98c00615 	stw	r3,24(r19)
80019730:	183fcf1e 	bne	r3,zero,80019670 <_gp+0xfffe88fc>
80019734:	04400044 	movi	r17,1
80019738:	003fce06 	br	80019674 <_gp+0xfffe8900>

8001973c <__ratio>:
8001973c:	defff904 	addi	sp,sp,-28
80019740:	dc400315 	stw	r17,12(sp)
80019744:	2823883a 	mov	r17,r5
80019748:	d80b883a 	mov	r5,sp
8001974c:	dfc00615 	stw	ra,24(sp)
80019750:	dcc00515 	stw	r19,20(sp)
80019754:	dc800415 	stw	r18,16(sp)
80019758:	2027883a 	mov	r19,r4
8001975c:	dc000215 	stw	r16,8(sp)
80019760:	00194f00 	call	800194f0 <__b2d>
80019764:	d9400104 	addi	r5,sp,4
80019768:	8809883a 	mov	r4,r17
8001976c:	1025883a 	mov	r18,r2
80019770:	1821883a 	mov	r16,r3
80019774:	00194f00 	call	800194f0 <__b2d>
80019778:	89400417 	ldw	r5,16(r17)
8001977c:	99000417 	ldw	r4,16(r19)
80019780:	d9800117 	ldw	r6,4(sp)
80019784:	2149c83a 	sub	r4,r4,r5
80019788:	d9400017 	ldw	r5,0(sp)
8001978c:	2008917a 	slli	r4,r4,5
80019790:	298bc83a 	sub	r5,r5,r6
80019794:	2149883a 	add	r4,r4,r5
80019798:	01000e0e 	bge	zero,r4,800197d4 <__ratio+0x98>
8001979c:	2008953a 	slli	r4,r4,20
800197a0:	2421883a 	add	r16,r4,r16
800197a4:	100d883a 	mov	r6,r2
800197a8:	180f883a 	mov	r7,r3
800197ac:	9009883a 	mov	r4,r18
800197b0:	800b883a 	mov	r5,r16
800197b4:	000df040 	call	8000df04 <__divdf3>
800197b8:	dfc00617 	ldw	ra,24(sp)
800197bc:	dcc00517 	ldw	r19,20(sp)
800197c0:	dc800417 	ldw	r18,16(sp)
800197c4:	dc400317 	ldw	r17,12(sp)
800197c8:	dc000217 	ldw	r16,8(sp)
800197cc:	dec00704 	addi	sp,sp,28
800197d0:	f800283a 	ret
800197d4:	017ffc34 	movhi	r5,65520
800197d8:	2149383a 	mul	r4,r4,r5
800197dc:	20c7883a 	add	r3,r4,r3
800197e0:	003ff006 	br	800197a4 <_gp+0xfffe8a30>

800197e4 <_mprec_log10>:
800197e4:	defffe04 	addi	sp,sp,-8
800197e8:	dc000015 	stw	r16,0(sp)
800197ec:	dfc00115 	stw	ra,4(sp)
800197f0:	20800608 	cmpgei	r2,r4,24
800197f4:	2021883a 	mov	r16,r4
800197f8:	10000d26 	beq	r2,zero,80019830 <_mprec_log10+0x4c>
800197fc:	0005883a 	mov	r2,zero
80019800:	00cffc34 	movhi	r3,16368
80019804:	843fffc4 	addi	r16,r16,-1
80019808:	000d883a 	mov	r6,zero
8001980c:	01d00934 	movhi	r7,16420
80019810:	1009883a 	mov	r4,r2
80019814:	180b883a 	mov	r5,r3
80019818:	000e8b00 	call	8000e8b0 <__muldf3>
8001981c:	803ff91e 	bne	r16,zero,80019804 <_gp+0xfffe8a90>
80019820:	dfc00117 	ldw	ra,4(sp)
80019824:	dc000017 	ldw	r16,0(sp)
80019828:	dec00204 	addi	sp,sp,8
8001982c:	f800283a 	ret
80019830:	202090fa 	slli	r16,r4,3
80019834:	00a000b4 	movhi	r2,32770
80019838:	109ba804 	addi	r2,r2,28320
8001983c:	1421883a 	add	r16,r2,r16
80019840:	80800017 	ldw	r2,0(r16)
80019844:	80c00117 	ldw	r3,4(r16)
80019848:	dfc00117 	ldw	ra,4(sp)
8001984c:	dc000017 	ldw	r16,0(sp)
80019850:	dec00204 	addi	sp,sp,8
80019854:	f800283a 	ret

80019858 <__copybits>:
80019858:	29ffffc4 	addi	r7,r5,-1
8001985c:	380fd17a 	srai	r7,r7,5
80019860:	30c00417 	ldw	r3,16(r6)
80019864:	30800504 	addi	r2,r6,20
80019868:	39c00044 	addi	r7,r7,1
8001986c:	180690ba 	slli	r3,r3,2
80019870:	380e90ba 	slli	r7,r7,2
80019874:	10c7883a 	add	r3,r2,r3
80019878:	21cf883a 	add	r7,r4,r7
8001987c:	10c00c2e 	bgeu	r2,r3,800198b0 <__copybits+0x58>
80019880:	200b883a 	mov	r5,r4
80019884:	10800104 	addi	r2,r2,4
80019888:	123fff17 	ldw	r8,-4(r2)
8001988c:	29400104 	addi	r5,r5,4
80019890:	2a3fff15 	stw	r8,-4(r5)
80019894:	10fffb36 	bltu	r2,r3,80019884 <_gp+0xfffe8b10>
80019898:	1985c83a 	sub	r2,r3,r6
8001989c:	10bffac4 	addi	r2,r2,-21
800198a0:	1004d0ba 	srli	r2,r2,2
800198a4:	10800044 	addi	r2,r2,1
800198a8:	100490ba 	slli	r2,r2,2
800198ac:	2089883a 	add	r4,r4,r2
800198b0:	21c0032e 	bgeu	r4,r7,800198c0 <__copybits+0x68>
800198b4:	21000104 	addi	r4,r4,4
800198b8:	203fff15 	stw	zero,-4(r4)
800198bc:	21fffd36 	bltu	r4,r7,800198b4 <_gp+0xfffe8b40>
800198c0:	f800283a 	ret

800198c4 <__any_on>:
800198c4:	20800417 	ldw	r2,16(r4)
800198c8:	280dd17a 	srai	r6,r5,5
800198cc:	21000504 	addi	r4,r4,20
800198d0:	11800c0e 	bge	r2,r6,80019904 <__any_on+0x40>
800198d4:	100690ba 	slli	r3,r2,2
800198d8:	20c7883a 	add	r3,r4,r3
800198dc:	20c0142e 	bgeu	r4,r3,80019930 <__any_on+0x6c>
800198e0:	18bfff17 	ldw	r2,-4(r3)
800198e4:	18ffff04 	addi	r3,r3,-4
800198e8:	1000041e 	bne	r2,zero,800198fc <__any_on+0x38>
800198ec:	20c00f2e 	bgeu	r4,r3,8001992c <__any_on+0x68>
800198f0:	18ffff04 	addi	r3,r3,-4
800198f4:	19400017 	ldw	r5,0(r3)
800198f8:	283ffc26 	beq	r5,zero,800198ec <_gp+0xfffe8b78>
800198fc:	00800044 	movi	r2,1
80019900:	f800283a 	ret
80019904:	300690ba 	slli	r3,r6,2
80019908:	20c7883a 	add	r3,r4,r3
8001990c:	30bff30e 	bge	r6,r2,800198dc <_gp+0xfffe8b68>
80019910:	294007cc 	andi	r5,r5,31
80019914:	283ff126 	beq	r5,zero,800198dc <_gp+0xfffe8b68>
80019918:	19800017 	ldw	r6,0(r3)
8001991c:	3144d83a 	srl	r2,r6,r5
80019920:	114a983a 	sll	r5,r2,r5
80019924:	317ff51e 	bne	r6,r5,800198fc <_gp+0xfffe8b88>
80019928:	003fec06 	br	800198dc <_gp+0xfffe8b68>
8001992c:	f800283a 	ret
80019930:	0005883a 	mov	r2,zero
80019934:	f800283a 	ret

80019938 <_putc_r>:
80019938:	defffc04 	addi	sp,sp,-16
8001993c:	dc000215 	stw	r16,8(sp)
80019940:	dfc00315 	stw	ra,12(sp)
80019944:	2021883a 	mov	r16,r4
80019948:	20000226 	beq	r4,zero,80019954 <_putc_r+0x1c>
8001994c:	20800e17 	ldw	r2,56(r4)
80019950:	10000e26 	beq	r2,zero,8001998c <_putc_r+0x54>
80019954:	30800217 	ldw	r2,8(r6)
80019958:	10bfffc4 	addi	r2,r2,-1
8001995c:	30800215 	stw	r2,8(r6)
80019960:	10001316 	blt	r2,zero,800199b0 <_putc_r+0x78>
80019964:	30800017 	ldw	r2,0(r6)
80019968:	11400005 	stb	r5,0(r2)
8001996c:	30800017 	ldw	r2,0(r6)
80019970:	10c00044 	addi	r3,r2,1
80019974:	30c00015 	stw	r3,0(r6)
80019978:	10800003 	ldbu	r2,0(r2)
8001997c:	dfc00317 	ldw	ra,12(sp)
80019980:	dc000217 	ldw	r16,8(sp)
80019984:	dec00404 	addi	sp,sp,16
80019988:	f800283a 	ret
8001998c:	d9800115 	stw	r6,4(sp)
80019990:	d9400015 	stw	r5,0(sp)
80019994:	0017a4c0 	call	80017a4c <__sinit>
80019998:	d9800117 	ldw	r6,4(sp)
8001999c:	d9400017 	ldw	r5,0(sp)
800199a0:	30800217 	ldw	r2,8(r6)
800199a4:	10bfffc4 	addi	r2,r2,-1
800199a8:	30800215 	stw	r2,8(r6)
800199ac:	103fed0e 	bge	r2,zero,80019964 <_gp+0xfffe8bf0>
800199b0:	30c00617 	ldw	r3,24(r6)
800199b4:	10c00e16 	blt	r2,r3,800199f0 <_putc_r+0xb8>
800199b8:	30800017 	ldw	r2,0(r6)
800199bc:	11400005 	stb	r5,0(r2)
800199c0:	30c00017 	ldw	r3,0(r6)
800199c4:	18800003 	ldbu	r2,0(r3)
800199c8:	108002a0 	cmpeqi	r2,r2,10
800199cc:	1000071e 	bne	r2,zero,800199ec <_putc_r+0xb4>
800199d0:	18800044 	addi	r2,r3,1
800199d4:	30800015 	stw	r2,0(r6)
800199d8:	18800003 	ldbu	r2,0(r3)
800199dc:	dfc00317 	ldw	ra,12(sp)
800199e0:	dc000217 	ldw	r16,8(sp)
800199e4:	dec00404 	addi	sp,sp,16
800199e8:	f800283a 	ret
800199ec:	01400284 	movi	r5,10
800199f0:	8009883a 	mov	r4,r16
800199f4:	dfc00317 	ldw	ra,12(sp)
800199f8:	dc000217 	ldw	r16,8(sp)
800199fc:	dec00404 	addi	sp,sp,16
80019a00:	001e2181 	jmpi	8001e218 <__swbuf_r>

80019a04 <putc>:
80019a04:	defffc04 	addi	sp,sp,-16
80019a08:	00a000f4 	movhi	r2,32771
80019a0c:	dc000115 	stw	r16,4(sp)
80019a10:	14235e17 	ldw	r16,-29320(r2)
80019a14:	dc400215 	stw	r17,8(sp)
80019a18:	dfc00315 	stw	ra,12(sp)
80019a1c:	2023883a 	mov	r17,r4
80019a20:	80000226 	beq	r16,zero,80019a2c <putc+0x28>
80019a24:	80800e17 	ldw	r2,56(r16)
80019a28:	10000f26 	beq	r2,zero,80019a68 <putc+0x64>
80019a2c:	28800217 	ldw	r2,8(r5)
80019a30:	10bfffc4 	addi	r2,r2,-1
80019a34:	28800215 	stw	r2,8(r5)
80019a38:	10001316 	blt	r2,zero,80019a88 <putc+0x84>
80019a3c:	28800017 	ldw	r2,0(r5)
80019a40:	14400005 	stb	r17,0(r2)
80019a44:	28800017 	ldw	r2,0(r5)
80019a48:	10c00044 	addi	r3,r2,1
80019a4c:	28c00015 	stw	r3,0(r5)
80019a50:	10800003 	ldbu	r2,0(r2)
80019a54:	dfc00317 	ldw	ra,12(sp)
80019a58:	dc400217 	ldw	r17,8(sp)
80019a5c:	dc000117 	ldw	r16,4(sp)
80019a60:	dec00404 	addi	sp,sp,16
80019a64:	f800283a 	ret
80019a68:	8009883a 	mov	r4,r16
80019a6c:	d9400015 	stw	r5,0(sp)
80019a70:	0017a4c0 	call	80017a4c <__sinit>
80019a74:	d9400017 	ldw	r5,0(sp)
80019a78:	28800217 	ldw	r2,8(r5)
80019a7c:	10bfffc4 	addi	r2,r2,-1
80019a80:	28800215 	stw	r2,8(r5)
80019a84:	103fed0e 	bge	r2,zero,80019a3c <_gp+0xfffe8cc8>
80019a88:	28c00617 	ldw	r3,24(r5)
80019a8c:	10c00a16 	blt	r2,r3,80019ab8 <putc+0xb4>
80019a90:	28800017 	ldw	r2,0(r5)
80019a94:	14400005 	stb	r17,0(r2)
80019a98:	28c00017 	ldw	r3,0(r5)
80019a9c:	18800003 	ldbu	r2,0(r3)
80019aa0:	108002a0 	cmpeqi	r2,r2,10
80019aa4:	10000c1e 	bne	r2,zero,80019ad8 <putc+0xd4>
80019aa8:	18800044 	addi	r2,r3,1
80019aac:	28800015 	stw	r2,0(r5)
80019ab0:	18800003 	ldbu	r2,0(r3)
80019ab4:	003fe706 	br	80019a54 <_gp+0xfffe8ce0>
80019ab8:	280d883a 	mov	r6,r5
80019abc:	880b883a 	mov	r5,r17
80019ac0:	8009883a 	mov	r4,r16
80019ac4:	dfc00317 	ldw	ra,12(sp)
80019ac8:	dc400217 	ldw	r17,8(sp)
80019acc:	dc000117 	ldw	r16,4(sp)
80019ad0:	dec00404 	addi	sp,sp,16
80019ad4:	001e2181 	jmpi	8001e218 <__swbuf_r>
80019ad8:	280d883a 	mov	r6,r5
80019adc:	01400284 	movi	r5,10
80019ae0:	003ff706 	br	80019ac0 <_gp+0xfffe8d4c>

80019ae4 <_realloc_r>:
80019ae4:	defff504 	addi	sp,sp,-44
80019ae8:	dc400215 	stw	r17,8(sp)
80019aec:	dfc00a15 	stw	ra,40(sp)
80019af0:	df000915 	stw	fp,36(sp)
80019af4:	ddc00815 	stw	r23,32(sp)
80019af8:	dd800715 	stw	r22,28(sp)
80019afc:	dd400615 	stw	r21,24(sp)
80019b00:	dd000515 	stw	r20,20(sp)
80019b04:	dcc00415 	stw	r19,16(sp)
80019b08:	dc800315 	stw	r18,12(sp)
80019b0c:	dc000115 	stw	r16,4(sp)
80019b10:	3023883a 	mov	r17,r6
80019b14:	28008b26 	beq	r5,zero,80019d44 <_realloc_r+0x260>
80019b18:	2827883a 	mov	r19,r5
80019b1c:	2025883a 	mov	r18,r4
80019b20:	00200200 	call	80020020 <__malloc_lock>
80019b24:	98bfff17 	ldw	r2,-4(r19)
80019b28:	894002c4 	addi	r5,r17,11
80019b2c:	043fff04 	movi	r16,-4
80019b30:	28c005f0 	cmpltui	r3,r5,23
80019b34:	9d3ffe04 	addi	r20,r19,-8
80019b38:	1420703a 	and	r16,r2,r16
80019b3c:	1800321e 	bne	r3,zero,80019c08 <_realloc_r+0x124>
80019b40:	05bffe04 	movi	r22,-8
80019b44:	2dac703a 	and	r22,r5,r22
80019b48:	b009883a 	mov	r4,r22
80019b4c:	b0009516 	blt	r22,zero,80019da4 <_realloc_r+0x2c0>
80019b50:	b4409436 	bltu	r22,r17,80019da4 <_realloc_r+0x2c0>
80019b54:	a42f883a 	add	r23,r20,r16
80019b58:	8100600e 	bge	r16,r4,80019cdc <_realloc_r+0x1f8>
80019b5c:	072000b4 	movhi	fp,32770
80019b60:	e71d8404 	addi	fp,fp,30224
80019b64:	e1800217 	ldw	r6,8(fp)
80019b68:	35c02a26 	beq	r6,r23,80019c14 <_realloc_r+0x130>
80019b6c:	b8c00117 	ldw	r3,4(r23)
80019b70:	017fff84 	movi	r5,-2
80019b74:	194a703a 	and	r5,r3,r5
80019b78:	b94b883a 	add	r5,r23,r5
80019b7c:	29400117 	ldw	r5,4(r5)
80019b80:	2940004c 	andi	r5,r5,1
80019b84:	28007c26 	beq	r5,zero,80019d78 <_realloc_r+0x294>
80019b88:	1080004c 	andi	r2,r2,1
80019b8c:	10009526 	beq	r2,zero,80019de4 <_realloc_r+0x300>
80019b90:	880b883a 	mov	r5,r17
80019b94:	9009883a 	mov	r4,r18
80019b98:	000fca40 	call	8000fca4 <_malloc_r>
80019b9c:	1023883a 	mov	r17,r2
80019ba0:	10001626 	beq	r2,zero,80019bfc <_realloc_r+0x118>
80019ba4:	98bfff17 	ldw	r2,-4(r19)
80019ba8:	013fff84 	movi	r4,-2
80019bac:	88fffe04 	addi	r3,r17,-8
80019bb0:	1104703a 	and	r2,r2,r4
80019bb4:	a085883a 	add	r2,r20,r2
80019bb8:	10c0ba26 	beq	r2,r3,80019ea4 <_realloc_r+0x3c0>
80019bbc:	81bfff04 	addi	r6,r16,-4
80019bc0:	30800968 	cmpgeui	r2,r6,37
80019bc4:	1000e31e 	bne	r2,zero,80019f54 <_realloc_r+0x470>
80019bc8:	30800530 	cmpltui	r2,r6,20
80019bcc:	99000017 	ldw	r4,0(r19)
80019bd0:	10009e26 	beq	r2,zero,80019e4c <_realloc_r+0x368>
80019bd4:	8805883a 	mov	r2,r17
80019bd8:	9807883a 	mov	r3,r19
80019bdc:	11000015 	stw	r4,0(r2)
80019be0:	19000117 	ldw	r4,4(r3)
80019be4:	11000115 	stw	r4,4(r2)
80019be8:	18c00217 	ldw	r3,8(r3)
80019bec:	10c00215 	stw	r3,8(r2)
80019bf0:	980b883a 	mov	r5,r19
80019bf4:	9009883a 	mov	r4,r18
80019bf8:	0017bb00 	call	80017bb0 <_free_r>
80019bfc:	9009883a 	mov	r4,r18
80019c00:	00200440 	call	80020044 <__malloc_unlock>
80019c04:	00004206 	br	80019d10 <_realloc_r+0x22c>
80019c08:	05800404 	movi	r22,16
80019c0c:	01000404 	movi	r4,16
80019c10:	003fcf06 	br	80019b50 <_gp+0xfffe8ddc>
80019c14:	30c00117 	ldw	r3,4(r6)
80019c18:	01ffff04 	movi	r7,-4
80019c1c:	b1400404 	addi	r5,r22,16
80019c20:	19c6703a 	and	r3,r3,r7
80019c24:	80cf883a 	add	r7,r16,r3
80019c28:	3940910e 	bge	r7,r5,80019e70 <_realloc_r+0x38c>
80019c2c:	1080004c 	andi	r2,r2,1
80019c30:	103fd71e 	bne	r2,zero,80019b90 <_gp+0xfffe8e1c>
80019c34:	99fffe17 	ldw	r7,-8(r19)
80019c38:	017fff04 	movi	r5,-4
80019c3c:	a1cfc83a 	sub	r7,r20,r7
80019c40:	38800117 	ldw	r2,4(r7)
80019c44:	1144703a 	and	r2,r2,r5
80019c48:	b8006b26 	beq	r23,zero,80019df8 <_realloc_r+0x314>
80019c4c:	80ab883a 	add	r21,r16,r2
80019c50:	a8eb883a 	add	r21,r21,r3
80019c54:	35c09926 	beq	r6,r23,80019ebc <_realloc_r+0x3d8>
80019c58:	a9006716 	blt	r21,r4,80019df8 <_realloc_r+0x314>
80019c5c:	b8800317 	ldw	r2,12(r23)
80019c60:	b8c00217 	ldw	r3,8(r23)
80019c64:	81bfff04 	addi	r6,r16,-4
80019c68:	31000968 	cmpgeui	r4,r6,37
80019c6c:	18800315 	stw	r2,12(r3)
80019c70:	10c00215 	stw	r3,8(r2)
80019c74:	38c00217 	ldw	r3,8(r7)
80019c78:	38800317 	ldw	r2,12(r7)
80019c7c:	3c400204 	addi	r17,r7,8
80019c80:	3d6f883a 	add	r23,r7,r21
80019c84:	18800315 	stw	r2,12(r3)
80019c88:	10c00215 	stw	r3,8(r2)
80019c8c:	2000661e 	bne	r4,zero,80019e28 <_realloc_r+0x344>
80019c90:	30800530 	cmpltui	r2,r6,20
80019c94:	98c00017 	ldw	r3,0(r19)
80019c98:	1000b21e 	bne	r2,zero,80019f64 <_realloc_r+0x480>
80019c9c:	38c00215 	stw	r3,8(r7)
80019ca0:	98c00117 	ldw	r3,4(r19)
80019ca4:	30800728 	cmpgeui	r2,r6,28
80019ca8:	38c00315 	stw	r3,12(r7)
80019cac:	1000b91e 	bne	r2,zero,80019f94 <_realloc_r+0x4b0>
80019cb0:	98c00217 	ldw	r3,8(r19)
80019cb4:	38800404 	addi	r2,r7,16
80019cb8:	9cc00204 	addi	r19,r19,8
80019cbc:	10c00015 	stw	r3,0(r2)
80019cc0:	98c00117 	ldw	r3,4(r19)
80019cc4:	a821883a 	mov	r16,r21
80019cc8:	3829883a 	mov	r20,r7
80019ccc:	10c00115 	stw	r3,4(r2)
80019cd0:	98c00217 	ldw	r3,8(r19)
80019cd4:	8827883a 	mov	r19,r17
80019cd8:	10c00215 	stw	r3,8(r2)
80019cdc:	a1800117 	ldw	r6,4(r20)
80019ce0:	8585c83a 	sub	r2,r16,r22
80019ce4:	10c00430 	cmpltui	r3,r2,16
80019ce8:	3180004c 	andi	r6,r6,1
80019cec:	18003126 	beq	r3,zero,80019db4 <_realloc_r+0x2d0>
80019cf0:	818cb03a 	or	r6,r16,r6
80019cf4:	a1800115 	stw	r6,4(r20)
80019cf8:	b8800117 	ldw	r2,4(r23)
80019cfc:	10800054 	ori	r2,r2,1
80019d00:	b8800115 	stw	r2,4(r23)
80019d04:	9009883a 	mov	r4,r18
80019d08:	00200440 	call	80020044 <__malloc_unlock>
80019d0c:	9823883a 	mov	r17,r19
80019d10:	8805883a 	mov	r2,r17
80019d14:	dfc00a17 	ldw	ra,40(sp)
80019d18:	df000917 	ldw	fp,36(sp)
80019d1c:	ddc00817 	ldw	r23,32(sp)
80019d20:	dd800717 	ldw	r22,28(sp)
80019d24:	dd400617 	ldw	r21,24(sp)
80019d28:	dd000517 	ldw	r20,20(sp)
80019d2c:	dcc00417 	ldw	r19,16(sp)
80019d30:	dc800317 	ldw	r18,12(sp)
80019d34:	dc400217 	ldw	r17,8(sp)
80019d38:	dc000117 	ldw	r16,4(sp)
80019d3c:	dec00b04 	addi	sp,sp,44
80019d40:	f800283a 	ret
80019d44:	300b883a 	mov	r5,r6
80019d48:	dfc00a17 	ldw	ra,40(sp)
80019d4c:	df000917 	ldw	fp,36(sp)
80019d50:	ddc00817 	ldw	r23,32(sp)
80019d54:	dd800717 	ldw	r22,28(sp)
80019d58:	dd400617 	ldw	r21,24(sp)
80019d5c:	dd000517 	ldw	r20,20(sp)
80019d60:	dcc00417 	ldw	r19,16(sp)
80019d64:	dc800317 	ldw	r18,12(sp)
80019d68:	dc400217 	ldw	r17,8(sp)
80019d6c:	dc000117 	ldw	r16,4(sp)
80019d70:	dec00b04 	addi	sp,sp,44
80019d74:	000fca41 	jmpi	8000fca4 <_malloc_r>
80019d78:	017fff04 	movi	r5,-4
80019d7c:	1946703a 	and	r3,r3,r5
80019d80:	80cb883a 	add	r5,r16,r3
80019d84:	293fa916 	blt	r5,r4,80019c2c <_gp+0xfffe8eb8>
80019d88:	b8800317 	ldw	r2,12(r23)
80019d8c:	b8c00217 	ldw	r3,8(r23)
80019d90:	2821883a 	mov	r16,r5
80019d94:	a16f883a 	add	r23,r20,r5
80019d98:	18800315 	stw	r2,12(r3)
80019d9c:	10c00215 	stw	r3,8(r2)
80019da0:	003fce06 	br	80019cdc <_gp+0xfffe8f68>
80019da4:	00800304 	movi	r2,12
80019da8:	90800015 	stw	r2,0(r18)
80019dac:	0023883a 	mov	r17,zero
80019db0:	003fd706 	br	80019d10 <_gp+0xfffe8f9c>
80019db4:	358cb03a 	or	r6,r6,r22
80019db8:	a1800115 	stw	r6,4(r20)
80019dbc:	a58b883a 	add	r5,r20,r22
80019dc0:	10800054 	ori	r2,r2,1
80019dc4:	28800115 	stw	r2,4(r5)
80019dc8:	b8800117 	ldw	r2,4(r23)
80019dcc:	29400204 	addi	r5,r5,8
80019dd0:	9009883a 	mov	r4,r18
80019dd4:	10800054 	ori	r2,r2,1
80019dd8:	b8800115 	stw	r2,4(r23)
80019ddc:	0017bb00 	call	80017bb0 <_free_r>
80019de0:	003fc806 	br	80019d04 <_gp+0xfffe8f90>
80019de4:	99fffe17 	ldw	r7,-8(r19)
80019de8:	00ffff04 	movi	r3,-4
80019dec:	a1cfc83a 	sub	r7,r20,r7
80019df0:	38800117 	ldw	r2,4(r7)
80019df4:	10c4703a 	and	r2,r2,r3
80019df8:	383f6526 	beq	r7,zero,80019b90 <_gp+0xfffe8e1c>
80019dfc:	80ab883a 	add	r21,r16,r2
80019e00:	a93f6316 	blt	r21,r4,80019b90 <_gp+0xfffe8e1c>
80019e04:	38800317 	ldw	r2,12(r7)
80019e08:	38c00217 	ldw	r3,8(r7)
80019e0c:	81bfff04 	addi	r6,r16,-4
80019e10:	31000968 	cmpgeui	r4,r6,37
80019e14:	18800315 	stw	r2,12(r3)
80019e18:	10c00215 	stw	r3,8(r2)
80019e1c:	3c400204 	addi	r17,r7,8
80019e20:	3d6f883a 	add	r23,r7,r21
80019e24:	203f9a26 	beq	r4,zero,80019c90 <_gp+0xfffe8f1c>
80019e28:	980b883a 	mov	r5,r19
80019e2c:	8809883a 	mov	r4,r17
80019e30:	d9c00015 	stw	r7,0(sp)
80019e34:	00188c00 	call	800188c0 <memmove>
80019e38:	d9c00017 	ldw	r7,0(sp)
80019e3c:	8827883a 	mov	r19,r17
80019e40:	a821883a 	mov	r16,r21
80019e44:	3829883a 	mov	r20,r7
80019e48:	003fa406 	br	80019cdc <_gp+0xfffe8f68>
80019e4c:	89000015 	stw	r4,0(r17)
80019e50:	98c00117 	ldw	r3,4(r19)
80019e54:	30800728 	cmpgeui	r2,r6,28
80019e58:	88c00115 	stw	r3,4(r17)
80019e5c:	1000431e 	bne	r2,zero,80019f6c <_realloc_r+0x488>
80019e60:	98c00204 	addi	r3,r19,8
80019e64:	88800204 	addi	r2,r17,8
80019e68:	99000217 	ldw	r4,8(r19)
80019e6c:	003f5b06 	br	80019bdc <_gp+0xfffe8e68>
80019e70:	a5a9883a 	add	r20,r20,r22
80019e74:	3d8fc83a 	sub	r7,r7,r22
80019e78:	e5000215 	stw	r20,8(fp)
80019e7c:	39c00054 	ori	r7,r7,1
80019e80:	a1c00115 	stw	r7,4(r20)
80019e84:	997fff17 	ldw	r5,-4(r19)
80019e88:	9009883a 	mov	r4,r18
80019e8c:	9823883a 	mov	r17,r19
80019e90:	2940004c 	andi	r5,r5,1
80019e94:	2d8ab03a 	or	r5,r5,r22
80019e98:	997fff15 	stw	r5,-4(r19)
80019e9c:	00200440 	call	80020044 <__malloc_unlock>
80019ea0:	003f9b06 	br	80019d10 <_gp+0xfffe8f9c>
80019ea4:	88bfff17 	ldw	r2,-4(r17)
80019ea8:	00ffff04 	movi	r3,-4
80019eac:	10c4703a 	and	r2,r2,r3
80019eb0:	80a1883a 	add	r16,r16,r2
80019eb4:	a42f883a 	add	r23,r20,r16
80019eb8:	003f8806 	br	80019cdc <_gp+0xfffe8f68>
80019ebc:	b0c00404 	addi	r3,r22,16
80019ec0:	a8ffcd16 	blt	r21,r3,80019df8 <_gp+0xfffe9084>
80019ec4:	38800317 	ldw	r2,12(r7)
80019ec8:	38c00217 	ldw	r3,8(r7)
80019ecc:	81bfff04 	addi	r6,r16,-4
80019ed0:	31000968 	cmpgeui	r4,r6,37
80019ed4:	18800315 	stw	r2,12(r3)
80019ed8:	10c00215 	stw	r3,8(r2)
80019edc:	3c400204 	addi	r17,r7,8
80019ee0:	2000471e 	bne	r4,zero,8001a000 <_realloc_r+0x51c>
80019ee4:	30800530 	cmpltui	r2,r6,20
80019ee8:	98c00017 	ldw	r3,0(r19)
80019eec:	1000421e 	bne	r2,zero,80019ff8 <_realloc_r+0x514>
80019ef0:	38c00215 	stw	r3,8(r7)
80019ef4:	98c00117 	ldw	r3,4(r19)
80019ef8:	30800728 	cmpgeui	r2,r6,28
80019efc:	38c00315 	stw	r3,12(r7)
80019f00:	1000451e 	bne	r2,zero,8001a018 <_realloc_r+0x534>
80019f04:	98c00217 	ldw	r3,8(r19)
80019f08:	38800404 	addi	r2,r7,16
80019f0c:	9cc00204 	addi	r19,r19,8
80019f10:	10c00015 	stw	r3,0(r2)
80019f14:	98c00117 	ldw	r3,4(r19)
80019f18:	10c00115 	stw	r3,4(r2)
80019f1c:	98c00217 	ldw	r3,8(r19)
80019f20:	10c00215 	stw	r3,8(r2)
80019f24:	3d87883a 	add	r3,r7,r22
80019f28:	ad85c83a 	sub	r2,r21,r22
80019f2c:	e0c00215 	stw	r3,8(fp)
80019f30:	10800054 	ori	r2,r2,1
80019f34:	18800115 	stw	r2,4(r3)
80019f38:	39400117 	ldw	r5,4(r7)
80019f3c:	9009883a 	mov	r4,r18
80019f40:	2940004c 	andi	r5,r5,1
80019f44:	2d8ab03a 	or	r5,r5,r22
80019f48:	39400115 	stw	r5,4(r7)
80019f4c:	00200440 	call	80020044 <__malloc_unlock>
80019f50:	003f6f06 	br	80019d10 <_gp+0xfffe8f9c>
80019f54:	980b883a 	mov	r5,r19
80019f58:	8809883a 	mov	r4,r17
80019f5c:	00188c00 	call	800188c0 <memmove>
80019f60:	003f2306 	br	80019bf0 <_gp+0xfffe8e7c>
80019f64:	8805883a 	mov	r2,r17
80019f68:	003f5406 	br	80019cbc <_gp+0xfffe8f48>
80019f6c:	98800217 	ldw	r2,8(r19)
80019f70:	31800920 	cmpeqi	r6,r6,36
80019f74:	88800215 	stw	r2,8(r17)
80019f78:	98800317 	ldw	r2,12(r19)
80019f7c:	88800315 	stw	r2,12(r17)
80019f80:	30000e1e 	bne	r6,zero,80019fbc <_realloc_r+0x4d8>
80019f84:	98c00404 	addi	r3,r19,16
80019f88:	88800404 	addi	r2,r17,16
80019f8c:	99000417 	ldw	r4,16(r19)
80019f90:	003f1206 	br	80019bdc <_gp+0xfffe8e68>
80019f94:	98800217 	ldw	r2,8(r19)
80019f98:	31800920 	cmpeqi	r6,r6,36
80019f9c:	38800415 	stw	r2,16(r7)
80019fa0:	98800317 	ldw	r2,12(r19)
80019fa4:	38800515 	stw	r2,20(r7)
80019fa8:	98c00417 	ldw	r3,16(r19)
80019fac:	30000b1e 	bne	r6,zero,80019fdc <_realloc_r+0x4f8>
80019fb0:	38800604 	addi	r2,r7,24
80019fb4:	9cc00404 	addi	r19,r19,16
80019fb8:	003f4006 	br	80019cbc <_gp+0xfffe8f48>
80019fbc:	99000417 	ldw	r4,16(r19)
80019fc0:	98c00604 	addi	r3,r19,24
80019fc4:	88800604 	addi	r2,r17,24
80019fc8:	89000415 	stw	r4,16(r17)
80019fcc:	99000517 	ldw	r4,20(r19)
80019fd0:	89000515 	stw	r4,20(r17)
80019fd4:	99000617 	ldw	r4,24(r19)
80019fd8:	003f0006 	br	80019bdc <_gp+0xfffe8e68>
80019fdc:	9cc00604 	addi	r19,r19,24
80019fe0:	38c00615 	stw	r3,24(r7)
80019fe4:	98ffff17 	ldw	r3,-4(r19)
80019fe8:	38800804 	addi	r2,r7,32
80019fec:	38c00715 	stw	r3,28(r7)
80019ff0:	98c00017 	ldw	r3,0(r19)
80019ff4:	003f3106 	br	80019cbc <_gp+0xfffe8f48>
80019ff8:	8805883a 	mov	r2,r17
80019ffc:	003fc406 	br	80019f10 <_gp+0xfffe919c>
8001a000:	980b883a 	mov	r5,r19
8001a004:	8809883a 	mov	r4,r17
8001a008:	d9c00015 	stw	r7,0(sp)
8001a00c:	00188c00 	call	800188c0 <memmove>
8001a010:	d9c00017 	ldw	r7,0(sp)
8001a014:	003fc306 	br	80019f24 <_gp+0xfffe91b0>
8001a018:	98800217 	ldw	r2,8(r19)
8001a01c:	31800920 	cmpeqi	r6,r6,36
8001a020:	38800415 	stw	r2,16(r7)
8001a024:	98800317 	ldw	r2,12(r19)
8001a028:	38800515 	stw	r2,20(r7)
8001a02c:	98c00417 	ldw	r3,16(r19)
8001a030:	3000031e 	bne	r6,zero,8001a040 <_realloc_r+0x55c>
8001a034:	38800604 	addi	r2,r7,24
8001a038:	9cc00404 	addi	r19,r19,16
8001a03c:	003fb406 	br	80019f10 <_gp+0xfffe919c>
8001a040:	9cc00604 	addi	r19,r19,24
8001a044:	38c00615 	stw	r3,24(r7)
8001a048:	98ffff17 	ldw	r3,-4(r19)
8001a04c:	38800804 	addi	r2,r7,32
8001a050:	38c00715 	stw	r3,28(r7)
8001a054:	98c00017 	ldw	r3,0(r19)
8001a058:	003fad06 	br	80019f10 <_gp+0xfffe919c>

8001a05c <lflush>:
8001a05c:	2080030b 	ldhu	r2,12(r4)
8001a060:	1080024c 	andi	r2,r2,9
8001a064:	10800258 	cmpnei	r2,r2,9
8001a068:	10000226 	beq	r2,zero,8001a074 <lflush+0x18>
8001a06c:	0005883a 	mov	r2,zero
8001a070:	f800283a 	ret
8001a074:	001770c1 	jmpi	8001770c <fflush>

8001a078 <__srefill_r>:
8001a078:	defffc04 	addi	sp,sp,-16
8001a07c:	dc400115 	stw	r17,4(sp)
8001a080:	dc000015 	stw	r16,0(sp)
8001a084:	dfc00315 	stw	ra,12(sp)
8001a088:	dc800215 	stw	r18,8(sp)
8001a08c:	2023883a 	mov	r17,r4
8001a090:	2821883a 	mov	r16,r5
8001a094:	20000226 	beq	r4,zero,8001a0a0 <__srefill_r+0x28>
8001a098:	20800e17 	ldw	r2,56(r4)
8001a09c:	10003926 	beq	r2,zero,8001a184 <__srefill_r+0x10c>
8001a0a0:	80c0030b 	ldhu	r3,12(r16)
8001a0a4:	1908000c 	andi	r4,r3,8192
8001a0a8:	1805883a 	mov	r2,r3
8001a0ac:	2000071e 	bne	r4,zero,8001a0cc <__srefill_r+0x54>
8001a0b0:	81001917 	ldw	r4,100(r16)
8001a0b4:	18880014 	ori	r2,r3,8192
8001a0b8:	00f7ffc4 	movi	r3,-8193
8001a0bc:	20c8703a 	and	r4,r4,r3
8001a0c0:	8080030d 	sth	r2,12(r16)
8001a0c4:	1007883a 	mov	r3,r2
8001a0c8:	81001915 	stw	r4,100(r16)
8001a0cc:	80000115 	stw	zero,4(r16)
8001a0d0:	1100080c 	andi	r4,r2,32
8001a0d4:	2000311e 	bne	r4,zero,8001a19c <__srefill_r+0x124>
8001a0d8:	1100010c 	andi	r4,r2,4
8001a0dc:	20001b1e 	bne	r4,zero,8001a14c <__srefill_r+0xd4>
8001a0e0:	1100040c 	andi	r4,r2,16
8001a0e4:	20005026 	beq	r4,zero,8001a228 <__srefill_r+0x1b0>
8001a0e8:	1080020c 	andi	r2,r2,8
8001a0ec:	1000411e 	bne	r2,zero,8001a1f4 <__srefill_r+0x17c>
8001a0f0:	18c00114 	ori	r3,r3,4
8001a0f4:	80c0030d 	sth	r3,12(r16)
8001a0f8:	80800417 	ldw	r2,16(r16)
8001a0fc:	10004626 	beq	r2,zero,8001a218 <__srefill_r+0x1a0>
8001a100:	8480030b 	ldhu	r18,12(r16)
8001a104:	908000cc 	andi	r2,r18,3
8001a108:	1000261e 	bne	r2,zero,8001a1a4 <__srefill_r+0x12c>
8001a10c:	81800417 	ldw	r6,16(r16)
8001a110:	80800817 	ldw	r2,32(r16)
8001a114:	81c00517 	ldw	r7,20(r16)
8001a118:	81400717 	ldw	r5,28(r16)
8001a11c:	81800015 	stw	r6,0(r16)
8001a120:	8809883a 	mov	r4,r17
8001a124:	103ee83a 	callr	r2
8001a128:	80800115 	stw	r2,4(r16)
8001a12c:	0080170e 	bge	zero,r2,8001a18c <__srefill_r+0x114>
8001a130:	0005883a 	mov	r2,zero
8001a134:	dfc00317 	ldw	ra,12(sp)
8001a138:	dc800217 	ldw	r18,8(sp)
8001a13c:	dc400117 	ldw	r17,4(sp)
8001a140:	dc000017 	ldw	r16,0(sp)
8001a144:	dec00404 	addi	sp,sp,16
8001a148:	f800283a 	ret
8001a14c:	81400c17 	ldw	r5,48(r16)
8001a150:	283fe926 	beq	r5,zero,8001a0f8 <_gp+0xfffe9384>
8001a154:	80801004 	addi	r2,r16,64
8001a158:	28800226 	beq	r5,r2,8001a164 <__srefill_r+0xec>
8001a15c:	8809883a 	mov	r4,r17
8001a160:	0017bb00 	call	80017bb0 <_free_r>
8001a164:	80800f17 	ldw	r2,60(r16)
8001a168:	80000c15 	stw	zero,48(r16)
8001a16c:	80800115 	stw	r2,4(r16)
8001a170:	103fe126 	beq	r2,zero,8001a0f8 <_gp+0xfffe9384>
8001a174:	80c00e17 	ldw	r3,56(r16)
8001a178:	0005883a 	mov	r2,zero
8001a17c:	80c00015 	stw	r3,0(r16)
8001a180:	003fec06 	br	8001a134 <_gp+0xfffe93c0>
8001a184:	0017a4c0 	call	80017a4c <__sinit>
8001a188:	003fc506 	br	8001a0a0 <_gp+0xfffe932c>
8001a18c:	80c0030b 	ldhu	r3,12(r16)
8001a190:	1000131e 	bne	r2,zero,8001a1e0 <__srefill_r+0x168>
8001a194:	18c00814 	ori	r3,r3,32
8001a198:	80c0030d 	sth	r3,12(r16)
8001a19c:	00bfffc4 	movi	r2,-1
8001a1a0:	003fe406 	br	8001a134 <_gp+0xfffe93c0>
8001a1a4:	00a000f4 	movhi	r2,32771
8001a1a8:	11235d17 	ldw	r4,-29324(r2)
8001a1ac:	016000b4 	movhi	r5,32770
8001a1b0:	00800044 	movi	r2,1
8001a1b4:	8080030d 	sth	r2,12(r16)
8001a1b8:	29681704 	addi	r5,r5,-24484
8001a1bc:	00183400 	call	80018340 <_fwalk>
8001a1c0:	9080024c 	andi	r2,r18,9
8001a1c4:	8480030d 	sth	r18,12(r16)
8001a1c8:	10800258 	cmpnei	r2,r2,9
8001a1cc:	103fcf1e 	bne	r2,zero,8001a10c <_gp+0xfffe9398>
8001a1d0:	800b883a 	mov	r5,r16
8001a1d4:	8809883a 	mov	r4,r17
8001a1d8:	001748c0 	call	8001748c <__sflush_r>
8001a1dc:	003fcb06 	br	8001a10c <_gp+0xfffe9398>
8001a1e0:	18c01014 	ori	r3,r3,64
8001a1e4:	80000115 	stw	zero,4(r16)
8001a1e8:	80c0030d 	sth	r3,12(r16)
8001a1ec:	00bfffc4 	movi	r2,-1
8001a1f0:	003fd006 	br	8001a134 <_gp+0xfffe93c0>
8001a1f4:	800b883a 	mov	r5,r16
8001a1f8:	8809883a 	mov	r4,r17
8001a1fc:	00176ac0 	call	800176ac <_fflush_r>
8001a200:	103fe61e 	bne	r2,zero,8001a19c <_gp+0xfffe9428>
8001a204:	80c0030b 	ldhu	r3,12(r16)
8001a208:	80000215 	stw	zero,8(r16)
8001a20c:	80000615 	stw	zero,24(r16)
8001a210:	18fffdcc 	andi	r3,r3,65527
8001a214:	003fb606 	br	8001a0f0 <_gp+0xfffe937c>
8001a218:	800b883a 	mov	r5,r16
8001a21c:	8809883a 	mov	r4,r17
8001a220:	001869c0 	call	8001869c <__smakebuf_r>
8001a224:	003fb606 	br	8001a100 <_gp+0xfffe938c>
8001a228:	00800244 	movi	r2,9
8001a22c:	88800015 	stw	r2,0(r17)
8001a230:	18c01014 	ori	r3,r3,64
8001a234:	80c0030d 	sth	r3,12(r16)
8001a238:	00bfffc4 	movi	r2,-1
8001a23c:	003fbd06 	br	8001a134 <_gp+0xfffe93c0>

8001a240 <siscanf>:
8001a240:	deffe204 	addi	sp,sp,-120
8001a244:	dc001a15 	stw	r16,104(sp)
8001a248:	2821883a 	mov	r16,r5
8001a24c:	dfc01b15 	stw	ra,108(sp)
8001a250:	d9801c15 	stw	r6,112(sp)
8001a254:	d9c01d15 	stw	r7,116(sp)
8001a258:	00c08104 	movi	r3,516
8001a25c:	d8c0030d 	sth	r3,12(sp)
8001a260:	d9000015 	stw	r4,0(sp)
8001a264:	d9000415 	stw	r4,16(sp)
8001a268:	00111940 	call	80011194 <strlen>
8001a26c:	00e000f4 	movhi	r3,32771
8001a270:	19235e17 	ldw	r4,-29320(r3)
8001a274:	00e000b4 	movhi	r3,32770
8001a278:	18e8e104 	addi	r3,r3,-23676
8001a27c:	d8800115 	stw	r2,4(sp)
8001a280:	d8800515 	stw	r2,20(sp)
8001a284:	d9c01c04 	addi	r7,sp,112
8001a288:	800d883a 	mov	r6,r16
8001a28c:	d80b883a 	mov	r5,sp
8001a290:	00bfffc4 	movi	r2,-1
8001a294:	d8c00815 	stw	r3,32(sp)
8001a298:	d8000c15 	stw	zero,48(sp)
8001a29c:	d8001115 	stw	zero,68(sp)
8001a2a0:	d880038d 	sth	r2,14(sp)
8001a2a4:	001bc680 	call	8001bc68 <__ssvfiscanf_r>
8001a2a8:	dfc01b17 	ldw	ra,108(sp)
8001a2ac:	dc001a17 	ldw	r16,104(sp)
8001a2b0:	dec01e04 	addi	sp,sp,120
8001a2b4:	f800283a 	ret

8001a2b8 <_siscanf_r>:
8001a2b8:	deffe204 	addi	sp,sp,-120
8001a2bc:	dc001b15 	stw	r16,108(sp)
8001a2c0:	2021883a 	mov	r16,r4
8001a2c4:	dfc01c15 	stw	ra,112(sp)
8001a2c8:	d9800015 	stw	r6,0(sp)
8001a2cc:	d9c01d15 	stw	r7,116(sp)
8001a2d0:	00808104 	movi	r2,516
8001a2d4:	2809883a 	mov	r4,r5
8001a2d8:	d9400115 	stw	r5,4(sp)
8001a2dc:	d9400515 	stw	r5,20(sp)
8001a2e0:	d880040d 	sth	r2,16(sp)
8001a2e4:	00111940 	call	80011194 <strlen>
8001a2e8:	d9800017 	ldw	r6,0(sp)
8001a2ec:	00e000b4 	movhi	r3,32770
8001a2f0:	18e8e104 	addi	r3,r3,-23676
8001a2f4:	d8800215 	stw	r2,8(sp)
8001a2f8:	d8800615 	stw	r2,24(sp)
8001a2fc:	d9c01d04 	addi	r7,sp,116
8001a300:	d9400104 	addi	r5,sp,4
8001a304:	8009883a 	mov	r4,r16
8001a308:	00bfffc4 	movi	r2,-1
8001a30c:	d8c00915 	stw	r3,36(sp)
8001a310:	d8000d15 	stw	zero,52(sp)
8001a314:	d8001215 	stw	zero,72(sp)
8001a318:	d880048d 	sth	r2,18(sp)
8001a31c:	001bc680 	call	8001bc68 <__ssvfiscanf_r>
8001a320:	dfc01c17 	ldw	ra,112(sp)
8001a324:	dc001b17 	ldw	r16,108(sp)
8001a328:	dec01e04 	addi	sp,sp,120
8001a32c:	f800283a 	ret

8001a330 <__sread>:
8001a330:	defffe04 	addi	sp,sp,-8
8001a334:	dc000015 	stw	r16,0(sp)
8001a338:	2821883a 	mov	r16,r5
8001a33c:	2940038f 	ldh	r5,14(r5)
8001a340:	dfc00115 	stw	ra,4(sp)
8001a344:	001e9f80 	call	8001e9f8 <_read_r>
8001a348:	10000716 	blt	r2,zero,8001a368 <__sread+0x38>
8001a34c:	80c01417 	ldw	r3,80(r16)
8001a350:	1887883a 	add	r3,r3,r2
8001a354:	80c01415 	stw	r3,80(r16)
8001a358:	dfc00117 	ldw	ra,4(sp)
8001a35c:	dc000017 	ldw	r16,0(sp)
8001a360:	dec00204 	addi	sp,sp,8
8001a364:	f800283a 	ret
8001a368:	80c0030b 	ldhu	r3,12(r16)
8001a36c:	18fbffcc 	andi	r3,r3,61439
8001a370:	80c0030d 	sth	r3,12(r16)
8001a374:	dfc00117 	ldw	ra,4(sp)
8001a378:	dc000017 	ldw	r16,0(sp)
8001a37c:	dec00204 	addi	sp,sp,8
8001a380:	f800283a 	ret

8001a384 <__seofread>:
8001a384:	0005883a 	mov	r2,zero
8001a388:	f800283a 	ret

8001a38c <__swrite>:
8001a38c:	2880030b 	ldhu	r2,12(r5)
8001a390:	defffb04 	addi	sp,sp,-20
8001a394:	dcc00315 	stw	r19,12(sp)
8001a398:	dc800215 	stw	r18,8(sp)
8001a39c:	dc400115 	stw	r17,4(sp)
8001a3a0:	dc000015 	stw	r16,0(sp)
8001a3a4:	dfc00415 	stw	ra,16(sp)
8001a3a8:	10c0400c 	andi	r3,r2,256
8001a3ac:	2821883a 	mov	r16,r5
8001a3b0:	2023883a 	mov	r17,r4
8001a3b4:	3025883a 	mov	r18,r6
8001a3b8:	3827883a 	mov	r19,r7
8001a3bc:	2940038f 	ldh	r5,14(r5)
8001a3c0:	18000526 	beq	r3,zero,8001a3d8 <__swrite+0x4c>
8001a3c4:	01c00084 	movi	r7,2
8001a3c8:	000d883a 	mov	r6,zero
8001a3cc:	001e82c0 	call	8001e82c <_lseek_r>
8001a3d0:	8080030b 	ldhu	r2,12(r16)
8001a3d4:	8140038f 	ldh	r5,14(r16)
8001a3d8:	10bbffcc 	andi	r2,r2,61439
8001a3dc:	980f883a 	mov	r7,r19
8001a3e0:	900d883a 	mov	r6,r18
8001a3e4:	8809883a 	mov	r4,r17
8001a3e8:	8080030d 	sth	r2,12(r16)
8001a3ec:	dfc00417 	ldw	ra,16(sp)
8001a3f0:	dcc00317 	ldw	r19,12(sp)
8001a3f4:	dc800217 	ldw	r18,8(sp)
8001a3f8:	dc400117 	ldw	r17,4(sp)
8001a3fc:	dc000017 	ldw	r16,0(sp)
8001a400:	dec00504 	addi	sp,sp,20
8001a404:	001e3741 	jmpi	8001e374 <_write_r>

8001a408 <__sseek>:
8001a408:	defffe04 	addi	sp,sp,-8
8001a40c:	dc000015 	stw	r16,0(sp)
8001a410:	2821883a 	mov	r16,r5
8001a414:	2940038f 	ldh	r5,14(r5)
8001a418:	dfc00115 	stw	ra,4(sp)
8001a41c:	001e82c0 	call	8001e82c <_lseek_r>
8001a420:	10ffffd8 	cmpnei	r3,r2,-1
8001a424:	18000826 	beq	r3,zero,8001a448 <__sseek+0x40>
8001a428:	80c0030b 	ldhu	r3,12(r16)
8001a42c:	80801415 	stw	r2,80(r16)
8001a430:	18c40014 	ori	r3,r3,4096
8001a434:	80c0030d 	sth	r3,12(r16)
8001a438:	dfc00117 	ldw	ra,4(sp)
8001a43c:	dc000017 	ldw	r16,0(sp)
8001a440:	dec00204 	addi	sp,sp,8
8001a444:	f800283a 	ret
8001a448:	80c0030b 	ldhu	r3,12(r16)
8001a44c:	18fbffcc 	andi	r3,r3,61439
8001a450:	80c0030d 	sth	r3,12(r16)
8001a454:	dfc00117 	ldw	ra,4(sp)
8001a458:	dc000017 	ldw	r16,0(sp)
8001a45c:	dec00204 	addi	sp,sp,8
8001a460:	f800283a 	ret

8001a464 <__sclose>:
8001a464:	2940038f 	ldh	r5,14(r5)
8001a468:	001e3d81 	jmpi	8001e3d8 <_close_r>

8001a46c <strncmp>:
8001a46c:	30002226 	beq	r6,zero,8001a4f8 <strncmp+0x8c>
8001a470:	2144b03a 	or	r2,r4,r5
8001a474:	108000cc 	andi	r2,r2,3
8001a478:	1000251e 	bne	r2,zero,8001a510 <strncmp+0xa4>
8001a47c:	30800130 	cmpltui	r2,r6,4
8001a480:	1000231e 	bne	r2,zero,8001a510 <strncmp+0xa4>
8001a484:	20800017 	ldw	r2,0(r4)
8001a488:	28c00017 	ldw	r3,0(r5)
8001a48c:	10c0201e 	bne	r2,r3,8001a510 <strncmp+0xa4>
8001a490:	31bfff04 	addi	r6,r6,-4
8001a494:	30001826 	beq	r6,zero,8001a4f8 <strncmp+0x8c>
8001a498:	02bfbff4 	movhi	r10,65279
8001a49c:	52bfbfc4 	addi	r10,r10,-257
8001a4a0:	1287883a 	add	r3,r2,r10
8001a4a4:	02602074 	movhi	r9,32897
8001a4a8:	0084303a 	nor	r2,zero,r2
8001a4ac:	1884703a 	and	r2,r3,r2
8001a4b0:	4a602004 	addi	r9,r9,-32640
8001a4b4:	1244703a 	and	r2,r2,r9
8001a4b8:	10000226 	beq	r2,zero,8001a4c4 <strncmp+0x58>
8001a4bc:	00000e06 	br	8001a4f8 <strncmp+0x8c>
8001a4c0:	10000d1e 	bne	r2,zero,8001a4f8 <strncmp+0x8c>
8001a4c4:	30800130 	cmpltui	r2,r6,4
8001a4c8:	21000104 	addi	r4,r4,4
8001a4cc:	29400104 	addi	r5,r5,4
8001a4d0:	10000f1e 	bne	r2,zero,8001a510 <strncmp+0xa4>
8001a4d4:	20c00017 	ldw	r3,0(r4)
8001a4d8:	29c00017 	ldw	r7,0(r5)
8001a4dc:	1a85883a 	add	r2,r3,r10
8001a4e0:	00d0303a 	nor	r8,zero,r3
8001a4e4:	1204703a 	and	r2,r2,r8
8001a4e8:	1244703a 	and	r2,r2,r9
8001a4ec:	19c0081e 	bne	r3,r7,8001a510 <strncmp+0xa4>
8001a4f0:	31bfff04 	addi	r6,r6,-4
8001a4f4:	303ff21e 	bne	r6,zero,8001a4c0 <_gp+0xfffe974c>
8001a4f8:	0005883a 	mov	r2,zero
8001a4fc:	f800283a 	ret
8001a500:	303ffd26 	beq	r6,zero,8001a4f8 <_gp+0xfffe9784>
8001a504:	103ffc26 	beq	r2,zero,8001a4f8 <_gp+0xfffe9784>
8001a508:	21000044 	addi	r4,r4,1
8001a50c:	29400044 	addi	r5,r5,1
8001a510:	20800007 	ldb	r2,0(r4)
8001a514:	28c00007 	ldb	r3,0(r5)
8001a518:	31bfffc4 	addi	r6,r6,-1
8001a51c:	10fff826 	beq	r2,r3,8001a500 <_gp+0xfffe978c>
8001a520:	20800003 	ldbu	r2,0(r4)
8001a524:	28c00003 	ldbu	r3,0(r5)
8001a528:	10c5c83a 	sub	r2,r2,r3
8001a52c:	f800283a 	ret

8001a530 <_strtoul_l.isra.0>:
8001a530:	defff704 	addi	sp,sp,-36
8001a534:	ddc00715 	stw	r23,28(sp)
8001a538:	dd800615 	stw	r22,24(sp)
8001a53c:	dd400515 	stw	r21,20(sp)
8001a540:	dd000415 	stw	r20,16(sp)
8001a544:	dcc00315 	stw	r19,12(sp)
8001a548:	dc800215 	stw	r18,8(sp)
8001a54c:	dfc00815 	stw	ra,32(sp)
8001a550:	dc400115 	stw	r17,4(sp)
8001a554:	dc000015 	stw	r16,0(sp)
8001a558:	2825883a 	mov	r18,r5
8001a55c:	2029883a 	mov	r20,r4
8001a560:	3027883a 	mov	r19,r6
8001a564:	382b883a 	mov	r21,r7
8001a568:	dd800917 	ldw	r22,36(sp)
8001a56c:	282f883a 	mov	r23,r5
8001a570:	00000106 	br	8001a578 <_strtoul_l.isra.0+0x48>
8001a574:	882f883a 	mov	r23,r17
8001a578:	bc400044 	addi	r17,r23,1
8001a57c:	8c3fffc3 	ldbu	r16,-1(r17)
8001a580:	b009883a 	mov	r4,r22
8001a584:	000fc480 	call	8000fc48 <__locale_ctype_ptr_l>
8001a588:	84003fcc 	andi	r16,r16,255
8001a58c:	1405883a 	add	r2,r2,r16
8001a590:	10800043 	ldbu	r2,1(r2)
8001a594:	1080020c 	andi	r2,r2,8
8001a598:	103ff61e 	bne	r2,zero,8001a574 <_gp+0xfffe9800>
8001a59c:	80800b58 	cmpnei	r2,r16,45
8001a5a0:	10004d26 	beq	r2,zero,8001a6d8 <_strtoul_l.isra.0+0x1a8>
8001a5a4:	80800ae0 	cmpeqi	r2,r16,43
8001a5a8:	1000281e 	bne	r2,zero,8001a64c <_strtoul_l.isra.0+0x11c>
8001a5ac:	002f883a 	mov	r23,zero
8001a5b0:	a8000c26 	beq	r21,zero,8001a5e4 <_strtoul_l.isra.0+0xb4>
8001a5b4:	a8800420 	cmpeqi	r2,r21,16
8001a5b8:	10004b1e 	bne	r2,zero,8001a6e8 <_strtoul_l.isra.0+0x1b8>
8001a5bc:	013fffc4 	movi	r4,-1
8001a5c0:	a80b883a 	mov	r5,r21
8001a5c4:	000d5880 	call	8000d588 <__udivsi3>
8001a5c8:	a80b883a 	mov	r5,r21
8001a5cc:	013fffc4 	movi	r4,-1
8001a5d0:	102d883a 	mov	r22,r2
8001a5d4:	000d5ec0 	call	8000d5ec <__umodsi3>
8001a5d8:	100f883a 	mov	r7,r2
8001a5dc:	a80d883a 	mov	r6,r21
8001a5e0:	00000706 	br	8001a600 <_strtoul_l.isra.0+0xd0>
8001a5e4:	80800c20 	cmpeqi	r2,r16,48
8001a5e8:	1000461e 	bne	r2,zero,8001a704 <_strtoul_l.isra.0+0x1d4>
8001a5ec:	058666b4 	movhi	r22,6554
8001a5f0:	01c00144 	movi	r7,5
8001a5f4:	b5a66644 	addi	r22,r22,-26215
8001a5f8:	01800284 	movi	r6,10
8001a5fc:	05400284 	movi	r21,10
8001a600:	0009883a 	mov	r4,zero
8001a604:	0005883a 	mov	r2,zero
8001a608:	80fff404 	addi	r3,r16,-48
8001a60c:	194002a8 	cmpgeui	r5,r3,10
8001a610:	28000426 	beq	r5,zero,8001a624 <_strtoul_l.isra.0+0xf4>
8001a614:	80ffefc4 	addi	r3,r16,-65
8001a618:	18c006a8 	cmpgeui	r3,r3,26
8001a61c:	1800121e 	bne	r3,zero,8001a668 <_strtoul_l.isra.0+0x138>
8001a620:	80fff244 	addi	r3,r16,-55
8001a624:	1d40150e 	bge	r3,r21,8001a67c <_strtoul_l.isra.0+0x14c>
8001a628:	20000d16 	blt	r4,zero,8001a660 <_strtoul_l.isra.0+0x130>
8001a62c:	b0800c36 	bltu	r22,r2,8001a660 <_strtoul_l.isra.0+0x130>
8001a630:	15800a26 	beq	r2,r22,8001a65c <_strtoul_l.isra.0+0x12c>
8001a634:	1185383a 	mul	r2,r2,r6
8001a638:	01000044 	movi	r4,1
8001a63c:	1885883a 	add	r2,r3,r2
8001a640:	8c400044 	addi	r17,r17,1
8001a644:	8c3fffc3 	ldbu	r16,-1(r17)
8001a648:	003fef06 	br	8001a608 <_gp+0xfffe9894>
8001a64c:	bc000043 	ldbu	r16,1(r23)
8001a650:	bc400084 	addi	r17,r23,2
8001a654:	002f883a 	mov	r23,zero
8001a658:	003fd506 	br	8001a5b0 <_gp+0xfffe983c>
8001a65c:	38fff50e 	bge	r7,r3,8001a634 <_gp+0xfffe98c0>
8001a660:	013fffc4 	movi	r4,-1
8001a664:	003ff606 	br	8001a640 <_gp+0xfffe98cc>
8001a668:	80ffe7c4 	addi	r3,r16,-97
8001a66c:	18c006a8 	cmpgeui	r3,r3,26
8001a670:	1800021e 	bne	r3,zero,8001a67c <_strtoul_l.isra.0+0x14c>
8001a674:	80ffea44 	addi	r3,r16,-87
8001a678:	1d7feb16 	blt	r3,r21,8001a628 <_gp+0xfffe98b4>
8001a67c:	20001016 	blt	r4,zero,8001a6c0 <_strtoul_l.isra.0+0x190>
8001a680:	b8000126 	beq	r23,zero,8001a688 <_strtoul_l.isra.0+0x158>
8001a684:	0085c83a 	sub	r2,zero,r2
8001a688:	98000226 	beq	r19,zero,8001a694 <_strtoul_l.isra.0+0x164>
8001a68c:	2000101e 	bne	r4,zero,8001a6d0 <_strtoul_l.isra.0+0x1a0>
8001a690:	9c800015 	stw	r18,0(r19)
8001a694:	dfc00817 	ldw	ra,32(sp)
8001a698:	ddc00717 	ldw	r23,28(sp)
8001a69c:	dd800617 	ldw	r22,24(sp)
8001a6a0:	dd400517 	ldw	r21,20(sp)
8001a6a4:	dd000417 	ldw	r20,16(sp)
8001a6a8:	dcc00317 	ldw	r19,12(sp)
8001a6ac:	dc800217 	ldw	r18,8(sp)
8001a6b0:	dc400117 	ldw	r17,4(sp)
8001a6b4:	dc000017 	ldw	r16,0(sp)
8001a6b8:	dec00904 	addi	sp,sp,36
8001a6bc:	f800283a 	ret
8001a6c0:	00800884 	movi	r2,34
8001a6c4:	a0800015 	stw	r2,0(r20)
8001a6c8:	00bfffc4 	movi	r2,-1
8001a6cc:	983ff126 	beq	r19,zero,8001a694 <_gp+0xfffe9920>
8001a6d0:	8cbfffc4 	addi	r18,r17,-1
8001a6d4:	003fee06 	br	8001a690 <_gp+0xfffe991c>
8001a6d8:	bc400084 	addi	r17,r23,2
8001a6dc:	bc000043 	ldbu	r16,1(r23)
8001a6e0:	05c00044 	movi	r23,1
8001a6e4:	003fb206 	br	8001a5b0 <_gp+0xfffe983c>
8001a6e8:	80800c18 	cmpnei	r2,r16,48
8001a6ec:	10000f26 	beq	r2,zero,8001a72c <_strtoul_l.isra.0+0x1fc>
8001a6f0:	05840034 	movhi	r22,4096
8001a6f4:	01c003c4 	movi	r7,15
8001a6f8:	b5bfffc4 	addi	r22,r22,-1
8001a6fc:	01800404 	movi	r6,16
8001a700:	003fbf06 	br	8001a600 <_gp+0xfffe988c>
8001a704:	88800003 	ldbu	r2,0(r17)
8001a708:	108037cc 	andi	r2,r2,223
8001a70c:	10801618 	cmpnei	r2,r2,88
8001a710:	10000a26 	beq	r2,zero,8001a73c <_strtoul_l.isra.0+0x20c>
8001a714:	05880034 	movhi	r22,8192
8001a718:	01c001c4 	movi	r7,7
8001a71c:	b5bfffc4 	addi	r22,r22,-1
8001a720:	01800204 	movi	r6,8
8001a724:	05400204 	movi	r21,8
8001a728:	003fb506 	br	8001a600 <_gp+0xfffe988c>
8001a72c:	88800003 	ldbu	r2,0(r17)
8001a730:	108037cc 	andi	r2,r2,223
8001a734:	10801620 	cmpeqi	r2,r2,88
8001a738:	10000826 	beq	r2,zero,8001a75c <_strtoul_l.isra.0+0x22c>
8001a73c:	05840034 	movhi	r22,4096
8001a740:	8c000043 	ldbu	r16,1(r17)
8001a744:	01c003c4 	movi	r7,15
8001a748:	8c400084 	addi	r17,r17,2
8001a74c:	b5bfffc4 	addi	r22,r22,-1
8001a750:	01800404 	movi	r6,16
8001a754:	05400404 	movi	r21,16
8001a758:	003fa906 	br	8001a600 <_gp+0xfffe988c>
8001a75c:	01400404 	movi	r5,16
8001a760:	013fffc4 	movi	r4,-1
8001a764:	000d5880 	call	8000d588 <__udivsi3>
8001a768:	01400404 	movi	r5,16
8001a76c:	013fffc4 	movi	r4,-1
8001a770:	102d883a 	mov	r22,r2
8001a774:	000d5ec0 	call	8000d5ec <__umodsi3>
8001a778:	100f883a 	mov	r7,r2
8001a77c:	01800404 	movi	r6,16
8001a780:	003f9f06 	br	8001a600 <_gp+0xfffe988c>

8001a784 <_strtoul_r>:
8001a784:	00a000f4 	movhi	r2,32771
8001a788:	10a35e17 	ldw	r2,-29320(r2)
8001a78c:	defffe04 	addi	sp,sp,-8
8001a790:	dfc00115 	stw	ra,4(sp)
8001a794:	10800d17 	ldw	r2,52(r2)
8001a798:	1000021e 	bne	r2,zero,8001a7a4 <_strtoul_r+0x20>
8001a79c:	00a000b4 	movhi	r2,32770
8001a7a0:	109d2904 	addi	r2,r2,29860
8001a7a4:	d8800015 	stw	r2,0(sp)
8001a7a8:	001a5300 	call	8001a530 <_strtoul_l.isra.0>
8001a7ac:	dfc00117 	ldw	ra,4(sp)
8001a7b0:	dec00204 	addi	sp,sp,8
8001a7b4:	f800283a 	ret

8001a7b8 <strtoul_l>:
8001a7b8:	defffe04 	addi	sp,sp,-8
8001a7bc:	00a000f4 	movhi	r2,32771
8001a7c0:	d9c00015 	stw	r7,0(sp)
8001a7c4:	300f883a 	mov	r7,r6
8001a7c8:	280d883a 	mov	r6,r5
8001a7cc:	200b883a 	mov	r5,r4
8001a7d0:	11235e17 	ldw	r4,-29320(r2)
8001a7d4:	dfc00115 	stw	ra,4(sp)
8001a7d8:	001a5300 	call	8001a530 <_strtoul_l.isra.0>
8001a7dc:	dfc00117 	ldw	ra,4(sp)
8001a7e0:	dec00204 	addi	sp,sp,8
8001a7e4:	f800283a 	ret

8001a7e8 <strtoul>:
8001a7e8:	00a000f4 	movhi	r2,32771
8001a7ec:	10e35e17 	ldw	r3,-29320(r2)
8001a7f0:	defffe04 	addi	sp,sp,-8
8001a7f4:	dfc00115 	stw	ra,4(sp)
8001a7f8:	18800d17 	ldw	r2,52(r3)
8001a7fc:	1000021e 	bne	r2,zero,8001a808 <strtoul+0x20>
8001a800:	00a000b4 	movhi	r2,32770
8001a804:	109d2904 	addi	r2,r2,29860
8001a808:	300f883a 	mov	r7,r6
8001a80c:	d8800015 	stw	r2,0(sp)
8001a810:	280d883a 	mov	r6,r5
8001a814:	200b883a 	mov	r5,r4
8001a818:	1809883a 	mov	r4,r3
8001a81c:	001a5300 	call	8001a530 <_strtoul_l.isra.0>
8001a820:	dfc00117 	ldw	ra,4(sp)
8001a824:	dec00204 	addi	sp,sp,8
8001a828:	f800283a 	ret

8001a82c <__ssprint_r>:
8001a82c:	30800217 	ldw	r2,8(r6)
8001a830:	defff604 	addi	sp,sp,-40
8001a834:	dcc00315 	stw	r19,12(sp)
8001a838:	dfc00915 	stw	ra,36(sp)
8001a83c:	df000815 	stw	fp,32(sp)
8001a840:	ddc00715 	stw	r23,28(sp)
8001a844:	dd800615 	stw	r22,24(sp)
8001a848:	dd400515 	stw	r21,20(sp)
8001a84c:	dd000415 	stw	r20,16(sp)
8001a850:	dc800215 	stw	r18,8(sp)
8001a854:	dc400115 	stw	r17,4(sp)
8001a858:	dc000015 	stw	r16,0(sp)
8001a85c:	3027883a 	mov	r19,r6
8001a860:	10005426 	beq	r2,zero,8001a9b4 <__ssprint_r+0x188>
8001a864:	2029883a 	mov	r20,r4
8001a868:	2821883a 	mov	r16,r5
8001a86c:	35800017 	ldw	r22,0(r6)
8001a870:	29000017 	ldw	r4,0(r5)
8001a874:	2c400217 	ldw	r17,8(r5)
8001a878:	00003506 	br	8001a950 <__ssprint_r+0x124>
8001a87c:	8080030b 	ldhu	r2,12(r16)
8001a880:	10c1200c 	andi	r3,r2,1152
8001a884:	18002526 	beq	r3,zero,8001a91c <__ssprint_r+0xf0>
8001a888:	81800517 	ldw	r6,20(r16)
8001a88c:	81400417 	ldw	r5,16(r16)
8001a890:	90c00044 	addi	r3,r18,1
8001a894:	318000e4 	muli	r6,r6,3
8001a898:	216bc83a 	sub	r21,r4,r5
8001a89c:	1d47883a 	add	r3,r3,r21
8001a8a0:	3022d7fa 	srli	r17,r6,31
8001a8a4:	89a3883a 	add	r17,r17,r6
8001a8a8:	8823d07a 	srai	r17,r17,1
8001a8ac:	880d883a 	mov	r6,r17
8001a8b0:	88c0022e 	bgeu	r17,r3,8001a8bc <__ssprint_r+0x90>
8001a8b4:	1823883a 	mov	r17,r3
8001a8b8:	180d883a 	mov	r6,r3
8001a8bc:	1081000c 	andi	r2,r2,1024
8001a8c0:	10002c26 	beq	r2,zero,8001a974 <__ssprint_r+0x148>
8001a8c4:	300b883a 	mov	r5,r6
8001a8c8:	a009883a 	mov	r4,r20
8001a8cc:	000fca40 	call	8000fca4 <_malloc_r>
8001a8d0:	102f883a 	mov	r23,r2
8001a8d4:	10002e26 	beq	r2,zero,8001a990 <__ssprint_r+0x164>
8001a8d8:	81400417 	ldw	r5,16(r16)
8001a8dc:	a80d883a 	mov	r6,r21
8001a8e0:	1009883a 	mov	r4,r2
8001a8e4:	00104e80 	call	800104e8 <memcpy>
8001a8e8:	8080030b 	ldhu	r2,12(r16)
8001a8ec:	00fedfc4 	movi	r3,-1153
8001a8f0:	10c4703a 	and	r2,r2,r3
8001a8f4:	10802014 	ori	r2,r2,128
8001a8f8:	8080030d 	sth	r2,12(r16)
8001a8fc:	bd49883a 	add	r4,r23,r21
8001a900:	8d45c83a 	sub	r2,r17,r21
8001a904:	85c00415 	stw	r23,16(r16)
8001a908:	84400515 	stw	r17,20(r16)
8001a90c:	81000015 	stw	r4,0(r16)
8001a910:	9023883a 	mov	r17,r18
8001a914:	80800215 	stw	r2,8(r16)
8001a918:	902f883a 	mov	r23,r18
8001a91c:	b80d883a 	mov	r6,r23
8001a920:	e00b883a 	mov	r5,fp
8001a924:	00188c00 	call	800188c0 <memmove>
8001a928:	80c00217 	ldw	r3,8(r16)
8001a92c:	81000017 	ldw	r4,0(r16)
8001a930:	98800217 	ldw	r2,8(r19)
8001a934:	1c63c83a 	sub	r17,r3,r17
8001a938:	25c9883a 	add	r4,r4,r23
8001a93c:	84400215 	stw	r17,8(r16)
8001a940:	81000015 	stw	r4,0(r16)
8001a944:	14a5c83a 	sub	r18,r2,r18
8001a948:	9c800215 	stw	r18,8(r19)
8001a94c:	90001926 	beq	r18,zero,8001a9b4 <__ssprint_r+0x188>
8001a950:	b4800117 	ldw	r18,4(r22)
8001a954:	b7000017 	ldw	fp,0(r22)
8001a958:	882f883a 	mov	r23,r17
8001a95c:	b5800204 	addi	r22,r22,8
8001a960:	903ffb26 	beq	r18,zero,8001a950 <_gp+0xfffe9bdc>
8001a964:	947fc52e 	bgeu	r18,r17,8001a87c <_gp+0xfffe9b08>
8001a968:	9023883a 	mov	r17,r18
8001a96c:	902f883a 	mov	r23,r18
8001a970:	003fea06 	br	8001a91c <_gp+0xfffe9ba8>
8001a974:	a009883a 	mov	r4,r20
8001a978:	0019ae40 	call	80019ae4 <_realloc_r>
8001a97c:	102f883a 	mov	r23,r2
8001a980:	103fde1e 	bne	r2,zero,8001a8fc <_gp+0xfffe9b88>
8001a984:	81400417 	ldw	r5,16(r16)
8001a988:	a009883a 	mov	r4,r20
8001a98c:	0017bb00 	call	80017bb0 <_free_r>
8001a990:	80c0030b 	ldhu	r3,12(r16)
8001a994:	00800304 	movi	r2,12
8001a998:	a0800015 	stw	r2,0(r20)
8001a99c:	18c01014 	ori	r3,r3,64
8001a9a0:	80c0030d 	sth	r3,12(r16)
8001a9a4:	00bfffc4 	movi	r2,-1
8001a9a8:	98000215 	stw	zero,8(r19)
8001a9ac:	98000115 	stw	zero,4(r19)
8001a9b0:	00000206 	br	8001a9bc <__ssprint_r+0x190>
8001a9b4:	98000115 	stw	zero,4(r19)
8001a9b8:	0005883a 	mov	r2,zero
8001a9bc:	dfc00917 	ldw	ra,36(sp)
8001a9c0:	df000817 	ldw	fp,32(sp)
8001a9c4:	ddc00717 	ldw	r23,28(sp)
8001a9c8:	dd800617 	ldw	r22,24(sp)
8001a9cc:	dd400517 	ldw	r21,20(sp)
8001a9d0:	dd000417 	ldw	r20,16(sp)
8001a9d4:	dcc00317 	ldw	r19,12(sp)
8001a9d8:	dc800217 	ldw	r18,8(sp)
8001a9dc:	dc400117 	ldw	r17,4(sp)
8001a9e0:	dc000017 	ldw	r16,0(sp)
8001a9e4:	dec00a04 	addi	sp,sp,40
8001a9e8:	f800283a 	ret

8001a9ec <___svfiprintf_internal_r>:
8001a9ec:	2880030b 	ldhu	r2,12(r5)
8001a9f0:	deffcf04 	addi	sp,sp,-196
8001a9f4:	df002f15 	stw	fp,188(sp)
8001a9f8:	dd802d15 	stw	r22,180(sp)
8001a9fc:	dd002b15 	stw	r20,172(sp)
8001aa00:	dfc03015 	stw	ra,192(sp)
8001aa04:	ddc02e15 	stw	r23,184(sp)
8001aa08:	dd402c15 	stw	r21,176(sp)
8001aa0c:	dcc02a15 	stw	r19,168(sp)
8001aa10:	dc802915 	stw	r18,164(sp)
8001aa14:	dc402815 	stw	r17,160(sp)
8001aa18:	dc002715 	stw	r16,156(sp)
8001aa1c:	1080200c 	andi	r2,r2,128
8001aa20:	d9c00415 	stw	r7,16(sp)
8001aa24:	2829883a 	mov	r20,r5
8001aa28:	202d883a 	mov	r22,r4
8001aa2c:	3039883a 	mov	fp,r6
8001aa30:	10000226 	beq	r2,zero,8001aa3c <___svfiprintf_internal_r+0x50>
8001aa34:	28800417 	ldw	r2,16(r5)
8001aa38:	10037a26 	beq	r2,zero,8001b824 <___svfiprintf_internal_r+0xe38>
8001aa3c:	dc801704 	addi	r18,sp,92
8001aa40:	dc800a15 	stw	r18,40(sp)
8001aa44:	d8000c15 	stw	zero,48(sp)
8001aa48:	d8000b15 	stw	zero,44(sp)
8001aa4c:	9011883a 	mov	r8,r18
8001aa50:	d8000515 	stw	zero,20(sp)
8001aa54:	d8000015 	stw	zero,0(sp)
8001aa58:	e0800007 	ldb	r2,0(fp)
8001aa5c:	1000d126 	beq	r2,zero,8001ada4 <___svfiprintf_internal_r+0x3b8>
8001aa60:	10800960 	cmpeqi	r2,r2,37
8001aa64:	e023883a 	mov	r17,fp
8001aa68:	10000226 	beq	r2,zero,8001aa74 <___svfiprintf_internal_r+0x88>
8001aa6c:	00001706 	br	8001aacc <___svfiprintf_internal_r+0xe0>
8001aa70:	18000426 	beq	r3,zero,8001aa84 <___svfiprintf_internal_r+0x98>
8001aa74:	8c400044 	addi	r17,r17,1
8001aa78:	88800007 	ldb	r2,0(r17)
8001aa7c:	10c00958 	cmpnei	r3,r2,37
8001aa80:	103ffb1e 	bne	r2,zero,8001aa70 <_gp+0xfffe9cfc>
8001aa84:	8f21c83a 	sub	r16,r17,fp
8001aa88:	80000e26 	beq	r16,zero,8001aac4 <___svfiprintf_internal_r+0xd8>
8001aa8c:	d8c00c17 	ldw	r3,48(sp)
8001aa90:	d8800b17 	ldw	r2,44(sp)
8001aa94:	47000015 	stw	fp,0(r8)
8001aa98:	1c07883a 	add	r3,r3,r16
8001aa9c:	10800044 	addi	r2,r2,1
8001aaa0:	d8800b15 	stw	r2,44(sp)
8001aaa4:	44000115 	stw	r16,4(r8)
8001aaa8:	d8c00c15 	stw	r3,48(sp)
8001aaac:	10800208 	cmpgei	r2,r2,8
8001aab0:	1000b51e 	bne	r2,zero,8001ad88 <___svfiprintf_internal_r+0x39c>
8001aab4:	42000204 	addi	r8,r8,8
8001aab8:	d8800017 	ldw	r2,0(sp)
8001aabc:	1405883a 	add	r2,r2,r16
8001aac0:	d8800015 	stw	r2,0(sp)
8001aac4:	88800007 	ldb	r2,0(r17)
8001aac8:	1000b626 	beq	r2,zero,8001ada4 <___svfiprintf_internal_r+0x3b8>
8001aacc:	88800047 	ldb	r2,1(r17)
8001aad0:	8f000044 	addi	fp,r17,1
8001aad4:	d8000945 	stb	zero,37(sp)
8001aad8:	000b883a 	mov	r5,zero
8001aadc:	000d883a 	mov	r6,zero
8001aae0:	027fffc4 	movi	r9,-1
8001aae4:	0021883a 	mov	r16,zero
8001aae8:	000f883a 	mov	r7,zero
8001aaec:	e7000044 	addi	fp,fp,1
8001aaf0:	10fff804 	addi	r3,r2,-32
8001aaf4:	19001668 	cmpgeui	r4,r3,89
8001aaf8:	2000cc1e 	bne	r4,zero,8001ae2c <___svfiprintf_internal_r+0x440>
8001aafc:	180690ba 	slli	r3,r3,2
8001ab00:	012000b4 	movhi	r4,32770
8001ab04:	1909883a 	add	r4,r3,r4
8001ab08:	20eac417 	ldw	r3,-21744(r4)
8001ab0c:	1800683a 	jmp	r3
8001ab10:	8001aefc 	xorhi	zero,r16,1723
8001ab14:	8001ae2c 	andhi	zero,r16,1720
8001ab18:	8001ae2c 	andhi	zero,r16,1720
8001ab1c:	8001aef0 	cmpltui	zero,r16,1723
8001ab20:	8001ae2c 	andhi	zero,r16,1720
8001ab24:	8001ae2c 	andhi	zero,r16,1720
8001ab28:	8001ae2c 	andhi	zero,r16,1720
8001ab2c:	8001ae2c 	andhi	zero,r16,1720
8001ab30:	8001ae2c 	andhi	zero,r16,1720
8001ab34:	8001ae2c 	andhi	zero,r16,1720
8001ab38:	8001aec8 	cmpgei	zero,r16,1723
8001ab3c:	8001aeb8 	rdprs	zero,r16,1722
8001ab40:	8001ae2c 	andhi	zero,r16,1720
8001ab44:	8001aea0 	cmpeqi	zero,r16,1722
8001ab48:	8001ae5c 	xori	zero,r16,1721
8001ab4c:	8001ae2c 	andhi	zero,r16,1720
8001ab50:	8001ae50 	cmplti	zero,r16,1721
8001ab54:	8001adfc 	xorhi	zero,r16,1719
8001ab58:	8001adfc 	xorhi	zero,r16,1719
8001ab5c:	8001adfc 	xorhi	zero,r16,1719
8001ab60:	8001adfc 	xorhi	zero,r16,1719
8001ab64:	8001adfc 	xorhi	zero,r16,1719
8001ab68:	8001adfc 	xorhi	zero,r16,1719
8001ab6c:	8001adfc 	xorhi	zero,r16,1719
8001ab70:	8001adfc 	xorhi	zero,r16,1719
8001ab74:	8001adfc 	xorhi	zero,r16,1719
8001ab78:	8001ae2c 	andhi	zero,r16,1720
8001ab7c:	8001ae2c 	andhi	zero,r16,1720
8001ab80:	8001ae2c 	andhi	zero,r16,1720
8001ab84:	8001ae2c 	andhi	zero,r16,1720
8001ab88:	8001ae2c 	andhi	zero,r16,1720
8001ab8c:	8001ae2c 	andhi	zero,r16,1720
8001ab90:	8001ae2c 	andhi	zero,r16,1720
8001ab94:	8001ae2c 	andhi	zero,r16,1720
8001ab98:	8001ae2c 	andhi	zero,r16,1720
8001ab9c:	8001ae2c 	andhi	zero,r16,1720
8001aba0:	8001b4b0 	cmpltui	zero,r16,1746
8001aba4:	8001ae2c 	andhi	zero,r16,1720
8001aba8:	8001ae2c 	andhi	zero,r16,1720
8001abac:	8001ae2c 	andhi	zero,r16,1720
8001abb0:	8001ae2c 	andhi	zero,r16,1720
8001abb4:	8001ae2c 	andhi	zero,r16,1720
8001abb8:	8001ae2c 	andhi	zero,r16,1720
8001abbc:	8001ae2c 	andhi	zero,r16,1720
8001abc0:	8001ae2c 	andhi	zero,r16,1720
8001abc4:	8001ae2c 	andhi	zero,r16,1720
8001abc8:	8001ae2c 	andhi	zero,r16,1720
8001abcc:	8001ad24 	muli	zero,r16,1716
8001abd0:	8001ae2c 	andhi	zero,r16,1720
8001abd4:	8001ae2c 	andhi	zero,r16,1720
8001abd8:	8001ae2c 	andhi	zero,r16,1720
8001abdc:	8001ae2c 	andhi	zero,r16,1720
8001abe0:	8001ae2c 	andhi	zero,r16,1720
8001abe4:	8001ac74 	orhi	zero,r16,1713
8001abe8:	8001ae2c 	andhi	zero,r16,1720
8001abec:	8001ae2c 	andhi	zero,r16,1720
8001abf0:	8001b45c 	xori	zero,r16,1745
8001abf4:	8001ae2c 	andhi	zero,r16,1720
8001abf8:	8001ae2c 	andhi	zero,r16,1720
8001abfc:	8001ae2c 	andhi	zero,r16,1720
8001ac00:	8001ae2c 	andhi	zero,r16,1720
8001ac04:	8001ae2c 	andhi	zero,r16,1720
8001ac08:	8001ae2c 	andhi	zero,r16,1720
8001ac0c:	8001ae2c 	andhi	zero,r16,1720
8001ac10:	8001ae2c 	andhi	zero,r16,1720
8001ac14:	8001ae2c 	andhi	zero,r16,1720
8001ac18:	8001ae2c 	andhi	zero,r16,1720
8001ac1c:	8001afa8 	cmpgeui	zero,r16,1726
8001ac20:	8001af6c 	andhi	zero,r16,1725
8001ac24:	8001ae2c 	andhi	zero,r16,1720
8001ac28:	8001ae2c 	andhi	zero,r16,1720
8001ac2c:	8001ae2c 	andhi	zero,r16,1720
8001ac30:	8001b4a4 	muli	zero,r16,1746
8001ac34:	8001af6c 	andhi	zero,r16,1725
8001ac38:	8001ae2c 	andhi	zero,r16,1720
8001ac3c:	8001ae2c 	andhi	zero,r16,1720
8001ac40:	8001af58 	cmpnei	zero,r16,1725
8001ac44:	8001ae2c 	andhi	zero,r16,1720
8001ac48:	8001b3a8 	cmpgeui	zero,r16,1742
8001ac4c:	8001ad28 	cmpgeui	zero,r16,1716
8001ac50:	8001b36c 	andhi	zero,r16,1741
8001ac54:	8001b360 	cmpeqi	zero,r16,1741
8001ac58:	8001ae2c 	andhi	zero,r16,1720
8001ac5c:	8001b300 	call	88001b30 <_gp+0x7fd0dbc>
8001ac60:	8001ae2c 	andhi	zero,r16,1720
8001ac64:	8001ac78 	rdprs	zero,r16,1713
8001ac68:	8001ae2c 	andhi	zero,r16,1720
8001ac6c:	8001ae2c 	andhi	zero,r16,1720
8001ac70:	8001b3e4 	muli	zero,r16,1743
8001ac74:	39c00414 	ori	r7,r7,16
8001ac78:	3880080c 	andi	r2,r7,32
8001ac7c:	1001eb26 	beq	r2,zero,8001b42c <___svfiprintf_internal_r+0xa40>
8001ac80:	d8c00417 	ldw	r3,16(sp)
8001ac84:	d8000945 	stb	zero,37(sp)
8001ac88:	00800044 	movi	r2,1
8001ac8c:	1cc00017 	ldw	r19,0(r3)
8001ac90:	1d400117 	ldw	r21,4(r3)
8001ac94:	18c00204 	addi	r3,r3,8
8001ac98:	d8c00415 	stw	r3,16(sp)
8001ac9c:	48ffffe0 	cmpeqi	r3,r9,-1
8001aca0:	18002c26 	beq	r3,zero,8001ad54 <___svfiprintf_internal_r+0x368>
8001aca4:	3823883a 	mov	r17,r7
8001aca8:	0019883a 	mov	r12,zero
8001acac:	10c00060 	cmpeqi	r3,r2,1
8001acb0:	18021b1e 	bne	r3,zero,8001b520 <___svfiprintf_internal_r+0xb34>
8001acb4:	108000a0 	cmpeqi	r2,r2,2
8001acb8:	1002211e 	bne	r2,zero,8001b540 <___svfiprintf_internal_r+0xb54>
8001acbc:	9007883a 	mov	r3,r18
8001acc0:	00000106 	br	8001acc8 <___svfiprintf_internal_r+0x2dc>
8001acc4:	b807883a 	mov	r3,r23
8001acc8:	9808d0fa 	srli	r4,r19,3
8001accc:	a80a977a 	slli	r5,r21,29
8001acd0:	a82ad0fa 	srli	r21,r21,3
8001acd4:	9cc001cc 	andi	r19,r19,7
8001acd8:	98800c04 	addi	r2,r19,48
8001acdc:	2926b03a 	or	r19,r5,r4
8001ace0:	18bfffc5 	stb	r2,-1(r3)
8001ace4:	9d48b03a 	or	r4,r19,r21
8001ace8:	1dffffc4 	addi	r23,r3,-1
8001acec:	203ff51e 	bne	r4,zero,8001acc4 <_gp+0xfffe9f50>
8001acf0:	8900004c 	andi	r4,r17,1
8001acf4:	20021f26 	beq	r4,zero,8001b574 <___svfiprintf_internal_r+0xb88>
8001acf8:	10803fcc 	andi	r2,r2,255
8001acfc:	1080201c 	xori	r2,r2,128
8001ad00:	10bfe004 	addi	r2,r2,-128
8001ad04:	10800c18 	cmpnei	r2,r2,48
8001ad08:	10021a26 	beq	r2,zero,8001b574 <___svfiprintf_internal_r+0xb88>
8001ad0c:	18ffff84 	addi	r3,r3,-2
8001ad10:	00800c04 	movi	r2,48
8001ad14:	b8bfffc5 	stb	r2,-1(r23)
8001ad18:	90ebc83a 	sub	r21,r18,r3
8001ad1c:	182f883a 	mov	r23,r3
8001ad20:	00021506 	br	8001b578 <___svfiprintf_internal_r+0xb8c>
8001ad24:	39c00414 	ori	r7,r7,16
8001ad28:	3880080c 	andi	r2,r7,32
8001ad2c:	10007e26 	beq	r2,zero,8001af28 <___svfiprintf_internal_r+0x53c>
8001ad30:	d8c00417 	ldw	r3,16(sp)
8001ad34:	0005883a 	mov	r2,zero
8001ad38:	1cc00017 	ldw	r19,0(r3)
8001ad3c:	1d400117 	ldw	r21,4(r3)
8001ad40:	18c00204 	addi	r3,r3,8
8001ad44:	d8c00415 	stw	r3,16(sp)
8001ad48:	d8000945 	stb	zero,37(sp)
8001ad4c:	48ffffe0 	cmpeqi	r3,r9,-1
8001ad50:	183fd41e 	bne	r3,zero,8001aca4 <_gp+0xfffe9f30>
8001ad54:	0019883a 	mov	r12,zero
8001ad58:	047fdfc4 	movi	r17,-129
8001ad5c:	9d46b03a 	or	r3,r19,r21
8001ad60:	3c62703a 	and	r17,r7,r17
8001ad64:	183fd11e 	bne	r3,zero,8001acac <_gp+0xfffe9f38>
8001ad68:	4802df1e 	bne	r9,zero,8001b8e8 <___svfiprintf_internal_r+0xefc>
8001ad6c:	1002781e 	bne	r2,zero,8001b750 <___svfiprintf_internal_r+0xd64>
8001ad70:	3d40004c 	andi	r21,r7,1
8001ad74:	a8029326 	beq	r21,zero,8001b7c4 <___svfiprintf_internal_r+0xdd8>
8001ad78:	00800c04 	movi	r2,48
8001ad7c:	d88016c5 	stb	r2,91(sp)
8001ad80:	ddc016c4 	addi	r23,sp,91
8001ad84:	0001fc06 	br	8001b578 <___svfiprintf_internal_r+0xb8c>
8001ad88:	d9800a04 	addi	r6,sp,40
8001ad8c:	a00b883a 	mov	r5,r20
8001ad90:	b009883a 	mov	r4,r22
8001ad94:	001a82c0 	call	8001a82c <__ssprint_r>
8001ad98:	1000081e 	bne	r2,zero,8001adbc <___svfiprintf_internal_r+0x3d0>
8001ad9c:	9011883a 	mov	r8,r18
8001ada0:	003f4506 	br	8001aab8 <_gp+0xfffe9d44>
8001ada4:	d8800c17 	ldw	r2,48(sp)
8001ada8:	10000426 	beq	r2,zero,8001adbc <___svfiprintf_internal_r+0x3d0>
8001adac:	d9800a04 	addi	r6,sp,40
8001adb0:	a00b883a 	mov	r5,r20
8001adb4:	b009883a 	mov	r4,r22
8001adb8:	001a82c0 	call	8001a82c <__ssprint_r>
8001adbc:	a080030b 	ldhu	r2,12(r20)
8001adc0:	1080100c 	andi	r2,r2,64
8001adc4:	1002f21e 	bne	r2,zero,8001b990 <___svfiprintf_internal_r+0xfa4>
8001adc8:	d8800017 	ldw	r2,0(sp)
8001adcc:	dfc03017 	ldw	ra,192(sp)
8001add0:	df002f17 	ldw	fp,188(sp)
8001add4:	ddc02e17 	ldw	r23,184(sp)
8001add8:	dd802d17 	ldw	r22,180(sp)
8001addc:	dd402c17 	ldw	r21,176(sp)
8001ade0:	dd002b17 	ldw	r20,172(sp)
8001ade4:	dcc02a17 	ldw	r19,168(sp)
8001ade8:	dc802917 	ldw	r18,164(sp)
8001adec:	dc402817 	ldw	r17,160(sp)
8001adf0:	dc002717 	ldw	r16,156(sp)
8001adf4:	dec03104 	addi	sp,sp,196
8001adf8:	f800283a 	ret
8001adfc:	0021883a 	mov	r16,zero
8001ae00:	10fff404 	addi	r3,r2,-48
8001ae04:	e7000044 	addi	fp,fp,1
8001ae08:	840002a4 	muli	r16,r16,10
8001ae0c:	e0bfffc7 	ldb	r2,-1(fp)
8001ae10:	1c21883a 	add	r16,r3,r16
8001ae14:	10fff404 	addi	r3,r2,-48
8001ae18:	190002b0 	cmpltui	r4,r3,10
8001ae1c:	203ff91e 	bne	r4,zero,8001ae04 <_gp+0xfffea090>
8001ae20:	10fff804 	addi	r3,r2,-32
8001ae24:	19001668 	cmpgeui	r4,r3,89
8001ae28:	203f3426 	beq	r4,zero,8001aafc <_gp+0xfffe9d88>
8001ae2c:	29403fcc 	andi	r5,r5,255
8001ae30:	2802f11e 	bne	r5,zero,8001b9f8 <___svfiprintf_internal_r+0x100c>
8001ae34:	103fdb26 	beq	r2,zero,8001ada4 <_gp+0xfffea030>
8001ae38:	d8800d05 	stb	r2,52(sp)
8001ae3c:	d8000945 	stb	zero,37(sp)
8001ae40:	04c00044 	movi	r19,1
8001ae44:	05400044 	movi	r21,1
8001ae48:	ddc00d04 	addi	r23,sp,52
8001ae4c:	00005f06 	br	8001afcc <___svfiprintf_internal_r+0x5e0>
8001ae50:	39c02014 	ori	r7,r7,128
8001ae54:	e0800007 	ldb	r2,0(fp)
8001ae58:	003f2406 	br	8001aaec <_gp+0xfffe9d78>
8001ae5c:	e0800007 	ldb	r2,0(fp)
8001ae60:	e1000044 	addi	r4,fp,1
8001ae64:	10c00aa0 	cmpeqi	r3,r2,42
8001ae68:	1802cc1e 	bne	r3,zero,8001b99c <___svfiprintf_internal_r+0xfb0>
8001ae6c:	10fff404 	addi	r3,r2,-48
8001ae70:	1a4002b0 	cmpltui	r9,r3,10
8001ae74:	4802b926 	beq	r9,zero,8001b95c <___svfiprintf_internal_r+0xf70>
8001ae78:	0013883a 	mov	r9,zero
8001ae7c:	21000044 	addi	r4,r4,1
8001ae80:	4a4002a4 	muli	r9,r9,10
8001ae84:	20bfffc7 	ldb	r2,-1(r4)
8001ae88:	48d3883a 	add	r9,r9,r3
8001ae8c:	10fff404 	addi	r3,r2,-48
8001ae90:	1a8002b0 	cmpltui	r10,r3,10
8001ae94:	503ff91e 	bne	r10,zero,8001ae7c <_gp+0xfffea108>
8001ae98:	2039883a 	mov	fp,r4
8001ae9c:	003f1406 	br	8001aaf0 <_gp+0xfffe9d7c>
8001aea0:	e0800003 	ldbu	r2,0(fp)
8001aea4:	10803fcc 	andi	r2,r2,255
8001aea8:	1080201c 	xori	r2,r2,128
8001aeac:	39c00114 	ori	r7,r7,4
8001aeb0:	10bfe004 	addi	r2,r2,-128
8001aeb4:	003f0d06 	br	8001aaec <_gp+0xfffe9d78>
8001aeb8:	01400044 	movi	r5,1
8001aebc:	01800ac4 	movi	r6,43
8001aec0:	e0800007 	ldb	r2,0(fp)
8001aec4:	003f0906 	br	8001aaec <_gp+0xfffe9d78>
8001aec8:	d8800417 	ldw	r2,16(sp)
8001aecc:	14000017 	ldw	r16,0(r2)
8001aed0:	15c00104 	addi	r23,r2,4
8001aed4:	e0800003 	ldbu	r2,0(fp)
8001aed8:	80024816 	blt	r16,zero,8001b7fc <___svfiprintf_internal_r+0xe10>
8001aedc:	ddc00415 	stw	r23,16(sp)
8001aee0:	10803fcc 	andi	r2,r2,255
8001aee4:	1080201c 	xori	r2,r2,128
8001aee8:	10bfe004 	addi	r2,r2,-128
8001aeec:	003eff06 	br	8001aaec <_gp+0xfffe9d78>
8001aef0:	39c00054 	ori	r7,r7,1
8001aef4:	e0800007 	ldb	r2,0(fp)
8001aef8:	003efc06 	br	8001aaec <_gp+0xfffe9d78>
8001aefc:	30c03fcc 	andi	r3,r6,255
8001af00:	18c0201c 	xori	r3,r3,128
8001af04:	18ffe004 	addi	r3,r3,-128
8001af08:	e0800003 	ldbu	r2,0(fp)
8001af0c:	183ff41e 	bne	r3,zero,8001aee0 <_gp+0xfffea16c>
8001af10:	10803fcc 	andi	r2,r2,255
8001af14:	1080201c 	xori	r2,r2,128
8001af18:	01400044 	movi	r5,1
8001af1c:	01800804 	movi	r6,32
8001af20:	10bfe004 	addi	r2,r2,-128
8001af24:	003ef106 	br	8001aaec <_gp+0xfffe9d78>
8001af28:	d8c00417 	ldw	r3,16(sp)
8001af2c:	3880040c 	andi	r2,r7,16
8001af30:	1cc00017 	ldw	r19,0(r3)
8001af34:	18c00104 	addi	r3,r3,4
8001af38:	d8c00415 	stw	r3,16(sp)
8001af3c:	1000031e 	bne	r2,zero,8001af4c <___svfiprintf_internal_r+0x560>
8001af40:	3880100c 	andi	r2,r7,64
8001af44:	10000126 	beq	r2,zero,8001af4c <___svfiprintf_internal_r+0x560>
8001af48:	9cffffcc 	andi	r19,r19,65535
8001af4c:	002b883a 	mov	r21,zero
8001af50:	0005883a 	mov	r2,zero
8001af54:	003f7c06 	br	8001ad48 <_gp+0xfffe9fd4>
8001af58:	e0800007 	ldb	r2,0(fp)
8001af5c:	10c01b18 	cmpnei	r3,r2,108
8001af60:	18022926 	beq	r3,zero,8001b808 <___svfiprintf_internal_r+0xe1c>
8001af64:	39c00414 	ori	r7,r7,16
8001af68:	003ee006 	br	8001aaec <_gp+0xfffe9d78>
8001af6c:	29403fcc 	andi	r5,r5,255
8001af70:	2802981e 	bne	r5,zero,8001b9d4 <___svfiprintf_internal_r+0xfe8>
8001af74:	3880080c 	andi	r2,r7,32
8001af78:	10015226 	beq	r2,zero,8001b4c4 <___svfiprintf_internal_r+0xad8>
8001af7c:	d8800417 	ldw	r2,16(sp)
8001af80:	14c00017 	ldw	r19,0(r2)
8001af84:	15400117 	ldw	r21,4(r2)
8001af88:	10800204 	addi	r2,r2,8
8001af8c:	d8800415 	stw	r2,16(sp)
8001af90:	a8015916 	blt	r21,zero,8001b4f8 <___svfiprintf_internal_r+0xb0c>
8001af94:	48bfffd8 	cmpnei	r2,r9,-1
8001af98:	db000943 	ldbu	r12,37(sp)
8001af9c:	10015f26 	beq	r2,zero,8001b51c <___svfiprintf_internal_r+0xb30>
8001afa0:	00800044 	movi	r2,1
8001afa4:	003f6c06 	br	8001ad58 <_gp+0xfffe9fe4>
8001afa8:	d8c00417 	ldw	r3,16(sp)
8001afac:	d8000945 	stb	zero,37(sp)
8001afb0:	04c00044 	movi	r19,1
8001afb4:	18800017 	ldw	r2,0(r3)
8001afb8:	18c00104 	addi	r3,r3,4
8001afbc:	d8c00415 	stw	r3,16(sp)
8001afc0:	d8800d05 	stb	r2,52(sp)
8001afc4:	05400044 	movi	r21,1
8001afc8:	ddc00d04 	addi	r23,sp,52
8001afcc:	3823883a 	mov	r17,r7
8001afd0:	0013883a 	mov	r9,zero
8001afd4:	8b40008c 	andi	r13,r17,2
8001afd8:	68000126 	beq	r13,zero,8001afe0 <___svfiprintf_internal_r+0x5f4>
8001afdc:	9cc00084 	addi	r19,r19,2
8001afe0:	8b00210c 	andi	r12,r17,132
8001afe4:	d8800c17 	ldw	r2,48(sp)
8001afe8:	d9000b17 	ldw	r4,44(sp)
8001afec:	6000341e 	bne	r12,zero,8001b0c0 <___svfiprintf_internal_r+0x6d4>
8001aff0:	84c7c83a 	sub	r3,r16,r19
8001aff4:	00c0320e 	bge	zero,r3,8001b0c0 <___svfiprintf_internal_r+0x6d4>
8001aff8:	01e000b4 	movhi	r7,32770
8001affc:	19400450 	cmplti	r5,r3,17
8001b000:	39dbde04 	addi	r7,r7,28536
8001b004:	03800404 	movi	r14,16
8001b008:	28000526 	beq	r5,zero,8001b020 <___svfiprintf_internal_r+0x634>
8001b00c:	00002306 	br	8001b09c <___svfiprintf_internal_r+0x6b0>
8001b010:	18fffc04 	addi	r3,r3,-16
8001b014:	19400448 	cmpgei	r5,r3,17
8001b018:	42000204 	addi	r8,r8,8
8001b01c:	28001f26 	beq	r5,zero,8001b09c <___svfiprintf_internal_r+0x6b0>
8001b020:	21000044 	addi	r4,r4,1
8001b024:	10800404 	addi	r2,r2,16
8001b028:	41c00015 	stw	r7,0(r8)
8001b02c:	43800115 	stw	r14,4(r8)
8001b030:	d8800c15 	stw	r2,48(sp)
8001b034:	d9000b15 	stw	r4,44(sp)
8001b038:	21400208 	cmpgei	r5,r4,8
8001b03c:	283ff426 	beq	r5,zero,8001b010 <_gp+0xfffea29c>
8001b040:	d9800a04 	addi	r6,sp,40
8001b044:	a00b883a 	mov	r5,r20
8001b048:	b009883a 	mov	r4,r22
8001b04c:	d9c00815 	stw	r7,32(sp)
8001b050:	db800715 	stw	r14,28(sp)
8001b054:	d8c00615 	stw	r3,24(sp)
8001b058:	da400315 	stw	r9,12(sp)
8001b05c:	db000215 	stw	r12,8(sp)
8001b060:	db400115 	stw	r13,4(sp)
8001b064:	001a82c0 	call	8001a82c <__ssprint_r>
8001b068:	103f541e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b06c:	d8c00617 	ldw	r3,24(sp)
8001b070:	d8800c17 	ldw	r2,48(sp)
8001b074:	d9000b17 	ldw	r4,44(sp)
8001b078:	18fffc04 	addi	r3,r3,-16
8001b07c:	19400448 	cmpgei	r5,r3,17
8001b080:	9011883a 	mov	r8,r18
8001b084:	d9c00817 	ldw	r7,32(sp)
8001b088:	db800717 	ldw	r14,28(sp)
8001b08c:	da400317 	ldw	r9,12(sp)
8001b090:	db000217 	ldw	r12,8(sp)
8001b094:	db400117 	ldw	r13,4(sp)
8001b098:	283fe11e 	bne	r5,zero,8001b020 <_gp+0xfffea2ac>
8001b09c:	21000044 	addi	r4,r4,1
8001b0a0:	10c5883a 	add	r2,r2,r3
8001b0a4:	40c00115 	stw	r3,4(r8)
8001b0a8:	41c00015 	stw	r7,0(r8)
8001b0ac:	d8800c15 	stw	r2,48(sp)
8001b0b0:	d9000b15 	stw	r4,44(sp)
8001b0b4:	20c00208 	cmpgei	r3,r4,8
8001b0b8:	1801ac1e 	bne	r3,zero,8001b76c <___svfiprintf_internal_r+0xd80>
8001b0bc:	42000204 	addi	r8,r8,8
8001b0c0:	d9800947 	ldb	r6,37(sp)
8001b0c4:	21400044 	addi	r5,r4,1
8001b0c8:	40c00204 	addi	r3,r8,8
8001b0cc:	30000f26 	beq	r6,zero,8001b10c <___svfiprintf_internal_r+0x720>
8001b0d0:	d9800944 	addi	r6,sp,37
8001b0d4:	10800044 	addi	r2,r2,1
8001b0d8:	41800015 	stw	r6,0(r8)
8001b0dc:	01800044 	movi	r6,1
8001b0e0:	41800115 	stw	r6,4(r8)
8001b0e4:	d8800c15 	stw	r2,48(sp)
8001b0e8:	d9400b15 	stw	r5,44(sp)
8001b0ec:	29800208 	cmpgei	r6,r5,8
8001b0f0:	30016c1e 	bne	r6,zero,8001b6a4 <___svfiprintf_internal_r+0xcb8>
8001b0f4:	21c00084 	addi	r7,r4,2
8001b0f8:	41800404 	addi	r6,r8,16
8001b0fc:	2809883a 	mov	r4,r5
8001b100:	1811883a 	mov	r8,r3
8001b104:	380b883a 	mov	r5,r7
8001b108:	3007883a 	mov	r3,r6
8001b10c:	68000d26 	beq	r13,zero,8001b144 <___svfiprintf_internal_r+0x758>
8001b110:	d9000984 	addi	r4,sp,38
8001b114:	10800084 	addi	r2,r2,2
8001b118:	41000015 	stw	r4,0(r8)
8001b11c:	01000084 	movi	r4,2
8001b120:	41000115 	stw	r4,4(r8)
8001b124:	d8800c15 	stw	r2,48(sp)
8001b128:	d9400b15 	stw	r5,44(sp)
8001b12c:	29000208 	cmpgei	r4,r5,8
8001b130:	20016d1e 	bne	r4,zero,8001b6e8 <___svfiprintf_internal_r+0xcfc>
8001b134:	2809883a 	mov	r4,r5
8001b138:	1811883a 	mov	r8,r3
8001b13c:	29400044 	addi	r5,r5,1
8001b140:	18c00204 	addi	r3,r3,8
8001b144:	63002018 	cmpnei	r12,r12,128
8001b148:	60011426 	beq	r12,zero,8001b59c <___svfiprintf_internal_r+0xbb0>
8001b14c:	4d53c83a 	sub	r9,r9,r21
8001b150:	02402f0e 	bge	zero,r9,8001b210 <___svfiprintf_internal_r+0x824>
8001b154:	49800450 	cmplti	r6,r9,17
8001b158:	01e000b4 	movhi	r7,32770
8001b15c:	3001f21e 	bne	r6,zero,8001b928 <___svfiprintf_internal_r+0xf3c>
8001b160:	39dbda04 	addi	r7,r7,28520
8001b164:	03000404 	movi	r12,16
8001b168:	00000406 	br	8001b17c <___svfiprintf_internal_r+0x790>
8001b16c:	4a7ffc04 	addi	r9,r9,-16
8001b170:	48c00448 	cmpgei	r3,r9,17
8001b174:	42000204 	addi	r8,r8,8
8001b178:	18001926 	beq	r3,zero,8001b1e0 <___svfiprintf_internal_r+0x7f4>
8001b17c:	21000044 	addi	r4,r4,1
8001b180:	10800404 	addi	r2,r2,16
8001b184:	41c00015 	stw	r7,0(r8)
8001b188:	43000115 	stw	r12,4(r8)
8001b18c:	d8800c15 	stw	r2,48(sp)
8001b190:	d9000b15 	stw	r4,44(sp)
8001b194:	20c00208 	cmpgei	r3,r4,8
8001b198:	183ff426 	beq	r3,zero,8001b16c <_gp+0xfffea3f8>
8001b19c:	d9800a04 	addi	r6,sp,40
8001b1a0:	a00b883a 	mov	r5,r20
8001b1a4:	b009883a 	mov	r4,r22
8001b1a8:	d9c00315 	stw	r7,12(sp)
8001b1ac:	db000215 	stw	r12,8(sp)
8001b1b0:	da400115 	stw	r9,4(sp)
8001b1b4:	001a82c0 	call	8001a82c <__ssprint_r>
8001b1b8:	103f001e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b1bc:	da400117 	ldw	r9,4(sp)
8001b1c0:	d8800c17 	ldw	r2,48(sp)
8001b1c4:	d9000b17 	ldw	r4,44(sp)
8001b1c8:	4a7ffc04 	addi	r9,r9,-16
8001b1cc:	48c00448 	cmpgei	r3,r9,17
8001b1d0:	9011883a 	mov	r8,r18
8001b1d4:	d9c00317 	ldw	r7,12(sp)
8001b1d8:	db000217 	ldw	r12,8(sp)
8001b1dc:	183fe71e 	bne	r3,zero,8001b17c <_gp+0xfffea408>
8001b1e0:	21400044 	addi	r5,r4,1
8001b1e4:	41000204 	addi	r4,r8,8
8001b1e8:	1245883a 	add	r2,r2,r9
8001b1ec:	41c00015 	stw	r7,0(r8)
8001b1f0:	42400115 	stw	r9,4(r8)
8001b1f4:	d8800c15 	stw	r2,48(sp)
8001b1f8:	d9400b15 	stw	r5,44(sp)
8001b1fc:	28c00208 	cmpgei	r3,r5,8
8001b200:	1801481e 	bne	r3,zero,8001b724 <___svfiprintf_internal_r+0xd38>
8001b204:	29400044 	addi	r5,r5,1
8001b208:	20c00204 	addi	r3,r4,8
8001b20c:	2011883a 	mov	r8,r4
8001b210:	a885883a 	add	r2,r21,r2
8001b214:	45c00015 	stw	r23,0(r8)
8001b218:	45400115 	stw	r21,4(r8)
8001b21c:	d8800c15 	stw	r2,48(sp)
8001b220:	d9400b15 	stw	r5,44(sp)
8001b224:	29000210 	cmplti	r4,r5,8
8001b228:	20011026 	beq	r4,zero,8001b66c <___svfiprintf_internal_r+0xc80>
8001b22c:	8c40010c 	andi	r17,r17,4
8001b230:	88002a26 	beq	r17,zero,8001b2dc <___svfiprintf_internal_r+0x8f0>
8001b234:	84e3c83a 	sub	r17,r16,r19
8001b238:	0440280e 	bge	zero,r17,8001b2dc <___svfiprintf_internal_r+0x8f0>
8001b23c:	01e000b4 	movhi	r7,32770
8001b240:	89400450 	cmplti	r5,r17,17
8001b244:	39dbde04 	addi	r7,r7,28536
8001b248:	d9000b17 	ldw	r4,44(sp)
8001b24c:	05400404 	movi	r21,16
8001b250:	28000526 	beq	r5,zero,8001b268 <___svfiprintf_internal_r+0x87c>
8001b254:	00001906 	br	8001b2bc <___svfiprintf_internal_r+0x8d0>
8001b258:	8c7ffc04 	addi	r17,r17,-16
8001b25c:	89400448 	cmpgei	r5,r17,17
8001b260:	18c00204 	addi	r3,r3,8
8001b264:	28001526 	beq	r5,zero,8001b2bc <___svfiprintf_internal_r+0x8d0>
8001b268:	21000044 	addi	r4,r4,1
8001b26c:	10800404 	addi	r2,r2,16
8001b270:	19c00015 	stw	r7,0(r3)
8001b274:	1d400115 	stw	r21,4(r3)
8001b278:	d8800c15 	stw	r2,48(sp)
8001b27c:	d9000b15 	stw	r4,44(sp)
8001b280:	21400208 	cmpgei	r5,r4,8
8001b284:	283ff426 	beq	r5,zero,8001b258 <_gp+0xfffea4e4>
8001b288:	d9800a04 	addi	r6,sp,40
8001b28c:	a00b883a 	mov	r5,r20
8001b290:	b009883a 	mov	r4,r22
8001b294:	d9c00115 	stw	r7,4(sp)
8001b298:	001a82c0 	call	8001a82c <__ssprint_r>
8001b29c:	103ec71e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b2a0:	8c7ffc04 	addi	r17,r17,-16
8001b2a4:	89400448 	cmpgei	r5,r17,17
8001b2a8:	d8800c17 	ldw	r2,48(sp)
8001b2ac:	d9000b17 	ldw	r4,44(sp)
8001b2b0:	9007883a 	mov	r3,r18
8001b2b4:	d9c00117 	ldw	r7,4(sp)
8001b2b8:	283feb1e 	bne	r5,zero,8001b268 <_gp+0xfffea4f4>
8001b2bc:	21000044 	addi	r4,r4,1
8001b2c0:	1445883a 	add	r2,r2,r17
8001b2c4:	d9000b15 	stw	r4,44(sp)
8001b2c8:	19c00015 	stw	r7,0(r3)
8001b2cc:	1c400115 	stw	r17,4(r3)
8001b2d0:	d8800c15 	stw	r2,48(sp)
8001b2d4:	21000210 	cmplti	r4,r4,8
8001b2d8:	20013326 	beq	r4,zero,8001b7a8 <___svfiprintf_internal_r+0xdbc>
8001b2dc:	84c0010e 	bge	r16,r19,8001b2e4 <___svfiprintf_internal_r+0x8f8>
8001b2e0:	9821883a 	mov	r16,r19
8001b2e4:	d8c00017 	ldw	r3,0(sp)
8001b2e8:	1c07883a 	add	r3,r3,r16
8001b2ec:	d8c00015 	stw	r3,0(sp)
8001b2f0:	1000e61e 	bne	r2,zero,8001b68c <___svfiprintf_internal_r+0xca0>
8001b2f4:	d8000b15 	stw	zero,44(sp)
8001b2f8:	9011883a 	mov	r8,r18
8001b2fc:	003dd606 	br	8001aa58 <_gp+0xfffe9ce4>
8001b300:	d8800417 	ldw	r2,16(sp)
8001b304:	d8000945 	stb	zero,37(sp)
8001b308:	15c00017 	ldw	r23,0(r2)
8001b30c:	14400104 	addi	r17,r2,4
8001b310:	b8018826 	beq	r23,zero,8001b934 <___svfiprintf_internal_r+0xf48>
8001b314:	48bfffe0 	cmpeqi	r2,r9,-1
8001b318:	10014a1e 	bne	r2,zero,8001b844 <___svfiprintf_internal_r+0xe58>
8001b31c:	480d883a 	mov	r6,r9
8001b320:	000b883a 	mov	r5,zero
8001b324:	b809883a 	mov	r4,r23
8001b328:	da000315 	stw	r8,12(sp)
8001b32c:	d9c00215 	stw	r7,8(sp)
8001b330:	da400115 	stw	r9,4(sp)
8001b334:	00187d80 	call	800187d8 <memchr>
8001b338:	da400117 	ldw	r9,4(sp)
8001b33c:	d9c00217 	ldw	r7,8(sp)
8001b340:	da000317 	ldw	r8,12(sp)
8001b344:	10018c26 	beq	r2,zero,8001b978 <___svfiprintf_internal_r+0xf8c>
8001b348:	dc400415 	stw	r17,16(sp)
8001b34c:	15ebc83a 	sub	r21,r2,r23
8001b350:	db000943 	ldbu	r12,37(sp)
8001b354:	3823883a 	mov	r17,r7
8001b358:	0013883a 	mov	r9,zero
8001b35c:	00008606 	br	8001b578 <___svfiprintf_internal_r+0xb8c>
8001b360:	39c00814 	ori	r7,r7,32
8001b364:	e0800007 	ldb	r2,0(fp)
8001b368:	003de006 	br	8001aaec <_gp+0xfffe9d78>
8001b36c:	d8c00417 	ldw	r3,16(sp)
8001b370:	00800c04 	movi	r2,48
8001b374:	d8800985 	stb	r2,38(sp)
8001b378:	00801e04 	movi	r2,120
8001b37c:	012000b4 	movhi	r4,32770
8001b380:	d88009c5 	stb	r2,39(sp)
8001b384:	18800104 	addi	r2,r3,4
8001b388:	d8800415 	stw	r2,16(sp)
8001b38c:	209aa804 	addi	r2,r4,27296
8001b390:	d8800515 	stw	r2,20(sp)
8001b394:	1cc00017 	ldw	r19,0(r3)
8001b398:	002b883a 	mov	r21,zero
8001b39c:	39c00094 	ori	r7,r7,2
8001b3a0:	00800084 	movi	r2,2
8001b3a4:	003e6806 	br	8001ad48 <_gp+0xfffe9fd4>
8001b3a8:	29403fcc 	andi	r5,r5,255
8001b3ac:	2801941e 	bne	r5,zero,8001ba00 <___svfiprintf_internal_r+0x1014>
8001b3b0:	d8c00417 	ldw	r3,16(sp)
8001b3b4:	3880080c 	andi	r2,r7,32
8001b3b8:	19000104 	addi	r4,r3,4
8001b3bc:	18c00017 	ldw	r3,0(r3)
8001b3c0:	1001081e 	bne	r2,zero,8001b7e4 <___svfiprintf_internal_r+0xdf8>
8001b3c4:	3880040c 	andi	r2,r7,16
8001b3c8:	1001431e 	bne	r2,zero,8001b8d8 <___svfiprintf_internal_r+0xeec>
8001b3cc:	39c0100c 	andi	r7,r7,64
8001b3d0:	38014126 	beq	r7,zero,8001b8d8 <___svfiprintf_internal_r+0xeec>
8001b3d4:	d8800017 	ldw	r2,0(sp)
8001b3d8:	d9000415 	stw	r4,16(sp)
8001b3dc:	1880000d 	sth	r2,0(r3)
8001b3e0:	003d9d06 	br	8001aa58 <_gp+0xfffe9ce4>
8001b3e4:	29403fcc 	andi	r5,r5,255
8001b3e8:	2801871e 	bne	r5,zero,8001ba08 <___svfiprintf_internal_r+0x101c>
8001b3ec:	00e000b4 	movhi	r3,32770
8001b3f0:	18daa804 	addi	r3,r3,27296
8001b3f4:	d8c00515 	stw	r3,20(sp)
8001b3f8:	38c0080c 	andi	r3,r7,32
8001b3fc:	18001e26 	beq	r3,zero,8001b478 <___svfiprintf_internal_r+0xa8c>
8001b400:	d8c00417 	ldw	r3,16(sp)
8001b404:	1cc00017 	ldw	r19,0(r3)
8001b408:	1d400117 	ldw	r21,4(r3)
8001b40c:	18c00204 	addi	r3,r3,8
8001b410:	d8c00415 	stw	r3,16(sp)
8001b414:	38c0004c 	andi	r3,r7,1
8001b418:	18000226 	beq	r3,zero,8001b424 <___svfiprintf_internal_r+0xa38>
8001b41c:	9d46b03a 	or	r3,r19,r21
8001b420:	1800ea1e 	bne	r3,zero,8001b7cc <___svfiprintf_internal_r+0xde0>
8001b424:	00800084 	movi	r2,2
8001b428:	003e4706 	br	8001ad48 <_gp+0xfffe9fd4>
8001b42c:	d8c00417 	ldw	r3,16(sp)
8001b430:	3880040c 	andi	r2,r7,16
8001b434:	1cc00017 	ldw	r19,0(r3)
8001b438:	18c00104 	addi	r3,r3,4
8001b43c:	d8c00415 	stw	r3,16(sp)
8001b440:	1000031e 	bne	r2,zero,8001b450 <___svfiprintf_internal_r+0xa64>
8001b444:	3880100c 	andi	r2,r7,64
8001b448:	10000126 	beq	r2,zero,8001b450 <___svfiprintf_internal_r+0xa64>
8001b44c:	9cffffcc 	andi	r19,r19,65535
8001b450:	002b883a 	mov	r21,zero
8001b454:	00800044 	movi	r2,1
8001b458:	003e3b06 	br	8001ad48 <_gp+0xfffe9fd4>
8001b45c:	29403fcc 	andi	r5,r5,255
8001b460:	28015e1e 	bne	r5,zero,8001b9dc <___svfiprintf_internal_r+0xff0>
8001b464:	00e000b4 	movhi	r3,32770
8001b468:	18daa304 	addi	r3,r3,27276
8001b46c:	d8c00515 	stw	r3,20(sp)
8001b470:	38c0080c 	andi	r3,r7,32
8001b474:	183fe21e 	bne	r3,zero,8001b400 <_gp+0xfffea68c>
8001b478:	d9000417 	ldw	r4,16(sp)
8001b47c:	38c0040c 	andi	r3,r7,16
8001b480:	24c00017 	ldw	r19,0(r4)
8001b484:	21000104 	addi	r4,r4,4
8001b488:	d9000415 	stw	r4,16(sp)
8001b48c:	1800b31e 	bne	r3,zero,8001b75c <___svfiprintf_internal_r+0xd70>
8001b490:	38c0100c 	andi	r3,r7,64
8001b494:	1800b126 	beq	r3,zero,8001b75c <___svfiprintf_internal_r+0xd70>
8001b498:	9cffffcc 	andi	r19,r19,65535
8001b49c:	002b883a 	mov	r21,zero
8001b4a0:	003fdc06 	br	8001b414 <_gp+0xfffea6a0>
8001b4a4:	39c01014 	ori	r7,r7,64
8001b4a8:	e0800007 	ldb	r2,0(fp)
8001b4ac:	003d8f06 	br	8001aaec <_gp+0xfffe9d78>
8001b4b0:	29403fcc 	andi	r5,r5,255
8001b4b4:	2801451e 	bne	r5,zero,8001b9cc <___svfiprintf_internal_r+0xfe0>
8001b4b8:	39c00414 	ori	r7,r7,16
8001b4bc:	3880080c 	andi	r2,r7,32
8001b4c0:	103eae1e 	bne	r2,zero,8001af7c <_gp+0xfffea208>
8001b4c4:	d8c00417 	ldw	r3,16(sp)
8001b4c8:	3880040c 	andi	r2,r7,16
8001b4cc:	1cc00017 	ldw	r19,0(r3)
8001b4d0:	18c00104 	addi	r3,r3,4
8001b4d4:	d8c00415 	stw	r3,16(sp)
8001b4d8:	1000a21e 	bne	r2,zero,8001b764 <___svfiprintf_internal_r+0xd78>
8001b4dc:	3880100c 	andi	r2,r7,64
8001b4e0:	1000a026 	beq	r2,zero,8001b764 <___svfiprintf_internal_r+0xd78>
8001b4e4:	9cffffcc 	andi	r19,r19,65535
8001b4e8:	9ce0001c 	xori	r19,r19,32768
8001b4ec:	9ce00004 	addi	r19,r19,-32768
8001b4f0:	982bd7fa 	srai	r21,r19,31
8001b4f4:	a83ea70e 	bge	r21,zero,8001af94 <_gp+0xfffea220>
8001b4f8:	04e7c83a 	sub	r19,zero,r19
8001b4fc:	9804c03a 	cmpne	r2,r19,zero
8001b500:	056bc83a 	sub	r21,zero,r21
8001b504:	a8abc83a 	sub	r21,r21,r2
8001b508:	00800b44 	movi	r2,45
8001b50c:	d8800945 	stb	r2,37(sp)
8001b510:	48bfffd8 	cmpnei	r2,r9,-1
8001b514:	03000b44 	movi	r12,45
8001b518:	103ea11e 	bne	r2,zero,8001afa0 <_gp+0xfffea22c>
8001b51c:	3823883a 	mov	r17,r7
8001b520:	a800d41e 	bne	r21,zero,8001b874 <___svfiprintf_internal_r+0xe88>
8001b524:	988002a8 	cmpgeui	r2,r19,10
8001b528:	1000d21e 	bne	r2,zero,8001b874 <___svfiprintf_internal_r+0xe88>
8001b52c:	9cc00c04 	addi	r19,r19,48
8001b530:	dcc016c5 	stb	r19,91(sp)
8001b534:	05400044 	movi	r21,1
8001b538:	ddc016c4 	addi	r23,sp,91
8001b53c:	00000e06 	br	8001b578 <___svfiprintf_internal_r+0xb8c>
8001b540:	902f883a 	mov	r23,r18
8001b544:	d9000517 	ldw	r4,20(sp)
8001b548:	988003cc 	andi	r2,r19,15
8001b54c:	a806973a 	slli	r3,r21,28
8001b550:	2085883a 	add	r2,r4,r2
8001b554:	9826d13a 	srli	r19,r19,4
8001b558:	10800003 	ldbu	r2,0(r2)
8001b55c:	a82ad13a 	srli	r21,r21,4
8001b560:	bdffffc4 	addi	r23,r23,-1
8001b564:	1ce6b03a 	or	r19,r3,r19
8001b568:	b8800005 	stb	r2,0(r23)
8001b56c:	9d44b03a 	or	r2,r19,r21
8001b570:	103ff41e 	bne	r2,zero,8001b544 <_gp+0xfffea7d0>
8001b574:	95ebc83a 	sub	r21,r18,r23
8001b578:	4827883a 	mov	r19,r9
8001b57c:	4d40010e 	bge	r9,r21,8001b584 <___svfiprintf_internal_r+0xb98>
8001b580:	a827883a 	mov	r19,r21
8001b584:	63003fcc 	andi	r12,r12,255
8001b588:	6300201c 	xori	r12,r12,128
8001b58c:	633fe004 	addi	r12,r12,-128
8001b590:	603e9026 	beq	r12,zero,8001afd4 <_gp+0xfffea260>
8001b594:	9cc00044 	addi	r19,r19,1
8001b598:	003e8e06 	br	8001afd4 <_gp+0xfffea260>
8001b59c:	84d9c83a 	sub	r12,r16,r19
8001b5a0:	033eea0e 	bge	zero,r12,8001b14c <_gp+0xfffea3d8>
8001b5a4:	61800450 	cmplti	r6,r12,17
8001b5a8:	01e000b4 	movhi	r7,32770
8001b5ac:	3000ee1e 	bne	r6,zero,8001b968 <___svfiprintf_internal_r+0xf7c>
8001b5b0:	39dbda04 	addi	r7,r7,28520
8001b5b4:	03400404 	movi	r13,16
8001b5b8:	00000406 	br	8001b5cc <___svfiprintf_internal_r+0xbe0>
8001b5bc:	633ffc04 	addi	r12,r12,-16
8001b5c0:	60c00448 	cmpgei	r3,r12,17
8001b5c4:	42000204 	addi	r8,r8,8
8001b5c8:	18001b26 	beq	r3,zero,8001b638 <___svfiprintf_internal_r+0xc4c>
8001b5cc:	21000044 	addi	r4,r4,1
8001b5d0:	10800404 	addi	r2,r2,16
8001b5d4:	41c00015 	stw	r7,0(r8)
8001b5d8:	43400115 	stw	r13,4(r8)
8001b5dc:	d8800c15 	stw	r2,48(sp)
8001b5e0:	d9000b15 	stw	r4,44(sp)
8001b5e4:	20c00208 	cmpgei	r3,r4,8
8001b5e8:	183ff426 	beq	r3,zero,8001b5bc <_gp+0xfffea848>
8001b5ec:	d9800a04 	addi	r6,sp,40
8001b5f0:	a00b883a 	mov	r5,r20
8001b5f4:	b009883a 	mov	r4,r22
8001b5f8:	d9c00615 	stw	r7,24(sp)
8001b5fc:	db400315 	stw	r13,12(sp)
8001b600:	db000215 	stw	r12,8(sp)
8001b604:	da400115 	stw	r9,4(sp)
8001b608:	001a82c0 	call	8001a82c <__ssprint_r>
8001b60c:	103deb1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b610:	db000217 	ldw	r12,8(sp)
8001b614:	d8800c17 	ldw	r2,48(sp)
8001b618:	d9000b17 	ldw	r4,44(sp)
8001b61c:	633ffc04 	addi	r12,r12,-16
8001b620:	60c00448 	cmpgei	r3,r12,17
8001b624:	9011883a 	mov	r8,r18
8001b628:	d9c00617 	ldw	r7,24(sp)
8001b62c:	db400317 	ldw	r13,12(sp)
8001b630:	da400117 	ldw	r9,4(sp)
8001b634:	183fe51e 	bne	r3,zero,8001b5cc <_gp+0xfffea858>
8001b638:	21000044 	addi	r4,r4,1
8001b63c:	41800204 	addi	r6,r8,8
8001b640:	1305883a 	add	r2,r2,r12
8001b644:	41c00015 	stw	r7,0(r8)
8001b648:	43000115 	stw	r12,4(r8)
8001b64c:	d8800c15 	stw	r2,48(sp)
8001b650:	d9000b15 	stw	r4,44(sp)
8001b654:	20c00208 	cmpgei	r3,r4,8
8001b658:	1800a61e 	bne	r3,zero,8001b8f4 <___svfiprintf_internal_r+0xf08>
8001b65c:	21400044 	addi	r5,r4,1
8001b660:	30c00204 	addi	r3,r6,8
8001b664:	3011883a 	mov	r8,r6
8001b668:	003eb806 	br	8001b14c <_gp+0xfffea3d8>
8001b66c:	d9800a04 	addi	r6,sp,40
8001b670:	a00b883a 	mov	r5,r20
8001b674:	b009883a 	mov	r4,r22
8001b678:	001a82c0 	call	8001a82c <__ssprint_r>
8001b67c:	103dcf1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b680:	d8800c17 	ldw	r2,48(sp)
8001b684:	9007883a 	mov	r3,r18
8001b688:	003ee806 	br	8001b22c <_gp+0xfffea4b8>
8001b68c:	d9800a04 	addi	r6,sp,40
8001b690:	a00b883a 	mov	r5,r20
8001b694:	b009883a 	mov	r4,r22
8001b698:	001a82c0 	call	8001a82c <__ssprint_r>
8001b69c:	103f1526 	beq	r2,zero,8001b2f4 <_gp+0xfffea580>
8001b6a0:	003dc606 	br	8001adbc <_gp+0xfffea048>
8001b6a4:	d9800a04 	addi	r6,sp,40
8001b6a8:	a00b883a 	mov	r5,r20
8001b6ac:	b009883a 	mov	r4,r22
8001b6b0:	da400315 	stw	r9,12(sp)
8001b6b4:	db000215 	stw	r12,8(sp)
8001b6b8:	db400115 	stw	r13,4(sp)
8001b6bc:	001a82c0 	call	8001a82c <__ssprint_r>
8001b6c0:	103dbe1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b6c4:	d9000b17 	ldw	r4,44(sp)
8001b6c8:	d8800c17 	ldw	r2,48(sp)
8001b6cc:	d8c01904 	addi	r3,sp,100
8001b6d0:	21400044 	addi	r5,r4,1
8001b6d4:	9011883a 	mov	r8,r18
8001b6d8:	da400317 	ldw	r9,12(sp)
8001b6dc:	db000217 	ldw	r12,8(sp)
8001b6e0:	db400117 	ldw	r13,4(sp)
8001b6e4:	003e8906 	br	8001b10c <_gp+0xfffea398>
8001b6e8:	d9800a04 	addi	r6,sp,40
8001b6ec:	a00b883a 	mov	r5,r20
8001b6f0:	b009883a 	mov	r4,r22
8001b6f4:	da400215 	stw	r9,8(sp)
8001b6f8:	db000115 	stw	r12,4(sp)
8001b6fc:	001a82c0 	call	8001a82c <__ssprint_r>
8001b700:	103dae1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b704:	d9000b17 	ldw	r4,44(sp)
8001b708:	d8800c17 	ldw	r2,48(sp)
8001b70c:	d8c01904 	addi	r3,sp,100
8001b710:	21400044 	addi	r5,r4,1
8001b714:	9011883a 	mov	r8,r18
8001b718:	da400217 	ldw	r9,8(sp)
8001b71c:	db000117 	ldw	r12,4(sp)
8001b720:	003e8806 	br	8001b144 <_gp+0xfffea3d0>
8001b724:	d9800a04 	addi	r6,sp,40
8001b728:	a00b883a 	mov	r5,r20
8001b72c:	b009883a 	mov	r4,r22
8001b730:	001a82c0 	call	8001a82c <__ssprint_r>
8001b734:	103da11e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b738:	d9000b17 	ldw	r4,44(sp)
8001b73c:	d8800c17 	ldw	r2,48(sp)
8001b740:	d8c01904 	addi	r3,sp,100
8001b744:	21400044 	addi	r5,r4,1
8001b748:	9011883a 	mov	r8,r18
8001b74c:	003eb006 	br	8001b210 <_gp+0xfffea49c>
8001b750:	002b883a 	mov	r21,zero
8001b754:	902f883a 	mov	r23,r18
8001b758:	003f8706 	br	8001b578 <_gp+0xfffea804>
8001b75c:	002b883a 	mov	r21,zero
8001b760:	003f2c06 	br	8001b414 <_gp+0xfffea6a0>
8001b764:	982bd7fa 	srai	r21,r19,31
8001b768:	003e0906 	br	8001af90 <_gp+0xfffea21c>
8001b76c:	d9800a04 	addi	r6,sp,40
8001b770:	a00b883a 	mov	r5,r20
8001b774:	b009883a 	mov	r4,r22
8001b778:	da400315 	stw	r9,12(sp)
8001b77c:	db000215 	stw	r12,8(sp)
8001b780:	db400115 	stw	r13,4(sp)
8001b784:	001a82c0 	call	8001a82c <__ssprint_r>
8001b788:	103d8c1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b78c:	d8800c17 	ldw	r2,48(sp)
8001b790:	d9000b17 	ldw	r4,44(sp)
8001b794:	9011883a 	mov	r8,r18
8001b798:	da400317 	ldw	r9,12(sp)
8001b79c:	db000217 	ldw	r12,8(sp)
8001b7a0:	db400117 	ldw	r13,4(sp)
8001b7a4:	003e4606 	br	8001b0c0 <_gp+0xfffea34c>
8001b7a8:	d9800a04 	addi	r6,sp,40
8001b7ac:	a00b883a 	mov	r5,r20
8001b7b0:	b009883a 	mov	r4,r22
8001b7b4:	001a82c0 	call	8001a82c <__ssprint_r>
8001b7b8:	103d801e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b7bc:	d8800c17 	ldw	r2,48(sp)
8001b7c0:	003ec606 	br	8001b2dc <_gp+0xfffea568>
8001b7c4:	902f883a 	mov	r23,r18
8001b7c8:	003f6b06 	br	8001b578 <_gp+0xfffea804>
8001b7cc:	00c00c04 	movi	r3,48
8001b7d0:	d88009c5 	stb	r2,39(sp)
8001b7d4:	d8c00985 	stb	r3,38(sp)
8001b7d8:	39c00094 	ori	r7,r7,2
8001b7dc:	00800084 	movi	r2,2
8001b7e0:	003d5906 	br	8001ad48 <_gp+0xfffe9fd4>
8001b7e4:	d9400017 	ldw	r5,0(sp)
8001b7e8:	d9000415 	stw	r4,16(sp)
8001b7ec:	2805d7fa 	srai	r2,r5,31
8001b7f0:	19400015 	stw	r5,0(r3)
8001b7f4:	18800115 	stw	r2,4(r3)
8001b7f8:	003c9706 	br	8001aa58 <_gp+0xfffe9ce4>
8001b7fc:	0421c83a 	sub	r16,zero,r16
8001b800:	ddc00415 	stw	r23,16(sp)
8001b804:	003da706 	br	8001aea4 <_gp+0xfffea130>
8001b808:	e0800043 	ldbu	r2,1(fp)
8001b80c:	39c00814 	ori	r7,r7,32
8001b810:	e7000044 	addi	fp,fp,1
8001b814:	10803fcc 	andi	r2,r2,255
8001b818:	1080201c 	xori	r2,r2,128
8001b81c:	10bfe004 	addi	r2,r2,-128
8001b820:	003cb206 	br	8001aaec <_gp+0xfffe9d78>
8001b824:	01401004 	movi	r5,64
8001b828:	000fca40 	call	8000fca4 <_malloc_r>
8001b82c:	a0800015 	stw	r2,0(r20)
8001b830:	a0800415 	stw	r2,16(r20)
8001b834:	10006b26 	beq	r2,zero,8001b9e4 <___svfiprintf_internal_r+0xff8>
8001b838:	00801004 	movi	r2,64
8001b83c:	a0800515 	stw	r2,20(r20)
8001b840:	003c7e06 	br	8001aa3c <_gp+0xfffe9cc8>
8001b844:	b809883a 	mov	r4,r23
8001b848:	da000215 	stw	r8,8(sp)
8001b84c:	d9c00115 	stw	r7,4(sp)
8001b850:	00111940 	call	80011194 <strlen>
8001b854:	d9c00117 	ldw	r7,4(sp)
8001b858:	dc400415 	stw	r17,16(sp)
8001b85c:	102b883a 	mov	r21,r2
8001b860:	db000943 	ldbu	r12,37(sp)
8001b864:	3823883a 	mov	r17,r7
8001b868:	0013883a 	mov	r9,zero
8001b86c:	da000217 	ldw	r8,8(sp)
8001b870:	003f4106 	br	8001b578 <_gp+0xfffea804>
8001b874:	902f883a 	mov	r23,r18
8001b878:	9809883a 	mov	r4,r19
8001b87c:	a80b883a 	mov	r5,r21
8001b880:	01800284 	movi	r6,10
8001b884:	000f883a 	mov	r7,zero
8001b888:	db000315 	stw	r12,12(sp)
8001b88c:	da000215 	stw	r8,8(sp)
8001b890:	da400115 	stw	r9,4(sp)
8001b894:	000cf340 	call	8000cf34 <__umoddi3>
8001b898:	10800c04 	addi	r2,r2,48
8001b89c:	bdffffc4 	addi	r23,r23,-1
8001b8a0:	9809883a 	mov	r4,r19
8001b8a4:	a80b883a 	mov	r5,r21
8001b8a8:	b8800005 	stb	r2,0(r23)
8001b8ac:	01800284 	movi	r6,10
8001b8b0:	000f883a 	mov	r7,zero
8001b8b4:	000c99c0 	call	8000c99c <__udivdi3>
8001b8b8:	1027883a 	mov	r19,r2
8001b8bc:	10c4b03a 	or	r2,r2,r3
8001b8c0:	182b883a 	mov	r21,r3
8001b8c4:	da400117 	ldw	r9,4(sp)
8001b8c8:	da000217 	ldw	r8,8(sp)
8001b8cc:	db000317 	ldw	r12,12(sp)
8001b8d0:	103fe91e 	bne	r2,zero,8001b878 <_gp+0xfffeab04>
8001b8d4:	003f2706 	br	8001b574 <_gp+0xfffea800>
8001b8d8:	d8800017 	ldw	r2,0(sp)
8001b8dc:	18800015 	stw	r2,0(r3)
8001b8e0:	d9000415 	stw	r4,16(sp)
8001b8e4:	003c5c06 	br	8001aa58 <_gp+0xfffe9ce4>
8001b8e8:	10c00060 	cmpeqi	r3,r2,1
8001b8ec:	183cf126 	beq	r3,zero,8001acb4 <_gp+0xfffe9f40>
8001b8f0:	003f0e06 	br	8001b52c <_gp+0xfffea7b8>
8001b8f4:	d9800a04 	addi	r6,sp,40
8001b8f8:	a00b883a 	mov	r5,r20
8001b8fc:	b009883a 	mov	r4,r22
8001b900:	da400115 	stw	r9,4(sp)
8001b904:	001a82c0 	call	8001a82c <__ssprint_r>
8001b908:	103d2c1e 	bne	r2,zero,8001adbc <_gp+0xfffea048>
8001b90c:	d9000b17 	ldw	r4,44(sp)
8001b910:	d8800c17 	ldw	r2,48(sp)
8001b914:	d8c01904 	addi	r3,sp,100
8001b918:	21400044 	addi	r5,r4,1
8001b91c:	9011883a 	mov	r8,r18
8001b920:	da400117 	ldw	r9,4(sp)
8001b924:	003e0906 	br	8001b14c <_gp+0xfffea3d8>
8001b928:	1809883a 	mov	r4,r3
8001b92c:	39dbda04 	addi	r7,r7,28520
8001b930:	003e2d06 	br	8001b1e8 <_gp+0xfffea474>
8001b934:	488001f0 	cmpltui	r2,r9,7
8001b938:	482b883a 	mov	r21,r9
8001b93c:	10000526 	beq	r2,zero,8001b954 <___svfiprintf_internal_r+0xf68>
8001b940:	05e000b4 	movhi	r23,32770
8001b944:	a827883a 	mov	r19,r21
8001b948:	dc400415 	stw	r17,16(sp)
8001b94c:	bddaad04 	addi	r23,r23,27316
8001b950:	003d9e06 	br	8001afcc <_gp+0xfffea258>
8001b954:	05400184 	movi	r21,6
8001b958:	003ff906 	br	8001b940 <_gp+0xfffeabcc>
8001b95c:	2039883a 	mov	fp,r4
8001b960:	0013883a 	mov	r9,zero
8001b964:	003c6206 	br	8001aaf0 <_gp+0xfffe9d7c>
8001b968:	180d883a 	mov	r6,r3
8001b96c:	2809883a 	mov	r4,r5
8001b970:	39dbda04 	addi	r7,r7,28520
8001b974:	003f3206 	br	8001b640 <_gp+0xfffea8cc>
8001b978:	482b883a 	mov	r21,r9
8001b97c:	dc400415 	stw	r17,16(sp)
8001b980:	db000943 	ldbu	r12,37(sp)
8001b984:	3823883a 	mov	r17,r7
8001b988:	0013883a 	mov	r9,zero
8001b98c:	003efa06 	br	8001b578 <_gp+0xfffea804>
8001b990:	00bfffc4 	movi	r2,-1
8001b994:	d8800015 	stw	r2,0(sp)
8001b998:	003d0b06 	br	8001adc8 <_gp+0xfffea054>
8001b99c:	d8800417 	ldw	r2,16(sp)
8001b9a0:	12400017 	ldw	r9,0(r2)
8001b9a4:	15c00104 	addi	r23,r2,4
8001b9a8:	4800010e 	bge	r9,zero,8001b9b0 <___svfiprintf_internal_r+0xfc4>
8001b9ac:	027fffc4 	movi	r9,-1
8001b9b0:	e0800043 	ldbu	r2,1(fp)
8001b9b4:	ddc00415 	stw	r23,16(sp)
8001b9b8:	2039883a 	mov	fp,r4
8001b9bc:	10803fcc 	andi	r2,r2,255
8001b9c0:	1080201c 	xori	r2,r2,128
8001b9c4:	10bfe004 	addi	r2,r2,-128
8001b9c8:	003c4806 	br	8001aaec <_gp+0xfffe9d78>
8001b9cc:	d9800945 	stb	r6,37(sp)
8001b9d0:	003eb906 	br	8001b4b8 <_gp+0xfffea744>
8001b9d4:	d9800945 	stb	r6,37(sp)
8001b9d8:	003d6606 	br	8001af74 <_gp+0xfffea200>
8001b9dc:	d9800945 	stb	r6,37(sp)
8001b9e0:	003ea006 	br	8001b464 <_gp+0xfffea6f0>
8001b9e4:	00800304 	movi	r2,12
8001b9e8:	b0800015 	stw	r2,0(r22)
8001b9ec:	00bfffc4 	movi	r2,-1
8001b9f0:	d8800015 	stw	r2,0(sp)
8001b9f4:	003cf406 	br	8001adc8 <_gp+0xfffea054>
8001b9f8:	d9800945 	stb	r6,37(sp)
8001b9fc:	003d0d06 	br	8001ae34 <_gp+0xfffea0c0>
8001ba00:	d9800945 	stb	r6,37(sp)
8001ba04:	003e6a06 	br	8001b3b0 <_gp+0xfffea63c>
8001ba08:	d9800945 	stb	r6,37(sp)
8001ba0c:	003e7706 	br	8001b3ec <_gp+0xfffea678>

8001ba10 <_sungetc_r>:
8001ba10:	defffc04 	addi	sp,sp,-16
8001ba14:	dfc00315 	stw	ra,12(sp)
8001ba18:	dc800215 	stw	r18,8(sp)
8001ba1c:	dc400115 	stw	r17,4(sp)
8001ba20:	dc000015 	stw	r16,0(sp)
8001ba24:	28bfffd8 	cmpnei	r2,r5,-1
8001ba28:	10001c26 	beq	r2,zero,8001ba9c <_sungetc_r+0x8c>
8001ba2c:	3080030b 	ldhu	r2,12(r6)
8001ba30:	30c00c17 	ldw	r3,48(r6)
8001ba34:	2c803fcc 	andi	r18,r5,255
8001ba38:	10bff7cc 	andi	r2,r2,65503
8001ba3c:	3080030d 	sth	r2,12(r6)
8001ba40:	30800117 	ldw	r2,4(r6)
8001ba44:	18001726 	beq	r3,zero,8001baa4 <_sungetc_r+0x94>
8001ba48:	30c00d17 	ldw	r3,52(r6)
8001ba4c:	3021883a 	mov	r16,r6
8001ba50:	2823883a 	mov	r17,r5
8001ba54:	10c00e0e 	bge	r2,r3,8001ba90 <_sungetc_r+0x80>
8001ba58:	80800017 	ldw	r2,0(r16)
8001ba5c:	10ffffc4 	addi	r3,r2,-1
8001ba60:	80c00015 	stw	r3,0(r16)
8001ba64:	147fffc5 	stb	r17,-1(r2)
8001ba68:	80800117 	ldw	r2,4(r16)
8001ba6c:	10800044 	addi	r2,r2,1
8001ba70:	80800115 	stw	r2,4(r16)
8001ba74:	9005883a 	mov	r2,r18
8001ba78:	dfc00317 	ldw	ra,12(sp)
8001ba7c:	dc800217 	ldw	r18,8(sp)
8001ba80:	dc400117 	ldw	r17,4(sp)
8001ba84:	dc000017 	ldw	r16,0(sp)
8001ba88:	dec00404 	addi	sp,sp,16
8001ba8c:	f800283a 	ret
8001ba90:	300b883a 	mov	r5,r6
8001ba94:	001cba80 	call	8001cba8 <__submore>
8001ba98:	103fef26 	beq	r2,zero,8001ba58 <_gp+0xfffeace4>
8001ba9c:	04bfffc4 	movi	r18,-1
8001baa0:	003ff406 	br	8001ba74 <_gp+0xfffead00>
8001baa4:	31000417 	ldw	r4,16(r6)
8001baa8:	30c00017 	ldw	r3,0(r6)
8001baac:	20000326 	beq	r4,zero,8001babc <_sungetc_r+0xac>
8001bab0:	20c0022e 	bgeu	r4,r3,8001babc <_sungetc_r+0xac>
8001bab4:	193fffc3 	ldbu	r4,-1(r3)
8001bab8:	24800c26 	beq	r4,r18,8001baec <_sungetc_r+0xdc>
8001babc:	30800f15 	stw	r2,60(r6)
8001bac0:	008000c4 	movi	r2,3
8001bac4:	31c01004 	addi	r7,r6,64
8001bac8:	31001084 	addi	r4,r6,66
8001bacc:	30800d15 	stw	r2,52(r6)
8001bad0:	00800044 	movi	r2,1
8001bad4:	30c00e15 	stw	r3,56(r6)
8001bad8:	31c00c15 	stw	r7,48(r6)
8001badc:	31401085 	stb	r5,66(r6)
8001bae0:	31000015 	stw	r4,0(r6)
8001bae4:	30800115 	stw	r2,4(r6)
8001bae8:	003fe206 	br	8001ba74 <_gp+0xfffead00>
8001baec:	18ffffc4 	addi	r3,r3,-1
8001baf0:	10800044 	addi	r2,r2,1
8001baf4:	30c00015 	stw	r3,0(r6)
8001baf8:	30800115 	stw	r2,4(r6)
8001bafc:	003fdd06 	br	8001ba74 <_gp+0xfffead00>

8001bb00 <__ssrefill_r>:
8001bb00:	defffe04 	addi	sp,sp,-8
8001bb04:	dc000015 	stw	r16,0(sp)
8001bb08:	2821883a 	mov	r16,r5
8001bb0c:	29400c17 	ldw	r5,48(r5)
8001bb10:	dfc00115 	stw	ra,4(sp)
8001bb14:	28000e26 	beq	r5,zero,8001bb50 <__ssrefill_r+0x50>
8001bb18:	80801004 	addi	r2,r16,64
8001bb1c:	28800126 	beq	r5,r2,8001bb24 <__ssrefill_r+0x24>
8001bb20:	0017bb00 	call	80017bb0 <_free_r>
8001bb24:	80800f17 	ldw	r2,60(r16)
8001bb28:	80000c15 	stw	zero,48(r16)
8001bb2c:	80800115 	stw	r2,4(r16)
8001bb30:	10000726 	beq	r2,zero,8001bb50 <__ssrefill_r+0x50>
8001bb34:	80c00e17 	ldw	r3,56(r16)
8001bb38:	0005883a 	mov	r2,zero
8001bb3c:	80c00015 	stw	r3,0(r16)
8001bb40:	dfc00117 	ldw	ra,4(sp)
8001bb44:	dc000017 	ldw	r16,0(sp)
8001bb48:	dec00204 	addi	sp,sp,8
8001bb4c:	f800283a 	ret
8001bb50:	8080030b 	ldhu	r2,12(r16)
8001bb54:	80c00417 	ldw	r3,16(r16)
8001bb58:	80000115 	stw	zero,4(r16)
8001bb5c:	10800814 	ori	r2,r2,32
8001bb60:	8080030d 	sth	r2,12(r16)
8001bb64:	80c00015 	stw	r3,0(r16)
8001bb68:	00bfffc4 	movi	r2,-1
8001bb6c:	003ff406 	br	8001bb40 <_gp+0xfffeadcc>

8001bb70 <_sfread_r>:
8001bb70:	defff704 	addi	sp,sp,-36
8001bb74:	dd400515 	stw	r21,20(sp)
8001bb78:	39ab383a 	mul	r21,r7,r6
8001bb7c:	dc000015 	stw	r16,0(sp)
8001bb80:	dfc00815 	stw	ra,32(sp)
8001bb84:	ddc00715 	stw	r23,28(sp)
8001bb88:	dd800615 	stw	r22,24(sp)
8001bb8c:	dd000415 	stw	r20,16(sp)
8001bb90:	dcc00315 	stw	r19,12(sp)
8001bb94:	dc800215 	stw	r18,8(sp)
8001bb98:	dc400115 	stw	r17,4(sp)
8001bb9c:	dc000917 	ldw	r16,36(sp)
8001bba0:	a8002026 	beq	r21,zero,8001bc24 <_sfread_r+0xb4>
8001bba4:	302f883a 	mov	r23,r6
8001bba8:	382d883a 	mov	r22,r7
8001bbac:	2029883a 	mov	r20,r4
8001bbb0:	2827883a 	mov	r19,r5
8001bbb4:	a825883a 	mov	r18,r21
8001bbb8:	00000b06 	br	8001bbe8 <_sfread_r+0x78>
8001bbbc:	00104e80 	call	800104e8 <memcpy>
8001bbc0:	80800017 	ldw	r2,0(r16)
8001bbc4:	80000115 	stw	zero,4(r16)
8001bbc8:	800b883a 	mov	r5,r16
8001bbcc:	1445883a 	add	r2,r2,r17
8001bbd0:	80800015 	stw	r2,0(r16)
8001bbd4:	a009883a 	mov	r4,r20
8001bbd8:	9c67883a 	add	r19,r19,r17
8001bbdc:	9465c83a 	sub	r18,r18,r17
8001bbe0:	001bb000 	call	8001bb00 <__ssrefill_r>
8001bbe4:	10001b1e 	bne	r2,zero,8001bc54 <_sfread_r+0xe4>
8001bbe8:	84400117 	ldw	r17,4(r16)
8001bbec:	80800017 	ldw	r2,0(r16)
8001bbf0:	9809883a 	mov	r4,r19
8001bbf4:	880d883a 	mov	r6,r17
8001bbf8:	100b883a 	mov	r5,r2
8001bbfc:	8cbfef36 	bltu	r17,r18,8001bbbc <_gp+0xfffeae48>
8001bc00:	900d883a 	mov	r6,r18
8001bc04:	00104e80 	call	800104e8 <memcpy>
8001bc08:	80c00117 	ldw	r3,4(r16)
8001bc0c:	80800017 	ldw	r2,0(r16)
8001bc10:	b02b883a 	mov	r21,r22
8001bc14:	1c87c83a 	sub	r3,r3,r18
8001bc18:	14a5883a 	add	r18,r2,r18
8001bc1c:	80c00115 	stw	r3,4(r16)
8001bc20:	84800015 	stw	r18,0(r16)
8001bc24:	a805883a 	mov	r2,r21
8001bc28:	dfc00817 	ldw	ra,32(sp)
8001bc2c:	ddc00717 	ldw	r23,28(sp)
8001bc30:	dd800617 	ldw	r22,24(sp)
8001bc34:	dd400517 	ldw	r21,20(sp)
8001bc38:	dd000417 	ldw	r20,16(sp)
8001bc3c:	dcc00317 	ldw	r19,12(sp)
8001bc40:	dc800217 	ldw	r18,8(sp)
8001bc44:	dc400117 	ldw	r17,4(sp)
8001bc48:	dc000017 	ldw	r16,0(sp)
8001bc4c:	dec00904 	addi	sp,sp,36
8001bc50:	f800283a 	ret
8001bc54:	ac89c83a 	sub	r4,r21,r18
8001bc58:	b80b883a 	mov	r5,r23
8001bc5c:	000d5880 	call	8000d588 <__udivsi3>
8001bc60:	102b883a 	mov	r21,r2
8001bc64:	003fef06 	br	8001bc24 <_gp+0xfffeaeb0>

8001bc68 <__ssvfiscanf_r>:
8001bc68:	2880030b 	ldhu	r2,12(r5)
8001bc6c:	deffa304 	addi	sp,sp,-372
8001bc70:	df005b15 	stw	fp,364(sp)
8001bc74:	dd405815 	stw	r21,352(sp)
8001bc78:	dcc05615 	stw	r19,344(sp)
8001bc7c:	dfc05c15 	stw	ra,368(sp)
8001bc80:	ddc05a15 	stw	r23,360(sp)
8001bc84:	dd805915 	stw	r22,356(sp)
8001bc88:	dd005715 	stw	r20,348(sp)
8001bc8c:	dc805515 	stw	r18,340(sp)
8001bc90:	dc405415 	stw	r17,336(sp)
8001bc94:	dc005315 	stw	r16,332(sp)
8001bc98:	10c8000c 	andi	r3,r2,8192
8001bc9c:	d9c00215 	stw	r7,8(sp)
8001bca0:	2839883a 	mov	fp,r5
8001bca4:	202b883a 	mov	r21,r4
8001bca8:	3027883a 	mov	r19,r6
8001bcac:	1800061e 	bne	r3,zero,8001bcc8 <__ssvfiscanf_r+0x60>
8001bcb0:	28c01917 	ldw	r3,100(r5)
8001bcb4:	0137ffc4 	movi	r4,-8193
8001bcb8:	10880014 	ori	r2,r2,8192
8001bcbc:	1906703a 	and	r3,r3,r4
8001bcc0:	2880030d 	sth	r2,12(r5)
8001bcc4:	28c01915 	stw	r3,100(r5)
8001bcc8:	002f883a 	mov	r23,zero
8001bccc:	002d883a 	mov	r22,zero
8001bcd0:	0021883a 	mov	r16,zero
8001bcd4:	d8000115 	stw	zero,4(sp)
8001bcd8:	98800003 	ldbu	r2,0(r19)
8001bcdc:	9d000044 	addi	r20,r19,1
8001bce0:	d8800615 	stw	r2,24(sp)
8001bce4:	1000a526 	beq	r2,zero,8001bf7c <__ssvfiscanf_r+0x314>
8001bce8:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001bcec:	d8c00617 	ldw	r3,24(sp)
8001bcf0:	10c5883a 	add	r2,r2,r3
8001bcf4:	10800043 	ldbu	r2,1(r2)
8001bcf8:	1080020c 	andi	r2,r2,8
8001bcfc:	1000861e 	bne	r2,zero,8001bf18 <__ssvfiscanf_r+0x2b0>
8001bd00:	18c00958 	cmpnei	r3,r3,37
8001bd04:	1800ab1e 	bne	r3,zero,8001bfb4 <__ssvfiscanf_r+0x34c>
8001bd08:	99400043 	ldbu	r5,1(r19)
8001bd0c:	0025883a 	mov	r18,zero
8001bd10:	0023883a 	mov	r17,zero
8001bd14:	280690ba 	slli	r3,r5,2
8001bd18:	012000b4 	movhi	r4,32770
8001bd1c:	28801e68 	cmpgeui	r2,r5,121
8001bd20:	1909883a 	add	r4,r3,r4
8001bd24:	a4c00044 	addi	r19,r20,1
8001bd28:	10015b1e 	bne	r2,zero,8001c298 <__ssvfiscanf_r+0x630>
8001bd2c:	20af4d17 	ldw	r2,-17100(r4)
8001bd30:	1000683a 	jmp	r2
8001bd34:	8001c01c 	xori	zero,r16,1792
8001bd38:	8001c298 	cmpnei	zero,r16,1802
8001bd3c:	8001c298 	cmpnei	zero,r16,1802
8001bd40:	8001c298 	cmpnei	zero,r16,1802
8001bd44:	8001c298 	cmpnei	zero,r16,1802
8001bd48:	8001c298 	cmpnei	zero,r16,1802
8001bd4c:	8001c298 	cmpnei	zero,r16,1802
8001bd50:	8001c298 	cmpnei	zero,r16,1802
8001bd54:	8001c298 	cmpnei	zero,r16,1802
8001bd58:	8001c298 	cmpnei	zero,r16,1802
8001bd5c:	8001c298 	cmpnei	zero,r16,1802
8001bd60:	8001c298 	cmpnei	zero,r16,1802
8001bd64:	8001c298 	cmpnei	zero,r16,1802
8001bd68:	8001c298 	cmpnei	zero,r16,1802
8001bd6c:	8001c298 	cmpnei	zero,r16,1802
8001bd70:	8001c298 	cmpnei	zero,r16,1802
8001bd74:	8001c298 	cmpnei	zero,r16,1802
8001bd78:	8001c298 	cmpnei	zero,r16,1802
8001bd7c:	8001c298 	cmpnei	zero,r16,1802
8001bd80:	8001c298 	cmpnei	zero,r16,1802
8001bd84:	8001c298 	cmpnei	zero,r16,1802
8001bd88:	8001c298 	cmpnei	zero,r16,1802
8001bd8c:	8001c298 	cmpnei	zero,r16,1802
8001bd90:	8001c298 	cmpnei	zero,r16,1802
8001bd94:	8001c298 	cmpnei	zero,r16,1802
8001bd98:	8001c298 	cmpnei	zero,r16,1802
8001bd9c:	8001c298 	cmpnei	zero,r16,1802
8001bda0:	8001c298 	cmpnei	zero,r16,1802
8001bda4:	8001c298 	cmpnei	zero,r16,1802
8001bda8:	8001c298 	cmpnei	zero,r16,1802
8001bdac:	8001c298 	cmpnei	zero,r16,1802
8001bdb0:	8001c298 	cmpnei	zero,r16,1802
8001bdb4:	8001c298 	cmpnei	zero,r16,1802
8001bdb8:	8001c298 	cmpnei	zero,r16,1802
8001bdbc:	8001c298 	cmpnei	zero,r16,1802
8001bdc0:	8001c298 	cmpnei	zero,r16,1802
8001bdc4:	8001c298 	cmpnei	zero,r16,1802
8001bdc8:	8001bfb0 	cmpltui	zero,r16,1790
8001bdcc:	8001c298 	cmpnei	zero,r16,1802
8001bdd0:	8001c298 	cmpnei	zero,r16,1802
8001bdd4:	8001c298 	cmpnei	zero,r16,1802
8001bdd8:	8001c298 	cmpnei	zero,r16,1802
8001bddc:	8001c284 	addi	zero,r16,1802
8001bde0:	8001c298 	cmpnei	zero,r16,1802
8001bde4:	8001c298 	cmpnei	zero,r16,1802
8001bde8:	8001c298 	cmpnei	zero,r16,1802
8001bdec:	8001c298 	cmpnei	zero,r16,1802
8001bdf0:	8001c298 	cmpnei	zero,r16,1802
8001bdf4:	8001c268 	cmpgeui	zero,r16,1801
8001bdf8:	8001c268 	cmpgeui	zero,r16,1801
8001bdfc:	8001c268 	cmpgeui	zero,r16,1801
8001be00:	8001c268 	cmpgeui	zero,r16,1801
8001be04:	8001c268 	cmpgeui	zero,r16,1801
8001be08:	8001c268 	cmpgeui	zero,r16,1801
8001be0c:	8001c268 	cmpgeui	zero,r16,1801
8001be10:	8001c268 	cmpgeui	zero,r16,1801
8001be14:	8001c268 	cmpgeui	zero,r16,1801
8001be18:	8001c268 	cmpgeui	zero,r16,1801
8001be1c:	8001c298 	cmpnei	zero,r16,1802
8001be20:	8001c298 	cmpnei	zero,r16,1802
8001be24:	8001c298 	cmpnei	zero,r16,1802
8001be28:	8001c298 	cmpnei	zero,r16,1802
8001be2c:	8001c298 	cmpnei	zero,r16,1802
8001be30:	8001c298 	cmpnei	zero,r16,1802
8001be34:	8001c298 	cmpnei	zero,r16,1802
8001be38:	8001c298 	cmpnei	zero,r16,1802
8001be3c:	8001c298 	cmpnei	zero,r16,1802
8001be40:	8001c298 	cmpnei	zero,r16,1802
8001be44:	8001c250 	cmplti	zero,r16,1801
8001be48:	8001c298 	cmpnei	zero,r16,1802
8001be4c:	8001c298 	cmpnei	zero,r16,1802
8001be50:	8001c298 	cmpnei	zero,r16,1802
8001be54:	8001c298 	cmpnei	zero,r16,1802
8001be58:	8001c298 	cmpnei	zero,r16,1802
8001be5c:	8001c298 	cmpnei	zero,r16,1802
8001be60:	8001c298 	cmpnei	zero,r16,1802
8001be64:	8001c23c 	xorhi	zero,r16,1800
8001be68:	8001c298 	cmpnei	zero,r16,1802
8001be6c:	8001c298 	cmpnei	zero,r16,1802
8001be70:	8001c224 	muli	zero,r16,1800
8001be74:	8001c298 	cmpnei	zero,r16,1802
8001be78:	8001c298 	cmpnei	zero,r16,1802
8001be7c:	8001c298 	cmpnei	zero,r16,1802
8001be80:	8001c298 	cmpnei	zero,r16,1802
8001be84:	8001c298 	cmpnei	zero,r16,1802
8001be88:	8001c298 	cmpnei	zero,r16,1802
8001be8c:	8001c298 	cmpnei	zero,r16,1802
8001be90:	8001c298 	cmpnei	zero,r16,1802
8001be94:	8001c20c 	andi	zero,r16,1800
8001be98:	8001c298 	cmpnei	zero,r16,1802
8001be9c:	8001c298 	cmpnei	zero,r16,1802
8001bea0:	8001c1f0 	cmpltui	zero,r16,1799
8001bea4:	8001c298 	cmpnei	zero,r16,1802
8001bea8:	8001c298 	cmpnei	zero,r16,1802
8001beac:	8001c298 	cmpnei	zero,r16,1802
8001beb0:	8001c298 	cmpnei	zero,r16,1802
8001beb4:	8001c298 	cmpnei	zero,r16,1802
8001beb8:	8001c298 	cmpnei	zero,r16,1802
8001bebc:	8001c298 	cmpnei	zero,r16,1802
8001bec0:	8001c15c 	xori	zero,r16,1797
8001bec4:	8001c130 	cmpltui	zero,r16,1796
8001bec8:	8001c298 	cmpnei	zero,r16,1802
8001becc:	8001c298 	cmpnei	zero,r16,1802
8001bed0:	8001c298 	cmpnei	zero,r16,1802
8001bed4:	8001c11c 	xori	zero,r16,1796
8001bed8:	8001c028 	cmpgeui	zero,r16,1792
8001bedc:	8001c298 	cmpnei	zero,r16,1802
8001bee0:	8001c298 	cmpnei	zero,r16,1802
8001bee4:	8001c1d8 	cmpnei	zero,r16,1799
8001bee8:	8001c298 	cmpnei	zero,r16,1802
8001beec:	8001c1b0 	cmpltui	zero,r16,1798
8001bef0:	8001c19c 	xori	zero,r16,1798
8001bef4:	8001c184 	addi	zero,r16,1798
8001bef8:	8001c298 	cmpnei	zero,r16,1802
8001befc:	8001c298 	cmpnei	zero,r16,1802
8001bf00:	8001c17c 	xorhi	zero,r16,1797
8001bf04:	8001c298 	cmpnei	zero,r16,1802
8001bf08:	8001c168 	cmpgeui	zero,r16,1797
8001bf0c:	8001c298 	cmpnei	zero,r16,1802
8001bf10:	8001c298 	cmpnei	zero,r16,1802
8001bf14:	8001c20c 	andi	zero,r16,1800
8001bf18:	e0800117 	ldw	r2,4(fp)
8001bf1c:	00800e0e 	bge	zero,r2,8001bf58 <__ssvfiscanf_r+0x2f0>
8001bf20:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001bf24:	e0c00017 	ldw	r3,0(fp)
8001bf28:	19000003 	ldbu	r4,0(r3)
8001bf2c:	18c00044 	addi	r3,r3,1
8001bf30:	1105883a 	add	r2,r2,r4
8001bf34:	10800043 	ldbu	r2,1(r2)
8001bf38:	1080020c 	andi	r2,r2,8
8001bf3c:	10000a26 	beq	r2,zero,8001bf68 <__ssvfiscanf_r+0x300>
8001bf40:	e0800117 	ldw	r2,4(fp)
8001bf44:	e0c00015 	stw	r3,0(fp)
8001bf48:	84000044 	addi	r16,r16,1
8001bf4c:	10bfffc4 	addi	r2,r2,-1
8001bf50:	e0800115 	stw	r2,4(fp)
8001bf54:	00bff216 	blt	zero,r2,8001bf20 <_gp+0xfffeb1ac>
8001bf58:	e00b883a 	mov	r5,fp
8001bf5c:	a809883a 	mov	r4,r21
8001bf60:	001bb000 	call	8001bb00 <__ssrefill_r>
8001bf64:	103fee26 	beq	r2,zero,8001bf20 <_gp+0xfffeb1ac>
8001bf68:	a027883a 	mov	r19,r20
8001bf6c:	98800003 	ldbu	r2,0(r19)
8001bf70:	9d000044 	addi	r20,r19,1
8001bf74:	d8800615 	stw	r2,24(sp)
8001bf78:	103f5b1e 	bne	r2,zero,8001bce8 <_gp+0xfffeaf74>
8001bf7c:	d8800117 	ldw	r2,4(sp)
8001bf80:	dfc05c17 	ldw	ra,368(sp)
8001bf84:	df005b17 	ldw	fp,364(sp)
8001bf88:	ddc05a17 	ldw	r23,360(sp)
8001bf8c:	dd805917 	ldw	r22,356(sp)
8001bf90:	dd405817 	ldw	r21,352(sp)
8001bf94:	dd005717 	ldw	r20,348(sp)
8001bf98:	dcc05617 	ldw	r19,344(sp)
8001bf9c:	dc805517 	ldw	r18,340(sp)
8001bfa0:	dc405417 	ldw	r17,336(sp)
8001bfa4:	dc005317 	ldw	r16,332(sp)
8001bfa8:	dec05d04 	addi	sp,sp,372
8001bfac:	f800283a 	ret
8001bfb0:	9829883a 	mov	r20,r19
8001bfb4:	e0800117 	ldw	r2,4(fp)
8001bfb8:	0082260e 	bge	zero,r2,8001c854 <__ssvfiscanf_r+0xbec>
8001bfbc:	e0800017 	ldw	r2,0(fp)
8001bfc0:	a0ffffc3 	ldbu	r3,-1(r20)
8001bfc4:	11000003 	ldbu	r4,0(r2)
8001bfc8:	20ffec1e 	bne	r4,r3,8001bf7c <_gp+0xfffeb208>
8001bfcc:	e0c00117 	ldw	r3,4(fp)
8001bfd0:	10800044 	addi	r2,r2,1
8001bfd4:	e0800015 	stw	r2,0(fp)
8001bfd8:	18bfffc4 	addi	r2,r3,-1
8001bfdc:	e0800115 	stw	r2,4(fp)
8001bfe0:	84000044 	addi	r16,r16,1
8001bfe4:	a027883a 	mov	r19,r20
8001bfe8:	003f3b06 	br	8001bcd8 <_gp+0xfffeaf64>
8001bfec:	e00b883a 	mov	r5,fp
8001bff0:	a809883a 	mov	r4,r21
8001bff4:	d8c00415 	stw	r3,16(sp)
8001bff8:	001bb000 	call	8001bb00 <__ssrefill_r>
8001bffc:	d8c00417 	ldw	r3,16(sp)
8001c000:	1002e026 	beq	r2,zero,8001cb84 <__ssvfiscanf_r+0xf1c>
8001c004:	18026d26 	beq	r3,zero,8001c9bc <__ssvfiscanf_r+0xd54>
8001c008:	d8800117 	ldw	r2,4(sp)
8001c00c:	10000326 	beq	r2,zero,8001c01c <__ssvfiscanf_r+0x3b4>
8001c010:	e080030b 	ldhu	r2,12(fp)
8001c014:	1080100c 	andi	r2,r2,64
8001c018:	103fd826 	beq	r2,zero,8001bf7c <_gp+0xfffeb208>
8001c01c:	00bfffc4 	movi	r2,-1
8001c020:	d8800115 	stw	r2,4(sp)
8001c024:	003fd506 	br	8001bf7c <_gp+0xfffeb208>
8001c028:	05e000b4 	movhi	r23,32770
8001c02c:	bdfb5704 	addi	r23,r23,-4772
8001c030:	002d883a 	mov	r22,zero
8001c034:	050000c4 	movi	r20,3
8001c038:	e0800117 	ldw	r2,4(fp)
8001c03c:	0080420e 	bge	zero,r2,8001c148 <__ssvfiscanf_r+0x4e0>
8001c040:	9080100c 	andi	r2,r18,64
8001c044:	10002626 	beq	r2,zero,8001c0e0 <__ssvfiscanf_r+0x478>
8001c048:	a08000a0 	cmpeqi	r2,r20,2
8001c04c:	10017b1e 	bne	r2,zero,8001c63c <__ssvfiscanf_r+0x9d4>
8001c050:	a08000e0 	cmpeqi	r2,r20,3
8001c054:	1000b61e 	bne	r2,zero,8001c330 <__ssvfiscanf_r+0x6c8>
8001c058:	a5000060 	cmpeqi	r20,r20,1
8001c05c:	a0009b1e 	bne	r20,zero,8001c2cc <__ssvfiscanf_r+0x664>
8001c060:	8800011e 	bne	r17,zero,8001c068 <__ssvfiscanf_r+0x400>
8001c064:	04400044 	movi	r17,1
8001c068:	90c0040c 	andi	r3,r18,16
8001c06c:	9080004c 	andi	r2,r18,1
8001c070:	d8c00415 	stw	r3,16(sp)
8001c074:	10025b1e 	bne	r2,zero,8001c9e4 <__ssvfiscanf_r+0xd7c>
8001c078:	d8800417 	ldw	r2,16(sp)
8001c07c:	1001e626 	beq	r2,zero,8001c818 <__ssvfiscanf_r+0xbb0>
8001c080:	0025883a 	mov	r18,zero
8001c084:	00000606 	br	8001c0a0 <__ssvfiscanf_r+0x438>
8001c088:	1887883a 	add	r3,r3,r2
8001c08c:	e0c00015 	stw	r3,0(fp)
8001c090:	90a5883a 	add	r18,r18,r2
8001c094:	88a3c83a 	sub	r17,r17,r2
8001c098:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c09c:	1002941e 	bne	r2,zero,8001caf0 <__ssvfiscanf_r+0xe88>
8001c0a0:	e0800117 	ldw	r2,4(fp)
8001c0a4:	e00b883a 	mov	r5,fp
8001c0a8:	a809883a 	mov	r4,r21
8001c0ac:	e0c00017 	ldw	r3,0(fp)
8001c0b0:	147ff516 	blt	r2,r17,8001c088 <_gp+0xfffeb314>
8001c0b4:	1445c83a 	sub	r2,r2,r17
8001c0b8:	1c47883a 	add	r3,r3,r17
8001c0bc:	9465883a 	add	r18,r18,r17
8001c0c0:	e0800115 	stw	r2,4(fp)
8001c0c4:	e0c00015 	stw	r3,0(fp)
8001c0c8:	84a1883a 	add	r16,r16,r18
8001c0cc:	003f0206 	br	8001bcd8 <_gp+0xfffeaf64>
8001c0d0:	e00b883a 	mov	r5,fp
8001c0d4:	a809883a 	mov	r4,r21
8001c0d8:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c0dc:	103fca1e 	bne	r2,zero,8001c008 <_gp+0xfffeb294>
8001c0e0:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001c0e4:	e0c00017 	ldw	r3,0(fp)
8001c0e8:	19000003 	ldbu	r4,0(r3)
8001c0ec:	18c00044 	addi	r3,r3,1
8001c0f0:	1105883a 	add	r2,r2,r4
8001c0f4:	10800043 	ldbu	r2,1(r2)
8001c0f8:	1080020c 	andi	r2,r2,8
8001c0fc:	103fd226 	beq	r2,zero,8001c048 <_gp+0xfffeb2d4>
8001c100:	e0800117 	ldw	r2,4(fp)
8001c104:	84000044 	addi	r16,r16,1
8001c108:	10bfffc4 	addi	r2,r2,-1
8001c10c:	e0800115 	stw	r2,4(fp)
8001c110:	00bfef0e 	bge	zero,r2,8001c0d0 <_gp+0xfffeb35c>
8001c114:	e0c00015 	stw	r3,0(fp)
8001c118:	003ff106 	br	8001c0e0 <_gp+0xfffeb36c>
8001c11c:	a0800043 	ldbu	r2,1(r20)
8001c120:	94800114 	ori	r18,r18,4
8001c124:	9829883a 	mov	r20,r19
8001c128:	11403fcc 	andi	r5,r2,255
8001c12c:	003ef906 	br	8001bd14 <_gp+0xfffeafa0>
8001c130:	e0800117 	ldw	r2,4(fp)
8001c134:	05e000b4 	movhi	r23,32770
8001c138:	bdfb5704 	addi	r23,r23,-4772
8001c13c:	05800284 	movi	r22,10
8001c140:	050000c4 	movi	r20,3
8001c144:	00bfbe16 	blt	zero,r2,8001c040 <_gp+0xfffeb2cc>
8001c148:	e00b883a 	mov	r5,fp
8001c14c:	a809883a 	mov	r4,r21
8001c150:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c154:	103fba26 	beq	r2,zero,8001c040 <_gp+0xfffeb2cc>
8001c158:	003fab06 	br	8001c008 <_gp+0xfffeb294>
8001c15c:	94801014 	ori	r18,r18,64
8001c160:	0029883a 	mov	r20,zero
8001c164:	003fb406 	br	8001c038 <_gp+0xfffeb2c4>
8001c168:	05e000b4 	movhi	r23,32770
8001c16c:	bde9e104 	addi	r23,r23,-22652
8001c170:	05800284 	movi	r22,10
8001c174:	050000c4 	movi	r20,3
8001c178:	003faf06 	br	8001c038 <_gp+0xfffeb2c4>
8001c17c:	05000084 	movi	r20,2
8001c180:	003fad06 	br	8001c038 <_gp+0xfffeb2c4>
8001c184:	05e000b4 	movhi	r23,32770
8001c188:	94808814 	ori	r18,r18,544
8001c18c:	bde9e104 	addi	r23,r23,-22652
8001c190:	05800404 	movi	r22,16
8001c194:	050000c4 	movi	r20,3
8001c198:	003fa706 	br	8001c038 <_gp+0xfffeb2c4>
8001c19c:	05e000b4 	movhi	r23,32770
8001c1a0:	bde9e104 	addi	r23,r23,-22652
8001c1a4:	05800204 	movi	r22,8
8001c1a8:	050000c4 	movi	r20,3
8001c1ac:	003fa206 	br	8001c038 <_gp+0xfffeb2c4>
8001c1b0:	9080040c 	andi	r2,r18,16
8001c1b4:	103ec81e 	bne	r2,zero,8001bcd8 <_gp+0xfffeaf64>
8001c1b8:	d8c00217 	ldw	r3,8(sp)
8001c1bc:	9080010c 	andi	r2,r18,4
8001c1c0:	19000104 	addi	r4,r3,4
8001c1c4:	18c00017 	ldw	r3,0(r3)
8001c1c8:	10025c26 	beq	r2,zero,8001cb3c <__ssvfiscanf_r+0xed4>
8001c1cc:	1c00000d 	sth	r16,0(r3)
8001c1d0:	d9000215 	stw	r4,8(sp)
8001c1d4:	003ec006 	br	8001bcd8 <_gp+0xfffeaf64>
8001c1d8:	a1400043 	ldbu	r5,1(r20)
8001c1dc:	28801b18 	cmpnei	r2,r5,108
8001c1e0:	10025126 	beq	r2,zero,8001cb28 <__ssvfiscanf_r+0xec0>
8001c1e4:	94800054 	ori	r18,r18,1
8001c1e8:	9829883a 	mov	r20,r19
8001c1ec:	003ec906 	br	8001bd14 <_gp+0xfffeafa0>
8001c1f0:	980b883a 	mov	r5,r19
8001c1f4:	d9001304 	addi	r4,sp,76
8001c1f8:	001ea5c0 	call	8001ea5c <__sccl>
8001c1fc:	1027883a 	mov	r19,r2
8001c200:	94801014 	ori	r18,r18,64
8001c204:	05000044 	movi	r20,1
8001c208:	003f8b06 	br	8001c038 <_gp+0xfffeb2c4>
8001c20c:	05e000b4 	movhi	r23,32770
8001c210:	94808014 	ori	r18,r18,512
8001c214:	bde9e104 	addi	r23,r23,-22652
8001c218:	05800404 	movi	r22,16
8001c21c:	050000c4 	movi	r20,3
8001c220:	003f8506 	br	8001c038 <_gp+0xfffeb2c4>
8001c224:	05e000b4 	movhi	r23,32770
8001c228:	94800054 	ori	r18,r18,1
8001c22c:	bde9e104 	addi	r23,r23,-22652
8001c230:	05800204 	movi	r22,8
8001c234:	050000c4 	movi	r20,3
8001c238:	003f7f06 	br	8001c038 <_gp+0xfffeb2c4>
8001c23c:	a0800043 	ldbu	r2,1(r20)
8001c240:	94800094 	ori	r18,r18,2
8001c244:	9829883a 	mov	r20,r19
8001c248:	11403fcc 	andi	r5,r2,255
8001c24c:	003eb106 	br	8001bd14 <_gp+0xfffeafa0>
8001c250:	05e000b4 	movhi	r23,32770
8001c254:	94800054 	ori	r18,r18,1
8001c258:	bdfb5704 	addi	r23,r23,-4772
8001c25c:	05800284 	movi	r22,10
8001c260:	050000c4 	movi	r20,3
8001c264:	003f7406 	br	8001c038 <_gp+0xfffeb2c4>
8001c268:	8c4002a4 	muli	r17,r17,10
8001c26c:	a0800043 	ldbu	r2,1(r20)
8001c270:	9829883a 	mov	r20,r19
8001c274:	8963883a 	add	r17,r17,r5
8001c278:	8c7ff404 	addi	r17,r17,-48
8001c27c:	11403fcc 	andi	r5,r2,255
8001c280:	003ea406 	br	8001bd14 <_gp+0xfffeafa0>
8001c284:	a0800043 	ldbu	r2,1(r20)
8001c288:	94800414 	ori	r18,r18,16
8001c28c:	9829883a 	mov	r20,r19
8001c290:	11403fcc 	andi	r5,r2,255
8001c294:	003e9f06 	br	8001bd14 <_gp+0xfffeafa0>
8001c298:	d9400315 	stw	r5,12(sp)
8001c29c:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001c2a0:	d9400317 	ldw	r5,12(sp)
8001c2a4:	05e000b4 	movhi	r23,32770
8001c2a8:	1145883a 	add	r2,r2,r5
8001c2ac:	10800043 	ldbu	r2,1(r2)
8001c2b0:	108000cc 	andi	r2,r2,3
8001c2b4:	10800058 	cmpnei	r2,r2,1
8001c2b8:	10021626 	beq	r2,zero,8001cb14 <__ssvfiscanf_r+0xeac>
8001c2bc:	bdfb5704 	addi	r23,r23,-4772
8001c2c0:	05800284 	movi	r22,10
8001c2c4:	050000c4 	movi	r20,3
8001c2c8:	003f5b06 	br	8001c038 <_gp+0xfffeb2c4>
8001c2cc:	8800011e 	bne	r17,zero,8001c2d4 <__ssvfiscanf_r+0x66c>
8001c2d0:	047fffc4 	movi	r17,-1
8001c2d4:	9480040c 	andi	r18,r18,16
8001c2d8:	e0800017 	ldw	r2,0(fp)
8001c2dc:	90011626 	beq	r18,zero,8001c738 <__ssvfiscanf_r+0xad0>
8001c2e0:	0025883a 	mov	r18,zero
8001c2e4:	10c00003 	ldbu	r3,0(r2)
8001c2e8:	d9005304 	addi	r4,sp,332
8001c2ec:	10800044 	addi	r2,r2,1
8001c2f0:	20c7883a 	add	r3,r4,r3
8001c2f4:	18ffc007 	ldb	r3,-256(r3)
8001c2f8:	1801b726 	beq	r3,zero,8001c9d8 <__ssvfiscanf_r+0xd70>
8001c2fc:	e0c00117 	ldw	r3,4(fp)
8001c300:	e0800015 	stw	r2,0(fp)
8001c304:	94800044 	addi	r18,r18,1
8001c308:	18ffffc4 	addi	r3,r3,-1
8001c30c:	e0c00115 	stw	r3,4(fp)
8001c310:	8cbf6d26 	beq	r17,r18,8001c0c8 <_gp+0xfffeb354>
8001c314:	00fff316 	blt	zero,r3,8001c2e4 <_gp+0xfffeb570>
8001c318:	e00b883a 	mov	r5,fp
8001c31c:	a809883a 	mov	r4,r21
8001c320:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c324:	103f681e 	bne	r2,zero,8001c0c8 <_gp+0xfffeb354>
8001c328:	e0800017 	ldw	r2,0(fp)
8001c32c:	003fed06 	br	8001c2e4 <_gp+0xfffeb570>
8001c330:	88bfffc4 	addi	r2,r17,-1
8001c334:	108009f0 	cmpltui	r2,r2,39
8001c338:	1000fd1e 	bne	r2,zero,8001c730 <__ssvfiscanf_r+0xac8>
8001c33c:	88bff644 	addi	r2,r17,-39
8001c340:	d8800415 	stw	r2,16(sp)
8001c344:	044009c4 	movi	r17,39
8001c348:	95036014 	ori	r20,r18,3456
8001c34c:	d8000315 	stw	zero,12(sp)
8001c350:	dc800904 	addi	r18,sp,36
8001c354:	e0c00017 	ldw	r3,0(fp)
8001c358:	19400003 	ldbu	r5,0(r3)
8001c35c:	28bff544 	addi	r2,r5,-43
8001c360:	10803fcc 	andi	r2,r2,255
8001c364:	110013a8 	cmpgeui	r4,r2,78
8001c368:	2000641e 	bne	r4,zero,8001c4fc <__ssvfiscanf_r+0x894>
8001c36c:	100490ba 	slli	r2,r2,2
8001c370:	012000b4 	movhi	r4,32770
8001c374:	1109883a 	add	r4,r2,r4
8001c378:	20b0e017 	ldw	r2,-15488(r4)
8001c37c:	1000683a 	jmp	r2
8001c380:	8001c628 	cmpgeui	zero,r16,1816
8001c384:	8001c4fc 	xorhi	zero,r16,1811
8001c388:	8001c628 	cmpgeui	zero,r16,1816
8001c38c:	8001c4fc 	xorhi	zero,r16,1811
8001c390:	8001c4fc 	xorhi	zero,r16,1811
8001c394:	8001c5c0 	call	88001c5c <_gp+0x7fd0ee8>
8001c398:	8001c5a4 	muli	zero,r16,1814
8001c39c:	8001c5a4 	muli	zero,r16,1814
8001c3a0:	8001c5a4 	muli	zero,r16,1814
8001c3a4:	8001c5a4 	muli	zero,r16,1814
8001c3a8:	8001c5a4 	muli	zero,r16,1814
8001c3ac:	8001c5a4 	muli	zero,r16,1814
8001c3b0:	8001c5a4 	muli	zero,r16,1814
8001c3b4:	8001c588 	cmpgei	zero,r16,1814
8001c3b8:	8001c588 	cmpgei	zero,r16,1814
8001c3bc:	8001c4fc 	xorhi	zero,r16,1811
8001c3c0:	8001c4fc 	xorhi	zero,r16,1811
8001c3c4:	8001c4fc 	xorhi	zero,r16,1811
8001c3c8:	8001c4fc 	xorhi	zero,r16,1811
8001c3cc:	8001c4fc 	xorhi	zero,r16,1811
8001c3d0:	8001c4fc 	xorhi	zero,r16,1811
8001c3d4:	8001c4fc 	xorhi	zero,r16,1811
8001c3d8:	8001c574 	orhi	zero,r16,1813
8001c3dc:	8001c574 	orhi	zero,r16,1813
8001c3e0:	8001c574 	orhi	zero,r16,1813
8001c3e4:	8001c574 	orhi	zero,r16,1813
8001c3e8:	8001c574 	orhi	zero,r16,1813
8001c3ec:	8001c574 	orhi	zero,r16,1813
8001c3f0:	8001c4fc 	xorhi	zero,r16,1811
8001c3f4:	8001c4fc 	xorhi	zero,r16,1811
8001c3f8:	8001c4fc 	xorhi	zero,r16,1811
8001c3fc:	8001c4fc 	xorhi	zero,r16,1811
8001c400:	8001c4fc 	xorhi	zero,r16,1811
8001c404:	8001c4fc 	xorhi	zero,r16,1811
8001c408:	8001c4fc 	xorhi	zero,r16,1811
8001c40c:	8001c4fc 	xorhi	zero,r16,1811
8001c410:	8001c4fc 	xorhi	zero,r16,1811
8001c414:	8001c4fc 	xorhi	zero,r16,1811
8001c418:	8001c4fc 	xorhi	zero,r16,1811
8001c41c:	8001c4fc 	xorhi	zero,r16,1811
8001c420:	8001c4fc 	xorhi	zero,r16,1811
8001c424:	8001c4fc 	xorhi	zero,r16,1811
8001c428:	8001c4fc 	xorhi	zero,r16,1811
8001c42c:	8001c4fc 	xorhi	zero,r16,1811
8001c430:	8001c4fc 	xorhi	zero,r16,1811
8001c434:	8001c4b8 	rdprs	zero,r16,1810
8001c438:	8001c4fc 	xorhi	zero,r16,1811
8001c43c:	8001c4fc 	xorhi	zero,r16,1811
8001c440:	8001c4fc 	xorhi	zero,r16,1811
8001c444:	8001c4fc 	xorhi	zero,r16,1811
8001c448:	8001c4fc 	xorhi	zero,r16,1811
8001c44c:	8001c4fc 	xorhi	zero,r16,1811
8001c450:	8001c4fc 	xorhi	zero,r16,1811
8001c454:	8001c4fc 	xorhi	zero,r16,1811
8001c458:	8001c574 	orhi	zero,r16,1813
8001c45c:	8001c574 	orhi	zero,r16,1813
8001c460:	8001c574 	orhi	zero,r16,1813
8001c464:	8001c574 	orhi	zero,r16,1813
8001c468:	8001c574 	orhi	zero,r16,1813
8001c46c:	8001c574 	orhi	zero,r16,1813
8001c470:	8001c4fc 	xorhi	zero,r16,1811
8001c474:	8001c4fc 	xorhi	zero,r16,1811
8001c478:	8001c4fc 	xorhi	zero,r16,1811
8001c47c:	8001c4fc 	xorhi	zero,r16,1811
8001c480:	8001c4fc 	xorhi	zero,r16,1811
8001c484:	8001c4fc 	xorhi	zero,r16,1811
8001c488:	8001c4fc 	xorhi	zero,r16,1811
8001c48c:	8001c4fc 	xorhi	zero,r16,1811
8001c490:	8001c4fc 	xorhi	zero,r16,1811
8001c494:	8001c4fc 	xorhi	zero,r16,1811
8001c498:	8001c4fc 	xorhi	zero,r16,1811
8001c49c:	8001c4fc 	xorhi	zero,r16,1811
8001c4a0:	8001c4fc 	xorhi	zero,r16,1811
8001c4a4:	8001c4fc 	xorhi	zero,r16,1811
8001c4a8:	8001c4fc 	xorhi	zero,r16,1811
8001c4ac:	8001c4fc 	xorhi	zero,r16,1811
8001c4b0:	8001c4fc 	xorhi	zero,r16,1811
8001c4b4:	8001c4b8 	rdprs	zero,r16,1810
8001c4b8:	a081800c 	andi	r2,r20,1536
8001c4bc:	10808018 	cmpnei	r2,r2,512
8001c4c0:	10000e1e 	bne	r2,zero,8001c4fc <__ssvfiscanf_r+0x894>
8001c4c4:	00bf7fc4 	movi	r2,-513
8001c4c8:	a094703a 	and	r10,r20,r2
8001c4cc:	55014014 	ori	r20,r10,1280
8001c4d0:	05800404 	movi	r22,16
8001c4d4:	e0800117 	ldw	r2,4(fp)
8001c4d8:	91400005 	stb	r5,0(r18)
8001c4dc:	94800044 	addi	r18,r18,1
8001c4e0:	10bfffc4 	addi	r2,r2,-1
8001c4e4:	e0800115 	stw	r2,4(fp)
8001c4e8:	00804a0e 	bge	zero,r2,8001c614 <__ssvfiscanf_r+0x9ac>
8001c4ec:	18c00044 	addi	r3,r3,1
8001c4f0:	e0c00015 	stw	r3,0(fp)
8001c4f4:	8c7fffc4 	addi	r17,r17,-1
8001c4f8:	883f961e 	bne	r17,zero,8001c354 <_gp+0xfffeb5e0>
8001c4fc:	a080400c 	andi	r2,r20,256
8001c500:	10000426 	beq	r2,zero,8001c514 <__ssvfiscanf_r+0x8ac>
8001c504:	d8800904 	addi	r2,sp,36
8001c508:	14817c36 	bltu	r2,r18,8001cafc <__ssvfiscanf_r+0xe94>
8001c50c:	d8800904 	addi	r2,sp,36
8001c510:	90be9a26 	beq	r18,r2,8001bf7c <_gp+0xfffeb208>
8001c514:	a080040c 	andi	r2,r20,16
8001c518:	1000101e 	bne	r2,zero,8001c55c <__ssvfiscanf_r+0x8f4>
8001c51c:	a809883a 	mov	r4,r21
8001c520:	b00f883a 	mov	r7,r22
8001c524:	000d883a 	mov	r6,zero
8001c528:	d9400904 	addi	r5,sp,36
8001c52c:	90000005 	stb	zero,0(r18)
8001c530:	b83ee83a 	callr	r23
8001c534:	d9000217 	ldw	r4,8(sp)
8001c538:	a0c0080c 	andi	r3,r20,32
8001c53c:	24400104 	addi	r17,r4,4
8001c540:	1800a226 	beq	r3,zero,8001c7cc <__ssvfiscanf_r+0xb64>
8001c544:	20c00017 	ldw	r3,0(r4)
8001c548:	18800015 	stw	r2,0(r3)
8001c54c:	d8800117 	ldw	r2,4(sp)
8001c550:	dc400215 	stw	r17,8(sp)
8001c554:	10800044 	addi	r2,r2,1
8001c558:	d8800115 	stw	r2,4(sp)
8001c55c:	d8800904 	addi	r2,sp,36
8001c560:	9093c83a 	sub	r9,r18,r2
8001c564:	d8800317 	ldw	r2,12(sp)
8001c568:	48a9883a 	add	r20,r9,r2
8001c56c:	8521883a 	add	r16,r16,r20
8001c570:	003dd906 	br	8001bcd8 <_gp+0xfffeaf64>
8001c574:	b08002d0 	cmplti	r2,r22,11
8001c578:	103fe01e 	bne	r2,zero,8001c4fc <_gp+0xfffeb788>
8001c57c:	00bd1fc4 	movi	r2,-2945
8001c580:	a0a8703a 	and	r20,r20,r2
8001c584:	003fd306 	br	8001c4d4 <_gp+0xfffeb760>
8001c588:	b5ad883a 	add	r22,r22,r22
8001c58c:	00a000b4 	movhi	r2,32770
8001c590:	b085883a 	add	r2,r22,r2
8001c594:	159be20f 	ldh	r22,28552(r2)
8001c598:	b0800250 	cmplti	r2,r22,9
8001c59c:	103ff726 	beq	r2,zero,8001c57c <_gp+0xfffeb808>
8001c5a0:	003fd606 	br	8001c4fc <_gp+0xfffeb788>
8001c5a4:	b5ad883a 	add	r22,r22,r22
8001c5a8:	00a000b4 	movhi	r2,32770
8001c5ac:	b085883a 	add	r2,r22,r2
8001c5b0:	159be20f 	ldh	r22,28552(r2)
8001c5b4:	00bd1fc4 	movi	r2,-2945
8001c5b8:	a0a8703a 	and	r20,r20,r2
8001c5bc:	003fc506 	br	8001c4d4 <_gp+0xfffeb760>
8001c5c0:	a082000c 	andi	r2,r20,2048
8001c5c4:	103fc326 	beq	r2,zero,8001c4d4 <_gp+0xfffeb760>
8001c5c8:	b000021e 	bne	r22,zero,8001c5d4 <__ssvfiscanf_r+0x96c>
8001c5cc:	a5008014 	ori	r20,r20,512
8001c5d0:	05800204 	movi	r22,8
8001c5d4:	a081000c 	andi	r2,r20,1024
8001c5d8:	1000e11e 	bne	r2,zero,8001c960 <__ssvfiscanf_r+0xcf8>
8001c5dc:	00bf1fc4 	movi	r2,-897
8001c5e0:	a0a8703a 	and	r20,r20,r2
8001c5e4:	d8800417 	ldw	r2,16(sp)
8001c5e8:	10000326 	beq	r2,zero,8001c5f8 <__ssvfiscanf_r+0x990>
8001c5ec:	10bfffc4 	addi	r2,r2,-1
8001c5f0:	d8800415 	stw	r2,16(sp)
8001c5f4:	8c400044 	addi	r17,r17,1
8001c5f8:	d8800317 	ldw	r2,12(sp)
8001c5fc:	10800044 	addi	r2,r2,1
8001c600:	d8800315 	stw	r2,12(sp)
8001c604:	e0800117 	ldw	r2,4(fp)
8001c608:	10bfffc4 	addi	r2,r2,-1
8001c60c:	e0800115 	stw	r2,4(fp)
8001c610:	00bfb616 	blt	zero,r2,8001c4ec <_gp+0xfffeb778>
8001c614:	e00b883a 	mov	r5,fp
8001c618:	a809883a 	mov	r4,r21
8001c61c:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c620:	103fb426 	beq	r2,zero,8001c4f4 <_gp+0xfffeb780>
8001c624:	003fb506 	br	8001c4fc <_gp+0xfffeb788>
8001c628:	a080200c 	andi	r2,r20,128
8001c62c:	103fb326 	beq	r2,zero,8001c4fc <_gp+0xfffeb788>
8001c630:	00bfdfc4 	movi	r2,-129
8001c634:	a0a8703a 	and	r20,r20,r2
8001c638:	003fa606 	br	8001c4d4 <_gp+0xfffeb760>
8001c63c:	8800011e 	bne	r17,zero,8001c644 <__ssvfiscanf_r+0x9dc>
8001c640:	047fffc4 	movi	r17,-1
8001c644:	9500004c 	andi	r20,r18,1
8001c648:	9480040c 	andi	r18,r18,16
8001c64c:	a000861e 	bne	r20,zero,8001c868 <__ssvfiscanf_r+0xc00>
8001c650:	9000271e 	bne	r18,zero,8001c6f0 <__ssvfiscanf_r+0xa88>
8001c654:	d8800217 	ldw	r2,8(sp)
8001c658:	14800017 	ldw	r18,0(r2)
8001c65c:	10800104 	addi	r2,r2,4
8001c660:	d8800215 	stw	r2,8(sp)
8001c664:	9029883a 	mov	r20,r18
8001c668:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001c66c:	e1000017 	ldw	r4,0(fp)
8001c670:	8c7fffc4 	addi	r17,r17,-1
8001c674:	20c00003 	ldbu	r3,0(r4)
8001c678:	21400044 	addi	r5,r4,1
8001c67c:	10c5883a 	add	r2,r2,r3
8001c680:	10800043 	ldbu	r2,1(r2)
8001c684:	1080020c 	andi	r2,r2,8
8001c688:	10000e1e 	bne	r2,zero,8001c6c4 <__ssvfiscanf_r+0xa5c>
8001c68c:	e0800117 	ldw	r2,4(fp)
8001c690:	e1400015 	stw	r5,0(fp)
8001c694:	a5000044 	addi	r20,r20,1
8001c698:	10bfffc4 	addi	r2,r2,-1
8001c69c:	e0800115 	stw	r2,4(fp)
8001c6a0:	20800003 	ldbu	r2,0(r4)
8001c6a4:	a0bfffc5 	stb	r2,-1(r20)
8001c6a8:	88000626 	beq	r17,zero,8001c6c4 <__ssvfiscanf_r+0xa5c>
8001c6ac:	e0800117 	ldw	r2,4(fp)
8001c6b0:	00bfed16 	blt	zero,r2,8001c668 <_gp+0xfffeb8f4>
8001c6b4:	e00b883a 	mov	r5,fp
8001c6b8:	a809883a 	mov	r4,r21
8001c6bc:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c6c0:	103fe926 	beq	r2,zero,8001c668 <_gp+0xfffeb8f4>
8001c6c4:	d8800117 	ldw	r2,4(sp)
8001c6c8:	a4a5c83a 	sub	r18,r20,r18
8001c6cc:	a0000005 	stb	zero,0(r20)
8001c6d0:	10800044 	addi	r2,r2,1
8001c6d4:	84a1883a 	add	r16,r16,r18
8001c6d8:	d8800115 	stw	r2,4(sp)
8001c6dc:	003d7e06 	br	8001bcd8 <_gp+0xfffeaf64>
8001c6e0:	e00b883a 	mov	r5,fp
8001c6e4:	a809883a 	mov	r4,r21
8001c6e8:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c6ec:	103f9f1e 	bne	r2,zero,8001c56c <_gp+0xfffeb7f8>
8001c6f0:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001c6f4:	e0c00017 	ldw	r3,0(fp)
8001c6f8:	19000003 	ldbu	r4,0(r3)
8001c6fc:	18c00044 	addi	r3,r3,1
8001c700:	1105883a 	add	r2,r2,r4
8001c704:	10800043 	ldbu	r2,1(r2)
8001c708:	1080020c 	andi	r2,r2,8
8001c70c:	103f971e 	bne	r2,zero,8001c56c <_gp+0xfffeb7f8>
8001c710:	e0800117 	ldw	r2,4(fp)
8001c714:	e0c00015 	stw	r3,0(fp)
8001c718:	a5000044 	addi	r20,r20,1
8001c71c:	10bfffc4 	addi	r2,r2,-1
8001c720:	e0800115 	stw	r2,4(fp)
8001c724:	8d3f9126 	beq	r17,r20,8001c56c <_gp+0xfffeb7f8>
8001c728:	00bff116 	blt	zero,r2,8001c6f0 <_gp+0xfffeb97c>
8001c72c:	003fec06 	br	8001c6e0 <_gp+0xfffeb96c>
8001c730:	d8000415 	stw	zero,16(sp)
8001c734:	003f0406 	br	8001c348 <_gp+0xfffeb5d4>
8001c738:	d8c00217 	ldw	r3,8(sp)
8001c73c:	1c800017 	ldw	r18,0(r3)
8001c740:	18c00104 	addi	r3,r3,4
8001c744:	d8c00215 	stw	r3,8(sp)
8001c748:	9029883a 	mov	r20,r18
8001c74c:	00000106 	br	8001c754 <__ssvfiscanf_r+0xaec>
8001c750:	e0800017 	ldw	r2,0(fp)
8001c754:	10c00003 	ldbu	r3,0(r2)
8001c758:	d9405304 	addi	r5,sp,332
8001c75c:	11000044 	addi	r4,r2,1
8001c760:	28c7883a 	add	r3,r5,r3
8001c764:	18ffc007 	ldb	r3,-256(r3)
8001c768:	8c7fffc4 	addi	r17,r17,-1
8001c76c:	18000f26 	beq	r3,zero,8001c7ac <__ssvfiscanf_r+0xb44>
8001c770:	e0c00117 	ldw	r3,4(fp)
8001c774:	e1000015 	stw	r4,0(fp)
8001c778:	a5000044 	addi	r20,r20,1
8001c77c:	18ffffc4 	addi	r3,r3,-1
8001c780:	e0c00115 	stw	r3,4(fp)
8001c784:	10800003 	ldbu	r2,0(r2)
8001c788:	a0bfffc5 	stb	r2,-1(r20)
8001c78c:	88000726 	beq	r17,zero,8001c7ac <__ssvfiscanf_r+0xb44>
8001c790:	e0800117 	ldw	r2,4(fp)
8001c794:	00bfee16 	blt	zero,r2,8001c750 <_gp+0xfffeb9dc>
8001c798:	e00b883a 	mov	r5,fp
8001c79c:	a809883a 	mov	r4,r21
8001c7a0:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c7a4:	103fea26 	beq	r2,zero,8001c750 <_gp+0xfffeb9dc>
8001c7a8:	953e1726 	beq	r18,r20,8001c008 <_gp+0xfffeb294>
8001c7ac:	a4a5c83a 	sub	r18,r20,r18
8001c7b0:	903df226 	beq	r18,zero,8001bf7c <_gp+0xfffeb208>
8001c7b4:	d8800117 	ldw	r2,4(sp)
8001c7b8:	a0000005 	stb	zero,0(r20)
8001c7bc:	84a1883a 	add	r16,r16,r18
8001c7c0:	10800044 	addi	r2,r2,1
8001c7c4:	d8800115 	stw	r2,4(sp)
8001c7c8:	003d4306 	br	8001bcd8 <_gp+0xfffeaf64>
8001c7cc:	a0c0010c 	andi	r3,r20,4
8001c7d0:	18005f1e 	bne	r3,zero,8001c950 <__ssvfiscanf_r+0xce8>
8001c7d4:	a0c0004c 	andi	r3,r20,1
8001c7d8:	18006a1e 	bne	r3,zero,8001c984 <__ssvfiscanf_r+0xd1c>
8001c7dc:	a280008c 	andi	r10,r20,2
8001c7e0:	50006826 	beq	r10,zero,8001c984 <__ssvfiscanf_r+0xd1c>
8001c7e4:	00a000b4 	movhi	r2,32770
8001c7e8:	10a9e104 	addi	r2,r2,-22652
8001c7ec:	b00f883a 	mov	r7,r22
8001c7f0:	000d883a 	mov	r6,zero
8001c7f4:	d9400904 	addi	r5,sp,36
8001c7f8:	a809883a 	mov	r4,r21
8001c7fc:	b880e526 	beq	r23,r2,8001cb94 <__ssvfiscanf_r+0xf2c>
8001c800:	001f0d80 	call	8001f0d8 <_strtoll_r>
8001c804:	d9000217 	ldw	r4,8(sp)
8001c808:	21000017 	ldw	r4,0(r4)
8001c80c:	20800015 	stw	r2,0(r4)
8001c810:	20c00115 	stw	r3,4(r4)
8001c814:	003f4d06 	br	8001c54c <_gp+0xfffeb7d8>
8001c818:	dc800217 	ldw	r18,8(sp)
8001c81c:	df000015 	stw	fp,0(sp)
8001c820:	880f883a 	mov	r7,r17
8001c824:	91400017 	ldw	r5,0(r18)
8001c828:	01800044 	movi	r6,1
8001c82c:	a809883a 	mov	r4,r21
8001c830:	001bb700 	call	8001bb70 <_sfread_r>
8001c834:	90c00104 	addi	r3,r18,4
8001c838:	103df326 	beq	r2,zero,8001c008 <_gp+0xfffeb294>
8001c83c:	80a1883a 	add	r16,r16,r2
8001c840:	d8800117 	ldw	r2,4(sp)
8001c844:	d8c00215 	stw	r3,8(sp)
8001c848:	10800044 	addi	r2,r2,1
8001c84c:	d8800115 	stw	r2,4(sp)
8001c850:	003d2106 	br	8001bcd8 <_gp+0xfffeaf64>
8001c854:	e00b883a 	mov	r5,fp
8001c858:	a809883a 	mov	r4,r21
8001c85c:	001bb000 	call	8001bb00 <__ssrefill_r>
8001c860:	103dd626 	beq	r2,zero,8001bfbc <_gp+0xfffeb248>
8001c864:	003de806 	br	8001c008 <_gp+0xfffeb294>
8001c868:	d8800704 	addi	r2,sp,28
8001c86c:	01800204 	movi	r6,8
8001c870:	000b883a 	mov	r5,zero
8001c874:	1009883a 	mov	r4,r2
8001c878:	d8800515 	stw	r2,20(sp)
8001c87c:	00105d80 	call	800105d8 <memset>
8001c880:	90003a26 	beq	r18,zero,8001c96c <__ssvfiscanf_r+0xd04>
8001c884:	d8800604 	addi	r2,sp,24
8001c888:	d8800315 	stw	r2,12(sp)
8001c88c:	0029883a 	mov	r20,zero
8001c890:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001c894:	e0c00017 	ldw	r3,0(fp)
8001c898:	18c00003 	ldbu	r3,0(r3)
8001c89c:	10c5883a 	add	r2,r2,r3
8001c8a0:	10800043 	ldbu	r2,1(r2)
8001c8a4:	1080020c 	andi	r2,r2,8
8001c8a8:	1000441e 	bne	r2,zero,8001c9bc <__ssvfiscanf_r+0xd54>
8001c8ac:	88004326 	beq	r17,zero,8001c9bc <__ssvfiscanf_r+0xd54>
8001c8b0:	000fc280 	call	8000fc28 <__locale_mb_cur_max>
8001c8b4:	153dd426 	beq	r2,r20,8001c008 <_gp+0xfffeb294>
8001c8b8:	e0800017 	ldw	r2,0(fp)
8001c8bc:	e1000117 	ldw	r4,4(fp)
8001c8c0:	d9405304 	addi	r5,sp,332
8001c8c4:	12400003 	ldbu	r9,0(r2)
8001c8c8:	10800044 	addi	r2,r2,1
8001c8cc:	e0800015 	stw	r2,0(fp)
8001c8d0:	d8800517 	ldw	r2,20(sp)
8001c8d4:	213fffc4 	addi	r4,r4,-1
8001c8d8:	a0c00044 	addi	r3,r20,1
8001c8dc:	e1000115 	stw	r4,4(fp)
8001c8e0:	2d29883a 	add	r20,r5,r20
8001c8e4:	d9400317 	ldw	r5,12(sp)
8001c8e8:	d8800015 	stw	r2,0(sp)
8001c8ec:	a809883a 	mov	r4,r21
8001c8f0:	180f883a 	mov	r7,r3
8001c8f4:	d9800904 	addi	r6,sp,36
8001c8f8:	a27fb605 	stb	r9,-296(r20)
8001c8fc:	d8c00415 	stw	r3,16(sp)
8001c900:	001e8900 	call	8001e890 <_mbrtowc_r>
8001c904:	113fffe0 	cmpeqi	r4,r2,-1
8001c908:	203dbf1e 	bne	r4,zero,8001c008 <_gp+0xfffeb294>
8001c90c:	d8c00417 	ldw	r3,16(sp)
8001c910:	1000981e 	bne	r2,zero,8001cb74 <__ssvfiscanf_r+0xf0c>
8001c914:	d8800317 	ldw	r2,12(sp)
8001c918:	0009883a 	mov	r4,zero
8001c91c:	10000015 	stw	zero,0(r2)
8001c920:	d8c00415 	stw	r3,16(sp)
8001c924:	001e7ec0 	call	8001e7ec <iswspace>
8001c928:	d8c00417 	ldw	r3,16(sp)
8001c92c:	1000191e 	bne	r2,zero,8001c994 <__ssvfiscanf_r+0xd2c>
8001c930:	80e1883a 	add	r16,r16,r3
8001c934:	8c7fffc4 	addi	r17,r17,-1
8001c938:	9000941e 	bne	r18,zero,8001cb8c <__ssvfiscanf_r+0xf24>
8001c93c:	d8800317 	ldw	r2,12(sp)
8001c940:	0007883a 	mov	r3,zero
8001c944:	10800104 	addi	r2,r2,4
8001c948:	d8800315 	stw	r2,12(sp)
8001c94c:	00008b06 	br	8001cb7c <__ssvfiscanf_r+0xf14>
8001c950:	d8c00217 	ldw	r3,8(sp)
8001c954:	18c00017 	ldw	r3,0(r3)
8001c958:	1880000d 	sth	r2,0(r3)
8001c95c:	003efb06 	br	8001c54c <_gp+0xfffeb7d8>
8001c960:	00be9fc4 	movi	r2,-1409
8001c964:	a0a8703a 	and	r20,r20,r2
8001c968:	003eda06 	br	8001c4d4 <_gp+0xfffeb760>
8001c96c:	d8800217 	ldw	r2,8(sp)
8001c970:	10c00017 	ldw	r3,0(r2)
8001c974:	10800104 	addi	r2,r2,4
8001c978:	d8800215 	stw	r2,8(sp)
8001c97c:	d8c00315 	stw	r3,12(sp)
8001c980:	003fc206 	br	8001c88c <_gp+0xfffebb18>
8001c984:	d8c00217 	ldw	r3,8(sp)
8001c988:	18c00017 	ldw	r3,0(r3)
8001c98c:	18800015 	stw	r2,0(r3)
8001c990:	003eee06 	br	8001c54c <_gp+0xfffeb7d8>
8001c994:	18000926 	beq	r3,zero,8001c9bc <__ssvfiscanf_r+0xd54>
8001c998:	d8800904 	addi	r2,sp,36
8001c99c:	10e3883a 	add	r17,r2,r3
8001c9a0:	897fffc3 	ldbu	r5,-1(r17)
8001c9a4:	e00d883a 	mov	r6,fp
8001c9a8:	a809883a 	mov	r4,r21
8001c9ac:	001ba100 	call	8001ba10 <_sungetc_r>
8001c9b0:	8c7fffc4 	addi	r17,r17,-1
8001c9b4:	d8800904 	addi	r2,sp,36
8001c9b8:	147ff91e 	bne	r2,r17,8001c9a0 <_gp+0xfffebc2c>
8001c9bc:	903cc61e 	bne	r18,zero,8001bcd8 <_gp+0xfffeaf64>
8001c9c0:	d8800317 	ldw	r2,12(sp)
8001c9c4:	10000015 	stw	zero,0(r2)
8001c9c8:	d8800117 	ldw	r2,4(sp)
8001c9cc:	10800044 	addi	r2,r2,1
8001c9d0:	d8800115 	stw	r2,4(sp)
8001c9d4:	003cc006 	br	8001bcd8 <_gp+0xfffeaf64>
8001c9d8:	903d6826 	beq	r18,zero,8001bf7c <_gp+0xfffeb208>
8001c9dc:	84a1883a 	add	r16,r16,r18
8001c9e0:	003cbd06 	br	8001bcd8 <_gp+0xfffeaf64>
8001c9e4:	d8800704 	addi	r2,sp,28
8001c9e8:	01800204 	movi	r6,8
8001c9ec:	000b883a 	mov	r5,zero
8001c9f0:	1009883a 	mov	r4,r2
8001c9f4:	d8800515 	stw	r2,20(sp)
8001c9f8:	00105d80 	call	800105d8 <memset>
8001c9fc:	d8800417 	ldw	r2,16(sp)
8001ca00:	10005a1e 	bne	r2,zero,8001cb6c <__ssvfiscanf_r+0xf04>
8001ca04:	d8800217 	ldw	r2,8(sp)
8001ca08:	14800017 	ldw	r18,0(r2)
8001ca0c:	10800104 	addi	r2,r2,4
8001ca10:	d8800215 	stw	r2,8(sp)
8001ca14:	0029883a 	mov	r20,zero
8001ca18:	000fc280 	call	8000fc28 <__locale_mb_cur_max>
8001ca1c:	153d7a26 	beq	r2,r20,8001c008 <_gp+0xfffeb294>
8001ca20:	e0800017 	ldw	r2,0(fp)
8001ca24:	e1000117 	ldw	r4,4(fp)
8001ca28:	d8c05304 	addi	r3,sp,332
8001ca2c:	12800003 	ldbu	r10,0(r2)
8001ca30:	10800044 	addi	r2,r2,1
8001ca34:	e0800015 	stw	r2,0(fp)
8001ca38:	d8800517 	ldw	r2,20(sp)
8001ca3c:	213fffc4 	addi	r4,r4,-1
8001ca40:	e1000115 	stw	r4,4(fp)
8001ca44:	a2400044 	addi	r9,r20,1
8001ca48:	1d07883a 	add	r3,r3,r20
8001ca4c:	d8800015 	stw	r2,0(sp)
8001ca50:	1abfb605 	stb	r10,-296(r3)
8001ca54:	480f883a 	mov	r7,r9
8001ca58:	d9800904 	addi	r6,sp,36
8001ca5c:	900b883a 	mov	r5,r18
8001ca60:	a809883a 	mov	r4,r21
8001ca64:	da400315 	stw	r9,12(sp)
8001ca68:	001e8900 	call	8001e890 <_mbrtowc_r>
8001ca6c:	10ffffe0 	cmpeqi	r3,r2,-1
8001ca70:	183d651e 	bne	r3,zero,8001c008 <_gp+0xfffeb294>
8001ca74:	da400317 	ldw	r9,12(sp)
8001ca78:	1000131e 	bne	r2,zero,8001cac8 <__ssvfiscanf_r+0xe60>
8001ca7c:	d8800417 	ldw	r2,16(sp)
8001ca80:	8261883a 	add	r16,r16,r9
8001ca84:	8c7fffc4 	addi	r17,r17,-1
8001ca88:	1000171e 	bne	r2,zero,8001cae8 <__ssvfiscanf_r+0xe80>
8001ca8c:	90000015 	stw	zero,0(r18)
8001ca90:	94800104 	addi	r18,r18,4
8001ca94:	0029883a 	mov	r20,zero
8001ca98:	e0800117 	ldw	r2,4(fp)
8001ca9c:	0080040e 	bge	zero,r2,8001cab0 <__ssvfiscanf_r+0xe48>
8001caa0:	883fdd1e 	bne	r17,zero,8001ca18 <_gp+0xfffebca4>
8001caa4:	d8800417 	ldw	r2,16(sp)
8001caa8:	103c8b1e 	bne	r2,zero,8001bcd8 <_gp+0xfffeaf64>
8001caac:	003fc606 	br	8001c9c8 <_gp+0xfffebc54>
8001cab0:	e00b883a 	mov	r5,fp
8001cab4:	a809883a 	mov	r4,r21
8001cab8:	001bb000 	call	8001bb00 <__ssrefill_r>
8001cabc:	103ff826 	beq	r2,zero,8001caa0 <_gp+0xfffebd2c>
8001cac0:	a03ff826 	beq	r20,zero,8001caa4 <_gp+0xfffebd30>
8001cac4:	003d5006 	br	8001c008 <_gp+0xfffeb294>
8001cac8:	10bfffa0 	cmpeqi	r2,r2,-2
8001cacc:	10000226 	beq	r2,zero,8001cad8 <__ssvfiscanf_r+0xe70>
8001cad0:	4829883a 	mov	r20,r9
8001cad4:	003ff006 	br	8001ca98 <_gp+0xfffebd24>
8001cad8:	d8800417 	ldw	r2,16(sp)
8001cadc:	8261883a 	add	r16,r16,r9
8001cae0:	8c7fffc4 	addi	r17,r17,-1
8001cae4:	103fea26 	beq	r2,zero,8001ca90 <_gp+0xfffebd1c>
8001cae8:	0029883a 	mov	r20,zero
8001caec:	003fea06 	br	8001ca98 <_gp+0xfffebd24>
8001caf0:	903d4526 	beq	r18,zero,8001c008 <_gp+0xfffeb294>
8001caf4:	84a1883a 	add	r16,r16,r18
8001caf8:	003c7706 	br	8001bcd8 <_gp+0xfffeaf64>
8001cafc:	917fffc7 	ldb	r5,-1(r18)
8001cb00:	e00d883a 	mov	r6,fp
8001cb04:	a809883a 	mov	r4,r21
8001cb08:	94bfffc4 	addi	r18,r18,-1
8001cb0c:	001ba100 	call	8001ba10 <_sungetc_r>
8001cb10:	003e7e06 	br	8001c50c <_gp+0xfffeb798>
8001cb14:	94800054 	ori	r18,r18,1
8001cb18:	bdfb5704 	addi	r23,r23,-4772
8001cb1c:	05800284 	movi	r22,10
8001cb20:	050000c4 	movi	r20,3
8001cb24:	003d4406 	br	8001c038 <_gp+0xfffeb2c4>
8001cb28:	a0800083 	ldbu	r2,2(r20)
8001cb2c:	94800094 	ori	r18,r18,2
8001cb30:	a5000084 	addi	r20,r20,2
8001cb34:	11403fcc 	andi	r5,r2,255
8001cb38:	003c7606 	br	8001bd14 <_gp+0xfffeafa0>
8001cb3c:	9080004c 	andi	r2,r18,1
8001cb40:	1000071e 	bne	r2,zero,8001cb60 <__ssvfiscanf_r+0xef8>
8001cb44:	9480008c 	andi	r18,r18,2
8001cb48:	90000526 	beq	r18,zero,8001cb60 <__ssvfiscanf_r+0xef8>
8001cb4c:	8005d7fa 	srai	r2,r16,31
8001cb50:	1c000015 	stw	r16,0(r3)
8001cb54:	d9000215 	stw	r4,8(sp)
8001cb58:	18800115 	stw	r2,4(r3)
8001cb5c:	003c5e06 	br	8001bcd8 <_gp+0xfffeaf64>
8001cb60:	1c000015 	stw	r16,0(r3)
8001cb64:	d9000215 	stw	r4,8(sp)
8001cb68:	003c5b06 	br	8001bcd8 <_gp+0xfffeaf64>
8001cb6c:	0025883a 	mov	r18,zero
8001cb70:	003fa806 	br	8001ca14 <_gp+0xfffebca0>
8001cb74:	10bfffa0 	cmpeqi	r2,r2,-2
8001cb78:	10000826 	beq	r2,zero,8001cb9c <__ssvfiscanf_r+0xf34>
8001cb7c:	e0800117 	ldw	r2,4(fp)
8001cb80:	00bd1a0e 	bge	zero,r2,8001bfec <_gp+0xfffeb278>
8001cb84:	1829883a 	mov	r20,r3
8001cb88:	003f4106 	br	8001c890 <_gp+0xfffebb1c>
8001cb8c:	0007883a 	mov	r3,zero
8001cb90:	003ffa06 	br	8001cb7c <_gp+0xfffebe08>
8001cb94:	001f4980 	call	8001f498 <_strtoull_r>
8001cb98:	003f1a06 	br	8001c804 <_gp+0xfffeba90>
8001cb9c:	d8800317 	ldw	r2,12(sp)
8001cba0:	11000017 	ldw	r4,0(r2)
8001cba4:	003f5e06 	br	8001c920 <_gp+0xfffebbac>

8001cba8 <__submore>:
8001cba8:	defffa04 	addi	sp,sp,-24
8001cbac:	dc000015 	stw	r16,0(sp)
8001cbb0:	2821883a 	mov	r16,r5
8001cbb4:	29400c17 	ldw	r5,48(r5)
8001cbb8:	dfc00515 	stw	ra,20(sp)
8001cbbc:	dd000415 	stw	r20,16(sp)
8001cbc0:	dcc00315 	stw	r19,12(sp)
8001cbc4:	dc800215 	stw	r18,8(sp)
8001cbc8:	dc400115 	stw	r17,4(sp)
8001cbcc:	80801004 	addi	r2,r16,64
8001cbd0:	28801726 	beq	r5,r2,8001cc30 <__submore+0x88>
8001cbd4:	84400d17 	ldw	r17,52(r16)
8001cbd8:	8c67883a 	add	r19,r17,r17
8001cbdc:	980d883a 	mov	r6,r19
8001cbe0:	0019ae40 	call	80019ae4 <_realloc_r>
8001cbe4:	1025883a 	mov	r18,r2
8001cbe8:	10002226 	beq	r2,zero,8001cc74 <__submore+0xcc>
8001cbec:	1469883a 	add	r20,r2,r17
8001cbf0:	880d883a 	mov	r6,r17
8001cbf4:	100b883a 	mov	r5,r2
8001cbf8:	a009883a 	mov	r4,r20
8001cbfc:	00104e80 	call	800104e8 <memcpy>
8001cc00:	0005883a 	mov	r2,zero
8001cc04:	85000015 	stw	r20,0(r16)
8001cc08:	84800c15 	stw	r18,48(r16)
8001cc0c:	84c00d15 	stw	r19,52(r16)
8001cc10:	dfc00517 	ldw	ra,20(sp)
8001cc14:	dd000417 	ldw	r20,16(sp)
8001cc18:	dcc00317 	ldw	r19,12(sp)
8001cc1c:	dc800217 	ldw	r18,8(sp)
8001cc20:	dc400117 	ldw	r17,4(sp)
8001cc24:	dc000017 	ldw	r16,0(sp)
8001cc28:	dec00604 	addi	sp,sp,24
8001cc2c:	f800283a 	ret
8001cc30:	01410004 	movi	r5,1024
8001cc34:	000fca40 	call	8000fca4 <_malloc_r>
8001cc38:	1007883a 	mov	r3,r2
8001cc3c:	10000d26 	beq	r2,zero,8001cc74 <__submore+0xcc>
8001cc40:	80801083 	ldbu	r2,66(r16)
8001cc44:	01010004 	movi	r4,1024
8001cc48:	81000d15 	stw	r4,52(r16)
8001cc4c:	80c00c15 	stw	r3,48(r16)
8001cc50:	1880ffc5 	stb	r2,1023(r3)
8001cc54:	81401043 	ldbu	r5,65(r16)
8001cc58:	1900ff44 	addi	r4,r3,1021
8001cc5c:	0005883a 	mov	r2,zero
8001cc60:	1940ff85 	stb	r5,1022(r3)
8001cc64:	81401003 	ldbu	r5,64(r16)
8001cc68:	1940ff45 	stb	r5,1021(r3)
8001cc6c:	81000015 	stw	r4,0(r16)
8001cc70:	003fe706 	br	8001cc10 <_gp+0xfffebe9c>
8001cc74:	00bfffc4 	movi	r2,-1
8001cc78:	003fe506 	br	8001cc10 <_gp+0xfffebe9c>

8001cc7c <_ungetc_r>:
8001cc7c:	defffb04 	addi	sp,sp,-20
8001cc80:	dfc00415 	stw	ra,16(sp)
8001cc84:	dcc00315 	stw	r19,12(sp)
8001cc88:	dc800215 	stw	r18,8(sp)
8001cc8c:	dc400115 	stw	r17,4(sp)
8001cc90:	dc000015 	stw	r16,0(sp)
8001cc94:	28bfffd8 	cmpnei	r2,r5,-1
8001cc98:	10003226 	beq	r2,zero,8001cd64 <_ungetc_r+0xe8>
8001cc9c:	2025883a 	mov	r18,r4
8001cca0:	3021883a 	mov	r16,r6
8001cca4:	2823883a 	mov	r17,r5
8001cca8:	20000226 	beq	r4,zero,8001ccb4 <_ungetc_r+0x38>
8001ccac:	20800e17 	ldw	r2,56(r4)
8001ccb0:	10002e26 	beq	r2,zero,8001cd6c <_ungetc_r+0xf0>
8001ccb4:	80c0030b 	ldhu	r3,12(r16)
8001ccb8:	1888000c 	andi	r2,r3,8192
8001ccbc:	1000051e 	bne	r2,zero,8001ccd4 <_ungetc_r+0x58>
8001ccc0:	80801917 	ldw	r2,100(r16)
8001ccc4:	0137ffc4 	movi	r4,-8193
8001ccc8:	18c80014 	ori	r3,r3,8192
8001cccc:	1104703a 	and	r2,r2,r4
8001ccd0:	80801915 	stw	r2,100(r16)
8001ccd4:	00bff7c4 	movi	r2,-33
8001ccd8:	1884703a 	and	r2,r3,r2
8001ccdc:	8080030d 	sth	r2,12(r16)
8001cce0:	1980010c 	andi	r6,r3,4
8001cce4:	3000061e 	bne	r6,zero,8001cd00 <_ungetc_r+0x84>
8001cce8:	1900040c 	andi	r4,r3,16
8001ccec:	20001d26 	beq	r4,zero,8001cd64 <_ungetc_r+0xe8>
8001ccf0:	18c0020c 	andi	r3,r3,8
8001ccf4:	1800341e 	bne	r3,zero,8001cdc8 <_ungetc_r+0x14c>
8001ccf8:	10800114 	ori	r2,r2,4
8001ccfc:	8080030d 	sth	r2,12(r16)
8001cd00:	80c00c17 	ldw	r3,48(r16)
8001cd04:	8cc03fcc 	andi	r19,r17,255
8001cd08:	80800117 	ldw	r2,4(r16)
8001cd0c:	18001c26 	beq	r3,zero,8001cd80 <_ungetc_r+0x104>
8001cd10:	80c00d17 	ldw	r3,52(r16)
8001cd14:	10c00f0e 	bge	r2,r3,8001cd54 <_ungetc_r+0xd8>
8001cd18:	80800017 	ldw	r2,0(r16)
8001cd1c:	10ffffc4 	addi	r3,r2,-1
8001cd20:	80c00015 	stw	r3,0(r16)
8001cd24:	147fffc5 	stb	r17,-1(r2)
8001cd28:	80800117 	ldw	r2,4(r16)
8001cd2c:	10800044 	addi	r2,r2,1
8001cd30:	80800115 	stw	r2,4(r16)
8001cd34:	9805883a 	mov	r2,r19
8001cd38:	dfc00417 	ldw	ra,16(sp)
8001cd3c:	dcc00317 	ldw	r19,12(sp)
8001cd40:	dc800217 	ldw	r18,8(sp)
8001cd44:	dc400117 	ldw	r17,4(sp)
8001cd48:	dc000017 	ldw	r16,0(sp)
8001cd4c:	dec00504 	addi	sp,sp,20
8001cd50:	f800283a 	ret
8001cd54:	800b883a 	mov	r5,r16
8001cd58:	9009883a 	mov	r4,r18
8001cd5c:	001cba80 	call	8001cba8 <__submore>
8001cd60:	103fed26 	beq	r2,zero,8001cd18 <_gp+0xfffebfa4>
8001cd64:	04ffffc4 	movi	r19,-1
8001cd68:	003ff206 	br	8001cd34 <_gp+0xfffebfc0>
8001cd6c:	0017a4c0 	call	80017a4c <__sinit>
8001cd70:	80c0030b 	ldhu	r3,12(r16)
8001cd74:	1888000c 	andi	r2,r3,8192
8001cd78:	103fd61e 	bne	r2,zero,8001ccd4 <_gp+0xfffebf60>
8001cd7c:	003fd006 	br	8001ccc0 <_gp+0xfffebf4c>
8001cd80:	81000417 	ldw	r4,16(r16)
8001cd84:	80c00017 	ldw	r3,0(r16)
8001cd88:	20000326 	beq	r4,zero,8001cd98 <_ungetc_r+0x11c>
8001cd8c:	20c0022e 	bgeu	r4,r3,8001cd98 <_ungetc_r+0x11c>
8001cd90:	193fffc3 	ldbu	r4,-1(r3)
8001cd94:	24c01526 	beq	r4,r19,8001cdec <_ungetc_r+0x170>
8001cd98:	80800f15 	stw	r2,60(r16)
8001cd9c:	008000c4 	movi	r2,3
8001cda0:	81401004 	addi	r5,r16,64
8001cda4:	81001084 	addi	r4,r16,66
8001cda8:	80800d15 	stw	r2,52(r16)
8001cdac:	00800044 	movi	r2,1
8001cdb0:	80c00e15 	stw	r3,56(r16)
8001cdb4:	81400c15 	stw	r5,48(r16)
8001cdb8:	84401085 	stb	r17,66(r16)
8001cdbc:	81000015 	stw	r4,0(r16)
8001cdc0:	80800115 	stw	r2,4(r16)
8001cdc4:	003fdb06 	br	8001cd34 <_gp+0xfffebfc0>
8001cdc8:	800b883a 	mov	r5,r16
8001cdcc:	9009883a 	mov	r4,r18
8001cdd0:	00176ac0 	call	800176ac <_fflush_r>
8001cdd4:	103fe31e 	bne	r2,zero,8001cd64 <_gp+0xfffebff0>
8001cdd8:	8080030b 	ldhu	r2,12(r16)
8001cddc:	80000215 	stw	zero,8(r16)
8001cde0:	80000615 	stw	zero,24(r16)
8001cde4:	10bffdcc 	andi	r2,r2,65527
8001cde8:	003fc306 	br	8001ccf8 <_gp+0xfffebf84>
8001cdec:	18ffffc4 	addi	r3,r3,-1
8001cdf0:	10800044 	addi	r2,r2,1
8001cdf4:	80c00015 	stw	r3,0(r16)
8001cdf8:	80800115 	stw	r2,4(r16)
8001cdfc:	003fcd06 	br	8001cd34 <_gp+0xfffebfc0>

8001ce00 <ungetc>:
8001ce00:	00a000f4 	movhi	r2,32771
8001ce04:	280d883a 	mov	r6,r5
8001ce08:	200b883a 	mov	r5,r4
8001ce0c:	11235e17 	ldw	r4,-29320(r2)
8001ce10:	001cc7c1 	jmpi	8001cc7c <_ungetc_r>

8001ce14 <__sprint_r.part.0>:
8001ce14:	28801917 	ldw	r2,100(r5)
8001ce18:	defff604 	addi	sp,sp,-40
8001ce1c:	dd000415 	stw	r20,16(sp)
8001ce20:	dfc00915 	stw	ra,36(sp)
8001ce24:	df000815 	stw	fp,32(sp)
8001ce28:	ddc00715 	stw	r23,28(sp)
8001ce2c:	dd800615 	stw	r22,24(sp)
8001ce30:	dd400515 	stw	r21,20(sp)
8001ce34:	dcc00315 	stw	r19,12(sp)
8001ce38:	dc800215 	stw	r18,8(sp)
8001ce3c:	dc400115 	stw	r17,4(sp)
8001ce40:	dc000015 	stw	r16,0(sp)
8001ce44:	1088000c 	andi	r2,r2,8192
8001ce48:	3029883a 	mov	r20,r6
8001ce4c:	10002c26 	beq	r2,zero,8001cf00 <__sprint_r.part.0+0xec>
8001ce50:	30800217 	ldw	r2,8(r6)
8001ce54:	2823883a 	mov	r17,r5
8001ce58:	2027883a 	mov	r19,r4
8001ce5c:	35400017 	ldw	r21,0(r6)
8001ce60:	05ffff04 	movi	r23,-4
8001ce64:	10002426 	beq	r2,zero,8001cef8 <__sprint_r.part.0+0xe4>
8001ce68:	ad800117 	ldw	r22,4(r21)
8001ce6c:	ac000017 	ldw	r16,0(r21)
8001ce70:	b024d0ba 	srli	r18,r22,2
8001ce74:	90001b26 	beq	r18,zero,8001cee4 <__sprint_r.part.0+0xd0>
8001ce78:	0039883a 	mov	fp,zero
8001ce7c:	00000206 	br	8001ce88 <__sprint_r.part.0+0x74>
8001ce80:	84000104 	addi	r16,r16,4
8001ce84:	97001626 	beq	r18,fp,8001cee0 <__sprint_r.part.0+0xcc>
8001ce88:	81400017 	ldw	r5,0(r16)
8001ce8c:	880d883a 	mov	r6,r17
8001ce90:	9809883a 	mov	r4,r19
8001ce94:	001e6940 	call	8001e694 <_fputwc_r>
8001ce98:	10bfffe0 	cmpeqi	r2,r2,-1
8001ce9c:	e7000044 	addi	fp,fp,1
8001cea0:	103ff726 	beq	r2,zero,8001ce80 <_gp+0xfffec10c>
8001cea4:	00bfffc4 	movi	r2,-1
8001cea8:	a0000215 	stw	zero,8(r20)
8001ceac:	a0000115 	stw	zero,4(r20)
8001ceb0:	dfc00917 	ldw	ra,36(sp)
8001ceb4:	df000817 	ldw	fp,32(sp)
8001ceb8:	ddc00717 	ldw	r23,28(sp)
8001cebc:	dd800617 	ldw	r22,24(sp)
8001cec0:	dd400517 	ldw	r21,20(sp)
8001cec4:	dd000417 	ldw	r20,16(sp)
8001cec8:	dcc00317 	ldw	r19,12(sp)
8001cecc:	dc800217 	ldw	r18,8(sp)
8001ced0:	dc400117 	ldw	r17,4(sp)
8001ced4:	dc000017 	ldw	r16,0(sp)
8001ced8:	dec00a04 	addi	sp,sp,40
8001cedc:	f800283a 	ret
8001cee0:	a0800217 	ldw	r2,8(r20)
8001cee4:	b5ec703a 	and	r22,r22,r23
8001cee8:	1585c83a 	sub	r2,r2,r22
8001ceec:	a0800215 	stw	r2,8(r20)
8001cef0:	ad400204 	addi	r21,r21,8
8001cef4:	103fdc1e 	bne	r2,zero,8001ce68 <_gp+0xfffec0f4>
8001cef8:	0005883a 	mov	r2,zero
8001cefc:	003fea06 	br	8001cea8 <_gp+0xfffec134>
8001cf00:	0017ea00 	call	80017ea0 <__sfvwrite_r>
8001cf04:	003fe806 	br	8001cea8 <_gp+0xfffec134>

8001cf08 <__sprint_r>:
8001cf08:	30c00217 	ldw	r3,8(r6)
8001cf0c:	18000126 	beq	r3,zero,8001cf14 <__sprint_r+0xc>
8001cf10:	001ce141 	jmpi	8001ce14 <__sprint_r.part.0>
8001cf14:	30000115 	stw	zero,4(r6)
8001cf18:	0005883a 	mov	r2,zero
8001cf1c:	f800283a 	ret

8001cf20 <___vfiprintf_internal_r>:
8001cf20:	deffce04 	addi	sp,sp,-200
8001cf24:	ddc02f15 	stw	r23,188(sp)
8001cf28:	dd002c15 	stw	r20,176(sp)
8001cf2c:	dfc03115 	stw	ra,196(sp)
8001cf30:	df003015 	stw	fp,192(sp)
8001cf34:	dd802e15 	stw	r22,184(sp)
8001cf38:	dd402d15 	stw	r21,180(sp)
8001cf3c:	dcc02b15 	stw	r19,172(sp)
8001cf40:	dc802a15 	stw	r18,168(sp)
8001cf44:	dc402915 	stw	r17,164(sp)
8001cf48:	dc002815 	stw	r16,160(sp)
8001cf4c:	d9000115 	stw	r4,4(sp)
8001cf50:	d9c00215 	stw	r7,8(sp)
8001cf54:	2829883a 	mov	r20,r5
8001cf58:	302f883a 	mov	r23,r6
8001cf5c:	20000226 	beq	r4,zero,8001cf68 <___vfiprintf_internal_r+0x48>
8001cf60:	20800e17 	ldw	r2,56(r4)
8001cf64:	1002bf26 	beq	r2,zero,8001da64 <___vfiprintf_internal_r+0xb44>
8001cf68:	a080030b 	ldhu	r2,12(r20)
8001cf6c:	10c8000c 	andi	r3,r2,8192
8001cf70:	1800061e 	bne	r3,zero,8001cf8c <___vfiprintf_internal_r+0x6c>
8001cf74:	a0c01917 	ldw	r3,100(r20)
8001cf78:	0137ffc4 	movi	r4,-8193
8001cf7c:	10880014 	ori	r2,r2,8192
8001cf80:	1906703a 	and	r3,r3,r4
8001cf84:	a080030d 	sth	r2,12(r20)
8001cf88:	a0c01915 	stw	r3,100(r20)
8001cf8c:	10c0020c 	andi	r3,r2,8
8001cf90:	18018826 	beq	r3,zero,8001d5b4 <___vfiprintf_internal_r+0x694>
8001cf94:	a0c00417 	ldw	r3,16(r20)
8001cf98:	18018626 	beq	r3,zero,8001d5b4 <___vfiprintf_internal_r+0x694>
8001cf9c:	1080068c 	andi	r2,r2,26
8001cfa0:	10800298 	cmpnei	r2,r2,10
8001cfa4:	10018b26 	beq	r2,zero,8001d5d4 <___vfiprintf_internal_r+0x6b4>
8001cfa8:	df001804 	addi	fp,sp,96
8001cfac:	df000b15 	stw	fp,44(sp)
8001cfb0:	d8000d15 	stw	zero,52(sp)
8001cfb4:	d8000c15 	stw	zero,48(sp)
8001cfb8:	e021883a 	mov	r16,fp
8001cfbc:	d8000615 	stw	zero,24(sp)
8001cfc0:	d8000015 	stw	zero,0(sp)
8001cfc4:	b8800007 	ldb	r2,0(r23)
8001cfc8:	10021f26 	beq	r2,zero,8001d848 <___vfiprintf_internal_r+0x928>
8001cfcc:	10800960 	cmpeqi	r2,r2,37
8001cfd0:	b827883a 	mov	r19,r23
8001cfd4:	10000226 	beq	r2,zero,8001cfe0 <___vfiprintf_internal_r+0xc0>
8001cfd8:	00001706 	br	8001d038 <___vfiprintf_internal_r+0x118>
8001cfdc:	18000426 	beq	r3,zero,8001cff0 <___vfiprintf_internal_r+0xd0>
8001cfe0:	9cc00044 	addi	r19,r19,1
8001cfe4:	98800007 	ldb	r2,0(r19)
8001cfe8:	10c00958 	cmpnei	r3,r2,37
8001cfec:	103ffb1e 	bne	r2,zero,8001cfdc <_gp+0xfffec268>
8001cff0:	9de3c83a 	sub	r17,r19,r23
8001cff4:	88000e26 	beq	r17,zero,8001d030 <___vfiprintf_internal_r+0x110>
8001cff8:	d8c00d17 	ldw	r3,52(sp)
8001cffc:	d8800c17 	ldw	r2,48(sp)
8001d000:	85c00015 	stw	r23,0(r16)
8001d004:	88c7883a 	add	r3,r17,r3
8001d008:	10800044 	addi	r2,r2,1
8001d00c:	d8800c15 	stw	r2,48(sp)
8001d010:	84400115 	stw	r17,4(r16)
8001d014:	d8c00d15 	stw	r3,52(sp)
8001d018:	10800208 	cmpgei	r2,r2,8
8001d01c:	1001761e 	bne	r2,zero,8001d5f8 <___vfiprintf_internal_r+0x6d8>
8001d020:	84000204 	addi	r16,r16,8
8001d024:	d8800017 	ldw	r2,0(sp)
8001d028:	1445883a 	add	r2,r2,r17
8001d02c:	d8800015 	stw	r2,0(sp)
8001d030:	98800007 	ldb	r2,0(r19)
8001d034:	10020426 	beq	r2,zero,8001d848 <___vfiprintf_internal_r+0x928>
8001d038:	98800047 	ldb	r2,1(r19)
8001d03c:	9dc00044 	addi	r23,r19,1
8001d040:	d8000a45 	stb	zero,41(sp)
8001d044:	000d883a 	mov	r6,zero
8001d048:	000f883a 	mov	r7,zero
8001d04c:	047fffc4 	movi	r17,-1
8001d050:	0025883a 	mov	r18,zero
8001d054:	0007883a 	mov	r3,zero
8001d058:	bdc00044 	addi	r23,r23,1
8001d05c:	113ff804 	addi	r4,r2,-32
8001d060:	21401668 	cmpgeui	r5,r4,89
8001d064:	2801741e 	bne	r5,zero,8001d638 <___vfiprintf_internal_r+0x718>
8001d068:	200890ba 	slli	r4,r4,2
8001d06c:	016000b4 	movhi	r5,32770
8001d070:	214b883a 	add	r5,r4,r5
8001d074:	29341f17 	ldw	r4,-12164(r5)
8001d078:	2000683a 	jmp	r4
8001d07c:	8001d708 	cmpgei	zero,r16,1884
8001d080:	8001d638 	rdprs	zero,r16,1880
8001d084:	8001d638 	rdprs	zero,r16,1880
8001d088:	8001d6fc 	xorhi	zero,r16,1883
8001d08c:	8001d638 	rdprs	zero,r16,1880
8001d090:	8001d638 	rdprs	zero,r16,1880
8001d094:	8001d638 	rdprs	zero,r16,1880
8001d098:	8001d638 	rdprs	zero,r16,1880
8001d09c:	8001d638 	rdprs	zero,r16,1880
8001d0a0:	8001d638 	rdprs	zero,r16,1880
8001d0a4:	8001d6d4 	ori	zero,r16,1883
8001d0a8:	8001d6c4 	addi	zero,r16,1883
8001d0ac:	8001d638 	rdprs	zero,r16,1880
8001d0b0:	8001d6ac 	andhi	zero,r16,1882
8001d0b4:	8001d668 	cmpgeui	zero,r16,1881
8001d0b8:	8001d638 	rdprs	zero,r16,1880
8001d0bc:	8001d65c 	xori	zero,r16,1881
8001d0c0:	8001d608 	cmpgei	zero,r16,1880
8001d0c4:	8001d608 	cmpgei	zero,r16,1880
8001d0c8:	8001d608 	cmpgei	zero,r16,1880
8001d0cc:	8001d608 	cmpgei	zero,r16,1880
8001d0d0:	8001d608 	cmpgei	zero,r16,1880
8001d0d4:	8001d608 	cmpgei	zero,r16,1880
8001d0d8:	8001d608 	cmpgei	zero,r16,1880
8001d0dc:	8001d608 	cmpgei	zero,r16,1880
8001d0e0:	8001d608 	cmpgei	zero,r16,1880
8001d0e4:	8001d638 	rdprs	zero,r16,1880
8001d0e8:	8001d638 	rdprs	zero,r16,1880
8001d0ec:	8001d638 	rdprs	zero,r16,1880
8001d0f0:	8001d638 	rdprs	zero,r16,1880
8001d0f4:	8001d638 	rdprs	zero,r16,1880
8001d0f8:	8001d638 	rdprs	zero,r16,1880
8001d0fc:	8001d638 	rdprs	zero,r16,1880
8001d100:	8001d638 	rdprs	zero,r16,1880
8001d104:	8001d638 	rdprs	zero,r16,1880
8001d108:	8001d638 	rdprs	zero,r16,1880
8001d10c:	8001d9c4 	addi	zero,r16,1895
8001d110:	8001d638 	rdprs	zero,r16,1880
8001d114:	8001d638 	rdprs	zero,r16,1880
8001d118:	8001d638 	rdprs	zero,r16,1880
8001d11c:	8001d638 	rdprs	zero,r16,1880
8001d120:	8001d638 	rdprs	zero,r16,1880
8001d124:	8001d638 	rdprs	zero,r16,1880
8001d128:	8001d638 	rdprs	zero,r16,1880
8001d12c:	8001d638 	rdprs	zero,r16,1880
8001d130:	8001d638 	rdprs	zero,r16,1880
8001d134:	8001d638 	rdprs	zero,r16,1880
8001d138:	8001d2a4 	muli	zero,r16,1866
8001d13c:	8001d638 	rdprs	zero,r16,1880
8001d140:	8001d638 	rdprs	zero,r16,1880
8001d144:	8001d638 	rdprs	zero,r16,1880
8001d148:	8001d638 	rdprs	zero,r16,1880
8001d14c:	8001d638 	rdprs	zero,r16,1880
8001d150:	8001d1e0 	cmpeqi	zero,r16,1863
8001d154:	8001d638 	rdprs	zero,r16,1880
8001d158:	8001d638 	rdprs	zero,r16,1880
8001d15c:	8001d8ac 	andhi	zero,r16,1890
8001d160:	8001d638 	rdprs	zero,r16,1880
8001d164:	8001d638 	rdprs	zero,r16,1880
8001d168:	8001d638 	rdprs	zero,r16,1880
8001d16c:	8001d638 	rdprs	zero,r16,1880
8001d170:	8001d638 	rdprs	zero,r16,1880
8001d174:	8001d638 	rdprs	zero,r16,1880
8001d178:	8001d638 	rdprs	zero,r16,1880
8001d17c:	8001d638 	rdprs	zero,r16,1880
8001d180:	8001d638 	rdprs	zero,r16,1880
8001d184:	8001d638 	rdprs	zero,r16,1880
8001d188:	8001d994 	ori	zero,r16,1894
8001d18c:	8001d958 	cmpnei	zero,r16,1893
8001d190:	8001d638 	rdprs	zero,r16,1880
8001d194:	8001d638 	rdprs	zero,r16,1880
8001d198:	8001d638 	rdprs	zero,r16,1880
8001d19c:	8001da58 	cmpnei	zero,r16,1897
8001d1a0:	8001d958 	cmpnei	zero,r16,1893
8001d1a4:	8001d638 	rdprs	zero,r16,1880
8001d1a8:	8001d638 	rdprs	zero,r16,1880
8001d1ac:	8001d764 	muli	zero,r16,1885
8001d1b0:	8001d638 	rdprs	zero,r16,1880
8001d1b4:	8001d810 	cmplti	zero,r16,1888
8001d1b8:	8001d2a8 	cmpgeui	zero,r16,1866
8001d1bc:	8001d7d4 	ori	zero,r16,1887
8001d1c0:	8001d7c8 	cmpgei	zero,r16,1887
8001d1c4:	8001d638 	rdprs	zero,r16,1880
8001d1c8:	8001d778 	rdprs	zero,r16,1885
8001d1cc:	8001d638 	rdprs	zero,r16,1880
8001d1d0:	8001d1e4 	muli	zero,r16,1863
8001d1d4:	8001d638 	rdprs	zero,r16,1880
8001d1d8:	8001d638 	rdprs	zero,r16,1880
8001d1dc:	8001d904 	addi	zero,r16,1892
8001d1e0:	18c00414 	ori	r3,r3,16
8001d1e4:	1880080c 	andi	r2,r3,32
8001d1e8:	1001a91e 	bne	r2,zero,8001d890 <___vfiprintf_internal_r+0x970>
8001d1ec:	d9000217 	ldw	r4,8(sp)
8001d1f0:	1880040c 	andi	r2,r3,16
8001d1f4:	22c00017 	ldw	r11,0(r4)
8001d1f8:	21000104 	addi	r4,r4,4
8001d1fc:	d9000215 	stw	r4,8(sp)
8001d200:	10021e1e 	bne	r2,zero,8001da7c <___vfiprintf_internal_r+0xb5c>
8001d204:	1880100c 	andi	r2,r3,64
8001d208:	10021c26 	beq	r2,zero,8001da7c <___vfiprintf_internal_r+0xb5c>
8001d20c:	d8000a45 	stb	zero,41(sp)
8001d210:	893fffe0 	cmpeqi	r4,r17,-1
8001d214:	5d7fffcc 	andi	r21,r11,65535
8001d218:	001b883a 	mov	r13,zero
8001d21c:	00800044 	movi	r2,1
8001d220:	20002c26 	beq	r4,zero,8001d2d4 <___vfiprintf_internal_r+0x3b4>
8001d224:	1827883a 	mov	r19,r3
8001d228:	0019883a 	mov	r12,zero
8001d22c:	10c00060 	cmpeqi	r3,r2,1
8001d230:	1802011e 	bne	r3,zero,8001da38 <___vfiprintf_internal_r+0xb18>
8001d234:	108000a0 	cmpeqi	r2,r2,2
8001d238:	1002aa1e 	bne	r2,zero,8001dce4 <___vfiprintf_internal_r+0xdc4>
8001d23c:	e007883a 	mov	r3,fp
8001d240:	00000106 	br	8001d248 <___vfiprintf_internal_r+0x328>
8001d244:	b007883a 	mov	r3,r22
8001d248:	680a977a 	slli	r5,r13,29
8001d24c:	a808d0fa 	srli	r4,r21,3
8001d250:	681ad0fa 	srli	r13,r13,3
8001d254:	aac001cc 	andi	r11,r21,7
8001d258:	58800c04 	addi	r2,r11,48
8001d25c:	292ab03a 	or	r21,r5,r4
8001d260:	18bfffc5 	stb	r2,-1(r3)
8001d264:	ab48b03a 	or	r4,r21,r13
8001d268:	1dbfffc4 	addi	r22,r3,-1
8001d26c:	203ff51e 	bne	r4,zero,8001d244 <_gp+0xfffec4d0>
8001d270:	9900004c 	andi	r4,r19,1
8001d274:	2002a826 	beq	r4,zero,8001dd18 <___vfiprintf_internal_r+0xdf8>
8001d278:	10803fcc 	andi	r2,r2,255
8001d27c:	1080201c 	xori	r2,r2,128
8001d280:	10bfe004 	addi	r2,r2,-128
8001d284:	10800c18 	cmpnei	r2,r2,48
8001d288:	1002a326 	beq	r2,zero,8001dd18 <___vfiprintf_internal_r+0xdf8>
8001d28c:	18ffff84 	addi	r3,r3,-2
8001d290:	00800c04 	movi	r2,48
8001d294:	b0bfffc5 	stb	r2,-1(r22)
8001d298:	e0dbc83a 	sub	r13,fp,r3
8001d29c:	182d883a 	mov	r22,r3
8001d2a0:	00001806 	br	8001d304 <___vfiprintf_internal_r+0x3e4>
8001d2a4:	18c00414 	ori	r3,r3,16
8001d2a8:	1880080c 	andi	r2,r3,32
8001d2ac:	10012126 	beq	r2,zero,8001d734 <___vfiprintf_internal_r+0x814>
8001d2b0:	d9000217 	ldw	r4,8(sp)
8001d2b4:	0005883a 	mov	r2,zero
8001d2b8:	25400017 	ldw	r21,0(r4)
8001d2bc:	23400117 	ldw	r13,4(r4)
8001d2c0:	21000204 	addi	r4,r4,8
8001d2c4:	d9000215 	stw	r4,8(sp)
8001d2c8:	d8000a45 	stb	zero,41(sp)
8001d2cc:	893fffe0 	cmpeqi	r4,r17,-1
8001d2d0:	203fd41e 	bne	r4,zero,8001d224 <_gp+0xfffec4b0>
8001d2d4:	0019883a 	mov	r12,zero
8001d2d8:	04ffdfc4 	movi	r19,-129
8001d2dc:	ab48b03a 	or	r4,r21,r13
8001d2e0:	1ce6703a 	and	r19,r3,r19
8001d2e4:	203fd11e 	bne	r4,zero,8001d22c <_gp+0xfffec4b8>
8001d2e8:	88030b1e 	bne	r17,zero,8001df18 <___vfiprintf_internal_r+0xff8>
8001d2ec:	1002d81e 	bne	r2,zero,8001de50 <___vfiprintf_internal_r+0xf30>
8001d2f0:	1b40004c 	andi	r13,r3,1
8001d2f4:	68030b26 	beq	r13,zero,8001df24 <___vfiprintf_internal_r+0x1004>
8001d2f8:	00800c04 	movi	r2,48
8001d2fc:	d88017c5 	stb	r2,95(sp)
8001d300:	dd8017c4 	addi	r22,sp,95
8001d304:	882b883a 	mov	r21,r17
8001d308:	8b40010e 	bge	r17,r13,8001d310 <___vfiprintf_internal_r+0x3f0>
8001d30c:	682b883a 	mov	r21,r13
8001d310:	63003fcc 	andi	r12,r12,255
8001d314:	6300201c 	xori	r12,r12,128
8001d318:	633fe004 	addi	r12,r12,-128
8001d31c:	60000126 	beq	r12,zero,8001d324 <___vfiprintf_internal_r+0x404>
8001d320:	ad400044 	addi	r21,r21,1
8001d324:	9b80008c 	andi	r14,r19,2
8001d328:	70000126 	beq	r14,zero,8001d330 <___vfiprintf_internal_r+0x410>
8001d32c:	ad400084 	addi	r21,r21,2
8001d330:	d9000c17 	ldw	r4,48(sp)
8001d334:	9b00210c 	andi	r12,r19,132
8001d338:	d8800d17 	ldw	r2,52(sp)
8001d33c:	21800044 	addi	r6,r4,1
8001d340:	300b883a 	mov	r5,r6
8001d344:	6000271e 	bne	r12,zero,8001d3e4 <___vfiprintf_internal_r+0x4c4>
8001d348:	9547c83a 	sub	r3,r18,r21
8001d34c:	00c0250e 	bge	zero,r3,8001d3e4 <___vfiprintf_internal_r+0x4c4>
8001d350:	19400450 	cmplti	r5,r3,17
8001d354:	01e000b4 	movhi	r7,32770
8001d358:	2803481e 	bne	r5,zero,8001e07c <___vfiprintf_internal_r+0x115c>
8001d35c:	39dbee84 	addi	r7,r7,28602
8001d360:	03c00404 	movi	r15,16
8001d364:	00000706 	br	8001d384 <___vfiprintf_internal_r+0x464>
8001d368:	27c00084 	addi	ra,r4,2
8001d36c:	84000204 	addi	r16,r16,8
8001d370:	3009883a 	mov	r4,r6
8001d374:	18fffc04 	addi	r3,r3,-16
8001d378:	19400448 	cmpgei	r5,r3,17
8001d37c:	28000f26 	beq	r5,zero,8001d3bc <___vfiprintf_internal_r+0x49c>
8001d380:	21800044 	addi	r6,r4,1
8001d384:	10800404 	addi	r2,r2,16
8001d388:	81c00015 	stw	r7,0(r16)
8001d38c:	83c00115 	stw	r15,4(r16)
8001d390:	d8800d15 	stw	r2,52(sp)
8001d394:	d9800c15 	stw	r6,48(sp)
8001d398:	31400208 	cmpgei	r5,r6,8
8001d39c:	283ff226 	beq	r5,zero,8001d368 <_gp+0xfffec5f4>
8001d3a0:	10022e1e 	bne	r2,zero,8001dc5c <___vfiprintf_internal_r+0xd3c>
8001d3a4:	18fffc04 	addi	r3,r3,-16
8001d3a8:	19400448 	cmpgei	r5,r3,17
8001d3ac:	0009883a 	mov	r4,zero
8001d3b0:	07c00044 	movi	ra,1
8001d3b4:	e021883a 	mov	r16,fp
8001d3b8:	283ff11e 	bne	r5,zero,8001d380 <_gp+0xfffec60c>
8001d3bc:	10c5883a 	add	r2,r2,r3
8001d3c0:	80c00115 	stw	r3,4(r16)
8001d3c4:	81c00015 	stw	r7,0(r16)
8001d3c8:	d8800d15 	stw	r2,52(sp)
8001d3cc:	dfc00c15 	stw	ra,48(sp)
8001d3d0:	f8c00208 	cmpgei	r3,ra,8
8001d3d4:	1802641e 	bne	r3,zero,8001dd68 <___vfiprintf_internal_r+0xe48>
8001d3d8:	84000204 	addi	r16,r16,8
8001d3dc:	f9400044 	addi	r5,ra,1
8001d3e0:	f809883a 	mov	r4,ra
8001d3e4:	d8c00a47 	ldb	r3,41(sp)
8001d3e8:	81800204 	addi	r6,r16,8
8001d3ec:	1801c726 	beq	r3,zero,8001db0c <___vfiprintf_internal_r+0xbec>
8001d3f0:	d8c00a44 	addi	r3,sp,41
8001d3f4:	10800044 	addi	r2,r2,1
8001d3f8:	80c00015 	stw	r3,0(r16)
8001d3fc:	00c00044 	movi	r3,1
8001d400:	80c00115 	stw	r3,4(r16)
8001d404:	d8800d15 	stw	r2,52(sp)
8001d408:	d9400c15 	stw	r5,48(sp)
8001d40c:	28c00208 	cmpgei	r3,r5,8
8001d410:	18025e26 	beq	r3,zero,8001dd8c <___vfiprintf_internal_r+0xe6c>
8001d414:	1001ad1e 	bne	r2,zero,8001dacc <___vfiprintf_internal_r+0xbac>
8001d418:	7002611e 	bne	r14,zero,8001dda0 <___vfiprintf_internal_r+0xe80>
8001d41c:	0009883a 	mov	r4,zero
8001d420:	d9801a04 	addi	r6,sp,104
8001d424:	01400044 	movi	r5,1
8001d428:	e021883a 	mov	r16,fp
8001d42c:	63002018 	cmpnei	r12,r12,128
8001d430:	6001c726 	beq	r12,zero,8001db50 <___vfiprintf_internal_r+0xc30>
8001d434:	8b63c83a 	sub	r17,r17,r13
8001d438:	0440260e 	bge	zero,r17,8001d4d4 <___vfiprintf_internal_r+0x5b4>
8001d43c:	88c00450 	cmplti	r3,r17,17
8001d440:	01e000b4 	movhi	r7,32770
8001d444:	1802e71e 	bne	r3,zero,8001dfe4 <___vfiprintf_internal_r+0x10c4>
8001d448:	39dbea84 	addi	r7,r7,28586
8001d44c:	03000404 	movi	r12,16
8001d450:	00000606 	br	8001d46c <___vfiprintf_internal_r+0x54c>
8001d454:	21400084 	addi	r5,r4,2
8001d458:	84000204 	addi	r16,r16,8
8001d45c:	1809883a 	mov	r4,r3
8001d460:	8c7ffc04 	addi	r17,r17,-16
8001d464:	88c00448 	cmpgei	r3,r17,17
8001d468:	18000f26 	beq	r3,zero,8001d4a8 <___vfiprintf_internal_r+0x588>
8001d46c:	20c00044 	addi	r3,r4,1
8001d470:	10800404 	addi	r2,r2,16
8001d474:	81c00015 	stw	r7,0(r16)
8001d478:	83000115 	stw	r12,4(r16)
8001d47c:	d8800d15 	stw	r2,52(sp)
8001d480:	d8c00c15 	stw	r3,48(sp)
8001d484:	19400208 	cmpgei	r5,r3,8
8001d488:	283ff226 	beq	r5,zero,8001d454 <_gp+0xfffec6e0>
8001d48c:	10017f1e 	bne	r2,zero,8001da8c <___vfiprintf_internal_r+0xb6c>
8001d490:	8c7ffc04 	addi	r17,r17,-16
8001d494:	88c00448 	cmpgei	r3,r17,17
8001d498:	01400044 	movi	r5,1
8001d49c:	0009883a 	mov	r4,zero
8001d4a0:	e021883a 	mov	r16,fp
8001d4a4:	183ff11e 	bne	r3,zero,8001d46c <_gp+0xfffec6f8>
8001d4a8:	81000204 	addi	r4,r16,8
8001d4ac:	1445883a 	add	r2,r2,r17
8001d4b0:	81c00015 	stw	r7,0(r16)
8001d4b4:	84400115 	stw	r17,4(r16)
8001d4b8:	d8800d15 	stw	r2,52(sp)
8001d4bc:	d9400c15 	stw	r5,48(sp)
8001d4c0:	28c00208 	cmpgei	r3,r5,8
8001d4c4:	1802411e 	bne	r3,zero,8001ddcc <___vfiprintf_internal_r+0xeac>
8001d4c8:	29400044 	addi	r5,r5,1
8001d4cc:	21800204 	addi	r6,r4,8
8001d4d0:	2021883a 	mov	r16,r4
8001d4d4:	6885883a 	add	r2,r13,r2
8001d4d8:	d9400c15 	stw	r5,48(sp)
8001d4dc:	85800015 	stw	r22,0(r16)
8001d4e0:	83400115 	stw	r13,4(r16)
8001d4e4:	d8800d15 	stw	r2,52(sp)
8001d4e8:	29400210 	cmplti	r5,r5,8
8001d4ec:	2801c91e 	bne	r5,zero,8001dc14 <___vfiprintf_internal_r+0xcf4>
8001d4f0:	1001c11e 	bne	r2,zero,8001dbf8 <___vfiprintf_internal_r+0xcd8>
8001d4f4:	d8000c15 	stw	zero,48(sp)
8001d4f8:	9cc0010c 	andi	r19,r19,4
8001d4fc:	98002726 	beq	r19,zero,8001d59c <___vfiprintf_internal_r+0x67c>
8001d500:	9561c83a 	sub	r16,r18,r21
8001d504:	0400250e 	bge	zero,r16,8001d59c <___vfiprintf_internal_r+0x67c>
8001d508:	e00d883a 	mov	r6,fp
8001d50c:	80c00450 	cmplti	r3,r16,17
8001d510:	01e000b4 	movhi	r7,32770
8001d514:	d9000c17 	ldw	r4,48(sp)
8001d518:	1802db1e 	bne	r3,zero,8001e088 <___vfiprintf_internal_r+0x1168>
8001d51c:	39dbee84 	addi	r7,r7,28602
8001d520:	04400404 	movi	r17,16
8001d524:	00000606 	br	8001d540 <___vfiprintf_internal_r+0x620>
8001d528:	21400084 	addi	r5,r4,2
8001d52c:	31800204 	addi	r6,r6,8
8001d530:	1809883a 	mov	r4,r3
8001d534:	843ffc04 	addi	r16,r16,-16
8001d538:	80c00448 	cmpgei	r3,r16,17
8001d53c:	18000f26 	beq	r3,zero,8001d57c <___vfiprintf_internal_r+0x65c>
8001d540:	20c00044 	addi	r3,r4,1
8001d544:	10800404 	addi	r2,r2,16
8001d548:	31c00015 	stw	r7,0(r6)
8001d54c:	34400115 	stw	r17,4(r6)
8001d550:	d8800d15 	stw	r2,52(sp)
8001d554:	d8c00c15 	stw	r3,48(sp)
8001d558:	19400208 	cmpgei	r5,r3,8
8001d55c:	283ff226 	beq	r5,zero,8001d528 <_gp+0xfffec7b4>
8001d560:	1001d41e 	bne	r2,zero,8001dcb4 <___vfiprintf_internal_r+0xd94>
8001d564:	843ffc04 	addi	r16,r16,-16
8001d568:	80c00448 	cmpgei	r3,r16,17
8001d56c:	01400044 	movi	r5,1
8001d570:	0009883a 	mov	r4,zero
8001d574:	e00d883a 	mov	r6,fp
8001d578:	183ff11e 	bne	r3,zero,8001d540 <_gp+0xfffec7cc>
8001d57c:	1405883a 	add	r2,r2,r16
8001d580:	d9400c15 	stw	r5,48(sp)
8001d584:	31c00015 	stw	r7,0(r6)
8001d588:	34000115 	stw	r16,4(r6)
8001d58c:	d8800d15 	stw	r2,52(sp)
8001d590:	29400210 	cmplti	r5,r5,8
8001d594:	2801a31e 	bne	r5,zero,8001dc24 <___vfiprintf_internal_r+0xd04>
8001d598:	10026a1e 	bne	r2,zero,8001df44 <___vfiprintf_internal_r+0x1024>
8001d59c:	9540010e 	bge	r18,r21,8001d5a4 <___vfiprintf_internal_r+0x684>
8001d5a0:	a825883a 	mov	r18,r21
8001d5a4:	d8800017 	ldw	r2,0(sp)
8001d5a8:	1485883a 	add	r2,r2,r18
8001d5ac:	d8800015 	stw	r2,0(sp)
8001d5b0:	0001a706 	br	8001dc50 <___vfiprintf_internal_r+0xd30>
8001d5b4:	d9000117 	ldw	r4,4(sp)
8001d5b8:	a00b883a 	mov	r5,r20
8001d5bc:	0015a200 	call	80015a20 <__swsetup_r>
8001d5c0:	1002c41e 	bne	r2,zero,8001e0d4 <___vfiprintf_internal_r+0x11b4>
8001d5c4:	a080030b 	ldhu	r2,12(r20)
8001d5c8:	1080068c 	andi	r2,r2,26
8001d5cc:	10800298 	cmpnei	r2,r2,10
8001d5d0:	103e751e 	bne	r2,zero,8001cfa8 <_gp+0xfffec234>
8001d5d4:	a080038f 	ldh	r2,14(r20)
8001d5d8:	103e7316 	blt	r2,zero,8001cfa8 <_gp+0xfffec234>
8001d5dc:	d9c00217 	ldw	r7,8(sp)
8001d5e0:	d9000117 	ldw	r4,4(sp)
8001d5e4:	b80d883a 	mov	r6,r23
8001d5e8:	a00b883a 	mov	r5,r20
8001d5ec:	001e1580 	call	8001e158 <__sbprintf>
8001d5f0:	d8800015 	stw	r2,0(sp)
8001d5f4:	00009906 	br	8001d85c <___vfiprintf_internal_r+0x93c>
8001d5f8:	1802181e 	bne	r3,zero,8001de5c <___vfiprintf_internal_r+0xf3c>
8001d5fc:	d8000c15 	stw	zero,48(sp)
8001d600:	e021883a 	mov	r16,fp
8001d604:	003e8706 	br	8001d024 <_gp+0xfffec2b0>
8001d608:	0025883a 	mov	r18,zero
8001d60c:	113ff404 	addi	r4,r2,-48
8001d610:	bdc00044 	addi	r23,r23,1
8001d614:	948002a4 	muli	r18,r18,10
8001d618:	b8bfffc7 	ldb	r2,-1(r23)
8001d61c:	24a5883a 	add	r18,r4,r18
8001d620:	113ff404 	addi	r4,r2,-48
8001d624:	214002b0 	cmpltui	r5,r4,10
8001d628:	283ff91e 	bne	r5,zero,8001d610 <_gp+0xfffec89c>
8001d62c:	113ff804 	addi	r4,r2,-32
8001d630:	21401668 	cmpgeui	r5,r4,89
8001d634:	283e8c26 	beq	r5,zero,8001d068 <_gp+0xfffec2f4>
8001d638:	31803fcc 	andi	r6,r6,255
8001d63c:	3002be1e 	bne	r6,zero,8001e138 <___vfiprintf_internal_r+0x1218>
8001d640:	10008126 	beq	r2,zero,8001d848 <___vfiprintf_internal_r+0x928>
8001d644:	d8800e05 	stb	r2,56(sp)
8001d648:	d8000a45 	stb	zero,41(sp)
8001d64c:	05400044 	movi	r21,1
8001d650:	03400044 	movi	r13,1
8001d654:	dd800e04 	addi	r22,sp,56
8001d658:	0000d706 	br	8001d9b8 <___vfiprintf_internal_r+0xa98>
8001d65c:	18c02014 	ori	r3,r3,128
8001d660:	b8800007 	ldb	r2,0(r23)
8001d664:	003e7c06 	br	8001d058 <_gp+0xfffec2e4>
8001d668:	b8800007 	ldb	r2,0(r23)
8001d66c:	b9400044 	addi	r5,r23,1
8001d670:	11000aa0 	cmpeqi	r4,r2,42
8001d674:	20029a1e 	bne	r4,zero,8001e0e0 <___vfiprintf_internal_r+0x11c0>
8001d678:	113ff404 	addi	r4,r2,-48
8001d67c:	220002b0 	cmpltui	r8,r4,10
8001d680:	282f883a 	mov	r23,r5
8001d684:	0023883a 	mov	r17,zero
8001d688:	403e7426 	beq	r8,zero,8001d05c <_gp+0xfffec2e8>
8001d68c:	bdc00044 	addi	r23,r23,1
8001d690:	8c4002a4 	muli	r17,r17,10
8001d694:	b8bfffc7 	ldb	r2,-1(r23)
8001d698:	8923883a 	add	r17,r17,r4
8001d69c:	113ff404 	addi	r4,r2,-48
8001d6a0:	214002b0 	cmpltui	r5,r4,10
8001d6a4:	283ff91e 	bne	r5,zero,8001d68c <_gp+0xfffec918>
8001d6a8:	003e6c06 	br	8001d05c <_gp+0xfffec2e8>
8001d6ac:	b8800003 	ldbu	r2,0(r23)
8001d6b0:	10803fcc 	andi	r2,r2,255
8001d6b4:	1080201c 	xori	r2,r2,128
8001d6b8:	18c00114 	ori	r3,r3,4
8001d6bc:	10bfe004 	addi	r2,r2,-128
8001d6c0:	003e6506 	br	8001d058 <_gp+0xfffec2e4>
8001d6c4:	01800044 	movi	r6,1
8001d6c8:	01c00ac4 	movi	r7,43
8001d6cc:	b8800007 	ldb	r2,0(r23)
8001d6d0:	003e6106 	br	8001d058 <_gp+0xfffec2e4>
8001d6d4:	d8800217 	ldw	r2,8(sp)
8001d6d8:	14800017 	ldw	r18,0(r2)
8001d6dc:	15400104 	addi	r21,r2,4
8001d6e0:	b8800003 	ldbu	r2,0(r23)
8001d6e4:	90024516 	blt	r18,zero,8001dffc <___vfiprintf_internal_r+0x10dc>
8001d6e8:	dd400215 	stw	r21,8(sp)
8001d6ec:	10803fcc 	andi	r2,r2,255
8001d6f0:	1080201c 	xori	r2,r2,128
8001d6f4:	10bfe004 	addi	r2,r2,-128
8001d6f8:	003e5706 	br	8001d058 <_gp+0xfffec2e4>
8001d6fc:	18c00054 	ori	r3,r3,1
8001d700:	b8800007 	ldb	r2,0(r23)
8001d704:	003e5406 	br	8001d058 <_gp+0xfffec2e4>
8001d708:	39003fcc 	andi	r4,r7,255
8001d70c:	2100201c 	xori	r4,r4,128
8001d710:	213fe004 	addi	r4,r4,-128
8001d714:	b8800003 	ldbu	r2,0(r23)
8001d718:	203ff41e 	bne	r4,zero,8001d6ec <_gp+0xfffec978>
8001d71c:	10803fcc 	andi	r2,r2,255
8001d720:	1080201c 	xori	r2,r2,128
8001d724:	01800044 	movi	r6,1
8001d728:	01c00804 	movi	r7,32
8001d72c:	10bfe004 	addi	r2,r2,-128
8001d730:	003e4906 	br	8001d058 <_gp+0xfffec2e4>
8001d734:	d9000217 	ldw	r4,8(sp)
8001d738:	1880040c 	andi	r2,r3,16
8001d73c:	22c00017 	ldw	r11,0(r4)
8001d740:	21000104 	addi	r4,r4,4
8001d744:	d9000215 	stw	r4,8(sp)
8001d748:	1000c81e 	bne	r2,zero,8001da6c <___vfiprintf_internal_r+0xb4c>
8001d74c:	1880100c 	andi	r2,r3,64
8001d750:	1000c626 	beq	r2,zero,8001da6c <___vfiprintf_internal_r+0xb4c>
8001d754:	5d7fffcc 	andi	r21,r11,65535
8001d758:	001b883a 	mov	r13,zero
8001d75c:	0005883a 	mov	r2,zero
8001d760:	003ed906 	br	8001d2c8 <_gp+0xfffec554>
8001d764:	b8800007 	ldb	r2,0(r23)
8001d768:	11001b18 	cmpnei	r4,r2,108
8001d76c:	20022626 	beq	r4,zero,8001e008 <___vfiprintf_internal_r+0x10e8>
8001d770:	18c00414 	ori	r3,r3,16
8001d774:	003e3806 	br	8001d058 <_gp+0xfffec2e4>
8001d778:	d8800217 	ldw	r2,8(sp)
8001d77c:	d8000a45 	stb	zero,41(sp)
8001d780:	15800017 	ldw	r22,0(r2)
8001d784:	14c00104 	addi	r19,r2,4
8001d788:	b0022626 	beq	r22,zero,8001e024 <___vfiprintf_internal_r+0x1104>
8001d78c:	88bfffe0 	cmpeqi	r2,r17,-1
8001d790:	1001f31e 	bne	r2,zero,8001df60 <___vfiprintf_internal_r+0x1040>
8001d794:	880d883a 	mov	r6,r17
8001d798:	000b883a 	mov	r5,zero
8001d79c:	b009883a 	mov	r4,r22
8001d7a0:	d8c00215 	stw	r3,8(sp)
8001d7a4:	00187d80 	call	800187d8 <memchr>
8001d7a8:	d8c00217 	ldw	r3,8(sp)
8001d7ac:	10023926 	beq	r2,zero,8001e094 <___vfiprintf_internal_r+0x1174>
8001d7b0:	dcc00215 	stw	r19,8(sp)
8001d7b4:	159bc83a 	sub	r13,r2,r22
8001d7b8:	db000a43 	ldbu	r12,41(sp)
8001d7bc:	1827883a 	mov	r19,r3
8001d7c0:	0023883a 	mov	r17,zero
8001d7c4:	003ecf06 	br	8001d304 <_gp+0xfffec590>
8001d7c8:	18c00814 	ori	r3,r3,32
8001d7cc:	b8800007 	ldb	r2,0(r23)
8001d7d0:	003e2106 	br	8001d058 <_gp+0xfffec2e4>
8001d7d4:	d9000217 	ldw	r4,8(sp)
8001d7d8:	00800c04 	movi	r2,48
8001d7dc:	d8800a85 	stb	r2,42(sp)
8001d7e0:	00801e04 	movi	r2,120
8001d7e4:	016000b4 	movhi	r5,32770
8001d7e8:	d8800ac5 	stb	r2,43(sp)
8001d7ec:	20800104 	addi	r2,r4,4
8001d7f0:	d8800215 	stw	r2,8(sp)
8001d7f4:	289aa804 	addi	r2,r5,27296
8001d7f8:	d8800615 	stw	r2,24(sp)
8001d7fc:	25400017 	ldw	r21,0(r4)
8001d800:	001b883a 	mov	r13,zero
8001d804:	18c00094 	ori	r3,r3,2
8001d808:	00800084 	movi	r2,2
8001d80c:	003eae06 	br	8001d2c8 <_gp+0xfffec554>
8001d810:	31803fcc 	andi	r6,r6,255
8001d814:	30023e1e 	bne	r6,zero,8001e110 <___vfiprintf_internal_r+0x11f0>
8001d818:	d9400217 	ldw	r5,8(sp)
8001d81c:	1880080c 	andi	r2,r3,32
8001d820:	29000017 	ldw	r4,0(r5)
8001d824:	29400104 	addi	r5,r5,4
8001d828:	d9400215 	stw	r5,8(sp)
8001d82c:	1001d626 	beq	r2,zero,8001df88 <___vfiprintf_internal_r+0x1068>
8001d830:	d8c00017 	ldw	r3,0(sp)
8001d834:	1805d7fa 	srai	r2,r3,31
8001d838:	20c00015 	stw	r3,0(r4)
8001d83c:	20800115 	stw	r2,4(r4)
8001d840:	b8800007 	ldb	r2,0(r23)
8001d844:	103de11e 	bne	r2,zero,8001cfcc <_gp+0xfffec258>
8001d848:	d8800d17 	ldw	r2,52(sp)
8001d84c:	10021c1e 	bne	r2,zero,8001e0c0 <___vfiprintf_internal_r+0x11a0>
8001d850:	a080030b 	ldhu	r2,12(r20)
8001d854:	1080100c 	andi	r2,r2,64
8001d858:	10021e1e 	bne	r2,zero,8001e0d4 <___vfiprintf_internal_r+0x11b4>
8001d85c:	d8800017 	ldw	r2,0(sp)
8001d860:	dfc03117 	ldw	ra,196(sp)
8001d864:	df003017 	ldw	fp,192(sp)
8001d868:	ddc02f17 	ldw	r23,188(sp)
8001d86c:	dd802e17 	ldw	r22,184(sp)
8001d870:	dd402d17 	ldw	r21,180(sp)
8001d874:	dd002c17 	ldw	r20,176(sp)
8001d878:	dcc02b17 	ldw	r19,172(sp)
8001d87c:	dc802a17 	ldw	r18,168(sp)
8001d880:	dc402917 	ldw	r17,164(sp)
8001d884:	dc002817 	ldw	r16,160(sp)
8001d888:	dec03204 	addi	sp,sp,200
8001d88c:	f800283a 	ret
8001d890:	d9000217 	ldw	r4,8(sp)
8001d894:	00800044 	movi	r2,1
8001d898:	25400017 	ldw	r21,0(r4)
8001d89c:	23400117 	ldw	r13,4(r4)
8001d8a0:	21000204 	addi	r4,r4,8
8001d8a4:	d9000215 	stw	r4,8(sp)
8001d8a8:	003e8706 	br	8001d2c8 <_gp+0xfffec554>
8001d8ac:	31803fcc 	andi	r6,r6,255
8001d8b0:	3002191e 	bne	r6,zero,8001e118 <___vfiprintf_internal_r+0x11f8>
8001d8b4:	012000b4 	movhi	r4,32770
8001d8b8:	211aa304 	addi	r4,r4,27276
8001d8bc:	d9000615 	stw	r4,24(sp)
8001d8c0:	1900080c 	andi	r4,r3,32
8001d8c4:	20001626 	beq	r4,zero,8001d920 <___vfiprintf_internal_r+0xa00>
8001d8c8:	d9000217 	ldw	r4,8(sp)
8001d8cc:	25400017 	ldw	r21,0(r4)
8001d8d0:	23400117 	ldw	r13,4(r4)
8001d8d4:	21000204 	addi	r4,r4,8
8001d8d8:	d9000215 	stw	r4,8(sp)
8001d8dc:	1900004c 	andi	r4,r3,1
8001d8e0:	20001b26 	beq	r4,zero,8001d950 <___vfiprintf_internal_r+0xa30>
8001d8e4:	ab48b03a 	or	r4,r21,r13
8001d8e8:	20001926 	beq	r4,zero,8001d950 <___vfiprintf_internal_r+0xa30>
8001d8ec:	01000c04 	movi	r4,48
8001d8f0:	d8800ac5 	stb	r2,43(sp)
8001d8f4:	d9000a85 	stb	r4,42(sp)
8001d8f8:	18c00094 	ori	r3,r3,2
8001d8fc:	00800084 	movi	r2,2
8001d900:	003e7106 	br	8001d2c8 <_gp+0xfffec554>
8001d904:	31803fcc 	andi	r6,r6,255
8001d908:	3002051e 	bne	r6,zero,8001e120 <___vfiprintf_internal_r+0x1200>
8001d90c:	012000b4 	movhi	r4,32770
8001d910:	211aa804 	addi	r4,r4,27296
8001d914:	d9000615 	stw	r4,24(sp)
8001d918:	1900080c 	andi	r4,r3,32
8001d91c:	203fea1e 	bne	r4,zero,8001d8c8 <_gp+0xfffecb54>
8001d920:	d9400217 	ldw	r5,8(sp)
8001d924:	1900040c 	andi	r4,r3,16
8001d928:	2ac00017 	ldw	r11,0(r5)
8001d92c:	29400104 	addi	r5,r5,4
8001d930:	d9400215 	stw	r5,8(sp)
8001d934:	2001531e 	bne	r4,zero,8001de84 <___vfiprintf_internal_r+0xf64>
8001d938:	1900100c 	andi	r4,r3,64
8001d93c:	20015126 	beq	r4,zero,8001de84 <___vfiprintf_internal_r+0xf64>
8001d940:	1900004c 	andi	r4,r3,1
8001d944:	5d7fffcc 	andi	r21,r11,65535
8001d948:	001b883a 	mov	r13,zero
8001d94c:	203fe51e 	bne	r4,zero,8001d8e4 <_gp+0xfffecb70>
8001d950:	00800084 	movi	r2,2
8001d954:	003e5c06 	br	8001d2c8 <_gp+0xfffec554>
8001d958:	31803fcc 	andi	r6,r6,255
8001d95c:	3001f21e 	bne	r6,zero,8001e128 <___vfiprintf_internal_r+0x1208>
8001d960:	1880080c 	andi	r2,r3,32
8001d964:	10001c26 	beq	r2,zero,8001d9d8 <___vfiprintf_internal_r+0xab8>
8001d968:	d8800217 	ldw	r2,8(sp)
8001d96c:	15400017 	ldw	r21,0(r2)
8001d970:	13400117 	ldw	r13,4(r2)
8001d974:	10800204 	addi	r2,r2,8
8001d978:	d8800215 	stw	r2,8(sp)
8001d97c:	68002316 	blt	r13,zero,8001da0c <___vfiprintf_internal_r+0xaec>
8001d980:	88bfffd8 	cmpnei	r2,r17,-1
8001d984:	db000a43 	ldbu	r12,41(sp)
8001d988:	10002a26 	beq	r2,zero,8001da34 <___vfiprintf_internal_r+0xb14>
8001d98c:	00800044 	movi	r2,1
8001d990:	003e5106 	br	8001d2d8 <_gp+0xfffec564>
8001d994:	d9000217 	ldw	r4,8(sp)
8001d998:	d8000a45 	stb	zero,41(sp)
8001d99c:	05400044 	movi	r21,1
8001d9a0:	20800017 	ldw	r2,0(r4)
8001d9a4:	21000104 	addi	r4,r4,4
8001d9a8:	d9000215 	stw	r4,8(sp)
8001d9ac:	d8800e05 	stb	r2,56(sp)
8001d9b0:	03400044 	movi	r13,1
8001d9b4:	dd800e04 	addi	r22,sp,56
8001d9b8:	1827883a 	mov	r19,r3
8001d9bc:	0023883a 	mov	r17,zero
8001d9c0:	003e5806 	br	8001d324 <_gp+0xfffec5b0>
8001d9c4:	31803fcc 	andi	r6,r6,255
8001d9c8:	3001d91e 	bne	r6,zero,8001e130 <___vfiprintf_internal_r+0x1210>
8001d9cc:	18c00414 	ori	r3,r3,16
8001d9d0:	1880080c 	andi	r2,r3,32
8001d9d4:	103fe41e 	bne	r2,zero,8001d968 <_gp+0xfffecbf4>
8001d9d8:	d9000217 	ldw	r4,8(sp)
8001d9dc:	1880040c 	andi	r2,r3,16
8001d9e0:	22c00017 	ldw	r11,0(r4)
8001d9e4:	21000104 	addi	r4,r4,4
8001d9e8:	d9000215 	stw	r4,8(sp)
8001d9ec:	1001221e 	bne	r2,zero,8001de78 <___vfiprintf_internal_r+0xf58>
8001d9f0:	1880100c 	andi	r2,r3,64
8001d9f4:	10012026 	beq	r2,zero,8001de78 <___vfiprintf_internal_r+0xf58>
8001d9f8:	5d7fffcc 	andi	r21,r11,65535
8001d9fc:	ad60001c 	xori	r21,r21,32768
8001da00:	ad600004 	addi	r21,r21,-32768
8001da04:	a81bd7fa 	srai	r13,r21,31
8001da08:	683fdd0e 	bge	r13,zero,8001d980 <_gp+0xfffecc0c>
8001da0c:	0557c83a 	sub	r11,zero,r21
8001da10:	5804c03a 	cmpne	r2,r11,zero
8001da14:	035bc83a 	sub	r13,zero,r13
8001da18:	689bc83a 	sub	r13,r13,r2
8001da1c:	00800b44 	movi	r2,45
8001da20:	d8800a45 	stb	r2,41(sp)
8001da24:	88bfffd8 	cmpnei	r2,r17,-1
8001da28:	582b883a 	mov	r21,r11
8001da2c:	03000b44 	movi	r12,45
8001da30:	103fd61e 	bne	r2,zero,8001d98c <_gp+0xfffecc18>
8001da34:	1827883a 	mov	r19,r3
8001da38:	6800ed1e 	bne	r13,zero,8001ddf0 <___vfiprintf_internal_r+0xed0>
8001da3c:	a88002a8 	cmpgeui	r2,r21,10
8001da40:	1000eb1e 	bne	r2,zero,8001ddf0 <___vfiprintf_internal_r+0xed0>
8001da44:	aac00c04 	addi	r11,r21,48
8001da48:	dac017c5 	stb	r11,95(sp)
8001da4c:	03400044 	movi	r13,1
8001da50:	dd8017c4 	addi	r22,sp,95
8001da54:	003e2b06 	br	8001d304 <_gp+0xfffec590>
8001da58:	18c01014 	ori	r3,r3,64
8001da5c:	b8800007 	ldb	r2,0(r23)
8001da60:	003d7d06 	br	8001d058 <_gp+0xfffec2e4>
8001da64:	0017a4c0 	call	80017a4c <__sinit>
8001da68:	003d3f06 	br	8001cf68 <_gp+0xfffec1f4>
8001da6c:	582b883a 	mov	r21,r11
8001da70:	001b883a 	mov	r13,zero
8001da74:	0005883a 	mov	r2,zero
8001da78:	003e1306 	br	8001d2c8 <_gp+0xfffec554>
8001da7c:	582b883a 	mov	r21,r11
8001da80:	001b883a 	mov	r13,zero
8001da84:	00800044 	movi	r2,1
8001da88:	003e0f06 	br	8001d2c8 <_gp+0xfffec554>
8001da8c:	d9000117 	ldw	r4,4(sp)
8001da90:	d9800b04 	addi	r6,sp,44
8001da94:	a00b883a 	mov	r5,r20
8001da98:	d9c00515 	stw	r7,20(sp)
8001da9c:	db000415 	stw	r12,16(sp)
8001daa0:	db400315 	stw	r13,12(sp)
8001daa4:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001daa8:	103f691e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001daac:	d9000c17 	ldw	r4,48(sp)
8001dab0:	d8800d17 	ldw	r2,52(sp)
8001dab4:	e021883a 	mov	r16,fp
8001dab8:	21400044 	addi	r5,r4,1
8001dabc:	d9c00517 	ldw	r7,20(sp)
8001dac0:	db000417 	ldw	r12,16(sp)
8001dac4:	db400317 	ldw	r13,12(sp)
8001dac8:	003e6506 	br	8001d460 <_gp+0xfffec6ec>
8001dacc:	d9000117 	ldw	r4,4(sp)
8001dad0:	d9800b04 	addi	r6,sp,44
8001dad4:	a00b883a 	mov	r5,r20
8001dad8:	db400515 	stw	r13,20(sp)
8001dadc:	db000415 	stw	r12,16(sp)
8001dae0:	db800315 	stw	r14,12(sp)
8001dae4:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dae8:	103f591e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001daec:	d9000c17 	ldw	r4,48(sp)
8001daf0:	d8800d17 	ldw	r2,52(sp)
8001daf4:	db400517 	ldw	r13,20(sp)
8001daf8:	db000417 	ldw	r12,16(sp)
8001dafc:	db800317 	ldw	r14,12(sp)
8001db00:	d9801a04 	addi	r6,sp,104
8001db04:	21400044 	addi	r5,r4,1
8001db08:	e021883a 	mov	r16,fp
8001db0c:	703e4726 	beq	r14,zero,8001d42c <_gp+0xfffec6b8>
8001db10:	d8c00a84 	addi	r3,sp,42
8001db14:	10800084 	addi	r2,r2,2
8001db18:	80c00015 	stw	r3,0(r16)
8001db1c:	00c00084 	movi	r3,2
8001db20:	80c00115 	stw	r3,4(r16)
8001db24:	d8800d15 	stw	r2,52(sp)
8001db28:	d9400c15 	stw	r5,48(sp)
8001db2c:	28c00208 	cmpgei	r3,r5,8
8001db30:	1800a126 	beq	r3,zero,8001ddb8 <___vfiprintf_internal_r+0xe98>
8001db34:	1000d61e 	bne	r2,zero,8001de90 <___vfiprintf_internal_r+0xf70>
8001db38:	63002018 	cmpnei	r12,r12,128
8001db3c:	d9801a04 	addi	r6,sp,104
8001db40:	01400044 	movi	r5,1
8001db44:	0009883a 	mov	r4,zero
8001db48:	e021883a 	mov	r16,fp
8001db4c:	603e391e 	bne	r12,zero,8001d434 <_gp+0xfffec6c0>
8001db50:	9547c83a 	sub	r3,r18,r21
8001db54:	00fe370e 	bge	zero,r3,8001d434 <_gp+0xfffec6c0>
8001db58:	19c00450 	cmplti	r7,r3,17
8001db5c:	3801531e 	bne	r7,zero,8001e0ac <___vfiprintf_internal_r+0x118c>
8001db60:	01e000b4 	movhi	r7,32770
8001db64:	39dbea84 	addi	r7,r7,28586
8001db68:	03000404 	movi	r12,16
8001db6c:	00000606 	br	8001db88 <___vfiprintf_internal_r+0xc68>
8001db70:	23800084 	addi	r14,r4,2
8001db74:	84000204 	addi	r16,r16,8
8001db78:	2809883a 	mov	r4,r5
8001db7c:	18fffc04 	addi	r3,r3,-16
8001db80:	19400448 	cmpgei	r5,r3,17
8001db84:	28000f26 	beq	r5,zero,8001dbc4 <___vfiprintf_internal_r+0xca4>
8001db88:	21400044 	addi	r5,r4,1
8001db8c:	10800404 	addi	r2,r2,16
8001db90:	81c00015 	stw	r7,0(r16)
8001db94:	83000115 	stw	r12,4(r16)
8001db98:	d8800d15 	stw	r2,52(sp)
8001db9c:	d9400c15 	stw	r5,48(sp)
8001dba0:	29800208 	cmpgei	r6,r5,8
8001dba4:	303ff226 	beq	r6,zero,8001db70 <_gp+0xfffecdfc>
8001dba8:	10005d1e 	bne	r2,zero,8001dd20 <___vfiprintf_internal_r+0xe00>
8001dbac:	18fffc04 	addi	r3,r3,-16
8001dbb0:	19400448 	cmpgei	r5,r3,17
8001dbb4:	03800044 	movi	r14,1
8001dbb8:	0009883a 	mov	r4,zero
8001dbbc:	e021883a 	mov	r16,fp
8001dbc0:	283ff11e 	bne	r5,zero,8001db88 <_gp+0xfffece14>
8001dbc4:	83000204 	addi	r12,r16,8
8001dbc8:	10c5883a 	add	r2,r2,r3
8001dbcc:	80c00115 	stw	r3,4(r16)
8001dbd0:	81c00015 	stw	r7,0(r16)
8001dbd4:	d8800d15 	stw	r2,52(sp)
8001dbd8:	db800c15 	stw	r14,48(sp)
8001dbdc:	70c00208 	cmpgei	r3,r14,8
8001dbe0:	1800ba1e 	bne	r3,zero,8001decc <___vfiprintf_internal_r+0xfac>
8001dbe4:	71400044 	addi	r5,r14,1
8001dbe8:	61800204 	addi	r6,r12,8
8001dbec:	7009883a 	mov	r4,r14
8001dbf0:	6021883a 	mov	r16,r12
8001dbf4:	003e0f06 	br	8001d434 <_gp+0xfffec6c0>
8001dbf8:	d9000117 	ldw	r4,4(sp)
8001dbfc:	d9800b04 	addi	r6,sp,44
8001dc00:	a00b883a 	mov	r5,r20
8001dc04:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dc08:	103f111e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dc0c:	d8800d17 	ldw	r2,52(sp)
8001dc10:	e00d883a 	mov	r6,fp
8001dc14:	9cc0010c 	andi	r19,r19,4
8001dc18:	98000226 	beq	r19,zero,8001dc24 <___vfiprintf_internal_r+0xd04>
8001dc1c:	9561c83a 	sub	r16,r18,r21
8001dc20:	043e3a16 	blt	zero,r16,8001d50c <_gp+0xfffec798>
8001dc24:	9540010e 	bge	r18,r21,8001dc2c <___vfiprintf_internal_r+0xd0c>
8001dc28:	a825883a 	mov	r18,r21
8001dc2c:	d8c00017 	ldw	r3,0(sp)
8001dc30:	1c87883a 	add	r3,r3,r18
8001dc34:	d8c00015 	stw	r3,0(sp)
8001dc38:	10000526 	beq	r2,zero,8001dc50 <___vfiprintf_internal_r+0xd30>
8001dc3c:	d9000117 	ldw	r4,4(sp)
8001dc40:	d9800b04 	addi	r6,sp,44
8001dc44:	a00b883a 	mov	r5,r20
8001dc48:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dc4c:	103f001e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dc50:	d8000c15 	stw	zero,48(sp)
8001dc54:	e021883a 	mov	r16,fp
8001dc58:	003cda06 	br	8001cfc4 <_gp+0xfffec250>
8001dc5c:	d9000117 	ldw	r4,4(sp)
8001dc60:	d9800b04 	addi	r6,sp,44
8001dc64:	a00b883a 	mov	r5,r20
8001dc68:	d9c00915 	stw	r7,36(sp)
8001dc6c:	dbc00815 	stw	r15,32(sp)
8001dc70:	d8c00715 	stw	r3,28(sp)
8001dc74:	db400515 	stw	r13,20(sp)
8001dc78:	db000415 	stw	r12,16(sp)
8001dc7c:	db800315 	stw	r14,12(sp)
8001dc80:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dc84:	103ef21e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dc88:	d9000c17 	ldw	r4,48(sp)
8001dc8c:	d8800d17 	ldw	r2,52(sp)
8001dc90:	e021883a 	mov	r16,fp
8001dc94:	27c00044 	addi	ra,r4,1
8001dc98:	d9c00917 	ldw	r7,36(sp)
8001dc9c:	dbc00817 	ldw	r15,32(sp)
8001dca0:	d8c00717 	ldw	r3,28(sp)
8001dca4:	db400517 	ldw	r13,20(sp)
8001dca8:	db000417 	ldw	r12,16(sp)
8001dcac:	db800317 	ldw	r14,12(sp)
8001dcb0:	003db006 	br	8001d374 <_gp+0xfffec600>
8001dcb4:	d9000117 	ldw	r4,4(sp)
8001dcb8:	d9800b04 	addi	r6,sp,44
8001dcbc:	a00b883a 	mov	r5,r20
8001dcc0:	d9c00315 	stw	r7,12(sp)
8001dcc4:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dcc8:	103ee11e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dccc:	d9000c17 	ldw	r4,48(sp)
8001dcd0:	d8800d17 	ldw	r2,52(sp)
8001dcd4:	e00d883a 	mov	r6,fp
8001dcd8:	21400044 	addi	r5,r4,1
8001dcdc:	d9c00317 	ldw	r7,12(sp)
8001dce0:	003e1406 	br	8001d534 <_gp+0xfffec7c0>
8001dce4:	e02d883a 	mov	r22,fp
8001dce8:	d9000617 	ldw	r4,24(sp)
8001dcec:	a88003cc 	andi	r2,r21,15
8001dcf0:	6806973a 	slli	r3,r13,28
8001dcf4:	2085883a 	add	r2,r4,r2
8001dcf8:	a816d13a 	srli	r11,r21,4
8001dcfc:	10800003 	ldbu	r2,0(r2)
8001dd00:	681ad13a 	srli	r13,r13,4
8001dd04:	b5bfffc4 	addi	r22,r22,-1
8001dd08:	1aeab03a 	or	r21,r3,r11
8001dd0c:	b0800005 	stb	r2,0(r22)
8001dd10:	ab44b03a 	or	r2,r21,r13
8001dd14:	103ff41e 	bne	r2,zero,8001dce8 <_gp+0xfffecf74>
8001dd18:	e59bc83a 	sub	r13,fp,r22
8001dd1c:	003d7906 	br	8001d304 <_gp+0xfffec590>
8001dd20:	d9000117 	ldw	r4,4(sp)
8001dd24:	d9800b04 	addi	r6,sp,44
8001dd28:	a00b883a 	mov	r5,r20
8001dd2c:	d9c00715 	stw	r7,28(sp)
8001dd30:	db000515 	stw	r12,20(sp)
8001dd34:	d8c00415 	stw	r3,16(sp)
8001dd38:	db400315 	stw	r13,12(sp)
8001dd3c:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dd40:	103ec31e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dd44:	d9000c17 	ldw	r4,48(sp)
8001dd48:	d8800d17 	ldw	r2,52(sp)
8001dd4c:	e021883a 	mov	r16,fp
8001dd50:	23800044 	addi	r14,r4,1
8001dd54:	d9c00717 	ldw	r7,28(sp)
8001dd58:	db000517 	ldw	r12,20(sp)
8001dd5c:	d8c00417 	ldw	r3,16(sp)
8001dd60:	db400317 	ldw	r13,12(sp)
8001dd64:	003f8506 	br	8001db7c <_gp+0xfffece08>
8001dd68:	10008e1e 	bne	r2,zero,8001dfa4 <___vfiprintf_internal_r+0x1084>
8001dd6c:	d8c00a47 	ldb	r3,41(sp)
8001dd70:	18006e26 	beq	r3,zero,8001df2c <___vfiprintf_internal_r+0x100c>
8001dd74:	d8800a44 	addi	r2,sp,41
8001dd78:	d8801815 	stw	r2,96(sp)
8001dd7c:	00800044 	movi	r2,1
8001dd80:	d8801915 	stw	r2,100(sp)
8001dd84:	d9801a04 	addi	r6,sp,104
8001dd88:	01400044 	movi	r5,1
8001dd8c:	2809883a 	mov	r4,r5
8001dd90:	3021883a 	mov	r16,r6
8001dd94:	29400044 	addi	r5,r5,1
8001dd98:	31800204 	addi	r6,r6,8
8001dd9c:	003f5b06 	br	8001db0c <_gp+0xfffecd98>
8001dda0:	d8800a84 	addi	r2,sp,42
8001dda4:	d8801815 	stw	r2,96(sp)
8001dda8:	00800084 	movi	r2,2
8001ddac:	d8801915 	stw	r2,100(sp)
8001ddb0:	d9801a04 	addi	r6,sp,104
8001ddb4:	01400044 	movi	r5,1
8001ddb8:	2809883a 	mov	r4,r5
8001ddbc:	3021883a 	mov	r16,r6
8001ddc0:	29400044 	addi	r5,r5,1
8001ddc4:	31800204 	addi	r6,r6,8
8001ddc8:	003d9806 	br	8001d42c <_gp+0xfffec6b8>
8001ddcc:	1000451e 	bne	r2,zero,8001dee4 <___vfiprintf_internal_r+0xfc4>
8001ddd0:	00c00044 	movi	r3,1
8001ddd4:	6805883a 	mov	r2,r13
8001ddd8:	dd801815 	stw	r22,96(sp)
8001dddc:	db401915 	stw	r13,100(sp)
8001dde0:	db400d15 	stw	r13,52(sp)
8001dde4:	d8c00c15 	stw	r3,48(sp)
8001dde8:	d9801a04 	addi	r6,sp,104
8001ddec:	003f8906 	br	8001dc14 <_gp+0xfffecea0>
8001ddf0:	e02d883a 	mov	r22,fp
8001ddf4:	a809883a 	mov	r4,r21
8001ddf8:	680b883a 	mov	r5,r13
8001ddfc:	01800284 	movi	r6,10
8001de00:	000f883a 	mov	r7,zero
8001de04:	db000415 	stw	r12,16(sp)
8001de08:	db400315 	stw	r13,12(sp)
8001de0c:	000cf340 	call	8000cf34 <__umoddi3>
8001de10:	db400317 	ldw	r13,12(sp)
8001de14:	10800c04 	addi	r2,r2,48
8001de18:	b5bfffc4 	addi	r22,r22,-1
8001de1c:	a809883a 	mov	r4,r21
8001de20:	680b883a 	mov	r5,r13
8001de24:	b0800005 	stb	r2,0(r22)
8001de28:	01800284 	movi	r6,10
8001de2c:	000f883a 	mov	r7,zero
8001de30:	000c99c0 	call	8000c99c <__udivdi3>
8001de34:	102b883a 	mov	r21,r2
8001de38:	10c4b03a 	or	r2,r2,r3
8001de3c:	181b883a 	mov	r13,r3
8001de40:	db000417 	ldw	r12,16(sp)
8001de44:	103feb1e 	bne	r2,zero,8001ddf4 <_gp+0xfffed080>
8001de48:	e59bc83a 	sub	r13,fp,r22
8001de4c:	003d2d06 	br	8001d304 <_gp+0xfffec590>
8001de50:	001b883a 	mov	r13,zero
8001de54:	e02d883a 	mov	r22,fp
8001de58:	003d2a06 	br	8001d304 <_gp+0xfffec590>
8001de5c:	d9000117 	ldw	r4,4(sp)
8001de60:	d9800b04 	addi	r6,sp,44
8001de64:	a00b883a 	mov	r5,r20
8001de68:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001de6c:	103e781e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001de70:	e021883a 	mov	r16,fp
8001de74:	003c6b06 	br	8001d024 <_gp+0xfffec2b0>
8001de78:	582b883a 	mov	r21,r11
8001de7c:	581bd7fa 	srai	r13,r11,31
8001de80:	003ebe06 	br	8001d97c <_gp+0xfffecc08>
8001de84:	582b883a 	mov	r21,r11
8001de88:	001b883a 	mov	r13,zero
8001de8c:	003e9306 	br	8001d8dc <_gp+0xfffecb68>
8001de90:	d9000117 	ldw	r4,4(sp)
8001de94:	d9800b04 	addi	r6,sp,44
8001de98:	a00b883a 	mov	r5,r20
8001de9c:	db400415 	stw	r13,16(sp)
8001dea0:	db000315 	stw	r12,12(sp)
8001dea4:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dea8:	103e691e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001deac:	d9000c17 	ldw	r4,48(sp)
8001deb0:	d8800d17 	ldw	r2,52(sp)
8001deb4:	d9801a04 	addi	r6,sp,104
8001deb8:	21400044 	addi	r5,r4,1
8001debc:	e021883a 	mov	r16,fp
8001dec0:	db400417 	ldw	r13,16(sp)
8001dec4:	db000317 	ldw	r12,12(sp)
8001dec8:	003d5806 	br	8001d42c <_gp+0xfffec6b8>
8001decc:	10005e1e 	bne	r2,zero,8001e048 <___vfiprintf_internal_r+0x1128>
8001ded0:	d9801a04 	addi	r6,sp,104
8001ded4:	01400044 	movi	r5,1
8001ded8:	0009883a 	mov	r4,zero
8001dedc:	e021883a 	mov	r16,fp
8001dee0:	003d5406 	br	8001d434 <_gp+0xfffec6c0>
8001dee4:	d9000117 	ldw	r4,4(sp)
8001dee8:	d9800b04 	addi	r6,sp,44
8001deec:	a00b883a 	mov	r5,r20
8001def0:	db400315 	stw	r13,12(sp)
8001def4:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001def8:	103e551e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001defc:	d9400c17 	ldw	r5,48(sp)
8001df00:	d8800d17 	ldw	r2,52(sp)
8001df04:	d9801a04 	addi	r6,sp,104
8001df08:	29400044 	addi	r5,r5,1
8001df0c:	e021883a 	mov	r16,fp
8001df10:	db400317 	ldw	r13,12(sp)
8001df14:	003d6f06 	br	8001d4d4 <_gp+0xfffec760>
8001df18:	10c00060 	cmpeqi	r3,r2,1
8001df1c:	183cc526 	beq	r3,zero,8001d234 <_gp+0xfffec4c0>
8001df20:	003ec806 	br	8001da44 <_gp+0xfffeccd0>
8001df24:	e02d883a 	mov	r22,fp
8001df28:	003cf606 	br	8001d304 <_gp+0xfffec590>
8001df2c:	703f9c1e 	bne	r14,zero,8001dda0 <_gp+0xfffed02c>
8001df30:	0009883a 	mov	r4,zero
8001df34:	d9801a04 	addi	r6,sp,104
8001df38:	01400044 	movi	r5,1
8001df3c:	e021883a 	mov	r16,fp
8001df40:	003d3c06 	br	8001d434 <_gp+0xfffec6c0>
8001df44:	d9000117 	ldw	r4,4(sp)
8001df48:	d9800b04 	addi	r6,sp,44
8001df4c:	a00b883a 	mov	r5,r20
8001df50:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001df54:	103e3e1e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001df58:	d8800d17 	ldw	r2,52(sp)
8001df5c:	003f3106 	br	8001dc24 <_gp+0xfffeceb0>
8001df60:	b009883a 	mov	r4,r22
8001df64:	d8c00315 	stw	r3,12(sp)
8001df68:	00111940 	call	80011194 <strlen>
8001df6c:	d8c00317 	ldw	r3,12(sp)
8001df70:	dcc00215 	stw	r19,8(sp)
8001df74:	101b883a 	mov	r13,r2
8001df78:	db000a43 	ldbu	r12,41(sp)
8001df7c:	1827883a 	mov	r19,r3
8001df80:	0023883a 	mov	r17,zero
8001df84:	003cdf06 	br	8001d304 <_gp+0xfffec590>
8001df88:	1880040c 	andi	r2,r3,16
8001df8c:	1000181e 	bne	r2,zero,8001dff0 <___vfiprintf_internal_r+0x10d0>
8001df90:	18c0100c 	andi	r3,r3,64
8001df94:	18001626 	beq	r3,zero,8001dff0 <___vfiprintf_internal_r+0x10d0>
8001df98:	d8800017 	ldw	r2,0(sp)
8001df9c:	2080000d 	sth	r2,0(r4)
8001dfa0:	003c0806 	br	8001cfc4 <_gp+0xfffec250>
8001dfa4:	d9000117 	ldw	r4,4(sp)
8001dfa8:	d9800b04 	addi	r6,sp,44
8001dfac:	a00b883a 	mov	r5,r20
8001dfb0:	db400515 	stw	r13,20(sp)
8001dfb4:	db000415 	stw	r12,16(sp)
8001dfb8:	db800315 	stw	r14,12(sp)
8001dfbc:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001dfc0:	103e231e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001dfc4:	d9000c17 	ldw	r4,48(sp)
8001dfc8:	d8800d17 	ldw	r2,52(sp)
8001dfcc:	e021883a 	mov	r16,fp
8001dfd0:	21400044 	addi	r5,r4,1
8001dfd4:	db400517 	ldw	r13,20(sp)
8001dfd8:	db000417 	ldw	r12,16(sp)
8001dfdc:	db800317 	ldw	r14,12(sp)
8001dfe0:	003d0006 	br	8001d3e4 <_gp+0xfffec670>
8001dfe4:	3009883a 	mov	r4,r6
8001dfe8:	39dbea84 	addi	r7,r7,28586
8001dfec:	003d2f06 	br	8001d4ac <_gp+0xfffec738>
8001dff0:	d8800017 	ldw	r2,0(sp)
8001dff4:	20800015 	stw	r2,0(r4)
8001dff8:	003bf206 	br	8001cfc4 <_gp+0xfffec250>
8001dffc:	04a5c83a 	sub	r18,zero,r18
8001e000:	dd400215 	stw	r21,8(sp)
8001e004:	003daa06 	br	8001d6b0 <_gp+0xfffec93c>
8001e008:	b8800043 	ldbu	r2,1(r23)
8001e00c:	18c00814 	ori	r3,r3,32
8001e010:	bdc00044 	addi	r23,r23,1
8001e014:	10803fcc 	andi	r2,r2,255
8001e018:	1080201c 	xori	r2,r2,128
8001e01c:	10bfe004 	addi	r2,r2,-128
8001e020:	003c0d06 	br	8001d058 <_gp+0xfffec2e4>
8001e024:	888001f0 	cmpltui	r2,r17,7
8001e028:	881b883a 	mov	r13,r17
8001e02c:	1000011e 	bne	r2,zero,8001e034 <___vfiprintf_internal_r+0x1114>
8001e030:	03400184 	movi	r13,6
8001e034:	05a000b4 	movhi	r22,32770
8001e038:	682b883a 	mov	r21,r13
8001e03c:	dcc00215 	stw	r19,8(sp)
8001e040:	b59aad04 	addi	r22,r22,27316
8001e044:	003e5c06 	br	8001d9b8 <_gp+0xfffecc44>
8001e048:	d9000117 	ldw	r4,4(sp)
8001e04c:	d9800b04 	addi	r6,sp,44
8001e050:	a00b883a 	mov	r5,r20
8001e054:	db400315 	stw	r13,12(sp)
8001e058:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001e05c:	103dfc1e 	bne	r2,zero,8001d850 <_gp+0xfffecadc>
8001e060:	d9000c17 	ldw	r4,48(sp)
8001e064:	d8800d17 	ldw	r2,52(sp)
8001e068:	d9801a04 	addi	r6,sp,104
8001e06c:	21400044 	addi	r5,r4,1
8001e070:	e021883a 	mov	r16,fp
8001e074:	db400317 	ldw	r13,12(sp)
8001e078:	003cee06 	br	8001d434 <_gp+0xfffec6c0>
8001e07c:	303f883a 	mov	ra,r6
8001e080:	39dbee84 	addi	r7,r7,28602
8001e084:	003ccd06 	br	8001d3bc <_gp+0xfffec648>
8001e088:	21400044 	addi	r5,r4,1
8001e08c:	39dbee84 	addi	r7,r7,28602
8001e090:	003d3a06 	br	8001d57c <_gp+0xfffec808>
8001e094:	881b883a 	mov	r13,r17
8001e098:	dcc00215 	stw	r19,8(sp)
8001e09c:	db000a43 	ldbu	r12,41(sp)
8001e0a0:	1827883a 	mov	r19,r3
8001e0a4:	0023883a 	mov	r17,zero
8001e0a8:	003c9606 	br	8001d304 <_gp+0xfffec590>
8001e0ac:	01e000b4 	movhi	r7,32770
8001e0b0:	3019883a 	mov	r12,r6
8001e0b4:	281d883a 	mov	r14,r5
8001e0b8:	39dbea84 	addi	r7,r7,28586
8001e0bc:	003ec206 	br	8001dbc8 <_gp+0xfffece54>
8001e0c0:	d9000117 	ldw	r4,4(sp)
8001e0c4:	d9800b04 	addi	r6,sp,44
8001e0c8:	a00b883a 	mov	r5,r20
8001e0cc:	001ce140 	call	8001ce14 <__sprint_r.part.0>
8001e0d0:	003ddf06 	br	8001d850 <_gp+0xfffecadc>
8001e0d4:	00bfffc4 	movi	r2,-1
8001e0d8:	d8800015 	stw	r2,0(sp)
8001e0dc:	003ddf06 	br	8001d85c <_gp+0xfffecae8>
8001e0e0:	d8800217 	ldw	r2,8(sp)
8001e0e4:	14400017 	ldw	r17,0(r2)
8001e0e8:	15400104 	addi	r21,r2,4
8001e0ec:	8800010e 	bge	r17,zero,8001e0f4 <___vfiprintf_internal_r+0x11d4>
8001e0f0:	047fffc4 	movi	r17,-1
8001e0f4:	b8800043 	ldbu	r2,1(r23)
8001e0f8:	dd400215 	stw	r21,8(sp)
8001e0fc:	282f883a 	mov	r23,r5
8001e100:	10803fcc 	andi	r2,r2,255
8001e104:	1080201c 	xori	r2,r2,128
8001e108:	10bfe004 	addi	r2,r2,-128
8001e10c:	003bd206 	br	8001d058 <_gp+0xfffec2e4>
8001e110:	d9c00a45 	stb	r7,41(sp)
8001e114:	003dc006 	br	8001d818 <_gp+0xfffecaa4>
8001e118:	d9c00a45 	stb	r7,41(sp)
8001e11c:	003de506 	br	8001d8b4 <_gp+0xfffecb40>
8001e120:	d9c00a45 	stb	r7,41(sp)
8001e124:	003df906 	br	8001d90c <_gp+0xfffecb98>
8001e128:	d9c00a45 	stb	r7,41(sp)
8001e12c:	003e0c06 	br	8001d960 <_gp+0xfffecbec>
8001e130:	d9c00a45 	stb	r7,41(sp)
8001e134:	003e2506 	br	8001d9cc <_gp+0xfffecc58>
8001e138:	d9c00a45 	stb	r7,41(sp)
8001e13c:	003d4006 	br	8001d640 <_gp+0xfffec8cc>

8001e140 <__vfiprintf_internal>:
8001e140:	00a000f4 	movhi	r2,32771
8001e144:	300f883a 	mov	r7,r6
8001e148:	280d883a 	mov	r6,r5
8001e14c:	200b883a 	mov	r5,r4
8001e150:	11235e17 	ldw	r4,-29320(r2)
8001e154:	001cf201 	jmpi	8001cf20 <___vfiprintf_internal_r>

8001e158 <__sbprintf>:
8001e158:	2880030b 	ldhu	r2,12(r5)
8001e15c:	2b001917 	ldw	r12,100(r5)
8001e160:	2ac0038b 	ldhu	r11,14(r5)
8001e164:	2a800717 	ldw	r10,28(r5)
8001e168:	2a400917 	ldw	r9,36(r5)
8001e16c:	defee204 	addi	sp,sp,-1144
8001e170:	da001a04 	addi	r8,sp,104
8001e174:	00c10004 	movi	r3,1024
8001e178:	dc011a15 	stw	r16,1128(sp)
8001e17c:	10bfff4c 	andi	r2,r2,65533
8001e180:	2821883a 	mov	r16,r5
8001e184:	d80b883a 	mov	r5,sp
8001e188:	dc811c15 	stw	r18,1136(sp)
8001e18c:	dc411b15 	stw	r17,1132(sp)
8001e190:	dfc11d15 	stw	ra,1140(sp)
8001e194:	2025883a 	mov	r18,r4
8001e198:	d880030d 	sth	r2,12(sp)
8001e19c:	db001915 	stw	r12,100(sp)
8001e1a0:	dac0038d 	sth	r11,14(sp)
8001e1a4:	da800715 	stw	r10,28(sp)
8001e1a8:	da400915 	stw	r9,36(sp)
8001e1ac:	da000015 	stw	r8,0(sp)
8001e1b0:	da000415 	stw	r8,16(sp)
8001e1b4:	d8c00215 	stw	r3,8(sp)
8001e1b8:	d8c00515 	stw	r3,20(sp)
8001e1bc:	d8000615 	stw	zero,24(sp)
8001e1c0:	001cf200 	call	8001cf20 <___vfiprintf_internal_r>
8001e1c4:	1023883a 	mov	r17,r2
8001e1c8:	10000d0e 	bge	r2,zero,8001e200 <__sbprintf+0xa8>
8001e1cc:	d880030b 	ldhu	r2,12(sp)
8001e1d0:	1080100c 	andi	r2,r2,64
8001e1d4:	10000326 	beq	r2,zero,8001e1e4 <__sbprintf+0x8c>
8001e1d8:	8080030b 	ldhu	r2,12(r16)
8001e1dc:	10801014 	ori	r2,r2,64
8001e1e0:	8080030d 	sth	r2,12(r16)
8001e1e4:	8805883a 	mov	r2,r17
8001e1e8:	dfc11d17 	ldw	ra,1140(sp)
8001e1ec:	dc811c17 	ldw	r18,1136(sp)
8001e1f0:	dc411b17 	ldw	r17,1132(sp)
8001e1f4:	dc011a17 	ldw	r16,1128(sp)
8001e1f8:	dec11e04 	addi	sp,sp,1144
8001e1fc:	f800283a 	ret
8001e200:	d80b883a 	mov	r5,sp
8001e204:	9009883a 	mov	r4,r18
8001e208:	00176ac0 	call	800176ac <_fflush_r>
8001e20c:	103fef26 	beq	r2,zero,8001e1cc <_gp+0xfffed458>
8001e210:	047fffc4 	movi	r17,-1
8001e214:	003fed06 	br	8001e1cc <_gp+0xfffed458>

8001e218 <__swbuf_r>:
8001e218:	defffb04 	addi	sp,sp,-20
8001e21c:	dc800215 	stw	r18,8(sp)
8001e220:	dc400115 	stw	r17,4(sp)
8001e224:	dc000015 	stw	r16,0(sp)
8001e228:	dfc00415 	stw	ra,16(sp)
8001e22c:	dcc00315 	stw	r19,12(sp)
8001e230:	2023883a 	mov	r17,r4
8001e234:	2825883a 	mov	r18,r5
8001e238:	3021883a 	mov	r16,r6
8001e23c:	20000226 	beq	r4,zero,8001e248 <__swbuf_r+0x30>
8001e240:	20800e17 	ldw	r2,56(r4)
8001e244:	10003e26 	beq	r2,zero,8001e340 <__swbuf_r+0x128>
8001e248:	80800617 	ldw	r2,24(r16)
8001e24c:	80c0030b 	ldhu	r3,12(r16)
8001e250:	80800215 	stw	r2,8(r16)
8001e254:	1880020c 	andi	r2,r3,8
8001e258:	10001f26 	beq	r2,zero,8001e2d8 <__swbuf_r+0xc0>
8001e25c:	80800417 	ldw	r2,16(r16)
8001e260:	10001d26 	beq	r2,zero,8001e2d8 <__swbuf_r+0xc0>
8001e264:	1908000c 	andi	r4,r3,8192
8001e268:	94c03fcc 	andi	r19,r18,255
8001e26c:	20002326 	beq	r4,zero,8001e2fc <__swbuf_r+0xe4>
8001e270:	80c00017 	ldw	r3,0(r16)
8001e274:	81000517 	ldw	r4,20(r16)
8001e278:	1885c83a 	sub	r2,r3,r2
8001e27c:	1100290e 	bge	r2,r4,8001e324 <__swbuf_r+0x10c>
8001e280:	10800044 	addi	r2,r2,1
8001e284:	81000217 	ldw	r4,8(r16)
8001e288:	19400044 	addi	r5,r3,1
8001e28c:	81400015 	stw	r5,0(r16)
8001e290:	213fffc4 	addi	r4,r4,-1
8001e294:	81000215 	stw	r4,8(r16)
8001e298:	1c800005 	stb	r18,0(r3)
8001e29c:	80c00517 	ldw	r3,20(r16)
8001e2a0:	18802926 	beq	r3,r2,8001e348 <__swbuf_r+0x130>
8001e2a4:	8080030b 	ldhu	r2,12(r16)
8001e2a8:	1080004c 	andi	r2,r2,1
8001e2ac:	10000226 	beq	r2,zero,8001e2b8 <__swbuf_r+0xa0>
8001e2b0:	98800298 	cmpnei	r2,r19,10
8001e2b4:	10002426 	beq	r2,zero,8001e348 <__swbuf_r+0x130>
8001e2b8:	9805883a 	mov	r2,r19
8001e2bc:	dfc00417 	ldw	ra,16(sp)
8001e2c0:	dcc00317 	ldw	r19,12(sp)
8001e2c4:	dc800217 	ldw	r18,8(sp)
8001e2c8:	dc400117 	ldw	r17,4(sp)
8001e2cc:	dc000017 	ldw	r16,0(sp)
8001e2d0:	dec00504 	addi	sp,sp,20
8001e2d4:	f800283a 	ret
8001e2d8:	800b883a 	mov	r5,r16
8001e2dc:	8809883a 	mov	r4,r17
8001e2e0:	0015a200 	call	80015a20 <__swsetup_r>
8001e2e4:	10001c1e 	bne	r2,zero,8001e358 <__swbuf_r+0x140>
8001e2e8:	80c0030b 	ldhu	r3,12(r16)
8001e2ec:	80800417 	ldw	r2,16(r16)
8001e2f0:	94c03fcc 	andi	r19,r18,255
8001e2f4:	1908000c 	andi	r4,r3,8192
8001e2f8:	203fdd1e 	bne	r4,zero,8001e270 <_gp+0xfffed4fc>
8001e2fc:	81001917 	ldw	r4,100(r16)
8001e300:	18c80014 	ori	r3,r3,8192
8001e304:	0177ffc4 	movi	r5,-8193
8001e308:	2148703a 	and	r4,r4,r5
8001e30c:	80c0030d 	sth	r3,12(r16)
8001e310:	80c00017 	ldw	r3,0(r16)
8001e314:	81001915 	stw	r4,100(r16)
8001e318:	81000517 	ldw	r4,20(r16)
8001e31c:	1885c83a 	sub	r2,r3,r2
8001e320:	113fd716 	blt	r2,r4,8001e280 <_gp+0xfffed50c>
8001e324:	800b883a 	mov	r5,r16
8001e328:	8809883a 	mov	r4,r17
8001e32c:	00176ac0 	call	800176ac <_fflush_r>
8001e330:	1000091e 	bne	r2,zero,8001e358 <__swbuf_r+0x140>
8001e334:	80c00017 	ldw	r3,0(r16)
8001e338:	00800044 	movi	r2,1
8001e33c:	003fd106 	br	8001e284 <_gp+0xfffed510>
8001e340:	0017a4c0 	call	80017a4c <__sinit>
8001e344:	003fc006 	br	8001e248 <_gp+0xfffed4d4>
8001e348:	800b883a 	mov	r5,r16
8001e34c:	8809883a 	mov	r4,r17
8001e350:	00176ac0 	call	800176ac <_fflush_r>
8001e354:	103fd826 	beq	r2,zero,8001e2b8 <_gp+0xfffed544>
8001e358:	04ffffc4 	movi	r19,-1
8001e35c:	003fd606 	br	8001e2b8 <_gp+0xfffed544>

8001e360 <__swbuf>:
8001e360:	00a000f4 	movhi	r2,32771
8001e364:	280d883a 	mov	r6,r5
8001e368:	200b883a 	mov	r5,r4
8001e36c:	11235e17 	ldw	r4,-29320(r2)
8001e370:	001e2181 	jmpi	8001e218 <__swbuf_r>

8001e374 <_write_r>:
8001e374:	defffe04 	addi	sp,sp,-8
8001e378:	2805883a 	mov	r2,r5
8001e37c:	dc000015 	stw	r16,0(sp)
8001e380:	300b883a 	mov	r5,r6
8001e384:	2021883a 	mov	r16,r4
8001e388:	380d883a 	mov	r6,r7
8001e38c:	1009883a 	mov	r4,r2
8001e390:	00a000f4 	movhi	r2,32771
8001e394:	dfc00115 	stw	ra,4(sp)
8001e398:	102ad715 	stw	zero,-21668(r2)
8001e39c:	00205700 	call	80020570 <write>
8001e3a0:	10ffffd8 	cmpnei	r3,r2,-1
8001e3a4:	18000426 	beq	r3,zero,8001e3b8 <_write_r+0x44>
8001e3a8:	dfc00117 	ldw	ra,4(sp)
8001e3ac:	dc000017 	ldw	r16,0(sp)
8001e3b0:	dec00204 	addi	sp,sp,8
8001e3b4:	f800283a 	ret
8001e3b8:	00e000f4 	movhi	r3,32771
8001e3bc:	18ead717 	ldw	r3,-21668(r3)
8001e3c0:	183ff926 	beq	r3,zero,8001e3a8 <_gp+0xfffed634>
8001e3c4:	80c00015 	stw	r3,0(r16)
8001e3c8:	dfc00117 	ldw	ra,4(sp)
8001e3cc:	dc000017 	ldw	r16,0(sp)
8001e3d0:	dec00204 	addi	sp,sp,8
8001e3d4:	f800283a 	ret

8001e3d8 <_close_r>:
8001e3d8:	defffe04 	addi	sp,sp,-8
8001e3dc:	dc000015 	stw	r16,0(sp)
8001e3e0:	00a000f4 	movhi	r2,32771
8001e3e4:	2021883a 	mov	r16,r4
8001e3e8:	2809883a 	mov	r4,r5
8001e3ec:	dfc00115 	stw	ra,4(sp)
8001e3f0:	102ad715 	stw	zero,-21668(r2)
8001e3f4:	001f94c0 	call	8001f94c <close>
8001e3f8:	10ffffd8 	cmpnei	r3,r2,-1
8001e3fc:	18000426 	beq	r3,zero,8001e410 <_close_r+0x38>
8001e400:	dfc00117 	ldw	ra,4(sp)
8001e404:	dc000017 	ldw	r16,0(sp)
8001e408:	dec00204 	addi	sp,sp,8
8001e40c:	f800283a 	ret
8001e410:	00e000f4 	movhi	r3,32771
8001e414:	18ead717 	ldw	r3,-21668(r3)
8001e418:	183ff926 	beq	r3,zero,8001e400 <_gp+0xfffed68c>
8001e41c:	80c00015 	stw	r3,0(r16)
8001e420:	dfc00117 	ldw	ra,4(sp)
8001e424:	dc000017 	ldw	r16,0(sp)
8001e428:	dec00204 	addi	sp,sp,8
8001e42c:	f800283a 	ret

8001e430 <_fclose_r>:
8001e430:	defffc04 	addi	sp,sp,-16
8001e434:	dfc00315 	stw	ra,12(sp)
8001e438:	dc800215 	stw	r18,8(sp)
8001e43c:	dc400115 	stw	r17,4(sp)
8001e440:	dc000015 	stw	r16,0(sp)
8001e444:	28000726 	beq	r5,zero,8001e464 <_fclose_r+0x34>
8001e448:	2023883a 	mov	r17,r4
8001e44c:	2821883a 	mov	r16,r5
8001e450:	20000226 	beq	r4,zero,8001e45c <_fclose_r+0x2c>
8001e454:	20800e17 	ldw	r2,56(r4)
8001e458:	10002726 	beq	r2,zero,8001e4f8 <_fclose_r+0xc8>
8001e45c:	8080030f 	ldh	r2,12(r16)
8001e460:	1000081e 	bne	r2,zero,8001e484 <_fclose_r+0x54>
8001e464:	0025883a 	mov	r18,zero
8001e468:	9005883a 	mov	r2,r18
8001e46c:	dfc00317 	ldw	ra,12(sp)
8001e470:	dc800217 	ldw	r18,8(sp)
8001e474:	dc400117 	ldw	r17,4(sp)
8001e478:	dc000017 	ldw	r16,0(sp)
8001e47c:	dec00404 	addi	sp,sp,16
8001e480:	f800283a 	ret
8001e484:	800b883a 	mov	r5,r16
8001e488:	8809883a 	mov	r4,r17
8001e48c:	001748c0 	call	8001748c <__sflush_r>
8001e490:	1025883a 	mov	r18,r2
8001e494:	80800b17 	ldw	r2,44(r16)
8001e498:	10000426 	beq	r2,zero,8001e4ac <_fclose_r+0x7c>
8001e49c:	81400717 	ldw	r5,28(r16)
8001e4a0:	8809883a 	mov	r4,r17
8001e4a4:	103ee83a 	callr	r2
8001e4a8:	10001716 	blt	r2,zero,8001e508 <_fclose_r+0xd8>
8001e4ac:	8080030b 	ldhu	r2,12(r16)
8001e4b0:	1080200c 	andi	r2,r2,128
8001e4b4:	1000161e 	bne	r2,zero,8001e510 <_fclose_r+0xe0>
8001e4b8:	81400c17 	ldw	r5,48(r16)
8001e4bc:	28000526 	beq	r5,zero,8001e4d4 <_fclose_r+0xa4>
8001e4c0:	80801004 	addi	r2,r16,64
8001e4c4:	28800226 	beq	r5,r2,8001e4d0 <_fclose_r+0xa0>
8001e4c8:	8809883a 	mov	r4,r17
8001e4cc:	0017bb00 	call	80017bb0 <_free_r>
8001e4d0:	80000c15 	stw	zero,48(r16)
8001e4d4:	81401117 	ldw	r5,68(r16)
8001e4d8:	28000326 	beq	r5,zero,8001e4e8 <_fclose_r+0xb8>
8001e4dc:	8809883a 	mov	r4,r17
8001e4e0:	0017bb00 	call	80017bb0 <_free_r>
8001e4e4:	80001115 	stw	zero,68(r16)
8001e4e8:	0017a5c0 	call	80017a5c <__sfp_lock_acquire>
8001e4ec:	8000030d 	sth	zero,12(r16)
8001e4f0:	0017a600 	call	80017a60 <__sfp_lock_release>
8001e4f4:	003fdc06 	br	8001e468 <_gp+0xfffed6f4>
8001e4f8:	0017a4c0 	call	80017a4c <__sinit>
8001e4fc:	8080030f 	ldh	r2,12(r16)
8001e500:	103fd826 	beq	r2,zero,8001e464 <_gp+0xfffed6f0>
8001e504:	003fdf06 	br	8001e484 <_gp+0xfffed710>
8001e508:	04bfffc4 	movi	r18,-1
8001e50c:	003fe706 	br	8001e4ac <_gp+0xfffed738>
8001e510:	81400417 	ldw	r5,16(r16)
8001e514:	8809883a 	mov	r4,r17
8001e518:	0017bb00 	call	80017bb0 <_free_r>
8001e51c:	003fe606 	br	8001e4b8 <_gp+0xfffed744>

8001e520 <fclose>:
8001e520:	00a000f4 	movhi	r2,32771
8001e524:	200b883a 	mov	r5,r4
8001e528:	11235e17 	ldw	r4,-29320(r2)
8001e52c:	001e4301 	jmpi	8001e430 <_fclose_r>

8001e530 <__fputwc>:
8001e530:	defff904 	addi	sp,sp,-28
8001e534:	dcc00415 	stw	r19,16(sp)
8001e538:	dc800315 	stw	r18,12(sp)
8001e53c:	dc000115 	stw	r16,4(sp)
8001e540:	dfc00615 	stw	ra,24(sp)
8001e544:	dd000515 	stw	r20,20(sp)
8001e548:	dc400215 	stw	r17,8(sp)
8001e54c:	2027883a 	mov	r19,r4
8001e550:	2825883a 	mov	r18,r5
8001e554:	3021883a 	mov	r16,r6
8001e558:	000fc280 	call	8000fc28 <__locale_mb_cur_max>
8001e55c:	10800058 	cmpnei	r2,r2,1
8001e560:	1000071e 	bne	r2,zero,8001e580 <__fputwc+0x50>
8001e564:	90bfffc4 	addi	r2,r18,-1
8001e568:	10803fe8 	cmpgeui	r2,r2,255
8001e56c:	1000041e 	bne	r2,zero,8001e580 <__fputwc+0x50>
8001e570:	900b883a 	mov	r5,r18
8001e574:	dc8000c5 	stb	r18,3(sp)
8001e578:	05000044 	movi	r20,1
8001e57c:	00000a06 	br	8001e5a8 <__fputwc+0x78>
8001e580:	81c01704 	addi	r7,r16,92
8001e584:	900d883a 	mov	r6,r18
8001e588:	d94000c4 	addi	r5,sp,3
8001e58c:	9809883a 	mov	r4,r19
8001e590:	001f5400 	call	8001f540 <_wcrtomb_r>
8001e594:	1029883a 	mov	r20,r2
8001e598:	10bfffd8 	cmpnei	r2,r2,-1
8001e59c:	10003826 	beq	r2,zero,8001e680 <__fputwc+0x150>
8001e5a0:	a0001f26 	beq	r20,zero,8001e620 <__fputwc+0xf0>
8001e5a4:	d94000c3 	ldbu	r5,3(sp)
8001e5a8:	0023883a 	mov	r17,zero
8001e5ac:	00000a06 	br	8001e5d8 <__fputwc+0xa8>
8001e5b0:	80800017 	ldw	r2,0(r16)
8001e5b4:	11400005 	stb	r5,0(r2)
8001e5b8:	80c00017 	ldw	r3,0(r16)
8001e5bc:	18c00044 	addi	r3,r3,1
8001e5c0:	80c00015 	stw	r3,0(r16)
8001e5c4:	8c400044 	addi	r17,r17,1
8001e5c8:	d88000c4 	addi	r2,sp,3
8001e5cc:	1445883a 	add	r2,r2,r17
8001e5d0:	8d00132e 	bgeu	r17,r20,8001e620 <__fputwc+0xf0>
8001e5d4:	11400003 	ldbu	r5,0(r2)
8001e5d8:	80c00217 	ldw	r3,8(r16)
8001e5dc:	18ffffc4 	addi	r3,r3,-1
8001e5e0:	80c00215 	stw	r3,8(r16)
8001e5e4:	183ff20e 	bge	r3,zero,8001e5b0 <_gp+0xfffed83c>
8001e5e8:	80800617 	ldw	r2,24(r16)
8001e5ec:	18801516 	blt	r3,r2,8001e644 <__fputwc+0x114>
8001e5f0:	80800017 	ldw	r2,0(r16)
8001e5f4:	11400005 	stb	r5,0(r2)
8001e5f8:	80800017 	ldw	r2,0(r16)
8001e5fc:	10c00003 	ldbu	r3,0(r2)
8001e600:	10800044 	addi	r2,r2,1
8001e604:	18c002a0 	cmpeqi	r3,r3,10
8001e608:	1800171e 	bne	r3,zero,8001e668 <__fputwc+0x138>
8001e60c:	80800015 	stw	r2,0(r16)
8001e610:	8c400044 	addi	r17,r17,1
8001e614:	d88000c4 	addi	r2,sp,3
8001e618:	1445883a 	add	r2,r2,r17
8001e61c:	8d3fed36 	bltu	r17,r20,8001e5d4 <_gp+0xfffed860>
8001e620:	9005883a 	mov	r2,r18
8001e624:	dfc00617 	ldw	ra,24(sp)
8001e628:	dd000517 	ldw	r20,20(sp)
8001e62c:	dcc00417 	ldw	r19,16(sp)
8001e630:	dc800317 	ldw	r18,12(sp)
8001e634:	dc400217 	ldw	r17,8(sp)
8001e638:	dc000117 	ldw	r16,4(sp)
8001e63c:	dec00704 	addi	sp,sp,28
8001e640:	f800283a 	ret
8001e644:	29403fcc 	andi	r5,r5,255
8001e648:	800d883a 	mov	r6,r16
8001e64c:	9809883a 	mov	r4,r19
8001e650:	001e2180 	call	8001e218 <__swbuf_r>
8001e654:	10bfffe0 	cmpeqi	r2,r2,-1
8001e658:	10803fcc 	andi	r2,r2,255
8001e65c:	103fd926 	beq	r2,zero,8001e5c4 <_gp+0xfffed850>
8001e660:	00bfffc4 	movi	r2,-1
8001e664:	003fef06 	br	8001e624 <_gp+0xfffed8b0>
8001e668:	800d883a 	mov	r6,r16
8001e66c:	01400284 	movi	r5,10
8001e670:	9809883a 	mov	r4,r19
8001e674:	001e2180 	call	8001e218 <__swbuf_r>
8001e678:	10bfffe0 	cmpeqi	r2,r2,-1
8001e67c:	003ff606 	br	8001e658 <_gp+0xfffed8e4>
8001e680:	80c0030b 	ldhu	r3,12(r16)
8001e684:	00bfffc4 	movi	r2,-1
8001e688:	18c01014 	ori	r3,r3,64
8001e68c:	80c0030d 	sth	r3,12(r16)
8001e690:	003fe406 	br	8001e624 <_gp+0xfffed8b0>

8001e694 <_fputwc_r>:
8001e694:	3080030b 	ldhu	r2,12(r6)
8001e698:	10c8000c 	andi	r3,r2,8192
8001e69c:	1800051e 	bne	r3,zero,8001e6b4 <_fputwc_r+0x20>
8001e6a0:	30c01917 	ldw	r3,100(r6)
8001e6a4:	10880014 	ori	r2,r2,8192
8001e6a8:	3080030d 	sth	r2,12(r6)
8001e6ac:	18880014 	ori	r2,r3,8192
8001e6b0:	30801915 	stw	r2,100(r6)
8001e6b4:	001e5301 	jmpi	8001e530 <__fputwc>

8001e6b8 <fputwc>:
8001e6b8:	defffc04 	addi	sp,sp,-16
8001e6bc:	00a000f4 	movhi	r2,32771
8001e6c0:	dc000115 	stw	r16,4(sp)
8001e6c4:	14235e17 	ldw	r16,-29320(r2)
8001e6c8:	dc400215 	stw	r17,8(sp)
8001e6cc:	dfc00315 	stw	ra,12(sp)
8001e6d0:	2023883a 	mov	r17,r4
8001e6d4:	80000226 	beq	r16,zero,8001e6e0 <fputwc+0x28>
8001e6d8:	80800e17 	ldw	r2,56(r16)
8001e6dc:	10001026 	beq	r2,zero,8001e720 <fputwc+0x68>
8001e6e0:	2880030b 	ldhu	r2,12(r5)
8001e6e4:	10c8000c 	andi	r3,r2,8192
8001e6e8:	1800051e 	bne	r3,zero,8001e700 <fputwc+0x48>
8001e6ec:	28c01917 	ldw	r3,100(r5)
8001e6f0:	10880014 	ori	r2,r2,8192
8001e6f4:	2880030d 	sth	r2,12(r5)
8001e6f8:	18880014 	ori	r2,r3,8192
8001e6fc:	28801915 	stw	r2,100(r5)
8001e700:	280d883a 	mov	r6,r5
8001e704:	8009883a 	mov	r4,r16
8001e708:	880b883a 	mov	r5,r17
8001e70c:	dfc00317 	ldw	ra,12(sp)
8001e710:	dc400217 	ldw	r17,8(sp)
8001e714:	dc000117 	ldw	r16,4(sp)
8001e718:	dec00404 	addi	sp,sp,16
8001e71c:	001e5301 	jmpi	8001e530 <__fputwc>
8001e720:	8009883a 	mov	r4,r16
8001e724:	d9400015 	stw	r5,0(sp)
8001e728:	0017a4c0 	call	80017a4c <__sinit>
8001e72c:	d9400017 	ldw	r5,0(sp)
8001e730:	003feb06 	br	8001e6e0 <_gp+0xfffed96c>

8001e734 <_fstat_r>:
8001e734:	defffe04 	addi	sp,sp,-8
8001e738:	2805883a 	mov	r2,r5
8001e73c:	dc000015 	stw	r16,0(sp)
8001e740:	300b883a 	mov	r5,r6
8001e744:	2021883a 	mov	r16,r4
8001e748:	1009883a 	mov	r4,r2
8001e74c:	00a000f4 	movhi	r2,32771
8001e750:	dfc00115 	stw	ra,4(sp)
8001e754:	102ad715 	stw	zero,-21668(r2)
8001e758:	001fbe00 	call	8001fbe0 <fstat>
8001e75c:	10ffffd8 	cmpnei	r3,r2,-1
8001e760:	18000426 	beq	r3,zero,8001e774 <_fstat_r+0x40>
8001e764:	dfc00117 	ldw	ra,4(sp)
8001e768:	dc000017 	ldw	r16,0(sp)
8001e76c:	dec00204 	addi	sp,sp,8
8001e770:	f800283a 	ret
8001e774:	00e000f4 	movhi	r3,32771
8001e778:	18ead717 	ldw	r3,-21668(r3)
8001e77c:	183ff926 	beq	r3,zero,8001e764 <_gp+0xfffed9f0>
8001e780:	80c00015 	stw	r3,0(r16)
8001e784:	dfc00117 	ldw	ra,4(sp)
8001e788:	dc000017 	ldw	r16,0(sp)
8001e78c:	dec00204 	addi	sp,sp,8
8001e790:	f800283a 	ret

8001e794 <_isatty_r>:
8001e794:	defffe04 	addi	sp,sp,-8
8001e798:	dc000015 	stw	r16,0(sp)
8001e79c:	00a000f4 	movhi	r2,32771
8001e7a0:	2021883a 	mov	r16,r4
8001e7a4:	2809883a 	mov	r4,r5
8001e7a8:	dfc00115 	stw	ra,4(sp)
8001e7ac:	102ad715 	stw	zero,-21668(r2)
8001e7b0:	001fd000 	call	8001fd00 <isatty>
8001e7b4:	10ffffd8 	cmpnei	r3,r2,-1
8001e7b8:	18000426 	beq	r3,zero,8001e7cc <_isatty_r+0x38>
8001e7bc:	dfc00117 	ldw	ra,4(sp)
8001e7c0:	dc000017 	ldw	r16,0(sp)
8001e7c4:	dec00204 	addi	sp,sp,8
8001e7c8:	f800283a 	ret
8001e7cc:	00e000f4 	movhi	r3,32771
8001e7d0:	18ead717 	ldw	r3,-21668(r3)
8001e7d4:	183ff926 	beq	r3,zero,8001e7bc <_gp+0xfffeda48>
8001e7d8:	80c00015 	stw	r3,0(r16)
8001e7dc:	dfc00117 	ldw	ra,4(sp)
8001e7e0:	dc000017 	ldw	r16,0(sp)
8001e7e4:	dec00204 	addi	sp,sp,8
8001e7e8:	f800283a 	ret

8001e7ec <iswspace>:
8001e7ec:	20804028 	cmpgeui	r2,r4,256
8001e7f0:	10000226 	beq	r2,zero,8001e7fc <iswspace+0x10>
8001e7f4:	0005883a 	mov	r2,zero
8001e7f8:	f800283a 	ret
8001e7fc:	defffe04 	addi	sp,sp,-8
8001e800:	dc000015 	stw	r16,0(sp)
8001e804:	dfc00115 	stw	ra,4(sp)
8001e808:	2021883a 	mov	r16,r4
8001e80c:	000fc500 	call	8000fc50 <__locale_ctype_ptr>
8001e810:	1405883a 	add	r2,r2,r16
8001e814:	10800043 	ldbu	r2,1(r2)
8001e818:	1080020c 	andi	r2,r2,8
8001e81c:	dfc00117 	ldw	ra,4(sp)
8001e820:	dc000017 	ldw	r16,0(sp)
8001e824:	dec00204 	addi	sp,sp,8
8001e828:	f800283a 	ret

8001e82c <_lseek_r>:
8001e82c:	defffe04 	addi	sp,sp,-8
8001e830:	2805883a 	mov	r2,r5
8001e834:	dc000015 	stw	r16,0(sp)
8001e838:	300b883a 	mov	r5,r6
8001e83c:	2021883a 	mov	r16,r4
8001e840:	380d883a 	mov	r6,r7
8001e844:	1009883a 	mov	r4,r2
8001e848:	00a000f4 	movhi	r2,32771
8001e84c:	dfc00115 	stw	ra,4(sp)
8001e850:	102ad715 	stw	zero,-21668(r2)
8001e854:	001fed00 	call	8001fed0 <lseek>
8001e858:	10ffffd8 	cmpnei	r3,r2,-1
8001e85c:	18000426 	beq	r3,zero,8001e870 <_lseek_r+0x44>
8001e860:	dfc00117 	ldw	ra,4(sp)
8001e864:	dc000017 	ldw	r16,0(sp)
8001e868:	dec00204 	addi	sp,sp,8
8001e86c:	f800283a 	ret
8001e870:	00e000f4 	movhi	r3,32771
8001e874:	18ead717 	ldw	r3,-21668(r3)
8001e878:	183ff926 	beq	r3,zero,8001e860 <_gp+0xfffedaec>
8001e87c:	80c00015 	stw	r3,0(r16)
8001e880:	dfc00117 	ldw	ra,4(sp)
8001e884:	dc000017 	ldw	r16,0(sp)
8001e888:	dec00204 	addi	sp,sp,8
8001e88c:	f800283a 	ret

8001e890 <_mbrtowc_r>:
8001e890:	00a000f4 	movhi	r2,32771
8001e894:	10a35e17 	ldw	r2,-29320(r2)
8001e898:	defffc04 	addi	sp,sp,-16
8001e89c:	dc400215 	stw	r17,8(sp)
8001e8a0:	dc000115 	stw	r16,4(sp)
8001e8a4:	dfc00315 	stw	ra,12(sp)
8001e8a8:	2021883a 	mov	r16,r4
8001e8ac:	dc400417 	ldw	r17,16(sp)
8001e8b0:	10800d17 	ldw	r2,52(r2)
8001e8b4:	30000f26 	beq	r6,zero,8001e8f4 <_mbrtowc_r+0x64>
8001e8b8:	10000b26 	beq	r2,zero,8001e8e8 <_mbrtowc_r+0x58>
8001e8bc:	dc400015 	stw	r17,0(sp)
8001e8c0:	10803917 	ldw	r2,228(r2)
8001e8c4:	8009883a 	mov	r4,r16
8001e8c8:	103ee83a 	callr	r2
8001e8cc:	10ffffd8 	cmpnei	r3,r2,-1
8001e8d0:	18001326 	beq	r3,zero,8001e920 <_mbrtowc_r+0x90>
8001e8d4:	dfc00317 	ldw	ra,12(sp)
8001e8d8:	dc400217 	ldw	r17,8(sp)
8001e8dc:	dc000117 	ldw	r16,4(sp)
8001e8e0:	dec00404 	addi	sp,sp,16
8001e8e4:	f800283a 	ret
8001e8e8:	00a000b4 	movhi	r2,32770
8001e8ec:	109d2904 	addi	r2,r2,29860
8001e8f0:	003ff206 	br	8001e8bc <_gp+0xfffedb48>
8001e8f4:	10000f26 	beq	r2,zero,8001e934 <_mbrtowc_r+0xa4>
8001e8f8:	dc400015 	stw	r17,0(sp)
8001e8fc:	10803917 	ldw	r2,228(r2)
8001e900:	01a000b4 	movhi	r6,32770
8001e904:	01c00044 	movi	r7,1
8001e908:	319aa704 	addi	r6,r6,27292
8001e90c:	000b883a 	mov	r5,zero
8001e910:	8009883a 	mov	r4,r16
8001e914:	103ee83a 	callr	r2
8001e918:	10ffffd8 	cmpnei	r3,r2,-1
8001e91c:	183fed1e 	bne	r3,zero,8001e8d4 <_gp+0xfffedb60>
8001e920:	00802284 	movi	r2,138
8001e924:	88000015 	stw	zero,0(r17)
8001e928:	80800015 	stw	r2,0(r16)
8001e92c:	00bfffc4 	movi	r2,-1
8001e930:	003fe806 	br	8001e8d4 <_gp+0xfffedb60>
8001e934:	00a000b4 	movhi	r2,32770
8001e938:	109d2904 	addi	r2,r2,29860
8001e93c:	003fee06 	br	8001e8f8 <_gp+0xfffedb84>

8001e940 <mbrtowc>:
8001e940:	defffc04 	addi	sp,sp,-16
8001e944:	00a000f4 	movhi	r2,32771
8001e948:	dc000115 	stw	r16,4(sp)
8001e94c:	14235e17 	ldw	r16,-29320(r2)
8001e950:	dc400215 	stw	r17,8(sp)
8001e954:	dfc00315 	stw	ra,12(sp)
8001e958:	3823883a 	mov	r17,r7
8001e95c:	80800d17 	ldw	r2,52(r16)
8001e960:	28001226 	beq	r5,zero,8001e9ac <mbrtowc+0x6c>
8001e964:	10000e26 	beq	r2,zero,8001e9a0 <mbrtowc+0x60>
8001e968:	dc400015 	stw	r17,0(sp)
8001e96c:	10803917 	ldw	r2,228(r2)
8001e970:	300f883a 	mov	r7,r6
8001e974:	280d883a 	mov	r6,r5
8001e978:	200b883a 	mov	r5,r4
8001e97c:	8009883a 	mov	r4,r16
8001e980:	103ee83a 	callr	r2
8001e984:	10ffffd8 	cmpnei	r3,r2,-1
8001e988:	18001326 	beq	r3,zero,8001e9d8 <mbrtowc+0x98>
8001e98c:	dfc00317 	ldw	ra,12(sp)
8001e990:	dc400217 	ldw	r17,8(sp)
8001e994:	dc000117 	ldw	r16,4(sp)
8001e998:	dec00404 	addi	sp,sp,16
8001e99c:	f800283a 	ret
8001e9a0:	00a000b4 	movhi	r2,32770
8001e9a4:	109d2904 	addi	r2,r2,29860
8001e9a8:	003fef06 	br	8001e968 <_gp+0xfffedbf4>
8001e9ac:	10000f26 	beq	r2,zero,8001e9ec <mbrtowc+0xac>
8001e9b0:	dc400015 	stw	r17,0(sp)
8001e9b4:	10803917 	ldw	r2,228(r2)
8001e9b8:	01a000b4 	movhi	r6,32770
8001e9bc:	01c00044 	movi	r7,1
8001e9c0:	319aa704 	addi	r6,r6,27292
8001e9c4:	000b883a 	mov	r5,zero
8001e9c8:	8009883a 	mov	r4,r16
8001e9cc:	103ee83a 	callr	r2
8001e9d0:	10ffffd8 	cmpnei	r3,r2,-1
8001e9d4:	183fed1e 	bne	r3,zero,8001e98c <_gp+0xfffedc18>
8001e9d8:	00802284 	movi	r2,138
8001e9dc:	80800015 	stw	r2,0(r16)
8001e9e0:	88000015 	stw	zero,0(r17)
8001e9e4:	00bfffc4 	movi	r2,-1
8001e9e8:	003fe806 	br	8001e98c <_gp+0xfffedc18>
8001e9ec:	00a000b4 	movhi	r2,32770
8001e9f0:	109d2904 	addi	r2,r2,29860
8001e9f4:	003fee06 	br	8001e9b0 <_gp+0xfffedc3c>

8001e9f8 <_read_r>:
8001e9f8:	defffe04 	addi	sp,sp,-8
8001e9fc:	2805883a 	mov	r2,r5
8001ea00:	dc000015 	stw	r16,0(sp)
8001ea04:	300b883a 	mov	r5,r6
8001ea08:	2021883a 	mov	r16,r4
8001ea0c:	380d883a 	mov	r6,r7
8001ea10:	1009883a 	mov	r4,r2
8001ea14:	00a000f4 	movhi	r2,32771
8001ea18:	dfc00115 	stw	ra,4(sp)
8001ea1c:	102ad715 	stw	zero,-21668(r2)
8001ea20:	00203000 	call	80020300 <read>
8001ea24:	10ffffd8 	cmpnei	r3,r2,-1
8001ea28:	18000426 	beq	r3,zero,8001ea3c <_read_r+0x44>
8001ea2c:	dfc00117 	ldw	ra,4(sp)
8001ea30:	dc000017 	ldw	r16,0(sp)
8001ea34:	dec00204 	addi	sp,sp,8
8001ea38:	f800283a 	ret
8001ea3c:	00e000f4 	movhi	r3,32771
8001ea40:	18ead717 	ldw	r3,-21668(r3)
8001ea44:	183ff926 	beq	r3,zero,8001ea2c <_gp+0xfffedcb8>
8001ea48:	80c00015 	stw	r3,0(r16)
8001ea4c:	dfc00117 	ldw	ra,4(sp)
8001ea50:	dc000017 	ldw	r16,0(sp)
8001ea54:	dec00204 	addi	sp,sp,8
8001ea58:	f800283a 	ret

8001ea5c <__sccl>:
8001ea5c:	29c00003 	ldbu	r7,0(r5)
8001ea60:	388017a0 	cmpeqi	r2,r7,94
8001ea64:	1000191e 	bne	r2,zero,8001eacc <__sccl+0x70>
8001ea68:	28800044 	addi	r2,r5,1
8001ea6c:	000d883a 	mov	r6,zero
8001ea70:	0011883a 	mov	r8,zero
8001ea74:	2007883a 	mov	r3,r4
8001ea78:	21404004 	addi	r5,r4,256
8001ea7c:	19800005 	stb	r6,0(r3)
8001ea80:	18c00044 	addi	r3,r3,1
8001ea84:	197ffd1e 	bne	r3,r5,8001ea7c <_gp+0xfffedd08>
8001ea88:	38000e26 	beq	r7,zero,8001eac4 <__sccl+0x68>
8001ea8c:	01800044 	movi	r6,1
8001ea90:	320dc83a 	sub	r6,r6,r8
8001ea94:	21c7883a 	add	r3,r4,r7
8001ea98:	19800005 	stb	r6,0(r3)
8001ea9c:	10c00003 	ldbu	r3,0(r2)
8001eaa0:	12400044 	addi	r9,r2,1
8001eaa4:	19400b60 	cmpeqi	r5,r3,45
8001eaa8:	28000f1e 	bne	r5,zero,8001eae8 <__sccl+0x8c>
8001eaac:	19401760 	cmpeqi	r5,r3,93
8001eab0:	28000b1e 	bne	r5,zero,8001eae0 <__sccl+0x84>
8001eab4:	18001a26 	beq	r3,zero,8001eb20 <__sccl+0xc4>
8001eab8:	180f883a 	mov	r7,r3
8001eabc:	4805883a 	mov	r2,r9
8001eac0:	003ff406 	br	8001ea94 <_gp+0xfffedd20>
8001eac4:	10bfffc4 	addi	r2,r2,-1
8001eac8:	f800283a 	ret
8001eacc:	29c00043 	ldbu	r7,1(r5)
8001ead0:	28800084 	addi	r2,r5,2
8001ead4:	01800044 	movi	r6,1
8001ead8:	02000044 	movi	r8,1
8001eadc:	003fe506 	br	8001ea74 <_gp+0xfffedd00>
8001eae0:	4805883a 	mov	r2,r9
8001eae4:	f800283a 	ret
8001eae8:	12000043 	ldbu	r8,1(r2)
8001eaec:	40c01760 	cmpeqi	r3,r8,93
8001eaf0:	18000c1e 	bne	r3,zero,8001eb24 <__sccl+0xc8>
8001eaf4:	41c00b16 	blt	r8,r7,8001eb24 <__sccl+0xc8>
8001eaf8:	38c00044 	addi	r3,r7,1
8001eafc:	10800084 	addi	r2,r2,2
8001eb00:	20cb883a 	add	r5,r4,r3
8001eb04:	00000106 	br	8001eb0c <__sccl+0xb0>
8001eb08:	18c00044 	addi	r3,r3,1
8001eb0c:	29800005 	stb	r6,0(r5)
8001eb10:	180f883a 	mov	r7,r3
8001eb14:	29400044 	addi	r5,r5,1
8001eb18:	1a3ffb16 	blt	r3,r8,8001eb08 <_gp+0xfffedd94>
8001eb1c:	003fdf06 	br	8001ea9c <_gp+0xfffedd28>
8001eb20:	f800283a 	ret
8001eb24:	01c00b44 	movi	r7,45
8001eb28:	003fe406 	br	8001eabc <_gp+0xfffedd48>

8001eb2c <_strtol_l.isra.0>:
8001eb2c:	defff504 	addi	sp,sp,-44
8001eb30:	ddc00815 	stw	r23,32(sp)
8001eb34:	dd800715 	stw	r22,28(sp)
8001eb38:	dcc00415 	stw	r19,16(sp)
8001eb3c:	dc800315 	stw	r18,12(sp)
8001eb40:	dc400215 	stw	r17,8(sp)
8001eb44:	dfc00a15 	stw	ra,40(sp)
8001eb48:	df000915 	stw	fp,36(sp)
8001eb4c:	dd400615 	stw	r21,24(sp)
8001eb50:	dd000515 	stw	r20,20(sp)
8001eb54:	dc000115 	stw	r16,4(sp)
8001eb58:	2825883a 	mov	r18,r5
8001eb5c:	d9000015 	stw	r4,0(sp)
8001eb60:	3027883a 	mov	r19,r6
8001eb64:	3823883a 	mov	r17,r7
8001eb68:	dd800b17 	ldw	r22,44(sp)
8001eb6c:	282f883a 	mov	r23,r5
8001eb70:	00000106 	br	8001eb78 <_strtol_l.isra.0+0x4c>
8001eb74:	a82f883a 	mov	r23,r21
8001eb78:	bd400044 	addi	r21,r23,1
8001eb7c:	ac3fffc3 	ldbu	r16,-1(r21)
8001eb80:	b009883a 	mov	r4,r22
8001eb84:	000fc480 	call	8000fc48 <__locale_ctype_ptr_l>
8001eb88:	84003fcc 	andi	r16,r16,255
8001eb8c:	1405883a 	add	r2,r2,r16
8001eb90:	10800043 	ldbu	r2,1(r2)
8001eb94:	1080020c 	andi	r2,r2,8
8001eb98:	103ff61e 	bne	r2,zero,8001eb74 <_gp+0xfffede00>
8001eb9c:	80800b58 	cmpnei	r2,r16,45
8001eba0:	10005126 	beq	r2,zero,8001ece8 <_strtol_l.isra.0+0x1bc>
8001eba4:	80800ae0 	cmpeqi	r2,r16,43
8001eba8:	1000291e 	bne	r2,zero,8001ec50 <_strtol_l.isra.0+0x124>
8001ebac:	0039883a 	mov	fp,zero
8001ebb0:	88000426 	beq	r17,zero,8001ebc4 <_strtol_l.isra.0+0x98>
8001ebb4:	88800420 	cmpeqi	r2,r17,16
8001ebb8:	10004f1e 	bne	r2,zero,8001ecf8 <_strtol_l.isra.0+0x1cc>
8001ebbc:	882d883a 	mov	r22,r17
8001ebc0:	00000406 	br	8001ebd4 <_strtol_l.isra.0+0xa8>
8001ebc4:	80800c20 	cmpeqi	r2,r16,48
8001ebc8:	10004f1e 	bne	r2,zero,8001ed08 <_strtol_l.isra.0+0x1dc>
8001ebcc:	05800284 	movi	r22,10
8001ebd0:	04400284 	movi	r17,10
8001ebd4:	05e00034 	movhi	r23,32768
8001ebd8:	e000011e 	bne	fp,zero,8001ebe0 <_strtol_l.isra.0+0xb4>
8001ebdc:	bdffffc4 	addi	r23,r23,-1
8001ebe0:	b00b883a 	mov	r5,r22
8001ebe4:	b809883a 	mov	r4,r23
8001ebe8:	000d5ec0 	call	8000d5ec <__umodsi3>
8001ebec:	b00b883a 	mov	r5,r22
8001ebf0:	b809883a 	mov	r4,r23
8001ebf4:	1029883a 	mov	r20,r2
8001ebf8:	000d5880 	call	8000d588 <__udivsi3>
8001ebfc:	100f883a 	mov	r7,r2
8001ec00:	000b883a 	mov	r5,zero
8001ec04:	0005883a 	mov	r2,zero
8001ec08:	80fff404 	addi	r3,r16,-48
8001ec0c:	190002a8 	cmpgeui	r4,r3,10
8001ec10:	20000426 	beq	r4,zero,8001ec24 <_strtol_l.isra.0+0xf8>
8001ec14:	80ffefc4 	addi	r3,r16,-65
8001ec18:	18c006a8 	cmpgeui	r3,r3,26
8001ec1c:	1800131e 	bne	r3,zero,8001ec6c <_strtol_l.isra.0+0x140>
8001ec20:	80fff244 	addi	r3,r16,-55
8001ec24:	1c40160e 	bge	r3,r17,8001ec80 <_strtol_l.isra.0+0x154>
8001ec28:	293fffe0 	cmpeqi	r4,r5,-1
8001ec2c:	2000051e 	bne	r4,zero,8001ec44 <_strtol_l.isra.0+0x118>
8001ec30:	38800c36 	bltu	r7,r2,8001ec64 <_strtol_l.isra.0+0x138>
8001ec34:	38800a26 	beq	r7,r2,8001ec60 <_strtol_l.isra.0+0x134>
8001ec38:	1589383a 	mul	r4,r2,r22
8001ec3c:	01400044 	movi	r5,1
8001ec40:	1905883a 	add	r2,r3,r4
8001ec44:	ad400044 	addi	r21,r21,1
8001ec48:	ac3fffc3 	ldbu	r16,-1(r21)
8001ec4c:	003fee06 	br	8001ec08 <_gp+0xfffede94>
8001ec50:	bc000043 	ldbu	r16,1(r23)
8001ec54:	bd400084 	addi	r21,r23,2
8001ec58:	0039883a 	mov	fp,zero
8001ec5c:	003fd406 	br	8001ebb0 <_gp+0xfffede3c>
8001ec60:	a0fff50e 	bge	r20,r3,8001ec38 <_gp+0xfffedec4>
8001ec64:	017fffc4 	movi	r5,-1
8001ec68:	003ff606 	br	8001ec44 <_gp+0xfffeded0>
8001ec6c:	80ffe7c4 	addi	r3,r16,-97
8001ec70:	18c006a8 	cmpgeui	r3,r3,26
8001ec74:	1800021e 	bne	r3,zero,8001ec80 <_strtol_l.isra.0+0x154>
8001ec78:	80ffea44 	addi	r3,r16,-87
8001ec7c:	1c7fea16 	blt	r3,r17,8001ec28 <_gp+0xfffedeb4>
8001ec80:	28ffffd8 	cmpnei	r3,r5,-1
8001ec84:	18001126 	beq	r3,zero,8001eccc <_strtol_l.isra.0+0x1a0>
8001ec88:	e0000126 	beq	fp,zero,8001ec90 <_strtol_l.isra.0+0x164>
8001ec8c:	0085c83a 	sub	r2,zero,r2
8001ec90:	98000226 	beq	r19,zero,8001ec9c <_strtol_l.isra.0+0x170>
8001ec94:	2800251e 	bne	r5,zero,8001ed2c <_strtol_l.isra.0+0x200>
8001ec98:	9c800015 	stw	r18,0(r19)
8001ec9c:	dfc00a17 	ldw	ra,40(sp)
8001eca0:	df000917 	ldw	fp,36(sp)
8001eca4:	ddc00817 	ldw	r23,32(sp)
8001eca8:	dd800717 	ldw	r22,28(sp)
8001ecac:	dd400617 	ldw	r21,24(sp)
8001ecb0:	dd000517 	ldw	r20,20(sp)
8001ecb4:	dcc00417 	ldw	r19,16(sp)
8001ecb8:	dc800317 	ldw	r18,12(sp)
8001ecbc:	dc400217 	ldw	r17,8(sp)
8001ecc0:	dc000117 	ldw	r16,4(sp)
8001ecc4:	dec00b04 	addi	sp,sp,44
8001ecc8:	f800283a 	ret
8001eccc:	d8c00017 	ldw	r3,0(sp)
8001ecd0:	00800884 	movi	r2,34
8001ecd4:	18800015 	stw	r2,0(r3)
8001ecd8:	98001626 	beq	r19,zero,8001ed34 <_strtol_l.isra.0+0x208>
8001ecdc:	acbfffc4 	addi	r18,r21,-1
8001ece0:	b805883a 	mov	r2,r23
8001ece4:	003fec06 	br	8001ec98 <_gp+0xfffedf24>
8001ece8:	bd400084 	addi	r21,r23,2
8001ecec:	bc000043 	ldbu	r16,1(r23)
8001ecf0:	07000044 	movi	fp,1
8001ecf4:	003fae06 	br	8001ebb0 <_gp+0xfffede3c>
8001ecf8:	80800c18 	cmpnei	r2,r16,48
8001ecfc:	10000f26 	beq	r2,zero,8001ed3c <_strtol_l.isra.0+0x210>
8001ed00:	05800404 	movi	r22,16
8001ed04:	003fb306 	br	8001ebd4 <_gp+0xfffede60>
8001ed08:	a8800003 	ldbu	r2,0(r21)
8001ed0c:	108037cc 	andi	r2,r2,223
8001ed10:	10801620 	cmpeqi	r2,r2,88
8001ed14:	10000e26 	beq	r2,zero,8001ed50 <_strtol_l.isra.0+0x224>
8001ed18:	ac000043 	ldbu	r16,1(r21)
8001ed1c:	05800404 	movi	r22,16
8001ed20:	ad400084 	addi	r21,r21,2
8001ed24:	04400404 	movi	r17,16
8001ed28:	003faa06 	br	8001ebd4 <_gp+0xfffede60>
8001ed2c:	102f883a 	mov	r23,r2
8001ed30:	003fea06 	br	8001ecdc <_gp+0xfffedf68>
8001ed34:	b805883a 	mov	r2,r23
8001ed38:	003fd806 	br	8001ec9c <_gp+0xfffedf28>
8001ed3c:	a8800003 	ldbu	r2,0(r21)
8001ed40:	108037cc 	andi	r2,r2,223
8001ed44:	10801620 	cmpeqi	r2,r2,88
8001ed48:	103fed26 	beq	r2,zero,8001ed00 <_gp+0xfffedf8c>
8001ed4c:	003ff206 	br	8001ed18 <_gp+0xfffedfa4>
8001ed50:	05800204 	movi	r22,8
8001ed54:	04400204 	movi	r17,8
8001ed58:	003f9e06 	br	8001ebd4 <_gp+0xfffede60>

8001ed5c <_strtol_r>:
8001ed5c:	00a000f4 	movhi	r2,32771
8001ed60:	10a35e17 	ldw	r2,-29320(r2)
8001ed64:	defffe04 	addi	sp,sp,-8
8001ed68:	dfc00115 	stw	ra,4(sp)
8001ed6c:	10800d17 	ldw	r2,52(r2)
8001ed70:	1000021e 	bne	r2,zero,8001ed7c <_strtol_r+0x20>
8001ed74:	00a000b4 	movhi	r2,32770
8001ed78:	109d2904 	addi	r2,r2,29860
8001ed7c:	d8800015 	stw	r2,0(sp)
8001ed80:	001eb2c0 	call	8001eb2c <_strtol_l.isra.0>
8001ed84:	dfc00117 	ldw	ra,4(sp)
8001ed88:	dec00204 	addi	sp,sp,8
8001ed8c:	f800283a 	ret

8001ed90 <strtol_l>:
8001ed90:	defffe04 	addi	sp,sp,-8
8001ed94:	00a000f4 	movhi	r2,32771
8001ed98:	d9c00015 	stw	r7,0(sp)
8001ed9c:	300f883a 	mov	r7,r6
8001eda0:	280d883a 	mov	r6,r5
8001eda4:	200b883a 	mov	r5,r4
8001eda8:	11235e17 	ldw	r4,-29320(r2)
8001edac:	dfc00115 	stw	ra,4(sp)
8001edb0:	001eb2c0 	call	8001eb2c <_strtol_l.isra.0>
8001edb4:	dfc00117 	ldw	ra,4(sp)
8001edb8:	dec00204 	addi	sp,sp,8
8001edbc:	f800283a 	ret

8001edc0 <strtol>:
8001edc0:	00a000f4 	movhi	r2,32771
8001edc4:	10e35e17 	ldw	r3,-29320(r2)
8001edc8:	defffe04 	addi	sp,sp,-8
8001edcc:	dfc00115 	stw	ra,4(sp)
8001edd0:	18800d17 	ldw	r2,52(r3)
8001edd4:	1000021e 	bne	r2,zero,8001ede0 <strtol+0x20>
8001edd8:	00a000b4 	movhi	r2,32770
8001eddc:	109d2904 	addi	r2,r2,29860
8001ede0:	300f883a 	mov	r7,r6
8001ede4:	d8800015 	stw	r2,0(sp)
8001ede8:	280d883a 	mov	r6,r5
8001edec:	200b883a 	mov	r5,r4
8001edf0:	1809883a 	mov	r4,r3
8001edf4:	001eb2c0 	call	8001eb2c <_strtol_l.isra.0>
8001edf8:	dfc00117 	ldw	ra,4(sp)
8001edfc:	dec00204 	addi	sp,sp,8
8001ee00:	f800283a 	ret

8001ee04 <_strtoll_l.isra.0>:
8001ee04:	defff304 	addi	sp,sp,-52
8001ee08:	ddc00a15 	stw	r23,40(sp)
8001ee0c:	dd400815 	stw	r21,32(sp)
8001ee10:	dcc00615 	stw	r19,24(sp)
8001ee14:	dc800515 	stw	r18,20(sp)
8001ee18:	dc400415 	stw	r17,16(sp)
8001ee1c:	dfc00c15 	stw	ra,48(sp)
8001ee20:	df000b15 	stw	fp,44(sp)
8001ee24:	dd800915 	stw	r22,36(sp)
8001ee28:	dd000715 	stw	r20,28(sp)
8001ee2c:	dc000315 	stw	r16,12(sp)
8001ee30:	2825883a 	mov	r18,r5
8001ee34:	d9000215 	stw	r4,8(sp)
8001ee38:	3027883a 	mov	r19,r6
8001ee3c:	3823883a 	mov	r17,r7
8001ee40:	dd400d17 	ldw	r21,52(sp)
8001ee44:	282f883a 	mov	r23,r5
8001ee48:	00000106 	br	8001ee50 <_strtoll_l.isra.0+0x4c>
8001ee4c:	b02f883a 	mov	r23,r22
8001ee50:	bd800044 	addi	r22,r23,1
8001ee54:	b43fffc3 	ldbu	r16,-1(r22)
8001ee58:	a809883a 	mov	r4,r21
8001ee5c:	000fc480 	call	8000fc48 <__locale_ctype_ptr_l>
8001ee60:	84003fcc 	andi	r16,r16,255
8001ee64:	1405883a 	add	r2,r2,r16
8001ee68:	10800043 	ldbu	r2,1(r2)
8001ee6c:	1080020c 	andi	r2,r2,8
8001ee70:	103ff61e 	bne	r2,zero,8001ee4c <_gp+0xfffee0d8>
8001ee74:	80800b58 	cmpnei	r2,r16,45
8001ee78:	10007526 	beq	r2,zero,8001f050 <_strtoll_l.isra.0+0x24c>
8001ee7c:	80800ae0 	cmpeqi	r2,r16,43
8001ee80:	10005f1e 	bne	r2,zero,8001f000 <_strtoll_l.isra.0+0x1fc>
8001ee84:	0011883a 	mov	r8,zero
8001ee88:	88004526 	beq	r17,zero,8001efa0 <_strtoll_l.isra.0+0x19c>
8001ee8c:	88800420 	cmpeqi	r2,r17,16
8001ee90:	1000731e 	bne	r2,zero,8001f060 <_strtoll_l.isra.0+0x25c>
8001ee94:	8839d7fa 	srai	fp,r17,31
8001ee98:	882f883a 	mov	r23,r17
8001ee9c:	40004626 	beq	r8,zero,8001efb8 <_strtoll_l.isra.0+0x1b4>
8001eea0:	002b883a 	mov	r21,zero
8001eea4:	05200034 	movhi	r20,32768
8001eea8:	b80d883a 	mov	r6,r23
8001eeac:	e00f883a 	mov	r7,fp
8001eeb0:	a809883a 	mov	r4,r21
8001eeb4:	a00b883a 	mov	r5,r20
8001eeb8:	da000115 	stw	r8,4(sp)
8001eebc:	000cf340 	call	8000cf34 <__umoddi3>
8001eec0:	b80d883a 	mov	r6,r23
8001eec4:	e00f883a 	mov	r7,fp
8001eec8:	a809883a 	mov	r4,r21
8001eecc:	a00b883a 	mov	r5,r20
8001eed0:	d8800015 	stw	r2,0(sp)
8001eed4:	000c99c0 	call	8000c99c <__udivdi3>
8001eed8:	813ff404 	addi	r4,r16,-48
8001eedc:	214002a8 	cmpgeui	r5,r4,10
8001eee0:	100f883a 	mov	r7,r2
8001eee4:	1817883a 	mov	r11,r3
8001eee8:	000d883a 	mov	r6,zero
8001eeec:	0005883a 	mov	r2,zero
8001eef0:	0007883a 	mov	r3,zero
8001eef4:	da000117 	ldw	r8,4(sp)
8001eef8:	da800017 	ldw	r10,0(sp)
8001eefc:	28000d1e 	bne	r5,zero,8001ef34 <_strtoll_l.isra.0+0x130>
8001ef00:	2021883a 	mov	r16,r4
8001ef04:	8440100e 	bge	r16,r17,8001ef48 <_strtoll_l.isra.0+0x144>
8001ef08:	313fffe0 	cmpeqi	r4,r6,-1
8001ef0c:	2000041e 	bne	r4,zero,8001ef20 <_strtoll_l.isra.0+0x11c>
8001ef10:	58c00236 	bltu	r11,r3,8001ef1c <_strtoll_l.isra.0+0x118>
8001ef14:	1ac02c1e 	bne	r3,r11,8001efc8 <_strtoll_l.isra.0+0x1c4>
8001ef18:	38802b2e 	bgeu	r7,r2,8001efc8 <_strtoll_l.isra.0+0x1c4>
8001ef1c:	01bfffc4 	movi	r6,-1
8001ef20:	b5800044 	addi	r22,r22,1
8001ef24:	b43fffc3 	ldbu	r16,-1(r22)
8001ef28:	813ff404 	addi	r4,r16,-48
8001ef2c:	214002a8 	cmpgeui	r5,r4,10
8001ef30:	283ff326 	beq	r5,zero,8001ef00 <_gp+0xfffee18c>
8001ef34:	813fefc4 	addi	r4,r16,-65
8001ef38:	210006a8 	cmpgeui	r4,r4,26
8001ef3c:	2000341e 	bne	r4,zero,8001f010 <_strtoll_l.isra.0+0x20c>
8001ef40:	843ff244 	addi	r16,r16,-55
8001ef44:	847ff016 	blt	r16,r17,8001ef08 <_gp+0xfffee194>
8001ef48:	313fffd8 	cmpnei	r4,r6,-1
8001ef4c:	20003826 	beq	r4,zero,8001f030 <_strtoll_l.isra.0+0x22c>
8001ef50:	40000426 	beq	r8,zero,8001ef64 <_strtoll_l.isra.0+0x160>
8001ef54:	0085c83a 	sub	r2,zero,r2
8001ef58:	1008c03a 	cmpne	r4,r2,zero
8001ef5c:	00e1c83a 	sub	r16,zero,r3
8001ef60:	8107c83a 	sub	r3,r16,r4
8001ef64:	98000226 	beq	r19,zero,8001ef70 <_strtoll_l.isra.0+0x16c>
8001ef68:	30004c1e 	bne	r6,zero,8001f09c <_strtoll_l.isra.0+0x298>
8001ef6c:	9c800015 	stw	r18,0(r19)
8001ef70:	dfc00c17 	ldw	ra,48(sp)
8001ef74:	df000b17 	ldw	fp,44(sp)
8001ef78:	ddc00a17 	ldw	r23,40(sp)
8001ef7c:	dd800917 	ldw	r22,36(sp)
8001ef80:	dd400817 	ldw	r21,32(sp)
8001ef84:	dd000717 	ldw	r20,28(sp)
8001ef88:	dcc00617 	ldw	r19,24(sp)
8001ef8c:	dc800517 	ldw	r18,20(sp)
8001ef90:	dc400417 	ldw	r17,16(sp)
8001ef94:	dc000317 	ldw	r16,12(sp)
8001ef98:	dec00d04 	addi	sp,sp,52
8001ef9c:	f800283a 	ret
8001efa0:	80800c20 	cmpeqi	r2,r16,48
8001efa4:	1000331e 	bne	r2,zero,8001f074 <_strtoll_l.isra.0+0x270>
8001efa8:	05c00284 	movi	r23,10
8001efac:	0039883a 	mov	fp,zero
8001efb0:	04400284 	movi	r17,10
8001efb4:	403fba1e 	bne	r8,zero,8001eea0 <_gp+0xfffee12c>
8001efb8:	05200034 	movhi	r20,32768
8001efbc:	057fffc4 	movi	r21,-1
8001efc0:	a53fffc4 	addi	r20,r20,-1
8001efc4:	003fb806 	br	8001eea8 <_gp+0xfffee134>
8001efc8:	38801626 	beq	r7,r2,8001f024 <_strtoll_l.isra.0+0x220>
8001efcc:	1dc7383a 	mul	r3,r3,r23
8001efd0:	e089383a 	mul	r4,fp,r2
8001efd4:	15cc383a 	mulxuu	r6,r2,r23
8001efd8:	15c5383a 	mul	r2,r2,r23
8001efdc:	800bd7fa 	srai	r5,r16,31
8001efe0:	1909883a 	add	r4,r3,r4
8001efe4:	2189883a 	add	r4,r4,r6
8001efe8:	8085883a 	add	r2,r16,r2
8001efec:	1421803a 	cmpltu	r16,r2,r16
8001eff0:	2907883a 	add	r3,r5,r4
8001eff4:	80c7883a 	add	r3,r16,r3
8001eff8:	01800044 	movi	r6,1
8001effc:	003fc806 	br	8001ef20 <_gp+0xfffee1ac>
8001f000:	bc000043 	ldbu	r16,1(r23)
8001f004:	bd800084 	addi	r22,r23,2
8001f008:	0011883a 	mov	r8,zero
8001f00c:	003f9e06 	br	8001ee88 <_gp+0xfffee114>
8001f010:	813fe7c4 	addi	r4,r16,-97
8001f014:	210006a8 	cmpgeui	r4,r4,26
8001f018:	203fcb1e 	bne	r4,zero,8001ef48 <_gp+0xfffee1d4>
8001f01c:	843fea44 	addi	r16,r16,-87
8001f020:	003fb806 	br	8001ef04 <_gp+0xfffee190>
8001f024:	58ffe91e 	bne	r11,r3,8001efcc <_gp+0xfffee258>
8001f028:	543fbc16 	blt	r10,r16,8001ef1c <_gp+0xfffee1a8>
8001f02c:	003fe706 	br	8001efcc <_gp+0xfffee258>
8001f030:	d8c00217 	ldw	r3,8(sp)
8001f034:	00800884 	movi	r2,34
8001f038:	18800015 	stw	r2,0(r3)
8001f03c:	98001a26 	beq	r19,zero,8001f0a8 <_strtoll_l.isra.0+0x2a4>
8001f040:	b4bfffc4 	addi	r18,r22,-1
8001f044:	a805883a 	mov	r2,r21
8001f048:	a007883a 	mov	r3,r20
8001f04c:	003fc706 	br	8001ef6c <_gp+0xfffee1f8>
8001f050:	bd800084 	addi	r22,r23,2
8001f054:	bc000043 	ldbu	r16,1(r23)
8001f058:	02000044 	movi	r8,1
8001f05c:	003f8a06 	br	8001ee88 <_gp+0xfffee114>
8001f060:	80800c18 	cmpnei	r2,r16,48
8001f064:	10001326 	beq	r2,zero,8001f0b4 <_strtoll_l.isra.0+0x2b0>
8001f068:	05c00404 	movi	r23,16
8001f06c:	0039883a 	mov	fp,zero
8001f070:	003f8a06 	br	8001ee9c <_gp+0xfffee128>
8001f074:	b0800003 	ldbu	r2,0(r22)
8001f078:	108037cc 	andi	r2,r2,223
8001f07c:	10801620 	cmpeqi	r2,r2,88
8001f080:	10001126 	beq	r2,zero,8001f0c8 <_strtoll_l.isra.0+0x2c4>
8001f084:	b4000043 	ldbu	r16,1(r22)
8001f088:	05c00404 	movi	r23,16
8001f08c:	b5800084 	addi	r22,r22,2
8001f090:	0039883a 	mov	fp,zero
8001f094:	04400404 	movi	r17,16
8001f098:	003f8006 	br	8001ee9c <_gp+0xfffee128>
8001f09c:	102b883a 	mov	r21,r2
8001f0a0:	1829883a 	mov	r20,r3
8001f0a4:	003fe606 	br	8001f040 <_gp+0xfffee2cc>
8001f0a8:	a805883a 	mov	r2,r21
8001f0ac:	a007883a 	mov	r3,r20
8001f0b0:	003faf06 	br	8001ef70 <_gp+0xfffee1fc>
8001f0b4:	b0800003 	ldbu	r2,0(r22)
8001f0b8:	108037cc 	andi	r2,r2,223
8001f0bc:	10801620 	cmpeqi	r2,r2,88
8001f0c0:	103fe926 	beq	r2,zero,8001f068 <_gp+0xfffee2f4>
8001f0c4:	003fef06 	br	8001f084 <_gp+0xfffee310>
8001f0c8:	05c00204 	movi	r23,8
8001f0cc:	0039883a 	mov	fp,zero
8001f0d0:	04400204 	movi	r17,8
8001f0d4:	003f7106 	br	8001ee9c <_gp+0xfffee128>

8001f0d8 <_strtoll_r>:
8001f0d8:	00a000f4 	movhi	r2,32771
8001f0dc:	10a35e17 	ldw	r2,-29320(r2)
8001f0e0:	defffe04 	addi	sp,sp,-8
8001f0e4:	dfc00115 	stw	ra,4(sp)
8001f0e8:	10800d17 	ldw	r2,52(r2)
8001f0ec:	1000021e 	bne	r2,zero,8001f0f8 <_strtoll_r+0x20>
8001f0f0:	00a000b4 	movhi	r2,32770
8001f0f4:	109d2904 	addi	r2,r2,29860
8001f0f8:	d8800015 	stw	r2,0(sp)
8001f0fc:	001ee040 	call	8001ee04 <_strtoll_l.isra.0>
8001f100:	dfc00117 	ldw	ra,4(sp)
8001f104:	dec00204 	addi	sp,sp,8
8001f108:	f800283a 	ret

8001f10c <strtoll_l>:
8001f10c:	defffe04 	addi	sp,sp,-8
8001f110:	00a000f4 	movhi	r2,32771
8001f114:	d9c00015 	stw	r7,0(sp)
8001f118:	300f883a 	mov	r7,r6
8001f11c:	280d883a 	mov	r6,r5
8001f120:	200b883a 	mov	r5,r4
8001f124:	11235e17 	ldw	r4,-29320(r2)
8001f128:	dfc00115 	stw	ra,4(sp)
8001f12c:	001ee040 	call	8001ee04 <_strtoll_l.isra.0>
8001f130:	dfc00117 	ldw	ra,4(sp)
8001f134:	dec00204 	addi	sp,sp,8
8001f138:	f800283a 	ret

8001f13c <strtoll>:
8001f13c:	00a000f4 	movhi	r2,32771
8001f140:	10e35e17 	ldw	r3,-29320(r2)
8001f144:	defffe04 	addi	sp,sp,-8
8001f148:	dfc00115 	stw	ra,4(sp)
8001f14c:	18800d17 	ldw	r2,52(r3)
8001f150:	1000021e 	bne	r2,zero,8001f15c <strtoll+0x20>
8001f154:	00a000b4 	movhi	r2,32770
8001f158:	109d2904 	addi	r2,r2,29860
8001f15c:	300f883a 	mov	r7,r6
8001f160:	d8800015 	stw	r2,0(sp)
8001f164:	280d883a 	mov	r6,r5
8001f168:	200b883a 	mov	r5,r4
8001f16c:	1809883a 	mov	r4,r3
8001f170:	001ee040 	call	8001ee04 <_strtoll_l.isra.0>
8001f174:	dfc00117 	ldw	ra,4(sp)
8001f178:	dec00204 	addi	sp,sp,8
8001f17c:	f800283a 	ret

8001f180 <_strtoull_l.isra.0>:
8001f180:	defff504 	addi	sp,sp,-44
8001f184:	ddc00815 	stw	r23,32(sp)
8001f188:	dd800715 	stw	r22,28(sp)
8001f18c:	dd400615 	stw	r21,24(sp)
8001f190:	dcc00415 	stw	r19,16(sp)
8001f194:	dc800315 	stw	r18,12(sp)
8001f198:	dc400215 	stw	r17,8(sp)
8001f19c:	dfc00a15 	stw	ra,40(sp)
8001f1a0:	df000915 	stw	fp,36(sp)
8001f1a4:	dd000515 	stw	r20,20(sp)
8001f1a8:	dc000115 	stw	r16,4(sp)
8001f1ac:	2823883a 	mov	r17,r5
8001f1b0:	2027883a 	mov	r19,r4
8001f1b4:	3025883a 	mov	r18,r6
8001f1b8:	382d883a 	mov	r22,r7
8001f1bc:	dd400b17 	ldw	r21,44(sp)
8001f1c0:	282f883a 	mov	r23,r5
8001f1c4:	00000106 	br	8001f1cc <_strtoull_l.isra.0+0x4c>
8001f1c8:	a02f883a 	mov	r23,r20
8001f1cc:	bd000044 	addi	r20,r23,1
8001f1d0:	a43fffc3 	ldbu	r16,-1(r20)
8001f1d4:	a809883a 	mov	r4,r21
8001f1d8:	000fc480 	call	8000fc48 <__locale_ctype_ptr_l>
8001f1dc:	84003fcc 	andi	r16,r16,255
8001f1e0:	1405883a 	add	r2,r2,r16
8001f1e4:	10800043 	ldbu	r2,1(r2)
8001f1e8:	1080020c 	andi	r2,r2,8
8001f1ec:	103ff61e 	bne	r2,zero,8001f1c8 <_gp+0xfffee454>
8001f1f0:	80800b58 	cmpnei	r2,r16,45
8001f1f4:	10006f26 	beq	r2,zero,8001f3b4 <_strtoull_l.isra.0+0x234>
8001f1f8:	80800ae0 	cmpeqi	r2,r16,43
8001f1fc:	10005a1e 	bne	r2,zero,8001f368 <_strtoull_l.isra.0+0x1e8>
8001f200:	0011883a 	mov	r8,zero
8001f204:	b0001426 	beq	r22,zero,8001f258 <_strtoull_l.isra.0+0xd8>
8001f208:	b0800420 	cmpeqi	r2,r22,16
8001f20c:	10006d1e 	bne	r2,zero,8001f3c4 <_strtoull_l.isra.0+0x244>
8001f210:	b039d7fa 	srai	fp,r22,31
8001f214:	013fffc4 	movi	r4,-1
8001f218:	017fffc4 	movi	r5,-1
8001f21c:	b00d883a 	mov	r6,r22
8001f220:	e00f883a 	mov	r7,fp
8001f224:	da000015 	stw	r8,0(sp)
8001f228:	000c99c0 	call	8000c99c <__udivdi3>
8001f22c:	e00f883a 	mov	r7,fp
8001f230:	b00d883a 	mov	r6,r22
8001f234:	013fffc4 	movi	r4,-1
8001f238:	017fffc4 	movi	r5,-1
8001f23c:	102f883a 	mov	r23,r2
8001f240:	182b883a 	mov	r21,r3
8001f244:	000cf340 	call	8000cf34 <__umoddi3>
8001f248:	1013883a 	mov	r9,r2
8001f24c:	b00f883a 	mov	r7,r22
8001f250:	da000017 	ldw	r8,0(sp)
8001f254:	00000a06 	br	8001f280 <_strtoull_l.isra.0+0x100>
8001f258:	80800c20 	cmpeqi	r2,r16,48
8001f25c:	1000621e 	bne	r2,zero,8001f3e8 <_strtoull_l.isra.0+0x268>
8001f260:	05e666b4 	movhi	r23,39322
8001f264:	054666b4 	movhi	r21,6554
8001f268:	02400144 	movi	r9,5
8001f26c:	bde66644 	addi	r23,r23,-26215
8001f270:	ad666644 	addi	r21,r21,-26215
8001f274:	01c00284 	movi	r7,10
8001f278:	0039883a 	mov	fp,zero
8001f27c:	05800284 	movi	r22,10
8001f280:	813ff404 	addi	r4,r16,-48
8001f284:	218002a8 	cmpgeui	r6,r4,10
8001f288:	000b883a 	mov	r5,zero
8001f28c:	0005883a 	mov	r2,zero
8001f290:	0007883a 	mov	r3,zero
8001f294:	30000c1e 	bne	r6,zero,8001f2c8 <_strtoull_l.isra.0+0x148>
8001f298:	2021883a 	mov	r16,r4
8001f29c:	85800f0e 	bge	r16,r22,8001f2dc <_strtoull_l.isra.0+0x15c>
8001f2a0:	28000316 	blt	r5,zero,8001f2b0 <_strtoull_l.isra.0+0x130>
8001f2a4:	a8c00236 	bltu	r21,r3,8001f2b0 <_strtoull_l.isra.0+0x130>
8001f2a8:	1d40211e 	bne	r3,r21,8001f330 <_strtoull_l.isra.0+0x1b0>
8001f2ac:	b880202e 	bgeu	r23,r2,8001f330 <_strtoull_l.isra.0+0x1b0>
8001f2b0:	017fffc4 	movi	r5,-1
8001f2b4:	a5000044 	addi	r20,r20,1
8001f2b8:	a43fffc3 	ldbu	r16,-1(r20)
8001f2bc:	813ff404 	addi	r4,r16,-48
8001f2c0:	218002a8 	cmpgeui	r6,r4,10
8001f2c4:	303ff426 	beq	r6,zero,8001f298 <_gp+0xfffee524>
8001f2c8:	813fefc4 	addi	r4,r16,-65
8001f2cc:	210006a8 	cmpgeui	r4,r4,26
8001f2d0:	2000291e 	bne	r4,zero,8001f378 <_strtoull_l.isra.0+0x1f8>
8001f2d4:	843ff244 	addi	r16,r16,-55
8001f2d8:	85bff116 	blt	r16,r22,8001f2a0 <_gp+0xfffee52c>
8001f2dc:	28002e16 	blt	r5,zero,8001f398 <_strtoull_l.isra.0+0x218>
8001f2e0:	40000426 	beq	r8,zero,8001f2f4 <_strtoull_l.isra.0+0x174>
8001f2e4:	0085c83a 	sub	r2,zero,r2
8001f2e8:	1008c03a 	cmpne	r4,r2,zero
8001f2ec:	00e1c83a 	sub	r16,zero,r3
8001f2f0:	8107c83a 	sub	r3,r16,r4
8001f2f4:	90000226 	beq	r18,zero,8001f300 <_strtoull_l.isra.0+0x180>
8001f2f8:	28002c1e 	bne	r5,zero,8001f3ac <_strtoull_l.isra.0+0x22c>
8001f2fc:	94400015 	stw	r17,0(r18)
8001f300:	dfc00a17 	ldw	ra,40(sp)
8001f304:	df000917 	ldw	fp,36(sp)
8001f308:	ddc00817 	ldw	r23,32(sp)
8001f30c:	dd800717 	ldw	r22,28(sp)
8001f310:	dd400617 	ldw	r21,24(sp)
8001f314:	dd000517 	ldw	r20,20(sp)
8001f318:	dcc00417 	ldw	r19,16(sp)
8001f31c:	dc800317 	ldw	r18,12(sp)
8001f320:	dc400217 	ldw	r17,8(sp)
8001f324:	dc000117 	ldw	r16,4(sp)
8001f328:	dec00b04 	addi	sp,sp,44
8001f32c:	f800283a 	ret
8001f330:	15c01626 	beq	r2,r23,8001f38c <_strtoull_l.isra.0+0x20c>
8001f334:	e08d383a 	mul	r6,fp,r2
8001f338:	19c7383a 	mul	r3,r3,r7
8001f33c:	11ca383a 	mulxuu	r5,r2,r7
8001f340:	11c5383a 	mul	r2,r2,r7
8001f344:	8009d7fa 	srai	r4,r16,31
8001f348:	1987883a 	add	r3,r3,r6
8001f34c:	1947883a 	add	r3,r3,r5
8001f350:	8085883a 	add	r2,r16,r2
8001f354:	1421803a 	cmpltu	r16,r2,r16
8001f358:	20c7883a 	add	r3,r4,r3
8001f35c:	80c7883a 	add	r3,r16,r3
8001f360:	01400044 	movi	r5,1
8001f364:	003fd306 	br	8001f2b4 <_gp+0xfffee540>
8001f368:	bc000043 	ldbu	r16,1(r23)
8001f36c:	bd000084 	addi	r20,r23,2
8001f370:	0011883a 	mov	r8,zero
8001f374:	003fa306 	br	8001f204 <_gp+0xfffee490>
8001f378:	813fe7c4 	addi	r4,r16,-97
8001f37c:	210006a8 	cmpgeui	r4,r4,26
8001f380:	203fd61e 	bne	r4,zero,8001f2dc <_gp+0xfffee568>
8001f384:	843fea44 	addi	r16,r16,-87
8001f388:	003fc406 	br	8001f29c <_gp+0xfffee528>
8001f38c:	1d7fe91e 	bne	r3,r21,8001f334 <_gp+0xfffee5c0>
8001f390:	4c3fc716 	blt	r9,r16,8001f2b0 <_gp+0xfffee53c>
8001f394:	003fe706 	br	8001f334 <_gp+0xfffee5c0>
8001f398:	00800884 	movi	r2,34
8001f39c:	98800015 	stw	r2,0(r19)
8001f3a0:	00ffffc4 	movi	r3,-1
8001f3a4:	00bfffc4 	movi	r2,-1
8001f3a8:	903fd526 	beq	r18,zero,8001f300 <_gp+0xfffee58c>
8001f3ac:	a47fffc4 	addi	r17,r20,-1
8001f3b0:	003fd206 	br	8001f2fc <_gp+0xfffee588>
8001f3b4:	bd000084 	addi	r20,r23,2
8001f3b8:	bc000043 	ldbu	r16,1(r23)
8001f3bc:	02000044 	movi	r8,1
8001f3c0:	003f9006 	br	8001f204 <_gp+0xfffee490>
8001f3c4:	80800c18 	cmpnei	r2,r16,48
8001f3c8:	10001326 	beq	r2,zero,8001f418 <_strtoull_l.isra.0+0x298>
8001f3cc:	05440034 	movhi	r21,4096
8001f3d0:	024003c4 	movi	r9,15
8001f3d4:	05ffffc4 	movi	r23,-1
8001f3d8:	ad7fffc4 	addi	r21,r21,-1
8001f3dc:	01c00404 	movi	r7,16
8001f3e0:	0039883a 	mov	fp,zero
8001f3e4:	003fa606 	br	8001f280 <_gp+0xfffee50c>
8001f3e8:	a0800003 	ldbu	r2,0(r20)
8001f3ec:	108037cc 	andi	r2,r2,223
8001f3f0:	10801618 	cmpnei	r2,r2,88
8001f3f4:	10000c26 	beq	r2,zero,8001f428 <_strtoull_l.isra.0+0x2a8>
8001f3f8:	05480034 	movhi	r21,8192
8001f3fc:	024001c4 	movi	r9,7
8001f400:	05ffffc4 	movi	r23,-1
8001f404:	ad7fffc4 	addi	r21,r21,-1
8001f408:	01c00204 	movi	r7,8
8001f40c:	0039883a 	mov	fp,zero
8001f410:	05800204 	movi	r22,8
8001f414:	003f9a06 	br	8001f280 <_gp+0xfffee50c>
8001f418:	a0800003 	ldbu	r2,0(r20)
8001f41c:	108037cc 	andi	r2,r2,223
8001f420:	10801620 	cmpeqi	r2,r2,88
8001f424:	10000a26 	beq	r2,zero,8001f450 <_strtoull_l.isra.0+0x2d0>
8001f428:	05440034 	movhi	r21,4096
8001f42c:	a4000043 	ldbu	r16,1(r20)
8001f430:	024003c4 	movi	r9,15
8001f434:	a5000084 	addi	r20,r20,2
8001f438:	05ffffc4 	movi	r23,-1
8001f43c:	ad7fffc4 	addi	r21,r21,-1
8001f440:	01c00404 	movi	r7,16
8001f444:	0039883a 	mov	fp,zero
8001f448:	05800404 	movi	r22,16
8001f44c:	003f8c06 	br	8001f280 <_gp+0xfffee50c>
8001f450:	01800404 	movi	r6,16
8001f454:	000f883a 	mov	r7,zero
8001f458:	013fffc4 	movi	r4,-1
8001f45c:	017fffc4 	movi	r5,-1
8001f460:	da000015 	stw	r8,0(sp)
8001f464:	000c99c0 	call	8000c99c <__udivdi3>
8001f468:	000f883a 	mov	r7,zero
8001f46c:	01800404 	movi	r6,16
8001f470:	013fffc4 	movi	r4,-1
8001f474:	017fffc4 	movi	r5,-1
8001f478:	102f883a 	mov	r23,r2
8001f47c:	182b883a 	mov	r21,r3
8001f480:	000cf340 	call	8000cf34 <__umoddi3>
8001f484:	1013883a 	mov	r9,r2
8001f488:	01c00404 	movi	r7,16
8001f48c:	0039883a 	mov	fp,zero
8001f490:	da000017 	ldw	r8,0(sp)
8001f494:	003f7a06 	br	8001f280 <_gp+0xfffee50c>

8001f498 <_strtoull_r>:
8001f498:	00a000f4 	movhi	r2,32771
8001f49c:	10a35e17 	ldw	r2,-29320(r2)
8001f4a0:	defffe04 	addi	sp,sp,-8
8001f4a4:	dfc00115 	stw	ra,4(sp)
8001f4a8:	10800d17 	ldw	r2,52(r2)
8001f4ac:	1000021e 	bne	r2,zero,8001f4b8 <_strtoull_r+0x20>
8001f4b0:	00a000b4 	movhi	r2,32770
8001f4b4:	109d2904 	addi	r2,r2,29860
8001f4b8:	d8800015 	stw	r2,0(sp)
8001f4bc:	001f1800 	call	8001f180 <_strtoull_l.isra.0>
8001f4c0:	dfc00117 	ldw	ra,4(sp)
8001f4c4:	dec00204 	addi	sp,sp,8
8001f4c8:	f800283a 	ret

8001f4cc <strtoull_l>:
8001f4cc:	defffe04 	addi	sp,sp,-8
8001f4d0:	00a000f4 	movhi	r2,32771
8001f4d4:	d9c00015 	stw	r7,0(sp)
8001f4d8:	300f883a 	mov	r7,r6
8001f4dc:	280d883a 	mov	r6,r5
8001f4e0:	200b883a 	mov	r5,r4
8001f4e4:	11235e17 	ldw	r4,-29320(r2)
8001f4e8:	dfc00115 	stw	ra,4(sp)
8001f4ec:	001f1800 	call	8001f180 <_strtoull_l.isra.0>
8001f4f0:	dfc00117 	ldw	ra,4(sp)
8001f4f4:	dec00204 	addi	sp,sp,8
8001f4f8:	f800283a 	ret

8001f4fc <strtoull>:
8001f4fc:	00a000f4 	movhi	r2,32771
8001f500:	10e35e17 	ldw	r3,-29320(r2)
8001f504:	defffe04 	addi	sp,sp,-8
8001f508:	dfc00115 	stw	ra,4(sp)
8001f50c:	18800d17 	ldw	r2,52(r3)
8001f510:	1000021e 	bne	r2,zero,8001f51c <strtoull+0x20>
8001f514:	00a000b4 	movhi	r2,32770
8001f518:	109d2904 	addi	r2,r2,29860
8001f51c:	300f883a 	mov	r7,r6
8001f520:	d8800015 	stw	r2,0(sp)
8001f524:	280d883a 	mov	r6,r5
8001f528:	200b883a 	mov	r5,r4
8001f52c:	1809883a 	mov	r4,r3
8001f530:	001f1800 	call	8001f180 <_strtoull_l.isra.0>
8001f534:	dfc00117 	ldw	ra,4(sp)
8001f538:	dec00204 	addi	sp,sp,8
8001f53c:	f800283a 	ret

8001f540 <_wcrtomb_r>:
8001f540:	00a000f4 	movhi	r2,32771
8001f544:	10a35e17 	ldw	r2,-29320(r2)
8001f548:	defffa04 	addi	sp,sp,-24
8001f54c:	dc400415 	stw	r17,16(sp)
8001f550:	dc000315 	stw	r16,12(sp)
8001f554:	dfc00515 	stw	ra,20(sp)
8001f558:	2021883a 	mov	r16,r4
8001f55c:	3823883a 	mov	r17,r7
8001f560:	10800d17 	ldw	r2,52(r2)
8001f564:	28000f26 	beq	r5,zero,8001f5a4 <_wcrtomb_r+0x64>
8001f568:	10000b26 	beq	r2,zero,8001f598 <_wcrtomb_r+0x58>
8001f56c:	10803817 	ldw	r2,224(r2)
8001f570:	880f883a 	mov	r7,r17
8001f574:	8009883a 	mov	r4,r16
8001f578:	103ee83a 	callr	r2
8001f57c:	10ffffd8 	cmpnei	r3,r2,-1
8001f580:	18001126 	beq	r3,zero,8001f5c8 <_wcrtomb_r+0x88>
8001f584:	dfc00517 	ldw	ra,20(sp)
8001f588:	dc400417 	ldw	r17,16(sp)
8001f58c:	dc000317 	ldw	r16,12(sp)
8001f590:	dec00604 	addi	sp,sp,24
8001f594:	f800283a 	ret
8001f598:	00a000b4 	movhi	r2,32770
8001f59c:	109d2904 	addi	r2,r2,29860
8001f5a0:	003ff206 	br	8001f56c <_gp+0xfffee7f8>
8001f5a4:	10000d26 	beq	r2,zero,8001f5dc <_wcrtomb_r+0x9c>
8001f5a8:	10803817 	ldw	r2,224(r2)
8001f5ac:	880f883a 	mov	r7,r17
8001f5b0:	000d883a 	mov	r6,zero
8001f5b4:	d9400084 	addi	r5,sp,2
8001f5b8:	8009883a 	mov	r4,r16
8001f5bc:	103ee83a 	callr	r2
8001f5c0:	10ffffd8 	cmpnei	r3,r2,-1
8001f5c4:	183fef1e 	bne	r3,zero,8001f584 <_gp+0xfffee810>
8001f5c8:	00802284 	movi	r2,138
8001f5cc:	88000015 	stw	zero,0(r17)
8001f5d0:	80800015 	stw	r2,0(r16)
8001f5d4:	00bfffc4 	movi	r2,-1
8001f5d8:	003fea06 	br	8001f584 <_gp+0xfffee810>
8001f5dc:	00a000b4 	movhi	r2,32770
8001f5e0:	109d2904 	addi	r2,r2,29860
8001f5e4:	003ff006 	br	8001f5a8 <_gp+0xfffee834>

8001f5e8 <wcrtomb>:
8001f5e8:	defffa04 	addi	sp,sp,-24
8001f5ec:	00a000f4 	movhi	r2,32771
8001f5f0:	dc000315 	stw	r16,12(sp)
8001f5f4:	14235e17 	ldw	r16,-29320(r2)
8001f5f8:	dc400415 	stw	r17,16(sp)
8001f5fc:	dfc00515 	stw	ra,20(sp)
8001f600:	3023883a 	mov	r17,r6
8001f604:	80800d17 	ldw	r2,52(r16)
8001f608:	20001126 	beq	r4,zero,8001f650 <wcrtomb+0x68>
8001f60c:	10000d26 	beq	r2,zero,8001f644 <wcrtomb+0x5c>
8001f610:	10803817 	ldw	r2,224(r2)
8001f614:	280d883a 	mov	r6,r5
8001f618:	880f883a 	mov	r7,r17
8001f61c:	200b883a 	mov	r5,r4
8001f620:	8009883a 	mov	r4,r16
8001f624:	103ee83a 	callr	r2
8001f628:	10ffffd8 	cmpnei	r3,r2,-1
8001f62c:	18001126 	beq	r3,zero,8001f674 <wcrtomb+0x8c>
8001f630:	dfc00517 	ldw	ra,20(sp)
8001f634:	dc400417 	ldw	r17,16(sp)
8001f638:	dc000317 	ldw	r16,12(sp)
8001f63c:	dec00604 	addi	sp,sp,24
8001f640:	f800283a 	ret
8001f644:	00a000b4 	movhi	r2,32770
8001f648:	109d2904 	addi	r2,r2,29860
8001f64c:	003ff006 	br	8001f610 <_gp+0xfffee89c>
8001f650:	10000d26 	beq	r2,zero,8001f688 <wcrtomb+0xa0>
8001f654:	10803817 	ldw	r2,224(r2)
8001f658:	880f883a 	mov	r7,r17
8001f65c:	000d883a 	mov	r6,zero
8001f660:	d9400084 	addi	r5,sp,2
8001f664:	8009883a 	mov	r4,r16
8001f668:	103ee83a 	callr	r2
8001f66c:	10ffffd8 	cmpnei	r3,r2,-1
8001f670:	183fef1e 	bne	r3,zero,8001f630 <_gp+0xfffee8bc>
8001f674:	00802284 	movi	r2,138
8001f678:	80800015 	stw	r2,0(r16)
8001f67c:	88000015 	stw	zero,0(r17)
8001f680:	00bfffc4 	movi	r2,-1
8001f684:	003fea06 	br	8001f630 <_gp+0xfffee8bc>
8001f688:	00a000b4 	movhi	r2,32770
8001f68c:	109d2904 	addi	r2,r2,29860
8001f690:	003ff006 	br	8001f654 <_gp+0xfffee8e0>

8001f694 <__eqdf2>:
8001f694:	2810d53a 	srli	r8,r5,20
8001f698:	3806d53a 	srli	r3,r7,20
8001f69c:	00800434 	movhi	r2,16
8001f6a0:	4201ffcc 	andi	r8,r8,2047
8001f6a4:	10bfffc4 	addi	r2,r2,-1
8001f6a8:	4281ffd8 	cmpnei	r10,r8,2047
8001f6ac:	2892703a 	and	r9,r5,r2
8001f6b0:	18c1ffcc 	andi	r3,r3,2047
8001f6b4:	3884703a 	and	r2,r7,r2
8001f6b8:	280ad7fa 	srli	r5,r5,31
8001f6bc:	380ed7fa 	srli	r7,r7,31
8001f6c0:	50000626 	beq	r10,zero,8001f6dc <__eqdf2+0x48>
8001f6c4:	1a81ffe0 	cmpeqi	r10,r3,2047
8001f6c8:	5000021e 	bne	r10,zero,8001f6d4 <__eqdf2+0x40>
8001f6cc:	40c0011e 	bne	r8,r3,8001f6d4 <__eqdf2+0x40>
8001f6d0:	48800826 	beq	r9,r2,8001f6f4 <__eqdf2+0x60>
8001f6d4:	00800044 	movi	r2,1
8001f6d8:	f800283a 	ret
8001f6dc:	4914b03a 	or	r10,r9,r4
8001f6e0:	503ffc1e 	bne	r10,zero,8001f6d4 <_gp+0xfffee960>
8001f6e4:	18c1ffd8 	cmpnei	r3,r3,2047
8001f6e8:	183ffa1e 	bne	r3,zero,8001f6d4 <_gp+0xfffee960>
8001f6ec:	1184b03a 	or	r2,r2,r6
8001f6f0:	103ff81e 	bne	r2,zero,8001f6d4 <_gp+0xfffee960>
8001f6f4:	21bff71e 	bne	r4,r6,8001f6d4 <_gp+0xfffee960>
8001f6f8:	29c00426 	beq	r5,r7,8001f70c <__eqdf2+0x78>
8001f6fc:	403ff51e 	bne	r8,zero,8001f6d4 <_gp+0xfffee960>
8001f700:	4904b03a 	or	r2,r9,r4
8001f704:	1004c03a 	cmpne	r2,r2,zero
8001f708:	f800283a 	ret
8001f70c:	0005883a 	mov	r2,zero
8001f710:	f800283a 	ret

8001f714 <__ledf2>:
8001f714:	2810d53a 	srli	r8,r5,20
8001f718:	3806d53a 	srli	r3,r7,20
8001f71c:	00800434 	movhi	r2,16
8001f720:	4201ffcc 	andi	r8,r8,2047
8001f724:	10bfffc4 	addi	r2,r2,-1
8001f728:	4241ffd8 	cmpnei	r9,r8,2047
8001f72c:	2894703a 	and	r10,r5,r2
8001f730:	18c1ffcc 	andi	r3,r3,2047
8001f734:	3884703a 	and	r2,r7,r2
8001f738:	280ad7fa 	srli	r5,r5,31
8001f73c:	380ed7fa 	srli	r7,r7,31
8001f740:	48000e26 	beq	r9,zero,8001f77c <__ledf2+0x68>
8001f744:	1a41ffd8 	cmpnei	r9,r3,2047
8001f748:	48000826 	beq	r9,zero,8001f76c <__ledf2+0x58>
8001f74c:	40000f1e 	bne	r8,zero,8001f78c <__ledf2+0x78>
8001f750:	5112b03a 	or	r9,r10,r4
8001f754:	1800131e 	bne	r3,zero,8001f7a4 <__ledf2+0x90>
8001f758:	1196b03a 	or	r11,r2,r6
8001f75c:	5800111e 	bne	r11,zero,8001f7a4 <__ledf2+0x90>
8001f760:	48000d1e 	bne	r9,zero,8001f798 <__ledf2+0x84>
8001f764:	0005883a 	mov	r2,zero
8001f768:	f800283a 	ret
8001f76c:	1192b03a 	or	r9,r2,r6
8001f770:	483ff626 	beq	r9,zero,8001f74c <_gp+0xfffee9d8>
8001f774:	00800084 	movi	r2,2
8001f778:	f800283a 	ret
8001f77c:	5112b03a 	or	r9,r10,r4
8001f780:	483ffc1e 	bne	r9,zero,8001f774 <_gp+0xfffeea00>
8001f784:	1a41ffd8 	cmpnei	r9,r3,2047
8001f788:	48001226 	beq	r9,zero,8001f7d4 <__ledf2+0xc0>
8001f78c:	1800131e 	bne	r3,zero,8001f7dc <__ledf2+0xc8>
8001f790:	1192b03a 	or	r9,r2,r6
8001f794:	4800111e 	bne	r9,zero,8001f7dc <__ledf2+0xc8>
8001f798:	00800044 	movi	r2,1
8001f79c:	2800081e 	bne	r5,zero,8001f7c0 <__ledf2+0xac>
8001f7a0:	f800283a 	ret
8001f7a4:	48000826 	beq	r9,zero,8001f7c8 <__ledf2+0xb4>
8001f7a8:	29fffb1e 	bne	r5,r7,8001f798 <_gp+0xfffeea24>
8001f7ac:	40c00316 	blt	r8,r3,8001f7bc <__ledf2+0xa8>
8001f7b0:	12bff936 	bltu	r2,r10,8001f798 <_gp+0xfffeea24>
8001f7b4:	50800c26 	beq	r10,r2,8001f7e8 <__ledf2+0xd4>
8001f7b8:	50bfea2e 	bgeu	r10,r2,8001f764 <_gp+0xfffee9f0>
8001f7bc:	2800031e 	bne	r5,zero,8001f7cc <__ledf2+0xb8>
8001f7c0:	00bfffc4 	movi	r2,-1
8001f7c4:	f800283a 	ret
8001f7c8:	383ffd26 	beq	r7,zero,8001f7c0 <_gp+0xfffeea4c>
8001f7cc:	00800044 	movi	r2,1
8001f7d0:	f800283a 	ret
8001f7d4:	1192b03a 	or	r9,r2,r6
8001f7d8:	483fe61e 	bne	r9,zero,8001f774 <_gp+0xfffeea00>
8001f7dc:	29ffee1e 	bne	r5,r7,8001f798 <_gp+0xfffeea24>
8001f7e0:	1a3fed16 	blt	r3,r8,8001f798 <_gp+0xfffeea24>
8001f7e4:	003ff106 	br	8001f7ac <_gp+0xfffeea38>
8001f7e8:	313feb36 	bltu	r6,r4,8001f798 <_gp+0xfffeea24>
8001f7ec:	21bff336 	bltu	r4,r6,8001f7bc <_gp+0xfffeea48>
8001f7f0:	003fdc06 	br	8001f764 <_gp+0xfffee9f0>

8001f7f4 <__unorddf2>:
8001f7f4:	2806d53a 	srli	r3,r5,20
8001f7f8:	3810d53a 	srli	r8,r7,20
8001f7fc:	00800434 	movhi	r2,16
8001f800:	18c1ffcc 	andi	r3,r3,2047
8001f804:	10bfffc4 	addi	r2,r2,-1
8001f808:	18c1ffd8 	cmpnei	r3,r3,2047
8001f80c:	288a703a 	and	r5,r5,r2
8001f810:	388e703a 	and	r7,r7,r2
8001f814:	4201ffcc 	andi	r8,r8,2047
8001f818:	18000426 	beq	r3,zero,8001f82c <__unorddf2+0x38>
8001f81c:	4201ffd8 	cmpnei	r8,r8,2047
8001f820:	40000626 	beq	r8,zero,8001f83c <__unorddf2+0x48>
8001f824:	0005883a 	mov	r2,zero
8001f828:	f800283a 	ret
8001f82c:	214ab03a 	or	r5,r4,r5
8001f830:	283ffa26 	beq	r5,zero,8001f81c <_gp+0xfffeeaa8>
8001f834:	00800044 	movi	r2,1
8001f838:	f800283a 	ret
8001f83c:	398eb03a 	or	r7,r7,r6
8001f840:	3804c03a 	cmpne	r2,r7,zero
8001f844:	f800283a 	ret

8001f848 <__floatsidf>:
8001f848:	defffd04 	addi	sp,sp,-12
8001f84c:	dfc00215 	stw	ra,8(sp)
8001f850:	dc400115 	stw	r17,4(sp)
8001f854:	dc000015 	stw	r16,0(sp)
8001f858:	20002626 	beq	r4,zero,8001f8f4 <__floatsidf+0xac>
8001f85c:	2021883a 	mov	r16,r4
8001f860:	2022d7fa 	srli	r17,r4,31
8001f864:	20002816 	blt	r4,zero,8001f908 <__floatsidf+0xc0>
8001f868:	8009883a 	mov	r4,r16
8001f86c:	000f97c0 	call	8000f97c <__clzsi2>
8001f870:	01010784 	movi	r4,1054
8001f874:	2089c83a 	sub	r4,r4,r2
8001f878:	10c002c8 	cmpgei	r3,r2,11
8001f87c:	2101ffcc 	andi	r4,r4,2047
8001f880:	18001326 	beq	r3,zero,8001f8d0 <__floatsidf+0x88>
8001f884:	10bffd44 	addi	r2,r2,-11
8001f888:	808a983a 	sll	r5,r16,r2
8001f88c:	00800434 	movhi	r2,16
8001f890:	10bfffc4 	addi	r2,r2,-1
8001f894:	288a703a 	and	r5,r5,r2
8001f898:	0005883a 	mov	r2,zero
8001f89c:	2008953a 	slli	r4,r4,20
8001f8a0:	8c403fcc 	andi	r17,r17,255
8001f8a4:	01800434 	movhi	r6,16
8001f8a8:	31bfffc4 	addi	r6,r6,-1
8001f8ac:	880697fa 	slli	r3,r17,31
8001f8b0:	298a703a 	and	r5,r5,r6
8001f8b4:	290ab03a 	or	r5,r5,r4
8001f8b8:	28c6b03a 	or	r3,r5,r3
8001f8bc:	dfc00217 	ldw	ra,8(sp)
8001f8c0:	dc400117 	ldw	r17,4(sp)
8001f8c4:	dc000017 	ldw	r16,0(sp)
8001f8c8:	dec00304 	addi	sp,sp,12
8001f8cc:	f800283a 	ret
8001f8d0:	018002c4 	movi	r6,11
8001f8d4:	308dc83a 	sub	r6,r6,r2
8001f8d8:	818ad83a 	srl	r5,r16,r6
8001f8dc:	00c00434 	movhi	r3,16
8001f8e0:	10800544 	addi	r2,r2,21
8001f8e4:	18ffffc4 	addi	r3,r3,-1
8001f8e8:	8084983a 	sll	r2,r16,r2
8001f8ec:	28ca703a 	and	r5,r5,r3
8001f8f0:	003fea06 	br	8001f89c <_gp+0xfffeeb28>
8001f8f4:	0023883a 	mov	r17,zero
8001f8f8:	0009883a 	mov	r4,zero
8001f8fc:	000b883a 	mov	r5,zero
8001f900:	0005883a 	mov	r2,zero
8001f904:	003fe506 	br	8001f89c <_gp+0xfffeeb28>
8001f908:	0121c83a 	sub	r16,zero,r4
8001f90c:	003fd606 	br	8001f868 <_gp+0xfffeeaf4>

8001f910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8001f910:	defffe04 	addi	sp,sp,-8
8001f914:	dfc00115 	stw	ra,4(sp)
8001f918:	df000015 	stw	fp,0(sp)
8001f91c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8001f920:	d0a00c17 	ldw	r2,-32720(gp)
8001f924:	10000326 	beq	r2,zero,8001f934 <alt_get_errno+0x24>
8001f928:	d0a00c17 	ldw	r2,-32720(gp)
8001f92c:	103ee83a 	callr	r2
8001f930:	00000106 	br	8001f938 <alt_get_errno+0x28>
8001f934:	d0a77a04 	addi	r2,gp,-25112
}
8001f938:	e037883a 	mov	sp,fp
8001f93c:	dfc00117 	ldw	ra,4(sp)
8001f940:	df000017 	ldw	fp,0(sp)
8001f944:	dec00204 	addi	sp,sp,8
8001f948:	f800283a 	ret

8001f94c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8001f94c:	defffb04 	addi	sp,sp,-20
8001f950:	dfc00415 	stw	ra,16(sp)
8001f954:	df000315 	stw	fp,12(sp)
8001f958:	df000304 	addi	fp,sp,12
8001f95c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8001f960:	e0bffd17 	ldw	r2,-12(fp)
8001f964:	10000616 	blt	r2,zero,8001f980 <close+0x34>
8001f968:	e0bffd17 	ldw	r2,-12(fp)
8001f96c:	10c00324 	muli	r3,r2,12
8001f970:	00a000b4 	movhi	r2,32770
8001f974:	109ea004 	addi	r2,r2,31360
8001f978:	1885883a 	add	r2,r3,r2
8001f97c:	00000106 	br	8001f984 <close+0x38>
8001f980:	0005883a 	mov	r2,zero
8001f984:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
8001f988:	e0bfff17 	ldw	r2,-4(fp)
8001f98c:	10001926 	beq	r2,zero,8001f9f4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8001f990:	e0bfff17 	ldw	r2,-4(fp)
8001f994:	10800017 	ldw	r2,0(r2)
8001f998:	10800417 	ldw	r2,16(r2)
8001f99c:	10000626 	beq	r2,zero,8001f9b8 <close+0x6c>
8001f9a0:	e0bfff17 	ldw	r2,-4(fp)
8001f9a4:	10800017 	ldw	r2,0(r2)
8001f9a8:	10800417 	ldw	r2,16(r2)
8001f9ac:	e13fff17 	ldw	r4,-4(fp)
8001f9b0:	103ee83a 	callr	r2
8001f9b4:	00000106 	br	8001f9bc <close+0x70>
8001f9b8:	0005883a 	mov	r2,zero
8001f9bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8001f9c0:	e13ffd17 	ldw	r4,-12(fp)
8001f9c4:	00203fc0 	call	800203fc <alt_release_fd>
    if (rval < 0)
8001f9c8:	e0bffe17 	ldw	r2,-8(fp)
8001f9cc:	1000070e 	bge	r2,zero,8001f9ec <close+0xa0>
    {
      ALT_ERRNO = -rval;
8001f9d0:	001f9100 	call	8001f910 <alt_get_errno>
8001f9d4:	1007883a 	mov	r3,r2
8001f9d8:	e0bffe17 	ldw	r2,-8(fp)
8001f9dc:	0085c83a 	sub	r2,zero,r2
8001f9e0:	18800015 	stw	r2,0(r3)
      return -1;
8001f9e4:	00bfffc4 	movi	r2,-1
8001f9e8:	00000706 	br	8001fa08 <close+0xbc>
    }
    return 0;
8001f9ec:	0005883a 	mov	r2,zero
8001f9f0:	00000506 	br	8001fa08 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8001f9f4:	001f9100 	call	8001f910 <alt_get_errno>
8001f9f8:	1007883a 	mov	r3,r2
8001f9fc:	00801444 	movi	r2,81
8001fa00:	18800015 	stw	r2,0(r3)
    return -1;
8001fa04:	00bfffc4 	movi	r2,-1
  }
}
8001fa08:	e037883a 	mov	sp,fp
8001fa0c:	dfc00117 	ldw	ra,4(sp)
8001fa10:	df000017 	ldw	fp,0(sp)
8001fa14:	dec00204 	addi	sp,sp,8
8001fa18:	f800283a 	ret

8001fa1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8001fa1c:	defffc04 	addi	sp,sp,-16
8001fa20:	df000315 	stw	fp,12(sp)
8001fa24:	df000304 	addi	fp,sp,12
8001fa28:	e13fff15 	stw	r4,-4(fp)
8001fa2c:	e17ffe15 	stw	r5,-8(fp)
8001fa30:	e1bffd15 	stw	r6,-12(fp)
  return len;
8001fa34:	e0bffd17 	ldw	r2,-12(fp)
}
8001fa38:	e037883a 	mov	sp,fp
8001fa3c:	df000017 	ldw	fp,0(sp)
8001fa40:	dec00104 	addi	sp,sp,4
8001fa44:	f800283a 	ret

8001fa48 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
8001fa48:	defffd04 	addi	sp,sp,-12
8001fa4c:	dfc00215 	stw	ra,8(sp)
8001fa50:	df000115 	stw	fp,4(sp)
8001fa54:	df000104 	addi	fp,sp,4
8001fa58:	e13fff15 	stw	r4,-4(fp)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8001fa5c:	d1600904 	addi	r5,gp,-32732
8001fa60:	e13fff17 	ldw	r4,-4(fp)
8001fa64:	001fab80 	call	8001fab8 <alt_dev_llist_insert>
}
8001fa68:	e037883a 	mov	sp,fp
8001fa6c:	dfc00117 	ldw	ra,4(sp)
8001fa70:	df000017 	ldw	fp,0(sp)
8001fa74:	dec00204 	addi	sp,sp,8
8001fa78:	f800283a 	ret

8001fa7c <alt_get_errno>:
{
8001fa7c:	defffe04 	addi	sp,sp,-8
8001fa80:	dfc00115 	stw	ra,4(sp)
8001fa84:	df000015 	stw	fp,0(sp)
8001fa88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8001fa8c:	d0a00c17 	ldw	r2,-32720(gp)
8001fa90:	10000326 	beq	r2,zero,8001faa0 <alt_get_errno+0x24>
8001fa94:	d0a00c17 	ldw	r2,-32720(gp)
8001fa98:	103ee83a 	callr	r2
8001fa9c:	00000106 	br	8001faa4 <alt_get_errno+0x28>
8001faa0:	d0a77a04 	addi	r2,gp,-25112
}
8001faa4:	e037883a 	mov	sp,fp
8001faa8:	dfc00117 	ldw	ra,4(sp)
8001faac:	df000017 	ldw	fp,0(sp)
8001fab0:	dec00204 	addi	sp,sp,8
8001fab4:	f800283a 	ret

8001fab8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8001fab8:	defffa04 	addi	sp,sp,-24
8001fabc:	dfc00515 	stw	ra,20(sp)
8001fac0:	df000415 	stw	fp,16(sp)
8001fac4:	df000404 	addi	fp,sp,16
8001fac8:	e13ffd15 	stw	r4,-12(fp)
8001facc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8001fad0:	e0bffd17 	ldw	r2,-12(fp)
8001fad4:	10000326 	beq	r2,zero,8001fae4 <alt_dev_llist_insert+0x2c>
8001fad8:	e0bffd17 	ldw	r2,-12(fp)
8001fadc:	10800217 	ldw	r2,8(r2)
8001fae0:	1000061e 	bne	r2,zero,8001fafc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
8001fae4:	001fa7c0 	call	8001fa7c <alt_get_errno>
8001fae8:	1007883a 	mov	r3,r2
8001faec:	00800584 	movi	r2,22
8001faf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8001faf4:	00bffa84 	movi	r2,-22
8001faf8:	00001306 	br	8001fb48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8001fafc:	e0bffd17 	ldw	r2,-12(fp)
8001fb00:	e0fffc17 	ldw	r3,-16(fp)
8001fb04:	e0ffff15 	stw	r3,-4(fp)
8001fb08:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8001fb0c:	e0bffe17 	ldw	r2,-8(fp)
8001fb10:	e0ffff17 	ldw	r3,-4(fp)
8001fb14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8001fb18:	e0bfff17 	ldw	r2,-4(fp)
8001fb1c:	10c00017 	ldw	r3,0(r2)
8001fb20:	e0bffe17 	ldw	r2,-8(fp)
8001fb24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8001fb28:	e0bfff17 	ldw	r2,-4(fp)
8001fb2c:	10800017 	ldw	r2,0(r2)
8001fb30:	e0fffe17 	ldw	r3,-8(fp)
8001fb34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8001fb38:	e0bfff17 	ldw	r2,-4(fp)
8001fb3c:	e0fffe17 	ldw	r3,-8(fp)
8001fb40:	10c00015 	stw	r3,0(r2)

  return 0;  
8001fb44:	0005883a 	mov	r2,zero
}
8001fb48:	e037883a 	mov	sp,fp
8001fb4c:	dfc00117 	ldw	ra,4(sp)
8001fb50:	df000017 	ldw	fp,0(sp)
8001fb54:	dec00204 	addi	sp,sp,8
8001fb58:	f800283a 	ret

8001fb5c <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
8001fb5c:	defffe04 	addi	sp,sp,-8
8001fb60:	df000115 	stw	fp,4(sp)
8001fb64:	df000104 	addi	fp,sp,4
8001fb68:	e13fff15 	stw	r4,-4(fp)
}
8001fb6c:	0001883a 	nop
8001fb70:	e037883a 	mov	sp,fp
8001fb74:	df000017 	ldw	fp,0(sp)
8001fb78:	dec00104 	addi	sp,sp,4
8001fb7c:	f800283a 	ret

8001fb80 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
8001fb80:	defffe04 	addi	sp,sp,-8
8001fb84:	df000115 	stw	fp,4(sp)
8001fb88:	df000104 	addi	fp,sp,4
8001fb8c:	e13fff15 	stw	r4,-4(fp)
}
8001fb90:	0001883a 	nop
8001fb94:	e037883a 	mov	sp,fp
8001fb98:	df000017 	ldw	fp,0(sp)
8001fb9c:	dec00104 	addi	sp,sp,4
8001fba0:	f800283a 	ret

8001fba4 <alt_get_errno>:
{
8001fba4:	defffe04 	addi	sp,sp,-8
8001fba8:	dfc00115 	stw	ra,4(sp)
8001fbac:	df000015 	stw	fp,0(sp)
8001fbb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8001fbb4:	d0a00c17 	ldw	r2,-32720(gp)
8001fbb8:	10000326 	beq	r2,zero,8001fbc8 <alt_get_errno+0x24>
8001fbbc:	d0a00c17 	ldw	r2,-32720(gp)
8001fbc0:	103ee83a 	callr	r2
8001fbc4:	00000106 	br	8001fbcc <alt_get_errno+0x28>
8001fbc8:	d0a77a04 	addi	r2,gp,-25112
}
8001fbcc:	e037883a 	mov	sp,fp
8001fbd0:	dfc00117 	ldw	ra,4(sp)
8001fbd4:	df000017 	ldw	fp,0(sp)
8001fbd8:	dec00204 	addi	sp,sp,8
8001fbdc:	f800283a 	ret

8001fbe0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8001fbe0:	defffb04 	addi	sp,sp,-20
8001fbe4:	dfc00415 	stw	ra,16(sp)
8001fbe8:	df000315 	stw	fp,12(sp)
8001fbec:	df000304 	addi	fp,sp,12
8001fbf0:	e13ffe15 	stw	r4,-8(fp)
8001fbf4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8001fbf8:	e0bffe17 	ldw	r2,-8(fp)
8001fbfc:	10000616 	blt	r2,zero,8001fc18 <fstat+0x38>
8001fc00:	e0bffe17 	ldw	r2,-8(fp)
8001fc04:	10c00324 	muli	r3,r2,12
8001fc08:	00a000b4 	movhi	r2,32770
8001fc0c:	109ea004 	addi	r2,r2,31360
8001fc10:	1885883a 	add	r2,r3,r2
8001fc14:	00000106 	br	8001fc1c <fstat+0x3c>
8001fc18:	0005883a 	mov	r2,zero
8001fc1c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
8001fc20:	e0bfff17 	ldw	r2,-4(fp)
8001fc24:	10001026 	beq	r2,zero,8001fc68 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8001fc28:	e0bfff17 	ldw	r2,-4(fp)
8001fc2c:	10800017 	ldw	r2,0(r2)
8001fc30:	10800817 	ldw	r2,32(r2)
8001fc34:	10000726 	beq	r2,zero,8001fc54 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8001fc38:	e0bfff17 	ldw	r2,-4(fp)
8001fc3c:	10800017 	ldw	r2,0(r2)
8001fc40:	10800817 	ldw	r2,32(r2)
8001fc44:	e17ffd17 	ldw	r5,-12(fp)
8001fc48:	e13fff17 	ldw	r4,-4(fp)
8001fc4c:	103ee83a 	callr	r2
8001fc50:	00000a06 	br	8001fc7c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8001fc54:	e0bffd17 	ldw	r2,-12(fp)
8001fc58:	00c80004 	movi	r3,8192
8001fc5c:	10c00115 	stw	r3,4(r2)
      return 0;
8001fc60:	0005883a 	mov	r2,zero
8001fc64:	00000506 	br	8001fc7c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8001fc68:	001fba40 	call	8001fba4 <alt_get_errno>
8001fc6c:	1007883a 	mov	r3,r2
8001fc70:	00801444 	movi	r2,81
8001fc74:	18800015 	stw	r2,0(r3)
    return -1;
8001fc78:	00bfffc4 	movi	r2,-1
  }
}
8001fc7c:	e037883a 	mov	sp,fp
8001fc80:	dfc00117 	ldw	ra,4(sp)
8001fc84:	df000017 	ldw	fp,0(sp)
8001fc88:	dec00204 	addi	sp,sp,8
8001fc8c:	f800283a 	ret

8001fc90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
8001fc90:	defffe04 	addi	sp,sp,-8
8001fc94:	dfc00115 	stw	ra,4(sp)
8001fc98:	df000015 	stw	fp,0(sp)
8001fc9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
8001fca0:	01420004 	movi	r5,2048
8001fca4:	0009883a 	mov	r4,zero
8001fca8:	0023fa40 	call	80023fa4 <alt_icache_flush>
#endif
}
8001fcac:	0001883a 	nop
8001fcb0:	e037883a 	mov	sp,fp
8001fcb4:	dfc00117 	ldw	ra,4(sp)
8001fcb8:	df000017 	ldw	fp,0(sp)
8001fcbc:	dec00204 	addi	sp,sp,8
8001fcc0:	f800283a 	ret

8001fcc4 <alt_get_errno>:
{
8001fcc4:	defffe04 	addi	sp,sp,-8
8001fcc8:	dfc00115 	stw	ra,4(sp)
8001fccc:	df000015 	stw	fp,0(sp)
8001fcd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8001fcd4:	d0a00c17 	ldw	r2,-32720(gp)
8001fcd8:	10000326 	beq	r2,zero,8001fce8 <alt_get_errno+0x24>
8001fcdc:	d0a00c17 	ldw	r2,-32720(gp)
8001fce0:	103ee83a 	callr	r2
8001fce4:	00000106 	br	8001fcec <alt_get_errno+0x28>
8001fce8:	d0a77a04 	addi	r2,gp,-25112
}
8001fcec:	e037883a 	mov	sp,fp
8001fcf0:	dfc00117 	ldw	ra,4(sp)
8001fcf4:	df000017 	ldw	fp,0(sp)
8001fcf8:	dec00204 	addi	sp,sp,8
8001fcfc:	f800283a 	ret

8001fd00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8001fd00:	deffed04 	addi	sp,sp,-76
8001fd04:	dfc01215 	stw	ra,72(sp)
8001fd08:	df001115 	stw	fp,68(sp)
8001fd0c:	df001104 	addi	fp,sp,68
8001fd10:	e13fef15 	stw	r4,-68(fp)
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
8001fd14:	e03ff115 	stw	zero,-60(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8001fd18:	e0bfef17 	ldw	r2,-68(fp)
8001fd1c:	10000616 	blt	r2,zero,8001fd38 <isatty+0x38>
8001fd20:	e0bfef17 	ldw	r2,-68(fp)
8001fd24:	10c00324 	muli	r3,r2,12
8001fd28:	00a000b4 	movhi	r2,32770
8001fd2c:	109ea004 	addi	r2,r2,31360
8001fd30:	1885883a 	add	r2,r3,r2
8001fd34:	00000106 	br	8001fd3c <isatty+0x3c>
8001fd38:	0005883a 	mov	r2,zero
8001fd3c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
8001fd40:	e0bfff17 	ldw	r2,-4(fp)
8001fd44:	10000e26 	beq	r2,zero,8001fd80 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8001fd48:	e0bfff17 	ldw	r2,-4(fp)
8001fd4c:	10800017 	ldw	r2,0(r2)
8001fd50:	10800817 	ldw	r2,32(r2)
8001fd54:	1000021e 	bne	r2,zero,8001fd60 <isatty+0x60>
    {
      return 1;
8001fd58:	00800044 	movi	r2,1
8001fd5c:	00000d06 	br	8001fd94 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8001fd60:	e0bff004 	addi	r2,fp,-64
8001fd64:	100b883a 	mov	r5,r2
8001fd68:	e13fef17 	ldw	r4,-68(fp)
8001fd6c:	001fbe00 	call	8001fbe0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8001fd70:	e0bff117 	ldw	r2,-60(fp)
8001fd74:	10880020 	cmpeqi	r2,r2,8192
8001fd78:	10803fcc 	andi	r2,r2,255
8001fd7c:	00000506 	br	8001fd94 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8001fd80:	001fcc40 	call	8001fcc4 <alt_get_errno>
8001fd84:	1007883a 	mov	r3,r2
8001fd88:	00801444 	movi	r2,81
8001fd8c:	18800015 	stw	r2,0(r3)
    return 0;
8001fd90:	0005883a 	mov	r2,zero
  }
}
8001fd94:	e037883a 	mov	sp,fp
8001fd98:	dfc00117 	ldw	ra,4(sp)
8001fd9c:	df000017 	ldw	fp,0(sp)
8001fda0:	dec00204 	addi	sp,sp,8
8001fda4:	f800283a 	ret

8001fda8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
8001fda8:	defffc04 	addi	sp,sp,-16
8001fdac:	df000315 	stw	fp,12(sp)
8001fdb0:	df000304 	addi	fp,sp,12
8001fdb4:	e13fff15 	stw	r4,-4(fp)
8001fdb8:	e17ffe15 	stw	r5,-8(fp)
8001fdbc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
8001fdc0:	e0fffe17 	ldw	r3,-8(fp)
8001fdc4:	e0bfff17 	ldw	r2,-4(fp)
8001fdc8:	18800c26 	beq	r3,r2,8001fdfc <alt_load_section+0x54>
  {
    while( to != end )
8001fdcc:	00000806 	br	8001fdf0 <alt_load_section+0x48>
    {
      *to++ = *from++;
8001fdd0:	e0ffff17 	ldw	r3,-4(fp)
8001fdd4:	18800104 	addi	r2,r3,4
8001fdd8:	e0bfff15 	stw	r2,-4(fp)
8001fddc:	e0bffe17 	ldw	r2,-8(fp)
8001fde0:	11000104 	addi	r4,r2,4
8001fde4:	e13ffe15 	stw	r4,-8(fp)
8001fde8:	18c00017 	ldw	r3,0(r3)
8001fdec:	10c00015 	stw	r3,0(r2)
    while( to != end )
8001fdf0:	e0fffe17 	ldw	r3,-8(fp)
8001fdf4:	e0bffd17 	ldw	r2,-12(fp)
8001fdf8:	18bff51e 	bne	r3,r2,8001fdd0 <_gp+0xfffef05c>
    }
  }
}
8001fdfc:	0001883a 	nop
8001fe00:	e037883a 	mov	sp,fp
8001fe04:	df000017 	ldw	fp,0(sp)
8001fe08:	dec00104 	addi	sp,sp,4
8001fe0c:	f800283a 	ret

8001fe10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
8001fe10:	defffe04 	addi	sp,sp,-8
8001fe14:	dfc00115 	stw	ra,4(sp)
8001fe18:	df000015 	stw	fp,0(sp)
8001fe1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
8001fe20:	01a000f4 	movhi	r6,32771
8001fe24:	31a37204 	addi	r6,r6,-29240
8001fe28:	016000b4 	movhi	r5,32770
8001fe2c:	295c1404 	addi	r5,r5,28752
8001fe30:	012000f4 	movhi	r4,32771
8001fe34:	21237204 	addi	r4,r4,-29240
8001fe38:	001fda80 	call	8001fda8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
8001fe3c:	01a00034 	movhi	r6,32768
8001fe40:	31808e04 	addi	r6,r6,568
8001fe44:	01600034 	movhi	r5,32768
8001fe48:	29400804 	addi	r5,r5,32
8001fe4c:	01200034 	movhi	r4,32768
8001fe50:	21000804 	addi	r4,r4,32
8001fe54:	001fda80 	call	8001fda8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
8001fe58:	01a000b4 	movhi	r6,32770
8001fe5c:	319c1404 	addi	r6,r6,28752
8001fe60:	016000b4 	movhi	r5,32770
8001fe64:	29537604 	addi	r5,r5,19928
8001fe68:	012000b4 	movhi	r4,32770
8001fe6c:	21137604 	addi	r4,r4,19928
8001fe70:	001fda80 	call	8001fda8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
8001fe74:	0023c4c0 	call	80023c4c <alt_dcache_flush_all>
  alt_icache_flush_all();
8001fe78:	001fc900 	call	8001fc90 <alt_icache_flush_all>
}
8001fe7c:	0001883a 	nop
8001fe80:	e037883a 	mov	sp,fp
8001fe84:	dfc00117 	ldw	ra,4(sp)
8001fe88:	df000017 	ldw	fp,0(sp)
8001fe8c:	dec00204 	addi	sp,sp,8
8001fe90:	f800283a 	ret

8001fe94 <alt_get_errno>:
{
8001fe94:	defffe04 	addi	sp,sp,-8
8001fe98:	dfc00115 	stw	ra,4(sp)
8001fe9c:	df000015 	stw	fp,0(sp)
8001fea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8001fea4:	d0a00c17 	ldw	r2,-32720(gp)
8001fea8:	10000326 	beq	r2,zero,8001feb8 <alt_get_errno+0x24>
8001feac:	d0a00c17 	ldw	r2,-32720(gp)
8001feb0:	103ee83a 	callr	r2
8001feb4:	00000106 	br	8001febc <alt_get_errno+0x28>
8001feb8:	d0a77a04 	addi	r2,gp,-25112
}
8001febc:	e037883a 	mov	sp,fp
8001fec0:	dfc00117 	ldw	ra,4(sp)
8001fec4:	df000017 	ldw	fp,0(sp)
8001fec8:	dec00204 	addi	sp,sp,8
8001fecc:	f800283a 	ret

8001fed0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8001fed0:	defff904 	addi	sp,sp,-28
8001fed4:	dfc00615 	stw	ra,24(sp)
8001fed8:	df000515 	stw	fp,20(sp)
8001fedc:	df000504 	addi	fp,sp,20
8001fee0:	e13ffd15 	stw	r4,-12(fp)
8001fee4:	e17ffc15 	stw	r5,-16(fp)
8001fee8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8001feec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8001fef0:	e0bffd17 	ldw	r2,-12(fp)
8001fef4:	10000616 	blt	r2,zero,8001ff10 <lseek+0x40>
8001fef8:	e0bffd17 	ldw	r2,-12(fp)
8001fefc:	10c00324 	muli	r3,r2,12
8001ff00:	00a000b4 	movhi	r2,32770
8001ff04:	109ea004 	addi	r2,r2,31360
8001ff08:	1885883a 	add	r2,r3,r2
8001ff0c:	00000106 	br	8001ff14 <lseek+0x44>
8001ff10:	0005883a 	mov	r2,zero
8001ff14:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
8001ff18:	e0bffe17 	ldw	r2,-8(fp)
8001ff1c:	10001026 	beq	r2,zero,8001ff60 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8001ff20:	e0bffe17 	ldw	r2,-8(fp)
8001ff24:	10800017 	ldw	r2,0(r2)
8001ff28:	10800717 	ldw	r2,28(r2)
8001ff2c:	10000926 	beq	r2,zero,8001ff54 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8001ff30:	e0bffe17 	ldw	r2,-8(fp)
8001ff34:	10800017 	ldw	r2,0(r2)
8001ff38:	10800717 	ldw	r2,28(r2)
8001ff3c:	e1bffb17 	ldw	r6,-20(fp)
8001ff40:	e17ffc17 	ldw	r5,-16(fp)
8001ff44:	e13ffe17 	ldw	r4,-8(fp)
8001ff48:	103ee83a 	callr	r2
8001ff4c:	e0bfff15 	stw	r2,-4(fp)
8001ff50:	00000506 	br	8001ff68 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8001ff54:	00bfde84 	movi	r2,-134
8001ff58:	e0bfff15 	stw	r2,-4(fp)
8001ff5c:	00000206 	br	8001ff68 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8001ff60:	00bfebc4 	movi	r2,-81
8001ff64:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
8001ff68:	e0bfff17 	ldw	r2,-4(fp)
8001ff6c:	1000070e 	bge	r2,zero,8001ff8c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8001ff70:	001fe940 	call	8001fe94 <alt_get_errno>
8001ff74:	1007883a 	mov	r3,r2
8001ff78:	e0bfff17 	ldw	r2,-4(fp)
8001ff7c:	0085c83a 	sub	r2,zero,r2
8001ff80:	18800015 	stw	r2,0(r3)
    rc = -1;
8001ff84:	00bfffc4 	movi	r2,-1
8001ff88:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
8001ff8c:	e0bfff17 	ldw	r2,-4(fp)
}
8001ff90:	e037883a 	mov	sp,fp
8001ff94:	dfc00117 	ldw	ra,4(sp)
8001ff98:	df000017 	ldw	fp,0(sp)
8001ff9c:	dec00204 	addi	sp,sp,8
8001ffa0:	f800283a 	ret

8001ffa4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8001ffa4:	defffd04 	addi	sp,sp,-12
8001ffa8:	dfc00215 	stw	ra,8(sp)
8001ffac:	df000115 	stw	fp,4(sp)
8001ffb0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8001ffb4:	0009883a 	mov	r4,zero
8001ffb8:	00206680 	call	80020668 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8001ffbc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8001ffc0:	00206a00 	call	800206a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8001ffc4:	01a000b4 	movhi	r6,32770
8001ffc8:	319bf604 	addi	r6,r6,28632
8001ffcc:	016000b4 	movhi	r5,32770
8001ffd0:	295bf604 	addi	r5,r5,28632
8001ffd4:	012000b4 	movhi	r4,32770
8001ffd8:	211bf604 	addi	r4,r4,28632
8001ffdc:	00243780 	call	80024378 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8001ffe0:	0023c940 	call	80023c94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8001ffe4:	012000b4 	movhi	r4,32770
8001ffe8:	210f3d04 	addi	r4,r4,15604
8001ffec:	0024ae40 	call	80024ae4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8001fff0:	d0a77c17 	ldw	r2,-25104(gp)
8001fff4:	d0e77d17 	ldw	r3,-25100(gp)
8001fff8:	d1277e17 	ldw	r4,-25096(gp)
8001fffc:	200d883a 	mov	r6,r4
80020000:	180b883a 	mov	r5,r3
80020004:	1009883a 	mov	r4,r2
80020008:	000c7a00 	call	8000c7a0 <main>
8002000c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80020010:	01000044 	movi	r4,1
80020014:	001f94c0 	call	8001f94c <close>
  exit (result);
80020018:	e13fff17 	ldw	r4,-4(fp)
8002001c:	0024af80 	call	80024af8 <exit>

80020020 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
80020020:	defffe04 	addi	sp,sp,-8
80020024:	df000115 	stw	fp,4(sp)
80020028:	df000104 	addi	fp,sp,4
8002002c:	e13fff15 	stw	r4,-4(fp)
}
80020030:	0001883a 	nop
80020034:	e037883a 	mov	sp,fp
80020038:	df000017 	ldw	fp,0(sp)
8002003c:	dec00104 	addi	sp,sp,4
80020040:	f800283a 	ret

80020044 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80020044:	defffe04 	addi	sp,sp,-8
80020048:	df000115 	stw	fp,4(sp)
8002004c:	df000104 	addi	fp,sp,4
80020050:	e13fff15 	stw	r4,-4(fp)
}
80020054:	0001883a 	nop
80020058:	e037883a 	mov	sp,fp
8002005c:	df000017 	ldw	fp,0(sp)
80020060:	dec00104 	addi	sp,sp,4
80020064:	f800283a 	ret

80020068 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80020068:	defff204 	addi	sp,sp,-56
8002006c:	dfc00a15 	stw	ra,40(sp)
80020070:	df000915 	stw	fp,36(sp)
80020074:	df000904 	addi	fp,sp,36
80020078:	e13ff715 	stw	r4,-36(fp)
8002007c:	e1400215 	stw	r5,8(fp)
80020080:	e1800315 	stw	r6,12(fp)
80020084:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80020088:	e0800204 	addi	r2,fp,8
8002008c:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80020090:	e0bff717 	ldw	r2,-36(fp)
80020094:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
80020098:	00006f06 	br	80020258 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8002009c:	e0bffec7 	ldb	r2,-5(fp)
800200a0:	10800960 	cmpeqi	r2,r2,37
800200a4:	1000041e 	bne	r2,zero,800200b8 <alt_printf+0x50>
        {
            alt_putchar(c);
800200a8:	e0bffec7 	ldb	r2,-5(fp)
800200ac:	1009883a 	mov	r4,r2
800200b0:	00202940 	call	80020294 <alt_putchar>
800200b4:	00006806 	br	80020258 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
800200b8:	e0bfff17 	ldw	r2,-4(fp)
800200bc:	10c00044 	addi	r3,r2,1
800200c0:	e0ffff15 	stw	r3,-4(fp)
800200c4:	10800003 	ldbu	r2,0(r2)
800200c8:	e0bffec5 	stb	r2,-5(fp)
800200cc:	e0bffec7 	ldb	r2,-5(fp)
800200d0:	10006926 	beq	r2,zero,80020278 <alt_printf+0x210>
            {
                if (c == '%')
800200d4:	e0bffec7 	ldb	r2,-5(fp)
800200d8:	10800958 	cmpnei	r2,r2,37
800200dc:	1000041e 	bne	r2,zero,800200f0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
800200e0:	e0bffec7 	ldb	r2,-5(fp)
800200e4:	1009883a 	mov	r4,r2
800200e8:	00202940 	call	80020294 <alt_putchar>
800200ec:	00005a06 	br	80020258 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
800200f0:	e0bffec7 	ldb	r2,-5(fp)
800200f4:	108018d8 	cmpnei	r2,r2,99
800200f8:	1000081e 	bne	r2,zero,8002011c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
800200fc:	e0bff817 	ldw	r2,-32(fp)
80020100:	10c00104 	addi	r3,r2,4
80020104:	e0fff815 	stw	r3,-32(fp)
80020108:	10800017 	ldw	r2,0(r2)
8002010c:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
80020110:	e13ff917 	ldw	r4,-28(fp)
80020114:	00202940 	call	80020294 <alt_putchar>
80020118:	00004f06 	br	80020258 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8002011c:	e0bffec7 	ldb	r2,-5(fp)
80020120:	10801e18 	cmpnei	r2,r2,120
80020124:	1000341e 	bne	r2,zero,800201f8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80020128:	e0bff817 	ldw	r2,-32(fp)
8002012c:	10c00104 	addi	r3,r2,4
80020130:	e0fff815 	stw	r3,-32(fp)
80020134:	10800017 	ldw	r2,0(r2)
80020138:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8002013c:	e0bffb17 	ldw	r2,-20(fp)
80020140:	1000031e 	bne	r2,zero,80020150 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80020144:	01000c04 	movi	r4,48
80020148:	00202940 	call	80020294 <alt_putchar>
                        continue;
8002014c:	00004206 	br	80020258 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80020150:	00800704 	movi	r2,28
80020154:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
80020158:	00000306 	br	80020168 <alt_printf+0x100>
                        digit_shift -= 4;
8002015c:	e0bffd17 	ldw	r2,-12(fp)
80020160:	10bfff04 	addi	r2,r2,-4
80020164:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
80020168:	00c003c4 	movi	r3,15
8002016c:	e0bffd17 	ldw	r2,-12(fp)
80020170:	1884983a 	sll	r2,r3,r2
80020174:	1007883a 	mov	r3,r2
80020178:	e0bffb17 	ldw	r2,-20(fp)
8002017c:	1884703a 	and	r2,r3,r2
80020180:	103ff626 	beq	r2,zero,8002015c <_gp+0xfffef3e8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80020184:	00001906 	br	800201ec <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80020188:	00c003c4 	movi	r3,15
8002018c:	e0bffd17 	ldw	r2,-12(fp)
80020190:	1884983a 	sll	r2,r3,r2
80020194:	1007883a 	mov	r3,r2
80020198:	e0bffb17 	ldw	r2,-20(fp)
8002019c:	1886703a 	and	r3,r3,r2
800201a0:	e0bffd17 	ldw	r2,-12(fp)
800201a4:	1884d83a 	srl	r2,r3,r2
800201a8:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
800201ac:	e0bffa17 	ldw	r2,-24(fp)
800201b0:	108002a8 	cmpgeui	r2,r2,10
800201b4:	1000041e 	bne	r2,zero,800201c8 <alt_printf+0x160>
                            c = '0' + digit;
800201b8:	e0bffa17 	ldw	r2,-24(fp)
800201bc:	10800c04 	addi	r2,r2,48
800201c0:	e0bffec5 	stb	r2,-5(fp)
800201c4:	00000306 	br	800201d4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
800201c8:	e0bffa17 	ldw	r2,-24(fp)
800201cc:	108015c4 	addi	r2,r2,87
800201d0:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
800201d4:	e0bffec7 	ldb	r2,-5(fp)
800201d8:	1009883a 	mov	r4,r2
800201dc:	00202940 	call	80020294 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
800201e0:	e0bffd17 	ldw	r2,-12(fp)
800201e4:	10bfff04 	addi	r2,r2,-4
800201e8:	e0bffd15 	stw	r2,-12(fp)
800201ec:	e0bffd17 	ldw	r2,-12(fp)
800201f0:	103fe50e 	bge	r2,zero,80020188 <_gp+0xfffef414>
800201f4:	00001806 	br	80020258 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
800201f8:	e0bffec7 	ldb	r2,-5(fp)
800201fc:	10801cd8 	cmpnei	r2,r2,115
80020200:	1000151e 	bne	r2,zero,80020258 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80020204:	e0bff817 	ldw	r2,-32(fp)
80020208:	10c00104 	addi	r3,r2,4
8002020c:	e0fff815 	stw	r3,-32(fp)
80020210:	10800017 	ldw	r2,0(r2)
80020214:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
80020218:	00000906 	br	80020240 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8002021c:	e0bffc17 	ldw	r2,-16(fp)
80020220:	10c00044 	addi	r3,r2,1
80020224:	e0fffc15 	stw	r3,-16(fp)
80020228:	10800003 	ldbu	r2,0(r2)
8002022c:	10803fcc 	andi	r2,r2,255
80020230:	1080201c 	xori	r2,r2,128
80020234:	10bfe004 	addi	r2,r2,-128
80020238:	1009883a 	mov	r4,r2
8002023c:	00202940 	call	80020294 <alt_putchar>
                    while(*s)
80020240:	e0bffc17 	ldw	r2,-16(fp)
80020244:	10800003 	ldbu	r2,0(r2)
80020248:	10803fcc 	andi	r2,r2,255
8002024c:	1080201c 	xori	r2,r2,128
80020250:	10bfe004 	addi	r2,r2,-128
80020254:	103ff11e 	bne	r2,zero,8002021c <_gp+0xfffef4a8>
    while ((c = *w++) != 0)
80020258:	e0bfff17 	ldw	r2,-4(fp)
8002025c:	10c00044 	addi	r3,r2,1
80020260:	e0ffff15 	stw	r3,-4(fp)
80020264:	10800003 	ldbu	r2,0(r2)
80020268:	e0bffec5 	stb	r2,-5(fp)
8002026c:	e0bffec7 	ldb	r2,-5(fp)
80020270:	103f8a1e 	bne	r2,zero,8002009c <_gp+0xfffef328>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80020274:	00000106 	br	8002027c <alt_printf+0x214>
                break;
80020278:	0001883a 	nop
}
8002027c:	0001883a 	nop
80020280:	e037883a 	mov	sp,fp
80020284:	dfc00117 	ldw	ra,4(sp)
80020288:	df000017 	ldw	fp,0(sp)
8002028c:	dec00504 	addi	sp,sp,20
80020290:	f800283a 	ret

80020294 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80020294:	defffd04 	addi	sp,sp,-12
80020298:	dfc00215 	stw	ra,8(sp)
8002029c:	df000115 	stw	fp,4(sp)
800202a0:	df000104 	addi	fp,sp,4
800202a4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
800202a8:	e13fff17 	ldw	r4,-4(fp)
800202ac:	0010db40 	call	80010db4 <putchar>
#endif
#endif
}
800202b0:	e037883a 	mov	sp,fp
800202b4:	dfc00117 	ldw	ra,4(sp)
800202b8:	df000017 	ldw	fp,0(sp)
800202bc:	dec00204 	addi	sp,sp,8
800202c0:	f800283a 	ret

800202c4 <alt_get_errno>:
{
800202c4:	defffe04 	addi	sp,sp,-8
800202c8:	dfc00115 	stw	ra,4(sp)
800202cc:	df000015 	stw	fp,0(sp)
800202d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
800202d4:	d0a00c17 	ldw	r2,-32720(gp)
800202d8:	10000326 	beq	r2,zero,800202e8 <alt_get_errno+0x24>
800202dc:	d0a00c17 	ldw	r2,-32720(gp)
800202e0:	103ee83a 	callr	r2
800202e4:	00000106 	br	800202ec <alt_get_errno+0x28>
800202e8:	d0a77a04 	addi	r2,gp,-25112
}
800202ec:	e037883a 	mov	sp,fp
800202f0:	dfc00117 	ldw	ra,4(sp)
800202f4:	df000017 	ldw	fp,0(sp)
800202f8:	dec00204 	addi	sp,sp,8
800202fc:	f800283a 	ret

80020300 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80020300:	defff904 	addi	sp,sp,-28
80020304:	dfc00615 	stw	ra,24(sp)
80020308:	df000515 	stw	fp,20(sp)
8002030c:	df000504 	addi	fp,sp,20
80020310:	e13ffd15 	stw	r4,-12(fp)
80020314:	e17ffc15 	stw	r5,-16(fp)
80020318:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8002031c:	e0bffd17 	ldw	r2,-12(fp)
80020320:	10000616 	blt	r2,zero,8002033c <read+0x3c>
80020324:	e0bffd17 	ldw	r2,-12(fp)
80020328:	10c00324 	muli	r3,r2,12
8002032c:	00a000b4 	movhi	r2,32770
80020330:	109ea004 	addi	r2,r2,31360
80020334:	1885883a 	add	r2,r3,r2
80020338:	00000106 	br	80020340 <read+0x40>
8002033c:	0005883a 	mov	r2,zero
80020340:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
80020344:	e0bfff17 	ldw	r2,-4(fp)
80020348:	10002226 	beq	r2,zero,800203d4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8002034c:	e0bfff17 	ldw	r2,-4(fp)
80020350:	10800217 	ldw	r2,8(r2)
80020354:	108000cc 	andi	r2,r2,3
80020358:	10800060 	cmpeqi	r2,r2,1
8002035c:	1000181e 	bne	r2,zero,800203c0 <read+0xc0>
        (fd->dev->read))
80020360:	e0bfff17 	ldw	r2,-4(fp)
80020364:	10800017 	ldw	r2,0(r2)
80020368:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8002036c:	10001426 	beq	r2,zero,800203c0 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
80020370:	e0bfff17 	ldw	r2,-4(fp)
80020374:	10800017 	ldw	r2,0(r2)
80020378:	10800517 	ldw	r2,20(r2)
8002037c:	e0fffb17 	ldw	r3,-20(fp)
80020380:	180d883a 	mov	r6,r3
80020384:	e17ffc17 	ldw	r5,-16(fp)
80020388:	e13fff17 	ldw	r4,-4(fp)
8002038c:	103ee83a 	callr	r2
80020390:	e0bffe15 	stw	r2,-8(fp)
80020394:	e0bffe17 	ldw	r2,-8(fp)
80020398:	1000070e 	bge	r2,zero,800203b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8002039c:	00202c40 	call	800202c4 <alt_get_errno>
800203a0:	1007883a 	mov	r3,r2
800203a4:	e0bffe17 	ldw	r2,-8(fp)
800203a8:	0085c83a 	sub	r2,zero,r2
800203ac:	18800015 	stw	r2,0(r3)
          return -1;
800203b0:	00bfffc4 	movi	r2,-1
800203b4:	00000c06 	br	800203e8 <read+0xe8>
        }
        return rval;
800203b8:	e0bffe17 	ldw	r2,-8(fp)
800203bc:	00000a06 	br	800203e8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
800203c0:	00202c40 	call	800202c4 <alt_get_errno>
800203c4:	1007883a 	mov	r3,r2
800203c8:	00800344 	movi	r2,13
800203cc:	18800015 	stw	r2,0(r3)
800203d0:	00000406 	br	800203e4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
800203d4:	00202c40 	call	800202c4 <alt_get_errno>
800203d8:	1007883a 	mov	r3,r2
800203dc:	00801444 	movi	r2,81
800203e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
800203e4:	00bfffc4 	movi	r2,-1
}
800203e8:	e037883a 	mov	sp,fp
800203ec:	dfc00117 	ldw	ra,4(sp)
800203f0:	df000017 	ldw	fp,0(sp)
800203f4:	dec00204 	addi	sp,sp,8
800203f8:	f800283a 	ret

800203fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
800203fc:	defffe04 	addi	sp,sp,-8
80020400:	df000115 	stw	fp,4(sp)
80020404:	df000104 	addi	fp,sp,4
80020408:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8002040c:	e0bfff17 	ldw	r2,-4(fp)
80020410:	108000d0 	cmplti	r2,r2,3
80020414:	10000a1e 	bne	r2,zero,80020440 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
80020418:	e0bfff17 	ldw	r2,-4(fp)
8002041c:	10c00324 	muli	r3,r2,12
80020420:	00a000b4 	movhi	r2,32770
80020424:	1885883a 	add	r2,r3,r2
80020428:	101ea215 	stw	zero,31368(r2)
    alt_fd_list[fd].dev      = 0;
8002042c:	e0bfff17 	ldw	r2,-4(fp)
80020430:	10c00324 	muli	r3,r2,12
80020434:	00a000b4 	movhi	r2,32770
80020438:	1885883a 	add	r2,r3,r2
8002043c:	101ea015 	stw	zero,31360(r2)
  }
}
80020440:	0001883a 	nop
80020444:	e037883a 	mov	sp,fp
80020448:	df000017 	ldw	fp,0(sp)
8002044c:	dec00104 	addi	sp,sp,4
80020450:	f800283a 	ret

80020454 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
80020454:	defff904 	addi	sp,sp,-28
80020458:	df000615 	stw	fp,24(sp)
8002045c:	df000604 	addi	fp,sp,24
80020460:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
80020464:	0005303a 	rdctl	r2,status
80020468:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8002046c:	e0fffd17 	ldw	r3,-12(fp)
80020470:	00bfff84 	movi	r2,-2
80020474:	1884703a 	and	r2,r3,r2
80020478:	1001703a 	wrctl	status,r2
  return context;
8002047c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80020480:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80020484:	d0a00d17 	ldw	r2,-32716(gp)
80020488:	10c000c4 	addi	r3,r2,3
8002048c:	00bfff04 	movi	r2,-4
80020490:	1884703a 	and	r2,r3,r2
80020494:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80020498:	d0e00d17 	ldw	r3,-32716(gp)
8002049c:	e0bffa17 	ldw	r2,-24(fp)
800204a0:	1887883a 	add	r3,r3,r2
800204a4:	00800034 	movhi	r2,0
800204a8:	10800004 	addi	r2,r2,0
800204ac:	10c0062e 	bgeu	r2,r3,800204c8 <sbrk+0x74>
800204b0:	e0bfff17 	ldw	r2,-4(fp)
800204b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
800204b8:	e0bffc17 	ldw	r2,-16(fp)
800204bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
800204c0:	00bfffc4 	movi	r2,-1
800204c4:	00000b06 	br	800204f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
800204c8:	d0a00d17 	ldw	r2,-32716(gp)
800204cc:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
800204d0:	d0e00d17 	ldw	r3,-32716(gp)
800204d4:	e0bffa17 	ldw	r2,-24(fp)
800204d8:	1885883a 	add	r2,r3,r2
800204dc:	d0a00d15 	stw	r2,-32716(gp)
800204e0:	e0bfff17 	ldw	r2,-4(fp)
800204e4:	e0bffb15 	stw	r2,-20(fp)
800204e8:	e0bffb17 	ldw	r2,-20(fp)
800204ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
800204f0:	e0bffe17 	ldw	r2,-8(fp)
} 
800204f4:	e037883a 	mov	sp,fp
800204f8:	df000017 	ldw	fp,0(sp)
800204fc:	dec00104 	addi	sp,sp,4
80020500:	f800283a 	ret

80020504 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80020504:	defffd04 	addi	sp,sp,-12
80020508:	dfc00215 	stw	ra,8(sp)
8002050c:	df000115 	stw	fp,4(sp)
80020510:	df000104 	addi	fp,sp,4
80020514:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80020518:	e13fff17 	ldw	r4,-4(fp)
8002051c:	0023b240 	call	80023b24 <alt_busy_sleep>
}
80020520:	e037883a 	mov	sp,fp
80020524:	dfc00117 	ldw	ra,4(sp)
80020528:	df000017 	ldw	fp,0(sp)
8002052c:	dec00204 	addi	sp,sp,8
80020530:	f800283a 	ret

80020534 <alt_get_errno>:
{
80020534:	defffe04 	addi	sp,sp,-8
80020538:	dfc00115 	stw	ra,4(sp)
8002053c:	df000015 	stw	fp,0(sp)
80020540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80020544:	d0a00c17 	ldw	r2,-32720(gp)
80020548:	10000326 	beq	r2,zero,80020558 <alt_get_errno+0x24>
8002054c:	d0a00c17 	ldw	r2,-32720(gp)
80020550:	103ee83a 	callr	r2
80020554:	00000106 	br	8002055c <alt_get_errno+0x28>
80020558:	d0a77a04 	addi	r2,gp,-25112
}
8002055c:	e037883a 	mov	sp,fp
80020560:	dfc00117 	ldw	ra,4(sp)
80020564:	df000017 	ldw	fp,0(sp)
80020568:	dec00204 	addi	sp,sp,8
8002056c:	f800283a 	ret

80020570 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80020570:	defff904 	addi	sp,sp,-28
80020574:	dfc00615 	stw	ra,24(sp)
80020578:	df000515 	stw	fp,20(sp)
8002057c:	df000504 	addi	fp,sp,20
80020580:	e13ffd15 	stw	r4,-12(fp)
80020584:	e17ffc15 	stw	r5,-16(fp)
80020588:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8002058c:	e0bffd17 	ldw	r2,-12(fp)
80020590:	10000616 	blt	r2,zero,800205ac <write+0x3c>
80020594:	e0bffd17 	ldw	r2,-12(fp)
80020598:	10c00324 	muli	r3,r2,12
8002059c:	00a000b4 	movhi	r2,32770
800205a0:	109ea004 	addi	r2,r2,31360
800205a4:	1885883a 	add	r2,r3,r2
800205a8:	00000106 	br	800205b0 <write+0x40>
800205ac:	0005883a 	mov	r2,zero
800205b0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
800205b4:	e0bfff17 	ldw	r2,-4(fp)
800205b8:	10002126 	beq	r2,zero,80020640 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
800205bc:	e0bfff17 	ldw	r2,-4(fp)
800205c0:	10800217 	ldw	r2,8(r2)
800205c4:	108000cc 	andi	r2,r2,3
800205c8:	10001826 	beq	r2,zero,8002062c <write+0xbc>
800205cc:	e0bfff17 	ldw	r2,-4(fp)
800205d0:	10800017 	ldw	r2,0(r2)
800205d4:	10800617 	ldw	r2,24(r2)
800205d8:	10001426 	beq	r2,zero,8002062c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
800205dc:	e0bfff17 	ldw	r2,-4(fp)
800205e0:	10800017 	ldw	r2,0(r2)
800205e4:	10800617 	ldw	r2,24(r2)
800205e8:	e0fffb17 	ldw	r3,-20(fp)
800205ec:	180d883a 	mov	r6,r3
800205f0:	e17ffc17 	ldw	r5,-16(fp)
800205f4:	e13fff17 	ldw	r4,-4(fp)
800205f8:	103ee83a 	callr	r2
800205fc:	e0bffe15 	stw	r2,-8(fp)
80020600:	e0bffe17 	ldw	r2,-8(fp)
80020604:	1000070e 	bge	r2,zero,80020624 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80020608:	00205340 	call	80020534 <alt_get_errno>
8002060c:	1007883a 	mov	r3,r2
80020610:	e0bffe17 	ldw	r2,-8(fp)
80020614:	0085c83a 	sub	r2,zero,r2
80020618:	18800015 	stw	r2,0(r3)
        return -1;
8002061c:	00bfffc4 	movi	r2,-1
80020620:	00000c06 	br	80020654 <write+0xe4>
      }
      return rval;
80020624:	e0bffe17 	ldw	r2,-8(fp)
80020628:	00000a06 	br	80020654 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8002062c:	00205340 	call	80020534 <alt_get_errno>
80020630:	1007883a 	mov	r3,r2
80020634:	00800344 	movi	r2,13
80020638:	18800015 	stw	r2,0(r3)
8002063c:	00000406 	br	80020650 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80020640:	00205340 	call	80020534 <alt_get_errno>
80020644:	1007883a 	mov	r3,r2
80020648:	00801444 	movi	r2,81
8002064c:	18800015 	stw	r2,0(r3)
  }
  return -1;
80020650:	00bfffc4 	movi	r2,-1
}
80020654:	e037883a 	mov	sp,fp
80020658:	dfc00117 	ldw	ra,4(sp)
8002065c:	df000017 	ldw	fp,0(sp)
80020660:	dec00204 	addi	sp,sp,8
80020664:	f800283a 	ret

80020668 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80020668:	defffd04 	addi	sp,sp,-12
8002066c:	dfc00215 	stw	ra,8(sp)
80020670:	df000115 	stw	fp,4(sp)
80020674:	df000104 	addi	fp,sp,4
80020678:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MCU_SUBSYSTEM_CPU_0, mcu_subsystem_cpu_0);
8002067c:	00248040 	call	80024804 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80020680:	00800044 	movi	r2,1
80020684:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80020688:	0001883a 	nop
8002068c:	e037883a 	mov	sp,fp
80020690:	dfc00117 	ldw	ra,4(sp)
80020694:	df000017 	ldw	fp,0(sp)
80020698:	dec00204 	addi	sp,sp,8
8002069c:	f800283a 	ret

800206a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
800206a0:	defffe04 	addi	sp,sp,-8
800206a4:	dfc00115 	stw	ra,4(sp)
800206a8:	df000015 	stw	fp,0(sp)
800206ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
800206b0:	01c0fa04 	movi	r7,1000
800206b4:	018000c4 	movi	r6,3
800206b8:	000b883a 	mov	r5,zero
800206bc:	010000b4 	movhi	r4,2
800206c0:	21043804 	addi	r4,r4,4320
800206c4:	0022df80 	call	80022df8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_I2C_INIT ( FMC_I2C, fmc_i2c);
800206c8:	012000b4 	movhi	r4,32770
800206cc:	211f0004 	addi	r4,r4,31744
800206d0:	002096c0 	call	8002096c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
800206d4:	01800044 	movi	r6,1
800206d8:	000b883a 	mov	r5,zero
800206dc:	012000b4 	movhi	r4,32770
800206e0:	211f1804 	addi	r4,r4,31840
800206e4:	00224700 	call	80022470 <altera_avalon_jtag_uart_init>
800206e8:	012000b4 	movhi	r4,32770
800206ec:	211f0e04 	addi	r4,r4,31800
800206f0:	001fa480 	call	8001fa48 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( FMC_SPI, fmc_spi);
800206f4:	0001883a 	nop
    ALTERA_GENERIC_QUAD_SPI_CONTROLLER2_INIT ( QSPI_CONTROLLER2_0, qspi_controller2_0);
800206f8:	012000f4 	movhi	r4,32771
800206fc:	21232604 	addi	r4,r4,-29544
80020700:	002365c0 	call	8002365c <altera_qspi_controller2_init>
}
80020704:	0001883a 	nop
80020708:	e037883a 	mov	sp,fp
8002070c:	dfc00117 	ldw	ra,4(sp)
80020710:	df000017 	ldw	fp,0(sp)
80020714:	dec00204 	addi	sp,sp,8
80020718:	f800283a 	ret

8002071c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
8002071c:	defff904 	addi	sp,sp,-28
80020720:	dfc00615 	stw	ra,24(sp)
80020724:	df000515 	stw	fp,20(sp)
80020728:	df000504 	addi	fp,sp,20
8002072c:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
80020730:	008000b4 	movhi	r2,2
80020734:	10a1a804 	addi	r2,r2,-31072
80020738:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
8002073c:	e0bffb17 	ldw	r2,-20(fp)
80020740:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
80020744:	e0bffe17 	ldw	r2,-8(fp)
80020748:	10800717 	ldw	r2,28(r2)
8002074c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
80020750:	e0bffd17 	ldw	r2,-12(fp)
80020754:	10800217 	ldw	r2,8(r2)
80020758:	10800098 	cmpnei	r2,r2,2
8002075c:	1000251e 	bne	r2,zero,800207f4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
80020760:	e0bffd17 	ldw	r2,-12(fp)
80020764:	10c00017 	ldw	r3,0(r2)
80020768:	e0bffd17 	ldw	r2,-12(fp)
8002076c:	10800117 	ldw	r2,4(r2)
80020770:	e13ffc04 	addi	r4,fp,-16
80020774:	200f883a 	mov	r7,r4
80020778:	100d883a 	mov	r6,r2
8002077c:	180b883a 	mov	r5,r3
80020780:	e13ffe17 	ldw	r4,-8(fp)
80020784:	0020eac0 	call	80020eac <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
80020788:	e0bffd17 	ldw	r2,-12(fp)
8002078c:	10c00117 	ldw	r3,4(r2)
80020790:	e0bffc17 	ldw	r2,-16(fp)
80020794:	1887c83a 	sub	r3,r3,r2
80020798:	e0bffd17 	ldw	r2,-12(fp)
8002079c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
800207a0:	e0bffd17 	ldw	r2,-12(fp)
800207a4:	10c00017 	ldw	r3,0(r2)
800207a8:	e0bffc17 	ldw	r2,-16(fp)
800207ac:	1887883a 	add	r3,r3,r2
800207b0:	e0bffd17 	ldw	r2,-12(fp)
800207b4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
800207b8:	e0bffd17 	ldw	r2,-12(fp)
800207bc:	10800117 	ldw	r2,4(r2)
800207c0:	10000c26 	beq	r2,zero,800207f4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
800207c4:	01400704 	movi	r5,28
800207c8:	e13ffe17 	ldw	r4,-8(fp)
800207cc:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
800207d0:	01400084 	movi	r5,2
800207d4:	e13ffe17 	ldw	r4,-8(fp)
800207d8:	00221000 	call	80022100 <alt_avalon_i2c_int_enable>
800207dc:	00000e06 	br	80020818 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
800207e0:	e0bfff17 	ldw	r2,-4(fp)
800207e4:	10bfffc4 	addi	r2,r2,-1
800207e8:	e0bfff15 	stw	r2,-4(fp)
800207ec:	e0bfff17 	ldw	r2,-4(fp)
800207f0:	10000426 	beq	r2,zero,80020804 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
800207f4:	e13ffe17 	ldw	r4,-8(fp)
800207f8:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
800207fc:	103ff81e 	bne	r2,zero,800207e0 <_gp+0xfffefa6c>
80020800:	00000106 	br	80020808 <optional_irq_callback+0xec>
      {
         break;
80020804:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
80020808:	e13ffe17 	ldw	r4,-8(fp)
8002080c:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
80020810:	e0bffd17 	ldw	r2,-12(fp)
80020814:	10000215 	stw	zero,8(r2)
}
80020818:	e037883a 	mov	sp,fp
8002081c:	dfc00117 	ldw	ra,4(sp)
80020820:	df000017 	ldw	fp,0(sp)
80020824:	dec00204 	addi	sp,sp,8
80020828:	f800283a 	ret

8002082c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
8002082c:	defffc04 	addi	sp,sp,-16
80020830:	dfc00315 	stw	ra,12(sp)
80020834:	df000215 	stw	fp,8(sp)
80020838:	df000204 	addi	fp,sp,8
8002083c:	e13fff15 	stw	r4,-4(fp)
80020840:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
80020844:	e0bffe17 	ldw	r2,-8(fp)
80020848:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
8002084c:	e1fffe17 	ldw	r7,-8(fp)
80020850:	000d883a 	mov	r6,zero
80020854:	016000b4 	movhi	r5,32770
80020858:	2941c704 	addi	r5,r5,1820
8002085c:	e13fff17 	ldw	r4,-4(fp)
80020860:	00209180 	call	80020918 <alt_avalon_i2c_register_callback>
}
80020864:	0001883a 	nop
80020868:	e037883a 	mov	sp,fp
8002086c:	dfc00117 	ldw	ra,4(sp)
80020870:	df000017 	ldw	fp,0(sp)
80020874:	dec00204 	addi	sp,sp,8
80020878:	f800283a 	ret

8002087c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
8002087c:	defff904 	addi	sp,sp,-28
80020880:	dfc00615 	stw	ra,24(sp)
80020884:	df000515 	stw	fp,20(sp)
80020888:	df000504 	addi	fp,sp,20
8002088c:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
80020890:	e0bffb17 	ldw	r2,-20(fp)
80020894:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
80020898:	014007c4 	movi	r5,31
8002089c:	e13fff17 	ldw	r4,-4(fp)
800208a0:	00220940 	call	80022094 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
800208a4:	01400704 	movi	r5,28
800208a8:	e13fff17 	ldw	r4,-4(fp)
800208ac:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
800208b0:	e0bfff17 	ldw	r2,-4(fp)
800208b4:	10800617 	ldw	r2,24(r2)
800208b8:	10001126 	beq	r2,zero,80020900 <alt_avalon_i2c_irq+0x84>
  NIOS2_READ_STATUS (context);
800208bc:	0005303a 	rdctl	r2,status
800208c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800208c4:	e0fffc17 	ldw	r3,-16(fp)
800208c8:	00bfff84 	movi	r2,-2
800208cc:	1884703a 	and	r2,r3,r2
800208d0:	1001703a 	wrctl	status,r2
  return context;
800208d4:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
800208d8:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
800208dc:	e0bfff17 	ldw	r2,-4(fp)
800208e0:	10800617 	ldw	r2,24(r2)
800208e4:	e13fff17 	ldw	r4,-4(fp)
800208e8:	103ee83a 	callr	r2
800208ec:	e0bffe17 	ldw	r2,-8(fp)
800208f0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
800208f4:	e0bffd17 	ldw	r2,-12(fp)
800208f8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
800208fc:	0001883a 	nop
80020900:	0001883a 	nop
}
80020904:	e037883a 	mov	sp,fp
80020908:	dfc00117 	ldw	ra,4(sp)
8002090c:	df000017 	ldw	fp,0(sp)
80020910:	dec00204 	addi	sp,sp,8
80020914:	f800283a 	ret

80020918 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
80020918:	defffb04 	addi	sp,sp,-20
8002091c:	df000415 	stw	fp,16(sp)
80020920:	df000404 	addi	fp,sp,16
80020924:	e13fff15 	stw	r4,-4(fp)
80020928:	e17ffe15 	stw	r5,-8(fp)
8002092c:	e1bffd15 	stw	r6,-12(fp)
80020930:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
80020934:	e0bfff17 	ldw	r2,-4(fp)
80020938:	e0fffe17 	ldw	r3,-8(fp)
8002093c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
80020940:	e0bfff17 	ldw	r2,-4(fp)
80020944:	e0fffc17 	ldw	r3,-16(fp)
80020948:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
8002094c:	e0bfff17 	ldw	r2,-4(fp)
80020950:	e0fffd17 	ldw	r3,-12(fp)
80020954:	10c00815 	stw	r3,32(r2)

    return ;
80020958:	0001883a 	nop
}
8002095c:	e037883a 	mov	sp,fp
80020960:	df000017 	ldw	fp,0(sp)
80020964:	dec00104 	addi	sp,sp,4
80020968:	f800283a 	ret

8002096c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
8002096c:	defff704 	addi	sp,sp,-36
80020970:	dfc00815 	stw	ra,32(sp)
80020974:	df000715 	stw	fp,28(sp)
80020978:	df000704 	addi	fp,sp,28
8002097c:	e13ffa15 	stw	r4,-24(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
80020980:	e13ffa17 	ldw	r4,-24(fp)
80020984:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
80020988:	014007c4 	movi	r5,31
8002098c:	e13ffa17 	ldw	r4,-24(fp)
80020990:	00220940 	call	80022094 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80020994:	01400704 	movi	r5,28
80020998:	e13ffa17 	ldw	r4,-24(fp)
8002099c:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
800209a0:	014000c4 	movi	r5,3
800209a4:	e13ffa17 	ldw	r4,-24(fp)
800209a8:	00222a80 	call	800222a8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
800209ac:	014000c4 	movi	r5,3
800209b0:	e13ffa17 	ldw	r4,-24(fp)
800209b4:	00221f80 	call	800221f8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
800209b8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
800209bc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
800209c0:	e0bffb04 	addi	r2,fp,-20
800209c4:	018000b4 	movhi	r6,2
800209c8:	31a1a804 	addi	r6,r6,-31072
800209cc:	100b883a 	mov	r5,r2
800209d0:	e13ffa17 	ldw	r4,-24(fp)
800209d4:	0020d7c0 	call	80020d7c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
800209d8:	e0bffb04 	addi	r2,fp,-20
800209dc:	100b883a 	mov	r5,r2
800209e0:	e13ffa17 	ldw	r4,-24(fp)
800209e4:	0020c2c0 	call	80020c2c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
800209e8:	d1600e04 	addi	r5,gp,-32712
800209ec:	e13ffa17 	ldw	r4,-24(fp)
800209f0:	001fab80 	call	8001fab8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
800209f4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
800209f8:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
800209fc:	e0bfff17 	ldw	r2,-4(fp)
80020a00:	10000c1e 	bne	r2,zero,80020a34 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
80020a04:	e0bffa17 	ldw	r2,-24(fp)
80020a08:	10c00417 	ldw	r3,16(r2)
80020a0c:	e0bffa17 	ldw	r2,-24(fp)
80020a10:	10800517 	ldw	r2,20(r2)
80020a14:	d8000015 	stw	zero,0(sp)
80020a18:	e1fffa17 	ldw	r7,-24(fp)
80020a1c:	01a000b4 	movhi	r6,32770
80020a20:	31821f04 	addi	r6,r6,2172
80020a24:	100b883a 	mov	r5,r2
80020a28:	1809883a 	mov	r4,r3
80020a2c:	00240340 	call	80024034 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
80020a30:	00000406 	br	80020a44 <alt_avalon_i2c_init+0xd8>
        alt_printf("failed to create semaphores\n");
80020a34:	012000b4 	movhi	r4,32770
80020a38:	211c0c04 	addi	r4,r4,28720
80020a3c:	00200680 	call	80020068 <alt_printf>
    return;
80020a40:	0001883a 	nop

}
80020a44:	e037883a 	mov	sp,fp
80020a48:	dfc00117 	ldw	ra,4(sp)
80020a4c:	df000017 	ldw	fp,0(sp)
80020a50:	dec00204 	addi	sp,sp,8
80020a54:	f800283a 	ret

80020a58 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
80020a58:	defffc04 	addi	sp,sp,-16
80020a5c:	dfc00315 	stw	ra,12(sp)
80020a60:	df000215 	stw	fp,8(sp)
80020a64:	df000204 	addi	fp,sp,8
80020a68:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
80020a6c:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
80020a70:	d1600e04 	addi	r5,gp,-32712
80020a74:	e13ffe17 	ldw	r4,-8(fp)
80020a78:	0023d540 	call	80023d54 <alt_find_dev>
80020a7c:	e0bfff15 	stw	r2,-4(fp)

    return dev;
80020a80:	e0bfff17 	ldw	r2,-4(fp)
}
80020a84:	e037883a 	mov	sp,fp
80020a88:	dfc00117 	ldw	ra,4(sp)
80020a8c:	df000017 	ldw	fp,0(sp)
80020a90:	dec00204 	addi	sp,sp,8
80020a94:	f800283a 	ret

80020a98 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
80020a98:	defffc04 	addi	sp,sp,-16
80020a9c:	df000315 	stw	fp,12(sp)
80020aa0:	df000304 	addi	fp,sp,12
80020aa4:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
80020aa8:	e0bffd17 	ldw	r2,-12(fp)
80020aac:	10800717 	ldw	r2,28(r2)
80020ab0:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
80020ab4:	e0bffd17 	ldw	r2,-12(fp)
80020ab8:	10800317 	ldw	r2,12(r2)
80020abc:	10800204 	addi	r2,r2,8
80020ac0:	10800037 	ldwio	r2,0(r2)
80020ac4:	1080004c 	andi	r2,r2,1
80020ac8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
80020acc:	e0bffe17 	ldw	r2,-8(fp)
80020ad0:	10000226 	beq	r2,zero,80020adc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
80020ad4:	00bffe44 	movi	r2,-7
80020ad8:	00001106 	br	80020b20 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
80020adc:	e0bffd17 	ldw	r2,-12(fp)
80020ae0:	10c00617 	ldw	r3,24(r2)
80020ae4:	00a000b4 	movhi	r2,32770
80020ae8:	1081c704 	addi	r2,r2,1820
80020aec:	1880021e 	bne	r3,r2,80020af8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
80020af0:	e0bfff17 	ldw	r2,-4(fp)
80020af4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
80020af8:	e0bffd17 	ldw	r2,-12(fp)
80020afc:	10800317 	ldw	r2,12(r2)
80020b00:	10800204 	addi	r2,r2,8
80020b04:	e0fffd17 	ldw	r3,-12(fp)
80020b08:	18c00317 	ldw	r3,12(r3)
80020b0c:	18c00204 	addi	r3,r3,8
80020b10:	18c00037 	ldwio	r3,0(r3)
80020b14:	18c00054 	ori	r3,r3,1
80020b18:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
80020b1c:	0005883a 	mov	r2,zero
}
80020b20:	e037883a 	mov	sp,fp
80020b24:	df000017 	ldw	fp,0(sp)
80020b28:	dec00104 	addi	sp,sp,4
80020b2c:	f800283a 	ret

80020b30 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
80020b30:	defffe04 	addi	sp,sp,-8
80020b34:	df000115 	stw	fp,4(sp)
80020b38:	df000104 	addi	fp,sp,4
80020b3c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
80020b40:	e0bfff17 	ldw	r2,-4(fp)
80020b44:	10800317 	ldw	r2,12(r2)
80020b48:	10800204 	addi	r2,r2,8
80020b4c:	e0ffff17 	ldw	r3,-4(fp)
80020b50:	18c00317 	ldw	r3,12(r3)
80020b54:	18c00204 	addi	r3,r3,8
80020b58:	19000037 	ldwio	r4,0(r3)
80020b5c:	00ffff84 	movi	r3,-2
80020b60:	20c6703a 	and	r3,r4,r3
80020b64:	10c00035 	stwio	r3,0(r2)

}
80020b68:	0001883a 	nop
80020b6c:	e037883a 	mov	sp,fp
80020b70:	df000017 	ldw	fp,0(sp)
80020b74:	dec00104 	addi	sp,sp,4
80020b78:	f800283a 	ret

80020b7c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
80020b7c:	defffd04 	addi	sp,sp,-12
80020b80:	df000215 	stw	fp,8(sp)
80020b84:	df000204 	addi	fp,sp,8
80020b88:	e13fff15 	stw	r4,-4(fp)
80020b8c:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
80020b90:	e0bfff17 	ldw	r2,-4(fp)
80020b94:	10c00d17 	ldw	r3,52(r2)
80020b98:	e0bffe17 	ldw	r2,-8(fp)
80020b9c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
80020ba0:	e0bfff17 	ldw	r2,-4(fp)
80020ba4:	10800317 	ldw	r2,12(r2)
80020ba8:	10800204 	addi	r2,r2,8
80020bac:	10800037 	ldwio	r2,0(r2)
80020bb0:	1005d07a 	srai	r2,r2,1
80020bb4:	1080004c 	andi	r2,r2,1
80020bb8:	1007883a 	mov	r3,r2
80020bbc:	e0bffe17 	ldw	r2,-8(fp)
80020bc0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
80020bc4:	e0bfff17 	ldw	r2,-4(fp)
80020bc8:	10800317 	ldw	r2,12(r2)
80020bcc:	10800904 	addi	r2,r2,36
80020bd0:	10800037 	ldwio	r2,0(r2)
80020bd4:	1007883a 	mov	r3,r2
80020bd8:	e0bffe17 	ldw	r2,-8(fp)
80020bdc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
80020be0:	e0bfff17 	ldw	r2,-4(fp)
80020be4:	10800317 	ldw	r2,12(r2)
80020be8:	10800804 	addi	r2,r2,32
80020bec:	10800037 	ldwio	r2,0(r2)
80020bf0:	1007883a 	mov	r3,r2
80020bf4:	e0bffe17 	ldw	r2,-8(fp)
80020bf8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
80020bfc:	e0bfff17 	ldw	r2,-4(fp)
80020c00:	10800317 	ldw	r2,12(r2)
80020c04:	10800a04 	addi	r2,r2,40
80020c08:	10800037 	ldwio	r2,0(r2)
80020c0c:	1007883a 	mov	r3,r2
80020c10:	e0bffe17 	ldw	r2,-8(fp)
80020c14:	10c0030d 	sth	r3,12(r2)
}
80020c18:	0001883a 	nop
80020c1c:	e037883a 	mov	sp,fp
80020c20:	df000017 	ldw	fp,0(sp)
80020c24:	dec00104 	addi	sp,sp,4
80020c28:	f800283a 	ret

80020c2c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
80020c2c:	defffd04 	addi	sp,sp,-12
80020c30:	df000215 	stw	fp,8(sp)
80020c34:	df000204 	addi	fp,sp,8
80020c38:	e13fff15 	stw	r4,-4(fp)
80020c3c:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
80020c40:	e0bffe17 	ldw	r2,-8(fp)
80020c44:	10c00017 	ldw	r3,0(r2)
80020c48:	e0bfff17 	ldw	r2,-4(fp)
80020c4c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
80020c50:	e0bfff17 	ldw	r2,-4(fp)
80020c54:	10800317 	ldw	r2,12(r2)
80020c58:	10c00204 	addi	r3,r2,8
80020c5c:	e0bfff17 	ldw	r2,-4(fp)
80020c60:	10800317 	ldw	r2,12(r2)
80020c64:	10800204 	addi	r2,r2,8
80020c68:	10800037 	ldwio	r2,0(r2)
80020c6c:	1009883a 	mov	r4,r2
80020c70:	00bfff44 	movi	r2,-3
80020c74:	2088703a 	and	r4,r4,r2
80020c78:	e0bffe17 	ldw	r2,-8(fp)
80020c7c:	10800117 	ldw	r2,4(r2)
80020c80:	1085883a 	add	r2,r2,r2
80020c84:	1080008c 	andi	r2,r2,2
80020c88:	2084b03a 	or	r2,r4,r2
80020c8c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
80020c90:	e0bfff17 	ldw	r2,-4(fp)
80020c94:	10800317 	ldw	r2,12(r2)
80020c98:	10800904 	addi	r2,r2,36
80020c9c:	e0fffe17 	ldw	r3,-8(fp)
80020ca0:	18c0020b 	ldhu	r3,8(r3)
80020ca4:	18ffffcc 	andi	r3,r3,65535
80020ca8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
80020cac:	e0bfff17 	ldw	r2,-4(fp)
80020cb0:	10800317 	ldw	r2,12(r2)
80020cb4:	10800804 	addi	r2,r2,32
80020cb8:	e0fffe17 	ldw	r3,-8(fp)
80020cbc:	18c0028b 	ldhu	r3,10(r3)
80020cc0:	18ffffcc 	andi	r3,r3,65535
80020cc4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
80020cc8:	e0bfff17 	ldw	r2,-4(fp)
80020ccc:	10800317 	ldw	r2,12(r2)
80020cd0:	10800a04 	addi	r2,r2,40
80020cd4:	e0fffe17 	ldw	r3,-8(fp)
80020cd8:	18c0030b 	ldhu	r3,12(r3)
80020cdc:	18ffffcc 	andi	r3,r3,65535
80020ce0:	10c00035 	stwio	r3,0(r2)
}
80020ce4:	0001883a 	nop
80020ce8:	e037883a 	mov	sp,fp
80020cec:	df000017 	ldw	fp,0(sp)
80020cf0:	dec00104 	addi	sp,sp,4
80020cf4:	f800283a 	ret

80020cf8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
80020cf8:	defffc04 	addi	sp,sp,-16
80020cfc:	df000315 	stw	fp,12(sp)
80020d00:	df000304 	addi	fp,sp,12
80020d04:	e13fff15 	stw	r4,-4(fp)
80020d08:	e17ffe15 	stw	r5,-8(fp)
80020d0c:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
80020d10:	e0bffe17 	ldw	r2,-8(fp)
80020d14:	1080028b 	ldhu	r2,10(r2)
80020d18:	10bfffcc 	andi	r2,r2,65535
80020d1c:	10000426 	beq	r2,zero,80020d30 <alt_avalon_i2c_master_config_speed_get+0x38>
80020d20:	e0bffe17 	ldw	r2,-8(fp)
80020d24:	1080020b 	ldhu	r2,8(r2)
80020d28:	10bfffcc 	andi	r2,r2,65535
80020d2c:	1000021e 	bne	r2,zero,80020d38 <alt_avalon_i2c_master_config_speed_get+0x40>
   {
       return ALT_AVALON_I2C_BAD_ARG;
80020d30:	00bfff44 	movi	r2,-3
80020d34:	00000d06 	br	80020d6c <alt_avalon_i2c_master_config_speed_get+0x74>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
80020d38:	e0bfff17 	ldw	r2,-4(fp)
80020d3c:	10800c17 	ldw	r2,48(r2)
80020d40:	e0fffe17 	ldw	r3,-8(fp)
80020d44:	18c0028b 	ldhu	r3,10(r3)
80020d48:	193fffcc 	andi	r4,r3,65535
80020d4c:	e0fffe17 	ldw	r3,-8(fp)
80020d50:	18c0020b 	ldhu	r3,8(r3)
80020d54:	18ffffcc 	andi	r3,r3,65535
80020d58:	20c7883a 	add	r3,r4,r3
80020d5c:	10c7203a 	divu	r3,r2,r3
80020d60:	e0bffd17 	ldw	r2,-12(fp)
80020d64:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
80020d68:	0005883a 	mov	r2,zero
}
80020d6c:	e037883a 	mov	sp,fp
80020d70:	df000017 	ldw	fp,0(sp)
80020d74:	dec00104 	addi	sp,sp,4
80020d78:	f800283a 	ret

80020d7c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
80020d7c:	defffa04 	addi	sp,sp,-24
80020d80:	df000515 	stw	fp,20(sp)
80020d84:	df000504 	addi	fp,sp,20
80020d88:	e13ffd15 	stw	r4,-12(fp)
80020d8c:	e17ffc15 	stw	r5,-16(fp)
80020d90:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
80020d94:	e0fffb17 	ldw	r3,-20(fp)
80020d98:	008001b4 	movhi	r2,6
80020d9c:	1086a004 	addi	r2,r2,6784
80020da0:	10c00436 	bltu	r2,r3,80020db4 <alt_avalon_i2c_master_config_speed_set+0x38>
80020da4:	e0bffb17 	ldw	r2,-20(fp)
80020da8:	10000226 	beq	r2,zero,80020db4 <alt_avalon_i2c_master_config_speed_set+0x38>
80020dac:	e0bffb17 	ldw	r2,-20(fp)
80020db0:	1000021e 	bne	r2,zero,80020dbc <alt_avalon_i2c_master_config_speed_set+0x40>
    {
        return ALT_AVALON_I2C_RANGE;
80020db4:	00bfff04 	movi	r2,-4
80020db8:	00002706 	br	80020e58 <alt_avalon_i2c_master_config_speed_set+0xdc>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
80020dbc:	e0bffd17 	ldw	r2,-12(fp)
80020dc0:	10c00c17 	ldw	r3,48(r2)
80020dc4:	e0bffb17 	ldw	r2,-20(fp)
80020dc8:	1085883a 	add	r2,r2,r2
80020dcc:	1885203a 	divu	r2,r3,r2
80020dd0:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
80020dd4:	e0bfff17 	ldw	r2,-4(fp)
80020dd8:	10800f04 	addi	r2,r2,60
80020ddc:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
80020de0:	e0bfff17 	ldw	r2,-4(fp)
80020de4:	10bff104 	addi	r2,r2,-60
80020de8:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
80020dec:	e0fffb17 	ldw	r3,-20(fp)
80020df0:	008000b4 	movhi	r2,2
80020df4:	10a1a804 	addi	r2,r2,-31072
80020df8:	10c0042e 	bgeu	r2,r3,80020e0c <alt_avalon_i2c_master_config_speed_set+0x90>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
80020dfc:	e0bffc17 	ldw	r2,-16(fp)
80020e00:	00c00044 	movi	r3,1
80020e04:	10c00115 	stw	r3,4(r2)
80020e08:	00000206 	br	80020e14 <alt_avalon_i2c_master_config_speed_set+0x98>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
80020e0c:	e0bffc17 	ldw	r2,-16(fp)
80020e10:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
80020e14:	e0bfff17 	ldw	r2,-4(fp)
80020e18:	1007883a 	mov	r3,r2
80020e1c:	e0bffc17 	ldw	r2,-16(fp)
80020e20:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
80020e24:	e0bffe17 	ldw	r2,-8(fp)
80020e28:	1007883a 	mov	r3,r2
80020e2c:	e0bffc17 	ldw	r2,-16(fp)
80020e30:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
80020e34:	e0bfff17 	ldw	r2,-4(fp)
80020e38:	1007883a 	mov	r3,r2
80020e3c:	e0bfff17 	ldw	r2,-4(fp)
80020e40:	1004d07a 	srli	r2,r2,1
80020e44:	1885c83a 	sub	r2,r3,r2
80020e48:	1007883a 	mov	r3,r2
80020e4c:	e0bffc17 	ldw	r2,-16(fp)
80020e50:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
80020e54:	0005883a 	mov	r2,zero

}
80020e58:	e037883a 	mov	sp,fp
80020e5c:	df000017 	ldw	fp,0(sp)
80020e60:	dec00104 	addi	sp,sp,4
80020e64:	f800283a 	ret

80020e68 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
80020e68:	defffe04 	addi	sp,sp,-8
80020e6c:	df000115 	stw	fp,4(sp)
80020e70:	df000104 	addi	fp,sp,4
80020e74:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
80020e78:	e0bfff17 	ldw	r2,-4(fp)
80020e7c:	10800317 	ldw	r2,12(r2)
80020e80:	10800504 	addi	r2,r2,20
80020e84:	10800037 	ldwio	r2,0(r2)
80020e88:	1080004c 	andi	r2,r2,1
80020e8c:	10000226 	beq	r2,zero,80020e98 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
80020e90:	00800044 	movi	r2,1
80020e94:	00000106 	br	80020e9c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
80020e98:	0005883a 	mov	r2,zero
}
80020e9c:	e037883a 	mov	sp,fp
80020ea0:	df000017 	ldw	fp,0(sp)
80020ea4:	dec00104 	addi	sp,sp,4
80020ea8:	f800283a 	ret

80020eac <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
80020eac:	defffb04 	addi	sp,sp,-20
80020eb0:	df000415 	stw	fp,16(sp)
80020eb4:	df000404 	addi	fp,sp,16
80020eb8:	e13fff15 	stw	r4,-4(fp)
80020ebc:	e17ffe15 	stw	r5,-8(fp)
80020ec0:	e1bffd15 	stw	r6,-12(fp)
80020ec4:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
80020ec8:	e0bffc17 	ldw	r2,-16(fp)
80020ecc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
80020ed0:	00001506 	br	80020f28 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
80020ed4:	e0bfff17 	ldw	r2,-4(fp)
80020ed8:	10800317 	ldw	r2,12(r2)
80020edc:	10800104 	addi	r2,r2,4
80020ee0:	11000037 	ldwio	r4,0(r2)
80020ee4:	e0bffc17 	ldw	r2,-16(fp)
80020ee8:	10800017 	ldw	r2,0(r2)
80020eec:	e0fffe17 	ldw	r3,-8(fp)
80020ef0:	1885883a 	add	r2,r3,r2
80020ef4:	2007883a 	mov	r3,r4
80020ef8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
80020efc:	e0bffc17 	ldw	r2,-16(fp)
80020f00:	10800017 	ldw	r2,0(r2)
80020f04:	10c00044 	addi	r3,r2,1
80020f08:	e0bffc17 	ldw	r2,-16(fp)
80020f0c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
80020f10:	e0bffc17 	ldw	r2,-16(fp)
80020f14:	10800017 	ldw	r2,0(r2)
80020f18:	e0fffd17 	ldw	r3,-12(fp)
80020f1c:	1880021e 	bne	r3,r2,80020f28 <alt_avalon_i2c_rx_read_available+0x7c>
80020f20:	e0bffd17 	ldw	r2,-12(fp)
80020f24:	1000061e 	bne	r2,zero,80020f40 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
80020f28:	e0bfff17 	ldw	r2,-4(fp)
80020f2c:	10800317 	ldw	r2,12(r2)
80020f30:	10800704 	addi	r2,r2,28
80020f34:	10800037 	ldwio	r2,0(r2)
80020f38:	103fe61e 	bne	r2,zero,80020ed4 <_gp+0xffff0160>
    }
}
80020f3c:	00000106 	br	80020f44 <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
80020f40:	0001883a 	nop
}
80020f44:	0001883a 	nop
80020f48:	e037883a 	mov	sp,fp
80020f4c:	df000017 	ldw	fp,0(sp)
80020f50:	dec00104 	addi	sp,sp,4
80020f54:	f800283a 	ret

80020f58 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
80020f58:	defffa04 	addi	sp,sp,-24
80020f5c:	dfc00515 	stw	ra,20(sp)
80020f60:	df000415 	stw	fp,16(sp)
80020f64:	df000404 	addi	fp,sp,16
80020f68:	e13ffd15 	stw	r4,-12(fp)
80020f6c:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
80020f70:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
80020f74:	008000b4 	movhi	r2,2
80020f78:	10a1a804 	addi	r2,r2,-31072
80020f7c:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
80020f80:	00000d06 	br	80020fb8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
80020f84:	e0bffe17 	ldw	r2,-8(fp)
80020f88:	108002a8 	cmpgeui	r2,r2,10
80020f8c:	1000021e 	bne	r2,zero,80020f98 <alt_avalon_i2c_rx_read+0x40>
80020f90:	0109c404 	movi	r4,10000
80020f94:	0023b240 	call	80023b24 <alt_busy_sleep>
      if (--timeout == 0)
80020f98:	e0bffe17 	ldw	r2,-8(fp)
80020f9c:	10bfffc4 	addi	r2,r2,-1
80020fa0:	e0bffe15 	stw	r2,-8(fp)
80020fa4:	e0bffe17 	ldw	r2,-8(fp)
80020fa8:	1000031e 	bne	r2,zero,80020fb8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
80020fac:	00bfff84 	movi	r2,-2
80020fb0:	e0bfff15 	stw	r2,-4(fp)
        break;
80020fb4:	00000506 	br	80020fcc <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
80020fb8:	e0bffd17 	ldw	r2,-12(fp)
80020fbc:	10800317 	ldw	r2,12(r2)
80020fc0:	10800704 	addi	r2,r2,28
80020fc4:	10800037 	ldwio	r2,0(r2)
80020fc8:	103fee26 	beq	r2,zero,80020f84 <_gp+0xffff0210>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
80020fcc:	e0bffd17 	ldw	r2,-12(fp)
80020fd0:	10800317 	ldw	r2,12(r2)
80020fd4:	10800104 	addi	r2,r2,4
80020fd8:	10800037 	ldwio	r2,0(r2)
80020fdc:	1007883a 	mov	r3,r2
80020fe0:	e0bffc17 	ldw	r2,-16(fp)
80020fe4:	10c00005 	stb	r3,0(r2)
        
    return status;
80020fe8:	e0bfff17 	ldw	r2,-4(fp)
}
80020fec:	e037883a 	mov	sp,fp
80020ff0:	dfc00117 	ldw	ra,4(sp)
80020ff4:	df000017 	ldw	fp,0(sp)
80020ff8:	dec00204 	addi	sp,sp,8
80020ffc:	f800283a 	ret

80021000 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
80021000:	defff804 	addi	sp,sp,-32
80021004:	dfc00715 	stw	ra,28(sp)
80021008:	df000615 	stw	fp,24(sp)
8002100c:	df000604 	addi	fp,sp,24
80021010:	e13ffd15 	stw	r4,-12(fp)
80021014:	2805883a 	mov	r2,r5
80021018:	3009883a 	mov	r4,r6
8002101c:	3807883a 	mov	r3,r7
80021020:	e0bffc05 	stb	r2,-16(fp)
80021024:	2005883a 	mov	r2,r4
80021028:	e0bffb05 	stb	r2,-20(fp)
8002102c:	1805883a 	mov	r2,r3
80021030:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
80021034:	0089c404 	movi	r2,10000
80021038:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
8002103c:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
80021040:	00000c06 	br	80021074 <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
80021044:	e0bfff17 	ldw	r2,-4(fp)
80021048:	108002a8 	cmpgeui	r2,r2,10
8002104c:	1000021e 	bne	r2,zero,80021058 <alt_avalon_i2c_cmd_write+0x58>
80021050:	0109c404 	movi	r4,10000
80021054:	0023b240 	call	80023b24 <alt_busy_sleep>
      if (--timeout == 0)
80021058:	e0bfff17 	ldw	r2,-4(fp)
8002105c:	10bfffc4 	addi	r2,r2,-1
80021060:	e0bfff15 	stw	r2,-4(fp)
80021064:	e0bfff17 	ldw	r2,-4(fp)
80021068:	1000021e 	bne	r2,zero,80021074 <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
8002106c:	00bfff84 	movi	r2,-2
80021070:	00001906 	br	800210d8 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
80021074:	e0bffd17 	ldw	r2,-12(fp)
80021078:	10800317 	ldw	r2,12(r2)
8002107c:	10800404 	addi	r2,r2,16
80021080:	10800037 	ldwio	r2,0(r2)
80021084:	1080004c 	andi	r2,r2,1
80021088:	103fee26 	beq	r2,zero,80021044 <_gp+0xffff02d0>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
8002108c:	e0bffd17 	ldw	r2,-12(fp)
80021090:	10800317 	ldw	r2,12(r2)
80021094:	e13ffc03 	ldbu	r4,-16(fp)
80021098:	e0fffb03 	ldbu	r3,-20(fp)
8002109c:	1806927a 	slli	r3,r3,9
800210a0:	20c8b03a 	or	r4,r4,r3
800210a4:	e0fffa03 	ldbu	r3,-24(fp)
800210a8:	1806923a 	slli	r3,r3,8
800210ac:	20c6b03a 	or	r3,r4,r3
800210b0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
800210b4:	e0bffe04 	addi	r2,fp,-8
800210b8:	100b883a 	mov	r5,r2
800210bc:	e13ffd17 	ldw	r4,-12(fp)
800210c0:	00212480 	call	80021248 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
800210c4:	e0bffe04 	addi	r2,fp,-8
800210c8:	100b883a 	mov	r5,r2
800210cc:	e13ffd17 	ldw	r4,-12(fp)
800210d0:	00212940 	call	80021294 <alt_avalon_i2c_check_arblost>
    
    return status;
800210d4:	e0bffe17 	ldw	r2,-8(fp)
}
800210d8:	e037883a 	mov	sp,fp
800210dc:	dfc00117 	ldw	ra,4(sp)
800210e0:	df000017 	ldw	fp,0(sp)
800210e4:	dec00204 	addi	sp,sp,8
800210e8:	f800283a 	ret

800210ec <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
800210ec:	defffa04 	addi	sp,sp,-24
800210f0:	dfc00515 	stw	ra,20(sp)
800210f4:	df000415 	stw	fp,16(sp)
800210f8:	df000404 	addi	fp,sp,16
800210fc:	e13ffe15 	stw	r4,-8(fp)
80021100:	e17ffd15 	stw	r5,-12(fp)
80021104:	3005883a 	mov	r2,r6
80021108:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
8002110c:	e0bffe17 	ldw	r2,-8(fp)
80021110:	10800d17 	ldw	r2,52(r2)
80021114:	10800058 	cmpnei	r2,r2,1
80021118:	10001c1e 	bne	r2,zero,8002118c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
8002111c:	e0bffe17 	ldw	r2,-8(fp)
80021120:	10800917 	ldw	r2,36(r2)
80021124:	1004d1fa 	srli	r2,r2,7
80021128:	1080038c 	andi	r2,r2,14
8002112c:	1007883a 	mov	r3,r2
80021130:	e0bffd17 	ldw	r2,-12(fp)
80021134:	1884b03a 	or	r2,r3,r2
80021138:	1007883a 	mov	r3,r2
8002113c:	00bffc04 	movi	r2,-16
80021140:	1884b03a 	or	r2,r3,r2
80021144:	10803fcc 	andi	r2,r2,255
80021148:	e0fffc03 	ldbu	r3,-16(fp)
8002114c:	000f883a 	mov	r7,zero
80021150:	180d883a 	mov	r6,r3
80021154:	100b883a 	mov	r5,r2
80021158:	e13ffe17 	ldw	r4,-8(fp)
8002115c:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021160:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
80021164:	e0bffe17 	ldw	r2,-8(fp)
80021168:	10800917 	ldw	r2,36(r2)
8002116c:	10803fcc 	andi	r2,r2,255
80021170:	000f883a 	mov	r7,zero
80021174:	000d883a 	mov	r6,zero
80021178:	100b883a 	mov	r5,r2
8002117c:	e13ffe17 	ldw	r4,-8(fp)
80021180:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021184:	e0bfff15 	stw	r2,-4(fp)
80021188:	00000e06 	br	800211c4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
8002118c:	e0bffe17 	ldw	r2,-8(fp)
80021190:	10800917 	ldw	r2,36(r2)
80021194:	1085883a 	add	r2,r2,r2
80021198:	1007883a 	mov	r3,r2
8002119c:	e0bffd17 	ldw	r2,-12(fp)
800211a0:	1884b03a 	or	r2,r3,r2
800211a4:	10803fcc 	andi	r2,r2,255
800211a8:	e0fffc03 	ldbu	r3,-16(fp)
800211ac:	000f883a 	mov	r7,zero
800211b0:	180d883a 	mov	r6,r3
800211b4:	100b883a 	mov	r5,r2
800211b8:	e13ffe17 	ldw	r4,-8(fp)
800211bc:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
800211c0:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
800211c4:	e0bfff17 	ldw	r2,-4(fp)
}
800211c8:	e037883a 	mov	sp,fp
800211cc:	dfc00117 	ldw	ra,4(sp)
800211d0:	df000017 	ldw	fp,0(sp)
800211d4:	dec00204 	addi	sp,sp,8
800211d8:	f800283a 	ret

800211dc <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
800211dc:	defffd04 	addi	sp,sp,-12
800211e0:	df000215 	stw	fp,8(sp)
800211e4:	df000204 	addi	fp,sp,8
800211e8:	e13fff15 	stw	r4,-4(fp)
800211ec:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
800211f0:	e0bfff17 	ldw	r2,-4(fp)
800211f4:	10c00917 	ldw	r3,36(r2)
800211f8:	e0bffe17 	ldw	r2,-8(fp)
800211fc:	10c00015 	stw	r3,0(r2)
}
80021200:	0001883a 	nop
80021204:	e037883a 	mov	sp,fp
80021208:	df000017 	ldw	fp,0(sp)
8002120c:	dec00104 	addi	sp,sp,4
80021210:	f800283a 	ret

80021214 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
80021214:	defffd04 	addi	sp,sp,-12
80021218:	df000215 	stw	fp,8(sp)
8002121c:	df000204 	addi	fp,sp,8
80021220:	e13fff15 	stw	r4,-4(fp)
80021224:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
80021228:	e0bfff17 	ldw	r2,-4(fp)
8002122c:	e0fffe17 	ldw	r3,-8(fp)
80021230:	10c00915 	stw	r3,36(r2)
}
80021234:	0001883a 	nop
80021238:	e037883a 	mov	sp,fp
8002123c:	df000017 	ldw	fp,0(sp)
80021240:	dec00104 	addi	sp,sp,4
80021244:	f800283a 	ret

80021248 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
80021248:	defffd04 	addi	sp,sp,-12
8002124c:	df000215 	stw	fp,8(sp)
80021250:	df000204 	addi	fp,sp,8
80021254:	e13fff15 	stw	r4,-4(fp)
80021258:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
8002125c:	e0bfff17 	ldw	r2,-4(fp)
80021260:	10800317 	ldw	r2,12(r2)
80021264:	10800404 	addi	r2,r2,16
80021268:	10800037 	ldwio	r2,0(r2)
8002126c:	1080010c 	andi	r2,r2,4
80021270:	10000326 	beq	r2,zero,80021280 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
80021274:	e0bffe17 	ldw	r2,-8(fp)
80021278:	00fffec4 	movi	r3,-5
8002127c:	10c00015 	stw	r3,0(r2)
    }
}
80021280:	0001883a 	nop
80021284:	e037883a 	mov	sp,fp
80021288:	df000017 	ldw	fp,0(sp)
8002128c:	dec00104 	addi	sp,sp,4
80021290:	f800283a 	ret

80021294 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
80021294:	defffd04 	addi	sp,sp,-12
80021298:	df000215 	stw	fp,8(sp)
8002129c:	df000204 	addi	fp,sp,8
800212a0:	e13fff15 	stw	r4,-4(fp)
800212a4:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
800212a8:	e0bfff17 	ldw	r2,-4(fp)
800212ac:	10800317 	ldw	r2,12(r2)
800212b0:	10800404 	addi	r2,r2,16
800212b4:	10800037 	ldwio	r2,0(r2)
800212b8:	1080020c 	andi	r2,r2,8
800212bc:	10000326 	beq	r2,zero,800212cc <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
800212c0:	e0bffe17 	ldw	r2,-8(fp)
800212c4:	00fffe84 	movi	r3,-6
800212c8:	10c00015 	stw	r3,0(r2)
    }
}
800212cc:	0001883a 	nop
800212d0:	e037883a 	mov	sp,fp
800212d4:	df000017 	ldw	fp,0(sp)
800212d8:	dec00104 	addi	sp,sp,4
800212dc:	f800283a 	ret

800212e0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
800212e0:	defff804 	addi	sp,sp,-32
800212e4:	dfc00715 	stw	ra,28(sp)
800212e8:	df000615 	stw	fp,24(sp)
800212ec:	df000604 	addi	fp,sp,24
800212f0:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
800212f4:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
800212f8:	e0bffa17 	ldw	r2,-24(fp)
800212fc:	10800717 	ldw	r2,28(r2)
80021300:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
80021304:	e0bffe17 	ldw	r2,-8(fp)
80021308:	10800117 	ldw	r2,4(r2)
8002130c:	10800044 	addi	r2,r2,1
80021310:	1089c424 	muli	r2,r2,10000
80021314:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
80021318:	e0bffc04 	addi	r2,fp,-16
8002131c:	100b883a 	mov	r5,r2
80021320:	e13ffa17 	ldw	r4,-24(fp)
80021324:	00221680 	call	80022168 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
80021328:	e0bffc17 	ldw	r2,-16(fp)
8002132c:	100b883a 	mov	r5,r2
80021330:	e13ffa17 	ldw	r4,-24(fp)
80021334:	00220940 	call	80022094 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
80021338:	e0bffd04 	addi	r2,fp,-12
8002133c:	100b883a 	mov	r5,r2
80021340:	e13ffa17 	ldw	r4,-24(fp)
80021344:	00212480 	call	80021248 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
80021348:	e0bffd17 	ldw	r2,-12(fp)
8002134c:	10002226 	beq	r2,zero,800213d8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
80021350:	e0bffe17 	ldw	r2,-8(fp)
80021354:	10800217 	ldw	r2,8(r2)
80021358:	10001d26 	beq	r2,zero,800213d0 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
8002135c:	00000d06 	br	80021394 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
80021360:	e0bfff17 	ldw	r2,-4(fp)
80021364:	108002a8 	cmpgeui	r2,r2,10
80021368:	1000021e 	bne	r2,zero,80021374 <alt_avalon_i2c_interrupt_transaction_status+0x94>
8002136c:	0109c404 	movi	r4,10000
80021370:	0023b240 	call	80023b24 <alt_busy_sleep>
              if (--timeout == 0)
80021374:	e0bfff17 	ldw	r2,-4(fp)
80021378:	10bfffc4 	addi	r2,r2,-1
8002137c:	e0bfff15 	stw	r2,-4(fp)
80021380:	e0bfff17 	ldw	r2,-4(fp)
80021384:	1000031e 	bne	r2,zero,80021394 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
80021388:	00bfff84 	movi	r2,-2
8002138c:	e0bffd15 	stw	r2,-12(fp)
                 break;
80021390:	00000306 	br	800213a0 <alt_avalon_i2c_interrupt_transaction_status+0xc0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021394:	e13ffa17 	ldw	r4,-24(fp)
80021398:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
8002139c:	103ff01e 	bne	r2,zero,80021360 <_gp+0xffff05ec>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
800213a0:	e0bffe17 	ldw	r2,-8(fp)
800213a4:	10800017 	ldw	r2,0(r2)
800213a8:	e0fffb04 	addi	r3,fp,-20
800213ac:	180f883a 	mov	r7,r3
800213b0:	000d883a 	mov	r6,zero
800213b4:	100b883a 	mov	r5,r2
800213b8:	e13ffa17 	ldw	r4,-24(fp)
800213bc:	0020eac0 	call	80020eac <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
800213c0:	e13ffa17 	ldw	r4,-24(fp)
800213c4:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
800213c8:	e0bffe17 	ldw	r2,-8(fp)
800213cc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
800213d0:	e0bffd17 	ldw	r2,-12(fp)
800213d4:	00000a06 	br	80021400 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
800213d8:	e0bffe17 	ldw	r2,-8(fp)
800213dc:	10800217 	ldw	r2,8(r2)
800213e0:	10000626 	beq	r2,zero,800213fc <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
800213e4:	e0bffc17 	ldw	r2,-16(fp)
800213e8:	100b883a 	mov	r5,r2
800213ec:	e13ffa17 	ldw	r4,-24(fp)
800213f0:	00221000 	call	80022100 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
800213f4:	00bffe44 	movi	r2,-7
800213f8:	00000106 	br	80021400 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
800213fc:	0005883a 	mov	r2,zero
}
80021400:	e037883a 	mov	sp,fp
80021404:	dfc00117 	ldw	ra,4(sp)
80021408:	df000017 	ldw	fp,0(sp)
8002140c:	dec00204 	addi	sp,sp,8
80021410:	f800283a 	ret

80021414 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
80021414:	defff704 	addi	sp,sp,-36
80021418:	dfc00815 	stw	ra,32(sp)
8002141c:	df000715 	stw	fp,28(sp)
80021420:	df000704 	addi	fp,sp,28
80021424:	e13ffd15 	stw	r4,-12(fp)
80021428:	e17ffc15 	stw	r5,-16(fp)
8002142c:	e1bffb15 	stw	r6,-20(fp)
80021430:	3805883a 	mov	r2,r7
80021434:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
80021438:	0089c404 	movi	r2,10000
8002143c:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
80021440:	00002206 	br	800214cc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
80021444:	e0bffe17 	ldw	r2,-8(fp)
80021448:	108002a8 	cmpgeui	r2,r2,10
8002144c:	1000021e 	bne	r2,zero,80021458 <alt_avalon_i2c_master_tx+0x44>
80021450:	0109c404 	movi	r4,10000
80021454:	0023b240 	call	80023b24 <alt_busy_sleep>
      if (use_interrupts)
80021458:	e0bffa03 	ldbu	r2,-24(fp)
8002145c:	10000926 	beq	r2,zero,80021484 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
80021460:	00800044 	movi	r2,1
80021464:	d8800015 	stw	r2,0(sp)
80021468:	000f883a 	mov	r7,zero
8002146c:	e1bffb17 	ldw	r6,-20(fp)
80021470:	e17ffc17 	ldw	r5,-16(fp)
80021474:	e13ffd17 	ldw	r4,-12(fp)
80021478:	00219bc0 	call	800219bc <alt_avalon_i2c_master_transmit_using_interrupts>
8002147c:	e0bfff15 	stw	r2,-4(fp)
80021480:	00000806 	br	800214a4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
80021484:	00800044 	movi	r2,1
80021488:	d8800015 	stw	r2,0(sp)
8002148c:	000f883a 	mov	r7,zero
80021490:	e1bffb17 	ldw	r6,-20(fp)
80021494:	e17ffc17 	ldw	r5,-16(fp)
80021498:	e13ffd17 	ldw	r4,-12(fp)
8002149c:	00218000 	call	80021800 <alt_avalon_i2c_master_transmit>
800214a0:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
800214a4:	e0bfff17 	ldw	r2,-4(fp)
800214a8:	10bffea0 	cmpeqi	r2,r2,-6
800214ac:	1000061e 	bne	r2,zero,800214c8 <alt_avalon_i2c_master_tx+0xb4>
800214b0:	e0bfff17 	ldw	r2,-4(fp)
800214b4:	10bffee0 	cmpeqi	r2,r2,-5
800214b8:	1000031e 	bne	r2,zero,800214c8 <alt_avalon_i2c_master_tx+0xb4>
800214bc:	e0bfff17 	ldw	r2,-4(fp)
800214c0:	10bffe58 	cmpnei	r2,r2,-7
800214c4:	1000061e 	bne	r2,zero,800214e0 <alt_avalon_i2c_master_tx+0xcc>
800214c8:	0001883a 	nop
    while (retry--)
800214cc:	e0bffe17 	ldw	r2,-8(fp)
800214d0:	10ffffc4 	addi	r3,r2,-1
800214d4:	e0fffe15 	stw	r3,-8(fp)
800214d8:	103fda1e 	bne	r2,zero,80021444 <_gp+0xffff06d0>
800214dc:	00000106 	br	800214e4 <alt_avalon_i2c_master_tx+0xd0>
      break;
800214e0:	0001883a 	nop
    }

    return status;
800214e4:	e0bfff17 	ldw	r2,-4(fp)
}        
800214e8:	e037883a 	mov	sp,fp
800214ec:	dfc00117 	ldw	ra,4(sp)
800214f0:	df000017 	ldw	fp,0(sp)
800214f4:	dec00204 	addi	sp,sp,8
800214f8:	f800283a 	ret

800214fc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
800214fc:	defff704 	addi	sp,sp,-36
80021500:	dfc00815 	stw	ra,32(sp)
80021504:	df000715 	stw	fp,28(sp)
80021508:	df000704 	addi	fp,sp,28
8002150c:	e13ffd15 	stw	r4,-12(fp)
80021510:	e17ffc15 	stw	r5,-16(fp)
80021514:	e1bffb15 	stw	r6,-20(fp)
80021518:	3805883a 	mov	r2,r7
8002151c:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
80021520:	0089c404 	movi	r2,10000
80021524:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
80021528:	e0bffa03 	ldbu	r2,-24(fp)
8002152c:	10003426 	beq	r2,zero,80021600 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
80021530:	00001706 	br	80021590 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
80021534:	e0bffe17 	ldw	r2,-8(fp)
80021538:	108002a8 	cmpgeui	r2,r2,10
8002153c:	1000021e 	bne	r2,zero,80021548 <alt_avalon_i2c_master_rx+0x4c>
80021540:	0109c404 	movi	r4,10000
80021544:	0023b240 	call	80023b24 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
80021548:	00800044 	movi	r2,1
8002154c:	d8800015 	stw	r2,0(sp)
80021550:	000f883a 	mov	r7,zero
80021554:	e1bffb17 	ldw	r6,-20(fp)
80021558:	e17ffc17 	ldw	r5,-16(fp)
8002155c:	e13ffd17 	ldw	r4,-12(fp)
80021560:	0021dd00 	call	80021dd0 <alt_avalon_i2c_master_receive_using_interrupts>
80021564:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
80021568:	e0bfff17 	ldw	r2,-4(fp)
8002156c:	10bffea0 	cmpeqi	r2,r2,-6
80021570:	1000061e 	bne	r2,zero,8002158c <alt_avalon_i2c_master_rx+0x90>
80021574:	e0bfff17 	ldw	r2,-4(fp)
80021578:	10bffee0 	cmpeqi	r2,r2,-5
8002157c:	1000031e 	bne	r2,zero,8002158c <alt_avalon_i2c_master_rx+0x90>
80021580:	e0bfff17 	ldw	r2,-4(fp)
80021584:	10bffe58 	cmpnei	r2,r2,-7
80021588:	1000221e 	bne	r2,zero,80021614 <alt_avalon_i2c_master_rx+0x118>
8002158c:	0001883a 	nop
      while (retry--) 
80021590:	e0bffe17 	ldw	r2,-8(fp)
80021594:	10ffffc4 	addi	r3,r2,-1
80021598:	e0fffe15 	stw	r3,-8(fp)
8002159c:	103fe51e 	bne	r2,zero,80021534 <_gp+0xffff07c0>
800215a0:	00001f06 	br	80021620 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
800215a4:	e0bffe17 	ldw	r2,-8(fp)
800215a8:	108002a8 	cmpgeui	r2,r2,10
800215ac:	1000021e 	bne	r2,zero,800215b8 <alt_avalon_i2c_master_rx+0xbc>
800215b0:	0109c404 	movi	r4,10000
800215b4:	0023b240 	call	80023b24 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
800215b8:	00800044 	movi	r2,1
800215bc:	d8800015 	stw	r2,0(sp)
800215c0:	000f883a 	mov	r7,zero
800215c4:	e1bffb17 	ldw	r6,-20(fp)
800215c8:	e17ffc17 	ldw	r5,-16(fp)
800215cc:	e13ffd17 	ldw	r4,-12(fp)
800215d0:	0021bc40 	call	80021bc4 <alt_avalon_i2c_master_receive>
800215d4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
800215d8:	e0bfff17 	ldw	r2,-4(fp)
800215dc:	10bffea0 	cmpeqi	r2,r2,-6
800215e0:	1000061e 	bne	r2,zero,800215fc <alt_avalon_i2c_master_rx+0x100>
800215e4:	e0bfff17 	ldw	r2,-4(fp)
800215e8:	10bffee0 	cmpeqi	r2,r2,-5
800215ec:	1000031e 	bne	r2,zero,800215fc <alt_avalon_i2c_master_rx+0x100>
800215f0:	e0bfff17 	ldw	r2,-4(fp)
800215f4:	10bffe58 	cmpnei	r2,r2,-7
800215f8:	1000081e 	bne	r2,zero,8002161c <alt_avalon_i2c_master_rx+0x120>
800215fc:	0001883a 	nop
      while (retry--) 
80021600:	e0bffe17 	ldw	r2,-8(fp)
80021604:	10ffffc4 	addi	r3,r2,-1
80021608:	e0fffe15 	stw	r3,-8(fp)
8002160c:	103fe51e 	bne	r2,zero,800215a4 <_gp+0xffff0830>
80021610:	00000306 	br	80021620 <alt_avalon_i2c_master_rx+0x124>
        break;
80021614:	0001883a 	nop
80021618:	00000106 	br	80021620 <alt_avalon_i2c_master_rx+0x124>
        break;
8002161c:	0001883a 	nop
      }
    }
    
    return status;
80021620:	e0bfff17 	ldw	r2,-4(fp)
}        
80021624:	e037883a 	mov	sp,fp
80021628:	dfc00117 	ldw	ra,4(sp)
8002162c:	df000017 	ldw	fp,0(sp)
80021630:	dec00204 	addi	sp,sp,8
80021634:	f800283a 	ret

80021638 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
80021638:	defff604 	addi	sp,sp,-40
8002163c:	dfc00915 	stw	ra,36(sp)
80021640:	df000815 	stw	fp,32(sp)
80021644:	df000804 	addi	fp,sp,32
80021648:	e13ffd15 	stw	r4,-12(fp)
8002164c:	e17ffc15 	stw	r5,-16(fp)
80021650:	e1bffb15 	stw	r6,-20(fp)
80021654:	e1fffa15 	stw	r7,-24(fp)
80021658:	e0800317 	ldw	r2,12(fp)
8002165c:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
80021660:	0089c404 	movi	r2,10000
80021664:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
80021668:	e0bff903 	ldbu	r2,-28(fp)
8002166c:	10005626 	beq	r2,zero,800217c8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
80021670:	00002806 	br	80021714 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
80021674:	e0bffe17 	ldw	r2,-8(fp)
80021678:	108002a8 	cmpgeui	r2,r2,10
8002167c:	1000021e 	bne	r2,zero,80021688 <alt_avalon_i2c_master_tx_rx+0x50>
80021680:	0109c404 	movi	r4,10000
80021684:	0023b240 	call	80023b24 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
80021688:	d8000015 	stw	zero,0(sp)
8002168c:	000f883a 	mov	r7,zero
80021690:	e1bffb17 	ldw	r6,-20(fp)
80021694:	e17ffc17 	ldw	r5,-16(fp)
80021698:	e13ffd17 	ldw	r4,-12(fp)
8002169c:	00219bc0 	call	800219bc <alt_avalon_i2c_master_transmit_using_interrupts>
800216a0:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
800216a4:	e0bfff17 	ldw	r2,-4(fp)
800216a8:	10bffea0 	cmpeqi	r2,r2,-6
800216ac:	1000191e 	bne	r2,zero,80021714 <alt_avalon_i2c_master_tx_rx+0xdc>
800216b0:	e0bfff17 	ldw	r2,-4(fp)
800216b4:	10bffee0 	cmpeqi	r2,r2,-5
800216b8:	1000161e 	bne	r2,zero,80021714 <alt_avalon_i2c_master_tx_rx+0xdc>
800216bc:	e0bfff17 	ldw	r2,-4(fp)
800216c0:	10bffe58 	cmpnei	r2,r2,-7
800216c4:	1000011e 	bne	r2,zero,800216cc <alt_avalon_i2c_master_tx_rx+0x94>
800216c8:	00001206 	br	80021714 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
800216cc:	00800044 	movi	r2,1
800216d0:	d8800015 	stw	r2,0(sp)
800216d4:	01c00044 	movi	r7,1
800216d8:	e1800217 	ldw	r6,8(fp)
800216dc:	e17ffa17 	ldw	r5,-24(fp)
800216e0:	e13ffd17 	ldw	r4,-12(fp)
800216e4:	0021dd00 	call	80021dd0 <alt_avalon_i2c_master_receive_using_interrupts>
800216e8:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
800216ec:	e0bfff17 	ldw	r2,-4(fp)
800216f0:	10bffea0 	cmpeqi	r2,r2,-6
800216f4:	1000061e 	bne	r2,zero,80021710 <alt_avalon_i2c_master_tx_rx+0xd8>
800216f8:	e0bfff17 	ldw	r2,-4(fp)
800216fc:	10bffee0 	cmpeqi	r2,r2,-5
80021700:	1000031e 	bne	r2,zero,80021710 <alt_avalon_i2c_master_tx_rx+0xd8>
80021704:	e0bfff17 	ldw	r2,-4(fp)
80021708:	10bffe58 	cmpnei	r2,r2,-7
8002170c:	1000331e 	bne	r2,zero,800217dc <alt_avalon_i2c_master_tx_rx+0x1a4>
80021710:	0001883a 	nop
      while (retry--) 
80021714:	e0bffe17 	ldw	r2,-8(fp)
80021718:	10ffffc4 	addi	r3,r2,-1
8002171c:	e0fffe15 	stw	r3,-8(fp)
80021720:	103fd41e 	bne	r2,zero,80021674 <_gp+0xffff0900>
80021724:	00003006 	br	800217e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
80021728:	e0bffe17 	ldw	r2,-8(fp)
8002172c:	108002a8 	cmpgeui	r2,r2,10
80021730:	1000021e 	bne	r2,zero,8002173c <alt_avalon_i2c_master_tx_rx+0x104>
80021734:	0109c404 	movi	r4,10000
80021738:	0023b240 	call	80023b24 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
8002173c:	d8000015 	stw	zero,0(sp)
80021740:	000f883a 	mov	r7,zero
80021744:	e1bffb17 	ldw	r6,-20(fp)
80021748:	e17ffc17 	ldw	r5,-16(fp)
8002174c:	e13ffd17 	ldw	r4,-12(fp)
80021750:	00218000 	call	80021800 <alt_avalon_i2c_master_transmit>
80021754:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
80021758:	e0bfff17 	ldw	r2,-4(fp)
8002175c:	10bffea0 	cmpeqi	r2,r2,-6
80021760:	1000191e 	bne	r2,zero,800217c8 <alt_avalon_i2c_master_tx_rx+0x190>
80021764:	e0bfff17 	ldw	r2,-4(fp)
80021768:	10bffee0 	cmpeqi	r2,r2,-5
8002176c:	1000161e 	bne	r2,zero,800217c8 <alt_avalon_i2c_master_tx_rx+0x190>
80021770:	e0bfff17 	ldw	r2,-4(fp)
80021774:	10bffe58 	cmpnei	r2,r2,-7
80021778:	1000011e 	bne	r2,zero,80021780 <alt_avalon_i2c_master_tx_rx+0x148>
8002177c:	00001206 	br	800217c8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
80021780:	00800044 	movi	r2,1
80021784:	d8800015 	stw	r2,0(sp)
80021788:	01c00044 	movi	r7,1
8002178c:	e1800217 	ldw	r6,8(fp)
80021790:	e17ffa17 	ldw	r5,-24(fp)
80021794:	e13ffd17 	ldw	r4,-12(fp)
80021798:	0021bc40 	call	80021bc4 <alt_avalon_i2c_master_receive>
8002179c:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
800217a0:	e0bfff17 	ldw	r2,-4(fp)
800217a4:	10bffea0 	cmpeqi	r2,r2,-6
800217a8:	1000061e 	bne	r2,zero,800217c4 <alt_avalon_i2c_master_tx_rx+0x18c>
800217ac:	e0bfff17 	ldw	r2,-4(fp)
800217b0:	10bffee0 	cmpeqi	r2,r2,-5
800217b4:	1000031e 	bne	r2,zero,800217c4 <alt_avalon_i2c_master_tx_rx+0x18c>
800217b8:	e0bfff17 	ldw	r2,-4(fp)
800217bc:	10bffe58 	cmpnei	r2,r2,-7
800217c0:	1000081e 	bne	r2,zero,800217e4 <alt_avalon_i2c_master_tx_rx+0x1ac>
800217c4:	0001883a 	nop
      while (retry--) 
800217c8:	e0bffe17 	ldw	r2,-8(fp)
800217cc:	10ffffc4 	addi	r3,r2,-1
800217d0:	e0fffe15 	stw	r3,-8(fp)
800217d4:	103fd41e 	bne	r2,zero,80021728 <_gp+0xffff09b4>
800217d8:	00000306 	br	800217e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
800217dc:	0001883a 	nop
800217e0:	00000106 	br	800217e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
800217e4:	0001883a 	nop
      }
    }
    
    return status;
800217e8:	e0bfff17 	ldw	r2,-4(fp)
}                                       
800217ec:	e037883a 	mov	sp,fp
800217f0:	dfc00117 	ldw	ra,4(sp)
800217f4:	df000017 	ldw	fp,0(sp)
800217f8:	dec00204 	addi	sp,sp,8
800217fc:	f800283a 	ret

80021800 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
80021800:	defff704 	addi	sp,sp,-36
80021804:	dfc00815 	stw	ra,32(sp)
80021808:	df000715 	stw	fp,28(sp)
8002180c:	df000704 	addi	fp,sp,28
80021810:	e13ffd15 	stw	r4,-12(fp)
80021814:	e17ffc15 	stw	r5,-16(fp)
80021818:	e1bffb15 	stw	r6,-20(fp)
8002181c:	3807883a 	mov	r3,r7
80021820:	e0800217 	ldw	r2,8(fp)
80021824:	e0fffa05 	stb	r3,-24(fp)
80021828:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
8002182c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
80021830:	e0bffb17 	ldw	r2,-20(fp)
80021834:	1089c424 	muli	r2,r2,10000
80021838:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
8002183c:	e0bffb17 	ldw	r2,-20(fp)
80021840:	1000021e 	bne	r2,zero,8002184c <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
80021844:	0005883a 	mov	r2,zero
80021848:	00005706 	br	800219a8 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
8002184c:	e0bffa03 	ldbu	r2,-24(fp)
80021850:	10000a1e 	bne	r2,zero,8002187c <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
80021854:	e13ffd17 	ldw	r4,-12(fp)
80021858:	0020a980 	call	80020a98 <alt_avalon_i2c_enable>
8002185c:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
80021860:	e0bffe17 	ldw	r2,-8(fp)
80021864:	10000226 	beq	r2,zero,80021870 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
80021868:	e0bffe17 	ldw	r2,-8(fp)
8002186c:	00004e06 	br	800219a8 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021870:	01400704 	movi	r5,28
80021874:	e13ffd17 	ldw	r4,-12(fp)
80021878:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
8002187c:	e0bffa03 	ldbu	r2,-24(fp)
80021880:	100d883a 	mov	r6,r2
80021884:	000b883a 	mov	r5,zero
80021888:	e13ffd17 	ldw	r4,-12(fp)
8002188c:	00210ec0 	call	800210ec <alt_avalon_i2c_send_address>
80021890:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
80021894:	e0bffe17 	ldw	r2,-8(fp)
80021898:	1000271e 	bne	r2,zero,80021938 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
8002189c:	00000f06 	br	800218dc <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
800218a0:	e0bffc17 	ldw	r2,-16(fp)
800218a4:	10800003 	ldbu	r2,0(r2)
800218a8:	10803fcc 	andi	r2,r2,255
800218ac:	000f883a 	mov	r7,zero
800218b0:	000d883a 	mov	r6,zero
800218b4:	100b883a 	mov	r5,r2
800218b8:	e13ffd17 	ldw	r4,-12(fp)
800218bc:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
800218c0:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
800218c4:	e0bffc17 	ldw	r2,-16(fp)
800218c8:	10800044 	addi	r2,r2,1
800218cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
800218d0:	e0bffb17 	ldw	r2,-20(fp)
800218d4:	10bfffc4 	addi	r2,r2,-1
800218d8:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
800218dc:	e0bffb17 	ldw	r2,-20(fp)
800218e0:	108000b0 	cmpltui	r2,r2,2
800218e4:	1000021e 	bne	r2,zero,800218f0 <alt_avalon_i2c_master_transmit+0xf0>
800218e8:	e0bffe17 	ldw	r2,-8(fp)
800218ec:	103fec26 	beq	r2,zero,800218a0 <_gp+0xffff0b2c>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
800218f0:	e0bffe17 	ldw	r2,-8(fp)
800218f4:	1000101e 	bne	r2,zero,80021938 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
800218f8:	e0bffc17 	ldw	r2,-16(fp)
800218fc:	10800003 	ldbu	r2,0(r2)
80021900:	10803fcc 	andi	r2,r2,255
80021904:	e0fff903 	ldbu	r3,-28(fp)
80021908:	180f883a 	mov	r7,r3
8002190c:	000d883a 	mov	r6,zero
80021910:	100b883a 	mov	r5,r2
80021914:	e13ffd17 	ldw	r4,-12(fp)
80021918:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
8002191c:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
80021920:	e0bffc17 	ldw	r2,-16(fp)
80021924:	10800044 	addi	r2,r2,1
80021928:	e0bffc15 	stw	r2,-16(fp)
            --size;
8002192c:	e0bffb17 	ldw	r2,-20(fp)
80021930:	10bfffc4 	addi	r2,r2,-1
80021934:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
80021938:	e0bff903 	ldbu	r2,-28(fp)
8002193c:	1000101e 	bne	r2,zero,80021980 <alt_avalon_i2c_master_transmit+0x180>
80021940:	e0bffe17 	ldw	r2,-8(fp)
80021944:	10001726 	beq	r2,zero,800219a4 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
80021948:	00000d06 	br	80021980 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
8002194c:	e0bfff17 	ldw	r2,-4(fp)
80021950:	108002a8 	cmpgeui	r2,r2,10
80021954:	1000021e 	bne	r2,zero,80021960 <alt_avalon_i2c_master_transmit+0x160>
80021958:	0109c404 	movi	r4,10000
8002195c:	0023b240 	call	80023b24 <alt_busy_sleep>
            if (--timeout == 0)
80021960:	e0bfff17 	ldw	r2,-4(fp)
80021964:	10bfffc4 	addi	r2,r2,-1
80021968:	e0bfff15 	stw	r2,-4(fp)
8002196c:	e0bfff17 	ldw	r2,-4(fp)
80021970:	1000031e 	bne	r2,zero,80021980 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
80021974:	00bfff84 	movi	r2,-2
80021978:	e0bffe15 	stw	r2,-8(fp)
               break;
8002197c:	00000306 	br	8002198c <alt_avalon_i2c_master_transmit+0x18c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021980:	e13ffd17 	ldw	r4,-12(fp)
80021984:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
80021988:	103ff01e 	bne	r2,zero,8002194c <_gp+0xffff0bd8>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
8002198c:	e0bffe04 	addi	r2,fp,-8
80021990:	100b883a 	mov	r5,r2
80021994:	e13ffd17 	ldw	r4,-12(fp)
80021998:	00212480 	call	80021248 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
8002199c:	e13ffd17 	ldw	r4,-12(fp)
800219a0:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>
    }


    return status;
800219a4:	e0bffe17 	ldw	r2,-8(fp)
}
800219a8:	e037883a 	mov	sp,fp
800219ac:	dfc00117 	ldw	ra,4(sp)
800219b0:	df000017 	ldw	fp,0(sp)
800219b4:	dec00204 	addi	sp,sp,8
800219b8:	f800283a 	ret

800219bc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
800219bc:	defff604 	addi	sp,sp,-40
800219c0:	dfc00915 	stw	ra,36(sp)
800219c4:	df000815 	stw	fp,32(sp)
800219c8:	df000804 	addi	fp,sp,32
800219cc:	e13ffc15 	stw	r4,-16(fp)
800219d0:	e17ffb15 	stw	r5,-20(fp)
800219d4:	e1bffa15 	stw	r6,-24(fp)
800219d8:	3807883a 	mov	r3,r7
800219dc:	e0800217 	ldw	r2,8(fp)
800219e0:	e0fff905 	stb	r3,-28(fp)
800219e4:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
800219e8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
800219ec:	e0bffa17 	ldw	r2,-24(fp)
800219f0:	1089c424 	muli	r2,r2,10000
800219f4:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
800219f8:	e0bffc17 	ldw	r2,-16(fp)
800219fc:	10800717 	ldw	r2,28(r2)
80021a00:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
80021a04:	e0bffa17 	ldw	r2,-24(fp)
80021a08:	1000021e 	bne	r2,zero,80021a14 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
80021a0c:	0005883a 	mov	r2,zero
80021a10:	00006706 	br	80021bb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
80021a14:	e0bffc17 	ldw	r2,-16(fp)
80021a18:	10c00617 	ldw	r3,24(r2)
80021a1c:	00a000b4 	movhi	r2,32770
80021a20:	1081c704 	addi	r2,r2,1820
80021a24:	18800226 	beq	r3,r2,80021a30 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
80021a28:	00bfff44 	movi	r2,-3
80021a2c:	00006006 	br	80021bb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
80021a30:	e0bff903 	ldbu	r2,-28(fp)
80021a34:	10000a1e 	bne	r2,zero,80021a60 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
80021a38:	e13ffc17 	ldw	r4,-16(fp)
80021a3c:	0020a980 	call	80020a98 <alt_avalon_i2c_enable>
80021a40:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
80021a44:	e0bfff17 	ldw	r2,-4(fp)
80021a48:	10000226 	beq	r2,zero,80021a54 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
80021a4c:	e0bfff17 	ldw	r2,-4(fp)
80021a50:	00005706 	br	80021bb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021a54:	01400704 	movi	r5,28
80021a58:	e13ffc17 	ldw	r4,-16(fp)
80021a5c:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
80021a60:	e0bff903 	ldbu	r2,-28(fp)
80021a64:	100d883a 	mov	r6,r2
80021a68:	000b883a 	mov	r5,zero
80021a6c:	e13ffc17 	ldw	r4,-16(fp)
80021a70:	00210ec0 	call	800210ec <alt_avalon_i2c_send_address>
80021a74:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
80021a78:	e0bfff17 	ldw	r2,-4(fp)
80021a7c:	1000271e 	bne	r2,zero,80021b1c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
80021a80:	00000f06 	br	80021ac0 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
80021a84:	e0bffb17 	ldw	r2,-20(fp)
80021a88:	10800003 	ldbu	r2,0(r2)
80021a8c:	10803fcc 	andi	r2,r2,255
80021a90:	000f883a 	mov	r7,zero
80021a94:	000d883a 	mov	r6,zero
80021a98:	100b883a 	mov	r5,r2
80021a9c:	e13ffc17 	ldw	r4,-16(fp)
80021aa0:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021aa4:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
80021aa8:	e0bffb17 	ldw	r2,-20(fp)
80021aac:	10800044 	addi	r2,r2,1
80021ab0:	e0bffb15 	stw	r2,-20(fp)
            --size;
80021ab4:	e0bffa17 	ldw	r2,-24(fp)
80021ab8:	10bfffc4 	addi	r2,r2,-1
80021abc:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
80021ac0:	e0bffa17 	ldw	r2,-24(fp)
80021ac4:	108000b0 	cmpltui	r2,r2,2
80021ac8:	1000021e 	bne	r2,zero,80021ad4 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
80021acc:	e0bfff17 	ldw	r2,-4(fp)
80021ad0:	103fec26 	beq	r2,zero,80021a84 <_gp+0xffff0d10>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
80021ad4:	e0bfff17 	ldw	r2,-4(fp)
80021ad8:	1000101e 	bne	r2,zero,80021b1c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
80021adc:	e0bffb17 	ldw	r2,-20(fp)
80021ae0:	10800003 	ldbu	r2,0(r2)
80021ae4:	10803fcc 	andi	r2,r2,255
80021ae8:	e0fff803 	ldbu	r3,-32(fp)
80021aec:	180f883a 	mov	r7,r3
80021af0:	000d883a 	mov	r6,zero
80021af4:	100b883a 	mov	r5,r2
80021af8:	e13ffc17 	ldw	r4,-16(fp)
80021afc:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021b00:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
80021b04:	e0bffb17 	ldw	r2,-20(fp)
80021b08:	10800044 	addi	r2,r2,1
80021b0c:	e0bffb15 	stw	r2,-20(fp)
            --size;
80021b10:	e0bffa17 	ldw	r2,-24(fp)
80021b14:	10bfffc4 	addi	r2,r2,-1
80021b18:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
80021b1c:	e0bfff17 	ldw	r2,-4(fp)
80021b20:	10001426 	beq	r2,zero,80021b74 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
80021b24:	00000d06 	br	80021b5c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
80021b28:	e0bffe17 	ldw	r2,-8(fp)
80021b2c:	108002a8 	cmpgeui	r2,r2,10
80021b30:	1000021e 	bne	r2,zero,80021b3c <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
80021b34:	0109c404 	movi	r4,10000
80021b38:	0023b240 	call	80023b24 <alt_busy_sleep>
            if (--timeout == 0)
80021b3c:	e0bffe17 	ldw	r2,-8(fp)
80021b40:	10bfffc4 	addi	r2,r2,-1
80021b44:	e0bffe15 	stw	r2,-8(fp)
80021b48:	e0bffe17 	ldw	r2,-8(fp)
80021b4c:	1000031e 	bne	r2,zero,80021b5c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
80021b50:	00bfff84 	movi	r2,-2
80021b54:	e0bfff15 	stw	r2,-4(fp)
               break;
80021b58:	00000306 	br	80021b68 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021b5c:	e13ffc17 	ldw	r4,-16(fp)
80021b60:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
80021b64:	103ff01e 	bne	r2,zero,80021b28 <_gp+0xffff0db4>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
80021b68:	e13ffc17 	ldw	r4,-16(fp)
80021b6c:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>
80021b70:	00000e06 	br	80021bac <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
80021b74:	e0bff803 	ldbu	r2,-32(fp)
80021b78:	10000c26 	beq	r2,zero,80021bac <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021b7c:	01400704 	movi	r5,28
80021b80:	e13ffc17 	ldw	r4,-16(fp)
80021b84:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
80021b88:	000b883a 	mov	r5,zero
80021b8c:	e13ffc17 	ldw	r4,-16(fp)
80021b90:	00222a80 	call	800222a8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
80021b94:	e0bffd17 	ldw	r2,-12(fp)
80021b98:	00c00044 	movi	r3,1
80021b9c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
80021ba0:	01400044 	movi	r5,1
80021ba4:	e13ffc17 	ldw	r4,-16(fp)
80021ba8:	00221000 	call	80022100 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
80021bac:	e0bfff17 	ldw	r2,-4(fp)
}
80021bb0:	e037883a 	mov	sp,fp
80021bb4:	dfc00117 	ldw	ra,4(sp)
80021bb8:	df000017 	ldw	fp,0(sp)
80021bbc:	dec00204 	addi	sp,sp,8
80021bc0:	f800283a 	ret

80021bc4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
80021bc4:	defff404 	addi	sp,sp,-48
80021bc8:	dfc00b15 	stw	ra,44(sp)
80021bcc:	df000a15 	stw	fp,40(sp)
80021bd0:	df000a04 	addi	fp,sp,40
80021bd4:	e13ffa15 	stw	r4,-24(fp)
80021bd8:	e17ff915 	stw	r5,-28(fp)
80021bdc:	e1bff815 	stw	r6,-32(fp)
80021be0:	3807883a 	mov	r3,r7
80021be4:	e0800217 	ldw	r2,8(fp)
80021be8:	e0fff705 	stb	r3,-36(fp)
80021bec:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
80021bf0:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
80021bf4:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
80021bf8:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
80021bfc:	e0bff817 	ldw	r2,-32(fp)
80021c00:	1000021e 	bne	r2,zero,80021c0c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
80021c04:	0005883a 	mov	r2,zero
80021c08:	00006c06 	br	80021dbc <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
80021c0c:	e0bff703 	ldbu	r2,-36(fp)
80021c10:	10000a1e 	bne	r2,zero,80021c3c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
80021c14:	e13ffa17 	ldw	r4,-24(fp)
80021c18:	0020a980 	call	80020a98 <alt_avalon_i2c_enable>
80021c1c:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
80021c20:	e0bffc17 	ldw	r2,-16(fp)
80021c24:	10000226 	beq	r2,zero,80021c30 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
80021c28:	e0bffc17 	ldw	r2,-16(fp)
80021c2c:	00006306 	br	80021dbc <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021c30:	01400704 	movi	r5,28
80021c34:	e13ffa17 	ldw	r4,-24(fp)
80021c38:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
80021c3c:	e0bff703 	ldbu	r2,-36(fp)
80021c40:	100d883a 	mov	r6,r2
80021c44:	01400044 	movi	r5,1
80021c48:	e13ffa17 	ldw	r4,-24(fp)
80021c4c:	00210ec0 	call	800210ec <alt_avalon_i2c_send_address>
80021c50:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
80021c54:	e0bffc17 	ldw	r2,-16(fp)
80021c58:	1000341e 	bne	r2,zero,80021d2c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
80021c5c:	00001906 	br	80021cc4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
80021c60:	000f883a 	mov	r7,zero
80021c64:	000d883a 	mov	r6,zero
80021c68:	000b883a 	mov	r5,zero
80021c6c:	e13ffa17 	ldw	r4,-24(fp)
80021c70:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021c74:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
80021c78:	e0bffd17 	ldw	r2,-12(fp)
80021c7c:	10800044 	addi	r2,r2,1
80021c80:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
80021c84:	e0bffc17 	ldw	r2,-16(fp)
80021c88:	10000e1e 	bne	r2,zero,80021cc4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
80021c8c:	e0bffb04 	addi	r2,fp,-20
80021c90:	100f883a 	mov	r7,r2
80021c94:	000d883a 	mov	r6,zero
80021c98:	e17ff917 	ldw	r5,-28(fp)
80021c9c:	e13ffa17 	ldw	r4,-24(fp)
80021ca0:	0020eac0 	call	80020eac <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
80021ca4:	e0bffb17 	ldw	r2,-20(fp)
80021ca8:	e0fff917 	ldw	r3,-28(fp)
80021cac:	1885883a 	add	r2,r3,r2
80021cb0:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
80021cb4:	e0bffb17 	ldw	r2,-20(fp)
80021cb8:	e0fffe17 	ldw	r3,-8(fp)
80021cbc:	1885883a 	add	r2,r3,r2
80021cc0:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
80021cc4:	e0bff817 	ldw	r2,-32(fp)
80021cc8:	10bfffc4 	addi	r2,r2,-1
80021ccc:	e0fffd17 	ldw	r3,-12(fp)
80021cd0:	1880022e 	bgeu	r3,r2,80021cdc <alt_avalon_i2c_master_receive+0x118>
80021cd4:	e0bffc17 	ldw	r2,-16(fp)
80021cd8:	103fe126 	beq	r2,zero,80021c60 <_gp+0xffff0eec>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
80021cdc:	e0bffc17 	ldw	r2,-16(fp)
80021ce0:	1000121e 	bne	r2,zero,80021d2c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
80021ce4:	e0bff603 	ldbu	r2,-40(fp)
80021ce8:	100f883a 	mov	r7,r2
80021cec:	000d883a 	mov	r6,zero
80021cf0:	000b883a 	mov	r5,zero
80021cf4:	e13ffa17 	ldw	r4,-24(fp)
80021cf8:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021cfc:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
80021d00:	00000a06 	br	80021d2c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
80021d04:	e17ff917 	ldw	r5,-28(fp)
80021d08:	e13ffa17 	ldw	r4,-24(fp)
80021d0c:	0020f580 	call	80020f58 <alt_avalon_i2c_rx_read>
80021d10:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
80021d14:	e0bff917 	ldw	r2,-28(fp)
80021d18:	10800044 	addi	r2,r2,1
80021d1c:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
80021d20:	e0bffe17 	ldw	r2,-8(fp)
80021d24:	10800044 	addi	r2,r2,1
80021d28:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
80021d2c:	e0fffe17 	ldw	r3,-8(fp)
80021d30:	e0bff817 	ldw	r2,-32(fp)
80021d34:	1880022e 	bgeu	r3,r2,80021d40 <alt_avalon_i2c_master_receive+0x17c>
80021d38:	e0bffc17 	ldw	r2,-16(fp)
80021d3c:	103ff126 	beq	r2,zero,80021d04 <_gp+0xffff0f90>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
80021d40:	e0bff603 	ldbu	r2,-40(fp)
80021d44:	1000021e 	bne	r2,zero,80021d50 <alt_avalon_i2c_master_receive+0x18c>
80021d48:	e0bffc17 	ldw	r2,-16(fp)
80021d4c:	10001a26 	beq	r2,zero,80021db8 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
80021d50:	e0bff817 	ldw	r2,-32(fp)
80021d54:	1089c424 	muli	r2,r2,10000
80021d58:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021d5c:	00000d06 	br	80021d94 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
80021d60:	e0bfff17 	ldw	r2,-4(fp)
80021d64:	108002a8 	cmpgeui	r2,r2,10
80021d68:	1000021e 	bne	r2,zero,80021d74 <alt_avalon_i2c_master_receive+0x1b0>
80021d6c:	0109c404 	movi	r4,10000
80021d70:	0023b240 	call	80023b24 <alt_busy_sleep>
            if (--timeout == 0)
80021d74:	e0bfff17 	ldw	r2,-4(fp)
80021d78:	10bfffc4 	addi	r2,r2,-1
80021d7c:	e0bfff15 	stw	r2,-4(fp)
80021d80:	e0bfff17 	ldw	r2,-4(fp)
80021d84:	1000031e 	bne	r2,zero,80021d94 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
80021d88:	00bfff84 	movi	r2,-2
80021d8c:	e0bffc15 	stw	r2,-16(fp)
               break;
80021d90:	00000306 	br	80021da0 <alt_avalon_i2c_master_receive+0x1dc>
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021d94:	e13ffa17 	ldw	r4,-24(fp)
80021d98:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
80021d9c:	103ff01e 	bne	r2,zero,80021d60 <_gp+0xffff0fec>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
80021da0:	e0bffc04 	addi	r2,fp,-16
80021da4:	100b883a 	mov	r5,r2
80021da8:	e13ffa17 	ldw	r4,-24(fp)
80021dac:	00212480 	call	80021248 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
80021db0:	e13ffa17 	ldw	r4,-24(fp)
80021db4:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>
    }

    return status;
80021db8:	e0bffc17 	ldw	r2,-16(fp)
}
80021dbc:	e037883a 	mov	sp,fp
80021dc0:	dfc00117 	ldw	ra,4(sp)
80021dc4:	df000017 	ldw	fp,0(sp)
80021dc8:	dec00204 	addi	sp,sp,8
80021dcc:	f800283a 	ret

80021dd0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
80021dd0:	defff504 	addi	sp,sp,-44
80021dd4:	dfc00a15 	stw	ra,40(sp)
80021dd8:	df000915 	stw	fp,36(sp)
80021ddc:	df000904 	addi	fp,sp,36
80021de0:	e13ffb15 	stw	r4,-20(fp)
80021de4:	e17ffa15 	stw	r5,-24(fp)
80021de8:	e1bff915 	stw	r6,-28(fp)
80021dec:	3807883a 	mov	r3,r7
80021df0:	e0800217 	ldw	r2,8(fp)
80021df4:	e0fff805 	stb	r3,-32(fp)
80021df8:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
80021dfc:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
80021e00:	e0bffb17 	ldw	r2,-20(fp)
80021e04:	10800717 	ldw	r2,28(r2)
80021e08:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
80021e0c:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
80021e10:	e0bff917 	ldw	r2,-28(fp)
80021e14:	1000021e 	bne	r2,zero,80021e20 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
80021e18:	0005883a 	mov	r2,zero
80021e1c:	00006206 	br	80021fa8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
80021e20:	e0bffb17 	ldw	r2,-20(fp)
80021e24:	10c00617 	ldw	r3,24(r2)
80021e28:	00a000b4 	movhi	r2,32770
80021e2c:	1081c704 	addi	r2,r2,1820
80021e30:	18800226 	beq	r3,r2,80021e3c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
80021e34:	00bfff44 	movi	r2,-3
80021e38:	00005b06 	br	80021fa8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
80021e3c:	e0bff803 	ldbu	r2,-32(fp)
80021e40:	10000a1e 	bne	r2,zero,80021e6c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
80021e44:	e13ffb17 	ldw	r4,-20(fp)
80021e48:	0020a980 	call	80020a98 <alt_avalon_i2c_enable>
80021e4c:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
80021e50:	e0bfff17 	ldw	r2,-4(fp)
80021e54:	10000226 	beq	r2,zero,80021e60 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
80021e58:	e0bfff17 	ldw	r2,-4(fp)
80021e5c:	00005206 	br	80021fa8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021e60:	01400704 	movi	r5,28
80021e64:	e13ffb17 	ldw	r4,-20(fp)
80021e68:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
80021e6c:	e0bff803 	ldbu	r2,-32(fp)
80021e70:	100d883a 	mov	r6,r2
80021e74:	01400044 	movi	r5,1
80021e78:	e13ffb17 	ldw	r4,-20(fp)
80021e7c:	00210ec0 	call	800210ec <alt_avalon_i2c_send_address>
80021e80:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
80021e84:	e0bfff17 	ldw	r2,-4(fp)
80021e88:	1000191e 	bne	r2,zero,80021ef0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
80021e8c:	00000906 	br	80021eb4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
80021e90:	000f883a 	mov	r7,zero
80021e94:	000d883a 	mov	r6,zero
80021e98:	000b883a 	mov	r5,zero
80021e9c:	e13ffb17 	ldw	r4,-20(fp)
80021ea0:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021ea4:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
80021ea8:	e0bffd17 	ldw	r2,-12(fp)
80021eac:	10800044 	addi	r2,r2,1
80021eb0:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
80021eb4:	e0bff917 	ldw	r2,-28(fp)
80021eb8:	10bfffc4 	addi	r2,r2,-1
80021ebc:	e0fffd17 	ldw	r3,-12(fp)
80021ec0:	1880022e 	bgeu	r3,r2,80021ecc <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
80021ec4:	e0bfff17 	ldw	r2,-4(fp)
80021ec8:	103ff126 	beq	r2,zero,80021e90 <_gp+0xffff111c>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
80021ecc:	e0bfff17 	ldw	r2,-4(fp)
80021ed0:	1000071e 	bne	r2,zero,80021ef0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
80021ed4:	e0bff703 	ldbu	r2,-36(fp)
80021ed8:	100f883a 	mov	r7,r2
80021edc:	000d883a 	mov	r6,zero
80021ee0:	000b883a 	mov	r5,zero
80021ee4:	e13ffb17 	ldw	r4,-20(fp)
80021ee8:	00210000 	call	80021000 <alt_avalon_i2c_cmd_write>
80021eec:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
80021ef0:	e0bfff17 	ldw	r2,-4(fp)
80021ef4:	10001726 	beq	r2,zero,80021f54 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
80021ef8:	e0bff917 	ldw	r2,-28(fp)
80021efc:	1089c424 	muli	r2,r2,10000
80021f00:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021f04:	00000d06 	br	80021f3c <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
80021f08:	e0bffe17 	ldw	r2,-8(fp)
80021f0c:	108002a8 	cmpgeui	r2,r2,10
80021f10:	1000021e 	bne	r2,zero,80021f1c <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
80021f14:	0109c404 	movi	r4,10000
80021f18:	0023b240 	call	80023b24 <alt_busy_sleep>
            if (--timeout == 0)
80021f1c:	e0bffe17 	ldw	r2,-8(fp)
80021f20:	10bfffc4 	addi	r2,r2,-1
80021f24:	e0bffe15 	stw	r2,-8(fp)
80021f28:	e0bffe17 	ldw	r2,-8(fp)
80021f2c:	1000031e 	bne	r2,zero,80021f3c <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
80021f30:	00bfff84 	movi	r2,-2
80021f34:	e0bfff15 	stw	r2,-4(fp)
               break;
80021f38:	00000306 	br	80021f48 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
        while (alt_avalon_i2c_is_busy(i2c_dev))
80021f3c:	e13ffb17 	ldw	r4,-20(fp)
80021f40:	0020e680 	call	80020e68 <alt_avalon_i2c_is_busy>
80021f44:	103ff01e 	bne	r2,zero,80021f08 <_gp+0xffff1194>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
80021f48:	e13ffb17 	ldw	r4,-20(fp)
80021f4c:	0020b300 	call	80020b30 <alt_avalon_i2c_disable>
80021f50:	00001406 	br	80021fa4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
80021f54:	e0bff703 	ldbu	r2,-36(fp)
80021f58:	10001226 	beq	r2,zero,80021fa4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
80021f5c:	01400704 	movi	r5,28
80021f60:	e13ffb17 	ldw	r4,-20(fp)
80021f64:	00220580 	call	80022058 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
80021f68:	000b883a 	mov	r5,zero
80021f6c:	e13ffb17 	ldw	r4,-20(fp)
80021f70:	00221f80 	call	800221f8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
80021f74:	e0bffc17 	ldw	r2,-16(fp)
80021f78:	00c00084 	movi	r3,2
80021f7c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
80021f80:	e0bffc17 	ldw	r2,-16(fp)
80021f84:	e0fffa17 	ldw	r3,-24(fp)
80021f88:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
80021f8c:	e0bffc17 	ldw	r2,-16(fp)
80021f90:	e0fff917 	ldw	r3,-28(fp)
80021f94:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
80021f98:	01400084 	movi	r5,2
80021f9c:	e13ffb17 	ldw	r4,-20(fp)
80021fa0:	00221000 	call	80022100 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
80021fa4:	e0bfff17 	ldw	r2,-4(fp)
}
80021fa8:	e037883a 	mov	sp,fp
80021fac:	dfc00117 	ldw	ra,4(sp)
80021fb0:	df000017 	ldw	fp,0(sp)
80021fb4:	dec00204 	addi	sp,sp,8
80021fb8:	f800283a 	ret

80021fbc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
80021fbc:	defffd04 	addi	sp,sp,-12
80021fc0:	df000215 	stw	fp,8(sp)
80021fc4:	df000204 	addi	fp,sp,8
80021fc8:	e13fff15 	stw	r4,-4(fp)
80021fcc:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
80021fd0:	e0bfff17 	ldw	r2,-4(fp)
80021fd4:	10800317 	ldw	r2,12(r2)
80021fd8:	10800404 	addi	r2,r2,16
80021fdc:	10c00037 	ldwio	r3,0(r2)
80021fe0:	e0bfff17 	ldw	r2,-4(fp)
80021fe4:	10800317 	ldw	r2,12(r2)
80021fe8:	10800304 	addi	r2,r2,12
80021fec:	10800037 	ldwio	r2,0(r2)
80021ff0:	1884703a 	and	r2,r3,r2
80021ff4:	1007883a 	mov	r3,r2
80021ff8:	e0bffe17 	ldw	r2,-8(fp)
80021ffc:	10c00015 	stw	r3,0(r2)
}
80022000:	0001883a 	nop
80022004:	e037883a 	mov	sp,fp
80022008:	df000017 	ldw	fp,0(sp)
8002200c:	dec00104 	addi	sp,sp,4
80022010:	f800283a 	ret

80022014 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
80022014:	defffd04 	addi	sp,sp,-12
80022018:	df000215 	stw	fp,8(sp)
8002201c:	df000204 	addi	fp,sp,8
80022020:	e13fff15 	stw	r4,-4(fp)
80022024:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
80022028:	e0bfff17 	ldw	r2,-4(fp)
8002202c:	10800317 	ldw	r2,12(r2)
80022030:	10800404 	addi	r2,r2,16
80022034:	10800037 	ldwio	r2,0(r2)
80022038:	1007883a 	mov	r3,r2
8002203c:	e0bffe17 	ldw	r2,-8(fp)
80022040:	10c00015 	stw	r3,0(r2)
}
80022044:	0001883a 	nop
80022048:	e037883a 	mov	sp,fp
8002204c:	df000017 	ldw	fp,0(sp)
80022050:	dec00104 	addi	sp,sp,4
80022054:	f800283a 	ret

80022058 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
80022058:	defffd04 	addi	sp,sp,-12
8002205c:	df000215 	stw	fp,8(sp)
80022060:	df000204 	addi	fp,sp,8
80022064:	e13fff15 	stw	r4,-4(fp)
80022068:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
8002206c:	e0bfff17 	ldw	r2,-4(fp)
80022070:	10800317 	ldw	r2,12(r2)
80022074:	10800404 	addi	r2,r2,16
80022078:	e0fffe17 	ldw	r3,-8(fp)
8002207c:	10c00035 	stwio	r3,0(r2)
}
80022080:	0001883a 	nop
80022084:	e037883a 	mov	sp,fp
80022088:	df000017 	ldw	fp,0(sp)
8002208c:	dec00104 	addi	sp,sp,4
80022090:	f800283a 	ret

80022094 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
80022094:	defffb04 	addi	sp,sp,-20
80022098:	dfc00415 	stw	ra,16(sp)
8002209c:	df000315 	stw	fp,12(sp)
800220a0:	df000304 	addi	fp,sp,12
800220a4:	e13ffe15 	stw	r4,-8(fp)
800220a8:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
800220ac:	e0bfff04 	addi	r2,fp,-4
800220b0:	100b883a 	mov	r5,r2
800220b4:	e13ffe17 	ldw	r4,-8(fp)
800220b8:	00221680 	call	80022168 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
800220bc:	e0bffd17 	ldw	r2,-12(fp)
800220c0:	0086303a 	nor	r3,zero,r2
800220c4:	e0bfff17 	ldw	r2,-4(fp)
800220c8:	1884703a 	and	r2,r3,r2
800220cc:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
800220d0:	e0bffe17 	ldw	r2,-8(fp)
800220d4:	10800317 	ldw	r2,12(r2)
800220d8:	10800304 	addi	r2,r2,12
800220dc:	e0ffff17 	ldw	r3,-4(fp)
800220e0:	18c007cc 	andi	r3,r3,31
800220e4:	10c00035 	stwio	r3,0(r2)
}
800220e8:	0001883a 	nop
800220ec:	e037883a 	mov	sp,fp
800220f0:	dfc00117 	ldw	ra,4(sp)
800220f4:	df000017 	ldw	fp,0(sp)
800220f8:	dec00204 	addi	sp,sp,8
800220fc:	f800283a 	ret

80022100 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
80022100:	defffb04 	addi	sp,sp,-20
80022104:	dfc00415 	stw	ra,16(sp)
80022108:	df000315 	stw	fp,12(sp)
8002210c:	df000304 	addi	fp,sp,12
80022110:	e13ffe15 	stw	r4,-8(fp)
80022114:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
80022118:	e0bfff04 	addi	r2,fp,-4
8002211c:	100b883a 	mov	r5,r2
80022120:	e13ffe17 	ldw	r4,-8(fp)
80022124:	00221680 	call	80022168 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
80022128:	e0ffff17 	ldw	r3,-4(fp)
8002212c:	e0bffd17 	ldw	r2,-12(fp)
80022130:	1884b03a 	or	r2,r3,r2
80022134:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
80022138:	e0bffe17 	ldw	r2,-8(fp)
8002213c:	10800317 	ldw	r2,12(r2)
80022140:	10800304 	addi	r2,r2,12
80022144:	e0ffff17 	ldw	r3,-4(fp)
80022148:	18c007cc 	andi	r3,r3,31
8002214c:	10c00035 	stwio	r3,0(r2)
}
80022150:	0001883a 	nop
80022154:	e037883a 	mov	sp,fp
80022158:	dfc00117 	ldw	ra,4(sp)
8002215c:	df000017 	ldw	fp,0(sp)
80022160:	dec00204 	addi	sp,sp,8
80022164:	f800283a 	ret

80022168 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
80022168:	defffd04 	addi	sp,sp,-12
8002216c:	df000215 	stw	fp,8(sp)
80022170:	df000204 	addi	fp,sp,8
80022174:	e13fff15 	stw	r4,-4(fp)
80022178:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
8002217c:	e0bfff17 	ldw	r2,-4(fp)
80022180:	10800317 	ldw	r2,12(r2)
80022184:	10800304 	addi	r2,r2,12
80022188:	10800037 	ldwio	r2,0(r2)
8002218c:	10c007cc 	andi	r3,r2,31
80022190:	e0bffe17 	ldw	r2,-8(fp)
80022194:	10c00015 	stw	r3,0(r2)
}
80022198:	0001883a 	nop
8002219c:	e037883a 	mov	sp,fp
800221a0:	df000017 	ldw	fp,0(sp)
800221a4:	dec00104 	addi	sp,sp,4
800221a8:	f800283a 	ret

800221ac <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
800221ac:	defffd04 	addi	sp,sp,-12
800221b0:	df000215 	stw	fp,8(sp)
800221b4:	df000204 	addi	fp,sp,8
800221b8:	e13fff15 	stw	r4,-4(fp)
800221bc:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
800221c0:	e0bfff17 	ldw	r2,-4(fp)
800221c4:	10800317 	ldw	r2,12(r2)
800221c8:	10800204 	addi	r2,r2,8
800221cc:	10800037 	ldwio	r2,0(r2)
800221d0:	1005d13a 	srai	r2,r2,4
800221d4:	108000cc 	andi	r2,r2,3
800221d8:	1007883a 	mov	r3,r2
800221dc:	e0bffe17 	ldw	r2,-8(fp)
800221e0:	10c00015 	stw	r3,0(r2)
}
800221e4:	0001883a 	nop
800221e8:	e037883a 	mov	sp,fp
800221ec:	df000017 	ldw	fp,0(sp)
800221f0:	dec00104 	addi	sp,sp,4
800221f4:	f800283a 	ret

800221f8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
800221f8:	defffd04 	addi	sp,sp,-12
800221fc:	df000215 	stw	fp,8(sp)
80022200:	df000204 	addi	fp,sp,8
80022204:	e13fff15 	stw	r4,-4(fp)
80022208:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
8002220c:	e0bfff17 	ldw	r2,-4(fp)
80022210:	10800317 	ldw	r2,12(r2)
80022214:	10800204 	addi	r2,r2,8
80022218:	e0ffff17 	ldw	r3,-4(fp)
8002221c:	18c00317 	ldw	r3,12(r3)
80022220:	18c00204 	addi	r3,r3,8
80022224:	18c00037 	ldwio	r3,0(r3)
80022228:	1809883a 	mov	r4,r3
8002222c:	00fff3c4 	movi	r3,-49
80022230:	20c8703a 	and	r4,r4,r3
80022234:	e0fffe17 	ldw	r3,-8(fp)
80022238:	1806913a 	slli	r3,r3,4
8002223c:	18c00c0c 	andi	r3,r3,48
80022240:	20c6b03a 	or	r3,r4,r3
80022244:	10c00035 	stwio	r3,0(r2)
}
80022248:	0001883a 	nop
8002224c:	e037883a 	mov	sp,fp
80022250:	df000017 	ldw	fp,0(sp)
80022254:	dec00104 	addi	sp,sp,4
80022258:	f800283a 	ret

8002225c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
8002225c:	defffd04 	addi	sp,sp,-12
80022260:	df000215 	stw	fp,8(sp)
80022264:	df000204 	addi	fp,sp,8
80022268:	e13fff15 	stw	r4,-4(fp)
8002226c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
80022270:	e0bfff17 	ldw	r2,-4(fp)
80022274:	10800317 	ldw	r2,12(r2)
80022278:	10800204 	addi	r2,r2,8
8002227c:	10800037 	ldwio	r2,0(r2)
80022280:	1005d0ba 	srai	r2,r2,2
80022284:	108000cc 	andi	r2,r2,3
80022288:	1007883a 	mov	r3,r2
8002228c:	e0bffe17 	ldw	r2,-8(fp)
80022290:	10c00015 	stw	r3,0(r2)
}
80022294:	0001883a 	nop
80022298:	e037883a 	mov	sp,fp
8002229c:	df000017 	ldw	fp,0(sp)
800222a0:	dec00104 	addi	sp,sp,4
800222a4:	f800283a 	ret

800222a8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
800222a8:	defffd04 	addi	sp,sp,-12
800222ac:	df000215 	stw	fp,8(sp)
800222b0:	df000204 	addi	fp,sp,8
800222b4:	e13fff15 	stw	r4,-4(fp)
800222b8:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
800222bc:	e0bfff17 	ldw	r2,-4(fp)
800222c0:	10800317 	ldw	r2,12(r2)
800222c4:	10800204 	addi	r2,r2,8
800222c8:	e0ffff17 	ldw	r3,-4(fp)
800222cc:	18c00317 	ldw	r3,12(r3)
800222d0:	18c00204 	addi	r3,r3,8
800222d4:	18c00037 	ldwio	r3,0(r3)
800222d8:	1809883a 	mov	r4,r3
800222dc:	00fffcc4 	movi	r3,-13
800222e0:	20c8703a 	and	r4,r4,r3
800222e4:	e0fffe17 	ldw	r3,-8(fp)
800222e8:	180690ba 	slli	r3,r3,2
800222ec:	18c0030c 	andi	r3,r3,12
800222f0:	20c6b03a 	or	r3,r4,r3
800222f4:	10c00035 	stwio	r3,0(r2)
}
800222f8:	0001883a 	nop
800222fc:	e037883a 	mov	sp,fp
80022300:	df000017 	ldw	fp,0(sp)
80022304:	dec00104 	addi	sp,sp,4
80022308:	f800283a 	ret

8002230c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8002230c:	defffa04 	addi	sp,sp,-24
80022310:	dfc00515 	stw	ra,20(sp)
80022314:	df000415 	stw	fp,16(sp)
80022318:	df000404 	addi	fp,sp,16
8002231c:	e13ffe15 	stw	r4,-8(fp)
80022320:	e17ffd15 	stw	r5,-12(fp)
80022324:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80022328:	e0bffe17 	ldw	r2,-8(fp)
8002232c:	10800017 	ldw	r2,0(r2)
80022330:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80022334:	e0bfff17 	ldw	r2,-4(fp)
80022338:	10c00a04 	addi	r3,r2,40
8002233c:	e0bffe17 	ldw	r2,-8(fp)
80022340:	10800217 	ldw	r2,8(r2)
80022344:	100f883a 	mov	r7,r2
80022348:	e1bffc17 	ldw	r6,-16(fp)
8002234c:	e17ffd17 	ldw	r5,-12(fp)
80022350:	1809883a 	mov	r4,r3
80022354:	00229400 	call	80022940 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80022358:	e037883a 	mov	sp,fp
8002235c:	dfc00117 	ldw	ra,4(sp)
80022360:	df000017 	ldw	fp,0(sp)
80022364:	dec00204 	addi	sp,sp,8
80022368:	f800283a 	ret

8002236c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8002236c:	defffa04 	addi	sp,sp,-24
80022370:	dfc00515 	stw	ra,20(sp)
80022374:	df000415 	stw	fp,16(sp)
80022378:	df000404 	addi	fp,sp,16
8002237c:	e13ffe15 	stw	r4,-8(fp)
80022380:	e17ffd15 	stw	r5,-12(fp)
80022384:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80022388:	e0bffe17 	ldw	r2,-8(fp)
8002238c:	10800017 	ldw	r2,0(r2)
80022390:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80022394:	e0bfff17 	ldw	r2,-4(fp)
80022398:	10c00a04 	addi	r3,r2,40
8002239c:	e0bffe17 	ldw	r2,-8(fp)
800223a0:	10800217 	ldw	r2,8(r2)
800223a4:	100f883a 	mov	r7,r2
800223a8:	e1bffc17 	ldw	r6,-16(fp)
800223ac:	e17ffd17 	ldw	r5,-12(fp)
800223b0:	1809883a 	mov	r4,r3
800223b4:	0022b5c0 	call	80022b5c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
800223b8:	e037883a 	mov	sp,fp
800223bc:	dfc00117 	ldw	ra,4(sp)
800223c0:	df000017 	ldw	fp,0(sp)
800223c4:	dec00204 	addi	sp,sp,8
800223c8:	f800283a 	ret

800223cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
800223cc:	defffc04 	addi	sp,sp,-16
800223d0:	dfc00315 	stw	ra,12(sp)
800223d4:	df000215 	stw	fp,8(sp)
800223d8:	df000204 	addi	fp,sp,8
800223dc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
800223e0:	e0bffe17 	ldw	r2,-8(fp)
800223e4:	10800017 	ldw	r2,0(r2)
800223e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
800223ec:	e0bfff17 	ldw	r2,-4(fp)
800223f0:	10c00a04 	addi	r3,r2,40
800223f4:	e0bffe17 	ldw	r2,-8(fp)
800223f8:	10800217 	ldw	r2,8(r2)
800223fc:	100b883a 	mov	r5,r2
80022400:	1809883a 	mov	r4,r3
80022404:	00227e80 	call	800227e8 <altera_avalon_jtag_uart_close>
}
80022408:	e037883a 	mov	sp,fp
8002240c:	dfc00117 	ldw	ra,4(sp)
80022410:	df000017 	ldw	fp,0(sp)
80022414:	dec00204 	addi	sp,sp,8
80022418:	f800283a 	ret

8002241c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8002241c:	defffa04 	addi	sp,sp,-24
80022420:	dfc00515 	stw	ra,20(sp)
80022424:	df000415 	stw	fp,16(sp)
80022428:	df000404 	addi	fp,sp,16
8002242c:	e13ffe15 	stw	r4,-8(fp)
80022430:	e17ffd15 	stw	r5,-12(fp)
80022434:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80022438:	e0bffe17 	ldw	r2,-8(fp)
8002243c:	10800017 	ldw	r2,0(r2)
80022440:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80022444:	e0bfff17 	ldw	r2,-4(fp)
80022448:	10800a04 	addi	r2,r2,40
8002244c:	e1bffc17 	ldw	r6,-16(fp)
80022450:	e17ffd17 	ldw	r5,-12(fp)
80022454:	1009883a 	mov	r4,r2
80022458:	00228500 	call	80022850 <altera_avalon_jtag_uart_ioctl>
}
8002245c:	e037883a 	mov	sp,fp
80022460:	dfc00117 	ldw	ra,4(sp)
80022464:	df000017 	ldw	fp,0(sp)
80022468:	dec00204 	addi	sp,sp,8
8002246c:	f800283a 	ret

80022470 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80022470:	defffa04 	addi	sp,sp,-24
80022474:	dfc00515 	stw	ra,20(sp)
80022478:	df000415 	stw	fp,16(sp)
8002247c:	df000404 	addi	fp,sp,16
80022480:	e13fff15 	stw	r4,-4(fp)
80022484:	e17ffe15 	stw	r5,-8(fp)
80022488:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8002248c:	e0bfff17 	ldw	r2,-4(fp)
80022490:	00c00044 	movi	r3,1
80022494:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80022498:	e0bfff17 	ldw	r2,-4(fp)
8002249c:	10800017 	ldw	r2,0(r2)
800224a0:	10800104 	addi	r2,r2,4
800224a4:	1007883a 	mov	r3,r2
800224a8:	e0bfff17 	ldw	r2,-4(fp)
800224ac:	10800817 	ldw	r2,32(r2)
800224b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
800224b4:	e0bffe17 	ldw	r2,-8(fp)
800224b8:	e0fffd17 	ldw	r3,-12(fp)
800224bc:	d8000015 	stw	zero,0(sp)
800224c0:	e1ffff17 	ldw	r7,-4(fp)
800224c4:	01a000b4 	movhi	r6,32770
800224c8:	31894c04 	addi	r6,r6,9520
800224cc:	180b883a 	mov	r5,r3
800224d0:	1009883a 	mov	r4,r2
800224d4:	00240340 	call	80024034 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
800224d8:	e0bfff17 	ldw	r2,-4(fp)
800224dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
800224e0:	e0bfff17 	ldw	r2,-4(fp)
800224e4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
800224e8:	d0e78017 	ldw	r3,-25088(gp)
800224ec:	e1ffff17 	ldw	r7,-4(fp)
800224f0:	01a000b4 	movhi	r6,32770
800224f4:	3189d004 	addi	r6,r6,10048
800224f8:	180b883a 	mov	r5,r3
800224fc:	1009883a 	mov	r4,r2
80022500:	00239cc0 	call	800239cc <alt_alarm_start>
80022504:	1000040e 	bge	r2,zero,80022518 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80022508:	e0ffff17 	ldw	r3,-4(fp)
8002250c:	00a00034 	movhi	r2,32768
80022510:	10bfffc4 	addi	r2,r2,-1
80022514:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80022518:	0001883a 	nop
8002251c:	e037883a 	mov	sp,fp
80022520:	dfc00117 	ldw	ra,4(sp)
80022524:	df000017 	ldw	fp,0(sp)
80022528:	dec00204 	addi	sp,sp,8
8002252c:	f800283a 	ret

80022530 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80022530:	defff704 	addi	sp,sp,-36
80022534:	df000815 	stw	fp,32(sp)
80022538:	df000804 	addi	fp,sp,32
8002253c:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80022540:	e0bff817 	ldw	r2,-32(fp)
80022544:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
80022548:	e0bffc17 	ldw	r2,-16(fp)
8002254c:	10800017 	ldw	r2,0(r2)
80022550:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
80022554:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80022558:	e0bffb17 	ldw	r2,-20(fp)
8002255c:	10800104 	addi	r2,r2,4
80022560:	10800037 	ldwio	r2,0(r2)
80022564:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80022568:	e0bffa17 	ldw	r2,-24(fp)
8002256c:	1080c00c 	andi	r2,r2,768
80022570:	10006d26 	beq	r2,zero,80022728 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80022574:	e0bffa17 	ldw	r2,-24(fp)
80022578:	1080400c 	andi	r2,r2,256
8002257c:	10003426 	beq	r2,zero,80022650 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80022580:	00800074 	movhi	r2,1
80022584:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80022588:	e0bffc17 	ldw	r2,-16(fp)
8002258c:	10800a17 	ldw	r2,40(r2)
80022590:	10800044 	addi	r2,r2,1
80022594:	1081ffcc 	andi	r2,r2,2047
80022598:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
8002259c:	e0bffc17 	ldw	r2,-16(fp)
800225a0:	10800b17 	ldw	r2,44(r2)
800225a4:	e0fff917 	ldw	r3,-28(fp)
800225a8:	18801426 	beq	r3,r2,800225fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
800225ac:	e0bffb17 	ldw	r2,-20(fp)
800225b0:	10800037 	ldwio	r2,0(r2)
800225b4:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
800225b8:	e0bffe17 	ldw	r2,-8(fp)
800225bc:	10a0000c 	andi	r2,r2,32768
800225c0:	10001026 	beq	r2,zero,80022604 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
800225c4:	e0bffc17 	ldw	r2,-16(fp)
800225c8:	10800a17 	ldw	r2,40(r2)
800225cc:	e0fffe17 	ldw	r3,-8(fp)
800225d0:	1809883a 	mov	r4,r3
800225d4:	e0fffc17 	ldw	r3,-16(fp)
800225d8:	1885883a 	add	r2,r3,r2
800225dc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
800225e0:	e0bffc17 	ldw	r2,-16(fp)
800225e4:	10800a17 	ldw	r2,40(r2)
800225e8:	10800044 	addi	r2,r2,1
800225ec:	10c1ffcc 	andi	r3,r2,2047
800225f0:	e0bffc17 	ldw	r2,-16(fp)
800225f4:	10c00a15 	stw	r3,40(r2)
      {
800225f8:	003fe306 	br	80022588 <_gp+0xffff1814>
          break;
800225fc:	0001883a 	nop
80022600:	00000106 	br	80022608 <altera_avalon_jtag_uart_irq+0xd8>
          break;
80022604:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80022608:	e0bffe17 	ldw	r2,-8(fp)
8002260c:	10bfffec 	andhi	r2,r2,65535
80022610:	10000f26 	beq	r2,zero,80022650 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80022614:	e0bffc17 	ldw	r2,-16(fp)
80022618:	10c00817 	ldw	r3,32(r2)
8002261c:	00bfff84 	movi	r2,-2
80022620:	1886703a 	and	r3,r3,r2
80022624:	e0bffc17 	ldw	r2,-16(fp)
80022628:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8002262c:	e0bffb17 	ldw	r2,-20(fp)
80022630:	10800104 	addi	r2,r2,4
80022634:	1007883a 	mov	r3,r2
80022638:	e0bffc17 	ldw	r2,-16(fp)
8002263c:	10800817 	ldw	r2,32(r2)
80022640:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80022644:	e0bffb17 	ldw	r2,-20(fp)
80022648:	10800104 	addi	r2,r2,4
8002264c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80022650:	e0bffa17 	ldw	r2,-24(fp)
80022654:	1080800c 	andi	r2,r2,512
80022658:	103fbf26 	beq	r2,zero,80022558 <_gp+0xffff17e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8002265c:	e0bffa17 	ldw	r2,-24(fp)
80022660:	1004d43a 	srli	r2,r2,16
80022664:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
80022668:	00001506 	br	800226c0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8002266c:	e0bffb17 	ldw	r2,-20(fp)
80022670:	e0fffc17 	ldw	r3,-16(fp)
80022674:	18c00d17 	ldw	r3,52(r3)
80022678:	e13ffc17 	ldw	r4,-16(fp)
8002267c:	20c7883a 	add	r3,r4,r3
80022680:	18c20e03 	ldbu	r3,2104(r3)
80022684:	18c03fcc 	andi	r3,r3,255
80022688:	18c0201c 	xori	r3,r3,128
8002268c:	18ffe004 	addi	r3,r3,-128
80022690:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80022694:	e0bffc17 	ldw	r2,-16(fp)
80022698:	10800d17 	ldw	r2,52(r2)
8002269c:	10800044 	addi	r2,r2,1
800226a0:	10c1ffcc 	andi	r3,r2,2047
800226a4:	e0bffc17 	ldw	r2,-16(fp)
800226a8:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
800226ac:	00800044 	movi	r2,1
800226b0:	e0bfff15 	stw	r2,-4(fp)

        space--;
800226b4:	e0bffd17 	ldw	r2,-12(fp)
800226b8:	10bfffc4 	addi	r2,r2,-1
800226bc:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
800226c0:	e0bffd17 	ldw	r2,-12(fp)
800226c4:	10000526 	beq	r2,zero,800226dc <altera_avalon_jtag_uart_irq+0x1ac>
800226c8:	e0bffc17 	ldw	r2,-16(fp)
800226cc:	10c00d17 	ldw	r3,52(r2)
800226d0:	e0bffc17 	ldw	r2,-16(fp)
800226d4:	10800c17 	ldw	r2,48(r2)
800226d8:	18bfe41e 	bne	r3,r2,8002266c <_gp+0xffff18f8>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
      }

      if (space > 0)
800226dc:	e0bffd17 	ldw	r2,-12(fp)
800226e0:	103f9d26 	beq	r2,zero,80022558 <_gp+0xffff17e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
800226e4:	e0bffc17 	ldw	r2,-16(fp)
800226e8:	10c00817 	ldw	r3,32(r2)
800226ec:	00bfff44 	movi	r2,-3
800226f0:	1886703a 	and	r3,r3,r2
800226f4:	e0bffc17 	ldw	r2,-16(fp)
800226f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
800226fc:	e0bffc17 	ldw	r2,-16(fp)
80022700:	10800017 	ldw	r2,0(r2)
80022704:	10800104 	addi	r2,r2,4
80022708:	1007883a 	mov	r3,r2
8002270c:	e0bffc17 	ldw	r2,-16(fp)
80022710:	10800817 	ldw	r2,32(r2)
80022714:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80022718:	e0bffb17 	ldw	r2,-20(fp)
8002271c:	10800104 	addi	r2,r2,4
80022720:	10800037 	ldwio	r2,0(r2)
  {
80022724:	003f8c06 	br	80022558 <_gp+0xffff17e4>
      break;
80022728:	0001883a 	nop
      }
    }
  }
}
8002272c:	0001883a 	nop
80022730:	e037883a 	mov	sp,fp
80022734:	df000017 	ldw	fp,0(sp)
80022738:	dec00104 	addi	sp,sp,4
8002273c:	f800283a 	ret

80022740 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80022740:	defffc04 	addi	sp,sp,-16
80022744:	df000315 	stw	fp,12(sp)
80022748:	df000304 	addi	fp,sp,12
8002274c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80022750:	e0bffd17 	ldw	r2,-12(fp)
80022754:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80022758:	e0bfff17 	ldw	r2,-4(fp)
8002275c:	10800017 	ldw	r2,0(r2)
80022760:	10800104 	addi	r2,r2,4
80022764:	10800037 	ldwio	r2,0(r2)
80022768:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8002276c:	e0bffe17 	ldw	r2,-8(fp)
80022770:	1081000c 	andi	r2,r2,1024
80022774:	10000b26 	beq	r2,zero,800227a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80022778:	e0bfff17 	ldw	r2,-4(fp)
8002277c:	10800017 	ldw	r2,0(r2)
80022780:	10800104 	addi	r2,r2,4
80022784:	1007883a 	mov	r3,r2
80022788:	e0bfff17 	ldw	r2,-4(fp)
8002278c:	10800817 	ldw	r2,32(r2)
80022790:	10810014 	ori	r2,r2,1024
80022794:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80022798:	e0bfff17 	ldw	r2,-4(fp)
8002279c:	10000915 	stw	zero,36(r2)
800227a0:	00000c06 	br	800227d4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
800227a4:	e0bfff17 	ldw	r2,-4(fp)
800227a8:	10c00917 	ldw	r3,36(r2)
800227ac:	00a00034 	movhi	r2,32768
800227b0:	10bfff04 	addi	r2,r2,-4
800227b4:	10c00736 	bltu	r2,r3,800227d4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
800227b8:	e0bfff17 	ldw	r2,-4(fp)
800227bc:	10800917 	ldw	r2,36(r2)
800227c0:	10c00044 	addi	r3,r2,1
800227c4:	e0bfff17 	ldw	r2,-4(fp)
800227c8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
800227cc:	e0bfff17 	ldw	r2,-4(fp)
800227d0:	10800917 	ldw	r2,36(r2)
800227d4:	d0a78017 	ldw	r2,-25088(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
800227d8:	e037883a 	mov	sp,fp
800227dc:	df000017 	ldw	fp,0(sp)
800227e0:	dec00104 	addi	sp,sp,4
800227e4:	f800283a 	ret

800227e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
800227e8:	defffd04 	addi	sp,sp,-12
800227ec:	df000215 	stw	fp,8(sp)
800227f0:	df000204 	addi	fp,sp,8
800227f4:	e13fff15 	stw	r4,-4(fp)
800227f8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
800227fc:	00000506 	br	80022814 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80022800:	e0bffe17 	ldw	r2,-8(fp)
80022804:	1090000c 	andi	r2,r2,16384
80022808:	10000226 	beq	r2,zero,80022814 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8002280c:	00bffd44 	movi	r2,-11
80022810:	00000b06 	br	80022840 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80022814:	e0bfff17 	ldw	r2,-4(fp)
80022818:	10c00d17 	ldw	r3,52(r2)
8002281c:	e0bfff17 	ldw	r2,-4(fp)
80022820:	10800c17 	ldw	r2,48(r2)
80022824:	18800526 	beq	r3,r2,8002283c <altera_avalon_jtag_uart_close+0x54>
80022828:	e0bfff17 	ldw	r2,-4(fp)
8002282c:	10c00917 	ldw	r3,36(r2)
80022830:	e0bfff17 	ldw	r2,-4(fp)
80022834:	10800117 	ldw	r2,4(r2)
80022838:	18bff136 	bltu	r3,r2,80022800 <_gp+0xffff1a8c>
    }
  }

  return 0;
8002283c:	0005883a 	mov	r2,zero
}
80022840:	e037883a 	mov	sp,fp
80022844:	df000017 	ldw	fp,0(sp)
80022848:	dec00104 	addi	sp,sp,4
8002284c:	f800283a 	ret

80022850 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80022850:	defffa04 	addi	sp,sp,-24
80022854:	df000515 	stw	fp,20(sp)
80022858:	df000504 	addi	fp,sp,20
8002285c:	e13ffd15 	stw	r4,-12(fp)
80022860:	e17ffc15 	stw	r5,-16(fp)
80022864:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
80022868:	00bff9c4 	movi	r2,-25
8002286c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
80022870:	e0bffc17 	ldw	r2,-16(fp)
80022874:	10da8060 	cmpeqi	r3,r2,27137
80022878:	1800031e 	bne	r3,zero,80022888 <altera_avalon_jtag_uart_ioctl+0x38>
8002287c:	109a80a0 	cmpeqi	r2,r2,27138
80022880:	1000181e 	bne	r2,zero,800228e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80022884:	00002906 	br	8002292c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
80022888:	e0bffd17 	ldw	r2,-12(fp)
8002288c:	10c00117 	ldw	r3,4(r2)
80022890:	00a00034 	movhi	r2,32768
80022894:	10bfffc4 	addi	r2,r2,-1
80022898:	18802126 	beq	r3,r2,80022920 <altera_avalon_jtag_uart_ioctl+0xd0>
      int timeout = *((int *)arg);
8002289c:	e0bffb17 	ldw	r2,-20(fp)
800228a0:	10800017 	ldw	r2,0(r2)
800228a4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
800228a8:	e0bffe17 	ldw	r2,-8(fp)
800228ac:	10800090 	cmplti	r2,r2,2
800228b0:	1000061e 	bne	r2,zero,800228cc <altera_avalon_jtag_uart_ioctl+0x7c>
800228b4:	e0fffe17 	ldw	r3,-8(fp)
800228b8:	00a00034 	movhi	r2,32768
800228bc:	10bfffc4 	addi	r2,r2,-1
800228c0:	18800226 	beq	r3,r2,800228cc <altera_avalon_jtag_uart_ioctl+0x7c>
800228c4:	e0bffe17 	ldw	r2,-8(fp)
800228c8:	00000206 	br	800228d4 <altera_avalon_jtag_uart_ioctl+0x84>
800228cc:	00a00034 	movhi	r2,32768
800228d0:	10bfff84 	addi	r2,r2,-2
800228d4:	e0fffd17 	ldw	r3,-12(fp)
800228d8:	18800115 	stw	r2,4(r3)
      rc = 0;
800228dc:	e03fff15 	stw	zero,-4(fp)
    break;
800228e0:	00000f06 	br	80022920 <altera_avalon_jtag_uart_ioctl+0xd0>
    if (sp->timeout != INT_MAX)
800228e4:	e0bffd17 	ldw	r2,-12(fp)
800228e8:	10c00117 	ldw	r3,4(r2)
800228ec:	00a00034 	movhi	r2,32768
800228f0:	10bfffc4 	addi	r2,r2,-1
800228f4:	18800c26 	beq	r3,r2,80022928 <altera_avalon_jtag_uart_ioctl+0xd8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
800228f8:	e0bffd17 	ldw	r2,-12(fp)
800228fc:	10c00917 	ldw	r3,36(r2)
80022900:	e0bffd17 	ldw	r2,-12(fp)
80022904:	10800117 	ldw	r2,4(r2)
80022908:	1885803a 	cmpltu	r2,r3,r2
8002290c:	10c03fcc 	andi	r3,r2,255
80022910:	e0bffb17 	ldw	r2,-20(fp)
80022914:	10c00015 	stw	r3,0(r2)
      rc = 0;
80022918:	e03fff15 	stw	zero,-4(fp)
    break;
8002291c:	00000206 	br	80022928 <altera_avalon_jtag_uart_ioctl+0xd8>
    break;
80022920:	0001883a 	nop
80022924:	00000106 	br	8002292c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
80022928:	0001883a 	nop
  }

  return rc;
8002292c:	e0bfff17 	ldw	r2,-4(fp)
}
80022930:	e037883a 	mov	sp,fp
80022934:	df000017 	ldw	fp,0(sp)
80022938:	dec00104 	addi	sp,sp,4
8002293c:	f800283a 	ret

80022940 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80022940:	defff304 	addi	sp,sp,-52
80022944:	dfc00c15 	stw	ra,48(sp)
80022948:	df000b15 	stw	fp,44(sp)
8002294c:	df000b04 	addi	fp,sp,44
80022950:	e13ff815 	stw	r4,-32(fp)
80022954:	e17ff715 	stw	r5,-36(fp)
80022958:	e1bff615 	stw	r6,-40(fp)
8002295c:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
80022960:	e0bff717 	ldw	r2,-36(fp)
80022964:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80022968:	00004706 	br	80022a88 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8002296c:	e0bff817 	ldw	r2,-32(fp)
80022970:	10800a17 	ldw	r2,40(r2)
80022974:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
80022978:	e0bff817 	ldw	r2,-32(fp)
8002297c:	10800b17 	ldw	r2,44(r2)
80022980:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
80022984:	e0fffd17 	ldw	r3,-12(fp)
80022988:	e0bffc17 	ldw	r2,-16(fp)
8002298c:	18800536 	bltu	r3,r2,800229a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80022990:	e0fffd17 	ldw	r3,-12(fp)
80022994:	e0bffc17 	ldw	r2,-16(fp)
80022998:	1885c83a 	sub	r2,r3,r2
8002299c:	e0bffe15 	stw	r2,-8(fp)
800229a0:	00000406 	br	800229b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
800229a4:	00c20004 	movi	r3,2048
800229a8:	e0bffc17 	ldw	r2,-16(fp)
800229ac:	1885c83a 	sub	r2,r3,r2
800229b0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
800229b4:	e0bffe17 	ldw	r2,-8(fp)
800229b8:	10001e26 	beq	r2,zero,80022a34 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
800229bc:	e0fff617 	ldw	r3,-40(fp)
800229c0:	e0bffe17 	ldw	r2,-8(fp)
800229c4:	1880022e 	bgeu	r3,r2,800229d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
800229c8:	e0bff617 	ldw	r2,-40(fp)
800229cc:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
800229d0:	e0bff817 	ldw	r2,-32(fp)
800229d4:	10c00e04 	addi	r3,r2,56
800229d8:	e0bffc17 	ldw	r2,-16(fp)
800229dc:	1885883a 	add	r2,r3,r2
800229e0:	e1bffe17 	ldw	r6,-8(fp)
800229e4:	100b883a 	mov	r5,r2
800229e8:	e13fff17 	ldw	r4,-4(fp)
800229ec:	00104e80 	call	800104e8 <memcpy>
      ptr   += n;
800229f0:	e0ffff17 	ldw	r3,-4(fp)
800229f4:	e0bffe17 	ldw	r2,-8(fp)
800229f8:	1885883a 	add	r2,r3,r2
800229fc:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
80022a00:	e0fff617 	ldw	r3,-40(fp)
80022a04:	e0bffe17 	ldw	r2,-8(fp)
80022a08:	1885c83a 	sub	r2,r3,r2
80022a0c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80022a10:	e0fffc17 	ldw	r3,-16(fp)
80022a14:	e0bffe17 	ldw	r2,-8(fp)
80022a18:	1885883a 	add	r2,r3,r2
80022a1c:	10c1ffcc 	andi	r3,r2,2047
80022a20:	e0bff817 	ldw	r2,-32(fp)
80022a24:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80022a28:	e0bff617 	ldw	r2,-40(fp)
80022a2c:	00bfcf16 	blt	zero,r2,8002296c <_gp+0xffff1bf8>
80022a30:	00000106 	br	80022a38 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
80022a34:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
80022a38:	e0ffff17 	ldw	r3,-4(fp)
80022a3c:	e0bff717 	ldw	r2,-36(fp)
80022a40:	1880141e 	bne	r3,r2,80022a94 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
80022a44:	e0bff517 	ldw	r2,-44(fp)
80022a48:	1090000c 	andi	r2,r2,16384
80022a4c:	1000131e 	bne	r2,zero,80022a9c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80022a50:	0001883a 	nop
80022a54:	e0bff817 	ldw	r2,-32(fp)
80022a58:	10800a17 	ldw	r2,40(r2)
80022a5c:	e0fffd17 	ldw	r3,-12(fp)
80022a60:	1880051e 	bne	r3,r2,80022a78 <altera_avalon_jtag_uart_read+0x138>
80022a64:	e0bff817 	ldw	r2,-32(fp)
80022a68:	10c00917 	ldw	r3,36(r2)
80022a6c:	e0bff817 	ldw	r2,-32(fp)
80022a70:	10800117 	ldw	r2,4(r2)
80022a74:	18bff736 	bltu	r3,r2,80022a54 <_gp+0xffff1ce0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80022a78:	e0bff817 	ldw	r2,-32(fp)
80022a7c:	10800a17 	ldw	r2,40(r2)
80022a80:	e0fffd17 	ldw	r3,-12(fp)
80022a84:	18800726 	beq	r3,r2,80022aa4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
80022a88:	e0bff617 	ldw	r2,-40(fp)
80022a8c:	00bfb716 	blt	zero,r2,8002296c <_gp+0xffff1bf8>
80022a90:	00000506 	br	80022aa8 <altera_avalon_jtag_uart_read+0x168>
      break;
80022a94:	0001883a 	nop
80022a98:	00000306 	br	80022aa8 <altera_avalon_jtag_uart_read+0x168>
      break;
80022a9c:	0001883a 	nop
80022aa0:	00000106 	br	80022aa8 <altera_avalon_jtag_uart_read+0x168>
      break;
80022aa4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80022aa8:	e0ffff17 	ldw	r3,-4(fp)
80022aac:	e0bff717 	ldw	r2,-36(fp)
80022ab0:	18801826 	beq	r3,r2,80022b14 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
80022ab4:	0005303a 	rdctl	r2,status
80022ab8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80022abc:	e0fff917 	ldw	r3,-28(fp)
80022ac0:	00bfff84 	movi	r2,-2
80022ac4:	1884703a 	and	r2,r3,r2
80022ac8:	1001703a 	wrctl	status,r2
  return context;
80022acc:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80022ad0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80022ad4:	e0bff817 	ldw	r2,-32(fp)
80022ad8:	10800817 	ldw	r2,32(r2)
80022adc:	10c00054 	ori	r3,r2,1
80022ae0:	e0bff817 	ldw	r2,-32(fp)
80022ae4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80022ae8:	e0bff817 	ldw	r2,-32(fp)
80022aec:	10800017 	ldw	r2,0(r2)
80022af0:	10800104 	addi	r2,r2,4
80022af4:	1007883a 	mov	r3,r2
80022af8:	e0bff817 	ldw	r2,-32(fp)
80022afc:	10800817 	ldw	r2,32(r2)
80022b00:	18800035 	stwio	r2,0(r3)
80022b04:	e0bffb17 	ldw	r2,-20(fp)
80022b08:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
80022b0c:	e0bffa17 	ldw	r2,-24(fp)
80022b10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80022b14:	e0ffff17 	ldw	r3,-4(fp)
80022b18:	e0bff717 	ldw	r2,-36(fp)
80022b1c:	18800426 	beq	r3,r2,80022b30 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80022b20:	e0ffff17 	ldw	r3,-4(fp)
80022b24:	e0bff717 	ldw	r2,-36(fp)
80022b28:	1885c83a 	sub	r2,r3,r2
80022b2c:	00000606 	br	80022b48 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80022b30:	e0bff517 	ldw	r2,-44(fp)
80022b34:	1090000c 	andi	r2,r2,16384
80022b38:	10000226 	beq	r2,zero,80022b44 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80022b3c:	00bffd44 	movi	r2,-11
80022b40:	00000106 	br	80022b48 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
80022b44:	00bffec4 	movi	r2,-5
}
80022b48:	e037883a 	mov	sp,fp
80022b4c:	dfc00117 	ldw	ra,4(sp)
80022b50:	df000017 	ldw	fp,0(sp)
80022b54:	dec00204 	addi	sp,sp,8
80022b58:	f800283a 	ret

80022b5c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80022b5c:	defff304 	addi	sp,sp,-52
80022b60:	dfc00c15 	stw	ra,48(sp)
80022b64:	df000b15 	stw	fp,44(sp)
80022b68:	df000b04 	addi	fp,sp,44
80022b6c:	e13ff815 	stw	r4,-32(fp)
80022b70:	e17ff715 	stw	r5,-36(fp)
80022b74:	e1bff615 	stw	r6,-40(fp)
80022b78:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80022b7c:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80022b80:	e0bff717 	ldw	r2,-36(fp)
80022b84:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80022b88:	00003706 	br	80022c68 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80022b8c:	e0bff817 	ldw	r2,-32(fp)
80022b90:	10800c17 	ldw	r2,48(r2)
80022b94:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
80022b98:	e0bff817 	ldw	r2,-32(fp)
80022b9c:	10800d17 	ldw	r2,52(r2)
80022ba0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
80022ba4:	e0fffc17 	ldw	r3,-16(fp)
80022ba8:	e0bfff17 	ldw	r2,-4(fp)
80022bac:	1880062e 	bgeu	r3,r2,80022bc8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80022bb0:	e0ffff17 	ldw	r3,-4(fp)
80022bb4:	e0bffc17 	ldw	r2,-16(fp)
80022bb8:	1885c83a 	sub	r2,r3,r2
80022bbc:	10bfffc4 	addi	r2,r2,-1
80022bc0:	e0bffe15 	stw	r2,-8(fp)
80022bc4:	00000b06 	br	80022bf4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80022bc8:	e0bfff17 	ldw	r2,-4(fp)
80022bcc:	10000526 	beq	r2,zero,80022be4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80022bd0:	00c20004 	movi	r3,2048
80022bd4:	e0bffc17 	ldw	r2,-16(fp)
80022bd8:	1885c83a 	sub	r2,r3,r2
80022bdc:	e0bffe15 	stw	r2,-8(fp)
80022be0:	00000406 	br	80022bf4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80022be4:	00c1ffc4 	movi	r3,2047
80022be8:	e0bffc17 	ldw	r2,-16(fp)
80022bec:	1885c83a 	sub	r2,r3,r2
80022bf0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
80022bf4:	e0bffe17 	ldw	r2,-8(fp)
80022bf8:	10001e26 	beq	r2,zero,80022c74 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
80022bfc:	e0fff617 	ldw	r3,-40(fp)
80022c00:	e0bffe17 	ldw	r2,-8(fp)
80022c04:	1880022e 	bgeu	r3,r2,80022c10 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
80022c08:	e0bff617 	ldw	r2,-40(fp)
80022c0c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80022c10:	e0bff817 	ldw	r2,-32(fp)
80022c14:	10c20e04 	addi	r3,r2,2104
80022c18:	e0bffc17 	ldw	r2,-16(fp)
80022c1c:	1885883a 	add	r2,r3,r2
80022c20:	e1bffe17 	ldw	r6,-8(fp)
80022c24:	e17ff717 	ldw	r5,-36(fp)
80022c28:	1009883a 	mov	r4,r2
80022c2c:	00104e80 	call	800104e8 <memcpy>
      ptr   += n;
80022c30:	e0fff717 	ldw	r3,-36(fp)
80022c34:	e0bffe17 	ldw	r2,-8(fp)
80022c38:	1885883a 	add	r2,r3,r2
80022c3c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
80022c40:	e0fff617 	ldw	r3,-40(fp)
80022c44:	e0bffe17 	ldw	r2,-8(fp)
80022c48:	1885c83a 	sub	r2,r3,r2
80022c4c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80022c50:	e0fffc17 	ldw	r3,-16(fp)
80022c54:	e0bffe17 	ldw	r2,-8(fp)
80022c58:	1885883a 	add	r2,r3,r2
80022c5c:	10c1ffcc 	andi	r3,r2,2047
80022c60:	e0bff817 	ldw	r2,-32(fp)
80022c64:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
80022c68:	e0bff617 	ldw	r2,-40(fp)
80022c6c:	00bfc716 	blt	zero,r2,80022b8c <_gp+0xffff1e18>
80022c70:	00000106 	br	80022c78 <altera_avalon_jtag_uart_write+0x11c>
        break;
80022c74:	0001883a 	nop
  NIOS2_READ_STATUS (context);
80022c78:	0005303a 	rdctl	r2,status
80022c7c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80022c80:	e0fff917 	ldw	r3,-28(fp)
80022c84:	00bfff84 	movi	r2,-2
80022c88:	1884703a 	and	r2,r3,r2
80022c8c:	1001703a 	wrctl	status,r2
  return context;
80022c90:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
80022c94:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80022c98:	e0bff817 	ldw	r2,-32(fp)
80022c9c:	10800817 	ldw	r2,32(r2)
80022ca0:	10c00094 	ori	r3,r2,2
80022ca4:	e0bff817 	ldw	r2,-32(fp)
80022ca8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80022cac:	e0bff817 	ldw	r2,-32(fp)
80022cb0:	10800017 	ldw	r2,0(r2)
80022cb4:	10800104 	addi	r2,r2,4
80022cb8:	1007883a 	mov	r3,r2
80022cbc:	e0bff817 	ldw	r2,-32(fp)
80022cc0:	10800817 	ldw	r2,32(r2)
80022cc4:	18800035 	stwio	r2,0(r3)
80022cc8:	e0bffb17 	ldw	r2,-20(fp)
80022ccc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
80022cd0:	e0bffa17 	ldw	r2,-24(fp)
80022cd4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
80022cd8:	e0bff617 	ldw	r2,-40(fp)
80022cdc:	0080100e 	bge	zero,r2,80022d20 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80022ce0:	e0bff517 	ldw	r2,-44(fp)
80022ce4:	1090000c 	andi	r2,r2,16384
80022ce8:	1000101e 	bne	r2,zero,80022d2c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
80022cec:	0001883a 	nop
80022cf0:	e0bff817 	ldw	r2,-32(fp)
80022cf4:	10800d17 	ldw	r2,52(r2)
80022cf8:	e0ffff17 	ldw	r3,-4(fp)
80022cfc:	1880051e 	bne	r3,r2,80022d14 <altera_avalon_jtag_uart_write+0x1b8>
80022d00:	e0bff817 	ldw	r2,-32(fp)
80022d04:	10c00917 	ldw	r3,36(r2)
80022d08:	e0bff817 	ldw	r2,-32(fp)
80022d0c:	10800117 	ldw	r2,4(r2)
80022d10:	18bff736 	bltu	r3,r2,80022cf0 <_gp+0xffff1f7c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80022d14:	e0bff817 	ldw	r2,-32(fp)
80022d18:	10800917 	ldw	r2,36(r2)
80022d1c:	1000051e 	bne	r2,zero,80022d34 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
80022d20:	e0bff617 	ldw	r2,-40(fp)
80022d24:	00bfd016 	blt	zero,r2,80022c68 <_gp+0xffff1ef4>
80022d28:	00000306 	br	80022d38 <altera_avalon_jtag_uart_write+0x1dc>
        break;
80022d2c:	0001883a 	nop
80022d30:	00000106 	br	80022d38 <altera_avalon_jtag_uart_write+0x1dc>
         break;
80022d34:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80022d38:	e0fff717 	ldw	r3,-36(fp)
80022d3c:	e0bffd17 	ldw	r2,-12(fp)
80022d40:	18800426 	beq	r3,r2,80022d54 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
80022d44:	e0fff717 	ldw	r3,-36(fp)
80022d48:	e0bffd17 	ldw	r2,-12(fp)
80022d4c:	1885c83a 	sub	r2,r3,r2
80022d50:	00000606 	br	80022d6c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
80022d54:	e0bff517 	ldw	r2,-44(fp)
80022d58:	1090000c 	andi	r2,r2,16384
80022d5c:	10000226 	beq	r2,zero,80022d68 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80022d60:	00bffd44 	movi	r2,-11
80022d64:	00000106 	br	80022d6c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80022d68:	00bffec4 	movi	r2,-5
}
80022d6c:	e037883a 	mov	sp,fp
80022d70:	dfc00117 	ldw	ra,4(sp)
80022d74:	df000017 	ldw	fp,0(sp)
80022d78:	dec00204 	addi	sp,sp,8
80022d7c:	f800283a 	ret

80022d80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80022d80:	defffa04 	addi	sp,sp,-24
80022d84:	dfc00515 	stw	ra,20(sp)
80022d88:	df000415 	stw	fp,16(sp)
80022d8c:	df000404 	addi	fp,sp,16
80022d90:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80022d94:	0007883a 	mov	r3,zero
80022d98:	e0bffc17 	ldw	r2,-16(fp)
80022d9c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80022da0:	e0bffc17 	ldw	r2,-16(fp)
80022da4:	10800104 	addi	r2,r2,4
80022da8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
80022dac:	0005303a 	rdctl	r2,status
80022db0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80022db4:	e0fffd17 	ldw	r3,-12(fp)
80022db8:	00bfff84 	movi	r2,-2
80022dbc:	1884703a 	and	r2,r3,r2
80022dc0:	1001703a 	wrctl	status,r2
  return context;
80022dc4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80022dc8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
80022dcc:	00246d80 	call	800246d8 <alt_tick>
80022dd0:	e0bfff17 	ldw	r2,-4(fp)
80022dd4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
80022dd8:	e0bffe17 	ldw	r2,-8(fp)
80022ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80022de0:	0001883a 	nop
80022de4:	e037883a 	mov	sp,fp
80022de8:	dfc00117 	ldw	ra,4(sp)
80022dec:	df000017 	ldw	fp,0(sp)
80022df0:	dec00204 	addi	sp,sp,8
80022df4:	f800283a 	ret

80022df8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
80022df8:	defff804 	addi	sp,sp,-32
80022dfc:	dfc00715 	stw	ra,28(sp)
80022e00:	df000615 	stw	fp,24(sp)
80022e04:	df000604 	addi	fp,sp,24
80022e08:	e13ffe15 	stw	r4,-8(fp)
80022e0c:	e17ffd15 	stw	r5,-12(fp)
80022e10:	e1bffc15 	stw	r6,-16(fp)
80022e14:	e1fffb15 	stw	r7,-20(fp)
80022e18:	e0bffb17 	ldw	r2,-20(fp)
80022e1c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80022e20:	d0a78017 	ldw	r2,-25088(gp)
80022e24:	1000021e 	bne	r2,zero,80022e30 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
80022e28:	e0bfff17 	ldw	r2,-4(fp)
80022e2c:	d0a78015 	stw	r2,-25088(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80022e30:	e0bffe17 	ldw	r2,-8(fp)
80022e34:	10800104 	addi	r2,r2,4
80022e38:	00c001c4 	movi	r3,7
80022e3c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80022e40:	d8000015 	stw	zero,0(sp)
80022e44:	e1fffe17 	ldw	r7,-8(fp)
80022e48:	01a000b4 	movhi	r6,32770
80022e4c:	318b6004 	addi	r6,r6,11648
80022e50:	e17ffc17 	ldw	r5,-16(fp)
80022e54:	e13ffd17 	ldw	r4,-12(fp)
80022e58:	00240340 	call	80024034 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80022e5c:	0001883a 	nop
80022e60:	e037883a 	mov	sp,fp
80022e64:	dfc00117 	ldw	ra,4(sp)
80022e68:	df000017 	ldw	fp,0(sp)
80022e6c:	dec00204 	addi	sp,sp,8
80022e70:	f800283a 	ret

80022e74 <alt_qspi_controller2_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_qspi_controller2_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
80022e74:	defff804 	addi	sp,sp,-32
80022e78:	dfc00715 	stw	ra,28(sp)
80022e7c:	df000615 	stw	fp,24(sp)
80022e80:	df000604 	addi	fp,sp,24
80022e84:	e13ffb15 	stw	r4,-20(fp)
80022e88:	e17ffa15 	stw	r5,-24(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
80022e8c:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
80022e90:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 result = 0;
80022e94:	e03ffd15 	stw	zero,-12(fp)
    alt_32 status = 0;
80022e98:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
80022e9c:	e0bffb17 	ldw	r2,-20(fp)
80022ea0:	1000021e 	bne	r2,zero,80022eac <alt_qspi_controller2_lock+0x38>
    {
        return -EINVAL;
80022ea4:	00bffa84 	movi	r2,-22
80022ea8:	00002c06 	br	80022f5c <alt_qspi_controller2_lock+0xe8>
    }

    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
80022eac:	e0bffb17 	ldw	r2,-20(fp)
80022eb0:	e0bffe15 	stw	r2,-8(fp)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
80022eb4:	e0bffa17 	ldw	r2,-24(fp)
80022eb8:	1004923a 	slli	r2,r2,8
80022ebc:	e0bfff15 	stw	r2,-4(fp)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_PROTECT_CMD;
80022ec0:	e0bfff17 	ldw	r2,-4(fp)
80022ec4:	108000d4 	ori	r2,r2,3
80022ec8:	e0bfff15 	stw	r2,-4(fp)

    /* write sector protect command to QSPI_MEM_OP register to protect sectors */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
80022ecc:	e0bffe17 	ldw	r2,-8(fp)
80022ed0:	10803017 	ldw	r2,192(r2)
80022ed4:	10800304 	addi	r2,r2,12
80022ed8:	1007883a 	mov	r3,r2
80022edc:	e0bfff17 	ldw	r2,-4(fp)
80022ee0:	18800035 	stwio	r2,0(r3)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_qspi_poll_for_write_in_progress(qspi_flash_info);
80022ee4:	e13ffe17 	ldw	r4,-8(fp)
80022ee8:	00239500 	call	80023950 <alt_qspi_poll_for_write_in_progress>
80022eec:	e0bffc15 	stw	r2,-16(fp)
    if(status != 0)
80022ef0:	e0bffc17 	ldw	r2,-16(fp)
80022ef4:	10000226 	beq	r2,zero,80022f00 <alt_qspi_controller2_lock+0x8c>
    {
        return status;
80022ef8:	e0bffc17 	ldw	r2,-16(fp)
80022efc:	00001706 	br	80022f5c <alt_qspi_controller2_lock+0xe8>
    }

    status = IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base);
80022f00:	e0bffe17 	ldw	r2,-8(fp)
80022f04:	10803017 	ldw	r2,192(r2)
80022f08:	10800037 	ldwio	r2,0(r2)
80022f0c:	e0bffc15 	stw	r2,-16(fp)
    result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
80022f10:	e0bffc17 	ldw	r2,-16(fp)
80022f14:	1005d0ba 	srai	r2,r2,2
80022f18:	108001cc 	andi	r2,r2,7
80022f1c:	e0fffd17 	ldw	r3,-12(fp)
80022f20:	1884b03a 	or	r2,r3,r2
80022f24:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 3) & 0x08; /* extract out BP4 */
80022f28:	e0bffc17 	ldw	r2,-16(fp)
80022f2c:	1005d0fa 	srai	r2,r2,3
80022f30:	1080020c 	andi	r2,r2,8
80022f34:	e0fffd17 	ldw	r3,-12(fp)
80022f38:	1884b03a 	or	r2,r3,r2
80022f3c:	e0bffd15 	stw	r2,-12(fp)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
80022f40:	e0bffc17 	ldw	r2,-16(fp)
80022f44:	1005d07a 	srai	r2,r2,1
80022f48:	1080040c 	andi	r2,r2,16
80022f4c:	e0fffd17 	ldw	r3,-12(fp)
80022f50:	1884b03a 	or	r2,r3,r2
80022f54:	e0bffd15 	stw	r2,-12(fp)
    if(result != sectors_to_lock)
    {
        /*return -ENOLCK;*/
    }

    return 0;
80022f58:	0005883a 	mov	r2,zero
}
80022f5c:	e037883a 	mov	sp,fp
80022f60:	dfc00117 	ldw	ra,4(sp)
80022f64:	df000017 	ldw	fp,0(sp)
80022f68:	dec00204 	addi	sp,sp,8
80022f6c:	f800283a 	ret

80022f70 <alt_qspi_controller2_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
80022f70:	defffb04 	addi	sp,sp,-20
80022f74:	df000415 	stw	fp,16(sp)
80022f78:	df000404 	addi	fp,sp,16
80022f7c:	e13ffe15 	stw	r4,-8(fp)
80022f80:	e17ffd15 	stw	r5,-12(fp)
80022f84:	e1bffc15 	stw	r6,-16(fp)
    alt_flash_dev* flash = NULL;
80022f88:	e03fff15 	stw	zero,-4(fp)
    
    /* return -EINVAL if fd,info and number_of_regions are NULL */
    if(NULL == fd || NULL == info || NULL == number_of_regions)
80022f8c:	e0bffe17 	ldw	r2,-8(fp)
80022f90:	10000426 	beq	r2,zero,80022fa4 <alt_qspi_controller2_get_info+0x34>
80022f94:	e0bffd17 	ldw	r2,-12(fp)
80022f98:	10000226 	beq	r2,zero,80022fa4 <alt_qspi_controller2_get_info+0x34>
80022f9c:	e0bffc17 	ldw	r2,-16(fp)
80022fa0:	1000021e 	bne	r2,zero,80022fac <alt_qspi_controller2_get_info+0x3c>
    {
        return -EINVAL;
80022fa4:	00bffa84 	movi	r2,-22
80022fa8:	00001006 	br	80022fec <alt_qspi_controller2_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
80022fac:	e0bffe17 	ldw	r2,-8(fp)
80022fb0:	e0bfff15 	stw	r2,-4(fp)

    *number_of_regions = flash->number_of_regions;
80022fb4:	e0bfff17 	ldw	r2,-4(fp)
80022fb8:	10c00c17 	ldw	r3,48(r2)
80022fbc:	e0bffc17 	ldw	r2,-16(fp)
80022fc0:	10c00015 	stw	r3,0(r2)

    if (!flash->number_of_regions)
80022fc4:	e0bfff17 	ldw	r2,-4(fp)
80022fc8:	10800c17 	ldw	r2,48(r2)
80022fcc:	1000021e 	bne	r2,zero,80022fd8 <alt_qspi_controller2_get_info+0x68>
    {
      return -EIO;
80022fd0:	00bffec4 	movi	r2,-5
80022fd4:	00000506 	br	80022fec <alt_qspi_controller2_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
80022fd8:	e0bfff17 	ldw	r2,-4(fp)
80022fdc:	10c00d04 	addi	r3,r2,52
80022fe0:	e0bffd17 	ldw	r2,-12(fp)
80022fe4:	10c00015 	stw	r3,0(r2)
    }

    return 0;
80022fe8:	0005883a 	mov	r2,zero
}
80022fec:	e037883a 	mov	sp,fp
80022ff0:	df000017 	ldw	fp,0(sp)
80022ff4:	dec00104 	addi	sp,sp,4
80022ff8:	f800283a 	ret

80022ffc <alt_qspi_controller2_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_qspi_controller2_erase_block(alt_flash_dev *flash_info, int block_offset)
{
80022ffc:	defff804 	addi	sp,sp,-32
80023000:	dfc00715 	stw	ra,28(sp)
80023004:	df000615 	stw	fp,24(sp)
80023008:	df000604 	addi	fp,sp,24
8002300c:	e13ffb15 	stw	r4,-20(fp)
80023010:	e17ffa15 	stw	r5,-24(fp)
    alt_32 ret_code = 0;
80023014:	e03fff15 	stw	zero,-4(fp)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
80023018:	e03ffe15 	stw	zero,-8(fp)
    alt_qspi_controller2_dev* qspi_flash_info = NULL;
8002301c:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 sector_number = 0; 
80023020:	e03ffc15 	stw	zero,-16(fp)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
80023024:	e0bffb17 	ldw	r2,-20(fp)
80023028:	1000021e 	bne	r2,zero,80023034 <alt_qspi_controller2_erase_block+0x38>
    {
        return -EINVAL;
8002302c:	00bffa84 	movi	r2,-22
80023030:	00004706 	br	80023150 <alt_qspi_controller2_erase_block+0x154>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
80023034:	e0bffb17 	ldw	r2,-20(fp)
80023038:	e0bffd15 	stw	r2,-12(fp)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
8002303c:	e0bffa17 	ldw	r2,-24(fp)
80023040:	10000a16 	blt	r2,zero,8002306c <alt_qspi_controller2_erase_block+0x70>
        || (block_offset >= qspi_flash_info->size_in_bytes)
80023044:	e0bffd17 	ldw	r2,-12(fp)
80023048:	10803117 	ldw	r2,196(r2)
8002304c:	e0fffa17 	ldw	r3,-24(fp)
80023050:	1880062e 	bgeu	r3,r2,8002306c <alt_qspi_controller2_erase_block+0x70>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0)
80023054:	e0bffd17 	ldw	r2,-12(fp)
80023058:	10803417 	ldw	r2,208(r2)
8002305c:	10ffffc4 	addi	r3,r2,-1
80023060:	e0bffa17 	ldw	r2,-24(fp)
80023064:	1884703a 	and	r2,r3,r2
80023068:	10000226 	beq	r2,zero,80023074 <alt_qspi_controller2_erase_block+0x78>
    {
        return -EINVAL;
8002306c:	00bffa84 	movi	r2,-22
80023070:	00003706 	br	80023150 <alt_qspi_controller2_erase_block+0x154>
    }
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);     
80023074:	e13ffd17 	ldw	r4,-12(fp)
80023078:	00239500 	call	80023950 <alt_qspi_poll_for_write_in_progress>

    /* calculate current sector/block number */
    sector_number = (block_offset/(qspi_flash_info->sector_size));
8002307c:	e0fffa17 	ldw	r3,-24(fp)
80023080:	e0bffd17 	ldw	r2,-12(fp)
80023084:	10803417 	ldw	r2,208(r2)
80023088:	1885203a 	divu	r2,r3,r2
8002308c:	e0bffc15 	stw	r2,-16(fp)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
80023090:	e0bffc17 	ldw	r2,-16(fp)
80023094:	1006923a 	slli	r3,r2,8
80023098:	00804034 	movhi	r2,256
8002309c:	10bfc004 	addi	r2,r2,-256
800230a0:	1884703a 	and	r2,r3,r2
800230a4:	e0bffe15 	stw	r2,-8(fp)
    
     /* write enable command */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_WRITE_ENABLE_CMD;
800230a8:	e0bffe17 	ldw	r2,-8(fp)
800230ac:	10800114 	ori	r2,r2,4
800230b0:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to EPCQ_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
800230b4:	e0bffd17 	ldw	r2,-12(fp)
800230b8:	10803017 	ldw	r2,192(r2)
800230bc:	10800304 	addi	r2,r2,12
800230c0:	1007883a 	mov	r3,r2
800230c4:	e0bffe17 	ldw	r2,-8(fp)
800230c8:	18800035 	stwio	r2,0(r3)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_VALUE_MASK;
800230cc:	e0bffc17 	ldw	r2,-16(fp)
800230d0:	1006923a 	slli	r3,r2,8
800230d4:	00804034 	movhi	r2,256
800230d8:	10bfc004 	addi	r2,r2,-256
800230dc:	1884703a 	and	r2,r3,r2
800230e0:	e0bffe15 	stw	r2,-8(fp)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_QSPI_CONTROLLER2_MEM_OP_SECTOR_ERASE_CMD;
800230e4:	e0bffe17 	ldw	r2,-8(fp)
800230e8:	10800094 	ori	r2,r2,2
800230ec:	e0bffe15 	stw	r2,-8(fp)

    /* write sector erase command to QSPI_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_QSPI_CONTROLLER2_MEM_OP(qspi_flash_info->csr_base, mem_op_value);
800230f0:	e0bffd17 	ldw	r2,-12(fp)
800230f4:	10803017 	ldw	r2,192(r2)
800230f8:	10800304 	addi	r2,r2,12
800230fc:	1007883a 	mov	r3,r2
80023100:	e0bffe17 	ldw	r2,-8(fp)
80023104:	18800035 	stwio	r2,0(r3)
    
    alt_qspi_poll_for_write_in_progress(qspi_flash_info);      
80023108:	e13ffd17 	ldw	r4,-12(fp)
8002310c:	00239500 	call	80023950 <alt_qspi_poll_for_write_in_progress>
    
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
80023110:	e0bffd17 	ldw	r2,-12(fp)
80023114:	10803017 	ldw	r2,192(r2)
80023118:	10800404 	addi	r2,r2,16
8002311c:	10800037 	ldwio	r2,0(r2)
80023120:	1080004c 	andi	r2,r2,1
80023124:	10800058 	cmpnei	r2,r2,1
80023128:	1000081e 	bne	r2,zero,8002314c <alt_qspi_controller2_erase_block+0x150>
                    ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK) ==
                            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_ACTIVE)
    {
        /* clear register */
        /* QSPI_ISR access is write one to clear (W1C) */
        IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
8002312c:	e0bffd17 	ldw	r2,-12(fp)
80023130:	10803017 	ldw	r2,192(r2)
80023134:	10800404 	addi	r2,r2,16
80023138:	1007883a 	mov	r3,r2
8002313c:	00800044 	movi	r2,1
80023140:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_ERASE_MASK );
        return -EIO; /* erase failed, sector might be protected */
80023144:	00bffec4 	movi	r2,-5
80023148:	00000106 	br	80023150 <alt_qspi_controller2_erase_block+0x154>
    }

    return ret_code;
8002314c:	e0bfff17 	ldw	r2,-4(fp)
}
80023150:	e037883a 	mov	sp,fp
80023154:	dfc00117 	ldw	ra,4(sp)
80023158:	df000017 	ldw	fp,0(sp)
8002315c:	dec00204 	addi	sp,sp,8
80023160:	f800283a 	ret

80023164 <alt_qspi_controller2_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
80023164:	defff304 	addi	sp,sp,-52
80023168:	dfc00c15 	stw	ra,48(sp)
8002316c:	df000b15 	stw	fp,44(sp)
80023170:	df000b04 	addi	fp,sp,44
80023174:	e13ff815 	stw	r4,-32(fp)
80023178:	e17ff715 	stw	r5,-36(fp)
8002317c:	e1bff615 	stw	r6,-40(fp)
80023180:	e1fff515 	stw	r7,-44(fp)
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
80023184:	e03fff15 	stw	zero,-4(fp)
    alt_u32 remaining_length = length; /** length left to write */
80023188:	e0800217 	ldw	r2,8(fp)
8002318c:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
80023190:	e0bff617 	ldw	r2,-40(fp)
80023194:	e0bffd15 	stw	r2,-12(fp)

    
    alt_qspi_controller2_dev *qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
80023198:	e0bff817 	ldw	r2,-32(fp)
8002319c:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
800231a0:	e0bff717 	ldw	r2,-36(fp)
800231a4:	10001e16 	blt	r2,zero,80023220 <alt_qspi_controller2_write_block+0xbc>
        || data_offset < 0
800231a8:	e0bff617 	ldw	r2,-40(fp)
800231ac:	10001c16 	blt	r2,zero,80023220 <alt_qspi_controller2_write_block+0xbc>
        || NULL == flash_info
800231b0:	e0bff817 	ldw	r2,-32(fp)
800231b4:	10001a26 	beq	r2,zero,80023220 <alt_qspi_controller2_write_block+0xbc>
        || NULL == data
800231b8:	e0bff517 	ldw	r2,-44(fp)
800231bc:	10001826 	beq	r2,zero,80023220 <alt_qspi_controller2_write_block+0xbc>
        || data_offset >= qspi_flash_info->size_in_bytes
800231c0:	e0bffa17 	ldw	r2,-24(fp)
800231c4:	10803117 	ldw	r2,196(r2)
800231c8:	e0fff617 	ldw	r3,-40(fp)
800231cc:	1880142e 	bgeu	r3,r2,80023220 <alt_qspi_controller2_write_block+0xbc>
        || block_offset >= qspi_flash_info->size_in_bytes
800231d0:	e0bffa17 	ldw	r2,-24(fp)
800231d4:	10803117 	ldw	r2,196(r2)
800231d8:	e0fff717 	ldw	r3,-36(fp)
800231dc:	1880102e 	bgeu	r3,r2,80023220 <alt_qspi_controller2_write_block+0xbc>
        || length > (qspi_flash_info->sector_size - (data_offset - block_offset))
800231e0:	e0bffa17 	ldw	r2,-24(fp)
800231e4:	10803417 	ldw	r2,208(r2)
800231e8:	e13ff617 	ldw	r4,-40(fp)
800231ec:	e0fff717 	ldw	r3,-36(fp)
800231f0:	20c7c83a 	sub	r3,r4,r3
800231f4:	10c7c83a 	sub	r3,r2,r3
800231f8:	e0800217 	ldw	r2,8(fp)
800231fc:	18800836 	bltu	r3,r2,80023220 <alt_qspi_controller2_write_block+0xbc>
        || length < 0
80023200:	e0800217 	ldw	r2,8(fp)
80023204:	10000616 	blt	r2,zero,80023220 <alt_qspi_controller2_write_block+0xbc>
        || (block_offset & (qspi_flash_info->sector_size - 1)) != 0) 
80023208:	e0bffa17 	ldw	r2,-24(fp)
8002320c:	10803417 	ldw	r2,208(r2)
80023210:	10ffffc4 	addi	r3,r2,-1
80023214:	e0bff717 	ldw	r2,-36(fp)
80023218:	1884703a 	and	r2,r3,r2
8002321c:	10006426 	beq	r2,zero,800233b0 <alt_qspi_controller2_write_block+0x24c>
    {
        return -EINVAL;
80023220:	00bffa84 	movi	r2,-22
80023224:	00006506 	br	800233bc <alt_qspi_controller2_write_block+0x258>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
        alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
80023228:	00bfffc4 	movi	r2,-1
8002322c:	e0bff915 	stw	r2,-28(fp)
        alt_u32 padding = 0; /** bytes to pad the next word that is written */
80023230:	e03ffc15 	stw	zero,-16(fp)
        alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
80023234:	00800104 	movi	r2,4
80023238:	e0bffb15 	stw	r2,-20(fp)

        /*
         * we need to make sure the write is word aligned
         * this should only be true at most 1 time
         */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
8002323c:	e0bffd17 	ldw	r2,-12(fp)
80023240:	108000cc 	andi	r2,r2,3
80023244:	10001526 	beq	r2,zero,8002329c <alt_qspi_controller2_write_block+0x138>
        {
            /*
             * data is not word aligned
             * calculate padding bytes need to add before start of a data offset
             */
            padding = write_offset & (sizeof(alt_u32) - 1);
80023248:	e0bffd17 	ldw	r2,-12(fp)
8002324c:	108000cc 	andi	r2,r2,3
80023250:	e0bffc15 	stw	r2,-16(fp)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
80023254:	e0fffb17 	ldw	r3,-20(fp)
80023258:	e0bffc17 	ldw	r2,-16(fp)
8002325c:	1885c83a 	sub	r2,r3,r2
80023260:	e0bffb15 	stw	r2,-20(fp)

            if(bytes_to_copy > remaining_length)
80023264:	e0bffb17 	ldw	r2,-20(fp)
80023268:	e0fffe17 	ldw	r3,-8(fp)
8002326c:	1880022e 	bgeu	r3,r2,80023278 <alt_qspi_controller2_write_block+0x114>
            {
                bytes_to_copy = remaining_length;
80023270:	e0bffe17 	ldw	r2,-8(fp)
80023274:	e0bffb15 	stw	r2,-20(fp)
            }

            write_offset = write_offset - padding;
80023278:	e0fffd17 	ldw	r3,-12(fp)
8002327c:	e0bffc17 	ldw	r2,-16(fp)
80023280:	1885c83a 	sub	r2,r3,r2
80023284:	e0bffd15 	stw	r2,-12(fp)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
80023288:	e0bffd17 	ldw	r2,-12(fp)
8002328c:	108000cc 	andi	r2,r2,3
80023290:	10000726 	beq	r2,zero,800232b0 <alt_qspi_controller2_write_block+0x14c>
            {
                return -EINVAL;
80023294:	00bffa84 	movi	r2,-22
80023298:	00004806 	br	800233bc <alt_qspi_controller2_write_block+0x258>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
8002329c:	e0bffb17 	ldw	r2,-20(fp)
800232a0:	e0fffe17 	ldw	r3,-8(fp)
800232a4:	1880022e 	bgeu	r3,r2,800232b0 <alt_qspi_controller2_write_block+0x14c>
            {
                bytes_to_copy = remaining_length;
800232a8:	e0bffe17 	ldw	r2,-8(fp)
800232ac:	e0bffb15 	stw	r2,-20(fp)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
800232b0:	e0fff904 	addi	r3,fp,-28
800232b4:	e0bffc17 	ldw	r2,-16(fp)
800232b8:	1889883a 	add	r4,r3,r2
800232bc:	e0fff517 	ldw	r3,-44(fp)
800232c0:	e0bfff17 	ldw	r2,-4(fp)
800232c4:	1885883a 	add	r2,r3,r2
800232c8:	e1bffb17 	ldw	r6,-20(fp)
800232cc:	100b883a 	mov	r5,r2
800232d0:	00104e80 	call	800104e8 <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
800232d4:	e0ffff17 	ldw	r3,-4(fp)
800232d8:	e0bffb17 	ldw	r2,-20(fp)
800232dc:	1885883a 	add	r2,r3,r2
800232e0:	e0bfff15 	stw	r2,-4(fp)
        remaining_length -= bytes_to_copy;
800232e4:	e0fffe17 	ldw	r3,-8(fp)
800232e8:	e0bffb17 	ldw	r2,-20(fp)
800232ec:	1885c83a 	sub	r2,r3,r2
800232f0:	e0bffe15 	stw	r2,-8(fp)
           
        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
800232f4:	e0bffa17 	ldw	r2,-24(fp)
800232f8:	10c02e17 	ldw	r3,184(r2)
800232fc:	e0bffd17 	ldw	r2,-12(fp)
80023300:	1885883a 	add	r2,r3,r2
80023304:	e0fff917 	ldw	r3,-28(fp)
80023308:	10c00035 	stwio	r3,0(r2)
        alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
8002330c:	e13ffa17 	ldw	r4,-24(fp)
80023310:	00239500 	call	80023950 <alt_qspi_poll_for_write_in_progress>
        if (IORD_32DIRECT(qspi_flash_info->data_base, write_offset) != word_to_write)
80023314:	e0bffa17 	ldw	r2,-24(fp)
80023318:	10c02e17 	ldw	r3,184(r2)
8002331c:	e0bffd17 	ldw	r2,-12(fp)
80023320:	1885883a 	add	r2,r3,r2
80023324:	10800037 	ldwio	r2,0(r2)
80023328:	1007883a 	mov	r3,r2
8002332c:	e0bff917 	ldw	r2,-28(fp)
80023330:	18800d26 	beq	r3,r2,80023368 <alt_qspi_controller2_write_block+0x204>
        {
            IOWR_32DIRECT(qspi_flash_info->data_base, write_offset, word_to_write);
80023334:	e0bffa17 	ldw	r2,-24(fp)
80023338:	10c02e17 	ldw	r3,184(r2)
8002333c:	e0bffd17 	ldw	r2,-12(fp)
80023340:	1885883a 	add	r2,r3,r2
80023344:	e0fff917 	ldw	r3,-28(fp)
80023348:	10c00035 	stwio	r3,0(r2)
            alt_qspi_poll_for_write_in_progress(qspi_flash_info); 
8002334c:	e13ffa17 	ldw	r4,-24(fp)
80023350:	00239500 	call	80023950 <alt_qspi_poll_for_write_in_progress>
            IORD_32DIRECT(qspi_flash_info->data_base, write_offset);
80023354:	e0bffa17 	ldw	r2,-24(fp)
80023358:	10c02e17 	ldw	r3,184(r2)
8002335c:	e0bffd17 	ldw	r2,-12(fp)
80023360:	1885883a 	add	r2,r3,r2
80023364:	10800037 	ldwio	r2,0(r2)
        }
              
        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base) &
80023368:	e0bffa17 	ldw	r2,-24(fp)
8002336c:	10803017 	ldw	r2,192(r2)
80023370:	10800404 	addi	r2,r2,16
80023374:	10800037 	ldwio	r2,0(r2)
80023378:	1080008c 	andi	r2,r2,2
8002337c:	10800098 	cmpnei	r2,r2,2
80023380:	1000081e 	bne	r2,zero,800233a4 <alt_qspi_controller2_write_block+0x240>
                ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK) ==
                        ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_ACTIVE)
        {
            /* clear register */
            IOWR_ALTERA_QSPI_CONTROLLER2_ISR(qspi_flash_info->csr_base,
80023384:	e0bffa17 	ldw	r2,-24(fp)
80023388:	10803017 	ldw	r2,192(r2)
8002338c:	10800404 	addi	r2,r2,16
80023390:	1007883a 	mov	r3,r2
80023394:	00800084 	movi	r2,2
80023398:	18800035 	stwio	r2,0(r3)
            ALTERA_QSPI_CONTROLLER2_ISR_ILLEGAL_WRITE_MASK );
            return -EIO; /** write failed, sector might be protected */
8002339c:	00bffec4 	movi	r2,-5
800233a0:	00000606 	br	800233bc <alt_qspi_controller2_write_block+0x258>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
800233a4:	e0bffd17 	ldw	r2,-12(fp)
800233a8:	10800104 	addi	r2,r2,4
800233ac:	e0bffd15 	stw	r2,-12(fp)
    while (remaining_length > 0)
800233b0:	e0bffe17 	ldw	r2,-8(fp)
800233b4:	103f9c1e 	bne	r2,zero,80023228 <_gp+0xffff24b4>
    }

    return 0;
800233b8:	0005883a 	mov	r2,zero
}
800233bc:	e037883a 	mov	sp,fp
800233c0:	dfc00117 	ldw	ra,4(sp)
800233c4:	df000017 	ldw	fp,0(sp)
800233c8:	dec00204 	addi	sp,sp,8
800233cc:	f800283a 	ret

800233d0 <alt_qspi_controller2_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
800233d0:	defff004 	addi	sp,sp,-64
800233d4:	dfc00f15 	stw	ra,60(sp)
800233d8:	df000e15 	stw	fp,56(sp)
800233dc:	df000e04 	addi	fp,sp,56
800233e0:	e13ff615 	stw	r4,-40(fp)
800233e4:	e17ff515 	stw	r5,-44(fp)
800233e8:	e1bff415 	stw	r6,-48(fp)
800233ec:	e1fff315 	stw	r7,-52(fp)
    alt_32 ret_code = 0;
800233f0:	e03fff15 	stw	zero,-4(fp)

    alt_qspi_controller2_dev *qspi_flash_info = NULL;
800233f4:	e03ff915 	stw	zero,-28(fp)

    alt_u32 write_offset = offset; /** address of next byte to write */
800233f8:	e0bff517 	ldw	r2,-44(fp)
800233fc:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 remaining_length = length; /** length of write data left to be written */
80023400:	e0bff317 	ldw	r2,-52(fp)
80023404:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
80023408:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 i = 0;
8002340c:	e03ffb15 	stw	zero,-20(fp)

    /* return -EINVAL if flash_info and src_addr are NULL */
    if(NULL == flash_info || NULL == src_addr)
80023410:	e0bff617 	ldw	r2,-40(fp)
80023414:	10000226 	beq	r2,zero,80023420 <alt_qspi_controller2_write+0x50>
80023418:	e0bff417 	ldw	r2,-48(fp)
8002341c:	1000021e 	bne	r2,zero,80023428 <alt_qspi_controller2_write+0x58>
    {
        return -EINVAL;
80023420:	00bffa84 	movi	r2,-22
80023424:	00005d06 	br	8002359c <alt_qspi_controller2_write+0x1cc>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
80023428:	e0bff617 	ldw	r2,-40(fp)
8002342c:	e0bff915 	stw	r2,-28(fp)
    
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
80023430:	e0bff517 	ldw	r2,-44(fp)
80023434:	e0fff317 	ldw	r3,-52(fp)
80023438:	180d883a 	mov	r6,r3
8002343c:	100b883a 	mov	r5,r2
80023440:	e13ff917 	ldw	r4,-28(fp)
80023444:	00238b40 	call	800238b4 <alt_qspi_validate_read_write_arguments>
80023448:	e0bfff15 	stw	r2,-4(fp)

    if(0 != ret_code)
8002344c:	e0bfff17 	ldw	r2,-4(fp)
80023450:	10000226 	beq	r2,zero,8002345c <alt_qspi_controller2_write+0x8c>
    {
        return ret_code;
80023454:	e0bfff17 	ldw	r2,-4(fp)
80023458:	00005006 	br	8002359c <alt_qspi_controller2_write+0x1cc>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
8002345c:	e0fff517 	ldw	r3,-44(fp)
80023460:	e0bff917 	ldw	r2,-28(fp)
80023464:	10803417 	ldw	r2,208(r2)
80023468:	1885203a 	divu	r2,r3,r2
8002346c:	e0bffb15 	stw	r2,-20(fp)
80023470:	00004306 	br	80023580 <alt_qspi_controller2_write+0x1b0>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
80023474:	e03ff815 	stw	zero,-32(fp)
        alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
80023478:	e03ffa15 	stw	zero,-24(fp)
        alt_u32 length_to_write = 0; /** length to write to current sector */
8002347c:	e03ff715 	stw	zero,-36(fp)

        if(0 >= remaining_length)
80023480:	e0bffd17 	ldw	r2,-12(fp)
80023484:	10004326 	beq	r2,zero,80023594 <alt_qspi_controller2_write+0x1c4>
        {
            break; /* out of data to write */
        }

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(qspi_flash_info->sector_size - 1);
80023488:	e0bff917 	ldw	r2,-28(fp)
8002348c:	10803417 	ldw	r2,208(r2)
80023490:	0085c83a 	sub	r2,zero,r2
80023494:	e0fffe17 	ldw	r3,-8(fp)
80023498:	1884703a 	and	r2,r3,r2
8002349c:	e0bff815 	stw	r2,-32(fp)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
800234a0:	e0fff817 	ldw	r3,-32(fp)
800234a4:	e0bffe17 	ldw	r2,-8(fp)
800234a8:	18800426 	beq	r3,r2,800234bc <alt_qspi_controller2_write+0xec>
        {
            offset_within_current_sector = write_offset - block_offset;
800234ac:	e0fffe17 	ldw	r3,-8(fp)
800234b0:	e0bff817 	ldw	r2,-32(fp)
800234b4:	1885c83a 	sub	r2,r3,r2
800234b8:	e0bffa15 	stw	r2,-24(fp)
        }

        /* erase sector */
        ret_code = alt_qspi_controller2_erase_block(flash_info, block_offset);
800234bc:	e0bff817 	ldw	r2,-32(fp)
800234c0:	100b883a 	mov	r5,r2
800234c4:	e13ff617 	ldw	r4,-40(fp)
800234c8:	0022ffc0 	call	80022ffc <alt_qspi_controller2_erase_block>
800234cc:	e0bfff15 	stw	r2,-4(fp)

        if(0 != ret_code)
800234d0:	e0bfff17 	ldw	r2,-4(fp)
800234d4:	10000226 	beq	r2,zero,800234e0 <alt_qspi_controller2_write+0x110>
        {
            return ret_code;
800234d8:	e0bfff17 	ldw	r2,-4(fp)
800234dc:	00002f06 	br	8002359c <alt_qspi_controller2_write+0x1cc>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(qspi_flash_info->sector_size - offset_within_current_sector, 
800234e0:	e0bff917 	ldw	r2,-28(fp)
800234e4:	10c03417 	ldw	r3,208(r2)
800234e8:	e0bffa17 	ldw	r2,-24(fp)
800234ec:	1887c83a 	sub	r3,r3,r2
800234f0:	e0bffd17 	ldw	r2,-12(fp)
800234f4:	1880012e 	bgeu	r3,r2,800234fc <alt_qspi_controller2_write+0x12c>
800234f8:	1805883a 	mov	r2,r3
800234fc:	e0bff715 	stw	r2,-36(fp)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_qspi_controller2_write_block(flash_info, block_offset, write_offset,
80023500:	e13ff817 	ldw	r4,-32(fp)
80023504:	e17ffe17 	ldw	r5,-8(fp)
80023508:	e0fff417 	ldw	r3,-48(fp)
8002350c:	e0bffc17 	ldw	r2,-16(fp)
80023510:	1887883a 	add	r3,r3,r2
80023514:	e0bff717 	ldw	r2,-36(fp)
80023518:	d8800015 	stw	r2,0(sp)
8002351c:	180f883a 	mov	r7,r3
80023520:	280d883a 	mov	r6,r5
80023524:	200b883a 	mov	r5,r4
80023528:	e13ff617 	ldw	r4,-40(fp)
8002352c:	00231640 	call	80023164 <alt_qspi_controller2_write_block>
80023530:	e0bfff15 	stw	r2,-4(fp)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
80023534:	e0bfff17 	ldw	r2,-4(fp)
80023538:	10000226 	beq	r2,zero,80023544 <alt_qspi_controller2_write+0x174>
        {
            return ret_code;
8002353c:	e0bfff17 	ldw	r2,-4(fp)
80023540:	00001606 	br	8002359c <alt_qspi_controller2_write+0x1cc>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
80023544:	e0fffd17 	ldw	r3,-12(fp)
80023548:	e0bff717 	ldw	r2,-36(fp)
8002354c:	1885c83a 	sub	r2,r3,r2
80023550:	e0bffd15 	stw	r2,-12(fp)
        buffer_offset += length_to_write;
80023554:	e0fffc17 	ldw	r3,-16(fp)
80023558:	e0bff717 	ldw	r2,-36(fp)
8002355c:	1885883a 	add	r2,r3,r2
80023560:	e0bffc15 	stw	r2,-16(fp)
        write_offset += length_to_write; 
80023564:	e0fffe17 	ldw	r3,-8(fp)
80023568:	e0bff717 	ldw	r2,-36(fp)
8002356c:	1885883a 	add	r2,r3,r2
80023570:	e0bffe15 	stw	r2,-8(fp)
    for(i = offset/qspi_flash_info->sector_size ; i < qspi_flash_info->number_of_sectors; i++)
80023574:	e0bffb17 	ldw	r2,-20(fp)
80023578:	10800044 	addi	r2,r2,1
8002357c:	e0bffb15 	stw	r2,-20(fp)
80023580:	e0bff917 	ldw	r2,-28(fp)
80023584:	10803317 	ldw	r2,204(r2)
80023588:	e0fffb17 	ldw	r3,-20(fp)
8002358c:	18bfb936 	bltu	r3,r2,80023474 <_gp+0xffff2700>
80023590:	00000106 	br	80023598 <alt_qspi_controller2_write+0x1c8>
            break; /* out of data to write */
80023594:	0001883a 	nop
    }

    return ret_code;
80023598:	e0bfff17 	ldw	r2,-4(fp)
}
8002359c:	e037883a 	mov	sp,fp
800235a0:	dfc00117 	ldw	ra,4(sp)
800235a4:	df000017 	ldw	fp,0(sp)
800235a8:	dec00204 	addi	sp,sp,8
800235ac:	f800283a 	ret

800235b0 <alt_qspi_controller2_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
800235b0:	defff804 	addi	sp,sp,-32
800235b4:	dfc00715 	stw	ra,28(sp)
800235b8:	df000615 	stw	fp,24(sp)
800235bc:	df000604 	addi	fp,sp,24
800235c0:	e13ffd15 	stw	r4,-12(fp)
800235c4:	e17ffc15 	stw	r5,-16(fp)
800235c8:	e1bffb15 	stw	r6,-20(fp)
800235cc:	e1fffa15 	stw	r7,-24(fp)
    alt_32 ret_code = 0;
800235d0:	e03fff15 	stw	zero,-4(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
800235d4:	e03ffe15 	stw	zero,-8(fp)
    
    /* return -EINVAL if flash_info and dest_addr are NULL */
    if(NULL == flash_info || NULL == dest_addr)
800235d8:	e0bffd17 	ldw	r2,-12(fp)
800235dc:	10000226 	beq	r2,zero,800235e8 <alt_qspi_controller2_read+0x38>
800235e0:	e0bffb17 	ldw	r2,-20(fp)
800235e4:	1000021e 	bne	r2,zero,800235f0 <alt_qspi_controller2_read+0x40>
    {
        return -EINVAL;
800235e8:	00bffa84 	movi	r2,-22
800235ec:	00001606 	br	80023648 <alt_qspi_controller2_read+0x98>
    }
    
    qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
800235f0:	e0bffd17 	ldw	r2,-12(fp)
800235f4:	e0bffe15 	stw	r2,-8(fp)

    /* validate arguments */
    ret_code = alt_qspi_validate_read_write_arguments(qspi_flash_info, offset, length);
800235f8:	e0bffc17 	ldw	r2,-16(fp)
800235fc:	e0fffa17 	ldw	r3,-24(fp)
80023600:	180d883a 	mov	r6,r3
80023604:	100b883a 	mov	r5,r2
80023608:	e13ffe17 	ldw	r4,-8(fp)
8002360c:	00238b40 	call	800238b4 <alt_qspi_validate_read_write_arguments>
80023610:	e0bfff15 	stw	r2,-4(fp)

    /* copy data from flash to destination address */
    if(0 == ret_code)
80023614:	e0bfff17 	ldw	r2,-4(fp)
80023618:	10000a1e 	bne	r2,zero,80023644 <alt_qspi_controller2_read+0x94>
    {
        memcpy(dest_addr, (alt_u8*)qspi_flash_info->data_base + offset, length);
8002361c:	e0bffe17 	ldw	r2,-8(fp)
80023620:	10c02e17 	ldw	r3,184(r2)
80023624:	e0bffc17 	ldw	r2,-16(fp)
80023628:	1885883a 	add	r2,r3,r2
8002362c:	1007883a 	mov	r3,r2
80023630:	e0bffa17 	ldw	r2,-24(fp)
80023634:	100d883a 	mov	r6,r2
80023638:	180b883a 	mov	r5,r3
8002363c:	e13ffb17 	ldw	r4,-20(fp)
80023640:	00104e80 	call	800104e8 <memcpy>
    }

    return ret_code;
80023644:	e0bfff17 	ldw	r2,-4(fp)
}
80023648:	e037883a 	mov	sp,fp
8002364c:	dfc00117 	ldw	ra,4(sp)
80023650:	df000017 	ldw	fp,0(sp)
80023654:	dec00204 	addi	sp,sp,8
80023658:	f800283a 	ret

8002365c <altera_qspi_controller2_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_qspi_controller2_init(alt_qspi_controller2_dev *flash)
{
8002365c:	defffa04 	addi	sp,sp,-24
80023660:	dfc00515 	stw	ra,20(sp)
80023664:	df000415 	stw	fp,16(sp)
80023668:	df000404 	addi	fp,sp,16
8002366c:	e13ffc15 	stw	r4,-16(fp)
    alt_u32 silicon_id = 0;
80023670:	e03fff15 	stw	zero,-4(fp)
    alt_u32 size_in_bytes = 0;
80023674:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 number_of_sectors = 0;
80023678:	e03ffe15 	stw	zero,-8(fp)

    /* return -EINVAL if flash is NULL */
    if(NULL == flash)
8002367c:	e0bffc17 	ldw	r2,-16(fp)
80023680:	1000021e 	bne	r2,zero,8002368c <altera_qspi_controller2_init+0x30>
    {
        return -EINVAL;
80023684:	00bffa84 	movi	r2,-22
80023688:	00008506 	br	800238a0 <altera_qspi_controller2_init+0x244>
    }
    
    /* return -ENODEV if CSR slave is not attached */
    if(NULL == (void *)flash->csr_base)
8002368c:	e0bffc17 	ldw	r2,-16(fp)
80023690:	10803017 	ldw	r2,192(r2)
80023694:	1000021e 	bne	r2,zero,800236a0 <altera_qspi_controller2_init+0x44>
    {
        return -ENODEV;
80023698:	00bffb44 	movi	r2,-19
8002369c:	00008006 	br	800238a0 <altera_qspi_controller2_init+0x244>
     *
     * In both cases, we can determine the number of sectors, which we can use
     * to calculate a size. We compare that size to the system.h value to make sure
     * the QSPI soft IP was configured correctly.
     */
    if(0 == flash->is_epcs)
800236a0:	e0bffc17 	ldw	r2,-16(fp)
800236a4:	10803217 	ldw	r2,200(r2)
800236a8:	1000381e 	bne	r2,zero,8002378c <altera_qspi_controller2_init+0x130>
    {
        /* If we're an EPCQ or QSPI, we read QSPI_RD_RDID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_RDID(flash->csr_base);
800236ac:	e0bffc17 	ldw	r2,-16(fp)
800236b0:	10803017 	ldw	r2,192(r2)
800236b4:	10800204 	addi	r2,r2,8
800236b8:	10800037 	ldwio	r2,0(r2)
800236bc:	e0bfff15 	stw	r2,-4(fp)
        silicon_id >>= 16;
800236c0:	e0bfff17 	ldw	r2,-4(fp)
800236c4:	1004d43a 	srli	r2,r2,16
800236c8:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &=  ALTERA_QSPI_CONTROLLER2_RDID_MASK;
800236cc:	e0bfff17 	ldw	r2,-4(fp)
800236d0:	10803fcc 	andi	r2,r2,255
800236d4:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCQ/QSPI device so we can figure out the number of sectors */
        /*EPCQ and QSPI share the same ID for the same capacity*/
        switch(silicon_id)
800236d8:	e0bfff17 	ldw	r2,-4(fp)
800236dc:	10bffac4 	addi	r2,r2,-21
800236e0:	10c00368 	cmpgeui	r3,r2,13
800236e4:	1800271e 	bne	r3,zero,80023784 <altera_qspi_controller2_init+0x128>
800236e8:	100690ba 	slli	r3,r2,2
800236ec:	00a000b4 	movhi	r2,32770
800236f0:	1885883a 	add	r2,r3,r2
800236f4:	108dbf17 	ldw	r2,14076(r2)
800236f8:	1000683a 	jmp	r2
800236fc:	80023730 	cmpltui	zero,r16,2268
80023700:	8002373c 	xorhi	zero,r16,2268
80023704:	80023748 	cmpgei	zero,r16,2269
80023708:	80023754 	ori	zero,r16,2269
8002370c:	80023760 	cmpeqi	zero,r16,2269
80023710:	80023784 	addi	zero,r16,2270
80023714:	80023784 	addi	zero,r16,2270
80023718:	80023784 	addi	zero,r16,2270
8002371c:	80023784 	addi	zero,r16,2270
80023720:	80023784 	addi	zero,r16,2270
80023724:	80023784 	addi	zero,r16,2270
80023728:	8002376c 	andhi	zero,r16,2269
8002372c:	80023778 	rdprs	zero,r16,2269
        {
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI16:
            {
                number_of_sectors = 32;
80023730:	00800804 	movi	r2,32
80023734:	e0bffe15 	stw	r2,-8(fp)
                break;
80023738:	00002e06 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI32:
            {
                number_of_sectors = 64;
8002373c:	00801004 	movi	r2,64
80023740:	e0bffe15 	stw	r2,-8(fp)
                break;
80023744:	00002b06 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI64:
            {
                number_of_sectors = 128;
80023748:	00802004 	movi	r2,128
8002374c:	e0bffe15 	stw	r2,-8(fp)
                break;
80023750:	00002806 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI128:
            {
                number_of_sectors = 256;
80023754:	00804004 	movi	r2,256
80023758:	e0bffe15 	stw	r2,-8(fp)
                break;
8002375c:	00002506 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI256:
            {
                number_of_sectors = 512;
80023760:	00808004 	movi	r2,512
80023764:	e0bffe15 	stw	r2,-8(fp)
                break;
80023768:	00002206 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI512:
            {
                number_of_sectors = 1024;
8002376c:	00810004 	movi	r2,1024
80023770:	e0bffe15 	stw	r2,-8(fp)
                break;
80023774:	00001f06 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_RDID_QSPI1024:
            {
                number_of_sectors = 2048;
80023778:	00820004 	movi	r2,2048
8002377c:	e0bffe15 	stw	r2,-8(fp)
                break;
80023780:	00001c06 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
80023784:	00bffb44 	movi	r2,-19
80023788:	00004506 	br	800238a0 <altera_qspi_controller2_init+0x244>
            }
        }
    }
    else {
        /* If we're an EPCS, we read QSPI_RD_SID for the silicon ID */
        silicon_id = IORD_ALTERA_QSPI_CONTROLLER2_SID(flash->csr_base);
8002378c:	e0bffc17 	ldw	r2,-16(fp)
80023790:	10803017 	ldw	r2,192(r2)
80023794:	10800104 	addi	r2,r2,4
80023798:	10800037 	ldwio	r2,0(r2)
8002379c:	e0bfff15 	stw	r2,-4(fp)
        silicon_id &= ALTERA_QSPI_CONTROLLER2_SID_MASK;
800237a0:	e0bfff17 	ldw	r2,-4(fp)
800237a4:	10803fcc 	andi	r2,r2,255
800237a8:	e0bfff15 	stw	r2,-4(fp)

        /* Determine which EPCS device so we can figure out various properties */
        switch(silicon_id)
800237ac:	e0bfff17 	ldw	r2,-4(fp)
800237b0:	10c005a0 	cmpeqi	r3,r2,22
800237b4:	1800071e 	bne	r3,zero,800237d4 <altera_qspi_controller2_init+0x178>
800237b8:	10c00620 	cmpeqi	r3,r2,24
800237bc:	1800081e 	bne	r3,zero,800237e0 <altera_qspi_controller2_init+0x184>
800237c0:	10800520 	cmpeqi	r2,r2,20
800237c4:	10000926 	beq	r2,zero,800237ec <altera_qspi_controller2_init+0x190>
        {
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS16:
            {
                number_of_sectors = 32;
800237c8:	00800804 	movi	r2,32
800237cc:	e0bffe15 	stw	r2,-8(fp)
                break;
800237d0:	00000806 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS64:
            {
                number_of_sectors = 128;
800237d4:	00802004 	movi	r2,128
800237d8:	e0bffe15 	stw	r2,-8(fp)
                break;
800237dc:	00000506 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            case ALTERA_QSPI_CONTROLLER2_SID_EPCS128:
            {
                number_of_sectors = 256;
800237e0:	00804004 	movi	r2,256
800237e4:	e0bffe15 	stw	r2,-8(fp)
                break;
800237e8:	00000206 	br	800237f4 <altera_qspi_controller2_init+0x198>
            }
            default:
            {
                return -ENODEV;
800237ec:	00bffb44 	movi	r2,-19
800237f0:	00002b06 	br	800238a0 <altera_qspi_controller2_init+0x244>
            }
        }
    }

    /* Calculate size of flash based on number of sectors */
    size_in_bytes = number_of_sectors * flash->sector_size;
800237f4:	e0bffc17 	ldw	r2,-16(fp)
800237f8:	10803417 	ldw	r2,208(r2)
800237fc:	e0fffe17 	ldw	r3,-8(fp)
80023800:	1885383a 	mul	r2,r3,r2
80023804:	e0bffd15 	stw	r2,-12(fp)
    /*
     * Make sure calculated size is the same size given in system.h
     * Also check number of sectors is the same number given in system.h
     * Otherwise the QSPI IP was not configured correctly
     */
    if(    size_in_bytes != flash->size_in_bytes ||
80023808:	e0bffc17 	ldw	r2,-16(fp)
8002380c:	10803117 	ldw	r2,196(r2)
80023810:	e0fffd17 	ldw	r3,-12(fp)
80023814:	1880041e 	bne	r3,r2,80023828 <altera_qspi_controller2_init+0x1cc>
            number_of_sectors != flash->number_of_sectors)
80023818:	e0bffc17 	ldw	r2,-16(fp)
8002381c:	10803317 	ldw	r2,204(r2)
    if(    size_in_bytes != flash->size_in_bytes ||
80023820:	e0fffe17 	ldw	r3,-8(fp)
80023824:	18800426 	beq	r3,r2,80023838 <altera_qspi_controller2_init+0x1dc>
    {
        flash->dev.number_of_regions = 0;
80023828:	e0bffc17 	ldw	r2,-16(fp)
8002382c:	10000c15 	stw	zero,48(r2)
        return -ENODEV;
80023830:	00bffb44 	movi	r2,-19
80023834:	00001a06 	br	800238a0 <altera_qspi_controller2_init+0x244>
    }
    else
    {
        flash->silicon_id = silicon_id;
80023838:	e0bffc17 	ldw	r2,-16(fp)
8002383c:	e0ffff17 	ldw	r3,-4(fp)
80023840:	10c03615 	stw	r3,216(r2)
        flash->number_of_sectors = number_of_sectors;
80023844:	e0bffc17 	ldw	r2,-16(fp)
80023848:	e0fffe17 	ldw	r3,-8(fp)
8002384c:	10c03315 	stw	r3,204(r2)

        /*
         * populate fields of region_info required to conform to HAL API
         * create 1 region that composed of "number_of_sectors" blocks
         */
        flash->dev.number_of_regions = 1;
80023850:	e0bffc17 	ldw	r2,-16(fp)
80023854:	00c00044 	movi	r3,1
80023858:	10c00c15 	stw	r3,48(r2)
        flash->dev.region_info[0].offset = 0;
8002385c:	e0bffc17 	ldw	r2,-16(fp)
80023860:	10000d15 	stw	zero,52(r2)
        flash->dev.region_info[0].region_size = size_in_bytes;
80023864:	e0fffd17 	ldw	r3,-12(fp)
80023868:	e0bffc17 	ldw	r2,-16(fp)
8002386c:	10c00e15 	stw	r3,56(r2)
        flash->dev.region_info[0].number_of_blocks = number_of_sectors;
80023870:	e0fffe17 	ldw	r3,-8(fp)
80023874:	e0bffc17 	ldw	r2,-16(fp)
80023878:	10c00f15 	stw	r3,60(r2)
        flash->dev.region_info[0].block_size = flash->sector_size;
8002387c:	e0bffc17 	ldw	r2,-16(fp)
80023880:	10803417 	ldw	r2,208(r2)
80023884:	1007883a 	mov	r3,r2
80023888:	e0bffc17 	ldw	r2,-16(fp)
8002388c:	10c01015 	stw	r3,64(r2)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
        alt_flash_device_register(&(flash->dev));
80023890:	e0bffc17 	ldw	r2,-16(fp)
80023894:	1009883a 	mov	r4,r2
80023898:	0023f700 	call	80023f70 <alt_flash_device_register>


    return 0;
8002389c:	0005883a 	mov	r2,zero
}
800238a0:	e037883a 	mov	sp,fp
800238a4:	dfc00117 	ldw	ra,4(sp)
800238a8:	df000017 	ldw	fp,0(sp)
800238ac:	dec00204 	addi	sp,sp,8
800238b0:	f800283a 	ret

800238b4 <alt_qspi_validate_read_write_arguments>:
(
        alt_qspi_controller2_dev *flash_info, /** device info */
        alt_u32 offset, /** offset of read/write */
        alt_u32 length /** length of read/write */
)
{
800238b4:	defff904 	addi	sp,sp,-28
800238b8:	df000615 	stw	fp,24(sp)
800238bc:	df000604 	addi	fp,sp,24
800238c0:	e13ffc15 	stw	r4,-16(fp)
800238c4:	e17ffb15 	stw	r5,-20(fp)
800238c8:	e1bffa15 	stw	r6,-24(fp)
    alt_qspi_controller2_dev *qspi_flash_info = NULL;
800238cc:	e03fff15 	stw	zero,-4(fp)
    alt_u32 start_address = 0;
800238d0:	e03ffe15 	stw	zero,-8(fp)
    alt_32 end_address = 0;
800238d4:	e03ffd15 	stw	zero,-12(fp)
    
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
800238d8:	e0bffc17 	ldw	r2,-16(fp)
800238dc:	1000021e 	bne	r2,zero,800238e8 <alt_qspi_validate_read_write_arguments+0x34>
   {
        return -EINVAL;
800238e0:	00bffa84 	movi	r2,-22
800238e4:	00001606 	br	80023940 <alt_qspi_validate_read_write_arguments+0x8c>
   }
    
  qspi_flash_info = (alt_qspi_controller2_dev*)flash_info;
800238e8:	e0bffc17 	ldw	r2,-16(fp)
800238ec:	e0bfff15 	stw	r2,-4(fp)

  start_address = qspi_flash_info->data_base + offset; /** first address of read or write */
800238f0:	e0bfff17 	ldw	r2,-4(fp)
800238f4:	10802e17 	ldw	r2,184(r2)
800238f8:	e0fffb17 	ldw	r3,-20(fp)
800238fc:	1885883a 	add	r2,r3,r2
80023900:	e0bffe15 	stw	r2,-8(fp)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
80023904:	e0fffe17 	ldw	r3,-8(fp)
80023908:	e0bffa17 	ldw	r2,-24(fp)
8002390c:	1885883a 	add	r2,r3,r2
80023910:	e0bffd15 	stw	r2,-12(fp)

  /* make sure start and end address is less then the end address of the flash */
  if(
          start_address >= qspi_flash_info->data_end ||
80023914:	e0bfff17 	ldw	r2,-4(fp)
80023918:	10802f17 	ldw	r2,188(r2)
  if(
8002391c:	e0fffe17 	ldw	r3,-8(fp)
80023920:	1880042e 	bgeu	r3,r2,80023934 <alt_qspi_validate_read_write_arguments+0x80>
          end_address > qspi_flash_info->data_end ||
80023924:	e0bfff17 	ldw	r2,-4(fp)
80023928:	10c02f17 	ldw	r3,188(r2)
8002392c:	e0bffd17 	ldw	r2,-12(fp)
          offset < 0 ||
80023930:	1880022e 	bgeu	r3,r2,8002393c <alt_qspi_validate_read_write_arguments+0x88>
          length < 0
  )
  {
      return -EINVAL;
80023934:	00bffa84 	movi	r2,-22
80023938:	00000106 	br	80023940 <alt_qspi_validate_read_write_arguments+0x8c>
  }

  return 0;
8002393c:	0005883a 	mov	r2,zero
}
80023940:	e037883a 	mov	sp,fp
80023944:	df000017 	ldw	fp,0(sp)
80023948:	dec00104 	addi	sp,sp,4
8002394c:	f800283a 	ret

80023950 <alt_qspi_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_qspi_poll_for_write_in_progress(alt_qspi_controller2_dev* qspi_flash_info)
{  
80023950:	defffc04 	addi	sp,sp,-16
80023954:	df000315 	stw	fp,12(sp)
80023958:	df000304 	addi	fp,sp,12
8002395c:	e13ffd15 	stw	r4,-12(fp)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
    alt_u32 timeout = ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE;
80023960:	008002f4 	movhi	r2,11
80023964:	10ab9804 	addi	r2,r2,-20896
80023968:	e0bffe15 	stw	r2,-8(fp)
    alt_u16 counter = 0;
8002396c:	e03fff8d 	sth	zero,-2(fp)
#endif

    /* return -EINVAL if qspi_flash_info is NULL */
    if(NULL == qspi_flash_info)
80023970:	e0bffd17 	ldw	r2,-12(fp)
80023974:	10000a1e 	bne	r2,zero,800239a0 <alt_qspi_poll_for_write_in_progress+0x50>
    {
        return -EINVAL;
80023978:	00bffa84 	movi	r2,-22
8002397c:	00000f06 	br	800239bc <alt_qspi_poll_for_write_in_progress+0x6c>
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_MASK) ==
            ALTERA_QSPI_CONTROLLER2_STATUS_WIP_BUSY)
    {
        if (counter > (ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE>>1)) alt_busy_sleep(2); /* delay 2us */
#if ALTERA_QSPI_CONTROLLER2_1US_TIMEOUT_VALUE > 0
        if(timeout <= counter )
80023980:	e0ffff8b 	ldhu	r3,-2(fp)
80023984:	e0bffe17 	ldw	r2,-8(fp)
80023988:	18800236 	bltu	r3,r2,80023994 <alt_qspi_poll_for_write_in_progress+0x44>
        {
            return -ETIME;
8002398c:	00bff084 	movi	r2,-62
80023990:	00000a06 	br	800239bc <alt_qspi_poll_for_write_in_progress+0x6c>
        }
        
        counter++;
80023994:	e0bfff8b 	ldhu	r2,-2(fp)
80023998:	10800044 	addi	r2,r2,1
8002399c:	e0bfff8d 	sth	r2,-2(fp)
    while((IORD_ALTERA_QSPI_CONTROLLER2_STATUS(qspi_flash_info->csr_base) &
800239a0:	e0bffd17 	ldw	r2,-12(fp)
800239a4:	10803017 	ldw	r2,192(r2)
800239a8:	10800037 	ldwio	r2,0(r2)
800239ac:	1080004c 	andi	r2,r2,1
800239b0:	10800060 	cmpeqi	r2,r2,1
800239b4:	103ff21e 	bne	r2,zero,80023980 <_gp+0xffff2c0c>
#endif

    }

    return 0;
800239b8:	0005883a 	mov	r2,zero
}
800239bc:	e037883a 	mov	sp,fp
800239c0:	df000017 	ldw	fp,0(sp)
800239c4:	dec00104 	addi	sp,sp,4
800239c8:	f800283a 	ret

800239cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
800239cc:	defff404 	addi	sp,sp,-48
800239d0:	df000b15 	stw	fp,44(sp)
800239d4:	df000b04 	addi	fp,sp,44
800239d8:	e13ff815 	stw	r4,-32(fp)
800239dc:	e17ff715 	stw	r5,-36(fp)
800239e0:	e1bff615 	stw	r6,-40(fp)
800239e4:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
800239e8:	e03ffe15 	stw	zero,-8(fp)
800239ec:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
800239f0:	d0a78017 	ldw	r2,-25088(gp)
  
  if (alt_ticks_per_second ())
800239f4:	10004626 	beq	r2,zero,80023b10 <alt_alarm_start+0x144>
  {
    if (alarm)
800239f8:	e0bff817 	ldw	r2,-32(fp)
800239fc:	10004226 	beq	r2,zero,80023b08 <alt_alarm_start+0x13c>
    {
      alarm->callback = callback;
80023a00:	e0bff817 	ldw	r2,-32(fp)
80023a04:	e0fff617 	ldw	r3,-40(fp)
80023a08:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
80023a0c:	e0bff817 	ldw	r2,-32(fp)
80023a10:	e0fff517 	ldw	r3,-44(fp)
80023a14:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
80023a18:	0005303a 	rdctl	r2,status
80023a1c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80023a20:	e0fff917 	ldw	r3,-28(fp)
80023a24:	00bfff84 	movi	r2,-2
80023a28:	1884703a 	and	r2,r3,r2
80023a2c:	1001703a 	wrctl	status,r2
  return context;
80023a30:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80023a34:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80023a38:	d0a78117 	ldw	r2,-25084(gp)
80023a3c:	d0e78217 	ldw	r3,-25080(gp)
      
      current_nticks = alt_nticks();
80023a40:	e0bffe15 	stw	r2,-8(fp)
80023a44:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
80023a48:	e0bff717 	ldw	r2,-36(fp)
80023a4c:	1011883a 	mov	r8,r2
80023a50:	0013883a 	mov	r9,zero
80023a54:	e13ffe17 	ldw	r4,-8(fp)
80023a58:	e17fff17 	ldw	r5,-4(fp)
80023a5c:	4105883a 	add	r2,r8,r4
80023a60:	120d803a 	cmpltu	r6,r2,r8
80023a64:	4947883a 	add	r3,r9,r5
80023a68:	30c9883a 	add	r4,r6,r3
80023a6c:	2007883a 	mov	r3,r4
80023a70:	1009883a 	mov	r4,r2
80023a74:	180b883a 	mov	r5,r3
80023a78:	01800044 	movi	r6,1
80023a7c:	000f883a 	mov	r7,zero
80023a80:	2185883a 	add	r2,r4,r6
80023a84:	1111803a 	cmpltu	r8,r2,r4
80023a88:	29c7883a 	add	r3,r5,r7
80023a8c:	40c9883a 	add	r4,r8,r3
80023a90:	2007883a 	mov	r3,r4
80023a94:	1009883a 	mov	r4,r2
80023a98:	180b883a 	mov	r5,r3
80023a9c:	e0bff817 	ldw	r2,-32(fp)
80023aa0:	11000215 	stw	r4,8(r2)
80023aa4:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80023aa8:	e0bff817 	ldw	r2,-32(fp)
80023aac:	d0e01304 	addi	r3,gp,-32692
80023ab0:	e0fffb15 	stw	r3,-20(fp)
80023ab4:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
80023ab8:	e0bffa17 	ldw	r2,-24(fp)
80023abc:	e0fffb17 	ldw	r3,-20(fp)
80023ac0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80023ac4:	e0bffb17 	ldw	r2,-20(fp)
80023ac8:	10c00017 	ldw	r3,0(r2)
80023acc:	e0bffa17 	ldw	r2,-24(fp)
80023ad0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
80023ad4:	e0bffb17 	ldw	r2,-20(fp)
80023ad8:	10800017 	ldw	r2,0(r2)
80023adc:	e0fffa17 	ldw	r3,-24(fp)
80023ae0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80023ae4:	e0bffb17 	ldw	r2,-20(fp)
80023ae8:	e0fffa17 	ldw	r3,-24(fp)
80023aec:	10c00015 	stw	r3,0(r2)
80023af0:	e0bffd17 	ldw	r2,-12(fp)
80023af4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
80023af8:	e0bffc17 	ldw	r2,-16(fp)
80023afc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
80023b00:	0005883a 	mov	r2,zero
80023b04:	00000306 	br	80023b14 <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
80023b08:	00bffa84 	movi	r2,-22
80023b0c:	00000106 	br	80023b14 <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
80023b10:	00bfde84 	movi	r2,-134
  }
}
80023b14:	e037883a 	mov	sp,fp
80023b18:	df000017 	ldw	fp,0(sp)
80023b1c:	dec00104 	addi	sp,sp,4
80023b20:	f800283a 	ret

80023b24 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80023b24:	defffb04 	addi	sp,sp,-20
80023b28:	df000415 	stw	fp,16(sp)
80023b2c:	df000404 	addi	fp,sp,16
80023b30:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80023b34:	008000c4 	movi	r2,3
80023b38:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80023b3c:	e0fffe17 	ldw	r3,-8(fp)
80023b40:	008003f4 	movhi	r2,15
80023b44:	10909004 	addi	r2,r2,16960
80023b48:	1887383a 	mul	r3,r3,r2
80023b4c:	0081dcf4 	movhi	r2,1907
80023b50:	10965004 	addi	r2,r2,22848
80023b54:	10c7203a 	divu	r3,r2,r3
  big_loops = us / (INT_MAX/
80023b58:	00a00034 	movhi	r2,32768
80023b5c:	10bfffc4 	addi	r2,r2,-1
80023b60:	10c5203a 	divu	r2,r2,r3
80023b64:	e0fffc17 	ldw	r3,-16(fp)
80023b68:	1885203a 	divu	r2,r3,r2
80023b6c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
80023b70:	e0bffd17 	ldw	r2,-12(fp)
80023b74:	10002526 	beq	r2,zero,80023c0c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80023b78:	e03fff15 	stw	zero,-4(fp)
80023b7c:	00001406 	br	80023bd0 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80023b80:	00a00034 	movhi	r2,32768
80023b84:	10bfffc4 	addi	r2,r2,-1
80023b88:	10bfffc4 	addi	r2,r2,-1
80023b8c:	103ffe1e 	bne	r2,zero,80023b88 <_gp+0xffff2e14>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80023b90:	e0fffe17 	ldw	r3,-8(fp)
80023b94:	008003f4 	movhi	r2,15
80023b98:	10909004 	addi	r2,r2,16960
80023b9c:	1887383a 	mul	r3,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
80023ba0:	0081dcf4 	movhi	r2,1907
80023ba4:	10965004 	addi	r2,r2,22848
80023ba8:	10c7203a 	divu	r3,r2,r3
80023bac:	00a00034 	movhi	r2,32768
80023bb0:	10bfffc4 	addi	r2,r2,-1
80023bb4:	10c5203a 	divu	r2,r2,r3
80023bb8:	e0fffc17 	ldw	r3,-16(fp)
80023bbc:	1885c83a 	sub	r2,r3,r2
80023bc0:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
80023bc4:	e0bfff17 	ldw	r2,-4(fp)
80023bc8:	10800044 	addi	r2,r2,1
80023bcc:	e0bfff15 	stw	r2,-4(fp)
80023bd0:	e0ffff17 	ldw	r3,-4(fp)
80023bd4:	e0bffd17 	ldw	r2,-12(fp)
80023bd8:	18bfe916 	blt	r3,r2,80023b80 <_gp+0xffff2e0c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80023bdc:	e0fffe17 	ldw	r3,-8(fp)
80023be0:	008003f4 	movhi	r2,15
80023be4:	10909004 	addi	r2,r2,16960
80023be8:	1887383a 	mul	r3,r3,r2
80023bec:	0081dcf4 	movhi	r2,1907
80023bf0:	10965004 	addi	r2,r2,22848
80023bf4:	10c7203a 	divu	r3,r2,r3
80023bf8:	e0bffc17 	ldw	r2,-16(fp)
80023bfc:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
80023c00:	10bfffc4 	addi	r2,r2,-1
80023c04:	103ffe1e 	bne	r2,zero,80023c00 <_gp+0xffff2e8c>
80023c08:	00000b06 	br	80023c38 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80023c0c:	e0fffe17 	ldw	r3,-8(fp)
80023c10:	008003f4 	movhi	r2,15
80023c14:	10909004 	addi	r2,r2,16960
80023c18:	1887383a 	mul	r3,r3,r2
80023c1c:	0081dcf4 	movhi	r2,1907
80023c20:	10965004 	addi	r2,r2,22848
80023c24:	10c7203a 	divu	r3,r2,r3
80023c28:	e0bffc17 	ldw	r2,-16(fp)
80023c2c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
80023c30:	10bfffc4 	addi	r2,r2,-1
80023c34:	00bffe16 	blt	zero,r2,80023c30 <_gp+0xffff2ebc>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80023c38:	0005883a 	mov	r2,zero
}
80023c3c:	e037883a 	mov	sp,fp
80023c40:	df000017 	ldw	fp,0(sp)
80023c44:	dec00104 	addi	sp,sp,4
80023c48:	f800283a 	ret

80023c4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80023c4c:	defffe04 	addi	sp,sp,-8
80023c50:	df000115 	stw	fp,4(sp)
80023c54:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80023c58:	e03fff15 	stw	zero,-4(fp)
80023c5c:	00000506 	br	80023c74 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
80023c60:	e0bfff17 	ldw	r2,-4(fp)
80023c64:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
80023c68:	e0bfff17 	ldw	r2,-4(fp)
80023c6c:	10800804 	addi	r2,r2,32
80023c70:	e0bfff15 	stw	r2,-4(fp)
80023c74:	e0bfff17 	ldw	r2,-4(fp)
80023c78:	10820030 	cmpltui	r2,r2,2048
80023c7c:	103ff81e 	bne	r2,zero,80023c60 <_gp+0xffff2eec>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80023c80:	0001883a 	nop
80023c84:	e037883a 	mov	sp,fp
80023c88:	df000017 	ldw	fp,0(sp)
80023c8c:	dec00104 	addi	sp,sp,4
80023c90:	f800283a 	ret

80023c94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80023c94:	defffd04 	addi	sp,sp,-12
80023c98:	dfc00215 	stw	ra,8(sp)
80023c9c:	df000115 	stw	fp,4(sp)
80023ca0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80023ca4:	00a000b4 	movhi	r2,32770
80023ca8:	10937504 	addi	r2,r2,19924
80023cac:	e0bfff15 	stw	r2,-4(fp)
80023cb0:	00000606 	br	80023ccc <_do_ctors+0x38>
        (*ctor) (); 
80023cb4:	e0bfff17 	ldw	r2,-4(fp)
80023cb8:	10800017 	ldw	r2,0(r2)
80023cbc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80023cc0:	e0bfff17 	ldw	r2,-4(fp)
80023cc4:	10bfff04 	addi	r2,r2,-4
80023cc8:	e0bfff15 	stw	r2,-4(fp)
80023ccc:	e0ffff17 	ldw	r3,-4(fp)
80023cd0:	00a000b4 	movhi	r2,32770
80023cd4:	10937604 	addi	r2,r2,19928
80023cd8:	18bff62e 	bgeu	r3,r2,80023cb4 <_gp+0xffff2f40>
}
80023cdc:	0001883a 	nop
80023ce0:	e037883a 	mov	sp,fp
80023ce4:	dfc00117 	ldw	ra,4(sp)
80023ce8:	df000017 	ldw	fp,0(sp)
80023cec:	dec00204 	addi	sp,sp,8
80023cf0:	f800283a 	ret

80023cf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80023cf4:	defffd04 	addi	sp,sp,-12
80023cf8:	dfc00215 	stw	ra,8(sp)
80023cfc:	df000115 	stw	fp,4(sp)
80023d00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80023d04:	00a000b4 	movhi	r2,32770
80023d08:	10937504 	addi	r2,r2,19924
80023d0c:	e0bfff15 	stw	r2,-4(fp)
80023d10:	00000606 	br	80023d2c <_do_dtors+0x38>
        (*dtor) (); 
80023d14:	e0bfff17 	ldw	r2,-4(fp)
80023d18:	10800017 	ldw	r2,0(r2)
80023d1c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80023d20:	e0bfff17 	ldw	r2,-4(fp)
80023d24:	10bfff04 	addi	r2,r2,-4
80023d28:	e0bfff15 	stw	r2,-4(fp)
80023d2c:	e0ffff17 	ldw	r3,-4(fp)
80023d30:	00a000b4 	movhi	r2,32770
80023d34:	10937604 	addi	r2,r2,19928
80023d38:	18bff62e 	bgeu	r3,r2,80023d14 <_gp+0xffff2fa0>
}
80023d3c:	0001883a 	nop
80023d40:	e037883a 	mov	sp,fp
80023d44:	dfc00117 	ldw	ra,4(sp)
80023d48:	df000017 	ldw	fp,0(sp)
80023d4c:	dec00204 	addi	sp,sp,8
80023d50:	f800283a 	ret

80023d54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80023d54:	defffa04 	addi	sp,sp,-24
80023d58:	df000515 	stw	fp,20(sp)
80023d5c:	df000504 	addi	fp,sp,20
80023d60:	e13ffc15 	stw	r4,-16(fp)
80023d64:	e17ffb15 	stw	r5,-20(fp)
    alt_dev* next = (alt_dev*) llist->next;
80023d68:	e0bffb17 	ldw	r2,-20(fp)
80023d6c:	10800017 	ldw	r2,0(r2)
80023d70:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
80023d74:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
80023d78:	0080fa04 	movi	r2,1000
80023d7c:	e0bffd15 	stw	r2,-12(fp)
    
    if (llist == NULL) { return NULL; }
80023d80:	e0bffb17 	ldw	r2,-20(fp)
80023d84:	1000431e 	bne	r2,zero,80023e94 <alt_find_dev+0x140>
80023d88:	0005883a 	mov	r2,zero
80023d8c:	00004506 	br	80023ea4 <alt_find_dev+0x150>
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    {
        len=0;
80023d90:	e03ffe15 	stw	zero,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
80023d94:	00001306 	br	80023de4 <alt_find_dev+0x90>
        {
            if (next->name[len] != name[len]) { break; }
80023d98:	e0bfff17 	ldw	r2,-4(fp)
80023d9c:	10c00217 	ldw	r3,8(r2)
80023da0:	e0bffe17 	ldw	r2,-8(fp)
80023da4:	1885883a 	add	r2,r3,r2
80023da8:	11000003 	ldbu	r4,0(r2)
80023dac:	e0bffe17 	ldw	r2,-8(fp)
80023db0:	e0fffc17 	ldw	r3,-16(fp)
80023db4:	1885883a 	add	r2,r3,r2
80023db8:	10800003 	ldbu	r2,0(r2)
80023dbc:	20c03fcc 	andi	r3,r4,255
80023dc0:	18c0201c 	xori	r3,r3,128
80023dc4:	18ffe004 	addi	r3,r3,-128
80023dc8:	10803fcc 	andi	r2,r2,255
80023dcc:	1080201c 	xori	r2,r2,128
80023dd0:	10bfe004 	addi	r2,r2,-128
80023dd4:	1880181e 	bne	r3,r2,80023e38 <alt_find_dev+0xe4>
            len++;
80023dd8:	e0bffe17 	ldw	r2,-8(fp)
80023ddc:	10800044 	addi	r2,r2,1
80023de0:	e0bffe15 	stw	r2,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
80023de4:	e0bffe17 	ldw	r2,-8(fp)
80023de8:	e0fffc17 	ldw	r3,-16(fp)
80023dec:	1885883a 	add	r2,r3,r2
80023df0:	10800003 	ldbu	r2,0(r2)
80023df4:	10803fcc 	andi	r2,r2,255
80023df8:	1080201c 	xori	r2,r2,128
80023dfc:	10bfe004 	addi	r2,r2,-128
80023e00:	10000e26 	beq	r2,zero,80023e3c <alt_find_dev+0xe8>
80023e04:	e0bfff17 	ldw	r2,-4(fp)
80023e08:	10c00217 	ldw	r3,8(r2)
80023e0c:	e0bffe17 	ldw	r2,-8(fp)
80023e10:	1885883a 	add	r2,r3,r2
80023e14:	10800003 	ldbu	r2,0(r2)
80023e18:	10803fcc 	andi	r2,r2,255
80023e1c:	1080201c 	xori	r2,r2,128
80023e20:	10bfe004 	addi	r2,r2,-128
80023e24:	10000526 	beq	r2,zero,80023e3c <alt_find_dev+0xe8>
80023e28:	e0fffe17 	ldw	r3,-8(fp)
80023e2c:	e0bffd17 	ldw	r2,-12(fp)
80023e30:	18bfd916 	blt	r3,r2,80023d98 <_gp+0xffff3024>
80023e34:	00000106 	br	80023e3c <alt_find_dev+0xe8>
            if (next->name[len] != name[len]) { break; }
80023e38:	0001883a 	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
80023e3c:	e0bffe17 	ldw	r2,-8(fp)
80023e40:	e0fffc17 	ldw	r3,-16(fp)
80023e44:	1885883a 	add	r2,r3,r2
80023e48:	10800003 	ldbu	r2,0(r2)
80023e4c:	10803fcc 	andi	r2,r2,255
80023e50:	1080201c 	xori	r2,r2,128
80023e54:	10bfe004 	addi	r2,r2,-128
80023e58:	10000b1e 	bne	r2,zero,80023e88 <alt_find_dev+0x134>
80023e5c:	e0bfff17 	ldw	r2,-4(fp)
80023e60:	10c00217 	ldw	r3,8(r2)
80023e64:	e0bffe17 	ldw	r2,-8(fp)
80023e68:	1885883a 	add	r2,r3,r2
80023e6c:	10800003 	ldbu	r2,0(r2)
80023e70:	10803fcc 	andi	r2,r2,255
80023e74:	1080201c 	xori	r2,r2,128
80023e78:	10bfe004 	addi	r2,r2,-128
80023e7c:	1000021e 	bne	r2,zero,80023e88 <alt_find_dev+0x134>
80023e80:	e0bfff17 	ldw	r2,-4(fp)
80023e84:	00000706 	br	80023ea4 <alt_find_dev+0x150>

        next = (alt_dev*) next->llist.next;
80023e88:	e0bfff17 	ldw	r2,-4(fp)
80023e8c:	10800017 	ldw	r2,0(r2)
80023e90:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) llist)
80023e94:	e0ffff17 	ldw	r3,-4(fp)
80023e98:	e0bffb17 	ldw	r2,-20(fp)
80023e9c:	18bfbc1e 	bne	r3,r2,80023d90 <_gp+0xffff301c>
    }
  
    /* No match found */
  
    return NULL;
80023ea0:	0005883a 	mov	r2,zero
}
80023ea4:	e037883a 	mov	sp,fp
80023ea8:	df000017 	ldw	fp,0(sp)
80023eac:	dec00104 	addi	sp,sp,4
80023eb0:	f800283a 	ret

80023eb4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
80023eb4:	defffc04 	addi	sp,sp,-16
80023eb8:	dfc00315 	stw	ra,12(sp)
80023ebc:	df000215 	stw	fp,8(sp)
80023ec0:	df000204 	addi	fp,sp,8
80023ec4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
80023ec8:	d1601004 	addi	r5,gp,-32704
80023ecc:	e13ffe17 	ldw	r4,-8(fp)
80023ed0:	0023d540 	call	80023d54 <alt_find_dev>
80023ed4:	e0bfff15 	stw	r2,-4(fp)

  if ((dev) && dev->open)
80023ed8:	e0bfff17 	ldw	r2,-4(fp)
80023edc:	10000926 	beq	r2,zero,80023f04 <alt_flash_open_dev+0x50>
80023ee0:	e0bfff17 	ldw	r2,-4(fp)
80023ee4:	10800317 	ldw	r2,12(r2)
80023ee8:	10000626 	beq	r2,zero,80023f04 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
80023eec:	e0bfff17 	ldw	r2,-4(fp)
80023ef0:	10800317 	ldw	r2,12(r2)
80023ef4:	e17ffe17 	ldw	r5,-8(fp)
80023ef8:	e13fff17 	ldw	r4,-4(fp)
80023efc:	103ee83a 	callr	r2
80023f00:	00000106 	br	80023f08 <alt_flash_open_dev+0x54>
  }

  return dev;
80023f04:	e0bfff17 	ldw	r2,-4(fp)
}
80023f08:	e037883a 	mov	sp,fp
80023f0c:	dfc00117 	ldw	ra,4(sp)
80023f10:	df000017 	ldw	fp,0(sp)
80023f14:	dec00204 	addi	sp,sp,8
80023f18:	f800283a 	ret

80023f1c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
80023f1c:	defffd04 	addi	sp,sp,-12
80023f20:	dfc00215 	stw	ra,8(sp)
80023f24:	df000115 	stw	fp,4(sp)
80023f28:	df000104 	addi	fp,sp,4
80023f2c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
80023f30:	e0bfff17 	ldw	r2,-4(fp)
80023f34:	10000826 	beq	r2,zero,80023f58 <alt_flash_close_dev+0x3c>
80023f38:	e0bfff17 	ldw	r2,-4(fp)
80023f3c:	10800417 	ldw	r2,16(r2)
80023f40:	10000526 	beq	r2,zero,80023f58 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
80023f44:	e0bfff17 	ldw	r2,-4(fp)
80023f48:	10800417 	ldw	r2,16(r2)
80023f4c:	e13fff17 	ldw	r4,-4(fp)
80023f50:	103ee83a 	callr	r2
  }
  return;
80023f54:	0001883a 	nop
80023f58:	0001883a 	nop
}
80023f5c:	e037883a 	mov	sp,fp
80023f60:	dfc00117 	ldw	ra,4(sp)
80023f64:	df000017 	ldw	fp,0(sp)
80023f68:	dec00204 	addi	sp,sp,8
80023f6c:	f800283a 	ret

80023f70 <alt_flash_device_register>:

int alt_flash_device_register( alt_flash_fd* fd)
{
80023f70:	defffd04 	addi	sp,sp,-12
80023f74:	dfc00215 	stw	ra,8(sp)
80023f78:	df000115 	stw	fp,4(sp)
80023f7c:	df000104 	addi	fp,sp,4
80023f80:	e13fff15 	stw	r4,-4(fp)
  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
80023f84:	d1601004 	addi	r5,gp,-32704
80023f88:	e13fff17 	ldw	r4,-4(fp)
80023f8c:	001fab80 	call	8001fab8 <alt_dev_llist_insert>
}
80023f90:	e037883a 	mov	sp,fp
80023f94:	dfc00117 	ldw	ra,4(sp)
80023f98:	df000017 	ldw	fp,0(sp)
80023f9c:	dec00204 	addi	sp,sp,8
80023fa0:	f800283a 	ret

80023fa4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
80023fa4:	defffb04 	addi	sp,sp,-20
80023fa8:	df000415 	stw	fp,16(sp)
80023fac:	df000404 	addi	fp,sp,16
80023fb0:	e13ffd15 	stw	r4,-12(fp)
80023fb4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
80023fb8:	e0bffc17 	ldw	r2,-16(fp)
80023fbc:	10820070 	cmpltui	r2,r2,2049
80023fc0:	1000021e 	bne	r2,zero,80023fcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
80023fc4:	00820004 	movi	r2,2048
80023fc8:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
80023fcc:	e0fffd17 	ldw	r3,-12(fp)
80023fd0:	e0bffc17 	ldw	r2,-16(fp)
80023fd4:	1885883a 	add	r2,r3,r2
80023fd8:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80023fdc:	e0bffd17 	ldw	r2,-12(fp)
80023fe0:	e0bfff15 	stw	r2,-4(fp)
80023fe4:	00000506 	br	80023ffc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
80023fe8:	e0bfff17 	ldw	r2,-4(fp)
80023fec:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
80023ff0:	e0bfff17 	ldw	r2,-4(fp)
80023ff4:	10800804 	addi	r2,r2,32
80023ff8:	e0bfff15 	stw	r2,-4(fp)
80023ffc:	e0ffff17 	ldw	r3,-4(fp)
80024000:	e0bffe17 	ldw	r2,-8(fp)
80024004:	18bff836 	bltu	r3,r2,80023fe8 <_gp+0xffff3274>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
80024008:	e0bffd17 	ldw	r2,-12(fp)
8002400c:	108007cc 	andi	r2,r2,31
80024010:	10000226 	beq	r2,zero,8002401c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
80024014:	e0bfff17 	ldw	r2,-4(fp)
80024018:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
8002401c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
80024020:	0001883a 	nop
80024024:	e037883a 	mov	sp,fp
80024028:	df000017 	ldw	fp,0(sp)
8002402c:	dec00104 	addi	sp,sp,4
80024030:	f800283a 	ret

80024034 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80024034:	defff904 	addi	sp,sp,-28
80024038:	dfc00615 	stw	ra,24(sp)
8002403c:	df000515 	stw	fp,20(sp)
80024040:	df000504 	addi	fp,sp,20
80024044:	e13fff15 	stw	r4,-4(fp)
80024048:	e17ffe15 	stw	r5,-8(fp)
8002404c:	e1bffd15 	stw	r6,-12(fp)
80024050:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80024054:	e0800217 	ldw	r2,8(fp)
80024058:	d8800015 	stw	r2,0(sp)
8002405c:	e1fffc17 	ldw	r7,-16(fp)
80024060:	e1bffd17 	ldw	r6,-12(fp)
80024064:	e17ffe17 	ldw	r5,-8(fp)
80024068:	e13fff17 	ldw	r4,-4(fp)
8002406c:	00241e40 	call	800241e4 <alt_iic_isr_register>
}  
80024070:	e037883a 	mov	sp,fp
80024074:	dfc00117 	ldw	ra,4(sp)
80024078:	df000017 	ldw	fp,0(sp)
8002407c:	dec00204 	addi	sp,sp,8
80024080:	f800283a 	ret

80024084 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80024084:	defff904 	addi	sp,sp,-28
80024088:	df000615 	stw	fp,24(sp)
8002408c:	df000604 	addi	fp,sp,24
80024090:	e13ffb15 	stw	r4,-20(fp)
80024094:	e17ffa15 	stw	r5,-24(fp)
80024098:	e0bffa17 	ldw	r2,-24(fp)
8002409c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
800240a0:	0005303a 	rdctl	r2,status
800240a4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
800240a8:	e0fffe17 	ldw	r3,-8(fp)
800240ac:	00bfff84 	movi	r2,-2
800240b0:	1884703a 	and	r2,r3,r2
800240b4:	1001703a 	wrctl	status,r2
  return context;
800240b8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
800240bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
800240c0:	00c00044 	movi	r3,1
800240c4:	e0bfff17 	ldw	r2,-4(fp)
800240c8:	1884983a 	sll	r2,r3,r2
800240cc:	1007883a 	mov	r3,r2
800240d0:	d0a77f17 	ldw	r2,-25092(gp)
800240d4:	1884b03a 	or	r2,r3,r2
800240d8:	d0a77f15 	stw	r2,-25092(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
800240dc:	d0a77f17 	ldw	r2,-25092(gp)
800240e0:	100170fa 	wrctl	ienable,r2
800240e4:	e0bffd17 	ldw	r2,-12(fp)
800240e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
800240ec:	e0bffc17 	ldw	r2,-16(fp)
800240f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
800240f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
800240f8:	0001883a 	nop
}
800240fc:	e037883a 	mov	sp,fp
80024100:	df000017 	ldw	fp,0(sp)
80024104:	dec00104 	addi	sp,sp,4
80024108:	f800283a 	ret

8002410c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8002410c:	defff904 	addi	sp,sp,-28
80024110:	df000615 	stw	fp,24(sp)
80024114:	df000604 	addi	fp,sp,24
80024118:	e13ffb15 	stw	r4,-20(fp)
8002411c:	e17ffa15 	stw	r5,-24(fp)
80024120:	e0bffa17 	ldw	r2,-24(fp)
80024124:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
80024128:	0005303a 	rdctl	r2,status
8002412c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80024130:	e0fffe17 	ldw	r3,-8(fp)
80024134:	00bfff84 	movi	r2,-2
80024138:	1884703a 	and	r2,r3,r2
8002413c:	1001703a 	wrctl	status,r2
  return context;
80024140:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
80024144:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
80024148:	00c00044 	movi	r3,1
8002414c:	e0bfff17 	ldw	r2,-4(fp)
80024150:	1884983a 	sll	r2,r3,r2
80024154:	0084303a 	nor	r2,zero,r2
80024158:	1007883a 	mov	r3,r2
8002415c:	d0a77f17 	ldw	r2,-25092(gp)
80024160:	1884703a 	and	r2,r3,r2
80024164:	d0a77f15 	stw	r2,-25092(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80024168:	d0a77f17 	ldw	r2,-25092(gp)
8002416c:	100170fa 	wrctl	ienable,r2
80024170:	e0bffd17 	ldw	r2,-12(fp)
80024174:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
80024178:	e0bffc17 	ldw	r2,-16(fp)
8002417c:	1001703a 	wrctl	status,r2
  return 0;
80024180:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
80024184:	0001883a 	nop
}
80024188:	e037883a 	mov	sp,fp
8002418c:	df000017 	ldw	fp,0(sp)
80024190:	dec00104 	addi	sp,sp,4
80024194:	f800283a 	ret

80024198 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
80024198:	defffc04 	addi	sp,sp,-16
8002419c:	df000315 	stw	fp,12(sp)
800241a0:	df000304 	addi	fp,sp,12
800241a4:	e13ffe15 	stw	r4,-8(fp)
800241a8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
800241ac:	000530fa 	rdctl	r2,ienable
800241b0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
800241b4:	00c00044 	movi	r3,1
800241b8:	e0bffd17 	ldw	r2,-12(fp)
800241bc:	1884983a 	sll	r2,r3,r2
800241c0:	1007883a 	mov	r3,r2
800241c4:	e0bfff17 	ldw	r2,-4(fp)
800241c8:	1884703a 	and	r2,r3,r2
800241cc:	1004c03a 	cmpne	r2,r2,zero
800241d0:	10803fcc 	andi	r2,r2,255
}
800241d4:	e037883a 	mov	sp,fp
800241d8:	df000017 	ldw	fp,0(sp)
800241dc:	dec00104 	addi	sp,sp,4
800241e0:	f800283a 	ret

800241e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
800241e4:	defff504 	addi	sp,sp,-44
800241e8:	dfc00a15 	stw	ra,40(sp)
800241ec:	df000915 	stw	fp,36(sp)
800241f0:	df000904 	addi	fp,sp,36
800241f4:	e13ffa15 	stw	r4,-24(fp)
800241f8:	e17ff915 	stw	r5,-28(fp)
800241fc:	e1bff815 	stw	r6,-32(fp)
80024200:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
80024204:	00bffa84 	movi	r2,-22
80024208:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8002420c:	e0bff917 	ldw	r2,-28(fp)
80024210:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80024214:	e0bffe17 	ldw	r2,-8(fp)
80024218:	10800808 	cmpgei	r2,r2,32
8002421c:	1000241e 	bne	r2,zero,800242b0 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
80024220:	0005303a 	rdctl	r2,status
80024224:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80024228:	e0fffc17 	ldw	r3,-16(fp)
8002422c:	00bfff84 	movi	r2,-2
80024230:	1884703a 	and	r2,r3,r2
80024234:	1001703a 	wrctl	status,r2
  return context;
80024238:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8002423c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
80024240:	e0bffe17 	ldw	r2,-8(fp)
80024244:	100890fa 	slli	r4,r2,3
80024248:	e0fff817 	ldw	r3,-32(fp)
8002424c:	00a000f4 	movhi	r2,32771
80024250:	2085883a 	add	r2,r4,r2
80024254:	10eaf115 	stw	r3,-21564(r2)
    alt_irq[id].context = isr_context;
80024258:	e0bffe17 	ldw	r2,-8(fp)
8002425c:	100890fa 	slli	r4,r2,3
80024260:	e0fff717 	ldw	r3,-36(fp)
80024264:	00a000f4 	movhi	r2,32771
80024268:	2085883a 	add	r2,r4,r2
8002426c:	10eaf215 	stw	r3,-21560(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80024270:	e0bff817 	ldw	r2,-32(fp)
80024274:	10000526 	beq	r2,zero,8002428c <alt_iic_isr_register+0xa8>
80024278:	e0bffe17 	ldw	r2,-8(fp)
8002427c:	100b883a 	mov	r5,r2
80024280:	e13ffa17 	ldw	r4,-24(fp)
80024284:	00240840 	call	80024084 <alt_ic_irq_enable>
80024288:	00000406 	br	8002429c <alt_iic_isr_register+0xb8>
8002428c:	e0bffe17 	ldw	r2,-8(fp)
80024290:	100b883a 	mov	r5,r2
80024294:	e13ffa17 	ldw	r4,-24(fp)
80024298:	002410c0 	call	8002410c <alt_ic_irq_disable>
8002429c:	e0bfff15 	stw	r2,-4(fp)
800242a0:	e0bffd17 	ldw	r2,-12(fp)
800242a4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
800242a8:	e0bffb17 	ldw	r2,-20(fp)
800242ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
800242b0:	e0bfff17 	ldw	r2,-4(fp)
}
800242b4:	e037883a 	mov	sp,fp
800242b8:	dfc00117 	ldw	ra,4(sp)
800242bc:	df000017 	ldw	fp,0(sp)
800242c0:	dec00204 	addi	sp,sp,8
800242c4:	f800283a 	ret

800242c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
800242c8:	defff904 	addi	sp,sp,-28
800242cc:	dfc00615 	stw	ra,24(sp)
800242d0:	df000515 	stw	fp,20(sp)
800242d4:	df000504 	addi	fp,sp,20
800242d8:	e13ffe15 	stw	r4,-8(fp)
800242dc:	e17ffd15 	stw	r5,-12(fp)
800242e0:	e1bffc15 	stw	r6,-16(fp)
800242e4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
800242e8:	e1bffb17 	ldw	r6,-20(fp)
800242ec:	e17ffc17 	ldw	r5,-16(fp)
800242f0:	e13ffd17 	ldw	r4,-12(fp)
800242f4:	00244e80 	call	800244e8 <open>
800242f8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
800242fc:	e0bfff17 	ldw	r2,-4(fp)
80024300:	10001716 	blt	r2,zero,80024360 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
80024304:	e0bfff17 	ldw	r2,-4(fp)
80024308:	10c00324 	muli	r3,r2,12
8002430c:	00a000b4 	movhi	r2,32770
80024310:	1885883a 	add	r2,r3,r2
80024314:	10dea017 	ldw	r3,31360(r2)
80024318:	e0bffe17 	ldw	r2,-8(fp)
8002431c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80024320:	e0bfff17 	ldw	r2,-4(fp)
80024324:	10c00324 	muli	r3,r2,12
80024328:	00a000b4 	movhi	r2,32770
8002432c:	1885883a 	add	r2,r3,r2
80024330:	10dea117 	ldw	r3,31364(r2)
80024334:	e0bffe17 	ldw	r2,-8(fp)
80024338:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8002433c:	e0bfff17 	ldw	r2,-4(fp)
80024340:	10c00324 	muli	r3,r2,12
80024344:	00a000b4 	movhi	r2,32770
80024348:	1885883a 	add	r2,r3,r2
8002434c:	10dea217 	ldw	r3,31368(r2)
80024350:	e0bffe17 	ldw	r2,-8(fp)
80024354:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
80024358:	e13fff17 	ldw	r4,-4(fp)
8002435c:	00203fc0 	call	800203fc <alt_release_fd>
  }
} 
80024360:	0001883a 	nop
80024364:	e037883a 	mov	sp,fp
80024368:	dfc00117 	ldw	ra,4(sp)
8002436c:	df000017 	ldw	fp,0(sp)
80024370:	dec00204 	addi	sp,sp,8
80024374:	f800283a 	ret

80024378 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
80024378:	defffb04 	addi	sp,sp,-20
8002437c:	dfc00415 	stw	ra,16(sp)
80024380:	df000315 	stw	fp,12(sp)
80024384:	df000304 	addi	fp,sp,12
80024388:	e13fff15 	stw	r4,-4(fp)
8002438c:	e17ffe15 	stw	r5,-8(fp)
80024390:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80024394:	01c07fc4 	movi	r7,511
80024398:	01800044 	movi	r6,1
8002439c:	e17fff17 	ldw	r5,-4(fp)
800243a0:	012000b4 	movhi	r4,32770
800243a4:	211ea304 	addi	r4,r4,31372
800243a8:	00242c80 	call	800242c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
800243ac:	01c07fc4 	movi	r7,511
800243b0:	000d883a 	mov	r6,zero
800243b4:	e17ffe17 	ldw	r5,-8(fp)
800243b8:	012000b4 	movhi	r4,32770
800243bc:	211ea004 	addi	r4,r4,31360
800243c0:	00242c80 	call	800242c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
800243c4:	01c07fc4 	movi	r7,511
800243c8:	01800044 	movi	r6,1
800243cc:	e17ffd17 	ldw	r5,-12(fp)
800243d0:	012000b4 	movhi	r4,32770
800243d4:	211ea604 	addi	r4,r4,31384
800243d8:	00242c80 	call	800242c8 <alt_open_fd>
}  
800243dc:	0001883a 	nop
800243e0:	e037883a 	mov	sp,fp
800243e4:	dfc00117 	ldw	ra,4(sp)
800243e8:	df000017 	ldw	fp,0(sp)
800243ec:	dec00204 	addi	sp,sp,8
800243f0:	f800283a 	ret

800243f4 <alt_get_errno>:
{
800243f4:	defffe04 	addi	sp,sp,-8
800243f8:	dfc00115 	stw	ra,4(sp)
800243fc:	df000015 	stw	fp,0(sp)
80024400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80024404:	d0a00c17 	ldw	r2,-32720(gp)
80024408:	10000326 	beq	r2,zero,80024418 <alt_get_errno+0x24>
8002440c:	d0a00c17 	ldw	r2,-32720(gp)
80024410:	103ee83a 	callr	r2
80024414:	00000106 	br	8002441c <alt_get_errno+0x28>
80024418:	d0a77a04 	addi	r2,gp,-25112
}
8002441c:	e037883a 	mov	sp,fp
80024420:	dfc00117 	ldw	ra,4(sp)
80024424:	df000017 	ldw	fp,0(sp)
80024428:	dec00204 	addi	sp,sp,8
8002442c:	f800283a 	ret

80024430 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80024430:	defffd04 	addi	sp,sp,-12
80024434:	df000215 	stw	fp,8(sp)
80024438:	df000204 	addi	fp,sp,8
8002443c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80024440:	e0bffe17 	ldw	r2,-8(fp)
80024444:	10800217 	ldw	r2,8(r2)
80024448:	10d00034 	orhi	r3,r2,16384
8002444c:	e0bffe17 	ldw	r2,-8(fp)
80024450:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80024454:	e03fff15 	stw	zero,-4(fp)
80024458:	00001a06 	br	800244c4 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8002445c:	e0bfff17 	ldw	r2,-4(fp)
80024460:	10c00324 	muli	r3,r2,12
80024464:	00a000b4 	movhi	r2,32770
80024468:	1885883a 	add	r2,r3,r2
8002446c:	10dea017 	ldw	r3,31360(r2)
80024470:	e0bffe17 	ldw	r2,-8(fp)
80024474:	10800017 	ldw	r2,0(r2)
80024478:	18800f1e 	bne	r3,r2,800244b8 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8002447c:	e0bfff17 	ldw	r2,-4(fp)
80024480:	10c00324 	muli	r3,r2,12
80024484:	00a000b4 	movhi	r2,32770
80024488:	1885883a 	add	r2,r3,r2
8002448c:	109ea217 	ldw	r2,31368(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
80024490:	1000090e 	bge	r2,zero,800244b8 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
80024494:	e0bfff17 	ldw	r2,-4(fp)
80024498:	10c00324 	muli	r3,r2,12
8002449c:	00a000b4 	movhi	r2,32770
800244a0:	109ea004 	addi	r2,r2,31360
800244a4:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
800244a8:	e0fffe17 	ldw	r3,-8(fp)
800244ac:	18800226 	beq	r3,r2,800244b8 <alt_file_locked+0x88>
    {
      return -EACCES;
800244b0:	00bffcc4 	movi	r2,-13
800244b4:	00000806 	br	800244d8 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
800244b8:	e0bfff17 	ldw	r2,-4(fp)
800244bc:	10800044 	addi	r2,r2,1
800244c0:	e0bfff15 	stw	r2,-4(fp)
800244c4:	d0a00b17 	ldw	r2,-32724(gp)
800244c8:	1007883a 	mov	r3,r2
800244cc:	e0bfff17 	ldw	r2,-4(fp)
800244d0:	18bfe22e 	bgeu	r3,r2,8002445c <_gp+0xffff36e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
800244d4:	0005883a 	mov	r2,zero
}
800244d8:	e037883a 	mov	sp,fp
800244dc:	df000017 	ldw	fp,0(sp)
800244e0:	dec00104 	addi	sp,sp,4
800244e4:	f800283a 	ret

800244e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
800244e8:	defff604 	addi	sp,sp,-40
800244ec:	dfc00915 	stw	ra,36(sp)
800244f0:	df000815 	stw	fp,32(sp)
800244f4:	df000804 	addi	fp,sp,32
800244f8:	e13ffa15 	stw	r4,-24(fp)
800244fc:	e17ff915 	stw	r5,-28(fp)
80024500:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80024504:	00bfffc4 	movi	r2,-1
80024508:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
8002450c:	00bffb44 	movi	r2,-19
80024510:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
80024514:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80024518:	d1600904 	addi	r5,gp,-32732
8002451c:	e13ffa17 	ldw	r4,-24(fp)
80024520:	0023d540 	call	80023d54 <alt_find_dev>
80024524:	e0bfff15 	stw	r2,-4(fp)
80024528:	e0bfff17 	ldw	r2,-4(fp)
8002452c:	1000051e 	bne	r2,zero,80024544 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80024530:	e13ffa17 	ldw	r4,-24(fp)
80024534:	00248280 	call	80024828 <alt_find_file>
80024538:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
8002453c:	00800044 	movi	r2,1
80024540:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80024544:	e0bfff17 	ldw	r2,-4(fp)
80024548:	10002926 	beq	r2,zero,800245f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8002454c:	e13fff17 	ldw	r4,-4(fp)
80024550:	00249ac0 	call	800249ac <alt_get_fd>
80024554:	e0bffe15 	stw	r2,-8(fp)
80024558:	e0bffe17 	ldw	r2,-8(fp)
8002455c:	1000030e 	bge	r2,zero,8002456c <open+0x84>
    {
      status = index;
80024560:	e0bffe17 	ldw	r2,-8(fp)
80024564:	e0bffd15 	stw	r2,-12(fp)
80024568:	00002306 	br	800245f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8002456c:	e0bffe17 	ldw	r2,-8(fp)
80024570:	10c00324 	muli	r3,r2,12
80024574:	00a000b4 	movhi	r2,32770
80024578:	109ea004 	addi	r2,r2,31360
8002457c:	1885883a 	add	r2,r3,r2
80024580:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80024584:	e0fff917 	ldw	r3,-28(fp)
80024588:	00900034 	movhi	r2,16384
8002458c:	10bfffc4 	addi	r2,r2,-1
80024590:	1886703a 	and	r3,r3,r2
80024594:	e0bffb17 	ldw	r2,-20(fp)
80024598:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8002459c:	e0bffc17 	ldw	r2,-16(fp)
800245a0:	1000051e 	bne	r2,zero,800245b8 <open+0xd0>
800245a4:	e13ffb17 	ldw	r4,-20(fp)
800245a8:	00244300 	call	80024430 <alt_file_locked>
800245ac:	e0bffd15 	stw	r2,-12(fp)
800245b0:	e0bffd17 	ldw	r2,-12(fp)
800245b4:	10001016 	blt	r2,zero,800245f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
800245b8:	e0bfff17 	ldw	r2,-4(fp)
800245bc:	10800317 	ldw	r2,12(r2)
800245c0:	10000826 	beq	r2,zero,800245e4 <open+0xfc>
800245c4:	e0bfff17 	ldw	r2,-4(fp)
800245c8:	10800317 	ldw	r2,12(r2)
800245cc:	e1fff817 	ldw	r7,-32(fp)
800245d0:	e1bff917 	ldw	r6,-28(fp)
800245d4:	e17ffa17 	ldw	r5,-24(fp)
800245d8:	e13ffb17 	ldw	r4,-20(fp)
800245dc:	103ee83a 	callr	r2
800245e0:	00000106 	br	800245e8 <open+0x100>
800245e4:	0005883a 	mov	r2,zero
800245e8:	e0bffd15 	stw	r2,-12(fp)
800245ec:	00000206 	br	800245f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
800245f0:	00bffb44 	movi	r2,-19
800245f4:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
800245f8:	e0bffd17 	ldw	r2,-12(fp)
800245fc:	1000090e 	bge	r2,zero,80024624 <open+0x13c>
  {
    alt_release_fd (index);  
80024600:	e13ffe17 	ldw	r4,-8(fp)
80024604:	00203fc0 	call	800203fc <alt_release_fd>
    ALT_ERRNO = -status;
80024608:	00243f40 	call	800243f4 <alt_get_errno>
8002460c:	1007883a 	mov	r3,r2
80024610:	e0bffd17 	ldw	r2,-12(fp)
80024614:	0085c83a 	sub	r2,zero,r2
80024618:	18800015 	stw	r2,0(r3)
    return -1;
8002461c:	00bfffc4 	movi	r2,-1
80024620:	00000106 	br	80024628 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80024624:	e0bffe17 	ldw	r2,-8(fp)
}
80024628:	e037883a 	mov	sp,fp
8002462c:	dfc00117 	ldw	ra,4(sp)
80024630:	df000017 	ldw	fp,0(sp)
80024634:	dec00204 	addi	sp,sp,8
80024638:	f800283a 	ret

8002463c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8002463c:	defffa04 	addi	sp,sp,-24
80024640:	df000515 	stw	fp,20(sp)
80024644:	df000504 	addi	fp,sp,20
80024648:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
8002464c:	0005303a 	rdctl	r2,status
80024650:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80024654:	e0fffc17 	ldw	r3,-16(fp)
80024658:	00bfff84 	movi	r2,-2
8002465c:	1884703a 	and	r2,r3,r2
80024660:	1001703a 	wrctl	status,r2
  return context;
80024664:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80024668:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
8002466c:	e0bffb17 	ldw	r2,-20(fp)
80024670:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80024674:	e0bffd17 	ldw	r2,-12(fp)
80024678:	10800017 	ldw	r2,0(r2)
8002467c:	e0fffd17 	ldw	r3,-12(fp)
80024680:	18c00117 	ldw	r3,4(r3)
80024684:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80024688:	e0bffd17 	ldw	r2,-12(fp)
8002468c:	10800117 	ldw	r2,4(r2)
80024690:	e0fffd17 	ldw	r3,-12(fp)
80024694:	18c00017 	ldw	r3,0(r3)
80024698:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8002469c:	e0bffd17 	ldw	r2,-12(fp)
800246a0:	e0fffd17 	ldw	r3,-12(fp)
800246a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
800246a8:	e0bffd17 	ldw	r2,-12(fp)
800246ac:	e0fffd17 	ldw	r3,-12(fp)
800246b0:	10c00015 	stw	r3,0(r2)
800246b4:	e0bfff17 	ldw	r2,-4(fp)
800246b8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
800246bc:	e0bffe17 	ldw	r2,-8(fp)
800246c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
800246c4:	0001883a 	nop
800246c8:	e037883a 	mov	sp,fp
800246cc:	df000017 	ldw	fp,0(sp)
800246d0:	dec00104 	addi	sp,sp,4
800246d4:	f800283a 	ret

800246d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
800246d8:	defff904 	addi	sp,sp,-28
800246dc:	dfc00615 	stw	ra,24(sp)
800246e0:	df000515 	stw	fp,20(sp)
800246e4:	dc400415 	stw	r17,16(sp)
800246e8:	dc000315 	stw	r16,12(sp)
800246ec:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
800246f0:	d0a01317 	ldw	r2,-32692(gp)
800246f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
800246f8:	d1278117 	ldw	r4,-25084(gp)
800246fc:	d1678217 	ldw	r5,-25080(gp)
80024700:	01800044 	movi	r6,1
80024704:	000f883a 	mov	r7,zero
80024708:	2185883a 	add	r2,r4,r6
8002470c:	1111803a 	cmpltu	r8,r2,r4
80024710:	29c7883a 	add	r3,r5,r7
80024714:	40c9883a 	add	r4,r8,r3
80024718:	2007883a 	mov	r3,r4
8002471c:	1009883a 	mov	r4,r2
80024720:	180b883a 	mov	r5,r3
80024724:	d1278115 	stw	r4,-25084(gp)
80024728:	d1678215 	stw	r5,-25080(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8002472c:	00002906 	br	800247d4 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
80024730:	e0bffd17 	ldw	r2,-12(fp)
80024734:	10800017 	ldw	r2,0(r2)
80024738:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
8002473c:	e13ffd17 	ldw	r4,-12(fp)
80024740:	20800217 	ldw	r2,8(r4)
80024744:	20c00317 	ldw	r3,12(r4)
80024748:	d1278117 	ldw	r4,-25084(gp)
8002474c:	d1678217 	ldw	r5,-25080(gp)
80024750:	28c01e36 	bltu	r5,r3,800247cc <alt_tick+0xf4>
80024754:	1940011e 	bne	r3,r5,8002475c <alt_tick+0x84>
80024758:	20801c36 	bltu	r4,r2,800247cc <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
8002475c:	e0bffd17 	ldw	r2,-12(fp)
80024760:	10800417 	ldw	r2,16(r2)
80024764:	e0fffd17 	ldw	r3,-12(fp)
80024768:	18c00517 	ldw	r3,20(r3)
8002476c:	1809883a 	mov	r4,r3
80024770:	103ee83a 	callr	r2
80024774:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80024778:	e0bffb17 	ldw	r2,-20(fp)
8002477c:	1000031e 	bne	r2,zero,8002478c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
80024780:	e13ffd17 	ldw	r4,-12(fp)
80024784:	002463c0 	call	8002463c <alt_alarm_stop>
80024788:	00001006 	br	800247cc <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
8002478c:	e0bffd17 	ldw	r2,-12(fp)
80024790:	11000217 	ldw	r4,8(r2)
80024794:	11400317 	ldw	r5,12(r2)
80024798:	e0bffb17 	ldw	r2,-20(fp)
8002479c:	1021883a 	mov	r16,r2
800247a0:	0023883a 	mov	r17,zero
800247a4:	2405883a 	add	r2,r4,r16
800247a8:	110d803a 	cmpltu	r6,r2,r4
800247ac:	2c47883a 	add	r3,r5,r17
800247b0:	30c9883a 	add	r4,r6,r3
800247b4:	2007883a 	mov	r3,r4
800247b8:	1009883a 	mov	r4,r2
800247bc:	180b883a 	mov	r5,r3
800247c0:	e0bffd17 	ldw	r2,-12(fp)
800247c4:	11000215 	stw	r4,8(r2)
800247c8:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
800247cc:	e0bffc17 	ldw	r2,-16(fp)
800247d0:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
800247d4:	e0fffd17 	ldw	r3,-12(fp)
800247d8:	d0a01304 	addi	r2,gp,-32692
800247dc:	18bfd41e 	bne	r3,r2,80024730 <_gp+0xffff39bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
800247e0:	0001883a 	nop
}
800247e4:	0001883a 	nop
800247e8:	e6fffe04 	addi	sp,fp,-8
800247ec:	dfc00317 	ldw	ra,12(sp)
800247f0:	df000217 	ldw	fp,8(sp)
800247f4:	dc400117 	ldw	r17,4(sp)
800247f8:	dc000017 	ldw	r16,0(sp)
800247fc:	dec00404 	addi	sp,sp,16
80024800:	f800283a 	ret

80024804 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80024804:	deffff04 	addi	sp,sp,-4
80024808:	df000015 	stw	fp,0(sp)
8002480c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80024810:	000170fa 	wrctl	ienable,zero
}
80024814:	0001883a 	nop
80024818:	e037883a 	mov	sp,fp
8002481c:	df000017 	ldw	fp,0(sp)
80024820:	dec00104 	addi	sp,sp,4
80024824:	f800283a 	ret

80024828 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80024828:	defffb04 	addi	sp,sp,-20
8002482c:	df000415 	stw	fp,16(sp)
80024830:	df000404 	addi	fp,sp,16
80024834:	e13ffc15 	stw	r4,-16(fp)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
80024838:	d0a00717 	ldw	r2,-32740(gp)
8002483c:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
80024840:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
80024844:	0080fa04 	movi	r2,1000
80024848:	e0bffd15 	stw	r2,-12(fp)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
8002484c:	00004f06 	br	8002498c <alt_find_file+0x164>
    {
        len=0;
80024850:	e03ffe15 	stw	zero,-8(fp)
        while (len < MAX_STRING_LENGTH)    
80024854:	00004306 	br	80024964 <alt_find_file+0x13c>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
80024858:	e0bfff17 	ldw	r2,-4(fp)
8002485c:	10c00217 	ldw	r3,8(r2)
80024860:	e0bffe17 	ldw	r2,-8(fp)
80024864:	1885883a 	add	r2,r3,r2
80024868:	10800003 	ldbu	r2,0(r2)
8002486c:	10803fcc 	andi	r2,r2,255
80024870:	1080201c 	xori	r2,r2,128
80024874:	10bfe004 	addi	r2,r2,-128
80024878:	10800bd8 	cmpnei	r2,r2,47
8002487c:	10000a1e 	bne	r2,zero,800248a8 <alt_find_file+0x80>
80024880:	e0bfff17 	ldw	r2,-4(fp)
80024884:	10c00217 	ldw	r3,8(r2)
80024888:	e0bffe17 	ldw	r2,-8(fp)
8002488c:	10800044 	addi	r2,r2,1
80024890:	1885883a 	add	r2,r3,r2
80024894:	10800003 	ldbu	r2,0(r2)
80024898:	10803fcc 	andi	r2,r2,255
8002489c:	1080201c 	xori	r2,r2,128
800248a0:	10bfe004 	addi	r2,r2,-128
800248a4:	10000926 	beq	r2,zero,800248cc <alt_find_file+0xa4>
800248a8:	e0bfff17 	ldw	r2,-4(fp)
800248ac:	10c00217 	ldw	r3,8(r2)
800248b0:	e0bffe17 	ldw	r2,-8(fp)
800248b4:	1885883a 	add	r2,r3,r2
800248b8:	10800003 	ldbu	r2,0(r2)
800248bc:	10803fcc 	andi	r2,r2,255
800248c0:	1080201c 	xori	r2,r2,128
800248c4:	10bfe004 	addi	r2,r2,-128
800248c8:	1000131e 	bne	r2,zero,80024918 <alt_find_file+0xf0>
            { 
                if ((name[len]== '/') || (name[len] == 0))
800248cc:	e0bffe17 	ldw	r2,-8(fp)
800248d0:	e0fffc17 	ldw	r3,-16(fp)
800248d4:	1885883a 	add	r2,r3,r2
800248d8:	10800003 	ldbu	r2,0(r2)
800248dc:	10803fcc 	andi	r2,r2,255
800248e0:	1080201c 	xori	r2,r2,128
800248e4:	10bfe004 	addi	r2,r2,-128
800248e8:	10800be0 	cmpeqi	r2,r2,47
800248ec:	1000081e 	bne	r2,zero,80024910 <alt_find_file+0xe8>
800248f0:	e0bffe17 	ldw	r2,-8(fp)
800248f4:	e0fffc17 	ldw	r3,-16(fp)
800248f8:	1885883a 	add	r2,r3,r2
800248fc:	10800003 	ldbu	r2,0(r2)
80024900:	10803fcc 	andi	r2,r2,255
80024904:	1080201c 	xori	r2,r2,128
80024908:	10bfe004 	addi	r2,r2,-128
8002490c:	1000191e 	bne	r2,zero,80024974 <alt_find_file+0x14c>
                {
                    return next;
80024910:	e0bfff17 	ldw	r2,-4(fp)
80024914:	00002106 	br	8002499c <alt_find_file+0x174>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
80024918:	e0bfff17 	ldw	r2,-4(fp)
8002491c:	10c00217 	ldw	r3,8(r2)
80024920:	e0bffe17 	ldw	r2,-8(fp)
80024924:	1885883a 	add	r2,r3,r2
80024928:	11000003 	ldbu	r4,0(r2)
8002492c:	e0bffe17 	ldw	r2,-8(fp)
80024930:	e0fffc17 	ldw	r3,-16(fp)
80024934:	1885883a 	add	r2,r3,r2
80024938:	10800003 	ldbu	r2,0(r2)
8002493c:	20c03fcc 	andi	r3,r4,255
80024940:	18c0201c 	xori	r3,r3,128
80024944:	18ffe004 	addi	r3,r3,-128
80024948:	10803fcc 	andi	r2,r2,255
8002494c:	1080201c 	xori	r2,r2,128
80024950:	10bfe004 	addi	r2,r2,-128
80024954:	1880091e 	bne	r3,r2,8002497c <alt_find_file+0x154>
            len++;
80024958:	e0bffe17 	ldw	r2,-8(fp)
8002495c:	10800044 	addi	r2,r2,1
80024960:	e0bffe15 	stw	r2,-8(fp)
        while (len < MAX_STRING_LENGTH)    
80024964:	e0fffe17 	ldw	r3,-8(fp)
80024968:	e0bffd17 	ldw	r2,-12(fp)
8002496c:	18bfba16 	blt	r3,r2,80024858 <_gp+0xffff3ae4>
80024970:	00000306 	br	80024980 <alt_find_file+0x158>
                break;
80024974:	0001883a 	nop
80024978:	00000106 	br	80024980 <alt_find_file+0x158>
            if (next->name[len]!=name[len]) { break; }
8002497c:	0001883a 	nop
        }  
        
        next = (alt_dev*) next->llist.next;
80024980:	e0bfff17 	ldw	r2,-4(fp)
80024984:	10800017 	ldw	r2,0(r2)
80024988:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) &alt_fs_list)
8002498c:	e0ffff17 	ldw	r3,-4(fp)
80024990:	d0a00704 	addi	r2,gp,-32740
80024994:	18bfae1e 	bne	r3,r2,80024850 <_gp+0xffff3adc>
    }
  
    /* No match found */
  
    return NULL;     
80024998:	0005883a 	mov	r2,zero
}
8002499c:	e037883a 	mov	sp,fp
800249a0:	df000017 	ldw	fp,0(sp)
800249a4:	dec00104 	addi	sp,sp,4
800249a8:	f800283a 	ret

800249ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
800249ac:	defffc04 	addi	sp,sp,-16
800249b0:	df000315 	stw	fp,12(sp)
800249b4:	df000304 	addi	fp,sp,12
800249b8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
800249bc:	00bffa04 	movi	r2,-24
800249c0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
800249c4:	e03fff15 	stw	zero,-4(fp)
800249c8:	00001706 	br	80024a28 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
800249cc:	e0bfff17 	ldw	r2,-4(fp)
800249d0:	10c00324 	muli	r3,r2,12
800249d4:	00a000b4 	movhi	r2,32770
800249d8:	1885883a 	add	r2,r3,r2
800249dc:	109ea017 	ldw	r2,31360(r2)
800249e0:	10000e1e 	bne	r2,zero,80024a1c <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
800249e4:	e0bfff17 	ldw	r2,-4(fp)
800249e8:	11000324 	muli	r4,r2,12
800249ec:	e0fffd17 	ldw	r3,-12(fp)
800249f0:	00a000b4 	movhi	r2,32770
800249f4:	2085883a 	add	r2,r4,r2
800249f8:	10dea015 	stw	r3,31360(r2)
      if (i > alt_max_fd)
800249fc:	d0e00b17 	ldw	r3,-32724(gp)
80024a00:	e0bfff17 	ldw	r2,-4(fp)
80024a04:	1880020e 	bge	r3,r2,80024a10 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
80024a08:	e0bfff17 	ldw	r2,-4(fp)
80024a0c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
80024a10:	e0bfff17 	ldw	r2,-4(fp)
80024a14:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80024a18:	00000706 	br	80024a38 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
80024a1c:	e0bfff17 	ldw	r2,-4(fp)
80024a20:	10800044 	addi	r2,r2,1
80024a24:	e0bfff15 	stw	r2,-4(fp)
80024a28:	e0bfff17 	ldw	r2,-4(fp)
80024a2c:	10800810 	cmplti	r2,r2,32
80024a30:	103fe61e 	bne	r2,zero,800249cc <_gp+0xffff3c58>
    }
  }

 alt_get_fd_exit:
80024a34:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80024a38:	e0bffe17 	ldw	r2,-8(fp)
}
80024a3c:	e037883a 	mov	sp,fp
80024a40:	df000017 	ldw	fp,0(sp)
80024a44:	dec00104 	addi	sp,sp,4
80024a48:	f800283a 	ret

80024a4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80024a4c:	defffe04 	addi	sp,sp,-8
80024a50:	df000115 	stw	fp,4(sp)
80024a54:	df000104 	addi	fp,sp,4
80024a58:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80024a5c:	e0bfff17 	ldw	r2,-4(fp)
80024a60:	10bffe84 	addi	r2,r2,-6
80024a64:	10c00428 	cmpgeui	r3,r2,16
80024a68:	1800191e 	bne	r3,zero,80024ad0 <alt_exception_cause_generated_bad_addr+0x84>
80024a6c:	100690ba 	slli	r3,r2,2
80024a70:	00a000b4 	movhi	r2,32770
80024a74:	1885883a 	add	r2,r3,r2
80024a78:	1092a017 	ldw	r2,19072(r2)
80024a7c:	1000683a 	jmp	r2
80024a80:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024a84:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024a88:	80024ad0 	cmplti	zero,r16,2347
80024a8c:	80024ad0 	cmplti	zero,r16,2347
80024a90:	80024ad0 	cmplti	zero,r16,2347
80024a94:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024a98:	80024ac8 	cmpgei	zero,r16,2347
80024a9c:	80024ad0 	cmplti	zero,r16,2347
80024aa0:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024aa4:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024aa8:	80024ad0 	cmplti	zero,r16,2347
80024aac:	80024ac0 	call	880024ac <_gp+0x7fd1738>
80024ab0:	80024ac8 	cmpgei	zero,r16,2347
80024ab4:	80024ad0 	cmplti	zero,r16,2347
80024ab8:	80024ad0 	cmplti	zero,r16,2347
80024abc:	80024ac0 	call	880024ac <_gp+0x7fd1738>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80024ac0:	00800044 	movi	r2,1
80024ac4:	00000306 	br	80024ad4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80024ac8:	0005883a 	mov	r2,zero
80024acc:	00000106 	br	80024ad4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
80024ad0:	0005883a 	mov	r2,zero
  }
}
80024ad4:	e037883a 	mov	sp,fp
80024ad8:	df000017 	ldw	fp,0(sp)
80024adc:	dec00104 	addi	sp,sp,4
80024ae0:	f800283a 	ret

80024ae4 <atexit>:
80024ae4:	200b883a 	mov	r5,r4
80024ae8:	000f883a 	mov	r7,zero
80024aec:	000d883a 	mov	r6,zero
80024af0:	0009883a 	mov	r4,zero
80024af4:	0024b2c1 	jmpi	80024b2c <__register_exitproc>

80024af8 <exit>:
80024af8:	defffe04 	addi	sp,sp,-8
80024afc:	000b883a 	mov	r5,zero
80024b00:	dc000015 	stw	r16,0(sp)
80024b04:	dfc00115 	stw	ra,4(sp)
80024b08:	2021883a 	mov	r16,r4
80024b0c:	0024c380 	call	80024c38 <__call_exitprocs>
80024b10:	00a000f4 	movhi	r2,32771
80024b14:	11235d17 	ldw	r4,-29324(r2)
80024b18:	20800f17 	ldw	r2,60(r4)
80024b1c:	10000126 	beq	r2,zero,80024b24 <exit+0x2c>
80024b20:	103ee83a 	callr	r2
80024b24:	8009883a 	mov	r4,r16
80024b28:	0024da40 	call	80024da4 <_exit>

80024b2c <__register_exitproc>:
80024b2c:	defffa04 	addi	sp,sp,-24
80024b30:	00a000f4 	movhi	r2,32771
80024b34:	dc000315 	stw	r16,12(sp)
80024b38:	14235d17 	ldw	r16,-29324(r2)
80024b3c:	dc400415 	stw	r17,16(sp)
80024b40:	dfc00515 	stw	ra,20(sp)
80024b44:	80c05217 	ldw	r3,328(r16)
80024b48:	2023883a 	mov	r17,r4
80024b4c:	18003526 	beq	r3,zero,80024c24 <__register_exitproc+0xf8>
80024b50:	18800117 	ldw	r2,4(r3)
80024b54:	11000808 	cmpgei	r4,r2,32
80024b58:	20000d1e 	bne	r4,zero,80024b90 <__register_exitproc+0x64>
80024b5c:	12400044 	addi	r9,r2,1
80024b60:	8800211e 	bne	r17,zero,80024be8 <__register_exitproc+0xbc>
80024b64:	10800084 	addi	r2,r2,2
80024b68:	100890ba 	slli	r4,r2,2
80024b6c:	1a400115 	stw	r9,4(r3)
80024b70:	0005883a 	mov	r2,zero
80024b74:	1907883a 	add	r3,r3,r4
80024b78:	19400015 	stw	r5,0(r3)
80024b7c:	dfc00517 	ldw	ra,20(sp)
80024b80:	dc400417 	ldw	r17,16(sp)
80024b84:	dc000317 	ldw	r16,12(sp)
80024b88:	dec00604 	addi	sp,sp,24
80024b8c:	f800283a 	ret
80024b90:	00a00074 	movhi	r2,32769
80024b94:	10bf2104 	addi	r2,r2,-892
80024b98:	10002526 	beq	r2,zero,80024c30 <__register_exitproc+0x104>
80024b9c:	01006404 	movi	r4,400
80024ba0:	d9c00215 	stw	r7,8(sp)
80024ba4:	d9800115 	stw	r6,4(sp)
80024ba8:	d9400015 	stw	r5,0(sp)
80024bac:	000fc840 	call	8000fc84 <malloc>
80024bb0:	1007883a 	mov	r3,r2
80024bb4:	10001e26 	beq	r2,zero,80024c30 <__register_exitproc+0x104>
80024bb8:	80805217 	ldw	r2,328(r16)
80024bbc:	18000115 	stw	zero,4(r3)
80024bc0:	02400044 	movi	r9,1
80024bc4:	18800015 	stw	r2,0(r3)
80024bc8:	80c05215 	stw	r3,328(r16)
80024bcc:	18006215 	stw	zero,392(r3)
80024bd0:	18006315 	stw	zero,396(r3)
80024bd4:	0005883a 	mov	r2,zero
80024bd8:	d9c00217 	ldw	r7,8(sp)
80024bdc:	d9800117 	ldw	r6,4(sp)
80024be0:	d9400017 	ldw	r5,0(sp)
80024be4:	883fdf26 	beq	r17,zero,80024b64 <_gp+0xffff3df0>
80024be8:	100890ba 	slli	r4,r2,2
80024bec:	02000044 	movi	r8,1
80024bf0:	4090983a 	sll	r8,r8,r2
80024bf4:	1909883a 	add	r4,r3,r4
80024bf8:	21802215 	stw	r6,136(r4)
80024bfc:	19806217 	ldw	r6,392(r3)
80024c00:	8c400098 	cmpnei	r17,r17,2
80024c04:	320cb03a 	or	r6,r6,r8
80024c08:	19806215 	stw	r6,392(r3)
80024c0c:	21c04215 	stw	r7,264(r4)
80024c10:	883fd41e 	bne	r17,zero,80024b64 <_gp+0xffff3df0>
80024c14:	19006317 	ldw	r4,396(r3)
80024c18:	2210b03a 	or	r8,r4,r8
80024c1c:	1a006315 	stw	r8,396(r3)
80024c20:	003fd006 	br	80024b64 <_gp+0xffff3df0>
80024c24:	80c05304 	addi	r3,r16,332
80024c28:	80c05215 	stw	r3,328(r16)
80024c2c:	003fc806 	br	80024b50 <_gp+0xffff3ddc>
80024c30:	00bfffc4 	movi	r2,-1
80024c34:	003fd106 	br	80024b7c <_gp+0xffff3e08>

80024c38 <__call_exitprocs>:
80024c38:	defff404 	addi	sp,sp,-48
80024c3c:	00a000f4 	movhi	r2,32771
80024c40:	dd400715 	stw	r21,28(sp)
80024c44:	15635d17 	ldw	r21,-29324(r2)
80024c48:	dd000615 	stw	r20,24(sp)
80024c4c:	05200074 	movhi	r20,32769
80024c50:	a8805204 	addi	r2,r21,328
80024c54:	df000a15 	stw	fp,40(sp)
80024c58:	dcc00515 	stw	r19,20(sp)
80024c5c:	dfc00b15 	stw	ra,44(sp)
80024c60:	ddc00915 	stw	r23,36(sp)
80024c64:	dd800815 	stw	r22,32(sp)
80024c68:	dc800415 	stw	r18,16(sp)
80024c6c:	dc400315 	stw	r17,12(sp)
80024c70:	dc000215 	stw	r16,8(sp)
80024c74:	d9000115 	stw	r4,4(sp)
80024c78:	2839883a 	mov	fp,r5
80024c7c:	d8800015 	stw	r2,0(sp)
80024c80:	04c00044 	movi	r19,1
80024c84:	a53f2504 	addi	r20,r20,-876
80024c88:	ac805217 	ldw	r18,328(r21)
80024c8c:	90001826 	beq	r18,zero,80024cf0 <__call_exitprocs+0xb8>
80024c90:	ddc00017 	ldw	r23,0(sp)
80024c94:	94000117 	ldw	r16,4(r18)
80024c98:	847fffc4 	addi	r17,r16,-1
80024c9c:	88000a16 	blt	r17,zero,80024cc8 <__call_exitprocs+0x90>
80024ca0:	84000044 	addi	r16,r16,1
80024ca4:	802090ba 	slli	r16,r16,2
80024ca8:	9421883a 	add	r16,r18,r16
80024cac:	e0001c26 	beq	fp,zero,80024d20 <__call_exitprocs+0xe8>
80024cb0:	80804017 	ldw	r2,256(r16)
80024cb4:	17001a26 	beq	r2,fp,80024d20 <__call_exitprocs+0xe8>
80024cb8:	8c7fffc4 	addi	r17,r17,-1
80024cbc:	88bfffd8 	cmpnei	r2,r17,-1
80024cc0:	843fff04 	addi	r16,r16,-4
80024cc4:	103ff91e 	bne	r2,zero,80024cac <_gp+0xffff3f38>
80024cc8:	a0000926 	beq	r20,zero,80024cf0 <__call_exitprocs+0xb8>
80024ccc:	90c00117 	ldw	r3,4(r18)
80024cd0:	90800017 	ldw	r2,0(r18)
80024cd4:	18002d1e 	bne	r3,zero,80024d8c <__call_exitprocs+0x154>
80024cd8:	10002c26 	beq	r2,zero,80024d8c <__call_exitprocs+0x154>
80024cdc:	9009883a 	mov	r4,r18
80024ce0:	b8800015 	stw	r2,0(r23)
80024ce4:	000fc940 	call	8000fc94 <free>
80024ce8:	bc800017 	ldw	r18,0(r23)
80024cec:	903fe91e 	bne	r18,zero,80024c94 <_gp+0xffff3f20>
80024cf0:	dfc00b17 	ldw	ra,44(sp)
80024cf4:	df000a17 	ldw	fp,40(sp)
80024cf8:	ddc00917 	ldw	r23,36(sp)
80024cfc:	dd800817 	ldw	r22,32(sp)
80024d00:	dd400717 	ldw	r21,28(sp)
80024d04:	dd000617 	ldw	r20,24(sp)
80024d08:	dcc00517 	ldw	r19,20(sp)
80024d0c:	dc800417 	ldw	r18,16(sp)
80024d10:	dc400317 	ldw	r17,12(sp)
80024d14:	dc000217 	ldw	r16,8(sp)
80024d18:	dec00c04 	addi	sp,sp,48
80024d1c:	f800283a 	ret
80024d20:	90800117 	ldw	r2,4(r18)
80024d24:	80c00017 	ldw	r3,0(r16)
80024d28:	10bfffc4 	addi	r2,r2,-1
80024d2c:	14400d26 	beq	r2,r17,80024d64 <__call_exitprocs+0x12c>
80024d30:	80000015 	stw	zero,0(r16)
80024d34:	183fe026 	beq	r3,zero,80024cb8 <_gp+0xffff3f44>
80024d38:	9c4c983a 	sll	r6,r19,r17
80024d3c:	90806217 	ldw	r2,392(r18)
80024d40:	95800117 	ldw	r22,4(r18)
80024d44:	3084703a 	and	r2,r6,r2
80024d48:	1000081e 	bne	r2,zero,80024d6c <__call_exitprocs+0x134>
80024d4c:	183ee83a 	callr	r3
80024d50:	90800117 	ldw	r2,4(r18)
80024d54:	15bfcc1e 	bne	r2,r22,80024c88 <_gp+0xffff3f14>
80024d58:	b8800017 	ldw	r2,0(r23)
80024d5c:	14bfd626 	beq	r2,r18,80024cb8 <_gp+0xffff3f44>
80024d60:	003fc906 	br	80024c88 <_gp+0xffff3f14>
80024d64:	94400115 	stw	r17,4(r18)
80024d68:	003ff206 	br	80024d34 <_gp+0xffff3fc0>
80024d6c:	90806317 	ldw	r2,396(r18)
80024d70:	81002017 	ldw	r4,128(r16)
80024d74:	308c703a 	and	r6,r6,r2
80024d78:	3000081e 	bne	r6,zero,80024d9c <__call_exitprocs+0x164>
80024d7c:	200b883a 	mov	r5,r4
80024d80:	d9000117 	ldw	r4,4(sp)
80024d84:	183ee83a 	callr	r3
80024d88:	003ff106 	br	80024d50 <_gp+0xffff3fdc>
80024d8c:	902f883a 	mov	r23,r18
80024d90:	1025883a 	mov	r18,r2
80024d94:	903fbf1e 	bne	r18,zero,80024c94 <_gp+0xffff3f20>
80024d98:	003fd506 	br	80024cf0 <_gp+0xffff3f7c>
80024d9c:	183ee83a 	callr	r3
80024da0:	003feb06 	br	80024d50 <_gp+0xffff3fdc>

80024da4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
80024da4:	defffd04 	addi	sp,sp,-12
80024da8:	df000215 	stw	fp,8(sp)
80024dac:	df000204 	addi	fp,sp,8
80024db0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
80024db4:	0001883a 	nop
80024db8:	e0bffe17 	ldw	r2,-8(fp)
80024dbc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
80024dc0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
80024dc4:	10000226 	beq	r2,zero,80024dd0 <_exit+0x2c>
    ALT_SIM_FAIL();
80024dc8:	002af070 	cmpltui	zero,zero,43969
80024dcc:	00000106 	br	80024dd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
80024dd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
80024dd4:	003fff06 	br	80024dd4 <_gp+0xffff4060>
