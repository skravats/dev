// mcu_subsystem_axi_ad9680_0.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem_axi_ad9680_0 (
		input  wire         s_axi_aclk,    // s_axi_clock.clk
		input  wire         s_axi_aresetn, // s_axi_reset.reset_n
		input  wire         s_axi_awvalid, //       s_axi.awvalid
		input  wire [15:0]  s_axi_awaddr,  //            .awaddr
		input  wire [2:0]   s_axi_awprot,  //            .awprot
		output wire         s_axi_awready, //            .awready
		input  wire         s_axi_wvalid,  //            .wvalid
		input  wire [31:0]  s_axi_wdata,   //            .wdata
		input  wire [3:0]   s_axi_wstrb,   //            .wstrb
		output wire         s_axi_wready,  //            .wready
		output wire         s_axi_bvalid,  //            .bvalid
		output wire [1:0]   s_axi_bresp,   //            .bresp
		input  wire         s_axi_bready,  //            .bready
		input  wire         s_axi_arvalid, //            .arvalid
		input  wire [15:0]  s_axi_araddr,  //            .araddr
		input  wire [2:0]   s_axi_arprot,  //            .arprot
		output wire         s_axi_arready, //            .arready
		output wire         s_axi_rvalid,  //            .rvalid
		output wire [1:0]   s_axi_rresp,   //            .rresp
		output wire [31:0]  s_axi_rdata,   //            .rdata
		input  wire         s_axi_rready,  //            .rready
		input  wire         rx_clk,        //   if_rx_clk.clk
		input  wire [3:0]   rx_sof,        //   if_rx_sof.export
		input  wire [127:0] rx_data,       //  if_rx_data.data
		input  wire         rx_valid,      //            .valid
		output wire         rx_ready,      //            .ready
		output wire         adc_clk,       //  if_adc_clk.clk
		output wire         adc_enable_0,  //    adc_ch_0.enable
		output wire         adc_valid_0,   //            .valid
		output wire [63:0]  adc_data_0,    //            .data
		output wire         adc_enable_1,  //    adc_ch_1.enable
		output wire         adc_valid_1,   //            .valid
		output wire [63:0]  adc_data_1,    //            .data
		input  wire         adc_dovf       // if_adc_dovf.ovf
	);

	axi_ad9680 #(
		.ID (0)
	) axi_ad9680_0 (
		.s_axi_aclk    (s_axi_aclk),    //   input,    width = 1, s_axi_clock.clk
		.s_axi_aresetn (s_axi_aresetn), //   input,    width = 1, s_axi_reset.reset_n
		.s_axi_awvalid (s_axi_awvalid), //   input,    width = 1,       s_axi.awvalid
		.s_axi_awaddr  (s_axi_awaddr),  //   input,   width = 16,            .awaddr
		.s_axi_awprot  (s_axi_awprot),  //   input,    width = 3,            .awprot
		.s_axi_awready (s_axi_awready), //  output,    width = 1,            .awready
		.s_axi_wvalid  (s_axi_wvalid),  //   input,    width = 1,            .wvalid
		.s_axi_wdata   (s_axi_wdata),   //   input,   width = 32,            .wdata
		.s_axi_wstrb   (s_axi_wstrb),   //   input,    width = 4,            .wstrb
		.s_axi_wready  (s_axi_wready),  //  output,    width = 1,            .wready
		.s_axi_bvalid  (s_axi_bvalid),  //  output,    width = 1,            .bvalid
		.s_axi_bresp   (s_axi_bresp),   //  output,    width = 2,            .bresp
		.s_axi_bready  (s_axi_bready),  //   input,    width = 1,            .bready
		.s_axi_arvalid (s_axi_arvalid), //   input,    width = 1,            .arvalid
		.s_axi_araddr  (s_axi_araddr),  //   input,   width = 16,            .araddr
		.s_axi_arprot  (s_axi_arprot),  //   input,    width = 3,            .arprot
		.s_axi_arready (s_axi_arready), //  output,    width = 1,            .arready
		.s_axi_rvalid  (s_axi_rvalid),  //  output,    width = 1,            .rvalid
		.s_axi_rresp   (s_axi_rresp),   //  output,    width = 2,            .rresp
		.s_axi_rdata   (s_axi_rdata),   //  output,   width = 32,            .rdata
		.s_axi_rready  (s_axi_rready),  //   input,    width = 1,            .rready
		.rx_clk        (rx_clk),        //   input,    width = 1,   if_rx_clk.clk
		.rx_sof        (rx_sof),        //   input,    width = 4,   if_rx_sof.export
		.rx_data       (rx_data),       //   input,  width = 128,  if_rx_data.data
		.rx_valid      (rx_valid),      //   input,    width = 1,            .valid
		.rx_ready      (rx_ready),      //  output,    width = 1,            .ready
		.adc_clk       (adc_clk),       //  output,    width = 1,  if_adc_clk.clk
		.adc_enable_0  (adc_enable_0),  //  output,    width = 1,    adc_ch_0.enable
		.adc_valid_0   (adc_valid_0),   //  output,    width = 1,            .valid
		.adc_data_0    (adc_data_0),    //  output,   width = 64,            .data
		.adc_enable_1  (adc_enable_1),  //  output,    width = 1,    adc_ch_1.enable
		.adc_valid_1   (adc_valid_1),   //  output,    width = 1,            .valid
		.adc_data_1    (adc_data_1),    //  output,   width = 64,            .data
		.adc_dovf      (adc_dovf)       //   input,    width = 1, if_adc_dovf.ovf
	);

endmodule
