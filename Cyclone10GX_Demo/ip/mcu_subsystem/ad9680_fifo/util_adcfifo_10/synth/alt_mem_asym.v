// alt_mem_asym.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module alt_mem_asym #(
		parameter A_ADDRESS_WIDTH = 0,
		parameter A_DATA_WIDTH    = 128,
		parameter B_ADDRESS_WIDTH = 10,
		parameter B_DATA_WIDTH    = 128
	) (
		input  wire [127:0] data_datain,         //      data.datain
		output wire [127:0] mem_o_dataout,       //     mem_o.dataout
		input  wire [9:0]   wraddress_wraddress, // wraddress.wraddress
		input  wire [9:0]   rdaddress_rdaddress, // rdaddress.rdaddress
		input  wire         wren_wren,           //      wren.wren
		input  wire         wrclock_clk,         //   wrclock.clk
		input  wire         rdclock_clk          //   rdclock.clk
	);

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (A_ADDRESS_WIDTH != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					a_address_width_check ( .error(1'b1) );
		end
		if (A_DATA_WIDTH != 128)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					a_data_width_check ( .error(1'b1) );
		end
		if (B_ADDRESS_WIDTH != 10)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					b_address_width_check ( .error(1'b1) );
		end
		if (B_DATA_WIDTH != 128)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					b_data_width_check ( .error(1'b1) );
		end
	endgenerate

	ad9680_fifo_alt_mem_asym_10_ngt5uda #(
		.A_ADDRESS_WIDTH (0),
		.A_DATA_WIDTH    (128),
		.B_ADDRESS_WIDTH (10),
		.B_DATA_WIDTH    (128)
	) alt_mem_asym (
		.data_datain         (data_datain),         //   input,  width = 128,      data.datain
		.mem_o_dataout       (mem_o_dataout),       //  output,  width = 128,     mem_o.dataout
		.wraddress_wraddress (wraddress_wraddress), //   input,   width = 10, wraddress.wraddress
		.rdaddress_rdaddress (rdaddress_rdaddress), //   input,   width = 10, rdaddress.rdaddress
		.wren_wren           (wren_wren),           //   input,    width = 1,      wren.wren
		.wrclock_clk         (wrclock_clk),         //   input,    width = 1,   wrclock.clk
		.rdclock_clk         (rdclock_clk)          //   input,    width = 1,   rdclock.clk
	);

endmodule
