// mcu_subsystem_altera_mm_interconnect_181_jzr7eki.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem_altera_mm_interconnect_181_jzr7eki (
		input  wire [11:0] bridge_1_m0_address,                            //                             bridge_1_m0.address
		output wire        bridge_1_m0_waitrequest,                        //                                        .waitrequest
		input  wire [2:0]  bridge_1_m0_burstcount,                         //                                        .burstcount
		input  wire [3:0]  bridge_1_m0_byteenable,                         //                                        .byteenable
		input  wire        bridge_1_m0_read,                               //                                        .read
		output wire [31:0] bridge_1_m0_readdata,                           //                                        .readdata
		output wire        bridge_1_m0_readdatavalid,                      //                                        .readdatavalid
		input  wire        bridge_1_m0_write,                              //                                        .write
		input  wire [31:0] bridge_1_m0_writedata,                          //                                        .writedata
		input  wire        bridge_1_m0_debugaccess,                        //                                        .debugaccess
		output wire [9:0]  emif_c10_0_ctrl_mmr_slave_0_address,            //             emif_c10_0_ctrl_mmr_slave_0.address
		output wire        emif_c10_0_ctrl_mmr_slave_0_write,              //                                        .write
		output wire        emif_c10_0_ctrl_mmr_slave_0_read,               //                                        .read
		input  wire [31:0] emif_c10_0_ctrl_mmr_slave_0_readdata,           //                                        .readdata
		output wire [31:0] emif_c10_0_ctrl_mmr_slave_0_writedata,          //                                        .writedata
		output wire        emif_c10_0_ctrl_mmr_slave_0_beginbursttransfer, //                                        .beginbursttransfer
		output wire [1:0]  emif_c10_0_ctrl_mmr_slave_0_burstcount,         //                                        .burstcount
		input  wire        emif_c10_0_ctrl_mmr_slave_0_readdatavalid,      //                                        .readdatavalid
		input  wire        emif_c10_0_ctrl_mmr_slave_0_waitrequest,        //                                        .waitrequest
		input  wire        bridge_1_m0_reset_reset_bridge_in_reset_reset,  // bridge_1_m0_reset_reset_bridge_in_reset.reset
		input  wire        emif_c10_0_emif_usr_clk_clk                     //                 emif_c10_0_emif_usr_clk.clk
	);

	wire         bridge_1_m0_translator_avalon_universal_master_0_waitrequest;    // bridge_1_m0_agent:av_waitrequest -> bridge_1_m0_translator:uav_waitrequest
	wire  [31:0] bridge_1_m0_translator_avalon_universal_master_0_readdata;       // bridge_1_m0_agent:av_readdata -> bridge_1_m0_translator:uav_readdata
	wire         bridge_1_m0_translator_avalon_universal_master_0_debugaccess;    // bridge_1_m0_translator:uav_debugaccess -> bridge_1_m0_agent:av_debugaccess
	wire  [11:0] bridge_1_m0_translator_avalon_universal_master_0_address;        // bridge_1_m0_translator:uav_address -> bridge_1_m0_agent:av_address
	wire         bridge_1_m0_translator_avalon_universal_master_0_read;           // bridge_1_m0_translator:uav_read -> bridge_1_m0_agent:av_read
	wire   [3:0] bridge_1_m0_translator_avalon_universal_master_0_byteenable;     // bridge_1_m0_translator:uav_byteenable -> bridge_1_m0_agent:av_byteenable
	wire         bridge_1_m0_translator_avalon_universal_master_0_readdatavalid;  // bridge_1_m0_agent:av_readdatavalid -> bridge_1_m0_translator:uav_readdatavalid
	wire         bridge_1_m0_translator_avalon_universal_master_0_lock;           // bridge_1_m0_translator:uav_lock -> bridge_1_m0_agent:av_lock
	wire         bridge_1_m0_translator_avalon_universal_master_0_write;          // bridge_1_m0_translator:uav_write -> bridge_1_m0_agent:av_write
	wire  [31:0] bridge_1_m0_translator_avalon_universal_master_0_writedata;      // bridge_1_m0_translator:uav_writedata -> bridge_1_m0_agent:av_writedata
	wire   [4:0] bridge_1_m0_translator_avalon_universal_master_0_burstcount;     // bridge_1_m0_translator:uav_burstcount -> bridge_1_m0_agent:av_burstcount
	wire         rsp_mux_src_valid;                                               // rsp_mux:src_valid -> bridge_1_m0_agent:rp_valid
	wire  [92:0] rsp_mux_src_data;                                                // rsp_mux:src_data -> bridge_1_m0_agent:rp_data
	wire         rsp_mux_src_ready;                                               // bridge_1_m0_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                             // rsp_mux:src_channel -> bridge_1_m0_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                       // rsp_mux:src_startofpacket -> bridge_1_m0_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                         // rsp_mux:src_endofpacket -> bridge_1_m0_agent:rp_endofpacket
	wire  [31:0] emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdata;                   // emif_c10_0_ctrl_mmr_slave_0_translator:uav_readdata -> emif_c10_0_ctrl_mmr_slave_0_agent:m0_readdata
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_waitrequest;                // emif_c10_0_ctrl_mmr_slave_0_translator:uav_waitrequest -> emif_c10_0_ctrl_mmr_slave_0_agent:m0_waitrequest
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_debugaccess;                // emif_c10_0_ctrl_mmr_slave_0_agent:m0_debugaccess -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_debugaccess
	wire  [11:0] emif_c10_0_ctrl_mmr_slave_0_agent_m0_address;                    // emif_c10_0_ctrl_mmr_slave_0_agent:m0_address -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_address
	wire   [3:0] emif_c10_0_ctrl_mmr_slave_0_agent_m0_byteenable;                 // emif_c10_0_ctrl_mmr_slave_0_agent:m0_byteenable -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_byteenable
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_read;                       // emif_c10_0_ctrl_mmr_slave_0_agent:m0_read -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_read
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdatavalid;              // emif_c10_0_ctrl_mmr_slave_0_translator:uav_readdatavalid -> emif_c10_0_ctrl_mmr_slave_0_agent:m0_readdatavalid
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_lock;                       // emif_c10_0_ctrl_mmr_slave_0_agent:m0_lock -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_lock
	wire  [31:0] emif_c10_0_ctrl_mmr_slave_0_agent_m0_writedata;                  // emif_c10_0_ctrl_mmr_slave_0_agent:m0_writedata -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_writedata
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_m0_write;                      // emif_c10_0_ctrl_mmr_slave_0_agent:m0_write -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_write
	wire   [3:0] emif_c10_0_ctrl_mmr_slave_0_agent_m0_burstcount;                 // emif_c10_0_ctrl_mmr_slave_0_agent:m0_burstcount -> emif_c10_0_ctrl_mmr_slave_0_translator:uav_burstcount
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_valid;               // emif_c10_0_ctrl_mmr_slave_0_agent:rf_source_valid -> emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:in_valid
	wire  [93:0] emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_data;                // emif_c10_0_ctrl_mmr_slave_0_agent:rf_source_data -> emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:in_data
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_ready;               // emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:in_ready -> emif_c10_0_ctrl_mmr_slave_0_agent:rf_source_ready
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_startofpacket;       // emif_c10_0_ctrl_mmr_slave_0_agent:rf_source_startofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:in_startofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_endofpacket;         // emif_c10_0_ctrl_mmr_slave_0_agent:rf_source_endofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:in_endofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_valid;            // emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:out_valid -> emif_c10_0_ctrl_mmr_slave_0_agent:rf_sink_valid
	wire  [93:0] emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_data;             // emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:out_data -> emif_c10_0_ctrl_mmr_slave_0_agent:rf_sink_data
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_ready;            // emif_c10_0_ctrl_mmr_slave_0_agent:rf_sink_ready -> emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:out_ready
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_startofpacket;    // emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:out_startofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent:rf_sink_startofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_endofpacket;      // emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo:out_endofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent:rf_sink_endofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_valid;          // emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_src_valid -> emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_data;           // emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_src_data -> emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_sink_data
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_ready;          // emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_sink_ready -> emif_c10_0_ctrl_mmr_slave_0_agent:rdata_fifo_src_ready
	wire         bridge_1_m0_agent_cp_valid;                                      // bridge_1_m0_agent:cp_valid -> router:sink_valid
	wire  [92:0] bridge_1_m0_agent_cp_data;                                       // bridge_1_m0_agent:cp_data -> router:sink_data
	wire         bridge_1_m0_agent_cp_ready;                                      // router:sink_ready -> bridge_1_m0_agent:cp_ready
	wire         bridge_1_m0_agent_cp_startofpacket;                              // bridge_1_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         bridge_1_m0_agent_cp_endofpacket;                                // bridge_1_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                // router:src_valid -> cmd_demux:sink_valid
	wire  [92:0] router_src_data;                                                 // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                              // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rp_valid;                      // emif_c10_0_ctrl_mmr_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [92:0] emif_c10_0_ctrl_mmr_slave_0_agent_rp_data;                       // emif_c10_0_ctrl_mmr_slave_0_agent:rp_data -> router_001:sink_data
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rp_ready;                      // router_001:sink_ready -> emif_c10_0_ctrl_mmr_slave_0_agent:rp_ready
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rp_startofpacket;              // emif_c10_0_ctrl_mmr_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_agent_rp_endofpacket;                // emif_c10_0_ctrl_mmr_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                            // router_001:src_valid -> rsp_demux:sink_valid
	wire  [92:0] router_001_src_data;                                             // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                            // rsp_demux:sink_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                          // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                    // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                      // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_mux_src_valid;                                               // cmd_mux:src_valid -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_valid
	wire  [92:0] cmd_mux_src_data;                                                // cmd_mux:src_data -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_data
	wire         cmd_mux_src_ready;                                               // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                             // cmd_mux:src_channel -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_channel
	wire         cmd_mux_src_startofpacket;                                       // cmd_mux:src_startofpacket -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_startofpacket
	wire         cmd_mux_src_endofpacket;                                         // cmd_mux:src_endofpacket -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:sink0_endofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_valid;         // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_valid -> emif_c10_0_ctrl_mmr_slave_0_agent:cp_valid
	wire  [92:0] emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_data;          // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_data -> emif_c10_0_ctrl_mmr_slave_0_agent:cp_data
	wire         emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_ready;         // emif_c10_0_ctrl_mmr_slave_0_agent:cp_ready -> emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_ready
	wire   [0:0] emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_channel;       // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_channel -> emif_c10_0_ctrl_mmr_slave_0_agent:cp_channel
	wire         emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_startofpacket; // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_startofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent:cp_startofpacket
	wire         emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_endofpacket;   // emif_c10_0_ctrl_mmr_slave_0_burst_adapter:source0_endofpacket -> emif_c10_0_ctrl_mmr_slave_0_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [92:0] cmd_demux_src0_data;                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [92:0] rsp_demux_src0_data;                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (12),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (12),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) bridge_1_m0_translator (
		.clk                    (emif_c10_0_emif_usr_clk_clk),                                    //   input,   width = 1,                       clk.clk
		.reset                  (bridge_1_m0_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                     reset.reset
		.uav_address            (bridge_1_m0_translator_avalon_universal_master_0_address),       //  output,  width = 12, avalon_universal_master_0.address
		.uav_burstcount         (bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 5,                          .burstcount
		.uav_read               (bridge_1_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (bridge_1_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (bridge_1_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (bridge_1_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (bridge_1_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (bridge_1_m0_address),                                            //   input,  width = 12,      avalon_anti_master_0.address
		.av_waitrequest         (bridge_1_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (bridge_1_m0_burstcount),                                         //   input,   width = 3,                          .burstcount
		.av_byteenable          (bridge_1_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (bridge_1_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (bridge_1_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (bridge_1_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (bridge_1_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (bridge_1_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (bridge_1_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_c10_0_ctrl_mmr_slave_0_translator (
		.clk                    (emif_c10_0_emif_usr_clk_clk),                        //   input,   width = 1,                      clk.clk
		.reset                  (bridge_1_m0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (emif_c10_0_ctrl_mmr_slave_0_agent_m0_address),       //   input,  width = 12, avalon_universal_slave_0.address
		.uav_burstcount         (emif_c10_0_ctrl_mmr_slave_0_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (emif_c10_0_ctrl_mmr_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (emif_c10_0_ctrl_mmr_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (emif_c10_0_ctrl_mmr_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (emif_c10_0_ctrl_mmr_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (emif_c10_0_ctrl_mmr_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (emif_c10_0_ctrl_mmr_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (emif_c10_0_ctrl_mmr_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (emif_c10_0_ctrl_mmr_slave_0_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (emif_c10_0_ctrl_mmr_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (emif_c10_0_ctrl_mmr_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (emif_c10_0_ctrl_mmr_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (emif_c10_0_ctrl_mmr_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_beginbursttransfer  (emif_c10_0_ctrl_mmr_slave_0_beginbursttransfer),     //  output,   width = 1,                         .beginbursttransfer
		.av_burstcount          (emif_c10_0_ctrl_mmr_slave_0_burstcount),             //  output,   width = 2,                         .burstcount
		.av_readdatavalid       (emif_c10_0_ctrl_mmr_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (emif_c10_0_ctrl_mmr_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                   // (terminated),                                       
		.av_byteenable          (),                                                   // (terminated),                                       
		.av_writebyteenable     (),                                                   // (terminated),                                       
		.av_lock                (),                                                   // (terminated),                                       
		.av_chipselect          (),                                                   // (terminated),                                       
		.av_clken               (),                                                   // (terminated),                                       
		.uav_clken              (1'b0),                                               // (terminated),                                       
		.av_debugaccess         (),                                                   // (terminated),                                       
		.av_outputenable        (),                                                   // (terminated),                                       
		.uav_response           (),                                                   // (terminated),                                       
		.av_response            (2'b00),                                              // (terminated),                                       
		.uav_writeresponsevalid (),                                                   // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (92),
		.PKT_DOMAIN_H              (91),
		.PKT_DOMAIN_L              (90),
		.PKT_SNOOP_H               (89),
		.PKT_SNOOP_L               (86),
		.PKT_BARRIER_H             (85),
		.PKT_BARRIER_L             (84),
		.PKT_ORI_BURST_SIZE_H      (83),
		.PKT_ORI_BURST_SIZE_L      (81),
		.PKT_RESPONSE_STATUS_H     (80),
		.PKT_RESPONSE_STATUS_L     (79),
		.PKT_QOS_H                 (68),
		.PKT_QOS_L                 (68),
		.PKT_DATA_SIDEBAND_H       (66),
		.PKT_DATA_SIDEBAND_L       (66),
		.PKT_ADDR_SIDEBAND_H       (65),
		.PKT_ADDR_SIDEBAND_L       (65),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_CACHE_H               (78),
		.PKT_CACHE_L               (75),
		.PKT_THREAD_ID_H           (71),
		.PKT_THREAD_ID_L           (71),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (74),
		.PKT_PROTECTION_L          (72),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (70),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) bridge_1_m0_agent (
		.clk                   (emif_c10_0_emif_usr_clk_clk),                                    //   input,   width = 1,       clk.clk
		.reset                 (bridge_1_m0_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1, clk_reset.reset
		.av_address            (bridge_1_m0_translator_avalon_universal_master_0_address),       //   input,  width = 12,        av.address
		.av_write              (bridge_1_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (bridge_1_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (bridge_1_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (bridge_1_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 5,          .burstcount
		.av_debugaccess        (bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (bridge_1_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (bridge_1_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (bridge_1_m0_agent_cp_data),                                      //  output,  width = 93,          .data
		.cp_startofpacket      (bridge_1_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (bridge_1_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (bridge_1_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                              //   input,   width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                               //   input,  width = 93,          .data
		.rp_channel            (rsp_mux_src_channel),                                            //   input,   width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                        //   input,   width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                              //  output,   width = 1,          .ready
		.av_response           (),                                                               // (terminated),                        
		.av_writeresponsevalid ()                                                                // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (83),
		.PKT_ORI_BURST_SIZE_L      (81),
		.PKT_RESPONSE_STATUS_H     (80),
		.PKT_RESPONSE_STATUS_L     (79),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (74),
		.PKT_PROTECTION_L          (72),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (70),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (93),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_c10_0_ctrl_mmr_slave_0_agent (
		.clk                     (emif_c10_0_emif_usr_clk_clk),                                     //   input,   width = 1,             clk.clk
		.reset                   (bridge_1_m0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1,       clk_reset.reset
		.m0_address              (emif_c10_0_ctrl_mmr_slave_0_agent_m0_address),                    //  output,  width = 12,              m0.address
		.m0_burstcount           (emif_c10_0_ctrl_mmr_slave_0_agent_m0_burstcount),                 //  output,   width = 4,                .burstcount
		.m0_byteenable           (emif_c10_0_ctrl_mmr_slave_0_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (emif_c10_0_ctrl_mmr_slave_0_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (emif_c10_0_ctrl_mmr_slave_0_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (emif_c10_0_ctrl_mmr_slave_0_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (emif_c10_0_ctrl_mmr_slave_0_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (emif_c10_0_ctrl_mmr_slave_0_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (emif_c10_0_ctrl_mmr_slave_0_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (emif_c10_0_ctrl_mmr_slave_0_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (emif_c10_0_ctrl_mmr_slave_0_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (emif_c10_0_ctrl_mmr_slave_0_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (emif_c10_0_ctrl_mmr_slave_0_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (emif_c10_0_ctrl_mmr_slave_0_agent_rp_data),                       //  output,  width = 93,                .data
		.rp_startofpacket        (emif_c10_0_ctrl_mmr_slave_0_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_data),          //   input,  width = 93,                .data
		.cp_startofpacket        (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_channel),       //   input,   width = 1,                .channel
		.rf_sink_ready           (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 94,                .data
		.rf_source_ready         (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_data),                //  output,  width = 94,                .data
		.rdata_fifo_sink_ready   (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (emif_c10_0_ctrl_mmr_slave_0_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                           // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                            // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                             // (terminated),                              
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (94),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo (
		.clk               (emif_c10_0_emif_usr_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (bridge_1_m0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_data),             //   input,  width = 94,        in.data
		.in_valid          (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (emif_c10_0_ctrl_mmr_slave_0_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 94,       out.data
		.out_valid         (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (emif_c10_0_ctrl_mmr_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                        
		.csr_read          (1'b0),                                                         // (terminated),                        
		.csr_write         (1'b0),                                                         // (terminated),                        
		.csr_readdata      (),                                                             // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                        
		.almost_full_data  (),                                                             // (terminated),                        
		.almost_empty_data (),                                                             // (terminated),                        
		.in_empty          (1'b0),                                                         // (terminated),                        
		.out_empty         (),                                                             // (terminated),                        
		.in_error          (1'b0),                                                         // (terminated),                        
		.out_error         (),                                                             // (terminated),                        
		.in_channel        (1'b0),                                                         // (terminated),                        
		.out_channel       ()                                                              // (terminated),                        
	);

	mcu_subsystem_altera_merlin_router_181_4odvxei router (
		.sink_ready         (bridge_1_m0_agent_cp_ready),                    //  output,   width = 1,      sink.ready
		.sink_valid         (bridge_1_m0_agent_cp_valid),                    //   input,   width = 1,          .valid
		.sink_data          (bridge_1_m0_agent_cp_data),                     //   input,  width = 93,          .data
		.sink_startofpacket (bridge_1_m0_agent_cp_startofpacket),            //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (bridge_1_m0_agent_cp_endofpacket),              //   input,   width = 1,          .endofpacket
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,   width = 1,       clk.clk
		.reset              (bridge_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                              //  output,   width = 1,          .valid
		.src_data           (router_src_data),                               //  output,  width = 93,          .data
		.src_channel        (router_src_channel),                            //  output,   width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_le6mfpq router_001 (
		.sink_ready         (emif_c10_0_ctrl_mmr_slave_0_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (emif_c10_0_ctrl_mmr_slave_0_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (emif_c10_0_ctrl_mmr_slave_0_agent_rp_data),          //   input,  width = 93,          .data
		.sink_startofpacket (emif_c10_0_ctrl_mmr_slave_0_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (emif_c10_0_ctrl_mmr_slave_0_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (emif_c10_0_emif_usr_clk_clk),                        //   input,   width = 1,       clk.clk
		.reset              (bridge_1_m0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                               //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                               //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                //  output,  width = 93,          .data
		.src_channel        (router_001_src_channel),                             //  output,   width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //  output,   width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_burst_adapter_181_hzntqzy #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (93),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) emif_c10_0_ctrl_mmr_slave_0_burst_adapter (
		.clk                   (emif_c10_0_emif_usr_clk_clk),                                     //   input,   width = 1,       cr0.clk
		.reset                 (bridge_1_m0_reset_reset_bridge_in_reset_reset),                   //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //   input,   width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //   input,  width = 93,          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //   input,   width = 1,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //   input,   width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //  output,   width = 1,          .ready
		.source0_valid         (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_data),          //  output,  width = 93,          .data
		.source0_channel       (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_channel),       //  output,   width = 1,          .channel
		.source0_startofpacket (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (emif_c10_0_ctrl_mmr_slave_0_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_jzg3qvq cmd_demux (
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,   width = 1,       clk.clk
		.reset              (bridge_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                              //  output,   width = 1,      sink.ready
		.sink_channel       (router_src_channel),                            //   input,   width = 1,          .channel
		.sink_data          (router_src_data),                               //   input,  width = 93,          .data
		.sink_startofpacket (router_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                              //   input,   width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //   input,   width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //  output,   width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                           //  output,  width = 93,          .data
		.src0_channel       (cmd_demux_src0_channel),                        //  output,   width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                     //  output,   width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_yl4sxki cmd_mux (
		.clk                 (emif_c10_0_emif_usr_clk_clk),                   //   input,   width = 1,       clk.clk
		.reset               (bridge_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                             //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                              //  output,  width = 93,          .data
		.src_channel         (cmd_mux_src_channel),                           //  output,   width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //   input,   width = 1,          .channel
		.sink0_data          (cmd_demux_src0_data),                           //   input,  width = 93,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //   input,   width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_jzg3qvq rsp_demux (
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,   width = 1,       clk.clk
		.reset              (bridge_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                        //   input,   width = 1,          .channel
		.sink_data          (router_001_src_data),                           //   input,  width = 93,          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                          //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                           //  output,  width = 93,          .data
		.src0_channel       (rsp_demux_src0_channel),                        //  output,   width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //  output,   width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ge7ugkq rsp_mux (
		.clk                 (emif_c10_0_emif_usr_clk_clk),                   //   input,   width = 1,       clk.clk
		.reset               (bridge_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                             //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                              //  output,  width = 93,          .data
		.src_channel         (rsp_mux_src_channel),                           //  output,   width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                          //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                          //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                        //   input,   width = 1,          .channel
		.sink0_data          (rsp_demux_src0_data),                           //   input,  width = 93,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                     //   input,   width = 1,          .endofpacket
	);

endmodule
