// mcu_subsystem_altera_mm_interconnect_181_yebtjka.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem_altera_mm_interconnect_181_yebtjka (
		input  wire [30:0]  bridge_0_m0_address,                                     //                                       bridge_0_m0.address
		output wire         bridge_0_m0_waitrequest,                                 //                                                  .waitrequest
		input  wire [7:0]   bridge_0_m0_burstcount,                                  //                                                  .burstcount
		input  wire [3:0]   bridge_0_m0_byteenable,                                  //                                                  .byteenable
		input  wire         bridge_0_m0_read,                                        //                                                  .read
		output wire [31:0]  bridge_0_m0_readdata,                                    //                                                  .readdata
		output wire         bridge_0_m0_readdatavalid,                               //                                                  .readdatavalid
		input  wire         bridge_0_m0_write,                                       //                                                  .write
		input  wire [31:0]  bridge_0_m0_writedata,                                   //                                                  .writedata
		input  wire         bridge_0_m0_debugaccess,                                 //                                                  .debugaccess
		output wire [25:0]  emif_c10_0_ctrl_amm_0_address,                           //                             emif_c10_0_ctrl_amm_0.address
		output wire         emif_c10_0_ctrl_amm_0_write,                             //                                                  .write
		output wire         emif_c10_0_ctrl_amm_0_read,                              //                                                  .read
		input  wire [255:0] emif_c10_0_ctrl_amm_0_readdata,                          //                                                  .readdata
		output wire [255:0] emif_c10_0_ctrl_amm_0_writedata,                         //                                                  .writedata
		output wire [6:0]   emif_c10_0_ctrl_amm_0_burstcount,                        //                                                  .burstcount
		output wire [31:0]  emif_c10_0_ctrl_amm_0_byteenable,                        //                                                  .byteenable
		input  wire         emif_c10_0_ctrl_amm_0_readdatavalid,                     //                                                  .readdatavalid
		input  wire         emif_c10_0_ctrl_amm_0_waitrequest,                       //                                                  .waitrequest
		input  wire [0:0]   ad9680_dma_m_dest_axi_awid,                              //                             ad9680_dma_m_dest_axi.awid
		input  wire [31:0]  ad9680_dma_m_dest_axi_awaddr,                            //                                                  .awaddr
		input  wire [3:0]   ad9680_dma_m_dest_axi_awlen,                             //                                                  .awlen
		input  wire [2:0]   ad9680_dma_m_dest_axi_awsize,                            //                                                  .awsize
		input  wire [1:0]   ad9680_dma_m_dest_axi_awburst,                           //                                                  .awburst
		input  wire [1:0]   ad9680_dma_m_dest_axi_awlock,                            //                                                  .awlock
		input  wire [3:0]   ad9680_dma_m_dest_axi_awcache,                           //                                                  .awcache
		input  wire [2:0]   ad9680_dma_m_dest_axi_awprot,                            //                                                  .awprot
		input  wire         ad9680_dma_m_dest_axi_awvalid,                           //                                                  .awvalid
		output wire         ad9680_dma_m_dest_axi_awready,                           //                                                  .awready
		input  wire [0:0]   ad9680_dma_m_dest_axi_wid,                               //                                                  .wid
		input  wire [127:0] ad9680_dma_m_dest_axi_wdata,                             //                                                  .wdata
		input  wire [15:0]  ad9680_dma_m_dest_axi_wstrb,                             //                                                  .wstrb
		input  wire         ad9680_dma_m_dest_axi_wlast,                             //                                                  .wlast
		input  wire         ad9680_dma_m_dest_axi_wvalid,                            //                                                  .wvalid
		output wire         ad9680_dma_m_dest_axi_wready,                            //                                                  .wready
		output wire [0:0]   ad9680_dma_m_dest_axi_bid,                               //                                                  .bid
		output wire [1:0]   ad9680_dma_m_dest_axi_bresp,                             //                                                  .bresp
		output wire         ad9680_dma_m_dest_axi_bvalid,                            //                                                  .bvalid
		input  wire         ad9680_dma_m_dest_axi_bready,                            //                                                  .bready
		input  wire [0:0]   ad9680_dma_m_dest_axi_arid,                              //                                                  .arid
		input  wire [31:0]  ad9680_dma_m_dest_axi_araddr,                            //                                                  .araddr
		input  wire [3:0]   ad9680_dma_m_dest_axi_arlen,                             //                                                  .arlen
		input  wire [2:0]   ad9680_dma_m_dest_axi_arsize,                            //                                                  .arsize
		input  wire [1:0]   ad9680_dma_m_dest_axi_arburst,                           //                                                  .arburst
		input  wire [1:0]   ad9680_dma_m_dest_axi_arlock,                            //                                                  .arlock
		input  wire [3:0]   ad9680_dma_m_dest_axi_arcache,                           //                                                  .arcache
		input  wire [2:0]   ad9680_dma_m_dest_axi_arprot,                            //                                                  .arprot
		input  wire         ad9680_dma_m_dest_axi_arvalid,                           //                                                  .arvalid
		output wire         ad9680_dma_m_dest_axi_arready,                           //                                                  .arready
		output wire [0:0]   ad9680_dma_m_dest_axi_rid,                               //                                                  .rid
		output wire [127:0] ad9680_dma_m_dest_axi_rdata,                             //                                                  .rdata
		output wire [1:0]   ad9680_dma_m_dest_axi_rresp,                             //                                                  .rresp
		output wire         ad9680_dma_m_dest_axi_rlast,                             //                                                  .rlast
		output wire         ad9680_dma_m_dest_axi_rvalid,                            //                                                  .rvalid
		input  wire         ad9680_dma_m_dest_axi_rready,                            //                                                  .rready
		input  wire [0:0]   ad9144_dma_m_src_axi_awid,                               //                              ad9144_dma_m_src_axi.awid
		input  wire [31:0]  ad9144_dma_m_src_axi_awaddr,                             //                                                  .awaddr
		input  wire [3:0]   ad9144_dma_m_src_axi_awlen,                              //                                                  .awlen
		input  wire [2:0]   ad9144_dma_m_src_axi_awsize,                             //                                                  .awsize
		input  wire [1:0]   ad9144_dma_m_src_axi_awburst,                            //                                                  .awburst
		input  wire [1:0]   ad9144_dma_m_src_axi_awlock,                             //                                                  .awlock
		input  wire [3:0]   ad9144_dma_m_src_axi_awcache,                            //                                                  .awcache
		input  wire [2:0]   ad9144_dma_m_src_axi_awprot,                             //                                                  .awprot
		input  wire         ad9144_dma_m_src_axi_awvalid,                            //                                                  .awvalid
		output wire         ad9144_dma_m_src_axi_awready,                            //                                                  .awready
		input  wire [0:0]   ad9144_dma_m_src_axi_wid,                                //                                                  .wid
		input  wire [127:0] ad9144_dma_m_src_axi_wdata,                              //                                                  .wdata
		input  wire [15:0]  ad9144_dma_m_src_axi_wstrb,                              //                                                  .wstrb
		input  wire         ad9144_dma_m_src_axi_wlast,                              //                                                  .wlast
		input  wire         ad9144_dma_m_src_axi_wvalid,                             //                                                  .wvalid
		output wire         ad9144_dma_m_src_axi_wready,                             //                                                  .wready
		output wire [0:0]   ad9144_dma_m_src_axi_bid,                                //                                                  .bid
		output wire [1:0]   ad9144_dma_m_src_axi_bresp,                              //                                                  .bresp
		output wire         ad9144_dma_m_src_axi_bvalid,                             //                                                  .bvalid
		input  wire         ad9144_dma_m_src_axi_bready,                             //                                                  .bready
		input  wire [0:0]   ad9144_dma_m_src_axi_arid,                               //                                                  .arid
		input  wire [31:0]  ad9144_dma_m_src_axi_araddr,                             //                                                  .araddr
		input  wire [3:0]   ad9144_dma_m_src_axi_arlen,                              //                                                  .arlen
		input  wire [2:0]   ad9144_dma_m_src_axi_arsize,                             //                                                  .arsize
		input  wire [1:0]   ad9144_dma_m_src_axi_arburst,                            //                                                  .arburst
		input  wire [1:0]   ad9144_dma_m_src_axi_arlock,                             //                                                  .arlock
		input  wire [3:0]   ad9144_dma_m_src_axi_arcache,                            //                                                  .arcache
		input  wire [2:0]   ad9144_dma_m_src_axi_arprot,                             //                                                  .arprot
		input  wire         ad9144_dma_m_src_axi_arvalid,                            //                                                  .arvalid
		output wire         ad9144_dma_m_src_axi_arready,                            //                                                  .arready
		output wire [0:0]   ad9144_dma_m_src_axi_rid,                                //                                                  .rid
		output wire [127:0] ad9144_dma_m_src_axi_rdata,                              //                                                  .rdata
		output wire [1:0]   ad9144_dma_m_src_axi_rresp,                              //                                                  .rresp
		output wire         ad9144_dma_m_src_axi_rlast,                              //                                                  .rlast
		output wire         ad9144_dma_m_src_axi_rvalid,                             //                                                  .rvalid
		input  wire         ad9144_dma_m_src_axi_rready,                             //                                                  .rready
		input  wire         bridge_0_m0_reset_reset_bridge_in_reset_reset,           //           bridge_0_m0_reset_reset_bridge_in_reset.reset
		input  wire         ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset, // ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset.reset
		input  wire         emif_c10_0_emif_usr_clk_clk,                             //                           emif_c10_0_emif_usr_clk.clk
		input  wire         refclk_emif_out_clk_clk                                  //                               refclk_emif_out_clk.clk
	);

	wire          bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // bridge_0_m0_agent:av_waitrequest -> bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] bridge_0_m0_translator_avalon_universal_master_0_readdata;      // bridge_0_m0_agent:av_readdata -> bridge_0_m0_translator:uav_readdata
	wire          bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // bridge_0_m0_translator:uav_debugaccess -> bridge_0_m0_agent:av_debugaccess
	wire   [31:0] bridge_0_m0_translator_avalon_universal_master_0_address;       // bridge_0_m0_translator:uav_address -> bridge_0_m0_agent:av_address
	wire          bridge_0_m0_translator_avalon_universal_master_0_read;          // bridge_0_m0_translator:uav_read -> bridge_0_m0_agent:av_read
	wire    [3:0] bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // bridge_0_m0_translator:uav_byteenable -> bridge_0_m0_agent:av_byteenable
	wire          bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // bridge_0_m0_agent:av_readdatavalid -> bridge_0_m0_translator:uav_readdatavalid
	wire          bridge_0_m0_translator_avalon_universal_master_0_lock;          // bridge_0_m0_translator:uav_lock -> bridge_0_m0_agent:av_lock
	wire          bridge_0_m0_translator_avalon_universal_master_0_write;         // bridge_0_m0_translator:uav_write -> bridge_0_m0_agent:av_write
	wire   [31:0] bridge_0_m0_translator_avalon_universal_master_0_writedata;     // bridge_0_m0_translator:uav_writedata -> bridge_0_m0_agent:av_writedata
	wire    [9:0] bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // bridge_0_m0_translator:uav_burstcount -> bridge_0_m0_agent:av_burstcount
	wire  [255:0] emif_c10_0_ctrl_amm_0_agent_m0_readdata;                        // emif_c10_0_ctrl_amm_0_translator:uav_readdata -> emif_c10_0_ctrl_amm_0_agent:m0_readdata
	wire          emif_c10_0_ctrl_amm_0_agent_m0_waitrequest;                     // emif_c10_0_ctrl_amm_0_translator:uav_waitrequest -> emif_c10_0_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_c10_0_ctrl_amm_0_agent_m0_debugaccess;                     // emif_c10_0_ctrl_amm_0_agent:m0_debugaccess -> emif_c10_0_ctrl_amm_0_translator:uav_debugaccess
	wire   [31:0] emif_c10_0_ctrl_amm_0_agent_m0_address;                         // emif_c10_0_ctrl_amm_0_agent:m0_address -> emif_c10_0_ctrl_amm_0_translator:uav_address
	wire   [31:0] emif_c10_0_ctrl_amm_0_agent_m0_byteenable;                      // emif_c10_0_ctrl_amm_0_agent:m0_byteenable -> emif_c10_0_ctrl_amm_0_translator:uav_byteenable
	wire          emif_c10_0_ctrl_amm_0_agent_m0_read;                            // emif_c10_0_ctrl_amm_0_agent:m0_read -> emif_c10_0_ctrl_amm_0_translator:uav_read
	wire          emif_c10_0_ctrl_amm_0_agent_m0_readdatavalid;                   // emif_c10_0_ctrl_amm_0_translator:uav_readdatavalid -> emif_c10_0_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_c10_0_ctrl_amm_0_agent_m0_lock;                            // emif_c10_0_ctrl_amm_0_agent:m0_lock -> emif_c10_0_ctrl_amm_0_translator:uav_lock
	wire  [255:0] emif_c10_0_ctrl_amm_0_agent_m0_writedata;                       // emif_c10_0_ctrl_amm_0_agent:m0_writedata -> emif_c10_0_ctrl_amm_0_translator:uav_writedata
	wire          emif_c10_0_ctrl_amm_0_agent_m0_write;                           // emif_c10_0_ctrl_amm_0_agent:m0_write -> emif_c10_0_ctrl_amm_0_translator:uav_write
	wire   [11:0] emif_c10_0_ctrl_amm_0_agent_m0_burstcount;                      // emif_c10_0_ctrl_amm_0_agent:m0_burstcount -> emif_c10_0_ctrl_amm_0_translator:uav_burstcount
	wire          emif_c10_0_ctrl_amm_0_agent_rf_source_valid;                    // emif_c10_0_ctrl_amm_0_agent:rf_source_valid -> emif_c10_0_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [383:0] emif_c10_0_ctrl_amm_0_agent_rf_source_data;                     // emif_c10_0_ctrl_amm_0_agent:rf_source_data -> emif_c10_0_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_c10_0_ctrl_amm_0_agent_rf_source_ready;                    // emif_c10_0_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_c10_0_ctrl_amm_0_agent:rf_source_ready
	wire          emif_c10_0_ctrl_amm_0_agent_rf_source_startofpacket;            // emif_c10_0_ctrl_amm_0_agent:rf_source_startofpacket -> emif_c10_0_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rf_source_endofpacket;              // emif_c10_0_ctrl_amm_0_agent:rf_source_endofpacket -> emif_c10_0_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_valid;                 // emif_c10_0_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_c10_0_ctrl_amm_0_agent:rf_sink_valid
	wire  [383:0] emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_data;                  // emif_c10_0_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_c10_0_ctrl_amm_0_agent:rf_sink_data
	wire          emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_ready;                 // emif_c10_0_ctrl_amm_0_agent:rf_sink_ready -> emif_c10_0_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;         // emif_c10_0_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_c10_0_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;           // emif_c10_0_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_c10_0_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_valid;               // emif_c10_0_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_c10_0_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [257:0] emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_data;                // emif_c10_0_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_c10_0_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_ready;               // emif_c10_0_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_c10_0_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_valid;               // emif_c10_0_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_c10_0_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [257:0] emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_data;                // emif_c10_0_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_c10_0_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_ready;               // emif_c10_0_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_c10_0_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire          ad9680_dma_m_dest_axi_agent_write_cp_valid;                     // ad9680_dma_m_dest_axi_agent:write_cp_valid -> router:sink_valid
	wire  [238:0] ad9680_dma_m_dest_axi_agent_write_cp_data;                      // ad9680_dma_m_dest_axi_agent:write_cp_data -> router:sink_data
	wire          ad9680_dma_m_dest_axi_agent_write_cp_ready;                     // router:sink_ready -> ad9680_dma_m_dest_axi_agent:write_cp_ready
	wire          ad9680_dma_m_dest_axi_agent_write_cp_startofpacket;             // ad9680_dma_m_dest_axi_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_agent_write_cp_endofpacket;               // ad9680_dma_m_dest_axi_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          ad9680_dma_m_dest_axi_agent_read_cp_valid;                      // ad9680_dma_m_dest_axi_agent:read_cp_valid -> router_001:sink_valid
	wire  [238:0] ad9680_dma_m_dest_axi_agent_read_cp_data;                       // ad9680_dma_m_dest_axi_agent:read_cp_data -> router_001:sink_data
	wire          ad9680_dma_m_dest_axi_agent_read_cp_ready;                      // router_001:sink_ready -> ad9680_dma_m_dest_axi_agent:read_cp_ready
	wire          ad9680_dma_m_dest_axi_agent_read_cp_startofpacket;              // ad9680_dma_m_dest_axi_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_agent_read_cp_endofpacket;                // ad9680_dma_m_dest_axi_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          ad9144_dma_m_src_axi_agent_write_cp_valid;                      // ad9144_dma_m_src_axi_agent:write_cp_valid -> router_002:sink_valid
	wire  [238:0] ad9144_dma_m_src_axi_agent_write_cp_data;                       // ad9144_dma_m_src_axi_agent:write_cp_data -> router_002:sink_data
	wire          ad9144_dma_m_src_axi_agent_write_cp_ready;                      // router_002:sink_ready -> ad9144_dma_m_src_axi_agent:write_cp_ready
	wire          ad9144_dma_m_src_axi_agent_write_cp_startofpacket;              // ad9144_dma_m_src_axi_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          ad9144_dma_m_src_axi_agent_write_cp_endofpacket;                // ad9144_dma_m_src_axi_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          ad9144_dma_m_src_axi_agent_read_cp_valid;                       // ad9144_dma_m_src_axi_agent:read_cp_valid -> router_003:sink_valid
	wire  [238:0] ad9144_dma_m_src_axi_agent_read_cp_data;                        // ad9144_dma_m_src_axi_agent:read_cp_data -> router_003:sink_data
	wire          ad9144_dma_m_src_axi_agent_read_cp_ready;                       // router_003:sink_ready -> ad9144_dma_m_src_axi_agent:read_cp_ready
	wire          ad9144_dma_m_src_axi_agent_read_cp_startofpacket;               // ad9144_dma_m_src_axi_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          ad9144_dma_m_src_axi_agent_read_cp_endofpacket;                 // ad9144_dma_m_src_axi_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          bridge_0_m0_agent_cp_valid;                                     // bridge_0_m0_agent:cp_valid -> router_004:sink_valid
	wire  [130:0] bridge_0_m0_agent_cp_data;                                      // bridge_0_m0_agent:cp_data -> router_004:sink_data
	wire          bridge_0_m0_agent_cp_ready;                                     // router_004:sink_ready -> bridge_0_m0_agent:cp_ready
	wire          bridge_0_m0_agent_cp_startofpacket;                             // bridge_0_m0_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          bridge_0_m0_agent_cp_endofpacket;                               // bridge_0_m0_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rp_valid;                           // emif_c10_0_ctrl_amm_0_agent:rp_valid -> router_005:sink_valid
	wire  [382:0] emif_c10_0_ctrl_amm_0_agent_rp_data;                            // emif_c10_0_ctrl_amm_0_agent:rp_data -> router_005:sink_data
	wire          emif_c10_0_ctrl_amm_0_agent_rp_ready;                           // router_005:sink_ready -> emif_c10_0_ctrl_amm_0_agent:rp_ready
	wire          emif_c10_0_ctrl_amm_0_agent_rp_startofpacket;                   // emif_c10_0_ctrl_amm_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          emif_c10_0_ctrl_amm_0_agent_rp_endofpacket;                     // emif_c10_0_ctrl_amm_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                           // router_005:src_valid -> rsp_demux:sink_valid
	wire  [382:0] router_005_src_data;                                            // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                           // rsp_demux:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                         // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                   // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                     // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> emif_c10_0_ctrl_amm_0_burst_adapter:sink0_valid
	wire  [382:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> emif_c10_0_ctrl_amm_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                              // emif_c10_0_ctrl_amm_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> emif_c10_0_ctrl_amm_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> emif_c10_0_ctrl_amm_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> emif_c10_0_ctrl_amm_0_burst_adapter:sink0_endofpacket
	wire          emif_c10_0_ctrl_amm_0_burst_adapter_source0_valid;              // emif_c10_0_ctrl_amm_0_burst_adapter:source0_valid -> emif_c10_0_ctrl_amm_0_agent:cp_valid
	wire  [382:0] emif_c10_0_ctrl_amm_0_burst_adapter_source0_data;               // emif_c10_0_ctrl_amm_0_burst_adapter:source0_data -> emif_c10_0_ctrl_amm_0_agent:cp_data
	wire          emif_c10_0_ctrl_amm_0_burst_adapter_source0_ready;              // emif_c10_0_ctrl_amm_0_agent:cp_ready -> emif_c10_0_ctrl_amm_0_burst_adapter:source0_ready
	wire    [4:0] emif_c10_0_ctrl_amm_0_burst_adapter_source0_channel;            // emif_c10_0_ctrl_amm_0_burst_adapter:source0_channel -> emif_c10_0_ctrl_amm_0_agent:cp_channel
	wire          emif_c10_0_ctrl_amm_0_burst_adapter_source0_startofpacket;      // emif_c10_0_ctrl_amm_0_burst_adapter:source0_startofpacket -> emif_c10_0_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_c10_0_ctrl_amm_0_burst_adapter_source0_endofpacket;        // emif_c10_0_ctrl_amm_0_burst_adapter:source0_endofpacket -> emif_c10_0_ctrl_amm_0_agent:cp_endofpacket
	wire          cmd_demux_004_src0_valid;                                       // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [382:0] cmd_demux_004_src0_data;                                        // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                       // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire    [4:0] cmd_demux_004_src0_channel;                                     // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                               // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                 // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          rsp_demux_src4_valid;                                           // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [382:0] rsp_demux_src4_data;                                            // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                           // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire    [4:0] rsp_demux_src4_channel;                                         // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                   // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                     // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_valid
	wire  [382:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                              // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid;           // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_valid -> ad9680_dma_m_dest_axi_agent:write_rp_valid
	wire  [238:0] ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data;            // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_data -> ad9680_dma_m_dest_axi_agent:write_rp_data
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready;           // ad9680_dma_m_dest_axi_agent:write_rp_ready -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_ready
	wire    [4:0] ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel;         // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_channel -> ad9680_dma_m_dest_axi_agent:write_rp_channel
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket;   // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_startofpacket -> ad9680_dma_m_dest_axi_agent:write_rp_startofpacket
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket;     // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_endofpacket -> ad9680_dma_m_dest_axi_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                          // rsp_mux_001:src_valid -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_valid
	wire  [382:0] rsp_mux_001_src_data;                                           // rsp_mux_001:src_data -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                          // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                        // rsp_mux_001:src_channel -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                  // rsp_mux_001:src_startofpacket -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                    // rsp_mux_001:src_endofpacket -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid;           // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_valid -> ad9680_dma_m_dest_axi_agent:read_rp_valid
	wire  [238:0] ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data;            // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_data -> ad9680_dma_m_dest_axi_agent:read_rp_data
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready;           // ad9680_dma_m_dest_axi_agent:read_rp_ready -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_ready
	wire    [4:0] ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel;         // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_channel -> ad9680_dma_m_dest_axi_agent:read_rp_channel
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket;   // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_startofpacket -> ad9680_dma_m_dest_axi_agent:read_rp_startofpacket
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket;     // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_endofpacket -> ad9680_dma_m_dest_axi_agent:read_rp_endofpacket
	wire          rsp_mux_002_src_valid;                                          // rsp_mux_002:src_valid -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_valid
	wire  [382:0] rsp_mux_002_src_data;                                           // rsp_mux_002:src_data -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                          // ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                        // rsp_mux_002:src_channel -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                  // rsp_mux_002:src_startofpacket -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                    // rsp_mux_002:src_endofpacket -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid;            // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_valid -> ad9144_dma_m_src_axi_agent:write_rp_valid
	wire  [238:0] ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data;             // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_data -> ad9144_dma_m_src_axi_agent:write_rp_data
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready;            // ad9144_dma_m_src_axi_agent:write_rp_ready -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_ready
	wire    [4:0] ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel;          // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_channel -> ad9144_dma_m_src_axi_agent:write_rp_channel
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket;    // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_startofpacket -> ad9144_dma_m_src_axi_agent:write_rp_startofpacket
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket;      // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_endofpacket -> ad9144_dma_m_src_axi_agent:write_rp_endofpacket
	wire          rsp_mux_003_src_valid;                                          // rsp_mux_003:src_valid -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_valid
	wire  [382:0] rsp_mux_003_src_data;                                           // rsp_mux_003:src_data -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_data
	wire          rsp_mux_003_src_ready;                                          // ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_ready -> rsp_mux_003:src_ready
	wire    [4:0] rsp_mux_003_src_channel;                                        // rsp_mux_003:src_channel -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_003_src_startofpacket;                                  // rsp_mux_003:src_startofpacket -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                    // rsp_mux_003:src_endofpacket -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid;            // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_valid -> ad9144_dma_m_src_axi_agent:read_rp_valid
	wire  [238:0] ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data;             // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_data -> ad9144_dma_m_src_axi_agent:read_rp_data
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready;            // ad9144_dma_m_src_axi_agent:read_rp_ready -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_ready
	wire    [4:0] ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel;          // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_channel -> ad9144_dma_m_src_axi_agent:read_rp_channel
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket;    // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_startofpacket -> ad9144_dma_m_src_axi_agent:read_rp_startofpacket
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket;      // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_endofpacket -> ad9144_dma_m_src_axi_agent:read_rp_endofpacket
	wire          rsp_mux_004_src_valid;                                          // rsp_mux_004:src_valid -> bridge_0_m0_rsp_width_adapter:in_valid
	wire  [382:0] rsp_mux_004_src_data;                                           // rsp_mux_004:src_data -> bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_mux_004_src_ready;                                          // bridge_0_m0_rsp_width_adapter:in_ready -> rsp_mux_004:src_ready
	wire    [4:0] rsp_mux_004_src_channel;                                        // rsp_mux_004:src_channel -> bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_mux_004_src_startofpacket;                                  // rsp_mux_004:src_startofpacket -> bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                    // rsp_mux_004:src_endofpacket -> bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          bridge_0_m0_rsp_width_adapter_src_valid;                        // bridge_0_m0_rsp_width_adapter:out_valid -> bridge_0_m0_agent:rp_valid
	wire  [130:0] bridge_0_m0_rsp_width_adapter_src_data;                         // bridge_0_m0_rsp_width_adapter:out_data -> bridge_0_m0_agent:rp_data
	wire          bridge_0_m0_rsp_width_adapter_src_ready;                        // bridge_0_m0_agent:rp_ready -> bridge_0_m0_rsp_width_adapter:out_ready
	wire    [4:0] bridge_0_m0_rsp_width_adapter_src_channel;                      // bridge_0_m0_rsp_width_adapter:out_channel -> bridge_0_m0_agent:rp_channel
	wire          bridge_0_m0_rsp_width_adapter_src_startofpacket;                // bridge_0_m0_rsp_width_adapter:out_startofpacket -> bridge_0_m0_agent:rp_startofpacket
	wire          bridge_0_m0_rsp_width_adapter_src_endofpacket;                  // bridge_0_m0_rsp_width_adapter:out_endofpacket -> bridge_0_m0_agent:rp_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_valid
	wire  [238:0] router_src_data;                                                // router:src_data -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_data
	wire          router_src_ready;                                               // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                             // router:src_channel -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid;           // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [382:0] ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data;            // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready;           // cmd_demux:sink_ready -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_ready
	wire    [4:0] ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel;         // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket;   // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket;     // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_valid
	wire  [238:0] router_001_src_data;                                            // router_001:src_data -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                           // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                         // router_001:src_channel -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid;           // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [382:0] ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data;            // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready;           // cmd_demux_001:sink_ready -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_ready
	wire    [4:0] ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel;         // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket;   // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket;     // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                           // router_002:src_valid -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_valid
	wire  [238:0] router_002_src_data;                                            // router_002:src_data -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                           // ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                         // router_002:src_channel -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                   // router_002:src_startofpacket -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                     // router_002:src_endofpacket -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid;            // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [382:0] ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data;             // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready;            // cmd_demux_002:sink_ready -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_ready
	wire    [4:0] ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel;          // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket;    // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket;      // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                           // router_003:src_valid -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_valid
	wire  [238:0] router_003_src_data;                                            // router_003:src_data -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_data
	wire          router_003_src_ready;                                           // ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                         // router_003:src_channel -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                   // router_003:src_startofpacket -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                     // router_003:src_endofpacket -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid;            // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_valid -> cmd_demux_003:sink_valid
	wire  [382:0] ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data;             // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_data -> cmd_demux_003:sink_data
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready;            // cmd_demux_003:sink_ready -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_ready
	wire    [4:0] ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel;          // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_channel -> cmd_demux_003:sink_channel
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket;    // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket;      // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                           // router_004:src_valid -> bridge_0_m0_cmd_width_adapter:in_valid
	wire  [130:0] router_004_src_data;                                            // router_004:src_data -> bridge_0_m0_cmd_width_adapter:in_data
	wire          router_004_src_ready;                                           // bridge_0_m0_cmd_width_adapter:in_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                         // router_004:src_channel -> bridge_0_m0_cmd_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                   // router_004:src_startofpacket -> bridge_0_m0_cmd_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                     // router_004:src_endofpacket -> bridge_0_m0_cmd_width_adapter:in_endofpacket
	wire          bridge_0_m0_cmd_width_adapter_src_valid;                        // bridge_0_m0_cmd_width_adapter:out_valid -> cmd_demux_004:sink_valid
	wire  [382:0] bridge_0_m0_cmd_width_adapter_src_data;                         // bridge_0_m0_cmd_width_adapter:out_data -> cmd_demux_004:sink_data
	wire          bridge_0_m0_cmd_width_adapter_src_ready;                        // cmd_demux_004:sink_ready -> bridge_0_m0_cmd_width_adapter:out_ready
	wire    [4:0] bridge_0_m0_cmd_width_adapter_src_channel;                      // bridge_0_m0_cmd_width_adapter:out_channel -> cmd_demux_004:sink_channel
	wire          bridge_0_m0_cmd_width_adapter_src_startofpacket;                // bridge_0_m0_cmd_width_adapter:out_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          bridge_0_m0_cmd_width_adapter_src_endofpacket;                  // bridge_0_m0_cmd_width_adapter:out_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> crosser:in_valid
	wire  [382:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                           // crosser:in_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                              // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [382:0] crosser_out_data;                                               // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                              // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [4:0] crosser_out_channel;                                            // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                      // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                        // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                       // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [382:0] cmd_demux_001_src0_data;                                        // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                       // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                     // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                               // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                 // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                          // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [382:0] crosser_001_out_data;                                           // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                          // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [4:0] crosser_001_out_channel;                                        // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                  // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                    // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                       // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire  [382:0] cmd_demux_002_src0_data;                                        // cmd_demux_002:src0_data -> crosser_002:in_data
	wire          cmd_demux_002_src0_ready;                                       // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                     // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                               // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                 // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                          // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [382:0] crosser_002_out_data;                                           // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                          // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire    [4:0] crosser_002_out_channel;                                        // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                  // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                    // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                       // cmd_demux_003:src0_valid -> crosser_003:in_valid
	wire  [382:0] cmd_demux_003_src0_data;                                        // cmd_demux_003:src0_data -> crosser_003:in_data
	wire          cmd_demux_003_src0_ready;                                       // crosser_003:in_ready -> cmd_demux_003:src0_ready
	wire    [4:0] cmd_demux_003_src0_channel;                                     // cmd_demux_003:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_003_src0_startofpacket;                               // cmd_demux_003:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                 // cmd_demux_003:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                          // crosser_003:out_valid -> cmd_mux:sink3_valid
	wire  [382:0] crosser_003_out_data;                                           // crosser_003:out_data -> cmd_mux:sink3_data
	wire          crosser_003_out_ready;                                          // cmd_mux:sink3_ready -> crosser_003:out_ready
	wire    [4:0] crosser_003_out_channel;                                        // crosser_003:out_channel -> cmd_mux:sink3_channel
	wire          crosser_003_out_startofpacket;                                  // crosser_003:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire          crosser_003_out_endofpacket;                                    // crosser_003:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> crosser_004:in_valid
	wire  [382:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> crosser_004:in_data
	wire          rsp_demux_src0_ready;                                           // crosser_004:in_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                          // crosser_004:out_valid -> rsp_mux:sink0_valid
	wire  [382:0] crosser_004_out_data;                                           // crosser_004:out_data -> rsp_mux:sink0_data
	wire          crosser_004_out_ready;                                          // rsp_mux:sink0_ready -> crosser_004:out_ready
	wire    [4:0] crosser_004_out_channel;                                        // crosser_004:out_channel -> rsp_mux:sink0_channel
	wire          crosser_004_out_startofpacket;                                  // crosser_004:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                    // crosser_004:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                           // rsp_demux:src1_valid -> crosser_005:in_valid
	wire  [382:0] rsp_demux_src1_data;                                            // rsp_demux:src1_data -> crosser_005:in_data
	wire          rsp_demux_src1_ready;                                           // crosser_005:in_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                         // rsp_demux:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_src1_startofpacket;                                   // rsp_demux:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                     // rsp_demux:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                          // crosser_005:out_valid -> rsp_mux_001:sink0_valid
	wire  [382:0] crosser_005_out_data;                                           // crosser_005:out_data -> rsp_mux_001:sink0_data
	wire          crosser_005_out_ready;                                          // rsp_mux_001:sink0_ready -> crosser_005:out_ready
	wire    [4:0] crosser_005_out_channel;                                        // crosser_005:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_005_out_startofpacket;                                  // crosser_005:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                    // crosser_005:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                           // rsp_demux:src2_valid -> crosser_006:in_valid
	wire  [382:0] rsp_demux_src2_data;                                            // rsp_demux:src2_data -> crosser_006:in_data
	wire          rsp_demux_src2_ready;                                           // crosser_006:in_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                         // rsp_demux:src2_channel -> crosser_006:in_channel
	wire          rsp_demux_src2_startofpacket;                                   // rsp_demux:src2_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                     // rsp_demux:src2_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                          // crosser_006:out_valid -> rsp_mux_002:sink0_valid
	wire  [382:0] crosser_006_out_data;                                           // crosser_006:out_data -> rsp_mux_002:sink0_data
	wire          crosser_006_out_ready;                                          // rsp_mux_002:sink0_ready -> crosser_006:out_ready
	wire    [4:0] crosser_006_out_channel;                                        // crosser_006:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_006_out_startofpacket;                                  // crosser_006:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                    // crosser_006:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                           // rsp_demux:src3_valid -> crosser_007:in_valid
	wire  [382:0] rsp_demux_src3_data;                                            // rsp_demux:src3_data -> crosser_007:in_data
	wire          rsp_demux_src3_ready;                                           // crosser_007:in_ready -> rsp_demux:src3_ready
	wire    [4:0] rsp_demux_src3_channel;                                         // rsp_demux:src3_channel -> crosser_007:in_channel
	wire          rsp_demux_src3_startofpacket;                                   // rsp_demux:src3_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_src3_endofpacket;                                     // rsp_demux:src3_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                          // crosser_007:out_valid -> rsp_mux_003:sink0_valid
	wire  [382:0] crosser_007_out_data;                                           // crosser_007:out_data -> rsp_mux_003:sink0_data
	wire          crosser_007_out_ready;                                          // rsp_mux_003:sink0_ready -> crosser_007:out_ready
	wire    [4:0] crosser_007_out_channel;                                        // crosser_007:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_007_out_startofpacket;                                  // crosser_007:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                    // crosser_007:out_endofpacket -> rsp_mux_003:sink0_endofpacket

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) bridge_0_m0_translator (
		.clk                    (emif_c10_0_emif_usr_clk_clk),                                    //   input,   width = 1,                       clk.clk
		.reset                  (bridge_0_m0_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                     reset.reset
		.uav_address            (bridge_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,  width = 10,                          .burstcount
		.uav_read               (bridge_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (bridge_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (bridge_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (bridge_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (bridge_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (bridge_0_m0_address),                                            //   input,  width = 31,      avalon_anti_master_0.address
		.av_waitrequest         (bridge_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (bridge_0_m0_burstcount),                                         //   input,   width = 8,                          .burstcount
		.av_byteenable          (bridge_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (bridge_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (bridge_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (bridge_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (bridge_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (bridge_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (bridge_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (12),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_c10_0_ctrl_amm_0_translator (
		.clk                    (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,                      clk.clk
		.reset                  (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_c10_0_ctrl_amm_0_agent_m0_address),        //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (emif_c10_0_ctrl_amm_0_agent_m0_burstcount),     //   input,   width = 12,                         .burstcount
		.uav_read               (emif_c10_0_ctrl_amm_0_agent_m0_read),           //   input,    width = 1,                         .read
		.uav_write              (emif_c10_0_ctrl_amm_0_agent_m0_write),          //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_c10_0_ctrl_amm_0_agent_m0_waitrequest),    //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_c10_0_ctrl_amm_0_agent_m0_readdatavalid),  //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_c10_0_ctrl_amm_0_agent_m0_byteenable),     //   input,   width = 32,                         .byteenable
		.uav_readdata           (emif_c10_0_ctrl_amm_0_agent_m0_readdata),       //  output,  width = 256,                         .readdata
		.uav_writedata          (emif_c10_0_ctrl_amm_0_agent_m0_writedata),      //   input,  width = 256,                         .writedata
		.uav_lock               (emif_c10_0_ctrl_amm_0_agent_m0_lock),           //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_c10_0_ctrl_amm_0_agent_m0_debugaccess),    //   input,    width = 1,                         .debugaccess
		.av_address             (emif_c10_0_ctrl_amm_0_address),                 //  output,   width = 26,      avalon_anti_slave_0.address
		.av_write               (emif_c10_0_ctrl_amm_0_write),                   //  output,    width = 1,                         .write
		.av_read                (emif_c10_0_ctrl_amm_0_read),                    //  output,    width = 1,                         .read
		.av_readdata            (emif_c10_0_ctrl_amm_0_readdata),                //   input,  width = 256,                         .readdata
		.av_writedata           (emif_c10_0_ctrl_amm_0_writedata),               //  output,  width = 256,                         .writedata
		.av_burstcount          (emif_c10_0_ctrl_amm_0_burstcount),              //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_c10_0_ctrl_amm_0_byteenable),              //  output,   width = 32,                         .byteenable
		.av_readdatavalid       (emif_c10_0_ctrl_amm_0_readdatavalid),           //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_c10_0_ctrl_amm_0_waitrequest),             //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                              // (terminated),                                        
		.av_beginbursttransfer  (),                                              // (terminated),                                        
		.av_writebyteenable     (),                                              // (terminated),                                        
		.av_lock                (),                                              // (terminated),                                        
		.av_chipselect          (),                                              // (terminated),                                        
		.av_clken               (),                                              // (terminated),                                        
		.uav_clken              (1'b0),                                          // (terminated),                                        
		.av_debugaccess         (),                                              // (terminated),                                        
		.av_outputenable        (),                                              // (terminated),                                        
		.uav_response           (),                                              // (terminated),                                        
		.av_response            (2'b00),                                         // (terminated),                                        
		.uav_writeresponsevalid (),                                              // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_axi_master_ni_181_dp4ifgy #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (224),
		.PKT_CACHE_L               (221),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (209),
		.PKT_PROTECTION_H          (220),
		.PKT_PROTECTION_L          (218),
		.PKT_BURST_SIZE_H          (206),
		.PKT_BURST_SIZE_L          (204),
		.PKT_BURST_TYPE_H          (208),
		.PKT_BURST_TYPE_L          (207),
		.PKT_RESPONSE_STATUS_L     (225),
		.PKT_RESPONSE_STATUS_H     (226),
		.PKT_BURSTWRAP_H           (203),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (213),
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (215),
		.PKT_THREAD_ID_H           (217),
		.PKT_THREAD_ID_L           (217),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (212),
		.PKT_ORI_BURST_SIZE_L      (227),
		.PKT_ORI_BURST_SIZE_H      (229),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.PKT_DOMAIN_H              (237),
		.PKT_DOMAIN_L              (236),
		.PKT_SNOOP_H               (235),
		.PKT_SNOOP_L               (232),
		.PKT_BARRIER_H             (231),
		.PKT_BARRIER_L             (230),
		.PKT_WUNIQUE               (238),
		.ST_DATA_W                 (239),
		.ST_CHANNEL_W              (5),
		.ID                        (1),
		.SYNC_RESET                (0)
	) ad9680_dma_m_dest_axi_agent (
		.aclk                   (refclk_emif_out_clk_clk),                                      //   input,    width = 1,              clk.clk
		.aresetn                (~ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (ad9680_dma_m_dest_axi_agent_write_cp_valid),                   //  output,    width = 1,         write_cp.valid
		.write_cp_data          (ad9680_dma_m_dest_axi_agent_write_cp_data),                    //  output,  width = 239,                 .data
		.write_cp_startofpacket (ad9680_dma_m_dest_axi_agent_write_cp_startofpacket),           //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (ad9680_dma_m_dest_axi_agent_write_cp_endofpacket),             //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (ad9680_dma_m_dest_axi_agent_write_cp_ready),                   //   input,    width = 1,                 .ready
		.write_rp_valid         (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data),          //   input,  width = 239,                 .data
		.write_rp_channel       (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel),       //   input,    width = 5,                 .channel
		.write_rp_startofpacket (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (ad9680_dma_m_dest_axi_agent_read_cp_valid),                    //  output,    width = 1,          read_cp.valid
		.read_cp_data           (ad9680_dma_m_dest_axi_agent_read_cp_data),                     //  output,  width = 239,                 .data
		.read_cp_startofpacket  (ad9680_dma_m_dest_axi_agent_read_cp_startofpacket),            //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (ad9680_dma_m_dest_axi_agent_read_cp_endofpacket),              //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (ad9680_dma_m_dest_axi_agent_read_cp_ready),                    //   input,    width = 1,                 .ready
		.read_rp_valid          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data),          //   input,  width = 239,                 .data
		.read_rp_channel        (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel),       //   input,    width = 5,                 .channel
		.read_rp_startofpacket  (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (ad9680_dma_m_dest_axi_awid),                                   //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (ad9680_dma_m_dest_axi_awaddr),                                 //   input,   width = 32,                 .awaddr
		.awlen                  (ad9680_dma_m_dest_axi_awlen),                                  //   input,    width = 4,                 .awlen
		.awsize                 (ad9680_dma_m_dest_axi_awsize),                                 //   input,    width = 3,                 .awsize
		.awburst                (ad9680_dma_m_dest_axi_awburst),                                //   input,    width = 2,                 .awburst
		.awlock                 (ad9680_dma_m_dest_axi_awlock),                                 //   input,    width = 2,                 .awlock
		.awcache                (ad9680_dma_m_dest_axi_awcache),                                //   input,    width = 4,                 .awcache
		.awprot                 (ad9680_dma_m_dest_axi_awprot),                                 //   input,    width = 3,                 .awprot
		.awvalid                (ad9680_dma_m_dest_axi_awvalid),                                //   input,    width = 1,                 .awvalid
		.awready                (ad9680_dma_m_dest_axi_awready),                                //  output,    width = 1,                 .awready
		.wid                    (ad9680_dma_m_dest_axi_wid),                                    //   input,    width = 1,                 .wid
		.wdata                  (ad9680_dma_m_dest_axi_wdata),                                  //   input,  width = 128,                 .wdata
		.wstrb                  (ad9680_dma_m_dest_axi_wstrb),                                  //   input,   width = 16,                 .wstrb
		.wlast                  (ad9680_dma_m_dest_axi_wlast),                                  //   input,    width = 1,                 .wlast
		.wvalid                 (ad9680_dma_m_dest_axi_wvalid),                                 //   input,    width = 1,                 .wvalid
		.wready                 (ad9680_dma_m_dest_axi_wready),                                 //  output,    width = 1,                 .wready
		.bid                    (ad9680_dma_m_dest_axi_bid),                                    //  output,    width = 1,                 .bid
		.bresp                  (ad9680_dma_m_dest_axi_bresp),                                  //  output,    width = 2,                 .bresp
		.bvalid                 (ad9680_dma_m_dest_axi_bvalid),                                 //  output,    width = 1,                 .bvalid
		.bready                 (ad9680_dma_m_dest_axi_bready),                                 //   input,    width = 1,                 .bready
		.arid                   (ad9680_dma_m_dest_axi_arid),                                   //   input,    width = 1,                 .arid
		.araddr                 (ad9680_dma_m_dest_axi_araddr),                                 //   input,   width = 32,                 .araddr
		.arlen                  (ad9680_dma_m_dest_axi_arlen),                                  //   input,    width = 4,                 .arlen
		.arsize                 (ad9680_dma_m_dest_axi_arsize),                                 //   input,    width = 3,                 .arsize
		.arburst                (ad9680_dma_m_dest_axi_arburst),                                //   input,    width = 2,                 .arburst
		.arlock                 (ad9680_dma_m_dest_axi_arlock),                                 //   input,    width = 2,                 .arlock
		.arcache                (ad9680_dma_m_dest_axi_arcache),                                //   input,    width = 4,                 .arcache
		.arprot                 (ad9680_dma_m_dest_axi_arprot),                                 //   input,    width = 3,                 .arprot
		.arvalid                (ad9680_dma_m_dest_axi_arvalid),                                //   input,    width = 1,                 .arvalid
		.arready                (ad9680_dma_m_dest_axi_arready),                                //  output,    width = 1,                 .arready
		.rid                    (ad9680_dma_m_dest_axi_rid),                                    //  output,    width = 1,                 .rid
		.rdata                  (ad9680_dma_m_dest_axi_rdata),                                  //  output,  width = 128,                 .rdata
		.rresp                  (ad9680_dma_m_dest_axi_rresp),                                  //  output,    width = 2,                 .rresp
		.rlast                  (ad9680_dma_m_dest_axi_rlast),                                  //  output,    width = 1,                 .rlast
		.rvalid                 (ad9680_dma_m_dest_axi_rvalid),                                 //  output,    width = 1,                 .rvalid
		.rready                 (ad9680_dma_m_dest_axi_rready),                                 //   input,    width = 1,                 .rready
		.awuser                 (1'b0),                                                         // (terminated),                                
		.aruser                 (1'b0),                                                         // (terminated),                                
		.awqos                  (4'b0000),                                                      // (terminated),                                
		.arqos                  (4'b0000),                                                      // (terminated),                                
		.awregion               (4'b0000),                                                      // (terminated),                                
		.arregion               (4'b0000),                                                      // (terminated),                                
		.wuser                  (1'b0),                                                         // (terminated),                                
		.ruser                  (),                                                             // (terminated),                                
		.buser                  ()                                                              // (terminated),                                
	);

	mcu_subsystem_altera_merlin_axi_master_ni_181_dp4ifgy #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (224),
		.PKT_CACHE_L               (221),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (209),
		.PKT_PROTECTION_H          (220),
		.PKT_PROTECTION_L          (218),
		.PKT_BURST_SIZE_H          (206),
		.PKT_BURST_SIZE_L          (204),
		.PKT_BURST_TYPE_H          (208),
		.PKT_BURST_TYPE_L          (207),
		.PKT_RESPONSE_STATUS_L     (225),
		.PKT_RESPONSE_STATUS_H     (226),
		.PKT_BURSTWRAP_H           (203),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (213),
		.PKT_DEST_ID_H             (216),
		.PKT_DEST_ID_L             (215),
		.PKT_THREAD_ID_H           (217),
		.PKT_THREAD_ID_L           (217),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (212),
		.PKT_ORI_BURST_SIZE_L      (227),
		.PKT_ORI_BURST_SIZE_H      (229),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.PKT_DOMAIN_H              (237),
		.PKT_DOMAIN_L              (236),
		.PKT_SNOOP_H               (235),
		.PKT_SNOOP_L               (232),
		.PKT_BARRIER_H             (231),
		.PKT_BARRIER_L             (230),
		.PKT_WUNIQUE               (238),
		.ST_DATA_W                 (239),
		.ST_CHANNEL_W              (5),
		.ID                        (0),
		.SYNC_RESET                (0)
	) ad9144_dma_m_src_axi_agent (
		.aclk                   (refclk_emif_out_clk_clk),                                     //   input,    width = 1,              clk.clk
		.aresetn                (~ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (ad9144_dma_m_src_axi_agent_write_cp_valid),                   //  output,    width = 1,         write_cp.valid
		.write_cp_data          (ad9144_dma_m_src_axi_agent_write_cp_data),                    //  output,  width = 239,                 .data
		.write_cp_startofpacket (ad9144_dma_m_src_axi_agent_write_cp_startofpacket),           //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (ad9144_dma_m_src_axi_agent_write_cp_endofpacket),             //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (ad9144_dma_m_src_axi_agent_write_cp_ready),                   //   input,    width = 1,                 .ready
		.write_rp_valid         (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data),          //   input,  width = 239,                 .data
		.write_rp_channel       (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel),       //   input,    width = 5,                 .channel
		.write_rp_startofpacket (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (ad9144_dma_m_src_axi_agent_read_cp_valid),                    //  output,    width = 1,          read_cp.valid
		.read_cp_data           (ad9144_dma_m_src_axi_agent_read_cp_data),                     //  output,  width = 239,                 .data
		.read_cp_startofpacket  (ad9144_dma_m_src_axi_agent_read_cp_startofpacket),            //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (ad9144_dma_m_src_axi_agent_read_cp_endofpacket),              //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (ad9144_dma_m_src_axi_agent_read_cp_ready),                    //   input,    width = 1,                 .ready
		.read_rp_valid          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data),          //   input,  width = 239,                 .data
		.read_rp_channel        (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel),       //   input,    width = 5,                 .channel
		.read_rp_startofpacket  (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (ad9144_dma_m_src_axi_awid),                                   //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (ad9144_dma_m_src_axi_awaddr),                                 //   input,   width = 32,                 .awaddr
		.awlen                  (ad9144_dma_m_src_axi_awlen),                                  //   input,    width = 4,                 .awlen
		.awsize                 (ad9144_dma_m_src_axi_awsize),                                 //   input,    width = 3,                 .awsize
		.awburst                (ad9144_dma_m_src_axi_awburst),                                //   input,    width = 2,                 .awburst
		.awlock                 (ad9144_dma_m_src_axi_awlock),                                 //   input,    width = 2,                 .awlock
		.awcache                (ad9144_dma_m_src_axi_awcache),                                //   input,    width = 4,                 .awcache
		.awprot                 (ad9144_dma_m_src_axi_awprot),                                 //   input,    width = 3,                 .awprot
		.awvalid                (ad9144_dma_m_src_axi_awvalid),                                //   input,    width = 1,                 .awvalid
		.awready                (ad9144_dma_m_src_axi_awready),                                //  output,    width = 1,                 .awready
		.wid                    (ad9144_dma_m_src_axi_wid),                                    //   input,    width = 1,                 .wid
		.wdata                  (ad9144_dma_m_src_axi_wdata),                                  //   input,  width = 128,                 .wdata
		.wstrb                  (ad9144_dma_m_src_axi_wstrb),                                  //   input,   width = 16,                 .wstrb
		.wlast                  (ad9144_dma_m_src_axi_wlast),                                  //   input,    width = 1,                 .wlast
		.wvalid                 (ad9144_dma_m_src_axi_wvalid),                                 //   input,    width = 1,                 .wvalid
		.wready                 (ad9144_dma_m_src_axi_wready),                                 //  output,    width = 1,                 .wready
		.bid                    (ad9144_dma_m_src_axi_bid),                                    //  output,    width = 1,                 .bid
		.bresp                  (ad9144_dma_m_src_axi_bresp),                                  //  output,    width = 2,                 .bresp
		.bvalid                 (ad9144_dma_m_src_axi_bvalid),                                 //  output,    width = 1,                 .bvalid
		.bready                 (ad9144_dma_m_src_axi_bready),                                 //   input,    width = 1,                 .bready
		.arid                   (ad9144_dma_m_src_axi_arid),                                   //   input,    width = 1,                 .arid
		.araddr                 (ad9144_dma_m_src_axi_araddr),                                 //   input,   width = 32,                 .araddr
		.arlen                  (ad9144_dma_m_src_axi_arlen),                                  //   input,    width = 4,                 .arlen
		.arsize                 (ad9144_dma_m_src_axi_arsize),                                 //   input,    width = 3,                 .arsize
		.arburst                (ad9144_dma_m_src_axi_arburst),                                //   input,    width = 2,                 .arburst
		.arlock                 (ad9144_dma_m_src_axi_arlock),                                 //   input,    width = 2,                 .arlock
		.arcache                (ad9144_dma_m_src_axi_arcache),                                //   input,    width = 4,                 .arcache
		.arprot                 (ad9144_dma_m_src_axi_arprot),                                 //   input,    width = 3,                 .arprot
		.arvalid                (ad9144_dma_m_src_axi_arvalid),                                //   input,    width = 1,                 .arvalid
		.arready                (ad9144_dma_m_src_axi_arready),                                //  output,    width = 1,                 .arready
		.rid                    (ad9144_dma_m_src_axi_rid),                                    //  output,    width = 1,                 .rid
		.rdata                  (ad9144_dma_m_src_axi_rdata),                                  //  output,  width = 128,                 .rdata
		.rresp                  (ad9144_dma_m_src_axi_rresp),                                  //  output,    width = 2,                 .rresp
		.rlast                  (ad9144_dma_m_src_axi_rlast),                                  //  output,    width = 1,                 .rlast
		.rvalid                 (ad9144_dma_m_src_axi_rvalid),                                 //  output,    width = 1,                 .rvalid
		.rready                 (ad9144_dma_m_src_axi_rready),                                 //   input,    width = 1,                 .rready
		.awuser                 (1'b0),                                                        // (terminated),                                
		.aruser                 (1'b0),                                                        // (terminated),                                
		.awqos                  (4'b0000),                                                     // (terminated),                                
		.arqos                  (4'b0000),                                                     // (terminated),                                
		.awregion               (4'b0000),                                                     // (terminated),                                
		.arregion               (4'b0000),                                                     // (terminated),                                
		.wuser                  (1'b0),                                                        // (terminated),                                
		.ruser                  (),                                                            // (terminated),                                
		.buser                  ()                                                             // (terminated),                                
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (130),
		.PKT_DOMAIN_H              (129),
		.PKT_DOMAIN_L              (128),
		.PKT_SNOOP_H               (127),
		.PKT_SNOOP_L               (124),
		.PKT_BARRIER_H             (123),
		.PKT_BARRIER_L             (122),
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_QOS_H                 (104),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (116),
		.PKT_CACHE_L               (113),
		.PKT_THREAD_ID_H           (109),
		.PKT_THREAD_ID_L           (109),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (105),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) bridge_0_m0_agent (
		.clk                   (emif_c10_0_emif_usr_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset                 (bridge_0_m0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (bridge_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (bridge_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (bridge_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (bridge_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (bridge_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 10,          .burstcount
		.av_debugaccess        (bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (bridge_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (bridge_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (bridge_0_m0_agent_cp_data),                                      //  output,  width = 131,          .data
		.cp_startofpacket      (bridge_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (bridge_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (bridge_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (bridge_0_m0_rsp_width_adapter_src_valid),                        //   input,    width = 1,        rp.valid
		.rp_data               (bridge_0_m0_rsp_width_adapter_src_data),                         //   input,  width = 131,          .data
		.rp_channel            (bridge_0_m0_rsp_width_adapter_src_channel),                      //   input,    width = 5,          .channel
		.rp_startofpacket      (bridge_0_m0_rsp_width_adapter_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (bridge_0_m0_rsp_width_adapter_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.rp_ready              (bridge_0_m0_rsp_width_adapter_src_ready),                        //  output,    width = 1,          .ready
		.av_response           (),                                                               // (terminated),                         
		.av_writeresponsevalid ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (373),
		.PKT_ORI_BURST_SIZE_L      (371),
		.PKT_RESPONSE_STATUS_H     (370),
		.PKT_RESPONSE_STATUS_L     (369),
		.PKT_BURST_SIZE_H          (350),
		.PKT_BURST_SIZE_L          (348),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (355),
		.PKT_PROTECTION_H          (364),
		.PKT_PROTECTION_L          (362),
		.PKT_BURSTWRAP_H           (347),
		.PKT_BURSTWRAP_L           (339),
		.PKT_BYTE_CNT_H            (338),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (358),
		.PKT_SRC_ID_L              (357),
		.PKT_DEST_ID_H             (360),
		.PKT_DEST_ID_L             (359),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (383),
		.AVS_BURSTCOUNT_W          (12),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_c10_0_ctrl_amm_0_agent (
		.clk                     (emif_c10_0_emif_usr_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (bridge_0_m0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_c10_0_ctrl_amm_0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (emif_c10_0_ctrl_amm_0_agent_m0_burstcount),                 //  output,   width = 12,                .burstcount
		.m0_byteenable           (emif_c10_0_ctrl_amm_0_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (emif_c10_0_ctrl_amm_0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_c10_0_ctrl_amm_0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (emif_c10_0_ctrl_amm_0_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (emif_c10_0_ctrl_amm_0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_c10_0_ctrl_amm_0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (emif_c10_0_ctrl_amm_0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_c10_0_ctrl_amm_0_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (emif_c10_0_ctrl_amm_0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (emif_c10_0_ctrl_amm_0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_c10_0_ctrl_amm_0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (emif_c10_0_ctrl_amm_0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (emif_c10_0_ctrl_amm_0_agent_rp_data),                       //  output,  width = 383,                .data
		.rp_startofpacket        (emif_c10_0_ctrl_amm_0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_c10_0_ctrl_amm_0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (emif_c10_0_ctrl_amm_0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (emif_c10_0_ctrl_amm_0_burst_adapter_source0_data),          //   input,  width = 383,                .data
		.cp_startofpacket        (emif_c10_0_ctrl_amm_0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_c10_0_ctrl_amm_0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_c10_0_ctrl_amm_0_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_data),             //   input,  width = 384,                .data
		.rf_source_ready         (emif_c10_0_ctrl_amm_0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_c10_0_ctrl_amm_0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_c10_0_ctrl_amm_0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_c10_0_ctrl_amm_0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_c10_0_ctrl_amm_0_agent_rf_source_data),                //  output,  width = 384,                .data
		.rdata_fifo_sink_ready   (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_data),           //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                     // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                      // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                       // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (384),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) emif_c10_0_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_c10_0_emif_usr_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset             (bridge_0_m0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (emif_c10_0_ctrl_amm_0_agent_rf_source_data),             //   input,  width = 384,        in.data
		.in_valid          (emif_c10_0_ctrl_amm_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (emif_c10_0_ctrl_amm_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (emif_c10_0_ctrl_amm_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_c10_0_ctrl_amm_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_data),          //  output,  width = 384,       out.data
		.out_valid         (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_c10_0_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2048),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) emif_c10_0_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_c10_0_emif_usr_clk_clk),                      //   input,    width = 1,       clk.clk
		.reset             (bridge_0_m0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_data),  //   input,  width = 258,        in.data
		.in_valid          (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_valid), //   input,    width = 1,          .valid
		.in_ready          (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_src_ready), //  output,    width = 1,          .ready
		.out_data          (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_data),  //  output,  width = 258,       out.data
		.out_valid         (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_valid), //  output,    width = 1,          .valid
		.out_ready         (emif_c10_0_ctrl_amm_0_agent_rdata_fifo_out_ready), //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                            // (terminated),                         
		.csr_read          (1'b0),                                             // (terminated),                         
		.csr_write         (1'b0),                                             // (terminated),                         
		.csr_readdata      (),                                                 // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated),                         
		.almost_full_data  (),                                                 // (terminated),                         
		.almost_empty_data (),                                                 // (terminated),                         
		.in_startofpacket  (1'b0),                                             // (terminated),                         
		.in_endofpacket    (1'b0),                                             // (terminated),                         
		.out_startofpacket (),                                                 // (terminated),                         
		.out_endofpacket   (),                                                 // (terminated),                         
		.in_empty          (1'b0),                                             // (terminated),                         
		.out_empty         (),                                                 // (terminated),                         
		.in_error          (1'b0),                                             // (terminated),                         
		.out_error         (),                                                 // (terminated),                         
		.in_channel        (1'b0),                                             // (terminated),                         
		.out_channel       ()                                                  // (terminated),                         
	);

	mcu_subsystem_altera_merlin_router_181_zdcveqy router (
		.sink_ready         (ad9680_dma_m_dest_axi_agent_write_cp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_m_dest_axi_agent_write_cp_valid),              //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_m_dest_axi_agent_write_cp_data),               //   input,  width = 239,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_agent_write_cp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_agent_write_cp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                         //  output,  width = 239,          .data
		.src_channel        (router_src_channel),                                      //  output,    width = 5,          .channel
		.src_startofpacket  (router_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_zdcveqy router_001 (
		.sink_ready         (ad9680_dma_m_dest_axi_agent_read_cp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_m_dest_axi_agent_read_cp_valid),               //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_m_dest_axi_agent_read_cp_data),                //   input,  width = 239,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_agent_read_cp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_agent_read_cp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                     //  output,  width = 239,          .data
		.src_channel        (router_001_src_channel),                                  //  output,    width = 5,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_zdcveqy router_002 (
		.sink_ready         (ad9144_dma_m_src_axi_agent_write_cp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_m_src_axi_agent_write_cp_valid),               //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_m_src_axi_agent_write_cp_data),                //   input,  width = 239,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_agent_write_cp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_agent_write_cp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                     //  output,  width = 239,          .data
		.src_channel        (router_002_src_channel),                                  //  output,    width = 5,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_zdcveqy router_003 (
		.sink_ready         (ad9144_dma_m_src_axi_agent_read_cp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_m_src_axi_agent_read_cp_valid),                //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_m_src_axi_agent_read_cp_data),                 //   input,  width = 239,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_agent_read_cp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_agent_read_cp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                     //  output,  width = 239,          .data
		.src_channel        (router_003_src_channel),                                  //  output,    width = 5,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4ysa7ei router_004 (
		.sink_ready         (bridge_0_m0_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_0_m0_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (bridge_0_m0_agent_cp_data),                     //   input,  width = 131,          .data
		.sink_startofpacket (bridge_0_m0_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_0_m0_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,       clk.clk
		.reset              (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                           //  output,  width = 131,          .data
		.src_channel        (router_004_src_channel),                        //  output,    width = 5,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_vqbjw3i router_005 (
		.sink_ready         (emif_c10_0_ctrl_amm_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (emif_c10_0_ctrl_amm_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (emif_c10_0_ctrl_amm_0_agent_rp_data),           //   input,  width = 383,          .data
		.sink_startofpacket (emif_c10_0_ctrl_amm_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_c10_0_ctrl_amm_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,       clk.clk
		.reset              (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                           //  output,  width = 383,          .data
		.src_channel        (router_005_src_channel),                        //  output,    width = 5,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_burst_adapter_181_h2pzzaa #(
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (355),
		.PKT_BYTE_CNT_H            (338),
		.PKT_BYTE_CNT_L            (326),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (350),
		.PKT_BURST_SIZE_L          (348),
		.PKT_BURST_TYPE_H          (352),
		.PKT_BURST_TYPE_L          (351),
		.PKT_BURSTWRAP_H           (347),
		.PKT_BURSTWRAP_L           (339),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (383),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (337),
		.OUT_BURSTWRAP_H           (347),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) emif_c10_0_ctrl_amm_0_burst_adapter (
		.clk                   (emif_c10_0_emif_usr_clk_clk),                               //   input,    width = 1,       cr0.clk
		.reset                 (bridge_0_m0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                         //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                          //   input,  width = 383,          .data
		.sink0_channel         (cmd_mux_src_channel),                                       //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                         //  output,    width = 1,          .ready
		.source0_valid         (emif_c10_0_ctrl_amm_0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (emif_c10_0_ctrl_amm_0_burst_adapter_source0_data),          //  output,  width = 383,          .data
		.source0_channel       (emif_c10_0_ctrl_amm_0_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (emif_c10_0_ctrl_amm_0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (emif_c10_0_ctrl_amm_0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (emif_c10_0_ctrl_amm_0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ob3nmpq cmd_demux (
		.clk                (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.sink_data          (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data),          //   input,  width = 383,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                          //  output,  width = 383,          .data
		.src0_channel       (cmd_demux_src0_channel),                                       //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ob3nmpq cmd_demux_001 (
		.clk                (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.sink_data          (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data),          //   input,  width = 383,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                      //  output,  width = 383,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                   //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ob3nmpq cmd_demux_002 (
		.clk                (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.sink_data          (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data),          //   input,  width = 383,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                                     //  output,  width = 383,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                  //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ob3nmpq cmd_demux_003 (
		.clk                (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.sink_data          (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data),          //   input,  width = 383,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                                     //  output,  width = 383,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                  //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ob3nmpq cmd_demux_004 (
		.clk                (emif_c10_0_emif_usr_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset              (bridge_0_m0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.sink_ready         (bridge_0_m0_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (bridge_0_m0_cmd_width_adapter_src_channel),       //   input,    width = 5,          .channel
		.sink_data          (bridge_0_m0_cmd_width_adapter_src_data),          //   input,  width = 383,          .data
		.sink_startofpacket (bridge_0_m0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_0_m0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (bridge_0_m0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_004_src0_data),                         //  output,  width = 383,          .data
		.src0_channel       (cmd_demux_004_src0_channel),                      //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_63gmzdi cmd_mux (
		.clk                 (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,       clk.clk
		.reset               (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                              //  output,  width = 383,          .data
		.src_channel         (cmd_mux_src_channel),                           //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                           //   input,    width = 5,          .channel
		.sink0_data          (crosser_out_data),                              //   input,  width = 383,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                         //   input,    width = 1,          .valid
		.sink1_channel       (crosser_001_out_channel),                       //   input,    width = 5,          .channel
		.sink1_data          (crosser_001_out_data),                          //   input,  width = 383,          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                         //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                         //   input,    width = 1,          .valid
		.sink2_channel       (crosser_002_out_channel),                       //   input,    width = 5,          .channel
		.sink2_data          (crosser_002_out_data),                          //   input,  width = 383,          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink3_ready         (crosser_003_out_ready),                         //  output,    width = 1,     sink3.ready
		.sink3_valid         (crosser_003_out_valid),                         //   input,    width = 1,          .valid
		.sink3_channel       (crosser_003_out_channel),                       //   input,    width = 5,          .channel
		.sink3_data          (crosser_003_out_data),                          //   input,  width = 383,          .data
		.sink3_startofpacket (crosser_003_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (crosser_003_out_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                      //  output,    width = 1,     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                      //   input,    width = 1,          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                    //   input,    width = 5,          .channel
		.sink4_data          (cmd_demux_004_src0_data),                       //   input,  width = 383,          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_7js57by rsp_demux (
		.clk                (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,       clk.clk
		.reset              (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                        //   input,    width = 5,          .channel
		.sink_data          (router_005_src_data),                           //   input,  width = 383,          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                           //  output,  width = 383,          .data
		.src0_channel       (rsp_demux_src0_channel),                        //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                           //  output,  width = 383,          .data
		.src1_channel       (rsp_demux_src1_channel),                        //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                          //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                          //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_src2_data),                           //  output,  width = 383,          .data
		.src2_channel       (rsp_demux_src2_channel),                        //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                          //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                          //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_src3_data),                           //  output,  width = 383,          .data
		.src3_channel       (rsp_demux_src3_channel),                        //  output,    width = 5,          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                          //   input,    width = 1,      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                          //  output,    width = 1,          .valid
		.src4_data          (rsp_demux_src4_data),                           //  output,  width = 383,          .data
		.src4_channel       (rsp_demux_src4_channel),                        //  output,    width = 5,          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_a5jdj5q rsp_mux (
		.clk                 (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                        //  output,  width = 383,          .data
		.src_channel         (rsp_mux_src_channel),                                     //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_004_out_channel),                                 //   input,    width = 5,          .channel
		.sink0_data          (crosser_004_out_data),                                    //   input,  width = 383,          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_a5jdj5q rsp_mux_001 (
		.clk                 (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                    //  output,  width = 383,          .data
		.src_channel         (rsp_mux_001_src_channel),                                 //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_005_out_channel),                                 //   input,    width = 5,          .channel
		.sink0_data          (crosser_005_out_data),                                    //   input,  width = 383,          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_a5jdj5q rsp_mux_002 (
		.clk                 (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                    //  output,  width = 383,          .data
		.src_channel         (rsp_mux_002_src_channel),                                 //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_006_out_channel),                                 //   input,    width = 5,          .channel
		.sink0_data          (crosser_006_out_data),                                    //   input,  width = 383,          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_a5jdj5q rsp_mux_003 (
		.clk                 (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                   //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                                    //  output,  width = 383,          .data
		.src_channel         (rsp_mux_003_src_channel),                                 //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_007_out_channel),                                 //   input,    width = 5,          .channel
		.sink0_data          (crosser_007_out_data),                                    //   input,  width = 383,          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_a5jdj5q rsp_mux_004 (
		.clk                 (emif_c10_0_emif_usr_clk_clk),                   //   input,    width = 1,       clk.clk
		.reset               (bridge_0_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_004_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (rsp_mux_004_src_data),                          //  output,  width = 383,          .data
		.src_channel         (rsp_mux_004_src_channel),                       //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src4_channel),                        //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_src4_data),                           //   input,  width = 383,          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_width_adapter_181_u3sjqoa #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (370),
		.IN_PKT_RESPONSE_STATUS_L      (369),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (371),
		.IN_PKT_ORI_BURST_SIZE_H       (373),
		.IN_ST_DATA_W                  (383),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (226),
		.OUT_PKT_RESPONSE_STATUS_L     (225),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (227),
		.OUT_PKT_ORI_BURST_SIZE_H      (229),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_wr_rsp_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_src_channel),                                          //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                            //  output,    width = 1,          .ready
		.in_data              (rsp_mux_src_data),                                             //   input,  width = 383,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data),          //  output,  width = 239,          .data
		.out_channel          (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_u3sjqoa #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (370),
		.IN_PKT_RESPONSE_STATUS_L      (369),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (371),
		.IN_PKT_ORI_BURST_SIZE_H       (373),
		.IN_ST_DATA_W                  (383),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (226),
		.OUT_PKT_RESPONSE_STATUS_L     (225),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (227),
		.OUT_PKT_ORI_BURST_SIZE_H      (229),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_rd_rsp_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                      //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (rsp_mux_001_src_data),                                         //   input,  width = 383,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data),          //  output,  width = 239,          .data
		.out_channel          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_u3sjqoa #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (370),
		.IN_PKT_RESPONSE_STATUS_L      (369),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (371),
		.IN_PKT_ORI_BURST_SIZE_H       (373),
		.IN_ST_DATA_W                  (383),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (226),
		.OUT_PKT_RESPONSE_STATUS_L     (225),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (227),
		.OUT_PKT_ORI_BURST_SIZE_H      (229),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_wr_rsp_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                     //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (rsp_mux_002_src_data),                                        //   input,  width = 383,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data),          //  output,  width = 239,          .data
		.out_channel          (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_u3sjqoa #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (370),
		.IN_PKT_RESPONSE_STATUS_L      (369),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (371),
		.IN_PKT_ORI_BURST_SIZE_H       (373),
		.IN_ST_DATA_W                  (383),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (226),
		.OUT_PKT_RESPONSE_STATUS_L     (225),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (227),
		.OUT_PKT_ORI_BURST_SIZE_H      (229),
		.OUT_ST_DATA_W                 (239),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_rd_rsp_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_003_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_003_src_channel),                                     //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_003_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_003_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_003_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (rsp_mux_003_src_data),                                        //   input,  width = 383,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data),          //  output,  width = 239,          .data
		.out_channel          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_i4mdiuy #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (338),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (339),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (370),
		.IN_PKT_RESPONSE_STATUS_L      (369),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (371),
		.IN_PKT_ORI_BURST_SIZE_H       (373),
		.IN_ST_DATA_W                  (383),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (118),
		.OUT_PKT_RESPONSE_STATUS_L     (117),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (119),
		.OUT_PKT_ORI_BURST_SIZE_H      (121),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) bridge_0_m0_rsp_width_adapter (
		.clk                  (emif_c10_0_emif_usr_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset                (bridge_0_m0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_004_src_valid),                           //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_004_src_channel),                         //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_004_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_004_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_004_src_ready),                           //  output,    width = 1,          .ready
		.in_data              (rsp_mux_004_src_data),                            //   input,  width = 383,          .data
		.out_endofpacket      (bridge_0_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (bridge_0_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (bridge_0_m0_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (bridge_0_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (bridge_0_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (bridge_0_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_crghnli #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (226),
		.IN_PKT_RESPONSE_STATUS_L      (225),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (227),
		.IN_PKT_ORI_BURST_SIZE_H       (229),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (370),
		.OUT_PKT_RESPONSE_STATUS_L     (369),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (371),
		.OUT_PKT_ORI_BURST_SIZE_H      (373),
		.OUT_ST_DATA_W                 (383),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_wr_cmd_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (router_src_valid),                                             //   input,    width = 1,      sink.valid
		.in_channel           (router_src_channel),                                           //   input,    width = 5,          .channel
		.in_startofpacket     (router_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.in_ready             (router_src_ready),                                             //  output,    width = 1,          .ready
		.in_data              (router_src_data),                                              //   input,  width = 239,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data),          //  output,  width = 383,          .data
		.out_channel          (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_crghnli #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (226),
		.IN_PKT_RESPONSE_STATUS_L      (225),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (227),
		.IN_PKT_ORI_BURST_SIZE_H       (229),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (370),
		.OUT_PKT_RESPONSE_STATUS_L     (369),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (371),
		.OUT_PKT_ORI_BURST_SIZE_H      (373),
		.OUT_ST_DATA_W                 (383),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_rd_cmd_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                       //   input,    width = 5,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                          //   input,  width = 239,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data),          //  output,  width = 383,          .data
		.out_channel          (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_crghnli #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (226),
		.IN_PKT_RESPONSE_STATUS_L      (225),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (227),
		.IN_PKT_ORI_BURST_SIZE_H       (229),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (370),
		.OUT_PKT_RESPONSE_STATUS_L     (369),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (371),
		.OUT_PKT_ORI_BURST_SIZE_H      (373),
		.OUT_ST_DATA_W                 (383),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_wr_cmd_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                      //   input,    width = 5,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                         //   input,  width = 239,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data),          //  output,  width = 383,          .data
		.out_channel          (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_crghnli #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (226),
		.IN_PKT_RESPONSE_STATUS_L      (225),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (227),
		.IN_PKT_ORI_BURST_SIZE_H       (229),
		.IN_ST_DATA_W                  (239),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (370),
		.OUT_PKT_RESPONSE_STATUS_L     (369),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (371),
		.OUT_PKT_ORI_BURST_SIZE_H      (373),
		.OUT_ST_DATA_W                 (383),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_rd_cmd_width_adapter (
		.clk                  (refclk_emif_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                      //   input,    width = 5,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                         //   input,  width = 239,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data),          //  output,  width = 383,          .data
		.out_channel          (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_6y3zrmi #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (118),
		.IN_PKT_RESPONSE_STATUS_L      (117),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (119),
		.IN_PKT_ORI_BURST_SIZE_H       (121),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (338),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (370),
		.OUT_PKT_RESPONSE_STATUS_L     (369),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (371),
		.OUT_PKT_ORI_BURST_SIZE_H      (373),
		.OUT_ST_DATA_W                 (383),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) bridge_0_m0_cmd_width_adapter (
		.clk                  (emif_c10_0_emif_usr_clk_clk),                     //   input,    width = 1,       clk.clk
		.reset                (bridge_0_m0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_valid             (router_004_src_valid),                            //   input,    width = 1,      sink.valid
		.in_channel           (router_004_src_channel),                          //   input,    width = 5,          .channel
		.in_startofpacket     (router_004_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_ready             (router_004_src_ready),                            //  output,    width = 1,          .ready
		.in_data              (router_004_src_data),                             //   input,  width = 131,          .data
		.out_endofpacket      (bridge_0_m0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (bridge_0_m0_cmd_width_adapter_src_data),          //  output,  width = 383,          .data
		.out_channel          (bridge_0_m0_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (bridge_0_m0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (bridge_0_m0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (bridge_0_m0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated),                         
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (refclk_emif_out_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                    //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                    //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                              //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                  //   input,    width = 5,              .channel
		.in_data           (cmd_demux_src0_data),                                     //   input,  width = 383,              .data
		.out_ready         (crosser_out_ready),                                       //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                       //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                               //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                 //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                     //  output,    width = 5,              .channel
		.out_data          (crosser_out_data),                                        //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (refclk_emif_out_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                          //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                              //   input,    width = 5,              .channel
		.in_data           (cmd_demux_001_src0_data),                                 //   input,  width = 383,              .data
		.out_ready         (crosser_001_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_001_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (refclk_emif_out_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                          //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                              //   input,    width = 5,              .channel
		.in_data           (cmd_demux_002_src0_data),                                 //   input,  width = 383,              .data
		.out_ready         (crosser_002_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_002_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (refclk_emif_out_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                          //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                              //   input,    width = 5,              .channel
		.in_data           (cmd_demux_003_src0_data),                                 //   input,  width = 383,              .data
		.out_ready         (crosser_003_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_003_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_004 (
		.in_clk            (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                    //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                    //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                              //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                  //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src0_data),                                     //   input,  width = 383,              .data
		.out_ready         (crosser_004_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_004_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_005 (
		.in_clk            (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                    //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src1_valid),                                    //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                              //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                  //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src1_data),                                     //   input,  width = 383,              .data
		.out_ready         (crosser_005_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_005_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_006 (
		.in_clk            (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                    //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src2_valid),                                    //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                              //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                  //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src2_data),                                     //   input,  width = 383,              .data
		.out_ready         (crosser_006_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_006_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_006_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_006_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_5mlowwi #(
		.DATA_WIDTH          (383),
		.BITS_PER_SYMBOL     (383),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_007 (
		.in_clk            (emif_c10_0_emif_usr_clk_clk),                             //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_0_m0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (refclk_emif_out_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src3_ready),                                    //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src3_valid),                                    //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src3_startofpacket),                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src3_endofpacket),                              //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src3_channel),                                  //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src3_data),                                     //   input,  width = 383,              .data
		.out_ready         (crosser_007_out_ready),                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_007_out_valid),                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_007_out_channel),                                 //  output,    width = 5,              .channel
		.out_data          (crosser_007_out_data),                                    //  output,  width = 383,              .data
		.in_empty          (1'b0),                                                    // (terminated),                             
		.in_error          (1'b0),                                                    // (terminated),                             
		.out_empty         (),                                                        // (terminated),                             
		.out_error         ()                                                         // (terminated),                             
	);

endmodule
