// mcu_subsystem_altera_mm_interconnect_181_j2xn3na.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem_altera_mm_interconnect_181_j2xn3na (
		input  wire [26:0] bridge_3_m0_address,                                  //                                    bridge_3_m0.address
		output wire        bridge_3_m0_waitrequest,                              //                                               .waitrequest
		input  wire [0:0]  bridge_3_m0_burstcount,                               //                                               .burstcount
		input  wire [3:0]  bridge_3_m0_byteenable,                               //                                               .byteenable
		input  wire        bridge_3_m0_read,                                     //                                               .read
		output wire [31:0] bridge_3_m0_readdata,                                 //                                               .readdata
		output wire        bridge_3_m0_readdatavalid,                            //                                               .readdatavalid
		input  wire        bridge_3_m0_write,                                    //                                               .write
		input  wire [31:0] bridge_3_m0_writedata,                                //                                               .writedata
		input  wire        bridge_3_m0_debugaccess,                              //                                               .debugaccess
		output wire [24:0] qspi_controller2_0_avl_mem_address,                   //                     qspi_controller2_0_avl_mem.address
		output wire        qspi_controller2_0_avl_mem_write,                     //                                               .write
		output wire        qspi_controller2_0_avl_mem_read,                      //                                               .read
		input  wire [31:0] qspi_controller2_0_avl_mem_readdata,                  //                                               .readdata
		output wire [31:0] qspi_controller2_0_avl_mem_writedata,                 //                                               .writedata
		output wire [6:0]  qspi_controller2_0_avl_mem_burstcount,                //                                               .burstcount
		output wire [3:0]  qspi_controller2_0_avl_mem_byteenable,                //                                               .byteenable
		input  wire        qspi_controller2_0_avl_mem_readdatavalid,             //                                               .readdatavalid
		input  wire        qspi_controller2_0_avl_mem_waitrequest,               //                                               .waitrequest
		input  wire        bridge_3_m0_reset_reset_bridge_in_reset_reset,        //        bridge_3_m0_reset_reset_bridge_in_reset.reset
		input  wire        qspi_controller2_0_reset_reset_bridge_in_reset_reset, // qspi_controller2_0_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk,                                 //                               clock_in_out_clk.clk
		input  wire        iopll_0_outclk0_clk                                   //                                iopll_0_outclk0.clk
	);

	wire          bridge_3_m0_translator_avalon_universal_master_0_waitrequest;   // bridge_3_m0_agent:av_waitrequest -> bridge_3_m0_translator:uav_waitrequest
	wire   [31:0] bridge_3_m0_translator_avalon_universal_master_0_readdata;      // bridge_3_m0_agent:av_readdata -> bridge_3_m0_translator:uav_readdata
	wire          bridge_3_m0_translator_avalon_universal_master_0_debugaccess;   // bridge_3_m0_translator:uav_debugaccess -> bridge_3_m0_agent:av_debugaccess
	wire   [26:0] bridge_3_m0_translator_avalon_universal_master_0_address;       // bridge_3_m0_translator:uav_address -> bridge_3_m0_agent:av_address
	wire          bridge_3_m0_translator_avalon_universal_master_0_read;          // bridge_3_m0_translator:uav_read -> bridge_3_m0_agent:av_read
	wire    [3:0] bridge_3_m0_translator_avalon_universal_master_0_byteenable;    // bridge_3_m0_translator:uav_byteenable -> bridge_3_m0_agent:av_byteenable
	wire          bridge_3_m0_translator_avalon_universal_master_0_readdatavalid; // bridge_3_m0_agent:av_readdatavalid -> bridge_3_m0_translator:uav_readdatavalid
	wire          bridge_3_m0_translator_avalon_universal_master_0_lock;          // bridge_3_m0_translator:uav_lock -> bridge_3_m0_agent:av_lock
	wire          bridge_3_m0_translator_avalon_universal_master_0_write;         // bridge_3_m0_translator:uav_write -> bridge_3_m0_agent:av_write
	wire   [31:0] bridge_3_m0_translator_avalon_universal_master_0_writedata;     // bridge_3_m0_translator:uav_writedata -> bridge_3_m0_agent:av_writedata
	wire    [2:0] bridge_3_m0_translator_avalon_universal_master_0_burstcount;    // bridge_3_m0_translator:uav_burstcount -> bridge_3_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> bridge_3_m0_agent:rp_valid
	wire  [119:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> bridge_3_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                              // bridge_3_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> bridge_3_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> bridge_3_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> bridge_3_m0_agent:rp_endofpacket
	wire   [31:0] qspi_controller2_0_avl_mem_agent_m0_readdata;                   // qspi_controller2_0_avl_mem_translator:uav_readdata -> qspi_controller2_0_avl_mem_agent:m0_readdata
	wire          qspi_controller2_0_avl_mem_agent_m0_waitrequest;                // qspi_controller2_0_avl_mem_translator:uav_waitrequest -> qspi_controller2_0_avl_mem_agent:m0_waitrequest
	wire          qspi_controller2_0_avl_mem_agent_m0_debugaccess;                // qspi_controller2_0_avl_mem_agent:m0_debugaccess -> qspi_controller2_0_avl_mem_translator:uav_debugaccess
	wire   [26:0] qspi_controller2_0_avl_mem_agent_m0_address;                    // qspi_controller2_0_avl_mem_agent:m0_address -> qspi_controller2_0_avl_mem_translator:uav_address
	wire    [3:0] qspi_controller2_0_avl_mem_agent_m0_byteenable;                 // qspi_controller2_0_avl_mem_agent:m0_byteenable -> qspi_controller2_0_avl_mem_translator:uav_byteenable
	wire          qspi_controller2_0_avl_mem_agent_m0_read;                       // qspi_controller2_0_avl_mem_agent:m0_read -> qspi_controller2_0_avl_mem_translator:uav_read
	wire          qspi_controller2_0_avl_mem_agent_m0_readdatavalid;              // qspi_controller2_0_avl_mem_translator:uav_readdatavalid -> qspi_controller2_0_avl_mem_agent:m0_readdatavalid
	wire          qspi_controller2_0_avl_mem_agent_m0_lock;                       // qspi_controller2_0_avl_mem_agent:m0_lock -> qspi_controller2_0_avl_mem_translator:uav_lock
	wire   [31:0] qspi_controller2_0_avl_mem_agent_m0_writedata;                  // qspi_controller2_0_avl_mem_agent:m0_writedata -> qspi_controller2_0_avl_mem_translator:uav_writedata
	wire          qspi_controller2_0_avl_mem_agent_m0_write;                      // qspi_controller2_0_avl_mem_agent:m0_write -> qspi_controller2_0_avl_mem_translator:uav_write
	wire    [8:0] qspi_controller2_0_avl_mem_agent_m0_burstcount;                 // qspi_controller2_0_avl_mem_agent:m0_burstcount -> qspi_controller2_0_avl_mem_translator:uav_burstcount
	wire          qspi_controller2_0_avl_mem_agent_rf_source_valid;               // qspi_controller2_0_avl_mem_agent:rf_source_valid -> qspi_controller2_0_avl_mem_agent_rsp_fifo:in_valid
	wire  [120:0] qspi_controller2_0_avl_mem_agent_rf_source_data;                // qspi_controller2_0_avl_mem_agent:rf_source_data -> qspi_controller2_0_avl_mem_agent_rsp_fifo:in_data
	wire          qspi_controller2_0_avl_mem_agent_rf_source_ready;               // qspi_controller2_0_avl_mem_agent_rsp_fifo:in_ready -> qspi_controller2_0_avl_mem_agent:rf_source_ready
	wire          qspi_controller2_0_avl_mem_agent_rf_source_startofpacket;       // qspi_controller2_0_avl_mem_agent:rf_source_startofpacket -> qspi_controller2_0_avl_mem_agent_rsp_fifo:in_startofpacket
	wire          qspi_controller2_0_avl_mem_agent_rf_source_endofpacket;         // qspi_controller2_0_avl_mem_agent:rf_source_endofpacket -> qspi_controller2_0_avl_mem_agent_rsp_fifo:in_endofpacket
	wire          qspi_controller2_0_avl_mem_agent_rsp_fifo_out_valid;            // qspi_controller2_0_avl_mem_agent_rsp_fifo:out_valid -> qspi_controller2_0_avl_mem_agent:rf_sink_valid
	wire  [120:0] qspi_controller2_0_avl_mem_agent_rsp_fifo_out_data;             // qspi_controller2_0_avl_mem_agent_rsp_fifo:out_data -> qspi_controller2_0_avl_mem_agent:rf_sink_data
	wire          qspi_controller2_0_avl_mem_agent_rsp_fifo_out_ready;            // qspi_controller2_0_avl_mem_agent:rf_sink_ready -> qspi_controller2_0_avl_mem_agent_rsp_fifo:out_ready
	wire          qspi_controller2_0_avl_mem_agent_rsp_fifo_out_startofpacket;    // qspi_controller2_0_avl_mem_agent_rsp_fifo:out_startofpacket -> qspi_controller2_0_avl_mem_agent:rf_sink_startofpacket
	wire          qspi_controller2_0_avl_mem_agent_rsp_fifo_out_endofpacket;      // qspi_controller2_0_avl_mem_agent_rsp_fifo:out_endofpacket -> qspi_controller2_0_avl_mem_agent:rf_sink_endofpacket
	wire          qspi_controller2_0_avl_mem_agent_rdata_fifo_src_valid;          // qspi_controller2_0_avl_mem_agent:rdata_fifo_src_valid -> qspi_controller2_0_avl_mem_agent_rdata_fifo:in_valid
	wire   [33:0] qspi_controller2_0_avl_mem_agent_rdata_fifo_src_data;           // qspi_controller2_0_avl_mem_agent:rdata_fifo_src_data -> qspi_controller2_0_avl_mem_agent_rdata_fifo:in_data
	wire          qspi_controller2_0_avl_mem_agent_rdata_fifo_src_ready;          // qspi_controller2_0_avl_mem_agent_rdata_fifo:in_ready -> qspi_controller2_0_avl_mem_agent:rdata_fifo_src_ready
	wire          qspi_controller2_0_avl_mem_agent_rdata_fifo_out_valid;          // qspi_controller2_0_avl_mem_agent_rdata_fifo:out_valid -> qspi_controller2_0_avl_mem_agent:rdata_fifo_sink_valid
	wire   [33:0] qspi_controller2_0_avl_mem_agent_rdata_fifo_out_data;           // qspi_controller2_0_avl_mem_agent_rdata_fifo:out_data -> qspi_controller2_0_avl_mem_agent:rdata_fifo_sink_data
	wire          qspi_controller2_0_avl_mem_agent_rdata_fifo_out_ready;          // qspi_controller2_0_avl_mem_agent:rdata_fifo_sink_ready -> qspi_controller2_0_avl_mem_agent_rdata_fifo:out_ready
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> qspi_controller2_0_avl_mem_agent:cp_valid
	wire  [119:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> qspi_controller2_0_avl_mem_agent:cp_data
	wire          cmd_mux_src_ready;                                              // qspi_controller2_0_avl_mem_agent:cp_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> qspi_controller2_0_avl_mem_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> qspi_controller2_0_avl_mem_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> qspi_controller2_0_avl_mem_agent:cp_endofpacket
	wire          bridge_3_m0_agent_cp_valid;                                     // bridge_3_m0_agent:cp_valid -> router:sink_valid
	wire  [119:0] bridge_3_m0_agent_cp_data;                                      // bridge_3_m0_agent:cp_data -> router:sink_data
	wire          bridge_3_m0_agent_cp_ready;                                     // router:sink_ready -> bridge_3_m0_agent:cp_ready
	wire          bridge_3_m0_agent_cp_startofpacket;                             // bridge_3_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          bridge_3_m0_agent_cp_endofpacket;                               // bridge_3_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [119:0] router_src_data;                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                               // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          qspi_controller2_0_avl_mem_agent_rp_valid;                      // qspi_controller2_0_avl_mem_agent:rp_valid -> router_001:sink_valid
	wire  [119:0] qspi_controller2_0_avl_mem_agent_rp_data;                       // qspi_controller2_0_avl_mem_agent:rp_data -> router_001:sink_data
	wire          qspi_controller2_0_avl_mem_agent_rp_ready;                      // router_001:sink_ready -> qspi_controller2_0_avl_mem_agent:rp_ready
	wire          qspi_controller2_0_avl_mem_agent_rp_startofpacket;              // qspi_controller2_0_avl_mem_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          qspi_controller2_0_avl_mem_agent_rp_endofpacket;                // qspi_controller2_0_avl_mem_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_001_src_data;                                            // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                           // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                         // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> crosser:in_valid
	wire  [119:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                           // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                              // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [119:0] crosser_out_data;                                               // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                              // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                            // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                      // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                        // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [119:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                           // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                          // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [119:0] crosser_001_out_data;                                           // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                          // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                        // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                  // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                    // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (27),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) bridge_3_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                           //   input,   width = 1,                       clk.clk
		.reset                  (bridge_3_m0_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                     reset.reset
		.uav_address            (bridge_3_m0_translator_avalon_universal_master_0_address),       //  output,  width = 27, avalon_universal_master_0.address
		.uav_burstcount         (bridge_3_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (bridge_3_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (bridge_3_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (bridge_3_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (bridge_3_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (bridge_3_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (bridge_3_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (bridge_3_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (bridge_3_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (bridge_3_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (bridge_3_m0_address),                                            //   input,  width = 27,      avalon_anti_master_0.address
		.av_waitrequest         (bridge_3_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (bridge_3_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (bridge_3_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (bridge_3_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (bridge_3_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (bridge_3_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (bridge_3_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (bridge_3_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (bridge_3_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (27),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) qspi_controller2_0_avl_mem_translator (
		.clk                    (iopll_0_outclk0_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (qspi_controller2_0_avl_mem_agent_m0_address),          //   input,  width = 27, avalon_universal_slave_0.address
		.uav_burstcount         (qspi_controller2_0_avl_mem_agent_m0_burstcount),       //   input,   width = 9,                         .burstcount
		.uav_read               (qspi_controller2_0_avl_mem_agent_m0_read),             //   input,   width = 1,                         .read
		.uav_write              (qspi_controller2_0_avl_mem_agent_m0_write),            //   input,   width = 1,                         .write
		.uav_waitrequest        (qspi_controller2_0_avl_mem_agent_m0_waitrequest),      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (qspi_controller2_0_avl_mem_agent_m0_readdatavalid),    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (qspi_controller2_0_avl_mem_agent_m0_byteenable),       //   input,   width = 4,                         .byteenable
		.uav_readdata           (qspi_controller2_0_avl_mem_agent_m0_readdata),         //  output,  width = 32,                         .readdata
		.uav_writedata          (qspi_controller2_0_avl_mem_agent_m0_writedata),        //   input,  width = 32,                         .writedata
		.uav_lock               (qspi_controller2_0_avl_mem_agent_m0_lock),             //   input,   width = 1,                         .lock
		.uav_debugaccess        (qspi_controller2_0_avl_mem_agent_m0_debugaccess),      //   input,   width = 1,                         .debugaccess
		.av_address             (qspi_controller2_0_avl_mem_address),                   //  output,  width = 25,      avalon_anti_slave_0.address
		.av_write               (qspi_controller2_0_avl_mem_write),                     //  output,   width = 1,                         .write
		.av_read                (qspi_controller2_0_avl_mem_read),                      //  output,   width = 1,                         .read
		.av_readdata            (qspi_controller2_0_avl_mem_readdata),                  //   input,  width = 32,                         .readdata
		.av_writedata           (qspi_controller2_0_avl_mem_writedata),                 //  output,  width = 32,                         .writedata
		.av_burstcount          (qspi_controller2_0_avl_mem_burstcount),                //  output,   width = 7,                         .burstcount
		.av_byteenable          (qspi_controller2_0_avl_mem_byteenable),                //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (qspi_controller2_0_avl_mem_readdatavalid),             //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (qspi_controller2_0_avl_mem_waitrequest),               //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                     // (terminated),                                       
		.av_beginbursttransfer  (),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                     // (terminated),                                       
		.av_lock                (),                                                     // (terminated),                                       
		.av_chipselect          (),                                                     // (terminated),                                       
		.av_clken               (),                                                     // (terminated),                                       
		.uav_clken              (1'b0),                                                 // (terminated),                                       
		.av_debugaccess         (),                                                     // (terminated),                                       
		.av_outputenable        (),                                                     // (terminated),                                       
		.uav_response           (),                                                     // (terminated),                                       
		.av_response            (2'b00),                                                // (terminated),                                       
		.uav_writeresponsevalid (),                                                     // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                  // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (119),
		.PKT_DOMAIN_H              (118),
		.PKT_DOMAIN_L              (117),
		.PKT_SNOOP_H               (116),
		.PKT_SNOOP_L               (113),
		.PKT_BARRIER_H             (112),
		.PKT_BARRIER_L             (111),
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (98),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (68),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) bridge_3_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                 (bridge_3_m0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (bridge_3_m0_translator_avalon_universal_master_0_address),       //   input,   width = 27,        av.address
		.av_write              (bridge_3_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (bridge_3_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (bridge_3_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (bridge_3_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (bridge_3_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (bridge_3_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (bridge_3_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (bridge_3_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (bridge_3_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (bridge_3_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (bridge_3_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (bridge_3_m0_agent_cp_data),                                      //  output,  width = 120,          .data
		.cp_startofpacket      (bridge_3_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (bridge_3_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (bridge_3_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                              //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                               //   input,  width = 120,          .data
		.rp_channel            (rsp_mux_src_channel),                                            //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                              //  output,    width = 1,          .ready
		.av_response           (),                                                               // (terminated),                         
		.av_writeresponsevalid ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (67),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (69),
		.PKT_ADDR_H                (62),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (63),
		.PKT_TRANS_POSTED          (64),
		.PKT_TRANS_WRITE           (65),
		.PKT_TRANS_READ            (66),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) qspi_controller2_0_avl_mem_agent (
		.clk                     (iopll_0_outclk0_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (qspi_controller2_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (qspi_controller2_0_avl_mem_agent_m0_address),                 //  output,   width = 27,              m0.address
		.m0_burstcount           (qspi_controller2_0_avl_mem_agent_m0_burstcount),              //  output,    width = 9,                .burstcount
		.m0_byteenable           (qspi_controller2_0_avl_mem_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (qspi_controller2_0_avl_mem_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (qspi_controller2_0_avl_mem_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (qspi_controller2_0_avl_mem_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (qspi_controller2_0_avl_mem_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (qspi_controller2_0_avl_mem_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (qspi_controller2_0_avl_mem_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (qspi_controller2_0_avl_mem_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (qspi_controller2_0_avl_mem_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (qspi_controller2_0_avl_mem_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (qspi_controller2_0_avl_mem_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (qspi_controller2_0_avl_mem_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (qspi_controller2_0_avl_mem_agent_rp_data),                    //  output,  width = 120,                .data
		.rp_startofpacket        (qspi_controller2_0_avl_mem_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                           //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                           //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                            //   input,  width = 120,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                     //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                         //   input,    width = 1,                .channel
		.rf_sink_ready           (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_data),          //   input,  width = 121,                .data
		.rf_source_ready         (qspi_controller2_0_avl_mem_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (qspi_controller2_0_avl_mem_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (qspi_controller2_0_avl_mem_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (qspi_controller2_0_avl_mem_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (qspi_controller2_0_avl_mem_agent_rf_source_data),             //  output,  width = 121,                .data
		.rdata_fifo_sink_ready   (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) qspi_controller2_0_avl_mem_agent_rsp_fifo (
		.clk               (iopll_0_outclk0_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (qspi_controller2_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (qspi_controller2_0_avl_mem_agent_rf_source_data),             //   input,  width = 121,        in.data
		.in_valid          (qspi_controller2_0_avl_mem_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (qspi_controller2_0_avl_mem_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (qspi_controller2_0_avl_mem_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (qspi_controller2_0_avl_mem_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_data),          //  output,  width = 121,       out.data
		.out_valid         (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (qspi_controller2_0_avl_mem_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) qspi_controller2_0_avl_mem_agent_rdata_fifo (
		.clk               (iopll_0_outclk0_clk),                                   //   input,   width = 1,       clk.clk
		.reset             (qspi_controller2_0_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.in_data           (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (qspi_controller2_0_avl_mem_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (qspi_controller2_0_avl_mem_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_router_181_yss7bmy router (
		.sink_ready         (bridge_3_m0_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_3_m0_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (bridge_3_m0_agent_cp_data),                     //   input,  width = 120,          .data
		.sink_startofpacket (bridge_3_m0_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_3_m0_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (bridge_3_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_src_data),                               //  output,  width = 120,          .data
		.src_channel        (router_src_channel),                            //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_zsg6cwi router_001 (
		.sink_ready         (qspi_controller2_0_avl_mem_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (qspi_controller2_0_avl_mem_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (qspi_controller2_0_avl_mem_agent_rp_data),             //   input,  width = 120,          .data
		.sink_startofpacket (qspi_controller2_0_avl_mem_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qspi_controller2_0_avl_mem_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (iopll_0_outclk0_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                  //  output,  width = 120,          .data
		.src_channel        (router_001_src_channel),                               //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ud26doi cmd_demux (
		.clk                (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (bridge_3_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                            //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                               //   input,  width = 120,          .data
		.sink_startofpacket (router_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                           //  output,  width = 120,          .data
		.src0_channel       (cmd_demux_src0_channel),                        //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_dguxxjy cmd_mux (
		.clk                 (iopll_0_outclk0_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                     //  output,  width = 120,          .data
		.src_channel         (cmd_mux_src_channel),                                  //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                  //   input,    width = 1,          .channel
		.sink0_data          (crosser_out_data),                                     //   input,  width = 120,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ud26doi rsp_demux (
		.clk                (iopll_0_outclk0_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                               //   input,    width = 1,          .channel
		.sink_data          (router_001_src_data),                                  //   input,  width = 120,          .data
		.sink_startofpacket (router_001_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                 //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                  //  output,  width = 120,          .data
		.src0_channel       (rsp_demux_src0_channel),                               //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_4utwfty rsp_mux (
		.clk                 (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (bridge_3_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                              //  output,  width = 120,          .data
		.src_channel         (rsp_mux_src_channel),                           //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                       //   input,    width = 1,          .channel
		.sink0_data          (crosser_001_out_data),                          //   input,  width = 120,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_qqgw6ti #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clock_in_out_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_3_m0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk0_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                               //   input,    width = 1,              .channel
		.in_data           (cmd_demux_src0_data),                                  //   input,  width = 120,              .data
		.out_ready         (crosser_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                  //  output,    width = 1,              .channel
		.out_data          (crosser_out_data),                                     //  output,  width = 120,              .data
		.in_empty          (1'b0),                                                 // (terminated),                             
		.in_error          (1'b0),                                                 // (terminated),                             
		.out_empty         (),                                                     // (terminated),                             
		.out_error         ()                                                      // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_qqgw6ti #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (iopll_0_outclk0_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (qspi_controller2_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_3_m0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                               //   input,    width = 1,              .channel
		.in_data           (rsp_demux_src0_data),                                  //   input,  width = 120,              .data
		.out_ready         (crosser_001_out_ready),                                //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //  output,    width = 1,              .channel
		.out_data          (crosser_001_out_data),                                 //  output,  width = 120,              .data
		.in_empty          (1'b0),                                                 // (terminated),                             
		.in_error          (1'b0),                                                 // (terminated),                             
		.out_empty         (),                                                     // (terminated),                             
		.out_error         ()                                                      // (terminated),                             
	);

endmodule
