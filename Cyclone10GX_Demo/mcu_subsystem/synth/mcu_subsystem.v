// mcu_subsystem.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem (
		input  wire        tx_fifo_bypass_bypass,         // tx_fifo_bypass.bypass
		input  wire        tx_ref_clk_clk,                //     tx_ref_clk.clk
		output wire [3:0]  tx_serial_data_tx_serial_data, // tx_serial_data.tx_serial_data
		input  wire        tx_sysref_export,              //      tx_sysref.export
		input  wire        tx_sync_export,                //        tx_sync.export
		input  wire        rx_ref_clk_clk,                //     rx_ref_clk.clk
		input  wire [3:0]  rx_serial_data_rx_serial_data, // rx_serial_data.rx_serial_data
		input  wire        rx_sysref_export,              //      rx_sysref.export
		output wire [0:0]  rx_sync_export,                //        rx_sync.export
		input  wire        clk100_clk,                    //         clk100.clk
		input  wire        clk_clk,                       //            clk.clk
		output wire        dbg_reset_reset,               //      dbg_reset.reset
		input  wire [31:0] fmc_gpio_in_port,              //       fmc_gpio.in_port
		output wire [31:0] fmc_gpio_out_port,             //               .out_port
		input  wire        i2c_sda_in,                    //            i2c.sda_in
		input  wire        i2c_scl_in,                    //               .scl_in
		output wire        i2c_sda_oe,                    //               .sda_oe
		output wire        i2c_scl_oe,                    //               .scl_oe
		input  wire        spi_MISO,                      //            spi.MISO
		output wire        spi_MOSI,                      //               .MOSI
		output wire        spi_SCLK,                      //               .SCLK
		output wire [7:0]  spi_SS_n,                      //               .SS_n
		output wire        iopll_0_locked_export,         // iopll_0_locked.export
		output wire        qspi_dclk,                     //           qspi.dclk
		output wire        qspi_ncs,                      //               .ncs
		inout  wire [3:0]  qspi_data,                     //               .data
		input  wire        refclk_emif_clk,               //    refclk_emif.clk
		input  wire        reset_reset_n,                 //          reset.reset_n
		input  wire        oct_oct_rzqin,                 //            oct.oct_rzqin
		output wire [0:0]  mem_mem_ck,                    //            mem.mem_ck
		output wire [0:0]  mem_mem_ck_n,                  //               .mem_ck_n
		output wire [15:0] mem_mem_a,                     //               .mem_a
		output wire [2:0]  mem_mem_ba,                    //               .mem_ba
		output wire [0:0]  mem_mem_cke,                   //               .mem_cke
		output wire [0:0]  mem_mem_cs_n,                  //               .mem_cs_n
		output wire [0:0]  mem_mem_odt,                   //               .mem_odt
		output wire [0:0]  mem_mem_reset_n,               //               .mem_reset_n
		output wire [0:0]  mem_mem_we_n,                  //               .mem_we_n
		output wire [0:0]  mem_mem_ras_n,                 //               .mem_ras_n
		output wire [0:0]  mem_mem_cas_n,                 //               .mem_cas_n
		inout  wire [3:0]  mem_mem_dqs,                   //               .mem_dqs
		inout  wire [3:0]  mem_mem_dqs_n,                 //               .mem_dqs_n
		inout  wire [31:0] mem_mem_dq,                    //               .mem_dq
		output wire [3:0]  mem_mem_dm,                    //               .mem_dm
		output wire        status_local_cal_success,      //         status.local_cal_success
		output wire        status_local_cal_fail,         //               .local_cal_fail
		output wire [0:0]  tx_0_tx_serial_data,           //           tx_0.tx_serial_data
		input  wire [0:0]  rx_0_rx_serial_data,           //           rx_0.rx_serial_data
		output wire [0:0]  tx_1_tx_serial_data,           //           tx_1.tx_serial_data
		input  wire [0:0]  rx_1_rx_serial_data            //           rx_1.rx_serial_data
	);

	wire   [31:0] avl_adxcfg_0_rcfg_m0_readdata;                                           // ad9144_jesd204:phy_reconfig_0_readdata -> avl_adxcfg_0:rcfg_out_readdata_0
	wire          avl_adxcfg_0_rcfg_m0_waitrequest;                                        // ad9144_jesd204:phy_reconfig_0_waitrequest -> avl_adxcfg_0:rcfg_out_waitrequest_0
	wire          avl_adxcfg_0_rcfg_m0_read;                                               // avl_adxcfg_0:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_0_read
	wire    [9:0] avl_adxcfg_0_rcfg_m0_address;                                            // avl_adxcfg_0:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_0_address
	wire          avl_adxcfg_0_rcfg_m0_write;                                              // avl_adxcfg_0:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_0_write
	wire   [31:0] avl_adxcfg_0_rcfg_m0_writedata;                                          // avl_adxcfg_0:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_0_writedata
	wire   [31:0] avl_adxcfg_1_rcfg_m0_readdata;                                           // ad9144_jesd204:phy_reconfig_1_readdata -> avl_adxcfg_1:rcfg_out_readdata_0
	wire          avl_adxcfg_1_rcfg_m0_waitrequest;                                        // ad9144_jesd204:phy_reconfig_1_waitrequest -> avl_adxcfg_1:rcfg_out_waitrequest_0
	wire          avl_adxcfg_1_rcfg_m0_read;                                               // avl_adxcfg_1:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_1_read
	wire    [9:0] avl_adxcfg_1_rcfg_m0_address;                                            // avl_adxcfg_1:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_1_address
	wire          avl_adxcfg_1_rcfg_m0_write;                                              // avl_adxcfg_1:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_1_write
	wire   [31:0] avl_adxcfg_1_rcfg_m0_writedata;                                          // avl_adxcfg_1:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_1_writedata
	wire   [31:0] avl_adxcfg_2_rcfg_m0_readdata;                                           // ad9144_jesd204:phy_reconfig_2_readdata -> avl_adxcfg_2:rcfg_out_readdata_0
	wire          avl_adxcfg_2_rcfg_m0_waitrequest;                                        // ad9144_jesd204:phy_reconfig_2_waitrequest -> avl_adxcfg_2:rcfg_out_waitrequest_0
	wire          avl_adxcfg_2_rcfg_m0_read;                                               // avl_adxcfg_2:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_2_read
	wire    [9:0] avl_adxcfg_2_rcfg_m0_address;                                            // avl_adxcfg_2:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_2_address
	wire          avl_adxcfg_2_rcfg_m0_write;                                              // avl_adxcfg_2:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_2_write
	wire   [31:0] avl_adxcfg_2_rcfg_m0_writedata;                                          // avl_adxcfg_2:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_2_writedata
	wire   [31:0] avl_adxcfg_3_rcfg_m0_readdata;                                           // ad9144_jesd204:phy_reconfig_3_readdata -> avl_adxcfg_3:rcfg_out_readdata_0
	wire          avl_adxcfg_3_rcfg_m0_waitrequest;                                        // ad9144_jesd204:phy_reconfig_3_waitrequest -> avl_adxcfg_3:rcfg_out_waitrequest_0
	wire          avl_adxcfg_3_rcfg_m0_read;                                               // avl_adxcfg_3:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_3_read
	wire    [9:0] avl_adxcfg_3_rcfg_m0_address;                                            // avl_adxcfg_3:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_3_address
	wire          avl_adxcfg_3_rcfg_m0_write;                                              // avl_adxcfg_3:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_3_write
	wire   [31:0] avl_adxcfg_3_rcfg_m0_writedata;                                          // avl_adxcfg_3:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_3_writedata
	wire   [31:0] avl_adxcfg_0_rcfg_m1_readdata;                                           // ad9680_jesd204:phy_reconfig_0_readdata -> avl_adxcfg_0:rcfg_out_readdata_1
	wire          avl_adxcfg_0_rcfg_m1_waitrequest;                                        // ad9680_jesd204:phy_reconfig_0_waitrequest -> avl_adxcfg_0:rcfg_out_waitrequest_1
	wire          avl_adxcfg_0_rcfg_m1_read;                                               // avl_adxcfg_0:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_0_read
	wire    [9:0] avl_adxcfg_0_rcfg_m1_address;                                            // avl_adxcfg_0:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_0_address
	wire          avl_adxcfg_0_rcfg_m1_write;                                              // avl_adxcfg_0:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_0_write
	wire   [31:0] avl_adxcfg_0_rcfg_m1_writedata;                                          // avl_adxcfg_0:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_0_writedata
	wire   [31:0] avl_adxcfg_1_rcfg_m1_readdata;                                           // ad9680_jesd204:phy_reconfig_1_readdata -> avl_adxcfg_1:rcfg_out_readdata_1
	wire          avl_adxcfg_1_rcfg_m1_waitrequest;                                        // ad9680_jesd204:phy_reconfig_1_waitrequest -> avl_adxcfg_1:rcfg_out_waitrequest_1
	wire          avl_adxcfg_1_rcfg_m1_read;                                               // avl_adxcfg_1:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_1_read
	wire    [9:0] avl_adxcfg_1_rcfg_m1_address;                                            // avl_adxcfg_1:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_1_address
	wire          avl_adxcfg_1_rcfg_m1_write;                                              // avl_adxcfg_1:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_1_write
	wire   [31:0] avl_adxcfg_1_rcfg_m1_writedata;                                          // avl_adxcfg_1:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_1_writedata
	wire   [31:0] avl_adxcfg_2_rcfg_m1_readdata;                                           // ad9680_jesd204:phy_reconfig_2_readdata -> avl_adxcfg_2:rcfg_out_readdata_1
	wire          avl_adxcfg_2_rcfg_m1_waitrequest;                                        // ad9680_jesd204:phy_reconfig_2_waitrequest -> avl_adxcfg_2:rcfg_out_waitrequest_1
	wire          avl_adxcfg_2_rcfg_m1_read;                                               // avl_adxcfg_2:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_2_read
	wire    [9:0] avl_adxcfg_2_rcfg_m1_address;                                            // avl_adxcfg_2:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_2_address
	wire          avl_adxcfg_2_rcfg_m1_write;                                              // avl_adxcfg_2:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_2_write
	wire   [31:0] avl_adxcfg_2_rcfg_m1_writedata;                                          // avl_adxcfg_2:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_2_writedata
	wire   [31:0] avl_adxcfg_3_rcfg_m1_readdata;                                           // ad9680_jesd204:phy_reconfig_3_readdata -> avl_adxcfg_3:rcfg_out_readdata_1
	wire          avl_adxcfg_3_rcfg_m1_waitrequest;                                        // ad9680_jesd204:phy_reconfig_3_waitrequest -> avl_adxcfg_3:rcfg_out_waitrequest_1
	wire          avl_adxcfg_3_rcfg_m1_read;                                               // avl_adxcfg_3:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_3_read
	wire    [9:0] avl_adxcfg_3_rcfg_m1_address;                                            // avl_adxcfg_3:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_3_address
	wire          avl_adxcfg_3_rcfg_m1_write;                                              // avl_adxcfg_3:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_3_write
	wire   [31:0] avl_adxcfg_3_rcfg_m1_writedata;                                          // avl_adxcfg_3:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_3_writedata
	wire          ad9144_core_if_tx_data_valid;                                            // ad9144_core:tx_valid -> ad9144_jesd204:link_data_valid
	wire  [127:0] ad9144_core_if_tx_data_data;                                             // ad9144_core:tx_data -> ad9144_jesd204:link_data_data
	wire          ad9144_core_if_tx_data_ready;                                            // ad9144_jesd204:link_data_ready -> ad9144_core:tx_ready
	wire          sdram_emif_usr_clk_clk;                                                  // sdram:emif_usr_clk -> [ad9144_dacfifo:dma_clk, bridge_0:m0_clk, bridge_1:m0_clk, mm_interconnect_3:sdram_emif_usr_clk_clk, mm_interconnect_4:sdram_emif_usr_clk_clk, rst_controller_001:clk]
	wire          ad9680_jesd204_link_clk_clk;                                             // ad9680_jesd204:link_clk_clk -> [ad9680_adcfifo:adc_clk, ad9680_core:rx_clk, ad9680_cpack:adc_clk, avalon_st_adapter:in_clk_0_clk, rst_controller_004:clk]
	wire          ad9144_jesd204_link_clk_clk;                                             // ad9144_jesd204:link_clk_clk -> [ad9144_core:tx_clk, ad9144_dacfifo:dac_clk, ad9144_upack:dac_clk, rst_controller_002:clk]
	wire          clock_in_out_clk_clk;                                                    // clock_in:out_clk -> [ad9144_core:s_axi_aclk, ad9144_dma:s_axi_aclk, ad9144_jesd204:sys_clk_clk, ad9680_core:s_axi_aclk, ad9680_dma:s_axi_aclk, ad9680_jesd204:sys_clk_clk, avl_adxcfg_0:rcfg_clk, avl_adxcfg_1:rcfg_clk, avl_adxcfg_2:rcfg_clk, avl_adxcfg_3:rcfg_clk, bridge_0:s0_clk, bridge_1:s0_clk, bridge_2:m0_clk, bridge_3:m0_clk, dbg_reset_out:clk, fmc_gpio:clk, fmc_i2c:clk, fmc_spi:clk, iopll_0:refclk, irq_mapper:clk, irq_synchronizer:sender_clk, jtag_uart_0:clk, mcu_subsystem_cpu_0:clk, mcu_subsystem_ram_0:clk, mm_interconnect_0:clock_in_out_clk_clk, mm_interconnect_1:clock_in_out_clk_clk, mm_interconnect_2:clock_in_out_clk_clk, phy_interlaken_0:clk125_clk, phy_interlaken_1:clk125_clk, rst_controller:clk, rst_controller_006:clk, timer_0:clk, timer_1:clk]
	wire          refclk_emif_out_clk_clk;                                                 // refclk_emif:out_clk -> [ad9144_dma:m_axis_aclk, ad9144_dma:m_src_axi_aclk, ad9680_adcfifo:dma_clk, ad9680_dma:m_dest_axi_aclk, ad9680_dma:s_axis_aclk, mm_interconnect_3:refclk_emif_out_clk_clk, rst_controller_003:clk, sdram:pll_ref_clk]
	wire          iopll_0_outclk0_clk;                                                     // iopll_0:outclk_0 -> [bridge_2:s0_clk, bridge_3:s0_clk, irq_synchronizer:receiver_clk, mm_interconnect_0:iopll_0_outclk0_clk, mm_interconnect_1:iopll_0_outclk0_clk, mm_interconnect_2:iopll_0_outclk0_clk, qspi_controller2_0:clk, rst_controller_005:clk]
	wire          ad9680_core_adc_ch_0_valid;                                              // ad9680_core:adc_valid_0 -> ad9680_cpack:adc_valid_0
	wire   [63:0] ad9680_core_adc_ch_0_data;                                               // ad9680_core:adc_data_0 -> ad9680_cpack:adc_data_0
	wire          ad9680_core_adc_ch_0_enable;                                             // ad9680_core:adc_enable_0 -> ad9680_cpack:adc_enable_0
	wire          ad9680_core_adc_ch_1_valid;                                              // ad9680_core:adc_valid_1 -> ad9680_cpack:adc_valid_1
	wire   [63:0] ad9680_core_adc_ch_1_data;                                               // ad9680_core:adc_data_1 -> ad9680_cpack:adc_data_1
	wire          ad9680_core_adc_ch_1_enable;                                             // ad9680_core:adc_enable_1 -> ad9680_cpack:adc_enable_1
	wire          ad9144_core_dac_ch_0_valid;                                              // ad9144_core:dac_valid_0 -> ad9144_upack:dac_valid_0
	wire   [63:0] ad9144_upack_dac_ch_0_data;                                              // ad9144_upack:dac_data_0 -> ad9144_core:dac_ddata_0
	wire          ad9144_core_dac_ch_0_enable;                                             // ad9144_core:dac_enable_0 -> ad9144_upack:dac_enable_0
	wire          ad9144_core_dac_ch_1_valid;                                              // ad9144_core:dac_valid_1 -> ad9144_upack:dac_valid_1
	wire   [63:0] ad9144_upack_dac_ch_1_data;                                              // ad9144_upack:dac_data_1 -> ad9144_core:dac_ddata_1
	wire          ad9144_core_dac_ch_1_enable;                                             // ad9144_core:dac_enable_1 -> ad9144_upack:dac_enable_1
	wire  [127:0] ad9680_cpack_if_adc_data_data;                                           // ad9680_cpack:adc_data -> ad9680_adcfifo:adc_wdata
	wire          ad9680_cpack_if_adc_valid_valid;                                         // ad9680_cpack:adc_valid -> ad9680_adcfifo:adc_wr
	wire          ad9680_adcfifo_if_adc_wovf_ovf;                                          // ad9680_adcfifo:adc_wovf -> ad9680_core:adc_dovf
	wire  [127:0] ad9144_dacfifo_if_dac_data_data;                                         // ad9144_dacfifo:dac_data -> ad9144_upack:dac_data
	wire          ad9144_dacfifo_if_dac_dunf_unf;                                          // ad9144_dacfifo:dac_dunf -> ad9144_core:dac_dunf
	wire          ad9144_upack_if_dac_valid_valid;                                         // ad9144_upack:dac_valid -> ad9144_dacfifo:dac_valid
	wire          ad9144_dacfifo_if_dma_ready_ready;                                       // ad9144_dacfifo:dma_ready -> ad9144_dma:m_axis_ready
	wire          ad9144_dma_if_m_axis_valid_valid;                                        // ad9144_dma:m_axis_valid -> ad9144_dacfifo:dma_valid
	wire          ad9680_adcfifo_if_dma_wr_valid;                                          // ad9680_adcfifo:dma_wr -> ad9680_dma:s_axis_valid
	wire          ad9144_dma_if_m_axis_xfer_req_xfer_req;                                  // ad9144_dma:m_axis_xfer_req -> ad9144_dacfifo:dma_xfer_req
	wire          ad9680_dma_if_s_axis_xfer_req_xfer_req;                                  // ad9680_dma:s_axis_xfer_req -> ad9680_adcfifo:dma_xfer_req
	wire  [127:0] ad9144_dma_if_m_axis_data_data;                                          // ad9144_dma:m_axis_data -> ad9144_dacfifo:dma_data
	wire          ad9144_dma_if_m_axis_last_last;                                          // ad9144_dma:m_axis_last -> ad9144_dacfifo:dma_xfer_last
	wire  [127:0] ad9680_adcfifo_if_dma_wdata_data;                                        // ad9680_adcfifo:dma_wdata -> ad9680_dma:s_axis_data
	wire          ad9680_dma_if_s_axis_ready_ready;                                        // ad9680_dma:s_axis_ready -> ad9680_adcfifo:dma_wready
	wire    [3:0] ad9680_jesd204_link_sof_export;                                          // ad9680_jesd204:link_sof_export -> ad9680_core:rx_sof
	wire          mcu_subsystem_cpu_0_debug_reset_request_reset;                           // mcu_subsystem_cpu_0:debug_reset_request -> [iopll_0:rst, rst_controller:reset_in0, rst_controller_004:reset_in0, rst_controller_005:reset_in0, rst_controller_007:reset_in0]
	wire   [31:0] mcu_subsystem_cpu_0_data_master_readdata;                                // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_readdata -> mcu_subsystem_cpu_0:d_readdata
	wire          mcu_subsystem_cpu_0_data_master_waitrequest;                             // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_waitrequest -> mcu_subsystem_cpu_0:d_waitrequest
	wire          mcu_subsystem_cpu_0_data_master_debugaccess;                             // mcu_subsystem_cpu_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_debugaccess
	wire   [31:0] mcu_subsystem_cpu_0_data_master_address;                                 // mcu_subsystem_cpu_0:d_address -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_address
	wire    [3:0] mcu_subsystem_cpu_0_data_master_byteenable;                              // mcu_subsystem_cpu_0:d_byteenable -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_byteenable
	wire          mcu_subsystem_cpu_0_data_master_read;                                    // mcu_subsystem_cpu_0:d_read -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_read
	wire          mcu_subsystem_cpu_0_data_master_readdatavalid;                           // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_readdatavalid -> mcu_subsystem_cpu_0:d_readdatavalid
	wire          mcu_subsystem_cpu_0_data_master_write;                                   // mcu_subsystem_cpu_0:d_write -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_write
	wire   [31:0] mcu_subsystem_cpu_0_data_master_writedata;                               // mcu_subsystem_cpu_0:d_writedata -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_writedata
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_readdata;                         // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_readdata -> mcu_subsystem_cpu_0:i_readdata
	wire          mcu_subsystem_cpu_0_instruction_master_waitrequest;                      // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_waitrequest -> mcu_subsystem_cpu_0:i_waitrequest
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_address;                          // mcu_subsystem_cpu_0:i_address -> mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_address
	wire          mcu_subsystem_cpu_0_instruction_master_read;                             // mcu_subsystem_cpu_0:i_read -> mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_read
	wire          mcu_subsystem_cpu_0_instruction_master_readdatavalid;                    // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_readdatavalid -> mcu_subsystem_cpu_0:i_readdatavalid
	wire          phy_interlaken_0_phy_data_ctrl_m0_waitrequest;                           // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_waitrequest -> phy_interlaken_0:phy_data_ctrl_m0_waitrequest
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_readdata;                              // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_readdata -> phy_interlaken_0:phy_data_ctrl_m0_readdata
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_address;                               // phy_interlaken_0:phy_data_ctrl_m0_address -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_address
	wire          phy_interlaken_0_phy_data_ctrl_m0_read;                                  // phy_interlaken_0:phy_data_ctrl_m0_read -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_read
	wire          phy_interlaken_0_phy_data_ctrl_m0_readdatavalid;                         // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_readdatavalid -> phy_interlaken_0:phy_data_ctrl_m0_readdatavalid
	wire          phy_interlaken_0_phy_data_ctrl_m0_write;                                 // phy_interlaken_0:phy_data_ctrl_m0_write -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_write
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_writedata;                             // phy_interlaken_0:phy_data_ctrl_m0_writedata -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_m0_writedata
	wire          phy_interlaken_1_phy_data_ctrl_m0_waitrequest;                           // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_waitrequest -> phy_interlaken_1:phy_data_ctrl_m0_waitrequest
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_readdata;                              // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_readdata -> phy_interlaken_1:phy_data_ctrl_m0_readdata
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_address;                               // phy_interlaken_1:phy_data_ctrl_m0_address -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_address
	wire          phy_interlaken_1_phy_data_ctrl_m0_read;                                  // phy_interlaken_1:phy_data_ctrl_m0_read -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_read
	wire          phy_interlaken_1_phy_data_ctrl_m0_readdatavalid;                         // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_readdatavalid -> phy_interlaken_1:phy_data_ctrl_m0_readdatavalid
	wire          phy_interlaken_1_phy_data_ctrl_m0_write;                                 // phy_interlaken_1:phy_data_ctrl_m0_write -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_write
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_writedata;                             // phy_interlaken_1:phy_data_ctrl_m0_writedata -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_m0_writedata
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;              // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire   [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;                // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;             // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire    [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;                 // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;                    // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;                   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire   [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;               // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire   [31:0] mm_interconnect_0_fmc_i2c_csr_readdata;                                  // fmc_i2c:readdata -> mm_interconnect_0:fmc_i2c_csr_readdata
	wire    [3:0] mm_interconnect_0_fmc_i2c_csr_address;                                   // mm_interconnect_0:fmc_i2c_csr_address -> fmc_i2c:addr
	wire          mm_interconnect_0_fmc_i2c_csr_read;                                      // mm_interconnect_0:fmc_i2c_csr_read -> fmc_i2c:read
	wire          mm_interconnect_0_fmc_i2c_csr_write;                                     // mm_interconnect_0:fmc_i2c_csr_write -> fmc_i2c:write
	wire   [31:0] mm_interconnect_0_fmc_i2c_csr_writedata;                                 // mm_interconnect_0:fmc_i2c_csr_writedata -> fmc_i2c:writedata
	wire   [31:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata;          // mcu_subsystem_cpu_0:debug_mem_slave_readdata -> mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_readdata
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest;       // mcu_subsystem_cpu_0:debug_mem_slave_waitrequest -> mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_waitrequest
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess;       // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_debugaccess -> mcu_subsystem_cpu_0:debug_mem_slave_debugaccess
	wire    [8:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address;           // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_address -> mcu_subsystem_cpu_0:debug_mem_slave_address
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read;              // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_read -> mcu_subsystem_cpu_0:debug_mem_slave_read
	wire    [3:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable;        // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_byteenable -> mcu_subsystem_cpu_0:debug_mem_slave_byteenable
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write;             // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_write -> mcu_subsystem_cpu_0:debug_mem_slave_write
	wire   [31:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata;         // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_writedata -> mcu_subsystem_cpu_0:debug_mem_slave_writedata
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata;             // ad9144_jesd204:lane_pll_reconfig_readdata -> mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest;          // ad9144_jesd204:lane_pll_reconfig_waitrequest -> mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address;              // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_address -> ad9144_jesd204:lane_pll_reconfig_address
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read;                 // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_read -> ad9144_jesd204:lane_pll_reconfig_read
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write;                // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_write -> ad9144_jesd204:lane_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata;            // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_writedata -> ad9144_jesd204:lane_pll_reconfig_writedata
	wire   [11:0] mm_interconnect_0_ad9144_jesd204_link_management_awaddr;                 // mm_interconnect_0:ad9144_jesd204_link_management_awaddr -> ad9144_jesd204:link_management_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_management_bresp;                  // ad9144_jesd204:link_management_bresp -> mm_interconnect_0:ad9144_jesd204_link_management_bresp
	wire          mm_interconnect_0_ad9144_jesd204_link_management_arready;                // ad9144_jesd204:link_management_arready -> mm_interconnect_0:ad9144_jesd204_link_management_arready
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_management_rdata;                  // ad9144_jesd204:link_management_rdata -> mm_interconnect_0:ad9144_jesd204_link_management_rdata
	wire    [3:0] mm_interconnect_0_ad9144_jesd204_link_management_wstrb;                  // mm_interconnect_0:ad9144_jesd204_link_management_wstrb -> ad9144_jesd204:link_management_wstrb
	wire          mm_interconnect_0_ad9144_jesd204_link_management_wready;                 // ad9144_jesd204:link_management_wready -> mm_interconnect_0:ad9144_jesd204_link_management_wready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_awready;                // ad9144_jesd204:link_management_awready -> mm_interconnect_0:ad9144_jesd204_link_management_awready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_rready;                 // mm_interconnect_0:ad9144_jesd204_link_management_rready -> ad9144_jesd204:link_management_rready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_bready;                 // mm_interconnect_0:ad9144_jesd204_link_management_bready -> ad9144_jesd204:link_management_bready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_wvalid;                 // mm_interconnect_0:ad9144_jesd204_link_management_wvalid -> ad9144_jesd204:link_management_wvalid
	wire   [11:0] mm_interconnect_0_ad9144_jesd204_link_management_araddr;                 // mm_interconnect_0:ad9144_jesd204_link_management_araddr -> ad9144_jesd204:link_management_araddr
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_management_arprot;                 // mm_interconnect_0:ad9144_jesd204_link_management_arprot -> ad9144_jesd204:link_management_arprot
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_management_rresp;                  // ad9144_jesd204:link_management_rresp -> mm_interconnect_0:ad9144_jesd204_link_management_rresp
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_management_awprot;                 // mm_interconnect_0:ad9144_jesd204_link_management_awprot -> ad9144_jesd204:link_management_awprot
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_management_wdata;                  // mm_interconnect_0:ad9144_jesd204_link_management_wdata -> ad9144_jesd204:link_management_wdata
	wire          mm_interconnect_0_ad9144_jesd204_link_management_arvalid;                // mm_interconnect_0:ad9144_jesd204_link_management_arvalid -> ad9144_jesd204:link_management_arvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_bvalid;                 // ad9144_jesd204:link_management_bvalid -> mm_interconnect_0:ad9144_jesd204_link_management_bvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_awvalid;                // mm_interconnect_0:ad9144_jesd204_link_management_awvalid -> ad9144_jesd204:link_management_awvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_rvalid;                 // ad9144_jesd204:link_management_rvalid -> mm_interconnect_0:ad9144_jesd204_link_management_rvalid
	wire   [11:0] mm_interconnect_0_ad9680_jesd204_link_management_awaddr;                 // mm_interconnect_0:ad9680_jesd204_link_management_awaddr -> ad9680_jesd204:link_management_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_management_bresp;                  // ad9680_jesd204:link_management_bresp -> mm_interconnect_0:ad9680_jesd204_link_management_bresp
	wire          mm_interconnect_0_ad9680_jesd204_link_management_arready;                // ad9680_jesd204:link_management_arready -> mm_interconnect_0:ad9680_jesd204_link_management_arready
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_management_rdata;                  // ad9680_jesd204:link_management_rdata -> mm_interconnect_0:ad9680_jesd204_link_management_rdata
	wire    [3:0] mm_interconnect_0_ad9680_jesd204_link_management_wstrb;                  // mm_interconnect_0:ad9680_jesd204_link_management_wstrb -> ad9680_jesd204:link_management_wstrb
	wire          mm_interconnect_0_ad9680_jesd204_link_management_wready;                 // ad9680_jesd204:link_management_wready -> mm_interconnect_0:ad9680_jesd204_link_management_wready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_awready;                // ad9680_jesd204:link_management_awready -> mm_interconnect_0:ad9680_jesd204_link_management_awready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_rready;                 // mm_interconnect_0:ad9680_jesd204_link_management_rready -> ad9680_jesd204:link_management_rready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_bready;                 // mm_interconnect_0:ad9680_jesd204_link_management_bready -> ad9680_jesd204:link_management_bready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_wvalid;                 // mm_interconnect_0:ad9680_jesd204_link_management_wvalid -> ad9680_jesd204:link_management_wvalid
	wire   [11:0] mm_interconnect_0_ad9680_jesd204_link_management_araddr;                 // mm_interconnect_0:ad9680_jesd204_link_management_araddr -> ad9680_jesd204:link_management_araddr
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_management_arprot;                 // mm_interconnect_0:ad9680_jesd204_link_management_arprot -> ad9680_jesd204:link_management_arprot
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_management_rresp;                  // ad9680_jesd204:link_management_rresp -> mm_interconnect_0:ad9680_jesd204_link_management_rresp
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_management_awprot;                 // mm_interconnect_0:ad9680_jesd204_link_management_awprot -> ad9680_jesd204:link_management_awprot
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_management_wdata;                  // mm_interconnect_0:ad9680_jesd204_link_management_wdata -> ad9680_jesd204:link_management_wdata
	wire          mm_interconnect_0_ad9680_jesd204_link_management_arvalid;                // mm_interconnect_0:ad9680_jesd204_link_management_arvalid -> ad9680_jesd204:link_management_arvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_bvalid;                 // ad9680_jesd204:link_management_bvalid -> mm_interconnect_0:ad9680_jesd204_link_management_bvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_awvalid;                // mm_interconnect_0:ad9680_jesd204_link_management_awvalid -> ad9680_jesd204:link_management_awvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_rvalid;                 // ad9680_jesd204:link_management_rvalid -> mm_interconnect_0:ad9680_jesd204_link_management_rvalid
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata;             // ad9144_jesd204:link_pll_reconfig_readdata -> mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest;          // ad9144_jesd204:link_pll_reconfig_waitrequest -> mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address;              // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_address -> ad9144_jesd204:link_pll_reconfig_address
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read;                 // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_read -> ad9144_jesd204:link_pll_reconfig_read
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write;                // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_write -> ad9144_jesd204:link_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata;            // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_writedata -> ad9144_jesd204:link_pll_reconfig_writedata
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata;             // ad9680_jesd204:link_pll_reconfig_readdata -> mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest;          // ad9680_jesd204:link_pll_reconfig_waitrequest -> mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address;              // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_address -> ad9680_jesd204:link_pll_reconfig_address
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read;                 // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_read -> ad9680_jesd204:link_pll_reconfig_read
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write;                // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_write -> ad9680_jesd204:link_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata;            // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_writedata -> ad9680_jesd204:link_pll_reconfig_writedata
	wire   [13:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_awaddr -> ad9144_jesd204:link_reconfig_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp;                    // ad9144_jesd204:link_reconfig_bresp -> mm_interconnect_0:ad9144_jesd204_link_reconfig_bresp
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_arready;                  // ad9144_jesd204:link_reconfig_arready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_arready
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata;                    // ad9144_jesd204:link_reconfig_rdata -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rdata
	wire    [3:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb;                    // mm_interconnect_0:ad9144_jesd204_link_reconfig_wstrb -> ad9144_jesd204:link_reconfig_wstrb
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_wready;                   // ad9144_jesd204:link_reconfig_wready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_wready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_awready;                  // ad9144_jesd204:link_reconfig_awready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_awready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_rready;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_rready -> ad9144_jesd204:link_reconfig_rready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_bready;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_bready -> ad9144_jesd204:link_reconfig_bready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_wvalid -> ad9144_jesd204:link_reconfig_wvalid
	wire   [13:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_araddr -> ad9144_jesd204:link_reconfig_araddr
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_arprot -> ad9144_jesd204:link_reconfig_arprot
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp;                    // ad9144_jesd204:link_reconfig_rresp -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rresp
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot;                   // mm_interconnect_0:ad9144_jesd204_link_reconfig_awprot -> ad9144_jesd204:link_reconfig_awprot
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata;                    // mm_interconnect_0:ad9144_jesd204_link_reconfig_wdata -> ad9144_jesd204:link_reconfig_wdata
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid;                  // mm_interconnect_0:ad9144_jesd204_link_reconfig_arvalid -> ad9144_jesd204:link_reconfig_arvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid;                   // ad9144_jesd204:link_reconfig_bvalid -> mm_interconnect_0:ad9144_jesd204_link_reconfig_bvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid;                  // mm_interconnect_0:ad9144_jesd204_link_reconfig_awvalid -> ad9144_jesd204:link_reconfig_awvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid;                   // ad9144_jesd204:link_reconfig_rvalid -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rvalid
	wire   [13:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_awaddr -> ad9680_jesd204:link_reconfig_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp;                    // ad9680_jesd204:link_reconfig_bresp -> mm_interconnect_0:ad9680_jesd204_link_reconfig_bresp
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_arready;                  // ad9680_jesd204:link_reconfig_arready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_arready
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata;                    // ad9680_jesd204:link_reconfig_rdata -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rdata
	wire    [3:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb;                    // mm_interconnect_0:ad9680_jesd204_link_reconfig_wstrb -> ad9680_jesd204:link_reconfig_wstrb
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_wready;                   // ad9680_jesd204:link_reconfig_wready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_wready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_awready;                  // ad9680_jesd204:link_reconfig_awready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_awready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_rready;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_rready -> ad9680_jesd204:link_reconfig_rready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_bready;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_bready -> ad9680_jesd204:link_reconfig_bready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_wvalid -> ad9680_jesd204:link_reconfig_wvalid
	wire   [13:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_araddr -> ad9680_jesd204:link_reconfig_araddr
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_arprot -> ad9680_jesd204:link_reconfig_arprot
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp;                    // ad9680_jesd204:link_reconfig_rresp -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rresp
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot;                   // mm_interconnect_0:ad9680_jesd204_link_reconfig_awprot -> ad9680_jesd204:link_reconfig_awprot
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata;                    // mm_interconnect_0:ad9680_jesd204_link_reconfig_wdata -> ad9680_jesd204:link_reconfig_wdata
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid;                  // mm_interconnect_0:ad9680_jesd204_link_reconfig_arvalid -> ad9680_jesd204:link_reconfig_arvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid;                   // ad9680_jesd204:link_reconfig_bvalid -> mm_interconnect_0:ad9680_jesd204_link_reconfig_bvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid;                  // mm_interconnect_0:ad9680_jesd204_link_reconfig_awvalid -> ad9680_jesd204:link_reconfig_awvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid;                   // ad9680_jesd204:link_reconfig_rvalid -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rvalid
	wire   [31:0] mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdata;        // phy_interlaken_0:phy_data_ctrl_csr_s0_readdata -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_readdata
	wire          mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest;     // phy_interlaken_0:phy_data_ctrl_csr_s0_waitrequest -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest
	wire    [7:0] mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_address;         // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_address -> phy_interlaken_0:phy_data_ctrl_csr_s0_address
	wire          mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_read;            // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_read -> phy_interlaken_0:phy_data_ctrl_csr_s0_read
	wire          mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid;   // phy_interlaken_0:phy_data_ctrl_csr_s0_readdatavalid -> mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid
	wire          mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_write;           // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_write -> phy_interlaken_0:phy_data_ctrl_csr_s0_write
	wire   [31:0] mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_writedata;       // mm_interconnect_0:phy_interlaken_0_phy_data_ctrl_csr_s0_writedata -> phy_interlaken_0:phy_data_ctrl_csr_s0_writedata
	wire   [31:0] mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdata;        // phy_interlaken_1:phy_data_ctrl_csr_s0_readdata -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_readdata
	wire          mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest;     // phy_interlaken_1:phy_data_ctrl_csr_s0_waitrequest -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest
	wire    [7:0] mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_address;         // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_address -> phy_interlaken_1:phy_data_ctrl_csr_s0_address
	wire          mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_read;            // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_read -> phy_interlaken_1:phy_data_ctrl_csr_s0_read
	wire          mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid;   // phy_interlaken_1:phy_data_ctrl_csr_s0_readdatavalid -> mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid
	wire          mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_write;           // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_write -> phy_interlaken_1:phy_data_ctrl_csr_s0_write
	wire   [31:0] mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_writedata;       // mm_interconnect_0:phy_interlaken_1_phy_data_ctrl_csr_s0_writedata -> phy_interlaken_1:phy_data_ctrl_csr_s0_writedata
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata;                         // avl_adxcfg_0:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest;                      // avl_adxcfg_0:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address;                          // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_address -> avl_adxcfg_0:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read;                             // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_read -> avl_adxcfg_0:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write;                            // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_write -> avl_adxcfg_0:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata;                        // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_writedata -> avl_adxcfg_0:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata;                         // avl_adxcfg_1:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest;                      // avl_adxcfg_1:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address;                          // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_address -> avl_adxcfg_1:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read;                             // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_read -> avl_adxcfg_1:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write;                            // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_write -> avl_adxcfg_1:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata;                        // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_writedata -> avl_adxcfg_1:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata;                         // avl_adxcfg_2:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest;                      // avl_adxcfg_2:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address;                          // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_address -> avl_adxcfg_2:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read;                             // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_read -> avl_adxcfg_2:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write;                            // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_write -> avl_adxcfg_2:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata;                        // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_writedata -> avl_adxcfg_2:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata;                         // avl_adxcfg_3:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest;                      // avl_adxcfg_3:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address;                          // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_address -> avl_adxcfg_3:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read;                             // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_read -> avl_adxcfg_3:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write;                            // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_write -> avl_adxcfg_3:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata;                        // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_writedata -> avl_adxcfg_3:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata;                         // avl_adxcfg_0:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest;                      // avl_adxcfg_0:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address;                          // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_address -> avl_adxcfg_0:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read;                             // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_read -> avl_adxcfg_0:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write;                            // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_write -> avl_adxcfg_0:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata;                        // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_writedata -> avl_adxcfg_0:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata;                         // avl_adxcfg_1:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest;                      // avl_adxcfg_1:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address;                          // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_address -> avl_adxcfg_1:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read;                             // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_read -> avl_adxcfg_1:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write;                            // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_write -> avl_adxcfg_1:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata;                        // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_writedata -> avl_adxcfg_1:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata;                         // avl_adxcfg_2:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest;                      // avl_adxcfg_2:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address;                          // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_address -> avl_adxcfg_2:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read;                             // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_read -> avl_adxcfg_2:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write;                            // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_write -> avl_adxcfg_2:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata;                        // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_writedata -> avl_adxcfg_2:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata;                         // avl_adxcfg_3:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest;                      // avl_adxcfg_3:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address;                          // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_address -> avl_adxcfg_3:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read;                             // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_read -> avl_adxcfg_3:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write;                            // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_write -> avl_adxcfg_3:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata;                        // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_writedata -> avl_adxcfg_3:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_bridge_0_s0_readdata;                                  // bridge_0:s0_readdata -> mm_interconnect_0:bridge_0_s0_readdata
	wire          mm_interconnect_0_bridge_0_s0_waitrequest;                               // bridge_0:s0_waitrequest -> mm_interconnect_0:bridge_0_s0_waitrequest
	wire          mm_interconnect_0_bridge_0_s0_debugaccess;                               // mm_interconnect_0:bridge_0_s0_debugaccess -> bridge_0:s0_debugaccess
	wire   [30:0] mm_interconnect_0_bridge_0_s0_address;                                   // mm_interconnect_0:bridge_0_s0_address -> bridge_0:s0_address
	wire          mm_interconnect_0_bridge_0_s0_read;                                      // mm_interconnect_0:bridge_0_s0_read -> bridge_0:s0_read
	wire    [3:0] mm_interconnect_0_bridge_0_s0_byteenable;                                // mm_interconnect_0:bridge_0_s0_byteenable -> bridge_0:s0_byteenable
	wire          mm_interconnect_0_bridge_0_s0_readdatavalid;                             // bridge_0:s0_readdatavalid -> mm_interconnect_0:bridge_0_s0_readdatavalid
	wire          mm_interconnect_0_bridge_0_s0_write;                                     // mm_interconnect_0:bridge_0_s0_write -> bridge_0:s0_write
	wire   [31:0] mm_interconnect_0_bridge_0_s0_writedata;                                 // mm_interconnect_0:bridge_0_s0_writedata -> bridge_0:s0_writedata
	wire    [7:0] mm_interconnect_0_bridge_0_s0_burstcount;                                // mm_interconnect_0:bridge_0_s0_burstcount -> bridge_0:s0_burstcount
	wire   [31:0] mm_interconnect_0_bridge_3_s0_readdata;                                  // bridge_3:s0_readdata -> mm_interconnect_0:bridge_3_s0_readdata
	wire          mm_interconnect_0_bridge_3_s0_waitrequest;                               // bridge_3:s0_waitrequest -> mm_interconnect_0:bridge_3_s0_waitrequest
	wire          mm_interconnect_0_bridge_3_s0_debugaccess;                               // mm_interconnect_0:bridge_3_s0_debugaccess -> bridge_3:s0_debugaccess
	wire   [26:0] mm_interconnect_0_bridge_3_s0_address;                                   // mm_interconnect_0:bridge_3_s0_address -> bridge_3:s0_address
	wire          mm_interconnect_0_bridge_3_s0_read;                                      // mm_interconnect_0:bridge_3_s0_read -> bridge_3:s0_read
	wire    [3:0] mm_interconnect_0_bridge_3_s0_byteenable;                                // mm_interconnect_0:bridge_3_s0_byteenable -> bridge_3:s0_byteenable
	wire          mm_interconnect_0_bridge_3_s0_readdatavalid;                             // bridge_3:s0_readdatavalid -> mm_interconnect_0:bridge_3_s0_readdatavalid
	wire          mm_interconnect_0_bridge_3_s0_write;                                     // mm_interconnect_0:bridge_3_s0_write -> bridge_3:s0_write
	wire   [31:0] mm_interconnect_0_bridge_3_s0_writedata;                                 // mm_interconnect_0:bridge_3_s0_writedata -> bridge_3:s0_writedata
	wire    [0:0] mm_interconnect_0_bridge_3_s0_burstcount;                                // mm_interconnect_0:bridge_3_s0_burstcount -> bridge_3:s0_burstcount
	wire   [31:0] mm_interconnect_0_bridge_2_s0_readdata;                                  // bridge_2:s0_readdata -> mm_interconnect_0:bridge_2_s0_readdata
	wire          mm_interconnect_0_bridge_2_s0_waitrequest;                               // bridge_2:s0_waitrequest -> mm_interconnect_0:bridge_2_s0_waitrequest
	wire          mm_interconnect_0_bridge_2_s0_debugaccess;                               // mm_interconnect_0:bridge_2_s0_debugaccess -> bridge_2:s0_debugaccess
	wire    [5:0] mm_interconnect_0_bridge_2_s0_address;                                   // mm_interconnect_0:bridge_2_s0_address -> bridge_2:s0_address
	wire          mm_interconnect_0_bridge_2_s0_read;                                      // mm_interconnect_0:bridge_2_s0_read -> bridge_2:s0_read
	wire    [3:0] mm_interconnect_0_bridge_2_s0_byteenable;                                // mm_interconnect_0:bridge_2_s0_byteenable -> bridge_2:s0_byteenable
	wire          mm_interconnect_0_bridge_2_s0_readdatavalid;                             // bridge_2:s0_readdatavalid -> mm_interconnect_0:bridge_2_s0_readdatavalid
	wire          mm_interconnect_0_bridge_2_s0_write;                                     // mm_interconnect_0:bridge_2_s0_write -> bridge_2:s0_write
	wire   [31:0] mm_interconnect_0_bridge_2_s0_writedata;                                 // mm_interconnect_0:bridge_2_s0_writedata -> bridge_2:s0_writedata
	wire    [0:0] mm_interconnect_0_bridge_2_s0_burstcount;                                // mm_interconnect_0:bridge_2_s0_burstcount -> bridge_2:s0_burstcount
	wire   [31:0] mm_interconnect_0_bridge_1_s0_readdata;                                  // bridge_1:s0_readdata -> mm_interconnect_0:bridge_1_s0_readdata
	wire          mm_interconnect_0_bridge_1_s0_waitrequest;                               // bridge_1:s0_waitrequest -> mm_interconnect_0:bridge_1_s0_waitrequest
	wire          mm_interconnect_0_bridge_1_s0_debugaccess;                               // mm_interconnect_0:bridge_1_s0_debugaccess -> bridge_1:s0_debugaccess
	wire   [11:0] mm_interconnect_0_bridge_1_s0_address;                                   // mm_interconnect_0:bridge_1_s0_address -> bridge_1:s0_address
	wire          mm_interconnect_0_bridge_1_s0_read;                                      // mm_interconnect_0:bridge_1_s0_read -> bridge_1:s0_read
	wire    [3:0] mm_interconnect_0_bridge_1_s0_byteenable;                                // mm_interconnect_0:bridge_1_s0_byteenable -> bridge_1:s0_byteenable
	wire          mm_interconnect_0_bridge_1_s0_readdatavalid;                             // bridge_1:s0_readdatavalid -> mm_interconnect_0:bridge_1_s0_readdatavalid
	wire          mm_interconnect_0_bridge_1_s0_write;                                     // mm_interconnect_0:bridge_1_s0_write -> bridge_1:s0_write
	wire   [31:0] mm_interconnect_0_bridge_1_s0_writedata;                                 // mm_interconnect_0:bridge_1_s0_writedata -> bridge_1:s0_writedata
	wire    [2:0] mm_interconnect_0_bridge_1_s0_burstcount;                                // mm_interconnect_0:bridge_1_s0_burstcount -> bridge_1:s0_burstcount
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect;                     // mm_interconnect_0:mcu_subsystem_ram_0_s1_chipselect -> mcu_subsystem_ram_0:chipselect
	wire   [31:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata;                       // mcu_subsystem_ram_0:readdata -> mm_interconnect_0:mcu_subsystem_ram_0_s1_readdata
	wire   [14:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_address;                        // mm_interconnect_0:mcu_subsystem_ram_0_s1_address -> mcu_subsystem_ram_0:address
	wire    [3:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable;                     // mm_interconnect_0:mcu_subsystem_ram_0_s1_byteenable -> mcu_subsystem_ram_0:byteenable
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_write;                          // mm_interconnect_0:mcu_subsystem_ram_0_s1_write -> mcu_subsystem_ram_0:write
	wire   [31:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata;                      // mm_interconnect_0:mcu_subsystem_ram_0_s1_writedata -> mcu_subsystem_ram_0:writedata
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_clken;                          // mm_interconnect_0:mcu_subsystem_ram_0_s1_clken -> mcu_subsystem_ram_0:clken
	wire          mm_interconnect_0_timer_1_s1_chipselect;                                 // mm_interconnect_0:timer_1_s1_chipselect -> timer_1:chipselect
	wire   [15:0] mm_interconnect_0_timer_1_s1_readdata;                                   // timer_1:readdata -> mm_interconnect_0:timer_1_s1_readdata
	wire    [2:0] mm_interconnect_0_timer_1_s1_address;                                    // mm_interconnect_0:timer_1_s1_address -> timer_1:address
	wire          mm_interconnect_0_timer_1_s1_write;                                      // mm_interconnect_0:timer_1_s1_write -> timer_1:write_n
	wire   [15:0] mm_interconnect_0_timer_1_s1_writedata;                                  // mm_interconnect_0:timer_1_s1_writedata -> timer_1:writedata
	wire          mm_interconnect_0_timer_0_s1_chipselect;                                 // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire   [15:0] mm_interconnect_0_timer_0_s1_readdata;                                   // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire    [2:0] mm_interconnect_0_timer_0_s1_address;                                    // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire          mm_interconnect_0_timer_0_s1_write;                                      // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire   [15:0] mm_interconnect_0_timer_0_s1_writedata;                                  // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire          mm_interconnect_0_fmc_gpio_s1_chipselect;                                // mm_interconnect_0:fmc_gpio_s1_chipselect -> fmc_gpio:chipselect
	wire   [31:0] mm_interconnect_0_fmc_gpio_s1_readdata;                                  // fmc_gpio:readdata -> mm_interconnect_0:fmc_gpio_s1_readdata
	wire    [2:0] mm_interconnect_0_fmc_gpio_s1_address;                                   // mm_interconnect_0:fmc_gpio_s1_address -> fmc_gpio:address
	wire          mm_interconnect_0_fmc_gpio_s1_write;                                     // mm_interconnect_0:fmc_gpio_s1_write -> fmc_gpio:write_n
	wire   [31:0] mm_interconnect_0_fmc_gpio_s1_writedata;                                 // mm_interconnect_0:fmc_gpio_s1_writedata -> fmc_gpio:writedata
	wire   [15:0] mm_interconnect_0_ad9144_core_s_axi_awaddr;                              // mm_interconnect_0:ad9144_core_s_axi_awaddr -> ad9144_core:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_core_s_axi_bresp;                               // ad9144_core:s_axi_bresp -> mm_interconnect_0:ad9144_core_s_axi_bresp
	wire          mm_interconnect_0_ad9144_core_s_axi_arready;                             // ad9144_core:s_axi_arready -> mm_interconnect_0:ad9144_core_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9144_core_s_axi_rdata;                               // ad9144_core:s_axi_rdata -> mm_interconnect_0:ad9144_core_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9144_core_s_axi_wstrb;                               // mm_interconnect_0:ad9144_core_s_axi_wstrb -> ad9144_core:s_axi_wstrb
	wire          mm_interconnect_0_ad9144_core_s_axi_wready;                              // ad9144_core:s_axi_wready -> mm_interconnect_0:ad9144_core_s_axi_wready
	wire          mm_interconnect_0_ad9144_core_s_axi_awready;                             // ad9144_core:s_axi_awready -> mm_interconnect_0:ad9144_core_s_axi_awready
	wire          mm_interconnect_0_ad9144_core_s_axi_rready;                              // mm_interconnect_0:ad9144_core_s_axi_rready -> ad9144_core:s_axi_rready
	wire          mm_interconnect_0_ad9144_core_s_axi_bready;                              // mm_interconnect_0:ad9144_core_s_axi_bready -> ad9144_core:s_axi_bready
	wire          mm_interconnect_0_ad9144_core_s_axi_wvalid;                              // mm_interconnect_0:ad9144_core_s_axi_wvalid -> ad9144_core:s_axi_wvalid
	wire   [15:0] mm_interconnect_0_ad9144_core_s_axi_araddr;                              // mm_interconnect_0:ad9144_core_s_axi_araddr -> ad9144_core:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9144_core_s_axi_arprot;                              // mm_interconnect_0:ad9144_core_s_axi_arprot -> ad9144_core:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9144_core_s_axi_rresp;                               // ad9144_core:s_axi_rresp -> mm_interconnect_0:ad9144_core_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9144_core_s_axi_awprot;                              // mm_interconnect_0:ad9144_core_s_axi_awprot -> ad9144_core:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9144_core_s_axi_wdata;                               // mm_interconnect_0:ad9144_core_s_axi_wdata -> ad9144_core:s_axi_wdata
	wire          mm_interconnect_0_ad9144_core_s_axi_arvalid;                             // mm_interconnect_0:ad9144_core_s_axi_arvalid -> ad9144_core:s_axi_arvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_bvalid;                              // ad9144_core:s_axi_bvalid -> mm_interconnect_0:ad9144_core_s_axi_bvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_awvalid;                             // mm_interconnect_0:ad9144_core_s_axi_awvalid -> ad9144_core:s_axi_awvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_rvalid;                              // ad9144_core:s_axi_rvalid -> mm_interconnect_0:ad9144_core_s_axi_rvalid
	wire   [11:0] mm_interconnect_0_ad9144_dma_s_axi_awaddr;                               // mm_interconnect_0:ad9144_dma_s_axi_awaddr -> ad9144_dma:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_dma_s_axi_bresp;                                // ad9144_dma:s_axi_bresp -> mm_interconnect_0:ad9144_dma_s_axi_bresp
	wire          mm_interconnect_0_ad9144_dma_s_axi_arready;                              // ad9144_dma:s_axi_arready -> mm_interconnect_0:ad9144_dma_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9144_dma_s_axi_rdata;                                // ad9144_dma:s_axi_rdata -> mm_interconnect_0:ad9144_dma_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9144_dma_s_axi_wstrb;                                // mm_interconnect_0:ad9144_dma_s_axi_wstrb -> ad9144_dma:s_axi_wstrb
	wire          mm_interconnect_0_ad9144_dma_s_axi_wready;                               // ad9144_dma:s_axi_wready -> mm_interconnect_0:ad9144_dma_s_axi_wready
	wire          mm_interconnect_0_ad9144_dma_s_axi_awready;                              // ad9144_dma:s_axi_awready -> mm_interconnect_0:ad9144_dma_s_axi_awready
	wire          mm_interconnect_0_ad9144_dma_s_axi_rready;                               // mm_interconnect_0:ad9144_dma_s_axi_rready -> ad9144_dma:s_axi_rready
	wire          mm_interconnect_0_ad9144_dma_s_axi_bready;                               // mm_interconnect_0:ad9144_dma_s_axi_bready -> ad9144_dma:s_axi_bready
	wire          mm_interconnect_0_ad9144_dma_s_axi_wvalid;                               // mm_interconnect_0:ad9144_dma_s_axi_wvalid -> ad9144_dma:s_axi_wvalid
	wire   [11:0] mm_interconnect_0_ad9144_dma_s_axi_araddr;                               // mm_interconnect_0:ad9144_dma_s_axi_araddr -> ad9144_dma:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9144_dma_s_axi_arprot;                               // mm_interconnect_0:ad9144_dma_s_axi_arprot -> ad9144_dma:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9144_dma_s_axi_rresp;                                // ad9144_dma:s_axi_rresp -> mm_interconnect_0:ad9144_dma_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9144_dma_s_axi_awprot;                               // mm_interconnect_0:ad9144_dma_s_axi_awprot -> ad9144_dma:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9144_dma_s_axi_wdata;                                // mm_interconnect_0:ad9144_dma_s_axi_wdata -> ad9144_dma:s_axi_wdata
	wire          mm_interconnect_0_ad9144_dma_s_axi_arvalid;                              // mm_interconnect_0:ad9144_dma_s_axi_arvalid -> ad9144_dma:s_axi_arvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_bvalid;                               // ad9144_dma:s_axi_bvalid -> mm_interconnect_0:ad9144_dma_s_axi_bvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_awvalid;                              // mm_interconnect_0:ad9144_dma_s_axi_awvalid -> ad9144_dma:s_axi_awvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_rvalid;                               // ad9144_dma:s_axi_rvalid -> mm_interconnect_0:ad9144_dma_s_axi_rvalid
	wire   [15:0] mm_interconnect_0_ad9680_core_s_axi_awaddr;                              // mm_interconnect_0:ad9680_core_s_axi_awaddr -> ad9680_core:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_core_s_axi_bresp;                               // ad9680_core:s_axi_bresp -> mm_interconnect_0:ad9680_core_s_axi_bresp
	wire          mm_interconnect_0_ad9680_core_s_axi_arready;                             // ad9680_core:s_axi_arready -> mm_interconnect_0:ad9680_core_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9680_core_s_axi_rdata;                               // ad9680_core:s_axi_rdata -> mm_interconnect_0:ad9680_core_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9680_core_s_axi_wstrb;                               // mm_interconnect_0:ad9680_core_s_axi_wstrb -> ad9680_core:s_axi_wstrb
	wire          mm_interconnect_0_ad9680_core_s_axi_wready;                              // ad9680_core:s_axi_wready -> mm_interconnect_0:ad9680_core_s_axi_wready
	wire          mm_interconnect_0_ad9680_core_s_axi_awready;                             // ad9680_core:s_axi_awready -> mm_interconnect_0:ad9680_core_s_axi_awready
	wire          mm_interconnect_0_ad9680_core_s_axi_rready;                              // mm_interconnect_0:ad9680_core_s_axi_rready -> ad9680_core:s_axi_rready
	wire          mm_interconnect_0_ad9680_core_s_axi_bready;                              // mm_interconnect_0:ad9680_core_s_axi_bready -> ad9680_core:s_axi_bready
	wire          mm_interconnect_0_ad9680_core_s_axi_wvalid;                              // mm_interconnect_0:ad9680_core_s_axi_wvalid -> ad9680_core:s_axi_wvalid
	wire   [15:0] mm_interconnect_0_ad9680_core_s_axi_araddr;                              // mm_interconnect_0:ad9680_core_s_axi_araddr -> ad9680_core:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9680_core_s_axi_arprot;                              // mm_interconnect_0:ad9680_core_s_axi_arprot -> ad9680_core:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9680_core_s_axi_rresp;                               // ad9680_core:s_axi_rresp -> mm_interconnect_0:ad9680_core_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9680_core_s_axi_awprot;                              // mm_interconnect_0:ad9680_core_s_axi_awprot -> ad9680_core:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9680_core_s_axi_wdata;                               // mm_interconnect_0:ad9680_core_s_axi_wdata -> ad9680_core:s_axi_wdata
	wire          mm_interconnect_0_ad9680_core_s_axi_arvalid;                             // mm_interconnect_0:ad9680_core_s_axi_arvalid -> ad9680_core:s_axi_arvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_bvalid;                              // ad9680_core:s_axi_bvalid -> mm_interconnect_0:ad9680_core_s_axi_bvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_awvalid;                             // mm_interconnect_0:ad9680_core_s_axi_awvalid -> ad9680_core:s_axi_awvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_rvalid;                              // ad9680_core:s_axi_rvalid -> mm_interconnect_0:ad9680_core_s_axi_rvalid
	wire   [11:0] mm_interconnect_0_ad9680_dma_s_axi_awaddr;                               // mm_interconnect_0:ad9680_dma_s_axi_awaddr -> ad9680_dma:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_dma_s_axi_bresp;                                // ad9680_dma:s_axi_bresp -> mm_interconnect_0:ad9680_dma_s_axi_bresp
	wire          mm_interconnect_0_ad9680_dma_s_axi_arready;                              // ad9680_dma:s_axi_arready -> mm_interconnect_0:ad9680_dma_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9680_dma_s_axi_rdata;                                // ad9680_dma:s_axi_rdata -> mm_interconnect_0:ad9680_dma_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9680_dma_s_axi_wstrb;                                // mm_interconnect_0:ad9680_dma_s_axi_wstrb -> ad9680_dma:s_axi_wstrb
	wire          mm_interconnect_0_ad9680_dma_s_axi_wready;                               // ad9680_dma:s_axi_wready -> mm_interconnect_0:ad9680_dma_s_axi_wready
	wire          mm_interconnect_0_ad9680_dma_s_axi_awready;                              // ad9680_dma:s_axi_awready -> mm_interconnect_0:ad9680_dma_s_axi_awready
	wire          mm_interconnect_0_ad9680_dma_s_axi_rready;                               // mm_interconnect_0:ad9680_dma_s_axi_rready -> ad9680_dma:s_axi_rready
	wire          mm_interconnect_0_ad9680_dma_s_axi_bready;                               // mm_interconnect_0:ad9680_dma_s_axi_bready -> ad9680_dma:s_axi_bready
	wire          mm_interconnect_0_ad9680_dma_s_axi_wvalid;                               // mm_interconnect_0:ad9680_dma_s_axi_wvalid -> ad9680_dma:s_axi_wvalid
	wire   [11:0] mm_interconnect_0_ad9680_dma_s_axi_araddr;                               // mm_interconnect_0:ad9680_dma_s_axi_araddr -> ad9680_dma:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9680_dma_s_axi_arprot;                               // mm_interconnect_0:ad9680_dma_s_axi_arprot -> ad9680_dma:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9680_dma_s_axi_rresp;                                // ad9680_dma:s_axi_rresp -> mm_interconnect_0:ad9680_dma_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9680_dma_s_axi_awprot;                               // mm_interconnect_0:ad9680_dma_s_axi_awprot -> ad9680_dma:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9680_dma_s_axi_wdata;                                // mm_interconnect_0:ad9680_dma_s_axi_wdata -> ad9680_dma:s_axi_wdata
	wire          mm_interconnect_0_ad9680_dma_s_axi_arvalid;                              // mm_interconnect_0:ad9680_dma_s_axi_arvalid -> ad9680_dma:s_axi_arvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_bvalid;                               // ad9680_dma:s_axi_bvalid -> mm_interconnect_0:ad9680_dma_s_axi_bvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_awvalid;                              // mm_interconnect_0:ad9680_dma_s_axi_awvalid -> ad9680_dma:s_axi_awvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_rvalid;                               // ad9680_dma:s_axi_rvalid -> mm_interconnect_0:ad9680_dma_s_axi_rvalid
	wire   [31:0] mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_readdata;    // phy_interlaken_0:serial_clock_reconfig_s0_readdata -> mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_readdata
	wire          mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_waitrequest; // phy_interlaken_0:serial_clock_reconfig_s0_waitrequest -> mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_waitrequest
	wire    [9:0] mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_address;     // mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_address -> phy_interlaken_0:serial_clock_reconfig_s0_address
	wire          mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_read;        // mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_read -> phy_interlaken_0:serial_clock_reconfig_s0_read
	wire          mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_write;       // mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_write -> phy_interlaken_0:serial_clock_reconfig_s0_write
	wire   [31:0] mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_writedata;   // mm_interconnect_0:phy_interlaken_0_serial_clock_reconfig_s0_writedata -> phy_interlaken_0:serial_clock_reconfig_s0_writedata
	wire   [31:0] mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_readdata;    // phy_interlaken_1:serial_clock_reconfig_s0_readdata -> mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_readdata
	wire          mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_waitrequest; // phy_interlaken_1:serial_clock_reconfig_s0_waitrequest -> mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_waitrequest
	wire    [9:0] mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_address;     // mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_address -> phy_interlaken_1:serial_clock_reconfig_s0_address
	wire          mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_read;        // mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_read -> phy_interlaken_1:serial_clock_reconfig_s0_read
	wire          mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_write;       // mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_write -> phy_interlaken_1:serial_clock_reconfig_s0_write
	wire   [31:0] mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_writedata;   // mm_interconnect_0:phy_interlaken_1_serial_clock_reconfig_s0_writedata -> phy_interlaken_1:serial_clock_reconfig_s0_writedata
	wire          mm_interconnect_0_fmc_spi_spi_control_port_chipselect;                   // mm_interconnect_0:fmc_spi_spi_control_port_chipselect -> fmc_spi:spi_select
	wire   [15:0] mm_interconnect_0_fmc_spi_spi_control_port_readdata;                     // fmc_spi:data_to_cpu -> mm_interconnect_0:fmc_spi_spi_control_port_readdata
	wire    [2:0] mm_interconnect_0_fmc_spi_spi_control_port_address;                      // mm_interconnect_0:fmc_spi_spi_control_port_address -> fmc_spi:mem_addr
	wire          mm_interconnect_0_fmc_spi_spi_control_port_read;                         // mm_interconnect_0:fmc_spi_spi_control_port_read -> fmc_spi:read_n
	wire          mm_interconnect_0_fmc_spi_spi_control_port_write;                        // mm_interconnect_0:fmc_spi_spi_control_port_write -> fmc_spi:write_n
	wire   [15:0] mm_interconnect_0_fmc_spi_spi_control_port_writedata;                    // mm_interconnect_0:fmc_spi_spi_control_port_writedata -> fmc_spi:data_from_cpu
	wire          bridge_2_m0_waitrequest;                                                 // mm_interconnect_1:bridge_2_m0_waitrequest -> bridge_2:m0_waitrequest
	wire   [31:0] bridge_2_m0_readdata;                                                    // mm_interconnect_1:bridge_2_m0_readdata -> bridge_2:m0_readdata
	wire          bridge_2_m0_debugaccess;                                                 // bridge_2:m0_debugaccess -> mm_interconnect_1:bridge_2_m0_debugaccess
	wire    [5:0] bridge_2_m0_address;                                                     // bridge_2:m0_address -> mm_interconnect_1:bridge_2_m0_address
	wire          bridge_2_m0_read;                                                        // bridge_2:m0_read -> mm_interconnect_1:bridge_2_m0_read
	wire    [3:0] bridge_2_m0_byteenable;                                                  // bridge_2:m0_byteenable -> mm_interconnect_1:bridge_2_m0_byteenable
	wire          bridge_2_m0_readdatavalid;                                               // mm_interconnect_1:bridge_2_m0_readdatavalid -> bridge_2:m0_readdatavalid
	wire   [31:0] bridge_2_m0_writedata;                                                   // bridge_2:m0_writedata -> mm_interconnect_1:bridge_2_m0_writedata
	wire          bridge_2_m0_write;                                                       // bridge_2:m0_write -> mm_interconnect_1:bridge_2_m0_write
	wire    [0:0] bridge_2_m0_burstcount;                                                  // bridge_2:m0_burstcount -> mm_interconnect_1:bridge_2_m0_burstcount
	wire   [31:0] mm_interconnect_1_qspi_controller2_0_avl_csr_readdata;                   // qspi_controller2_0:avl_csr_rddata -> mm_interconnect_1:qspi_controller2_0_avl_csr_readdata
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest;                // qspi_controller2_0:avl_csr_waitrequest -> mm_interconnect_1:qspi_controller2_0_avl_csr_waitrequest
	wire    [3:0] mm_interconnect_1_qspi_controller2_0_avl_csr_address;                    // mm_interconnect_1:qspi_controller2_0_avl_csr_address -> qspi_controller2_0:avl_csr_addr
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_read;                       // mm_interconnect_1:qspi_controller2_0_avl_csr_read -> qspi_controller2_0:avl_csr_read
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid;              // qspi_controller2_0:avl_csr_rddata_valid -> mm_interconnect_1:qspi_controller2_0_avl_csr_readdatavalid
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_write;                      // mm_interconnect_1:qspi_controller2_0_avl_csr_write -> qspi_controller2_0:avl_csr_write
	wire   [31:0] mm_interconnect_1_qspi_controller2_0_avl_csr_writedata;                  // mm_interconnect_1:qspi_controller2_0_avl_csr_writedata -> qspi_controller2_0:avl_csr_wrdata
	wire          bridge_3_m0_waitrequest;                                                 // mm_interconnect_2:bridge_3_m0_waitrequest -> bridge_3:m0_waitrequest
	wire   [31:0] bridge_3_m0_readdata;                                                    // mm_interconnect_2:bridge_3_m0_readdata -> bridge_3:m0_readdata
	wire          bridge_3_m0_debugaccess;                                                 // bridge_3:m0_debugaccess -> mm_interconnect_2:bridge_3_m0_debugaccess
	wire   [26:0] bridge_3_m0_address;                                                     // bridge_3:m0_address -> mm_interconnect_2:bridge_3_m0_address
	wire          bridge_3_m0_read;                                                        // bridge_3:m0_read -> mm_interconnect_2:bridge_3_m0_read
	wire    [3:0] bridge_3_m0_byteenable;                                                  // bridge_3:m0_byteenable -> mm_interconnect_2:bridge_3_m0_byteenable
	wire          bridge_3_m0_readdatavalid;                                               // mm_interconnect_2:bridge_3_m0_readdatavalid -> bridge_3:m0_readdatavalid
	wire   [31:0] bridge_3_m0_writedata;                                                   // bridge_3:m0_writedata -> mm_interconnect_2:bridge_3_m0_writedata
	wire          bridge_3_m0_write;                                                       // bridge_3:m0_write -> mm_interconnect_2:bridge_3_m0_write
	wire    [0:0] bridge_3_m0_burstcount;                                                  // bridge_3:m0_burstcount -> mm_interconnect_2:bridge_3_m0_burstcount
	wire   [31:0] mm_interconnect_2_qspi_controller2_0_avl_mem_readdata;                   // qspi_controller2_0:avl_mem_rddata -> mm_interconnect_2:qspi_controller2_0_avl_mem_readdata
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest;                // qspi_controller2_0:avl_mem_waitrequest -> mm_interconnect_2:qspi_controller2_0_avl_mem_waitrequest
	wire   [24:0] mm_interconnect_2_qspi_controller2_0_avl_mem_address;                    // mm_interconnect_2:qspi_controller2_0_avl_mem_address -> qspi_controller2_0:avl_mem_addr
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_read;                       // mm_interconnect_2:qspi_controller2_0_avl_mem_read -> qspi_controller2_0:avl_mem_read
	wire    [3:0] mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable;                 // mm_interconnect_2:qspi_controller2_0_avl_mem_byteenable -> qspi_controller2_0:avl_mem_byteenable
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid;              // qspi_controller2_0:avl_mem_rddata_valid -> mm_interconnect_2:qspi_controller2_0_avl_mem_readdatavalid
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_write;                      // mm_interconnect_2:qspi_controller2_0_avl_mem_write -> qspi_controller2_0:avl_mem_write
	wire   [31:0] mm_interconnect_2_qspi_controller2_0_avl_mem_writedata;                  // mm_interconnect_2:qspi_controller2_0_avl_mem_writedata -> qspi_controller2_0:avl_mem_wrdata
	wire    [6:0] mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount;                 // mm_interconnect_2:qspi_controller2_0_avl_mem_burstcount -> qspi_controller2_0:avl_mem_burstcount
	wire          bridge_0_m0_waitrequest;                                                 // mm_interconnect_3:bridge_0_m0_waitrequest -> bridge_0:m0_waitrequest
	wire   [31:0] bridge_0_m0_readdata;                                                    // mm_interconnect_3:bridge_0_m0_readdata -> bridge_0:m0_readdata
	wire          bridge_0_m0_debugaccess;                                                 // bridge_0:m0_debugaccess -> mm_interconnect_3:bridge_0_m0_debugaccess
	wire   [30:0] bridge_0_m0_address;                                                     // bridge_0:m0_address -> mm_interconnect_3:bridge_0_m0_address
	wire          bridge_0_m0_read;                                                        // bridge_0:m0_read -> mm_interconnect_3:bridge_0_m0_read
	wire    [3:0] bridge_0_m0_byteenable;                                                  // bridge_0:m0_byteenable -> mm_interconnect_3:bridge_0_m0_byteenable
	wire          bridge_0_m0_readdatavalid;                                               // mm_interconnect_3:bridge_0_m0_readdatavalid -> bridge_0:m0_readdatavalid
	wire   [31:0] bridge_0_m0_writedata;                                                   // bridge_0:m0_writedata -> mm_interconnect_3:bridge_0_m0_writedata
	wire          bridge_0_m0_write;                                                       // bridge_0:m0_write -> mm_interconnect_3:bridge_0_m0_write
	wire    [7:0] bridge_0_m0_burstcount;                                                  // bridge_0:m0_burstcount -> mm_interconnect_3:bridge_0_m0_burstcount
	wire    [1:0] ad9680_dma_m_dest_axi_awburst;                                           // ad9680_dma:m_dest_axi_awburst -> mm_interconnect_3:ad9680_dma_m_dest_axi_awburst
	wire    [3:0] ad9680_dma_m_dest_axi_arlen;                                             // ad9680_dma:m_dest_axi_arlen -> mm_interconnect_3:ad9680_dma_m_dest_axi_arlen
	wire   [15:0] ad9680_dma_m_dest_axi_wstrb;                                             // ad9680_dma:m_dest_axi_wstrb -> mm_interconnect_3:ad9680_dma_m_dest_axi_wstrb
	wire          ad9680_dma_m_dest_axi_wready;                                            // mm_interconnect_3:ad9680_dma_m_dest_axi_wready -> ad9680_dma:m_dest_axi_wready
	wire          ad9680_dma_m_dest_axi_rid;                                               // mm_interconnect_3:ad9680_dma_m_dest_axi_rid -> ad9680_dma:m_dest_axi_rid
	wire          ad9680_dma_m_dest_axi_rready;                                            // ad9680_dma:m_dest_axi_rready -> mm_interconnect_3:ad9680_dma_m_dest_axi_rready
	wire    [3:0] ad9680_dma_m_dest_axi_awlen;                                             // ad9680_dma:m_dest_axi_awlen -> mm_interconnect_3:ad9680_dma_m_dest_axi_awlen
	wire          ad9680_dma_m_dest_axi_wid;                                               // ad9680_dma:m_dest_axi_wid -> mm_interconnect_3:ad9680_dma_m_dest_axi_wid
	wire    [3:0] ad9680_dma_m_dest_axi_arcache;                                           // ad9680_dma:m_dest_axi_arcache -> mm_interconnect_3:ad9680_dma_m_dest_axi_arcache
	wire          ad9680_dma_m_dest_axi_wvalid;                                            // ad9680_dma:m_dest_axi_wvalid -> mm_interconnect_3:ad9680_dma_m_dest_axi_wvalid
	wire   [31:0] ad9680_dma_m_dest_axi_araddr;                                            // ad9680_dma:m_dest_axi_araddr -> mm_interconnect_3:ad9680_dma_m_dest_axi_araddr
	wire    [2:0] ad9680_dma_m_dest_axi_arprot;                                            // ad9680_dma:m_dest_axi_arprot -> mm_interconnect_3:ad9680_dma_m_dest_axi_arprot
	wire  [127:0] ad9680_dma_m_dest_axi_wdata;                                             // ad9680_dma:m_dest_axi_wdata -> mm_interconnect_3:ad9680_dma_m_dest_axi_wdata
	wire          ad9680_dma_m_dest_axi_arvalid;                                           // ad9680_dma:m_dest_axi_arvalid -> mm_interconnect_3:ad9680_dma_m_dest_axi_arvalid
	wire    [2:0] ad9680_dma_m_dest_axi_awprot;                                            // ad9680_dma:m_dest_axi_awprot -> mm_interconnect_3:ad9680_dma_m_dest_axi_awprot
	wire    [3:0] ad9680_dma_m_dest_axi_awcache;                                           // ad9680_dma:m_dest_axi_awcache -> mm_interconnect_3:ad9680_dma_m_dest_axi_awcache
	wire          ad9680_dma_m_dest_axi_arid;                                              // ad9680_dma:m_dest_axi_arid -> mm_interconnect_3:ad9680_dma_m_dest_axi_arid
	wire    [1:0] ad9680_dma_m_dest_axi_arlock;                                            // ad9680_dma:m_dest_axi_arlock -> mm_interconnect_3:ad9680_dma_m_dest_axi_arlock
	wire    [1:0] ad9680_dma_m_dest_axi_awlock;                                            // ad9680_dma:m_dest_axi_awlock -> mm_interconnect_3:ad9680_dma_m_dest_axi_awlock
	wire   [31:0] ad9680_dma_m_dest_axi_awaddr;                                            // ad9680_dma:m_dest_axi_awaddr -> mm_interconnect_3:ad9680_dma_m_dest_axi_awaddr
	wire    [1:0] ad9680_dma_m_dest_axi_bresp;                                             // mm_interconnect_3:ad9680_dma_m_dest_axi_bresp -> ad9680_dma:m_dest_axi_bresp
	wire          ad9680_dma_m_dest_axi_arready;                                           // mm_interconnect_3:ad9680_dma_m_dest_axi_arready -> ad9680_dma:m_dest_axi_arready
	wire  [127:0] ad9680_dma_m_dest_axi_rdata;                                             // mm_interconnect_3:ad9680_dma_m_dest_axi_rdata -> ad9680_dma:m_dest_axi_rdata
	wire          ad9680_dma_m_dest_axi_awready;                                           // mm_interconnect_3:ad9680_dma_m_dest_axi_awready -> ad9680_dma:m_dest_axi_awready
	wire    [1:0] ad9680_dma_m_dest_axi_arburst;                                           // ad9680_dma:m_dest_axi_arburst -> mm_interconnect_3:ad9680_dma_m_dest_axi_arburst
	wire    [2:0] ad9680_dma_m_dest_axi_arsize;                                            // ad9680_dma:m_dest_axi_arsize -> mm_interconnect_3:ad9680_dma_m_dest_axi_arsize
	wire          ad9680_dma_m_dest_axi_bready;                                            // ad9680_dma:m_dest_axi_bready -> mm_interconnect_3:ad9680_dma_m_dest_axi_bready
	wire          ad9680_dma_m_dest_axi_rlast;                                             // mm_interconnect_3:ad9680_dma_m_dest_axi_rlast -> ad9680_dma:m_dest_axi_rlast
	wire          ad9680_dma_m_dest_axi_wlast;                                             // ad9680_dma:m_dest_axi_wlast -> mm_interconnect_3:ad9680_dma_m_dest_axi_wlast
	wire    [1:0] ad9680_dma_m_dest_axi_rresp;                                             // mm_interconnect_3:ad9680_dma_m_dest_axi_rresp -> ad9680_dma:m_dest_axi_rresp
	wire          ad9680_dma_m_dest_axi_awid;                                              // ad9680_dma:m_dest_axi_awid -> mm_interconnect_3:ad9680_dma_m_dest_axi_awid
	wire          ad9680_dma_m_dest_axi_bid;                                               // mm_interconnect_3:ad9680_dma_m_dest_axi_bid -> ad9680_dma:m_dest_axi_bid
	wire          ad9680_dma_m_dest_axi_bvalid;                                            // mm_interconnect_3:ad9680_dma_m_dest_axi_bvalid -> ad9680_dma:m_dest_axi_bvalid
	wire          ad9680_dma_m_dest_axi_awvalid;                                           // ad9680_dma:m_dest_axi_awvalid -> mm_interconnect_3:ad9680_dma_m_dest_axi_awvalid
	wire          ad9680_dma_m_dest_axi_rvalid;                                            // mm_interconnect_3:ad9680_dma_m_dest_axi_rvalid -> ad9680_dma:m_dest_axi_rvalid
	wire    [2:0] ad9680_dma_m_dest_axi_awsize;                                            // ad9680_dma:m_dest_axi_awsize -> mm_interconnect_3:ad9680_dma_m_dest_axi_awsize
	wire    [1:0] ad9144_dma_m_src_axi_awburst;                                            // ad9144_dma:m_src_axi_awburst -> mm_interconnect_3:ad9144_dma_m_src_axi_awburst
	wire    [3:0] ad9144_dma_m_src_axi_arlen;                                              // ad9144_dma:m_src_axi_arlen -> mm_interconnect_3:ad9144_dma_m_src_axi_arlen
	wire   [15:0] ad9144_dma_m_src_axi_wstrb;                                              // ad9144_dma:m_src_axi_wstrb -> mm_interconnect_3:ad9144_dma_m_src_axi_wstrb
	wire          ad9144_dma_m_src_axi_wready;                                             // mm_interconnect_3:ad9144_dma_m_src_axi_wready -> ad9144_dma:m_src_axi_wready
	wire          ad9144_dma_m_src_axi_rid;                                                // mm_interconnect_3:ad9144_dma_m_src_axi_rid -> ad9144_dma:m_src_axi_rid
	wire          ad9144_dma_m_src_axi_rready;                                             // ad9144_dma:m_src_axi_rready -> mm_interconnect_3:ad9144_dma_m_src_axi_rready
	wire    [3:0] ad9144_dma_m_src_axi_awlen;                                              // ad9144_dma:m_src_axi_awlen -> mm_interconnect_3:ad9144_dma_m_src_axi_awlen
	wire          ad9144_dma_m_src_axi_wid;                                                // ad9144_dma:m_src_axi_wid -> mm_interconnect_3:ad9144_dma_m_src_axi_wid
	wire    [3:0] ad9144_dma_m_src_axi_arcache;                                            // ad9144_dma:m_src_axi_arcache -> mm_interconnect_3:ad9144_dma_m_src_axi_arcache
	wire          ad9144_dma_m_src_axi_wvalid;                                             // ad9144_dma:m_src_axi_wvalid -> mm_interconnect_3:ad9144_dma_m_src_axi_wvalid
	wire   [31:0] ad9144_dma_m_src_axi_araddr;                                             // ad9144_dma:m_src_axi_araddr -> mm_interconnect_3:ad9144_dma_m_src_axi_araddr
	wire    [2:0] ad9144_dma_m_src_axi_arprot;                                             // ad9144_dma:m_src_axi_arprot -> mm_interconnect_3:ad9144_dma_m_src_axi_arprot
	wire  [127:0] ad9144_dma_m_src_axi_wdata;                                              // ad9144_dma:m_src_axi_wdata -> mm_interconnect_3:ad9144_dma_m_src_axi_wdata
	wire          ad9144_dma_m_src_axi_arvalid;                                            // ad9144_dma:m_src_axi_arvalid -> mm_interconnect_3:ad9144_dma_m_src_axi_arvalid
	wire    [2:0] ad9144_dma_m_src_axi_awprot;                                             // ad9144_dma:m_src_axi_awprot -> mm_interconnect_3:ad9144_dma_m_src_axi_awprot
	wire    [3:0] ad9144_dma_m_src_axi_awcache;                                            // ad9144_dma:m_src_axi_awcache -> mm_interconnect_3:ad9144_dma_m_src_axi_awcache
	wire          ad9144_dma_m_src_axi_arid;                                               // ad9144_dma:m_src_axi_arid -> mm_interconnect_3:ad9144_dma_m_src_axi_arid
	wire    [1:0] ad9144_dma_m_src_axi_arlock;                                             // ad9144_dma:m_src_axi_arlock -> mm_interconnect_3:ad9144_dma_m_src_axi_arlock
	wire    [1:0] ad9144_dma_m_src_axi_awlock;                                             // ad9144_dma:m_src_axi_awlock -> mm_interconnect_3:ad9144_dma_m_src_axi_awlock
	wire   [31:0] ad9144_dma_m_src_axi_awaddr;                                             // ad9144_dma:m_src_axi_awaddr -> mm_interconnect_3:ad9144_dma_m_src_axi_awaddr
	wire    [1:0] ad9144_dma_m_src_axi_bresp;                                              // mm_interconnect_3:ad9144_dma_m_src_axi_bresp -> ad9144_dma:m_src_axi_bresp
	wire          ad9144_dma_m_src_axi_arready;                                            // mm_interconnect_3:ad9144_dma_m_src_axi_arready -> ad9144_dma:m_src_axi_arready
	wire  [127:0] ad9144_dma_m_src_axi_rdata;                                              // mm_interconnect_3:ad9144_dma_m_src_axi_rdata -> ad9144_dma:m_src_axi_rdata
	wire          ad9144_dma_m_src_axi_awready;                                            // mm_interconnect_3:ad9144_dma_m_src_axi_awready -> ad9144_dma:m_src_axi_awready
	wire    [1:0] ad9144_dma_m_src_axi_arburst;                                            // ad9144_dma:m_src_axi_arburst -> mm_interconnect_3:ad9144_dma_m_src_axi_arburst
	wire    [2:0] ad9144_dma_m_src_axi_arsize;                                             // ad9144_dma:m_src_axi_arsize -> mm_interconnect_3:ad9144_dma_m_src_axi_arsize
	wire          ad9144_dma_m_src_axi_bready;                                             // ad9144_dma:m_src_axi_bready -> mm_interconnect_3:ad9144_dma_m_src_axi_bready
	wire          ad9144_dma_m_src_axi_rlast;                                              // mm_interconnect_3:ad9144_dma_m_src_axi_rlast -> ad9144_dma:m_src_axi_rlast
	wire          ad9144_dma_m_src_axi_wlast;                                              // ad9144_dma:m_src_axi_wlast -> mm_interconnect_3:ad9144_dma_m_src_axi_wlast
	wire    [1:0] ad9144_dma_m_src_axi_rresp;                                              // mm_interconnect_3:ad9144_dma_m_src_axi_rresp -> ad9144_dma:m_src_axi_rresp
	wire          ad9144_dma_m_src_axi_awid;                                               // ad9144_dma:m_src_axi_awid -> mm_interconnect_3:ad9144_dma_m_src_axi_awid
	wire          ad9144_dma_m_src_axi_bid;                                                // mm_interconnect_3:ad9144_dma_m_src_axi_bid -> ad9144_dma:m_src_axi_bid
	wire          ad9144_dma_m_src_axi_bvalid;                                             // mm_interconnect_3:ad9144_dma_m_src_axi_bvalid -> ad9144_dma:m_src_axi_bvalid
	wire          ad9144_dma_m_src_axi_awvalid;                                            // ad9144_dma:m_src_axi_awvalid -> mm_interconnect_3:ad9144_dma_m_src_axi_awvalid
	wire          ad9144_dma_m_src_axi_rvalid;                                             // mm_interconnect_3:ad9144_dma_m_src_axi_rvalid -> ad9144_dma:m_src_axi_rvalid
	wire    [2:0] ad9144_dma_m_src_axi_awsize;                                             // ad9144_dma:m_src_axi_awsize -> mm_interconnect_3:ad9144_dma_m_src_axi_awsize
	wire  [255:0] mm_interconnect_3_sdram_ctrl_amm_0_readdata;                             // sdram:amm_readdata_0 -> mm_interconnect_3:sdram_ctrl_amm_0_readdata
	wire          mm_interconnect_3_sdram_ctrl_amm_0_waitrequest;                          // sdram:amm_ready_0 -> mm_interconnect_3:sdram_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_3_sdram_ctrl_amm_0_address;                              // mm_interconnect_3:sdram_ctrl_amm_0_address -> sdram:amm_address_0
	wire          mm_interconnect_3_sdram_ctrl_amm_0_read;                                 // mm_interconnect_3:sdram_ctrl_amm_0_read -> sdram:amm_read_0
	wire   [31:0] mm_interconnect_3_sdram_ctrl_amm_0_byteenable;                           // mm_interconnect_3:sdram_ctrl_amm_0_byteenable -> sdram:amm_byteenable_0
	wire          mm_interconnect_3_sdram_ctrl_amm_0_readdatavalid;                        // sdram:amm_readdatavalid_0 -> mm_interconnect_3:sdram_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_3_sdram_ctrl_amm_0_write;                                // mm_interconnect_3:sdram_ctrl_amm_0_write -> sdram:amm_write_0
	wire  [255:0] mm_interconnect_3_sdram_ctrl_amm_0_writedata;                            // mm_interconnect_3:sdram_ctrl_amm_0_writedata -> sdram:amm_writedata_0
	wire    [6:0] mm_interconnect_3_sdram_ctrl_amm_0_burstcount;                           // mm_interconnect_3:sdram_ctrl_amm_0_burstcount -> sdram:amm_burstcount_0
	wire          bridge_1_m0_waitrequest;                                                 // mm_interconnect_4:bridge_1_m0_waitrequest -> bridge_1:m0_waitrequest
	wire   [31:0] bridge_1_m0_readdata;                                                    // mm_interconnect_4:bridge_1_m0_readdata -> bridge_1:m0_readdata
	wire          bridge_1_m0_debugaccess;                                                 // bridge_1:m0_debugaccess -> mm_interconnect_4:bridge_1_m0_debugaccess
	wire   [11:0] bridge_1_m0_address;                                                     // bridge_1:m0_address -> mm_interconnect_4:bridge_1_m0_address
	wire          bridge_1_m0_read;                                                        // bridge_1:m0_read -> mm_interconnect_4:bridge_1_m0_read
	wire    [3:0] bridge_1_m0_byteenable;                                                  // bridge_1:m0_byteenable -> mm_interconnect_4:bridge_1_m0_byteenable
	wire          bridge_1_m0_readdatavalid;                                               // mm_interconnect_4:bridge_1_m0_readdatavalid -> bridge_1:m0_readdatavalid
	wire   [31:0] bridge_1_m0_writedata;                                                   // bridge_1:m0_writedata -> mm_interconnect_4:bridge_1_m0_writedata
	wire          bridge_1_m0_write;                                                       // bridge_1:m0_write -> mm_interconnect_4:bridge_1_m0_write
	wire    [2:0] bridge_1_m0_burstcount;                                                  // bridge_1:m0_burstcount -> mm_interconnect_4:bridge_1_m0_burstcount
	wire          mm_interconnect_4_sdram_ctrl_mmr_slave_0_beginbursttransfer;             // mm_interconnect_4:sdram_ctrl_mmr_slave_0_beginbursttransfer -> sdram:mmr_slave_beginbursttransfer_0
	wire   [31:0] mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdata;                       // sdram:mmr_slave_readdata_0 -> mm_interconnect_4:sdram_ctrl_mmr_slave_0_readdata
	wire          mm_interconnect_4_sdram_ctrl_mmr_slave_0_waitrequest;                    // sdram:mmr_slave_waitrequest_0 -> mm_interconnect_4:sdram_ctrl_mmr_slave_0_waitrequest
	wire    [9:0] mm_interconnect_4_sdram_ctrl_mmr_slave_0_address;                        // mm_interconnect_4:sdram_ctrl_mmr_slave_0_address -> sdram:mmr_slave_address_0
	wire          mm_interconnect_4_sdram_ctrl_mmr_slave_0_read;                           // mm_interconnect_4:sdram_ctrl_mmr_slave_0_read -> sdram:mmr_slave_read_0
	wire          mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdatavalid;                  // sdram:mmr_slave_readdatavalid_0 -> mm_interconnect_4:sdram_ctrl_mmr_slave_0_readdatavalid
	wire          mm_interconnect_4_sdram_ctrl_mmr_slave_0_write;                          // mm_interconnect_4:sdram_ctrl_mmr_slave_0_write -> sdram:mmr_slave_write_0
	wire   [31:0] mm_interconnect_4_sdram_ctrl_mmr_slave_0_writedata;                      // mm_interconnect_4:sdram_ctrl_mmr_slave_0_writedata -> sdram:mmr_slave_writedata_0
	wire    [1:0] mm_interconnect_4_sdram_ctrl_mmr_slave_0_burstcount;                     // mm_interconnect_4:sdram_ctrl_mmr_slave_0_burstcount -> sdram:mmr_slave_burstcount_0
	wire          irq_mapper_receiver0_irq;                                                // ad9144_jesd204:interrupt_irq -> irq_mapper:receiver0_irq
	wire          irq_mapper_receiver1_irq;                                                // ad9680_jesd204:interrupt_irq -> irq_mapper:receiver1_irq
	wire          irq_mapper_receiver3_irq;                                                // ad9144_dma:irq -> irq_mapper:receiver3_irq
	wire          irq_mapper_receiver4_irq;                                                // ad9680_dma:irq -> irq_mapper:receiver4_irq
	wire          irq_mapper_receiver5_irq;                                                // fmc_i2c:intr -> irq_mapper:receiver5_irq
	wire          irq_mapper_receiver6_irq;                                                // jtag_uart_0:av_irq -> irq_mapper:receiver6_irq
	wire          irq_mapper_receiver7_irq;                                                // timer_1:irq -> irq_mapper:receiver7_irq
	wire          irq_mapper_receiver8_irq;                                                // timer_0:irq -> irq_mapper:receiver8_irq
	wire          irq_mapper_receiver9_irq;                                                // fmc_spi:irq -> irq_mapper:receiver9_irq
	wire          irq_mapper_receiver10_irq;                                               // fmc_gpio:irq -> irq_mapper:receiver10_irq
	wire          irq_mapper_receiver11_irq;                                               // phy_interlaken_0:phy_data_irq_rx_irq -> irq_mapper:receiver11_irq
	wire          irq_mapper_receiver12_irq;                                               // phy_interlaken_1:phy_data_irq_rx_irq -> irq_mapper:receiver12_irq
	wire          irq_mapper_receiver13_irq;                                               // phy_interlaken_0:phy_data_irq_tx_irq -> irq_mapper:receiver13_irq
	wire          irq_mapper_receiver14_irq;                                               // phy_interlaken_1:phy_data_irq_tx_irq -> irq_mapper:receiver14_irq
	wire   [31:0] mcu_subsystem_cpu_0_irq_irq;                                             // irq_mapper:sender_irq -> mcu_subsystem_cpu_0:irq
	wire          irq_mapper_receiver2_irq;                                                // irq_synchronizer:sender_irq -> irq_mapper:receiver2_irq
	wire    [0:0] irq_synchronizer_receiver_irq;                                           // qspi_controller2_0:irq -> irq_synchronizer:receiver_irq
	wire          ad9680_jesd204_link_data_valid;                                          // ad9680_jesd204:link_data_valid -> avalon_st_adapter:in_0_valid
	wire  [127:0] ad9680_jesd204_link_data_data;                                           // ad9680_jesd204:link_data_data -> avalon_st_adapter:in_0_data
	wire          avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> ad9680_core:rx_valid
	wire  [127:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> ad9680_core:rx_data
	wire          avalon_st_adapter_out_0_ready;                                           // ad9680_core:rx_ready -> avalon_st_adapter:out_0_ready
	wire          rst_controller_reset_out_reset;                                          // rst_controller:reset_out -> [ad9144_core:s_axi_aresetn, ad9144_dma:s_axi_aresetn, ad9144_jesd204:sys_resetn_reset_n, ad9680_core:s_axi_aresetn, ad9680_dma:s_axi_aresetn, ad9680_jesd204:sys_resetn_reset_n, avl_adxcfg_0:rcfg_reset_n, avl_adxcfg_1:rcfg_reset_n, avl_adxcfg_2:rcfg_reset_n, avl_adxcfg_3:rcfg_reset_n, bridge_0:s0_reset, bridge_1:s0_reset, bridge_2:m0_reset, bridge_3:m0_reset, dbg_reset_out:in_reset, fmc_gpio:reset_n, irq_mapper:reset, irq_synchronizer:sender_reset, mcu_subsystem_cpu_0:reset_n, mm_interconnect_0:mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:bridge_2_m0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:bridge_3_m0_reset_reset_bridge_in_reset_reset, phy_interlaken_0:reset_reset, rst_translator:in_reset, timer_0:reset_n, timer_1:reset_n]
	wire          rst_controller_reset_out_reset_req;                                      // rst_controller:reset_req -> [mcu_subsystem_cpu_0:reset_req, rst_translator:reset_req_in]
	wire          reset_in_out_reset_reset;                                                // reset_in:out_reset_n -> [rst_controller:reset_in1, rst_controller_004:reset_in1, rst_controller_005:reset_in1, rst_controller_006:reset_in0, rst_controller_007:reset_in1]
	wire          rst_controller_001_reset_out_reset;                                      // rst_controller_001:reset_out -> [ad9144_dacfifo:dma_rst, bridge_0:m0_reset, bridge_1:m0_reset, mm_interconnect_3:bridge_0_m0_reset_reset_bridge_in_reset_reset, mm_interconnect_4:bridge_1_m0_reset_reset_bridge_in_reset_reset]
	wire          sdram_emif_usr_reset_n_reset;                                            // sdram:emif_usr_reset_n -> [rst_controller_001:reset_in0, rst_controller_003:reset_in0]
	wire          rst_controller_002_reset_out_reset;                                      // rst_controller_002:reset_out -> ad9144_dacfifo:dac_rst
	wire          ad9144_jesd204_link_reset_reset;                                         // ad9144_jesd204:link_reset_reset -> rst_controller_002:reset_in0
	wire          rst_controller_003_reset_out_reset;                                      // rst_controller_003:reset_out -> [ad9144_dma:m_src_axi_aresetn, ad9680_dma:m_dest_axi_aresetn, mm_interconnect_3:ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_004_reset_out_reset;                                      // rst_controller_004:reset_out -> [ad9680_adcfifo:adc_rst, ad9680_cpack:adc_rst, avalon_st_adapter:in_rst_0_reset]
	wire          rst_controller_005_reset_out_reset;                                      // rst_controller_005:reset_out -> [bridge_2:s0_reset, bridge_3:s0_reset, irq_synchronizer:receiver_reset, mm_interconnect_0:bridge_3_s0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:qspi_controller2_0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:qspi_controller2_0_reset_reset_bridge_in_reset_reset, qspi_controller2_0:reset_n]
	wire          rst_controller_006_reset_out_reset;                                      // rst_controller_006:reset_out -> [fmc_i2c:rst_n, fmc_spi:reset_n, jtag_uart_0:rst_n, mcu_subsystem_ram_0:reset, mm_interconnect_0:phy_interlaken_1_reset_reset_bridge_in_reset_reset, phy_interlaken_1:reset_reset, rst_translator_001:in_reset]
	wire          rst_controller_006_reset_out_reset_req;                                  // rst_controller_006:reset_req -> [mcu_subsystem_ram_0:reset_req, rst_translator_001:reset_req_in]
	wire          rst_controller_007_reset_out_reset;                                      // rst_controller_007:reset_out -> sdram:global_reset_n

	mcu_subsystem_axi_ad9144_0 ad9144_core (
		.s_axi_aclk    (clock_in_out_clk_clk),                        //   input,    width = 1, s_axi_clock.clk
		.s_axi_aresetn (~rst_controller_reset_out_reset),             //   input,    width = 1, s_axi_reset.reset_n
		.s_axi_awvalid (mm_interconnect_0_ad9144_core_s_axi_awvalid), //   input,    width = 1,       s_axi.awvalid
		.s_axi_awaddr  (mm_interconnect_0_ad9144_core_s_axi_awaddr),  //   input,   width = 16,            .awaddr
		.s_axi_awprot  (mm_interconnect_0_ad9144_core_s_axi_awprot),  //   input,    width = 3,            .awprot
		.s_axi_awready (mm_interconnect_0_ad9144_core_s_axi_awready), //  output,    width = 1,            .awready
		.s_axi_wvalid  (mm_interconnect_0_ad9144_core_s_axi_wvalid),  //   input,    width = 1,            .wvalid
		.s_axi_wdata   (mm_interconnect_0_ad9144_core_s_axi_wdata),   //   input,   width = 32,            .wdata
		.s_axi_wstrb   (mm_interconnect_0_ad9144_core_s_axi_wstrb),   //   input,    width = 4,            .wstrb
		.s_axi_wready  (mm_interconnect_0_ad9144_core_s_axi_wready),  //  output,    width = 1,            .wready
		.s_axi_bvalid  (mm_interconnect_0_ad9144_core_s_axi_bvalid),  //  output,    width = 1,            .bvalid
		.s_axi_bresp   (mm_interconnect_0_ad9144_core_s_axi_bresp),   //  output,    width = 2,            .bresp
		.s_axi_bready  (mm_interconnect_0_ad9144_core_s_axi_bready),  //   input,    width = 1,            .bready
		.s_axi_arvalid (mm_interconnect_0_ad9144_core_s_axi_arvalid), //   input,    width = 1,            .arvalid
		.s_axi_araddr  (mm_interconnect_0_ad9144_core_s_axi_araddr),  //   input,   width = 16,            .araddr
		.s_axi_arprot  (mm_interconnect_0_ad9144_core_s_axi_arprot),  //   input,    width = 3,            .arprot
		.s_axi_arready (mm_interconnect_0_ad9144_core_s_axi_arready), //  output,    width = 1,            .arready
		.s_axi_rvalid  (mm_interconnect_0_ad9144_core_s_axi_rvalid),  //  output,    width = 1,            .rvalid
		.s_axi_rresp   (mm_interconnect_0_ad9144_core_s_axi_rresp),   //  output,    width = 2,            .rresp
		.s_axi_rdata   (mm_interconnect_0_ad9144_core_s_axi_rdata),   //  output,   width = 32,            .rdata
		.s_axi_rready  (mm_interconnect_0_ad9144_core_s_axi_rready),  //   input,    width = 1,            .rready
		.tx_clk        (ad9144_jesd204_link_clk_clk),                 //   input,    width = 1,   if_tx_clk.clk
		.tx_data       (ad9144_core_if_tx_data_data),                 //  output,  width = 128,  if_tx_data.data
		.tx_valid      (ad9144_core_if_tx_data_valid),                //  output,    width = 1,            .valid
		.tx_ready      (ad9144_core_if_tx_data_ready),                //   input,    width = 1,            .ready
		.dac_clk       (),                                            //  output,    width = 1,  if_dac_clk.clk
		.dac_enable_0  (ad9144_core_dac_ch_0_enable),                 //  output,    width = 1,    dac_ch_0.enable
		.dac_valid_0   (ad9144_core_dac_ch_0_valid),                  //  output,    width = 1,            .valid
		.dac_ddata_0   (ad9144_upack_dac_ch_0_data),                  //   input,   width = 64,            .data
		.dac_enable_1  (ad9144_core_dac_ch_1_enable),                 //  output,    width = 1,    dac_ch_1.enable
		.dac_valid_1   (ad9144_core_dac_ch_1_valid),                  //  output,    width = 1,            .valid
		.dac_ddata_1   (ad9144_upack_dac_ch_1_data),                  //   input,   width = 64,            .data
		.dac_dunf      (ad9144_dacfifo_if_dac_dunf_unf)               //   input,    width = 1, if_dac_dunf.unf
	);

	mcu_subsystem_util_dacfifo_0 ad9144_dacfifo (
		.dma_clk       (sdram_emif_usr_clk_clk),                 //   input,    width = 1,       if_dma_clk.clk
		.dma_rst       (rst_controller_001_reset_out_reset),     //   input,    width = 1,       if_dma_rst.reset
		.dma_valid     (ad9144_dma_if_m_axis_valid_valid),       //   input,    width = 1,     if_dma_valid.valid
		.dma_data      (ad9144_dma_if_m_axis_data_data),         //   input,  width = 128,      if_dma_data.data
		.dma_ready     (ad9144_dacfifo_if_dma_ready_ready),      //  output,    width = 1,     if_dma_ready.ready
		.dma_xfer_req  (ad9144_dma_if_m_axis_xfer_req_xfer_req), //   input,    width = 1,  if_dma_xfer_req.xfer_req
		.dma_xfer_last (ad9144_dma_if_m_axis_last_last),         //   input,    width = 1, if_dma_xfer_last.last
		.dac_clk       (ad9144_jesd204_link_clk_clk),            //   input,    width = 1,       if_dac_clk.clk
		.dac_rst       (rst_controller_002_reset_out_reset),     //   input,    width = 1,       if_dac_rst.reset
		.dac_valid     (ad9144_upack_if_dac_valid_valid),        //   input,    width = 1,     if_dac_valid.valid
		.dac_data      (ad9144_dacfifo_if_dac_data_data),        //  output,  width = 128,      if_dac_data.data
		.dac_xfer_out  (),                                       //  output,    width = 1,  if_dac_xfer_out.xfer_req
		.dac_dunf      (ad9144_dacfifo_if_dac_dunf_unf),         //  output,    width = 1,      if_dac_dunf.unf
		.bypass        (tx_fifo_bypass_bypass)                   //   input,    width = 1,        if_bypass.bypass
	);

	mcu_subsystem_axi_dmac_0 ad9144_dma (
		.s_axi_aclk        (clock_in_out_clk_clk),                       //   input,    width = 1,        s_axi_clock.clk
		.s_axi_aresetn     (~rst_controller_reset_out_reset),            //   input,    width = 1,        s_axi_reset.reset_n
		.s_axi_awvalid     (mm_interconnect_0_ad9144_dma_s_axi_awvalid), //   input,    width = 1,              s_axi.awvalid
		.s_axi_awaddr      (mm_interconnect_0_ad9144_dma_s_axi_awaddr),  //   input,   width = 12,                   .awaddr
		.s_axi_awprot      (mm_interconnect_0_ad9144_dma_s_axi_awprot),  //   input,    width = 3,                   .awprot
		.s_axi_awready     (mm_interconnect_0_ad9144_dma_s_axi_awready), //  output,    width = 1,                   .awready
		.s_axi_wvalid      (mm_interconnect_0_ad9144_dma_s_axi_wvalid),  //   input,    width = 1,                   .wvalid
		.s_axi_wdata       (mm_interconnect_0_ad9144_dma_s_axi_wdata),   //   input,   width = 32,                   .wdata
		.s_axi_wstrb       (mm_interconnect_0_ad9144_dma_s_axi_wstrb),   //   input,    width = 4,                   .wstrb
		.s_axi_wready      (mm_interconnect_0_ad9144_dma_s_axi_wready),  //  output,    width = 1,                   .wready
		.s_axi_bvalid      (mm_interconnect_0_ad9144_dma_s_axi_bvalid),  //  output,    width = 1,                   .bvalid
		.s_axi_bresp       (mm_interconnect_0_ad9144_dma_s_axi_bresp),   //  output,    width = 2,                   .bresp
		.s_axi_bready      (mm_interconnect_0_ad9144_dma_s_axi_bready),  //   input,    width = 1,                   .bready
		.s_axi_arvalid     (mm_interconnect_0_ad9144_dma_s_axi_arvalid), //   input,    width = 1,                   .arvalid
		.s_axi_araddr      (mm_interconnect_0_ad9144_dma_s_axi_araddr),  //   input,   width = 12,                   .araddr
		.s_axi_arprot      (mm_interconnect_0_ad9144_dma_s_axi_arprot),  //   input,    width = 3,                   .arprot
		.s_axi_arready     (mm_interconnect_0_ad9144_dma_s_axi_arready), //  output,    width = 1,                   .arready
		.s_axi_rvalid      (mm_interconnect_0_ad9144_dma_s_axi_rvalid),  //  output,    width = 1,                   .rvalid
		.s_axi_rresp       (mm_interconnect_0_ad9144_dma_s_axi_rresp),   //  output,    width = 2,                   .rresp
		.s_axi_rdata       (mm_interconnect_0_ad9144_dma_s_axi_rdata),   //  output,   width = 32,                   .rdata
		.s_axi_rready      (mm_interconnect_0_ad9144_dma_s_axi_rready),  //   input,    width = 1,                   .rready
		.irq               (irq_mapper_receiver3_irq),                   //  output,    width = 1,   interrupt_sender.irq
		.m_src_axi_aclk    (refclk_emif_out_clk_clk),                    //   input,    width = 1,    m_src_axi_clock.clk
		.m_src_axi_aresetn (~rst_controller_003_reset_out_reset),        //   input,    width = 1,    m_src_axi_reset.reset_n
		.m_axis_aclk       (refclk_emif_out_clk_clk),                    //   input,    width = 1,     if_m_axis_aclk.clk
		.m_axis_valid      (ad9144_dma_if_m_axis_valid_valid),           //  output,    width = 1,    if_m_axis_valid.valid
		.m_axis_data       (ad9144_dma_if_m_axis_data_data),             //  output,  width = 128,     if_m_axis_data.data
		.m_axis_ready      (ad9144_dacfifo_if_dma_ready_ready),          //   input,    width = 1,    if_m_axis_ready.ready
		.m_axis_last       (ad9144_dma_if_m_axis_last_last),             //  output,    width = 1,     if_m_axis_last.last
		.m_axis_xfer_req   (ad9144_dma_if_m_axis_xfer_req_xfer_req),     //  output,    width = 1, if_m_axis_xfer_req.xfer_req
		.m_src_axi_awvalid (ad9144_dma_m_src_axi_awvalid),               //  output,    width = 1,          m_src_axi.awvalid
		.m_src_axi_awaddr  (ad9144_dma_m_src_axi_awaddr),                //  output,   width = 32,                   .awaddr
		.m_src_axi_awready (ad9144_dma_m_src_axi_awready),               //   input,    width = 1,                   .awready
		.m_src_axi_wvalid  (ad9144_dma_m_src_axi_wvalid),                //  output,    width = 1,                   .wvalid
		.m_src_axi_wdata   (ad9144_dma_m_src_axi_wdata),                 //  output,  width = 128,                   .wdata
		.m_src_axi_wstrb   (ad9144_dma_m_src_axi_wstrb),                 //  output,   width = 16,                   .wstrb
		.m_src_axi_wready  (ad9144_dma_m_src_axi_wready),                //   input,    width = 1,                   .wready
		.m_src_axi_bvalid  (ad9144_dma_m_src_axi_bvalid),                //   input,    width = 1,                   .bvalid
		.m_src_axi_bresp   (ad9144_dma_m_src_axi_bresp),                 //   input,    width = 2,                   .bresp
		.m_src_axi_bready  (ad9144_dma_m_src_axi_bready),                //  output,    width = 1,                   .bready
		.m_src_axi_arvalid (ad9144_dma_m_src_axi_arvalid),               //  output,    width = 1,                   .arvalid
		.m_src_axi_araddr  (ad9144_dma_m_src_axi_araddr),                //  output,   width = 32,                   .araddr
		.m_src_axi_arready (ad9144_dma_m_src_axi_arready),               //   input,    width = 1,                   .arready
		.m_src_axi_rvalid  (ad9144_dma_m_src_axi_rvalid),                //   input,    width = 1,                   .rvalid
		.m_src_axi_rresp   (ad9144_dma_m_src_axi_rresp),                 //   input,    width = 2,                   .rresp
		.m_src_axi_rdata   (ad9144_dma_m_src_axi_rdata),                 //   input,  width = 128,                   .rdata
		.m_src_axi_rready  (ad9144_dma_m_src_axi_rready),                //  output,    width = 1,                   .rready
		.m_src_axi_awlen   (ad9144_dma_m_src_axi_awlen),                 //  output,    width = 4,                   .awlen
		.m_src_axi_awsize  (ad9144_dma_m_src_axi_awsize),                //  output,    width = 3,                   .awsize
		.m_src_axi_awburst (ad9144_dma_m_src_axi_awburst),               //  output,    width = 2,                   .awburst
		.m_src_axi_awcache (ad9144_dma_m_src_axi_awcache),               //  output,    width = 4,                   .awcache
		.m_src_axi_awprot  (ad9144_dma_m_src_axi_awprot),                //  output,    width = 3,                   .awprot
		.m_src_axi_wlast   (ad9144_dma_m_src_axi_wlast),                 //  output,    width = 1,                   .wlast
		.m_src_axi_arlen   (ad9144_dma_m_src_axi_arlen),                 //  output,    width = 4,                   .arlen
		.m_src_axi_arsize  (ad9144_dma_m_src_axi_arsize),                //  output,    width = 3,                   .arsize
		.m_src_axi_arburst (ad9144_dma_m_src_axi_arburst),               //  output,    width = 2,                   .arburst
		.m_src_axi_arcache (ad9144_dma_m_src_axi_arcache),               //  output,    width = 4,                   .arcache
		.m_src_axi_arprot  (ad9144_dma_m_src_axi_arprot),                //  output,    width = 3,                   .arprot
		.m_src_axi_awid    (ad9144_dma_m_src_axi_awid),                  //  output,    width = 1,                   .awid
		.m_src_axi_awlock  (ad9144_dma_m_src_axi_awlock),                //  output,    width = 2,                   .awlock
		.m_src_axi_wid     (ad9144_dma_m_src_axi_wid),                   //  output,    width = 1,                   .wid
		.m_src_axi_arid    (ad9144_dma_m_src_axi_arid),                  //  output,    width = 1,                   .arid
		.m_src_axi_arlock  (ad9144_dma_m_src_axi_arlock),                //  output,    width = 2,                   .arlock
		.m_src_axi_rid     (ad9144_dma_m_src_axi_rid),                   //   input,    width = 1,                   .rid
		.m_src_axi_bid     (ad9144_dma_m_src_axi_bid),                   //   input,    width = 1,                   .bid
		.m_src_axi_rlast   (ad9144_dma_m_src_axi_rlast)                  //   input,    width = 1,                   .rlast
	);

	mcu_subsystem_adi_jesd204_0 ad9144_jesd204 (
		.sys_clk_clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,           sys_clk.clk
		.sys_resetn_reset_n            (~rst_controller_reset_out_reset),                                //   input,    width = 1,        sys_resetn.reset_n
		.ref_clk_clk                   (tx_ref_clk_clk),                                                 //   input,    width = 1,           ref_clk.clk
		.link_pll_reconfig_write       (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write),       //   input,    width = 1, link_pll_reconfig.write
		.link_pll_reconfig_read        (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read),        //   input,    width = 1,                  .read
		.link_pll_reconfig_address     (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address),     //   input,   width = 10,                  .address
		.link_pll_reconfig_writedata   (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.link_pll_reconfig_readdata    (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.link_pll_reconfig_waitrequest (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_clk_clk                  (ad9144_jesd204_link_clk_clk),                                    //  output,    width = 1,          link_clk.clk
		.link_reset_reset              (ad9144_jesd204_link_reset_reset),                                //  output,    width = 1,        link_reset.reset
		.link_management_awvalid       (mm_interconnect_0_ad9144_jesd204_link_management_awvalid),       //   input,    width = 1,   link_management.awvalid
		.link_management_awaddr        (mm_interconnect_0_ad9144_jesd204_link_management_awaddr),        //   input,   width = 12,                  .awaddr
		.link_management_awprot        (mm_interconnect_0_ad9144_jesd204_link_management_awprot),        //   input,    width = 3,                  .awprot
		.link_management_awready       (mm_interconnect_0_ad9144_jesd204_link_management_awready),       //  output,    width = 1,                  .awready
		.link_management_wvalid        (mm_interconnect_0_ad9144_jesd204_link_management_wvalid),        //   input,    width = 1,                  .wvalid
		.link_management_wdata         (mm_interconnect_0_ad9144_jesd204_link_management_wdata),         //   input,   width = 32,                  .wdata
		.link_management_wstrb         (mm_interconnect_0_ad9144_jesd204_link_management_wstrb),         //   input,    width = 4,                  .wstrb
		.link_management_wready        (mm_interconnect_0_ad9144_jesd204_link_management_wready),        //  output,    width = 1,                  .wready
		.link_management_bvalid        (mm_interconnect_0_ad9144_jesd204_link_management_bvalid),        //  output,    width = 1,                  .bvalid
		.link_management_bresp         (mm_interconnect_0_ad9144_jesd204_link_management_bresp),         //  output,    width = 2,                  .bresp
		.link_management_bready        (mm_interconnect_0_ad9144_jesd204_link_management_bready),        //   input,    width = 1,                  .bready
		.link_management_arvalid       (mm_interconnect_0_ad9144_jesd204_link_management_arvalid),       //   input,    width = 1,                  .arvalid
		.link_management_araddr        (mm_interconnect_0_ad9144_jesd204_link_management_araddr),        //   input,   width = 12,                  .araddr
		.link_management_arprot        (mm_interconnect_0_ad9144_jesd204_link_management_arprot),        //   input,    width = 3,                  .arprot
		.link_management_arready       (mm_interconnect_0_ad9144_jesd204_link_management_arready),       //  output,    width = 1,                  .arready
		.link_management_rvalid        (mm_interconnect_0_ad9144_jesd204_link_management_rvalid),        //  output,    width = 1,                  .rvalid
		.link_management_rresp         (mm_interconnect_0_ad9144_jesd204_link_management_rresp),         //  output,    width = 2,                  .rresp
		.link_management_rdata         (mm_interconnect_0_ad9144_jesd204_link_management_rdata),         //  output,   width = 32,                  .rdata
		.link_management_rready        (mm_interconnect_0_ad9144_jesd204_link_management_rready),        //   input,    width = 1,                  .rready
		.serial_data_tx_serial_data    (tx_serial_data_tx_serial_data),                                  //  output,    width = 4,       serial_data.tx_serial_data
		.phy_reconfig_0_address        (avl_adxcfg_0_rcfg_m0_address),                                   //   input,   width = 10,    phy_reconfig_0.address
		.phy_reconfig_0_read           (avl_adxcfg_0_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_0_readdata       (avl_adxcfg_0_rcfg_m0_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_0_waitrequest    (avl_adxcfg_0_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_0_write          (avl_adxcfg_0_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_0_writedata      (avl_adxcfg_0_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_1_address        (avl_adxcfg_1_rcfg_m0_address),                                   //   input,   width = 10,    phy_reconfig_1.address
		.phy_reconfig_1_read           (avl_adxcfg_1_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_1_readdata       (avl_adxcfg_1_rcfg_m0_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_1_waitrequest    (avl_adxcfg_1_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_1_write          (avl_adxcfg_1_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_1_writedata      (avl_adxcfg_1_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_2_address        (avl_adxcfg_2_rcfg_m0_address),                                   //   input,   width = 10,    phy_reconfig_2.address
		.phy_reconfig_2_read           (avl_adxcfg_2_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_2_readdata       (avl_adxcfg_2_rcfg_m0_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_2_waitrequest    (avl_adxcfg_2_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_2_write          (avl_adxcfg_2_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_2_writedata      (avl_adxcfg_2_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_3_address        (avl_adxcfg_3_rcfg_m0_address),                                   //   input,   width = 10,    phy_reconfig_3.address
		.phy_reconfig_3_read           (avl_adxcfg_3_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_3_readdata       (avl_adxcfg_3_rcfg_m0_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_3_waitrequest    (avl_adxcfg_3_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_3_write          (avl_adxcfg_3_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_3_writedata      (avl_adxcfg_3_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.lane_pll_reconfig_write       (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write),       //   input,    width = 1, lane_pll_reconfig.write
		.lane_pll_reconfig_read        (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read),        //   input,    width = 1,                  .read
		.lane_pll_reconfig_address     (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address),     //   input,   width = 10,                  .address
		.lane_pll_reconfig_writedata   (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.lane_pll_reconfig_readdata    (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.lane_pll_reconfig_waitrequest (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_reconfig_awvalid         (mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid),         //   input,    width = 1,     link_reconfig.awvalid
		.link_reconfig_awaddr          (mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr),          //   input,   width = 14,                  .awaddr
		.link_reconfig_awprot          (mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot),          //   input,    width = 3,                  .awprot
		.link_reconfig_awready         (mm_interconnect_0_ad9144_jesd204_link_reconfig_awready),         //  output,    width = 1,                  .awready
		.link_reconfig_wvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid),          //   input,    width = 1,                  .wvalid
		.link_reconfig_wdata           (mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata),           //   input,   width = 32,                  .wdata
		.link_reconfig_wstrb           (mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb),           //   input,    width = 4,                  .wstrb
		.link_reconfig_wready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_wready),          //  output,    width = 1,                  .wready
		.link_reconfig_bvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid),          //  output,    width = 1,                  .bvalid
		.link_reconfig_bresp           (mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp),           //  output,    width = 2,                  .bresp
		.link_reconfig_bready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_bready),          //   input,    width = 1,                  .bready
		.link_reconfig_arvalid         (mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid),         //   input,    width = 1,                  .arvalid
		.link_reconfig_araddr          (mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr),          //   input,   width = 14,                  .araddr
		.link_reconfig_arprot          (mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot),          //   input,    width = 3,                  .arprot
		.link_reconfig_arready         (mm_interconnect_0_ad9144_jesd204_link_reconfig_arready),         //  output,    width = 1,                  .arready
		.link_reconfig_rvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid),          //  output,    width = 1,                  .rvalid
		.link_reconfig_rresp           (mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp),           //  output,    width = 2,                  .rresp
		.link_reconfig_rdata           (mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata),           //  output,   width = 32,                  .rdata
		.link_reconfig_rready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_rready),          //   input,    width = 1,                  .rready
		.interrupt_irq                 (irq_mapper_receiver0_irq),                                       //  output,    width = 1,         interrupt.irq
		.sysref_export                 (tx_sysref_export),                                               //   input,    width = 1,            sysref.export
		.sync_export                   (tx_sync_export),                                                 //   input,    width = 1,              sync.export
		.link_data_data                (ad9144_core_if_tx_data_data),                                    //   input,  width = 128,         link_data.data
		.link_data_ready               (ad9144_core_if_tx_data_ready),                                   //  output,    width = 1,                  .ready
		.link_data_valid               (ad9144_core_if_tx_data_valid)                                    //   input,    width = 1,                  .valid
	);

	mcu_subsystem_util_upack_0 ad9144_upack (
		.dac_clk         (ad9144_jesd204_link_clk_clk),     //   input,    width = 1,   if_dac_clk.clk
		.dac_valid       (ad9144_upack_if_dac_valid_valid), //  output,    width = 1, if_dac_valid.valid
		.dac_sync        (),                                //  output,    width = 1,  if_dac_sync.sync
		.dac_data        (ad9144_dacfifo_if_dac_data_data), //   input,  width = 128,  if_dac_data.data
		.dac_enable_0    (ad9144_core_dac_ch_0_enable),     //   input,    width = 1,     dac_ch_0.enable
		.dac_valid_0     (ad9144_core_dac_ch_0_valid),      //   input,    width = 1,             .valid
		.dac_valid_out_0 (),                                //  output,    width = 1,             .data_valid
		.dac_data_0      (ad9144_upack_dac_ch_0_data),      //  output,   width = 64,             .data
		.dac_enable_1    (ad9144_core_dac_ch_1_enable),     //   input,    width = 1,     dac_ch_1.enable
		.dac_valid_1     (ad9144_core_dac_ch_1_valid),      //   input,    width = 1,             .valid
		.dac_valid_out_1 (),                                //  output,    width = 1,             .data_valid
		.dac_data_1      (ad9144_upack_dac_ch_1_data)       //  output,   width = 64,             .data
	);

	mcu_subsystem_util_adcfifo_0 ad9680_adcfifo (
		.adc_clk         (ad9680_jesd204_link_clk_clk),            //   input,    width = 1,         if_adc_clk.clk
		.adc_rst         (rst_controller_004_reset_out_reset),     //   input,    width = 1,         if_adc_rst.reset
		.adc_wr          (ad9680_cpack_if_adc_valid_valid),        //   input,    width = 1,          if_adc_wr.valid
		.adc_wdata       (ad9680_cpack_if_adc_data_data),          //   input,  width = 128,       if_adc_wdata.data
		.adc_wovf        (ad9680_adcfifo_if_adc_wovf_ovf),         //  output,    width = 1,        if_adc_wovf.ovf
		.dma_clk         (refclk_emif_out_clk_clk),                //   input,    width = 1,         if_dma_clk.clk
		.dma_wr          (ad9680_adcfifo_if_dma_wr_valid),         //  output,    width = 1,          if_dma_wr.valid
		.dma_wdata       (ad9680_adcfifo_if_dma_wdata_data),       //  output,  width = 128,       if_dma_wdata.data
		.dma_wready      (ad9680_dma_if_s_axis_ready_ready),       //   input,    width = 1,      if_dma_wready.ready
		.dma_xfer_req    (ad9680_dma_if_s_axis_xfer_req_xfer_req), //   input,    width = 1,    if_dma_xfer_req.xfer_req
		.dma_xfer_status ()                                        //  output,    width = 4, if_dma_xfer_status.xfer_status
	);

	mcu_subsystem_axi_ad9680_0 ad9680_core (
		.s_axi_aclk    (clock_in_out_clk_clk),                        //   input,    width = 1, s_axi_clock.clk
		.s_axi_aresetn (~rst_controller_reset_out_reset),             //   input,    width = 1, s_axi_reset.reset_n
		.s_axi_awvalid (mm_interconnect_0_ad9680_core_s_axi_awvalid), //   input,    width = 1,       s_axi.awvalid
		.s_axi_awaddr  (mm_interconnect_0_ad9680_core_s_axi_awaddr),  //   input,   width = 16,            .awaddr
		.s_axi_awprot  (mm_interconnect_0_ad9680_core_s_axi_awprot),  //   input,    width = 3,            .awprot
		.s_axi_awready (mm_interconnect_0_ad9680_core_s_axi_awready), //  output,    width = 1,            .awready
		.s_axi_wvalid  (mm_interconnect_0_ad9680_core_s_axi_wvalid),  //   input,    width = 1,            .wvalid
		.s_axi_wdata   (mm_interconnect_0_ad9680_core_s_axi_wdata),   //   input,   width = 32,            .wdata
		.s_axi_wstrb   (mm_interconnect_0_ad9680_core_s_axi_wstrb),   //   input,    width = 4,            .wstrb
		.s_axi_wready  (mm_interconnect_0_ad9680_core_s_axi_wready),  //  output,    width = 1,            .wready
		.s_axi_bvalid  (mm_interconnect_0_ad9680_core_s_axi_bvalid),  //  output,    width = 1,            .bvalid
		.s_axi_bresp   (mm_interconnect_0_ad9680_core_s_axi_bresp),   //  output,    width = 2,            .bresp
		.s_axi_bready  (mm_interconnect_0_ad9680_core_s_axi_bready),  //   input,    width = 1,            .bready
		.s_axi_arvalid (mm_interconnect_0_ad9680_core_s_axi_arvalid), //   input,    width = 1,            .arvalid
		.s_axi_araddr  (mm_interconnect_0_ad9680_core_s_axi_araddr),  //   input,   width = 16,            .araddr
		.s_axi_arprot  (mm_interconnect_0_ad9680_core_s_axi_arprot),  //   input,    width = 3,            .arprot
		.s_axi_arready (mm_interconnect_0_ad9680_core_s_axi_arready), //  output,    width = 1,            .arready
		.s_axi_rvalid  (mm_interconnect_0_ad9680_core_s_axi_rvalid),  //  output,    width = 1,            .rvalid
		.s_axi_rresp   (mm_interconnect_0_ad9680_core_s_axi_rresp),   //  output,    width = 2,            .rresp
		.s_axi_rdata   (mm_interconnect_0_ad9680_core_s_axi_rdata),   //  output,   width = 32,            .rdata
		.s_axi_rready  (mm_interconnect_0_ad9680_core_s_axi_rready),  //   input,    width = 1,            .rready
		.rx_clk        (ad9680_jesd204_link_clk_clk),                 //   input,    width = 1,   if_rx_clk.clk
		.rx_sof        (ad9680_jesd204_link_sof_export),              //   input,    width = 4,   if_rx_sof.export
		.rx_data       (avalon_st_adapter_out_0_data),                //   input,  width = 128,  if_rx_data.data
		.rx_valid      (avalon_st_adapter_out_0_valid),               //   input,    width = 1,            .valid
		.rx_ready      (avalon_st_adapter_out_0_ready),               //  output,    width = 1,            .ready
		.adc_clk       (),                                            //  output,    width = 1,  if_adc_clk.clk
		.adc_enable_0  (ad9680_core_adc_ch_0_enable),                 //  output,    width = 1,    adc_ch_0.enable
		.adc_valid_0   (ad9680_core_adc_ch_0_valid),                  //  output,    width = 1,            .valid
		.adc_data_0    (ad9680_core_adc_ch_0_data),                   //  output,   width = 64,            .data
		.adc_enable_1  (ad9680_core_adc_ch_1_enable),                 //  output,    width = 1,    adc_ch_1.enable
		.adc_valid_1   (ad9680_core_adc_ch_1_valid),                  //  output,    width = 1,            .valid
		.adc_data_1    (ad9680_core_adc_ch_1_data),                   //  output,   width = 64,            .data
		.adc_dovf      (ad9680_adcfifo_if_adc_wovf_ovf)               //   input,    width = 1, if_adc_dovf.ovf
	);

	mcu_subsystem_util_cpack_0 ad9680_cpack (
		.adc_clk      (ad9680_jesd204_link_clk_clk),        //   input,    width = 1,   if_adc_clk.clk
		.adc_rst      (rst_controller_004_reset_out_reset), //   input,    width = 1,   if_adc_rst.reset
		.adc_valid    (ad9680_cpack_if_adc_valid_valid),    //  output,    width = 1, if_adc_valid.valid
		.adc_sync     (),                                   //  output,    width = 1,  if_adc_sync.sync
		.adc_data     (ad9680_cpack_if_adc_data_data),      //  output,  width = 128,  if_adc_data.data
		.adc_enable_0 (ad9680_core_adc_ch_0_enable),        //   input,    width = 1,     adc_ch_0.enable
		.adc_valid_0  (ad9680_core_adc_ch_0_valid),         //   input,    width = 1,             .valid
		.adc_data_0   (ad9680_core_adc_ch_0_data),          //   input,   width = 64,             .data
		.adc_enable_1 (ad9680_core_adc_ch_1_enable),        //   input,    width = 1,     adc_ch_1.enable
		.adc_valid_1  (ad9680_core_adc_ch_1_valid),         //   input,    width = 1,             .valid
		.adc_data_1   (ad9680_core_adc_ch_1_data)           //   input,   width = 64,             .data
	);

	mcu_subsystem_axi_dmac_1 ad9680_dma (
		.s_axi_aclk         (clock_in_out_clk_clk),                       //   input,    width = 1,        s_axi_clock.clk
		.s_axi_aresetn      (~rst_controller_reset_out_reset),            //   input,    width = 1,        s_axi_reset.reset_n
		.s_axi_awvalid      (mm_interconnect_0_ad9680_dma_s_axi_awvalid), //   input,    width = 1,              s_axi.awvalid
		.s_axi_awaddr       (mm_interconnect_0_ad9680_dma_s_axi_awaddr),  //   input,   width = 12,                   .awaddr
		.s_axi_awprot       (mm_interconnect_0_ad9680_dma_s_axi_awprot),  //   input,    width = 3,                   .awprot
		.s_axi_awready      (mm_interconnect_0_ad9680_dma_s_axi_awready), //  output,    width = 1,                   .awready
		.s_axi_wvalid       (mm_interconnect_0_ad9680_dma_s_axi_wvalid),  //   input,    width = 1,                   .wvalid
		.s_axi_wdata        (mm_interconnect_0_ad9680_dma_s_axi_wdata),   //   input,   width = 32,                   .wdata
		.s_axi_wstrb        (mm_interconnect_0_ad9680_dma_s_axi_wstrb),   //   input,    width = 4,                   .wstrb
		.s_axi_wready       (mm_interconnect_0_ad9680_dma_s_axi_wready),  //  output,    width = 1,                   .wready
		.s_axi_bvalid       (mm_interconnect_0_ad9680_dma_s_axi_bvalid),  //  output,    width = 1,                   .bvalid
		.s_axi_bresp        (mm_interconnect_0_ad9680_dma_s_axi_bresp),   //  output,    width = 2,                   .bresp
		.s_axi_bready       (mm_interconnect_0_ad9680_dma_s_axi_bready),  //   input,    width = 1,                   .bready
		.s_axi_arvalid      (mm_interconnect_0_ad9680_dma_s_axi_arvalid), //   input,    width = 1,                   .arvalid
		.s_axi_araddr       (mm_interconnect_0_ad9680_dma_s_axi_araddr),  //   input,   width = 12,                   .araddr
		.s_axi_arprot       (mm_interconnect_0_ad9680_dma_s_axi_arprot),  //   input,    width = 3,                   .arprot
		.s_axi_arready      (mm_interconnect_0_ad9680_dma_s_axi_arready), //  output,    width = 1,                   .arready
		.s_axi_rvalid       (mm_interconnect_0_ad9680_dma_s_axi_rvalid),  //  output,    width = 1,                   .rvalid
		.s_axi_rresp        (mm_interconnect_0_ad9680_dma_s_axi_rresp),   //  output,    width = 2,                   .rresp
		.s_axi_rdata        (mm_interconnect_0_ad9680_dma_s_axi_rdata),   //  output,   width = 32,                   .rdata
		.s_axi_rready       (mm_interconnect_0_ad9680_dma_s_axi_rready),  //   input,    width = 1,                   .rready
		.irq                (irq_mapper_receiver4_irq),                   //  output,    width = 1,   interrupt_sender.irq
		.m_dest_axi_aclk    (refclk_emif_out_clk_clk),                    //   input,    width = 1,   m_dest_axi_clock.clk
		.m_dest_axi_aresetn (~rst_controller_003_reset_out_reset),        //   input,    width = 1,   m_dest_axi_reset.reset_n
		.s_axis_aclk        (refclk_emif_out_clk_clk),                    //   input,    width = 1,     if_s_axis_aclk.clk
		.s_axis_valid       (ad9680_adcfifo_if_dma_wr_valid),             //   input,    width = 1,    if_s_axis_valid.valid
		.s_axis_data        (ad9680_adcfifo_if_dma_wdata_data),           //   input,  width = 128,     if_s_axis_data.data
		.s_axis_ready       (ad9680_dma_if_s_axis_ready_ready),           //  output,    width = 1,    if_s_axis_ready.ready
		.s_axis_xfer_req    (ad9680_dma_if_s_axis_xfer_req_xfer_req),     //  output,    width = 1, if_s_axis_xfer_req.xfer_req
		.m_dest_axi_awvalid (ad9680_dma_m_dest_axi_awvalid),              //  output,    width = 1,         m_dest_axi.awvalid
		.m_dest_axi_awaddr  (ad9680_dma_m_dest_axi_awaddr),               //  output,   width = 32,                   .awaddr
		.m_dest_axi_awready (ad9680_dma_m_dest_axi_awready),              //   input,    width = 1,                   .awready
		.m_dest_axi_wvalid  (ad9680_dma_m_dest_axi_wvalid),               //  output,    width = 1,                   .wvalid
		.m_dest_axi_wdata   (ad9680_dma_m_dest_axi_wdata),                //  output,  width = 128,                   .wdata
		.m_dest_axi_wstrb   (ad9680_dma_m_dest_axi_wstrb),                //  output,   width = 16,                   .wstrb
		.m_dest_axi_wready  (ad9680_dma_m_dest_axi_wready),               //   input,    width = 1,                   .wready
		.m_dest_axi_bvalid  (ad9680_dma_m_dest_axi_bvalid),               //   input,    width = 1,                   .bvalid
		.m_dest_axi_bresp   (ad9680_dma_m_dest_axi_bresp),                //   input,    width = 2,                   .bresp
		.m_dest_axi_bready  (ad9680_dma_m_dest_axi_bready),               //  output,    width = 1,                   .bready
		.m_dest_axi_arvalid (ad9680_dma_m_dest_axi_arvalid),              //  output,    width = 1,                   .arvalid
		.m_dest_axi_araddr  (ad9680_dma_m_dest_axi_araddr),               //  output,   width = 32,                   .araddr
		.m_dest_axi_arready (ad9680_dma_m_dest_axi_arready),              //   input,    width = 1,                   .arready
		.m_dest_axi_rvalid  (ad9680_dma_m_dest_axi_rvalid),               //   input,    width = 1,                   .rvalid
		.m_dest_axi_rresp   (ad9680_dma_m_dest_axi_rresp),                //   input,    width = 2,                   .rresp
		.m_dest_axi_rdata   (ad9680_dma_m_dest_axi_rdata),                //   input,  width = 128,                   .rdata
		.m_dest_axi_rready  (ad9680_dma_m_dest_axi_rready),               //  output,    width = 1,                   .rready
		.m_dest_axi_awlen   (ad9680_dma_m_dest_axi_awlen),                //  output,    width = 4,                   .awlen
		.m_dest_axi_awsize  (ad9680_dma_m_dest_axi_awsize),               //  output,    width = 3,                   .awsize
		.m_dest_axi_awburst (ad9680_dma_m_dest_axi_awburst),              //  output,    width = 2,                   .awburst
		.m_dest_axi_awcache (ad9680_dma_m_dest_axi_awcache),              //  output,    width = 4,                   .awcache
		.m_dest_axi_awprot  (ad9680_dma_m_dest_axi_awprot),               //  output,    width = 3,                   .awprot
		.m_dest_axi_wlast   (ad9680_dma_m_dest_axi_wlast),                //  output,    width = 1,                   .wlast
		.m_dest_axi_arlen   (ad9680_dma_m_dest_axi_arlen),                //  output,    width = 4,                   .arlen
		.m_dest_axi_arsize  (ad9680_dma_m_dest_axi_arsize),               //  output,    width = 3,                   .arsize
		.m_dest_axi_arburst (ad9680_dma_m_dest_axi_arburst),              //  output,    width = 2,                   .arburst
		.m_dest_axi_arcache (ad9680_dma_m_dest_axi_arcache),              //  output,    width = 4,                   .arcache
		.m_dest_axi_arprot  (ad9680_dma_m_dest_axi_arprot),               //  output,    width = 3,                   .arprot
		.m_dest_axi_awid    (ad9680_dma_m_dest_axi_awid),                 //  output,    width = 1,                   .awid
		.m_dest_axi_awlock  (ad9680_dma_m_dest_axi_awlock),               //  output,    width = 2,                   .awlock
		.m_dest_axi_wid     (ad9680_dma_m_dest_axi_wid),                  //  output,    width = 1,                   .wid
		.m_dest_axi_arid    (ad9680_dma_m_dest_axi_arid),                 //  output,    width = 1,                   .arid
		.m_dest_axi_arlock  (ad9680_dma_m_dest_axi_arlock),               //  output,    width = 2,                   .arlock
		.m_dest_axi_rid     (ad9680_dma_m_dest_axi_rid),                  //   input,    width = 1,                   .rid
		.m_dest_axi_bid     (ad9680_dma_m_dest_axi_bid),                  //   input,    width = 1,                   .bid
		.m_dest_axi_rlast   (ad9680_dma_m_dest_axi_rlast)                 //   input,    width = 1,                   .rlast
	);

	mcu_subsystem_adi_jesd204_1 ad9680_jesd204 (
		.sys_clk_clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,           sys_clk.clk
		.sys_resetn_reset_n            (~rst_controller_reset_out_reset),                                //   input,    width = 1,        sys_resetn.reset_n
		.ref_clk_clk                   (rx_ref_clk_clk),                                                 //   input,    width = 1,           ref_clk.clk
		.link_pll_reconfig_write       (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write),       //   input,    width = 1, link_pll_reconfig.write
		.link_pll_reconfig_read        (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read),        //   input,    width = 1,                  .read
		.link_pll_reconfig_address     (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address),     //   input,   width = 10,                  .address
		.link_pll_reconfig_writedata   (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.link_pll_reconfig_readdata    (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.link_pll_reconfig_waitrequest (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_clk_clk                  (ad9680_jesd204_link_clk_clk),                                    //  output,    width = 1,          link_clk.clk
		.link_reset_reset              (),                                                               //  output,    width = 1,        link_reset.reset
		.link_management_awvalid       (mm_interconnect_0_ad9680_jesd204_link_management_awvalid),       //   input,    width = 1,   link_management.awvalid
		.link_management_awaddr        (mm_interconnect_0_ad9680_jesd204_link_management_awaddr),        //   input,   width = 12,                  .awaddr
		.link_management_awprot        (mm_interconnect_0_ad9680_jesd204_link_management_awprot),        //   input,    width = 3,                  .awprot
		.link_management_awready       (mm_interconnect_0_ad9680_jesd204_link_management_awready),       //  output,    width = 1,                  .awready
		.link_management_wvalid        (mm_interconnect_0_ad9680_jesd204_link_management_wvalid),        //   input,    width = 1,                  .wvalid
		.link_management_wdata         (mm_interconnect_0_ad9680_jesd204_link_management_wdata),         //   input,   width = 32,                  .wdata
		.link_management_wstrb         (mm_interconnect_0_ad9680_jesd204_link_management_wstrb),         //   input,    width = 4,                  .wstrb
		.link_management_wready        (mm_interconnect_0_ad9680_jesd204_link_management_wready),        //  output,    width = 1,                  .wready
		.link_management_bvalid        (mm_interconnect_0_ad9680_jesd204_link_management_bvalid),        //  output,    width = 1,                  .bvalid
		.link_management_bresp         (mm_interconnect_0_ad9680_jesd204_link_management_bresp),         //  output,    width = 2,                  .bresp
		.link_management_bready        (mm_interconnect_0_ad9680_jesd204_link_management_bready),        //   input,    width = 1,                  .bready
		.link_management_arvalid       (mm_interconnect_0_ad9680_jesd204_link_management_arvalid),       //   input,    width = 1,                  .arvalid
		.link_management_araddr        (mm_interconnect_0_ad9680_jesd204_link_management_araddr),        //   input,   width = 12,                  .araddr
		.link_management_arprot        (mm_interconnect_0_ad9680_jesd204_link_management_arprot),        //   input,    width = 3,                  .arprot
		.link_management_arready       (mm_interconnect_0_ad9680_jesd204_link_management_arready),       //  output,    width = 1,                  .arready
		.link_management_rvalid        (mm_interconnect_0_ad9680_jesd204_link_management_rvalid),        //  output,    width = 1,                  .rvalid
		.link_management_rresp         (mm_interconnect_0_ad9680_jesd204_link_management_rresp),         //  output,    width = 2,                  .rresp
		.link_management_rdata         (mm_interconnect_0_ad9680_jesd204_link_management_rdata),         //  output,   width = 32,                  .rdata
		.link_management_rready        (mm_interconnect_0_ad9680_jesd204_link_management_rready),        //   input,    width = 1,                  .rready
		.serial_data_rx_serial_data    (rx_serial_data_rx_serial_data),                                  //   input,    width = 4,       serial_data.rx_serial_data
		.phy_reconfig_0_address        (avl_adxcfg_0_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_0.address
		.phy_reconfig_0_read           (avl_adxcfg_0_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_0_readdata       (avl_adxcfg_0_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_0_waitrequest    (avl_adxcfg_0_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_0_write          (avl_adxcfg_0_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_0_writedata      (avl_adxcfg_0_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_1_address        (avl_adxcfg_1_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_1.address
		.phy_reconfig_1_read           (avl_adxcfg_1_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_1_readdata       (avl_adxcfg_1_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_1_waitrequest    (avl_adxcfg_1_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_1_write          (avl_adxcfg_1_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_1_writedata      (avl_adxcfg_1_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_2_address        (avl_adxcfg_2_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_2.address
		.phy_reconfig_2_read           (avl_adxcfg_2_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_2_readdata       (avl_adxcfg_2_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_2_waitrequest    (avl_adxcfg_2_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_2_write          (avl_adxcfg_2_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_2_writedata      (avl_adxcfg_2_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_3_address        (avl_adxcfg_3_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_3.address
		.phy_reconfig_3_read           (avl_adxcfg_3_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_3_readdata       (avl_adxcfg_3_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_3_waitrequest    (avl_adxcfg_3_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_3_write          (avl_adxcfg_3_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_3_writedata      (avl_adxcfg_3_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.link_reconfig_awvalid         (mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid),         //   input,    width = 1,     link_reconfig.awvalid
		.link_reconfig_awaddr          (mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr),          //   input,   width = 14,                  .awaddr
		.link_reconfig_awprot          (mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot),          //   input,    width = 3,                  .awprot
		.link_reconfig_awready         (mm_interconnect_0_ad9680_jesd204_link_reconfig_awready),         //  output,    width = 1,                  .awready
		.link_reconfig_wvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid),          //   input,    width = 1,                  .wvalid
		.link_reconfig_wdata           (mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata),           //   input,   width = 32,                  .wdata
		.link_reconfig_wstrb           (mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb),           //   input,    width = 4,                  .wstrb
		.link_reconfig_wready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_wready),          //  output,    width = 1,                  .wready
		.link_reconfig_bvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid),          //  output,    width = 1,                  .bvalid
		.link_reconfig_bresp           (mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp),           //  output,    width = 2,                  .bresp
		.link_reconfig_bready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_bready),          //   input,    width = 1,                  .bready
		.link_reconfig_arvalid         (mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid),         //   input,    width = 1,                  .arvalid
		.link_reconfig_araddr          (mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr),          //   input,   width = 14,                  .araddr
		.link_reconfig_arprot          (mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot),          //   input,    width = 3,                  .arprot
		.link_reconfig_arready         (mm_interconnect_0_ad9680_jesd204_link_reconfig_arready),         //  output,    width = 1,                  .arready
		.link_reconfig_rvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid),          //  output,    width = 1,                  .rvalid
		.link_reconfig_rresp           (mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp),           //  output,    width = 2,                  .rresp
		.link_reconfig_rdata           (mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata),           //  output,   width = 32,                  .rdata
		.link_reconfig_rready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_rready),          //   input,    width = 1,                  .rready
		.interrupt_irq                 (irq_mapper_receiver1_irq),                                       //  output,    width = 1,         interrupt.irq
		.sysref_export                 (rx_sysref_export),                                               //   input,    width = 1,            sysref.export
		.sync_export                   (rx_sync_export),                                                 //  output,    width = 1,              sync.export
		.link_sof_export               (ad9680_jesd204_link_sof_export),                                 //  output,    width = 4,          link_sof.export
		.link_data_data                (ad9680_jesd204_link_data_data),                                  //  output,  width = 128,         link_data.data
		.link_data_valid               (ad9680_jesd204_link_data_valid)                                  //  output,    width = 1,                  .valid
	);

	mcu_subsystem_avl_adxcfg_0 avl_adxcfg_0 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_reset_out_reset),                    //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_0_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_0_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_0_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_0_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_0_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_0_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_0_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_0_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_0_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_0_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_0_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_0_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	mcu_subsystem_avl_adxcfg_1 avl_adxcfg_1 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_reset_out_reset),                    //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_1_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_1_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_1_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_1_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_1_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_1_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_1_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_1_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_1_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_1_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_1_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_1_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	mcu_subsystem_avl_adxcfg_2 avl_adxcfg_2 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_reset_out_reset),                    //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_2_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_2_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_2_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_2_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_2_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_2_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_2_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_2_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_2_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_2_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_2_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_2_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	mcu_subsystem_avl_adxcfg_3 avl_adxcfg_3 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_reset_out_reset),                    //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_3_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_3_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_3_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_3_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_3_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_3_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_3_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_3_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_3_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_3_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_3_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_3_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	mcu_subsystem_mm_clock_crossing_bridge_0 bridge_0 (
		.m0_clk           (sdram_emif_usr_clk_clk),                      //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_001_reset_out_reset),          //   input,   width = 1, m0_reset.reset
		.s0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_0_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_0_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_0_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_0_s0_burstcount),    //   input,   width = 8,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_0_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_0_s0_address),       //   input,  width = 31,         .address
		.s0_write         (mm_interconnect_0_bridge_0_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_0_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_0_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_0_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_0_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_0_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_0_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_0_m0_burstcount),                      //  output,   width = 8,         .burstcount
		.m0_writedata     (bridge_0_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_0_m0_address),                         //  output,  width = 31,         .address
		.m0_write         (bridge_0_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_0_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_0_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_0_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_1 bridge_1 (
		.m0_clk           (sdram_emif_usr_clk_clk),                      //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_001_reset_out_reset),          //   input,   width = 1, m0_reset.reset
		.s0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_1_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_1_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_1_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_1_s0_burstcount),    //   input,   width = 3,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_1_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_1_s0_address),       //   input,  width = 12,         .address
		.s0_write         (mm_interconnect_0_bridge_1_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_1_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_1_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_1_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_1_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_1_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_1_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_1_m0_burstcount),                      //  output,   width = 3,         .burstcount
		.m0_writedata     (bridge_1_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_1_m0_address),                         //  output,  width = 12,         .address
		.m0_write         (bridge_1_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_1_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_1_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_1_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_2 bridge_2 (
		.m0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, m0_reset.reset
		.s0_clk           (iopll_0_outclk0_clk),                         //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_005_reset_out_reset),          //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_2_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_2_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_2_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_2_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_2_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_2_s0_address),       //   input,   width = 6,         .address
		.s0_write         (mm_interconnect_0_bridge_2_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_2_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_2_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_2_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_2_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_2_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_2_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_2_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (bridge_2_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_2_m0_address),                         //  output,   width = 6,         .address
		.m0_write         (bridge_2_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_2_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_2_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_2_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_3 bridge_3 (
		.m0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, m0_reset.reset
		.s0_clk           (iopll_0_outclk0_clk),                         //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_005_reset_out_reset),          //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_3_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_3_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_3_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_3_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_3_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_3_s0_address),       //   input,  width = 27,         .address
		.s0_write         (mm_interconnect_0_bridge_3_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_3_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_3_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_3_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_3_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_3_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_3_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_3_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (bridge_3_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_3_m0_address),                         //  output,  width = 27,         .address
		.m0_write         (bridge_3_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_3_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_3_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_3_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_clock_bridge_0 clk100_in (
		.in_clk  (clk100_clk), //   input,  width = 1,  in_clk.clk
		.out_clk ()            //  output,  width = 1, out_clk.clk
	);

	mcu_subsystem_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	mcu_subsystem_reset_bridge_0 dbg_reset_out (
		.clk       (clock_in_out_clk_clk),           //   input,  width = 1,       clk.clk
		.in_reset  (rst_controller_reset_out_reset), //   input,  width = 1,  in_reset.reset
		.out_reset (dbg_reset_reset)                 //  output,  width = 1, out_reset.reset
	);

	mcu_subsystem_pio_0 fmc_gpio (
		.clk        (clock_in_out_clk_clk),                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_fmc_gpio_s1_address),    //   input,   width = 3,                  s1.address
		.write_n    (~mm_interconnect_0_fmc_gpio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_fmc_gpio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_fmc_gpio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_fmc_gpio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (fmc_gpio_in_port),                         //   input,  width = 32, external_connection.in_port
		.out_port   (fmc_gpio_out_port),                        //  output,  width = 32,                    .out_port
		.irq        (irq_mapper_receiver10_irq)                 //  output,   width = 1,                 irq.irq
	);

	mcu_subsystem_i2c_0 fmc_i2c (
		.clk       (clock_in_out_clk_clk),                    //   input,   width = 1,            clock.clk
		.rst_n     (~rst_controller_006_reset_out_reset),     //   input,   width = 1,       reset_sink.reset_n
		.intr      (irq_mapper_receiver5_irq),                //  output,   width = 1, interrupt_sender.irq
		.addr      (mm_interconnect_0_fmc_i2c_csr_address),   //   input,   width = 4,              csr.address
		.read      (mm_interconnect_0_fmc_i2c_csr_read),      //   input,   width = 1,                 .read
		.write     (mm_interconnect_0_fmc_i2c_csr_write),     //   input,   width = 1,                 .write
		.writedata (mm_interconnect_0_fmc_i2c_csr_writedata), //   input,  width = 32,                 .writedata
		.readdata  (mm_interconnect_0_fmc_i2c_csr_readdata),  //  output,  width = 32,                 .readdata
		.sda_in    (i2c_sda_in),                              //   input,   width = 1,       i2c_serial.sda_in
		.scl_in    (i2c_scl_in),                              //   input,   width = 1,                 .scl_in
		.sda_oe    (i2c_sda_oe),                              //  output,   width = 1,                 .sda_oe
		.scl_oe    (i2c_scl_oe)                               //  output,   width = 1,                 .scl_oe
	);

	mcu_subsystem_spi_0 fmc_spi (
		.clk           (clock_in_out_clk_clk),                                  //   input,   width = 1,              clk.clk
		.reset_n       (~rst_controller_006_reset_out_reset),                   //   input,   width = 1,            reset.reset_n
		.data_from_cpu (mm_interconnect_0_fmc_spi_spi_control_port_writedata),  //   input,  width = 16, spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_fmc_spi_spi_control_port_readdata),   //  output,  width = 16,                 .readdata
		.mem_addr      (mm_interconnect_0_fmc_spi_spi_control_port_address),    //   input,   width = 3,                 .address
		.read_n        (~mm_interconnect_0_fmc_spi_spi_control_port_read),      //   input,   width = 1,                 .read_n
		.spi_select    (mm_interconnect_0_fmc_spi_spi_control_port_chipselect), //   input,   width = 1,                 .chipselect
		.write_n       (~mm_interconnect_0_fmc_spi_spi_control_port_write),     //   input,   width = 1,                 .write_n
		.irq           (irq_mapper_receiver9_irq),                              //  output,   width = 1,              irq.irq
		.MISO          (spi_MISO),                                              //   input,   width = 1,         external.MISO
		.MOSI          (spi_MOSI),                                              //  output,   width = 1,                 .MOSI
		.SCLK          (spi_SCLK),                                              //  output,   width = 1,                 .SCLK
		.SS_n          (spi_SS_n)                                               //  output,   width = 8,                 .SS_n
	);

	iopll_0 iopll_0 (
		.rst      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1,   reset.reset
		.refclk   (clock_in_out_clk_clk),                          //   input,  width = 1,  refclk.clk
		.locked   (iopll_0_locked_export),                         //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk),                           //  output,  width = 1, outclk0.clk
		.outclk_1 (),                                              //  output,  width = 1, outclk1.clk
		.outclk_2 ()                                               //  output,  width = 1, outclk2.clk
	);

	mcu_subsystem_jtag_uart_0 jtag_uart_0 (
		.clk            (clock_in_out_clk_clk),                                        //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_006_reset_out_reset),                         //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         (irq_mapper_receiver6_irq)                                     //  output,   width = 1,               irq.irq
	);

	mcu_subsystem_cpu_0 mcu_subsystem_cpu_0 (
		.clk                                 (clock_in_out_clk_clk),                                              //   input,   width = 1,                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                                   //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                                //   input,   width = 1,                          .reset_req
		.d_address                           (mcu_subsystem_cpu_0_data_master_address),                           //  output,  width = 32,               data_master.address
		.d_byteenable                        (mcu_subsystem_cpu_0_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (mcu_subsystem_cpu_0_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (mcu_subsystem_cpu_0_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (mcu_subsystem_cpu_0_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (mcu_subsystem_cpu_0_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (mcu_subsystem_cpu_0_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.d_readdatavalid                     (mcu_subsystem_cpu_0_data_master_readdatavalid),                     //   input,   width = 1,                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (mcu_subsystem_cpu_0_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.i_address                           (mcu_subsystem_cpu_0_instruction_master_address),                    //  output,  width = 32,        instruction_master.address
		.i_read                              (mcu_subsystem_cpu_0_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (mcu_subsystem_cpu_0_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (mcu_subsystem_cpu_0_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.i_readdatavalid                     (mcu_subsystem_cpu_0_instruction_master_readdatavalid),              //   input,   width = 1,                          .readdatavalid
		.irq                                 (mcu_subsystem_cpu_0_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.debug_reset_request                 (mcu_subsystem_cpu_0_debug_reset_request_reset),                     //  output,   width = 1,       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.dummy_ci_port                       ()                                                                   //  output,   width = 1, custom_instruction_master.readra
	);

	mcu_subsystem_ram_0 mcu_subsystem_ram_0 (
		.clk        (clock_in_out_clk_clk),                                //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_0_mcu_subsystem_ram_0_s1_address),    //   input,  width = 15,     s1.address
		.clken      (mm_interconnect_0_mcu_subsystem_ram_0_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_0_mcu_subsystem_ram_0_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_006_reset_out_reset),                  //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_006_reset_out_reset_req)               //   input,   width = 1,       .reset_req
	);

	mcu_subsystem_generic_quad_spi_controller2_0 qspi_controller2_0 (
		.clk                  (iopll_0_outclk0_clk),                                        //   input,   width = 1,       clock_sink.clk
		.reset_n              (~rst_controller_005_reset_out_reset),                        //   input,   width = 1,            reset.reset_n
		.qspi_pins_dclk       (qspi_dclk),                                                  //  output,   width = 1,        qspi_pins.dclk
		.qspi_pins_ncs        (qspi_ncs),                                                   //  output,   width = 1,                 .ncs
		.qspi_pins_data       (qspi_data),                                                  //   inout,   width = 4,                 .data
		.avl_csr_read         (mm_interconnect_1_qspi_controller2_0_avl_csr_read),          //   input,   width = 1,          avl_csr.read
		.avl_csr_waitrequest  (mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest),   //  output,   width = 1,                 .waitrequest
		.avl_csr_write        (mm_interconnect_1_qspi_controller2_0_avl_csr_write),         //   input,   width = 1,                 .write
		.avl_csr_addr         (mm_interconnect_1_qspi_controller2_0_avl_csr_address),       //   input,   width = 4,                 .address
		.avl_csr_wrdata       (mm_interconnect_1_qspi_controller2_0_avl_csr_writedata),     //   input,  width = 32,                 .writedata
		.avl_csr_rddata       (mm_interconnect_1_qspi_controller2_0_avl_csr_readdata),      //  output,  width = 32,                 .readdata
		.avl_csr_rddata_valid (mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid), //  output,   width = 1,                 .readdatavalid
		.avl_mem_write        (mm_interconnect_2_qspi_controller2_0_avl_mem_write),         //   input,   width = 1,          avl_mem.write
		.avl_mem_burstcount   (mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount),    //   input,   width = 7,                 .burstcount
		.avl_mem_waitrequest  (mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest),   //  output,   width = 1,                 .waitrequest
		.avl_mem_read         (mm_interconnect_2_qspi_controller2_0_avl_mem_read),          //   input,   width = 1,                 .read
		.avl_mem_addr         (mm_interconnect_2_qspi_controller2_0_avl_mem_address),       //   input,  width = 25,                 .address
		.avl_mem_wrdata       (mm_interconnect_2_qspi_controller2_0_avl_mem_writedata),     //   input,  width = 32,                 .writedata
		.avl_mem_rddata       (mm_interconnect_2_qspi_controller2_0_avl_mem_readdata),      //  output,  width = 32,                 .readdata
		.avl_mem_rddata_valid (mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid), //  output,   width = 1,                 .readdatavalid
		.avl_mem_byteenable   (mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable),    //   input,   width = 4,                 .byteenable
		.irq                  (irq_synchronizer_receiver_irq)                               //  output,   width = 1, interrupt_sender.irq
	);

	mcu_subsystem_clock_bridge_1 refclk_emif (
		.in_clk  (refclk_emif_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (refclk_emif_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	mcu_subsystem_reset_in reset_in (
		.in_reset_n  (reset_reset_n),            //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	ddr_controller sdram (
		.global_reset_n                 (~rst_controller_007_reset_out_reset),                         //   input,    width = 1,   global_reset_n.reset_n
		.pll_ref_clk                    (refclk_emif_out_clk_clk),                                     //   input,    width = 1,      pll_ref_clk.clk
		.oct_rzqin                      (oct_oct_rzqin),                                               //   input,    width = 1,              oct.oct_rzqin
		.mem_ck                         (mem_mem_ck),                                                  //  output,    width = 1,              mem.mem_ck
		.mem_ck_n                       (mem_mem_ck_n),                                                //  output,    width = 1,                 .mem_ck_n
		.mem_a                          (mem_mem_a),                                                   //  output,   width = 16,                 .mem_a
		.mem_ba                         (mem_mem_ba),                                                  //  output,    width = 3,                 .mem_ba
		.mem_cke                        (mem_mem_cke),                                                 //  output,    width = 1,                 .mem_cke
		.mem_cs_n                       (mem_mem_cs_n),                                                //  output,    width = 1,                 .mem_cs_n
		.mem_odt                        (mem_mem_odt),                                                 //  output,    width = 1,                 .mem_odt
		.mem_reset_n                    (mem_mem_reset_n),                                             //  output,    width = 1,                 .mem_reset_n
		.mem_we_n                       (mem_mem_we_n),                                                //  output,    width = 1,                 .mem_we_n
		.mem_ras_n                      (mem_mem_ras_n),                                               //  output,    width = 1,                 .mem_ras_n
		.mem_cas_n                      (mem_mem_cas_n),                                               //  output,    width = 1,                 .mem_cas_n
		.mem_dqs                        (mem_mem_dqs),                                                 //   inout,    width = 4,                 .mem_dqs
		.mem_dqs_n                      (mem_mem_dqs_n),                                               //   inout,    width = 4,                 .mem_dqs_n
		.mem_dq                         (mem_mem_dq),                                                  //   inout,   width = 32,                 .mem_dq
		.mem_dm                         (mem_mem_dm),                                                  //  output,    width = 4,                 .mem_dm
		.local_cal_success              (status_local_cal_success),                                    //  output,    width = 1,           status.local_cal_success
		.local_cal_fail                 (status_local_cal_fail),                                       //  output,    width = 1,                 .local_cal_fail
		.emif_usr_reset_n               (sdram_emif_usr_reset_n_reset),                                //  output,    width = 1, emif_usr_reset_n.reset_n
		.emif_usr_clk                   (sdram_emif_usr_clk_clk),                                      //  output,    width = 1,     emif_usr_clk.clk
		.amm_ready_0                    (mm_interconnect_3_sdram_ctrl_amm_0_waitrequest),              //  output,    width = 1,       ctrl_amm_0.waitrequest_n
		.amm_read_0                     (mm_interconnect_3_sdram_ctrl_amm_0_read),                     //   input,    width = 1,                 .read
		.amm_write_0                    (mm_interconnect_3_sdram_ctrl_amm_0_write),                    //   input,    width = 1,                 .write
		.amm_address_0                  (mm_interconnect_3_sdram_ctrl_amm_0_address),                  //   input,   width = 26,                 .address
		.amm_readdata_0                 (mm_interconnect_3_sdram_ctrl_amm_0_readdata),                 //  output,  width = 256,                 .readdata
		.amm_writedata_0                (mm_interconnect_3_sdram_ctrl_amm_0_writedata),                //   input,  width = 256,                 .writedata
		.amm_burstcount_0               (mm_interconnect_3_sdram_ctrl_amm_0_burstcount),               //   input,    width = 7,                 .burstcount
		.amm_byteenable_0               (mm_interconnect_3_sdram_ctrl_amm_0_byteenable),               //   input,   width = 32,                 .byteenable
		.amm_readdatavalid_0            (mm_interconnect_3_sdram_ctrl_amm_0_readdatavalid),            //  output,    width = 1,                 .readdatavalid
		.mmr_slave_waitrequest_0        (mm_interconnect_4_sdram_ctrl_mmr_slave_0_waitrequest),        //  output,    width = 1, ctrl_mmr_slave_0.waitrequest
		.mmr_slave_read_0               (mm_interconnect_4_sdram_ctrl_mmr_slave_0_read),               //   input,    width = 1,                 .read
		.mmr_slave_write_0              (mm_interconnect_4_sdram_ctrl_mmr_slave_0_write),              //   input,    width = 1,                 .write
		.mmr_slave_address_0            (mm_interconnect_4_sdram_ctrl_mmr_slave_0_address),            //   input,   width = 10,                 .address
		.mmr_slave_readdata_0           (mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdata),           //  output,   width = 32,                 .readdata
		.mmr_slave_writedata_0          (mm_interconnect_4_sdram_ctrl_mmr_slave_0_writedata),          //   input,   width = 32,                 .writedata
		.mmr_slave_burstcount_0         (mm_interconnect_4_sdram_ctrl_mmr_slave_0_burstcount),         //   input,    width = 2,                 .burstcount
		.mmr_slave_beginbursttransfer_0 (mm_interconnect_4_sdram_ctrl_mmr_slave_0_beginbursttransfer), //   input,    width = 1,                 .beginbursttransfer
		.mmr_slave_readdatavalid_0      (mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdatavalid)       //  output,    width = 1,                 .readdatavalid
	);

	mcu_subsystem_timer_0 timer_0 (
		.clk        (clock_in_out_clk_clk),                    //   input,   width = 1,   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //   input,   width = 3,    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //   input,   width = 1,      .write_n
		.irq        (irq_mapper_receiver8_irq)                 //  output,   width = 1,   irq.irq
	);

	mcu_subsystem_timer_1 timer_1 (
		.clk        (clock_in_out_clk_clk),                    //   input,   width = 1,   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_0_timer_1_s1_address),    //   input,   width = 3,    s1.address
		.writedata  (mm_interconnect_0_timer_1_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_0_timer_1_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_0_timer_1_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_0_timer_1_s1_write),     //   input,   width = 1,      .write_n
		.irq        (irq_mapper_receiver7_irq)                 //  output,   width = 1,   irq.irq
	);

	interlaken_phy phy_interlaken_0 (
		.clk125_clk                           (clock_in_out_clk_clk),                                                    //   input,   width = 1,                   clk125.clk
		.phy_data_ctrl_csr_s0_address         (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_address),         //   input,   width = 8,     phy_data_ctrl_csr_s0.address
		.phy_data_ctrl_csr_s0_read            (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_read),            //   input,   width = 1,                         .read
		.phy_data_ctrl_csr_s0_readdata        (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdata),        //  output,  width = 32,                         .readdata
		.phy_data_ctrl_csr_s0_readdatavalid   (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid),   //  output,   width = 1,                         .readdatavalid
		.phy_data_ctrl_csr_s0_write           (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_write),           //   input,   width = 1,                         .write
		.phy_data_ctrl_csr_s0_writedata       (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_writedata),       //   input,  width = 32,                         .writedata
		.phy_data_ctrl_csr_s0_waitrequest     (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest),     //  output,   width = 1,                         .waitrequest
		.phy_data_ctrl_m0_address             (phy_interlaken_0_phy_data_ctrl_m0_address),                               //  output,  width = 32,         phy_data_ctrl_m0.address
		.phy_data_ctrl_m0_read                (phy_interlaken_0_phy_data_ctrl_m0_read),                                  //  output,   width = 1,                         .read
		.phy_data_ctrl_m0_waitrequest         (phy_interlaken_0_phy_data_ctrl_m0_waitrequest),                           //   input,   width = 1,                         .waitrequest
		.phy_data_ctrl_m0_readdata            (phy_interlaken_0_phy_data_ctrl_m0_readdata),                              //   input,  width = 32,                         .readdata
		.phy_data_ctrl_m0_readdatavalid       (phy_interlaken_0_phy_data_ctrl_m0_readdatavalid),                         //   input,   width = 1,                         .readdatavalid
		.phy_data_ctrl_m0_write               (phy_interlaken_0_phy_data_ctrl_m0_write),                                 //  output,   width = 1,                         .write
		.phy_data_ctrl_m0_writedata           (phy_interlaken_0_phy_data_ctrl_m0_writedata),                             //  output,  width = 32,                         .writedata
		.phy_data_irq_rx_irq                  (irq_mapper_receiver11_irq),                                               //  output,   width = 1,          phy_data_irq_rx.irq
		.phy_data_irq_tx_irq                  (irq_mapper_receiver13_irq),                                               //  output,   width = 1,          phy_data_irq_tx.irq
		.tx_serial_data_tx_serial_data        (tx_0_tx_serial_data),                                                     //  output,   width = 1,           tx_serial_data.tx_serial_data
		.rx_serial_data_rx_serial_data        (rx_0_rx_serial_data),                                                     //   input,   width = 1,           rx_serial_data.rx_serial_data
		.reset_reset                          (rst_controller_reset_out_reset),                                          //   input,   width = 1,                    reset.reset
		.serial_clock_reconfig_s0_write       (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_write),       //   input,   width = 1, serial_clock_reconfig_s0.write
		.serial_clock_reconfig_s0_read        (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_read),        //   input,   width = 1,                         .read
		.serial_clock_reconfig_s0_address     (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_address),     //   input,  width = 10,                         .address
		.serial_clock_reconfig_s0_writedata   (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_writedata),   //   input,  width = 32,                         .writedata
		.serial_clock_reconfig_s0_readdata    (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_readdata),    //  output,  width = 32,                         .readdata
		.serial_clock_reconfig_s0_waitrequest (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_waitrequest)  //  output,   width = 1,                         .waitrequest
	);

	interlaken_phy phy_interlaken_1 (
		.clk125_clk                           (clock_in_out_clk_clk),                                                    //   input,   width = 1,                   clk125.clk
		.phy_data_ctrl_csr_s0_address         (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_address),         //   input,   width = 8,     phy_data_ctrl_csr_s0.address
		.phy_data_ctrl_csr_s0_read            (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_read),            //   input,   width = 1,                         .read
		.phy_data_ctrl_csr_s0_readdata        (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdata),        //  output,  width = 32,                         .readdata
		.phy_data_ctrl_csr_s0_readdatavalid   (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid),   //  output,   width = 1,                         .readdatavalid
		.phy_data_ctrl_csr_s0_write           (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_write),           //   input,   width = 1,                         .write
		.phy_data_ctrl_csr_s0_writedata       (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_writedata),       //   input,  width = 32,                         .writedata
		.phy_data_ctrl_csr_s0_waitrequest     (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest),     //  output,   width = 1,                         .waitrequest
		.phy_data_ctrl_m0_address             (phy_interlaken_1_phy_data_ctrl_m0_address),                               //  output,  width = 32,         phy_data_ctrl_m0.address
		.phy_data_ctrl_m0_read                (phy_interlaken_1_phy_data_ctrl_m0_read),                                  //  output,   width = 1,                         .read
		.phy_data_ctrl_m0_waitrequest         (phy_interlaken_1_phy_data_ctrl_m0_waitrequest),                           //   input,   width = 1,                         .waitrequest
		.phy_data_ctrl_m0_readdata            (phy_interlaken_1_phy_data_ctrl_m0_readdata),                              //   input,  width = 32,                         .readdata
		.phy_data_ctrl_m0_readdatavalid       (phy_interlaken_1_phy_data_ctrl_m0_readdatavalid),                         //   input,   width = 1,                         .readdatavalid
		.phy_data_ctrl_m0_write               (phy_interlaken_1_phy_data_ctrl_m0_write),                                 //  output,   width = 1,                         .write
		.phy_data_ctrl_m0_writedata           (phy_interlaken_1_phy_data_ctrl_m0_writedata),                             //  output,  width = 32,                         .writedata
		.phy_data_irq_rx_irq                  (irq_mapper_receiver12_irq),                                               //  output,   width = 1,          phy_data_irq_rx.irq
		.phy_data_irq_tx_irq                  (irq_mapper_receiver14_irq),                                               //  output,   width = 1,          phy_data_irq_tx.irq
		.tx_serial_data_tx_serial_data        (tx_1_tx_serial_data),                                                     //  output,   width = 1,           tx_serial_data.tx_serial_data
		.rx_serial_data_rx_serial_data        (rx_1_rx_serial_data),                                                     //   input,   width = 1,           rx_serial_data.rx_serial_data
		.reset_reset                          (rst_controller_006_reset_out_reset),                                      //   input,   width = 1,                    reset.reset
		.serial_clock_reconfig_s0_write       (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_write),       //   input,   width = 1, serial_clock_reconfig_s0.write
		.serial_clock_reconfig_s0_read        (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_read),        //   input,   width = 1,                         .read
		.serial_clock_reconfig_s0_address     (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_address),     //   input,  width = 10,                         .address
		.serial_clock_reconfig_s0_writedata   (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_writedata),   //   input,  width = 32,                         .writedata
		.serial_clock_reconfig_s0_readdata    (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_readdata),    //  output,  width = 32,                         .readdata
		.serial_clock_reconfig_s0_waitrequest (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_waitrequest)  //  output,   width = 1,                         .waitrequest
	);

	mcu_subsystem_altera_mm_interconnect_181_q5f7jgy mm_interconnect_0 (
		.mcu_subsystem_cpu_0_data_master_address               (mcu_subsystem_cpu_0_data_master_address),                                 //   input,  width = 32,                 mcu_subsystem_cpu_0_data_master.address
		.mcu_subsystem_cpu_0_data_master_waitrequest           (mcu_subsystem_cpu_0_data_master_waitrequest),                             //  output,   width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_data_master_byteenable            (mcu_subsystem_cpu_0_data_master_byteenable),                              //   input,   width = 4,                                                .byteenable
		.mcu_subsystem_cpu_0_data_master_read                  (mcu_subsystem_cpu_0_data_master_read),                                    //   input,   width = 1,                                                .read
		.mcu_subsystem_cpu_0_data_master_readdata              (mcu_subsystem_cpu_0_data_master_readdata),                                //  output,  width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_data_master_readdatavalid         (mcu_subsystem_cpu_0_data_master_readdatavalid),                           //  output,   width = 1,                                                .readdatavalid
		.mcu_subsystem_cpu_0_data_master_write                 (mcu_subsystem_cpu_0_data_master_write),                                   //   input,   width = 1,                                                .write
		.mcu_subsystem_cpu_0_data_master_writedata             (mcu_subsystem_cpu_0_data_master_writedata),                               //   input,  width = 32,                                                .writedata
		.mcu_subsystem_cpu_0_data_master_debugaccess           (mcu_subsystem_cpu_0_data_master_debugaccess),                             //   input,   width = 1,                                                .debugaccess
		.mcu_subsystem_cpu_0_instruction_master_address        (mcu_subsystem_cpu_0_instruction_master_address),                          //   input,  width = 32,          mcu_subsystem_cpu_0_instruction_master.address
		.mcu_subsystem_cpu_0_instruction_master_waitrequest    (mcu_subsystem_cpu_0_instruction_master_waitrequest),                      //  output,   width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_instruction_master_read           (mcu_subsystem_cpu_0_instruction_master_read),                             //   input,   width = 1,                                                .read
		.mcu_subsystem_cpu_0_instruction_master_readdata       (mcu_subsystem_cpu_0_instruction_master_readdata),                         //  output,  width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_instruction_master_readdatavalid  (mcu_subsystem_cpu_0_instruction_master_readdatavalid),                    //  output,   width = 1,                                                .readdatavalid
		.phy_interlaken_0_phy_data_ctrl_m0_address             (phy_interlaken_0_phy_data_ctrl_m0_address),                               //   input,  width = 32,               phy_interlaken_0_phy_data_ctrl_m0.address
		.phy_interlaken_0_phy_data_ctrl_m0_waitrequest         (phy_interlaken_0_phy_data_ctrl_m0_waitrequest),                           //  output,   width = 1,                                                .waitrequest
		.phy_interlaken_0_phy_data_ctrl_m0_read                (phy_interlaken_0_phy_data_ctrl_m0_read),                                  //   input,   width = 1,                                                .read
		.phy_interlaken_0_phy_data_ctrl_m0_readdata            (phy_interlaken_0_phy_data_ctrl_m0_readdata),                              //  output,  width = 32,                                                .readdata
		.phy_interlaken_0_phy_data_ctrl_m0_readdatavalid       (phy_interlaken_0_phy_data_ctrl_m0_readdatavalid),                         //  output,   width = 1,                                                .readdatavalid
		.phy_interlaken_0_phy_data_ctrl_m0_write               (phy_interlaken_0_phy_data_ctrl_m0_write),                                 //   input,   width = 1,                                                .write
		.phy_interlaken_0_phy_data_ctrl_m0_writedata           (phy_interlaken_0_phy_data_ctrl_m0_writedata),                             //   input,  width = 32,                                                .writedata
		.phy_interlaken_1_phy_data_ctrl_m0_address             (phy_interlaken_1_phy_data_ctrl_m0_address),                               //   input,  width = 32,               phy_interlaken_1_phy_data_ctrl_m0.address
		.phy_interlaken_1_phy_data_ctrl_m0_waitrequest         (phy_interlaken_1_phy_data_ctrl_m0_waitrequest),                           //  output,   width = 1,                                                .waitrequest
		.phy_interlaken_1_phy_data_ctrl_m0_read                (phy_interlaken_1_phy_data_ctrl_m0_read),                                  //   input,   width = 1,                                                .read
		.phy_interlaken_1_phy_data_ctrl_m0_readdata            (phy_interlaken_1_phy_data_ctrl_m0_readdata),                              //  output,  width = 32,                                                .readdata
		.phy_interlaken_1_phy_data_ctrl_m0_readdatavalid       (phy_interlaken_1_phy_data_ctrl_m0_readdatavalid),                         //  output,   width = 1,                                                .readdatavalid
		.phy_interlaken_1_phy_data_ctrl_m0_write               (phy_interlaken_1_phy_data_ctrl_m0_write),                                 //   input,   width = 1,                                                .write
		.phy_interlaken_1_phy_data_ctrl_m0_writedata           (phy_interlaken_1_phy_data_ctrl_m0_writedata),                             //   input,  width = 32,                                                .writedata
		.jtag_uart_0_avalon_jtag_slave_address                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),                 //  output,   width = 1,                   jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),                   //  output,   width = 1,                                                .write
		.jtag_uart_0_avalon_jtag_slave_read                    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),                    //  output,   width = 1,                                                .read
		.jtag_uart_0_avalon_jtag_slave_readdata                (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),                //   input,  width = 32,                                                .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata               (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),               //  output,  width = 32,                                                .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest             (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),             //   input,   width = 1,                                                .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect              (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),              //  output,   width = 1,                                                .chipselect
		.fmc_i2c_csr_address                                   (mm_interconnect_0_fmc_i2c_csr_address),                                   //  output,   width = 4,                                     fmc_i2c_csr.address
		.fmc_i2c_csr_write                                     (mm_interconnect_0_fmc_i2c_csr_write),                                     //  output,   width = 1,                                                .write
		.fmc_i2c_csr_read                                      (mm_interconnect_0_fmc_i2c_csr_read),                                      //  output,   width = 1,                                                .read
		.fmc_i2c_csr_readdata                                  (mm_interconnect_0_fmc_i2c_csr_readdata),                                  //   input,  width = 32,                                                .readdata
		.fmc_i2c_csr_writedata                                 (mm_interconnect_0_fmc_i2c_csr_writedata),                                 //  output,  width = 32,                                                .writedata
		.mcu_subsystem_cpu_0_debug_mem_slave_address           (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address),           //  output,   width = 9,             mcu_subsystem_cpu_0_debug_mem_slave.address
		.mcu_subsystem_cpu_0_debug_mem_slave_write             (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write),             //  output,   width = 1,                                                .write
		.mcu_subsystem_cpu_0_debug_mem_slave_read              (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read),              //  output,   width = 1,                                                .read
		.mcu_subsystem_cpu_0_debug_mem_slave_readdata          (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata),          //   input,  width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_debug_mem_slave_writedata         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata),         //  output,  width = 32,                                                .writedata
		.mcu_subsystem_cpu_0_debug_mem_slave_byteenable        (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable),        //  output,   width = 4,                                                .byteenable
		.mcu_subsystem_cpu_0_debug_mem_slave_waitrequest       (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest),       //   input,   width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_debug_mem_slave_debugaccess       (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess),       //  output,   width = 1,                                                .debugaccess
		.ad9144_jesd204_lane_pll_reconfig_address              (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address),              //  output,  width = 10,                ad9144_jesd204_lane_pll_reconfig.address
		.ad9144_jesd204_lane_pll_reconfig_write                (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write),                //  output,   width = 1,                                                .write
		.ad9144_jesd204_lane_pll_reconfig_read                 (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read),                 //  output,   width = 1,                                                .read
		.ad9144_jesd204_lane_pll_reconfig_readdata             (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata),             //   input,  width = 32,                                                .readdata
		.ad9144_jesd204_lane_pll_reconfig_writedata            (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata),            //  output,  width = 32,                                                .writedata
		.ad9144_jesd204_lane_pll_reconfig_waitrequest          (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest),          //   input,   width = 1,                                                .waitrequest
		.ad9144_jesd204_link_pll_reconfig_address              (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address),              //  output,  width = 10,                ad9144_jesd204_link_pll_reconfig.address
		.ad9144_jesd204_link_pll_reconfig_write                (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write),                //  output,   width = 1,                                                .write
		.ad9144_jesd204_link_pll_reconfig_read                 (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read),                 //  output,   width = 1,                                                .read
		.ad9144_jesd204_link_pll_reconfig_readdata             (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata),             //   input,  width = 32,                                                .readdata
		.ad9144_jesd204_link_pll_reconfig_writedata            (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata),            //  output,  width = 32,                                                .writedata
		.ad9144_jesd204_link_pll_reconfig_waitrequest          (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest),          //   input,   width = 1,                                                .waitrequest
		.ad9680_jesd204_link_pll_reconfig_address              (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address),              //  output,  width = 10,                ad9680_jesd204_link_pll_reconfig.address
		.ad9680_jesd204_link_pll_reconfig_write                (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write),                //  output,   width = 1,                                                .write
		.ad9680_jesd204_link_pll_reconfig_read                 (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read),                 //  output,   width = 1,                                                .read
		.ad9680_jesd204_link_pll_reconfig_readdata             (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata),             //   input,  width = 32,                                                .readdata
		.ad9680_jesd204_link_pll_reconfig_writedata            (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata),            //  output,  width = 32,                                                .writedata
		.ad9680_jesd204_link_pll_reconfig_waitrequest          (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest),          //   input,   width = 1,                                                .waitrequest
		.phy_interlaken_0_phy_data_ctrl_csr_s0_address         (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_address),         //  output,   width = 8,           phy_interlaken_0_phy_data_ctrl_csr_s0.address
		.phy_interlaken_0_phy_data_ctrl_csr_s0_write           (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_write),           //  output,   width = 1,                                                .write
		.phy_interlaken_0_phy_data_ctrl_csr_s0_read            (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_read),            //  output,   width = 1,                                                .read
		.phy_interlaken_0_phy_data_ctrl_csr_s0_readdata        (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdata),        //   input,  width = 32,                                                .readdata
		.phy_interlaken_0_phy_data_ctrl_csr_s0_writedata       (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_writedata),       //  output,  width = 32,                                                .writedata
		.phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid   (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid),   //   input,   width = 1,                                                .readdatavalid
		.phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest     (mm_interconnect_0_phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest),     //   input,   width = 1,                                                .waitrequest
		.phy_interlaken_1_phy_data_ctrl_csr_s0_address         (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_address),         //  output,   width = 8,           phy_interlaken_1_phy_data_ctrl_csr_s0.address
		.phy_interlaken_1_phy_data_ctrl_csr_s0_write           (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_write),           //  output,   width = 1,                                                .write
		.phy_interlaken_1_phy_data_ctrl_csr_s0_read            (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_read),            //  output,   width = 1,                                                .read
		.phy_interlaken_1_phy_data_ctrl_csr_s0_readdata        (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdata),        //   input,  width = 32,                                                .readdata
		.phy_interlaken_1_phy_data_ctrl_csr_s0_writedata       (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_writedata),       //  output,  width = 32,                                                .writedata
		.phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid   (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid),   //   input,   width = 1,                                                .readdatavalid
		.phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest     (mm_interconnect_0_phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest),     //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_0_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address),                          //  output,  width = 10,                            avl_adxcfg_0_rcfg_s0.address
		.avl_adxcfg_0_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_0_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_0_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_0_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_0_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_1_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address),                          //  output,  width = 10,                            avl_adxcfg_1_rcfg_s0.address
		.avl_adxcfg_1_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_1_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_1_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_1_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_1_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_2_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address),                          //  output,  width = 10,                            avl_adxcfg_2_rcfg_s0.address
		.avl_adxcfg_2_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_2_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_2_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_2_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_2_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_3_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address),                          //  output,  width = 10,                            avl_adxcfg_3_rcfg_s0.address
		.avl_adxcfg_3_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_3_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_3_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_3_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_3_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_0_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address),                          //  output,  width = 10,                            avl_adxcfg_0_rcfg_s1.address
		.avl_adxcfg_0_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_0_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_0_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_0_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_0_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_1_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address),                          //  output,  width = 10,                            avl_adxcfg_1_rcfg_s1.address
		.avl_adxcfg_1_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_1_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_1_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_1_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_1_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_2_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address),                          //  output,  width = 10,                            avl_adxcfg_2_rcfg_s1.address
		.avl_adxcfg_2_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_2_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_2_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_2_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_2_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.avl_adxcfg_3_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address),                          //  output,  width = 10,                            avl_adxcfg_3_rcfg_s1.address
		.avl_adxcfg_3_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write),                            //  output,   width = 1,                                                .write
		.avl_adxcfg_3_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read),                             //  output,   width = 1,                                                .read
		.avl_adxcfg_3_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata),                         //   input,  width = 32,                                                .readdata
		.avl_adxcfg_3_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata),                        //  output,  width = 32,                                                .writedata
		.avl_adxcfg_3_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest),                      //   input,   width = 1,                                                .waitrequest
		.bridge_0_s0_address                                   (mm_interconnect_0_bridge_0_s0_address),                                   //  output,  width = 31,                                     bridge_0_s0.address
		.bridge_0_s0_write                                     (mm_interconnect_0_bridge_0_s0_write),                                     //  output,   width = 1,                                                .write
		.bridge_0_s0_read                                      (mm_interconnect_0_bridge_0_s0_read),                                      //  output,   width = 1,                                                .read
		.bridge_0_s0_readdata                                  (mm_interconnect_0_bridge_0_s0_readdata),                                  //   input,  width = 32,                                                .readdata
		.bridge_0_s0_writedata                                 (mm_interconnect_0_bridge_0_s0_writedata),                                 //  output,  width = 32,                                                .writedata
		.bridge_0_s0_burstcount                                (mm_interconnect_0_bridge_0_s0_burstcount),                                //  output,   width = 8,                                                .burstcount
		.bridge_0_s0_byteenable                                (mm_interconnect_0_bridge_0_s0_byteenable),                                //  output,   width = 4,                                                .byteenable
		.bridge_0_s0_readdatavalid                             (mm_interconnect_0_bridge_0_s0_readdatavalid),                             //   input,   width = 1,                                                .readdatavalid
		.bridge_0_s0_waitrequest                               (mm_interconnect_0_bridge_0_s0_waitrequest),                               //   input,   width = 1,                                                .waitrequest
		.bridge_0_s0_debugaccess                               (mm_interconnect_0_bridge_0_s0_debugaccess),                               //  output,   width = 1,                                                .debugaccess
		.bridge_3_s0_address                                   (mm_interconnect_0_bridge_3_s0_address),                                   //  output,  width = 27,                                     bridge_3_s0.address
		.bridge_3_s0_write                                     (mm_interconnect_0_bridge_3_s0_write),                                     //  output,   width = 1,                                                .write
		.bridge_3_s0_read                                      (mm_interconnect_0_bridge_3_s0_read),                                      //  output,   width = 1,                                                .read
		.bridge_3_s0_readdata                                  (mm_interconnect_0_bridge_3_s0_readdata),                                  //   input,  width = 32,                                                .readdata
		.bridge_3_s0_writedata                                 (mm_interconnect_0_bridge_3_s0_writedata),                                 //  output,  width = 32,                                                .writedata
		.bridge_3_s0_burstcount                                (mm_interconnect_0_bridge_3_s0_burstcount),                                //  output,   width = 1,                                                .burstcount
		.bridge_3_s0_byteenable                                (mm_interconnect_0_bridge_3_s0_byteenable),                                //  output,   width = 4,                                                .byteenable
		.bridge_3_s0_readdatavalid                             (mm_interconnect_0_bridge_3_s0_readdatavalid),                             //   input,   width = 1,                                                .readdatavalid
		.bridge_3_s0_waitrequest                               (mm_interconnect_0_bridge_3_s0_waitrequest),                               //   input,   width = 1,                                                .waitrequest
		.bridge_3_s0_debugaccess                               (mm_interconnect_0_bridge_3_s0_debugaccess),                               //  output,   width = 1,                                                .debugaccess
		.bridge_2_s0_address                                   (mm_interconnect_0_bridge_2_s0_address),                                   //  output,   width = 6,                                     bridge_2_s0.address
		.bridge_2_s0_write                                     (mm_interconnect_0_bridge_2_s0_write),                                     //  output,   width = 1,                                                .write
		.bridge_2_s0_read                                      (mm_interconnect_0_bridge_2_s0_read),                                      //  output,   width = 1,                                                .read
		.bridge_2_s0_readdata                                  (mm_interconnect_0_bridge_2_s0_readdata),                                  //   input,  width = 32,                                                .readdata
		.bridge_2_s0_writedata                                 (mm_interconnect_0_bridge_2_s0_writedata),                                 //  output,  width = 32,                                                .writedata
		.bridge_2_s0_burstcount                                (mm_interconnect_0_bridge_2_s0_burstcount),                                //  output,   width = 1,                                                .burstcount
		.bridge_2_s0_byteenable                                (mm_interconnect_0_bridge_2_s0_byteenable),                                //  output,   width = 4,                                                .byteenable
		.bridge_2_s0_readdatavalid                             (mm_interconnect_0_bridge_2_s0_readdatavalid),                             //   input,   width = 1,                                                .readdatavalid
		.bridge_2_s0_waitrequest                               (mm_interconnect_0_bridge_2_s0_waitrequest),                               //   input,   width = 1,                                                .waitrequest
		.bridge_2_s0_debugaccess                               (mm_interconnect_0_bridge_2_s0_debugaccess),                               //  output,   width = 1,                                                .debugaccess
		.bridge_1_s0_address                                   (mm_interconnect_0_bridge_1_s0_address),                                   //  output,  width = 12,                                     bridge_1_s0.address
		.bridge_1_s0_write                                     (mm_interconnect_0_bridge_1_s0_write),                                     //  output,   width = 1,                                                .write
		.bridge_1_s0_read                                      (mm_interconnect_0_bridge_1_s0_read),                                      //  output,   width = 1,                                                .read
		.bridge_1_s0_readdata                                  (mm_interconnect_0_bridge_1_s0_readdata),                                  //   input,  width = 32,                                                .readdata
		.bridge_1_s0_writedata                                 (mm_interconnect_0_bridge_1_s0_writedata),                                 //  output,  width = 32,                                                .writedata
		.bridge_1_s0_burstcount                                (mm_interconnect_0_bridge_1_s0_burstcount),                                //  output,   width = 3,                                                .burstcount
		.bridge_1_s0_byteenable                                (mm_interconnect_0_bridge_1_s0_byteenable),                                //  output,   width = 4,                                                .byteenable
		.bridge_1_s0_readdatavalid                             (mm_interconnect_0_bridge_1_s0_readdatavalid),                             //   input,   width = 1,                                                .readdatavalid
		.bridge_1_s0_waitrequest                               (mm_interconnect_0_bridge_1_s0_waitrequest),                               //   input,   width = 1,                                                .waitrequest
		.bridge_1_s0_debugaccess                               (mm_interconnect_0_bridge_1_s0_debugaccess),                               //  output,   width = 1,                                                .debugaccess
		.mcu_subsystem_ram_0_s1_address                        (mm_interconnect_0_mcu_subsystem_ram_0_s1_address),                        //  output,  width = 15,                          mcu_subsystem_ram_0_s1.address
		.mcu_subsystem_ram_0_s1_write                          (mm_interconnect_0_mcu_subsystem_ram_0_s1_write),                          //  output,   width = 1,                                                .write
		.mcu_subsystem_ram_0_s1_readdata                       (mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata),                       //   input,  width = 32,                                                .readdata
		.mcu_subsystem_ram_0_s1_writedata                      (mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata),                      //  output,  width = 32,                                                .writedata
		.mcu_subsystem_ram_0_s1_byteenable                     (mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable),                     //  output,   width = 4,                                                .byteenable
		.mcu_subsystem_ram_0_s1_chipselect                     (mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect),                     //  output,   width = 1,                                                .chipselect
		.mcu_subsystem_ram_0_s1_clken                          (mm_interconnect_0_mcu_subsystem_ram_0_s1_clken),                          //  output,   width = 1,                                                .clken
		.timer_1_s1_address                                    (mm_interconnect_0_timer_1_s1_address),                                    //  output,   width = 3,                                      timer_1_s1.address
		.timer_1_s1_write                                      (mm_interconnect_0_timer_1_s1_write),                                      //  output,   width = 1,                                                .write
		.timer_1_s1_readdata                                   (mm_interconnect_0_timer_1_s1_readdata),                                   //   input,  width = 16,                                                .readdata
		.timer_1_s1_writedata                                  (mm_interconnect_0_timer_1_s1_writedata),                                  //  output,  width = 16,                                                .writedata
		.timer_1_s1_chipselect                                 (mm_interconnect_0_timer_1_s1_chipselect),                                 //  output,   width = 1,                                                .chipselect
		.timer_0_s1_address                                    (mm_interconnect_0_timer_0_s1_address),                                    //  output,   width = 3,                                      timer_0_s1.address
		.timer_0_s1_write                                      (mm_interconnect_0_timer_0_s1_write),                                      //  output,   width = 1,                                                .write
		.timer_0_s1_readdata                                   (mm_interconnect_0_timer_0_s1_readdata),                                   //   input,  width = 16,                                                .readdata
		.timer_0_s1_writedata                                  (mm_interconnect_0_timer_0_s1_writedata),                                  //  output,  width = 16,                                                .writedata
		.timer_0_s1_chipselect                                 (mm_interconnect_0_timer_0_s1_chipselect),                                 //  output,   width = 1,                                                .chipselect
		.fmc_gpio_s1_address                                   (mm_interconnect_0_fmc_gpio_s1_address),                                   //  output,   width = 3,                                     fmc_gpio_s1.address
		.fmc_gpio_s1_write                                     (mm_interconnect_0_fmc_gpio_s1_write),                                     //  output,   width = 1,                                                .write
		.fmc_gpio_s1_readdata                                  (mm_interconnect_0_fmc_gpio_s1_readdata),                                  //   input,  width = 32,                                                .readdata
		.fmc_gpio_s1_writedata                                 (mm_interconnect_0_fmc_gpio_s1_writedata),                                 //  output,  width = 32,                                                .writedata
		.fmc_gpio_s1_chipselect                                (mm_interconnect_0_fmc_gpio_s1_chipselect),                                //  output,   width = 1,                                                .chipselect
		.phy_interlaken_0_serial_clock_reconfig_s0_address     (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_address),     //  output,  width = 10,       phy_interlaken_0_serial_clock_reconfig_s0.address
		.phy_interlaken_0_serial_clock_reconfig_s0_write       (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_write),       //  output,   width = 1,                                                .write
		.phy_interlaken_0_serial_clock_reconfig_s0_read        (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_read),        //  output,   width = 1,                                                .read
		.phy_interlaken_0_serial_clock_reconfig_s0_readdata    (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_readdata),    //   input,  width = 32,                                                .readdata
		.phy_interlaken_0_serial_clock_reconfig_s0_writedata   (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_writedata),   //  output,  width = 32,                                                .writedata
		.phy_interlaken_0_serial_clock_reconfig_s0_waitrequest (mm_interconnect_0_phy_interlaken_0_serial_clock_reconfig_s0_waitrequest), //   input,   width = 1,                                                .waitrequest
		.phy_interlaken_1_serial_clock_reconfig_s0_address     (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_address),     //  output,  width = 10,       phy_interlaken_1_serial_clock_reconfig_s0.address
		.phy_interlaken_1_serial_clock_reconfig_s0_write       (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_write),       //  output,   width = 1,                                                .write
		.phy_interlaken_1_serial_clock_reconfig_s0_read        (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_read),        //  output,   width = 1,                                                .read
		.phy_interlaken_1_serial_clock_reconfig_s0_readdata    (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_readdata),    //   input,  width = 32,                                                .readdata
		.phy_interlaken_1_serial_clock_reconfig_s0_writedata   (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_writedata),   //  output,  width = 32,                                                .writedata
		.phy_interlaken_1_serial_clock_reconfig_s0_waitrequest (mm_interconnect_0_phy_interlaken_1_serial_clock_reconfig_s0_waitrequest), //   input,   width = 1,                                                .waitrequest
		.fmc_spi_spi_control_port_address                      (mm_interconnect_0_fmc_spi_spi_control_port_address),                      //  output,   width = 3,                        fmc_spi_spi_control_port.address
		.fmc_spi_spi_control_port_write                        (mm_interconnect_0_fmc_spi_spi_control_port_write),                        //  output,   width = 1,                                                .write
		.fmc_spi_spi_control_port_read                         (mm_interconnect_0_fmc_spi_spi_control_port_read),                         //  output,   width = 1,                                                .read
		.fmc_spi_spi_control_port_readdata                     (mm_interconnect_0_fmc_spi_spi_control_port_readdata),                     //   input,  width = 16,                                                .readdata
		.fmc_spi_spi_control_port_writedata                    (mm_interconnect_0_fmc_spi_spi_control_port_writedata),                    //  output,  width = 16,                                                .writedata
		.fmc_spi_spi_control_port_chipselect                   (mm_interconnect_0_fmc_spi_spi_control_port_chipselect),                   //  output,   width = 1,                                                .chipselect
		.ad9144_jesd204_link_management_awaddr                 (mm_interconnect_0_ad9144_jesd204_link_management_awaddr),                 //  output,  width = 12,                  ad9144_jesd204_link_management.awaddr
		.ad9144_jesd204_link_management_awprot                 (mm_interconnect_0_ad9144_jesd204_link_management_awprot),                 //  output,   width = 3,                                                .awprot
		.ad9144_jesd204_link_management_awvalid                (mm_interconnect_0_ad9144_jesd204_link_management_awvalid),                //  output,   width = 1,                                                .awvalid
		.ad9144_jesd204_link_management_awready                (mm_interconnect_0_ad9144_jesd204_link_management_awready),                //   input,   width = 1,                                                .awready
		.ad9144_jesd204_link_management_wdata                  (mm_interconnect_0_ad9144_jesd204_link_management_wdata),                  //  output,  width = 32,                                                .wdata
		.ad9144_jesd204_link_management_wstrb                  (mm_interconnect_0_ad9144_jesd204_link_management_wstrb),                  //  output,   width = 4,                                                .wstrb
		.ad9144_jesd204_link_management_wvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_wvalid),                 //  output,   width = 1,                                                .wvalid
		.ad9144_jesd204_link_management_wready                 (mm_interconnect_0_ad9144_jesd204_link_management_wready),                 //   input,   width = 1,                                                .wready
		.ad9144_jesd204_link_management_bresp                  (mm_interconnect_0_ad9144_jesd204_link_management_bresp),                  //   input,   width = 2,                                                .bresp
		.ad9144_jesd204_link_management_bvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_bvalid),                 //   input,   width = 1,                                                .bvalid
		.ad9144_jesd204_link_management_bready                 (mm_interconnect_0_ad9144_jesd204_link_management_bready),                 //  output,   width = 1,                                                .bready
		.ad9144_jesd204_link_management_araddr                 (mm_interconnect_0_ad9144_jesd204_link_management_araddr),                 //  output,  width = 12,                                                .araddr
		.ad9144_jesd204_link_management_arprot                 (mm_interconnect_0_ad9144_jesd204_link_management_arprot),                 //  output,   width = 3,                                                .arprot
		.ad9144_jesd204_link_management_arvalid                (mm_interconnect_0_ad9144_jesd204_link_management_arvalid),                //  output,   width = 1,                                                .arvalid
		.ad9144_jesd204_link_management_arready                (mm_interconnect_0_ad9144_jesd204_link_management_arready),                //   input,   width = 1,                                                .arready
		.ad9144_jesd204_link_management_rdata                  (mm_interconnect_0_ad9144_jesd204_link_management_rdata),                  //   input,  width = 32,                                                .rdata
		.ad9144_jesd204_link_management_rresp                  (mm_interconnect_0_ad9144_jesd204_link_management_rresp),                  //   input,   width = 2,                                                .rresp
		.ad9144_jesd204_link_management_rvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_rvalid),                 //   input,   width = 1,                                                .rvalid
		.ad9144_jesd204_link_management_rready                 (mm_interconnect_0_ad9144_jesd204_link_management_rready),                 //  output,   width = 1,                                                .rready
		.ad9680_jesd204_link_management_awaddr                 (mm_interconnect_0_ad9680_jesd204_link_management_awaddr),                 //  output,  width = 12,                  ad9680_jesd204_link_management.awaddr
		.ad9680_jesd204_link_management_awprot                 (mm_interconnect_0_ad9680_jesd204_link_management_awprot),                 //  output,   width = 3,                                                .awprot
		.ad9680_jesd204_link_management_awvalid                (mm_interconnect_0_ad9680_jesd204_link_management_awvalid),                //  output,   width = 1,                                                .awvalid
		.ad9680_jesd204_link_management_awready                (mm_interconnect_0_ad9680_jesd204_link_management_awready),                //   input,   width = 1,                                                .awready
		.ad9680_jesd204_link_management_wdata                  (mm_interconnect_0_ad9680_jesd204_link_management_wdata),                  //  output,  width = 32,                                                .wdata
		.ad9680_jesd204_link_management_wstrb                  (mm_interconnect_0_ad9680_jesd204_link_management_wstrb),                  //  output,   width = 4,                                                .wstrb
		.ad9680_jesd204_link_management_wvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_wvalid),                 //  output,   width = 1,                                                .wvalid
		.ad9680_jesd204_link_management_wready                 (mm_interconnect_0_ad9680_jesd204_link_management_wready),                 //   input,   width = 1,                                                .wready
		.ad9680_jesd204_link_management_bresp                  (mm_interconnect_0_ad9680_jesd204_link_management_bresp),                  //   input,   width = 2,                                                .bresp
		.ad9680_jesd204_link_management_bvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_bvalid),                 //   input,   width = 1,                                                .bvalid
		.ad9680_jesd204_link_management_bready                 (mm_interconnect_0_ad9680_jesd204_link_management_bready),                 //  output,   width = 1,                                                .bready
		.ad9680_jesd204_link_management_araddr                 (mm_interconnect_0_ad9680_jesd204_link_management_araddr),                 //  output,  width = 12,                                                .araddr
		.ad9680_jesd204_link_management_arprot                 (mm_interconnect_0_ad9680_jesd204_link_management_arprot),                 //  output,   width = 3,                                                .arprot
		.ad9680_jesd204_link_management_arvalid                (mm_interconnect_0_ad9680_jesd204_link_management_arvalid),                //  output,   width = 1,                                                .arvalid
		.ad9680_jesd204_link_management_arready                (mm_interconnect_0_ad9680_jesd204_link_management_arready),                //   input,   width = 1,                                                .arready
		.ad9680_jesd204_link_management_rdata                  (mm_interconnect_0_ad9680_jesd204_link_management_rdata),                  //   input,  width = 32,                                                .rdata
		.ad9680_jesd204_link_management_rresp                  (mm_interconnect_0_ad9680_jesd204_link_management_rresp),                  //   input,   width = 2,                                                .rresp
		.ad9680_jesd204_link_management_rvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_rvalid),                 //   input,   width = 1,                                                .rvalid
		.ad9680_jesd204_link_management_rready                 (mm_interconnect_0_ad9680_jesd204_link_management_rready),                 //  output,   width = 1,                                                .rready
		.ad9144_jesd204_link_reconfig_awaddr                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr),                   //  output,  width = 14,                    ad9144_jesd204_link_reconfig.awaddr
		.ad9144_jesd204_link_reconfig_awprot                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot),                   //  output,   width = 3,                                                .awprot
		.ad9144_jesd204_link_reconfig_awvalid                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid),                  //  output,   width = 1,                                                .awvalid
		.ad9144_jesd204_link_reconfig_awready                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_awready),                  //   input,   width = 1,                                                .awready
		.ad9144_jesd204_link_reconfig_wdata                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata),                    //  output,  width = 32,                                                .wdata
		.ad9144_jesd204_link_reconfig_wstrb                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb),                    //  output,   width = 4,                                                .wstrb
		.ad9144_jesd204_link_reconfig_wvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid),                   //  output,   width = 1,                                                .wvalid
		.ad9144_jesd204_link_reconfig_wready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_wready),                   //   input,   width = 1,                                                .wready
		.ad9144_jesd204_link_reconfig_bresp                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp),                    //   input,   width = 2,                                                .bresp
		.ad9144_jesd204_link_reconfig_bvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid),                   //   input,   width = 1,                                                .bvalid
		.ad9144_jesd204_link_reconfig_bready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_bready),                   //  output,   width = 1,                                                .bready
		.ad9144_jesd204_link_reconfig_araddr                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr),                   //  output,  width = 14,                                                .araddr
		.ad9144_jesd204_link_reconfig_arprot                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot),                   //  output,   width = 3,                                                .arprot
		.ad9144_jesd204_link_reconfig_arvalid                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid),                  //  output,   width = 1,                                                .arvalid
		.ad9144_jesd204_link_reconfig_arready                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_arready),                  //   input,   width = 1,                                                .arready
		.ad9144_jesd204_link_reconfig_rdata                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata),                    //   input,  width = 32,                                                .rdata
		.ad9144_jesd204_link_reconfig_rresp                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp),                    //   input,   width = 2,                                                .rresp
		.ad9144_jesd204_link_reconfig_rvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid),                   //   input,   width = 1,                                                .rvalid
		.ad9144_jesd204_link_reconfig_rready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_rready),                   //  output,   width = 1,                                                .rready
		.ad9680_jesd204_link_reconfig_awaddr                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr),                   //  output,  width = 14,                    ad9680_jesd204_link_reconfig.awaddr
		.ad9680_jesd204_link_reconfig_awprot                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot),                   //  output,   width = 3,                                                .awprot
		.ad9680_jesd204_link_reconfig_awvalid                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid),                  //  output,   width = 1,                                                .awvalid
		.ad9680_jesd204_link_reconfig_awready                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_awready),                  //   input,   width = 1,                                                .awready
		.ad9680_jesd204_link_reconfig_wdata                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata),                    //  output,  width = 32,                                                .wdata
		.ad9680_jesd204_link_reconfig_wstrb                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb),                    //  output,   width = 4,                                                .wstrb
		.ad9680_jesd204_link_reconfig_wvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid),                   //  output,   width = 1,                                                .wvalid
		.ad9680_jesd204_link_reconfig_wready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_wready),                   //   input,   width = 1,                                                .wready
		.ad9680_jesd204_link_reconfig_bresp                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp),                    //   input,   width = 2,                                                .bresp
		.ad9680_jesd204_link_reconfig_bvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid),                   //   input,   width = 1,                                                .bvalid
		.ad9680_jesd204_link_reconfig_bready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_bready),                   //  output,   width = 1,                                                .bready
		.ad9680_jesd204_link_reconfig_araddr                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr),                   //  output,  width = 14,                                                .araddr
		.ad9680_jesd204_link_reconfig_arprot                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot),                   //  output,   width = 3,                                                .arprot
		.ad9680_jesd204_link_reconfig_arvalid                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid),                  //  output,   width = 1,                                                .arvalid
		.ad9680_jesd204_link_reconfig_arready                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_arready),                  //   input,   width = 1,                                                .arready
		.ad9680_jesd204_link_reconfig_rdata                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata),                    //   input,  width = 32,                                                .rdata
		.ad9680_jesd204_link_reconfig_rresp                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp),                    //   input,   width = 2,                                                .rresp
		.ad9680_jesd204_link_reconfig_rvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid),                   //   input,   width = 1,                                                .rvalid
		.ad9680_jesd204_link_reconfig_rready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_rready),                   //  output,   width = 1,                                                .rready
		.ad9144_core_s_axi_awaddr                              (mm_interconnect_0_ad9144_core_s_axi_awaddr),                              //  output,  width = 16,                               ad9144_core_s_axi.awaddr
		.ad9144_core_s_axi_awprot                              (mm_interconnect_0_ad9144_core_s_axi_awprot),                              //  output,   width = 3,                                                .awprot
		.ad9144_core_s_axi_awvalid                             (mm_interconnect_0_ad9144_core_s_axi_awvalid),                             //  output,   width = 1,                                                .awvalid
		.ad9144_core_s_axi_awready                             (mm_interconnect_0_ad9144_core_s_axi_awready),                             //   input,   width = 1,                                                .awready
		.ad9144_core_s_axi_wdata                               (mm_interconnect_0_ad9144_core_s_axi_wdata),                               //  output,  width = 32,                                                .wdata
		.ad9144_core_s_axi_wstrb                               (mm_interconnect_0_ad9144_core_s_axi_wstrb),                               //  output,   width = 4,                                                .wstrb
		.ad9144_core_s_axi_wvalid                              (mm_interconnect_0_ad9144_core_s_axi_wvalid),                              //  output,   width = 1,                                                .wvalid
		.ad9144_core_s_axi_wready                              (mm_interconnect_0_ad9144_core_s_axi_wready),                              //   input,   width = 1,                                                .wready
		.ad9144_core_s_axi_bresp                               (mm_interconnect_0_ad9144_core_s_axi_bresp),                               //   input,   width = 2,                                                .bresp
		.ad9144_core_s_axi_bvalid                              (mm_interconnect_0_ad9144_core_s_axi_bvalid),                              //   input,   width = 1,                                                .bvalid
		.ad9144_core_s_axi_bready                              (mm_interconnect_0_ad9144_core_s_axi_bready),                              //  output,   width = 1,                                                .bready
		.ad9144_core_s_axi_araddr                              (mm_interconnect_0_ad9144_core_s_axi_araddr),                              //  output,  width = 16,                                                .araddr
		.ad9144_core_s_axi_arprot                              (mm_interconnect_0_ad9144_core_s_axi_arprot),                              //  output,   width = 3,                                                .arprot
		.ad9144_core_s_axi_arvalid                             (mm_interconnect_0_ad9144_core_s_axi_arvalid),                             //  output,   width = 1,                                                .arvalid
		.ad9144_core_s_axi_arready                             (mm_interconnect_0_ad9144_core_s_axi_arready),                             //   input,   width = 1,                                                .arready
		.ad9144_core_s_axi_rdata                               (mm_interconnect_0_ad9144_core_s_axi_rdata),                               //   input,  width = 32,                                                .rdata
		.ad9144_core_s_axi_rresp                               (mm_interconnect_0_ad9144_core_s_axi_rresp),                               //   input,   width = 2,                                                .rresp
		.ad9144_core_s_axi_rvalid                              (mm_interconnect_0_ad9144_core_s_axi_rvalid),                              //   input,   width = 1,                                                .rvalid
		.ad9144_core_s_axi_rready                              (mm_interconnect_0_ad9144_core_s_axi_rready),                              //  output,   width = 1,                                                .rready
		.ad9144_dma_s_axi_awaddr                               (mm_interconnect_0_ad9144_dma_s_axi_awaddr),                               //  output,  width = 12,                                ad9144_dma_s_axi.awaddr
		.ad9144_dma_s_axi_awprot                               (mm_interconnect_0_ad9144_dma_s_axi_awprot),                               //  output,   width = 3,                                                .awprot
		.ad9144_dma_s_axi_awvalid                              (mm_interconnect_0_ad9144_dma_s_axi_awvalid),                              //  output,   width = 1,                                                .awvalid
		.ad9144_dma_s_axi_awready                              (mm_interconnect_0_ad9144_dma_s_axi_awready),                              //   input,   width = 1,                                                .awready
		.ad9144_dma_s_axi_wdata                                (mm_interconnect_0_ad9144_dma_s_axi_wdata),                                //  output,  width = 32,                                                .wdata
		.ad9144_dma_s_axi_wstrb                                (mm_interconnect_0_ad9144_dma_s_axi_wstrb),                                //  output,   width = 4,                                                .wstrb
		.ad9144_dma_s_axi_wvalid                               (mm_interconnect_0_ad9144_dma_s_axi_wvalid),                               //  output,   width = 1,                                                .wvalid
		.ad9144_dma_s_axi_wready                               (mm_interconnect_0_ad9144_dma_s_axi_wready),                               //   input,   width = 1,                                                .wready
		.ad9144_dma_s_axi_bresp                                (mm_interconnect_0_ad9144_dma_s_axi_bresp),                                //   input,   width = 2,                                                .bresp
		.ad9144_dma_s_axi_bvalid                               (mm_interconnect_0_ad9144_dma_s_axi_bvalid),                               //   input,   width = 1,                                                .bvalid
		.ad9144_dma_s_axi_bready                               (mm_interconnect_0_ad9144_dma_s_axi_bready),                               //  output,   width = 1,                                                .bready
		.ad9144_dma_s_axi_araddr                               (mm_interconnect_0_ad9144_dma_s_axi_araddr),                               //  output,  width = 12,                                                .araddr
		.ad9144_dma_s_axi_arprot                               (mm_interconnect_0_ad9144_dma_s_axi_arprot),                               //  output,   width = 3,                                                .arprot
		.ad9144_dma_s_axi_arvalid                              (mm_interconnect_0_ad9144_dma_s_axi_arvalid),                              //  output,   width = 1,                                                .arvalid
		.ad9144_dma_s_axi_arready                              (mm_interconnect_0_ad9144_dma_s_axi_arready),                              //   input,   width = 1,                                                .arready
		.ad9144_dma_s_axi_rdata                                (mm_interconnect_0_ad9144_dma_s_axi_rdata),                                //   input,  width = 32,                                                .rdata
		.ad9144_dma_s_axi_rresp                                (mm_interconnect_0_ad9144_dma_s_axi_rresp),                                //   input,   width = 2,                                                .rresp
		.ad9144_dma_s_axi_rvalid                               (mm_interconnect_0_ad9144_dma_s_axi_rvalid),                               //   input,   width = 1,                                                .rvalid
		.ad9144_dma_s_axi_rready                               (mm_interconnect_0_ad9144_dma_s_axi_rready),                               //  output,   width = 1,                                                .rready
		.ad9680_core_s_axi_awaddr                              (mm_interconnect_0_ad9680_core_s_axi_awaddr),                              //  output,  width = 16,                               ad9680_core_s_axi.awaddr
		.ad9680_core_s_axi_awprot                              (mm_interconnect_0_ad9680_core_s_axi_awprot),                              //  output,   width = 3,                                                .awprot
		.ad9680_core_s_axi_awvalid                             (mm_interconnect_0_ad9680_core_s_axi_awvalid),                             //  output,   width = 1,                                                .awvalid
		.ad9680_core_s_axi_awready                             (mm_interconnect_0_ad9680_core_s_axi_awready),                             //   input,   width = 1,                                                .awready
		.ad9680_core_s_axi_wdata                               (mm_interconnect_0_ad9680_core_s_axi_wdata),                               //  output,  width = 32,                                                .wdata
		.ad9680_core_s_axi_wstrb                               (mm_interconnect_0_ad9680_core_s_axi_wstrb),                               //  output,   width = 4,                                                .wstrb
		.ad9680_core_s_axi_wvalid                              (mm_interconnect_0_ad9680_core_s_axi_wvalid),                              //  output,   width = 1,                                                .wvalid
		.ad9680_core_s_axi_wready                              (mm_interconnect_0_ad9680_core_s_axi_wready),                              //   input,   width = 1,                                                .wready
		.ad9680_core_s_axi_bresp                               (mm_interconnect_0_ad9680_core_s_axi_bresp),                               //   input,   width = 2,                                                .bresp
		.ad9680_core_s_axi_bvalid                              (mm_interconnect_0_ad9680_core_s_axi_bvalid),                              //   input,   width = 1,                                                .bvalid
		.ad9680_core_s_axi_bready                              (mm_interconnect_0_ad9680_core_s_axi_bready),                              //  output,   width = 1,                                                .bready
		.ad9680_core_s_axi_araddr                              (mm_interconnect_0_ad9680_core_s_axi_araddr),                              //  output,  width = 16,                                                .araddr
		.ad9680_core_s_axi_arprot                              (mm_interconnect_0_ad9680_core_s_axi_arprot),                              //  output,   width = 3,                                                .arprot
		.ad9680_core_s_axi_arvalid                             (mm_interconnect_0_ad9680_core_s_axi_arvalid),                             //  output,   width = 1,                                                .arvalid
		.ad9680_core_s_axi_arready                             (mm_interconnect_0_ad9680_core_s_axi_arready),                             //   input,   width = 1,                                                .arready
		.ad9680_core_s_axi_rdata                               (mm_interconnect_0_ad9680_core_s_axi_rdata),                               //   input,  width = 32,                                                .rdata
		.ad9680_core_s_axi_rresp                               (mm_interconnect_0_ad9680_core_s_axi_rresp),                               //   input,   width = 2,                                                .rresp
		.ad9680_core_s_axi_rvalid                              (mm_interconnect_0_ad9680_core_s_axi_rvalid),                              //   input,   width = 1,                                                .rvalid
		.ad9680_core_s_axi_rready                              (mm_interconnect_0_ad9680_core_s_axi_rready),                              //  output,   width = 1,                                                .rready
		.ad9680_dma_s_axi_awaddr                               (mm_interconnect_0_ad9680_dma_s_axi_awaddr),                               //  output,  width = 12,                                ad9680_dma_s_axi.awaddr
		.ad9680_dma_s_axi_awprot                               (mm_interconnect_0_ad9680_dma_s_axi_awprot),                               //  output,   width = 3,                                                .awprot
		.ad9680_dma_s_axi_awvalid                              (mm_interconnect_0_ad9680_dma_s_axi_awvalid),                              //  output,   width = 1,                                                .awvalid
		.ad9680_dma_s_axi_awready                              (mm_interconnect_0_ad9680_dma_s_axi_awready),                              //   input,   width = 1,                                                .awready
		.ad9680_dma_s_axi_wdata                                (mm_interconnect_0_ad9680_dma_s_axi_wdata),                                //  output,  width = 32,                                                .wdata
		.ad9680_dma_s_axi_wstrb                                (mm_interconnect_0_ad9680_dma_s_axi_wstrb),                                //  output,   width = 4,                                                .wstrb
		.ad9680_dma_s_axi_wvalid                               (mm_interconnect_0_ad9680_dma_s_axi_wvalid),                               //  output,   width = 1,                                                .wvalid
		.ad9680_dma_s_axi_wready                               (mm_interconnect_0_ad9680_dma_s_axi_wready),                               //   input,   width = 1,                                                .wready
		.ad9680_dma_s_axi_bresp                                (mm_interconnect_0_ad9680_dma_s_axi_bresp),                                //   input,   width = 2,                                                .bresp
		.ad9680_dma_s_axi_bvalid                               (mm_interconnect_0_ad9680_dma_s_axi_bvalid),                               //   input,   width = 1,                                                .bvalid
		.ad9680_dma_s_axi_bready                               (mm_interconnect_0_ad9680_dma_s_axi_bready),                               //  output,   width = 1,                                                .bready
		.ad9680_dma_s_axi_araddr                               (mm_interconnect_0_ad9680_dma_s_axi_araddr),                               //  output,  width = 12,                                                .araddr
		.ad9680_dma_s_axi_arprot                               (mm_interconnect_0_ad9680_dma_s_axi_arprot),                               //  output,   width = 3,                                                .arprot
		.ad9680_dma_s_axi_arvalid                              (mm_interconnect_0_ad9680_dma_s_axi_arvalid),                              //  output,   width = 1,                                                .arvalid
		.ad9680_dma_s_axi_arready                              (mm_interconnect_0_ad9680_dma_s_axi_arready),                              //   input,   width = 1,                                                .arready
		.ad9680_dma_s_axi_rdata                                (mm_interconnect_0_ad9680_dma_s_axi_rdata),                                //   input,  width = 32,                                                .rdata
		.ad9680_dma_s_axi_rresp                                (mm_interconnect_0_ad9680_dma_s_axi_rresp),                                //   input,   width = 2,                                                .rresp
		.ad9680_dma_s_axi_rvalid                               (mm_interconnect_0_ad9680_dma_s_axi_rvalid),                               //   input,   width = 1,                                                .rvalid
		.ad9680_dma_s_axi_rready                               (mm_interconnect_0_ad9680_dma_s_axi_rready),                               //  output,   width = 1,                                                .rready
		.mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                          //   input,   width = 1, mcu_subsystem_cpu_0_reset_reset_bridge_in_reset.reset
		.phy_interlaken_1_reset_reset_bridge_in_reset_reset    (rst_controller_006_reset_out_reset),                                      //   input,   width = 1,    phy_interlaken_1_reset_reset_bridge_in_reset.reset
		.bridge_3_s0_reset_reset_bridge_in_reset_reset         (rst_controller_005_reset_out_reset),                                      //   input,   width = 1,         bridge_3_s0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                  (clock_in_out_clk_clk),                                                    //   input,   width = 1,                                clock_in_out_clk.clk
		.iopll_0_outclk0_clk                                   (iopll_0_outclk0_clk)                                                      //   input,   width = 1,                                 iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_wtppfva mm_interconnect_1 (
		.bridge_2_m0_address                                  (bridge_2_m0_address),                                        //   input,   width = 6,                                    bridge_2_m0.address
		.bridge_2_m0_waitrequest                              (bridge_2_m0_waitrequest),                                    //  output,   width = 1,                                               .waitrequest
		.bridge_2_m0_burstcount                               (bridge_2_m0_burstcount),                                     //   input,   width = 1,                                               .burstcount
		.bridge_2_m0_byteenable                               (bridge_2_m0_byteenable),                                     //   input,   width = 4,                                               .byteenable
		.bridge_2_m0_read                                     (bridge_2_m0_read),                                           //   input,   width = 1,                                               .read
		.bridge_2_m0_readdata                                 (bridge_2_m0_readdata),                                       //  output,  width = 32,                                               .readdata
		.bridge_2_m0_readdatavalid                            (bridge_2_m0_readdatavalid),                                  //  output,   width = 1,                                               .readdatavalid
		.bridge_2_m0_write                                    (bridge_2_m0_write),                                          //   input,   width = 1,                                               .write
		.bridge_2_m0_writedata                                (bridge_2_m0_writedata),                                      //   input,  width = 32,                                               .writedata
		.bridge_2_m0_debugaccess                              (bridge_2_m0_debugaccess),                                    //   input,   width = 1,                                               .debugaccess
		.qspi_controller2_0_avl_csr_address                   (mm_interconnect_1_qspi_controller2_0_avl_csr_address),       //  output,   width = 4,                     qspi_controller2_0_avl_csr.address
		.qspi_controller2_0_avl_csr_write                     (mm_interconnect_1_qspi_controller2_0_avl_csr_write),         //  output,   width = 1,                                               .write
		.qspi_controller2_0_avl_csr_read                      (mm_interconnect_1_qspi_controller2_0_avl_csr_read),          //  output,   width = 1,                                               .read
		.qspi_controller2_0_avl_csr_readdata                  (mm_interconnect_1_qspi_controller2_0_avl_csr_readdata),      //   input,  width = 32,                                               .readdata
		.qspi_controller2_0_avl_csr_writedata                 (mm_interconnect_1_qspi_controller2_0_avl_csr_writedata),     //  output,  width = 32,                                               .writedata
		.qspi_controller2_0_avl_csr_readdatavalid             (mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid), //   input,   width = 1,                                               .readdatavalid
		.qspi_controller2_0_avl_csr_waitrequest               (mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest),   //   input,   width = 1,                                               .waitrequest
		.bridge_2_m0_reset_reset_bridge_in_reset_reset        (rst_controller_reset_out_reset),                             //   input,   width = 1,        bridge_2_m0_reset_reset_bridge_in_reset.reset
		.qspi_controller2_0_reset_reset_bridge_in_reset_reset (rst_controller_005_reset_out_reset),                         //   input,   width = 1, qspi_controller2_0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                 (clock_in_out_clk_clk),                                       //   input,   width = 1,                               clock_in_out_clk.clk
		.iopll_0_outclk0_clk                                  (iopll_0_outclk0_clk)                                         //   input,   width = 1,                                iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_j2xn3na mm_interconnect_2 (
		.bridge_3_m0_address                                  (bridge_3_m0_address),                                        //   input,  width = 27,                                    bridge_3_m0.address
		.bridge_3_m0_waitrequest                              (bridge_3_m0_waitrequest),                                    //  output,   width = 1,                                               .waitrequest
		.bridge_3_m0_burstcount                               (bridge_3_m0_burstcount),                                     //   input,   width = 1,                                               .burstcount
		.bridge_3_m0_byteenable                               (bridge_3_m0_byteenable),                                     //   input,   width = 4,                                               .byteenable
		.bridge_3_m0_read                                     (bridge_3_m0_read),                                           //   input,   width = 1,                                               .read
		.bridge_3_m0_readdata                                 (bridge_3_m0_readdata),                                       //  output,  width = 32,                                               .readdata
		.bridge_3_m0_readdatavalid                            (bridge_3_m0_readdatavalid),                                  //  output,   width = 1,                                               .readdatavalid
		.bridge_3_m0_write                                    (bridge_3_m0_write),                                          //   input,   width = 1,                                               .write
		.bridge_3_m0_writedata                                (bridge_3_m0_writedata),                                      //   input,  width = 32,                                               .writedata
		.bridge_3_m0_debugaccess                              (bridge_3_m0_debugaccess),                                    //   input,   width = 1,                                               .debugaccess
		.qspi_controller2_0_avl_mem_address                   (mm_interconnect_2_qspi_controller2_0_avl_mem_address),       //  output,  width = 25,                     qspi_controller2_0_avl_mem.address
		.qspi_controller2_0_avl_mem_write                     (mm_interconnect_2_qspi_controller2_0_avl_mem_write),         //  output,   width = 1,                                               .write
		.qspi_controller2_0_avl_mem_read                      (mm_interconnect_2_qspi_controller2_0_avl_mem_read),          //  output,   width = 1,                                               .read
		.qspi_controller2_0_avl_mem_readdata                  (mm_interconnect_2_qspi_controller2_0_avl_mem_readdata),      //   input,  width = 32,                                               .readdata
		.qspi_controller2_0_avl_mem_writedata                 (mm_interconnect_2_qspi_controller2_0_avl_mem_writedata),     //  output,  width = 32,                                               .writedata
		.qspi_controller2_0_avl_mem_burstcount                (mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount),    //  output,   width = 7,                                               .burstcount
		.qspi_controller2_0_avl_mem_byteenable                (mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable),    //  output,   width = 4,                                               .byteenable
		.qspi_controller2_0_avl_mem_readdatavalid             (mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid), //   input,   width = 1,                                               .readdatavalid
		.qspi_controller2_0_avl_mem_waitrequest               (mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest),   //   input,   width = 1,                                               .waitrequest
		.bridge_3_m0_reset_reset_bridge_in_reset_reset        (rst_controller_reset_out_reset),                             //   input,   width = 1,        bridge_3_m0_reset_reset_bridge_in_reset.reset
		.qspi_controller2_0_reset_reset_bridge_in_reset_reset (rst_controller_005_reset_out_reset),                         //   input,   width = 1, qspi_controller2_0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                 (clock_in_out_clk_clk),                                       //   input,   width = 1,                               clock_in_out_clk.clk
		.iopll_0_outclk0_clk                                  (iopll_0_outclk0_clk)                                         //   input,   width = 1,                                iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_74snbbq mm_interconnect_3 (
		.bridge_0_m0_address                                     (bridge_0_m0_address),                              //   input,   width = 31,                                       bridge_0_m0.address
		.bridge_0_m0_waitrequest                                 (bridge_0_m0_waitrequest),                          //  output,    width = 1,                                                  .waitrequest
		.bridge_0_m0_burstcount                                  (bridge_0_m0_burstcount),                           //   input,    width = 8,                                                  .burstcount
		.bridge_0_m0_byteenable                                  (bridge_0_m0_byteenable),                           //   input,    width = 4,                                                  .byteenable
		.bridge_0_m0_read                                        (bridge_0_m0_read),                                 //   input,    width = 1,                                                  .read
		.bridge_0_m0_readdata                                    (bridge_0_m0_readdata),                             //  output,   width = 32,                                                  .readdata
		.bridge_0_m0_readdatavalid                               (bridge_0_m0_readdatavalid),                        //  output,    width = 1,                                                  .readdatavalid
		.bridge_0_m0_write                                       (bridge_0_m0_write),                                //   input,    width = 1,                                                  .write
		.bridge_0_m0_writedata                                   (bridge_0_m0_writedata),                            //   input,   width = 32,                                                  .writedata
		.bridge_0_m0_debugaccess                                 (bridge_0_m0_debugaccess),                          //   input,    width = 1,                                                  .debugaccess
		.sdram_ctrl_amm_0_address                                (mm_interconnect_3_sdram_ctrl_amm_0_address),       //  output,   width = 26,                                  sdram_ctrl_amm_0.address
		.sdram_ctrl_amm_0_write                                  (mm_interconnect_3_sdram_ctrl_amm_0_write),         //  output,    width = 1,                                                  .write
		.sdram_ctrl_amm_0_read                                   (mm_interconnect_3_sdram_ctrl_amm_0_read),          //  output,    width = 1,                                                  .read
		.sdram_ctrl_amm_0_readdata                               (mm_interconnect_3_sdram_ctrl_amm_0_readdata),      //   input,  width = 256,                                                  .readdata
		.sdram_ctrl_amm_0_writedata                              (mm_interconnect_3_sdram_ctrl_amm_0_writedata),     //  output,  width = 256,                                                  .writedata
		.sdram_ctrl_amm_0_burstcount                             (mm_interconnect_3_sdram_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                  .burstcount
		.sdram_ctrl_amm_0_byteenable                             (mm_interconnect_3_sdram_ctrl_amm_0_byteenable),    //  output,   width = 32,                                                  .byteenable
		.sdram_ctrl_amm_0_readdatavalid                          (mm_interconnect_3_sdram_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                  .readdatavalid
		.sdram_ctrl_amm_0_waitrequest                            (~mm_interconnect_3_sdram_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                  .waitrequest
		.ad9680_dma_m_dest_axi_awid                              (ad9680_dma_m_dest_axi_awid),                       //   input,    width = 1,                             ad9680_dma_m_dest_axi.awid
		.ad9680_dma_m_dest_axi_awaddr                            (ad9680_dma_m_dest_axi_awaddr),                     //   input,   width = 32,                                                  .awaddr
		.ad9680_dma_m_dest_axi_awlen                             (ad9680_dma_m_dest_axi_awlen),                      //   input,    width = 4,                                                  .awlen
		.ad9680_dma_m_dest_axi_awsize                            (ad9680_dma_m_dest_axi_awsize),                     //   input,    width = 3,                                                  .awsize
		.ad9680_dma_m_dest_axi_awburst                           (ad9680_dma_m_dest_axi_awburst),                    //   input,    width = 2,                                                  .awburst
		.ad9680_dma_m_dest_axi_awlock                            (ad9680_dma_m_dest_axi_awlock),                     //   input,    width = 2,                                                  .awlock
		.ad9680_dma_m_dest_axi_awcache                           (ad9680_dma_m_dest_axi_awcache),                    //   input,    width = 4,                                                  .awcache
		.ad9680_dma_m_dest_axi_awprot                            (ad9680_dma_m_dest_axi_awprot),                     //   input,    width = 3,                                                  .awprot
		.ad9680_dma_m_dest_axi_awvalid                           (ad9680_dma_m_dest_axi_awvalid),                    //   input,    width = 1,                                                  .awvalid
		.ad9680_dma_m_dest_axi_awready                           (ad9680_dma_m_dest_axi_awready),                    //  output,    width = 1,                                                  .awready
		.ad9680_dma_m_dest_axi_wid                               (ad9680_dma_m_dest_axi_wid),                        //   input,    width = 1,                                                  .wid
		.ad9680_dma_m_dest_axi_wdata                             (ad9680_dma_m_dest_axi_wdata),                      //   input,  width = 128,                                                  .wdata
		.ad9680_dma_m_dest_axi_wstrb                             (ad9680_dma_m_dest_axi_wstrb),                      //   input,   width = 16,                                                  .wstrb
		.ad9680_dma_m_dest_axi_wlast                             (ad9680_dma_m_dest_axi_wlast),                      //   input,    width = 1,                                                  .wlast
		.ad9680_dma_m_dest_axi_wvalid                            (ad9680_dma_m_dest_axi_wvalid),                     //   input,    width = 1,                                                  .wvalid
		.ad9680_dma_m_dest_axi_wready                            (ad9680_dma_m_dest_axi_wready),                     //  output,    width = 1,                                                  .wready
		.ad9680_dma_m_dest_axi_bid                               (ad9680_dma_m_dest_axi_bid),                        //  output,    width = 1,                                                  .bid
		.ad9680_dma_m_dest_axi_bresp                             (ad9680_dma_m_dest_axi_bresp),                      //  output,    width = 2,                                                  .bresp
		.ad9680_dma_m_dest_axi_bvalid                            (ad9680_dma_m_dest_axi_bvalid),                     //  output,    width = 1,                                                  .bvalid
		.ad9680_dma_m_dest_axi_bready                            (ad9680_dma_m_dest_axi_bready),                     //   input,    width = 1,                                                  .bready
		.ad9680_dma_m_dest_axi_arid                              (ad9680_dma_m_dest_axi_arid),                       //   input,    width = 1,                                                  .arid
		.ad9680_dma_m_dest_axi_araddr                            (ad9680_dma_m_dest_axi_araddr),                     //   input,   width = 32,                                                  .araddr
		.ad9680_dma_m_dest_axi_arlen                             (ad9680_dma_m_dest_axi_arlen),                      //   input,    width = 4,                                                  .arlen
		.ad9680_dma_m_dest_axi_arsize                            (ad9680_dma_m_dest_axi_arsize),                     //   input,    width = 3,                                                  .arsize
		.ad9680_dma_m_dest_axi_arburst                           (ad9680_dma_m_dest_axi_arburst),                    //   input,    width = 2,                                                  .arburst
		.ad9680_dma_m_dest_axi_arlock                            (ad9680_dma_m_dest_axi_arlock),                     //   input,    width = 2,                                                  .arlock
		.ad9680_dma_m_dest_axi_arcache                           (ad9680_dma_m_dest_axi_arcache),                    //   input,    width = 4,                                                  .arcache
		.ad9680_dma_m_dest_axi_arprot                            (ad9680_dma_m_dest_axi_arprot),                     //   input,    width = 3,                                                  .arprot
		.ad9680_dma_m_dest_axi_arvalid                           (ad9680_dma_m_dest_axi_arvalid),                    //   input,    width = 1,                                                  .arvalid
		.ad9680_dma_m_dest_axi_arready                           (ad9680_dma_m_dest_axi_arready),                    //  output,    width = 1,                                                  .arready
		.ad9680_dma_m_dest_axi_rid                               (ad9680_dma_m_dest_axi_rid),                        //  output,    width = 1,                                                  .rid
		.ad9680_dma_m_dest_axi_rdata                             (ad9680_dma_m_dest_axi_rdata),                      //  output,  width = 128,                                                  .rdata
		.ad9680_dma_m_dest_axi_rresp                             (ad9680_dma_m_dest_axi_rresp),                      //  output,    width = 2,                                                  .rresp
		.ad9680_dma_m_dest_axi_rlast                             (ad9680_dma_m_dest_axi_rlast),                      //  output,    width = 1,                                                  .rlast
		.ad9680_dma_m_dest_axi_rvalid                            (ad9680_dma_m_dest_axi_rvalid),                     //  output,    width = 1,                                                  .rvalid
		.ad9680_dma_m_dest_axi_rready                            (ad9680_dma_m_dest_axi_rready),                     //   input,    width = 1,                                                  .rready
		.ad9144_dma_m_src_axi_awid                               (ad9144_dma_m_src_axi_awid),                        //   input,    width = 1,                              ad9144_dma_m_src_axi.awid
		.ad9144_dma_m_src_axi_awaddr                             (ad9144_dma_m_src_axi_awaddr),                      //   input,   width = 32,                                                  .awaddr
		.ad9144_dma_m_src_axi_awlen                              (ad9144_dma_m_src_axi_awlen),                       //   input,    width = 4,                                                  .awlen
		.ad9144_dma_m_src_axi_awsize                             (ad9144_dma_m_src_axi_awsize),                      //   input,    width = 3,                                                  .awsize
		.ad9144_dma_m_src_axi_awburst                            (ad9144_dma_m_src_axi_awburst),                     //   input,    width = 2,                                                  .awburst
		.ad9144_dma_m_src_axi_awlock                             (ad9144_dma_m_src_axi_awlock),                      //   input,    width = 2,                                                  .awlock
		.ad9144_dma_m_src_axi_awcache                            (ad9144_dma_m_src_axi_awcache),                     //   input,    width = 4,                                                  .awcache
		.ad9144_dma_m_src_axi_awprot                             (ad9144_dma_m_src_axi_awprot),                      //   input,    width = 3,                                                  .awprot
		.ad9144_dma_m_src_axi_awvalid                            (ad9144_dma_m_src_axi_awvalid),                     //   input,    width = 1,                                                  .awvalid
		.ad9144_dma_m_src_axi_awready                            (ad9144_dma_m_src_axi_awready),                     //  output,    width = 1,                                                  .awready
		.ad9144_dma_m_src_axi_wid                                (ad9144_dma_m_src_axi_wid),                         //   input,    width = 1,                                                  .wid
		.ad9144_dma_m_src_axi_wdata                              (ad9144_dma_m_src_axi_wdata),                       //   input,  width = 128,                                                  .wdata
		.ad9144_dma_m_src_axi_wstrb                              (ad9144_dma_m_src_axi_wstrb),                       //   input,   width = 16,                                                  .wstrb
		.ad9144_dma_m_src_axi_wlast                              (ad9144_dma_m_src_axi_wlast),                       //   input,    width = 1,                                                  .wlast
		.ad9144_dma_m_src_axi_wvalid                             (ad9144_dma_m_src_axi_wvalid),                      //   input,    width = 1,                                                  .wvalid
		.ad9144_dma_m_src_axi_wready                             (ad9144_dma_m_src_axi_wready),                      //  output,    width = 1,                                                  .wready
		.ad9144_dma_m_src_axi_bid                                (ad9144_dma_m_src_axi_bid),                         //  output,    width = 1,                                                  .bid
		.ad9144_dma_m_src_axi_bresp                              (ad9144_dma_m_src_axi_bresp),                       //  output,    width = 2,                                                  .bresp
		.ad9144_dma_m_src_axi_bvalid                             (ad9144_dma_m_src_axi_bvalid),                      //  output,    width = 1,                                                  .bvalid
		.ad9144_dma_m_src_axi_bready                             (ad9144_dma_m_src_axi_bready),                      //   input,    width = 1,                                                  .bready
		.ad9144_dma_m_src_axi_arid                               (ad9144_dma_m_src_axi_arid),                        //   input,    width = 1,                                                  .arid
		.ad9144_dma_m_src_axi_araddr                             (ad9144_dma_m_src_axi_araddr),                      //   input,   width = 32,                                                  .araddr
		.ad9144_dma_m_src_axi_arlen                              (ad9144_dma_m_src_axi_arlen),                       //   input,    width = 4,                                                  .arlen
		.ad9144_dma_m_src_axi_arsize                             (ad9144_dma_m_src_axi_arsize),                      //   input,    width = 3,                                                  .arsize
		.ad9144_dma_m_src_axi_arburst                            (ad9144_dma_m_src_axi_arburst),                     //   input,    width = 2,                                                  .arburst
		.ad9144_dma_m_src_axi_arlock                             (ad9144_dma_m_src_axi_arlock),                      //   input,    width = 2,                                                  .arlock
		.ad9144_dma_m_src_axi_arcache                            (ad9144_dma_m_src_axi_arcache),                     //   input,    width = 4,                                                  .arcache
		.ad9144_dma_m_src_axi_arprot                             (ad9144_dma_m_src_axi_arprot),                      //   input,    width = 3,                                                  .arprot
		.ad9144_dma_m_src_axi_arvalid                            (ad9144_dma_m_src_axi_arvalid),                     //   input,    width = 1,                                                  .arvalid
		.ad9144_dma_m_src_axi_arready                            (ad9144_dma_m_src_axi_arready),                     //  output,    width = 1,                                                  .arready
		.ad9144_dma_m_src_axi_rid                                (ad9144_dma_m_src_axi_rid),                         //  output,    width = 1,                                                  .rid
		.ad9144_dma_m_src_axi_rdata                              (ad9144_dma_m_src_axi_rdata),                       //  output,  width = 128,                                                  .rdata
		.ad9144_dma_m_src_axi_rresp                              (ad9144_dma_m_src_axi_rresp),                       //  output,    width = 2,                                                  .rresp
		.ad9144_dma_m_src_axi_rlast                              (ad9144_dma_m_src_axi_rlast),                       //  output,    width = 1,                                                  .rlast
		.ad9144_dma_m_src_axi_rvalid                             (ad9144_dma_m_src_axi_rvalid),                      //  output,    width = 1,                                                  .rvalid
		.ad9144_dma_m_src_axi_rready                             (ad9144_dma_m_src_axi_rready),                      //   input,    width = 1,                                                  .rready
		.bridge_0_m0_reset_reset_bridge_in_reset_reset           (rst_controller_001_reset_out_reset),               //   input,    width = 1,           bridge_0_m0_reset_reset_bridge_in_reset.reset
		.ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset_reset (rst_controller_003_reset_out_reset),               //   input,    width = 1, ad9680_dma_m_dest_axi_reset_reset_bridge_in_reset.reset
		.sdram_emif_usr_clk_clk                                  (sdram_emif_usr_clk_clk),                           //   input,    width = 1,                                sdram_emif_usr_clk.clk
		.refclk_emif_out_clk_clk                                 (refclk_emif_out_clk_clk)                           //   input,    width = 1,                               refclk_emif_out_clk.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_msgqzrq mm_interconnect_4 (
		.bridge_1_m0_address                           (bridge_1_m0_address),                                         //   input,  width = 12,                             bridge_1_m0.address
		.bridge_1_m0_waitrequest                       (bridge_1_m0_waitrequest),                                     //  output,   width = 1,                                        .waitrequest
		.bridge_1_m0_burstcount                        (bridge_1_m0_burstcount),                                      //   input,   width = 3,                                        .burstcount
		.bridge_1_m0_byteenable                        (bridge_1_m0_byteenable),                                      //   input,   width = 4,                                        .byteenable
		.bridge_1_m0_read                              (bridge_1_m0_read),                                            //   input,   width = 1,                                        .read
		.bridge_1_m0_readdata                          (bridge_1_m0_readdata),                                        //  output,  width = 32,                                        .readdata
		.bridge_1_m0_readdatavalid                     (bridge_1_m0_readdatavalid),                                   //  output,   width = 1,                                        .readdatavalid
		.bridge_1_m0_write                             (bridge_1_m0_write),                                           //   input,   width = 1,                                        .write
		.bridge_1_m0_writedata                         (bridge_1_m0_writedata),                                       //   input,  width = 32,                                        .writedata
		.bridge_1_m0_debugaccess                       (bridge_1_m0_debugaccess),                                     //   input,   width = 1,                                        .debugaccess
		.sdram_ctrl_mmr_slave_0_address                (mm_interconnect_4_sdram_ctrl_mmr_slave_0_address),            //  output,  width = 10,                  sdram_ctrl_mmr_slave_0.address
		.sdram_ctrl_mmr_slave_0_write                  (mm_interconnect_4_sdram_ctrl_mmr_slave_0_write),              //  output,   width = 1,                                        .write
		.sdram_ctrl_mmr_slave_0_read                   (mm_interconnect_4_sdram_ctrl_mmr_slave_0_read),               //  output,   width = 1,                                        .read
		.sdram_ctrl_mmr_slave_0_readdata               (mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdata),           //   input,  width = 32,                                        .readdata
		.sdram_ctrl_mmr_slave_0_writedata              (mm_interconnect_4_sdram_ctrl_mmr_slave_0_writedata),          //  output,  width = 32,                                        .writedata
		.sdram_ctrl_mmr_slave_0_beginbursttransfer     (mm_interconnect_4_sdram_ctrl_mmr_slave_0_beginbursttransfer), //  output,   width = 1,                                        .beginbursttransfer
		.sdram_ctrl_mmr_slave_0_burstcount             (mm_interconnect_4_sdram_ctrl_mmr_slave_0_burstcount),         //  output,   width = 2,                                        .burstcount
		.sdram_ctrl_mmr_slave_0_readdatavalid          (mm_interconnect_4_sdram_ctrl_mmr_slave_0_readdatavalid),      //   input,   width = 1,                                        .readdatavalid
		.sdram_ctrl_mmr_slave_0_waitrequest            (mm_interconnect_4_sdram_ctrl_mmr_slave_0_waitrequest),        //   input,   width = 1,                                        .waitrequest
		.bridge_1_m0_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                          //   input,   width = 1, bridge_1_m0_reset_reset_bridge_in_reset.reset
		.sdram_emif_usr_clk_clk                        (sdram_emif_usr_clk_clk)                                       //   input,   width = 1,                      sdram_emif_usr_clk.clk
	);

	mcu_subsystem_altera_irq_mapper_181_43i4jbq irq_mapper (
		.clk            (clock_in_out_clk_clk),           //   input,   width = 1,        clk.clk
		.reset          (rst_controller_reset_out_reset), //   input,   width = 1,  clk_reset.reset
		.receiver0_irq  (irq_mapper_receiver0_irq),       //   input,   width = 1,  receiver0.irq
		.receiver1_irq  (irq_mapper_receiver1_irq),       //   input,   width = 1,  receiver1.irq
		.receiver2_irq  (irq_mapper_receiver2_irq),       //   input,   width = 1,  receiver2.irq
		.receiver3_irq  (irq_mapper_receiver3_irq),       //   input,   width = 1,  receiver3.irq
		.receiver4_irq  (irq_mapper_receiver4_irq),       //   input,   width = 1,  receiver4.irq
		.receiver5_irq  (irq_mapper_receiver5_irq),       //   input,   width = 1,  receiver5.irq
		.receiver6_irq  (irq_mapper_receiver6_irq),       //   input,   width = 1,  receiver6.irq
		.receiver7_irq  (irq_mapper_receiver7_irq),       //   input,   width = 1,  receiver7.irq
		.receiver8_irq  (irq_mapper_receiver8_irq),       //   input,   width = 1,  receiver8.irq
		.receiver9_irq  (irq_mapper_receiver9_irq),       //   input,   width = 1,  receiver9.irq
		.receiver10_irq (irq_mapper_receiver10_irq),      //   input,   width = 1, receiver10.irq
		.receiver11_irq (irq_mapper_receiver11_irq),      //   input,   width = 1, receiver11.irq
		.receiver12_irq (irq_mapper_receiver12_irq),      //   input,   width = 1, receiver12.irq
		.receiver13_irq (irq_mapper_receiver13_irq),      //   input,   width = 1, receiver13.irq
		.receiver14_irq (irq_mapper_receiver14_irq),      //   input,   width = 1, receiver14.irq
		.sender_irq     (mcu_subsystem_cpu_0_irq_irq)     //  output,  width = 32,     sender.irq
	);

	mcu_subsystem_altera_irq_clock_crosser_181_76b3i7y #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (iopll_0_outclk0_clk),                //   input,  width = 1,       receiver_clk.clk
		.sender_clk     (clock_in_out_clk_clk),               //   input,  width = 1,         sender_clk.clk
		.receiver_reset (rst_controller_005_reset_out_reset), //   input,  width = 1, receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   input,  width = 1,   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //   input,  width = 1,           receiver.irq
		.sender_irq     (irq_mapper_receiver2_irq)            //  output,  width = 1,             sender.irq
	);

	mcu_subsystem_altera_avalon_st_adapter_181_tcpvwli #(
		.inBitsPerSymbol (128),
		.inUsePackets    (0),
		.inDataWidth     (128),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (0),
		.inReadyLatency  (0),
		.outDataWidth    (128),
		.outChannelWidth (0),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ad9680_jesd204_link_clk_clk),        //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (rst_controller_004_reset_out_reset), //   input,    width = 1, in_rst_0.reset
		.in_0_data      (ad9680_jesd204_link_data_data),      //   input,  width = 128,     in_0.data
		.in_0_valid     (ad9680_jesd204_link_data_valid),     //   input,    width = 1,         .valid
		.out_0_data     (avalon_st_adapter_out_0_data),       //  output,  width = 128,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),      //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready)       //   input,    width = 1,         .ready
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),                          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),                //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),            //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~sdram_emif_usr_reset_n_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (sdram_emif_usr_clk_clk),             //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (ad9144_jesd204_link_reset_reset),    //   input,  width = 1, reset_in0.reset
		.clk            (ad9144_jesd204_link_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~sdram_emif_usr_reset_n_reset),      //   input,  width = 1, reset_in0.reset
		.clk            (refclk_emif_out_clk_clk),            //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (ad9680_jesd204_link_clk_clk),                   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (iopll_0_outclk0_clk),                           //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (~reset_in_out_reset_reset),              //   input,  width = 1, reset_in0.reset
		.clk            (clock_in_out_clk_clk),                   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_006_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated),                       
		.reset_in1      (1'b0),                                   // (terminated),                       
		.reset_req_in1  (1'b0),                                   // (terminated),                       
		.reset_in2      (1'b0),                                   // (terminated),                       
		.reset_req_in2  (1'b0),                                   // (terminated),                       
		.reset_in3      (1'b0),                                   // (terminated),                       
		.reset_req_in3  (1'b0),                                   // (terminated),                       
		.reset_in4      (1'b0),                                   // (terminated),                       
		.reset_req_in4  (1'b0),                                   // (terminated),                       
		.reset_in5      (1'b0),                                   // (terminated),                       
		.reset_req_in5  (1'b0),                                   // (terminated),                       
		.reset_in6      (1'b0),                                   // (terminated),                       
		.reset_req_in6  (1'b0),                                   // (terminated),                       
		.reset_in7      (1'b0),                                   // (terminated),                       
		.reset_req_in7  (1'b0),                                   // (terminated),                       
		.reset_in8      (1'b0),                                   // (terminated),                       
		.reset_req_in8  (1'b0),                                   // (terminated),                       
		.reset_in9      (1'b0),                                   // (terminated),                       
		.reset_req_in9  (1'b0),                                   // (terminated),                       
		.reset_in10     (1'b0),                                   // (terminated),                       
		.reset_req_in10 (1'b0),                                   // (terminated),                       
		.reset_in11     (1'b0),                                   // (terminated),                       
		.reset_req_in11 (1'b0),                                   // (terminated),                       
		.reset_in12     (1'b0),                                   // (terminated),                       
		.reset_req_in12 (1'b0),                                   // (terminated),                       
		.reset_in13     (1'b0),                                   // (terminated),                       
		.reset_req_in13 (1'b0),                                   // (terminated),                       
		.reset_in14     (1'b0),                                   // (terminated),                       
		.reset_req_in14 (1'b0),                                   // (terminated),                       
		.reset_in15     (1'b0),                                   // (terminated),                       
		.reset_req_in15 (1'b0)                                    // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_007 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (),                                              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_007_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

endmodule
