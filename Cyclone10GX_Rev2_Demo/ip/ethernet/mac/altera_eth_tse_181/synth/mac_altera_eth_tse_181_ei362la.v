// mac_altera_eth_tse_181_ei362la.v

// This file was auto-generated from altera_eth_tse_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mac_altera_eth_tse_181_ei362la (
		input  wire        clk,           // control_port_clock_connection.clk
		input  wire        reset,         //              reset_connection.reset
		input  wire [7:0]  reg_addr,      //                  control_port.address
		output wire [31:0] reg_data_out,  //                              .readdata
		input  wire        reg_rd,        //                              .read
		input  wire [31:0] reg_data_in,   //                              .writedata
		input  wire        reg_wr,        //                              .write
		output wire        reg_busy,      //                              .waitrequest
		input  wire        ff_tx_clk,     //     transmit_clock_connection.clk
		input  wire        ff_rx_clk,     //      receive_clock_connection.clk
		output wire [31:0] ff_rx_data,    //                       receive.data
		output wire        ff_rx_eop,     //                              .endofpacket
		output wire [5:0]  rx_err,        //                              .error
		output wire [1:0]  ff_rx_mod,     //                              .empty
		input  wire        ff_rx_rdy,     //                              .ready
		output wire        ff_rx_sop,     //                              .startofpacket
		output wire        ff_rx_dval,    //                              .valid
		input  wire [31:0] ff_tx_data,    //                      transmit.data
		input  wire        ff_tx_eop,     //                              .endofpacket
		input  wire        ff_tx_err,     //                              .error
		input  wire [1:0]  ff_tx_mod,     //                              .empty
		output wire        ff_tx_rdy,     //                              .ready
		input  wire        ff_tx_sop,     //                              .startofpacket
		input  wire        ff_tx_wren,    //                              .valid
		input  wire        xon_gen,       //           mac_misc_connection.xon_gen
		input  wire        xoff_gen,      //                              .xoff_gen
		output wire        magic_wakeup,  //                              .magic_wakeup
		input  wire        magic_sleep_n, //                              .magic_sleep_n
		input  wire        ff_tx_crc_fwd, //                              .ff_tx_crc_fwd
		output wire        ff_tx_septy,   //                              .ff_tx_septy
		output wire        tx_ff_uflow,   //                              .tx_ff_uflow
		output wire        ff_tx_a_full,  //                              .ff_tx_a_full
		output wire        ff_tx_a_empty, //                              .ff_tx_a_empty
		output wire [17:0] rx_err_stat,   //                              .rx_err_stat
		output wire [3:0]  rx_frm_type,   //                              .rx_frm_type
		output wire        ff_rx_dsav,    //                              .ff_rx_dsav
		output wire        ff_rx_a_full,  //                              .ff_rx_a_full
		output wire        ff_rx_a_empty, //                              .ff_rx_a_empty
		output wire        mdc,           //           mac_mdio_connection.mdc
		input  wire        mdio_in,       //                              .mdio_in
		output wire        mdio_out,      //                              .mdio_out
		output wire        mdio_oen,      //                              .mdio_oen
		input  wire [7:0]  gm_rx_d,       //           mac_gmii_connection.gmii_rx_d
		input  wire        gm_rx_dv,      //                              .gmii_rx_dv
		input  wire        gm_rx_err,     //                              .gmii_rx_err
		output wire [7:0]  gm_tx_d,       //                              .gmii_tx_d
		output wire        gm_tx_en,      //                              .gmii_tx_en
		output wire        gm_tx_err,     //                              .gmii_tx_err
		input  wire [3:0]  m_rx_d,        //            mac_mii_connection.mii_rx_d
		input  wire        m_rx_en,       //                              .mii_rx_dv
		input  wire        m_rx_err,      //                              .mii_rx_err
		output wire [3:0]  m_tx_d,        //                              .mii_tx_d
		output wire        m_tx_en,       //                              .mii_tx_en
		output wire        m_tx_err,      //                              .mii_tx_err
		input  wire        set_10,        //         mac_status_connection.set_10
		input  wire        set_1000,      //                              .set_1000
		output wire        eth_mode,      //                              .eth_mode
		output wire        ena_10,        //                              .ena_10
		input  wire        tx_clk,        //   pcs_mac_tx_clock_connection.clk
		input  wire        rx_clk         //   pcs_mac_rx_clock_connection.clk
	);

	altera_eth_tse_mac #(
		.ING_ADDR                 (13),
		.ENABLE_MAC_RX_VLAN       (0),
		.ENABLE_SUP_ADDR          (1),
		.DEVICE_FAMILY            ("CYCLONE10GX"),
		.INSERT_TA                (0),
		.ING_FIFO                 (8192),
		.ENABLE_ECC               (0),
		.CRC32DWIDTH              (8),
		.ENABLE_ENA               (32),
		.SYNCHRONIZER_DEPTH       (3),
		.ENABLE_MAC_TX_VLAN       (0),
		.RESET_LEVEL              (1),
		.STAT_CNT_ENA             (1),
		.CUST_VERSION             (0),
		.CRC32S1L2_EXTERN         (0),
		.MBIT_ONLY                (1),
		.EG_ADDR                  (13),
		.CORE_VERSION             (4609),
		.CRC32GENDELAY            (6),
		.EG_FIFO                  (8192),
		.REDUCED_INTERFACE_ENA    (0),
		.ENABLE_MAGIC_DETECT      (1),
		.ENABLE_MDIO              (1),
		.ENABLE_MAC_TXADDR_SET    (1),
		.RAM_TYPE                 ("AUTO"),
		.CRC32CHECK16BIT          (0),
		.ENABLE_LGTH_CHECK        (1),
		.ENABLE_MAC_FLOW_CTRL     (1),
		.ENABLE_SHIFT16           (1),
		.USE_SYNC_RESET           (1),
		.REDUCED_CONTROL          (0),
		.MDIO_CLK_DIV             (40),
		.ENABLE_PADDING           (1),
		.ENABLE_GMII_LOOPBACK     (1),
		.GBIT_ONLY                (1),
		.ENA_HASH                 (1),
		.ENABLE_EXTENDED_STAT_REG (1),
		.ENABLE_HD_LOGIC          (0)
	) i_tse_mac (
		.clk             (clk),           //   input,   width = 1, control_port_clock_connection.clk
		.reset           (reset),         //   input,   width = 1,              reset_connection.reset
		.reg_addr        (reg_addr),      //   input,   width = 8,                  control_port.address
		.reg_data_out    (reg_data_out),  //  output,  width = 32,                              .readdata
		.reg_rd          (reg_rd),        //   input,   width = 1,                              .read
		.reg_data_in     (reg_data_in),   //   input,  width = 32,                              .writedata
		.reg_wr          (reg_wr),        //   input,   width = 1,                              .write
		.reg_busy        (reg_busy),      //  output,   width = 1,                              .waitrequest
		.ff_tx_clk       (ff_tx_clk),     //   input,   width = 1,     transmit_clock_connection.clk
		.ff_rx_clk       (ff_rx_clk),     //   input,   width = 1,      receive_clock_connection.clk
		.ff_rx_data      (ff_rx_data),    //  output,  width = 32,                       receive.data
		.ff_rx_eop       (ff_rx_eop),     //  output,   width = 1,                              .endofpacket
		.rx_err          (rx_err),        //  output,   width = 6,                              .error
		.ff_rx_mod       (ff_rx_mod),     //  output,   width = 2,                              .empty
		.ff_rx_rdy       (ff_rx_rdy),     //   input,   width = 1,                              .ready
		.ff_rx_sop       (ff_rx_sop),     //  output,   width = 1,                              .startofpacket
		.ff_rx_dval      (ff_rx_dval),    //  output,   width = 1,                              .valid
		.ff_tx_data      (ff_tx_data),    //   input,  width = 32,                      transmit.data
		.ff_tx_eop       (ff_tx_eop),     //   input,   width = 1,                              .endofpacket
		.ff_tx_err       (ff_tx_err),     //   input,   width = 1,                              .error
		.ff_tx_mod       (ff_tx_mod),     //   input,   width = 2,                              .empty
		.ff_tx_rdy       (ff_tx_rdy),     //  output,   width = 1,                              .ready
		.ff_tx_sop       (ff_tx_sop),     //   input,   width = 1,                              .startofpacket
		.ff_tx_wren      (ff_tx_wren),    //   input,   width = 1,                              .valid
		.xon_gen         (xon_gen),       //   input,   width = 1,           mac_misc_connection.export
		.xoff_gen        (xoff_gen),      //   input,   width = 1,                              .export
		.magic_wakeup    (magic_wakeup),  //  output,   width = 1,                              .export
		.magic_sleep_n   (magic_sleep_n), //   input,   width = 1,                              .export
		.ff_tx_crc_fwd   (ff_tx_crc_fwd), //   input,   width = 1,                              .export
		.ff_tx_septy     (ff_tx_septy),   //  output,   width = 1,                              .export
		.tx_ff_uflow     (tx_ff_uflow),   //  output,   width = 1,                              .export
		.ff_tx_a_full    (ff_tx_a_full),  //  output,   width = 1,                              .export
		.ff_tx_a_empty   (ff_tx_a_empty), //  output,   width = 1,                              .export
		.rx_err_stat     (rx_err_stat),   //  output,  width = 18,                              .export
		.rx_frm_type     (rx_frm_type),   //  output,   width = 4,                              .export
		.ff_rx_dsav      (ff_rx_dsav),    //  output,   width = 1,                              .export
		.ff_rx_a_full    (ff_rx_a_full),  //  output,   width = 1,                              .export
		.ff_rx_a_empty   (ff_rx_a_empty), //  output,   width = 1,                              .export
		.mdc             (mdc),           //  output,   width = 1,           mac_mdio_connection.mdc
		.mdio_in         (mdio_in),       //   input,   width = 1,                              .mdio_in
		.mdio_out        (mdio_out),      //  output,   width = 1,                              .mdio_out
		.mdio_oen        (mdio_oen),      //  output,   width = 1,                              .mdio_oen
		.gm_rx_d         (gm_rx_d),       //   input,   width = 8,           mac_gmii_connection.gmii_rx_d
		.gm_rx_dv        (gm_rx_dv),      //   input,   width = 1,                              .gmii_rx_dv
		.gm_rx_err       (gm_rx_err),     //   input,   width = 1,                              .gmii_rx_err
		.gm_tx_d         (gm_tx_d),       //  output,   width = 8,                              .gmii_tx_d
		.gm_tx_en        (gm_tx_en),      //  output,   width = 1,                              .gmii_tx_en
		.gm_tx_err       (gm_tx_err),     //  output,   width = 1,                              .gmii_tx_err
		.m_rx_d          (m_rx_d),        //   input,   width = 4,            mac_mii_connection.mii_rx_d
		.m_rx_en         (m_rx_en),       //   input,   width = 1,                              .mii_rx_dv
		.m_rx_err        (m_rx_err),      //   input,   width = 1,                              .mii_rx_err
		.m_tx_d          (m_tx_d),        //  output,   width = 4,                              .mii_tx_d
		.m_tx_en         (m_tx_en),       //  output,   width = 1,                              .mii_tx_en
		.m_tx_err        (m_tx_err),      //  output,   width = 1,                              .mii_tx_err
		.set_10          (set_10),        //   input,   width = 1,         mac_status_connection.set_10
		.set_1000        (set_1000),      //   input,   width = 1,                              .set_1000
		.eth_mode        (eth_mode),      //  output,   width = 1,                              .eth_mode
		.ena_10          (ena_10),        //  output,   width = 1,                              .ena_10
		.tx_clk          (tx_clk),        //   input,   width = 1,   pcs_mac_tx_clock_connection.clk
		.rx_clk          (rx_clk),        //   input,   width = 1,   pcs_mac_rx_clock_connection.clk
		.rx_clkena       (1'b1),          // (terminated),                                            
		.tx_clkena       (1'b1),          // (terminated),                                            
		.mac_eccstatus   (),              // (terminated),                                            
		.rgmii_out1_aclr (),              // (terminated),                                            
		.rgmii_out1_din  (),              // (terminated),                                            
		.rgmii_in1_dout  (2'b00),         // (terminated),                                            
		.rgmii_in1_ck    (),              // (terminated),                                            
		.rgmii_out4_din  (),              // (terminated),                                            
		.rgmii_out4_ck   (),              // (terminated),                                            
		.rgmii_in1_pad   (),              // (terminated),                                            
		.rgmii_out4_aclr (),              // (terminated),                                            
		.rgmii_out1_pad  (1'b0),          // (terminated),                                            
		.rgmii_out1_ck   (),              // (terminated),                                            
		.rgmii_in4_dout  (8'b00000000),   // (terminated),                                            
		.rgmii_in4_pad   (),              // (terminated),                                            
		.rgmii_out4_pad  (4'b0000),       // (terminated),                                            
		.rgmii_in4_ck    (),              // (terminated),                                            
		.rgmii_in        (4'b0000),       // (terminated),                                            
		.rgmii_out       (),              // (terminated),                                            
		.rx_control      (1'b0),          // (terminated),                                            
		.tx_control      (),              // (terminated),                                            
		.m_rx_crs        (1'b0),          // (terminated),                                            
		.m_rx_col        (1'b0)           // (terminated),                                            
	);

endmodule
