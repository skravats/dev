// dma_rx_altera_msgdma_181_sblzwoi.v

// This file was auto-generated from altera_msgdma_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module dma_rx_altera_msgdma_181_sblzwoi (
		input  wire         clock_clk,                    //            clock.clk
		input  wire         reset_n_reset_n,              //          reset_n.reset_n
		input  wire [31:0]  csr_writedata,                //              csr.writedata
		input  wire         csr_write,                    //                 .write
		input  wire [3:0]   csr_byteenable,               //                 .byteenable
		output wire [31:0]  csr_readdata,                 //                 .readdata
		input  wire         csr_read,                     //                 .read
		input  wire [2:0]   csr_address,                  //                 .address
		input  wire         descriptor_slave_write,       // descriptor_slave.write
		output wire         descriptor_slave_waitrequest, //                 .waitrequest
		input  wire [255:0] descriptor_slave_writedata,   //                 .writedata
		input  wire [31:0]  descriptor_slave_byteenable,  //                 .byteenable
		output wire         response_waitrequest,         //         response.waitrequest
		input  wire [3:0]   response_byteenable,          //                 .byteenable
		input  wire         response_address,             //                 .address
		output wire [31:0]  response_readdata,            //                 .readdata
		input  wire         response_read,                //                 .read
		output wire         csr_irq_irq,                  //          csr_irq.irq
		output wire [31:0]  mm_write_address,             //         mm_write.address
		output wire         mm_write_write,               //                 .write
		output wire [31:0]  mm_write_byteenable,          //                 .byteenable
		output wire [255:0] mm_write_writedata,           //                 .writedata
		input  wire         mm_write_waitrequest,         //                 .waitrequest
		output wire [7:0]   mm_write_burstcount,          //                 .burstcount
		input  wire [255:0] st_sink_data,                 //          st_sink.data
		input  wire         st_sink_valid,                //                 .valid
		output wire         st_sink_ready,                //                 .ready
		input  wire         st_sink_startofpacket,        //                 .startofpacket
		input  wire         st_sink_endofpacket,          //                 .endofpacket
		input  wire [4:0]   st_sink_empty,                //                 .empty
		input  wire [7:0]   st_sink_error                 //                 .error
	);

	wire          dispatcher_internal_write_command_source_valid; // dispatcher_internal:src_write_master_valid -> write_mstr_internal:snk_command_valid
	wire  [255:0] dispatcher_internal_write_command_source_data;  // dispatcher_internal:src_write_master_data -> write_mstr_internal:snk_command_data
	wire          dispatcher_internal_write_command_source_ready; // write_mstr_internal:snk_command_ready -> dispatcher_internal:src_write_master_ready
	wire          write_mstr_internal_response_source_valid;      // write_mstr_internal:src_response_valid -> dispatcher_internal:snk_write_master_valid
	wire  [255:0] write_mstr_internal_response_source_data;       // write_mstr_internal:src_response_data -> dispatcher_internal:snk_write_master_data
	wire          write_mstr_internal_response_source_ready;      // dispatcher_internal:snk_write_master_ready -> write_mstr_internal:src_response_ready

	dispatcher #(
		.PREFETCHER_USE_CASE           (0),
		.MODE                          (2),
		.RESPONSE_PORT                 (0),
		.DESCRIPTOR_INTERFACE          (0),
		.DESCRIPTOR_FIFO_DEPTH         (128),
		.ENHANCED_FEATURES             (1),
		.DESCRIPTOR_WIDTH              (256),
		.DESCRIPTOR_BYTEENABLE_WIDTH   (32),
		.DATA_WIDTH_DERIVED            (5),
		.DATA_FIFO_DEPTH_DERIVED       (8),
		.MAX_BYTE_DERIVED              (1),
		.TRANSFER_TYPE_DERIVED         (2),
		.BURST_ENABLE                  (1),
		.MAX_BURST_COUNT_DERIVED       (6),
		.BURST_WRAPPING_SUPPORT        (0),
		.STRIDE_ENABLE_DERIVED         (0),
		.MAX_STRIDE_DERIVED            (0),
		.PROGRAMMABLE_BURST_ENABLE     (1),
		.CHANNEL_ENABLE                (0),
		.CHANNEL_WIDTH_DERIVED         (7),
		.ERROR_ENABLE                  (1),
		.ERROR_WIDTH_DERIVED           (7),
		.PACKET_ENABLE                 (1),
		.DESCRIPTOR_FIFO_DEPTH_DERIVED (4)
	) dispatcher_internal (
		.clk                     (clock_clk),                                                                                                                                                                                                                                                             //   input,    width = 1,                clock.clk
		.reset                   (~reset_n_reset_n),                                                                                                                                                                                                                                                      //   input,    width = 1,          clock_reset.reset
		.csr_writedata           (csr_writedata),                                                                                                                                                                                                                                                         //   input,   width = 32,                  CSR.writedata
		.csr_write               (csr_write),                                                                                                                                                                                                                                                             //   input,    width = 1,                     .write
		.csr_byteenable          (csr_byteenable),                                                                                                                                                                                                                                                        //   input,    width = 4,                     .byteenable
		.csr_readdata            (csr_readdata),                                                                                                                                                                                                                                                          //  output,   width = 32,                     .readdata
		.csr_read                (csr_read),                                                                                                                                                                                                                                                              //   input,    width = 1,                     .read
		.csr_address             (csr_address),                                                                                                                                                                                                                                                           //   input,    width = 3,                     .address
		.descriptor_write        (descriptor_slave_write),                                                                                                                                                                                                                                                //   input,    width = 1,     Descriptor_Slave.write
		.descriptor_waitrequest  (descriptor_slave_waitrequest),                                                                                                                                                                                                                                          //  output,    width = 1,                     .waitrequest
		.descriptor_writedata    (descriptor_slave_writedata),                                                                                                                                                                                                                                            //   input,  width = 256,                     .writedata
		.descriptor_byteenable   (descriptor_slave_byteenable),                                                                                                                                                                                                                                           //   input,   width = 32,                     .byteenable
		.mm_response_waitrequest (response_waitrequest),                                                                                                                                                                                                                                                  //  output,    width = 1,       Response_Slave.waitrequest
		.mm_response_byteenable  (response_byteenable),                                                                                                                                                                                                                                                   //   input,    width = 4,                     .byteenable
		.mm_response_address     (response_address),                                                                                                                                                                                                                                                      //   input,    width = 1,                     .address
		.mm_response_readdata    (response_readdata),                                                                                                                                                                                                                                                     //  output,   width = 32,                     .readdata
		.mm_response_read        (response_read),                                                                                                                                                                                                                                                         //   input,    width = 1,                     .read
		.src_write_master_data   (dispatcher_internal_write_command_source_data),                                                                                                                                                                                                                         //  output,  width = 256, Write_Command_Source.data
		.src_write_master_valid  (dispatcher_internal_write_command_source_valid),                                                                                                                                                                                                                        //  output,    width = 1,                     .valid
		.src_write_master_ready  (dispatcher_internal_write_command_source_ready),                                                                                                                                                                                                                        //   input,    width = 1,                     .ready
		.snk_write_master_data   (write_mstr_internal_response_source_data),                                                                                                                                                                                                                              //   input,  width = 256,  Write_Response_Sink.data
		.snk_write_master_valid  (write_mstr_internal_response_source_valid),                                                                                                                                                                                                                             //   input,    width = 1,                     .valid
		.snk_write_master_ready  (write_mstr_internal_response_source_ready),                                                                                                                                                                                                                             //  output,    width = 1,                     .ready
		.csr_irq                 (csr_irq_irq),                                                                                                                                                                                                                                                           //  output,    width = 1,              csr_irq.irq
		.src_response_data       (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.src_response_valid      (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.src_response_ready      (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.snk_descriptor_data     (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                    
		.snk_descriptor_valid    (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.snk_descriptor_ready    (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.src_read_master_data    (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.src_read_master_valid   (),                                                                                                                                                                                                                                                                      // (terminated),                                    
		.src_read_master_ready   (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.snk_read_master_data    (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                    
		.snk_read_master_valid   (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                    
		.snk_read_master_ready   ()                                                                                                                                                                                                                                                                       // (terminated),                                    
	);

	write_master #(
		.DATA_WIDTH                     (256),
		.LENGTH_WIDTH                   (12),
		.FIFO_DEPTH                     (4096),
		.STRIDE_ENABLE                  (0),
		.BURST_ENABLE                   (1),
		.PACKET_ENABLE                  (1),
		.ERROR_ENABLE                   (1),
		.ERROR_WIDTH                    (8),
		.BYTE_ENABLE_WIDTH              (32),
		.BYTE_ENABLE_WIDTH_LOG2         (5),
		.NO_BYTEENABLES                 (0),
		.ADDRESS_WIDTH                  (32),
		.FIFO_DEPTH_LOG2                (12),
		.SYMBOL_WIDTH                   (8),
		.NUMBER_OF_SYMBOLS              (32),
		.NUMBER_OF_SYMBOLS_LOG2         (5),
		.MAX_BURST_COUNT_WIDTH          (8),
		.UNALIGNED_ACCESSES_ENABLE      (1),
		.ONLY_FULL_ACCESS_ENABLE        (0),
		.BURST_WRAPPING_SUPPORT         (0),
		.PROGRAMMABLE_BURST_ENABLE      (1),
		.MAX_BURST_COUNT                (128),
		.FIFO_SPEED_OPTIMIZATION        (1),
		.STRIDE_WIDTH                   (1),
		.ACTUAL_BYTES_TRANSFERRED_WIDTH (13)
	) write_mstr_internal (
		.clk                (clock_clk),                                      //   input,    width = 1,             Clock.clk
		.reset              (~reset_n_reset_n),                               //   input,    width = 1,       Clock_reset.reset
		.master_address     (mm_write_address),                               //  output,   width = 32, Data_Write_Master.address
		.master_write       (mm_write_write),                                 //  output,    width = 1,                  .write
		.master_byteenable  (mm_write_byteenable),                            //  output,   width = 32,                  .byteenable
		.master_writedata   (mm_write_writedata),                             //  output,  width = 256,                  .writedata
		.master_waitrequest (mm_write_waitrequest),                           //   input,    width = 1,                  .waitrequest
		.master_burstcount  (mm_write_burstcount),                            //  output,    width = 8,                  .burstcount
		.snk_data           (st_sink_data),                                   //   input,  width = 256,         Data_Sink.data
		.snk_valid          (st_sink_valid),                                  //   input,    width = 1,                  .valid
		.snk_ready          (st_sink_ready),                                  //  output,    width = 1,                  .ready
		.snk_sop            (st_sink_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.snk_eop            (st_sink_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.snk_empty          (st_sink_empty),                                  //   input,    width = 5,                  .empty
		.snk_error          (st_sink_error),                                  //   input,    width = 8,                  .error
		.snk_command_data   (dispatcher_internal_write_command_source_data),  //   input,  width = 256,      Command_Sink.data
		.snk_command_valid  (dispatcher_internal_write_command_source_valid), //   input,    width = 1,                  .valid
		.snk_command_ready  (dispatcher_internal_write_command_source_ready), //  output,    width = 1,                  .ready
		.src_response_data  (write_mstr_internal_response_source_data),       //  output,  width = 256,   Response_Source.data
		.src_response_valid (write_mstr_internal_response_source_valid),      //  output,    width = 1,                  .valid
		.src_response_ready (write_mstr_internal_response_source_ready)       //   input,    width = 1,                  .ready
	);

endmodule
