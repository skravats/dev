// mcu_subsystem.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem (
		input  wire        tx_fifo_bypass_bypass,         // tx_fifo_bypass.bypass
		input  wire [0:0]  tx_pll_select_pll_select,      //  tx_pll_select.pll_select
		input  wire        tx_ref_clk_clk,                //     tx_ref_clk.clk
		output wire [3:0]  tx_serial_data_tx_serial_data, // tx_serial_data.tx_serial_data
		input  wire        tx_sync_export,                //        tx_sync.export
		input  wire        tx_sysref_export,              //      tx_sysref.export
		input  wire        rx_ref_clk_clk,                //     rx_ref_clk.clk
		input  wire [3:0]  rx_serial_data_rx_serial_data, // rx_serial_data.rx_serial_data
		output wire [0:0]  rx_sync_export,                //        rx_sync.export
		input  wire        rx_sysref_export,              //      rx_sysref.export
		input  wire        clk_clk,                       //            clk.clk
		input  wire        oct_oct_rzqin,                 //            oct.oct_rzqin
		output wire [0:0]  mem_mem_ck,                    //            mem.mem_ck
		output wire [0:0]  mem_mem_ck_n,                  //               .mem_ck_n
		output wire [15:0] mem_mem_a,                     //               .mem_a
		output wire [2:0]  mem_mem_ba,                    //               .mem_ba
		output wire [0:0]  mem_mem_cke,                   //               .mem_cke
		output wire [0:0]  mem_mem_cs_n,                  //               .mem_cs_n
		output wire [0:0]  mem_mem_odt,                   //               .mem_odt
		output wire [0:0]  mem_mem_reset_n,               //               .mem_reset_n
		output wire [0:0]  mem_mem_we_n,                  //               .mem_we_n
		output wire [0:0]  mem_mem_ras_n,                 //               .mem_ras_n
		output wire [0:0]  mem_mem_cas_n,                 //               .mem_cas_n
		inout  wire [3:0]  mem_mem_dqs,                   //               .mem_dqs
		inout  wire [3:0]  mem_mem_dqs_n,                 //               .mem_dqs_n
		inout  wire [31:0] mem_mem_dq,                    //               .mem_dq
		output wire [3:0]  mem_mem_dm,                    //               .mem_dm
		output wire        status_local_cal_success,      //         status.local_cal_success
		output wire        status_local_cal_fail,         //               .local_cal_fail
		input  wire [31:0] gpio_bus_in_port,              //       gpio_bus.in_port
		output wire [31:0] gpio_bus_out_port,             //               .out_port
		input  wire        i2c_serial_sda_in,             //     i2c_serial.sda_in
		input  wire        i2c_serial_scl_in,             //               .scl_in
		output wire        i2c_serial_sda_oe,             //               .sda_oe
		output wire        i2c_serial_scl_oe,             //               .scl_oe
		output wire        iopll_0_locked_export,         // iopll_0_locked.export
		output wire        qspi_dclk,                     //           qspi.dclk
		output wire        qspi_ncs,                      //               .ncs
		inout  wire [3:0]  qspi_data,                     //               .data
		input  wire        refclk_emif_clk,               //    refclk_emif.clk
		input  wire        reset_reset_n,                 //          reset.reset_n
		input  wire        spi_serial_MISO,               //     spi_serial.MISO
		output wire        spi_serial_MOSI,               //               .MOSI
		output wire        spi_serial_SCLK,               //               .SCLK
		output wire [7:0]  spi_serial_SS_n,               //               .SS_n
		input  wire        tx_clock_clk,                  //       tx_clock.clk
		input  wire        misc_xon_gen,                  //           misc.xon_gen
		input  wire        misc_xoff_gen,                 //               .xoff_gen
		output wire        misc_magic_wakeup,             //               .magic_wakeup
		input  wire        misc_magic_sleep_n,            //               .magic_sleep_n
		input  wire        misc_ff_tx_crc_fwd,            //               .ff_tx_crc_fwd
		output wire        misc_ff_tx_septy,              //               .ff_tx_septy
		output wire        misc_tx_ff_uflow,              //               .tx_ff_uflow
		output wire        misc_ff_tx_a_full,             //               .ff_tx_a_full
		output wire        misc_ff_tx_a_empty,            //               .ff_tx_a_empty
		output wire [17:0] misc_rx_err_stat,              //               .rx_err_stat
		output wire [3:0]  misc_rx_frm_type,              //               .rx_frm_type
		output wire        misc_ff_rx_dsav,               //               .ff_rx_dsav
		output wire        misc_ff_rx_a_full,             //               .ff_rx_a_full
		output wire        misc_ff_rx_a_empty,            //               .ff_rx_a_empty
		output wire        mdio_mdc,                      //           mdio.mdc
		input  wire        mdio_mdio_in,                  //               .mdio_in
		output wire        mdio_mdio_out,                 //               .mdio_out
		output wire        mdio_mdio_oen,                 //               .mdio_oen
		input  wire [7:0]  gmii_gmii_rx_d,                //           gmii.gmii_rx_d
		input  wire        gmii_gmii_rx_dv,               //               .gmii_rx_dv
		input  wire        gmii_gmii_rx_err,              //               .gmii_rx_err
		output wire [7:0]  gmii_gmii_tx_d,                //               .gmii_tx_d
		output wire        gmii_gmii_tx_en,               //               .gmii_tx_en
		output wire        gmii_gmii_tx_err,              //               .gmii_tx_err
		input  wire [3:0]  mii_mii_rx_d,                  //            mii.mii_rx_d
		input  wire        mii_mii_rx_dv,                 //               .mii_rx_dv
		input  wire        mii_mii_rx_err,                //               .mii_rx_err
		output wire [3:0]  mii_mii_tx_d,                  //               .mii_tx_d
		output wire        mii_mii_tx_en,                 //               .mii_tx_en
		output wire        mii_mii_tx_err,                //               .mii_tx_err
		input  wire        status_1_set_10,               //       status_1.set_10
		input  wire        status_1_set_1000,             //               .set_1000
		output wire        status_1_eth_mode,             //               .eth_mode
		output wire        status_1_ena_10,               //               .ena_10
		input  wire        rx_clock_clk                   //       rx_clock.clk
	);

	wire   [31:0] avl_adxcfg_0_rcfg_m0_readdata;                                                             // ad9144_jesd204:phy_reconfig_0_readdata -> avl_adxcfg_0:rcfg_out_readdata_0
	wire          avl_adxcfg_0_rcfg_m0_waitrequest;                                                          // ad9144_jesd204:phy_reconfig_0_waitrequest -> avl_adxcfg_0:rcfg_out_waitrequest_0
	wire          avl_adxcfg_0_rcfg_m0_read;                                                                 // avl_adxcfg_0:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_0_read
	wire    [9:0] avl_adxcfg_0_rcfg_m0_address;                                                              // avl_adxcfg_0:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_0_address
	wire          avl_adxcfg_0_rcfg_m0_write;                                                                // avl_adxcfg_0:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_0_write
	wire   [31:0] avl_adxcfg_0_rcfg_m0_writedata;                                                            // avl_adxcfg_0:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_0_writedata
	wire   [31:0] avl_adxcfg_1_rcfg_m0_readdata;                                                             // ad9144_jesd204:phy_reconfig_1_readdata -> avl_adxcfg_1:rcfg_out_readdata_0
	wire          avl_adxcfg_1_rcfg_m0_waitrequest;                                                          // ad9144_jesd204:phy_reconfig_1_waitrequest -> avl_adxcfg_1:rcfg_out_waitrequest_0
	wire          avl_adxcfg_1_rcfg_m0_read;                                                                 // avl_adxcfg_1:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_1_read
	wire    [9:0] avl_adxcfg_1_rcfg_m0_address;                                                              // avl_adxcfg_1:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_1_address
	wire          avl_adxcfg_1_rcfg_m0_write;                                                                // avl_adxcfg_1:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_1_write
	wire   [31:0] avl_adxcfg_1_rcfg_m0_writedata;                                                            // avl_adxcfg_1:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_1_writedata
	wire   [31:0] avl_adxcfg_2_rcfg_m0_readdata;                                                             // ad9144_jesd204:phy_reconfig_2_readdata -> avl_adxcfg_2:rcfg_out_readdata_0
	wire          avl_adxcfg_2_rcfg_m0_waitrequest;                                                          // ad9144_jesd204:phy_reconfig_2_waitrequest -> avl_adxcfg_2:rcfg_out_waitrequest_0
	wire          avl_adxcfg_2_rcfg_m0_read;                                                                 // avl_adxcfg_2:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_2_read
	wire    [9:0] avl_adxcfg_2_rcfg_m0_address;                                                              // avl_adxcfg_2:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_2_address
	wire          avl_adxcfg_2_rcfg_m0_write;                                                                // avl_adxcfg_2:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_2_write
	wire   [31:0] avl_adxcfg_2_rcfg_m0_writedata;                                                            // avl_adxcfg_2:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_2_writedata
	wire   [31:0] avl_adxcfg_3_rcfg_m0_readdata;                                                             // ad9144_jesd204:phy_reconfig_3_readdata -> avl_adxcfg_3:rcfg_out_readdata_0
	wire          avl_adxcfg_3_rcfg_m0_waitrequest;                                                          // ad9144_jesd204:phy_reconfig_3_waitrequest -> avl_adxcfg_3:rcfg_out_waitrequest_0
	wire          avl_adxcfg_3_rcfg_m0_read;                                                                 // avl_adxcfg_3:rcfg_out_read_0 -> ad9144_jesd204:phy_reconfig_3_read
	wire    [9:0] avl_adxcfg_3_rcfg_m0_address;                                                              // avl_adxcfg_3:rcfg_out_address_0 -> ad9144_jesd204:phy_reconfig_3_address
	wire          avl_adxcfg_3_rcfg_m0_write;                                                                // avl_adxcfg_3:rcfg_out_write_0 -> ad9144_jesd204:phy_reconfig_3_write
	wire   [31:0] avl_adxcfg_3_rcfg_m0_writedata;                                                            // avl_adxcfg_3:rcfg_out_writedata_0 -> ad9144_jesd204:phy_reconfig_3_writedata
	wire   [31:0] avl_adxcfg_0_rcfg_m1_readdata;                                                             // ad9680_jesd204:phy_reconfig_0_readdata -> avl_adxcfg_0:rcfg_out_readdata_1
	wire          avl_adxcfg_0_rcfg_m1_waitrequest;                                                          // ad9680_jesd204:phy_reconfig_0_waitrequest -> avl_adxcfg_0:rcfg_out_waitrequest_1
	wire          avl_adxcfg_0_rcfg_m1_read;                                                                 // avl_adxcfg_0:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_0_read
	wire    [9:0] avl_adxcfg_0_rcfg_m1_address;                                                              // avl_adxcfg_0:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_0_address
	wire          avl_adxcfg_0_rcfg_m1_write;                                                                // avl_adxcfg_0:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_0_write
	wire   [31:0] avl_adxcfg_0_rcfg_m1_writedata;                                                            // avl_adxcfg_0:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_0_writedata
	wire   [31:0] avl_adxcfg_1_rcfg_m1_readdata;                                                             // ad9680_jesd204:phy_reconfig_1_readdata -> avl_adxcfg_1:rcfg_out_readdata_1
	wire          avl_adxcfg_1_rcfg_m1_waitrequest;                                                          // ad9680_jesd204:phy_reconfig_1_waitrequest -> avl_adxcfg_1:rcfg_out_waitrequest_1
	wire          avl_adxcfg_1_rcfg_m1_read;                                                                 // avl_adxcfg_1:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_1_read
	wire    [9:0] avl_adxcfg_1_rcfg_m1_address;                                                              // avl_adxcfg_1:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_1_address
	wire          avl_adxcfg_1_rcfg_m1_write;                                                                // avl_adxcfg_1:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_1_write
	wire   [31:0] avl_adxcfg_1_rcfg_m1_writedata;                                                            // avl_adxcfg_1:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_1_writedata
	wire   [31:0] avl_adxcfg_2_rcfg_m1_readdata;                                                             // ad9680_jesd204:phy_reconfig_2_readdata -> avl_adxcfg_2:rcfg_out_readdata_1
	wire          avl_adxcfg_2_rcfg_m1_waitrequest;                                                          // ad9680_jesd204:phy_reconfig_2_waitrequest -> avl_adxcfg_2:rcfg_out_waitrequest_1
	wire          avl_adxcfg_2_rcfg_m1_read;                                                                 // avl_adxcfg_2:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_2_read
	wire    [9:0] avl_adxcfg_2_rcfg_m1_address;                                                              // avl_adxcfg_2:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_2_address
	wire          avl_adxcfg_2_rcfg_m1_write;                                                                // avl_adxcfg_2:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_2_write
	wire   [31:0] avl_adxcfg_2_rcfg_m1_writedata;                                                            // avl_adxcfg_2:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_2_writedata
	wire   [31:0] avl_adxcfg_3_rcfg_m1_readdata;                                                             // ad9680_jesd204:phy_reconfig_3_readdata -> avl_adxcfg_3:rcfg_out_readdata_1
	wire          avl_adxcfg_3_rcfg_m1_waitrequest;                                                          // ad9680_jesd204:phy_reconfig_3_waitrequest -> avl_adxcfg_3:rcfg_out_waitrequest_1
	wire          avl_adxcfg_3_rcfg_m1_read;                                                                 // avl_adxcfg_3:rcfg_out_read_1 -> ad9680_jesd204:phy_reconfig_3_read
	wire    [9:0] avl_adxcfg_3_rcfg_m1_address;                                                              // avl_adxcfg_3:rcfg_out_address_1 -> ad9680_jesd204:phy_reconfig_3_address
	wire          avl_adxcfg_3_rcfg_m1_write;                                                                // avl_adxcfg_3:rcfg_out_write_1 -> ad9680_jesd204:phy_reconfig_3_write
	wire   [31:0] avl_adxcfg_3_rcfg_m1_writedata;                                                            // avl_adxcfg_3:rcfg_out_writedata_1 -> ad9680_jesd204:phy_reconfig_3_writedata
	wire          ad9144_core_if_tx_data_valid;                                                              // ad9144_core:tx_valid -> ad9144_jesd204:link_data_valid
	wire  [127:0] ad9144_core_if_tx_data_data;                                                               // ad9144_core:tx_data -> ad9144_jesd204:link_data_data
	wire          ad9144_core_if_tx_data_ready;                                                              // ad9144_jesd204:link_data_ready -> ad9144_core:tx_ready
	wire          ddr3_emif_usr_clk_clk;                                                                     // ddr3:emif_usr_clk -> [bridge_0:m0_clk, bridge_1:m0_clk, bridge_3:s0_clk, mm_interconnect_0:ddr3_emif_usr_clk_clk, mm_interconnect_3:ddr3_emif_usr_clk_clk, mm_interconnect_4:ddr3_emif_usr_clk_clk, rst_controller_004:clk, rst_controller_006:clk]
	wire          ad9680_jesd204_link_clk_clk;                                                               // ad9680_jesd204:link_clk_clk -> [ad9680_core:rx_clk, ad9680_cpack:adc_clk, ad9680_dma:s_axis_aclk, ad9680_fifo:adc_clk, avalon_st_adapter:in_clk_0_clk, rst_controller_002:clk]
	wire          ad9144_jesd204_link_clk_clk;                                                               // ad9144_jesd204:link_clk_clk -> [ad9144_core:tx_clk, ad9144_fifo:dac_clk, ad9144_upack:dac_clk, rst_controller_001:clk]
	wire          clock_in_out_clk_clk;                                                                      // clock_in:out_clk -> [ad9144_core:s_axi_aclk, ad9144_dma:m_axis_aclk, ad9144_dma:m_src_axi_aclk, ad9144_dma:s_axi_aclk, ad9144_fifo:dma_clk, ad9144_jesd204:sys_clk_clk, ad9680_core:s_axi_aclk, ad9680_dma:m_dest_axi_aclk, ad9680_dma:s_axi_aclk, ad9680_fifo:dma_clk, ad9680_jesd204:sys_clk_clk, avl_adxcfg_0:rcfg_clk, avl_adxcfg_1:rcfg_clk, avl_adxcfg_2:rcfg_clk, avl_adxcfg_3:rcfg_clk, bridge_0:s0_clk, bridge_1:s0_clk, bridge_2:m0_clk, ethernet:clk_in_clk, gpio:clk, i2c:clk, iopll_0:refclk, irq_mapper:clk, irq_synchronizer:sender_clk, jtag_uart_0:clk, mcu_subsystem_cpu_0:clk, mcu_subsystem_ram_0:clk, mm_interconnect_0:clock_in_out_clk_clk, mm_interconnect_1:clock_in_out_clk_clk, rst_controller:clk, rst_controller_003:clk, spi:clk, timer_0:clk, timer_1:clk]
	wire          refclk_emif_out_clk_clk;                                                                   // refclk_emif:out_clk -> ddr3:pll_ref_clk
	wire          iopll_0_outclk0_clk;                                                                       // iopll_0:outclk_0 -> [bridge_2:s0_clk, bridge_3:m0_clk, irq_synchronizer:receiver_clk, mm_interconnect_0:iopll_0_outclk0_clk, mm_interconnect_1:iopll_0_outclk0_clk, mm_interconnect_2:iopll_0_outclk0_clk, qspi_controller2_0:clk, rst_controller_005:clk]
	wire          ad9680_core_adc_ch_0_valid;                                                                // ad9680_core:adc_valid_0 -> ad9680_cpack:adc_valid_0
	wire   [63:0] ad9680_core_adc_ch_0_data;                                                                 // ad9680_core:adc_data_0 -> ad9680_cpack:adc_data_0
	wire          ad9680_core_adc_ch_0_enable;                                                               // ad9680_core:adc_enable_0 -> ad9680_cpack:adc_enable_0
	wire          ad9680_core_adc_ch_1_valid;                                                                // ad9680_core:adc_valid_1 -> ad9680_cpack:adc_valid_1
	wire   [63:0] ad9680_core_adc_ch_1_data;                                                                 // ad9680_core:adc_data_1 -> ad9680_cpack:adc_data_1
	wire          ad9680_core_adc_ch_1_enable;                                                               // ad9680_core:adc_enable_1 -> ad9680_cpack:adc_enable_1
	wire          ad9144_core_dac_ch_0_valid;                                                                // ad9144_core:dac_valid_0 -> ad9144_upack:dac_valid_0
	wire   [63:0] ad9144_upack_dac_ch_0_data;                                                                // ad9144_upack:dac_data_0 -> ad9144_core:dac_ddata_0
	wire          ad9144_core_dac_ch_0_enable;                                                               // ad9144_core:dac_enable_0 -> ad9144_upack:dac_enable_0
	wire          ad9144_core_dac_ch_1_valid;                                                                // ad9144_core:dac_valid_1 -> ad9144_upack:dac_valid_1
	wire   [63:0] ad9144_upack_dac_ch_1_data;                                                                // ad9144_upack:dac_data_1 -> ad9144_core:dac_ddata_1
	wire          ad9144_core_dac_ch_1_enable;                                                               // ad9144_core:dac_enable_1 -> ad9144_upack:dac_enable_1
	wire          ad9680_fifo_if_adc_wovf_ovf;                                                               // ad9680_fifo:adc_wovf -> ad9680_core:adc_dovf
	wire  [127:0] ad9680_cpack_if_adc_data_data;                                                             // ad9680_cpack:adc_data -> ad9680_fifo:adc_wdata
	wire          ad9680_cpack_if_adc_valid_valid;                                                           // ad9680_cpack:adc_valid -> ad9680_fifo:adc_wr
	wire  [127:0] ad9144_fifo_if_dac_data_data;                                                              // ad9144_fifo:dac_data -> ad9144_upack:dac_data
	wire          ad9144_fifo_if_dac_dunf_unf;                                                               // ad9144_fifo:dac_dunf -> ad9144_core:dac_dunf
	wire          ad9144_upack_if_dac_valid_valid;                                                           // ad9144_upack:dac_valid -> ad9144_fifo:dac_valid
	wire  [127:0] ad9144_dma_if_m_axis_data_data;                                                            // ad9144_dma:m_axis_data -> ad9144_fifo:dma_data
	wire          ad9680_fifo_if_dma_wr_valid;                                                               // ad9680_fifo:dma_wr -> ad9680_dma:s_axis_valid
	wire          ad9680_dma_if_s_axis_ready_ready;                                                          // ad9680_dma:s_axis_ready -> ad9680_fifo:dma_wready
	wire          ad9680_dma_if_s_axis_xfer_req_xfer_req;                                                    // ad9680_dma:s_axis_xfer_req -> ad9680_fifo:dma_xfer_req
	wire          ad9144_dma_if_m_axis_last_last;                                                            // ad9144_dma:m_axis_last -> ad9144_fifo:dma_xfer_last
	wire          ad9144_fifo_if_dma_ready_ready;                                                            // ad9144_fifo:dma_ready -> ad9144_dma:m_axis_ready
	wire          ad9144_dma_if_m_axis_valid_valid;                                                          // ad9144_dma:m_axis_valid -> ad9144_fifo:dma_valid
	wire          ad9144_dma_if_m_axis_xfer_req_xfer_req;                                                    // ad9144_dma:m_axis_xfer_req -> ad9144_fifo:dma_xfer_req
	wire  [127:0] ad9680_fifo_if_dma_wdata_data;                                                             // ad9680_fifo:dma_wdata -> ad9680_dma:s_axis_data
	wire    [3:0] ad9680_jesd204_link_sof_export;                                                            // ad9680_jesd204:link_sof_export -> ad9680_core:rx_sof
	wire          mcu_subsystem_cpu_0_debug_reset_request_reset;                                             // mcu_subsystem_cpu_0:debug_reset_request -> [iopll_0:rst, rst_controller:reset_in0, rst_controller_002:reset_in0, rst_controller_005:reset_in0, rst_controller_006:reset_in0, rst_controller_007:reset_in0, rst_controller_008:reset_in0]
	wire          mcu_subsystem_cpu_0_custom_instruction_master_readra;                                      // mcu_subsystem_cpu_0:E_ci_combo_readra -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_readra
	wire          mcu_subsystem_cpu_0_custom_instruction_master_readrb;                                      // mcu_subsystem_cpu_0:E_ci_combo_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_readrb
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_b;                                     // mcu_subsystem_cpu_0:A_ci_multi_b -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_b
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_c;                                     // mcu_subsystem_cpu_0:A_ci_multi_c -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_c
	wire          mcu_subsystem_cpu_0_custom_instruction_master_reset_req;                                   // mcu_subsystem_cpu_0:A_ci_multi_reset_req -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_reset_req
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_a;                                     // mcu_subsystem_cpu_0:A_ci_multi_a -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_a
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_result;                                      // mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_result -> mcu_subsystem_cpu_0:E_ci_combo_result
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_datab;                                       // mcu_subsystem_cpu_0:E_ci_combo_datab -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_dataa;                                       // mcu_subsystem_cpu_0:E_ci_combo_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_writerc;                                     // mcu_subsystem_cpu_0:E_ci_combo_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_writerc
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_dataa;                                 // mcu_subsystem_cpu_0:A_ci_multi_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_writerc;                               // mcu_subsystem_cpu_0:A_ci_multi_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_writerc
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_a;                                           // mcu_subsystem_cpu_0:E_ci_combo_a -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_a
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_b;                                           // mcu_subsystem_cpu_0:E_ci_combo_b -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_b
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_result;                                // mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_result -> mcu_subsystem_cpu_0:A_ci_multi_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_clk;                                         // mcu_subsystem_cpu_0:A_ci_multi_clock -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_clk
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_datab;                                 // mcu_subsystem_cpu_0:A_ci_multi_datab -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_datab
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_c;                                           // mcu_subsystem_cpu_0:E_ci_combo_c -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_c
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_ipending;                                    // mcu_subsystem_cpu_0:E_ci_combo_ipending -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_ipending
	wire          mcu_subsystem_cpu_0_custom_instruction_master_start;                                       // mcu_subsystem_cpu_0:A_ci_multi_start -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_start
	wire          mcu_subsystem_cpu_0_custom_instruction_master_done;                                        // mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_done -> mcu_subsystem_cpu_0:A_ci_multi_done
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_n;                                           // mcu_subsystem_cpu_0:E_ci_combo_n -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_n
	wire          mcu_subsystem_cpu_0_custom_instruction_master_estatus;                                     // mcu_subsystem_cpu_0:E_ci_combo_estatus -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_estatus
	wire          mcu_subsystem_cpu_0_custom_instruction_master_clk_en;                                      // mcu_subsystem_cpu_0:A_ci_multi_clk_en -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_clken
	wire          mcu_subsystem_cpu_0_custom_instruction_master_reset;                                       // mcu_subsystem_cpu_0:A_ci_multi_reset -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_reset
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_readrb;                                // mcu_subsystem_cpu_0:A_ci_multi_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_readrb
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_readra;                                // mcu_subsystem_cpu_0:A_ci_multi_readra -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_readra
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_n;                                     // mcu_subsystem_cpu_0:A_ci_multi_n -> mcu_subsystem_cpu_0_custom_instruction_master_translator:ci_slave_multi_n
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_result;            // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_result -> mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readra;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_readra -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_readra
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_a;                 // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_a -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_a
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_b;                 // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_b -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_b
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readrb;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_readrb
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_c;                 // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_c -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_c
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_estatus;           // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_estatus -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_estatus
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_ipending;          // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_ipending -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_ipending
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_datab;             // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_datab -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_dataa;             // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_writerc;           // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_writerc
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_n;                 // mcu_subsystem_cpu_0_custom_instruction_master_translator:comb_ci_master_n -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_slave_n
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_result;             // mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_result -> mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readra;             // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_readra -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_readra
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_a;                  // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_a -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_a
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_b;                  // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_b -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_b
	wire          mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readrb;             // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_readrb
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_c;                  // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_c -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_c
	wire          mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_estatus;            // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_estatus -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_estatus
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_ipending;           // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_ipending -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_ipending
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_datab;              // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_datab -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_dataa;              // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_writerc;            // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_writerc
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_n;                  // mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect:ci_master0_n -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_slave_n
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_result;     // fpu:s1_result -> mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_master_result
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_datab;      // mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_master_datab -> fpu:s1_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_dataa;      // mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_master_dataa -> fpu:s1_dataa
	wire    [3:0] mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_n;          // mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0:ci_master_n -> fpu:s1_n
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readra;           // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_readra -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_readra
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_a;                // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_a -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_a
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_b;                // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_b -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_b
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk;              // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_clk -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_clk
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readrb;           // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_readrb
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_c;                // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_c -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_c
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_start;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_start -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_start
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset_req;        // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_reset_req -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_reset_req
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_done;             // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_done -> mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_done
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_n;                // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_n -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_n
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_result;           // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_result -> mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk_en;           // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_clken -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_clken
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_datab;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_datab -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_dataa;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset;            // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_reset -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_reset
	wire          mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_writerc;          // mcu_subsystem_cpu_0_custom_instruction_master_translator:multi_ci_master_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_slave_writerc
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readra;            // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_readra -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_readra
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_a;                 // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_a -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_a
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_b;                 // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_b -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_b
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readrb;            // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_readrb -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_readrb
	wire    [4:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_c;                 // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_c -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_c
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk;               // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_clk -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_clk
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_ipending;          // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_ipending -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_ipending
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_start;             // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_start -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_start
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset_req;         // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_reset_req -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_reset_req
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_done;              // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_done -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_done
	wire    [7:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_n;                 // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_n -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_n
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_result;            // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_result -> mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_estatus;           // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_estatus -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_estatus
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk_en;            // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_clken -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_clken
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_datab;             // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_datab -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_dataa;             // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_dataa -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset;             // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_reset -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_reset
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_writerc;           // mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect:ci_master0_writerc -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_slave_writerc
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_result;    // fpu:s2_result -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_result
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk;       // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_clk -> fpu:s2_clk
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk_en;    // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_clken -> fpu:s2_clk_en
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_datab;     // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_datab -> fpu:s2_datab
	wire   [31:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_dataa;     // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_dataa -> fpu:s2_dataa
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_start;     // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_start -> fpu:s2_start
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset;     // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_reset -> fpu:s2_reset
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset_req; // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_reset_req -> fpu:s2_reset_req
	wire          mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_done;      // fpu:s2_done -> mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_done
	wire    [2:0] mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_n;         // mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0:ci_master_n -> fpu:s2_n
	wire          ethernet_avm_waitrequest;                                                                  // mm_interconnect_0:ethernet_avm_waitrequest -> ethernet:avm_waitrequest
	wire  [255:0] ethernet_avm_readdata;                                                                     // mm_interconnect_0:ethernet_avm_readdata -> ethernet:avm_readdata
	wire          ethernet_avm_debugaccess;                                                                  // ethernet:avm_debugaccess -> mm_interconnect_0:ethernet_avm_debugaccess
	wire   [30:0] ethernet_avm_address;                                                                      // ethernet:avm_address -> mm_interconnect_0:ethernet_avm_address
	wire          ethernet_avm_read;                                                                         // ethernet:avm_read -> mm_interconnect_0:ethernet_avm_read
	wire   [31:0] ethernet_avm_byteenable;                                                                   // ethernet:avm_byteenable -> mm_interconnect_0:ethernet_avm_byteenable
	wire          ethernet_avm_readdatavalid;                                                                // mm_interconnect_0:ethernet_avm_readdatavalid -> ethernet:avm_readdatavalid
	wire    [1:0] ethernet_avm_response;                                                                     // mm_interconnect_0:ethernet_avm_response -> ethernet:avm_response
	wire  [255:0] ethernet_avm_writedata;                                                                    // ethernet:avm_writedata -> mm_interconnect_0:ethernet_avm_writedata
	wire          ethernet_avm_write;                                                                        // ethernet:avm_write -> mm_interconnect_0:ethernet_avm_write
	wire    [7:0] ethernet_avm_burstcount;                                                                   // ethernet:avm_burstcount -> mm_interconnect_0:ethernet_avm_burstcount
	wire   [31:0] mcu_subsystem_cpu_0_data_master_readdata;                                                  // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_readdata -> mcu_subsystem_cpu_0:d_readdata
	wire          mcu_subsystem_cpu_0_data_master_waitrequest;                                               // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_waitrequest -> mcu_subsystem_cpu_0:d_waitrequest
	wire          mcu_subsystem_cpu_0_data_master_debugaccess;                                               // mcu_subsystem_cpu_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_debugaccess
	wire   [31:0] mcu_subsystem_cpu_0_data_master_address;                                                   // mcu_subsystem_cpu_0:d_address -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_address
	wire    [3:0] mcu_subsystem_cpu_0_data_master_byteenable;                                                // mcu_subsystem_cpu_0:d_byteenable -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_byteenable
	wire          mcu_subsystem_cpu_0_data_master_read;                                                      // mcu_subsystem_cpu_0:d_read -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_read
	wire          mcu_subsystem_cpu_0_data_master_readdatavalid;                                             // mm_interconnect_0:mcu_subsystem_cpu_0_data_master_readdatavalid -> mcu_subsystem_cpu_0:d_readdatavalid
	wire          mcu_subsystem_cpu_0_data_master_write;                                                     // mcu_subsystem_cpu_0:d_write -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_write
	wire   [31:0] mcu_subsystem_cpu_0_data_master_writedata;                                                 // mcu_subsystem_cpu_0:d_writedata -> mm_interconnect_0:mcu_subsystem_cpu_0_data_master_writedata
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_readdata;                                           // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_readdata -> mcu_subsystem_cpu_0:i_readdata
	wire          mcu_subsystem_cpu_0_instruction_master_waitrequest;                                        // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_waitrequest -> mcu_subsystem_cpu_0:i_waitrequest
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_address;                                            // mcu_subsystem_cpu_0:i_address -> mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_address
	wire          mcu_subsystem_cpu_0_instruction_master_read;                                               // mcu_subsystem_cpu_0:i_read -> mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_read
	wire          mcu_subsystem_cpu_0_instruction_master_readdatavalid;                                      // mm_interconnect_0:mcu_subsystem_cpu_0_instruction_master_readdatavalid -> mcu_subsystem_cpu_0:i_readdatavalid
	wire    [1:0] ad9680_dma_m_dest_axi_awburst;                                                             // ad9680_dma:m_dest_axi_awburst -> mm_interconnect_0:ad9680_dma_m_dest_axi_awburst
	wire    [7:0] ad9680_dma_m_dest_axi_arlen;                                                               // ad9680_dma:m_dest_axi_arlen -> mm_interconnect_0:ad9680_dma_m_dest_axi_arlen
	wire   [15:0] ad9680_dma_m_dest_axi_wstrb;                                                               // ad9680_dma:m_dest_axi_wstrb -> mm_interconnect_0:ad9680_dma_m_dest_axi_wstrb
	wire          ad9680_dma_m_dest_axi_wready;                                                              // mm_interconnect_0:ad9680_dma_m_dest_axi_wready -> ad9680_dma:m_dest_axi_wready
	wire          ad9680_dma_m_dest_axi_rready;                                                              // ad9680_dma:m_dest_axi_rready -> mm_interconnect_0:ad9680_dma_m_dest_axi_rready
	wire    [7:0] ad9680_dma_m_dest_axi_awlen;                                                               // ad9680_dma:m_dest_axi_awlen -> mm_interconnect_0:ad9680_dma_m_dest_axi_awlen
	wire    [3:0] ad9680_dma_m_dest_axi_arcache;                                                             // ad9680_dma:m_dest_axi_arcache -> mm_interconnect_0:ad9680_dma_m_dest_axi_arcache
	wire          ad9680_dma_m_dest_axi_wvalid;                                                              // ad9680_dma:m_dest_axi_wvalid -> mm_interconnect_0:ad9680_dma_m_dest_axi_wvalid
	wire   [31:0] ad9680_dma_m_dest_axi_araddr;                                                              // ad9680_dma:m_dest_axi_araddr -> mm_interconnect_0:ad9680_dma_m_dest_axi_araddr
	wire    [2:0] ad9680_dma_m_dest_axi_arprot;                                                              // ad9680_dma:m_dest_axi_arprot -> mm_interconnect_0:ad9680_dma_m_dest_axi_arprot
	wire  [127:0] ad9680_dma_m_dest_axi_wdata;                                                               // ad9680_dma:m_dest_axi_wdata -> mm_interconnect_0:ad9680_dma_m_dest_axi_wdata
	wire          ad9680_dma_m_dest_axi_arvalid;                                                             // ad9680_dma:m_dest_axi_arvalid -> mm_interconnect_0:ad9680_dma_m_dest_axi_arvalid
	wire    [2:0] ad9680_dma_m_dest_axi_awprot;                                                              // ad9680_dma:m_dest_axi_awprot -> mm_interconnect_0:ad9680_dma_m_dest_axi_awprot
	wire    [3:0] ad9680_dma_m_dest_axi_awcache;                                                             // ad9680_dma:m_dest_axi_awcache -> mm_interconnect_0:ad9680_dma_m_dest_axi_awcache
	wire   [31:0] ad9680_dma_m_dest_axi_awaddr;                                                              // ad9680_dma:m_dest_axi_awaddr -> mm_interconnect_0:ad9680_dma_m_dest_axi_awaddr
	wire    [1:0] ad9680_dma_m_dest_axi_bresp;                                                               // mm_interconnect_0:ad9680_dma_m_dest_axi_bresp -> ad9680_dma:m_dest_axi_bresp
	wire          ad9680_dma_m_dest_axi_arready;                                                             // mm_interconnect_0:ad9680_dma_m_dest_axi_arready -> ad9680_dma:m_dest_axi_arready
	wire  [127:0] ad9680_dma_m_dest_axi_rdata;                                                               // mm_interconnect_0:ad9680_dma_m_dest_axi_rdata -> ad9680_dma:m_dest_axi_rdata
	wire          ad9680_dma_m_dest_axi_awready;                                                             // mm_interconnect_0:ad9680_dma_m_dest_axi_awready -> ad9680_dma:m_dest_axi_awready
	wire    [1:0] ad9680_dma_m_dest_axi_arburst;                                                             // ad9680_dma:m_dest_axi_arburst -> mm_interconnect_0:ad9680_dma_m_dest_axi_arburst
	wire    [2:0] ad9680_dma_m_dest_axi_arsize;                                                              // ad9680_dma:m_dest_axi_arsize -> mm_interconnect_0:ad9680_dma_m_dest_axi_arsize
	wire          ad9680_dma_m_dest_axi_bready;                                                              // ad9680_dma:m_dest_axi_bready -> mm_interconnect_0:ad9680_dma_m_dest_axi_bready
	wire          ad9680_dma_m_dest_axi_wlast;                                                               // ad9680_dma:m_dest_axi_wlast -> mm_interconnect_0:ad9680_dma_m_dest_axi_wlast
	wire    [1:0] ad9680_dma_m_dest_axi_rresp;                                                               // mm_interconnect_0:ad9680_dma_m_dest_axi_rresp -> ad9680_dma:m_dest_axi_rresp
	wire          ad9680_dma_m_dest_axi_bvalid;                                                              // mm_interconnect_0:ad9680_dma_m_dest_axi_bvalid -> ad9680_dma:m_dest_axi_bvalid
	wire          ad9680_dma_m_dest_axi_awvalid;                                                             // ad9680_dma:m_dest_axi_awvalid -> mm_interconnect_0:ad9680_dma_m_dest_axi_awvalid
	wire          ad9680_dma_m_dest_axi_rvalid;                                                              // mm_interconnect_0:ad9680_dma_m_dest_axi_rvalid -> ad9680_dma:m_dest_axi_rvalid
	wire    [2:0] ad9680_dma_m_dest_axi_awsize;                                                              // ad9680_dma:m_dest_axi_awsize -> mm_interconnect_0:ad9680_dma_m_dest_axi_awsize
	wire    [1:0] ad9144_dma_m_src_axi_awburst;                                                              // ad9144_dma:m_src_axi_awburst -> mm_interconnect_0:ad9144_dma_m_src_axi_awburst
	wire    [7:0] ad9144_dma_m_src_axi_arlen;                                                                // ad9144_dma:m_src_axi_arlen -> mm_interconnect_0:ad9144_dma_m_src_axi_arlen
	wire   [15:0] ad9144_dma_m_src_axi_wstrb;                                                                // ad9144_dma:m_src_axi_wstrb -> mm_interconnect_0:ad9144_dma_m_src_axi_wstrb
	wire          ad9144_dma_m_src_axi_wready;                                                               // mm_interconnect_0:ad9144_dma_m_src_axi_wready -> ad9144_dma:m_src_axi_wready
	wire          ad9144_dma_m_src_axi_rready;                                                               // ad9144_dma:m_src_axi_rready -> mm_interconnect_0:ad9144_dma_m_src_axi_rready
	wire    [7:0] ad9144_dma_m_src_axi_awlen;                                                                // ad9144_dma:m_src_axi_awlen -> mm_interconnect_0:ad9144_dma_m_src_axi_awlen
	wire    [3:0] ad9144_dma_m_src_axi_arcache;                                                              // ad9144_dma:m_src_axi_arcache -> mm_interconnect_0:ad9144_dma_m_src_axi_arcache
	wire          ad9144_dma_m_src_axi_wvalid;                                                               // ad9144_dma:m_src_axi_wvalid -> mm_interconnect_0:ad9144_dma_m_src_axi_wvalid
	wire   [31:0] ad9144_dma_m_src_axi_araddr;                                                               // ad9144_dma:m_src_axi_araddr -> mm_interconnect_0:ad9144_dma_m_src_axi_araddr
	wire    [2:0] ad9144_dma_m_src_axi_arprot;                                                               // ad9144_dma:m_src_axi_arprot -> mm_interconnect_0:ad9144_dma_m_src_axi_arprot
	wire  [127:0] ad9144_dma_m_src_axi_wdata;                                                                // ad9144_dma:m_src_axi_wdata -> mm_interconnect_0:ad9144_dma_m_src_axi_wdata
	wire          ad9144_dma_m_src_axi_arvalid;                                                              // ad9144_dma:m_src_axi_arvalid -> mm_interconnect_0:ad9144_dma_m_src_axi_arvalid
	wire    [2:0] ad9144_dma_m_src_axi_awprot;                                                               // ad9144_dma:m_src_axi_awprot -> mm_interconnect_0:ad9144_dma_m_src_axi_awprot
	wire    [3:0] ad9144_dma_m_src_axi_awcache;                                                              // ad9144_dma:m_src_axi_awcache -> mm_interconnect_0:ad9144_dma_m_src_axi_awcache
	wire   [31:0] ad9144_dma_m_src_axi_awaddr;                                                               // ad9144_dma:m_src_axi_awaddr -> mm_interconnect_0:ad9144_dma_m_src_axi_awaddr
	wire    [1:0] ad9144_dma_m_src_axi_bresp;                                                                // mm_interconnect_0:ad9144_dma_m_src_axi_bresp -> ad9144_dma:m_src_axi_bresp
	wire          ad9144_dma_m_src_axi_arready;                                                              // mm_interconnect_0:ad9144_dma_m_src_axi_arready -> ad9144_dma:m_src_axi_arready
	wire  [127:0] ad9144_dma_m_src_axi_rdata;                                                                // mm_interconnect_0:ad9144_dma_m_src_axi_rdata -> ad9144_dma:m_src_axi_rdata
	wire          ad9144_dma_m_src_axi_awready;                                                              // mm_interconnect_0:ad9144_dma_m_src_axi_awready -> ad9144_dma:m_src_axi_awready
	wire    [1:0] ad9144_dma_m_src_axi_arburst;                                                              // ad9144_dma:m_src_axi_arburst -> mm_interconnect_0:ad9144_dma_m_src_axi_arburst
	wire    [2:0] ad9144_dma_m_src_axi_arsize;                                                               // ad9144_dma:m_src_axi_arsize -> mm_interconnect_0:ad9144_dma_m_src_axi_arsize
	wire          ad9144_dma_m_src_axi_bready;                                                               // ad9144_dma:m_src_axi_bready -> mm_interconnect_0:ad9144_dma_m_src_axi_bready
	wire          ad9144_dma_m_src_axi_rlast;                                                                // mm_interconnect_0:ad9144_dma_m_src_axi_rlast -> ad9144_dma:m_src_axi_rlast
	wire          ad9144_dma_m_src_axi_wlast;                                                                // ad9144_dma:m_src_axi_wlast -> mm_interconnect_0:ad9144_dma_m_src_axi_wlast
	wire    [1:0] ad9144_dma_m_src_axi_rresp;                                                                // mm_interconnect_0:ad9144_dma_m_src_axi_rresp -> ad9144_dma:m_src_axi_rresp
	wire          ad9144_dma_m_src_axi_bvalid;                                                               // mm_interconnect_0:ad9144_dma_m_src_axi_bvalid -> ad9144_dma:m_src_axi_bvalid
	wire          ad9144_dma_m_src_axi_awvalid;                                                              // ad9144_dma:m_src_axi_awvalid -> mm_interconnect_0:ad9144_dma_m_src_axi_awvalid
	wire          ad9144_dma_m_src_axi_rvalid;                                                               // mm_interconnect_0:ad9144_dma_m_src_axi_rvalid -> ad9144_dma:m_src_axi_rvalid
	wire    [2:0] ad9144_dma_m_src_axi_awsize;                                                               // ad9144_dma:m_src_axi_awsize -> mm_interconnect_0:ad9144_dma_m_src_axi_awsize
	wire  [255:0] mm_interconnect_0_bridge_0_s0_readdata;                                                    // bridge_0:s0_readdata -> mm_interconnect_0:bridge_0_s0_readdata
	wire          mm_interconnect_0_bridge_0_s0_waitrequest;                                                 // bridge_0:s0_waitrequest -> mm_interconnect_0:bridge_0_s0_waitrequest
	wire          mm_interconnect_0_bridge_0_s0_debugaccess;                                                 // mm_interconnect_0:bridge_0_s0_debugaccess -> bridge_0:s0_debugaccess
	wire   [30:0] mm_interconnect_0_bridge_0_s0_address;                                                     // mm_interconnect_0:bridge_0_s0_address -> bridge_0:s0_address
	wire          mm_interconnect_0_bridge_0_s0_read;                                                        // mm_interconnect_0:bridge_0_s0_read -> bridge_0:s0_read
	wire   [31:0] mm_interconnect_0_bridge_0_s0_byteenable;                                                  // mm_interconnect_0:bridge_0_s0_byteenable -> bridge_0:s0_byteenable
	wire          mm_interconnect_0_bridge_0_s0_readdatavalid;                                               // bridge_0:s0_readdatavalid -> mm_interconnect_0:bridge_0_s0_readdatavalid
	wire          mm_interconnect_0_bridge_0_s0_write;                                                       // mm_interconnect_0:bridge_0_s0_write -> bridge_0:s0_write
	wire  [255:0] mm_interconnect_0_bridge_0_s0_writedata;                                                   // mm_interconnect_0:bridge_0_s0_writedata -> bridge_0:s0_writedata
	wire    [4:0] mm_interconnect_0_bridge_0_s0_burstcount;                                                  // mm_interconnect_0:bridge_0_s0_burstcount -> bridge_0:s0_burstcount
	wire   [31:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata;                            // mcu_subsystem_cpu_0:debug_mem_slave_readdata -> mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_readdata
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest;                         // mcu_subsystem_cpu_0:debug_mem_slave_waitrequest -> mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_waitrequest
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess;                         // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_debugaccess -> mcu_subsystem_cpu_0:debug_mem_slave_debugaccess
	wire    [8:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address;                             // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_address -> mcu_subsystem_cpu_0:debug_mem_slave_address
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read;                                // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_read -> mcu_subsystem_cpu_0:debug_mem_slave_read
	wire    [3:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable;                          // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_byteenable -> mcu_subsystem_cpu_0:debug_mem_slave_byteenable
	wire          mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write;                               // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_write -> mcu_subsystem_cpu_0:debug_mem_slave_write
	wire   [31:0] mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata;                           // mm_interconnect_0:mcu_subsystem_cpu_0_debug_mem_slave_writedata -> mcu_subsystem_cpu_0:debug_mem_slave_writedata
	wire   [31:0] mm_interconnect_0_bridge_3_s0_readdata;                                                    // bridge_3:s0_readdata -> mm_interconnect_0:bridge_3_s0_readdata
	wire          mm_interconnect_0_bridge_3_s0_waitrequest;                                                 // bridge_3:s0_waitrequest -> mm_interconnect_0:bridge_3_s0_waitrequest
	wire          mm_interconnect_0_bridge_3_s0_debugaccess;                                                 // mm_interconnect_0:bridge_3_s0_debugaccess -> bridge_3:s0_debugaccess
	wire   [26:0] mm_interconnect_0_bridge_3_s0_address;                                                     // mm_interconnect_0:bridge_3_s0_address -> bridge_3:s0_address
	wire          mm_interconnect_0_bridge_3_s0_read;                                                        // mm_interconnect_0:bridge_3_s0_read -> bridge_3:s0_read
	wire    [3:0] mm_interconnect_0_bridge_3_s0_byteenable;                                                  // mm_interconnect_0:bridge_3_s0_byteenable -> bridge_3:s0_byteenable
	wire          mm_interconnect_0_bridge_3_s0_readdatavalid;                                               // bridge_3:s0_readdatavalid -> mm_interconnect_0:bridge_3_s0_readdatavalid
	wire          mm_interconnect_0_bridge_3_s0_write;                                                       // mm_interconnect_0:bridge_3_s0_write -> bridge_3:s0_write
	wire   [31:0] mm_interconnect_0_bridge_3_s0_writedata;                                                   // mm_interconnect_0:bridge_3_s0_writedata -> bridge_3:s0_writedata
	wire    [0:0] mm_interconnect_0_bridge_3_s0_burstcount;                                                  // mm_interconnect_0:bridge_3_s0_burstcount -> bridge_3:s0_burstcount
	wire   [31:0] mm_interconnect_0_bridge_1_s0_readdata;                                                    // bridge_1:s0_readdata -> mm_interconnect_0:bridge_1_s0_readdata
	wire          mm_interconnect_0_bridge_1_s0_waitrequest;                                                 // bridge_1:s0_waitrequest -> mm_interconnect_0:bridge_1_s0_waitrequest
	wire          mm_interconnect_0_bridge_1_s0_debugaccess;                                                 // mm_interconnect_0:bridge_1_s0_debugaccess -> bridge_1:s0_debugaccess
	wire   [11:0] mm_interconnect_0_bridge_1_s0_address;                                                     // mm_interconnect_0:bridge_1_s0_address -> bridge_1:s0_address
	wire          mm_interconnect_0_bridge_1_s0_read;                                                        // mm_interconnect_0:bridge_1_s0_read -> bridge_1:s0_read
	wire    [3:0] mm_interconnect_0_bridge_1_s0_byteenable;                                                  // mm_interconnect_0:bridge_1_s0_byteenable -> bridge_1:s0_byteenable
	wire          mm_interconnect_0_bridge_1_s0_readdatavalid;                                               // bridge_1:s0_readdatavalid -> mm_interconnect_0:bridge_1_s0_readdatavalid
	wire          mm_interconnect_0_bridge_1_s0_write;                                                       // mm_interconnect_0:bridge_1_s0_write -> bridge_1:s0_write
	wire   [31:0] mm_interconnect_0_bridge_1_s0_writedata;                                                   // mm_interconnect_0:bridge_1_s0_writedata -> bridge_1:s0_writedata
	wire    [2:0] mm_interconnect_0_bridge_1_s0_burstcount;                                                  // mm_interconnect_0:bridge_1_s0_burstcount -> bridge_1:s0_burstcount
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect;                                       // mm_interconnect_0:mcu_subsystem_ram_0_s1_chipselect -> mcu_subsystem_ram_0:chipselect
	wire   [31:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata;                                         // mcu_subsystem_ram_0:readdata -> mm_interconnect_0:mcu_subsystem_ram_0_s1_readdata
	wire   [14:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_address;                                          // mm_interconnect_0:mcu_subsystem_ram_0_s1_address -> mcu_subsystem_ram_0:address
	wire    [3:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable;                                       // mm_interconnect_0:mcu_subsystem_ram_0_s1_byteenable -> mcu_subsystem_ram_0:byteenable
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_write;                                            // mm_interconnect_0:mcu_subsystem_ram_0_s1_write -> mcu_subsystem_ram_0:write
	wire   [31:0] mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata;                                        // mm_interconnect_0:mcu_subsystem_ram_0_s1_writedata -> mcu_subsystem_ram_0:writedata
	wire          mm_interconnect_0_mcu_subsystem_ram_0_s1_clken;                                            // mm_interconnect_0:mcu_subsystem_ram_0_s1_clken -> mcu_subsystem_ram_0:clken
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;                                // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire   [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;                                  // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;                               // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire    [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;                                   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;                                      // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire          mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;                                     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire   [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;                                 // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire   [31:0] mm_interconnect_0_ethernet_avs_readdata;                                                   // ethernet:avs_readdata -> mm_interconnect_0:ethernet_avs_readdata
	wire          mm_interconnect_0_ethernet_avs_waitrequest;                                                // ethernet:avs_waitrequest -> mm_interconnect_0:ethernet_avs_waitrequest
	wire          mm_interconnect_0_ethernet_avs_debugaccess;                                                // mm_interconnect_0:ethernet_avs_debugaccess -> ethernet:avs_debugaccess
	wire   [10:0] mm_interconnect_0_ethernet_avs_address;                                                    // mm_interconnect_0:ethernet_avs_address -> ethernet:avs_address
	wire          mm_interconnect_0_ethernet_avs_read;                                                       // mm_interconnect_0:ethernet_avs_read -> ethernet:avs_read
	wire    [3:0] mm_interconnect_0_ethernet_avs_byteenable;                                                 // mm_interconnect_0:ethernet_avs_byteenable -> ethernet:avs_byteenable
	wire          mm_interconnect_0_ethernet_avs_readdatavalid;                                              // ethernet:avs_readdatavalid -> mm_interconnect_0:ethernet_avs_readdatavalid
	wire          mm_interconnect_0_ethernet_avs_write;                                                      // mm_interconnect_0:ethernet_avs_write -> ethernet:avs_write
	wire   [31:0] mm_interconnect_0_ethernet_avs_writedata;                                                  // mm_interconnect_0:ethernet_avs_writedata -> ethernet:avs_writedata
	wire    [4:0] mm_interconnect_0_ethernet_avs_burstcount;                                                 // mm_interconnect_0:ethernet_avs_burstcount -> ethernet:avs_burstcount
	wire   [31:0] mm_interconnect_0_i2c_csr_readdata;                                                        // i2c:readdata -> mm_interconnect_0:i2c_csr_readdata
	wire    [3:0] mm_interconnect_0_i2c_csr_address;                                                         // mm_interconnect_0:i2c_csr_address -> i2c:addr
	wire          mm_interconnect_0_i2c_csr_read;                                                            // mm_interconnect_0:i2c_csr_read -> i2c:read
	wire          mm_interconnect_0_i2c_csr_write;                                                           // mm_interconnect_0:i2c_csr_write -> i2c:write
	wire   [31:0] mm_interconnect_0_i2c_csr_writedata;                                                       // mm_interconnect_0:i2c_csr_writedata -> i2c:writedata
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata;                               // ad9144_jesd204:lane_pll_reconfig_readdata -> mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest;                            // ad9144_jesd204:lane_pll_reconfig_waitrequest -> mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address;                                // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_address -> ad9144_jesd204:lane_pll_reconfig_address
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read;                                   // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_read -> ad9144_jesd204:lane_pll_reconfig_read
	wire          mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write;                                  // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_write -> ad9144_jesd204:lane_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata;                              // mm_interconnect_0:ad9144_jesd204_lane_pll_reconfig_writedata -> ad9144_jesd204:lane_pll_reconfig_writedata
	wire   [11:0] mm_interconnect_0_ad9144_jesd204_link_management_awaddr;                                   // mm_interconnect_0:ad9144_jesd204_link_management_awaddr -> ad9144_jesd204:link_management_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_management_bresp;                                    // ad9144_jesd204:link_management_bresp -> mm_interconnect_0:ad9144_jesd204_link_management_bresp
	wire          mm_interconnect_0_ad9144_jesd204_link_management_arready;                                  // ad9144_jesd204:link_management_arready -> mm_interconnect_0:ad9144_jesd204_link_management_arready
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_management_rdata;                                    // ad9144_jesd204:link_management_rdata -> mm_interconnect_0:ad9144_jesd204_link_management_rdata
	wire    [3:0] mm_interconnect_0_ad9144_jesd204_link_management_wstrb;                                    // mm_interconnect_0:ad9144_jesd204_link_management_wstrb -> ad9144_jesd204:link_management_wstrb
	wire          mm_interconnect_0_ad9144_jesd204_link_management_wready;                                   // ad9144_jesd204:link_management_wready -> mm_interconnect_0:ad9144_jesd204_link_management_wready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_awready;                                  // ad9144_jesd204:link_management_awready -> mm_interconnect_0:ad9144_jesd204_link_management_awready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_rready;                                   // mm_interconnect_0:ad9144_jesd204_link_management_rready -> ad9144_jesd204:link_management_rready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_bready;                                   // mm_interconnect_0:ad9144_jesd204_link_management_bready -> ad9144_jesd204:link_management_bready
	wire          mm_interconnect_0_ad9144_jesd204_link_management_wvalid;                                   // mm_interconnect_0:ad9144_jesd204_link_management_wvalid -> ad9144_jesd204:link_management_wvalid
	wire   [11:0] mm_interconnect_0_ad9144_jesd204_link_management_araddr;                                   // mm_interconnect_0:ad9144_jesd204_link_management_araddr -> ad9144_jesd204:link_management_araddr
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_management_arprot;                                   // mm_interconnect_0:ad9144_jesd204_link_management_arprot -> ad9144_jesd204:link_management_arprot
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_management_rresp;                                    // ad9144_jesd204:link_management_rresp -> mm_interconnect_0:ad9144_jesd204_link_management_rresp
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_management_awprot;                                   // mm_interconnect_0:ad9144_jesd204_link_management_awprot -> ad9144_jesd204:link_management_awprot
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_management_wdata;                                    // mm_interconnect_0:ad9144_jesd204_link_management_wdata -> ad9144_jesd204:link_management_wdata
	wire          mm_interconnect_0_ad9144_jesd204_link_management_arvalid;                                  // mm_interconnect_0:ad9144_jesd204_link_management_arvalid -> ad9144_jesd204:link_management_arvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_bvalid;                                   // ad9144_jesd204:link_management_bvalid -> mm_interconnect_0:ad9144_jesd204_link_management_bvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_awvalid;                                  // mm_interconnect_0:ad9144_jesd204_link_management_awvalid -> ad9144_jesd204:link_management_awvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_management_rvalid;                                   // ad9144_jesd204:link_management_rvalid -> mm_interconnect_0:ad9144_jesd204_link_management_rvalid
	wire   [11:0] mm_interconnect_0_ad9680_jesd204_link_management_awaddr;                                   // mm_interconnect_0:ad9680_jesd204_link_management_awaddr -> ad9680_jesd204:link_management_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_management_bresp;                                    // ad9680_jesd204:link_management_bresp -> mm_interconnect_0:ad9680_jesd204_link_management_bresp
	wire          mm_interconnect_0_ad9680_jesd204_link_management_arready;                                  // ad9680_jesd204:link_management_arready -> mm_interconnect_0:ad9680_jesd204_link_management_arready
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_management_rdata;                                    // ad9680_jesd204:link_management_rdata -> mm_interconnect_0:ad9680_jesd204_link_management_rdata
	wire    [3:0] mm_interconnect_0_ad9680_jesd204_link_management_wstrb;                                    // mm_interconnect_0:ad9680_jesd204_link_management_wstrb -> ad9680_jesd204:link_management_wstrb
	wire          mm_interconnect_0_ad9680_jesd204_link_management_wready;                                   // ad9680_jesd204:link_management_wready -> mm_interconnect_0:ad9680_jesd204_link_management_wready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_awready;                                  // ad9680_jesd204:link_management_awready -> mm_interconnect_0:ad9680_jesd204_link_management_awready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_rready;                                   // mm_interconnect_0:ad9680_jesd204_link_management_rready -> ad9680_jesd204:link_management_rready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_bready;                                   // mm_interconnect_0:ad9680_jesd204_link_management_bready -> ad9680_jesd204:link_management_bready
	wire          mm_interconnect_0_ad9680_jesd204_link_management_wvalid;                                   // mm_interconnect_0:ad9680_jesd204_link_management_wvalid -> ad9680_jesd204:link_management_wvalid
	wire   [11:0] mm_interconnect_0_ad9680_jesd204_link_management_araddr;                                   // mm_interconnect_0:ad9680_jesd204_link_management_araddr -> ad9680_jesd204:link_management_araddr
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_management_arprot;                                   // mm_interconnect_0:ad9680_jesd204_link_management_arprot -> ad9680_jesd204:link_management_arprot
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_management_rresp;                                    // ad9680_jesd204:link_management_rresp -> mm_interconnect_0:ad9680_jesd204_link_management_rresp
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_management_awprot;                                   // mm_interconnect_0:ad9680_jesd204_link_management_awprot -> ad9680_jesd204:link_management_awprot
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_management_wdata;                                    // mm_interconnect_0:ad9680_jesd204_link_management_wdata -> ad9680_jesd204:link_management_wdata
	wire          mm_interconnect_0_ad9680_jesd204_link_management_arvalid;                                  // mm_interconnect_0:ad9680_jesd204_link_management_arvalid -> ad9680_jesd204:link_management_arvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_bvalid;                                   // ad9680_jesd204:link_management_bvalid -> mm_interconnect_0:ad9680_jesd204_link_management_bvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_awvalid;                                  // mm_interconnect_0:ad9680_jesd204_link_management_awvalid -> ad9680_jesd204:link_management_awvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_management_rvalid;                                   // ad9680_jesd204:link_management_rvalid -> mm_interconnect_0:ad9680_jesd204_link_management_rvalid
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata;                               // ad9144_jesd204:link_pll_reconfig_readdata -> mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest;                            // ad9144_jesd204:link_pll_reconfig_waitrequest -> mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address;                                // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_address -> ad9144_jesd204:link_pll_reconfig_address
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read;                                   // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_read -> ad9144_jesd204:link_pll_reconfig_read
	wire          mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write;                                  // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_write -> ad9144_jesd204:link_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata;                              // mm_interconnect_0:ad9144_jesd204_link_pll_reconfig_writedata -> ad9144_jesd204:link_pll_reconfig_writedata
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata;                               // ad9680_jesd204:link_pll_reconfig_readdata -> mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_readdata
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest;                            // ad9680_jesd204:link_pll_reconfig_waitrequest -> mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_waitrequest
	wire    [9:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address;                                // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_address -> ad9680_jesd204:link_pll_reconfig_address
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read;                                   // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_read -> ad9680_jesd204:link_pll_reconfig_read
	wire          mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write;                                  // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_write -> ad9680_jesd204:link_pll_reconfig_write
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata;                              // mm_interconnect_0:ad9680_jesd204_link_pll_reconfig_writedata -> ad9680_jesd204:link_pll_reconfig_writedata
	wire   [13:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_awaddr -> ad9144_jesd204:link_reconfig_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp;                                      // ad9144_jesd204:link_reconfig_bresp -> mm_interconnect_0:ad9144_jesd204_link_reconfig_bresp
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_arready;                                    // ad9144_jesd204:link_reconfig_arready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_arready
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata;                                      // ad9144_jesd204:link_reconfig_rdata -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rdata
	wire    [3:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb;                                      // mm_interconnect_0:ad9144_jesd204_link_reconfig_wstrb -> ad9144_jesd204:link_reconfig_wstrb
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_wready;                                     // ad9144_jesd204:link_reconfig_wready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_wready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_awready;                                    // ad9144_jesd204:link_reconfig_awready -> mm_interconnect_0:ad9144_jesd204_link_reconfig_awready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_rready;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_rready -> ad9144_jesd204:link_reconfig_rready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_bready;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_bready -> ad9144_jesd204:link_reconfig_bready
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_wvalid -> ad9144_jesd204:link_reconfig_wvalid
	wire   [13:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_araddr -> ad9144_jesd204:link_reconfig_araddr
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_arprot -> ad9144_jesd204:link_reconfig_arprot
	wire    [1:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp;                                      // ad9144_jesd204:link_reconfig_rresp -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rresp
	wire    [2:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot;                                     // mm_interconnect_0:ad9144_jesd204_link_reconfig_awprot -> ad9144_jesd204:link_reconfig_awprot
	wire   [31:0] mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata;                                      // mm_interconnect_0:ad9144_jesd204_link_reconfig_wdata -> ad9144_jesd204:link_reconfig_wdata
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid;                                    // mm_interconnect_0:ad9144_jesd204_link_reconfig_arvalid -> ad9144_jesd204:link_reconfig_arvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid;                                     // ad9144_jesd204:link_reconfig_bvalid -> mm_interconnect_0:ad9144_jesd204_link_reconfig_bvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid;                                    // mm_interconnect_0:ad9144_jesd204_link_reconfig_awvalid -> ad9144_jesd204:link_reconfig_awvalid
	wire          mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid;                                     // ad9144_jesd204:link_reconfig_rvalid -> mm_interconnect_0:ad9144_jesd204_link_reconfig_rvalid
	wire   [13:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_awaddr -> ad9680_jesd204:link_reconfig_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp;                                      // ad9680_jesd204:link_reconfig_bresp -> mm_interconnect_0:ad9680_jesd204_link_reconfig_bresp
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_arready;                                    // ad9680_jesd204:link_reconfig_arready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_arready
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata;                                      // ad9680_jesd204:link_reconfig_rdata -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rdata
	wire    [3:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb;                                      // mm_interconnect_0:ad9680_jesd204_link_reconfig_wstrb -> ad9680_jesd204:link_reconfig_wstrb
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_wready;                                     // ad9680_jesd204:link_reconfig_wready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_wready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_awready;                                    // ad9680_jesd204:link_reconfig_awready -> mm_interconnect_0:ad9680_jesd204_link_reconfig_awready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_rready;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_rready -> ad9680_jesd204:link_reconfig_rready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_bready;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_bready -> ad9680_jesd204:link_reconfig_bready
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_wvalid -> ad9680_jesd204:link_reconfig_wvalid
	wire   [13:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_araddr -> ad9680_jesd204:link_reconfig_araddr
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_arprot -> ad9680_jesd204:link_reconfig_arprot
	wire    [1:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp;                                      // ad9680_jesd204:link_reconfig_rresp -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rresp
	wire    [2:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot;                                     // mm_interconnect_0:ad9680_jesd204_link_reconfig_awprot -> ad9680_jesd204:link_reconfig_awprot
	wire   [31:0] mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata;                                      // mm_interconnect_0:ad9680_jesd204_link_reconfig_wdata -> ad9680_jesd204:link_reconfig_wdata
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid;                                    // mm_interconnect_0:ad9680_jesd204_link_reconfig_arvalid -> ad9680_jesd204:link_reconfig_arvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid;                                     // ad9680_jesd204:link_reconfig_bvalid -> mm_interconnect_0:ad9680_jesd204_link_reconfig_bvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid;                                    // mm_interconnect_0:ad9680_jesd204_link_reconfig_awvalid -> ad9680_jesd204:link_reconfig_awvalid
	wire          mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid;                                     // ad9680_jesd204:link_reconfig_rvalid -> mm_interconnect_0:ad9680_jesd204_link_reconfig_rvalid
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata;                                           // avl_adxcfg_0:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest;                                        // avl_adxcfg_0:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address;                                            // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_address -> avl_adxcfg_0:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read;                                               // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_read -> avl_adxcfg_0:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write;                                              // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_write -> avl_adxcfg_0:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata;                                          // mm_interconnect_0:avl_adxcfg_0_rcfg_s0_writedata -> avl_adxcfg_0:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata;                                           // avl_adxcfg_1:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest;                                        // avl_adxcfg_1:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address;                                            // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_address -> avl_adxcfg_1:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read;                                               // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_read -> avl_adxcfg_1:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write;                                              // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_write -> avl_adxcfg_1:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata;                                          // mm_interconnect_0:avl_adxcfg_1_rcfg_s0_writedata -> avl_adxcfg_1:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata;                                           // avl_adxcfg_2:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest;                                        // avl_adxcfg_2:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address;                                            // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_address -> avl_adxcfg_2:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read;                                               // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_read -> avl_adxcfg_2:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write;                                              // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_write -> avl_adxcfg_2:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata;                                          // mm_interconnect_0:avl_adxcfg_2_rcfg_s0_writedata -> avl_adxcfg_2:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata;                                           // avl_adxcfg_3:rcfg_in_readdata_0 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s0_readdata
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest;                                        // avl_adxcfg_3:rcfg_in_waitrequest_0 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s0_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address;                                            // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_address -> avl_adxcfg_3:rcfg_in_address_0
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read;                                               // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_read -> avl_adxcfg_3:rcfg_in_read_0
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write;                                              // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_write -> avl_adxcfg_3:rcfg_in_write_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata;                                          // mm_interconnect_0:avl_adxcfg_3_rcfg_s0_writedata -> avl_adxcfg_3:rcfg_in_writedata_0
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata;                                           // avl_adxcfg_0:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest;                                        // avl_adxcfg_0:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_0_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address;                                            // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_address -> avl_adxcfg_0:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read;                                               // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_read -> avl_adxcfg_0:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write;                                              // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_write -> avl_adxcfg_0:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata;                                          // mm_interconnect_0:avl_adxcfg_0_rcfg_s1_writedata -> avl_adxcfg_0:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata;                                           // avl_adxcfg_1:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest;                                        // avl_adxcfg_1:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_1_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address;                                            // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_address -> avl_adxcfg_1:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read;                                               // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_read -> avl_adxcfg_1:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write;                                              // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_write -> avl_adxcfg_1:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata;                                          // mm_interconnect_0:avl_adxcfg_1_rcfg_s1_writedata -> avl_adxcfg_1:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata;                                           // avl_adxcfg_2:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest;                                        // avl_adxcfg_2:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_2_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address;                                            // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_address -> avl_adxcfg_2:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read;                                               // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_read -> avl_adxcfg_2:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write;                                              // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_write -> avl_adxcfg_2:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata;                                          // mm_interconnect_0:avl_adxcfg_2_rcfg_s1_writedata -> avl_adxcfg_2:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata;                                           // avl_adxcfg_3:rcfg_in_readdata_1 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s1_readdata
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest;                                        // avl_adxcfg_3:rcfg_in_waitrequest_1 -> mm_interconnect_0:avl_adxcfg_3_rcfg_s1_waitrequest
	wire    [9:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address;                                            // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_address -> avl_adxcfg_3:rcfg_in_address_1
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read;                                               // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_read -> avl_adxcfg_3:rcfg_in_read_1
	wire          mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write;                                              // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_write -> avl_adxcfg_3:rcfg_in_write_1
	wire   [31:0] mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata;                                          // mm_interconnect_0:avl_adxcfg_3_rcfg_s1_writedata -> avl_adxcfg_3:rcfg_in_writedata_1
	wire   [31:0] mm_interconnect_0_bridge_2_s0_readdata;                                                    // bridge_2:s0_readdata -> mm_interconnect_0:bridge_2_s0_readdata
	wire          mm_interconnect_0_bridge_2_s0_waitrequest;                                                 // bridge_2:s0_waitrequest -> mm_interconnect_0:bridge_2_s0_waitrequest
	wire          mm_interconnect_0_bridge_2_s0_debugaccess;                                                 // mm_interconnect_0:bridge_2_s0_debugaccess -> bridge_2:s0_debugaccess
	wire    [5:0] mm_interconnect_0_bridge_2_s0_address;                                                     // mm_interconnect_0:bridge_2_s0_address -> bridge_2:s0_address
	wire          mm_interconnect_0_bridge_2_s0_read;                                                        // mm_interconnect_0:bridge_2_s0_read -> bridge_2:s0_read
	wire    [3:0] mm_interconnect_0_bridge_2_s0_byteenable;                                                  // mm_interconnect_0:bridge_2_s0_byteenable -> bridge_2:s0_byteenable
	wire          mm_interconnect_0_bridge_2_s0_readdatavalid;                                               // bridge_2:s0_readdatavalid -> mm_interconnect_0:bridge_2_s0_readdatavalid
	wire          mm_interconnect_0_bridge_2_s0_write;                                                       // mm_interconnect_0:bridge_2_s0_write -> bridge_2:s0_write
	wire   [31:0] mm_interconnect_0_bridge_2_s0_writedata;                                                   // mm_interconnect_0:bridge_2_s0_writedata -> bridge_2:s0_writedata
	wire    [0:0] mm_interconnect_0_bridge_2_s0_burstcount;                                                  // mm_interconnect_0:bridge_2_s0_burstcount -> bridge_2:s0_burstcount
	wire          mm_interconnect_0_timer_1_s1_chipselect;                                                   // mm_interconnect_0:timer_1_s1_chipselect -> timer_1:chipselect
	wire   [15:0] mm_interconnect_0_timer_1_s1_readdata;                                                     // timer_1:readdata -> mm_interconnect_0:timer_1_s1_readdata
	wire    [3:0] mm_interconnect_0_timer_1_s1_address;                                                      // mm_interconnect_0:timer_1_s1_address -> timer_1:address
	wire          mm_interconnect_0_timer_1_s1_write;                                                        // mm_interconnect_0:timer_1_s1_write -> timer_1:write_n
	wire   [15:0] mm_interconnect_0_timer_1_s1_writedata;                                                    // mm_interconnect_0:timer_1_s1_writedata -> timer_1:writedata
	wire          mm_interconnect_0_timer_0_s1_chipselect;                                                   // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire   [15:0] mm_interconnect_0_timer_0_s1_readdata;                                                     // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire    [3:0] mm_interconnect_0_timer_0_s1_address;                                                      // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire          mm_interconnect_0_timer_0_s1_write;                                                        // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire   [15:0] mm_interconnect_0_timer_0_s1_writedata;                                                    // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire          mm_interconnect_0_gpio_s1_chipselect;                                                      // mm_interconnect_0:gpio_s1_chipselect -> gpio:chipselect
	wire   [31:0] mm_interconnect_0_gpio_s1_readdata;                                                        // gpio:readdata -> mm_interconnect_0:gpio_s1_readdata
	wire    [2:0] mm_interconnect_0_gpio_s1_address;                                                         // mm_interconnect_0:gpio_s1_address -> gpio:address
	wire          mm_interconnect_0_gpio_s1_write;                                                           // mm_interconnect_0:gpio_s1_write -> gpio:write_n
	wire   [31:0] mm_interconnect_0_gpio_s1_writedata;                                                       // mm_interconnect_0:gpio_s1_writedata -> gpio:writedata
	wire   [15:0] mm_interconnect_0_ad9144_core_s_axi_awaddr;                                                // mm_interconnect_0:ad9144_core_s_axi_awaddr -> ad9144_core:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_core_s_axi_bresp;                                                 // ad9144_core:s_axi_bresp -> mm_interconnect_0:ad9144_core_s_axi_bresp
	wire          mm_interconnect_0_ad9144_core_s_axi_arready;                                               // ad9144_core:s_axi_arready -> mm_interconnect_0:ad9144_core_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9144_core_s_axi_rdata;                                                 // ad9144_core:s_axi_rdata -> mm_interconnect_0:ad9144_core_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9144_core_s_axi_wstrb;                                                 // mm_interconnect_0:ad9144_core_s_axi_wstrb -> ad9144_core:s_axi_wstrb
	wire          mm_interconnect_0_ad9144_core_s_axi_wready;                                                // ad9144_core:s_axi_wready -> mm_interconnect_0:ad9144_core_s_axi_wready
	wire          mm_interconnect_0_ad9144_core_s_axi_awready;                                               // ad9144_core:s_axi_awready -> mm_interconnect_0:ad9144_core_s_axi_awready
	wire          mm_interconnect_0_ad9144_core_s_axi_rready;                                                // mm_interconnect_0:ad9144_core_s_axi_rready -> ad9144_core:s_axi_rready
	wire          mm_interconnect_0_ad9144_core_s_axi_bready;                                                // mm_interconnect_0:ad9144_core_s_axi_bready -> ad9144_core:s_axi_bready
	wire          mm_interconnect_0_ad9144_core_s_axi_wvalid;                                                // mm_interconnect_0:ad9144_core_s_axi_wvalid -> ad9144_core:s_axi_wvalid
	wire   [15:0] mm_interconnect_0_ad9144_core_s_axi_araddr;                                                // mm_interconnect_0:ad9144_core_s_axi_araddr -> ad9144_core:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9144_core_s_axi_arprot;                                                // mm_interconnect_0:ad9144_core_s_axi_arprot -> ad9144_core:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9144_core_s_axi_rresp;                                                 // ad9144_core:s_axi_rresp -> mm_interconnect_0:ad9144_core_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9144_core_s_axi_awprot;                                                // mm_interconnect_0:ad9144_core_s_axi_awprot -> ad9144_core:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9144_core_s_axi_wdata;                                                 // mm_interconnect_0:ad9144_core_s_axi_wdata -> ad9144_core:s_axi_wdata
	wire          mm_interconnect_0_ad9144_core_s_axi_arvalid;                                               // mm_interconnect_0:ad9144_core_s_axi_arvalid -> ad9144_core:s_axi_arvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_bvalid;                                                // ad9144_core:s_axi_bvalid -> mm_interconnect_0:ad9144_core_s_axi_bvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_awvalid;                                               // mm_interconnect_0:ad9144_core_s_axi_awvalid -> ad9144_core:s_axi_awvalid
	wire          mm_interconnect_0_ad9144_core_s_axi_rvalid;                                                // ad9144_core:s_axi_rvalid -> mm_interconnect_0:ad9144_core_s_axi_rvalid
	wire   [11:0] mm_interconnect_0_ad9144_dma_s_axi_awaddr;                                                 // mm_interconnect_0:ad9144_dma_s_axi_awaddr -> ad9144_dma:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9144_dma_s_axi_bresp;                                                  // ad9144_dma:s_axi_bresp -> mm_interconnect_0:ad9144_dma_s_axi_bresp
	wire          mm_interconnect_0_ad9144_dma_s_axi_arready;                                                // ad9144_dma:s_axi_arready -> mm_interconnect_0:ad9144_dma_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9144_dma_s_axi_rdata;                                                  // ad9144_dma:s_axi_rdata -> mm_interconnect_0:ad9144_dma_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9144_dma_s_axi_wstrb;                                                  // mm_interconnect_0:ad9144_dma_s_axi_wstrb -> ad9144_dma:s_axi_wstrb
	wire          mm_interconnect_0_ad9144_dma_s_axi_wready;                                                 // ad9144_dma:s_axi_wready -> mm_interconnect_0:ad9144_dma_s_axi_wready
	wire          mm_interconnect_0_ad9144_dma_s_axi_awready;                                                // ad9144_dma:s_axi_awready -> mm_interconnect_0:ad9144_dma_s_axi_awready
	wire          mm_interconnect_0_ad9144_dma_s_axi_rready;                                                 // mm_interconnect_0:ad9144_dma_s_axi_rready -> ad9144_dma:s_axi_rready
	wire          mm_interconnect_0_ad9144_dma_s_axi_bready;                                                 // mm_interconnect_0:ad9144_dma_s_axi_bready -> ad9144_dma:s_axi_bready
	wire          mm_interconnect_0_ad9144_dma_s_axi_wvalid;                                                 // mm_interconnect_0:ad9144_dma_s_axi_wvalid -> ad9144_dma:s_axi_wvalid
	wire   [11:0] mm_interconnect_0_ad9144_dma_s_axi_araddr;                                                 // mm_interconnect_0:ad9144_dma_s_axi_araddr -> ad9144_dma:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9144_dma_s_axi_arprot;                                                 // mm_interconnect_0:ad9144_dma_s_axi_arprot -> ad9144_dma:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9144_dma_s_axi_rresp;                                                  // ad9144_dma:s_axi_rresp -> mm_interconnect_0:ad9144_dma_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9144_dma_s_axi_awprot;                                                 // mm_interconnect_0:ad9144_dma_s_axi_awprot -> ad9144_dma:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9144_dma_s_axi_wdata;                                                  // mm_interconnect_0:ad9144_dma_s_axi_wdata -> ad9144_dma:s_axi_wdata
	wire          mm_interconnect_0_ad9144_dma_s_axi_arvalid;                                                // mm_interconnect_0:ad9144_dma_s_axi_arvalid -> ad9144_dma:s_axi_arvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_bvalid;                                                 // ad9144_dma:s_axi_bvalid -> mm_interconnect_0:ad9144_dma_s_axi_bvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_awvalid;                                                // mm_interconnect_0:ad9144_dma_s_axi_awvalid -> ad9144_dma:s_axi_awvalid
	wire          mm_interconnect_0_ad9144_dma_s_axi_rvalid;                                                 // ad9144_dma:s_axi_rvalid -> mm_interconnect_0:ad9144_dma_s_axi_rvalid
	wire   [11:0] mm_interconnect_0_ad9680_dma_s_axi_awaddr;                                                 // mm_interconnect_0:ad9680_dma_s_axi_awaddr -> ad9680_dma:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_dma_s_axi_bresp;                                                  // ad9680_dma:s_axi_bresp -> mm_interconnect_0:ad9680_dma_s_axi_bresp
	wire          mm_interconnect_0_ad9680_dma_s_axi_arready;                                                // ad9680_dma:s_axi_arready -> mm_interconnect_0:ad9680_dma_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9680_dma_s_axi_rdata;                                                  // ad9680_dma:s_axi_rdata -> mm_interconnect_0:ad9680_dma_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9680_dma_s_axi_wstrb;                                                  // mm_interconnect_0:ad9680_dma_s_axi_wstrb -> ad9680_dma:s_axi_wstrb
	wire          mm_interconnect_0_ad9680_dma_s_axi_wready;                                                 // ad9680_dma:s_axi_wready -> mm_interconnect_0:ad9680_dma_s_axi_wready
	wire          mm_interconnect_0_ad9680_dma_s_axi_awready;                                                // ad9680_dma:s_axi_awready -> mm_interconnect_0:ad9680_dma_s_axi_awready
	wire          mm_interconnect_0_ad9680_dma_s_axi_rready;                                                 // mm_interconnect_0:ad9680_dma_s_axi_rready -> ad9680_dma:s_axi_rready
	wire          mm_interconnect_0_ad9680_dma_s_axi_bready;                                                 // mm_interconnect_0:ad9680_dma_s_axi_bready -> ad9680_dma:s_axi_bready
	wire          mm_interconnect_0_ad9680_dma_s_axi_wvalid;                                                 // mm_interconnect_0:ad9680_dma_s_axi_wvalid -> ad9680_dma:s_axi_wvalid
	wire   [11:0] mm_interconnect_0_ad9680_dma_s_axi_araddr;                                                 // mm_interconnect_0:ad9680_dma_s_axi_araddr -> ad9680_dma:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9680_dma_s_axi_arprot;                                                 // mm_interconnect_0:ad9680_dma_s_axi_arprot -> ad9680_dma:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9680_dma_s_axi_rresp;                                                  // ad9680_dma:s_axi_rresp -> mm_interconnect_0:ad9680_dma_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9680_dma_s_axi_awprot;                                                 // mm_interconnect_0:ad9680_dma_s_axi_awprot -> ad9680_dma:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9680_dma_s_axi_wdata;                                                  // mm_interconnect_0:ad9680_dma_s_axi_wdata -> ad9680_dma:s_axi_wdata
	wire          mm_interconnect_0_ad9680_dma_s_axi_arvalid;                                                // mm_interconnect_0:ad9680_dma_s_axi_arvalid -> ad9680_dma:s_axi_arvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_bvalid;                                                 // ad9680_dma:s_axi_bvalid -> mm_interconnect_0:ad9680_dma_s_axi_bvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_awvalid;                                                // mm_interconnect_0:ad9680_dma_s_axi_awvalid -> ad9680_dma:s_axi_awvalid
	wire          mm_interconnect_0_ad9680_dma_s_axi_rvalid;                                                 // ad9680_dma:s_axi_rvalid -> mm_interconnect_0:ad9680_dma_s_axi_rvalid
	wire   [15:0] mm_interconnect_0_ad9680_core_s_axi_awaddr;                                                // mm_interconnect_0:ad9680_core_s_axi_awaddr -> ad9680_core:s_axi_awaddr
	wire    [1:0] mm_interconnect_0_ad9680_core_s_axi_bresp;                                                 // ad9680_core:s_axi_bresp -> mm_interconnect_0:ad9680_core_s_axi_bresp
	wire          mm_interconnect_0_ad9680_core_s_axi_arready;                                               // ad9680_core:s_axi_arready -> mm_interconnect_0:ad9680_core_s_axi_arready
	wire   [31:0] mm_interconnect_0_ad9680_core_s_axi_rdata;                                                 // ad9680_core:s_axi_rdata -> mm_interconnect_0:ad9680_core_s_axi_rdata
	wire    [3:0] mm_interconnect_0_ad9680_core_s_axi_wstrb;                                                 // mm_interconnect_0:ad9680_core_s_axi_wstrb -> ad9680_core:s_axi_wstrb
	wire          mm_interconnect_0_ad9680_core_s_axi_wready;                                                // ad9680_core:s_axi_wready -> mm_interconnect_0:ad9680_core_s_axi_wready
	wire          mm_interconnect_0_ad9680_core_s_axi_awready;                                               // ad9680_core:s_axi_awready -> mm_interconnect_0:ad9680_core_s_axi_awready
	wire          mm_interconnect_0_ad9680_core_s_axi_rready;                                                // mm_interconnect_0:ad9680_core_s_axi_rready -> ad9680_core:s_axi_rready
	wire          mm_interconnect_0_ad9680_core_s_axi_bready;                                                // mm_interconnect_0:ad9680_core_s_axi_bready -> ad9680_core:s_axi_bready
	wire          mm_interconnect_0_ad9680_core_s_axi_wvalid;                                                // mm_interconnect_0:ad9680_core_s_axi_wvalid -> ad9680_core:s_axi_wvalid
	wire   [15:0] mm_interconnect_0_ad9680_core_s_axi_araddr;                                                // mm_interconnect_0:ad9680_core_s_axi_araddr -> ad9680_core:s_axi_araddr
	wire    [2:0] mm_interconnect_0_ad9680_core_s_axi_arprot;                                                // mm_interconnect_0:ad9680_core_s_axi_arprot -> ad9680_core:s_axi_arprot
	wire    [1:0] mm_interconnect_0_ad9680_core_s_axi_rresp;                                                 // ad9680_core:s_axi_rresp -> mm_interconnect_0:ad9680_core_s_axi_rresp
	wire    [2:0] mm_interconnect_0_ad9680_core_s_axi_awprot;                                                // mm_interconnect_0:ad9680_core_s_axi_awprot -> ad9680_core:s_axi_awprot
	wire   [31:0] mm_interconnect_0_ad9680_core_s_axi_wdata;                                                 // mm_interconnect_0:ad9680_core_s_axi_wdata -> ad9680_core:s_axi_wdata
	wire          mm_interconnect_0_ad9680_core_s_axi_arvalid;                                               // mm_interconnect_0:ad9680_core_s_axi_arvalid -> ad9680_core:s_axi_arvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_bvalid;                                                // ad9680_core:s_axi_bvalid -> mm_interconnect_0:ad9680_core_s_axi_bvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_awvalid;                                               // mm_interconnect_0:ad9680_core_s_axi_awvalid -> ad9680_core:s_axi_awvalid
	wire          mm_interconnect_0_ad9680_core_s_axi_rvalid;                                                // ad9680_core:s_axi_rvalid -> mm_interconnect_0:ad9680_core_s_axi_rvalid
	wire          mm_interconnect_0_spi_spi_control_port_chipselect;                                         // mm_interconnect_0:spi_spi_control_port_chipselect -> spi:spi_select
	wire   [15:0] mm_interconnect_0_spi_spi_control_port_readdata;                                           // spi:data_to_cpu -> mm_interconnect_0:spi_spi_control_port_readdata
	wire    [2:0] mm_interconnect_0_spi_spi_control_port_address;                                            // mm_interconnect_0:spi_spi_control_port_address -> spi:mem_addr
	wire          mm_interconnect_0_spi_spi_control_port_read;                                               // mm_interconnect_0:spi_spi_control_port_read -> spi:read_n
	wire          mm_interconnect_0_spi_spi_control_port_write;                                              // mm_interconnect_0:spi_spi_control_port_write -> spi:write_n
	wire   [15:0] mm_interconnect_0_spi_spi_control_port_writedata;                                          // mm_interconnect_0:spi_spi_control_port_writedata -> spi:data_from_cpu
	wire          bridge_2_m0_waitrequest;                                                                   // mm_interconnect_1:bridge_2_m0_waitrequest -> bridge_2:m0_waitrequest
	wire   [31:0] bridge_2_m0_readdata;                                                                      // mm_interconnect_1:bridge_2_m0_readdata -> bridge_2:m0_readdata
	wire          bridge_2_m0_debugaccess;                                                                   // bridge_2:m0_debugaccess -> mm_interconnect_1:bridge_2_m0_debugaccess
	wire    [5:0] bridge_2_m0_address;                                                                       // bridge_2:m0_address -> mm_interconnect_1:bridge_2_m0_address
	wire          bridge_2_m0_read;                                                                          // bridge_2:m0_read -> mm_interconnect_1:bridge_2_m0_read
	wire    [3:0] bridge_2_m0_byteenable;                                                                    // bridge_2:m0_byteenable -> mm_interconnect_1:bridge_2_m0_byteenable
	wire          bridge_2_m0_readdatavalid;                                                                 // mm_interconnect_1:bridge_2_m0_readdatavalid -> bridge_2:m0_readdatavalid
	wire   [31:0] bridge_2_m0_writedata;                                                                     // bridge_2:m0_writedata -> mm_interconnect_1:bridge_2_m0_writedata
	wire          bridge_2_m0_write;                                                                         // bridge_2:m0_write -> mm_interconnect_1:bridge_2_m0_write
	wire    [0:0] bridge_2_m0_burstcount;                                                                    // bridge_2:m0_burstcount -> mm_interconnect_1:bridge_2_m0_burstcount
	wire   [31:0] mm_interconnect_1_qspi_controller2_0_avl_csr_readdata;                                     // qspi_controller2_0:avl_csr_rddata -> mm_interconnect_1:qspi_controller2_0_avl_csr_readdata
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest;                                  // qspi_controller2_0:avl_csr_waitrequest -> mm_interconnect_1:qspi_controller2_0_avl_csr_waitrequest
	wire    [3:0] mm_interconnect_1_qspi_controller2_0_avl_csr_address;                                      // mm_interconnect_1:qspi_controller2_0_avl_csr_address -> qspi_controller2_0:avl_csr_addr
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_read;                                         // mm_interconnect_1:qspi_controller2_0_avl_csr_read -> qspi_controller2_0:avl_csr_read
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid;                                // qspi_controller2_0:avl_csr_rddata_valid -> mm_interconnect_1:qspi_controller2_0_avl_csr_readdatavalid
	wire          mm_interconnect_1_qspi_controller2_0_avl_csr_write;                                        // mm_interconnect_1:qspi_controller2_0_avl_csr_write -> qspi_controller2_0:avl_csr_write
	wire   [31:0] mm_interconnect_1_qspi_controller2_0_avl_csr_writedata;                                    // mm_interconnect_1:qspi_controller2_0_avl_csr_writedata -> qspi_controller2_0:avl_csr_wrdata
	wire          bridge_3_m0_waitrequest;                                                                   // mm_interconnect_2:bridge_3_m0_waitrequest -> bridge_3:m0_waitrequest
	wire   [31:0] bridge_3_m0_readdata;                                                                      // mm_interconnect_2:bridge_3_m0_readdata -> bridge_3:m0_readdata
	wire          bridge_3_m0_debugaccess;                                                                   // bridge_3:m0_debugaccess -> mm_interconnect_2:bridge_3_m0_debugaccess
	wire   [26:0] bridge_3_m0_address;                                                                       // bridge_3:m0_address -> mm_interconnect_2:bridge_3_m0_address
	wire          bridge_3_m0_read;                                                                          // bridge_3:m0_read -> mm_interconnect_2:bridge_3_m0_read
	wire    [3:0] bridge_3_m0_byteenable;                                                                    // bridge_3:m0_byteenable -> mm_interconnect_2:bridge_3_m0_byteenable
	wire          bridge_3_m0_readdatavalid;                                                                 // mm_interconnect_2:bridge_3_m0_readdatavalid -> bridge_3:m0_readdatavalid
	wire   [31:0] bridge_3_m0_writedata;                                                                     // bridge_3:m0_writedata -> mm_interconnect_2:bridge_3_m0_writedata
	wire          bridge_3_m0_write;                                                                         // bridge_3:m0_write -> mm_interconnect_2:bridge_3_m0_write
	wire    [0:0] bridge_3_m0_burstcount;                                                                    // bridge_3:m0_burstcount -> mm_interconnect_2:bridge_3_m0_burstcount
	wire   [31:0] mm_interconnect_2_qspi_controller2_0_avl_mem_readdata;                                     // qspi_controller2_0:avl_mem_rddata -> mm_interconnect_2:qspi_controller2_0_avl_mem_readdata
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest;                                  // qspi_controller2_0:avl_mem_waitrequest -> mm_interconnect_2:qspi_controller2_0_avl_mem_waitrequest
	wire   [24:0] mm_interconnect_2_qspi_controller2_0_avl_mem_address;                                      // mm_interconnect_2:qspi_controller2_0_avl_mem_address -> qspi_controller2_0:avl_mem_addr
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_read;                                         // mm_interconnect_2:qspi_controller2_0_avl_mem_read -> qspi_controller2_0:avl_mem_read
	wire    [3:0] mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable;                                   // mm_interconnect_2:qspi_controller2_0_avl_mem_byteenable -> qspi_controller2_0:avl_mem_byteenable
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid;                                // qspi_controller2_0:avl_mem_rddata_valid -> mm_interconnect_2:qspi_controller2_0_avl_mem_readdatavalid
	wire          mm_interconnect_2_qspi_controller2_0_avl_mem_write;                                        // mm_interconnect_2:qspi_controller2_0_avl_mem_write -> qspi_controller2_0:avl_mem_write
	wire   [31:0] mm_interconnect_2_qspi_controller2_0_avl_mem_writedata;                                    // mm_interconnect_2:qspi_controller2_0_avl_mem_writedata -> qspi_controller2_0:avl_mem_wrdata
	wire    [6:0] mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount;                                   // mm_interconnect_2:qspi_controller2_0_avl_mem_burstcount -> qspi_controller2_0:avl_mem_burstcount
	wire          bridge_0_m0_waitrequest;                                                                   // mm_interconnect_3:bridge_0_m0_waitrequest -> bridge_0:m0_waitrequest
	wire  [255:0] bridge_0_m0_readdata;                                                                      // mm_interconnect_3:bridge_0_m0_readdata -> bridge_0:m0_readdata
	wire          bridge_0_m0_debugaccess;                                                                   // bridge_0:m0_debugaccess -> mm_interconnect_3:bridge_0_m0_debugaccess
	wire   [30:0] bridge_0_m0_address;                                                                       // bridge_0:m0_address -> mm_interconnect_3:bridge_0_m0_address
	wire          bridge_0_m0_read;                                                                          // bridge_0:m0_read -> mm_interconnect_3:bridge_0_m0_read
	wire   [31:0] bridge_0_m0_byteenable;                                                                    // bridge_0:m0_byteenable -> mm_interconnect_3:bridge_0_m0_byteenable
	wire          bridge_0_m0_readdatavalid;                                                                 // mm_interconnect_3:bridge_0_m0_readdatavalid -> bridge_0:m0_readdatavalid
	wire  [255:0] bridge_0_m0_writedata;                                                                     // bridge_0:m0_writedata -> mm_interconnect_3:bridge_0_m0_writedata
	wire          bridge_0_m0_write;                                                                         // bridge_0:m0_write -> mm_interconnect_3:bridge_0_m0_write
	wire    [4:0] bridge_0_m0_burstcount;                                                                    // bridge_0:m0_burstcount -> mm_interconnect_3:bridge_0_m0_burstcount
	wire  [255:0] mm_interconnect_3_ddr3_ctrl_amm_0_readdata;                                                // ddr3:amm_readdata_0 -> mm_interconnect_3:ddr3_ctrl_amm_0_readdata
	wire          mm_interconnect_3_ddr3_ctrl_amm_0_waitrequest;                                             // ddr3:amm_ready_0 -> mm_interconnect_3:ddr3_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_3_ddr3_ctrl_amm_0_address;                                                 // mm_interconnect_3:ddr3_ctrl_amm_0_address -> ddr3:amm_address_0
	wire          mm_interconnect_3_ddr3_ctrl_amm_0_read;                                                    // mm_interconnect_3:ddr3_ctrl_amm_0_read -> ddr3:amm_read_0
	wire   [31:0] mm_interconnect_3_ddr3_ctrl_amm_0_byteenable;                                              // mm_interconnect_3:ddr3_ctrl_amm_0_byteenable -> ddr3:amm_byteenable_0
	wire          mm_interconnect_3_ddr3_ctrl_amm_0_readdatavalid;                                           // ddr3:amm_readdatavalid_0 -> mm_interconnect_3:ddr3_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_3_ddr3_ctrl_amm_0_write;                                                   // mm_interconnect_3:ddr3_ctrl_amm_0_write -> ddr3:amm_write_0
	wire  [255:0] mm_interconnect_3_ddr3_ctrl_amm_0_writedata;                                               // mm_interconnect_3:ddr3_ctrl_amm_0_writedata -> ddr3:amm_writedata_0
	wire    [6:0] mm_interconnect_3_ddr3_ctrl_amm_0_burstcount;                                              // mm_interconnect_3:ddr3_ctrl_amm_0_burstcount -> ddr3:amm_burstcount_0
	wire          bridge_1_m0_waitrequest;                                                                   // mm_interconnect_4:bridge_1_m0_waitrequest -> bridge_1:m0_waitrequest
	wire   [31:0] bridge_1_m0_readdata;                                                                      // mm_interconnect_4:bridge_1_m0_readdata -> bridge_1:m0_readdata
	wire          bridge_1_m0_debugaccess;                                                                   // bridge_1:m0_debugaccess -> mm_interconnect_4:bridge_1_m0_debugaccess
	wire   [11:0] bridge_1_m0_address;                                                                       // bridge_1:m0_address -> mm_interconnect_4:bridge_1_m0_address
	wire          bridge_1_m0_read;                                                                          // bridge_1:m0_read -> mm_interconnect_4:bridge_1_m0_read
	wire    [3:0] bridge_1_m0_byteenable;                                                                    // bridge_1:m0_byteenable -> mm_interconnect_4:bridge_1_m0_byteenable
	wire          bridge_1_m0_readdatavalid;                                                                 // mm_interconnect_4:bridge_1_m0_readdatavalid -> bridge_1:m0_readdatavalid
	wire   [31:0] bridge_1_m0_writedata;                                                                     // bridge_1:m0_writedata -> mm_interconnect_4:bridge_1_m0_writedata
	wire          bridge_1_m0_write;                                                                         // bridge_1:m0_write -> mm_interconnect_4:bridge_1_m0_write
	wire    [2:0] bridge_1_m0_burstcount;                                                                    // bridge_1:m0_burstcount -> mm_interconnect_4:bridge_1_m0_burstcount
	wire          mm_interconnect_4_ddr3_ctrl_mmr_slave_0_beginbursttransfer;                                // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_beginbursttransfer -> ddr3:mmr_slave_beginbursttransfer_0
	wire   [31:0] mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdata;                                          // ddr3:mmr_slave_readdata_0 -> mm_interconnect_4:ddr3_ctrl_mmr_slave_0_readdata
	wire          mm_interconnect_4_ddr3_ctrl_mmr_slave_0_waitrequest;                                       // ddr3:mmr_slave_waitrequest_0 -> mm_interconnect_4:ddr3_ctrl_mmr_slave_0_waitrequest
	wire    [9:0] mm_interconnect_4_ddr3_ctrl_mmr_slave_0_address;                                           // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_address -> ddr3:mmr_slave_address_0
	wire          mm_interconnect_4_ddr3_ctrl_mmr_slave_0_read;                                              // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_read -> ddr3:mmr_slave_read_0
	wire          mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdatavalid;                                     // ddr3:mmr_slave_readdatavalid_0 -> mm_interconnect_4:ddr3_ctrl_mmr_slave_0_readdatavalid
	wire          mm_interconnect_4_ddr3_ctrl_mmr_slave_0_write;                                             // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_write -> ddr3:mmr_slave_write_0
	wire   [31:0] mm_interconnect_4_ddr3_ctrl_mmr_slave_0_writedata;                                         // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_writedata -> ddr3:mmr_slave_writedata_0
	wire    [1:0] mm_interconnect_4_ddr3_ctrl_mmr_slave_0_burstcount;                                        // mm_interconnect_4:ddr3_ctrl_mmr_slave_0_burstcount -> ddr3:mmr_slave_burstcount_0
	wire          irq_mapper_receiver0_irq;                                                                  // ethernet:dma_rx_irq_irq -> irq_mapper:receiver0_irq
	wire          irq_mapper_receiver1_irq;                                                                  // ethernet:dma_tx_irq_irq -> irq_mapper:receiver1_irq
	wire          irq_mapper_receiver2_irq;                                                                  // ad9144_jesd204:interrupt_irq -> irq_mapper:receiver2_irq
	wire          irq_mapper_receiver3_irq;                                                                  // ad9680_jesd204:interrupt_irq -> irq_mapper:receiver3_irq
	wire          irq_mapper_receiver5_irq;                                                                  // i2c:intr -> irq_mapper:receiver5_irq
	wire          irq_mapper_receiver6_irq;                                                                  // ad9144_dma:irq -> irq_mapper:receiver6_irq
	wire          irq_mapper_receiver7_irq;                                                                  // ad9680_dma:irq -> irq_mapper:receiver7_irq
	wire          irq_mapper_receiver8_irq;                                                                  // jtag_uart_0:av_irq -> irq_mapper:receiver8_irq
	wire          irq_mapper_receiver9_irq;                                                                  // timer_0:irq -> irq_mapper:receiver9_irq
	wire          irq_mapper_receiver10_irq;                                                                 // timer_1:irq -> irq_mapper:receiver10_irq
	wire          irq_mapper_receiver11_irq;                                                                 // spi:irq -> irq_mapper:receiver11_irq
	wire          irq_mapper_receiver12_irq;                                                                 // gpio:irq -> irq_mapper:receiver12_irq
	wire   [31:0] mcu_subsystem_cpu_0_irq_irq;                                                               // irq_mapper:sender_irq -> mcu_subsystem_cpu_0:irq
	wire          irq_mapper_receiver4_irq;                                                                  // irq_synchronizer:sender_irq -> irq_mapper:receiver4_irq
	wire    [0:0] irq_synchronizer_receiver_irq;                                                             // qspi_controller2_0:irq -> irq_synchronizer:receiver_irq
	wire          ad9680_jesd204_link_data_valid;                                                            // ad9680_jesd204:link_data_valid -> avalon_st_adapter:in_0_valid
	wire  [127:0] ad9680_jesd204_link_data_data;                                                             // ad9680_jesd204:link_data_data -> avalon_st_adapter:in_0_data
	wire          avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> ad9680_core:rx_valid
	wire  [127:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> ad9680_core:rx_data
	wire          avalon_st_adapter_out_0_ready;                                                             // ad9680_core:rx_ready -> avalon_st_adapter:out_0_ready
	wire          rst_controller_reset_out_reset;                                                            // rst_controller:reset_out -> [ad9144_core:s_axi_aresetn, ad9144_dma:m_src_axi_aresetn, ad9144_dma:s_axi_aresetn, ad9144_fifo:dma_rst, ad9144_jesd204:sys_resetn_reset_n, ad9680_core:s_axi_aresetn, ad9680_dma:m_dest_axi_aresetn, ad9680_dma:s_axi_aresetn, ad9680_jesd204:sys_resetn_reset_n, bridge_0:s0_reset, bridge_1:s0_reset, bridge_2:m0_reset, gpio:reset_n, i2c:rst_n, irq_mapper:reset, irq_synchronizer:sender_reset, mcu_subsystem_cpu_0:reset_n, mcu_subsystem_ram_0:reset, mm_interconnect_0:mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:bridge_2_m0_reset_reset_bridge_in_reset_reset, rst_translator:in_reset, spi:reset_n, timer_0:reset_n, timer_1:reset_n]
	wire          rst_controller_reset_out_reset_req;                                                        // rst_controller:reset_req -> [mcu_subsystem_cpu_0:reset_req, mcu_subsystem_ram_0:reset_req, rst_translator:reset_req_in]
	wire          reset_in_out_reset_reset;                                                                  // reset_in:out_reset_n -> [rst_controller:reset_in1, rst_controller_002:reset_in1, rst_controller_003:reset_in0, rst_controller_005:reset_in1, rst_controller_006:reset_in1, rst_controller_007:reset_in1, rst_controller_008:reset_in1]
	wire          rst_controller_001_reset_out_reset;                                                        // rst_controller_001:reset_out -> ad9144_fifo:dac_rst
	wire          ad9144_jesd204_link_reset_reset;                                                           // ad9144_jesd204:link_reset_reset -> rst_controller_001:reset_in0
	wire          rst_controller_002_reset_out_reset;                                                        // rst_controller_002:reset_out -> [ad9680_cpack:adc_rst, ad9680_fifo:adc_rst, avalon_st_adapter:in_rst_0_reset]
	wire          rst_controller_003_reset_out_reset;                                                        // rst_controller_003:reset_out -> [avl_adxcfg_0:rcfg_reset_n, avl_adxcfg_1:rcfg_reset_n, avl_adxcfg_2:rcfg_reset_n, avl_adxcfg_3:rcfg_reset_n, jtag_uart_0:rst_n, mm_interconnect_0:jtag_uart_0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_004_reset_out_reset;                                                        // rst_controller_004:reset_out -> [bridge_0:m0_reset, bridge_1:m0_reset, mm_interconnect_3:bridge_0_m0_reset_reset_bridge_in_reset_reset, mm_interconnect_4:bridge_1_m0_reset_reset_bridge_in_reset_reset]
	wire          ddr3_emif_usr_reset_n_reset;                                                               // ddr3:emif_usr_reset_n -> rst_controller_004:reset_in0
	wire          rst_controller_005_reset_out_reset;                                                        // rst_controller_005:reset_out -> [bridge_2:s0_reset, bridge_3:m0_reset, irq_synchronizer:receiver_reset, mm_interconnect_0:bridge_2_s0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:qspi_controller2_0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:bridge_3_m0_reset_reset_bridge_in_reset_reset, qspi_controller2_0:reset_n]
	wire          rst_controller_006_reset_out_reset;                                                        // rst_controller_006:reset_out -> [bridge_3:s0_reset, mm_interconnect_0:bridge_3_s0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_007_reset_out_reset;                                                        // rst_controller_007:reset_out -> ddr3:global_reset_n
	wire          rst_controller_008_reset_out_reset;                                                        // rst_controller_008:reset_out -> ethernet:rst_in_reset_n

	ad9144_core ad9144_core (
		.s_axi_aclk    (clock_in_out_clk_clk),                        //   input,    width = 1, s_axi_clock.clk
		.s_axi_aresetn (~rst_controller_reset_out_reset),             //   input,    width = 1, s_axi_reset.reset_n
		.s_axi_awvalid (mm_interconnect_0_ad9144_core_s_axi_awvalid), //   input,    width = 1,       s_axi.awvalid
		.s_axi_awaddr  (mm_interconnect_0_ad9144_core_s_axi_awaddr),  //   input,   width = 16,            .awaddr
		.s_axi_awprot  (mm_interconnect_0_ad9144_core_s_axi_awprot),  //   input,    width = 3,            .awprot
		.s_axi_awready (mm_interconnect_0_ad9144_core_s_axi_awready), //  output,    width = 1,            .awready
		.s_axi_wvalid  (mm_interconnect_0_ad9144_core_s_axi_wvalid),  //   input,    width = 1,            .wvalid
		.s_axi_wdata   (mm_interconnect_0_ad9144_core_s_axi_wdata),   //   input,   width = 32,            .wdata
		.s_axi_wstrb   (mm_interconnect_0_ad9144_core_s_axi_wstrb),   //   input,    width = 4,            .wstrb
		.s_axi_wready  (mm_interconnect_0_ad9144_core_s_axi_wready),  //  output,    width = 1,            .wready
		.s_axi_bvalid  (mm_interconnect_0_ad9144_core_s_axi_bvalid),  //  output,    width = 1,            .bvalid
		.s_axi_bresp   (mm_interconnect_0_ad9144_core_s_axi_bresp),   //  output,    width = 2,            .bresp
		.s_axi_bready  (mm_interconnect_0_ad9144_core_s_axi_bready),  //   input,    width = 1,            .bready
		.s_axi_arvalid (mm_interconnect_0_ad9144_core_s_axi_arvalid), //   input,    width = 1,            .arvalid
		.s_axi_araddr  (mm_interconnect_0_ad9144_core_s_axi_araddr),  //   input,   width = 16,            .araddr
		.s_axi_arprot  (mm_interconnect_0_ad9144_core_s_axi_arprot),  //   input,    width = 3,            .arprot
		.s_axi_arready (mm_interconnect_0_ad9144_core_s_axi_arready), //  output,    width = 1,            .arready
		.s_axi_rvalid  (mm_interconnect_0_ad9144_core_s_axi_rvalid),  //  output,    width = 1,            .rvalid
		.s_axi_rresp   (mm_interconnect_0_ad9144_core_s_axi_rresp),   //  output,    width = 2,            .rresp
		.s_axi_rdata   (mm_interconnect_0_ad9144_core_s_axi_rdata),   //  output,   width = 32,            .rdata
		.s_axi_rready  (mm_interconnect_0_ad9144_core_s_axi_rready),  //   input,    width = 1,            .rready
		.tx_clk        (ad9144_jesd204_link_clk_clk),                 //   input,    width = 1,   if_tx_clk.clk
		.tx_data       (ad9144_core_if_tx_data_data),                 //  output,  width = 128,  if_tx_data.data
		.tx_valid      (ad9144_core_if_tx_data_valid),                //  output,    width = 1,            .valid
		.tx_ready      (ad9144_core_if_tx_data_ready),                //   input,    width = 1,            .ready
		.dac_clk       (),                                            //  output,    width = 1,  if_dac_clk.clk
		.dac_enable_0  (ad9144_core_dac_ch_0_enable),                 //  output,    width = 1,    dac_ch_0.enable
		.dac_valid_0   (ad9144_core_dac_ch_0_valid),                  //  output,    width = 1,            .valid
		.dac_ddata_0   (ad9144_upack_dac_ch_0_data),                  //   input,   width = 64,            .data
		.dac_enable_1  (ad9144_core_dac_ch_1_enable),                 //  output,    width = 1,    dac_ch_1.enable
		.dac_valid_1   (ad9144_core_dac_ch_1_valid),                  //  output,    width = 1,            .valid
		.dac_ddata_1   (ad9144_upack_dac_ch_1_data),                  //   input,   width = 64,            .data
		.dac_dunf      (ad9144_fifo_if_dac_dunf_unf)                  //   input,    width = 1, if_dac_dunf.unf
	);

	ad9144_dma ad9144_dma (
		.s_axi_aclk        (clock_in_out_clk_clk),                       //   input,    width = 1,        s_axi_clock.clk
		.s_axi_aresetn     (~rst_controller_reset_out_reset),            //   input,    width = 1,        s_axi_reset.reset_n
		.s_axi_awvalid     (mm_interconnect_0_ad9144_dma_s_axi_awvalid), //   input,    width = 1,              s_axi.awvalid
		.s_axi_awaddr      (mm_interconnect_0_ad9144_dma_s_axi_awaddr),  //   input,   width = 12,                   .awaddr
		.s_axi_awprot      (mm_interconnect_0_ad9144_dma_s_axi_awprot),  //   input,    width = 3,                   .awprot
		.s_axi_awready     (mm_interconnect_0_ad9144_dma_s_axi_awready), //  output,    width = 1,                   .awready
		.s_axi_wvalid      (mm_interconnect_0_ad9144_dma_s_axi_wvalid),  //   input,    width = 1,                   .wvalid
		.s_axi_wdata       (mm_interconnect_0_ad9144_dma_s_axi_wdata),   //   input,   width = 32,                   .wdata
		.s_axi_wstrb       (mm_interconnect_0_ad9144_dma_s_axi_wstrb),   //   input,    width = 4,                   .wstrb
		.s_axi_wready      (mm_interconnect_0_ad9144_dma_s_axi_wready),  //  output,    width = 1,                   .wready
		.s_axi_bvalid      (mm_interconnect_0_ad9144_dma_s_axi_bvalid),  //  output,    width = 1,                   .bvalid
		.s_axi_bresp       (mm_interconnect_0_ad9144_dma_s_axi_bresp),   //  output,    width = 2,                   .bresp
		.s_axi_bready      (mm_interconnect_0_ad9144_dma_s_axi_bready),  //   input,    width = 1,                   .bready
		.s_axi_arvalid     (mm_interconnect_0_ad9144_dma_s_axi_arvalid), //   input,    width = 1,                   .arvalid
		.s_axi_araddr      (mm_interconnect_0_ad9144_dma_s_axi_araddr),  //   input,   width = 12,                   .araddr
		.s_axi_arprot      (mm_interconnect_0_ad9144_dma_s_axi_arprot),  //   input,    width = 3,                   .arprot
		.s_axi_arready     (mm_interconnect_0_ad9144_dma_s_axi_arready), //  output,    width = 1,                   .arready
		.s_axi_rvalid      (mm_interconnect_0_ad9144_dma_s_axi_rvalid),  //  output,    width = 1,                   .rvalid
		.s_axi_rresp       (mm_interconnect_0_ad9144_dma_s_axi_rresp),   //  output,    width = 2,                   .rresp
		.s_axi_rdata       (mm_interconnect_0_ad9144_dma_s_axi_rdata),   //  output,   width = 32,                   .rdata
		.s_axi_rready      (mm_interconnect_0_ad9144_dma_s_axi_rready),  //   input,    width = 1,                   .rready
		.irq               (irq_mapper_receiver6_irq),                   //  output,    width = 1,   interrupt_sender.irq
		.m_src_axi_aclk    (clock_in_out_clk_clk),                       //   input,    width = 1,    m_src_axi_clock.clk
		.m_src_axi_aresetn (~rst_controller_reset_out_reset),            //   input,    width = 1,    m_src_axi_reset.reset_n
		.m_axis_aclk       (clock_in_out_clk_clk),                       //   input,    width = 1,     if_m_axis_aclk.clk
		.m_axis_valid      (ad9144_dma_if_m_axis_valid_valid),           //  output,    width = 1,    if_m_axis_valid.valid
		.m_axis_data       (ad9144_dma_if_m_axis_data_data),             //  output,  width = 128,     if_m_axis_data.data
		.m_axis_ready      (ad9144_fifo_if_dma_ready_ready),             //   input,    width = 1,    if_m_axis_ready.ready
		.m_axis_last       (ad9144_dma_if_m_axis_last_last),             //  output,    width = 1,     if_m_axis_last.last
		.m_axis_xfer_req   (ad9144_dma_if_m_axis_xfer_req_xfer_req),     //  output,    width = 1, if_m_axis_xfer_req.xfer_req
		.m_src_axi_awvalid (ad9144_dma_m_src_axi_awvalid),               //  output,    width = 1,          m_src_axi.awvalid
		.m_src_axi_awaddr  (ad9144_dma_m_src_axi_awaddr),                //  output,   width = 32,                   .awaddr
		.m_src_axi_awready (ad9144_dma_m_src_axi_awready),               //   input,    width = 1,                   .awready
		.m_src_axi_wvalid  (ad9144_dma_m_src_axi_wvalid),                //  output,    width = 1,                   .wvalid
		.m_src_axi_wdata   (ad9144_dma_m_src_axi_wdata),                 //  output,  width = 128,                   .wdata
		.m_src_axi_wstrb   (ad9144_dma_m_src_axi_wstrb),                 //  output,   width = 16,                   .wstrb
		.m_src_axi_wready  (ad9144_dma_m_src_axi_wready),                //   input,    width = 1,                   .wready
		.m_src_axi_bvalid  (ad9144_dma_m_src_axi_bvalid),                //   input,    width = 1,                   .bvalid
		.m_src_axi_bresp   (ad9144_dma_m_src_axi_bresp),                 //   input,    width = 2,                   .bresp
		.m_src_axi_bready  (ad9144_dma_m_src_axi_bready),                //  output,    width = 1,                   .bready
		.m_src_axi_arvalid (ad9144_dma_m_src_axi_arvalid),               //  output,    width = 1,                   .arvalid
		.m_src_axi_araddr  (ad9144_dma_m_src_axi_araddr),                //  output,   width = 32,                   .araddr
		.m_src_axi_arready (ad9144_dma_m_src_axi_arready),               //   input,    width = 1,                   .arready
		.m_src_axi_rvalid  (ad9144_dma_m_src_axi_rvalid),                //   input,    width = 1,                   .rvalid
		.m_src_axi_rresp   (ad9144_dma_m_src_axi_rresp),                 //   input,    width = 2,                   .rresp
		.m_src_axi_rdata   (ad9144_dma_m_src_axi_rdata),                 //   input,  width = 128,                   .rdata
		.m_src_axi_rready  (ad9144_dma_m_src_axi_rready),                //  output,    width = 1,                   .rready
		.m_src_axi_awlen   (ad9144_dma_m_src_axi_awlen),                 //  output,    width = 8,                   .awlen
		.m_src_axi_awsize  (ad9144_dma_m_src_axi_awsize),                //  output,    width = 3,                   .awsize
		.m_src_axi_awburst (ad9144_dma_m_src_axi_awburst),               //  output,    width = 2,                   .awburst
		.m_src_axi_awcache (ad9144_dma_m_src_axi_awcache),               //  output,    width = 4,                   .awcache
		.m_src_axi_awprot  (ad9144_dma_m_src_axi_awprot),                //  output,    width = 3,                   .awprot
		.m_src_axi_wlast   (ad9144_dma_m_src_axi_wlast),                 //  output,    width = 1,                   .wlast
		.m_src_axi_arlen   (ad9144_dma_m_src_axi_arlen),                 //  output,    width = 8,                   .arlen
		.m_src_axi_arsize  (ad9144_dma_m_src_axi_arsize),                //  output,    width = 3,                   .arsize
		.m_src_axi_arburst (ad9144_dma_m_src_axi_arburst),               //  output,    width = 2,                   .arburst
		.m_src_axi_arcache (ad9144_dma_m_src_axi_arcache),               //  output,    width = 4,                   .arcache
		.m_src_axi_arprot  (ad9144_dma_m_src_axi_arprot),                //  output,    width = 3,                   .arprot
		.m_src_axi_rlast   (ad9144_dma_m_src_axi_rlast)                  //   input,    width = 1,                   .rlast
	);

	ad9144_fifo ad9144_fifo (
		.dma_clk       (clock_in_out_clk_clk),                   //   input,    width = 1,       if_dma_clk.clk
		.dma_rst       (rst_controller_reset_out_reset),         //   input,    width = 1,       if_dma_rst.reset
		.dma_valid     (ad9144_dma_if_m_axis_valid_valid),       //   input,    width = 1,     if_dma_valid.valid
		.dma_data      (ad9144_dma_if_m_axis_data_data),         //   input,  width = 128,      if_dma_data.data
		.dma_ready     (ad9144_fifo_if_dma_ready_ready),         //  output,    width = 1,     if_dma_ready.ready
		.dma_xfer_req  (ad9144_dma_if_m_axis_xfer_req_xfer_req), //   input,    width = 1,  if_dma_xfer_req.xfer_req
		.dma_xfer_last (ad9144_dma_if_m_axis_last_last),         //   input,    width = 1, if_dma_xfer_last.last
		.dac_clk       (ad9144_jesd204_link_clk_clk),            //   input,    width = 1,       if_dac_clk.clk
		.dac_rst       (rst_controller_001_reset_out_reset),     //   input,    width = 1,       if_dac_rst.reset
		.dac_valid     (ad9144_upack_if_dac_valid_valid),        //   input,    width = 1,     if_dac_valid.valid
		.dac_data      (ad9144_fifo_if_dac_data_data),           //  output,  width = 128,      if_dac_data.data
		.dac_xfer_out  (),                                       //  output,    width = 1,  if_dac_xfer_out.xfer_req
		.dac_dunf      (ad9144_fifo_if_dac_dunf_unf),            //  output,    width = 1,      if_dac_dunf.unf
		.bypass        (tx_fifo_bypass_bypass)                   //   input,    width = 1,        if_bypass.bypass
	);

	ad9144_jesd204 ad9144_jesd204 (
		.interrupt_irq                 (irq_mapper_receiver2_irq),                                       //  output,    width = 1,         interrupt.irq
		.lane_pll_reconfig_write       (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write),       //   input,    width = 1, lane_pll_reconfig.write
		.lane_pll_reconfig_read        (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read),        //   input,    width = 1,                  .read
		.lane_pll_reconfig_address     (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address),     //   input,   width = 10,                  .address
		.lane_pll_reconfig_writedata   (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.lane_pll_reconfig_readdata    (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.lane_pll_reconfig_waitrequest (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_clk_clk                  (ad9144_jesd204_link_clk_clk),                                    //  output,    width = 1,          link_clk.clk
		.link_data_data                (ad9144_core_if_tx_data_data),                                    //   input,  width = 128,         link_data.data
		.link_data_ready               (ad9144_core_if_tx_data_ready),                                   //  output,    width = 1,                  .ready
		.link_data_valid               (ad9144_core_if_tx_data_valid),                                   //   input,    width = 1,                  .valid
		.link_management_awvalid       (mm_interconnect_0_ad9144_jesd204_link_management_awvalid),       //   input,    width = 1,   link_management.awvalid
		.link_management_awaddr        (mm_interconnect_0_ad9144_jesd204_link_management_awaddr),        //   input,   width = 12,                  .awaddr
		.link_management_awprot        (mm_interconnect_0_ad9144_jesd204_link_management_awprot),        //   input,    width = 3,                  .awprot
		.link_management_awready       (mm_interconnect_0_ad9144_jesd204_link_management_awready),       //  output,    width = 1,                  .awready
		.link_management_wvalid        (mm_interconnect_0_ad9144_jesd204_link_management_wvalid),        //   input,    width = 1,                  .wvalid
		.link_management_wdata         (mm_interconnect_0_ad9144_jesd204_link_management_wdata),         //   input,   width = 32,                  .wdata
		.link_management_wstrb         (mm_interconnect_0_ad9144_jesd204_link_management_wstrb),         //   input,    width = 4,                  .wstrb
		.link_management_wready        (mm_interconnect_0_ad9144_jesd204_link_management_wready),        //  output,    width = 1,                  .wready
		.link_management_bvalid        (mm_interconnect_0_ad9144_jesd204_link_management_bvalid),        //  output,    width = 1,                  .bvalid
		.link_management_bresp         (mm_interconnect_0_ad9144_jesd204_link_management_bresp),         //  output,    width = 2,                  .bresp
		.link_management_bready        (mm_interconnect_0_ad9144_jesd204_link_management_bready),        //   input,    width = 1,                  .bready
		.link_management_arvalid       (mm_interconnect_0_ad9144_jesd204_link_management_arvalid),       //   input,    width = 1,                  .arvalid
		.link_management_araddr        (mm_interconnect_0_ad9144_jesd204_link_management_araddr),        //   input,   width = 12,                  .araddr
		.link_management_arprot        (mm_interconnect_0_ad9144_jesd204_link_management_arprot),        //   input,    width = 3,                  .arprot
		.link_management_arready       (mm_interconnect_0_ad9144_jesd204_link_management_arready),       //  output,    width = 1,                  .arready
		.link_management_rvalid        (mm_interconnect_0_ad9144_jesd204_link_management_rvalid),        //  output,    width = 1,                  .rvalid
		.link_management_rresp         (mm_interconnect_0_ad9144_jesd204_link_management_rresp),         //  output,    width = 2,                  .rresp
		.link_management_rdata         (mm_interconnect_0_ad9144_jesd204_link_management_rdata),         //  output,   width = 32,                  .rdata
		.link_management_rready        (mm_interconnect_0_ad9144_jesd204_link_management_rready),        //   input,    width = 1,                  .rready
		.link_pll_reconfig_write       (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write),       //   input,    width = 1, link_pll_reconfig.write
		.link_pll_reconfig_read        (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read),        //   input,    width = 1,                  .read
		.link_pll_reconfig_address     (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address),     //   input,   width = 10,                  .address
		.link_pll_reconfig_writedata   (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.link_pll_reconfig_readdata    (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.link_pll_reconfig_waitrequest (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_reconfig_awvalid         (mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid),         //   input,    width = 1,     link_reconfig.awvalid
		.link_reconfig_awaddr          (mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr),          //   input,   width = 14,                  .awaddr
		.link_reconfig_awprot          (mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot),          //   input,    width = 3,                  .awprot
		.link_reconfig_awready         (mm_interconnect_0_ad9144_jesd204_link_reconfig_awready),         //  output,    width = 1,                  .awready
		.link_reconfig_wvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid),          //   input,    width = 1,                  .wvalid
		.link_reconfig_wdata           (mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata),           //   input,   width = 32,                  .wdata
		.link_reconfig_wstrb           (mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb),           //   input,    width = 4,                  .wstrb
		.link_reconfig_wready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_wready),          //  output,    width = 1,                  .wready
		.link_reconfig_bvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid),          //  output,    width = 1,                  .bvalid
		.link_reconfig_bresp           (mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp),           //  output,    width = 2,                  .bresp
		.link_reconfig_bready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_bready),          //   input,    width = 1,                  .bready
		.link_reconfig_arvalid         (mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid),         //   input,    width = 1,                  .arvalid
		.link_reconfig_araddr          (mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr),          //   input,   width = 14,                  .araddr
		.link_reconfig_arprot          (mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot),          //   input,    width = 3,                  .arprot
		.link_reconfig_arready         (mm_interconnect_0_ad9144_jesd204_link_reconfig_arready),         //  output,    width = 1,                  .arready
		.link_reconfig_rvalid          (mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid),          //  output,    width = 1,                  .rvalid
		.link_reconfig_rresp           (mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp),           //  output,    width = 2,                  .rresp
		.link_reconfig_rdata           (mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata),           //  output,   width = 32,                  .rdata
		.link_reconfig_rready          (mm_interconnect_0_ad9144_jesd204_link_reconfig_rready),          //   input,    width = 1,                  .rready
		.link_reset_reset              (ad9144_jesd204_link_reset_reset),                                //  output,    width = 1,        link_reset.reset
		.phy_reconfig_0_readdata       (avl_adxcfg_0_rcfg_m0_readdata),                                  //  output,   width = 32,    phy_reconfig_0.readdata
		.phy_reconfig_0_waitrequest    (avl_adxcfg_0_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_0_address        (avl_adxcfg_0_rcfg_m0_address),                                   //   input,   width = 10,                  .address
		.phy_reconfig_0_read           (avl_adxcfg_0_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_0_write          (avl_adxcfg_0_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_0_writedata      (avl_adxcfg_0_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_1_readdata       (avl_adxcfg_1_rcfg_m0_readdata),                                  //  output,   width = 32,    phy_reconfig_1.readdata
		.phy_reconfig_1_waitrequest    (avl_adxcfg_1_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_1_address        (avl_adxcfg_1_rcfg_m0_address),                                   //   input,   width = 10,                  .address
		.phy_reconfig_1_read           (avl_adxcfg_1_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_1_write          (avl_adxcfg_1_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_1_writedata      (avl_adxcfg_1_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_2_readdata       (avl_adxcfg_2_rcfg_m0_readdata),                                  //  output,   width = 32,    phy_reconfig_2.readdata
		.phy_reconfig_2_waitrequest    (avl_adxcfg_2_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_2_address        (avl_adxcfg_2_rcfg_m0_address),                                   //   input,   width = 10,                  .address
		.phy_reconfig_2_read           (avl_adxcfg_2_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_2_write          (avl_adxcfg_2_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_2_writedata      (avl_adxcfg_2_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_3_readdata       (avl_adxcfg_3_rcfg_m0_readdata),                                  //  output,   width = 32,    phy_reconfig_3.readdata
		.phy_reconfig_3_waitrequest    (avl_adxcfg_3_rcfg_m0_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_3_address        (avl_adxcfg_3_rcfg_m0_address),                                   //   input,   width = 10,                  .address
		.phy_reconfig_3_read           (avl_adxcfg_3_rcfg_m0_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_3_write          (avl_adxcfg_3_rcfg_m0_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_3_writedata      (avl_adxcfg_3_rcfg_m0_writedata),                                 //   input,   width = 32,                  .writedata
		.pll_select_pll_select         (tx_pll_select_pll_select),                                       //   input,    width = 1,        pll_select.pll_select
		.ref_clk_clk                   (tx_ref_clk_clk),                                                 //   input,    width = 1,           ref_clk.clk
		.serial_data_tx_serial_data    (tx_serial_data_tx_serial_data),                                  //  output,    width = 4,       serial_data.tx_serial_data
		.sync_export                   (tx_sync_export),                                                 //   input,    width = 1,              sync.export
		.sys_clk_clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,           sys_clk.clk
		.sys_resetn_reset_n            (~rst_controller_reset_out_reset),                                //   input,    width = 1,        sys_resetn.reset_n
		.sysref_export                 (tx_sysref_export)                                                //   input,    width = 1,            sysref.export
	);

	ad9144_upack ad9144_upack (
		.dac_clk         (ad9144_jesd204_link_clk_clk),     //   input,    width = 1,   if_dac_clk.clk
		.dac_valid       (ad9144_upack_if_dac_valid_valid), //  output,    width = 1, if_dac_valid.valid
		.dac_sync        (),                                //  output,    width = 1,  if_dac_sync.sync
		.dac_data        (ad9144_fifo_if_dac_data_data),    //   input,  width = 128,  if_dac_data.data
		.dac_enable_0    (ad9144_core_dac_ch_0_enable),     //   input,    width = 1,     dac_ch_0.enable
		.dac_valid_0     (ad9144_core_dac_ch_0_valid),      //   input,    width = 1,             .valid
		.dac_valid_out_0 (),                                //  output,    width = 1,             .data_valid
		.dac_data_0      (ad9144_upack_dac_ch_0_data),      //  output,   width = 64,             .data
		.dac_enable_1    (ad9144_core_dac_ch_1_enable),     //   input,    width = 1,     dac_ch_1.enable
		.dac_valid_1     (ad9144_core_dac_ch_1_valid),      //   input,    width = 1,             .valid
		.dac_valid_out_1 (),                                //  output,    width = 1,             .data_valid
		.dac_data_1      (ad9144_upack_dac_ch_1_data)       //  output,   width = 64,             .data
	);

	ad9680_core ad9680_core (
		.s_axi_aclk    (clock_in_out_clk_clk),                        //   input,    width = 1, s_axi_clock.clk
		.s_axi_aresetn (~rst_controller_reset_out_reset),             //   input,    width = 1, s_axi_reset.reset_n
		.s_axi_awvalid (mm_interconnect_0_ad9680_core_s_axi_awvalid), //   input,    width = 1,       s_axi.awvalid
		.s_axi_awaddr  (mm_interconnect_0_ad9680_core_s_axi_awaddr),  //   input,   width = 16,            .awaddr
		.s_axi_awprot  (mm_interconnect_0_ad9680_core_s_axi_awprot),  //   input,    width = 3,            .awprot
		.s_axi_awready (mm_interconnect_0_ad9680_core_s_axi_awready), //  output,    width = 1,            .awready
		.s_axi_wvalid  (mm_interconnect_0_ad9680_core_s_axi_wvalid),  //   input,    width = 1,            .wvalid
		.s_axi_wdata   (mm_interconnect_0_ad9680_core_s_axi_wdata),   //   input,   width = 32,            .wdata
		.s_axi_wstrb   (mm_interconnect_0_ad9680_core_s_axi_wstrb),   //   input,    width = 4,            .wstrb
		.s_axi_wready  (mm_interconnect_0_ad9680_core_s_axi_wready),  //  output,    width = 1,            .wready
		.s_axi_bvalid  (mm_interconnect_0_ad9680_core_s_axi_bvalid),  //  output,    width = 1,            .bvalid
		.s_axi_bresp   (mm_interconnect_0_ad9680_core_s_axi_bresp),   //  output,    width = 2,            .bresp
		.s_axi_bready  (mm_interconnect_0_ad9680_core_s_axi_bready),  //   input,    width = 1,            .bready
		.s_axi_arvalid (mm_interconnect_0_ad9680_core_s_axi_arvalid), //   input,    width = 1,            .arvalid
		.s_axi_araddr  (mm_interconnect_0_ad9680_core_s_axi_araddr),  //   input,   width = 16,            .araddr
		.s_axi_arprot  (mm_interconnect_0_ad9680_core_s_axi_arprot),  //   input,    width = 3,            .arprot
		.s_axi_arready (mm_interconnect_0_ad9680_core_s_axi_arready), //  output,    width = 1,            .arready
		.s_axi_rvalid  (mm_interconnect_0_ad9680_core_s_axi_rvalid),  //  output,    width = 1,            .rvalid
		.s_axi_rresp   (mm_interconnect_0_ad9680_core_s_axi_rresp),   //  output,    width = 2,            .rresp
		.s_axi_rdata   (mm_interconnect_0_ad9680_core_s_axi_rdata),   //  output,   width = 32,            .rdata
		.s_axi_rready  (mm_interconnect_0_ad9680_core_s_axi_rready),  //   input,    width = 1,            .rready
		.rx_clk        (ad9680_jesd204_link_clk_clk),                 //   input,    width = 1,   if_rx_clk.clk
		.rx_sof        (ad9680_jesd204_link_sof_export),              //   input,    width = 4,   if_rx_sof.export
		.rx_data       (avalon_st_adapter_out_0_data),                //   input,  width = 128,  if_rx_data.data
		.rx_valid      (avalon_st_adapter_out_0_valid),               //   input,    width = 1,            .valid
		.rx_ready      (avalon_st_adapter_out_0_ready),               //  output,    width = 1,            .ready
		.adc_clk       (),                                            //  output,    width = 1,  if_adc_clk.clk
		.adc_enable_0  (ad9680_core_adc_ch_0_enable),                 //  output,    width = 1,    adc_ch_0.enable
		.adc_valid_0   (ad9680_core_adc_ch_0_valid),                  //  output,    width = 1,            .valid
		.adc_data_0    (ad9680_core_adc_ch_0_data),                   //  output,   width = 64,            .data
		.adc_enable_1  (ad9680_core_adc_ch_1_enable),                 //  output,    width = 1,    adc_ch_1.enable
		.adc_valid_1   (ad9680_core_adc_ch_1_valid),                  //  output,    width = 1,            .valid
		.adc_data_1    (ad9680_core_adc_ch_1_data),                   //  output,   width = 64,            .data
		.adc_dovf      (ad9680_fifo_if_adc_wovf_ovf)                  //   input,    width = 1, if_adc_dovf.ovf
	);

	ad9680_cpack ad9680_cpack (
		.adc_clk      (ad9680_jesd204_link_clk_clk),        //   input,    width = 1,   if_adc_clk.clk
		.adc_rst      (rst_controller_002_reset_out_reset), //   input,    width = 1,   if_adc_rst.reset
		.adc_valid    (ad9680_cpack_if_adc_valid_valid),    //  output,    width = 1, if_adc_valid.valid
		.adc_sync     (),                                   //  output,    width = 1,  if_adc_sync.sync
		.adc_data     (ad9680_cpack_if_adc_data_data),      //  output,  width = 128,  if_adc_data.data
		.adc_enable_0 (ad9680_core_adc_ch_0_enable),        //   input,    width = 1,     adc_ch_0.enable
		.adc_valid_0  (ad9680_core_adc_ch_0_valid),         //   input,    width = 1,             .valid
		.adc_data_0   (ad9680_core_adc_ch_0_data),          //   input,   width = 64,             .data
		.adc_enable_1 (ad9680_core_adc_ch_1_enable),        //   input,    width = 1,     adc_ch_1.enable
		.adc_valid_1  (ad9680_core_adc_ch_1_valid),         //   input,    width = 1,             .valid
		.adc_data_1   (ad9680_core_adc_ch_1_data)           //   input,   width = 64,             .data
	);

	ad9680_dma ad9680_dma (
		.s_axi_aclk         (clock_in_out_clk_clk),                       //   input,    width = 1,        s_axi_clock.clk
		.s_axi_aresetn      (~rst_controller_reset_out_reset),            //   input,    width = 1,        s_axi_reset.reset_n
		.s_axi_awvalid      (mm_interconnect_0_ad9680_dma_s_axi_awvalid), //   input,    width = 1,              s_axi.awvalid
		.s_axi_awaddr       (mm_interconnect_0_ad9680_dma_s_axi_awaddr),  //   input,   width = 12,                   .awaddr
		.s_axi_awprot       (mm_interconnect_0_ad9680_dma_s_axi_awprot),  //   input,    width = 3,                   .awprot
		.s_axi_awready      (mm_interconnect_0_ad9680_dma_s_axi_awready), //  output,    width = 1,                   .awready
		.s_axi_wvalid       (mm_interconnect_0_ad9680_dma_s_axi_wvalid),  //   input,    width = 1,                   .wvalid
		.s_axi_wdata        (mm_interconnect_0_ad9680_dma_s_axi_wdata),   //   input,   width = 32,                   .wdata
		.s_axi_wstrb        (mm_interconnect_0_ad9680_dma_s_axi_wstrb),   //   input,    width = 4,                   .wstrb
		.s_axi_wready       (mm_interconnect_0_ad9680_dma_s_axi_wready),  //  output,    width = 1,                   .wready
		.s_axi_bvalid       (mm_interconnect_0_ad9680_dma_s_axi_bvalid),  //  output,    width = 1,                   .bvalid
		.s_axi_bresp        (mm_interconnect_0_ad9680_dma_s_axi_bresp),   //  output,    width = 2,                   .bresp
		.s_axi_bready       (mm_interconnect_0_ad9680_dma_s_axi_bready),  //   input,    width = 1,                   .bready
		.s_axi_arvalid      (mm_interconnect_0_ad9680_dma_s_axi_arvalid), //   input,    width = 1,                   .arvalid
		.s_axi_araddr       (mm_interconnect_0_ad9680_dma_s_axi_araddr),  //   input,   width = 12,                   .araddr
		.s_axi_arprot       (mm_interconnect_0_ad9680_dma_s_axi_arprot),  //   input,    width = 3,                   .arprot
		.s_axi_arready      (mm_interconnect_0_ad9680_dma_s_axi_arready), //  output,    width = 1,                   .arready
		.s_axi_rvalid       (mm_interconnect_0_ad9680_dma_s_axi_rvalid),  //  output,    width = 1,                   .rvalid
		.s_axi_rresp        (mm_interconnect_0_ad9680_dma_s_axi_rresp),   //  output,    width = 2,                   .rresp
		.s_axi_rdata        (mm_interconnect_0_ad9680_dma_s_axi_rdata),   //  output,   width = 32,                   .rdata
		.s_axi_rready       (mm_interconnect_0_ad9680_dma_s_axi_rready),  //   input,    width = 1,                   .rready
		.irq                (irq_mapper_receiver7_irq),                   //  output,    width = 1,   interrupt_sender.irq
		.m_dest_axi_aclk    (clock_in_out_clk_clk),                       //   input,    width = 1,   m_dest_axi_clock.clk
		.m_dest_axi_aresetn (~rst_controller_reset_out_reset),            //   input,    width = 1,   m_dest_axi_reset.reset_n
		.s_axis_aclk        (ad9680_jesd204_link_clk_clk),                //   input,    width = 1,     if_s_axis_aclk.clk
		.s_axis_valid       (ad9680_fifo_if_dma_wr_valid),                //   input,    width = 1,    if_s_axis_valid.valid
		.s_axis_data        (ad9680_fifo_if_dma_wdata_data),              //   input,  width = 128,     if_s_axis_data.data
		.s_axis_ready       (ad9680_dma_if_s_axis_ready_ready),           //  output,    width = 1,    if_s_axis_ready.ready
		.s_axis_xfer_req    (ad9680_dma_if_s_axis_xfer_req_xfer_req),     //  output,    width = 1, if_s_axis_xfer_req.xfer_req
		.m_dest_axi_awvalid (ad9680_dma_m_dest_axi_awvalid),              //  output,    width = 1,         m_dest_axi.awvalid
		.m_dest_axi_awaddr  (ad9680_dma_m_dest_axi_awaddr),               //  output,   width = 32,                   .awaddr
		.m_dest_axi_awready (ad9680_dma_m_dest_axi_awready),              //   input,    width = 1,                   .awready
		.m_dest_axi_wvalid  (ad9680_dma_m_dest_axi_wvalid),               //  output,    width = 1,                   .wvalid
		.m_dest_axi_wdata   (ad9680_dma_m_dest_axi_wdata),                //  output,  width = 128,                   .wdata
		.m_dest_axi_wstrb   (ad9680_dma_m_dest_axi_wstrb),                //  output,   width = 16,                   .wstrb
		.m_dest_axi_wready  (ad9680_dma_m_dest_axi_wready),               //   input,    width = 1,                   .wready
		.m_dest_axi_bvalid  (ad9680_dma_m_dest_axi_bvalid),               //   input,    width = 1,                   .bvalid
		.m_dest_axi_bresp   (ad9680_dma_m_dest_axi_bresp),                //   input,    width = 2,                   .bresp
		.m_dest_axi_bready  (ad9680_dma_m_dest_axi_bready),               //  output,    width = 1,                   .bready
		.m_dest_axi_arvalid (ad9680_dma_m_dest_axi_arvalid),              //  output,    width = 1,                   .arvalid
		.m_dest_axi_araddr  (ad9680_dma_m_dest_axi_araddr),               //  output,   width = 32,                   .araddr
		.m_dest_axi_arready (ad9680_dma_m_dest_axi_arready),              //   input,    width = 1,                   .arready
		.m_dest_axi_rvalid  (ad9680_dma_m_dest_axi_rvalid),               //   input,    width = 1,                   .rvalid
		.m_dest_axi_rresp   (ad9680_dma_m_dest_axi_rresp),                //   input,    width = 2,                   .rresp
		.m_dest_axi_rdata   (ad9680_dma_m_dest_axi_rdata),                //   input,  width = 128,                   .rdata
		.m_dest_axi_rready  (ad9680_dma_m_dest_axi_rready),               //  output,    width = 1,                   .rready
		.m_dest_axi_awlen   (ad9680_dma_m_dest_axi_awlen),                //  output,    width = 8,                   .awlen
		.m_dest_axi_awsize  (ad9680_dma_m_dest_axi_awsize),               //  output,    width = 3,                   .awsize
		.m_dest_axi_awburst (ad9680_dma_m_dest_axi_awburst),              //  output,    width = 2,                   .awburst
		.m_dest_axi_awcache (ad9680_dma_m_dest_axi_awcache),              //  output,    width = 4,                   .awcache
		.m_dest_axi_awprot  (ad9680_dma_m_dest_axi_awprot),               //  output,    width = 3,                   .awprot
		.m_dest_axi_wlast   (ad9680_dma_m_dest_axi_wlast),                //  output,    width = 1,                   .wlast
		.m_dest_axi_arlen   (ad9680_dma_m_dest_axi_arlen),                //  output,    width = 8,                   .arlen
		.m_dest_axi_arsize  (ad9680_dma_m_dest_axi_arsize),               //  output,    width = 3,                   .arsize
		.m_dest_axi_arburst (ad9680_dma_m_dest_axi_arburst),              //  output,    width = 2,                   .arburst
		.m_dest_axi_arcache (ad9680_dma_m_dest_axi_arcache),              //  output,    width = 4,                   .arcache
		.m_dest_axi_arprot  (ad9680_dma_m_dest_axi_arprot)                //  output,    width = 3,                   .arprot
	);

	ad9680_fifo ad9680_fifo (
		.adc_clk         (ad9680_jesd204_link_clk_clk),            //   input,    width = 1,         if_adc_clk.clk
		.adc_rst         (rst_controller_002_reset_out_reset),     //   input,    width = 1,         if_adc_rst.reset
		.adc_wr          (ad9680_cpack_if_adc_valid_valid),        //   input,    width = 1,          if_adc_wr.valid
		.adc_wdata       (ad9680_cpack_if_adc_data_data),          //   input,  width = 128,       if_adc_wdata.data
		.adc_wovf        (ad9680_fifo_if_adc_wovf_ovf),            //  output,    width = 1,        if_adc_wovf.ovf
		.dma_clk         (clock_in_out_clk_clk),                   //   input,    width = 1,         if_dma_clk.clk
		.dma_wr          (ad9680_fifo_if_dma_wr_valid),            //  output,    width = 1,          if_dma_wr.valid
		.dma_wdata       (ad9680_fifo_if_dma_wdata_data),          //  output,  width = 128,       if_dma_wdata.data
		.dma_wready      (ad9680_dma_if_s_axis_ready_ready),       //   input,    width = 1,      if_dma_wready.ready
		.dma_xfer_req    (ad9680_dma_if_s_axis_xfer_req_xfer_req), //   input,    width = 1,    if_dma_xfer_req.xfer_req
		.dma_xfer_status ()                                        //  output,    width = 4, if_dma_xfer_status.xfer_status
	);

	ad9680_jesd204 ad9680_jesd204 (
		.interrupt_irq                 (irq_mapper_receiver3_irq),                                       //  output,    width = 1,         interrupt.irq
		.link_clk_clk                  (ad9680_jesd204_link_clk_clk),                                    //  output,    width = 1,          link_clk.clk
		.link_data_data                (ad9680_jesd204_link_data_data),                                  //  output,  width = 128,         link_data.data
		.link_data_valid               (ad9680_jesd204_link_data_valid),                                 //  output,    width = 1,                  .valid
		.link_management_awvalid       (mm_interconnect_0_ad9680_jesd204_link_management_awvalid),       //   input,    width = 1,   link_management.awvalid
		.link_management_awaddr        (mm_interconnect_0_ad9680_jesd204_link_management_awaddr),        //   input,   width = 12,                  .awaddr
		.link_management_awprot        (mm_interconnect_0_ad9680_jesd204_link_management_awprot),        //   input,    width = 3,                  .awprot
		.link_management_awready       (mm_interconnect_0_ad9680_jesd204_link_management_awready),       //  output,    width = 1,                  .awready
		.link_management_wvalid        (mm_interconnect_0_ad9680_jesd204_link_management_wvalid),        //   input,    width = 1,                  .wvalid
		.link_management_wdata         (mm_interconnect_0_ad9680_jesd204_link_management_wdata),         //   input,   width = 32,                  .wdata
		.link_management_wstrb         (mm_interconnect_0_ad9680_jesd204_link_management_wstrb),         //   input,    width = 4,                  .wstrb
		.link_management_wready        (mm_interconnect_0_ad9680_jesd204_link_management_wready),        //  output,    width = 1,                  .wready
		.link_management_bvalid        (mm_interconnect_0_ad9680_jesd204_link_management_bvalid),        //  output,    width = 1,                  .bvalid
		.link_management_bresp         (mm_interconnect_0_ad9680_jesd204_link_management_bresp),         //  output,    width = 2,                  .bresp
		.link_management_bready        (mm_interconnect_0_ad9680_jesd204_link_management_bready),        //   input,    width = 1,                  .bready
		.link_management_arvalid       (mm_interconnect_0_ad9680_jesd204_link_management_arvalid),       //   input,    width = 1,                  .arvalid
		.link_management_araddr        (mm_interconnect_0_ad9680_jesd204_link_management_araddr),        //   input,   width = 12,                  .araddr
		.link_management_arprot        (mm_interconnect_0_ad9680_jesd204_link_management_arprot),        //   input,    width = 3,                  .arprot
		.link_management_arready       (mm_interconnect_0_ad9680_jesd204_link_management_arready),       //  output,    width = 1,                  .arready
		.link_management_rvalid        (mm_interconnect_0_ad9680_jesd204_link_management_rvalid),        //  output,    width = 1,                  .rvalid
		.link_management_rresp         (mm_interconnect_0_ad9680_jesd204_link_management_rresp),         //  output,    width = 2,                  .rresp
		.link_management_rdata         (mm_interconnect_0_ad9680_jesd204_link_management_rdata),         //  output,   width = 32,                  .rdata
		.link_management_rready        (mm_interconnect_0_ad9680_jesd204_link_management_rready),        //   input,    width = 1,                  .rready
		.link_pll_reconfig_write       (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write),       //   input,    width = 1, link_pll_reconfig.write
		.link_pll_reconfig_read        (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read),        //   input,    width = 1,                  .read
		.link_pll_reconfig_address     (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address),     //   input,   width = 10,                  .address
		.link_pll_reconfig_writedata   (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata),   //   input,   width = 32,                  .writedata
		.link_pll_reconfig_readdata    (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata),    //  output,   width = 32,                  .readdata
		.link_pll_reconfig_waitrequest (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest), //  output,    width = 1,                  .waitrequest
		.link_reconfig_awvalid         (mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid),         //   input,    width = 1,     link_reconfig.awvalid
		.link_reconfig_awaddr          (mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr),          //   input,   width = 14,                  .awaddr
		.link_reconfig_awprot          (mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot),          //   input,    width = 3,                  .awprot
		.link_reconfig_awready         (mm_interconnect_0_ad9680_jesd204_link_reconfig_awready),         //  output,    width = 1,                  .awready
		.link_reconfig_wvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid),          //   input,    width = 1,                  .wvalid
		.link_reconfig_wdata           (mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata),           //   input,   width = 32,                  .wdata
		.link_reconfig_wstrb           (mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb),           //   input,    width = 4,                  .wstrb
		.link_reconfig_wready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_wready),          //  output,    width = 1,                  .wready
		.link_reconfig_bvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid),          //  output,    width = 1,                  .bvalid
		.link_reconfig_bresp           (mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp),           //  output,    width = 2,                  .bresp
		.link_reconfig_bready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_bready),          //   input,    width = 1,                  .bready
		.link_reconfig_arvalid         (mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid),         //   input,    width = 1,                  .arvalid
		.link_reconfig_araddr          (mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr),          //   input,   width = 14,                  .araddr
		.link_reconfig_arprot          (mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot),          //   input,    width = 3,                  .arprot
		.link_reconfig_arready         (mm_interconnect_0_ad9680_jesd204_link_reconfig_arready),         //  output,    width = 1,                  .arready
		.link_reconfig_rvalid          (mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid),          //  output,    width = 1,                  .rvalid
		.link_reconfig_rresp           (mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp),           //  output,    width = 2,                  .rresp
		.link_reconfig_rdata           (mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata),           //  output,   width = 32,                  .rdata
		.link_reconfig_rready          (mm_interconnect_0_ad9680_jesd204_link_reconfig_rready),          //   input,    width = 1,                  .rready
		.link_reset_reset              (),                                                               //  output,    width = 1,        link_reset.reset
		.link_sof_export               (ad9680_jesd204_link_sof_export),                                 //  output,    width = 4,          link_sof.export
		.phy_reconfig_0_readdata       (avl_adxcfg_0_rcfg_m1_readdata),                                  //  output,   width = 32,    phy_reconfig_0.readdata
		.phy_reconfig_0_waitrequest    (avl_adxcfg_0_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_0_address        (avl_adxcfg_0_rcfg_m1_address),                                   //   input,   width = 10,                  .address
		.phy_reconfig_0_read           (avl_adxcfg_0_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_0_write          (avl_adxcfg_0_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_0_writedata      (avl_adxcfg_0_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_1_address        (avl_adxcfg_1_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_1.address
		.phy_reconfig_1_read           (avl_adxcfg_1_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_1_readdata       (avl_adxcfg_1_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_1_waitrequest    (avl_adxcfg_1_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_1_write          (avl_adxcfg_1_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_1_writedata      (avl_adxcfg_1_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_2_address        (avl_adxcfg_2_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_2.address
		.phy_reconfig_2_read           (avl_adxcfg_2_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_2_readdata       (avl_adxcfg_2_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_2_waitrequest    (avl_adxcfg_2_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_2_write          (avl_adxcfg_2_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_2_writedata      (avl_adxcfg_2_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.phy_reconfig_3_address        (avl_adxcfg_3_rcfg_m1_address),                                   //   input,   width = 10,    phy_reconfig_3.address
		.phy_reconfig_3_read           (avl_adxcfg_3_rcfg_m1_read),                                      //   input,    width = 1,                  .read
		.phy_reconfig_3_readdata       (avl_adxcfg_3_rcfg_m1_readdata),                                  //  output,   width = 32,                  .readdata
		.phy_reconfig_3_waitrequest    (avl_adxcfg_3_rcfg_m1_waitrequest),                               //  output,    width = 1,                  .waitrequest
		.phy_reconfig_3_write          (avl_adxcfg_3_rcfg_m1_write),                                     //   input,    width = 1,                  .write
		.phy_reconfig_3_writedata      (avl_adxcfg_3_rcfg_m1_writedata),                                 //   input,   width = 32,                  .writedata
		.ref_clk_clk                   (rx_ref_clk_clk),                                                 //   input,    width = 1,           ref_clk.clk
		.serial_data_rx_serial_data    (rx_serial_data_rx_serial_data),                                  //   input,    width = 4,       serial_data.rx_serial_data
		.sync_export                   (rx_sync_export),                                                 //  output,    width = 1,              sync.export
		.sys_clk_clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,           sys_clk.clk
		.sys_resetn_reset_n            (~rst_controller_reset_out_reset),                                //   input,    width = 1,        sys_resetn.reset_n
		.sysref_export                 (rx_sysref_export)                                                //   input,    width = 1,            sysref.export
	);

	avl_adxcfg_0 avl_adxcfg_0 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_003_reset_out_reset),                //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_0_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_0_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_0_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_0_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_0_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_0_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_0_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_0_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_0_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_0_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_0_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_0_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	avl_adxcfg_1 avl_adxcfg_1 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_003_reset_out_reset),                //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_1_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_1_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_1_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_1_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_1_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_1_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_1_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_1_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_1_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_1_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_1_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_1_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	avl_adxcfg_2 avl_adxcfg_2 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_003_reset_out_reset),                //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_2_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_2_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_2_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_2_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_2_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_2_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_2_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_2_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_2_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_2_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_2_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_2_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	avl_adxcfg_3 avl_adxcfg_3 (
		.rcfg_clk               (clock_in_out_clk_clk),                               //   input,   width = 1,     rcfg_clk.clk
		.rcfg_reset_n           (~rst_controller_003_reset_out_reset),                //   input,   width = 1, rcfg_reset_n.reset_n
		.rcfg_in_read_0         (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read),        //   input,   width = 1,      rcfg_s0.read
		.rcfg_in_write_0        (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write),       //   input,   width = 1,             .write
		.rcfg_in_address_0      (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_0    (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_0     (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_0  (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_0        (avl_adxcfg_3_rcfg_m0_read),                          //  output,   width = 1,      rcfg_m0.read
		.rcfg_out_write_0       (avl_adxcfg_3_rcfg_m0_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_0     (avl_adxcfg_3_rcfg_m0_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_0   (avl_adxcfg_3_rcfg_m0_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_0    (avl_adxcfg_3_rcfg_m0_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_0 (avl_adxcfg_3_rcfg_m0_waitrequest),                   //   input,   width = 1,             .waitrequest
		.rcfg_in_read_1         (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read),        //   input,   width = 1,      rcfg_s1.read
		.rcfg_in_write_1        (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write),       //   input,   width = 1,             .write
		.rcfg_in_address_1      (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address),     //   input,  width = 10,             .address
		.rcfg_in_writedata_1    (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata),   //   input,  width = 32,             .writedata
		.rcfg_in_readdata_1     (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata),    //  output,  width = 32,             .readdata
		.rcfg_in_waitrequest_1  (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest), //  output,   width = 1,             .waitrequest
		.rcfg_out_read_1        (avl_adxcfg_3_rcfg_m1_read),                          //  output,   width = 1,      rcfg_m1.read
		.rcfg_out_write_1       (avl_adxcfg_3_rcfg_m1_write),                         //  output,   width = 1,             .write
		.rcfg_out_address_1     (avl_adxcfg_3_rcfg_m1_address),                       //  output,  width = 10,             .address
		.rcfg_out_writedata_1   (avl_adxcfg_3_rcfg_m1_writedata),                     //  output,  width = 32,             .writedata
		.rcfg_out_readdata_1    (avl_adxcfg_3_rcfg_m1_readdata),                      //   input,  width = 32,             .readdata
		.rcfg_out_waitrequest_1 (avl_adxcfg_3_rcfg_m1_waitrequest)                    //   input,   width = 1,             .waitrequest
	);

	mcu_subsystem_mm_clock_crossing_bridge_0 bridge_0 (
		.m0_clk           (ddr3_emif_usr_clk_clk),                       //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_004_reset_out_reset),          //   input,    width = 1, m0_reset.reset
		.s0_clk           (clock_in_out_clk_clk),                        //   input,    width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_reset_out_reset),              //   input,    width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_0_s0_waitrequest),   //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_0_s0_readdata),      //  output,  width = 256,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_0_s0_readdatavalid), //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_0_s0_burstcount),    //   input,    width = 5,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_0_s0_writedata),     //   input,  width = 256,         .writedata
		.s0_address       (mm_interconnect_0_bridge_0_s0_address),       //   input,   width = 31,         .address
		.s0_write         (mm_interconnect_0_bridge_0_s0_write),         //   input,    width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_0_s0_read),          //   input,    width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_0_s0_byteenable),    //   input,   width = 32,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_0_s0_debugaccess),   //   input,    width = 1,         .debugaccess
		.m0_waitrequest   (bridge_0_m0_waitrequest),                     //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (bridge_0_m0_readdata),                        //   input,  width = 256,         .readdata
		.m0_readdatavalid (bridge_0_m0_readdatavalid),                   //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (bridge_0_m0_burstcount),                      //  output,    width = 5,         .burstcount
		.m0_writedata     (bridge_0_m0_writedata),                       //  output,  width = 256,         .writedata
		.m0_address       (bridge_0_m0_address),                         //  output,   width = 31,         .address
		.m0_write         (bridge_0_m0_write),                           //  output,    width = 1,         .write
		.m0_read          (bridge_0_m0_read),                            //  output,    width = 1,         .read
		.m0_byteenable    (bridge_0_m0_byteenable),                      //  output,   width = 32,         .byteenable
		.m0_debugaccess   (bridge_0_m0_debugaccess)                      //  output,    width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_1 bridge_1 (
		.m0_clk           (ddr3_emif_usr_clk_clk),                       //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_004_reset_out_reset),          //   input,   width = 1, m0_reset.reset
		.s0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_1_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_1_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_1_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_1_s0_burstcount),    //   input,   width = 3,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_1_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_1_s0_address),       //   input,  width = 12,         .address
		.s0_write         (mm_interconnect_0_bridge_1_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_1_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_1_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_1_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_1_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_1_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_1_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_1_m0_burstcount),                      //  output,   width = 3,         .burstcount
		.m0_writedata     (bridge_1_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_1_m0_address),                         //  output,  width = 12,         .address
		.m0_write         (bridge_1_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_1_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_1_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_1_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_2 bridge_2 (
		.m0_clk           (clock_in_out_clk_clk),                        //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),              //   input,   width = 1, m0_reset.reset
		.s0_clk           (iopll_0_outclk0_clk),                         //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_005_reset_out_reset),          //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_2_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_2_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_2_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_2_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_2_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_2_s0_address),       //   input,   width = 6,         .address
		.s0_write         (mm_interconnect_0_bridge_2_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_2_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_2_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_2_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_2_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_2_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_2_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_2_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (bridge_2_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_2_m0_address),                         //  output,   width = 6,         .address
		.m0_write         (bridge_2_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_2_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_2_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_2_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_mm_clock_crossing_bridge_3 bridge_3 (
		.m0_clk           (iopll_0_outclk0_clk),                         //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_005_reset_out_reset),          //   input,   width = 1, m0_reset.reset
		.s0_clk           (ddr3_emif_usr_clk_clk),                       //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_006_reset_out_reset),          //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_bridge_3_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_bridge_3_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_0_bridge_3_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_bridge_3_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_0_bridge_3_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_0_bridge_3_s0_address),       //   input,  width = 27,         .address
		.s0_write         (mm_interconnect_0_bridge_3_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_0_bridge_3_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_bridge_3_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_bridge_3_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (bridge_3_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (bridge_3_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (bridge_3_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (bridge_3_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (bridge_3_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (bridge_3_m0_address),                         //  output,  width = 27,         .address
		.m0_write         (bridge_3_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (bridge_3_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (bridge_3_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (bridge_3_m0_debugaccess)                      //  output,   width = 1,         .debugaccess
	);

	mcu_subsystem_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ddr3 ddr3 (
		.global_reset_n                 (~rst_controller_007_reset_out_reset),                        //   input,    width = 1,   global_reset_n.reset_n
		.pll_ref_clk                    (refclk_emif_out_clk_clk),                                    //   input,    width = 1,      pll_ref_clk.clk
		.oct_rzqin                      (oct_oct_rzqin),                                              //   input,    width = 1,              oct.oct_rzqin
		.mem_ck                         (mem_mem_ck),                                                 //  output,    width = 1,              mem.mem_ck
		.mem_ck_n                       (mem_mem_ck_n),                                               //  output,    width = 1,                 .mem_ck_n
		.mem_a                          (mem_mem_a),                                                  //  output,   width = 16,                 .mem_a
		.mem_ba                         (mem_mem_ba),                                                 //  output,    width = 3,                 .mem_ba
		.mem_cke                        (mem_mem_cke),                                                //  output,    width = 1,                 .mem_cke
		.mem_cs_n                       (mem_mem_cs_n),                                               //  output,    width = 1,                 .mem_cs_n
		.mem_odt                        (mem_mem_odt),                                                //  output,    width = 1,                 .mem_odt
		.mem_reset_n                    (mem_mem_reset_n),                                            //  output,    width = 1,                 .mem_reset_n
		.mem_we_n                       (mem_mem_we_n),                                               //  output,    width = 1,                 .mem_we_n
		.mem_ras_n                      (mem_mem_ras_n),                                              //  output,    width = 1,                 .mem_ras_n
		.mem_cas_n                      (mem_mem_cas_n),                                              //  output,    width = 1,                 .mem_cas_n
		.mem_dqs                        (mem_mem_dqs),                                                //   inout,    width = 4,                 .mem_dqs
		.mem_dqs_n                      (mem_mem_dqs_n),                                              //   inout,    width = 4,                 .mem_dqs_n
		.mem_dq                         (mem_mem_dq),                                                 //   inout,   width = 32,                 .mem_dq
		.mem_dm                         (mem_mem_dm),                                                 //  output,    width = 4,                 .mem_dm
		.local_cal_success              (status_local_cal_success),                                   //  output,    width = 1,           status.local_cal_success
		.local_cal_fail                 (status_local_cal_fail),                                      //  output,    width = 1,                 .local_cal_fail
		.emif_usr_reset_n               (ddr3_emif_usr_reset_n_reset),                                //  output,    width = 1, emif_usr_reset_n.reset_n
		.emif_usr_clk                   (ddr3_emif_usr_clk_clk),                                      //  output,    width = 1,     emif_usr_clk.clk
		.amm_ready_0                    (mm_interconnect_3_ddr3_ctrl_amm_0_waitrequest),              //  output,    width = 1,       ctrl_amm_0.waitrequest_n
		.amm_read_0                     (mm_interconnect_3_ddr3_ctrl_amm_0_read),                     //   input,    width = 1,                 .read
		.amm_write_0                    (mm_interconnect_3_ddr3_ctrl_amm_0_write),                    //   input,    width = 1,                 .write
		.amm_address_0                  (mm_interconnect_3_ddr3_ctrl_amm_0_address),                  //   input,   width = 26,                 .address
		.amm_readdata_0                 (mm_interconnect_3_ddr3_ctrl_amm_0_readdata),                 //  output,  width = 256,                 .readdata
		.amm_writedata_0                (mm_interconnect_3_ddr3_ctrl_amm_0_writedata),                //   input,  width = 256,                 .writedata
		.amm_burstcount_0               (mm_interconnect_3_ddr3_ctrl_amm_0_burstcount),               //   input,    width = 7,                 .burstcount
		.amm_byteenable_0               (mm_interconnect_3_ddr3_ctrl_amm_0_byteenable),               //   input,   width = 32,                 .byteenable
		.amm_readdatavalid_0            (mm_interconnect_3_ddr3_ctrl_amm_0_readdatavalid),            //  output,    width = 1,                 .readdatavalid
		.mmr_slave_waitrequest_0        (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_waitrequest),        //  output,    width = 1, ctrl_mmr_slave_0.waitrequest
		.mmr_slave_read_0               (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_read),               //   input,    width = 1,                 .read
		.mmr_slave_write_0              (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_write),              //   input,    width = 1,                 .write
		.mmr_slave_address_0            (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_address),            //   input,   width = 10,                 .address
		.mmr_slave_readdata_0           (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdata),           //  output,   width = 32,                 .readdata
		.mmr_slave_writedata_0          (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_writedata),          //   input,   width = 32,                 .writedata
		.mmr_slave_burstcount_0         (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_burstcount),         //   input,    width = 2,                 .burstcount
		.mmr_slave_beginbursttransfer_0 (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_beginbursttransfer), //   input,    width = 1,                 .beginbursttransfer
		.mmr_slave_readdatavalid_0      (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdatavalid)       //  output,    width = 1,                 .readdatavalid
	);

	mcu_subsystem_nios_custom_instr_floating_point_2_0 fpu (
		.s1_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_dataa),      //   input,  width = 32, s1.dataa
		.s1_datab     (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_datab),      //   input,  width = 32,   .datab
		.s1_n         (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_n),          //   input,   width = 4,   .n
		.s1_result    (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_result),     //  output,  width = 32,   .result
		.s2_clk       (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk),       //   input,   width = 1, s2.clk
		.s2_clk_en    (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk_en),    //   input,   width = 1,   .clk_en
		.s2_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_dataa),     //   input,  width = 32,   .dataa
		.s2_datab     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_datab),     //   input,  width = 32,   .datab
		.s2_n         (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_n),         //   input,   width = 3,   .n
		.s2_reset     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset),     //   input,   width = 1,   .reset
		.s2_reset_req (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset_req), //   input,   width = 1,   .reset_req
		.s2_start     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_start),     //   input,   width = 1,   .start
		.s2_done      (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_done),      //  output,   width = 1,   .done
		.s2_result    (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_result)     //  output,  width = 32,   .result
	);

	gpio gpio (
		.clk        (clock_in_out_clk_clk),                 //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_gpio_s1_address),    //   input,   width = 3,                  s1.address
		.write_n    (~mm_interconnect_0_gpio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_gpio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_gpio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_gpio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (gpio_bus_in_port),                     //   input,  width = 32, external_connection.in_port
		.out_port   (gpio_bus_out_port),                    //  output,  width = 32,                    .out_port
		.irq        (irq_mapper_receiver12_irq)             //  output,   width = 1,                 irq.irq
	);

	i2c i2c (
		.clk       (clock_in_out_clk_clk),                //   input,   width = 1,            clock.clk
		.rst_n     (~rst_controller_reset_out_reset),     //   input,   width = 1,       reset_sink.reset_n
		.intr      (irq_mapper_receiver5_irq),            //  output,   width = 1, interrupt_sender.irq
		.addr      (mm_interconnect_0_i2c_csr_address),   //   input,   width = 4,              csr.address
		.read      (mm_interconnect_0_i2c_csr_read),      //   input,   width = 1,                 .read
		.write     (mm_interconnect_0_i2c_csr_write),     //   input,   width = 1,                 .write
		.writedata (mm_interconnect_0_i2c_csr_writedata), //   input,  width = 32,                 .writedata
		.readdata  (mm_interconnect_0_i2c_csr_readdata),  //  output,  width = 32,                 .readdata
		.sda_in    (i2c_serial_sda_in),                   //   input,   width = 1,       i2c_serial.sda_in
		.scl_in    (i2c_serial_scl_in),                   //   input,   width = 1,                 .scl_in
		.sda_oe    (i2c_serial_sda_oe),                   //  output,   width = 1,                 .sda_oe
		.scl_oe    (i2c_serial_scl_oe)                    //  output,   width = 1,                 .scl_oe
	);

	iopll_0 iopll_0 (
		.rst      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1,   reset.reset
		.refclk   (clock_in_out_clk_clk),                          //   input,  width = 1,  refclk.clk
		.locked   (iopll_0_locked_export),                         //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk),                           //  output,  width = 1, outclk0.clk
		.outclk_1 (),                                              //  output,  width = 1, outclk1.clk
		.outclk_2 ()                                               //  output,  width = 1, outclk2.clk
	);

	mcu_subsystem_jtag_uart_0 jtag_uart_0 (
		.clk            (clock_in_out_clk_clk),                                        //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_003_reset_out_reset),                         //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         (irq_mapper_receiver8_irq)                                     //  output,   width = 1,               irq.irq
	);

	mcu_subsystem_cpu_0 mcu_subsystem_cpu_0 (
		.clk                                 (clock_in_out_clk_clk),                                              //   input,   width = 1,                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                                   //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                                //   input,   width = 1,                          .reset_req
		.d_address                           (mcu_subsystem_cpu_0_data_master_address),                           //  output,  width = 32,               data_master.address
		.d_byteenable                        (mcu_subsystem_cpu_0_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (mcu_subsystem_cpu_0_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (mcu_subsystem_cpu_0_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (mcu_subsystem_cpu_0_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (mcu_subsystem_cpu_0_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (mcu_subsystem_cpu_0_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.d_readdatavalid                     (mcu_subsystem_cpu_0_data_master_readdatavalid),                     //   input,   width = 1,                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (mcu_subsystem_cpu_0_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.i_address                           (mcu_subsystem_cpu_0_instruction_master_address),                    //  output,  width = 32,        instruction_master.address
		.i_read                              (mcu_subsystem_cpu_0_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (mcu_subsystem_cpu_0_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (mcu_subsystem_cpu_0_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.i_readdatavalid                     (mcu_subsystem_cpu_0_instruction_master_readdatavalid),              //   input,   width = 1,                          .readdatavalid
		.irq                                 (mcu_subsystem_cpu_0_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.debug_reset_request                 (mcu_subsystem_cpu_0_debug_reset_request_reset),                     //  output,   width = 1,       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.A_ci_multi_done                     (mcu_subsystem_cpu_0_custom_instruction_master_done),                //   input,   width = 1, custom_instruction_master.done
		.A_ci_multi_result                   (mcu_subsystem_cpu_0_custom_instruction_master_multi_result),        //   input,  width = 32,                          .multi_result
		.A_ci_multi_a                        (mcu_subsystem_cpu_0_custom_instruction_master_multi_a),             //  output,   width = 5,                          .multi_a
		.A_ci_multi_b                        (mcu_subsystem_cpu_0_custom_instruction_master_multi_b),             //  output,   width = 5,                          .multi_b
		.A_ci_multi_c                        (mcu_subsystem_cpu_0_custom_instruction_master_multi_c),             //  output,   width = 5,                          .multi_c
		.A_ci_multi_clk_en                   (mcu_subsystem_cpu_0_custom_instruction_master_clk_en),              //  output,   width = 1,                          .clk_en
		.A_ci_multi_clock                    (mcu_subsystem_cpu_0_custom_instruction_master_clk),                 //  output,   width = 1,                          .clk
		.A_ci_multi_reset                    (mcu_subsystem_cpu_0_custom_instruction_master_reset),               //  output,   width = 1,                          .reset
		.A_ci_multi_reset_req                (mcu_subsystem_cpu_0_custom_instruction_master_reset_req),           //  output,   width = 1,                          .reset_req
		.A_ci_multi_dataa                    (mcu_subsystem_cpu_0_custom_instruction_master_multi_dataa),         //  output,  width = 32,                          .multi_dataa
		.A_ci_multi_datab                    (mcu_subsystem_cpu_0_custom_instruction_master_multi_datab),         //  output,  width = 32,                          .multi_datab
		.A_ci_multi_n                        (mcu_subsystem_cpu_0_custom_instruction_master_multi_n),             //  output,   width = 8,                          .multi_n
		.A_ci_multi_readra                   (mcu_subsystem_cpu_0_custom_instruction_master_multi_readra),        //  output,   width = 1,                          .multi_readra
		.A_ci_multi_readrb                   (mcu_subsystem_cpu_0_custom_instruction_master_multi_readrb),        //  output,   width = 1,                          .multi_readrb
		.A_ci_multi_start                    (mcu_subsystem_cpu_0_custom_instruction_master_start),               //  output,   width = 1,                          .start
		.A_ci_multi_writerc                  (mcu_subsystem_cpu_0_custom_instruction_master_multi_writerc),       //  output,   width = 1,                          .multi_writerc
		.E_ci_combo_result                   (mcu_subsystem_cpu_0_custom_instruction_master_result),              //   input,  width = 32,                          .result
		.E_ci_combo_a                        (mcu_subsystem_cpu_0_custom_instruction_master_a),                   //  output,   width = 5,                          .a
		.E_ci_combo_b                        (mcu_subsystem_cpu_0_custom_instruction_master_b),                   //  output,   width = 5,                          .b
		.E_ci_combo_c                        (mcu_subsystem_cpu_0_custom_instruction_master_c),                   //  output,   width = 5,                          .c
		.E_ci_combo_dataa                    (mcu_subsystem_cpu_0_custom_instruction_master_dataa),               //  output,  width = 32,                          .dataa
		.E_ci_combo_datab                    (mcu_subsystem_cpu_0_custom_instruction_master_datab),               //  output,  width = 32,                          .datab
		.E_ci_combo_estatus                  (mcu_subsystem_cpu_0_custom_instruction_master_estatus),             //  output,   width = 1,                          .estatus
		.E_ci_combo_ipending                 (mcu_subsystem_cpu_0_custom_instruction_master_ipending),            //  output,  width = 32,                          .ipending
		.E_ci_combo_n                        (mcu_subsystem_cpu_0_custom_instruction_master_n),                   //  output,   width = 8,                          .n
		.E_ci_combo_readra                   (mcu_subsystem_cpu_0_custom_instruction_master_readra),              //  output,   width = 1,                          .readra
		.E_ci_combo_readrb                   (mcu_subsystem_cpu_0_custom_instruction_master_readrb),              //  output,   width = 1,                          .readrb
		.E_ci_combo_writerc                  (mcu_subsystem_cpu_0_custom_instruction_master_writerc)              //  output,   width = 1,                          .writerc
	);

	mcu_subsystem_ram_0 mcu_subsystem_ram_0 (
		.clk        (clock_in_out_clk_clk),                                //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_0_mcu_subsystem_ram_0_s1_address),    //   input,  width = 15,     s1.address
		.clken      (mm_interconnect_0_mcu_subsystem_ram_0_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_0_mcu_subsystem_ram_0_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_reset_out_reset),                      //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)                   //   input,   width = 1,       .reset_req
	);

	mcu_subsystem_generic_quad_spi_controller2_0 qspi_controller2_0 (
		.clk                  (iopll_0_outclk0_clk),                                        //   input,   width = 1,       clock_sink.clk
		.reset_n              (~rst_controller_005_reset_out_reset),                        //   input,   width = 1,            reset.reset_n
		.qspi_pins_dclk       (qspi_dclk),                                                  //  output,   width = 1,        qspi_pins.dclk
		.qspi_pins_ncs        (qspi_ncs),                                                   //  output,   width = 1,                 .ncs
		.qspi_pins_data       (qspi_data),                                                  //   inout,   width = 4,                 .data
		.avl_csr_read         (mm_interconnect_1_qspi_controller2_0_avl_csr_read),          //   input,   width = 1,          avl_csr.read
		.avl_csr_waitrequest  (mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest),   //  output,   width = 1,                 .waitrequest
		.avl_csr_write        (mm_interconnect_1_qspi_controller2_0_avl_csr_write),         //   input,   width = 1,                 .write
		.avl_csr_addr         (mm_interconnect_1_qspi_controller2_0_avl_csr_address),       //   input,   width = 4,                 .address
		.avl_csr_wrdata       (mm_interconnect_1_qspi_controller2_0_avl_csr_writedata),     //   input,  width = 32,                 .writedata
		.avl_csr_rddata       (mm_interconnect_1_qspi_controller2_0_avl_csr_readdata),      //  output,  width = 32,                 .readdata
		.avl_csr_rddata_valid (mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid), //  output,   width = 1,                 .readdatavalid
		.avl_mem_write        (mm_interconnect_2_qspi_controller2_0_avl_mem_write),         //   input,   width = 1,          avl_mem.write
		.avl_mem_burstcount   (mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount),    //   input,   width = 7,                 .burstcount
		.avl_mem_waitrequest  (mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest),   //  output,   width = 1,                 .waitrequest
		.avl_mem_read         (mm_interconnect_2_qspi_controller2_0_avl_mem_read),          //   input,   width = 1,                 .read
		.avl_mem_addr         (mm_interconnect_2_qspi_controller2_0_avl_mem_address),       //   input,  width = 25,                 .address
		.avl_mem_wrdata       (mm_interconnect_2_qspi_controller2_0_avl_mem_writedata),     //   input,  width = 32,                 .writedata
		.avl_mem_rddata       (mm_interconnect_2_qspi_controller2_0_avl_mem_readdata),      //  output,  width = 32,                 .readdata
		.avl_mem_rddata_valid (mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid), //  output,   width = 1,                 .readdatavalid
		.avl_mem_byteenable   (mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable),    //   input,   width = 4,                 .byteenable
		.irq                  (irq_synchronizer_receiver_irq)                               //  output,   width = 1, interrupt_sender.irq
	);

	mcu_subsystem_clock_bridge_1 refclk_emif (
		.in_clk  (refclk_emif_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (refclk_emif_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	mcu_subsystem_reset_in reset_in (
		.in_reset_n  (reset_reset_n),            //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	spi spi (
		.clk           (clock_in_out_clk_clk),                              //   input,   width = 1,              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                   //   input,   width = 1,            reset.reset_n
		.data_from_cpu (mm_interconnect_0_spi_spi_control_port_writedata),  //   input,  width = 16, spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_spi_spi_control_port_readdata),   //  output,  width = 16,                 .readdata
		.mem_addr      (mm_interconnect_0_spi_spi_control_port_address),    //   input,   width = 3,                 .address
		.read_n        (~mm_interconnect_0_spi_spi_control_port_read),      //   input,   width = 1,                 .read_n
		.spi_select    (mm_interconnect_0_spi_spi_control_port_chipselect), //   input,   width = 1,                 .chipselect
		.write_n       (~mm_interconnect_0_spi_spi_control_port_write),     //   input,   width = 1,                 .write_n
		.irq           (irq_mapper_receiver11_irq),                         //  output,   width = 1,              irq.irq
		.MISO          (spi_serial_MISO),                                   //   input,   width = 1,         external.MISO
		.MOSI          (spi_serial_MOSI),                                   //  output,   width = 1,                 .MOSI
		.SCLK          (spi_serial_SCLK),                                   //  output,   width = 1,                 .SCLK
		.SS_n          (spi_serial_SS_n)                                    //  output,   width = 8,                 .SS_n
	);

	timer_0 timer_0 (
		.clk        (clock_in_out_clk_clk),                    //   input,   width = 1,   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //   input,   width = 4,    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //   input,   width = 1,      .write_n
		.irq        (irq_mapper_receiver9_irq)                 //  output,   width = 1,   irq.irq
	);

	timer_1 timer_1 (
		.clk        (clock_in_out_clk_clk),                    //   input,   width = 1,   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_0_timer_1_s1_address),    //   input,   width = 4,    s1.address
		.writedata  (mm_interconnect_0_timer_1_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_0_timer_1_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_0_timer_1_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_0_timer_1_s1_write),     //   input,   width = 1,      .write_n
		.irq        (irq_mapper_receiver10_irq)                //  output,   width = 1,   irq.irq
	);

	ethernet ethernet (
		.clk_in_clk         (clock_in_out_clk_clk),                         //   input,    width = 1,     clk_in.clk
		.avm_waitrequest    (ethernet_avm_waitrequest),                     //   input,    width = 1,        avm.waitrequest
		.avm_readdata       (ethernet_avm_readdata),                        //   input,  width = 256,           .readdata
		.avm_readdatavalid  (ethernet_avm_readdatavalid),                   //   input,    width = 1,           .readdatavalid
		.avm_response       (ethernet_avm_response),                        //   input,    width = 2,           .response
		.avm_burstcount     (ethernet_avm_burstcount),                      //  output,    width = 8,           .burstcount
		.avm_writedata      (ethernet_avm_writedata),                       //  output,  width = 256,           .writedata
		.avm_address        (ethernet_avm_address),                         //  output,   width = 31,           .address
		.avm_write          (ethernet_avm_write),                           //  output,    width = 1,           .write
		.avm_read           (ethernet_avm_read),                            //  output,    width = 1,           .read
		.avm_byteenable     (ethernet_avm_byteenable),                      //  output,   width = 32,           .byteenable
		.avm_debugaccess    (ethernet_avm_debugaccess),                     //  output,    width = 1,           .debugaccess
		.dma_rx_irq_irq     (irq_mapper_receiver0_irq),                     //  output,    width = 1, dma_rx_irq.irq
		.dma_tx_irq_irq     (irq_mapper_receiver1_irq),                     //  output,    width = 1, dma_tx_irq.irq
		.tx_clock_clk       (tx_clock_clk),                                 //   input,    width = 1,   tx_clock.clk
		.misc_xon_gen       (misc_xon_gen),                                 //   input,    width = 1,       misc.xon_gen
		.misc_xoff_gen      (misc_xoff_gen),                                //   input,    width = 1,           .xoff_gen
		.misc_magic_wakeup  (misc_magic_wakeup),                            //  output,    width = 1,           .magic_wakeup
		.misc_magic_sleep_n (misc_magic_sleep_n),                           //   input,    width = 1,           .magic_sleep_n
		.misc_ff_tx_crc_fwd (misc_ff_tx_crc_fwd),                           //   input,    width = 1,           .ff_tx_crc_fwd
		.misc_ff_tx_septy   (misc_ff_tx_septy),                             //  output,    width = 1,           .ff_tx_septy
		.misc_tx_ff_uflow   (misc_tx_ff_uflow),                             //  output,    width = 1,           .tx_ff_uflow
		.misc_ff_tx_a_full  (misc_ff_tx_a_full),                            //  output,    width = 1,           .ff_tx_a_full
		.misc_ff_tx_a_empty (misc_ff_tx_a_empty),                           //  output,    width = 1,           .ff_tx_a_empty
		.misc_rx_err_stat   (misc_rx_err_stat),                             //  output,   width = 18,           .rx_err_stat
		.misc_rx_frm_type   (misc_rx_frm_type),                             //  output,    width = 4,           .rx_frm_type
		.misc_ff_rx_dsav    (misc_ff_rx_dsav),                              //  output,    width = 1,           .ff_rx_dsav
		.misc_ff_rx_a_full  (misc_ff_rx_a_full),                            //  output,    width = 1,           .ff_rx_a_full
		.misc_ff_rx_a_empty (misc_ff_rx_a_empty),                           //  output,    width = 1,           .ff_rx_a_empty
		.mdio_mdc           (mdio_mdc),                                     //  output,    width = 1,       mdio.mdc
		.mdio_mdio_in       (mdio_mdio_in),                                 //   input,    width = 1,           .mdio_in
		.mdio_mdio_out      (mdio_mdio_out),                                //  output,    width = 1,           .mdio_out
		.mdio_mdio_oen      (mdio_mdio_oen),                                //  output,    width = 1,           .mdio_oen
		.gmii_gmii_rx_d     (gmii_gmii_rx_d),                               //   input,    width = 8,       gmii.gmii_rx_d
		.gmii_gmii_rx_dv    (gmii_gmii_rx_dv),                              //   input,    width = 1,           .gmii_rx_dv
		.gmii_gmii_rx_err   (gmii_gmii_rx_err),                             //   input,    width = 1,           .gmii_rx_err
		.gmii_gmii_tx_d     (gmii_gmii_tx_d),                               //  output,    width = 8,           .gmii_tx_d
		.gmii_gmii_tx_en    (gmii_gmii_tx_en),                              //  output,    width = 1,           .gmii_tx_en
		.gmii_gmii_tx_err   (gmii_gmii_tx_err),                             //  output,    width = 1,           .gmii_tx_err
		.mii_mii_rx_d       (mii_mii_rx_d),                                 //   input,    width = 4,        mii.mii_rx_d
		.mii_mii_rx_dv      (mii_mii_rx_dv),                                //   input,    width = 1,           .mii_rx_dv
		.mii_mii_rx_err     (mii_mii_rx_err),                               //   input,    width = 1,           .mii_rx_err
		.mii_mii_tx_d       (mii_mii_tx_d),                                 //  output,    width = 4,           .mii_tx_d
		.mii_mii_tx_en      (mii_mii_tx_en),                                //  output,    width = 1,           .mii_tx_en
		.mii_mii_tx_err     (mii_mii_tx_err),                               //  output,    width = 1,           .mii_tx_err
		.status_set_10      (status_1_set_10),                              //   input,    width = 1,     status.set_10
		.status_set_1000    (status_1_set_1000),                            //   input,    width = 1,           .set_1000
		.status_eth_mode    (status_1_eth_mode),                            //  output,    width = 1,           .eth_mode
		.status_ena_10      (status_1_ena_10),                              //  output,    width = 1,           .ena_10
		.rx_clock_clk       (rx_clock_clk),                                 //   input,    width = 1,   rx_clock.clk
		.avs_waitrequest    (mm_interconnect_0_ethernet_avs_waitrequest),   //  output,    width = 1,        avs.waitrequest
		.avs_readdata       (mm_interconnect_0_ethernet_avs_readdata),      //  output,   width = 32,           .readdata
		.avs_readdatavalid  (mm_interconnect_0_ethernet_avs_readdatavalid), //  output,    width = 1,           .readdatavalid
		.avs_burstcount     (mm_interconnect_0_ethernet_avs_burstcount),    //   input,    width = 5,           .burstcount
		.avs_writedata      (mm_interconnect_0_ethernet_avs_writedata),     //   input,   width = 32,           .writedata
		.avs_address        (mm_interconnect_0_ethernet_avs_address),       //   input,   width = 11,           .address
		.avs_write          (mm_interconnect_0_ethernet_avs_write),         //   input,    width = 1,           .write
		.avs_read           (mm_interconnect_0_ethernet_avs_read),          //   input,    width = 1,           .read
		.avs_byteenable     (mm_interconnect_0_ethernet_avs_byteenable),    //   input,    width = 4,           .byteenable
		.avs_debugaccess    (mm_interconnect_0_ethernet_avs_debugaccess),   //   input,    width = 1,           .debugaccess
		.rst_in_reset_n     (~rst_controller_008_reset_out_reset)           //   input,    width = 1,     rst_in.reset_n
	);

	mcu_subsystem_altera_customins_master_translator_181_ahlmlzy #(
		.SHARED_COMB_AND_MULTI (0)
	) mcu_subsystem_cpu_0_custom_instruction_master_translator (
		.ci_slave_dataa            (mcu_subsystem_cpu_0_custom_instruction_master_dataa),                                //   input,  width = 32,        ci_slave.dataa
		.ci_slave_datab            (mcu_subsystem_cpu_0_custom_instruction_master_datab),                                //   input,  width = 32,                .datab
		.ci_slave_result           (mcu_subsystem_cpu_0_custom_instruction_master_result),                               //  output,  width = 32,                .result
		.ci_slave_n                (mcu_subsystem_cpu_0_custom_instruction_master_n),                                    //   input,   width = 8,                .n
		.ci_slave_readra           (mcu_subsystem_cpu_0_custom_instruction_master_readra),                               //   input,   width = 1,                .readra
		.ci_slave_readrb           (mcu_subsystem_cpu_0_custom_instruction_master_readrb),                               //   input,   width = 1,                .readrb
		.ci_slave_writerc          (mcu_subsystem_cpu_0_custom_instruction_master_writerc),                              //   input,   width = 1,                .writerc
		.ci_slave_a                (mcu_subsystem_cpu_0_custom_instruction_master_a),                                    //   input,   width = 5,                .a
		.ci_slave_b                (mcu_subsystem_cpu_0_custom_instruction_master_b),                                    //   input,   width = 5,                .b
		.ci_slave_c                (mcu_subsystem_cpu_0_custom_instruction_master_c),                                    //   input,   width = 5,                .c
		.ci_slave_ipending         (mcu_subsystem_cpu_0_custom_instruction_master_ipending),                             //   input,  width = 32,                .ipending
		.ci_slave_estatus          (mcu_subsystem_cpu_0_custom_instruction_master_estatus),                              //   input,   width = 1,                .estatus
		.ci_slave_multi_clk        (mcu_subsystem_cpu_0_custom_instruction_master_clk),                                  //   input,   width = 1,                .clk
		.ci_slave_multi_reset      (mcu_subsystem_cpu_0_custom_instruction_master_reset),                                //   input,   width = 1,                .reset
		.ci_slave_multi_clken      (mcu_subsystem_cpu_0_custom_instruction_master_clk_en),                               //   input,   width = 1,                .clk_en
		.ci_slave_multi_reset_req  (mcu_subsystem_cpu_0_custom_instruction_master_reset_req),                            //   input,   width = 1,                .reset_req
		.ci_slave_multi_start      (mcu_subsystem_cpu_0_custom_instruction_master_start),                                //   input,   width = 1,                .start
		.ci_slave_multi_done       (mcu_subsystem_cpu_0_custom_instruction_master_done),                                 //  output,   width = 1,                .done
		.ci_slave_multi_dataa      (mcu_subsystem_cpu_0_custom_instruction_master_multi_dataa),                          //   input,  width = 32,                .multi_dataa
		.ci_slave_multi_datab      (mcu_subsystem_cpu_0_custom_instruction_master_multi_datab),                          //   input,  width = 32,                .multi_datab
		.ci_slave_multi_result     (mcu_subsystem_cpu_0_custom_instruction_master_multi_result),                         //  output,  width = 32,                .multi_result
		.ci_slave_multi_n          (mcu_subsystem_cpu_0_custom_instruction_master_multi_n),                              //   input,   width = 8,                .multi_n
		.ci_slave_multi_readra     (mcu_subsystem_cpu_0_custom_instruction_master_multi_readra),                         //   input,   width = 1,                .multi_readra
		.ci_slave_multi_readrb     (mcu_subsystem_cpu_0_custom_instruction_master_multi_readrb),                         //   input,   width = 1,                .multi_readrb
		.ci_slave_multi_writerc    (mcu_subsystem_cpu_0_custom_instruction_master_multi_writerc),                        //   input,   width = 1,                .multi_writerc
		.ci_slave_multi_a          (mcu_subsystem_cpu_0_custom_instruction_master_multi_a),                              //   input,   width = 5,                .multi_a
		.ci_slave_multi_b          (mcu_subsystem_cpu_0_custom_instruction_master_multi_b),                              //   input,   width = 5,                .multi_b
		.ci_slave_multi_c          (mcu_subsystem_cpu_0_custom_instruction_master_multi_c),                              //   input,   width = 5,                .multi_c
		.comb_ci_master_dataa      (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_dataa),      //  output,  width = 32,  comb_ci_master.dataa
		.comb_ci_master_datab      (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_datab),      //  output,  width = 32,                .datab
		.comb_ci_master_result     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_result),     //   input,  width = 32,                .result
		.comb_ci_master_n          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_n),          //  output,   width = 8,                .n
		.comb_ci_master_readra     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readra),     //  output,   width = 1,                .readra
		.comb_ci_master_readrb     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readrb),     //  output,   width = 1,                .readrb
		.comb_ci_master_writerc    (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_writerc),    //  output,   width = 1,                .writerc
		.comb_ci_master_a          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_a),          //  output,   width = 5,                .a
		.comb_ci_master_b          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_b),          //  output,   width = 5,                .b
		.comb_ci_master_c          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_c),          //  output,   width = 5,                .c
		.comb_ci_master_ipending   (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_ipending),   //  output,  width = 32,                .ipending
		.comb_ci_master_estatus    (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_estatus),    //  output,   width = 1,                .estatus
		.multi_ci_master_clk       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk),       //  output,   width = 1, multi_ci_master.clk
		.multi_ci_master_reset     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset),     //  output,   width = 1,                .reset
		.multi_ci_master_clken     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk_en),    //  output,   width = 1,                .clk_en
		.multi_ci_master_reset_req (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset_req), //  output,   width = 1,                .reset_req
		.multi_ci_master_start     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_start),     //  output,   width = 1,                .start
		.multi_ci_master_done      (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_done),      //   input,   width = 1,                .done
		.multi_ci_master_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_dataa),     //  output,  width = 32,                .dataa
		.multi_ci_master_datab     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_datab),     //  output,  width = 32,                .datab
		.multi_ci_master_result    (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_result),    //   input,  width = 32,                .result
		.multi_ci_master_n         (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_n),         //  output,   width = 8,                .n
		.multi_ci_master_readra    (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readra),    //  output,   width = 1,                .readra
		.multi_ci_master_readrb    (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readrb),    //  output,   width = 1,                .readrb
		.multi_ci_master_writerc   (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_writerc),   //  output,   width = 1,                .writerc
		.multi_ci_master_a         (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_a),         //  output,   width = 5,                .a
		.multi_ci_master_b         (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_b),         //  output,   width = 5,                .b
		.multi_ci_master_c         (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_c)          //  output,   width = 5,                .c
	);

	mcu_subsystem_altera_customins_xconnect_181_zoq3ohq mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect (
		.ci_slave_dataa      (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_dataa),    //   input,  width = 32,   ci_slave.dataa
		.ci_slave_datab      (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_datab),    //   input,  width = 32,           .datab
		.ci_slave_result     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_result),   //  output,  width = 32,           .result
		.ci_slave_n          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_n),        //   input,   width = 8,           .n
		.ci_slave_readra     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readra),   //   input,   width = 1,           .readra
		.ci_slave_readrb     (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_readrb),   //   input,   width = 1,           .readrb
		.ci_slave_writerc    (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_writerc),  //   input,   width = 1,           .writerc
		.ci_slave_a          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_a),        //   input,   width = 5,           .a
		.ci_slave_b          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_b),        //   input,   width = 5,           .b
		.ci_slave_c          (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_c),        //   input,   width = 5,           .c
		.ci_slave_ipending   (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_ipending), //   input,  width = 32,           .ipending
		.ci_slave_estatus    (mcu_subsystem_cpu_0_custom_instruction_master_translator_comb_ci_master_estatus),  //   input,   width = 1,           .estatus
		.ci_master0_dataa    (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_dataa),     //  output,  width = 32, ci_master0.dataa
		.ci_master0_datab    (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_datab),     //  output,  width = 32,           .datab
		.ci_master0_result   (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_result),    //   input,  width = 32,           .result
		.ci_master0_n        (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_n),         //  output,   width = 8,           .n
		.ci_master0_readra   (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readra),    //  output,   width = 1,           .readra
		.ci_master0_readrb   (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readrb),    //  output,   width = 1,           .readrb
		.ci_master0_writerc  (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_writerc),   //  output,   width = 1,           .writerc
		.ci_master0_a        (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_a),         //  output,   width = 5,           .a
		.ci_master0_b        (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_b),         //  output,   width = 5,           .b
		.ci_master0_c        (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_c),         //  output,   width = 5,           .c
		.ci_master0_ipending (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_ipending),  //  output,  width = 32,           .ipending
		.ci_master0_estatus  (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_estatus)    //  output,   width = 1,           .estatus
	);

	mcu_subsystem_altera_customins_slave_translator_181_u4om4ji #(
		.N_WIDTH          (4),
		.USE_DONE         (0),
		.NUM_FIXED_CYCLES (0),
		.SYNC_RESET       (0)
	) mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0 (
		.ci_slave_dataa      (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_dataa),          //   input,  width = 32,  ci_slave.dataa
		.ci_slave_datab      (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_datab),          //   input,  width = 32,          .datab
		.ci_slave_result     (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_result),         //  output,  width = 32,          .result
		.ci_slave_n          (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_n),              //   input,   width = 8,          .n
		.ci_slave_readra     (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readra),         //   input,   width = 1,          .readra
		.ci_slave_readrb     (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_readrb),         //   input,   width = 1,          .readrb
		.ci_slave_writerc    (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_writerc),        //   input,   width = 1,          .writerc
		.ci_slave_a          (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_a),              //   input,   width = 5,          .a
		.ci_slave_b          (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_b),              //   input,   width = 5,          .b
		.ci_slave_c          (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_c),              //   input,   width = 5,          .c
		.ci_slave_ipending   (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_ipending),       //   input,  width = 32,          .ipending
		.ci_slave_estatus    (mcu_subsystem_cpu_0_custom_instruction_master_comb_xconnect_ci_master0_estatus),        //   input,   width = 1,          .estatus
		.ci_master_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_dataa),  //  output,  width = 32, ci_master.dataa
		.ci_master_datab     (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_datab),  //  output,  width = 32,          .datab
		.ci_master_result    (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_result), //   input,  width = 32,          .result
		.ci_master_n         (mcu_subsystem_cpu_0_custom_instruction_master_comb_slave_translator0_ci_master_n),      //  output,   width = 4,          .n
		.ci_master_readra    (),                                                                                      // (terminated),                        
		.ci_master_readrb    (),                                                                                      // (terminated),                        
		.ci_master_writerc   (),                                                                                      // (terminated),                        
		.ci_master_a         (),                                                                                      // (terminated),                        
		.ci_master_b         (),                                                                                      // (terminated),                        
		.ci_master_c         (),                                                                                      // (terminated),                        
		.ci_master_ipending  (),                                                                                      // (terminated),                        
		.ci_master_estatus   (),                                                                                      // (terminated),                        
		.ci_master_clk       (),                                                                                      // (terminated),                        
		.ci_master_clken     (),                                                                                      // (terminated),                        
		.ci_master_reset_req (),                                                                                      // (terminated),                        
		.ci_master_reset     (),                                                                                      // (terminated),                        
		.ci_master_start     (),                                                                                      // (terminated),                        
		.ci_master_done      (1'b0),                                                                                  // (terminated),                        
		.ci_slave_clk        (1'b0),                                                                                  // (terminated),                        
		.ci_slave_clken      (1'b0),                                                                                  // (terminated),                        
		.ci_slave_reset_req  (1'b0),                                                                                  // (terminated),                        
		.ci_slave_reset      (1'b0),                                                                                  // (terminated),                        
		.ci_slave_start      (1'b0),                                                                                  // (terminated),                        
		.ci_slave_done       ()                                                                                       // (terminated),                        
	);

	mcu_subsystem_altera_customins_xconnect_181_fxvbdoq mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect (
		.ci_slave_dataa       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_dataa),     //   input,  width = 32,   ci_slave.dataa
		.ci_slave_datab       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_datab),     //   input,  width = 32,           .datab
		.ci_slave_result      (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_result),    //  output,  width = 32,           .result
		.ci_slave_n           (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_n),         //   input,   width = 8,           .n
		.ci_slave_readra      (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readra),    //   input,   width = 1,           .readra
		.ci_slave_readrb      (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_readrb),    //   input,   width = 1,           .readrb
		.ci_slave_writerc     (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_writerc),   //   input,   width = 1,           .writerc
		.ci_slave_a           (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_a),         //   input,   width = 5,           .a
		.ci_slave_b           (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_b),         //   input,   width = 5,           .b
		.ci_slave_c           (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_c),         //   input,   width = 5,           .c
		.ci_slave_ipending    (),                                                                                   //   input,  width = 32,           .ipending
		.ci_slave_estatus     (),                                                                                   //   input,   width = 1,           .estatus
		.ci_slave_clk         (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk),       //   input,   width = 1,           .clk
		.ci_slave_reset       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset),     //   input,   width = 1,           .reset
		.ci_slave_clken       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_clk_en),    //   input,   width = 1,           .clk_en
		.ci_slave_reset_req   (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_reset_req), //   input,   width = 1,           .reset_req
		.ci_slave_start       (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_start),     //   input,   width = 1,           .start
		.ci_slave_done        (mcu_subsystem_cpu_0_custom_instruction_master_translator_multi_ci_master_done),      //  output,   width = 1,           .done
		.ci_master0_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_dataa),      //  output,  width = 32, ci_master0.dataa
		.ci_master0_datab     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_datab),      //  output,  width = 32,           .datab
		.ci_master0_result    (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_result),     //   input,  width = 32,           .result
		.ci_master0_n         (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_n),          //  output,   width = 8,           .n
		.ci_master0_readra    (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readra),     //  output,   width = 1,           .readra
		.ci_master0_readrb    (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readrb),     //  output,   width = 1,           .readrb
		.ci_master0_writerc   (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_writerc),    //  output,   width = 1,           .writerc
		.ci_master0_a         (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_a),          //  output,   width = 5,           .a
		.ci_master0_b         (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_b),          //  output,   width = 5,           .b
		.ci_master0_c         (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_c),          //  output,   width = 5,           .c
		.ci_master0_ipending  (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_ipending),   //  output,  width = 32,           .ipending
		.ci_master0_estatus   (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_estatus),    //  output,   width = 1,           .estatus
		.ci_master0_clk       (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk),        //  output,   width = 1,           .clk
		.ci_master0_reset     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset),      //  output,   width = 1,           .reset
		.ci_master0_clken     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk_en),     //  output,   width = 1,           .clk_en
		.ci_master0_reset_req (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset_req),  //  output,   width = 1,           .reset_req
		.ci_master0_start     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_start),      //  output,   width = 1,           .start
		.ci_master0_done      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_done)        //   input,   width = 1,           .done
	);

	mcu_subsystem_altera_customins_slave_translator_181_tppyj3y #(
		.N_WIDTH          (3),
		.USE_DONE         (1),
		.NUM_FIXED_CYCLES (1),
		.SYNC_RESET       (0)
	) mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0 (
		.ci_slave_dataa      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_dataa),             //   input,  width = 32,  ci_slave.dataa
		.ci_slave_datab      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_datab),             //   input,  width = 32,          .datab
		.ci_slave_result     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_result),            //  output,  width = 32,          .result
		.ci_slave_n          (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_n),                 //   input,   width = 8,          .n
		.ci_slave_readra     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readra),            //   input,   width = 1,          .readra
		.ci_slave_readrb     (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_readrb),            //   input,   width = 1,          .readrb
		.ci_slave_writerc    (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_writerc),           //   input,   width = 1,          .writerc
		.ci_slave_a          (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_a),                 //   input,   width = 5,          .a
		.ci_slave_b          (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_b),                 //   input,   width = 5,          .b
		.ci_slave_c          (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_c),                 //   input,   width = 5,          .c
		.ci_slave_ipending   (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_ipending),          //   input,  width = 32,          .ipending
		.ci_slave_estatus    (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_estatus),           //   input,   width = 1,          .estatus
		.ci_slave_clk        (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk),               //   input,   width = 1,          .clk
		.ci_slave_clken      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_clk_en),            //   input,   width = 1,          .clk_en
		.ci_slave_reset_req  (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset_req),         //   input,   width = 1,          .reset_req
		.ci_slave_reset      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_reset),             //   input,   width = 1,          .reset
		.ci_slave_start      (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_start),             //   input,   width = 1,          .start
		.ci_slave_done       (mcu_subsystem_cpu_0_custom_instruction_master_multi_xconnect_ci_master0_done),              //  output,   width = 1,          .done
		.ci_master_dataa     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_dataa),     //  output,  width = 32, ci_master.dataa
		.ci_master_datab     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_datab),     //  output,  width = 32,          .datab
		.ci_master_result    (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_result),    //   input,  width = 32,          .result
		.ci_master_n         (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_n),         //  output,   width = 3,          .n
		.ci_master_clk       (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk),       //  output,   width = 1,          .clk
		.ci_master_clken     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_clk_en),    //  output,   width = 1,          .clk_en
		.ci_master_reset_req (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset_req), //  output,   width = 1,          .reset_req
		.ci_master_reset     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_reset),     //  output,   width = 1,          .reset
		.ci_master_start     (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_start),     //  output,   width = 1,          .start
		.ci_master_done      (mcu_subsystem_cpu_0_custom_instruction_master_multi_slave_translator0_ci_master_done),      //   input,   width = 1,          .done
		.ci_master_readra    (),                                                                                          // (terminated),                        
		.ci_master_readrb    (),                                                                                          // (terminated),                        
		.ci_master_writerc   (),                                                                                          // (terminated),                        
		.ci_master_a         (),                                                                                          // (terminated),                        
		.ci_master_b         (),                                                                                          // (terminated),                        
		.ci_master_c         (),                                                                                          // (terminated),                        
		.ci_master_ipending  (),                                                                                          // (terminated),                        
		.ci_master_estatus   ()                                                                                           // (terminated),                        
	);

	mcu_subsystem_altera_mm_interconnect_181_3k3ltsq mm_interconnect_0 (
		.ethernet_avm_address                                  (ethernet_avm_address),                                              //   input,   width = 31,                                    ethernet_avm.address
		.ethernet_avm_waitrequest                              (ethernet_avm_waitrequest),                                          //  output,    width = 1,                                                .waitrequest
		.ethernet_avm_burstcount                               (ethernet_avm_burstcount),                                           //   input,    width = 8,                                                .burstcount
		.ethernet_avm_byteenable                               (ethernet_avm_byteenable),                                           //   input,   width = 32,                                                .byteenable
		.ethernet_avm_read                                     (ethernet_avm_read),                                                 //   input,    width = 1,                                                .read
		.ethernet_avm_readdata                                 (ethernet_avm_readdata),                                             //  output,  width = 256,                                                .readdata
		.ethernet_avm_readdatavalid                            (ethernet_avm_readdatavalid),                                        //  output,    width = 1,                                                .readdatavalid
		.ethernet_avm_write                                    (ethernet_avm_write),                                                //   input,    width = 1,                                                .write
		.ethernet_avm_writedata                                (ethernet_avm_writedata),                                            //   input,  width = 256,                                                .writedata
		.ethernet_avm_debugaccess                              (ethernet_avm_debugaccess),                                          //   input,    width = 1,                                                .debugaccess
		.ethernet_avm_response                                 (ethernet_avm_response),                                             //  output,    width = 2,                                                .response
		.mcu_subsystem_cpu_0_data_master_address               (mcu_subsystem_cpu_0_data_master_address),                           //   input,   width = 32,                 mcu_subsystem_cpu_0_data_master.address
		.mcu_subsystem_cpu_0_data_master_waitrequest           (mcu_subsystem_cpu_0_data_master_waitrequest),                       //  output,    width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_data_master_byteenable            (mcu_subsystem_cpu_0_data_master_byteenable),                        //   input,    width = 4,                                                .byteenable
		.mcu_subsystem_cpu_0_data_master_read                  (mcu_subsystem_cpu_0_data_master_read),                              //   input,    width = 1,                                                .read
		.mcu_subsystem_cpu_0_data_master_readdata              (mcu_subsystem_cpu_0_data_master_readdata),                          //  output,   width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_data_master_readdatavalid         (mcu_subsystem_cpu_0_data_master_readdatavalid),                     //  output,    width = 1,                                                .readdatavalid
		.mcu_subsystem_cpu_0_data_master_write                 (mcu_subsystem_cpu_0_data_master_write),                             //   input,    width = 1,                                                .write
		.mcu_subsystem_cpu_0_data_master_writedata             (mcu_subsystem_cpu_0_data_master_writedata),                         //   input,   width = 32,                                                .writedata
		.mcu_subsystem_cpu_0_data_master_debugaccess           (mcu_subsystem_cpu_0_data_master_debugaccess),                       //   input,    width = 1,                                                .debugaccess
		.mcu_subsystem_cpu_0_instruction_master_address        (mcu_subsystem_cpu_0_instruction_master_address),                    //   input,   width = 32,          mcu_subsystem_cpu_0_instruction_master.address
		.mcu_subsystem_cpu_0_instruction_master_waitrequest    (mcu_subsystem_cpu_0_instruction_master_waitrequest),                //  output,    width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_instruction_master_read           (mcu_subsystem_cpu_0_instruction_master_read),                       //   input,    width = 1,                                                .read
		.mcu_subsystem_cpu_0_instruction_master_readdata       (mcu_subsystem_cpu_0_instruction_master_readdata),                   //  output,   width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_instruction_master_readdatavalid  (mcu_subsystem_cpu_0_instruction_master_readdatavalid),              //  output,    width = 1,                                                .readdatavalid
		.ad9680_dma_m_dest_axi_awaddr                          (ad9680_dma_m_dest_axi_awaddr),                                      //   input,   width = 32,                           ad9680_dma_m_dest_axi.awaddr
		.ad9680_dma_m_dest_axi_awlen                           (ad9680_dma_m_dest_axi_awlen),                                       //   input,    width = 8,                                                .awlen
		.ad9680_dma_m_dest_axi_awsize                          (ad9680_dma_m_dest_axi_awsize),                                      //   input,    width = 3,                                                .awsize
		.ad9680_dma_m_dest_axi_awburst                         (ad9680_dma_m_dest_axi_awburst),                                     //   input,    width = 2,                                                .awburst
		.ad9680_dma_m_dest_axi_awcache                         (ad9680_dma_m_dest_axi_awcache),                                     //   input,    width = 4,                                                .awcache
		.ad9680_dma_m_dest_axi_awprot                          (ad9680_dma_m_dest_axi_awprot),                                      //   input,    width = 3,                                                .awprot
		.ad9680_dma_m_dest_axi_awvalid                         (ad9680_dma_m_dest_axi_awvalid),                                     //   input,    width = 1,                                                .awvalid
		.ad9680_dma_m_dest_axi_awready                         (ad9680_dma_m_dest_axi_awready),                                     //  output,    width = 1,                                                .awready
		.ad9680_dma_m_dest_axi_wdata                           (ad9680_dma_m_dest_axi_wdata),                                       //   input,  width = 128,                                                .wdata
		.ad9680_dma_m_dest_axi_wstrb                           (ad9680_dma_m_dest_axi_wstrb),                                       //   input,   width = 16,                                                .wstrb
		.ad9680_dma_m_dest_axi_wlast                           (ad9680_dma_m_dest_axi_wlast),                                       //   input,    width = 1,                                                .wlast
		.ad9680_dma_m_dest_axi_wvalid                          (ad9680_dma_m_dest_axi_wvalid),                                      //   input,    width = 1,                                                .wvalid
		.ad9680_dma_m_dest_axi_wready                          (ad9680_dma_m_dest_axi_wready),                                      //  output,    width = 1,                                                .wready
		.ad9680_dma_m_dest_axi_bresp                           (ad9680_dma_m_dest_axi_bresp),                                       //  output,    width = 2,                                                .bresp
		.ad9680_dma_m_dest_axi_bvalid                          (ad9680_dma_m_dest_axi_bvalid),                                      //  output,    width = 1,                                                .bvalid
		.ad9680_dma_m_dest_axi_bready                          (ad9680_dma_m_dest_axi_bready),                                      //   input,    width = 1,                                                .bready
		.ad9680_dma_m_dest_axi_araddr                          (ad9680_dma_m_dest_axi_araddr),                                      //   input,   width = 32,                                                .araddr
		.ad9680_dma_m_dest_axi_arlen                           (ad9680_dma_m_dest_axi_arlen),                                       //   input,    width = 8,                                                .arlen
		.ad9680_dma_m_dest_axi_arsize                          (ad9680_dma_m_dest_axi_arsize),                                      //   input,    width = 3,                                                .arsize
		.ad9680_dma_m_dest_axi_arburst                         (ad9680_dma_m_dest_axi_arburst),                                     //   input,    width = 2,                                                .arburst
		.ad9680_dma_m_dest_axi_arcache                         (ad9680_dma_m_dest_axi_arcache),                                     //   input,    width = 4,                                                .arcache
		.ad9680_dma_m_dest_axi_arprot                          (ad9680_dma_m_dest_axi_arprot),                                      //   input,    width = 3,                                                .arprot
		.ad9680_dma_m_dest_axi_arvalid                         (ad9680_dma_m_dest_axi_arvalid),                                     //   input,    width = 1,                                                .arvalid
		.ad9680_dma_m_dest_axi_arready                         (ad9680_dma_m_dest_axi_arready),                                     //  output,    width = 1,                                                .arready
		.ad9680_dma_m_dest_axi_rdata                           (ad9680_dma_m_dest_axi_rdata),                                       //  output,  width = 128,                                                .rdata
		.ad9680_dma_m_dest_axi_rresp                           (ad9680_dma_m_dest_axi_rresp),                                       //  output,    width = 2,                                                .rresp
		.ad9680_dma_m_dest_axi_rvalid                          (ad9680_dma_m_dest_axi_rvalid),                                      //  output,    width = 1,                                                .rvalid
		.ad9680_dma_m_dest_axi_rready                          (ad9680_dma_m_dest_axi_rready),                                      //   input,    width = 1,                                                .rready
		.ad9144_dma_m_src_axi_awaddr                           (ad9144_dma_m_src_axi_awaddr),                                       //   input,   width = 32,                            ad9144_dma_m_src_axi.awaddr
		.ad9144_dma_m_src_axi_awlen                            (ad9144_dma_m_src_axi_awlen),                                        //   input,    width = 8,                                                .awlen
		.ad9144_dma_m_src_axi_awsize                           (ad9144_dma_m_src_axi_awsize),                                       //   input,    width = 3,                                                .awsize
		.ad9144_dma_m_src_axi_awburst                          (ad9144_dma_m_src_axi_awburst),                                      //   input,    width = 2,                                                .awburst
		.ad9144_dma_m_src_axi_awcache                          (ad9144_dma_m_src_axi_awcache),                                      //   input,    width = 4,                                                .awcache
		.ad9144_dma_m_src_axi_awprot                           (ad9144_dma_m_src_axi_awprot),                                       //   input,    width = 3,                                                .awprot
		.ad9144_dma_m_src_axi_awvalid                          (ad9144_dma_m_src_axi_awvalid),                                      //   input,    width = 1,                                                .awvalid
		.ad9144_dma_m_src_axi_awready                          (ad9144_dma_m_src_axi_awready),                                      //  output,    width = 1,                                                .awready
		.ad9144_dma_m_src_axi_wdata                            (ad9144_dma_m_src_axi_wdata),                                        //   input,  width = 128,                                                .wdata
		.ad9144_dma_m_src_axi_wstrb                            (ad9144_dma_m_src_axi_wstrb),                                        //   input,   width = 16,                                                .wstrb
		.ad9144_dma_m_src_axi_wlast                            (ad9144_dma_m_src_axi_wlast),                                        //   input,    width = 1,                                                .wlast
		.ad9144_dma_m_src_axi_wvalid                           (ad9144_dma_m_src_axi_wvalid),                                       //   input,    width = 1,                                                .wvalid
		.ad9144_dma_m_src_axi_wready                           (ad9144_dma_m_src_axi_wready),                                       //  output,    width = 1,                                                .wready
		.ad9144_dma_m_src_axi_bresp                            (ad9144_dma_m_src_axi_bresp),                                        //  output,    width = 2,                                                .bresp
		.ad9144_dma_m_src_axi_bvalid                           (ad9144_dma_m_src_axi_bvalid),                                       //  output,    width = 1,                                                .bvalid
		.ad9144_dma_m_src_axi_bready                           (ad9144_dma_m_src_axi_bready),                                       //   input,    width = 1,                                                .bready
		.ad9144_dma_m_src_axi_araddr                           (ad9144_dma_m_src_axi_araddr),                                       //   input,   width = 32,                                                .araddr
		.ad9144_dma_m_src_axi_arlen                            (ad9144_dma_m_src_axi_arlen),                                        //   input,    width = 8,                                                .arlen
		.ad9144_dma_m_src_axi_arsize                           (ad9144_dma_m_src_axi_arsize),                                       //   input,    width = 3,                                                .arsize
		.ad9144_dma_m_src_axi_arburst                          (ad9144_dma_m_src_axi_arburst),                                      //   input,    width = 2,                                                .arburst
		.ad9144_dma_m_src_axi_arcache                          (ad9144_dma_m_src_axi_arcache),                                      //   input,    width = 4,                                                .arcache
		.ad9144_dma_m_src_axi_arprot                           (ad9144_dma_m_src_axi_arprot),                                       //   input,    width = 3,                                                .arprot
		.ad9144_dma_m_src_axi_arvalid                          (ad9144_dma_m_src_axi_arvalid),                                      //   input,    width = 1,                                                .arvalid
		.ad9144_dma_m_src_axi_arready                          (ad9144_dma_m_src_axi_arready),                                      //  output,    width = 1,                                                .arready
		.ad9144_dma_m_src_axi_rdata                            (ad9144_dma_m_src_axi_rdata),                                        //  output,  width = 128,                                                .rdata
		.ad9144_dma_m_src_axi_rresp                            (ad9144_dma_m_src_axi_rresp),                                        //  output,    width = 2,                                                .rresp
		.ad9144_dma_m_src_axi_rlast                            (ad9144_dma_m_src_axi_rlast),                                        //  output,    width = 1,                                                .rlast
		.ad9144_dma_m_src_axi_rvalid                           (ad9144_dma_m_src_axi_rvalid),                                       //  output,    width = 1,                                                .rvalid
		.ad9144_dma_m_src_axi_rready                           (ad9144_dma_m_src_axi_rready),                                       //   input,    width = 1,                                                .rready
		.bridge_0_s0_address                                   (mm_interconnect_0_bridge_0_s0_address),                             //  output,   width = 31,                                     bridge_0_s0.address
		.bridge_0_s0_write                                     (mm_interconnect_0_bridge_0_s0_write),                               //  output,    width = 1,                                                .write
		.bridge_0_s0_read                                      (mm_interconnect_0_bridge_0_s0_read),                                //  output,    width = 1,                                                .read
		.bridge_0_s0_readdata                                  (mm_interconnect_0_bridge_0_s0_readdata),                            //   input,  width = 256,                                                .readdata
		.bridge_0_s0_writedata                                 (mm_interconnect_0_bridge_0_s0_writedata),                           //  output,  width = 256,                                                .writedata
		.bridge_0_s0_burstcount                                (mm_interconnect_0_bridge_0_s0_burstcount),                          //  output,    width = 5,                                                .burstcount
		.bridge_0_s0_byteenable                                (mm_interconnect_0_bridge_0_s0_byteenable),                          //  output,   width = 32,                                                .byteenable
		.bridge_0_s0_readdatavalid                             (mm_interconnect_0_bridge_0_s0_readdatavalid),                       //   input,    width = 1,                                                .readdatavalid
		.bridge_0_s0_waitrequest                               (mm_interconnect_0_bridge_0_s0_waitrequest),                         //   input,    width = 1,                                                .waitrequest
		.bridge_0_s0_debugaccess                               (mm_interconnect_0_bridge_0_s0_debugaccess),                         //  output,    width = 1,                                                .debugaccess
		.mcu_subsystem_cpu_0_debug_mem_slave_address           (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_address),     //  output,    width = 9,             mcu_subsystem_cpu_0_debug_mem_slave.address
		.mcu_subsystem_cpu_0_debug_mem_slave_write             (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_write),       //  output,    width = 1,                                                .write
		.mcu_subsystem_cpu_0_debug_mem_slave_read              (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_read),        //  output,    width = 1,                                                .read
		.mcu_subsystem_cpu_0_debug_mem_slave_readdata          (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_readdata),    //   input,   width = 32,                                                .readdata
		.mcu_subsystem_cpu_0_debug_mem_slave_writedata         (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_writedata),   //  output,   width = 32,                                                .writedata
		.mcu_subsystem_cpu_0_debug_mem_slave_byteenable        (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_byteenable),  //  output,    width = 4,                                                .byteenable
		.mcu_subsystem_cpu_0_debug_mem_slave_waitrequest       (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_waitrequest), //   input,    width = 1,                                                .waitrequest
		.mcu_subsystem_cpu_0_debug_mem_slave_debugaccess       (mm_interconnect_0_mcu_subsystem_cpu_0_debug_mem_slave_debugaccess), //  output,    width = 1,                                                .debugaccess
		.bridge_3_s0_address                                   (mm_interconnect_0_bridge_3_s0_address),                             //  output,   width = 27,                                     bridge_3_s0.address
		.bridge_3_s0_write                                     (mm_interconnect_0_bridge_3_s0_write),                               //  output,    width = 1,                                                .write
		.bridge_3_s0_read                                      (mm_interconnect_0_bridge_3_s0_read),                                //  output,    width = 1,                                                .read
		.bridge_3_s0_readdata                                  (mm_interconnect_0_bridge_3_s0_readdata),                            //   input,   width = 32,                                                .readdata
		.bridge_3_s0_writedata                                 (mm_interconnect_0_bridge_3_s0_writedata),                           //  output,   width = 32,                                                .writedata
		.bridge_3_s0_burstcount                                (mm_interconnect_0_bridge_3_s0_burstcount),                          //  output,    width = 1,                                                .burstcount
		.bridge_3_s0_byteenable                                (mm_interconnect_0_bridge_3_s0_byteenable),                          //  output,    width = 4,                                                .byteenable
		.bridge_3_s0_readdatavalid                             (mm_interconnect_0_bridge_3_s0_readdatavalid),                       //   input,    width = 1,                                                .readdatavalid
		.bridge_3_s0_waitrequest                               (mm_interconnect_0_bridge_3_s0_waitrequest),                         //   input,    width = 1,                                                .waitrequest
		.bridge_3_s0_debugaccess                               (mm_interconnect_0_bridge_3_s0_debugaccess),                         //  output,    width = 1,                                                .debugaccess
		.bridge_1_s0_address                                   (mm_interconnect_0_bridge_1_s0_address),                             //  output,   width = 12,                                     bridge_1_s0.address
		.bridge_1_s0_write                                     (mm_interconnect_0_bridge_1_s0_write),                               //  output,    width = 1,                                                .write
		.bridge_1_s0_read                                      (mm_interconnect_0_bridge_1_s0_read),                                //  output,    width = 1,                                                .read
		.bridge_1_s0_readdata                                  (mm_interconnect_0_bridge_1_s0_readdata),                            //   input,   width = 32,                                                .readdata
		.bridge_1_s0_writedata                                 (mm_interconnect_0_bridge_1_s0_writedata),                           //  output,   width = 32,                                                .writedata
		.bridge_1_s0_burstcount                                (mm_interconnect_0_bridge_1_s0_burstcount),                          //  output,    width = 3,                                                .burstcount
		.bridge_1_s0_byteenable                                (mm_interconnect_0_bridge_1_s0_byteenable),                          //  output,    width = 4,                                                .byteenable
		.bridge_1_s0_readdatavalid                             (mm_interconnect_0_bridge_1_s0_readdatavalid),                       //   input,    width = 1,                                                .readdatavalid
		.bridge_1_s0_waitrequest                               (mm_interconnect_0_bridge_1_s0_waitrequest),                         //   input,    width = 1,                                                .waitrequest
		.bridge_1_s0_debugaccess                               (mm_interconnect_0_bridge_1_s0_debugaccess),                         //  output,    width = 1,                                                .debugaccess
		.mcu_subsystem_ram_0_s1_address                        (mm_interconnect_0_mcu_subsystem_ram_0_s1_address),                  //  output,   width = 15,                          mcu_subsystem_ram_0_s1.address
		.mcu_subsystem_ram_0_s1_write                          (mm_interconnect_0_mcu_subsystem_ram_0_s1_write),                    //  output,    width = 1,                                                .write
		.mcu_subsystem_ram_0_s1_readdata                       (mm_interconnect_0_mcu_subsystem_ram_0_s1_readdata),                 //   input,   width = 32,                                                .readdata
		.mcu_subsystem_ram_0_s1_writedata                      (mm_interconnect_0_mcu_subsystem_ram_0_s1_writedata),                //  output,   width = 32,                                                .writedata
		.mcu_subsystem_ram_0_s1_byteenable                     (mm_interconnect_0_mcu_subsystem_ram_0_s1_byteenable),               //  output,    width = 4,                                                .byteenable
		.mcu_subsystem_ram_0_s1_chipselect                     (mm_interconnect_0_mcu_subsystem_ram_0_s1_chipselect),               //  output,    width = 1,                                                .chipselect
		.mcu_subsystem_ram_0_s1_clken                          (mm_interconnect_0_mcu_subsystem_ram_0_s1_clken),                    //  output,    width = 1,                                                .clken
		.jtag_uart_0_avalon_jtag_slave_address                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),           //  output,    width = 1,                   jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),             //  output,    width = 1,                                                .write
		.jtag_uart_0_avalon_jtag_slave_read                    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),              //  output,    width = 1,                                                .read
		.jtag_uart_0_avalon_jtag_slave_readdata                (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),          //   input,   width = 32,                                                .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata               (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),         //  output,   width = 32,                                                .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest             (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),       //   input,    width = 1,                                                .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect              (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),        //  output,    width = 1,                                                .chipselect
		.ethernet_avs_address                                  (mm_interconnect_0_ethernet_avs_address),                            //  output,   width = 11,                                    ethernet_avs.address
		.ethernet_avs_write                                    (mm_interconnect_0_ethernet_avs_write),                              //  output,    width = 1,                                                .write
		.ethernet_avs_read                                     (mm_interconnect_0_ethernet_avs_read),                               //  output,    width = 1,                                                .read
		.ethernet_avs_readdata                                 (mm_interconnect_0_ethernet_avs_readdata),                           //   input,   width = 32,                                                .readdata
		.ethernet_avs_writedata                                (mm_interconnect_0_ethernet_avs_writedata),                          //  output,   width = 32,                                                .writedata
		.ethernet_avs_burstcount                               (mm_interconnect_0_ethernet_avs_burstcount),                         //  output,    width = 5,                                                .burstcount
		.ethernet_avs_byteenable                               (mm_interconnect_0_ethernet_avs_byteenable),                         //  output,    width = 4,                                                .byteenable
		.ethernet_avs_readdatavalid                            (mm_interconnect_0_ethernet_avs_readdatavalid),                      //   input,    width = 1,                                                .readdatavalid
		.ethernet_avs_waitrequest                              (mm_interconnect_0_ethernet_avs_waitrequest),                        //   input,    width = 1,                                                .waitrequest
		.ethernet_avs_debugaccess                              (mm_interconnect_0_ethernet_avs_debugaccess),                        //  output,    width = 1,                                                .debugaccess
		.i2c_csr_address                                       (mm_interconnect_0_i2c_csr_address),                                 //  output,    width = 4,                                         i2c_csr.address
		.i2c_csr_write                                         (mm_interconnect_0_i2c_csr_write),                                   //  output,    width = 1,                                                .write
		.i2c_csr_read                                          (mm_interconnect_0_i2c_csr_read),                                    //  output,    width = 1,                                                .read
		.i2c_csr_readdata                                      (mm_interconnect_0_i2c_csr_readdata),                                //   input,   width = 32,                                                .readdata
		.i2c_csr_writedata                                     (mm_interconnect_0_i2c_csr_writedata),                               //  output,   width = 32,                                                .writedata
		.ad9144_jesd204_lane_pll_reconfig_address              (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_address),        //  output,   width = 10,                ad9144_jesd204_lane_pll_reconfig.address
		.ad9144_jesd204_lane_pll_reconfig_write                (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_write),          //  output,    width = 1,                                                .write
		.ad9144_jesd204_lane_pll_reconfig_read                 (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_read),           //  output,    width = 1,                                                .read
		.ad9144_jesd204_lane_pll_reconfig_readdata             (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_readdata),       //   input,   width = 32,                                                .readdata
		.ad9144_jesd204_lane_pll_reconfig_writedata            (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_writedata),      //  output,   width = 32,                                                .writedata
		.ad9144_jesd204_lane_pll_reconfig_waitrequest          (mm_interconnect_0_ad9144_jesd204_lane_pll_reconfig_waitrequest),    //   input,    width = 1,                                                .waitrequest
		.ad9144_jesd204_link_pll_reconfig_address              (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_address),        //  output,   width = 10,                ad9144_jesd204_link_pll_reconfig.address
		.ad9144_jesd204_link_pll_reconfig_write                (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_write),          //  output,    width = 1,                                                .write
		.ad9144_jesd204_link_pll_reconfig_read                 (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_read),           //  output,    width = 1,                                                .read
		.ad9144_jesd204_link_pll_reconfig_readdata             (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_readdata),       //   input,   width = 32,                                                .readdata
		.ad9144_jesd204_link_pll_reconfig_writedata            (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_writedata),      //  output,   width = 32,                                                .writedata
		.ad9144_jesd204_link_pll_reconfig_waitrequest          (mm_interconnect_0_ad9144_jesd204_link_pll_reconfig_waitrequest),    //   input,    width = 1,                                                .waitrequest
		.ad9680_jesd204_link_pll_reconfig_address              (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_address),        //  output,   width = 10,                ad9680_jesd204_link_pll_reconfig.address
		.ad9680_jesd204_link_pll_reconfig_write                (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_write),          //  output,    width = 1,                                                .write
		.ad9680_jesd204_link_pll_reconfig_read                 (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_read),           //  output,    width = 1,                                                .read
		.ad9680_jesd204_link_pll_reconfig_readdata             (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_readdata),       //   input,   width = 32,                                                .readdata
		.ad9680_jesd204_link_pll_reconfig_writedata            (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_writedata),      //  output,   width = 32,                                                .writedata
		.ad9680_jesd204_link_pll_reconfig_waitrequest          (mm_interconnect_0_ad9680_jesd204_link_pll_reconfig_waitrequest),    //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_0_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_address),                    //  output,   width = 10,                            avl_adxcfg_0_rcfg_s0.address
		.avl_adxcfg_0_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_0_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_0_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_0_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_0_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_0_rcfg_s0_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_1_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_address),                    //  output,   width = 10,                            avl_adxcfg_1_rcfg_s0.address
		.avl_adxcfg_1_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_1_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_1_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_1_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_1_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_1_rcfg_s0_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_2_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_address),                    //  output,   width = 10,                            avl_adxcfg_2_rcfg_s0.address
		.avl_adxcfg_2_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_2_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_2_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_2_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_2_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_2_rcfg_s0_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_3_rcfg_s0_address                          (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_address),                    //  output,   width = 10,                            avl_adxcfg_3_rcfg_s0.address
		.avl_adxcfg_3_rcfg_s0_write                            (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_3_rcfg_s0_read                             (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_3_rcfg_s0_readdata                         (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_3_rcfg_s0_writedata                        (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_3_rcfg_s0_waitrequest                      (mm_interconnect_0_avl_adxcfg_3_rcfg_s0_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_0_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_address),                    //  output,   width = 10,                            avl_adxcfg_0_rcfg_s1.address
		.avl_adxcfg_0_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_0_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_0_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_0_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_0_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_0_rcfg_s1_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_1_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_address),                    //  output,   width = 10,                            avl_adxcfg_1_rcfg_s1.address
		.avl_adxcfg_1_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_1_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_1_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_1_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_1_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_1_rcfg_s1_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_2_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_address),                    //  output,   width = 10,                            avl_adxcfg_2_rcfg_s1.address
		.avl_adxcfg_2_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_2_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_2_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_2_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_2_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_2_rcfg_s1_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.avl_adxcfg_3_rcfg_s1_address                          (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_address),                    //  output,   width = 10,                            avl_adxcfg_3_rcfg_s1.address
		.avl_adxcfg_3_rcfg_s1_write                            (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_write),                      //  output,    width = 1,                                                .write
		.avl_adxcfg_3_rcfg_s1_read                             (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_read),                       //  output,    width = 1,                                                .read
		.avl_adxcfg_3_rcfg_s1_readdata                         (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_readdata),                   //   input,   width = 32,                                                .readdata
		.avl_adxcfg_3_rcfg_s1_writedata                        (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_writedata),                  //  output,   width = 32,                                                .writedata
		.avl_adxcfg_3_rcfg_s1_waitrequest                      (mm_interconnect_0_avl_adxcfg_3_rcfg_s1_waitrequest),                //   input,    width = 1,                                                .waitrequest
		.bridge_2_s0_address                                   (mm_interconnect_0_bridge_2_s0_address),                             //  output,    width = 6,                                     bridge_2_s0.address
		.bridge_2_s0_write                                     (mm_interconnect_0_bridge_2_s0_write),                               //  output,    width = 1,                                                .write
		.bridge_2_s0_read                                      (mm_interconnect_0_bridge_2_s0_read),                                //  output,    width = 1,                                                .read
		.bridge_2_s0_readdata                                  (mm_interconnect_0_bridge_2_s0_readdata),                            //   input,   width = 32,                                                .readdata
		.bridge_2_s0_writedata                                 (mm_interconnect_0_bridge_2_s0_writedata),                           //  output,   width = 32,                                                .writedata
		.bridge_2_s0_burstcount                                (mm_interconnect_0_bridge_2_s0_burstcount),                          //  output,    width = 1,                                                .burstcount
		.bridge_2_s0_byteenable                                (mm_interconnect_0_bridge_2_s0_byteenable),                          //  output,    width = 4,                                                .byteenable
		.bridge_2_s0_readdatavalid                             (mm_interconnect_0_bridge_2_s0_readdatavalid),                       //   input,    width = 1,                                                .readdatavalid
		.bridge_2_s0_waitrequest                               (mm_interconnect_0_bridge_2_s0_waitrequest),                         //   input,    width = 1,                                                .waitrequest
		.bridge_2_s0_debugaccess                               (mm_interconnect_0_bridge_2_s0_debugaccess),                         //  output,    width = 1,                                                .debugaccess
		.timer_1_s1_address                                    (mm_interconnect_0_timer_1_s1_address),                              //  output,    width = 4,                                      timer_1_s1.address
		.timer_1_s1_write                                      (mm_interconnect_0_timer_1_s1_write),                                //  output,    width = 1,                                                .write
		.timer_1_s1_readdata                                   (mm_interconnect_0_timer_1_s1_readdata),                             //   input,   width = 16,                                                .readdata
		.timer_1_s1_writedata                                  (mm_interconnect_0_timer_1_s1_writedata),                            //  output,   width = 16,                                                .writedata
		.timer_1_s1_chipselect                                 (mm_interconnect_0_timer_1_s1_chipselect),                           //  output,    width = 1,                                                .chipselect
		.timer_0_s1_address                                    (mm_interconnect_0_timer_0_s1_address),                              //  output,    width = 4,                                      timer_0_s1.address
		.timer_0_s1_write                                      (mm_interconnect_0_timer_0_s1_write),                                //  output,    width = 1,                                                .write
		.timer_0_s1_readdata                                   (mm_interconnect_0_timer_0_s1_readdata),                             //   input,   width = 16,                                                .readdata
		.timer_0_s1_writedata                                  (mm_interconnect_0_timer_0_s1_writedata),                            //  output,   width = 16,                                                .writedata
		.timer_0_s1_chipselect                                 (mm_interconnect_0_timer_0_s1_chipselect),                           //  output,    width = 1,                                                .chipselect
		.gpio_s1_address                                       (mm_interconnect_0_gpio_s1_address),                                 //  output,    width = 3,                                         gpio_s1.address
		.gpio_s1_write                                         (mm_interconnect_0_gpio_s1_write),                                   //  output,    width = 1,                                                .write
		.gpio_s1_readdata                                      (mm_interconnect_0_gpio_s1_readdata),                                //   input,   width = 32,                                                .readdata
		.gpio_s1_writedata                                     (mm_interconnect_0_gpio_s1_writedata),                               //  output,   width = 32,                                                .writedata
		.gpio_s1_chipselect                                    (mm_interconnect_0_gpio_s1_chipselect),                              //  output,    width = 1,                                                .chipselect
		.spi_spi_control_port_address                          (mm_interconnect_0_spi_spi_control_port_address),                    //  output,    width = 3,                            spi_spi_control_port.address
		.spi_spi_control_port_write                            (mm_interconnect_0_spi_spi_control_port_write),                      //  output,    width = 1,                                                .write
		.spi_spi_control_port_read                             (mm_interconnect_0_spi_spi_control_port_read),                       //  output,    width = 1,                                                .read
		.spi_spi_control_port_readdata                         (mm_interconnect_0_spi_spi_control_port_readdata),                   //   input,   width = 16,                                                .readdata
		.spi_spi_control_port_writedata                        (mm_interconnect_0_spi_spi_control_port_writedata),                  //  output,   width = 16,                                                .writedata
		.spi_spi_control_port_chipselect                       (mm_interconnect_0_spi_spi_control_port_chipselect),                 //  output,    width = 1,                                                .chipselect
		.ad9144_jesd204_link_management_awaddr                 (mm_interconnect_0_ad9144_jesd204_link_management_awaddr),           //  output,   width = 12,                  ad9144_jesd204_link_management.awaddr
		.ad9144_jesd204_link_management_awprot                 (mm_interconnect_0_ad9144_jesd204_link_management_awprot),           //  output,    width = 3,                                                .awprot
		.ad9144_jesd204_link_management_awvalid                (mm_interconnect_0_ad9144_jesd204_link_management_awvalid),          //  output,    width = 1,                                                .awvalid
		.ad9144_jesd204_link_management_awready                (mm_interconnect_0_ad9144_jesd204_link_management_awready),          //   input,    width = 1,                                                .awready
		.ad9144_jesd204_link_management_wdata                  (mm_interconnect_0_ad9144_jesd204_link_management_wdata),            //  output,   width = 32,                                                .wdata
		.ad9144_jesd204_link_management_wstrb                  (mm_interconnect_0_ad9144_jesd204_link_management_wstrb),            //  output,    width = 4,                                                .wstrb
		.ad9144_jesd204_link_management_wvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_wvalid),           //  output,    width = 1,                                                .wvalid
		.ad9144_jesd204_link_management_wready                 (mm_interconnect_0_ad9144_jesd204_link_management_wready),           //   input,    width = 1,                                                .wready
		.ad9144_jesd204_link_management_bresp                  (mm_interconnect_0_ad9144_jesd204_link_management_bresp),            //   input,    width = 2,                                                .bresp
		.ad9144_jesd204_link_management_bvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_bvalid),           //   input,    width = 1,                                                .bvalid
		.ad9144_jesd204_link_management_bready                 (mm_interconnect_0_ad9144_jesd204_link_management_bready),           //  output,    width = 1,                                                .bready
		.ad9144_jesd204_link_management_araddr                 (mm_interconnect_0_ad9144_jesd204_link_management_araddr),           //  output,   width = 12,                                                .araddr
		.ad9144_jesd204_link_management_arprot                 (mm_interconnect_0_ad9144_jesd204_link_management_arprot),           //  output,    width = 3,                                                .arprot
		.ad9144_jesd204_link_management_arvalid                (mm_interconnect_0_ad9144_jesd204_link_management_arvalid),          //  output,    width = 1,                                                .arvalid
		.ad9144_jesd204_link_management_arready                (mm_interconnect_0_ad9144_jesd204_link_management_arready),          //   input,    width = 1,                                                .arready
		.ad9144_jesd204_link_management_rdata                  (mm_interconnect_0_ad9144_jesd204_link_management_rdata),            //   input,   width = 32,                                                .rdata
		.ad9144_jesd204_link_management_rresp                  (mm_interconnect_0_ad9144_jesd204_link_management_rresp),            //   input,    width = 2,                                                .rresp
		.ad9144_jesd204_link_management_rvalid                 (mm_interconnect_0_ad9144_jesd204_link_management_rvalid),           //   input,    width = 1,                                                .rvalid
		.ad9144_jesd204_link_management_rready                 (mm_interconnect_0_ad9144_jesd204_link_management_rready),           //  output,    width = 1,                                                .rready
		.ad9680_jesd204_link_management_awaddr                 (mm_interconnect_0_ad9680_jesd204_link_management_awaddr),           //  output,   width = 12,                  ad9680_jesd204_link_management.awaddr
		.ad9680_jesd204_link_management_awprot                 (mm_interconnect_0_ad9680_jesd204_link_management_awprot),           //  output,    width = 3,                                                .awprot
		.ad9680_jesd204_link_management_awvalid                (mm_interconnect_0_ad9680_jesd204_link_management_awvalid),          //  output,    width = 1,                                                .awvalid
		.ad9680_jesd204_link_management_awready                (mm_interconnect_0_ad9680_jesd204_link_management_awready),          //   input,    width = 1,                                                .awready
		.ad9680_jesd204_link_management_wdata                  (mm_interconnect_0_ad9680_jesd204_link_management_wdata),            //  output,   width = 32,                                                .wdata
		.ad9680_jesd204_link_management_wstrb                  (mm_interconnect_0_ad9680_jesd204_link_management_wstrb),            //  output,    width = 4,                                                .wstrb
		.ad9680_jesd204_link_management_wvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_wvalid),           //  output,    width = 1,                                                .wvalid
		.ad9680_jesd204_link_management_wready                 (mm_interconnect_0_ad9680_jesd204_link_management_wready),           //   input,    width = 1,                                                .wready
		.ad9680_jesd204_link_management_bresp                  (mm_interconnect_0_ad9680_jesd204_link_management_bresp),            //   input,    width = 2,                                                .bresp
		.ad9680_jesd204_link_management_bvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_bvalid),           //   input,    width = 1,                                                .bvalid
		.ad9680_jesd204_link_management_bready                 (mm_interconnect_0_ad9680_jesd204_link_management_bready),           //  output,    width = 1,                                                .bready
		.ad9680_jesd204_link_management_araddr                 (mm_interconnect_0_ad9680_jesd204_link_management_araddr),           //  output,   width = 12,                                                .araddr
		.ad9680_jesd204_link_management_arprot                 (mm_interconnect_0_ad9680_jesd204_link_management_arprot),           //  output,    width = 3,                                                .arprot
		.ad9680_jesd204_link_management_arvalid                (mm_interconnect_0_ad9680_jesd204_link_management_arvalid),          //  output,    width = 1,                                                .arvalid
		.ad9680_jesd204_link_management_arready                (mm_interconnect_0_ad9680_jesd204_link_management_arready),          //   input,    width = 1,                                                .arready
		.ad9680_jesd204_link_management_rdata                  (mm_interconnect_0_ad9680_jesd204_link_management_rdata),            //   input,   width = 32,                                                .rdata
		.ad9680_jesd204_link_management_rresp                  (mm_interconnect_0_ad9680_jesd204_link_management_rresp),            //   input,    width = 2,                                                .rresp
		.ad9680_jesd204_link_management_rvalid                 (mm_interconnect_0_ad9680_jesd204_link_management_rvalid),           //   input,    width = 1,                                                .rvalid
		.ad9680_jesd204_link_management_rready                 (mm_interconnect_0_ad9680_jesd204_link_management_rready),           //  output,    width = 1,                                                .rready
		.ad9144_jesd204_link_reconfig_awaddr                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_awaddr),             //  output,   width = 14,                    ad9144_jesd204_link_reconfig.awaddr
		.ad9144_jesd204_link_reconfig_awprot                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_awprot),             //  output,    width = 3,                                                .awprot
		.ad9144_jesd204_link_reconfig_awvalid                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_awvalid),            //  output,    width = 1,                                                .awvalid
		.ad9144_jesd204_link_reconfig_awready                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_awready),            //   input,    width = 1,                                                .awready
		.ad9144_jesd204_link_reconfig_wdata                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_wdata),              //  output,   width = 32,                                                .wdata
		.ad9144_jesd204_link_reconfig_wstrb                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_wstrb),              //  output,    width = 4,                                                .wstrb
		.ad9144_jesd204_link_reconfig_wvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_wvalid),             //  output,    width = 1,                                                .wvalid
		.ad9144_jesd204_link_reconfig_wready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_wready),             //   input,    width = 1,                                                .wready
		.ad9144_jesd204_link_reconfig_bresp                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_bresp),              //   input,    width = 2,                                                .bresp
		.ad9144_jesd204_link_reconfig_bvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_bvalid),             //   input,    width = 1,                                                .bvalid
		.ad9144_jesd204_link_reconfig_bready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_bready),             //  output,    width = 1,                                                .bready
		.ad9144_jesd204_link_reconfig_araddr                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_araddr),             //  output,   width = 14,                                                .araddr
		.ad9144_jesd204_link_reconfig_arprot                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_arprot),             //  output,    width = 3,                                                .arprot
		.ad9144_jesd204_link_reconfig_arvalid                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_arvalid),            //  output,    width = 1,                                                .arvalid
		.ad9144_jesd204_link_reconfig_arready                  (mm_interconnect_0_ad9144_jesd204_link_reconfig_arready),            //   input,    width = 1,                                                .arready
		.ad9144_jesd204_link_reconfig_rdata                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_rdata),              //   input,   width = 32,                                                .rdata
		.ad9144_jesd204_link_reconfig_rresp                    (mm_interconnect_0_ad9144_jesd204_link_reconfig_rresp),              //   input,    width = 2,                                                .rresp
		.ad9144_jesd204_link_reconfig_rvalid                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_rvalid),             //   input,    width = 1,                                                .rvalid
		.ad9144_jesd204_link_reconfig_rready                   (mm_interconnect_0_ad9144_jesd204_link_reconfig_rready),             //  output,    width = 1,                                                .rready
		.ad9680_jesd204_link_reconfig_awaddr                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_awaddr),             //  output,   width = 14,                    ad9680_jesd204_link_reconfig.awaddr
		.ad9680_jesd204_link_reconfig_awprot                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_awprot),             //  output,    width = 3,                                                .awprot
		.ad9680_jesd204_link_reconfig_awvalid                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_awvalid),            //  output,    width = 1,                                                .awvalid
		.ad9680_jesd204_link_reconfig_awready                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_awready),            //   input,    width = 1,                                                .awready
		.ad9680_jesd204_link_reconfig_wdata                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_wdata),              //  output,   width = 32,                                                .wdata
		.ad9680_jesd204_link_reconfig_wstrb                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_wstrb),              //  output,    width = 4,                                                .wstrb
		.ad9680_jesd204_link_reconfig_wvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_wvalid),             //  output,    width = 1,                                                .wvalid
		.ad9680_jesd204_link_reconfig_wready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_wready),             //   input,    width = 1,                                                .wready
		.ad9680_jesd204_link_reconfig_bresp                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_bresp),              //   input,    width = 2,                                                .bresp
		.ad9680_jesd204_link_reconfig_bvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_bvalid),             //   input,    width = 1,                                                .bvalid
		.ad9680_jesd204_link_reconfig_bready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_bready),             //  output,    width = 1,                                                .bready
		.ad9680_jesd204_link_reconfig_araddr                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_araddr),             //  output,   width = 14,                                                .araddr
		.ad9680_jesd204_link_reconfig_arprot                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_arprot),             //  output,    width = 3,                                                .arprot
		.ad9680_jesd204_link_reconfig_arvalid                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_arvalid),            //  output,    width = 1,                                                .arvalid
		.ad9680_jesd204_link_reconfig_arready                  (mm_interconnect_0_ad9680_jesd204_link_reconfig_arready),            //   input,    width = 1,                                                .arready
		.ad9680_jesd204_link_reconfig_rdata                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_rdata),              //   input,   width = 32,                                                .rdata
		.ad9680_jesd204_link_reconfig_rresp                    (mm_interconnect_0_ad9680_jesd204_link_reconfig_rresp),              //   input,    width = 2,                                                .rresp
		.ad9680_jesd204_link_reconfig_rvalid                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_rvalid),             //   input,    width = 1,                                                .rvalid
		.ad9680_jesd204_link_reconfig_rready                   (mm_interconnect_0_ad9680_jesd204_link_reconfig_rready),             //  output,    width = 1,                                                .rready
		.ad9144_core_s_axi_awaddr                              (mm_interconnect_0_ad9144_core_s_axi_awaddr),                        //  output,   width = 16,                               ad9144_core_s_axi.awaddr
		.ad9144_core_s_axi_awprot                              (mm_interconnect_0_ad9144_core_s_axi_awprot),                        //  output,    width = 3,                                                .awprot
		.ad9144_core_s_axi_awvalid                             (mm_interconnect_0_ad9144_core_s_axi_awvalid),                       //  output,    width = 1,                                                .awvalid
		.ad9144_core_s_axi_awready                             (mm_interconnect_0_ad9144_core_s_axi_awready),                       //   input,    width = 1,                                                .awready
		.ad9144_core_s_axi_wdata                               (mm_interconnect_0_ad9144_core_s_axi_wdata),                         //  output,   width = 32,                                                .wdata
		.ad9144_core_s_axi_wstrb                               (mm_interconnect_0_ad9144_core_s_axi_wstrb),                         //  output,    width = 4,                                                .wstrb
		.ad9144_core_s_axi_wvalid                              (mm_interconnect_0_ad9144_core_s_axi_wvalid),                        //  output,    width = 1,                                                .wvalid
		.ad9144_core_s_axi_wready                              (mm_interconnect_0_ad9144_core_s_axi_wready),                        //   input,    width = 1,                                                .wready
		.ad9144_core_s_axi_bresp                               (mm_interconnect_0_ad9144_core_s_axi_bresp),                         //   input,    width = 2,                                                .bresp
		.ad9144_core_s_axi_bvalid                              (mm_interconnect_0_ad9144_core_s_axi_bvalid),                        //   input,    width = 1,                                                .bvalid
		.ad9144_core_s_axi_bready                              (mm_interconnect_0_ad9144_core_s_axi_bready),                        //  output,    width = 1,                                                .bready
		.ad9144_core_s_axi_araddr                              (mm_interconnect_0_ad9144_core_s_axi_araddr),                        //  output,   width = 16,                                                .araddr
		.ad9144_core_s_axi_arprot                              (mm_interconnect_0_ad9144_core_s_axi_arprot),                        //  output,    width = 3,                                                .arprot
		.ad9144_core_s_axi_arvalid                             (mm_interconnect_0_ad9144_core_s_axi_arvalid),                       //  output,    width = 1,                                                .arvalid
		.ad9144_core_s_axi_arready                             (mm_interconnect_0_ad9144_core_s_axi_arready),                       //   input,    width = 1,                                                .arready
		.ad9144_core_s_axi_rdata                               (mm_interconnect_0_ad9144_core_s_axi_rdata),                         //   input,   width = 32,                                                .rdata
		.ad9144_core_s_axi_rresp                               (mm_interconnect_0_ad9144_core_s_axi_rresp),                         //   input,    width = 2,                                                .rresp
		.ad9144_core_s_axi_rvalid                              (mm_interconnect_0_ad9144_core_s_axi_rvalid),                        //   input,    width = 1,                                                .rvalid
		.ad9144_core_s_axi_rready                              (mm_interconnect_0_ad9144_core_s_axi_rready),                        //  output,    width = 1,                                                .rready
		.ad9144_dma_s_axi_awaddr                               (mm_interconnect_0_ad9144_dma_s_axi_awaddr),                         //  output,   width = 12,                                ad9144_dma_s_axi.awaddr
		.ad9144_dma_s_axi_awprot                               (mm_interconnect_0_ad9144_dma_s_axi_awprot),                         //  output,    width = 3,                                                .awprot
		.ad9144_dma_s_axi_awvalid                              (mm_interconnect_0_ad9144_dma_s_axi_awvalid),                        //  output,    width = 1,                                                .awvalid
		.ad9144_dma_s_axi_awready                              (mm_interconnect_0_ad9144_dma_s_axi_awready),                        //   input,    width = 1,                                                .awready
		.ad9144_dma_s_axi_wdata                                (mm_interconnect_0_ad9144_dma_s_axi_wdata),                          //  output,   width = 32,                                                .wdata
		.ad9144_dma_s_axi_wstrb                                (mm_interconnect_0_ad9144_dma_s_axi_wstrb),                          //  output,    width = 4,                                                .wstrb
		.ad9144_dma_s_axi_wvalid                               (mm_interconnect_0_ad9144_dma_s_axi_wvalid),                         //  output,    width = 1,                                                .wvalid
		.ad9144_dma_s_axi_wready                               (mm_interconnect_0_ad9144_dma_s_axi_wready),                         //   input,    width = 1,                                                .wready
		.ad9144_dma_s_axi_bresp                                (mm_interconnect_0_ad9144_dma_s_axi_bresp),                          //   input,    width = 2,                                                .bresp
		.ad9144_dma_s_axi_bvalid                               (mm_interconnect_0_ad9144_dma_s_axi_bvalid),                         //   input,    width = 1,                                                .bvalid
		.ad9144_dma_s_axi_bready                               (mm_interconnect_0_ad9144_dma_s_axi_bready),                         //  output,    width = 1,                                                .bready
		.ad9144_dma_s_axi_araddr                               (mm_interconnect_0_ad9144_dma_s_axi_araddr),                         //  output,   width = 12,                                                .araddr
		.ad9144_dma_s_axi_arprot                               (mm_interconnect_0_ad9144_dma_s_axi_arprot),                         //  output,    width = 3,                                                .arprot
		.ad9144_dma_s_axi_arvalid                              (mm_interconnect_0_ad9144_dma_s_axi_arvalid),                        //  output,    width = 1,                                                .arvalid
		.ad9144_dma_s_axi_arready                              (mm_interconnect_0_ad9144_dma_s_axi_arready),                        //   input,    width = 1,                                                .arready
		.ad9144_dma_s_axi_rdata                                (mm_interconnect_0_ad9144_dma_s_axi_rdata),                          //   input,   width = 32,                                                .rdata
		.ad9144_dma_s_axi_rresp                                (mm_interconnect_0_ad9144_dma_s_axi_rresp),                          //   input,    width = 2,                                                .rresp
		.ad9144_dma_s_axi_rvalid                               (mm_interconnect_0_ad9144_dma_s_axi_rvalid),                         //   input,    width = 1,                                                .rvalid
		.ad9144_dma_s_axi_rready                               (mm_interconnect_0_ad9144_dma_s_axi_rready),                         //  output,    width = 1,                                                .rready
		.ad9680_dma_s_axi_awaddr                               (mm_interconnect_0_ad9680_dma_s_axi_awaddr),                         //  output,   width = 12,                                ad9680_dma_s_axi.awaddr
		.ad9680_dma_s_axi_awprot                               (mm_interconnect_0_ad9680_dma_s_axi_awprot),                         //  output,    width = 3,                                                .awprot
		.ad9680_dma_s_axi_awvalid                              (mm_interconnect_0_ad9680_dma_s_axi_awvalid),                        //  output,    width = 1,                                                .awvalid
		.ad9680_dma_s_axi_awready                              (mm_interconnect_0_ad9680_dma_s_axi_awready),                        //   input,    width = 1,                                                .awready
		.ad9680_dma_s_axi_wdata                                (mm_interconnect_0_ad9680_dma_s_axi_wdata),                          //  output,   width = 32,                                                .wdata
		.ad9680_dma_s_axi_wstrb                                (mm_interconnect_0_ad9680_dma_s_axi_wstrb),                          //  output,    width = 4,                                                .wstrb
		.ad9680_dma_s_axi_wvalid                               (mm_interconnect_0_ad9680_dma_s_axi_wvalid),                         //  output,    width = 1,                                                .wvalid
		.ad9680_dma_s_axi_wready                               (mm_interconnect_0_ad9680_dma_s_axi_wready),                         //   input,    width = 1,                                                .wready
		.ad9680_dma_s_axi_bresp                                (mm_interconnect_0_ad9680_dma_s_axi_bresp),                          //   input,    width = 2,                                                .bresp
		.ad9680_dma_s_axi_bvalid                               (mm_interconnect_0_ad9680_dma_s_axi_bvalid),                         //   input,    width = 1,                                                .bvalid
		.ad9680_dma_s_axi_bready                               (mm_interconnect_0_ad9680_dma_s_axi_bready),                         //  output,    width = 1,                                                .bready
		.ad9680_dma_s_axi_araddr                               (mm_interconnect_0_ad9680_dma_s_axi_araddr),                         //  output,   width = 12,                                                .araddr
		.ad9680_dma_s_axi_arprot                               (mm_interconnect_0_ad9680_dma_s_axi_arprot),                         //  output,    width = 3,                                                .arprot
		.ad9680_dma_s_axi_arvalid                              (mm_interconnect_0_ad9680_dma_s_axi_arvalid),                        //  output,    width = 1,                                                .arvalid
		.ad9680_dma_s_axi_arready                              (mm_interconnect_0_ad9680_dma_s_axi_arready),                        //   input,    width = 1,                                                .arready
		.ad9680_dma_s_axi_rdata                                (mm_interconnect_0_ad9680_dma_s_axi_rdata),                          //   input,   width = 32,                                                .rdata
		.ad9680_dma_s_axi_rresp                                (mm_interconnect_0_ad9680_dma_s_axi_rresp),                          //   input,    width = 2,                                                .rresp
		.ad9680_dma_s_axi_rvalid                               (mm_interconnect_0_ad9680_dma_s_axi_rvalid),                         //   input,    width = 1,                                                .rvalid
		.ad9680_dma_s_axi_rready                               (mm_interconnect_0_ad9680_dma_s_axi_rready),                         //  output,    width = 1,                                                .rready
		.ad9680_core_s_axi_awaddr                              (mm_interconnect_0_ad9680_core_s_axi_awaddr),                        //  output,   width = 16,                               ad9680_core_s_axi.awaddr
		.ad9680_core_s_axi_awprot                              (mm_interconnect_0_ad9680_core_s_axi_awprot),                        //  output,    width = 3,                                                .awprot
		.ad9680_core_s_axi_awvalid                             (mm_interconnect_0_ad9680_core_s_axi_awvalid),                       //  output,    width = 1,                                                .awvalid
		.ad9680_core_s_axi_awready                             (mm_interconnect_0_ad9680_core_s_axi_awready),                       //   input,    width = 1,                                                .awready
		.ad9680_core_s_axi_wdata                               (mm_interconnect_0_ad9680_core_s_axi_wdata),                         //  output,   width = 32,                                                .wdata
		.ad9680_core_s_axi_wstrb                               (mm_interconnect_0_ad9680_core_s_axi_wstrb),                         //  output,    width = 4,                                                .wstrb
		.ad9680_core_s_axi_wvalid                              (mm_interconnect_0_ad9680_core_s_axi_wvalid),                        //  output,    width = 1,                                                .wvalid
		.ad9680_core_s_axi_wready                              (mm_interconnect_0_ad9680_core_s_axi_wready),                        //   input,    width = 1,                                                .wready
		.ad9680_core_s_axi_bresp                               (mm_interconnect_0_ad9680_core_s_axi_bresp),                         //   input,    width = 2,                                                .bresp
		.ad9680_core_s_axi_bvalid                              (mm_interconnect_0_ad9680_core_s_axi_bvalid),                        //   input,    width = 1,                                                .bvalid
		.ad9680_core_s_axi_bready                              (mm_interconnect_0_ad9680_core_s_axi_bready),                        //  output,    width = 1,                                                .bready
		.ad9680_core_s_axi_araddr                              (mm_interconnect_0_ad9680_core_s_axi_araddr),                        //  output,   width = 16,                                                .araddr
		.ad9680_core_s_axi_arprot                              (mm_interconnect_0_ad9680_core_s_axi_arprot),                        //  output,    width = 3,                                                .arprot
		.ad9680_core_s_axi_arvalid                             (mm_interconnect_0_ad9680_core_s_axi_arvalid),                       //  output,    width = 1,                                                .arvalid
		.ad9680_core_s_axi_arready                             (mm_interconnect_0_ad9680_core_s_axi_arready),                       //   input,    width = 1,                                                .arready
		.ad9680_core_s_axi_rdata                               (mm_interconnect_0_ad9680_core_s_axi_rdata),                         //   input,   width = 32,                                                .rdata
		.ad9680_core_s_axi_rresp                               (mm_interconnect_0_ad9680_core_s_axi_rresp),                         //   input,    width = 2,                                                .rresp
		.ad9680_core_s_axi_rvalid                              (mm_interconnect_0_ad9680_core_s_axi_rvalid),                        //   input,    width = 1,                                                .rvalid
		.ad9680_core_s_axi_rready                              (mm_interconnect_0_ad9680_core_s_axi_rready),                        //  output,    width = 1,                                                .rready
		.mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                    //   input,    width = 1, mcu_subsystem_cpu_0_reset_reset_bridge_in_reset.reset
		.bridge_3_s0_reset_reset_bridge_in_reset_reset         (rst_controller_006_reset_out_reset),                                //   input,    width = 1,         bridge_3_s0_reset_reset_bridge_in_reset.reset
		.jtag_uart_0_reset_reset_bridge_in_reset_reset         (rst_controller_003_reset_out_reset),                                //   input,    width = 1,         jtag_uart_0_reset_reset_bridge_in_reset.reset
		.bridge_2_s0_reset_reset_bridge_in_reset_reset         (rst_controller_005_reset_out_reset),                                //   input,    width = 1,         bridge_2_s0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                  (clock_in_out_clk_clk),                                              //   input,    width = 1,                                clock_in_out_clk.clk
		.ddr3_emif_usr_clk_clk                                 (ddr3_emif_usr_clk_clk),                                             //   input,    width = 1,                               ddr3_emif_usr_clk.clk
		.iopll_0_outclk0_clk                                   (iopll_0_outclk0_clk)                                                //   input,    width = 1,                                 iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_wtppfva mm_interconnect_1 (
		.bridge_2_m0_address                                  (bridge_2_m0_address),                                        //   input,   width = 6,                                    bridge_2_m0.address
		.bridge_2_m0_waitrequest                              (bridge_2_m0_waitrequest),                                    //  output,   width = 1,                                               .waitrequest
		.bridge_2_m0_burstcount                               (bridge_2_m0_burstcount),                                     //   input,   width = 1,                                               .burstcount
		.bridge_2_m0_byteenable                               (bridge_2_m0_byteenable),                                     //   input,   width = 4,                                               .byteenable
		.bridge_2_m0_read                                     (bridge_2_m0_read),                                           //   input,   width = 1,                                               .read
		.bridge_2_m0_readdata                                 (bridge_2_m0_readdata),                                       //  output,  width = 32,                                               .readdata
		.bridge_2_m0_readdatavalid                            (bridge_2_m0_readdatavalid),                                  //  output,   width = 1,                                               .readdatavalid
		.bridge_2_m0_write                                    (bridge_2_m0_write),                                          //   input,   width = 1,                                               .write
		.bridge_2_m0_writedata                                (bridge_2_m0_writedata),                                      //   input,  width = 32,                                               .writedata
		.bridge_2_m0_debugaccess                              (bridge_2_m0_debugaccess),                                    //   input,   width = 1,                                               .debugaccess
		.qspi_controller2_0_avl_csr_address                   (mm_interconnect_1_qspi_controller2_0_avl_csr_address),       //  output,   width = 4,                     qspi_controller2_0_avl_csr.address
		.qspi_controller2_0_avl_csr_write                     (mm_interconnect_1_qspi_controller2_0_avl_csr_write),         //  output,   width = 1,                                               .write
		.qspi_controller2_0_avl_csr_read                      (mm_interconnect_1_qspi_controller2_0_avl_csr_read),          //  output,   width = 1,                                               .read
		.qspi_controller2_0_avl_csr_readdata                  (mm_interconnect_1_qspi_controller2_0_avl_csr_readdata),      //   input,  width = 32,                                               .readdata
		.qspi_controller2_0_avl_csr_writedata                 (mm_interconnect_1_qspi_controller2_0_avl_csr_writedata),     //  output,  width = 32,                                               .writedata
		.qspi_controller2_0_avl_csr_readdatavalid             (mm_interconnect_1_qspi_controller2_0_avl_csr_readdatavalid), //   input,   width = 1,                                               .readdatavalid
		.qspi_controller2_0_avl_csr_waitrequest               (mm_interconnect_1_qspi_controller2_0_avl_csr_waitrequest),   //   input,   width = 1,                                               .waitrequest
		.bridge_2_m0_reset_reset_bridge_in_reset_reset        (rst_controller_reset_out_reset),                             //   input,   width = 1,        bridge_2_m0_reset_reset_bridge_in_reset.reset
		.qspi_controller2_0_reset_reset_bridge_in_reset_reset (rst_controller_005_reset_out_reset),                         //   input,   width = 1, qspi_controller2_0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                 (clock_in_out_clk_clk),                                       //   input,   width = 1,                               clock_in_out_clk.clk
		.iopll_0_outclk0_clk                                  (iopll_0_outclk0_clk)                                         //   input,   width = 1,                                iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_orit43a mm_interconnect_2 (
		.bridge_3_m0_address                           (bridge_3_m0_address),                                        //   input,  width = 27,                             bridge_3_m0.address
		.bridge_3_m0_waitrequest                       (bridge_3_m0_waitrequest),                                    //  output,   width = 1,                                        .waitrequest
		.bridge_3_m0_burstcount                        (bridge_3_m0_burstcount),                                     //   input,   width = 1,                                        .burstcount
		.bridge_3_m0_byteenable                        (bridge_3_m0_byteenable),                                     //   input,   width = 4,                                        .byteenable
		.bridge_3_m0_read                              (bridge_3_m0_read),                                           //   input,   width = 1,                                        .read
		.bridge_3_m0_readdata                          (bridge_3_m0_readdata),                                       //  output,  width = 32,                                        .readdata
		.bridge_3_m0_readdatavalid                     (bridge_3_m0_readdatavalid),                                  //  output,   width = 1,                                        .readdatavalid
		.bridge_3_m0_write                             (bridge_3_m0_write),                                          //   input,   width = 1,                                        .write
		.bridge_3_m0_writedata                         (bridge_3_m0_writedata),                                      //   input,  width = 32,                                        .writedata
		.bridge_3_m0_debugaccess                       (bridge_3_m0_debugaccess),                                    //   input,   width = 1,                                        .debugaccess
		.qspi_controller2_0_avl_mem_address            (mm_interconnect_2_qspi_controller2_0_avl_mem_address),       //  output,  width = 25,              qspi_controller2_0_avl_mem.address
		.qspi_controller2_0_avl_mem_write              (mm_interconnect_2_qspi_controller2_0_avl_mem_write),         //  output,   width = 1,                                        .write
		.qspi_controller2_0_avl_mem_read               (mm_interconnect_2_qspi_controller2_0_avl_mem_read),          //  output,   width = 1,                                        .read
		.qspi_controller2_0_avl_mem_readdata           (mm_interconnect_2_qspi_controller2_0_avl_mem_readdata),      //   input,  width = 32,                                        .readdata
		.qspi_controller2_0_avl_mem_writedata          (mm_interconnect_2_qspi_controller2_0_avl_mem_writedata),     //  output,  width = 32,                                        .writedata
		.qspi_controller2_0_avl_mem_burstcount         (mm_interconnect_2_qspi_controller2_0_avl_mem_burstcount),    //  output,   width = 7,                                        .burstcount
		.qspi_controller2_0_avl_mem_byteenable         (mm_interconnect_2_qspi_controller2_0_avl_mem_byteenable),    //  output,   width = 4,                                        .byteenable
		.qspi_controller2_0_avl_mem_readdatavalid      (mm_interconnect_2_qspi_controller2_0_avl_mem_readdatavalid), //   input,   width = 1,                                        .readdatavalid
		.qspi_controller2_0_avl_mem_waitrequest        (mm_interconnect_2_qspi_controller2_0_avl_mem_waitrequest),   //   input,   width = 1,                                        .waitrequest
		.bridge_3_m0_reset_reset_bridge_in_reset_reset (rst_controller_005_reset_out_reset),                         //   input,   width = 1, bridge_3_m0_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk0_clk                           (iopll_0_outclk0_clk)                                         //   input,   width = 1,                         iopll_0_outclk0.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_uxeiifq mm_interconnect_3 (
		.bridge_0_m0_address                           (bridge_0_m0_address),                             //   input,   width = 31,                             bridge_0_m0.address
		.bridge_0_m0_waitrequest                       (bridge_0_m0_waitrequest),                         //  output,    width = 1,                                        .waitrequest
		.bridge_0_m0_burstcount                        (bridge_0_m0_burstcount),                          //   input,    width = 5,                                        .burstcount
		.bridge_0_m0_byteenable                        (bridge_0_m0_byteenable),                          //   input,   width = 32,                                        .byteenable
		.bridge_0_m0_read                              (bridge_0_m0_read),                                //   input,    width = 1,                                        .read
		.bridge_0_m0_readdata                          (bridge_0_m0_readdata),                            //  output,  width = 256,                                        .readdata
		.bridge_0_m0_readdatavalid                     (bridge_0_m0_readdatavalid),                       //  output,    width = 1,                                        .readdatavalid
		.bridge_0_m0_write                             (bridge_0_m0_write),                               //   input,    width = 1,                                        .write
		.bridge_0_m0_writedata                         (bridge_0_m0_writedata),                           //   input,  width = 256,                                        .writedata
		.bridge_0_m0_debugaccess                       (bridge_0_m0_debugaccess),                         //   input,    width = 1,                                        .debugaccess
		.ddr3_ctrl_amm_0_address                       (mm_interconnect_3_ddr3_ctrl_amm_0_address),       //  output,   width = 26,                         ddr3_ctrl_amm_0.address
		.ddr3_ctrl_amm_0_write                         (mm_interconnect_3_ddr3_ctrl_amm_0_write),         //  output,    width = 1,                                        .write
		.ddr3_ctrl_amm_0_read                          (mm_interconnect_3_ddr3_ctrl_amm_0_read),          //  output,    width = 1,                                        .read
		.ddr3_ctrl_amm_0_readdata                      (mm_interconnect_3_ddr3_ctrl_amm_0_readdata),      //   input,  width = 256,                                        .readdata
		.ddr3_ctrl_amm_0_writedata                     (mm_interconnect_3_ddr3_ctrl_amm_0_writedata),     //  output,  width = 256,                                        .writedata
		.ddr3_ctrl_amm_0_burstcount                    (mm_interconnect_3_ddr3_ctrl_amm_0_burstcount),    //  output,    width = 7,                                        .burstcount
		.ddr3_ctrl_amm_0_byteenable                    (mm_interconnect_3_ddr3_ctrl_amm_0_byteenable),    //  output,   width = 32,                                        .byteenable
		.ddr3_ctrl_amm_0_readdatavalid                 (mm_interconnect_3_ddr3_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                        .readdatavalid
		.ddr3_ctrl_amm_0_waitrequest                   (~mm_interconnect_3_ddr3_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                        .waitrequest
		.bridge_0_m0_reset_reset_bridge_in_reset_reset (rst_controller_004_reset_out_reset),              //   input,    width = 1, bridge_0_m0_reset_reset_bridge_in_reset.reset
		.ddr3_emif_usr_clk_clk                         (ddr3_emif_usr_clk_clk)                            //   input,    width = 1,                       ddr3_emif_usr_clk.clk
	);

	mcu_subsystem_altera_mm_interconnect_181_sna24ra mm_interconnect_4 (
		.bridge_1_m0_address                           (bridge_1_m0_address),                                        //   input,  width = 12,                             bridge_1_m0.address
		.bridge_1_m0_waitrequest                       (bridge_1_m0_waitrequest),                                    //  output,   width = 1,                                        .waitrequest
		.bridge_1_m0_burstcount                        (bridge_1_m0_burstcount),                                     //   input,   width = 3,                                        .burstcount
		.bridge_1_m0_byteenable                        (bridge_1_m0_byteenable),                                     //   input,   width = 4,                                        .byteenable
		.bridge_1_m0_read                              (bridge_1_m0_read),                                           //   input,   width = 1,                                        .read
		.bridge_1_m0_readdata                          (bridge_1_m0_readdata),                                       //  output,  width = 32,                                        .readdata
		.bridge_1_m0_readdatavalid                     (bridge_1_m0_readdatavalid),                                  //  output,   width = 1,                                        .readdatavalid
		.bridge_1_m0_write                             (bridge_1_m0_write),                                          //   input,   width = 1,                                        .write
		.bridge_1_m0_writedata                         (bridge_1_m0_writedata),                                      //   input,  width = 32,                                        .writedata
		.bridge_1_m0_debugaccess                       (bridge_1_m0_debugaccess),                                    //   input,   width = 1,                                        .debugaccess
		.ddr3_ctrl_mmr_slave_0_address                 (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_address),            //  output,  width = 10,                   ddr3_ctrl_mmr_slave_0.address
		.ddr3_ctrl_mmr_slave_0_write                   (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_write),              //  output,   width = 1,                                        .write
		.ddr3_ctrl_mmr_slave_0_read                    (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_read),               //  output,   width = 1,                                        .read
		.ddr3_ctrl_mmr_slave_0_readdata                (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdata),           //   input,  width = 32,                                        .readdata
		.ddr3_ctrl_mmr_slave_0_writedata               (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_writedata),          //  output,  width = 32,                                        .writedata
		.ddr3_ctrl_mmr_slave_0_beginbursttransfer      (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_beginbursttransfer), //  output,   width = 1,                                        .beginbursttransfer
		.ddr3_ctrl_mmr_slave_0_burstcount              (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_burstcount),         //  output,   width = 2,                                        .burstcount
		.ddr3_ctrl_mmr_slave_0_readdatavalid           (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_readdatavalid),      //   input,   width = 1,                                        .readdatavalid
		.ddr3_ctrl_mmr_slave_0_waitrequest             (mm_interconnect_4_ddr3_ctrl_mmr_slave_0_waitrequest),        //   input,   width = 1,                                        .waitrequest
		.bridge_1_m0_reset_reset_bridge_in_reset_reset (rst_controller_004_reset_out_reset),                         //   input,   width = 1, bridge_1_m0_reset_reset_bridge_in_reset.reset
		.ddr3_emif_usr_clk_clk                         (ddr3_emif_usr_clk_clk)                                       //   input,   width = 1,                       ddr3_emif_usr_clk.clk
	);

	mcu_subsystem_altera_irq_mapper_181_imutuzy irq_mapper (
		.clk            (clock_in_out_clk_clk),           //   input,   width = 1,        clk.clk
		.reset          (rst_controller_reset_out_reset), //   input,   width = 1,  clk_reset.reset
		.receiver0_irq  (irq_mapper_receiver0_irq),       //   input,   width = 1,  receiver0.irq
		.receiver1_irq  (irq_mapper_receiver1_irq),       //   input,   width = 1,  receiver1.irq
		.receiver2_irq  (irq_mapper_receiver2_irq),       //   input,   width = 1,  receiver2.irq
		.receiver3_irq  (irq_mapper_receiver3_irq),       //   input,   width = 1,  receiver3.irq
		.receiver4_irq  (irq_mapper_receiver4_irq),       //   input,   width = 1,  receiver4.irq
		.receiver5_irq  (irq_mapper_receiver5_irq),       //   input,   width = 1,  receiver5.irq
		.receiver6_irq  (irq_mapper_receiver6_irq),       //   input,   width = 1,  receiver6.irq
		.receiver7_irq  (irq_mapper_receiver7_irq),       //   input,   width = 1,  receiver7.irq
		.receiver8_irq  (irq_mapper_receiver8_irq),       //   input,   width = 1,  receiver8.irq
		.receiver9_irq  (irq_mapper_receiver9_irq),       //   input,   width = 1,  receiver9.irq
		.receiver10_irq (irq_mapper_receiver10_irq),      //   input,   width = 1, receiver10.irq
		.receiver11_irq (irq_mapper_receiver11_irq),      //   input,   width = 1, receiver11.irq
		.receiver12_irq (irq_mapper_receiver12_irq),      //   input,   width = 1, receiver12.irq
		.sender_irq     (mcu_subsystem_cpu_0_irq_irq)     //  output,  width = 32,     sender.irq
	);

	mcu_subsystem_altera_irq_clock_crosser_181_76b3i7y #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (iopll_0_outclk0_clk),                //   input,  width = 1,       receiver_clk.clk
		.sender_clk     (clock_in_out_clk_clk),               //   input,  width = 1,         sender_clk.clk
		.receiver_reset (rst_controller_005_reset_out_reset), //   input,  width = 1, receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   input,  width = 1,   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //   input,  width = 1,           receiver.irq
		.sender_irq     (irq_mapper_receiver4_irq)            //  output,  width = 1,             sender.irq
	);

	mcu_subsystem_altera_avalon_st_adapter_181_tcpvwli #(
		.inBitsPerSymbol (128),
		.inUsePackets    (0),
		.inDataWidth     (128),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (0),
		.inReadyLatency  (0),
		.outDataWidth    (128),
		.outChannelWidth (0),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ad9680_jesd204_link_clk_clk),        //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset (rst_controller_002_reset_out_reset), //   input,    width = 1, in_rst_0.reset
		.in_0_data      (ad9680_jesd204_link_data_data),      //   input,  width = 128,     in_0.data
		.in_0_valid     (ad9680_jesd204_link_data_valid),     //   input,    width = 1,         .valid
		.out_0_data     (avalon_st_adapter_out_0_data),       //  output,  width = 128,    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),      //  output,    width = 1,         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready)       //   input,    width = 1,         .ready
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),                          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),                //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),            //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (ad9144_jesd204_link_reset_reset),    //   input,  width = 1, reset_in0.reset
		.clk            (ad9144_jesd204_link_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (ad9680_jesd204_link_clk_clk),                   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~reset_in_out_reset_reset),          //   input,  width = 1, reset_in0.reset
		.clk            (clock_in_out_clk_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~ddr3_emif_usr_reset_n_reset),       //   input,  width = 1, reset_in0.reset
		.clk            (ddr3_emif_usr_clk_clk),              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (iopll_0_outclk0_clk),                           //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (ddr3_emif_usr_clk_clk),                         //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_007 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (),                                              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_007_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_008 (
		.reset_in0      (mcu_subsystem_cpu_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (~reset_in_out_reset_reset),                     //   input,  width = 1, reset_in1.reset
		.clk            (),                                              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_008_reset_out_reset),            //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

endmodule
