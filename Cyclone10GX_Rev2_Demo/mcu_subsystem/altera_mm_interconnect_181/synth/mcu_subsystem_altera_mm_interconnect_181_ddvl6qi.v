// mcu_subsystem_altera_mm_interconnect_181_ddvl6qi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module mcu_subsystem_altera_mm_interconnect_181_ddvl6qi (
		input  wire [31:0]  mcu_subsystem_cpu_0_data_master_address,               //                 mcu_subsystem_cpu_0_data_master.address
		output wire         mcu_subsystem_cpu_0_data_master_waitrequest,           //                                                .waitrequest
		input  wire [3:0]   mcu_subsystem_cpu_0_data_master_byteenable,            //                                                .byteenable
		input  wire         mcu_subsystem_cpu_0_data_master_read,                  //                                                .read
		output wire [31:0]  mcu_subsystem_cpu_0_data_master_readdata,              //                                                .readdata
		output wire         mcu_subsystem_cpu_0_data_master_readdatavalid,         //                                                .readdatavalid
		input  wire         mcu_subsystem_cpu_0_data_master_write,                 //                                                .write
		input  wire [31:0]  mcu_subsystem_cpu_0_data_master_writedata,             //                                                .writedata
		input  wire         mcu_subsystem_cpu_0_data_master_debugaccess,           //                                                .debugaccess
		input  wire [31:0]  mcu_subsystem_cpu_0_instruction_master_address,        //          mcu_subsystem_cpu_0_instruction_master.address
		output wire         mcu_subsystem_cpu_0_instruction_master_waitrequest,    //                                                .waitrequest
		input  wire         mcu_subsystem_cpu_0_instruction_master_read,           //                                                .read
		output wire [31:0]  mcu_subsystem_cpu_0_instruction_master_readdata,       //                                                .readdata
		output wire         mcu_subsystem_cpu_0_instruction_master_readdatavalid,  //                                                .readdatavalid
		input  wire [31:0]  ad9680_dma_m_dest_axi_awaddr,                          //                           ad9680_dma_m_dest_axi.awaddr
		input  wire [7:0]   ad9680_dma_m_dest_axi_awlen,                           //                                                .awlen
		input  wire [2:0]   ad9680_dma_m_dest_axi_awsize,                          //                                                .awsize
		input  wire [1:0]   ad9680_dma_m_dest_axi_awburst,                         //                                                .awburst
		input  wire [3:0]   ad9680_dma_m_dest_axi_awcache,                         //                                                .awcache
		input  wire [2:0]   ad9680_dma_m_dest_axi_awprot,                          //                                                .awprot
		input  wire         ad9680_dma_m_dest_axi_awvalid,                         //                                                .awvalid
		output wire         ad9680_dma_m_dest_axi_awready,                         //                                                .awready
		input  wire [127:0] ad9680_dma_m_dest_axi_wdata,                           //                                                .wdata
		input  wire [15:0]  ad9680_dma_m_dest_axi_wstrb,                           //                                                .wstrb
		input  wire         ad9680_dma_m_dest_axi_wlast,                           //                                                .wlast
		input  wire         ad9680_dma_m_dest_axi_wvalid,                          //                                                .wvalid
		output wire         ad9680_dma_m_dest_axi_wready,                          //                                                .wready
		output wire [1:0]   ad9680_dma_m_dest_axi_bresp,                           //                                                .bresp
		output wire         ad9680_dma_m_dest_axi_bvalid,                          //                                                .bvalid
		input  wire         ad9680_dma_m_dest_axi_bready,                          //                                                .bready
		input  wire [31:0]  ad9680_dma_m_dest_axi_araddr,                          //                                                .araddr
		input  wire [7:0]   ad9680_dma_m_dest_axi_arlen,                           //                                                .arlen
		input  wire [2:0]   ad9680_dma_m_dest_axi_arsize,                          //                                                .arsize
		input  wire [1:0]   ad9680_dma_m_dest_axi_arburst,                         //                                                .arburst
		input  wire [3:0]   ad9680_dma_m_dest_axi_arcache,                         //                                                .arcache
		input  wire [2:0]   ad9680_dma_m_dest_axi_arprot,                          //                                                .arprot
		input  wire         ad9680_dma_m_dest_axi_arvalid,                         //                                                .arvalid
		output wire         ad9680_dma_m_dest_axi_arready,                         //                                                .arready
		output wire [127:0] ad9680_dma_m_dest_axi_rdata,                           //                                                .rdata
		output wire [1:0]   ad9680_dma_m_dest_axi_rresp,                           //                                                .rresp
		output wire         ad9680_dma_m_dest_axi_rvalid,                          //                                                .rvalid
		input  wire         ad9680_dma_m_dest_axi_rready,                          //                                                .rready
		input  wire [31:0]  ad9144_dma_m_src_axi_awaddr,                           //                            ad9144_dma_m_src_axi.awaddr
		input  wire [7:0]   ad9144_dma_m_src_axi_awlen,                            //                                                .awlen
		input  wire [2:0]   ad9144_dma_m_src_axi_awsize,                           //                                                .awsize
		input  wire [1:0]   ad9144_dma_m_src_axi_awburst,                          //                                                .awburst
		input  wire [3:0]   ad9144_dma_m_src_axi_awcache,                          //                                                .awcache
		input  wire [2:0]   ad9144_dma_m_src_axi_awprot,                           //                                                .awprot
		input  wire         ad9144_dma_m_src_axi_awvalid,                          //                                                .awvalid
		output wire         ad9144_dma_m_src_axi_awready,                          //                                                .awready
		input  wire [127:0] ad9144_dma_m_src_axi_wdata,                            //                                                .wdata
		input  wire [15:0]  ad9144_dma_m_src_axi_wstrb,                            //                                                .wstrb
		input  wire         ad9144_dma_m_src_axi_wlast,                            //                                                .wlast
		input  wire         ad9144_dma_m_src_axi_wvalid,                           //                                                .wvalid
		output wire         ad9144_dma_m_src_axi_wready,                           //                                                .wready
		output wire [1:0]   ad9144_dma_m_src_axi_bresp,                            //                                                .bresp
		output wire         ad9144_dma_m_src_axi_bvalid,                           //                                                .bvalid
		input  wire         ad9144_dma_m_src_axi_bready,                           //                                                .bready
		input  wire [31:0]  ad9144_dma_m_src_axi_araddr,                           //                                                .araddr
		input  wire [7:0]   ad9144_dma_m_src_axi_arlen,                            //                                                .arlen
		input  wire [2:0]   ad9144_dma_m_src_axi_arsize,                           //                                                .arsize
		input  wire [1:0]   ad9144_dma_m_src_axi_arburst,                          //                                                .arburst
		input  wire [3:0]   ad9144_dma_m_src_axi_arcache,                          //                                                .arcache
		input  wire [2:0]   ad9144_dma_m_src_axi_arprot,                           //                                                .arprot
		input  wire         ad9144_dma_m_src_axi_arvalid,                          //                                                .arvalid
		output wire         ad9144_dma_m_src_axi_arready,                          //                                                .arready
		output wire [127:0] ad9144_dma_m_src_axi_rdata,                            //                                                .rdata
		output wire [1:0]   ad9144_dma_m_src_axi_rresp,                            //                                                .rresp
		output wire         ad9144_dma_m_src_axi_rlast,                            //                                                .rlast
		output wire         ad9144_dma_m_src_axi_rvalid,                           //                                                .rvalid
		input  wire         ad9144_dma_m_src_axi_rready,                           //                                                .rready
		input  wire [31:0]  phy_interlaken_1_phy_data_ctrl_m0_address,             //               phy_interlaken_1_phy_data_ctrl_m0.address
		output wire         phy_interlaken_1_phy_data_ctrl_m0_waitrequest,         //                                                .waitrequest
		input  wire         phy_interlaken_1_phy_data_ctrl_m0_read,                //                                                .read
		output wire [31:0]  phy_interlaken_1_phy_data_ctrl_m0_readdata,            //                                                .readdata
		output wire         phy_interlaken_1_phy_data_ctrl_m0_readdatavalid,       //                                                .readdatavalid
		input  wire         phy_interlaken_1_phy_data_ctrl_m0_write,               //                                                .write
		input  wire [31:0]  phy_interlaken_1_phy_data_ctrl_m0_writedata,           //                                                .writedata
		input  wire [31:0]  phy_interlaken_0_phy_data_ctrl_m0_address,             //               phy_interlaken_0_phy_data_ctrl_m0.address
		output wire         phy_interlaken_0_phy_data_ctrl_m0_waitrequest,         //                                                .waitrequest
		input  wire         phy_interlaken_0_phy_data_ctrl_m0_read,                //                                                .read
		output wire [31:0]  phy_interlaken_0_phy_data_ctrl_m0_readdata,            //                                                .readdata
		output wire         phy_interlaken_0_phy_data_ctrl_m0_readdatavalid,       //                                                .readdatavalid
		input  wire         phy_interlaken_0_phy_data_ctrl_m0_write,               //                                                .write
		input  wire [31:0]  phy_interlaken_0_phy_data_ctrl_m0_writedata,           //                                                .writedata
		output wire [0:0]   jtag_uart_0_avalon_jtag_slave_address,                 //                   jtag_uart_0_avalon_jtag_slave.address
		output wire         jtag_uart_0_avalon_jtag_slave_write,                   //                                                .write
		output wire         jtag_uart_0_avalon_jtag_slave_read,                    //                                                .read
		input  wire [31:0]  jtag_uart_0_avalon_jtag_slave_readdata,                //                                                .readdata
		output wire [31:0]  jtag_uart_0_avalon_jtag_slave_writedata,               //                                                .writedata
		input  wire         jtag_uart_0_avalon_jtag_slave_waitrequest,             //                                                .waitrequest
		output wire         jtag_uart_0_avalon_jtag_slave_chipselect,              //                                                .chipselect
		output wire [3:0]   i2c_csr_address,                                       //                                         i2c_csr.address
		output wire         i2c_csr_write,                                         //                                                .write
		output wire         i2c_csr_read,                                          //                                                .read
		input  wire [31:0]  i2c_csr_readdata,                                      //                                                .readdata
		output wire [31:0]  i2c_csr_writedata,                                     //                                                .writedata
		output wire [8:0]   mcu_subsystem_cpu_0_debug_mem_slave_address,           //             mcu_subsystem_cpu_0_debug_mem_slave.address
		output wire         mcu_subsystem_cpu_0_debug_mem_slave_write,             //                                                .write
		output wire         mcu_subsystem_cpu_0_debug_mem_slave_read,              //                                                .read
		input  wire [31:0]  mcu_subsystem_cpu_0_debug_mem_slave_readdata,          //                                                .readdata
		output wire [31:0]  mcu_subsystem_cpu_0_debug_mem_slave_writedata,         //                                                .writedata
		output wire [3:0]   mcu_subsystem_cpu_0_debug_mem_slave_byteenable,        //                                                .byteenable
		input  wire         mcu_subsystem_cpu_0_debug_mem_slave_waitrequest,       //                                                .waitrequest
		output wire         mcu_subsystem_cpu_0_debug_mem_slave_debugaccess,       //                                                .debugaccess
		output wire [9:0]   ad9144_jesd204_lane_pll_reconfig_address,              //                ad9144_jesd204_lane_pll_reconfig.address
		output wire         ad9144_jesd204_lane_pll_reconfig_write,                //                                                .write
		output wire         ad9144_jesd204_lane_pll_reconfig_read,                 //                                                .read
		input  wire [31:0]  ad9144_jesd204_lane_pll_reconfig_readdata,             //                                                .readdata
		output wire [31:0]  ad9144_jesd204_lane_pll_reconfig_writedata,            //                                                .writedata
		input  wire         ad9144_jesd204_lane_pll_reconfig_waitrequest,          //                                                .waitrequest
		output wire [9:0]   ad9144_jesd204_link_pll_reconfig_address,              //                ad9144_jesd204_link_pll_reconfig.address
		output wire         ad9144_jesd204_link_pll_reconfig_write,                //                                                .write
		output wire         ad9144_jesd204_link_pll_reconfig_read,                 //                                                .read
		input  wire [31:0]  ad9144_jesd204_link_pll_reconfig_readdata,             //                                                .readdata
		output wire [31:0]  ad9144_jesd204_link_pll_reconfig_writedata,            //                                                .writedata
		input  wire         ad9144_jesd204_link_pll_reconfig_waitrequest,          //                                                .waitrequest
		output wire [9:0]   ad9680_jesd204_link_pll_reconfig_address,              //                ad9680_jesd204_link_pll_reconfig.address
		output wire         ad9680_jesd204_link_pll_reconfig_write,                //                                                .write
		output wire         ad9680_jesd204_link_pll_reconfig_read,                 //                                                .read
		input  wire [31:0]  ad9680_jesd204_link_pll_reconfig_readdata,             //                                                .readdata
		output wire [31:0]  ad9680_jesd204_link_pll_reconfig_writedata,            //                                                .writedata
		input  wire         ad9680_jesd204_link_pll_reconfig_waitrequest,          //                                                .waitrequest
		output wire [7:0]   phy_interlaken_0_phy_data_ctrl_csr_s0_address,         //           phy_interlaken_0_phy_data_ctrl_csr_s0.address
		output wire         phy_interlaken_0_phy_data_ctrl_csr_s0_write,           //                                                .write
		output wire         phy_interlaken_0_phy_data_ctrl_csr_s0_read,            //                                                .read
		input  wire [31:0]  phy_interlaken_0_phy_data_ctrl_csr_s0_readdata,        //                                                .readdata
		output wire [31:0]  phy_interlaken_0_phy_data_ctrl_csr_s0_writedata,       //                                                .writedata
		input  wire         phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid,   //                                                .readdatavalid
		input  wire         phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest,     //                                                .waitrequest
		output wire [7:0]   phy_interlaken_1_phy_data_ctrl_csr_s0_address,         //           phy_interlaken_1_phy_data_ctrl_csr_s0.address
		output wire         phy_interlaken_1_phy_data_ctrl_csr_s0_write,           //                                                .write
		output wire         phy_interlaken_1_phy_data_ctrl_csr_s0_read,            //                                                .read
		input  wire [31:0]  phy_interlaken_1_phy_data_ctrl_csr_s0_readdata,        //                                                .readdata
		output wire [31:0]  phy_interlaken_1_phy_data_ctrl_csr_s0_writedata,       //                                                .writedata
		input  wire         phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid,   //                                                .readdatavalid
		input  wire         phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest,     //                                                .waitrequest
		output wire [9:0]   ad9144_jesd204_phy_reconfig_0_address,                 //                   ad9144_jesd204_phy_reconfig_0.address
		output wire         ad9144_jesd204_phy_reconfig_0_write,                   //                                                .write
		output wire         ad9144_jesd204_phy_reconfig_0_read,                    //                                                .read
		input  wire [31:0]  ad9144_jesd204_phy_reconfig_0_readdata,                //                                                .readdata
		output wire [31:0]  ad9144_jesd204_phy_reconfig_0_writedata,               //                                                .writedata
		input  wire         ad9144_jesd204_phy_reconfig_0_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9680_jesd204_phy_reconfig_0_address,                 //                   ad9680_jesd204_phy_reconfig_0.address
		output wire         ad9680_jesd204_phy_reconfig_0_write,                   //                                                .write
		output wire         ad9680_jesd204_phy_reconfig_0_read,                    //                                                .read
		input  wire [31:0]  ad9680_jesd204_phy_reconfig_0_readdata,                //                                                .readdata
		output wire [31:0]  ad9680_jesd204_phy_reconfig_0_writedata,               //                                                .writedata
		input  wire         ad9680_jesd204_phy_reconfig_0_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9144_jesd204_phy_reconfig_1_address,                 //                   ad9144_jesd204_phy_reconfig_1.address
		output wire         ad9144_jesd204_phy_reconfig_1_write,                   //                                                .write
		output wire         ad9144_jesd204_phy_reconfig_1_read,                    //                                                .read
		input  wire [31:0]  ad9144_jesd204_phy_reconfig_1_readdata,                //                                                .readdata
		output wire [31:0]  ad9144_jesd204_phy_reconfig_1_writedata,               //                                                .writedata
		input  wire         ad9144_jesd204_phy_reconfig_1_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9680_jesd204_phy_reconfig_1_address,                 //                   ad9680_jesd204_phy_reconfig_1.address
		output wire         ad9680_jesd204_phy_reconfig_1_write,                   //                                                .write
		output wire         ad9680_jesd204_phy_reconfig_1_read,                    //                                                .read
		input  wire [31:0]  ad9680_jesd204_phy_reconfig_1_readdata,                //                                                .readdata
		output wire [31:0]  ad9680_jesd204_phy_reconfig_1_writedata,               //                                                .writedata
		input  wire         ad9680_jesd204_phy_reconfig_1_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9144_jesd204_phy_reconfig_2_address,                 //                   ad9144_jesd204_phy_reconfig_2.address
		output wire         ad9144_jesd204_phy_reconfig_2_write,                   //                                                .write
		output wire         ad9144_jesd204_phy_reconfig_2_read,                    //                                                .read
		input  wire [31:0]  ad9144_jesd204_phy_reconfig_2_readdata,                //                                                .readdata
		output wire [31:0]  ad9144_jesd204_phy_reconfig_2_writedata,               //                                                .writedata
		input  wire         ad9144_jesd204_phy_reconfig_2_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9680_jesd204_phy_reconfig_2_address,                 //                   ad9680_jesd204_phy_reconfig_2.address
		output wire         ad9680_jesd204_phy_reconfig_2_write,                   //                                                .write
		output wire         ad9680_jesd204_phy_reconfig_2_read,                    //                                                .read
		input  wire [31:0]  ad9680_jesd204_phy_reconfig_2_readdata,                //                                                .readdata
		output wire [31:0]  ad9680_jesd204_phy_reconfig_2_writedata,               //                                                .writedata
		input  wire         ad9680_jesd204_phy_reconfig_2_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9144_jesd204_phy_reconfig_3_address,                 //                   ad9144_jesd204_phy_reconfig_3.address
		output wire         ad9144_jesd204_phy_reconfig_3_write,                   //                                                .write
		output wire         ad9144_jesd204_phy_reconfig_3_read,                    //                                                .read
		input  wire [31:0]  ad9144_jesd204_phy_reconfig_3_readdata,                //                                                .readdata
		output wire [31:0]  ad9144_jesd204_phy_reconfig_3_writedata,               //                                                .writedata
		input  wire         ad9144_jesd204_phy_reconfig_3_waitrequest,             //                                                .waitrequest
		output wire [9:0]   ad9680_jesd204_phy_reconfig_3_address,                 //                   ad9680_jesd204_phy_reconfig_3.address
		output wire         ad9680_jesd204_phy_reconfig_3_write,                   //                                                .write
		output wire         ad9680_jesd204_phy_reconfig_3_read,                    //                                                .read
		input  wire [31:0]  ad9680_jesd204_phy_reconfig_3_readdata,                //                                                .readdata
		output wire [31:0]  ad9680_jesd204_phy_reconfig_3_writedata,               //                                                .writedata
		input  wire         ad9680_jesd204_phy_reconfig_3_waitrequest,             //                                                .waitrequest
		output wire [26:0]  bridge_3_s0_address,                                   //                                     bridge_3_s0.address
		output wire         bridge_3_s0_write,                                     //                                                .write
		output wire         bridge_3_s0_read,                                      //                                                .read
		input  wire [31:0]  bridge_3_s0_readdata,                                  //                                                .readdata
		output wire [31:0]  bridge_3_s0_writedata,                                 //                                                .writedata
		output wire [0:0]   bridge_3_s0_burstcount,                                //                                                .burstcount
		output wire [3:0]   bridge_3_s0_byteenable,                                //                                                .byteenable
		input  wire         bridge_3_s0_readdatavalid,                             //                                                .readdatavalid
		input  wire         bridge_3_s0_waitrequest,                               //                                                .waitrequest
		output wire         bridge_3_s0_debugaccess,                               //                                                .debugaccess
		output wire [5:0]   bridge_2_s0_address,                                   //                                     bridge_2_s0.address
		output wire         bridge_2_s0_write,                                     //                                                .write
		output wire         bridge_2_s0_read,                                      //                                                .read
		input  wire [31:0]  bridge_2_s0_readdata,                                  //                                                .readdata
		output wire [31:0]  bridge_2_s0_writedata,                                 //                                                .writedata
		output wire [0:0]   bridge_2_s0_burstcount,                                //                                                .burstcount
		output wire [3:0]   bridge_2_s0_byteenable,                                //                                                .byteenable
		input  wire         bridge_2_s0_readdatavalid,                             //                                                .readdatavalid
		input  wire         bridge_2_s0_waitrequest,                               //                                                .waitrequest
		output wire         bridge_2_s0_debugaccess,                               //                                                .debugaccess
		output wire [11:0]  bridge_1_s0_address,                                   //                                     bridge_1_s0.address
		output wire         bridge_1_s0_write,                                     //                                                .write
		output wire         bridge_1_s0_read,                                      //                                                .read
		input  wire [31:0]  bridge_1_s0_readdata,                                  //                                                .readdata
		output wire [31:0]  bridge_1_s0_writedata,                                 //                                                .writedata
		output wire [2:0]   bridge_1_s0_burstcount,                                //                                                .burstcount
		output wire [3:0]   bridge_1_s0_byteenable,                                //                                                .byteenable
		input  wire         bridge_1_s0_readdatavalid,                             //                                                .readdatavalid
		input  wire         bridge_1_s0_waitrequest,                               //                                                .waitrequest
		output wire         bridge_1_s0_debugaccess,                               //                                                .debugaccess
		output wire [30:0]  bridge_0_s0_address,                                   //                                     bridge_0_s0.address
		output wire         bridge_0_s0_write,                                     //                                                .write
		output wire         bridge_0_s0_read,                                      //                                                .read
		input  wire [31:0]  bridge_0_s0_readdata,                                  //                                                .readdata
		output wire [31:0]  bridge_0_s0_writedata,                                 //                                                .writedata
		output wire [7:0]   bridge_0_s0_burstcount,                                //                                                .burstcount
		output wire [3:0]   bridge_0_s0_byteenable,                                //                                                .byteenable
		input  wire         bridge_0_s0_readdatavalid,                             //                                                .readdatavalid
		input  wire         bridge_0_s0_waitrequest,                               //                                                .waitrequest
		output wire         bridge_0_s0_debugaccess,                               //                                                .debugaccess
		output wire [14:0]  mcu_subsystem_ram_0_s1_address,                        //                          mcu_subsystem_ram_0_s1.address
		output wire         mcu_subsystem_ram_0_s1_write,                          //                                                .write
		input  wire [31:0]  mcu_subsystem_ram_0_s1_readdata,                       //                                                .readdata
		output wire [31:0]  mcu_subsystem_ram_0_s1_writedata,                      //                                                .writedata
		output wire [3:0]   mcu_subsystem_ram_0_s1_byteenable,                     //                                                .byteenable
		output wire         mcu_subsystem_ram_0_s1_chipselect,                     //                                                .chipselect
		output wire         mcu_subsystem_ram_0_s1_clken,                          //                                                .clken
		output wire [2:0]   timer_1_s1_address,                                    //                                      timer_1_s1.address
		output wire         timer_1_s1_write,                                      //                                                .write
		input  wire [15:0]  timer_1_s1_readdata,                                   //                                                .readdata
		output wire [15:0]  timer_1_s1_writedata,                                  //                                                .writedata
		output wire         timer_1_s1_chipselect,                                 //                                                .chipselect
		output wire [2:0]   timer_0_s1_address,                                    //                                      timer_0_s1.address
		output wire         timer_0_s1_write,                                      //                                                .write
		input  wire [15:0]  timer_0_s1_readdata,                                   //                                                .readdata
		output wire [15:0]  timer_0_s1_writedata,                                  //                                                .writedata
		output wire         timer_0_s1_chipselect,                                 //                                                .chipselect
		output wire [2:0]   gpio_s1_address,                                       //                                         gpio_s1.address
		output wire         gpio_s1_write,                                         //                                                .write
		input  wire [31:0]  gpio_s1_readdata,                                      //                                                .readdata
		output wire [31:0]  gpio_s1_writedata,                                     //                                                .writedata
		output wire         gpio_s1_chipselect,                                    //                                                .chipselect
		output wire [9:0]   phy_interlaken_0_serial_clock_reconfig_s0_address,     //       phy_interlaken_0_serial_clock_reconfig_s0.address
		output wire         phy_interlaken_0_serial_clock_reconfig_s0_write,       //                                                .write
		output wire         phy_interlaken_0_serial_clock_reconfig_s0_read,        //                                                .read
		input  wire [31:0]  phy_interlaken_0_serial_clock_reconfig_s0_readdata,    //                                                .readdata
		output wire [31:0]  phy_interlaken_0_serial_clock_reconfig_s0_writedata,   //                                                .writedata
		input  wire         phy_interlaken_0_serial_clock_reconfig_s0_waitrequest, //                                                .waitrequest
		output wire [9:0]   phy_interlaken_1_serial_clock_reconfig_s0_address,     //       phy_interlaken_1_serial_clock_reconfig_s0.address
		output wire         phy_interlaken_1_serial_clock_reconfig_s0_write,       //                                                .write
		output wire         phy_interlaken_1_serial_clock_reconfig_s0_read,        //                                                .read
		input  wire [31:0]  phy_interlaken_1_serial_clock_reconfig_s0_readdata,    //                                                .readdata
		output wire [31:0]  phy_interlaken_1_serial_clock_reconfig_s0_writedata,   //                                                .writedata
		input  wire         phy_interlaken_1_serial_clock_reconfig_s0_waitrequest, //                                                .waitrequest
		output wire [2:0]   spi_spi_control_port_address,                          //                            spi_spi_control_port.address
		output wire         spi_spi_control_port_write,                            //                                                .write
		output wire         spi_spi_control_port_read,                             //                                                .read
		input  wire [15:0]  spi_spi_control_port_readdata,                         //                                                .readdata
		output wire [15:0]  spi_spi_control_port_writedata,                        //                                                .writedata
		output wire         spi_spi_control_port_chipselect,                       //                                                .chipselect
		output wire [11:0]  ad9144_jesd204_link_management_awaddr,                 //                  ad9144_jesd204_link_management.awaddr
		output wire [2:0]   ad9144_jesd204_link_management_awprot,                 //                                                .awprot
		output wire         ad9144_jesd204_link_management_awvalid,                //                                                .awvalid
		input  wire         ad9144_jesd204_link_management_awready,                //                                                .awready
		output wire [31:0]  ad9144_jesd204_link_management_wdata,                  //                                                .wdata
		output wire [3:0]   ad9144_jesd204_link_management_wstrb,                  //                                                .wstrb
		output wire         ad9144_jesd204_link_management_wvalid,                 //                                                .wvalid
		input  wire         ad9144_jesd204_link_management_wready,                 //                                                .wready
		input  wire [1:0]   ad9144_jesd204_link_management_bresp,                  //                                                .bresp
		input  wire         ad9144_jesd204_link_management_bvalid,                 //                                                .bvalid
		output wire         ad9144_jesd204_link_management_bready,                 //                                                .bready
		output wire [11:0]  ad9144_jesd204_link_management_araddr,                 //                                                .araddr
		output wire [2:0]   ad9144_jesd204_link_management_arprot,                 //                                                .arprot
		output wire         ad9144_jesd204_link_management_arvalid,                //                                                .arvalid
		input  wire         ad9144_jesd204_link_management_arready,                //                                                .arready
		input  wire [31:0]  ad9144_jesd204_link_management_rdata,                  //                                                .rdata
		input  wire [1:0]   ad9144_jesd204_link_management_rresp,                  //                                                .rresp
		input  wire         ad9144_jesd204_link_management_rvalid,                 //                                                .rvalid
		output wire         ad9144_jesd204_link_management_rready,                 //                                                .rready
		output wire [11:0]  ad9680_jesd204_link_management_awaddr,                 //                  ad9680_jesd204_link_management.awaddr
		output wire [2:0]   ad9680_jesd204_link_management_awprot,                 //                                                .awprot
		output wire         ad9680_jesd204_link_management_awvalid,                //                                                .awvalid
		input  wire         ad9680_jesd204_link_management_awready,                //                                                .awready
		output wire [31:0]  ad9680_jesd204_link_management_wdata,                  //                                                .wdata
		output wire [3:0]   ad9680_jesd204_link_management_wstrb,                  //                                                .wstrb
		output wire         ad9680_jesd204_link_management_wvalid,                 //                                                .wvalid
		input  wire         ad9680_jesd204_link_management_wready,                 //                                                .wready
		input  wire [1:0]   ad9680_jesd204_link_management_bresp,                  //                                                .bresp
		input  wire         ad9680_jesd204_link_management_bvalid,                 //                                                .bvalid
		output wire         ad9680_jesd204_link_management_bready,                 //                                                .bready
		output wire [11:0]  ad9680_jesd204_link_management_araddr,                 //                                                .araddr
		output wire [2:0]   ad9680_jesd204_link_management_arprot,                 //                                                .arprot
		output wire         ad9680_jesd204_link_management_arvalid,                //                                                .arvalid
		input  wire         ad9680_jesd204_link_management_arready,                //                                                .arready
		input  wire [31:0]  ad9680_jesd204_link_management_rdata,                  //                                                .rdata
		input  wire [1:0]   ad9680_jesd204_link_management_rresp,                  //                                                .rresp
		input  wire         ad9680_jesd204_link_management_rvalid,                 //                                                .rvalid
		output wire         ad9680_jesd204_link_management_rready,                 //                                                .rready
		output wire [13:0]  ad9144_jesd204_link_reconfig_awaddr,                   //                    ad9144_jesd204_link_reconfig.awaddr
		output wire [2:0]   ad9144_jesd204_link_reconfig_awprot,                   //                                                .awprot
		output wire         ad9144_jesd204_link_reconfig_awvalid,                  //                                                .awvalid
		input  wire         ad9144_jesd204_link_reconfig_awready,                  //                                                .awready
		output wire [31:0]  ad9144_jesd204_link_reconfig_wdata,                    //                                                .wdata
		output wire [3:0]   ad9144_jesd204_link_reconfig_wstrb,                    //                                                .wstrb
		output wire         ad9144_jesd204_link_reconfig_wvalid,                   //                                                .wvalid
		input  wire         ad9144_jesd204_link_reconfig_wready,                   //                                                .wready
		input  wire [1:0]   ad9144_jesd204_link_reconfig_bresp,                    //                                                .bresp
		input  wire         ad9144_jesd204_link_reconfig_bvalid,                   //                                                .bvalid
		output wire         ad9144_jesd204_link_reconfig_bready,                   //                                                .bready
		output wire [13:0]  ad9144_jesd204_link_reconfig_araddr,                   //                                                .araddr
		output wire [2:0]   ad9144_jesd204_link_reconfig_arprot,                   //                                                .arprot
		output wire         ad9144_jesd204_link_reconfig_arvalid,                  //                                                .arvalid
		input  wire         ad9144_jesd204_link_reconfig_arready,                  //                                                .arready
		input  wire [31:0]  ad9144_jesd204_link_reconfig_rdata,                    //                                                .rdata
		input  wire [1:0]   ad9144_jesd204_link_reconfig_rresp,                    //                                                .rresp
		input  wire         ad9144_jesd204_link_reconfig_rvalid,                   //                                                .rvalid
		output wire         ad9144_jesd204_link_reconfig_rready,                   //                                                .rready
		output wire [13:0]  ad9680_jesd204_link_reconfig_awaddr,                   //                    ad9680_jesd204_link_reconfig.awaddr
		output wire [2:0]   ad9680_jesd204_link_reconfig_awprot,                   //                                                .awprot
		output wire         ad9680_jesd204_link_reconfig_awvalid,                  //                                                .awvalid
		input  wire         ad9680_jesd204_link_reconfig_awready,                  //                                                .awready
		output wire [31:0]  ad9680_jesd204_link_reconfig_wdata,                    //                                                .wdata
		output wire [3:0]   ad9680_jesd204_link_reconfig_wstrb,                    //                                                .wstrb
		output wire         ad9680_jesd204_link_reconfig_wvalid,                   //                                                .wvalid
		input  wire         ad9680_jesd204_link_reconfig_wready,                   //                                                .wready
		input  wire [1:0]   ad9680_jesd204_link_reconfig_bresp,                    //                                                .bresp
		input  wire         ad9680_jesd204_link_reconfig_bvalid,                   //                                                .bvalid
		output wire         ad9680_jesd204_link_reconfig_bready,                   //                                                .bready
		output wire [13:0]  ad9680_jesd204_link_reconfig_araddr,                   //                                                .araddr
		output wire [2:0]   ad9680_jesd204_link_reconfig_arprot,                   //                                                .arprot
		output wire         ad9680_jesd204_link_reconfig_arvalid,                  //                                                .arvalid
		input  wire         ad9680_jesd204_link_reconfig_arready,                  //                                                .arready
		input  wire [31:0]  ad9680_jesd204_link_reconfig_rdata,                    //                                                .rdata
		input  wire [1:0]   ad9680_jesd204_link_reconfig_rresp,                    //                                                .rresp
		input  wire         ad9680_jesd204_link_reconfig_rvalid,                   //                                                .rvalid
		output wire         ad9680_jesd204_link_reconfig_rready,                   //                                                .rready
		output wire [15:0]  ad9144_core_s_axi_awaddr,                              //                               ad9144_core_s_axi.awaddr
		output wire [2:0]   ad9144_core_s_axi_awprot,                              //                                                .awprot
		output wire         ad9144_core_s_axi_awvalid,                             //                                                .awvalid
		input  wire         ad9144_core_s_axi_awready,                             //                                                .awready
		output wire [31:0]  ad9144_core_s_axi_wdata,                               //                                                .wdata
		output wire [3:0]   ad9144_core_s_axi_wstrb,                               //                                                .wstrb
		output wire         ad9144_core_s_axi_wvalid,                              //                                                .wvalid
		input  wire         ad9144_core_s_axi_wready,                              //                                                .wready
		input  wire [1:0]   ad9144_core_s_axi_bresp,                               //                                                .bresp
		input  wire         ad9144_core_s_axi_bvalid,                              //                                                .bvalid
		output wire         ad9144_core_s_axi_bready,                              //                                                .bready
		output wire [15:0]  ad9144_core_s_axi_araddr,                              //                                                .araddr
		output wire [2:0]   ad9144_core_s_axi_arprot,                              //                                                .arprot
		output wire         ad9144_core_s_axi_arvalid,                             //                                                .arvalid
		input  wire         ad9144_core_s_axi_arready,                             //                                                .arready
		input  wire [31:0]  ad9144_core_s_axi_rdata,                               //                                                .rdata
		input  wire [1:0]   ad9144_core_s_axi_rresp,                               //                                                .rresp
		input  wire         ad9144_core_s_axi_rvalid,                              //                                                .rvalid
		output wire         ad9144_core_s_axi_rready,                              //                                                .rready
		output wire [11:0]  ad9144_dma_s_axi_awaddr,                               //                                ad9144_dma_s_axi.awaddr
		output wire [2:0]   ad9144_dma_s_axi_awprot,                               //                                                .awprot
		output wire         ad9144_dma_s_axi_awvalid,                              //                                                .awvalid
		input  wire         ad9144_dma_s_axi_awready,                              //                                                .awready
		output wire [31:0]  ad9144_dma_s_axi_wdata,                                //                                                .wdata
		output wire [3:0]   ad9144_dma_s_axi_wstrb,                                //                                                .wstrb
		output wire         ad9144_dma_s_axi_wvalid,                               //                                                .wvalid
		input  wire         ad9144_dma_s_axi_wready,                               //                                                .wready
		input  wire [1:0]   ad9144_dma_s_axi_bresp,                                //                                                .bresp
		input  wire         ad9144_dma_s_axi_bvalid,                               //                                                .bvalid
		output wire         ad9144_dma_s_axi_bready,                               //                                                .bready
		output wire [11:0]  ad9144_dma_s_axi_araddr,                               //                                                .araddr
		output wire [2:0]   ad9144_dma_s_axi_arprot,                               //                                                .arprot
		output wire         ad9144_dma_s_axi_arvalid,                              //                                                .arvalid
		input  wire         ad9144_dma_s_axi_arready,                              //                                                .arready
		input  wire [31:0]  ad9144_dma_s_axi_rdata,                                //                                                .rdata
		input  wire [1:0]   ad9144_dma_s_axi_rresp,                                //                                                .rresp
		input  wire         ad9144_dma_s_axi_rvalid,                               //                                                .rvalid
		output wire         ad9144_dma_s_axi_rready,                               //                                                .rready
		output wire [11:0]  ad9680_dma_s_axi_awaddr,                               //                                ad9680_dma_s_axi.awaddr
		output wire [2:0]   ad9680_dma_s_axi_awprot,                               //                                                .awprot
		output wire         ad9680_dma_s_axi_awvalid,                              //                                                .awvalid
		input  wire         ad9680_dma_s_axi_awready,                              //                                                .awready
		output wire [31:0]  ad9680_dma_s_axi_wdata,                                //                                                .wdata
		output wire [3:0]   ad9680_dma_s_axi_wstrb,                                //                                                .wstrb
		output wire         ad9680_dma_s_axi_wvalid,                               //                                                .wvalid
		input  wire         ad9680_dma_s_axi_wready,                               //                                                .wready
		input  wire [1:0]   ad9680_dma_s_axi_bresp,                                //                                                .bresp
		input  wire         ad9680_dma_s_axi_bvalid,                               //                                                .bvalid
		output wire         ad9680_dma_s_axi_bready,                               //                                                .bready
		output wire [11:0]  ad9680_dma_s_axi_araddr,                               //                                                .araddr
		output wire [2:0]   ad9680_dma_s_axi_arprot,                               //                                                .arprot
		output wire         ad9680_dma_s_axi_arvalid,                              //                                                .arvalid
		input  wire         ad9680_dma_s_axi_arready,                              //                                                .arready
		input  wire [31:0]  ad9680_dma_s_axi_rdata,                                //                                                .rdata
		input  wire [1:0]   ad9680_dma_s_axi_rresp,                                //                                                .rresp
		input  wire         ad9680_dma_s_axi_rvalid,                               //                                                .rvalid
		output wire         ad9680_dma_s_axi_rready,                               //                                                .rready
		output wire [15:0]  ad9680_core_s_axi_awaddr,                              //                               ad9680_core_s_axi.awaddr
		output wire [2:0]   ad9680_core_s_axi_awprot,                              //                                                .awprot
		output wire         ad9680_core_s_axi_awvalid,                             //                                                .awvalid
		input  wire         ad9680_core_s_axi_awready,                             //                                                .awready
		output wire [31:0]  ad9680_core_s_axi_wdata,                               //                                                .wdata
		output wire [3:0]   ad9680_core_s_axi_wstrb,                               //                                                .wstrb
		output wire         ad9680_core_s_axi_wvalid,                              //                                                .wvalid
		input  wire         ad9680_core_s_axi_wready,                              //                                                .wready
		input  wire [1:0]   ad9680_core_s_axi_bresp,                               //                                                .bresp
		input  wire         ad9680_core_s_axi_bvalid,                              //                                                .bvalid
		output wire         ad9680_core_s_axi_bready,                              //                                                .bready
		output wire [15:0]  ad9680_core_s_axi_araddr,                              //                                                .araddr
		output wire [2:0]   ad9680_core_s_axi_arprot,                              //                                                .arprot
		output wire         ad9680_core_s_axi_arvalid,                             //                                                .arvalid
		input  wire         ad9680_core_s_axi_arready,                             //                                                .arready
		input  wire [31:0]  ad9680_core_s_axi_rdata,                               //                                                .rdata
		input  wire [1:0]   ad9680_core_s_axi_rresp,                               //                                                .rresp
		input  wire         ad9680_core_s_axi_rvalid,                              //                                                .rvalid
		output wire         ad9680_core_s_axi_rready,                              //                                                .rready
		input  wire         mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset, // mcu_subsystem_cpu_0_reset_reset_bridge_in_reset.reset
		input  wire         jtag_uart_0_reset_reset_bridge_in_reset_reset,         //         jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire         bridge_3_s0_reset_reset_bridge_in_reset_reset,         //         bridge_3_s0_reset_reset_bridge_in_reset.reset
		input  wire         bridge_2_s0_reset_reset_bridge_in_reset_reset,         //         bridge_2_s0_reset_reset_bridge_in_reset.reset
		input  wire         clock_in_out_clk_clk,                                  //                                clock_in_out_clk.clk
		input  wire         ddr3_emif_usr_clk_clk,                                 //                               ddr3_emif_usr_clk.clk
		input  wire         iopll_0_outclk0_clk                                    //                                 iopll_0_outclk0.clk
	);

	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_waitrequest;          // mcu_subsystem_cpu_0_data_master_agent:av_waitrequest -> mcu_subsystem_cpu_0_data_master_translator:uav_waitrequest
	wire   [31:0] mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdata;             // mcu_subsystem_cpu_0_data_master_agent:av_readdata -> mcu_subsystem_cpu_0_data_master_translator:uav_readdata
	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_debugaccess;          // mcu_subsystem_cpu_0_data_master_translator:uav_debugaccess -> mcu_subsystem_cpu_0_data_master_agent:av_debugaccess
	wire   [31:0] mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_address;              // mcu_subsystem_cpu_0_data_master_translator:uav_address -> mcu_subsystem_cpu_0_data_master_agent:av_address
	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_read;                 // mcu_subsystem_cpu_0_data_master_translator:uav_read -> mcu_subsystem_cpu_0_data_master_agent:av_read
	wire    [3:0] mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_byteenable;           // mcu_subsystem_cpu_0_data_master_translator:uav_byteenable -> mcu_subsystem_cpu_0_data_master_agent:av_byteenable
	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // mcu_subsystem_cpu_0_data_master_agent:av_readdatavalid -> mcu_subsystem_cpu_0_data_master_translator:uav_readdatavalid
	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_lock;                 // mcu_subsystem_cpu_0_data_master_translator:uav_lock -> mcu_subsystem_cpu_0_data_master_agent:av_lock
	wire          mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_write;                // mcu_subsystem_cpu_0_data_master_translator:uav_write -> mcu_subsystem_cpu_0_data_master_agent:av_write
	wire   [31:0] mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_writedata;            // mcu_subsystem_cpu_0_data_master_translator:uav_writedata -> mcu_subsystem_cpu_0_data_master_agent:av_writedata
	wire    [2:0] mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_burstcount;           // mcu_subsystem_cpu_0_data_master_translator:uav_burstcount -> mcu_subsystem_cpu_0_data_master_agent:av_burstcount
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // mcu_subsystem_cpu_0_instruction_master_agent:av_waitrequest -> mcu_subsystem_cpu_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdata;      // mcu_subsystem_cpu_0_instruction_master_agent:av_readdata -> mcu_subsystem_cpu_0_instruction_master_translator:uav_readdata
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // mcu_subsystem_cpu_0_instruction_master_translator:uav_debugaccess -> mcu_subsystem_cpu_0_instruction_master_agent:av_debugaccess
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_address;       // mcu_subsystem_cpu_0_instruction_master_translator:uav_address -> mcu_subsystem_cpu_0_instruction_master_agent:av_address
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_read;          // mcu_subsystem_cpu_0_instruction_master_translator:uav_read -> mcu_subsystem_cpu_0_instruction_master_agent:av_read
	wire    [3:0] mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // mcu_subsystem_cpu_0_instruction_master_translator:uav_byteenable -> mcu_subsystem_cpu_0_instruction_master_agent:av_byteenable
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // mcu_subsystem_cpu_0_instruction_master_agent:av_readdatavalid -> mcu_subsystem_cpu_0_instruction_master_translator:uav_readdatavalid
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_lock;          // mcu_subsystem_cpu_0_instruction_master_translator:uav_lock -> mcu_subsystem_cpu_0_instruction_master_agent:av_lock
	wire          mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_write;         // mcu_subsystem_cpu_0_instruction_master_translator:uav_write -> mcu_subsystem_cpu_0_instruction_master_agent:av_write
	wire   [31:0] mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_writedata;     // mcu_subsystem_cpu_0_instruction_master_translator:uav_writedata -> mcu_subsystem_cpu_0_instruction_master_agent:av_writedata
	wire    [2:0] mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // mcu_subsystem_cpu_0_instruction_master_translator:uav_burstcount -> mcu_subsystem_cpu_0_instruction_master_agent:av_burstcount
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_ruser;                                                 // ad9680_dma_m_dest_axi_agent:ruser -> ad9680_dma_m_dest_axi_translator:m0_ruser
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_wuser;                                                 // ad9680_dma_m_dest_axi_translator:m0_wuser -> ad9680_dma_m_dest_axi_agent:wuser
	wire    [1:0] ad9680_dma_m_dest_axi_translator_m0_awburst;                                               // ad9680_dma_m_dest_axi_translator:m0_awburst -> ad9680_dma_m_dest_axi_agent:awburst
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_arregion;                                              // ad9680_dma_m_dest_axi_translator:m0_arregion -> ad9680_dma_m_dest_axi_agent:arregion
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_awuser;                                                // ad9680_dma_m_dest_axi_translator:m0_awuser -> ad9680_dma_m_dest_axi_agent:awuser
	wire    [7:0] ad9680_dma_m_dest_axi_translator_m0_arlen;                                                 // ad9680_dma_m_dest_axi_translator:m0_arlen -> ad9680_dma_m_dest_axi_agent:arlen
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_arqos;                                                 // ad9680_dma_m_dest_axi_translator:m0_arqos -> ad9680_dma_m_dest_axi_agent:arqos
	wire   [15:0] ad9680_dma_m_dest_axi_translator_m0_wstrb;                                                 // ad9680_dma_m_dest_axi_translator:m0_wstrb -> ad9680_dma_m_dest_axi_agent:wstrb
	wire          ad9680_dma_m_dest_axi_translator_m0_wready;                                                // ad9680_dma_m_dest_axi_agent:wready -> ad9680_dma_m_dest_axi_translator:m0_wready
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_rid;                                                   // ad9680_dma_m_dest_axi_agent:rid -> ad9680_dma_m_dest_axi_translator:m0_rid
	wire          ad9680_dma_m_dest_axi_translator_m0_rready;                                                // ad9680_dma_m_dest_axi_translator:m0_rready -> ad9680_dma_m_dest_axi_agent:rready
	wire    [7:0] ad9680_dma_m_dest_axi_translator_m0_awlen;                                                 // ad9680_dma_m_dest_axi_translator:m0_awlen -> ad9680_dma_m_dest_axi_agent:awlen
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_awqos;                                                 // ad9680_dma_m_dest_axi_translator:m0_awqos -> ad9680_dma_m_dest_axi_agent:awqos
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_arcache;                                               // ad9680_dma_m_dest_axi_translator:m0_arcache -> ad9680_dma_m_dest_axi_agent:arcache
	wire          ad9680_dma_m_dest_axi_translator_m0_wvalid;                                                // ad9680_dma_m_dest_axi_translator:m0_wvalid -> ad9680_dma_m_dest_axi_agent:wvalid
	wire   [31:0] ad9680_dma_m_dest_axi_translator_m0_araddr;                                                // ad9680_dma_m_dest_axi_translator:m0_araddr -> ad9680_dma_m_dest_axi_agent:araddr
	wire    [2:0] ad9680_dma_m_dest_axi_translator_m0_arprot;                                                // ad9680_dma_m_dest_axi_translator:m0_arprot -> ad9680_dma_m_dest_axi_agent:arprot
	wire    [2:0] ad9680_dma_m_dest_axi_translator_m0_awprot;                                                // ad9680_dma_m_dest_axi_translator:m0_awprot -> ad9680_dma_m_dest_axi_agent:awprot
	wire  [127:0] ad9680_dma_m_dest_axi_translator_m0_wdata;                                                 // ad9680_dma_m_dest_axi_translator:m0_wdata -> ad9680_dma_m_dest_axi_agent:wdata
	wire          ad9680_dma_m_dest_axi_translator_m0_arvalid;                                               // ad9680_dma_m_dest_axi_translator:m0_arvalid -> ad9680_dma_m_dest_axi_agent:arvalid
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_awcache;                                               // ad9680_dma_m_dest_axi_translator:m0_awcache -> ad9680_dma_m_dest_axi_agent:awcache
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_arid;                                                  // ad9680_dma_m_dest_axi_translator:m0_arid -> ad9680_dma_m_dest_axi_agent:arid
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_arlock;                                                // ad9680_dma_m_dest_axi_translator:m0_arlock -> ad9680_dma_m_dest_axi_agent:arlock
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_awlock;                                                // ad9680_dma_m_dest_axi_translator:m0_awlock -> ad9680_dma_m_dest_axi_agent:awlock
	wire   [31:0] ad9680_dma_m_dest_axi_translator_m0_awaddr;                                                // ad9680_dma_m_dest_axi_translator:m0_awaddr -> ad9680_dma_m_dest_axi_agent:awaddr
	wire    [1:0] ad9680_dma_m_dest_axi_translator_m0_bresp;                                                 // ad9680_dma_m_dest_axi_agent:bresp -> ad9680_dma_m_dest_axi_translator:m0_bresp
	wire          ad9680_dma_m_dest_axi_translator_m0_arready;                                               // ad9680_dma_m_dest_axi_agent:arready -> ad9680_dma_m_dest_axi_translator:m0_arready
	wire  [127:0] ad9680_dma_m_dest_axi_translator_m0_rdata;                                                 // ad9680_dma_m_dest_axi_agent:rdata -> ad9680_dma_m_dest_axi_translator:m0_rdata
	wire          ad9680_dma_m_dest_axi_translator_m0_awready;                                               // ad9680_dma_m_dest_axi_agent:awready -> ad9680_dma_m_dest_axi_translator:m0_awready
	wire    [1:0] ad9680_dma_m_dest_axi_translator_m0_arburst;                                               // ad9680_dma_m_dest_axi_translator:m0_arburst -> ad9680_dma_m_dest_axi_agent:arburst
	wire    [2:0] ad9680_dma_m_dest_axi_translator_m0_arsize;                                                // ad9680_dma_m_dest_axi_translator:m0_arsize -> ad9680_dma_m_dest_axi_agent:arsize
	wire          ad9680_dma_m_dest_axi_translator_m0_bready;                                                // ad9680_dma_m_dest_axi_translator:m0_bready -> ad9680_dma_m_dest_axi_agent:bready
	wire          ad9680_dma_m_dest_axi_translator_m0_rlast;                                                 // ad9680_dma_m_dest_axi_agent:rlast -> ad9680_dma_m_dest_axi_translator:m0_rlast
	wire          ad9680_dma_m_dest_axi_translator_m0_wlast;                                                 // ad9680_dma_m_dest_axi_translator:m0_wlast -> ad9680_dma_m_dest_axi_agent:wlast
	wire    [3:0] ad9680_dma_m_dest_axi_translator_m0_awregion;                                              // ad9680_dma_m_dest_axi_translator:m0_awregion -> ad9680_dma_m_dest_axi_agent:awregion
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_buser;                                                 // ad9680_dma_m_dest_axi_agent:buser -> ad9680_dma_m_dest_axi_translator:m0_buser
	wire    [1:0] ad9680_dma_m_dest_axi_translator_m0_rresp;                                                 // ad9680_dma_m_dest_axi_agent:rresp -> ad9680_dma_m_dest_axi_translator:m0_rresp
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_awid;                                                  // ad9680_dma_m_dest_axi_translator:m0_awid -> ad9680_dma_m_dest_axi_agent:awid
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_bid;                                                   // ad9680_dma_m_dest_axi_agent:bid -> ad9680_dma_m_dest_axi_translator:m0_bid
	wire          ad9680_dma_m_dest_axi_translator_m0_bvalid;                                                // ad9680_dma_m_dest_axi_agent:bvalid -> ad9680_dma_m_dest_axi_translator:m0_bvalid
	wire    [2:0] ad9680_dma_m_dest_axi_translator_m0_awsize;                                                // ad9680_dma_m_dest_axi_translator:m0_awsize -> ad9680_dma_m_dest_axi_agent:awsize
	wire          ad9680_dma_m_dest_axi_translator_m0_awvalid;                                               // ad9680_dma_m_dest_axi_translator:m0_awvalid -> ad9680_dma_m_dest_axi_agent:awvalid
	wire    [0:0] ad9680_dma_m_dest_axi_translator_m0_aruser;                                                // ad9680_dma_m_dest_axi_translator:m0_aruser -> ad9680_dma_m_dest_axi_agent:aruser
	wire          ad9680_dma_m_dest_axi_translator_m0_rvalid;                                                // ad9680_dma_m_dest_axi_agent:rvalid -> ad9680_dma_m_dest_axi_translator:m0_rvalid
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_ruser;                                                  // ad9144_dma_m_src_axi_agent:ruser -> ad9144_dma_m_src_axi_translator:m0_ruser
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_wuser;                                                  // ad9144_dma_m_src_axi_translator:m0_wuser -> ad9144_dma_m_src_axi_agent:wuser
	wire    [1:0] ad9144_dma_m_src_axi_translator_m0_awburst;                                                // ad9144_dma_m_src_axi_translator:m0_awburst -> ad9144_dma_m_src_axi_agent:awburst
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_arregion;                                               // ad9144_dma_m_src_axi_translator:m0_arregion -> ad9144_dma_m_src_axi_agent:arregion
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_awuser;                                                 // ad9144_dma_m_src_axi_translator:m0_awuser -> ad9144_dma_m_src_axi_agent:awuser
	wire    [7:0] ad9144_dma_m_src_axi_translator_m0_arlen;                                                  // ad9144_dma_m_src_axi_translator:m0_arlen -> ad9144_dma_m_src_axi_agent:arlen
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_arqos;                                                  // ad9144_dma_m_src_axi_translator:m0_arqos -> ad9144_dma_m_src_axi_agent:arqos
	wire   [15:0] ad9144_dma_m_src_axi_translator_m0_wstrb;                                                  // ad9144_dma_m_src_axi_translator:m0_wstrb -> ad9144_dma_m_src_axi_agent:wstrb
	wire          ad9144_dma_m_src_axi_translator_m0_wready;                                                 // ad9144_dma_m_src_axi_agent:wready -> ad9144_dma_m_src_axi_translator:m0_wready
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_rid;                                                    // ad9144_dma_m_src_axi_agent:rid -> ad9144_dma_m_src_axi_translator:m0_rid
	wire          ad9144_dma_m_src_axi_translator_m0_rready;                                                 // ad9144_dma_m_src_axi_translator:m0_rready -> ad9144_dma_m_src_axi_agent:rready
	wire    [7:0] ad9144_dma_m_src_axi_translator_m0_awlen;                                                  // ad9144_dma_m_src_axi_translator:m0_awlen -> ad9144_dma_m_src_axi_agent:awlen
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_awqos;                                                  // ad9144_dma_m_src_axi_translator:m0_awqos -> ad9144_dma_m_src_axi_agent:awqos
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_arcache;                                                // ad9144_dma_m_src_axi_translator:m0_arcache -> ad9144_dma_m_src_axi_agent:arcache
	wire          ad9144_dma_m_src_axi_translator_m0_wvalid;                                                 // ad9144_dma_m_src_axi_translator:m0_wvalid -> ad9144_dma_m_src_axi_agent:wvalid
	wire   [31:0] ad9144_dma_m_src_axi_translator_m0_araddr;                                                 // ad9144_dma_m_src_axi_translator:m0_araddr -> ad9144_dma_m_src_axi_agent:araddr
	wire    [2:0] ad9144_dma_m_src_axi_translator_m0_arprot;                                                 // ad9144_dma_m_src_axi_translator:m0_arprot -> ad9144_dma_m_src_axi_agent:arprot
	wire    [2:0] ad9144_dma_m_src_axi_translator_m0_awprot;                                                 // ad9144_dma_m_src_axi_translator:m0_awprot -> ad9144_dma_m_src_axi_agent:awprot
	wire  [127:0] ad9144_dma_m_src_axi_translator_m0_wdata;                                                  // ad9144_dma_m_src_axi_translator:m0_wdata -> ad9144_dma_m_src_axi_agent:wdata
	wire          ad9144_dma_m_src_axi_translator_m0_arvalid;                                                // ad9144_dma_m_src_axi_translator:m0_arvalid -> ad9144_dma_m_src_axi_agent:arvalid
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_awcache;                                                // ad9144_dma_m_src_axi_translator:m0_awcache -> ad9144_dma_m_src_axi_agent:awcache
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_arid;                                                   // ad9144_dma_m_src_axi_translator:m0_arid -> ad9144_dma_m_src_axi_agent:arid
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_arlock;                                                 // ad9144_dma_m_src_axi_translator:m0_arlock -> ad9144_dma_m_src_axi_agent:arlock
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_awlock;                                                 // ad9144_dma_m_src_axi_translator:m0_awlock -> ad9144_dma_m_src_axi_agent:awlock
	wire   [31:0] ad9144_dma_m_src_axi_translator_m0_awaddr;                                                 // ad9144_dma_m_src_axi_translator:m0_awaddr -> ad9144_dma_m_src_axi_agent:awaddr
	wire    [1:0] ad9144_dma_m_src_axi_translator_m0_bresp;                                                  // ad9144_dma_m_src_axi_agent:bresp -> ad9144_dma_m_src_axi_translator:m0_bresp
	wire          ad9144_dma_m_src_axi_translator_m0_arready;                                                // ad9144_dma_m_src_axi_agent:arready -> ad9144_dma_m_src_axi_translator:m0_arready
	wire  [127:0] ad9144_dma_m_src_axi_translator_m0_rdata;                                                  // ad9144_dma_m_src_axi_agent:rdata -> ad9144_dma_m_src_axi_translator:m0_rdata
	wire          ad9144_dma_m_src_axi_translator_m0_awready;                                                // ad9144_dma_m_src_axi_agent:awready -> ad9144_dma_m_src_axi_translator:m0_awready
	wire    [1:0] ad9144_dma_m_src_axi_translator_m0_arburst;                                                // ad9144_dma_m_src_axi_translator:m0_arburst -> ad9144_dma_m_src_axi_agent:arburst
	wire    [2:0] ad9144_dma_m_src_axi_translator_m0_arsize;                                                 // ad9144_dma_m_src_axi_translator:m0_arsize -> ad9144_dma_m_src_axi_agent:arsize
	wire          ad9144_dma_m_src_axi_translator_m0_bready;                                                 // ad9144_dma_m_src_axi_translator:m0_bready -> ad9144_dma_m_src_axi_agent:bready
	wire          ad9144_dma_m_src_axi_translator_m0_rlast;                                                  // ad9144_dma_m_src_axi_agent:rlast -> ad9144_dma_m_src_axi_translator:m0_rlast
	wire          ad9144_dma_m_src_axi_translator_m0_wlast;                                                  // ad9144_dma_m_src_axi_translator:m0_wlast -> ad9144_dma_m_src_axi_agent:wlast
	wire    [3:0] ad9144_dma_m_src_axi_translator_m0_awregion;                                               // ad9144_dma_m_src_axi_translator:m0_awregion -> ad9144_dma_m_src_axi_agent:awregion
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_buser;                                                  // ad9144_dma_m_src_axi_agent:buser -> ad9144_dma_m_src_axi_translator:m0_buser
	wire    [1:0] ad9144_dma_m_src_axi_translator_m0_rresp;                                                  // ad9144_dma_m_src_axi_agent:rresp -> ad9144_dma_m_src_axi_translator:m0_rresp
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_awid;                                                   // ad9144_dma_m_src_axi_translator:m0_awid -> ad9144_dma_m_src_axi_agent:awid
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_bid;                                                    // ad9144_dma_m_src_axi_agent:bid -> ad9144_dma_m_src_axi_translator:m0_bid
	wire          ad9144_dma_m_src_axi_translator_m0_bvalid;                                                 // ad9144_dma_m_src_axi_agent:bvalid -> ad9144_dma_m_src_axi_translator:m0_bvalid
	wire    [2:0] ad9144_dma_m_src_axi_translator_m0_awsize;                                                 // ad9144_dma_m_src_axi_translator:m0_awsize -> ad9144_dma_m_src_axi_agent:awsize
	wire          ad9144_dma_m_src_axi_translator_m0_awvalid;                                                // ad9144_dma_m_src_axi_translator:m0_awvalid -> ad9144_dma_m_src_axi_agent:awvalid
	wire    [0:0] ad9144_dma_m_src_axi_translator_m0_aruser;                                                 // ad9144_dma_m_src_axi_translator:m0_aruser -> ad9144_dma_m_src_axi_agent:aruser
	wire          ad9144_dma_m_src_axi_translator_m0_rvalid;                                                 // ad9144_dma_m_src_axi_agent:rvalid -> ad9144_dma_m_src_axi_translator:m0_rvalid
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest;        // phy_interlaken_1_phy_data_ctrl_m0_agent:av_waitrequest -> phy_interlaken_1_phy_data_ctrl_m0_translator:uav_waitrequest
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata;           // phy_interlaken_1_phy_data_ctrl_m0_agent:av_readdata -> phy_interlaken_1_phy_data_ctrl_m0_translator:uav_readdata
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess;        // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_debugaccess -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_debugaccess
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_address;            // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_address -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_address
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_read;               // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_read -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_read
	wire    [3:0] phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable;         // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_byteenable -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_byteenable
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid;      // phy_interlaken_1_phy_data_ctrl_m0_agent:av_readdatavalid -> phy_interlaken_1_phy_data_ctrl_m0_translator:uav_readdatavalid
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock;               // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_lock -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_lock
	wire          phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_write;              // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_write -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_write
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata;          // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_writedata -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_writedata
	wire    [2:0] phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount;         // phy_interlaken_1_phy_data_ctrl_m0_translator:uav_burstcount -> phy_interlaken_1_phy_data_ctrl_m0_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                                     // rsp_mux_006:src_valid -> phy_interlaken_1_phy_data_ctrl_m0_agent:rp_valid
	wire  [141:0] rsp_mux_006_src_data;                                                                      // rsp_mux_006:src_data -> phy_interlaken_1_phy_data_ctrl_m0_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                                     // phy_interlaken_1_phy_data_ctrl_m0_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [42:0] rsp_mux_006_src_channel;                                                                   // rsp_mux_006:src_channel -> phy_interlaken_1_phy_data_ctrl_m0_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                             // rsp_mux_006:src_startofpacket -> phy_interlaken_1_phy_data_ctrl_m0_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                               // rsp_mux_006:src_endofpacket -> phy_interlaken_1_phy_data_ctrl_m0_agent:rp_endofpacket
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest;        // phy_interlaken_0_phy_data_ctrl_m0_agent:av_waitrequest -> phy_interlaken_0_phy_data_ctrl_m0_translator:uav_waitrequest
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata;           // phy_interlaken_0_phy_data_ctrl_m0_agent:av_readdata -> phy_interlaken_0_phy_data_ctrl_m0_translator:uav_readdata
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess;        // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_debugaccess -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_debugaccess
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_address;            // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_address -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_address
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_read;               // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_read -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_read
	wire    [3:0] phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable;         // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_byteenable -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_byteenable
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid;      // phy_interlaken_0_phy_data_ctrl_m0_agent:av_readdatavalid -> phy_interlaken_0_phy_data_ctrl_m0_translator:uav_readdatavalid
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock;               // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_lock -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_lock
	wire          phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_write;              // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_write -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_write
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata;          // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_writedata -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_writedata
	wire    [2:0] phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount;         // phy_interlaken_0_phy_data_ctrl_m0_translator:uav_burstcount -> phy_interlaken_0_phy_data_ctrl_m0_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                     // rsp_mux_007:src_valid -> phy_interlaken_0_phy_data_ctrl_m0_agent:rp_valid
	wire  [141:0] rsp_mux_007_src_data;                                                                      // rsp_mux_007:src_data -> phy_interlaken_0_phy_data_ctrl_m0_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                     // phy_interlaken_0_phy_data_ctrl_m0_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [42:0] rsp_mux_007_src_channel;                                                                   // rsp_mux_007:src_channel -> phy_interlaken_0_phy_data_ctrl_m0_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                             // rsp_mux_007:src_startofpacket -> phy_interlaken_0_phy_data_ctrl_m0_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                               // rsp_mux_007:src_endofpacket -> phy_interlaken_0_phy_data_ctrl_m0_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> ad9144_jesd204_link_management_agent:write_cp_valid
	wire  [141:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> ad9144_jesd204_link_management_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                                         // ad9144_jesd204_link_management_agent:write_cp_ready -> cmd_mux:src_ready
	wire   [42:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> ad9144_jesd204_link_management_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> ad9144_jesd204_link_management_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> ad9144_jesd204_link_management_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> ad9144_jesd204_link_management_agent:read_cp_valid
	wire  [141:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> ad9144_jesd204_link_management_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                                     // ad9144_jesd204_link_management_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire   [42:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> ad9144_jesd204_link_management_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> ad9144_jesd204_link_management_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> ad9144_jesd204_link_management_agent:read_cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> ad9680_jesd204_link_management_agent:write_cp_valid
	wire  [141:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> ad9680_jesd204_link_management_agent:write_cp_data
	wire          cmd_mux_002_src_ready;                                                                     // ad9680_jesd204_link_management_agent:write_cp_ready -> cmd_mux_002:src_ready
	wire   [42:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> ad9680_jesd204_link_management_agent:write_cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> ad9680_jesd204_link_management_agent:write_cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> ad9680_jesd204_link_management_agent:write_cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> ad9680_jesd204_link_management_agent:read_cp_valid
	wire  [141:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> ad9680_jesd204_link_management_agent:read_cp_data
	wire          cmd_mux_003_src_ready;                                                                     // ad9680_jesd204_link_management_agent:read_cp_ready -> cmd_mux_003:src_ready
	wire   [42:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> ad9680_jesd204_link_management_agent:read_cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> ad9680_jesd204_link_management_agent:read_cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> ad9680_jesd204_link_management_agent:read_cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> ad9144_jesd204_link_reconfig_agent:write_cp_valid
	wire  [141:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> ad9144_jesd204_link_reconfig_agent:write_cp_data
	wire          cmd_mux_004_src_ready;                                                                     // ad9144_jesd204_link_reconfig_agent:write_cp_ready -> cmd_mux_004:src_ready
	wire   [42:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> ad9144_jesd204_link_reconfig_agent:write_cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> ad9144_jesd204_link_reconfig_agent:write_cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> ad9144_jesd204_link_reconfig_agent:write_cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> ad9144_jesd204_link_reconfig_agent:read_cp_valid
	wire  [141:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> ad9144_jesd204_link_reconfig_agent:read_cp_data
	wire          cmd_mux_005_src_ready;                                                                     // ad9144_jesd204_link_reconfig_agent:read_cp_ready -> cmd_mux_005:src_ready
	wire   [42:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> ad9144_jesd204_link_reconfig_agent:read_cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> ad9144_jesd204_link_reconfig_agent:read_cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> ad9144_jesd204_link_reconfig_agent:read_cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> ad9680_jesd204_link_reconfig_agent:write_cp_valid
	wire  [141:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> ad9680_jesd204_link_reconfig_agent:write_cp_data
	wire          cmd_mux_006_src_ready;                                                                     // ad9680_jesd204_link_reconfig_agent:write_cp_ready -> cmd_mux_006:src_ready
	wire   [42:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> ad9680_jesd204_link_reconfig_agent:write_cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> ad9680_jesd204_link_reconfig_agent:write_cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> ad9680_jesd204_link_reconfig_agent:write_cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> ad9680_jesd204_link_reconfig_agent:read_cp_valid
	wire  [141:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> ad9680_jesd204_link_reconfig_agent:read_cp_data
	wire          cmd_mux_007_src_ready;                                                                     // ad9680_jesd204_link_reconfig_agent:read_cp_ready -> cmd_mux_007:src_ready
	wire   [42:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> ad9680_jesd204_link_reconfig_agent:read_cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> ad9680_jesd204_link_reconfig_agent:read_cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> ad9680_jesd204_link_reconfig_agent:read_cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> ad9144_core_s_axi_agent:write_cp_valid
	wire  [141:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> ad9144_core_s_axi_agent:write_cp_data
	wire          cmd_mux_008_src_ready;                                                                     // ad9144_core_s_axi_agent:write_cp_ready -> cmd_mux_008:src_ready
	wire   [42:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> ad9144_core_s_axi_agent:write_cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> ad9144_core_s_axi_agent:write_cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> ad9144_core_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> ad9144_core_s_axi_agent:read_cp_valid
	wire  [141:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> ad9144_core_s_axi_agent:read_cp_data
	wire          cmd_mux_009_src_ready;                                                                     // ad9144_core_s_axi_agent:read_cp_ready -> cmd_mux_009:src_ready
	wire   [42:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> ad9144_core_s_axi_agent:read_cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> ad9144_core_s_axi_agent:read_cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> ad9144_core_s_axi_agent:read_cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                     // cmd_mux_010:src_valid -> ad9144_dma_s_axi_agent:write_cp_valid
	wire  [141:0] cmd_mux_010_src_data;                                                                      // cmd_mux_010:src_data -> ad9144_dma_s_axi_agent:write_cp_data
	wire          cmd_mux_010_src_ready;                                                                     // ad9144_dma_s_axi_agent:write_cp_ready -> cmd_mux_010:src_ready
	wire   [42:0] cmd_mux_010_src_channel;                                                                   // cmd_mux_010:src_channel -> ad9144_dma_s_axi_agent:write_cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                             // cmd_mux_010:src_startofpacket -> ad9144_dma_s_axi_agent:write_cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                               // cmd_mux_010:src_endofpacket -> ad9144_dma_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                     // cmd_mux_011:src_valid -> ad9144_dma_s_axi_agent:read_cp_valid
	wire  [141:0] cmd_mux_011_src_data;                                                                      // cmd_mux_011:src_data -> ad9144_dma_s_axi_agent:read_cp_data
	wire          cmd_mux_011_src_ready;                                                                     // ad9144_dma_s_axi_agent:read_cp_ready -> cmd_mux_011:src_ready
	wire   [42:0] cmd_mux_011_src_channel;                                                                   // cmd_mux_011:src_channel -> ad9144_dma_s_axi_agent:read_cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                             // cmd_mux_011:src_startofpacket -> ad9144_dma_s_axi_agent:read_cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                               // cmd_mux_011:src_endofpacket -> ad9144_dma_s_axi_agent:read_cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                     // cmd_mux_012:src_valid -> ad9680_dma_s_axi_agent:write_cp_valid
	wire  [141:0] cmd_mux_012_src_data;                                                                      // cmd_mux_012:src_data -> ad9680_dma_s_axi_agent:write_cp_data
	wire          cmd_mux_012_src_ready;                                                                     // ad9680_dma_s_axi_agent:write_cp_ready -> cmd_mux_012:src_ready
	wire   [42:0] cmd_mux_012_src_channel;                                                                   // cmd_mux_012:src_channel -> ad9680_dma_s_axi_agent:write_cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                             // cmd_mux_012:src_startofpacket -> ad9680_dma_s_axi_agent:write_cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                               // cmd_mux_012:src_endofpacket -> ad9680_dma_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                     // cmd_mux_013:src_valid -> ad9680_dma_s_axi_agent:read_cp_valid
	wire  [141:0] cmd_mux_013_src_data;                                                                      // cmd_mux_013:src_data -> ad9680_dma_s_axi_agent:read_cp_data
	wire          cmd_mux_013_src_ready;                                                                     // ad9680_dma_s_axi_agent:read_cp_ready -> cmd_mux_013:src_ready
	wire   [42:0] cmd_mux_013_src_channel;                                                                   // cmd_mux_013:src_channel -> ad9680_dma_s_axi_agent:read_cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                             // cmd_mux_013:src_startofpacket -> ad9680_dma_s_axi_agent:read_cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                               // cmd_mux_013:src_endofpacket -> ad9680_dma_s_axi_agent:read_cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                     // cmd_mux_014:src_valid -> ad9680_core_s_axi_agent:write_cp_valid
	wire  [141:0] cmd_mux_014_src_data;                                                                      // cmd_mux_014:src_data -> ad9680_core_s_axi_agent:write_cp_data
	wire          cmd_mux_014_src_ready;                                                                     // ad9680_core_s_axi_agent:write_cp_ready -> cmd_mux_014:src_ready
	wire   [42:0] cmd_mux_014_src_channel;                                                                   // cmd_mux_014:src_channel -> ad9680_core_s_axi_agent:write_cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                             // cmd_mux_014:src_startofpacket -> ad9680_core_s_axi_agent:write_cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                               // cmd_mux_014:src_endofpacket -> ad9680_core_s_axi_agent:write_cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                     // cmd_mux_015:src_valid -> ad9680_core_s_axi_agent:read_cp_valid
	wire  [141:0] cmd_mux_015_src_data;                                                                      // cmd_mux_015:src_data -> ad9680_core_s_axi_agent:read_cp_data
	wire          cmd_mux_015_src_ready;                                                                     // ad9680_core_s_axi_agent:read_cp_ready -> cmd_mux_015:src_ready
	wire   [42:0] cmd_mux_015_src_channel;                                                                   // cmd_mux_015:src_channel -> ad9680_core_s_axi_agent:read_cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                             // cmd_mux_015:src_startofpacket -> ad9680_core_s_axi_agent:read_cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                               // cmd_mux_015:src_endofpacket -> ad9680_core_s_axi_agent:read_cp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                        // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                            // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                              // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [142:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [142:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                                   // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          cmd_mux_016_src_valid;                                                                     // cmd_mux_016:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [141:0] cmd_mux_016_src_data;                                                                      // cmd_mux_016:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                     // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [42:0] cmd_mux_016_src_channel;                                                                   // cmd_mux_016:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                             // cmd_mux_016:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                               // cmd_mux_016:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] i2c_csr_agent_m0_readdata;                                                                 // i2c_csr_translator:uav_readdata -> i2c_csr_agent:m0_readdata
	wire          i2c_csr_agent_m0_waitrequest;                                                              // i2c_csr_translator:uav_waitrequest -> i2c_csr_agent:m0_waitrequest
	wire          i2c_csr_agent_m0_debugaccess;                                                              // i2c_csr_agent:m0_debugaccess -> i2c_csr_translator:uav_debugaccess
	wire   [31:0] i2c_csr_agent_m0_address;                                                                  // i2c_csr_agent:m0_address -> i2c_csr_translator:uav_address
	wire    [3:0] i2c_csr_agent_m0_byteenable;                                                               // i2c_csr_agent:m0_byteenable -> i2c_csr_translator:uav_byteenable
	wire          i2c_csr_agent_m0_read;                                                                     // i2c_csr_agent:m0_read -> i2c_csr_translator:uav_read
	wire          i2c_csr_agent_m0_readdatavalid;                                                            // i2c_csr_translator:uav_readdatavalid -> i2c_csr_agent:m0_readdatavalid
	wire          i2c_csr_agent_m0_lock;                                                                     // i2c_csr_agent:m0_lock -> i2c_csr_translator:uav_lock
	wire   [31:0] i2c_csr_agent_m0_writedata;                                                                // i2c_csr_agent:m0_writedata -> i2c_csr_translator:uav_writedata
	wire          i2c_csr_agent_m0_write;                                                                    // i2c_csr_agent:m0_write -> i2c_csr_translator:uav_write
	wire    [2:0] i2c_csr_agent_m0_burstcount;                                                               // i2c_csr_agent:m0_burstcount -> i2c_csr_translator:uav_burstcount
	wire          i2c_csr_agent_rf_source_valid;                                                             // i2c_csr_agent:rf_source_valid -> i2c_csr_agent_rsp_fifo:in_valid
	wire  [142:0] i2c_csr_agent_rf_source_data;                                                              // i2c_csr_agent:rf_source_data -> i2c_csr_agent_rsp_fifo:in_data
	wire          i2c_csr_agent_rf_source_ready;                                                             // i2c_csr_agent_rsp_fifo:in_ready -> i2c_csr_agent:rf_source_ready
	wire          i2c_csr_agent_rf_source_startofpacket;                                                     // i2c_csr_agent:rf_source_startofpacket -> i2c_csr_agent_rsp_fifo:in_startofpacket
	wire          i2c_csr_agent_rf_source_endofpacket;                                                       // i2c_csr_agent:rf_source_endofpacket -> i2c_csr_agent_rsp_fifo:in_endofpacket
	wire          i2c_csr_agent_rsp_fifo_out_valid;                                                          // i2c_csr_agent_rsp_fifo:out_valid -> i2c_csr_agent:rf_sink_valid
	wire  [142:0] i2c_csr_agent_rsp_fifo_out_data;                                                           // i2c_csr_agent_rsp_fifo:out_data -> i2c_csr_agent:rf_sink_data
	wire          i2c_csr_agent_rsp_fifo_out_ready;                                                          // i2c_csr_agent:rf_sink_ready -> i2c_csr_agent_rsp_fifo:out_ready
	wire          i2c_csr_agent_rsp_fifo_out_startofpacket;                                                  // i2c_csr_agent_rsp_fifo:out_startofpacket -> i2c_csr_agent:rf_sink_startofpacket
	wire          i2c_csr_agent_rsp_fifo_out_endofpacket;                                                    // i2c_csr_agent_rsp_fifo:out_endofpacket -> i2c_csr_agent:rf_sink_endofpacket
	wire          i2c_csr_agent_rdata_fifo_src_valid;                                                        // i2c_csr_agent:rdata_fifo_src_valid -> i2c_csr_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_csr_agent_rdata_fifo_src_data;                                                         // i2c_csr_agent:rdata_fifo_src_data -> i2c_csr_agent_rdata_fifo:in_data
	wire          i2c_csr_agent_rdata_fifo_src_ready;                                                        // i2c_csr_agent_rdata_fifo:in_ready -> i2c_csr_agent:rdata_fifo_src_ready
	wire          i2c_csr_agent_rdata_fifo_out_valid;                                                        // i2c_csr_agent_rdata_fifo:out_valid -> i2c_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] i2c_csr_agent_rdata_fifo_out_data;                                                         // i2c_csr_agent_rdata_fifo:out_data -> i2c_csr_agent:rdata_fifo_sink_data
	wire          i2c_csr_agent_rdata_fifo_out_ready;                                                        // i2c_csr_agent:rdata_fifo_sink_ready -> i2c_csr_agent_rdata_fifo:out_ready
	wire          cmd_mux_017_src_valid;                                                                     // cmd_mux_017:src_valid -> i2c_csr_agent:cp_valid
	wire  [141:0] cmd_mux_017_src_data;                                                                      // cmd_mux_017:src_data -> i2c_csr_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                     // i2c_csr_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [42:0] cmd_mux_017_src_channel;                                                                   // cmd_mux_017:src_channel -> i2c_csr_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                             // cmd_mux_017:src_startofpacket -> i2c_csr_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                               // cmd_mux_017:src_endofpacket -> i2c_csr_agent:cp_endofpacket
	wire   [31:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdata;                                     // mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_readdata -> mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_readdata
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_waitrequest;                                  // mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_waitrequest -> mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_waitrequest
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_debugaccess;                                  // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_debugaccess -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_address;                                      // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_address -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_address
	wire    [3:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_byteenable;                                   // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_byteenable -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_byteenable
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_read;                                         // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_read -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_read
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdatavalid;                                // mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_readdatavalid -> mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_readdatavalid
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_lock;                                         // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_lock -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_writedata;                                    // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_writedata -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_writedata
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_write;                                        // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_write -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_write
	wire    [2:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_burstcount;                                   // mcu_subsystem_cpu_0_debug_mem_slave_agent:m0_burstcount -> mcu_subsystem_cpu_0_debug_mem_slave_translator:uav_burstcount
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_valid;                                 // mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_source_valid -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [142:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_data;                                  // mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_source_data -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_ready;                                 // mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:in_ready -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_source_ready
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_startofpacket;                         // mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_source_startofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_endofpacket;                           // mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_source_endofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:out_valid -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_sink_valid
	wire  [142:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:out_data -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_sink_data
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_sink_ready -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_src_valid -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_src_data -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:in_data
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:in_ready -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid;                            // mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:out_valid -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_data;                             // mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:out_data -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready;                            // mcu_subsystem_cpu_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          cmd_mux_018_src_valid;                                                                     // cmd_mux_018:src_valid -> mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_valid
	wire  [141:0] cmd_mux_018_src_data;                                                                      // cmd_mux_018:src_data -> mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                     // mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [42:0] cmd_mux_018_src_channel;                                                                   // cmd_mux_018:src_channel -> mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                             // cmd_mux_018:src_startofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                               // cmd_mux_018:src_endofpacket -> mcu_subsystem_cpu_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata;                                        // ad9144_jesd204_lane_pll_reconfig_translator:uav_readdata -> ad9144_jesd204_lane_pll_reconfig_agent:m0_readdata
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest;                                     // ad9144_jesd204_lane_pll_reconfig_translator:uav_waitrequest -> ad9144_jesd204_lane_pll_reconfig_agent:m0_waitrequest
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess;                                     // ad9144_jesd204_lane_pll_reconfig_agent:m0_debugaccess -> ad9144_jesd204_lane_pll_reconfig_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_address;                                         // ad9144_jesd204_lane_pll_reconfig_agent:m0_address -> ad9144_jesd204_lane_pll_reconfig_translator:uav_address
	wire    [3:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable;                                      // ad9144_jesd204_lane_pll_reconfig_agent:m0_byteenable -> ad9144_jesd204_lane_pll_reconfig_translator:uav_byteenable
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_read;                                            // ad9144_jesd204_lane_pll_reconfig_agent:m0_read -> ad9144_jesd204_lane_pll_reconfig_translator:uav_read
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid;                                   // ad9144_jesd204_lane_pll_reconfig_translator:uav_readdatavalid -> ad9144_jesd204_lane_pll_reconfig_agent:m0_readdatavalid
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_lock;                                            // ad9144_jesd204_lane_pll_reconfig_agent:m0_lock -> ad9144_jesd204_lane_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata;                                       // ad9144_jesd204_lane_pll_reconfig_agent:m0_writedata -> ad9144_jesd204_lane_pll_reconfig_translator:uav_writedata
	wire          ad9144_jesd204_lane_pll_reconfig_agent_m0_write;                                           // ad9144_jesd204_lane_pll_reconfig_agent:m0_write -> ad9144_jesd204_lane_pll_reconfig_translator:uav_write
	wire    [2:0] ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount;                                      // ad9144_jesd204_lane_pll_reconfig_agent:m0_burstcount -> ad9144_jesd204_lane_pll_reconfig_translator:uav_burstcount
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid;                                    // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_valid -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data;                                     // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_data -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready;                                    // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rf_source_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket;                            // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket;                              // ad9144_jesd204_lane_pll_reconfig_agent:rf_source_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid;                                 // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_valid -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data;                                  // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_data -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready;                                 // ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_ready -> ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket;                         // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket;                           // ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid;                               // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_valid -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data;                                // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_data -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready;                               // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:in_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid;                               // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_valid -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data;                                // ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_data -> ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready;                               // ad9144_jesd204_lane_pll_reconfig_agent:rdata_fifo_sink_ready -> ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo:out_ready
	wire          cmd_mux_019_src_valid;                                                                     // cmd_mux_019:src_valid -> ad9144_jesd204_lane_pll_reconfig_agent:cp_valid
	wire  [141:0] cmd_mux_019_src_data;                                                                      // cmd_mux_019:src_data -> ad9144_jesd204_lane_pll_reconfig_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                     // ad9144_jesd204_lane_pll_reconfig_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [42:0] cmd_mux_019_src_channel;                                                                   // cmd_mux_019:src_channel -> ad9144_jesd204_lane_pll_reconfig_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                             // cmd_mux_019:src_startofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                               // cmd_mux_019:src_endofpacket -> ad9144_jesd204_lane_pll_reconfig_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_link_pll_reconfig_agent_m0_readdata;                                        // ad9144_jesd204_link_pll_reconfig_translator:uav_readdata -> ad9144_jesd204_link_pll_reconfig_agent:m0_readdata
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest;                                     // ad9144_jesd204_link_pll_reconfig_translator:uav_waitrequest -> ad9144_jesd204_link_pll_reconfig_agent:m0_waitrequest
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess;                                     // ad9144_jesd204_link_pll_reconfig_agent:m0_debugaccess -> ad9144_jesd204_link_pll_reconfig_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_link_pll_reconfig_agent_m0_address;                                         // ad9144_jesd204_link_pll_reconfig_agent:m0_address -> ad9144_jesd204_link_pll_reconfig_translator:uav_address
	wire    [3:0] ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable;                                      // ad9144_jesd204_link_pll_reconfig_agent:m0_byteenable -> ad9144_jesd204_link_pll_reconfig_translator:uav_byteenable
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_read;                                            // ad9144_jesd204_link_pll_reconfig_agent:m0_read -> ad9144_jesd204_link_pll_reconfig_translator:uav_read
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid;                                   // ad9144_jesd204_link_pll_reconfig_translator:uav_readdatavalid -> ad9144_jesd204_link_pll_reconfig_agent:m0_readdatavalid
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_lock;                                            // ad9144_jesd204_link_pll_reconfig_agent:m0_lock -> ad9144_jesd204_link_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9144_jesd204_link_pll_reconfig_agent_m0_writedata;                                       // ad9144_jesd204_link_pll_reconfig_agent:m0_writedata -> ad9144_jesd204_link_pll_reconfig_translator:uav_writedata
	wire          ad9144_jesd204_link_pll_reconfig_agent_m0_write;                                           // ad9144_jesd204_link_pll_reconfig_agent:m0_write -> ad9144_jesd204_link_pll_reconfig_translator:uav_write
	wire    [2:0] ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount;                                      // ad9144_jesd204_link_pll_reconfig_agent:m0_burstcount -> ad9144_jesd204_link_pll_reconfig_translator:uav_burstcount
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid;                                    // ad9144_jesd204_link_pll_reconfig_agent:rf_source_valid -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_link_pll_reconfig_agent_rf_source_data;                                     // ad9144_jesd204_link_pll_reconfig_agent:rf_source_data -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready;                                    // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_ready -> ad9144_jesd204_link_pll_reconfig_agent:rf_source_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket;                            // ad9144_jesd204_link_pll_reconfig_agent:rf_source_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket;                              // ad9144_jesd204_link_pll_reconfig_agent:rf_source_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid;                                 // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_valid -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data;                                  // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_data -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready;                                 // ad9144_jesd204_link_pll_reconfig_agent:rf_sink_ready -> ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket;                         // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket;                           // ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid;                               // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_valid -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data;                                // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_data -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready;                               // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:in_ready -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid;                               // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_valid -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data;                                // ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_data -> ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready;                               // ad9144_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_ready -> ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo:out_ready
	wire          cmd_mux_020_src_valid;                                                                     // cmd_mux_020:src_valid -> ad9144_jesd204_link_pll_reconfig_agent:cp_valid
	wire  [141:0] cmd_mux_020_src_data;                                                                      // cmd_mux_020:src_data -> ad9144_jesd204_link_pll_reconfig_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                     // ad9144_jesd204_link_pll_reconfig_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [42:0] cmd_mux_020_src_channel;                                                                   // cmd_mux_020:src_channel -> ad9144_jesd204_link_pll_reconfig_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                             // cmd_mux_020:src_startofpacket -> ad9144_jesd204_link_pll_reconfig_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                               // cmd_mux_020:src_endofpacket -> ad9144_jesd204_link_pll_reconfig_agent:cp_endofpacket
	wire   [31:0] ad9680_jesd204_link_pll_reconfig_agent_m0_readdata;                                        // ad9680_jesd204_link_pll_reconfig_translator:uav_readdata -> ad9680_jesd204_link_pll_reconfig_agent:m0_readdata
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest;                                     // ad9680_jesd204_link_pll_reconfig_translator:uav_waitrequest -> ad9680_jesd204_link_pll_reconfig_agent:m0_waitrequest
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess;                                     // ad9680_jesd204_link_pll_reconfig_agent:m0_debugaccess -> ad9680_jesd204_link_pll_reconfig_translator:uav_debugaccess
	wire   [31:0] ad9680_jesd204_link_pll_reconfig_agent_m0_address;                                         // ad9680_jesd204_link_pll_reconfig_agent:m0_address -> ad9680_jesd204_link_pll_reconfig_translator:uav_address
	wire    [3:0] ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable;                                      // ad9680_jesd204_link_pll_reconfig_agent:m0_byteenable -> ad9680_jesd204_link_pll_reconfig_translator:uav_byteenable
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_read;                                            // ad9680_jesd204_link_pll_reconfig_agent:m0_read -> ad9680_jesd204_link_pll_reconfig_translator:uav_read
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid;                                   // ad9680_jesd204_link_pll_reconfig_translator:uav_readdatavalid -> ad9680_jesd204_link_pll_reconfig_agent:m0_readdatavalid
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_lock;                                            // ad9680_jesd204_link_pll_reconfig_agent:m0_lock -> ad9680_jesd204_link_pll_reconfig_translator:uav_lock
	wire   [31:0] ad9680_jesd204_link_pll_reconfig_agent_m0_writedata;                                       // ad9680_jesd204_link_pll_reconfig_agent:m0_writedata -> ad9680_jesd204_link_pll_reconfig_translator:uav_writedata
	wire          ad9680_jesd204_link_pll_reconfig_agent_m0_write;                                           // ad9680_jesd204_link_pll_reconfig_agent:m0_write -> ad9680_jesd204_link_pll_reconfig_translator:uav_write
	wire    [2:0] ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount;                                      // ad9680_jesd204_link_pll_reconfig_agent:m0_burstcount -> ad9680_jesd204_link_pll_reconfig_translator:uav_burstcount
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid;                                    // ad9680_jesd204_link_pll_reconfig_agent:rf_source_valid -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_valid
	wire  [142:0] ad9680_jesd204_link_pll_reconfig_agent_rf_source_data;                                     // ad9680_jesd204_link_pll_reconfig_agent:rf_source_data -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready;                                    // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_ready -> ad9680_jesd204_link_pll_reconfig_agent:rf_source_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket;                            // ad9680_jesd204_link_pll_reconfig_agent:rf_source_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket;                              // ad9680_jesd204_link_pll_reconfig_agent:rf_source_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid;                                 // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_valid -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_valid
	wire  [142:0] ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data;                                  // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_data -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready;                                 // ad9680_jesd204_link_pll_reconfig_agent:rf_sink_ready -> ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket;                         // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket;                           // ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid;                               // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_valid -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data;                                // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_data -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready;                               // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:in_ready -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_src_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid;                               // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_valid -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data;                                // ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_data -> ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready;                               // ad9680_jesd204_link_pll_reconfig_agent:rdata_fifo_sink_ready -> ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo:out_ready
	wire          cmd_mux_021_src_valid;                                                                     // cmd_mux_021:src_valid -> ad9680_jesd204_link_pll_reconfig_agent:cp_valid
	wire  [141:0] cmd_mux_021_src_data;                                                                      // cmd_mux_021:src_data -> ad9680_jesd204_link_pll_reconfig_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                     // ad9680_jesd204_link_pll_reconfig_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [42:0] cmd_mux_021_src_channel;                                                                   // cmd_mux_021:src_channel -> ad9680_jesd204_link_pll_reconfig_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                             // cmd_mux_021:src_startofpacket -> ad9680_jesd204_link_pll_reconfig_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                               // cmd_mux_021:src_endofpacket -> ad9680_jesd204_link_pll_reconfig_agent:cp_endofpacket
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdata;                                   // phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_readdata -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_readdata
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_waitrequest;                                // phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_waitrequest -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_waitrequest
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_debugaccess;                                // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_debugaccess -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_debugaccess
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_address;                                    // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_address -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_address
	wire    [3:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_byteenable;                                 // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_byteenable -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_byteenable
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_read;                                       // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_read -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_read
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdatavalid;                              // phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_readdatavalid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_readdatavalid
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_lock;                                       // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_lock -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_lock
	wire   [31:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_writedata;                                  // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_writedata -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_writedata
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_write;                                      // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_write -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_write
	wire    [2:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_burstcount;                                 // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:m0_burstcount -> phy_interlaken_0_phy_data_ctrl_csr_s0_translator:uav_burstcount
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_valid;                               // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_source_valid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_valid
	wire  [142:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_data;                                // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_source_data -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_data
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_ready;                               // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_ready -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_source_ready
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket;                       // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_source_startofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_startofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket;                         // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_source_endofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_endofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid;                            // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_valid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_sink_valid
	wire  [142:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data;                             // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_data -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_sink_data
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready;                            // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_sink_ready -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_ready
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket;                    // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_startofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_sink_startofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket;                      // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_endofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rf_sink_endofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid;                          // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_valid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_valid
	wire   [33:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data;                           // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_data -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_data
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready;                          // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_ready -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_ready
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid;                          // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_valid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data;                           // phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_data -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_data
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready;                          // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_ready -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_022_src_valid;                                                                     // cmd_mux_022:src_valid -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_valid
	wire  [141:0] cmd_mux_022_src_data;                                                                      // cmd_mux_022:src_data -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                     // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [42:0] cmd_mux_022_src_channel;                                                                   // cmd_mux_022:src_channel -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                             // cmd_mux_022:src_startofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                               // cmd_mux_022:src_endofpacket -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:cp_endofpacket
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdata;                                   // phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_readdata -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_readdata
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_waitrequest;                                // phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_waitrequest -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_waitrequest
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_debugaccess;                                // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_debugaccess -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_debugaccess
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_address;                                    // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_address -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_address
	wire    [3:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_byteenable;                                 // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_byteenable -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_byteenable
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_read;                                       // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_read -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_read
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdatavalid;                              // phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_readdatavalid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_readdatavalid
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_lock;                                       // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_lock -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_lock
	wire   [31:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_writedata;                                  // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_writedata -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_writedata
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_write;                                      // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_write -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_write
	wire    [2:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_burstcount;                                 // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:m0_burstcount -> phy_interlaken_1_phy_data_ctrl_csr_s0_translator:uav_burstcount
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_valid;                               // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_source_valid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_valid
	wire  [142:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_data;                                // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_source_data -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_data
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_ready;                               // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_ready -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_source_ready
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket;                       // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_source_startofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_startofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket;                         // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_source_endofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:in_endofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid;                            // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_valid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_sink_valid
	wire  [142:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data;                             // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_data -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_sink_data
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready;                            // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_sink_ready -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_ready
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket;                    // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_startofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_sink_startofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket;                      // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo:out_endofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rf_sink_endofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid;                          // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_valid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_valid
	wire   [33:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data;                           // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_data -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_data
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready;                          // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:in_ready -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_src_ready
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid;                          // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_valid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data;                           // phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_data -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_data
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready;                          // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rdata_fifo_sink_ready -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_023_src_valid;                                                                     // cmd_mux_023:src_valid -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_valid
	wire  [141:0] cmd_mux_023_src_data;                                                                      // cmd_mux_023:src_data -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                     // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [42:0] cmd_mux_023_src_channel;                                                                   // cmd_mux_023:src_channel -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                             // cmd_mux_023:src_startofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                               // cmd_mux_023:src_endofpacket -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_phy_reconfig_0_agent_m0_readdata;                                           // ad9144_jesd204_phy_reconfig_0_translator:uav_readdata -> ad9144_jesd204_phy_reconfig_0_agent:m0_readdata
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_waitrequest;                                        // ad9144_jesd204_phy_reconfig_0_translator:uav_waitrequest -> ad9144_jesd204_phy_reconfig_0_agent:m0_waitrequest
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_debugaccess;                                        // ad9144_jesd204_phy_reconfig_0_agent:m0_debugaccess -> ad9144_jesd204_phy_reconfig_0_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_phy_reconfig_0_agent_m0_address;                                            // ad9144_jesd204_phy_reconfig_0_agent:m0_address -> ad9144_jesd204_phy_reconfig_0_translator:uav_address
	wire    [3:0] ad9144_jesd204_phy_reconfig_0_agent_m0_byteenable;                                         // ad9144_jesd204_phy_reconfig_0_agent:m0_byteenable -> ad9144_jesd204_phy_reconfig_0_translator:uav_byteenable
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_read;                                               // ad9144_jesd204_phy_reconfig_0_agent:m0_read -> ad9144_jesd204_phy_reconfig_0_translator:uav_read
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_readdatavalid;                                      // ad9144_jesd204_phy_reconfig_0_translator:uav_readdatavalid -> ad9144_jesd204_phy_reconfig_0_agent:m0_readdatavalid
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_lock;                                               // ad9144_jesd204_phy_reconfig_0_agent:m0_lock -> ad9144_jesd204_phy_reconfig_0_translator:uav_lock
	wire   [31:0] ad9144_jesd204_phy_reconfig_0_agent_m0_writedata;                                          // ad9144_jesd204_phy_reconfig_0_agent:m0_writedata -> ad9144_jesd204_phy_reconfig_0_translator:uav_writedata
	wire          ad9144_jesd204_phy_reconfig_0_agent_m0_write;                                              // ad9144_jesd204_phy_reconfig_0_agent:m0_write -> ad9144_jesd204_phy_reconfig_0_translator:uav_write
	wire    [2:0] ad9144_jesd204_phy_reconfig_0_agent_m0_burstcount;                                         // ad9144_jesd204_phy_reconfig_0_agent:m0_burstcount -> ad9144_jesd204_phy_reconfig_0_translator:uav_burstcount
	wire          ad9144_jesd204_phy_reconfig_0_agent_rf_source_valid;                                       // ad9144_jesd204_phy_reconfig_0_agent:rf_source_valid -> ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_0_agent_rf_source_data;                                        // ad9144_jesd204_phy_reconfig_0_agent:rf_source_data -> ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_0_agent_rf_source_ready;                                       // ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:in_ready -> ad9144_jesd204_phy_reconfig_0_agent:rf_source_ready
	wire          ad9144_jesd204_phy_reconfig_0_agent_rf_source_startofpacket;                               // ad9144_jesd204_phy_reconfig_0_agent:rf_source_startofpacket -> ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rf_source_endofpacket;                                 // ad9144_jesd204_phy_reconfig_0_agent:rf_source_endofpacket -> ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid;                                    // ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:out_valid -> ad9144_jesd204_phy_reconfig_0_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data;                                     // ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:out_data -> ad9144_jesd204_phy_reconfig_0_agent:rf_sink_data
	wire          ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready;                                    // ad9144_jesd204_phy_reconfig_0_agent:rf_sink_ready -> ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket;                            // ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_phy_reconfig_0_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket;                              // ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_phy_reconfig_0_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid;                                  // ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_src_valid -> ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data;                                   // ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_src_data -> ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready;                                  // ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:in_ready -> ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid;                                  // ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:out_valid -> ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data;                                   // ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:out_data -> ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready;                                  // ad9144_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_ready -> ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo:out_ready
	wire          cmd_mux_024_src_valid;                                                                     // cmd_mux_024:src_valid -> ad9144_jesd204_phy_reconfig_0_agent:cp_valid
	wire  [141:0] cmd_mux_024_src_data;                                                                      // cmd_mux_024:src_data -> ad9144_jesd204_phy_reconfig_0_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                     // ad9144_jesd204_phy_reconfig_0_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [42:0] cmd_mux_024_src_channel;                                                                   // cmd_mux_024:src_channel -> ad9144_jesd204_phy_reconfig_0_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                             // cmd_mux_024:src_startofpacket -> ad9144_jesd204_phy_reconfig_0_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                               // cmd_mux_024:src_endofpacket -> ad9144_jesd204_phy_reconfig_0_agent:cp_endofpacket
	wire   [31:0] ad9680_jesd204_phy_reconfig_0_agent_m0_readdata;                                           // ad9680_jesd204_phy_reconfig_0_translator:uav_readdata -> ad9680_jesd204_phy_reconfig_0_agent:m0_readdata
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_waitrequest;                                        // ad9680_jesd204_phy_reconfig_0_translator:uav_waitrequest -> ad9680_jesd204_phy_reconfig_0_agent:m0_waitrequest
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_debugaccess;                                        // ad9680_jesd204_phy_reconfig_0_agent:m0_debugaccess -> ad9680_jesd204_phy_reconfig_0_translator:uav_debugaccess
	wire   [31:0] ad9680_jesd204_phy_reconfig_0_agent_m0_address;                                            // ad9680_jesd204_phy_reconfig_0_agent:m0_address -> ad9680_jesd204_phy_reconfig_0_translator:uav_address
	wire    [3:0] ad9680_jesd204_phy_reconfig_0_agent_m0_byteenable;                                         // ad9680_jesd204_phy_reconfig_0_agent:m0_byteenable -> ad9680_jesd204_phy_reconfig_0_translator:uav_byteenable
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_read;                                               // ad9680_jesd204_phy_reconfig_0_agent:m0_read -> ad9680_jesd204_phy_reconfig_0_translator:uav_read
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_readdatavalid;                                      // ad9680_jesd204_phy_reconfig_0_translator:uav_readdatavalid -> ad9680_jesd204_phy_reconfig_0_agent:m0_readdatavalid
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_lock;                                               // ad9680_jesd204_phy_reconfig_0_agent:m0_lock -> ad9680_jesd204_phy_reconfig_0_translator:uav_lock
	wire   [31:0] ad9680_jesd204_phy_reconfig_0_agent_m0_writedata;                                          // ad9680_jesd204_phy_reconfig_0_agent:m0_writedata -> ad9680_jesd204_phy_reconfig_0_translator:uav_writedata
	wire          ad9680_jesd204_phy_reconfig_0_agent_m0_write;                                              // ad9680_jesd204_phy_reconfig_0_agent:m0_write -> ad9680_jesd204_phy_reconfig_0_translator:uav_write
	wire    [2:0] ad9680_jesd204_phy_reconfig_0_agent_m0_burstcount;                                         // ad9680_jesd204_phy_reconfig_0_agent:m0_burstcount -> ad9680_jesd204_phy_reconfig_0_translator:uav_burstcount
	wire          ad9680_jesd204_phy_reconfig_0_agent_rf_source_valid;                                       // ad9680_jesd204_phy_reconfig_0_agent:rf_source_valid -> ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:in_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_0_agent_rf_source_data;                                        // ad9680_jesd204_phy_reconfig_0_agent:rf_source_data -> ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_0_agent_rf_source_ready;                                       // ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:in_ready -> ad9680_jesd204_phy_reconfig_0_agent:rf_source_ready
	wire          ad9680_jesd204_phy_reconfig_0_agent_rf_source_startofpacket;                               // ad9680_jesd204_phy_reconfig_0_agent:rf_source_startofpacket -> ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rf_source_endofpacket;                                 // ad9680_jesd204_phy_reconfig_0_agent:rf_source_endofpacket -> ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid;                                    // ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:out_valid -> ad9680_jesd204_phy_reconfig_0_agent:rf_sink_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data;                                     // ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:out_data -> ad9680_jesd204_phy_reconfig_0_agent:rf_sink_data
	wire          ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready;                                    // ad9680_jesd204_phy_reconfig_0_agent:rf_sink_ready -> ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket;                            // ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_phy_reconfig_0_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket;                              // ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_phy_reconfig_0_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid;                                  // ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_src_valid -> ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data;                                   // ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_src_data -> ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready;                                  // ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:in_ready -> ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_src_ready
	wire          ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid;                                  // ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:out_valid -> ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data;                                   // ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:out_data -> ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_data
	wire          ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready;                                  // ad9680_jesd204_phy_reconfig_0_agent:rdata_fifo_sink_ready -> ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo:out_ready
	wire          cmd_mux_025_src_valid;                                                                     // cmd_mux_025:src_valid -> ad9680_jesd204_phy_reconfig_0_agent:cp_valid
	wire  [141:0] cmd_mux_025_src_data;                                                                      // cmd_mux_025:src_data -> ad9680_jesd204_phy_reconfig_0_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                                     // ad9680_jesd204_phy_reconfig_0_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [42:0] cmd_mux_025_src_channel;                                                                   // cmd_mux_025:src_channel -> ad9680_jesd204_phy_reconfig_0_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                             // cmd_mux_025:src_startofpacket -> ad9680_jesd204_phy_reconfig_0_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                               // cmd_mux_025:src_endofpacket -> ad9680_jesd204_phy_reconfig_0_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_phy_reconfig_1_agent_m0_readdata;                                           // ad9144_jesd204_phy_reconfig_1_translator:uav_readdata -> ad9144_jesd204_phy_reconfig_1_agent:m0_readdata
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_waitrequest;                                        // ad9144_jesd204_phy_reconfig_1_translator:uav_waitrequest -> ad9144_jesd204_phy_reconfig_1_agent:m0_waitrequest
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_debugaccess;                                        // ad9144_jesd204_phy_reconfig_1_agent:m0_debugaccess -> ad9144_jesd204_phy_reconfig_1_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_phy_reconfig_1_agent_m0_address;                                            // ad9144_jesd204_phy_reconfig_1_agent:m0_address -> ad9144_jesd204_phy_reconfig_1_translator:uav_address
	wire    [3:0] ad9144_jesd204_phy_reconfig_1_agent_m0_byteenable;                                         // ad9144_jesd204_phy_reconfig_1_agent:m0_byteenable -> ad9144_jesd204_phy_reconfig_1_translator:uav_byteenable
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_read;                                               // ad9144_jesd204_phy_reconfig_1_agent:m0_read -> ad9144_jesd204_phy_reconfig_1_translator:uav_read
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_readdatavalid;                                      // ad9144_jesd204_phy_reconfig_1_translator:uav_readdatavalid -> ad9144_jesd204_phy_reconfig_1_agent:m0_readdatavalid
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_lock;                                               // ad9144_jesd204_phy_reconfig_1_agent:m0_lock -> ad9144_jesd204_phy_reconfig_1_translator:uav_lock
	wire   [31:0] ad9144_jesd204_phy_reconfig_1_agent_m0_writedata;                                          // ad9144_jesd204_phy_reconfig_1_agent:m0_writedata -> ad9144_jesd204_phy_reconfig_1_translator:uav_writedata
	wire          ad9144_jesd204_phy_reconfig_1_agent_m0_write;                                              // ad9144_jesd204_phy_reconfig_1_agent:m0_write -> ad9144_jesd204_phy_reconfig_1_translator:uav_write
	wire    [2:0] ad9144_jesd204_phy_reconfig_1_agent_m0_burstcount;                                         // ad9144_jesd204_phy_reconfig_1_agent:m0_burstcount -> ad9144_jesd204_phy_reconfig_1_translator:uav_burstcount
	wire          ad9144_jesd204_phy_reconfig_1_agent_rf_source_valid;                                       // ad9144_jesd204_phy_reconfig_1_agent:rf_source_valid -> ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_1_agent_rf_source_data;                                        // ad9144_jesd204_phy_reconfig_1_agent:rf_source_data -> ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_1_agent_rf_source_ready;                                       // ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:in_ready -> ad9144_jesd204_phy_reconfig_1_agent:rf_source_ready
	wire          ad9144_jesd204_phy_reconfig_1_agent_rf_source_startofpacket;                               // ad9144_jesd204_phy_reconfig_1_agent:rf_source_startofpacket -> ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rf_source_endofpacket;                                 // ad9144_jesd204_phy_reconfig_1_agent:rf_source_endofpacket -> ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid;                                    // ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:out_valid -> ad9144_jesd204_phy_reconfig_1_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data;                                     // ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:out_data -> ad9144_jesd204_phy_reconfig_1_agent:rf_sink_data
	wire          ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready;                                    // ad9144_jesd204_phy_reconfig_1_agent:rf_sink_ready -> ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket;                            // ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_phy_reconfig_1_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket;                              // ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_phy_reconfig_1_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid;                                  // ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_src_valid -> ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data;                                   // ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_src_data -> ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready;                                  // ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:in_ready -> ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid;                                  // ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:out_valid -> ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data;                                   // ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:out_data -> ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready;                                  // ad9144_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_ready -> ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo:out_ready
	wire          cmd_mux_026_src_valid;                                                                     // cmd_mux_026:src_valid -> ad9144_jesd204_phy_reconfig_1_agent:cp_valid
	wire  [141:0] cmd_mux_026_src_data;                                                                      // cmd_mux_026:src_data -> ad9144_jesd204_phy_reconfig_1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                                     // ad9144_jesd204_phy_reconfig_1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [42:0] cmd_mux_026_src_channel;                                                                   // cmd_mux_026:src_channel -> ad9144_jesd204_phy_reconfig_1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                             // cmd_mux_026:src_startofpacket -> ad9144_jesd204_phy_reconfig_1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                               // cmd_mux_026:src_endofpacket -> ad9144_jesd204_phy_reconfig_1_agent:cp_endofpacket
	wire   [31:0] ad9680_jesd204_phy_reconfig_1_agent_m0_readdata;                                           // ad9680_jesd204_phy_reconfig_1_translator:uav_readdata -> ad9680_jesd204_phy_reconfig_1_agent:m0_readdata
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_waitrequest;                                        // ad9680_jesd204_phy_reconfig_1_translator:uav_waitrequest -> ad9680_jesd204_phy_reconfig_1_agent:m0_waitrequest
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_debugaccess;                                        // ad9680_jesd204_phy_reconfig_1_agent:m0_debugaccess -> ad9680_jesd204_phy_reconfig_1_translator:uav_debugaccess
	wire   [31:0] ad9680_jesd204_phy_reconfig_1_agent_m0_address;                                            // ad9680_jesd204_phy_reconfig_1_agent:m0_address -> ad9680_jesd204_phy_reconfig_1_translator:uav_address
	wire    [3:0] ad9680_jesd204_phy_reconfig_1_agent_m0_byteenable;                                         // ad9680_jesd204_phy_reconfig_1_agent:m0_byteenable -> ad9680_jesd204_phy_reconfig_1_translator:uav_byteenable
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_read;                                               // ad9680_jesd204_phy_reconfig_1_agent:m0_read -> ad9680_jesd204_phy_reconfig_1_translator:uav_read
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_readdatavalid;                                      // ad9680_jesd204_phy_reconfig_1_translator:uav_readdatavalid -> ad9680_jesd204_phy_reconfig_1_agent:m0_readdatavalid
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_lock;                                               // ad9680_jesd204_phy_reconfig_1_agent:m0_lock -> ad9680_jesd204_phy_reconfig_1_translator:uav_lock
	wire   [31:0] ad9680_jesd204_phy_reconfig_1_agent_m0_writedata;                                          // ad9680_jesd204_phy_reconfig_1_agent:m0_writedata -> ad9680_jesd204_phy_reconfig_1_translator:uav_writedata
	wire          ad9680_jesd204_phy_reconfig_1_agent_m0_write;                                              // ad9680_jesd204_phy_reconfig_1_agent:m0_write -> ad9680_jesd204_phy_reconfig_1_translator:uav_write
	wire    [2:0] ad9680_jesd204_phy_reconfig_1_agent_m0_burstcount;                                         // ad9680_jesd204_phy_reconfig_1_agent:m0_burstcount -> ad9680_jesd204_phy_reconfig_1_translator:uav_burstcount
	wire          ad9680_jesd204_phy_reconfig_1_agent_rf_source_valid;                                       // ad9680_jesd204_phy_reconfig_1_agent:rf_source_valid -> ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:in_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_1_agent_rf_source_data;                                        // ad9680_jesd204_phy_reconfig_1_agent:rf_source_data -> ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_1_agent_rf_source_ready;                                       // ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:in_ready -> ad9680_jesd204_phy_reconfig_1_agent:rf_source_ready
	wire          ad9680_jesd204_phy_reconfig_1_agent_rf_source_startofpacket;                               // ad9680_jesd204_phy_reconfig_1_agent:rf_source_startofpacket -> ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rf_source_endofpacket;                                 // ad9680_jesd204_phy_reconfig_1_agent:rf_source_endofpacket -> ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid;                                    // ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:out_valid -> ad9680_jesd204_phy_reconfig_1_agent:rf_sink_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data;                                     // ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:out_data -> ad9680_jesd204_phy_reconfig_1_agent:rf_sink_data
	wire          ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready;                                    // ad9680_jesd204_phy_reconfig_1_agent:rf_sink_ready -> ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket;                            // ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_phy_reconfig_1_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket;                              // ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_phy_reconfig_1_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid;                                  // ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_src_valid -> ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data;                                   // ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_src_data -> ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready;                                  // ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:in_ready -> ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_src_ready
	wire          ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid;                                  // ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:out_valid -> ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data;                                   // ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:out_data -> ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_data
	wire          ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready;                                  // ad9680_jesd204_phy_reconfig_1_agent:rdata_fifo_sink_ready -> ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo:out_ready
	wire          cmd_mux_027_src_valid;                                                                     // cmd_mux_027:src_valid -> ad9680_jesd204_phy_reconfig_1_agent:cp_valid
	wire  [141:0] cmd_mux_027_src_data;                                                                      // cmd_mux_027:src_data -> ad9680_jesd204_phy_reconfig_1_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                                     // ad9680_jesd204_phy_reconfig_1_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [42:0] cmd_mux_027_src_channel;                                                                   // cmd_mux_027:src_channel -> ad9680_jesd204_phy_reconfig_1_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                             // cmd_mux_027:src_startofpacket -> ad9680_jesd204_phy_reconfig_1_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                               // cmd_mux_027:src_endofpacket -> ad9680_jesd204_phy_reconfig_1_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_phy_reconfig_2_agent_m0_readdata;                                           // ad9144_jesd204_phy_reconfig_2_translator:uav_readdata -> ad9144_jesd204_phy_reconfig_2_agent:m0_readdata
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_waitrequest;                                        // ad9144_jesd204_phy_reconfig_2_translator:uav_waitrequest -> ad9144_jesd204_phy_reconfig_2_agent:m0_waitrequest
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_debugaccess;                                        // ad9144_jesd204_phy_reconfig_2_agent:m0_debugaccess -> ad9144_jesd204_phy_reconfig_2_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_phy_reconfig_2_agent_m0_address;                                            // ad9144_jesd204_phy_reconfig_2_agent:m0_address -> ad9144_jesd204_phy_reconfig_2_translator:uav_address
	wire    [3:0] ad9144_jesd204_phy_reconfig_2_agent_m0_byteenable;                                         // ad9144_jesd204_phy_reconfig_2_agent:m0_byteenable -> ad9144_jesd204_phy_reconfig_2_translator:uav_byteenable
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_read;                                               // ad9144_jesd204_phy_reconfig_2_agent:m0_read -> ad9144_jesd204_phy_reconfig_2_translator:uav_read
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_readdatavalid;                                      // ad9144_jesd204_phy_reconfig_2_translator:uav_readdatavalid -> ad9144_jesd204_phy_reconfig_2_agent:m0_readdatavalid
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_lock;                                               // ad9144_jesd204_phy_reconfig_2_agent:m0_lock -> ad9144_jesd204_phy_reconfig_2_translator:uav_lock
	wire   [31:0] ad9144_jesd204_phy_reconfig_2_agent_m0_writedata;                                          // ad9144_jesd204_phy_reconfig_2_agent:m0_writedata -> ad9144_jesd204_phy_reconfig_2_translator:uav_writedata
	wire          ad9144_jesd204_phy_reconfig_2_agent_m0_write;                                              // ad9144_jesd204_phy_reconfig_2_agent:m0_write -> ad9144_jesd204_phy_reconfig_2_translator:uav_write
	wire    [2:0] ad9144_jesd204_phy_reconfig_2_agent_m0_burstcount;                                         // ad9144_jesd204_phy_reconfig_2_agent:m0_burstcount -> ad9144_jesd204_phy_reconfig_2_translator:uav_burstcount
	wire          ad9144_jesd204_phy_reconfig_2_agent_rf_source_valid;                                       // ad9144_jesd204_phy_reconfig_2_agent:rf_source_valid -> ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_2_agent_rf_source_data;                                        // ad9144_jesd204_phy_reconfig_2_agent:rf_source_data -> ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_2_agent_rf_source_ready;                                       // ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:in_ready -> ad9144_jesd204_phy_reconfig_2_agent:rf_source_ready
	wire          ad9144_jesd204_phy_reconfig_2_agent_rf_source_startofpacket;                               // ad9144_jesd204_phy_reconfig_2_agent:rf_source_startofpacket -> ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rf_source_endofpacket;                                 // ad9144_jesd204_phy_reconfig_2_agent:rf_source_endofpacket -> ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid;                                    // ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:out_valid -> ad9144_jesd204_phy_reconfig_2_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data;                                     // ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:out_data -> ad9144_jesd204_phy_reconfig_2_agent:rf_sink_data
	wire          ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready;                                    // ad9144_jesd204_phy_reconfig_2_agent:rf_sink_ready -> ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket;                            // ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_phy_reconfig_2_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket;                              // ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_phy_reconfig_2_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid;                                  // ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_src_valid -> ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data;                                   // ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_src_data -> ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready;                                  // ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:in_ready -> ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid;                                  // ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:out_valid -> ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data;                                   // ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:out_data -> ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready;                                  // ad9144_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_ready -> ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo:out_ready
	wire          cmd_mux_028_src_valid;                                                                     // cmd_mux_028:src_valid -> ad9144_jesd204_phy_reconfig_2_agent:cp_valid
	wire  [141:0] cmd_mux_028_src_data;                                                                      // cmd_mux_028:src_data -> ad9144_jesd204_phy_reconfig_2_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                                     // ad9144_jesd204_phy_reconfig_2_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [42:0] cmd_mux_028_src_channel;                                                                   // cmd_mux_028:src_channel -> ad9144_jesd204_phy_reconfig_2_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                             // cmd_mux_028:src_startofpacket -> ad9144_jesd204_phy_reconfig_2_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                               // cmd_mux_028:src_endofpacket -> ad9144_jesd204_phy_reconfig_2_agent:cp_endofpacket
	wire   [31:0] ad9680_jesd204_phy_reconfig_2_agent_m0_readdata;                                           // ad9680_jesd204_phy_reconfig_2_translator:uav_readdata -> ad9680_jesd204_phy_reconfig_2_agent:m0_readdata
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_waitrequest;                                        // ad9680_jesd204_phy_reconfig_2_translator:uav_waitrequest -> ad9680_jesd204_phy_reconfig_2_agent:m0_waitrequest
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_debugaccess;                                        // ad9680_jesd204_phy_reconfig_2_agent:m0_debugaccess -> ad9680_jesd204_phy_reconfig_2_translator:uav_debugaccess
	wire   [31:0] ad9680_jesd204_phy_reconfig_2_agent_m0_address;                                            // ad9680_jesd204_phy_reconfig_2_agent:m0_address -> ad9680_jesd204_phy_reconfig_2_translator:uav_address
	wire    [3:0] ad9680_jesd204_phy_reconfig_2_agent_m0_byteenable;                                         // ad9680_jesd204_phy_reconfig_2_agent:m0_byteenable -> ad9680_jesd204_phy_reconfig_2_translator:uav_byteenable
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_read;                                               // ad9680_jesd204_phy_reconfig_2_agent:m0_read -> ad9680_jesd204_phy_reconfig_2_translator:uav_read
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_readdatavalid;                                      // ad9680_jesd204_phy_reconfig_2_translator:uav_readdatavalid -> ad9680_jesd204_phy_reconfig_2_agent:m0_readdatavalid
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_lock;                                               // ad9680_jesd204_phy_reconfig_2_agent:m0_lock -> ad9680_jesd204_phy_reconfig_2_translator:uav_lock
	wire   [31:0] ad9680_jesd204_phy_reconfig_2_agent_m0_writedata;                                          // ad9680_jesd204_phy_reconfig_2_agent:m0_writedata -> ad9680_jesd204_phy_reconfig_2_translator:uav_writedata
	wire          ad9680_jesd204_phy_reconfig_2_agent_m0_write;                                              // ad9680_jesd204_phy_reconfig_2_agent:m0_write -> ad9680_jesd204_phy_reconfig_2_translator:uav_write
	wire    [2:0] ad9680_jesd204_phy_reconfig_2_agent_m0_burstcount;                                         // ad9680_jesd204_phy_reconfig_2_agent:m0_burstcount -> ad9680_jesd204_phy_reconfig_2_translator:uav_burstcount
	wire          ad9680_jesd204_phy_reconfig_2_agent_rf_source_valid;                                       // ad9680_jesd204_phy_reconfig_2_agent:rf_source_valid -> ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:in_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_2_agent_rf_source_data;                                        // ad9680_jesd204_phy_reconfig_2_agent:rf_source_data -> ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_2_agent_rf_source_ready;                                       // ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:in_ready -> ad9680_jesd204_phy_reconfig_2_agent:rf_source_ready
	wire          ad9680_jesd204_phy_reconfig_2_agent_rf_source_startofpacket;                               // ad9680_jesd204_phy_reconfig_2_agent:rf_source_startofpacket -> ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rf_source_endofpacket;                                 // ad9680_jesd204_phy_reconfig_2_agent:rf_source_endofpacket -> ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid;                                    // ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:out_valid -> ad9680_jesd204_phy_reconfig_2_agent:rf_sink_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data;                                     // ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:out_data -> ad9680_jesd204_phy_reconfig_2_agent:rf_sink_data
	wire          ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready;                                    // ad9680_jesd204_phy_reconfig_2_agent:rf_sink_ready -> ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket;                            // ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_phy_reconfig_2_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket;                              // ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_phy_reconfig_2_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid;                                  // ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_src_valid -> ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data;                                   // ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_src_data -> ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready;                                  // ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:in_ready -> ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_src_ready
	wire          ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid;                                  // ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:out_valid -> ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data;                                   // ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:out_data -> ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_data
	wire          ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready;                                  // ad9680_jesd204_phy_reconfig_2_agent:rdata_fifo_sink_ready -> ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo:out_ready
	wire          cmd_mux_029_src_valid;                                                                     // cmd_mux_029:src_valid -> ad9680_jesd204_phy_reconfig_2_agent:cp_valid
	wire  [141:0] cmd_mux_029_src_data;                                                                      // cmd_mux_029:src_data -> ad9680_jesd204_phy_reconfig_2_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                                     // ad9680_jesd204_phy_reconfig_2_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [42:0] cmd_mux_029_src_channel;                                                                   // cmd_mux_029:src_channel -> ad9680_jesd204_phy_reconfig_2_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                             // cmd_mux_029:src_startofpacket -> ad9680_jesd204_phy_reconfig_2_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                               // cmd_mux_029:src_endofpacket -> ad9680_jesd204_phy_reconfig_2_agent:cp_endofpacket
	wire   [31:0] ad9144_jesd204_phy_reconfig_3_agent_m0_readdata;                                           // ad9144_jesd204_phy_reconfig_3_translator:uav_readdata -> ad9144_jesd204_phy_reconfig_3_agent:m0_readdata
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_waitrequest;                                        // ad9144_jesd204_phy_reconfig_3_translator:uav_waitrequest -> ad9144_jesd204_phy_reconfig_3_agent:m0_waitrequest
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_debugaccess;                                        // ad9144_jesd204_phy_reconfig_3_agent:m0_debugaccess -> ad9144_jesd204_phy_reconfig_3_translator:uav_debugaccess
	wire   [31:0] ad9144_jesd204_phy_reconfig_3_agent_m0_address;                                            // ad9144_jesd204_phy_reconfig_3_agent:m0_address -> ad9144_jesd204_phy_reconfig_3_translator:uav_address
	wire    [3:0] ad9144_jesd204_phy_reconfig_3_agent_m0_byteenable;                                         // ad9144_jesd204_phy_reconfig_3_agent:m0_byteenable -> ad9144_jesd204_phy_reconfig_3_translator:uav_byteenable
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_read;                                               // ad9144_jesd204_phy_reconfig_3_agent:m0_read -> ad9144_jesd204_phy_reconfig_3_translator:uav_read
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_readdatavalid;                                      // ad9144_jesd204_phy_reconfig_3_translator:uav_readdatavalid -> ad9144_jesd204_phy_reconfig_3_agent:m0_readdatavalid
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_lock;                                               // ad9144_jesd204_phy_reconfig_3_agent:m0_lock -> ad9144_jesd204_phy_reconfig_3_translator:uav_lock
	wire   [31:0] ad9144_jesd204_phy_reconfig_3_agent_m0_writedata;                                          // ad9144_jesd204_phy_reconfig_3_agent:m0_writedata -> ad9144_jesd204_phy_reconfig_3_translator:uav_writedata
	wire          ad9144_jesd204_phy_reconfig_3_agent_m0_write;                                              // ad9144_jesd204_phy_reconfig_3_agent:m0_write -> ad9144_jesd204_phy_reconfig_3_translator:uav_write
	wire    [2:0] ad9144_jesd204_phy_reconfig_3_agent_m0_burstcount;                                         // ad9144_jesd204_phy_reconfig_3_agent:m0_burstcount -> ad9144_jesd204_phy_reconfig_3_translator:uav_burstcount
	wire          ad9144_jesd204_phy_reconfig_3_agent_rf_source_valid;                                       // ad9144_jesd204_phy_reconfig_3_agent:rf_source_valid -> ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:in_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_3_agent_rf_source_data;                                        // ad9144_jesd204_phy_reconfig_3_agent:rf_source_data -> ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_3_agent_rf_source_ready;                                       // ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:in_ready -> ad9144_jesd204_phy_reconfig_3_agent:rf_source_ready
	wire          ad9144_jesd204_phy_reconfig_3_agent_rf_source_startofpacket;                               // ad9144_jesd204_phy_reconfig_3_agent:rf_source_startofpacket -> ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:in_startofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rf_source_endofpacket;                                 // ad9144_jesd204_phy_reconfig_3_agent:rf_source_endofpacket -> ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:in_endofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid;                                    // ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:out_valid -> ad9144_jesd204_phy_reconfig_3_agent:rf_sink_valid
	wire  [142:0] ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data;                                     // ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:out_data -> ad9144_jesd204_phy_reconfig_3_agent:rf_sink_data
	wire          ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready;                                    // ad9144_jesd204_phy_reconfig_3_agent:rf_sink_ready -> ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:out_ready
	wire          ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket;                            // ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:out_startofpacket -> ad9144_jesd204_phy_reconfig_3_agent:rf_sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket;                              // ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo:out_endofpacket -> ad9144_jesd204_phy_reconfig_3_agent:rf_sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid;                                  // ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_src_valid -> ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:in_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data;                                   // ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_src_data -> ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:in_data
	wire          ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready;                                  // ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:in_ready -> ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_src_ready
	wire          ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid;                                  // ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:out_valid -> ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data;                                   // ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:out_data -> ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_data
	wire          ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready;                                  // ad9144_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_ready -> ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo:out_ready
	wire          cmd_mux_030_src_valid;                                                                     // cmd_mux_030:src_valid -> ad9144_jesd204_phy_reconfig_3_agent:cp_valid
	wire  [141:0] cmd_mux_030_src_data;                                                                      // cmd_mux_030:src_data -> ad9144_jesd204_phy_reconfig_3_agent:cp_data
	wire          cmd_mux_030_src_ready;                                                                     // ad9144_jesd204_phy_reconfig_3_agent:cp_ready -> cmd_mux_030:src_ready
	wire   [42:0] cmd_mux_030_src_channel;                                                                   // cmd_mux_030:src_channel -> ad9144_jesd204_phy_reconfig_3_agent:cp_channel
	wire          cmd_mux_030_src_startofpacket;                                                             // cmd_mux_030:src_startofpacket -> ad9144_jesd204_phy_reconfig_3_agent:cp_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                               // cmd_mux_030:src_endofpacket -> ad9144_jesd204_phy_reconfig_3_agent:cp_endofpacket
	wire   [31:0] ad9680_jesd204_phy_reconfig_3_agent_m0_readdata;                                           // ad9680_jesd204_phy_reconfig_3_translator:uav_readdata -> ad9680_jesd204_phy_reconfig_3_agent:m0_readdata
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_waitrequest;                                        // ad9680_jesd204_phy_reconfig_3_translator:uav_waitrequest -> ad9680_jesd204_phy_reconfig_3_agent:m0_waitrequest
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_debugaccess;                                        // ad9680_jesd204_phy_reconfig_3_agent:m0_debugaccess -> ad9680_jesd204_phy_reconfig_3_translator:uav_debugaccess
	wire   [31:0] ad9680_jesd204_phy_reconfig_3_agent_m0_address;                                            // ad9680_jesd204_phy_reconfig_3_agent:m0_address -> ad9680_jesd204_phy_reconfig_3_translator:uav_address
	wire    [3:0] ad9680_jesd204_phy_reconfig_3_agent_m0_byteenable;                                         // ad9680_jesd204_phy_reconfig_3_agent:m0_byteenable -> ad9680_jesd204_phy_reconfig_3_translator:uav_byteenable
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_read;                                               // ad9680_jesd204_phy_reconfig_3_agent:m0_read -> ad9680_jesd204_phy_reconfig_3_translator:uav_read
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_readdatavalid;                                      // ad9680_jesd204_phy_reconfig_3_translator:uav_readdatavalid -> ad9680_jesd204_phy_reconfig_3_agent:m0_readdatavalid
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_lock;                                               // ad9680_jesd204_phy_reconfig_3_agent:m0_lock -> ad9680_jesd204_phy_reconfig_3_translator:uav_lock
	wire   [31:0] ad9680_jesd204_phy_reconfig_3_agent_m0_writedata;                                          // ad9680_jesd204_phy_reconfig_3_agent:m0_writedata -> ad9680_jesd204_phy_reconfig_3_translator:uav_writedata
	wire          ad9680_jesd204_phy_reconfig_3_agent_m0_write;                                              // ad9680_jesd204_phy_reconfig_3_agent:m0_write -> ad9680_jesd204_phy_reconfig_3_translator:uav_write
	wire    [2:0] ad9680_jesd204_phy_reconfig_3_agent_m0_burstcount;                                         // ad9680_jesd204_phy_reconfig_3_agent:m0_burstcount -> ad9680_jesd204_phy_reconfig_3_translator:uav_burstcount
	wire          ad9680_jesd204_phy_reconfig_3_agent_rf_source_valid;                                       // ad9680_jesd204_phy_reconfig_3_agent:rf_source_valid -> ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:in_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_3_agent_rf_source_data;                                        // ad9680_jesd204_phy_reconfig_3_agent:rf_source_data -> ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_3_agent_rf_source_ready;                                       // ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:in_ready -> ad9680_jesd204_phy_reconfig_3_agent:rf_source_ready
	wire          ad9680_jesd204_phy_reconfig_3_agent_rf_source_startofpacket;                               // ad9680_jesd204_phy_reconfig_3_agent:rf_source_startofpacket -> ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:in_startofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rf_source_endofpacket;                                 // ad9680_jesd204_phy_reconfig_3_agent:rf_source_endofpacket -> ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:in_endofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid;                                    // ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:out_valid -> ad9680_jesd204_phy_reconfig_3_agent:rf_sink_valid
	wire  [142:0] ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data;                                     // ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:out_data -> ad9680_jesd204_phy_reconfig_3_agent:rf_sink_data
	wire          ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready;                                    // ad9680_jesd204_phy_reconfig_3_agent:rf_sink_ready -> ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:out_ready
	wire          ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket;                            // ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:out_startofpacket -> ad9680_jesd204_phy_reconfig_3_agent:rf_sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket;                              // ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo:out_endofpacket -> ad9680_jesd204_phy_reconfig_3_agent:rf_sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid;                                  // ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_src_valid -> ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:in_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data;                                   // ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_src_data -> ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:in_data
	wire          ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready;                                  // ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:in_ready -> ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_src_ready
	wire          ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid;                                  // ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:out_valid -> ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_valid
	wire   [33:0] ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data;                                   // ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:out_data -> ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_data
	wire          ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready;                                  // ad9680_jesd204_phy_reconfig_3_agent:rdata_fifo_sink_ready -> ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo:out_ready
	wire          cmd_mux_031_src_valid;                                                                     // cmd_mux_031:src_valid -> ad9680_jesd204_phy_reconfig_3_agent:cp_valid
	wire  [141:0] cmd_mux_031_src_data;                                                                      // cmd_mux_031:src_data -> ad9680_jesd204_phy_reconfig_3_agent:cp_data
	wire          cmd_mux_031_src_ready;                                                                     // ad9680_jesd204_phy_reconfig_3_agent:cp_ready -> cmd_mux_031:src_ready
	wire   [42:0] cmd_mux_031_src_channel;                                                                   // cmd_mux_031:src_channel -> ad9680_jesd204_phy_reconfig_3_agent:cp_channel
	wire          cmd_mux_031_src_startofpacket;                                                             // cmd_mux_031:src_startofpacket -> ad9680_jesd204_phy_reconfig_3_agent:cp_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                               // cmd_mux_031:src_endofpacket -> ad9680_jesd204_phy_reconfig_3_agent:cp_endofpacket
	wire   [31:0] bridge_3_s0_agent_m0_readdata;                                                             // bridge_3_s0_translator:uav_readdata -> bridge_3_s0_agent:m0_readdata
	wire          bridge_3_s0_agent_m0_waitrequest;                                                          // bridge_3_s0_translator:uav_waitrequest -> bridge_3_s0_agent:m0_waitrequest
	wire          bridge_3_s0_agent_m0_debugaccess;                                                          // bridge_3_s0_agent:m0_debugaccess -> bridge_3_s0_translator:uav_debugaccess
	wire   [31:0] bridge_3_s0_agent_m0_address;                                                              // bridge_3_s0_agent:m0_address -> bridge_3_s0_translator:uav_address
	wire    [3:0] bridge_3_s0_agent_m0_byteenable;                                                           // bridge_3_s0_agent:m0_byteenable -> bridge_3_s0_translator:uav_byteenable
	wire          bridge_3_s0_agent_m0_read;                                                                 // bridge_3_s0_agent:m0_read -> bridge_3_s0_translator:uav_read
	wire          bridge_3_s0_agent_m0_readdatavalid;                                                        // bridge_3_s0_translator:uav_readdatavalid -> bridge_3_s0_agent:m0_readdatavalid
	wire          bridge_3_s0_agent_m0_lock;                                                                 // bridge_3_s0_agent:m0_lock -> bridge_3_s0_translator:uav_lock
	wire   [31:0] bridge_3_s0_agent_m0_writedata;                                                            // bridge_3_s0_agent:m0_writedata -> bridge_3_s0_translator:uav_writedata
	wire          bridge_3_s0_agent_m0_write;                                                                // bridge_3_s0_agent:m0_write -> bridge_3_s0_translator:uav_write
	wire    [2:0] bridge_3_s0_agent_m0_burstcount;                                                           // bridge_3_s0_agent:m0_burstcount -> bridge_3_s0_translator:uav_burstcount
	wire          bridge_3_s0_agent_rf_source_valid;                                                         // bridge_3_s0_agent:rf_source_valid -> bridge_3_s0_agent_rsp_fifo:in_valid
	wire  [142:0] bridge_3_s0_agent_rf_source_data;                                                          // bridge_3_s0_agent:rf_source_data -> bridge_3_s0_agent_rsp_fifo:in_data
	wire          bridge_3_s0_agent_rf_source_ready;                                                         // bridge_3_s0_agent_rsp_fifo:in_ready -> bridge_3_s0_agent:rf_source_ready
	wire          bridge_3_s0_agent_rf_source_startofpacket;                                                 // bridge_3_s0_agent:rf_source_startofpacket -> bridge_3_s0_agent_rsp_fifo:in_startofpacket
	wire          bridge_3_s0_agent_rf_source_endofpacket;                                                   // bridge_3_s0_agent:rf_source_endofpacket -> bridge_3_s0_agent_rsp_fifo:in_endofpacket
	wire          bridge_3_s0_agent_rsp_fifo_out_valid;                                                      // bridge_3_s0_agent_rsp_fifo:out_valid -> bridge_3_s0_agent:rf_sink_valid
	wire  [142:0] bridge_3_s0_agent_rsp_fifo_out_data;                                                       // bridge_3_s0_agent_rsp_fifo:out_data -> bridge_3_s0_agent:rf_sink_data
	wire          bridge_3_s0_agent_rsp_fifo_out_ready;                                                      // bridge_3_s0_agent:rf_sink_ready -> bridge_3_s0_agent_rsp_fifo:out_ready
	wire          bridge_3_s0_agent_rsp_fifo_out_startofpacket;                                              // bridge_3_s0_agent_rsp_fifo:out_startofpacket -> bridge_3_s0_agent:rf_sink_startofpacket
	wire          bridge_3_s0_agent_rsp_fifo_out_endofpacket;                                                // bridge_3_s0_agent_rsp_fifo:out_endofpacket -> bridge_3_s0_agent:rf_sink_endofpacket
	wire          bridge_3_s0_agent_rdata_fifo_src_valid;                                                    // bridge_3_s0_agent:rdata_fifo_src_valid -> bridge_3_s0_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_3_s0_agent_rdata_fifo_src_data;                                                     // bridge_3_s0_agent:rdata_fifo_src_data -> bridge_3_s0_agent_rdata_fifo:in_data
	wire          bridge_3_s0_agent_rdata_fifo_src_ready;                                                    // bridge_3_s0_agent_rdata_fifo:in_ready -> bridge_3_s0_agent:rdata_fifo_src_ready
	wire          bridge_3_s0_agent_rdata_fifo_out_valid;                                                    // bridge_3_s0_agent_rdata_fifo:out_valid -> bridge_3_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] bridge_3_s0_agent_rdata_fifo_out_data;                                                     // bridge_3_s0_agent_rdata_fifo:out_data -> bridge_3_s0_agent:rdata_fifo_sink_data
	wire          bridge_3_s0_agent_rdata_fifo_out_ready;                                                    // bridge_3_s0_agent:rdata_fifo_sink_ready -> bridge_3_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_032_src_valid;                                                                     // cmd_mux_032:src_valid -> bridge_3_s0_agent:cp_valid
	wire  [141:0] cmd_mux_032_src_data;                                                                      // cmd_mux_032:src_data -> bridge_3_s0_agent:cp_data
	wire          cmd_mux_032_src_ready;                                                                     // bridge_3_s0_agent:cp_ready -> cmd_mux_032:src_ready
	wire   [42:0] cmd_mux_032_src_channel;                                                                   // cmd_mux_032:src_channel -> bridge_3_s0_agent:cp_channel
	wire          cmd_mux_032_src_startofpacket;                                                             // cmd_mux_032:src_startofpacket -> bridge_3_s0_agent:cp_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                               // cmd_mux_032:src_endofpacket -> bridge_3_s0_agent:cp_endofpacket
	wire   [31:0] bridge_2_s0_agent_m0_readdata;                                                             // bridge_2_s0_translator:uav_readdata -> bridge_2_s0_agent:m0_readdata
	wire          bridge_2_s0_agent_m0_waitrequest;                                                          // bridge_2_s0_translator:uav_waitrequest -> bridge_2_s0_agent:m0_waitrequest
	wire          bridge_2_s0_agent_m0_debugaccess;                                                          // bridge_2_s0_agent:m0_debugaccess -> bridge_2_s0_translator:uav_debugaccess
	wire   [31:0] bridge_2_s0_agent_m0_address;                                                              // bridge_2_s0_agent:m0_address -> bridge_2_s0_translator:uav_address
	wire    [3:0] bridge_2_s0_agent_m0_byteenable;                                                           // bridge_2_s0_agent:m0_byteenable -> bridge_2_s0_translator:uav_byteenable
	wire          bridge_2_s0_agent_m0_read;                                                                 // bridge_2_s0_agent:m0_read -> bridge_2_s0_translator:uav_read
	wire          bridge_2_s0_agent_m0_readdatavalid;                                                        // bridge_2_s0_translator:uav_readdatavalid -> bridge_2_s0_agent:m0_readdatavalid
	wire          bridge_2_s0_agent_m0_lock;                                                                 // bridge_2_s0_agent:m0_lock -> bridge_2_s0_translator:uav_lock
	wire   [31:0] bridge_2_s0_agent_m0_writedata;                                                            // bridge_2_s0_agent:m0_writedata -> bridge_2_s0_translator:uav_writedata
	wire          bridge_2_s0_agent_m0_write;                                                                // bridge_2_s0_agent:m0_write -> bridge_2_s0_translator:uav_write
	wire    [2:0] bridge_2_s0_agent_m0_burstcount;                                                           // bridge_2_s0_agent:m0_burstcount -> bridge_2_s0_translator:uav_burstcount
	wire          bridge_2_s0_agent_rf_source_valid;                                                         // bridge_2_s0_agent:rf_source_valid -> bridge_2_s0_agent_rsp_fifo:in_valid
	wire  [142:0] bridge_2_s0_agent_rf_source_data;                                                          // bridge_2_s0_agent:rf_source_data -> bridge_2_s0_agent_rsp_fifo:in_data
	wire          bridge_2_s0_agent_rf_source_ready;                                                         // bridge_2_s0_agent_rsp_fifo:in_ready -> bridge_2_s0_agent:rf_source_ready
	wire          bridge_2_s0_agent_rf_source_startofpacket;                                                 // bridge_2_s0_agent:rf_source_startofpacket -> bridge_2_s0_agent_rsp_fifo:in_startofpacket
	wire          bridge_2_s0_agent_rf_source_endofpacket;                                                   // bridge_2_s0_agent:rf_source_endofpacket -> bridge_2_s0_agent_rsp_fifo:in_endofpacket
	wire          bridge_2_s0_agent_rsp_fifo_out_valid;                                                      // bridge_2_s0_agent_rsp_fifo:out_valid -> bridge_2_s0_agent:rf_sink_valid
	wire  [142:0] bridge_2_s0_agent_rsp_fifo_out_data;                                                       // bridge_2_s0_agent_rsp_fifo:out_data -> bridge_2_s0_agent:rf_sink_data
	wire          bridge_2_s0_agent_rsp_fifo_out_ready;                                                      // bridge_2_s0_agent:rf_sink_ready -> bridge_2_s0_agent_rsp_fifo:out_ready
	wire          bridge_2_s0_agent_rsp_fifo_out_startofpacket;                                              // bridge_2_s0_agent_rsp_fifo:out_startofpacket -> bridge_2_s0_agent:rf_sink_startofpacket
	wire          bridge_2_s0_agent_rsp_fifo_out_endofpacket;                                                // bridge_2_s0_agent_rsp_fifo:out_endofpacket -> bridge_2_s0_agent:rf_sink_endofpacket
	wire          bridge_2_s0_agent_rdata_fifo_src_valid;                                                    // bridge_2_s0_agent:rdata_fifo_src_valid -> bridge_2_s0_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_2_s0_agent_rdata_fifo_src_data;                                                     // bridge_2_s0_agent:rdata_fifo_src_data -> bridge_2_s0_agent_rdata_fifo:in_data
	wire          bridge_2_s0_agent_rdata_fifo_src_ready;                                                    // bridge_2_s0_agent_rdata_fifo:in_ready -> bridge_2_s0_agent:rdata_fifo_src_ready
	wire          bridge_2_s0_agent_rdata_fifo_out_valid;                                                    // bridge_2_s0_agent_rdata_fifo:out_valid -> bridge_2_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] bridge_2_s0_agent_rdata_fifo_out_data;                                                     // bridge_2_s0_agent_rdata_fifo:out_data -> bridge_2_s0_agent:rdata_fifo_sink_data
	wire          bridge_2_s0_agent_rdata_fifo_out_ready;                                                    // bridge_2_s0_agent:rdata_fifo_sink_ready -> bridge_2_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_033_src_valid;                                                                     // cmd_mux_033:src_valid -> bridge_2_s0_agent:cp_valid
	wire  [141:0] cmd_mux_033_src_data;                                                                      // cmd_mux_033:src_data -> bridge_2_s0_agent:cp_data
	wire          cmd_mux_033_src_ready;                                                                     // bridge_2_s0_agent:cp_ready -> cmd_mux_033:src_ready
	wire   [42:0] cmd_mux_033_src_channel;                                                                   // cmd_mux_033:src_channel -> bridge_2_s0_agent:cp_channel
	wire          cmd_mux_033_src_startofpacket;                                                             // cmd_mux_033:src_startofpacket -> bridge_2_s0_agent:cp_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                               // cmd_mux_033:src_endofpacket -> bridge_2_s0_agent:cp_endofpacket
	wire   [31:0] bridge_1_s0_agent_m0_readdata;                                                             // bridge_1_s0_translator:uav_readdata -> bridge_1_s0_agent:m0_readdata
	wire          bridge_1_s0_agent_m0_waitrequest;                                                          // bridge_1_s0_translator:uav_waitrequest -> bridge_1_s0_agent:m0_waitrequest
	wire          bridge_1_s0_agent_m0_debugaccess;                                                          // bridge_1_s0_agent:m0_debugaccess -> bridge_1_s0_translator:uav_debugaccess
	wire   [31:0] bridge_1_s0_agent_m0_address;                                                              // bridge_1_s0_agent:m0_address -> bridge_1_s0_translator:uav_address
	wire    [3:0] bridge_1_s0_agent_m0_byteenable;                                                           // bridge_1_s0_agent:m0_byteenable -> bridge_1_s0_translator:uav_byteenable
	wire          bridge_1_s0_agent_m0_read;                                                                 // bridge_1_s0_agent:m0_read -> bridge_1_s0_translator:uav_read
	wire          bridge_1_s0_agent_m0_readdatavalid;                                                        // bridge_1_s0_translator:uav_readdatavalid -> bridge_1_s0_agent:m0_readdatavalid
	wire          bridge_1_s0_agent_m0_lock;                                                                 // bridge_1_s0_agent:m0_lock -> bridge_1_s0_translator:uav_lock
	wire   [31:0] bridge_1_s0_agent_m0_writedata;                                                            // bridge_1_s0_agent:m0_writedata -> bridge_1_s0_translator:uav_writedata
	wire          bridge_1_s0_agent_m0_write;                                                                // bridge_1_s0_agent:m0_write -> bridge_1_s0_translator:uav_write
	wire    [4:0] bridge_1_s0_agent_m0_burstcount;                                                           // bridge_1_s0_agent:m0_burstcount -> bridge_1_s0_translator:uav_burstcount
	wire          bridge_1_s0_agent_rf_source_valid;                                                         // bridge_1_s0_agent:rf_source_valid -> bridge_1_s0_agent_rsp_fifo:in_valid
	wire  [142:0] bridge_1_s0_agent_rf_source_data;                                                          // bridge_1_s0_agent:rf_source_data -> bridge_1_s0_agent_rsp_fifo:in_data
	wire          bridge_1_s0_agent_rf_source_ready;                                                         // bridge_1_s0_agent_rsp_fifo:in_ready -> bridge_1_s0_agent:rf_source_ready
	wire          bridge_1_s0_agent_rf_source_startofpacket;                                                 // bridge_1_s0_agent:rf_source_startofpacket -> bridge_1_s0_agent_rsp_fifo:in_startofpacket
	wire          bridge_1_s0_agent_rf_source_endofpacket;                                                   // bridge_1_s0_agent:rf_source_endofpacket -> bridge_1_s0_agent_rsp_fifo:in_endofpacket
	wire          bridge_1_s0_agent_rsp_fifo_out_valid;                                                      // bridge_1_s0_agent_rsp_fifo:out_valid -> bridge_1_s0_agent:rf_sink_valid
	wire  [142:0] bridge_1_s0_agent_rsp_fifo_out_data;                                                       // bridge_1_s0_agent_rsp_fifo:out_data -> bridge_1_s0_agent:rf_sink_data
	wire          bridge_1_s0_agent_rsp_fifo_out_ready;                                                      // bridge_1_s0_agent:rf_sink_ready -> bridge_1_s0_agent_rsp_fifo:out_ready
	wire          bridge_1_s0_agent_rsp_fifo_out_startofpacket;                                              // bridge_1_s0_agent_rsp_fifo:out_startofpacket -> bridge_1_s0_agent:rf_sink_startofpacket
	wire          bridge_1_s0_agent_rsp_fifo_out_endofpacket;                                                // bridge_1_s0_agent_rsp_fifo:out_endofpacket -> bridge_1_s0_agent:rf_sink_endofpacket
	wire          bridge_1_s0_agent_rdata_fifo_src_valid;                                                    // bridge_1_s0_agent:rdata_fifo_src_valid -> bridge_1_s0_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_1_s0_agent_rdata_fifo_src_data;                                                     // bridge_1_s0_agent:rdata_fifo_src_data -> bridge_1_s0_agent_rdata_fifo:in_data
	wire          bridge_1_s0_agent_rdata_fifo_src_ready;                                                    // bridge_1_s0_agent_rdata_fifo:in_ready -> bridge_1_s0_agent:rdata_fifo_src_ready
	wire          bridge_1_s0_agent_rdata_fifo_out_valid;                                                    // bridge_1_s0_agent_rdata_fifo:out_valid -> bridge_1_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] bridge_1_s0_agent_rdata_fifo_out_data;                                                     // bridge_1_s0_agent_rdata_fifo:out_data -> bridge_1_s0_agent:rdata_fifo_sink_data
	wire          bridge_1_s0_agent_rdata_fifo_out_ready;                                                    // bridge_1_s0_agent:rdata_fifo_sink_ready -> bridge_1_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_034_src_valid;                                                                     // cmd_mux_034:src_valid -> bridge_1_s0_agent:cp_valid
	wire  [141:0] cmd_mux_034_src_data;                                                                      // cmd_mux_034:src_data -> bridge_1_s0_agent:cp_data
	wire          cmd_mux_034_src_ready;                                                                     // bridge_1_s0_agent:cp_ready -> cmd_mux_034:src_ready
	wire   [42:0] cmd_mux_034_src_channel;                                                                   // cmd_mux_034:src_channel -> bridge_1_s0_agent:cp_channel
	wire          cmd_mux_034_src_startofpacket;                                                             // cmd_mux_034:src_startofpacket -> bridge_1_s0_agent:cp_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                               // cmd_mux_034:src_endofpacket -> bridge_1_s0_agent:cp_endofpacket
	wire   [31:0] bridge_0_s0_agent_m0_readdata;                                                             // bridge_0_s0_translator:uav_readdata -> bridge_0_s0_agent:m0_readdata
	wire          bridge_0_s0_agent_m0_waitrequest;                                                          // bridge_0_s0_translator:uav_waitrequest -> bridge_0_s0_agent:m0_waitrequest
	wire          bridge_0_s0_agent_m0_debugaccess;                                                          // bridge_0_s0_agent:m0_debugaccess -> bridge_0_s0_translator:uav_debugaccess
	wire   [31:0] bridge_0_s0_agent_m0_address;                                                              // bridge_0_s0_agent:m0_address -> bridge_0_s0_translator:uav_address
	wire    [3:0] bridge_0_s0_agent_m0_byteenable;                                                           // bridge_0_s0_agent:m0_byteenable -> bridge_0_s0_translator:uav_byteenable
	wire          bridge_0_s0_agent_m0_read;                                                                 // bridge_0_s0_agent:m0_read -> bridge_0_s0_translator:uav_read
	wire          bridge_0_s0_agent_m0_readdatavalid;                                                        // bridge_0_s0_translator:uav_readdatavalid -> bridge_0_s0_agent:m0_readdatavalid
	wire          bridge_0_s0_agent_m0_lock;                                                                 // bridge_0_s0_agent:m0_lock -> bridge_0_s0_translator:uav_lock
	wire   [31:0] bridge_0_s0_agent_m0_writedata;                                                            // bridge_0_s0_agent:m0_writedata -> bridge_0_s0_translator:uav_writedata
	wire          bridge_0_s0_agent_m0_write;                                                                // bridge_0_s0_agent:m0_write -> bridge_0_s0_translator:uav_write
	wire    [9:0] bridge_0_s0_agent_m0_burstcount;                                                           // bridge_0_s0_agent:m0_burstcount -> bridge_0_s0_translator:uav_burstcount
	wire          bridge_0_s0_agent_rf_source_valid;                                                         // bridge_0_s0_agent:rf_source_valid -> bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [142:0] bridge_0_s0_agent_rf_source_data;                                                          // bridge_0_s0_agent:rf_source_data -> bridge_0_s0_agent_rsp_fifo:in_data
	wire          bridge_0_s0_agent_rf_source_ready;                                                         // bridge_0_s0_agent_rsp_fifo:in_ready -> bridge_0_s0_agent:rf_source_ready
	wire          bridge_0_s0_agent_rf_source_startofpacket;                                                 // bridge_0_s0_agent:rf_source_startofpacket -> bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          bridge_0_s0_agent_rf_source_endofpacket;                                                   // bridge_0_s0_agent:rf_source_endofpacket -> bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          bridge_0_s0_agent_rsp_fifo_out_valid;                                                      // bridge_0_s0_agent_rsp_fifo:out_valid -> bridge_0_s0_agent:rf_sink_valid
	wire  [142:0] bridge_0_s0_agent_rsp_fifo_out_data;                                                       // bridge_0_s0_agent_rsp_fifo:out_data -> bridge_0_s0_agent:rf_sink_data
	wire          bridge_0_s0_agent_rsp_fifo_out_ready;                                                      // bridge_0_s0_agent:rf_sink_ready -> bridge_0_s0_agent_rsp_fifo:out_ready
	wire          bridge_0_s0_agent_rsp_fifo_out_startofpacket;                                              // bridge_0_s0_agent_rsp_fifo:out_startofpacket -> bridge_0_s0_agent:rf_sink_startofpacket
	wire          bridge_0_s0_agent_rsp_fifo_out_endofpacket;                                                // bridge_0_s0_agent_rsp_fifo:out_endofpacket -> bridge_0_s0_agent:rf_sink_endofpacket
	wire          bridge_0_s0_agent_rdata_fifo_src_valid;                                                    // bridge_0_s0_agent:rdata_fifo_src_valid -> bridge_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] bridge_0_s0_agent_rdata_fifo_src_data;                                                     // bridge_0_s0_agent:rdata_fifo_src_data -> bridge_0_s0_agent_rdata_fifo:in_data
	wire          bridge_0_s0_agent_rdata_fifo_src_ready;                                                    // bridge_0_s0_agent_rdata_fifo:in_ready -> bridge_0_s0_agent:rdata_fifo_src_ready
	wire          bridge_0_s0_agent_rdata_fifo_out_valid;                                                    // bridge_0_s0_agent_rdata_fifo:out_valid -> bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] bridge_0_s0_agent_rdata_fifo_out_data;                                                     // bridge_0_s0_agent_rdata_fifo:out_data -> bridge_0_s0_agent:rdata_fifo_sink_data
	wire          bridge_0_s0_agent_rdata_fifo_out_ready;                                                    // bridge_0_s0_agent:rdata_fifo_sink_ready -> bridge_0_s0_agent_rdata_fifo:out_ready
	wire   [31:0] mcu_subsystem_ram_0_s1_agent_m0_readdata;                                                  // mcu_subsystem_ram_0_s1_translator:uav_readdata -> mcu_subsystem_ram_0_s1_agent:m0_readdata
	wire          mcu_subsystem_ram_0_s1_agent_m0_waitrequest;                                               // mcu_subsystem_ram_0_s1_translator:uav_waitrequest -> mcu_subsystem_ram_0_s1_agent:m0_waitrequest
	wire          mcu_subsystem_ram_0_s1_agent_m0_debugaccess;                                               // mcu_subsystem_ram_0_s1_agent:m0_debugaccess -> mcu_subsystem_ram_0_s1_translator:uav_debugaccess
	wire   [31:0] mcu_subsystem_ram_0_s1_agent_m0_address;                                                   // mcu_subsystem_ram_0_s1_agent:m0_address -> mcu_subsystem_ram_0_s1_translator:uav_address
	wire    [3:0] mcu_subsystem_ram_0_s1_agent_m0_byteenable;                                                // mcu_subsystem_ram_0_s1_agent:m0_byteenable -> mcu_subsystem_ram_0_s1_translator:uav_byteenable
	wire          mcu_subsystem_ram_0_s1_agent_m0_read;                                                      // mcu_subsystem_ram_0_s1_agent:m0_read -> mcu_subsystem_ram_0_s1_translator:uav_read
	wire          mcu_subsystem_ram_0_s1_agent_m0_readdatavalid;                                             // mcu_subsystem_ram_0_s1_translator:uav_readdatavalid -> mcu_subsystem_ram_0_s1_agent:m0_readdatavalid
	wire          mcu_subsystem_ram_0_s1_agent_m0_lock;                                                      // mcu_subsystem_ram_0_s1_agent:m0_lock -> mcu_subsystem_ram_0_s1_translator:uav_lock
	wire   [31:0] mcu_subsystem_ram_0_s1_agent_m0_writedata;                                                 // mcu_subsystem_ram_0_s1_agent:m0_writedata -> mcu_subsystem_ram_0_s1_translator:uav_writedata
	wire          mcu_subsystem_ram_0_s1_agent_m0_write;                                                     // mcu_subsystem_ram_0_s1_agent:m0_write -> mcu_subsystem_ram_0_s1_translator:uav_write
	wire    [2:0] mcu_subsystem_ram_0_s1_agent_m0_burstcount;                                                // mcu_subsystem_ram_0_s1_agent:m0_burstcount -> mcu_subsystem_ram_0_s1_translator:uav_burstcount
	wire          mcu_subsystem_ram_0_s1_agent_rf_source_valid;                                              // mcu_subsystem_ram_0_s1_agent:rf_source_valid -> mcu_subsystem_ram_0_s1_agent_rsp_fifo:in_valid
	wire  [142:0] mcu_subsystem_ram_0_s1_agent_rf_source_data;                                               // mcu_subsystem_ram_0_s1_agent:rf_source_data -> mcu_subsystem_ram_0_s1_agent_rsp_fifo:in_data
	wire          mcu_subsystem_ram_0_s1_agent_rf_source_ready;                                              // mcu_subsystem_ram_0_s1_agent_rsp_fifo:in_ready -> mcu_subsystem_ram_0_s1_agent:rf_source_ready
	wire          mcu_subsystem_ram_0_s1_agent_rf_source_startofpacket;                                      // mcu_subsystem_ram_0_s1_agent:rf_source_startofpacket -> mcu_subsystem_ram_0_s1_agent_rsp_fifo:in_startofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rf_source_endofpacket;                                        // mcu_subsystem_ram_0_s1_agent:rf_source_endofpacket -> mcu_subsystem_ram_0_s1_agent_rsp_fifo:in_endofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_valid;                                           // mcu_subsystem_ram_0_s1_agent_rsp_fifo:out_valid -> mcu_subsystem_ram_0_s1_agent:rf_sink_valid
	wire  [142:0] mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_data;                                            // mcu_subsystem_ram_0_s1_agent_rsp_fifo:out_data -> mcu_subsystem_ram_0_s1_agent:rf_sink_data
	wire          mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_ready;                                           // mcu_subsystem_ram_0_s1_agent:rf_sink_ready -> mcu_subsystem_ram_0_s1_agent_rsp_fifo:out_ready
	wire          mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_startofpacket;                                   // mcu_subsystem_ram_0_s1_agent_rsp_fifo:out_startofpacket -> mcu_subsystem_ram_0_s1_agent:rf_sink_startofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_endofpacket;                                     // mcu_subsystem_ram_0_s1_agent_rsp_fifo:out_endofpacket -> mcu_subsystem_ram_0_s1_agent:rf_sink_endofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_valid;                                         // mcu_subsystem_ram_0_s1_agent:rdata_fifo_src_valid -> mcu_subsystem_ram_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_data;                                          // mcu_subsystem_ram_0_s1_agent:rdata_fifo_src_data -> mcu_subsystem_ram_0_s1_agent_rdata_fifo:in_data
	wire          mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_ready;                                         // mcu_subsystem_ram_0_s1_agent_rdata_fifo:in_ready -> mcu_subsystem_ram_0_s1_agent:rdata_fifo_src_ready
	wire          mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_valid;                                         // mcu_subsystem_ram_0_s1_agent_rdata_fifo:out_valid -> mcu_subsystem_ram_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_data;                                          // mcu_subsystem_ram_0_s1_agent_rdata_fifo:out_data -> mcu_subsystem_ram_0_s1_agent:rdata_fifo_sink_data
	wire          mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_ready;                                         // mcu_subsystem_ram_0_s1_agent:rdata_fifo_sink_ready -> mcu_subsystem_ram_0_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_036_src_valid;                                                                     // cmd_mux_036:src_valid -> mcu_subsystem_ram_0_s1_agent:cp_valid
	wire  [141:0] cmd_mux_036_src_data;                                                                      // cmd_mux_036:src_data -> mcu_subsystem_ram_0_s1_agent:cp_data
	wire          cmd_mux_036_src_ready;                                                                     // mcu_subsystem_ram_0_s1_agent:cp_ready -> cmd_mux_036:src_ready
	wire   [42:0] cmd_mux_036_src_channel;                                                                   // cmd_mux_036:src_channel -> mcu_subsystem_ram_0_s1_agent:cp_channel
	wire          cmd_mux_036_src_startofpacket;                                                             // cmd_mux_036:src_startofpacket -> mcu_subsystem_ram_0_s1_agent:cp_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                               // cmd_mux_036:src_endofpacket -> mcu_subsystem_ram_0_s1_agent:cp_endofpacket
	wire   [31:0] timer_1_s1_agent_m0_readdata;                                                              // timer_1_s1_translator:uav_readdata -> timer_1_s1_agent:m0_readdata
	wire          timer_1_s1_agent_m0_waitrequest;                                                           // timer_1_s1_translator:uav_waitrequest -> timer_1_s1_agent:m0_waitrequest
	wire          timer_1_s1_agent_m0_debugaccess;                                                           // timer_1_s1_agent:m0_debugaccess -> timer_1_s1_translator:uav_debugaccess
	wire   [31:0] timer_1_s1_agent_m0_address;                                                               // timer_1_s1_agent:m0_address -> timer_1_s1_translator:uav_address
	wire    [3:0] timer_1_s1_agent_m0_byteenable;                                                            // timer_1_s1_agent:m0_byteenable -> timer_1_s1_translator:uav_byteenable
	wire          timer_1_s1_agent_m0_read;                                                                  // timer_1_s1_agent:m0_read -> timer_1_s1_translator:uav_read
	wire          timer_1_s1_agent_m0_readdatavalid;                                                         // timer_1_s1_translator:uav_readdatavalid -> timer_1_s1_agent:m0_readdatavalid
	wire          timer_1_s1_agent_m0_lock;                                                                  // timer_1_s1_agent:m0_lock -> timer_1_s1_translator:uav_lock
	wire   [31:0] timer_1_s1_agent_m0_writedata;                                                             // timer_1_s1_agent:m0_writedata -> timer_1_s1_translator:uav_writedata
	wire          timer_1_s1_agent_m0_write;                                                                 // timer_1_s1_agent:m0_write -> timer_1_s1_translator:uav_write
	wire    [2:0] timer_1_s1_agent_m0_burstcount;                                                            // timer_1_s1_agent:m0_burstcount -> timer_1_s1_translator:uav_burstcount
	wire          timer_1_s1_agent_rf_source_valid;                                                          // timer_1_s1_agent:rf_source_valid -> timer_1_s1_agent_rsp_fifo:in_valid
	wire  [142:0] timer_1_s1_agent_rf_source_data;                                                           // timer_1_s1_agent:rf_source_data -> timer_1_s1_agent_rsp_fifo:in_data
	wire          timer_1_s1_agent_rf_source_ready;                                                          // timer_1_s1_agent_rsp_fifo:in_ready -> timer_1_s1_agent:rf_source_ready
	wire          timer_1_s1_agent_rf_source_startofpacket;                                                  // timer_1_s1_agent:rf_source_startofpacket -> timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1_s1_agent_rf_source_endofpacket;                                                    // timer_1_s1_agent:rf_source_endofpacket -> timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_valid;                                                       // timer_1_s1_agent_rsp_fifo:out_valid -> timer_1_s1_agent:rf_sink_valid
	wire  [142:0] timer_1_s1_agent_rsp_fifo_out_data;                                                        // timer_1_s1_agent_rsp_fifo:out_data -> timer_1_s1_agent:rf_sink_data
	wire          timer_1_s1_agent_rsp_fifo_out_ready;                                                       // timer_1_s1_agent:rf_sink_ready -> timer_1_s1_agent_rsp_fifo:out_ready
	wire          timer_1_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_1_s1_agent_rsp_fifo:out_startofpacket -> timer_1_s1_agent:rf_sink_startofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_1_s1_agent_rsp_fifo:out_endofpacket -> timer_1_s1_agent:rf_sink_endofpacket
	wire          timer_1_s1_agent_rdata_fifo_src_valid;                                                     // timer_1_s1_agent:rdata_fifo_src_valid -> timer_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_src_data;                                                      // timer_1_s1_agent:rdata_fifo_src_data -> timer_1_s1_agent_rdata_fifo:in_data
	wire          timer_1_s1_agent_rdata_fifo_src_ready;                                                     // timer_1_s1_agent_rdata_fifo:in_ready -> timer_1_s1_agent:rdata_fifo_src_ready
	wire          timer_1_s1_agent_rdata_fifo_out_valid;                                                     // timer_1_s1_agent_rdata_fifo:out_valid -> timer_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_out_data;                                                      // timer_1_s1_agent_rdata_fifo:out_data -> timer_1_s1_agent:rdata_fifo_sink_data
	wire          timer_1_s1_agent_rdata_fifo_out_ready;                                                     // timer_1_s1_agent:rdata_fifo_sink_ready -> timer_1_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_037_src_valid;                                                                     // cmd_mux_037:src_valid -> timer_1_s1_agent:cp_valid
	wire  [141:0] cmd_mux_037_src_data;                                                                      // cmd_mux_037:src_data -> timer_1_s1_agent:cp_data
	wire          cmd_mux_037_src_ready;                                                                     // timer_1_s1_agent:cp_ready -> cmd_mux_037:src_ready
	wire   [42:0] cmd_mux_037_src_channel;                                                                   // cmd_mux_037:src_channel -> timer_1_s1_agent:cp_channel
	wire          cmd_mux_037_src_startofpacket;                                                             // cmd_mux_037:src_startofpacket -> timer_1_s1_agent:cp_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                               // cmd_mux_037:src_endofpacket -> timer_1_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                              // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                           // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                           // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                               // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                            // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                                  // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                         // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                                  // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                             // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                                 // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                            // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                          // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [142:0] timer_0_s1_agent_rf_source_data;                                                           // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                          // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                                  // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                                    // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                       // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [142:0] timer_0_s1_agent_rsp_fifo_out_data;                                                        // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                       // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                               // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                                 // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                     // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                      // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                     // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          timer_0_s1_agent_rdata_fifo_out_valid;                                                     // timer_0_s1_agent_rdata_fifo:out_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                                      // timer_0_s1_agent_rdata_fifo:out_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          timer_0_s1_agent_rdata_fifo_out_ready;                                                     // timer_0_s1_agent:rdata_fifo_sink_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_038_src_valid;                                                                     // cmd_mux_038:src_valid -> timer_0_s1_agent:cp_valid
	wire  [141:0] cmd_mux_038_src_data;                                                                      // cmd_mux_038:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_038_src_ready;                                                                     // timer_0_s1_agent:cp_ready -> cmd_mux_038:src_ready
	wire   [42:0] cmd_mux_038_src_channel;                                                                   // cmd_mux_038:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_038_src_startofpacket;                                                             // cmd_mux_038:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                               // cmd_mux_038:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] gpio_s1_agent_m0_readdata;                                                                 // gpio_s1_translator:uav_readdata -> gpio_s1_agent:m0_readdata
	wire          gpio_s1_agent_m0_waitrequest;                                                              // gpio_s1_translator:uav_waitrequest -> gpio_s1_agent:m0_waitrequest
	wire          gpio_s1_agent_m0_debugaccess;                                                              // gpio_s1_agent:m0_debugaccess -> gpio_s1_translator:uav_debugaccess
	wire   [31:0] gpio_s1_agent_m0_address;                                                                  // gpio_s1_agent:m0_address -> gpio_s1_translator:uav_address
	wire    [3:0] gpio_s1_agent_m0_byteenable;                                                               // gpio_s1_agent:m0_byteenable -> gpio_s1_translator:uav_byteenable
	wire          gpio_s1_agent_m0_read;                                                                     // gpio_s1_agent:m0_read -> gpio_s1_translator:uav_read
	wire          gpio_s1_agent_m0_readdatavalid;                                                            // gpio_s1_translator:uav_readdatavalid -> gpio_s1_agent:m0_readdatavalid
	wire          gpio_s1_agent_m0_lock;                                                                     // gpio_s1_agent:m0_lock -> gpio_s1_translator:uav_lock
	wire   [31:0] gpio_s1_agent_m0_writedata;                                                                // gpio_s1_agent:m0_writedata -> gpio_s1_translator:uav_writedata
	wire          gpio_s1_agent_m0_write;                                                                    // gpio_s1_agent:m0_write -> gpio_s1_translator:uav_write
	wire    [2:0] gpio_s1_agent_m0_burstcount;                                                               // gpio_s1_agent:m0_burstcount -> gpio_s1_translator:uav_burstcount
	wire          gpio_s1_agent_rf_source_valid;                                                             // gpio_s1_agent:rf_source_valid -> gpio_s1_agent_rsp_fifo:in_valid
	wire  [142:0] gpio_s1_agent_rf_source_data;                                                              // gpio_s1_agent:rf_source_data -> gpio_s1_agent_rsp_fifo:in_data
	wire          gpio_s1_agent_rf_source_ready;                                                             // gpio_s1_agent_rsp_fifo:in_ready -> gpio_s1_agent:rf_source_ready
	wire          gpio_s1_agent_rf_source_startofpacket;                                                     // gpio_s1_agent:rf_source_startofpacket -> gpio_s1_agent_rsp_fifo:in_startofpacket
	wire          gpio_s1_agent_rf_source_endofpacket;                                                       // gpio_s1_agent:rf_source_endofpacket -> gpio_s1_agent_rsp_fifo:in_endofpacket
	wire          gpio_s1_agent_rsp_fifo_out_valid;                                                          // gpio_s1_agent_rsp_fifo:out_valid -> gpio_s1_agent:rf_sink_valid
	wire  [142:0] gpio_s1_agent_rsp_fifo_out_data;                                                           // gpio_s1_agent_rsp_fifo:out_data -> gpio_s1_agent:rf_sink_data
	wire          gpio_s1_agent_rsp_fifo_out_ready;                                                          // gpio_s1_agent:rf_sink_ready -> gpio_s1_agent_rsp_fifo:out_ready
	wire          gpio_s1_agent_rsp_fifo_out_startofpacket;                                                  // gpio_s1_agent_rsp_fifo:out_startofpacket -> gpio_s1_agent:rf_sink_startofpacket
	wire          gpio_s1_agent_rsp_fifo_out_endofpacket;                                                    // gpio_s1_agent_rsp_fifo:out_endofpacket -> gpio_s1_agent:rf_sink_endofpacket
	wire          gpio_s1_agent_rdata_fifo_src_valid;                                                        // gpio_s1_agent:rdata_fifo_src_valid -> gpio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpio_s1_agent_rdata_fifo_src_data;                                                         // gpio_s1_agent:rdata_fifo_src_data -> gpio_s1_agent_rdata_fifo:in_data
	wire          gpio_s1_agent_rdata_fifo_src_ready;                                                        // gpio_s1_agent_rdata_fifo:in_ready -> gpio_s1_agent:rdata_fifo_src_ready
	wire          gpio_s1_agent_rdata_fifo_out_valid;                                                        // gpio_s1_agent_rdata_fifo:out_valid -> gpio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] gpio_s1_agent_rdata_fifo_out_data;                                                         // gpio_s1_agent_rdata_fifo:out_data -> gpio_s1_agent:rdata_fifo_sink_data
	wire          gpio_s1_agent_rdata_fifo_out_ready;                                                        // gpio_s1_agent:rdata_fifo_sink_ready -> gpio_s1_agent_rdata_fifo:out_ready
	wire          cmd_mux_039_src_valid;                                                                     // cmd_mux_039:src_valid -> gpio_s1_agent:cp_valid
	wire  [141:0] cmd_mux_039_src_data;                                                                      // cmd_mux_039:src_data -> gpio_s1_agent:cp_data
	wire          cmd_mux_039_src_ready;                                                                     // gpio_s1_agent:cp_ready -> cmd_mux_039:src_ready
	wire   [42:0] cmd_mux_039_src_channel;                                                                   // cmd_mux_039:src_channel -> gpio_s1_agent:cp_channel
	wire          cmd_mux_039_src_startofpacket;                                                             // cmd_mux_039:src_startofpacket -> gpio_s1_agent:cp_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                               // cmd_mux_039:src_endofpacket -> gpio_s1_agent:cp_endofpacket
	wire   [31:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdata;                               // phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_readdata -> phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_readdata
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_waitrequest;                            // phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_waitrequest -> phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_waitrequest
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_debugaccess;                            // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_debugaccess -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_debugaccess
	wire   [31:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_address;                                // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_address -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_address
	wire    [3:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_byteenable;                             // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_byteenable -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_byteenable
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_read;                                   // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_read -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_read
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdatavalid;                          // phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_readdatavalid -> phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_readdatavalid
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_lock;                                   // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_lock -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_lock
	wire   [31:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_writedata;                              // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_writedata -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_writedata
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_write;                                  // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_write -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_write
	wire    [2:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_burstcount;                             // phy_interlaken_0_serial_clock_reconfig_s0_agent:m0_burstcount -> phy_interlaken_0_serial_clock_reconfig_s0_translator:uav_burstcount
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_valid;                           // phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_source_valid -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:in_valid
	wire  [142:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_data;                            // phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_source_data -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:in_data
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_ready;                           // phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:in_ready -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_source_ready
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_startofpacket;                   // phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_source_startofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:in_startofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_endofpacket;                     // phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_source_endofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:in_endofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid;                        // phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:out_valid -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_sink_valid
	wire  [142:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_data;                         // phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:out_data -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_sink_data
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready;                        // phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_sink_ready -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:out_ready
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket;                // phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:out_startofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_sink_startofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket;                  // phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo:out_endofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rf_sink_endofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid;                      // phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_src_valid -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:in_valid
	wire   [33:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_data;                       // phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_src_data -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:in_data
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready;                      // phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:in_ready -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_src_ready
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid;                      // phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:out_valid -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_data;                       // phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:out_data -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_sink_data
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready;                      // phy_interlaken_0_serial_clock_reconfig_s0_agent:rdata_fifo_sink_ready -> phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_040_src_valid;                                                                     // cmd_mux_040:src_valid -> phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_valid
	wire  [141:0] cmd_mux_040_src_data;                                                                      // cmd_mux_040:src_data -> phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_data
	wire          cmd_mux_040_src_ready;                                                                     // phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_ready -> cmd_mux_040:src_ready
	wire   [42:0] cmd_mux_040_src_channel;                                                                   // cmd_mux_040:src_channel -> phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_channel
	wire          cmd_mux_040_src_startofpacket;                                                             // cmd_mux_040:src_startofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                               // cmd_mux_040:src_endofpacket -> phy_interlaken_0_serial_clock_reconfig_s0_agent:cp_endofpacket
	wire   [31:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdata;                               // phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_readdata -> phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_readdata
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_waitrequest;                            // phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_waitrequest -> phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_waitrequest
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_debugaccess;                            // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_debugaccess -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_debugaccess
	wire   [31:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_address;                                // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_address -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_address
	wire    [3:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_byteenable;                             // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_byteenable -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_byteenable
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_read;                                   // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_read -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_read
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdatavalid;                          // phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_readdatavalid -> phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_readdatavalid
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_lock;                                   // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_lock -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_lock
	wire   [31:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_writedata;                              // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_writedata -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_writedata
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_write;                                  // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_write -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_write
	wire    [2:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_burstcount;                             // phy_interlaken_1_serial_clock_reconfig_s0_agent:m0_burstcount -> phy_interlaken_1_serial_clock_reconfig_s0_translator:uav_burstcount
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_valid;                           // phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_source_valid -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:in_valid
	wire  [142:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_data;                            // phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_source_data -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:in_data
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_ready;                           // phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:in_ready -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_source_ready
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_startofpacket;                   // phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_source_startofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:in_startofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_endofpacket;                     // phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_source_endofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:in_endofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid;                        // phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:out_valid -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_sink_valid
	wire  [142:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_data;                         // phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:out_data -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_sink_data
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready;                        // phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_sink_ready -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:out_ready
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket;                // phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:out_startofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_sink_startofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket;                  // phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo:out_endofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rf_sink_endofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid;                      // phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_src_valid -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:in_valid
	wire   [33:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_data;                       // phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_src_data -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:in_data
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready;                      // phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:in_ready -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_src_ready
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid;                      // phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:out_valid -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_data;                       // phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:out_data -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_sink_data
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready;                      // phy_interlaken_1_serial_clock_reconfig_s0_agent:rdata_fifo_sink_ready -> phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_041_src_valid;                                                                     // cmd_mux_041:src_valid -> phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_valid
	wire  [141:0] cmd_mux_041_src_data;                                                                      // cmd_mux_041:src_data -> phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_data
	wire          cmd_mux_041_src_ready;                                                                     // phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_ready -> cmd_mux_041:src_ready
	wire   [42:0] cmd_mux_041_src_channel;                                                                   // cmd_mux_041:src_channel -> phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_channel
	wire          cmd_mux_041_src_startofpacket;                                                             // cmd_mux_041:src_startofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                               // cmd_mux_041:src_endofpacket -> phy_interlaken_1_serial_clock_reconfig_s0_agent:cp_endofpacket
	wire   [31:0] spi_spi_control_port_agent_m0_readdata;                                                    // spi_spi_control_port_translator:uav_readdata -> spi_spi_control_port_agent:m0_readdata
	wire          spi_spi_control_port_agent_m0_waitrequest;                                                 // spi_spi_control_port_translator:uav_waitrequest -> spi_spi_control_port_agent:m0_waitrequest
	wire          spi_spi_control_port_agent_m0_debugaccess;                                                 // spi_spi_control_port_agent:m0_debugaccess -> spi_spi_control_port_translator:uav_debugaccess
	wire   [31:0] spi_spi_control_port_agent_m0_address;                                                     // spi_spi_control_port_agent:m0_address -> spi_spi_control_port_translator:uav_address
	wire    [3:0] spi_spi_control_port_agent_m0_byteenable;                                                  // spi_spi_control_port_agent:m0_byteenable -> spi_spi_control_port_translator:uav_byteenable
	wire          spi_spi_control_port_agent_m0_read;                                                        // spi_spi_control_port_agent:m0_read -> spi_spi_control_port_translator:uav_read
	wire          spi_spi_control_port_agent_m0_readdatavalid;                                               // spi_spi_control_port_translator:uav_readdatavalid -> spi_spi_control_port_agent:m0_readdatavalid
	wire          spi_spi_control_port_agent_m0_lock;                                                        // spi_spi_control_port_agent:m0_lock -> spi_spi_control_port_translator:uav_lock
	wire   [31:0] spi_spi_control_port_agent_m0_writedata;                                                   // spi_spi_control_port_agent:m0_writedata -> spi_spi_control_port_translator:uav_writedata
	wire          spi_spi_control_port_agent_m0_write;                                                       // spi_spi_control_port_agent:m0_write -> spi_spi_control_port_translator:uav_write
	wire    [2:0] spi_spi_control_port_agent_m0_burstcount;                                                  // spi_spi_control_port_agent:m0_burstcount -> spi_spi_control_port_translator:uav_burstcount
	wire          spi_spi_control_port_agent_rf_source_valid;                                                // spi_spi_control_port_agent:rf_source_valid -> spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [142:0] spi_spi_control_port_agent_rf_source_data;                                                 // spi_spi_control_port_agent:rf_source_data -> spi_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_spi_control_port_agent_rf_source_ready;                                                // spi_spi_control_port_agent_rsp_fifo:in_ready -> spi_spi_control_port_agent:rf_source_ready
	wire          spi_spi_control_port_agent_rf_source_startofpacket;                                        // spi_spi_control_port_agent:rf_source_startofpacket -> spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_spi_control_port_agent_rf_source_endofpacket;                                          // spi_spi_control_port_agent:rf_source_endofpacket -> spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_valid;                                             // spi_spi_control_port_agent_rsp_fifo:out_valid -> spi_spi_control_port_agent:rf_sink_valid
	wire  [142:0] spi_spi_control_port_agent_rsp_fifo_out_data;                                              // spi_spi_control_port_agent_rsp_fifo:out_data -> spi_spi_control_port_agent:rf_sink_data
	wire          spi_spi_control_port_agent_rsp_fifo_out_ready;                                             // spi_spi_control_port_agent:rf_sink_ready -> spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_spi_control_port_agent_rsp_fifo_out_startofpacket;                                     // spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                                       // spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_spi_control_port_agent:rf_sink_endofpacket
	wire          spi_spi_control_port_agent_rdata_fifo_src_valid;                                           // spi_spi_control_port_agent:rdata_fifo_src_valid -> spi_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] spi_spi_control_port_agent_rdata_fifo_src_data;                                            // spi_spi_control_port_agent:rdata_fifo_src_data -> spi_spi_control_port_agent_rdata_fifo:in_data
	wire          spi_spi_control_port_agent_rdata_fifo_src_ready;                                           // spi_spi_control_port_agent_rdata_fifo:in_ready -> spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          spi_spi_control_port_agent_rdata_fifo_out_valid;                                           // spi_spi_control_port_agent_rdata_fifo:out_valid -> spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] spi_spi_control_port_agent_rdata_fifo_out_data;                                            // spi_spi_control_port_agent_rdata_fifo:out_data -> spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          spi_spi_control_port_agent_rdata_fifo_out_ready;                                           // spi_spi_control_port_agent:rdata_fifo_sink_ready -> spi_spi_control_port_agent_rdata_fifo:out_ready
	wire          cmd_mux_042_src_valid;                                                                     // cmd_mux_042:src_valid -> spi_spi_control_port_agent:cp_valid
	wire  [141:0] cmd_mux_042_src_data;                                                                      // cmd_mux_042:src_data -> spi_spi_control_port_agent:cp_data
	wire          cmd_mux_042_src_ready;                                                                     // spi_spi_control_port_agent:cp_ready -> cmd_mux_042:src_ready
	wire   [42:0] cmd_mux_042_src_channel;                                                                   // cmd_mux_042:src_channel -> spi_spi_control_port_agent:cp_channel
	wire          cmd_mux_042_src_startofpacket;                                                             // cmd_mux_042:src_startofpacket -> spi_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                               // cmd_mux_042:src_endofpacket -> spi_spi_control_port_agent:cp_endofpacket
	wire          mcu_subsystem_cpu_0_data_master_agent_cp_valid;                                            // mcu_subsystem_cpu_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [141:0] mcu_subsystem_cpu_0_data_master_agent_cp_data;                                             // mcu_subsystem_cpu_0_data_master_agent:cp_data -> router:sink_data
	wire          mcu_subsystem_cpu_0_data_master_agent_cp_ready;                                            // router:sink_ready -> mcu_subsystem_cpu_0_data_master_agent:cp_ready
	wire          mcu_subsystem_cpu_0_data_master_agent_cp_startofpacket;                                    // mcu_subsystem_cpu_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mcu_subsystem_cpu_0_data_master_agent_cp_endofpacket;                                      // mcu_subsystem_cpu_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mcu_subsystem_cpu_0_instruction_master_agent_cp_valid;                                     // mcu_subsystem_cpu_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [141:0] mcu_subsystem_cpu_0_instruction_master_agent_cp_data;                                      // mcu_subsystem_cpu_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          mcu_subsystem_cpu_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> mcu_subsystem_cpu_0_instruction_master_agent:cp_ready
	wire          mcu_subsystem_cpu_0_instruction_master_agent_cp_startofpacket;                             // mcu_subsystem_cpu_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          mcu_subsystem_cpu_0_instruction_master_agent_cp_endofpacket;                               // mcu_subsystem_cpu_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          ad9680_dma_m_dest_axi_agent_write_cp_valid;                                                // ad9680_dma_m_dest_axi_agent:write_cp_valid -> router_002:sink_valid
	wire  [249:0] ad9680_dma_m_dest_axi_agent_write_cp_data;                                                 // ad9680_dma_m_dest_axi_agent:write_cp_data -> router_002:sink_data
	wire          ad9680_dma_m_dest_axi_agent_write_cp_ready;                                                // router_002:sink_ready -> ad9680_dma_m_dest_axi_agent:write_cp_ready
	wire          ad9680_dma_m_dest_axi_agent_write_cp_startofpacket;                                        // ad9680_dma_m_dest_axi_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_agent_write_cp_endofpacket;                                          // ad9680_dma_m_dest_axi_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          ad9680_dma_m_dest_axi_agent_read_cp_valid;                                                 // ad9680_dma_m_dest_axi_agent:read_cp_valid -> router_003:sink_valid
	wire  [249:0] ad9680_dma_m_dest_axi_agent_read_cp_data;                                                  // ad9680_dma_m_dest_axi_agent:read_cp_data -> router_003:sink_data
	wire          ad9680_dma_m_dest_axi_agent_read_cp_ready;                                                 // router_003:sink_ready -> ad9680_dma_m_dest_axi_agent:read_cp_ready
	wire          ad9680_dma_m_dest_axi_agent_read_cp_startofpacket;                                         // ad9680_dma_m_dest_axi_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_agent_read_cp_endofpacket;                                           // ad9680_dma_m_dest_axi_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          ad9144_dma_m_src_axi_agent_write_cp_valid;                                                 // ad9144_dma_m_src_axi_agent:write_cp_valid -> router_004:sink_valid
	wire  [249:0] ad9144_dma_m_src_axi_agent_write_cp_data;                                                  // ad9144_dma_m_src_axi_agent:write_cp_data -> router_004:sink_data
	wire          ad9144_dma_m_src_axi_agent_write_cp_ready;                                                 // router_004:sink_ready -> ad9144_dma_m_src_axi_agent:write_cp_ready
	wire          ad9144_dma_m_src_axi_agent_write_cp_startofpacket;                                         // ad9144_dma_m_src_axi_agent:write_cp_startofpacket -> router_004:sink_startofpacket
	wire          ad9144_dma_m_src_axi_agent_write_cp_endofpacket;                                           // ad9144_dma_m_src_axi_agent:write_cp_endofpacket -> router_004:sink_endofpacket
	wire          ad9144_dma_m_src_axi_agent_read_cp_valid;                                                  // ad9144_dma_m_src_axi_agent:read_cp_valid -> router_005:sink_valid
	wire  [249:0] ad9144_dma_m_src_axi_agent_read_cp_data;                                                   // ad9144_dma_m_src_axi_agent:read_cp_data -> router_005:sink_data
	wire          ad9144_dma_m_src_axi_agent_read_cp_ready;                                                  // router_005:sink_ready -> ad9144_dma_m_src_axi_agent:read_cp_ready
	wire          ad9144_dma_m_src_axi_agent_read_cp_startofpacket;                                          // ad9144_dma_m_src_axi_agent:read_cp_startofpacket -> router_005:sink_startofpacket
	wire          ad9144_dma_m_src_axi_agent_read_cp_endofpacket;                                            // ad9144_dma_m_src_axi_agent:read_cp_endofpacket -> router_005:sink_endofpacket
	wire          phy_interlaken_1_phy_data_ctrl_m0_agent_cp_valid;                                          // phy_interlaken_1_phy_data_ctrl_m0_agent:cp_valid -> router_006:sink_valid
	wire  [141:0] phy_interlaken_1_phy_data_ctrl_m0_agent_cp_data;                                           // phy_interlaken_1_phy_data_ctrl_m0_agent:cp_data -> router_006:sink_data
	wire          phy_interlaken_1_phy_data_ctrl_m0_agent_cp_ready;                                          // router_006:sink_ready -> phy_interlaken_1_phy_data_ctrl_m0_agent:cp_ready
	wire          phy_interlaken_1_phy_data_ctrl_m0_agent_cp_startofpacket;                                  // phy_interlaken_1_phy_data_ctrl_m0_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          phy_interlaken_1_phy_data_ctrl_m0_agent_cp_endofpacket;                                    // phy_interlaken_1_phy_data_ctrl_m0_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                      // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [141:0] router_006_src_data;                                                                       // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                                      // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [42:0] router_006_src_channel;                                                                    // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          phy_interlaken_0_phy_data_ctrl_m0_agent_cp_valid;                                          // phy_interlaken_0_phy_data_ctrl_m0_agent:cp_valid -> router_007:sink_valid
	wire  [141:0] phy_interlaken_0_phy_data_ctrl_m0_agent_cp_data;                                           // phy_interlaken_0_phy_data_ctrl_m0_agent:cp_data -> router_007:sink_data
	wire          phy_interlaken_0_phy_data_ctrl_m0_agent_cp_ready;                                          // router_007:sink_ready -> phy_interlaken_0_phy_data_ctrl_m0_agent:cp_ready
	wire          phy_interlaken_0_phy_data_ctrl_m0_agent_cp_startofpacket;                                  // phy_interlaken_0_phy_data_ctrl_m0_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          phy_interlaken_0_phy_data_ctrl_m0_agent_cp_endofpacket;                                    // phy_interlaken_0_phy_data_ctrl_m0_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                      // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [141:0] router_007_src_data;                                                                       // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                      // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [42:0] router_007_src_channel;                                                                    // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          ad9144_jesd204_link_management_agent_write_rp_valid;                                       // ad9144_jesd204_link_management_agent:write_rp_valid -> router_008:sink_valid
	wire  [141:0] ad9144_jesd204_link_management_agent_write_rp_data;                                        // ad9144_jesd204_link_management_agent:write_rp_data -> router_008:sink_data
	wire          ad9144_jesd204_link_management_agent_write_rp_ready;                                       // router_008:sink_ready -> ad9144_jesd204_link_management_agent:write_rp_ready
	wire          ad9144_jesd204_link_management_agent_write_rp_startofpacket;                               // ad9144_jesd204_link_management_agent:write_rp_startofpacket -> router_008:sink_startofpacket
	wire          ad9144_jesd204_link_management_agent_write_rp_endofpacket;                                 // ad9144_jesd204_link_management_agent:write_rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux:sink_valid
	wire  [141:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                      // rsp_demux:sink_ready -> router_008:src_ready
	wire   [42:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ad9144_jesd204_link_management_agent_read_rp_valid;                                        // ad9144_jesd204_link_management_agent:read_rp_valid -> router_009:sink_valid
	wire  [141:0] ad9144_jesd204_link_management_agent_read_rp_data;                                         // ad9144_jesd204_link_management_agent:read_rp_data -> router_009:sink_data
	wire          ad9144_jesd204_link_management_agent_read_rp_ready;                                        // router_009:sink_ready -> ad9144_jesd204_link_management_agent:read_rp_ready
	wire          ad9144_jesd204_link_management_agent_read_rp_startofpacket;                                // ad9144_jesd204_link_management_agent:read_rp_startofpacket -> router_009:sink_startofpacket
	wire          ad9144_jesd204_link_management_agent_read_rp_endofpacket;                                  // ad9144_jesd204_link_management_agent:read_rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [141:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                      // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [42:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          ad9680_jesd204_link_management_agent_write_rp_valid;                                       // ad9680_jesd204_link_management_agent:write_rp_valid -> router_010:sink_valid
	wire  [141:0] ad9680_jesd204_link_management_agent_write_rp_data;                                        // ad9680_jesd204_link_management_agent:write_rp_data -> router_010:sink_data
	wire          ad9680_jesd204_link_management_agent_write_rp_ready;                                       // router_010:sink_ready -> ad9680_jesd204_link_management_agent:write_rp_ready
	wire          ad9680_jesd204_link_management_agent_write_rp_startofpacket;                               // ad9680_jesd204_link_management_agent:write_rp_startofpacket -> router_010:sink_startofpacket
	wire          ad9680_jesd204_link_management_agent_write_rp_endofpacket;                                 // ad9680_jesd204_link_management_agent:write_rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [141:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [42:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ad9680_jesd204_link_management_agent_read_rp_valid;                                        // ad9680_jesd204_link_management_agent:read_rp_valid -> router_011:sink_valid
	wire  [141:0] ad9680_jesd204_link_management_agent_read_rp_data;                                         // ad9680_jesd204_link_management_agent:read_rp_data -> router_011:sink_data
	wire          ad9680_jesd204_link_management_agent_read_rp_ready;                                        // router_011:sink_ready -> ad9680_jesd204_link_management_agent:read_rp_ready
	wire          ad9680_jesd204_link_management_agent_read_rp_startofpacket;                                // ad9680_jesd204_link_management_agent:read_rp_startofpacket -> router_011:sink_startofpacket
	wire          ad9680_jesd204_link_management_agent_read_rp_endofpacket;                                  // ad9680_jesd204_link_management_agent:read_rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [141:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [42:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_valid;                                         // ad9144_jesd204_link_reconfig_agent:write_rp_valid -> router_012:sink_valid
	wire  [141:0] ad9144_jesd204_link_reconfig_agent_write_rp_data;                                          // ad9144_jesd204_link_reconfig_agent:write_rp_data -> router_012:sink_data
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_ready;                                         // router_012:sink_ready -> ad9144_jesd204_link_reconfig_agent:write_rp_ready
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket;                                 // ad9144_jesd204_link_reconfig_agent:write_rp_startofpacket -> router_012:sink_startofpacket
	wire          ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket;                                   // ad9144_jesd204_link_reconfig_agent:write_rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                      // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [141:0] router_012_src_data;                                                                       // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [42:0] router_012_src_channel;                                                                    // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                              // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_valid;                                          // ad9144_jesd204_link_reconfig_agent:read_rp_valid -> router_013:sink_valid
	wire  [141:0] ad9144_jesd204_link_reconfig_agent_read_rp_data;                                           // ad9144_jesd204_link_reconfig_agent:read_rp_data -> router_013:sink_data
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_ready;                                          // router_013:sink_ready -> ad9144_jesd204_link_reconfig_agent:read_rp_ready
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket;                                  // ad9144_jesd204_link_reconfig_agent:read_rp_startofpacket -> router_013:sink_startofpacket
	wire          ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket;                                    // ad9144_jesd204_link_reconfig_agent:read_rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                      // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [141:0] router_013_src_data;                                                                       // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                      // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [42:0] router_013_src_channel;                                                                    // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                              // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_valid;                                         // ad9680_jesd204_link_reconfig_agent:write_rp_valid -> router_014:sink_valid
	wire  [141:0] ad9680_jesd204_link_reconfig_agent_write_rp_data;                                          // ad9680_jesd204_link_reconfig_agent:write_rp_data -> router_014:sink_data
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_ready;                                         // router_014:sink_ready -> ad9680_jesd204_link_reconfig_agent:write_rp_ready
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket;                                 // ad9680_jesd204_link_reconfig_agent:write_rp_startofpacket -> router_014:sink_startofpacket
	wire          ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket;                                   // ad9680_jesd204_link_reconfig_agent:write_rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                      // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [141:0] router_014_src_data;                                                                       // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [42:0] router_014_src_channel;                                                                    // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                              // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_valid;                                          // ad9680_jesd204_link_reconfig_agent:read_rp_valid -> router_015:sink_valid
	wire  [141:0] ad9680_jesd204_link_reconfig_agent_read_rp_data;                                           // ad9680_jesd204_link_reconfig_agent:read_rp_data -> router_015:sink_data
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_ready;                                          // router_015:sink_ready -> ad9680_jesd204_link_reconfig_agent:read_rp_ready
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket;                                  // ad9680_jesd204_link_reconfig_agent:read_rp_startofpacket -> router_015:sink_startofpacket
	wire          ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket;                                    // ad9680_jesd204_link_reconfig_agent:read_rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                      // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [141:0] router_015_src_data;                                                                       // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [42:0] router_015_src_channel;                                                                    // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                              // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          ad9144_core_s_axi_agent_write_rp_valid;                                                    // ad9144_core_s_axi_agent:write_rp_valid -> router_016:sink_valid
	wire  [141:0] ad9144_core_s_axi_agent_write_rp_data;                                                     // ad9144_core_s_axi_agent:write_rp_data -> router_016:sink_data
	wire          ad9144_core_s_axi_agent_write_rp_ready;                                                    // router_016:sink_ready -> ad9144_core_s_axi_agent:write_rp_ready
	wire          ad9144_core_s_axi_agent_write_rp_startofpacket;                                            // ad9144_core_s_axi_agent:write_rp_startofpacket -> router_016:sink_startofpacket
	wire          ad9144_core_s_axi_agent_write_rp_endofpacket;                                              // ad9144_core_s_axi_agent:write_rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                      // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [141:0] router_016_src_data;                                                                       // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                      // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [42:0] router_016_src_channel;                                                                    // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                              // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          ad9144_core_s_axi_agent_read_rp_valid;                                                     // ad9144_core_s_axi_agent:read_rp_valid -> router_017:sink_valid
	wire  [141:0] ad9144_core_s_axi_agent_read_rp_data;                                                      // ad9144_core_s_axi_agent:read_rp_data -> router_017:sink_data
	wire          ad9144_core_s_axi_agent_read_rp_ready;                                                     // router_017:sink_ready -> ad9144_core_s_axi_agent:read_rp_ready
	wire          ad9144_core_s_axi_agent_read_rp_startofpacket;                                             // ad9144_core_s_axi_agent:read_rp_startofpacket -> router_017:sink_startofpacket
	wire          ad9144_core_s_axi_agent_read_rp_endofpacket;                                               // ad9144_core_s_axi_agent:read_rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                      // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [141:0] router_017_src_data;                                                                       // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [42:0] router_017_src_channel;                                                                    // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                              // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          ad9144_dma_s_axi_agent_write_rp_valid;                                                     // ad9144_dma_s_axi_agent:write_rp_valid -> router_018:sink_valid
	wire  [141:0] ad9144_dma_s_axi_agent_write_rp_data;                                                      // ad9144_dma_s_axi_agent:write_rp_data -> router_018:sink_data
	wire          ad9144_dma_s_axi_agent_write_rp_ready;                                                     // router_018:sink_ready -> ad9144_dma_s_axi_agent:write_rp_ready
	wire          ad9144_dma_s_axi_agent_write_rp_startofpacket;                                             // ad9144_dma_s_axi_agent:write_rp_startofpacket -> router_018:sink_startofpacket
	wire          ad9144_dma_s_axi_agent_write_rp_endofpacket;                                               // ad9144_dma_s_axi_agent:write_rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                      // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [141:0] router_018_src_data;                                                                       // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                      // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [42:0] router_018_src_channel;                                                                    // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                              // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          ad9144_dma_s_axi_agent_read_rp_valid;                                                      // ad9144_dma_s_axi_agent:read_rp_valid -> router_019:sink_valid
	wire  [141:0] ad9144_dma_s_axi_agent_read_rp_data;                                                       // ad9144_dma_s_axi_agent:read_rp_data -> router_019:sink_data
	wire          ad9144_dma_s_axi_agent_read_rp_ready;                                                      // router_019:sink_ready -> ad9144_dma_s_axi_agent:read_rp_ready
	wire          ad9144_dma_s_axi_agent_read_rp_startofpacket;                                              // ad9144_dma_s_axi_agent:read_rp_startofpacket -> router_019:sink_startofpacket
	wire          ad9144_dma_s_axi_agent_read_rp_endofpacket;                                                // ad9144_dma_s_axi_agent:read_rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                      // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [141:0] router_019_src_data;                                                                       // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                      // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [42:0] router_019_src_channel;                                                                    // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                              // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          ad9680_dma_s_axi_agent_write_rp_valid;                                                     // ad9680_dma_s_axi_agent:write_rp_valid -> router_020:sink_valid
	wire  [141:0] ad9680_dma_s_axi_agent_write_rp_data;                                                      // ad9680_dma_s_axi_agent:write_rp_data -> router_020:sink_data
	wire          ad9680_dma_s_axi_agent_write_rp_ready;                                                     // router_020:sink_ready -> ad9680_dma_s_axi_agent:write_rp_ready
	wire          ad9680_dma_s_axi_agent_write_rp_startofpacket;                                             // ad9680_dma_s_axi_agent:write_rp_startofpacket -> router_020:sink_startofpacket
	wire          ad9680_dma_s_axi_agent_write_rp_endofpacket;                                               // ad9680_dma_s_axi_agent:write_rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                      // router_020:src_valid -> rsp_demux_012:sink_valid
	wire  [141:0] router_020_src_data;                                                                       // router_020:src_data -> rsp_demux_012:sink_data
	wire          router_020_src_ready;                                                                      // rsp_demux_012:sink_ready -> router_020:src_ready
	wire   [42:0] router_020_src_channel;                                                                    // router_020:src_channel -> rsp_demux_012:sink_channel
	wire          router_020_src_startofpacket;                                                              // router_020:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                // router_020:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          ad9680_dma_s_axi_agent_read_rp_valid;                                                      // ad9680_dma_s_axi_agent:read_rp_valid -> router_021:sink_valid
	wire  [141:0] ad9680_dma_s_axi_agent_read_rp_data;                                                       // ad9680_dma_s_axi_agent:read_rp_data -> router_021:sink_data
	wire          ad9680_dma_s_axi_agent_read_rp_ready;                                                      // router_021:sink_ready -> ad9680_dma_s_axi_agent:read_rp_ready
	wire          ad9680_dma_s_axi_agent_read_rp_startofpacket;                                              // ad9680_dma_s_axi_agent:read_rp_startofpacket -> router_021:sink_startofpacket
	wire          ad9680_dma_s_axi_agent_read_rp_endofpacket;                                                // ad9680_dma_s_axi_agent:read_rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                      // router_021:src_valid -> rsp_demux_013:sink_valid
	wire  [141:0] router_021_src_data;                                                                       // router_021:src_data -> rsp_demux_013:sink_data
	wire          router_021_src_ready;                                                                      // rsp_demux_013:sink_ready -> router_021:src_ready
	wire   [42:0] router_021_src_channel;                                                                    // router_021:src_channel -> rsp_demux_013:sink_channel
	wire          router_021_src_startofpacket;                                                              // router_021:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                // router_021:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          ad9680_core_s_axi_agent_write_rp_valid;                                                    // ad9680_core_s_axi_agent:write_rp_valid -> router_022:sink_valid
	wire  [141:0] ad9680_core_s_axi_agent_write_rp_data;                                                     // ad9680_core_s_axi_agent:write_rp_data -> router_022:sink_data
	wire          ad9680_core_s_axi_agent_write_rp_ready;                                                    // router_022:sink_ready -> ad9680_core_s_axi_agent:write_rp_ready
	wire          ad9680_core_s_axi_agent_write_rp_startofpacket;                                            // ad9680_core_s_axi_agent:write_rp_startofpacket -> router_022:sink_startofpacket
	wire          ad9680_core_s_axi_agent_write_rp_endofpacket;                                              // ad9680_core_s_axi_agent:write_rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                      // router_022:src_valid -> rsp_demux_014:sink_valid
	wire  [141:0] router_022_src_data;                                                                       // router_022:src_data -> rsp_demux_014:sink_data
	wire          router_022_src_ready;                                                                      // rsp_demux_014:sink_ready -> router_022:src_ready
	wire   [42:0] router_022_src_channel;                                                                    // router_022:src_channel -> rsp_demux_014:sink_channel
	wire          router_022_src_startofpacket;                                                              // router_022:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                // router_022:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          ad9680_core_s_axi_agent_read_rp_valid;                                                     // ad9680_core_s_axi_agent:read_rp_valid -> router_023:sink_valid
	wire  [141:0] ad9680_core_s_axi_agent_read_rp_data;                                                      // ad9680_core_s_axi_agent:read_rp_data -> router_023:sink_data
	wire          ad9680_core_s_axi_agent_read_rp_ready;                                                     // router_023:sink_ready -> ad9680_core_s_axi_agent:read_rp_ready
	wire          ad9680_core_s_axi_agent_read_rp_startofpacket;                                             // ad9680_core_s_axi_agent:read_rp_startofpacket -> router_023:sink_startofpacket
	wire          ad9680_core_s_axi_agent_read_rp_endofpacket;                                               // ad9680_core_s_axi_agent:read_rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                      // router_023:src_valid -> rsp_demux_015:sink_valid
	wire  [141:0] router_023_src_data;                                                                       // router_023:src_data -> rsp_demux_015:sink_data
	wire          router_023_src_ready;                                                                      // rsp_demux_015:sink_ready -> router_023:src_ready
	wire   [42:0] router_023_src_channel;                                                                    // router_023:src_channel -> rsp_demux_015:sink_channel
	wire          router_023_src_startofpacket;                                                              // router_023:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                // router_023:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                              // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_024:sink_valid
	wire  [141:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                               // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_024:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                              // router_024:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                                      // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                      // router_024:src_valid -> rsp_demux_016:sink_valid
	wire  [141:0] router_024_src_data;                                                                       // router_024:src_data -> rsp_demux_016:sink_data
	wire          router_024_src_ready;                                                                      // rsp_demux_016:sink_ready -> router_024:src_ready
	wire   [42:0] router_024_src_channel;                                                                    // router_024:src_channel -> rsp_demux_016:sink_channel
	wire          router_024_src_startofpacket;                                                              // router_024:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                // router_024:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          i2c_csr_agent_rp_valid;                                                                    // i2c_csr_agent:rp_valid -> router_025:sink_valid
	wire  [141:0] i2c_csr_agent_rp_data;                                                                     // i2c_csr_agent:rp_data -> router_025:sink_data
	wire          i2c_csr_agent_rp_ready;                                                                    // router_025:sink_ready -> i2c_csr_agent:rp_ready
	wire          i2c_csr_agent_rp_startofpacket;                                                            // i2c_csr_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          i2c_csr_agent_rp_endofpacket;                                                              // i2c_csr_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                      // router_025:src_valid -> rsp_demux_017:sink_valid
	wire  [141:0] router_025_src_data;                                                                       // router_025:src_data -> rsp_demux_017:sink_data
	wire          router_025_src_ready;                                                                      // rsp_demux_017:sink_ready -> router_025:src_ready
	wire   [42:0] router_025_src_channel;                                                                    // router_025:src_channel -> rsp_demux_017:sink_channel
	wire          router_025_src_startofpacket;                                                              // router_025:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                // router_025:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_valid;                                        // mcu_subsystem_cpu_0_debug_mem_slave_agent:rp_valid -> router_026:sink_valid
	wire  [141:0] mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_data;                                         // mcu_subsystem_cpu_0_debug_mem_slave_agent:rp_data -> router_026:sink_data
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_ready;                                        // router_026:sink_ready -> mcu_subsystem_cpu_0_debug_mem_slave_agent:rp_ready
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_startofpacket;                                // mcu_subsystem_cpu_0_debug_mem_slave_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_endofpacket;                                  // mcu_subsystem_cpu_0_debug_mem_slave_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                      // router_026:src_valid -> rsp_demux_018:sink_valid
	wire  [141:0] router_026_src_data;                                                                       // router_026:src_data -> rsp_demux_018:sink_data
	wire          router_026_src_ready;                                                                      // rsp_demux_018:sink_ready -> router_026:src_ready
	wire   [42:0] router_026_src_channel;                                                                    // router_026:src_channel -> rsp_demux_018:sink_channel
	wire          router_026_src_startofpacket;                                                              // router_026:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                // router_026:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_valid;                                           // ad9144_jesd204_lane_pll_reconfig_agent:rp_valid -> router_027:sink_valid
	wire  [141:0] ad9144_jesd204_lane_pll_reconfig_agent_rp_data;                                            // ad9144_jesd204_lane_pll_reconfig_agent:rp_data -> router_027:sink_data
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_ready;                                           // router_027:sink_ready -> ad9144_jesd204_lane_pll_reconfig_agent:rp_ready
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket;                                   // ad9144_jesd204_lane_pll_reconfig_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket;                                     // ad9144_jesd204_lane_pll_reconfig_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                      // router_027:src_valid -> rsp_demux_019:sink_valid
	wire  [141:0] router_027_src_data;                                                                       // router_027:src_data -> rsp_demux_019:sink_data
	wire          router_027_src_ready;                                                                      // rsp_demux_019:sink_ready -> router_027:src_ready
	wire   [42:0] router_027_src_channel;                                                                    // router_027:src_channel -> rsp_demux_019:sink_channel
	wire          router_027_src_startofpacket;                                                              // router_027:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                // router_027:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_valid;                                           // ad9144_jesd204_link_pll_reconfig_agent:rp_valid -> router_028:sink_valid
	wire  [141:0] ad9144_jesd204_link_pll_reconfig_agent_rp_data;                                            // ad9144_jesd204_link_pll_reconfig_agent:rp_data -> router_028:sink_data
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_ready;                                           // router_028:sink_ready -> ad9144_jesd204_link_pll_reconfig_agent:rp_ready
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket;                                   // ad9144_jesd204_link_pll_reconfig_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket;                                     // ad9144_jesd204_link_pll_reconfig_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                      // router_028:src_valid -> rsp_demux_020:sink_valid
	wire  [141:0] router_028_src_data;                                                                       // router_028:src_data -> rsp_demux_020:sink_data
	wire          router_028_src_ready;                                                                      // rsp_demux_020:sink_ready -> router_028:src_ready
	wire   [42:0] router_028_src_channel;                                                                    // router_028:src_channel -> rsp_demux_020:sink_channel
	wire          router_028_src_startofpacket;                                                              // router_028:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                // router_028:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_valid;                                           // ad9680_jesd204_link_pll_reconfig_agent:rp_valid -> router_029:sink_valid
	wire  [141:0] ad9680_jesd204_link_pll_reconfig_agent_rp_data;                                            // ad9680_jesd204_link_pll_reconfig_agent:rp_data -> router_029:sink_data
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_ready;                                           // router_029:sink_ready -> ad9680_jesd204_link_pll_reconfig_agent:rp_ready
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket;                                   // ad9680_jesd204_link_pll_reconfig_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket;                                     // ad9680_jesd204_link_pll_reconfig_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                      // router_029:src_valid -> rsp_demux_021:sink_valid
	wire  [141:0] router_029_src_data;                                                                       // router_029:src_data -> rsp_demux_021:sink_data
	wire          router_029_src_ready;                                                                      // rsp_demux_021:sink_ready -> router_029:src_ready
	wire   [42:0] router_029_src_channel;                                                                    // router_029:src_channel -> rsp_demux_021:sink_channel
	wire          router_029_src_startofpacket;                                                              // router_029:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                // router_029:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_valid;                                      // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rp_valid -> router_030:sink_valid
	wire  [141:0] phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_data;                                       // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rp_data -> router_030:sink_data
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_ready;                                      // router_030:sink_ready -> phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rp_ready
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_startofpacket;                              // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_endofpacket;                                // phy_interlaken_0_phy_data_ctrl_csr_s0_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                      // router_030:src_valid -> rsp_demux_022:sink_valid
	wire  [141:0] router_030_src_data;                                                                       // router_030:src_data -> rsp_demux_022:sink_data
	wire          router_030_src_ready;                                                                      // rsp_demux_022:sink_ready -> router_030:src_ready
	wire   [42:0] router_030_src_channel;                                                                    // router_030:src_channel -> rsp_demux_022:sink_channel
	wire          router_030_src_startofpacket;                                                              // router_030:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                // router_030:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_valid;                                      // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rp_valid -> router_031:sink_valid
	wire  [141:0] phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_data;                                       // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rp_data -> router_031:sink_data
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_ready;                                      // router_031:sink_ready -> phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rp_ready
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_startofpacket;                              // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_endofpacket;                                // phy_interlaken_1_phy_data_ctrl_csr_s0_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                      // router_031:src_valid -> rsp_demux_023:sink_valid
	wire  [141:0] router_031_src_data;                                                                       // router_031:src_data -> rsp_demux_023:sink_data
	wire          router_031_src_ready;                                                                      // rsp_demux_023:sink_ready -> router_031:src_ready
	wire   [42:0] router_031_src_channel;                                                                    // router_031:src_channel -> rsp_demux_023:sink_channel
	wire          router_031_src_startofpacket;                                                              // router_031:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                // router_031:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rp_valid;                                              // ad9144_jesd204_phy_reconfig_0_agent:rp_valid -> router_032:sink_valid
	wire  [141:0] ad9144_jesd204_phy_reconfig_0_agent_rp_data;                                               // ad9144_jesd204_phy_reconfig_0_agent:rp_data -> router_032:sink_data
	wire          ad9144_jesd204_phy_reconfig_0_agent_rp_ready;                                              // router_032:sink_ready -> ad9144_jesd204_phy_reconfig_0_agent:rp_ready
	wire          ad9144_jesd204_phy_reconfig_0_agent_rp_startofpacket;                                      // ad9144_jesd204_phy_reconfig_0_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_0_agent_rp_endofpacket;                                        // ad9144_jesd204_phy_reconfig_0_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                      // router_032:src_valid -> rsp_demux_024:sink_valid
	wire  [141:0] router_032_src_data;                                                                       // router_032:src_data -> rsp_demux_024:sink_data
	wire          router_032_src_ready;                                                                      // rsp_demux_024:sink_ready -> router_032:src_ready
	wire   [42:0] router_032_src_channel;                                                                    // router_032:src_channel -> rsp_demux_024:sink_channel
	wire          router_032_src_startofpacket;                                                              // router_032:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_032_src_endofpacket;                                                                // router_032:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rp_valid;                                              // ad9680_jesd204_phy_reconfig_0_agent:rp_valid -> router_033:sink_valid
	wire  [141:0] ad9680_jesd204_phy_reconfig_0_agent_rp_data;                                               // ad9680_jesd204_phy_reconfig_0_agent:rp_data -> router_033:sink_data
	wire          ad9680_jesd204_phy_reconfig_0_agent_rp_ready;                                              // router_033:sink_ready -> ad9680_jesd204_phy_reconfig_0_agent:rp_ready
	wire          ad9680_jesd204_phy_reconfig_0_agent_rp_startofpacket;                                      // ad9680_jesd204_phy_reconfig_0_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_0_agent_rp_endofpacket;                                        // ad9680_jesd204_phy_reconfig_0_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                      // router_033:src_valid -> rsp_demux_025:sink_valid
	wire  [141:0] router_033_src_data;                                                                       // router_033:src_data -> rsp_demux_025:sink_data
	wire          router_033_src_ready;                                                                      // rsp_demux_025:sink_ready -> router_033:src_ready
	wire   [42:0] router_033_src_channel;                                                                    // router_033:src_channel -> rsp_demux_025:sink_channel
	wire          router_033_src_startofpacket;                                                              // router_033:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_033_src_endofpacket;                                                                // router_033:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rp_valid;                                              // ad9144_jesd204_phy_reconfig_1_agent:rp_valid -> router_034:sink_valid
	wire  [141:0] ad9144_jesd204_phy_reconfig_1_agent_rp_data;                                               // ad9144_jesd204_phy_reconfig_1_agent:rp_data -> router_034:sink_data
	wire          ad9144_jesd204_phy_reconfig_1_agent_rp_ready;                                              // router_034:sink_ready -> ad9144_jesd204_phy_reconfig_1_agent:rp_ready
	wire          ad9144_jesd204_phy_reconfig_1_agent_rp_startofpacket;                                      // ad9144_jesd204_phy_reconfig_1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_1_agent_rp_endofpacket;                                        // ad9144_jesd204_phy_reconfig_1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                      // router_034:src_valid -> rsp_demux_026:sink_valid
	wire  [141:0] router_034_src_data;                                                                       // router_034:src_data -> rsp_demux_026:sink_data
	wire          router_034_src_ready;                                                                      // rsp_demux_026:sink_ready -> router_034:src_ready
	wire   [42:0] router_034_src_channel;                                                                    // router_034:src_channel -> rsp_demux_026:sink_channel
	wire          router_034_src_startofpacket;                                                              // router_034:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_034_src_endofpacket;                                                                // router_034:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rp_valid;                                              // ad9680_jesd204_phy_reconfig_1_agent:rp_valid -> router_035:sink_valid
	wire  [141:0] ad9680_jesd204_phy_reconfig_1_agent_rp_data;                                               // ad9680_jesd204_phy_reconfig_1_agent:rp_data -> router_035:sink_data
	wire          ad9680_jesd204_phy_reconfig_1_agent_rp_ready;                                              // router_035:sink_ready -> ad9680_jesd204_phy_reconfig_1_agent:rp_ready
	wire          ad9680_jesd204_phy_reconfig_1_agent_rp_startofpacket;                                      // ad9680_jesd204_phy_reconfig_1_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_1_agent_rp_endofpacket;                                        // ad9680_jesd204_phy_reconfig_1_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                      // router_035:src_valid -> rsp_demux_027:sink_valid
	wire  [141:0] router_035_src_data;                                                                       // router_035:src_data -> rsp_demux_027:sink_data
	wire          router_035_src_ready;                                                                      // rsp_demux_027:sink_ready -> router_035:src_ready
	wire   [42:0] router_035_src_channel;                                                                    // router_035:src_channel -> rsp_demux_027:sink_channel
	wire          router_035_src_startofpacket;                                                              // router_035:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_035_src_endofpacket;                                                                // router_035:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rp_valid;                                              // ad9144_jesd204_phy_reconfig_2_agent:rp_valid -> router_036:sink_valid
	wire  [141:0] ad9144_jesd204_phy_reconfig_2_agent_rp_data;                                               // ad9144_jesd204_phy_reconfig_2_agent:rp_data -> router_036:sink_data
	wire          ad9144_jesd204_phy_reconfig_2_agent_rp_ready;                                              // router_036:sink_ready -> ad9144_jesd204_phy_reconfig_2_agent:rp_ready
	wire          ad9144_jesd204_phy_reconfig_2_agent_rp_startofpacket;                                      // ad9144_jesd204_phy_reconfig_2_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_2_agent_rp_endofpacket;                                        // ad9144_jesd204_phy_reconfig_2_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                      // router_036:src_valid -> rsp_demux_028:sink_valid
	wire  [141:0] router_036_src_data;                                                                       // router_036:src_data -> rsp_demux_028:sink_data
	wire          router_036_src_ready;                                                                      // rsp_demux_028:sink_ready -> router_036:src_ready
	wire   [42:0] router_036_src_channel;                                                                    // router_036:src_channel -> rsp_demux_028:sink_channel
	wire          router_036_src_startofpacket;                                                              // router_036:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_036_src_endofpacket;                                                                // router_036:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rp_valid;                                              // ad9680_jesd204_phy_reconfig_2_agent:rp_valid -> router_037:sink_valid
	wire  [141:0] ad9680_jesd204_phy_reconfig_2_agent_rp_data;                                               // ad9680_jesd204_phy_reconfig_2_agent:rp_data -> router_037:sink_data
	wire          ad9680_jesd204_phy_reconfig_2_agent_rp_ready;                                              // router_037:sink_ready -> ad9680_jesd204_phy_reconfig_2_agent:rp_ready
	wire          ad9680_jesd204_phy_reconfig_2_agent_rp_startofpacket;                                      // ad9680_jesd204_phy_reconfig_2_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_2_agent_rp_endofpacket;                                        // ad9680_jesd204_phy_reconfig_2_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                                      // router_037:src_valid -> rsp_demux_029:sink_valid
	wire  [141:0] router_037_src_data;                                                                       // router_037:src_data -> rsp_demux_029:sink_data
	wire          router_037_src_ready;                                                                      // rsp_demux_029:sink_ready -> router_037:src_ready
	wire   [42:0] router_037_src_channel;                                                                    // router_037:src_channel -> rsp_demux_029:sink_channel
	wire          router_037_src_startofpacket;                                                              // router_037:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_037_src_endofpacket;                                                                // router_037:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rp_valid;                                              // ad9144_jesd204_phy_reconfig_3_agent:rp_valid -> router_038:sink_valid
	wire  [141:0] ad9144_jesd204_phy_reconfig_3_agent_rp_data;                                               // ad9144_jesd204_phy_reconfig_3_agent:rp_data -> router_038:sink_data
	wire          ad9144_jesd204_phy_reconfig_3_agent_rp_ready;                                              // router_038:sink_ready -> ad9144_jesd204_phy_reconfig_3_agent:rp_ready
	wire          ad9144_jesd204_phy_reconfig_3_agent_rp_startofpacket;                                      // ad9144_jesd204_phy_reconfig_3_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          ad9144_jesd204_phy_reconfig_3_agent_rp_endofpacket;                                        // ad9144_jesd204_phy_reconfig_3_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                                      // router_038:src_valid -> rsp_demux_030:sink_valid
	wire  [141:0] router_038_src_data;                                                                       // router_038:src_data -> rsp_demux_030:sink_data
	wire          router_038_src_ready;                                                                      // rsp_demux_030:sink_ready -> router_038:src_ready
	wire   [42:0] router_038_src_channel;                                                                    // router_038:src_channel -> rsp_demux_030:sink_channel
	wire          router_038_src_startofpacket;                                                              // router_038:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_038_src_endofpacket;                                                                // router_038:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rp_valid;                                              // ad9680_jesd204_phy_reconfig_3_agent:rp_valid -> router_039:sink_valid
	wire  [141:0] ad9680_jesd204_phy_reconfig_3_agent_rp_data;                                               // ad9680_jesd204_phy_reconfig_3_agent:rp_data -> router_039:sink_data
	wire          ad9680_jesd204_phy_reconfig_3_agent_rp_ready;                                              // router_039:sink_ready -> ad9680_jesd204_phy_reconfig_3_agent:rp_ready
	wire          ad9680_jesd204_phy_reconfig_3_agent_rp_startofpacket;                                      // ad9680_jesd204_phy_reconfig_3_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          ad9680_jesd204_phy_reconfig_3_agent_rp_endofpacket;                                        // ad9680_jesd204_phy_reconfig_3_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                                      // router_039:src_valid -> rsp_demux_031:sink_valid
	wire  [141:0] router_039_src_data;                                                                       // router_039:src_data -> rsp_demux_031:sink_data
	wire          router_039_src_ready;                                                                      // rsp_demux_031:sink_ready -> router_039:src_ready
	wire   [42:0] router_039_src_channel;                                                                    // router_039:src_channel -> rsp_demux_031:sink_channel
	wire          router_039_src_startofpacket;                                                              // router_039:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_039_src_endofpacket;                                                                // router_039:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          bridge_3_s0_agent_rp_valid;                                                                // bridge_3_s0_agent:rp_valid -> router_040:sink_valid
	wire  [141:0] bridge_3_s0_agent_rp_data;                                                                 // bridge_3_s0_agent:rp_data -> router_040:sink_data
	wire          bridge_3_s0_agent_rp_ready;                                                                // router_040:sink_ready -> bridge_3_s0_agent:rp_ready
	wire          bridge_3_s0_agent_rp_startofpacket;                                                        // bridge_3_s0_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          bridge_3_s0_agent_rp_endofpacket;                                                          // bridge_3_s0_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                                      // router_040:src_valid -> rsp_demux_032:sink_valid
	wire  [141:0] router_040_src_data;                                                                       // router_040:src_data -> rsp_demux_032:sink_data
	wire          router_040_src_ready;                                                                      // rsp_demux_032:sink_ready -> router_040:src_ready
	wire   [42:0] router_040_src_channel;                                                                    // router_040:src_channel -> rsp_demux_032:sink_channel
	wire          router_040_src_startofpacket;                                                              // router_040:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_040_src_endofpacket;                                                                // router_040:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          bridge_2_s0_agent_rp_valid;                                                                // bridge_2_s0_agent:rp_valid -> router_041:sink_valid
	wire  [141:0] bridge_2_s0_agent_rp_data;                                                                 // bridge_2_s0_agent:rp_data -> router_041:sink_data
	wire          bridge_2_s0_agent_rp_ready;                                                                // router_041:sink_ready -> bridge_2_s0_agent:rp_ready
	wire          bridge_2_s0_agent_rp_startofpacket;                                                        // bridge_2_s0_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          bridge_2_s0_agent_rp_endofpacket;                                                          // bridge_2_s0_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                                      // router_041:src_valid -> rsp_demux_033:sink_valid
	wire  [141:0] router_041_src_data;                                                                       // router_041:src_data -> rsp_demux_033:sink_data
	wire          router_041_src_ready;                                                                      // rsp_demux_033:sink_ready -> router_041:src_ready
	wire   [42:0] router_041_src_channel;                                                                    // router_041:src_channel -> rsp_demux_033:sink_channel
	wire          router_041_src_startofpacket;                                                              // router_041:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_041_src_endofpacket;                                                                // router_041:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          bridge_1_s0_agent_rp_valid;                                                                // bridge_1_s0_agent:rp_valid -> router_042:sink_valid
	wire  [141:0] bridge_1_s0_agent_rp_data;                                                                 // bridge_1_s0_agent:rp_data -> router_042:sink_data
	wire          bridge_1_s0_agent_rp_ready;                                                                // router_042:sink_ready -> bridge_1_s0_agent:rp_ready
	wire          bridge_1_s0_agent_rp_startofpacket;                                                        // bridge_1_s0_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          bridge_1_s0_agent_rp_endofpacket;                                                          // bridge_1_s0_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                                      // router_042:src_valid -> rsp_demux_034:sink_valid
	wire  [141:0] router_042_src_data;                                                                       // router_042:src_data -> rsp_demux_034:sink_data
	wire          router_042_src_ready;                                                                      // rsp_demux_034:sink_ready -> router_042:src_ready
	wire   [42:0] router_042_src_channel;                                                                    // router_042:src_channel -> rsp_demux_034:sink_channel
	wire          router_042_src_startofpacket;                                                              // router_042:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_042_src_endofpacket;                                                                // router_042:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          bridge_0_s0_agent_rp_valid;                                                                // bridge_0_s0_agent:rp_valid -> router_043:sink_valid
	wire  [141:0] bridge_0_s0_agent_rp_data;                                                                 // bridge_0_s0_agent:rp_data -> router_043:sink_data
	wire          bridge_0_s0_agent_rp_ready;                                                                // router_043:sink_ready -> bridge_0_s0_agent:rp_ready
	wire          bridge_0_s0_agent_rp_startofpacket;                                                        // bridge_0_s0_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          bridge_0_s0_agent_rp_endofpacket;                                                          // bridge_0_s0_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                                      // router_043:src_valid -> rsp_demux_035:sink_valid
	wire  [141:0] router_043_src_data;                                                                       // router_043:src_data -> rsp_demux_035:sink_data
	wire          router_043_src_ready;                                                                      // rsp_demux_035:sink_ready -> router_043:src_ready
	wire   [42:0] router_043_src_channel;                                                                    // router_043:src_channel -> rsp_demux_035:sink_channel
	wire          router_043_src_startofpacket;                                                              // router_043:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_043_src_endofpacket;                                                                // router_043:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rp_valid;                                                     // mcu_subsystem_ram_0_s1_agent:rp_valid -> router_044:sink_valid
	wire  [141:0] mcu_subsystem_ram_0_s1_agent_rp_data;                                                      // mcu_subsystem_ram_0_s1_agent:rp_data -> router_044:sink_data
	wire          mcu_subsystem_ram_0_s1_agent_rp_ready;                                                     // router_044:sink_ready -> mcu_subsystem_ram_0_s1_agent:rp_ready
	wire          mcu_subsystem_ram_0_s1_agent_rp_startofpacket;                                             // mcu_subsystem_ram_0_s1_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          mcu_subsystem_ram_0_s1_agent_rp_endofpacket;                                               // mcu_subsystem_ram_0_s1_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                                      // router_044:src_valid -> rsp_demux_036:sink_valid
	wire  [141:0] router_044_src_data;                                                                       // router_044:src_data -> rsp_demux_036:sink_data
	wire          router_044_src_ready;                                                                      // rsp_demux_036:sink_ready -> router_044:src_ready
	wire   [42:0] router_044_src_channel;                                                                    // router_044:src_channel -> rsp_demux_036:sink_channel
	wire          router_044_src_startofpacket;                                                              // router_044:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_044_src_endofpacket;                                                                // router_044:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          timer_1_s1_agent_rp_valid;                                                                 // timer_1_s1_agent:rp_valid -> router_045:sink_valid
	wire  [141:0] timer_1_s1_agent_rp_data;                                                                  // timer_1_s1_agent:rp_data -> router_045:sink_data
	wire          timer_1_s1_agent_rp_ready;                                                                 // router_045:sink_ready -> timer_1_s1_agent:rp_ready
	wire          timer_1_s1_agent_rp_startofpacket;                                                         // timer_1_s1_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          timer_1_s1_agent_rp_endofpacket;                                                           // timer_1_s1_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                                      // router_045:src_valid -> rsp_demux_037:sink_valid
	wire  [141:0] router_045_src_data;                                                                       // router_045:src_data -> rsp_demux_037:sink_data
	wire          router_045_src_ready;                                                                      // rsp_demux_037:sink_ready -> router_045:src_ready
	wire   [42:0] router_045_src_channel;                                                                    // router_045:src_channel -> rsp_demux_037:sink_channel
	wire          router_045_src_startofpacket;                                                              // router_045:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_045_src_endofpacket;                                                                // router_045:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                                 // timer_0_s1_agent:rp_valid -> router_046:sink_valid
	wire  [141:0] timer_0_s1_agent_rp_data;                                                                  // timer_0_s1_agent:rp_data -> router_046:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                                 // router_046:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                         // timer_0_s1_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                           // timer_0_s1_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                                      // router_046:src_valid -> rsp_demux_038:sink_valid
	wire  [141:0] router_046_src_data;                                                                       // router_046:src_data -> rsp_demux_038:sink_data
	wire          router_046_src_ready;                                                                      // rsp_demux_038:sink_ready -> router_046:src_ready
	wire   [42:0] router_046_src_channel;                                                                    // router_046:src_channel -> rsp_demux_038:sink_channel
	wire          router_046_src_startofpacket;                                                              // router_046:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_046_src_endofpacket;                                                                // router_046:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          gpio_s1_agent_rp_valid;                                                                    // gpio_s1_agent:rp_valid -> router_047:sink_valid
	wire  [141:0] gpio_s1_agent_rp_data;                                                                     // gpio_s1_agent:rp_data -> router_047:sink_data
	wire          gpio_s1_agent_rp_ready;                                                                    // router_047:sink_ready -> gpio_s1_agent:rp_ready
	wire          gpio_s1_agent_rp_startofpacket;                                                            // gpio_s1_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          gpio_s1_agent_rp_endofpacket;                                                              // gpio_s1_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                                      // router_047:src_valid -> rsp_demux_039:sink_valid
	wire  [141:0] router_047_src_data;                                                                       // router_047:src_data -> rsp_demux_039:sink_data
	wire          router_047_src_ready;                                                                      // rsp_demux_039:sink_ready -> router_047:src_ready
	wire   [42:0] router_047_src_channel;                                                                    // router_047:src_channel -> rsp_demux_039:sink_channel
	wire          router_047_src_startofpacket;                                                              // router_047:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_047_src_endofpacket;                                                                // router_047:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_valid;                                  // phy_interlaken_0_serial_clock_reconfig_s0_agent:rp_valid -> router_048:sink_valid
	wire  [141:0] phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_data;                                   // phy_interlaken_0_serial_clock_reconfig_s0_agent:rp_data -> router_048:sink_data
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_ready;                                  // router_048:sink_ready -> phy_interlaken_0_serial_clock_reconfig_s0_agent:rp_ready
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_startofpacket;                          // phy_interlaken_0_serial_clock_reconfig_s0_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_endofpacket;                            // phy_interlaken_0_serial_clock_reconfig_s0_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                                      // router_048:src_valid -> rsp_demux_040:sink_valid
	wire  [141:0] router_048_src_data;                                                                       // router_048:src_data -> rsp_demux_040:sink_data
	wire          router_048_src_ready;                                                                      // rsp_demux_040:sink_ready -> router_048:src_ready
	wire   [42:0] router_048_src_channel;                                                                    // router_048:src_channel -> rsp_demux_040:sink_channel
	wire          router_048_src_startofpacket;                                                              // router_048:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_048_src_endofpacket;                                                                // router_048:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_valid;                                  // phy_interlaken_1_serial_clock_reconfig_s0_agent:rp_valid -> router_049:sink_valid
	wire  [141:0] phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_data;                                   // phy_interlaken_1_serial_clock_reconfig_s0_agent:rp_data -> router_049:sink_data
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_ready;                                  // router_049:sink_ready -> phy_interlaken_1_serial_clock_reconfig_s0_agent:rp_ready
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_startofpacket;                          // phy_interlaken_1_serial_clock_reconfig_s0_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_endofpacket;                            // phy_interlaken_1_serial_clock_reconfig_s0_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                                      // router_049:src_valid -> rsp_demux_041:sink_valid
	wire  [141:0] router_049_src_data;                                                                       // router_049:src_data -> rsp_demux_041:sink_data
	wire          router_049_src_ready;                                                                      // rsp_demux_041:sink_ready -> router_049:src_ready
	wire   [42:0] router_049_src_channel;                                                                    // router_049:src_channel -> rsp_demux_041:sink_channel
	wire          router_049_src_startofpacket;                                                              // router_049:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_049_src_endofpacket;                                                                // router_049:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          spi_spi_control_port_agent_rp_valid;                                                       // spi_spi_control_port_agent:rp_valid -> router_050:sink_valid
	wire  [141:0] spi_spi_control_port_agent_rp_data;                                                        // spi_spi_control_port_agent:rp_data -> router_050:sink_data
	wire          spi_spi_control_port_agent_rp_ready;                                                       // router_050:sink_ready -> spi_spi_control_port_agent:rp_ready
	wire          spi_spi_control_port_agent_rp_startofpacket;                                               // spi_spi_control_port_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          spi_spi_control_port_agent_rp_endofpacket;                                                 // spi_spi_control_port_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                                      // router_050:src_valid -> rsp_demux_042:sink_valid
	wire  [141:0] router_050_src_data;                                                                       // router_050:src_data -> rsp_demux_042:sink_data
	wire          router_050_src_ready;                                                                      // rsp_demux_042:sink_ready -> router_050:src_ready
	wire   [42:0] router_050_src_channel;                                                                    // router_050:src_channel -> rsp_demux_042:sink_channel
	wire          router_050_src_startofpacket;                                                              // router_050:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_050_src_endofpacket;                                                                // router_050:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          router_src_valid;                                                                          // router:src_valid -> mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_valid
	wire  [141:0] router_src_data;                                                                           // router:src_data -> mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                          // mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [42:0] router_src_channel;                                                                        // router:src_channel -> mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                  // router:src_startofpacket -> mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                    // router:src_endofpacket -> mcu_subsystem_cpu_0_data_master_limiter:cmd_sink_endofpacket
	wire  [141:0] mcu_subsystem_cpu_0_data_master_limiter_cmd_src_data;                                      // mcu_subsystem_cpu_0_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mcu_subsystem_cpu_0_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> mcu_subsystem_cpu_0_data_master_limiter:cmd_src_ready
	wire   [42:0] mcu_subsystem_cpu_0_data_master_limiter_cmd_src_channel;                                   // mcu_subsystem_cpu_0_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mcu_subsystem_cpu_0_data_master_limiter_cmd_src_startofpacket;                             // mcu_subsystem_cpu_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mcu_subsystem_cpu_0_data_master_limiter_cmd_src_endofpacket;                               // mcu_subsystem_cpu_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_valid
	wire  [141:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                         // mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [42:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> mcu_subsystem_cpu_0_data_master_limiter:rsp_sink_endofpacket
	wire          mcu_subsystem_cpu_0_data_master_limiter_rsp_src_valid;                                     // mcu_subsystem_cpu_0_data_master_limiter:rsp_src_valid -> mcu_subsystem_cpu_0_data_master_agent:rp_valid
	wire  [141:0] mcu_subsystem_cpu_0_data_master_limiter_rsp_src_data;                                      // mcu_subsystem_cpu_0_data_master_limiter:rsp_src_data -> mcu_subsystem_cpu_0_data_master_agent:rp_data
	wire          mcu_subsystem_cpu_0_data_master_limiter_rsp_src_ready;                                     // mcu_subsystem_cpu_0_data_master_agent:rp_ready -> mcu_subsystem_cpu_0_data_master_limiter:rsp_src_ready
	wire   [42:0] mcu_subsystem_cpu_0_data_master_limiter_rsp_src_channel;                                   // mcu_subsystem_cpu_0_data_master_limiter:rsp_src_channel -> mcu_subsystem_cpu_0_data_master_agent:rp_channel
	wire          mcu_subsystem_cpu_0_data_master_limiter_rsp_src_startofpacket;                             // mcu_subsystem_cpu_0_data_master_limiter:rsp_src_startofpacket -> mcu_subsystem_cpu_0_data_master_agent:rp_startofpacket
	wire          mcu_subsystem_cpu_0_data_master_limiter_rsp_src_endofpacket;                               // mcu_subsystem_cpu_0_data_master_limiter:rsp_src_endofpacket -> mcu_subsystem_cpu_0_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                      // router_001:src_valid -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_valid
	wire  [141:0] router_001_src_data;                                                                       // router_001:src_data -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                      // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [42:0] router_001_src_channel;                                                                    // router_001:src_channel -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [141:0] mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_data;                               // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_ready
	wire   [42:0] mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_channel;                            // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_startofpacket;                      // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_endofpacket;                        // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_valid
	wire  [141:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                     // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [42:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_valid;                              // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_valid -> mcu_subsystem_cpu_0_instruction_master_agent:rp_valid
	wire  [141:0] mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_data;                               // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_data -> mcu_subsystem_cpu_0_instruction_master_agent:rp_data
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_ready;                              // mcu_subsystem_cpu_0_instruction_master_agent:rp_ready -> mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_ready
	wire   [42:0] mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_channel;                            // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_channel -> mcu_subsystem_cpu_0_instruction_master_agent:rp_channel
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_startofpacket;                      // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_startofpacket -> mcu_subsystem_cpu_0_instruction_master_agent:rp_startofpacket
	wire          mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_endofpacket;                        // mcu_subsystem_cpu_0_instruction_master_limiter:rsp_src_endofpacket -> mcu_subsystem_cpu_0_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_035_src_valid;                                                                     // cmd_mux_035:src_valid -> bridge_0_s0_burst_adapter:sink0_valid
	wire  [141:0] cmd_mux_035_src_data;                                                                      // cmd_mux_035:src_data -> bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_035_src_ready;                                                                     // bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux_035:src_ready
	wire   [42:0] cmd_mux_035_src_channel;                                                                   // cmd_mux_035:src_channel -> bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_035_src_startofpacket;                                                             // cmd_mux_035:src_startofpacket -> bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                               // cmd_mux_035:src_endofpacket -> bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          bridge_0_s0_burst_adapter_source0_valid;                                                   // bridge_0_s0_burst_adapter:source0_valid -> bridge_0_s0_agent:cp_valid
	wire  [141:0] bridge_0_s0_burst_adapter_source0_data;                                                    // bridge_0_s0_burst_adapter:source0_data -> bridge_0_s0_agent:cp_data
	wire          bridge_0_s0_burst_adapter_source0_ready;                                                   // bridge_0_s0_agent:cp_ready -> bridge_0_s0_burst_adapter:source0_ready
	wire   [42:0] bridge_0_s0_burst_adapter_source0_channel;                                                 // bridge_0_s0_burst_adapter:source0_channel -> bridge_0_s0_agent:cp_channel
	wire          bridge_0_s0_burst_adapter_source0_startofpacket;                                           // bridge_0_s0_burst_adapter:source0_startofpacket -> bridge_0_s0_agent:cp_startofpacket
	wire          bridge_0_s0_burst_adapter_source0_endofpacket;                                             // bridge_0_s0_burst_adapter:source0_endofpacket -> bridge_0_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [141:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [42:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [141:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [42:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [141:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [42:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [141:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [42:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [141:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                      // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [42:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [141:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [42:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [141:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [42:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [141:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [42:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [141:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [42:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [141:0] cmd_demux_src9_data;                                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [42:0] cmd_demux_src9_channel;                                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                     // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [141:0] cmd_demux_src10_data;                                                                      // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                     // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [42:0] cmd_demux_src10_channel;                                                                   // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                             // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                               // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [141:0] cmd_demux_src11_data;                                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [42:0] cmd_demux_src11_channel;                                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [141:0] cmd_demux_src12_data;                                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [42:0] cmd_demux_src12_channel;                                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [141:0] cmd_demux_src13_data;                                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [42:0] cmd_demux_src13_channel;                                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [141:0] cmd_demux_src14_data;                                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [42:0] cmd_demux_src14_channel;                                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                     // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [141:0] cmd_demux_src15_data;                                                                      // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                     // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [42:0] cmd_demux_src15_channel;                                                                   // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                             // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                               // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                     // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [141:0] cmd_demux_src16_data;                                                                      // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                     // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [42:0] cmd_demux_src16_channel;                                                                   // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                             // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                               // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [141:0] cmd_demux_src17_data;                                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [42:0] cmd_demux_src17_channel;                                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [141:0] cmd_demux_src18_data;                                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [42:0] cmd_demux_src18_channel;                                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [141:0] cmd_demux_src19_data;                                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [42:0] cmd_demux_src19_channel;                                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [141:0] cmd_demux_src20_data;                                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [42:0] cmd_demux_src20_channel;                                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                     // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [141:0] cmd_demux_src21_data;                                                                      // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                     // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [42:0] cmd_demux_src21_channel;                                                                   // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                             // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                               // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                                     // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [141:0] cmd_demux_src22_data;                                                                      // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                                     // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [42:0] cmd_demux_src22_channel;                                                                   // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                             // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                               // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                                     // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [141:0] cmd_demux_src23_data;                                                                      // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                                     // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [42:0] cmd_demux_src23_channel;                                                                   // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                             // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                               // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                                     // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [141:0] cmd_demux_src24_data;                                                                      // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                                     // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [42:0] cmd_demux_src24_channel;                                                                   // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                             // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                               // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                                     // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [141:0] cmd_demux_src25_data;                                                                      // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                                     // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [42:0] cmd_demux_src25_channel;                                                                   // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                             // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                               // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                                     // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [141:0] cmd_demux_src26_data;                                                                      // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                                     // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [42:0] cmd_demux_src26_channel;                                                                   // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                             // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                               // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                                     // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire  [141:0] cmd_demux_src27_data;                                                                      // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_src27_ready;                                                                     // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire   [42:0] cmd_demux_src27_channel;                                                                   // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_startofpacket;                                                             // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                               // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                                     // cmd_demux:src28_valid -> cmd_mux_028:sink0_valid
	wire  [141:0] cmd_demux_src28_data;                                                                      // cmd_demux:src28_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_src28_ready;                                                                     // cmd_mux_028:sink0_ready -> cmd_demux:src28_ready
	wire   [42:0] cmd_demux_src28_channel;                                                                   // cmd_demux:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_src28_startofpacket;                                                             // cmd_demux:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                               // cmd_demux:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                                     // cmd_demux:src29_valid -> cmd_mux_029:sink0_valid
	wire  [141:0] cmd_demux_src29_data;                                                                      // cmd_demux:src29_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_src29_ready;                                                                     // cmd_mux_029:sink0_ready -> cmd_demux:src29_ready
	wire   [42:0] cmd_demux_src29_channel;                                                                   // cmd_demux:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_src29_startofpacket;                                                             // cmd_demux:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                               // cmd_demux:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                                     // cmd_demux:src30_valid -> cmd_mux_030:sink0_valid
	wire  [141:0] cmd_demux_src30_data;                                                                      // cmd_demux:src30_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_src30_ready;                                                                     // cmd_mux_030:sink0_ready -> cmd_demux:src30_ready
	wire   [42:0] cmd_demux_src30_channel;                                                                   // cmd_demux:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_src30_startofpacket;                                                             // cmd_demux:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_src30_endofpacket;                                                               // cmd_demux:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                                     // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire  [141:0] cmd_demux_src31_data;                                                                      // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_src31_ready;                                                                     // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire   [42:0] cmd_demux_src31_channel;                                                                   // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_startofpacket;                                                             // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_src31_endofpacket;                                                               // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_src34_valid;                                                                     // cmd_demux:src34_valid -> cmd_mux_034:sink0_valid
	wire  [141:0] cmd_demux_src34_data;                                                                      // cmd_demux:src34_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_src34_ready;                                                                     // cmd_mux_034:sink0_ready -> cmd_demux:src34_ready
	wire   [42:0] cmd_demux_src34_channel;                                                                   // cmd_demux:src34_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_src34_startofpacket;                                                             // cmd_demux:src34_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_src34_endofpacket;                                                               // cmd_demux:src34_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_src35_valid;                                                                     // cmd_demux:src35_valid -> cmd_mux_035:sink0_valid
	wire  [141:0] cmd_demux_src35_data;                                                                      // cmd_demux:src35_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_src35_ready;                                                                     // cmd_mux_035:sink0_ready -> cmd_demux:src35_ready
	wire   [42:0] cmd_demux_src35_channel;                                                                   // cmd_demux:src35_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_src35_startofpacket;                                                             // cmd_demux:src35_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_src35_endofpacket;                                                               // cmd_demux:src35_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_src36_valid;                                                                     // cmd_demux:src36_valid -> cmd_mux_036:sink0_valid
	wire  [141:0] cmd_demux_src36_data;                                                                      // cmd_demux:src36_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_src36_ready;                                                                     // cmd_mux_036:sink0_ready -> cmd_demux:src36_ready
	wire   [42:0] cmd_demux_src36_channel;                                                                   // cmd_demux:src36_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_src36_startofpacket;                                                             // cmd_demux:src36_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_src36_endofpacket;                                                               // cmd_demux:src36_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_src37_valid;                                                                     // cmd_demux:src37_valid -> cmd_mux_037:sink0_valid
	wire  [141:0] cmd_demux_src37_data;                                                                      // cmd_demux:src37_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_src37_ready;                                                                     // cmd_mux_037:sink0_ready -> cmd_demux:src37_ready
	wire   [42:0] cmd_demux_src37_channel;                                                                   // cmd_demux:src37_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_src37_startofpacket;                                                             // cmd_demux:src37_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_src37_endofpacket;                                                               // cmd_demux:src37_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_src38_valid;                                                                     // cmd_demux:src38_valid -> cmd_mux_038:sink0_valid
	wire  [141:0] cmd_demux_src38_data;                                                                      // cmd_demux:src38_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_src38_ready;                                                                     // cmd_mux_038:sink0_ready -> cmd_demux:src38_ready
	wire   [42:0] cmd_demux_src38_channel;                                                                   // cmd_demux:src38_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_src38_startofpacket;                                                             // cmd_demux:src38_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_src38_endofpacket;                                                               // cmd_demux:src38_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_src39_valid;                                                                     // cmd_demux:src39_valid -> cmd_mux_039:sink0_valid
	wire  [141:0] cmd_demux_src39_data;                                                                      // cmd_demux:src39_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_src39_ready;                                                                     // cmd_mux_039:sink0_ready -> cmd_demux:src39_ready
	wire   [42:0] cmd_demux_src39_channel;                                                                   // cmd_demux:src39_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_src39_startofpacket;                                                             // cmd_demux:src39_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_src39_endofpacket;                                                               // cmd_demux:src39_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_src40_valid;                                                                     // cmd_demux:src40_valid -> cmd_mux_040:sink0_valid
	wire  [141:0] cmd_demux_src40_data;                                                                      // cmd_demux:src40_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_src40_ready;                                                                     // cmd_mux_040:sink0_ready -> cmd_demux:src40_ready
	wire   [42:0] cmd_demux_src40_channel;                                                                   // cmd_demux:src40_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_src40_startofpacket;                                                             // cmd_demux:src40_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_src40_endofpacket;                                                               // cmd_demux:src40_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_src41_valid;                                                                     // cmd_demux:src41_valid -> cmd_mux_041:sink0_valid
	wire  [141:0] cmd_demux_src41_data;                                                                      // cmd_demux:src41_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_src41_ready;                                                                     // cmd_mux_041:sink0_ready -> cmd_demux:src41_ready
	wire   [42:0] cmd_demux_src41_channel;                                                                   // cmd_demux:src41_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_src41_startofpacket;                                                             // cmd_demux:src41_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_src41_endofpacket;                                                               // cmd_demux:src41_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_src42_valid;                                                                     // cmd_demux:src42_valid -> cmd_mux_042:sink0_valid
	wire  [141:0] cmd_demux_src42_data;                                                                      // cmd_demux:src42_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_src42_ready;                                                                     // cmd_mux_042:sink0_ready -> cmd_demux:src42_ready
	wire   [42:0] cmd_demux_src42_channel;                                                                   // cmd_demux:src42_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_src42_startofpacket;                                                             // cmd_demux:src42_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_src42_endofpacket;                                                               // cmd_demux:src42_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> cmd_mux_018:sink1_valid
	wire  [141:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                  // cmd_mux_018:sink1_ready -> cmd_demux_001:src0_ready
	wire   [42:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                  // cmd_demux_001:src2_valid -> cmd_mux_034:sink1_valid
	wire  [141:0] cmd_demux_001_src2_data;                                                                   // cmd_demux_001:src2_data -> cmd_mux_034:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                  // cmd_mux_034:sink1_ready -> cmd_demux_001:src2_ready
	wire   [42:0] cmd_demux_001_src2_channel;                                                                // cmd_demux_001:src2_channel -> cmd_mux_034:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_034:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_034:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                  // cmd_demux_001:src3_valid -> cmd_mux_035:sink1_valid
	wire  [141:0] cmd_demux_001_src3_data;                                                                   // cmd_demux_001:src3_data -> cmd_mux_035:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                  // cmd_mux_035:sink1_ready -> cmd_demux_001:src3_ready
	wire   [42:0] cmd_demux_001_src3_channel;                                                                // cmd_demux_001:src3_channel -> cmd_mux_035:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_035:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_035:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                  // cmd_demux_001:src4_valid -> cmd_mux_036:sink1_valid
	wire  [141:0] cmd_demux_001_src4_data;                                                                   // cmd_demux_001:src4_data -> cmd_mux_036:sink1_data
	wire          cmd_demux_001_src4_ready;                                                                  // cmd_mux_036:sink1_ready -> cmd_demux_001:src4_ready
	wire   [42:0] cmd_demux_001_src4_channel;                                                                // cmd_demux_001:src4_channel -> cmd_mux_036:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_036:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_036:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                  // cmd_demux_002:src0_valid -> cmd_mux_035:sink2_valid
	wire  [141:0] cmd_demux_002_src0_data;                                                                   // cmd_demux_002:src0_data -> cmd_mux_035:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                  // cmd_mux_035:sink2_ready -> cmd_demux_002:src0_ready
	wire   [42:0] cmd_demux_002_src0_channel;                                                                // cmd_demux_002:src0_channel -> cmd_mux_035:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                          // cmd_demux_002:src0_startofpacket -> cmd_mux_035:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                            // cmd_demux_002:src0_endofpacket -> cmd_mux_035:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                  // cmd_demux_003:src0_valid -> cmd_mux_035:sink3_valid
	wire  [141:0] cmd_demux_003_src0_data;                                                                   // cmd_demux_003:src0_data -> cmd_mux_035:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                  // cmd_mux_035:sink3_ready -> cmd_demux_003:src0_ready
	wire   [42:0] cmd_demux_003_src0_channel;                                                                // cmd_demux_003:src0_channel -> cmd_mux_035:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                          // cmd_demux_003:src0_startofpacket -> cmd_mux_035:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                            // cmd_demux_003:src0_endofpacket -> cmd_mux_035:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                  // cmd_demux_004:src0_valid -> cmd_mux_035:sink4_valid
	wire  [141:0] cmd_demux_004_src0_data;                                                                   // cmd_demux_004:src0_data -> cmd_mux_035:sink4_data
	wire          cmd_demux_004_src0_ready;                                                                  // cmd_mux_035:sink4_ready -> cmd_demux_004:src0_ready
	wire   [42:0] cmd_demux_004_src0_channel;                                                                // cmd_demux_004:src0_channel -> cmd_mux_035:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                          // cmd_demux_004:src0_startofpacket -> cmd_mux_035:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                            // cmd_demux_004:src0_endofpacket -> cmd_mux_035:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                  // cmd_demux_005:src0_valid -> cmd_mux_035:sink5_valid
	wire  [141:0] cmd_demux_005_src0_data;                                                                   // cmd_demux_005:src0_data -> cmd_mux_035:sink5_data
	wire          cmd_demux_005_src0_ready;                                                                  // cmd_mux_035:sink5_ready -> cmd_demux_005:src0_ready
	wire   [42:0] cmd_demux_005_src0_channel;                                                                // cmd_demux_005:src0_channel -> cmd_mux_035:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                                          // cmd_demux_005:src0_startofpacket -> cmd_mux_035:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                            // cmd_demux_005:src0_endofpacket -> cmd_mux_035:sink5_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                  // cmd_demux_006:src0_valid -> cmd_mux_034:sink2_valid
	wire  [141:0] cmd_demux_006_src0_data;                                                                   // cmd_demux_006:src0_data -> cmd_mux_034:sink2_data
	wire          cmd_demux_006_src0_ready;                                                                  // cmd_mux_034:sink2_ready -> cmd_demux_006:src0_ready
	wire   [42:0] cmd_demux_006_src0_channel;                                                                // cmd_demux_006:src0_channel -> cmd_mux_034:sink2_channel
	wire          cmd_demux_006_src0_startofpacket;                                                          // cmd_demux_006:src0_startofpacket -> cmd_mux_034:sink2_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                            // cmd_demux_006:src0_endofpacket -> cmd_mux_034:sink2_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                  // cmd_demux_007:src0_valid -> cmd_mux_034:sink3_valid
	wire  [141:0] cmd_demux_007_src0_data;                                                                   // cmd_demux_007:src0_data -> cmd_mux_034:sink3_data
	wire          cmd_demux_007_src0_ready;                                                                  // cmd_mux_034:sink3_ready -> cmd_demux_007:src0_ready
	wire   [42:0] cmd_demux_007_src0_channel;                                                                // cmd_demux_007:src0_channel -> cmd_mux_034:sink3_channel
	wire          cmd_demux_007_src0_startofpacket;                                                          // cmd_demux_007:src0_startofpacket -> cmd_mux_034:sink3_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                            // cmd_demux_007:src0_endofpacket -> cmd_mux_034:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [141:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [42:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [141:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [42:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [141:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [42:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [141:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [42:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [141:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                  // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [42:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [141:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [42:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [141:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [42:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [141:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [42:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [141:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [42:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [141:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [42:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                  // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [141:0] rsp_demux_010_src0_data;                                                                   // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                  // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [42:0] rsp_demux_010_src0_channel;                                                                // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                          // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                            // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [141:0] rsp_demux_011_src0_data;                                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [42:0] rsp_demux_011_src0_channel;                                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [141:0] rsp_demux_012_src0_data;                                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [42:0] rsp_demux_012_src0_channel;                                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [141:0] rsp_demux_013_src0_data;                                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [42:0] rsp_demux_013_src0_channel;                                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [141:0] rsp_demux_014_src0_data;                                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [42:0] rsp_demux_014_src0_channel;                                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                  // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [141:0] rsp_demux_015_src0_data;                                                                   // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                  // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [42:0] rsp_demux_015_src0_channel;                                                                // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                          // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                            // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                  // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [141:0] rsp_demux_016_src0_data;                                                                   // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                  // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [42:0] rsp_demux_016_src0_channel;                                                                // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                          // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                            // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [141:0] rsp_demux_017_src0_data;                                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [42:0] rsp_demux_017_src0_channel;                                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [141:0] rsp_demux_018_src0_data;                                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [42:0] rsp_demux_018_src0_channel;                                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                                  // rsp_demux_018:src1_valid -> rsp_mux_001:sink0_valid
	wire  [141:0] rsp_demux_018_src1_data;                                                                   // rsp_demux_018:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_018_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux_018:src1_ready
	wire   [42:0] rsp_demux_018_src1_channel;                                                                // rsp_demux_018:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_018_src1_startofpacket;                                                          // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                            // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [141:0] rsp_demux_019_src0_data;                                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [42:0] rsp_demux_019_src0_channel;                                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [141:0] rsp_demux_020_src0_data;                                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [42:0] rsp_demux_020_src0_channel;                                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                  // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [141:0] rsp_demux_021_src0_data;                                                                   // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                  // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [42:0] rsp_demux_021_src0_channel;                                                                // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                          // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                            // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                  // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [141:0] rsp_demux_022_src0_data;                                                                   // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                                  // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [42:0] rsp_demux_022_src0_channel;                                                                // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                          // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                            // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                  // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [141:0] rsp_demux_023_src0_data;                                                                   // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                                  // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [42:0] rsp_demux_023_src0_channel;                                                                // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                          // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                            // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                  // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [141:0] rsp_demux_024_src0_data;                                                                   // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                                  // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [42:0] rsp_demux_024_src0_channel;                                                                // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                          // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                            // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                  // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [141:0] rsp_demux_025_src0_data;                                                                   // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                                  // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [42:0] rsp_demux_025_src0_channel;                                                                // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                          // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                            // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                  // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [141:0] rsp_demux_026_src0_data;                                                                   // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                                  // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [42:0] rsp_demux_026_src0_channel;                                                                // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                          // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                            // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                                  // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire  [141:0] rsp_demux_027_src0_data;                                                                   // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire          rsp_demux_027_src0_ready;                                                                  // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire   [42:0] rsp_demux_027_src0_channel;                                                                // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                          // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                            // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                                  // rsp_demux_028:src0_valid -> rsp_mux:sink28_valid
	wire  [141:0] rsp_demux_028_src0_data;                                                                   // rsp_demux_028:src0_data -> rsp_mux:sink28_data
	wire          rsp_demux_028_src0_ready;                                                                  // rsp_mux:sink28_ready -> rsp_demux_028:src0_ready
	wire   [42:0] rsp_demux_028_src0_channel;                                                                // rsp_demux_028:src0_channel -> rsp_mux:sink28_channel
	wire          rsp_demux_028_src0_startofpacket;                                                          // rsp_demux_028:src0_startofpacket -> rsp_mux:sink28_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                            // rsp_demux_028:src0_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                                  // rsp_demux_029:src0_valid -> rsp_mux:sink29_valid
	wire  [141:0] rsp_demux_029_src0_data;                                                                   // rsp_demux_029:src0_data -> rsp_mux:sink29_data
	wire          rsp_demux_029_src0_ready;                                                                  // rsp_mux:sink29_ready -> rsp_demux_029:src0_ready
	wire   [42:0] rsp_demux_029_src0_channel;                                                                // rsp_demux_029:src0_channel -> rsp_mux:sink29_channel
	wire          rsp_demux_029_src0_startofpacket;                                                          // rsp_demux_029:src0_startofpacket -> rsp_mux:sink29_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                            // rsp_demux_029:src0_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_030_src0_valid;                                                                  // rsp_demux_030:src0_valid -> rsp_mux:sink30_valid
	wire  [141:0] rsp_demux_030_src0_data;                                                                   // rsp_demux_030:src0_data -> rsp_mux:sink30_data
	wire          rsp_demux_030_src0_ready;                                                                  // rsp_mux:sink30_ready -> rsp_demux_030:src0_ready
	wire   [42:0] rsp_demux_030_src0_channel;                                                                // rsp_demux_030:src0_channel -> rsp_mux:sink30_channel
	wire          rsp_demux_030_src0_startofpacket;                                                          // rsp_demux_030:src0_startofpacket -> rsp_mux:sink30_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                            // rsp_demux_030:src0_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_031_src0_valid;                                                                  // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire  [141:0] rsp_demux_031_src0_data;                                                                   // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire          rsp_demux_031_src0_ready;                                                                  // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire   [42:0] rsp_demux_031_src0_channel;                                                                // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                          // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                            // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          rsp_demux_034_src0_valid;                                                                  // rsp_demux_034:src0_valid -> rsp_mux:sink34_valid
	wire  [141:0] rsp_demux_034_src0_data;                                                                   // rsp_demux_034:src0_data -> rsp_mux:sink34_data
	wire          rsp_demux_034_src0_ready;                                                                  // rsp_mux:sink34_ready -> rsp_demux_034:src0_ready
	wire   [42:0] rsp_demux_034_src0_channel;                                                                // rsp_demux_034:src0_channel -> rsp_mux:sink34_channel
	wire          rsp_demux_034_src0_startofpacket;                                                          // rsp_demux_034:src0_startofpacket -> rsp_mux:sink34_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                            // rsp_demux_034:src0_endofpacket -> rsp_mux:sink34_endofpacket
	wire          rsp_demux_034_src1_valid;                                                                  // rsp_demux_034:src1_valid -> rsp_mux_001:sink2_valid
	wire  [141:0] rsp_demux_034_src1_data;                                                                   // rsp_demux_034:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_034_src1_ready;                                                                  // rsp_mux_001:sink2_ready -> rsp_demux_034:src1_ready
	wire   [42:0] rsp_demux_034_src1_channel;                                                                // rsp_demux_034:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_034_src1_startofpacket;                                                          // rsp_demux_034:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_034_src1_endofpacket;                                                            // rsp_demux_034:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_034_src2_valid;                                                                  // rsp_demux_034:src2_valid -> rsp_mux_006:sink0_valid
	wire  [141:0] rsp_demux_034_src2_data;                                                                   // rsp_demux_034:src2_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_034_src2_ready;                                                                  // rsp_mux_006:sink0_ready -> rsp_demux_034:src2_ready
	wire   [42:0] rsp_demux_034_src2_channel;                                                                // rsp_demux_034:src2_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_034_src2_startofpacket;                                                          // rsp_demux_034:src2_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_034_src2_endofpacket;                                                            // rsp_demux_034:src2_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_034_src3_valid;                                                                  // rsp_demux_034:src3_valid -> rsp_mux_007:sink0_valid
	wire  [141:0] rsp_demux_034_src3_data;                                                                   // rsp_demux_034:src3_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_034_src3_ready;                                                                  // rsp_mux_007:sink0_ready -> rsp_demux_034:src3_ready
	wire   [42:0] rsp_demux_034_src3_channel;                                                                // rsp_demux_034:src3_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_034_src3_startofpacket;                                                          // rsp_demux_034:src3_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_034_src3_endofpacket;                                                            // rsp_demux_034:src3_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_035_src0_valid;                                                                  // rsp_demux_035:src0_valid -> rsp_mux:sink35_valid
	wire  [141:0] rsp_demux_035_src0_data;                                                                   // rsp_demux_035:src0_data -> rsp_mux:sink35_data
	wire          rsp_demux_035_src0_ready;                                                                  // rsp_mux:sink35_ready -> rsp_demux_035:src0_ready
	wire   [42:0] rsp_demux_035_src0_channel;                                                                // rsp_demux_035:src0_channel -> rsp_mux:sink35_channel
	wire          rsp_demux_035_src0_startofpacket;                                                          // rsp_demux_035:src0_startofpacket -> rsp_mux:sink35_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                            // rsp_demux_035:src0_endofpacket -> rsp_mux:sink35_endofpacket
	wire          rsp_demux_035_src1_valid;                                                                  // rsp_demux_035:src1_valid -> rsp_mux_001:sink3_valid
	wire  [141:0] rsp_demux_035_src1_data;                                                                   // rsp_demux_035:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_035_src1_ready;                                                                  // rsp_mux_001:sink3_ready -> rsp_demux_035:src1_ready
	wire   [42:0] rsp_demux_035_src1_channel;                                                                // rsp_demux_035:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_035_src1_startofpacket;                                                          // rsp_demux_035:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_035_src1_endofpacket;                                                            // rsp_demux_035:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_035_src2_valid;                                                                  // rsp_demux_035:src2_valid -> rsp_mux_002:sink0_valid
	wire  [141:0] rsp_demux_035_src2_data;                                                                   // rsp_demux_035:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_035_src2_ready;                                                                  // rsp_mux_002:sink0_ready -> rsp_demux_035:src2_ready
	wire   [42:0] rsp_demux_035_src2_channel;                                                                // rsp_demux_035:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_035_src2_startofpacket;                                                          // rsp_demux_035:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_035_src2_endofpacket;                                                            // rsp_demux_035:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_035_src3_valid;                                                                  // rsp_demux_035:src3_valid -> rsp_mux_003:sink0_valid
	wire  [141:0] rsp_demux_035_src3_data;                                                                   // rsp_demux_035:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_035_src3_ready;                                                                  // rsp_mux_003:sink0_ready -> rsp_demux_035:src3_ready
	wire   [42:0] rsp_demux_035_src3_channel;                                                                // rsp_demux_035:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_035_src3_startofpacket;                                                          // rsp_demux_035:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_035_src3_endofpacket;                                                            // rsp_demux_035:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_035_src4_valid;                                                                  // rsp_demux_035:src4_valid -> rsp_mux_004:sink0_valid
	wire  [141:0] rsp_demux_035_src4_data;                                                                   // rsp_demux_035:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_035_src4_ready;                                                                  // rsp_mux_004:sink0_ready -> rsp_demux_035:src4_ready
	wire   [42:0] rsp_demux_035_src4_channel;                                                                // rsp_demux_035:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_035_src4_startofpacket;                                                          // rsp_demux_035:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_035_src4_endofpacket;                                                            // rsp_demux_035:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_035_src5_valid;                                                                  // rsp_demux_035:src5_valid -> rsp_mux_005:sink0_valid
	wire  [141:0] rsp_demux_035_src5_data;                                                                   // rsp_demux_035:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_035_src5_ready;                                                                  // rsp_mux_005:sink0_ready -> rsp_demux_035:src5_ready
	wire   [42:0] rsp_demux_035_src5_channel;                                                                // rsp_demux_035:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_035_src5_startofpacket;                                                          // rsp_demux_035:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_035_src5_endofpacket;                                                            // rsp_demux_035:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_036_src0_valid;                                                                  // rsp_demux_036:src0_valid -> rsp_mux:sink36_valid
	wire  [141:0] rsp_demux_036_src0_data;                                                                   // rsp_demux_036:src0_data -> rsp_mux:sink36_data
	wire          rsp_demux_036_src0_ready;                                                                  // rsp_mux:sink36_ready -> rsp_demux_036:src0_ready
	wire   [42:0] rsp_demux_036_src0_channel;                                                                // rsp_demux_036:src0_channel -> rsp_mux:sink36_channel
	wire          rsp_demux_036_src0_startofpacket;                                                          // rsp_demux_036:src0_startofpacket -> rsp_mux:sink36_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                            // rsp_demux_036:src0_endofpacket -> rsp_mux:sink36_endofpacket
	wire          rsp_demux_036_src1_valid;                                                                  // rsp_demux_036:src1_valid -> rsp_mux_001:sink4_valid
	wire  [141:0] rsp_demux_036_src1_data;                                                                   // rsp_demux_036:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_036_src1_ready;                                                                  // rsp_mux_001:sink4_ready -> rsp_demux_036:src1_ready
	wire   [42:0] rsp_demux_036_src1_channel;                                                                // rsp_demux_036:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_036_src1_startofpacket;                                                          // rsp_demux_036:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_036_src1_endofpacket;                                                            // rsp_demux_036:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_037_src0_valid;                                                                  // rsp_demux_037:src0_valid -> rsp_mux:sink37_valid
	wire  [141:0] rsp_demux_037_src0_data;                                                                   // rsp_demux_037:src0_data -> rsp_mux:sink37_data
	wire          rsp_demux_037_src0_ready;                                                                  // rsp_mux:sink37_ready -> rsp_demux_037:src0_ready
	wire   [42:0] rsp_demux_037_src0_channel;                                                                // rsp_demux_037:src0_channel -> rsp_mux:sink37_channel
	wire          rsp_demux_037_src0_startofpacket;                                                          // rsp_demux_037:src0_startofpacket -> rsp_mux:sink37_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                            // rsp_demux_037:src0_endofpacket -> rsp_mux:sink37_endofpacket
	wire          rsp_demux_038_src0_valid;                                                                  // rsp_demux_038:src0_valid -> rsp_mux:sink38_valid
	wire  [141:0] rsp_demux_038_src0_data;                                                                   // rsp_demux_038:src0_data -> rsp_mux:sink38_data
	wire          rsp_demux_038_src0_ready;                                                                  // rsp_mux:sink38_ready -> rsp_demux_038:src0_ready
	wire   [42:0] rsp_demux_038_src0_channel;                                                                // rsp_demux_038:src0_channel -> rsp_mux:sink38_channel
	wire          rsp_demux_038_src0_startofpacket;                                                          // rsp_demux_038:src0_startofpacket -> rsp_mux:sink38_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                            // rsp_demux_038:src0_endofpacket -> rsp_mux:sink38_endofpacket
	wire          rsp_demux_039_src0_valid;                                                                  // rsp_demux_039:src0_valid -> rsp_mux:sink39_valid
	wire  [141:0] rsp_demux_039_src0_data;                                                                   // rsp_demux_039:src0_data -> rsp_mux:sink39_data
	wire          rsp_demux_039_src0_ready;                                                                  // rsp_mux:sink39_ready -> rsp_demux_039:src0_ready
	wire   [42:0] rsp_demux_039_src0_channel;                                                                // rsp_demux_039:src0_channel -> rsp_mux:sink39_channel
	wire          rsp_demux_039_src0_startofpacket;                                                          // rsp_demux_039:src0_startofpacket -> rsp_mux:sink39_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                            // rsp_demux_039:src0_endofpacket -> rsp_mux:sink39_endofpacket
	wire          rsp_demux_040_src0_valid;                                                                  // rsp_demux_040:src0_valid -> rsp_mux:sink40_valid
	wire  [141:0] rsp_demux_040_src0_data;                                                                   // rsp_demux_040:src0_data -> rsp_mux:sink40_data
	wire          rsp_demux_040_src0_ready;                                                                  // rsp_mux:sink40_ready -> rsp_demux_040:src0_ready
	wire   [42:0] rsp_demux_040_src0_channel;                                                                // rsp_demux_040:src0_channel -> rsp_mux:sink40_channel
	wire          rsp_demux_040_src0_startofpacket;                                                          // rsp_demux_040:src0_startofpacket -> rsp_mux:sink40_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                            // rsp_demux_040:src0_endofpacket -> rsp_mux:sink40_endofpacket
	wire          rsp_demux_041_src0_valid;                                                                  // rsp_demux_041:src0_valid -> rsp_mux:sink41_valid
	wire  [141:0] rsp_demux_041_src0_data;                                                                   // rsp_demux_041:src0_data -> rsp_mux:sink41_data
	wire          rsp_demux_041_src0_ready;                                                                  // rsp_mux:sink41_ready -> rsp_demux_041:src0_ready
	wire   [42:0] rsp_demux_041_src0_channel;                                                                // rsp_demux_041:src0_channel -> rsp_mux:sink41_channel
	wire          rsp_demux_041_src0_startofpacket;                                                          // rsp_demux_041:src0_startofpacket -> rsp_mux:sink41_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                            // rsp_demux_041:src0_endofpacket -> rsp_mux:sink41_endofpacket
	wire          rsp_demux_042_src0_valid;                                                                  // rsp_demux_042:src0_valid -> rsp_mux:sink42_valid
	wire  [141:0] rsp_demux_042_src0_data;                                                                   // rsp_demux_042:src0_data -> rsp_mux:sink42_data
	wire          rsp_demux_042_src0_ready;                                                                  // rsp_mux:sink42_ready -> rsp_demux_042:src0_ready
	wire   [42:0] rsp_demux_042_src0_channel;                                                                // rsp_demux_042:src0_channel -> rsp_mux:sink42_channel
	wire          rsp_demux_042_src0_startofpacket;                                                          // rsp_demux_042:src0_startofpacket -> rsp_mux:sink42_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                            // rsp_demux_042:src0_endofpacket -> rsp_mux:sink42_endofpacket
	wire          rsp_mux_002_src_valid;                                                                     // rsp_mux_002:src_valid -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_valid
	wire  [141:0] rsp_mux_002_src_data;                                                                      // rsp_mux_002:src_data -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                                     // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire   [42:0] rsp_mux_002_src_channel;                                                                   // rsp_mux_002:src_channel -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                             // rsp_mux_002:src_startofpacket -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                               // rsp_mux_002:src_endofpacket -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid;                                      // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_valid -> ad9680_dma_m_dest_axi_agent:write_rp_valid
	wire  [249:0] ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data;                                       // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_data -> ad9680_dma_m_dest_axi_agent:write_rp_data
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready;                                      // ad9680_dma_m_dest_axi_agent:write_rp_ready -> ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_ready
	wire   [42:0] ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel;                                    // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_channel -> ad9680_dma_m_dest_axi_agent:write_rp_channel
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket;                              // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_startofpacket -> ad9680_dma_m_dest_axi_agent:write_rp_startofpacket
	wire          ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket;                                // ad9680_dma_m_dest_axi_wr_rsp_width_adapter:out_endofpacket -> ad9680_dma_m_dest_axi_agent:write_rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                                     // rsp_mux_003:src_valid -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_valid
	wire  [141:0] rsp_mux_003_src_data;                                                                      // rsp_mux_003:src_data -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_data
	wire          rsp_mux_003_src_ready;                                                                     // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_ready -> rsp_mux_003:src_ready
	wire   [42:0] rsp_mux_003_src_channel;                                                                   // rsp_mux_003:src_channel -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_003_src_startofpacket;                                                             // rsp_mux_003:src_startofpacket -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                               // rsp_mux_003:src_endofpacket -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid;                                      // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_valid -> ad9680_dma_m_dest_axi_agent:read_rp_valid
	wire  [249:0] ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data;                                       // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_data -> ad9680_dma_m_dest_axi_agent:read_rp_data
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready;                                      // ad9680_dma_m_dest_axi_agent:read_rp_ready -> ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_ready
	wire   [42:0] ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel;                                    // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_channel -> ad9680_dma_m_dest_axi_agent:read_rp_channel
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket;                              // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_startofpacket -> ad9680_dma_m_dest_axi_agent:read_rp_startofpacket
	wire          ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket;                                // ad9680_dma_m_dest_axi_rd_rsp_width_adapter:out_endofpacket -> ad9680_dma_m_dest_axi_agent:read_rp_endofpacket
	wire          rsp_mux_004_src_valid;                                                                     // rsp_mux_004:src_valid -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_valid
	wire  [141:0] rsp_mux_004_src_data;                                                                      // rsp_mux_004:src_data -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_data
	wire          rsp_mux_004_src_ready;                                                                     // ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_ready -> rsp_mux_004:src_ready
	wire   [42:0] rsp_mux_004_src_channel;                                                                   // rsp_mux_004:src_channel -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_004_src_startofpacket;                                                             // rsp_mux_004:src_startofpacket -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                               // rsp_mux_004:src_endofpacket -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid;                                       // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_valid -> ad9144_dma_m_src_axi_agent:write_rp_valid
	wire  [249:0] ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data;                                        // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_data -> ad9144_dma_m_src_axi_agent:write_rp_data
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready;                                       // ad9144_dma_m_src_axi_agent:write_rp_ready -> ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_ready
	wire   [42:0] ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel;                                     // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_channel -> ad9144_dma_m_src_axi_agent:write_rp_channel
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket;                               // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_startofpacket -> ad9144_dma_m_src_axi_agent:write_rp_startofpacket
	wire          ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket;                                 // ad9144_dma_m_src_axi_wr_rsp_width_adapter:out_endofpacket -> ad9144_dma_m_src_axi_agent:write_rp_endofpacket
	wire          rsp_mux_005_src_valid;                                                                     // rsp_mux_005:src_valid -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_valid
	wire  [141:0] rsp_mux_005_src_data;                                                                      // rsp_mux_005:src_data -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_data
	wire          rsp_mux_005_src_ready;                                                                     // ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_ready -> rsp_mux_005:src_ready
	wire   [42:0] rsp_mux_005_src_channel;                                                                   // rsp_mux_005:src_channel -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_005_src_startofpacket;                                                             // rsp_mux_005:src_startofpacket -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                               // rsp_mux_005:src_endofpacket -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid;                                       // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_valid -> ad9144_dma_m_src_axi_agent:read_rp_valid
	wire  [249:0] ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data;                                        // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_data -> ad9144_dma_m_src_axi_agent:read_rp_data
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready;                                       // ad9144_dma_m_src_axi_agent:read_rp_ready -> ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_ready
	wire   [42:0] ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel;                                     // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_channel -> ad9144_dma_m_src_axi_agent:read_rp_channel
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket;                               // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_startofpacket -> ad9144_dma_m_src_axi_agent:read_rp_startofpacket
	wire          ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket;                                 // ad9144_dma_m_src_axi_rd_rsp_width_adapter:out_endofpacket -> ad9144_dma_m_src_axi_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                                                      // router_002:src_valid -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_valid
	wire  [249:0] router_002_src_data;                                                                       // router_002:src_data -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                                                      // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_ready -> router_002:src_ready
	wire   [42:0] router_002_src_channel;                                                                    // router_002:src_channel -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid;                                      // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [141:0] ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data;                                       // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready;                                      // cmd_demux_002:sink_ready -> ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_ready
	wire   [42:0] ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel;                                    // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket;                              // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket;                                // ad9680_dma_m_dest_axi_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                                      // router_003:src_valid -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_valid
	wire  [249:0] router_003_src_data;                                                                       // router_003:src_data -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_data
	wire          router_003_src_ready;                                                                      // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_ready -> router_003:src_ready
	wire   [42:0] router_003_src_channel;                                                                    // router_003:src_channel -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:in_endofpacket
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid;                                      // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_valid -> cmd_demux_003:sink_valid
	wire  [141:0] ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data;                                       // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_data -> cmd_demux_003:sink_data
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready;                                      // cmd_demux_003:sink_ready -> ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_ready
	wire   [42:0] ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel;                                    // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_channel -> cmd_demux_003:sink_channel
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket;                              // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket;                                // ad9680_dma_m_dest_axi_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                                                      // router_004:src_valid -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_valid
	wire  [249:0] router_004_src_data;                                                                       // router_004:src_data -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_data
	wire          router_004_src_ready;                                                                      // ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_ready -> router_004:src_ready
	wire   [42:0] router_004_src_channel;                                                                    // router_004:src_channel -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid;                                       // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_valid -> cmd_demux_004:sink_valid
	wire  [141:0] ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data;                                        // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_data -> cmd_demux_004:sink_data
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready;                                       // cmd_demux_004:sink_ready -> ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_ready
	wire   [42:0] ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel;                                     // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_channel -> cmd_demux_004:sink_channel
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket;                               // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket;                                 // ad9144_dma_m_src_axi_wr_cmd_width_adapter:out_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                                      // router_005:src_valid -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_valid
	wire  [249:0] router_005_src_data;                                                                       // router_005:src_data -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_data
	wire          router_005_src_ready;                                                                      // ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_ready -> router_005:src_ready
	wire   [42:0] router_005_src_channel;                                                                    // router_005:src_channel -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:in_endofpacket
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid;                                       // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_valid -> cmd_demux_005:sink_valid
	wire  [141:0] ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data;                                        // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_data -> cmd_demux_005:sink_data
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready;                                       // cmd_demux_005:sink_ready -> ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_ready
	wire   [42:0] ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel;                                     // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_channel -> cmd_demux_005:sink_channel
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket;                               // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket;                                 // ad9144_dma_m_src_axi_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          cmd_demux_src32_valid;                                                                     // cmd_demux:src32_valid -> crosser:in_valid
	wire  [141:0] cmd_demux_src32_data;                                                                      // cmd_demux:src32_data -> crosser:in_data
	wire          cmd_demux_src32_ready;                                                                     // crosser:in_ready -> cmd_demux:src32_ready
	wire   [42:0] cmd_demux_src32_channel;                                                                   // cmd_demux:src32_channel -> crosser:in_channel
	wire          cmd_demux_src32_startofpacket;                                                             // cmd_demux:src32_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src32_endofpacket;                                                               // cmd_demux:src32_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                         // crosser:out_valid -> cmd_mux_032:sink0_valid
	wire  [141:0] crosser_out_data;                                                                          // crosser:out_data -> cmd_mux_032:sink0_data
	wire          crosser_out_ready;                                                                         // cmd_mux_032:sink0_ready -> crosser:out_ready
	wire   [42:0] crosser_out_channel;                                                                       // crosser:out_channel -> cmd_mux_032:sink0_channel
	wire          crosser_out_startofpacket;                                                                 // crosser:out_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                   // crosser:out_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_src33_valid;                                                                     // cmd_demux:src33_valid -> crosser_001:in_valid
	wire  [141:0] cmd_demux_src33_data;                                                                      // cmd_demux:src33_data -> crosser_001:in_data
	wire          cmd_demux_src33_ready;                                                                     // crosser_001:in_ready -> cmd_demux:src33_ready
	wire   [42:0] cmd_demux_src33_channel;                                                                   // cmd_demux:src33_channel -> crosser_001:in_channel
	wire          cmd_demux_src33_startofpacket;                                                             // cmd_demux:src33_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src33_endofpacket;                                                               // cmd_demux:src33_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                     // crosser_001:out_valid -> cmd_mux_033:sink0_valid
	wire  [141:0] crosser_001_out_data;                                                                      // crosser_001:out_data -> cmd_mux_033:sink0_data
	wire          crosser_001_out_ready;                                                                     // cmd_mux_033:sink0_ready -> crosser_001:out_ready
	wire   [42:0] crosser_001_out_channel;                                                                   // crosser_001:out_channel -> cmd_mux_033:sink0_channel
	wire          crosser_001_out_startofpacket;                                                             // crosser_001:out_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                               // crosser_001:out_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> crosser_002:in_valid
	wire  [141:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> crosser_002:in_data
	wire          cmd_demux_001_src1_ready;                                                                  // crosser_002:in_ready -> cmd_demux_001:src1_ready
	wire   [42:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                     // crosser_002:out_valid -> cmd_mux_032:sink1_valid
	wire  [141:0] crosser_002_out_data;                                                                      // crosser_002:out_data -> cmd_mux_032:sink1_data
	wire          crosser_002_out_ready;                                                                     // cmd_mux_032:sink1_ready -> crosser_002:out_ready
	wire   [42:0] crosser_002_out_channel;                                                                   // crosser_002:out_channel -> cmd_mux_032:sink1_channel
	wire          crosser_002_out_startofpacket;                                                             // crosser_002:out_startofpacket -> cmd_mux_032:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                               // crosser_002:out_endofpacket -> cmd_mux_032:sink1_endofpacket
	wire          rsp_demux_032_src0_valid;                                                                  // rsp_demux_032:src0_valid -> crosser_003:in_valid
	wire  [141:0] rsp_demux_032_src0_data;                                                                   // rsp_demux_032:src0_data -> crosser_003:in_data
	wire          rsp_demux_032_src0_ready;                                                                  // crosser_003:in_ready -> rsp_demux_032:src0_ready
	wire   [42:0] rsp_demux_032_src0_channel;                                                                // rsp_demux_032:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_032_src0_startofpacket;                                                          // rsp_demux_032:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                            // rsp_demux_032:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                     // crosser_003:out_valid -> rsp_mux:sink32_valid
	wire  [141:0] crosser_003_out_data;                                                                      // crosser_003:out_data -> rsp_mux:sink32_data
	wire          crosser_003_out_ready;                                                                     // rsp_mux:sink32_ready -> crosser_003:out_ready
	wire   [42:0] crosser_003_out_channel;                                                                   // crosser_003:out_channel -> rsp_mux:sink32_channel
	wire          crosser_003_out_startofpacket;                                                             // crosser_003:out_startofpacket -> rsp_mux:sink32_startofpacket
	wire          crosser_003_out_endofpacket;                                                               // crosser_003:out_endofpacket -> rsp_mux:sink32_endofpacket
	wire          rsp_demux_032_src1_valid;                                                                  // rsp_demux_032:src1_valid -> crosser_004:in_valid
	wire  [141:0] rsp_demux_032_src1_data;                                                                   // rsp_demux_032:src1_data -> crosser_004:in_data
	wire          rsp_demux_032_src1_ready;                                                                  // crosser_004:in_ready -> rsp_demux_032:src1_ready
	wire   [42:0] rsp_demux_032_src1_channel;                                                                // rsp_demux_032:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_032_src1_startofpacket;                                                          // rsp_demux_032:src1_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_032_src1_endofpacket;                                                            // rsp_demux_032:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                     // crosser_004:out_valid -> rsp_mux_001:sink1_valid
	wire  [141:0] crosser_004_out_data;                                                                      // crosser_004:out_data -> rsp_mux_001:sink1_data
	wire          crosser_004_out_ready;                                                                     // rsp_mux_001:sink1_ready -> crosser_004:out_ready
	wire   [42:0] crosser_004_out_channel;                                                                   // crosser_004:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_004_out_startofpacket;                                                             // crosser_004:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                               // crosser_004:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_033_src0_valid;                                                                  // rsp_demux_033:src0_valid -> crosser_005:in_valid
	wire  [141:0] rsp_demux_033_src0_data;                                                                   // rsp_demux_033:src0_data -> crosser_005:in_data
	wire          rsp_demux_033_src0_ready;                                                                  // crosser_005:in_ready -> rsp_demux_033:src0_ready
	wire   [42:0] rsp_demux_033_src0_channel;                                                                // rsp_demux_033:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_033_src0_startofpacket;                                                          // rsp_demux_033:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                            // rsp_demux_033:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                     // crosser_005:out_valid -> rsp_mux:sink33_valid
	wire  [141:0] crosser_005_out_data;                                                                      // crosser_005:out_data -> rsp_mux:sink33_data
	wire          crosser_005_out_ready;                                                                     // rsp_mux:sink33_ready -> crosser_005:out_ready
	wire   [42:0] crosser_005_out_channel;                                                                   // crosser_005:out_channel -> rsp_mux:sink33_channel
	wire          crosser_005_out_startofpacket;                                                             // crosser_005:out_startofpacket -> rsp_mux:sink33_startofpacket
	wire          crosser_005_out_endofpacket;                                                               // crosser_005:out_endofpacket -> rsp_mux:sink33_endofpacket
	wire   [42:0] mcu_subsystem_cpu_0_data_master_limiter_cmd_valid_data;                                    // mcu_subsystem_cpu_0_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [42:0] mcu_subsystem_cpu_0_instruction_master_limiter_cmd_valid_data;                             // mcu_subsystem_cpu_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) mcu_subsystem_cpu_0_data_master_translator (
		.clk                    (clock_in_out_clk_clk),                                                               //   input,   width = 1,                       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1,                     reset.reset
		.uav_address            (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mcu_subsystem_cpu_0_data_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (mcu_subsystem_cpu_0_data_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (mcu_subsystem_cpu_0_data_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mcu_subsystem_cpu_0_data_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mcu_subsystem_cpu_0_data_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mcu_subsystem_cpu_0_data_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mcu_subsystem_cpu_0_data_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mcu_subsystem_cpu_0_data_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mcu_subsystem_cpu_0_data_master_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_burstcount          (1'b1),                                                                               // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                                               // (terminated),                                        
		.uav_clken              (),                                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                                              // (terminated),                                        
		.av_response            (),                                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                    // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) mcu_subsystem_cpu_0_instruction_master_translator (
		.clk                    (clock_in_out_clk_clk),                                                                      //   input,   width = 1,                       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1,                     reset.reset
		.uav_address            (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mcu_subsystem_cpu_0_instruction_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (mcu_subsystem_cpu_0_instruction_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (mcu_subsystem_cpu_0_instruction_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mcu_subsystem_cpu_0_instruction_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mcu_subsystem_cpu_0_instruction_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                      // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                                   // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                      // (terminated),                                        
		.av_write               (1'b0),                                                                                      // (terminated),                                        
		.av_writedata           (32'b00000000000000000000000000000000),                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                                      // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                                      // (terminated),                                        
		.uav_clken              (),                                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                                     // (terminated),                                        
		.av_response            (),                                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                           // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_axi_translator_181_6isav6q #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (128),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) ad9680_dma_m_dest_axi_translator (
		.aclk        (clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.aresetn     (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (ad9680_dma_m_dest_axi_translator_m0_awid),               //  output,    width = 1,        m0.awid
		.m0_awaddr   (ad9680_dma_m_dest_axi_translator_m0_awaddr),             //  output,   width = 32,          .awaddr
		.m0_awlen    (ad9680_dma_m_dest_axi_translator_m0_awlen),              //  output,    width = 8,          .awlen
		.m0_awsize   (ad9680_dma_m_dest_axi_translator_m0_awsize),             //  output,    width = 3,          .awsize
		.m0_awburst  (ad9680_dma_m_dest_axi_translator_m0_awburst),            //  output,    width = 2,          .awburst
		.m0_awlock   (ad9680_dma_m_dest_axi_translator_m0_awlock),             //  output,    width = 1,          .awlock
		.m0_awcache  (ad9680_dma_m_dest_axi_translator_m0_awcache),            //  output,    width = 4,          .awcache
		.m0_awprot   (ad9680_dma_m_dest_axi_translator_m0_awprot),             //  output,    width = 3,          .awprot
		.m0_awuser   (ad9680_dma_m_dest_axi_translator_m0_awuser),             //  output,    width = 1,          .awuser
		.m0_awqos    (ad9680_dma_m_dest_axi_translator_m0_awqos),              //  output,    width = 4,          .awqos
		.m0_awregion (ad9680_dma_m_dest_axi_translator_m0_awregion),           //  output,    width = 4,          .awregion
		.m0_awvalid  (ad9680_dma_m_dest_axi_translator_m0_awvalid),            //  output,    width = 1,          .awvalid
		.m0_awready  (ad9680_dma_m_dest_axi_translator_m0_awready),            //   input,    width = 1,          .awready
		.m0_wdata    (ad9680_dma_m_dest_axi_translator_m0_wdata),              //  output,  width = 128,          .wdata
		.m0_wstrb    (ad9680_dma_m_dest_axi_translator_m0_wstrb),              //  output,   width = 16,          .wstrb
		.m0_wlast    (ad9680_dma_m_dest_axi_translator_m0_wlast),              //  output,    width = 1,          .wlast
		.m0_wvalid   (ad9680_dma_m_dest_axi_translator_m0_wvalid),             //  output,    width = 1,          .wvalid
		.m0_wuser    (ad9680_dma_m_dest_axi_translator_m0_wuser),              //  output,    width = 1,          .wuser
		.m0_wready   (ad9680_dma_m_dest_axi_translator_m0_wready),             //   input,    width = 1,          .wready
		.m0_bid      (ad9680_dma_m_dest_axi_translator_m0_bid),                //   input,    width = 1,          .bid
		.m0_bresp    (ad9680_dma_m_dest_axi_translator_m0_bresp),              //   input,    width = 2,          .bresp
		.m0_buser    (ad9680_dma_m_dest_axi_translator_m0_buser),              //   input,    width = 1,          .buser
		.m0_bvalid   (ad9680_dma_m_dest_axi_translator_m0_bvalid),             //   input,    width = 1,          .bvalid
		.m0_bready   (ad9680_dma_m_dest_axi_translator_m0_bready),             //  output,    width = 1,          .bready
		.m0_arid     (ad9680_dma_m_dest_axi_translator_m0_arid),               //  output,    width = 1,          .arid
		.m0_araddr   (ad9680_dma_m_dest_axi_translator_m0_araddr),             //  output,   width = 32,          .araddr
		.m0_arlen    (ad9680_dma_m_dest_axi_translator_m0_arlen),              //  output,    width = 8,          .arlen
		.m0_arsize   (ad9680_dma_m_dest_axi_translator_m0_arsize),             //  output,    width = 3,          .arsize
		.m0_arburst  (ad9680_dma_m_dest_axi_translator_m0_arburst),            //  output,    width = 2,          .arburst
		.m0_arlock   (ad9680_dma_m_dest_axi_translator_m0_arlock),             //  output,    width = 1,          .arlock
		.m0_arcache  (ad9680_dma_m_dest_axi_translator_m0_arcache),            //  output,    width = 4,          .arcache
		.m0_arprot   (ad9680_dma_m_dest_axi_translator_m0_arprot),             //  output,    width = 3,          .arprot
		.m0_aruser   (ad9680_dma_m_dest_axi_translator_m0_aruser),             //  output,    width = 1,          .aruser
		.m0_arqos    (ad9680_dma_m_dest_axi_translator_m0_arqos),              //  output,    width = 4,          .arqos
		.m0_arregion (ad9680_dma_m_dest_axi_translator_m0_arregion),           //  output,    width = 4,          .arregion
		.m0_arvalid  (ad9680_dma_m_dest_axi_translator_m0_arvalid),            //  output,    width = 1,          .arvalid
		.m0_arready  (ad9680_dma_m_dest_axi_translator_m0_arready),            //   input,    width = 1,          .arready
		.m0_rid      (ad9680_dma_m_dest_axi_translator_m0_rid),                //   input,    width = 1,          .rid
		.m0_rdata    (ad9680_dma_m_dest_axi_translator_m0_rdata),              //   input,  width = 128,          .rdata
		.m0_rresp    (ad9680_dma_m_dest_axi_translator_m0_rresp),              //   input,    width = 2,          .rresp
		.m0_rlast    (ad9680_dma_m_dest_axi_translator_m0_rlast),              //   input,    width = 1,          .rlast
		.m0_rvalid   (ad9680_dma_m_dest_axi_translator_m0_rvalid),             //   input,    width = 1,          .rvalid
		.m0_rready   (ad9680_dma_m_dest_axi_translator_m0_rready),             //  output,    width = 1,          .rready
		.m0_ruser    (ad9680_dma_m_dest_axi_translator_m0_ruser),              //   input,    width = 1,          .ruser
		.s0_awaddr   (ad9680_dma_m_dest_axi_awaddr),                           //   input,   width = 32,        s0.awaddr
		.s0_awlen    (ad9680_dma_m_dest_axi_awlen),                            //   input,    width = 8,          .awlen
		.s0_awsize   (ad9680_dma_m_dest_axi_awsize),                           //   input,    width = 3,          .awsize
		.s0_awburst  (ad9680_dma_m_dest_axi_awburst),                          //   input,    width = 2,          .awburst
		.s0_awcache  (ad9680_dma_m_dest_axi_awcache),                          //   input,    width = 4,          .awcache
		.s0_awprot   (ad9680_dma_m_dest_axi_awprot),                           //   input,    width = 3,          .awprot
		.s0_awvalid  (ad9680_dma_m_dest_axi_awvalid),                          //   input,    width = 1,          .awvalid
		.s0_awready  (ad9680_dma_m_dest_axi_awready),                          //  output,    width = 1,          .awready
		.s0_wdata    (ad9680_dma_m_dest_axi_wdata),                            //   input,  width = 128,          .wdata
		.s0_wstrb    (ad9680_dma_m_dest_axi_wstrb),                            //   input,   width = 16,          .wstrb
		.s0_wlast    (ad9680_dma_m_dest_axi_wlast),                            //   input,    width = 1,          .wlast
		.s0_wvalid   (ad9680_dma_m_dest_axi_wvalid),                           //   input,    width = 1,          .wvalid
		.s0_wready   (ad9680_dma_m_dest_axi_wready),                           //  output,    width = 1,          .wready
		.s0_bresp    (ad9680_dma_m_dest_axi_bresp),                            //  output,    width = 2,          .bresp
		.s0_bvalid   (ad9680_dma_m_dest_axi_bvalid),                           //  output,    width = 1,          .bvalid
		.s0_bready   (ad9680_dma_m_dest_axi_bready),                           //   input,    width = 1,          .bready
		.s0_araddr   (ad9680_dma_m_dest_axi_araddr),                           //   input,   width = 32,          .araddr
		.s0_arlen    (ad9680_dma_m_dest_axi_arlen),                            //   input,    width = 8,          .arlen
		.s0_arsize   (ad9680_dma_m_dest_axi_arsize),                           //   input,    width = 3,          .arsize
		.s0_arburst  (ad9680_dma_m_dest_axi_arburst),                          //   input,    width = 2,          .arburst
		.s0_arcache  (ad9680_dma_m_dest_axi_arcache),                          //   input,    width = 4,          .arcache
		.s0_arprot   (ad9680_dma_m_dest_axi_arprot),                           //   input,    width = 3,          .arprot
		.s0_arvalid  (ad9680_dma_m_dest_axi_arvalid),                          //   input,    width = 1,          .arvalid
		.s0_arready  (ad9680_dma_m_dest_axi_arready),                          //  output,    width = 1,          .arready
		.s0_rdata    (ad9680_dma_m_dest_axi_rdata),                            //  output,  width = 128,          .rdata
		.s0_rresp    (ad9680_dma_m_dest_axi_rresp),                            //  output,    width = 2,          .rresp
		.s0_rvalid   (ad9680_dma_m_dest_axi_rvalid),                           //  output,    width = 1,          .rvalid
		.s0_rready   (ad9680_dma_m_dest_axi_rready),                           //   input,    width = 1,          .rready
		.s0_awid     (1'b0),                                                   // (terminated),                         
		.s0_awlock   (1'b0),                                                   // (terminated),                         
		.s0_awuser   (1'b0),                                                   // (terminated),                         
		.s0_awqos    (4'b0000),                                                // (terminated),                         
		.s0_awregion (4'b0000),                                                // (terminated),                         
		.s0_wuser    (1'b0),                                                   // (terminated),                         
		.s0_bid      (),                                                       // (terminated),                         
		.s0_buser    (),                                                       // (terminated),                         
		.s0_arid     (1'b0),                                                   // (terminated),                         
		.s0_arlock   (1'b0),                                                   // (terminated),                         
		.s0_aruser   (1'b0),                                                   // (terminated),                         
		.s0_arqos    (4'b0000),                                                // (terminated),                         
		.s0_arregion (4'b0000),                                                // (terminated),                         
		.s0_rid      (),                                                       // (terminated),                         
		.s0_rlast    (),                                                       // (terminated),                         
		.s0_ruser    (),                                                       // (terminated),                         
		.s0_wid      (1'b0),                                                   // (terminated),                         
		.s0_ardomain (2'b00),                                                  // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                // (terminated),                         
		.s0_arbar    (2'b00),                                                  // (terminated),                         
		.s0_awdomain (2'b00),                                                  // (terminated),                         
		.s0_awsnoop  (3'b000),                                                 // (terminated),                         
		.s0_awbar    (2'b00),                                                  // (terminated),                         
		.s0_awunique (1'b0),                                                   // (terminated),                         
		.m0_wid      (),                                                       // (terminated),                         
		.m0_ardomain (),                                                       // (terminated),                         
		.m0_arsnoop  (),                                                       // (terminated),                         
		.m0_arbar    (),                                                       // (terminated),                         
		.m0_awdomain (),                                                       // (terminated),                         
		.m0_awsnoop  (),                                                       // (terminated),                         
		.m0_awbar    (),                                                       // (terminated),                         
		.m0_awunique ()                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_axi_translator_181_6isav6q #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (128),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) ad9144_dma_m_src_axi_translator (
		.aclk        (clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.aresetn     (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (ad9144_dma_m_src_axi_translator_m0_awid),                //  output,    width = 1,        m0.awid
		.m0_awaddr   (ad9144_dma_m_src_axi_translator_m0_awaddr),              //  output,   width = 32,          .awaddr
		.m0_awlen    (ad9144_dma_m_src_axi_translator_m0_awlen),               //  output,    width = 8,          .awlen
		.m0_awsize   (ad9144_dma_m_src_axi_translator_m0_awsize),              //  output,    width = 3,          .awsize
		.m0_awburst  (ad9144_dma_m_src_axi_translator_m0_awburst),             //  output,    width = 2,          .awburst
		.m0_awlock   (ad9144_dma_m_src_axi_translator_m0_awlock),              //  output,    width = 1,          .awlock
		.m0_awcache  (ad9144_dma_m_src_axi_translator_m0_awcache),             //  output,    width = 4,          .awcache
		.m0_awprot   (ad9144_dma_m_src_axi_translator_m0_awprot),              //  output,    width = 3,          .awprot
		.m0_awuser   (ad9144_dma_m_src_axi_translator_m0_awuser),              //  output,    width = 1,          .awuser
		.m0_awqos    (ad9144_dma_m_src_axi_translator_m0_awqos),               //  output,    width = 4,          .awqos
		.m0_awregion (ad9144_dma_m_src_axi_translator_m0_awregion),            //  output,    width = 4,          .awregion
		.m0_awvalid  (ad9144_dma_m_src_axi_translator_m0_awvalid),             //  output,    width = 1,          .awvalid
		.m0_awready  (ad9144_dma_m_src_axi_translator_m0_awready),             //   input,    width = 1,          .awready
		.m0_wdata    (ad9144_dma_m_src_axi_translator_m0_wdata),               //  output,  width = 128,          .wdata
		.m0_wstrb    (ad9144_dma_m_src_axi_translator_m0_wstrb),               //  output,   width = 16,          .wstrb
		.m0_wlast    (ad9144_dma_m_src_axi_translator_m0_wlast),               //  output,    width = 1,          .wlast
		.m0_wvalid   (ad9144_dma_m_src_axi_translator_m0_wvalid),              //  output,    width = 1,          .wvalid
		.m0_wuser    (ad9144_dma_m_src_axi_translator_m0_wuser),               //  output,    width = 1,          .wuser
		.m0_wready   (ad9144_dma_m_src_axi_translator_m0_wready),              //   input,    width = 1,          .wready
		.m0_bid      (ad9144_dma_m_src_axi_translator_m0_bid),                 //   input,    width = 1,          .bid
		.m0_bresp    (ad9144_dma_m_src_axi_translator_m0_bresp),               //   input,    width = 2,          .bresp
		.m0_buser    (ad9144_dma_m_src_axi_translator_m0_buser),               //   input,    width = 1,          .buser
		.m0_bvalid   (ad9144_dma_m_src_axi_translator_m0_bvalid),              //   input,    width = 1,          .bvalid
		.m0_bready   (ad9144_dma_m_src_axi_translator_m0_bready),              //  output,    width = 1,          .bready
		.m0_arid     (ad9144_dma_m_src_axi_translator_m0_arid),                //  output,    width = 1,          .arid
		.m0_araddr   (ad9144_dma_m_src_axi_translator_m0_araddr),              //  output,   width = 32,          .araddr
		.m0_arlen    (ad9144_dma_m_src_axi_translator_m0_arlen),               //  output,    width = 8,          .arlen
		.m0_arsize   (ad9144_dma_m_src_axi_translator_m0_arsize),              //  output,    width = 3,          .arsize
		.m0_arburst  (ad9144_dma_m_src_axi_translator_m0_arburst),             //  output,    width = 2,          .arburst
		.m0_arlock   (ad9144_dma_m_src_axi_translator_m0_arlock),              //  output,    width = 1,          .arlock
		.m0_arcache  (ad9144_dma_m_src_axi_translator_m0_arcache),             //  output,    width = 4,          .arcache
		.m0_arprot   (ad9144_dma_m_src_axi_translator_m0_arprot),              //  output,    width = 3,          .arprot
		.m0_aruser   (ad9144_dma_m_src_axi_translator_m0_aruser),              //  output,    width = 1,          .aruser
		.m0_arqos    (ad9144_dma_m_src_axi_translator_m0_arqos),               //  output,    width = 4,          .arqos
		.m0_arregion (ad9144_dma_m_src_axi_translator_m0_arregion),            //  output,    width = 4,          .arregion
		.m0_arvalid  (ad9144_dma_m_src_axi_translator_m0_arvalid),             //  output,    width = 1,          .arvalid
		.m0_arready  (ad9144_dma_m_src_axi_translator_m0_arready),             //   input,    width = 1,          .arready
		.m0_rid      (ad9144_dma_m_src_axi_translator_m0_rid),                 //   input,    width = 1,          .rid
		.m0_rdata    (ad9144_dma_m_src_axi_translator_m0_rdata),               //   input,  width = 128,          .rdata
		.m0_rresp    (ad9144_dma_m_src_axi_translator_m0_rresp),               //   input,    width = 2,          .rresp
		.m0_rlast    (ad9144_dma_m_src_axi_translator_m0_rlast),               //   input,    width = 1,          .rlast
		.m0_rvalid   (ad9144_dma_m_src_axi_translator_m0_rvalid),              //   input,    width = 1,          .rvalid
		.m0_rready   (ad9144_dma_m_src_axi_translator_m0_rready),              //  output,    width = 1,          .rready
		.m0_ruser    (ad9144_dma_m_src_axi_translator_m0_ruser),               //   input,    width = 1,          .ruser
		.s0_awaddr   (ad9144_dma_m_src_axi_awaddr),                            //   input,   width = 32,        s0.awaddr
		.s0_awlen    (ad9144_dma_m_src_axi_awlen),                             //   input,    width = 8,          .awlen
		.s0_awsize   (ad9144_dma_m_src_axi_awsize),                            //   input,    width = 3,          .awsize
		.s0_awburst  (ad9144_dma_m_src_axi_awburst),                           //   input,    width = 2,          .awburst
		.s0_awcache  (ad9144_dma_m_src_axi_awcache),                           //   input,    width = 4,          .awcache
		.s0_awprot   (ad9144_dma_m_src_axi_awprot),                            //   input,    width = 3,          .awprot
		.s0_awvalid  (ad9144_dma_m_src_axi_awvalid),                           //   input,    width = 1,          .awvalid
		.s0_awready  (ad9144_dma_m_src_axi_awready),                           //  output,    width = 1,          .awready
		.s0_wdata    (ad9144_dma_m_src_axi_wdata),                             //   input,  width = 128,          .wdata
		.s0_wstrb    (ad9144_dma_m_src_axi_wstrb),                             //   input,   width = 16,          .wstrb
		.s0_wlast    (ad9144_dma_m_src_axi_wlast),                             //   input,    width = 1,          .wlast
		.s0_wvalid   (ad9144_dma_m_src_axi_wvalid),                            //   input,    width = 1,          .wvalid
		.s0_wready   (ad9144_dma_m_src_axi_wready),                            //  output,    width = 1,          .wready
		.s0_bresp    (ad9144_dma_m_src_axi_bresp),                             //  output,    width = 2,          .bresp
		.s0_bvalid   (ad9144_dma_m_src_axi_bvalid),                            //  output,    width = 1,          .bvalid
		.s0_bready   (ad9144_dma_m_src_axi_bready),                            //   input,    width = 1,          .bready
		.s0_araddr   (ad9144_dma_m_src_axi_araddr),                            //   input,   width = 32,          .araddr
		.s0_arlen    (ad9144_dma_m_src_axi_arlen),                             //   input,    width = 8,          .arlen
		.s0_arsize   (ad9144_dma_m_src_axi_arsize),                            //   input,    width = 3,          .arsize
		.s0_arburst  (ad9144_dma_m_src_axi_arburst),                           //   input,    width = 2,          .arburst
		.s0_arcache  (ad9144_dma_m_src_axi_arcache),                           //   input,    width = 4,          .arcache
		.s0_arprot   (ad9144_dma_m_src_axi_arprot),                            //   input,    width = 3,          .arprot
		.s0_arvalid  (ad9144_dma_m_src_axi_arvalid),                           //   input,    width = 1,          .arvalid
		.s0_arready  (ad9144_dma_m_src_axi_arready),                           //  output,    width = 1,          .arready
		.s0_rdata    (ad9144_dma_m_src_axi_rdata),                             //  output,  width = 128,          .rdata
		.s0_rresp    (ad9144_dma_m_src_axi_rresp),                             //  output,    width = 2,          .rresp
		.s0_rlast    (ad9144_dma_m_src_axi_rlast),                             //  output,    width = 1,          .rlast
		.s0_rvalid   (ad9144_dma_m_src_axi_rvalid),                            //  output,    width = 1,          .rvalid
		.s0_rready   (ad9144_dma_m_src_axi_rready),                            //   input,    width = 1,          .rready
		.s0_awid     (1'b0),                                                   // (terminated),                         
		.s0_awlock   (1'b0),                                                   // (terminated),                         
		.s0_awuser   (1'b0),                                                   // (terminated),                         
		.s0_awqos    (4'b0000),                                                // (terminated),                         
		.s0_awregion (4'b0000),                                                // (terminated),                         
		.s0_wuser    (1'b0),                                                   // (terminated),                         
		.s0_bid      (),                                                       // (terminated),                         
		.s0_buser    (),                                                       // (terminated),                         
		.s0_arid     (1'b0),                                                   // (terminated),                         
		.s0_arlock   (1'b0),                                                   // (terminated),                         
		.s0_aruser   (1'b0),                                                   // (terminated),                         
		.s0_arqos    (4'b0000),                                                // (terminated),                         
		.s0_arregion (4'b0000),                                                // (terminated),                         
		.s0_rid      (),                                                       // (terminated),                         
		.s0_ruser    (),                                                       // (terminated),                         
		.s0_wid      (1'b0),                                                   // (terminated),                         
		.s0_ardomain (2'b00),                                                  // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                // (terminated),                         
		.s0_arbar    (2'b00),                                                  // (terminated),                         
		.s0_awdomain (2'b00),                                                  // (terminated),                         
		.s0_awsnoop  (3'b000),                                                 // (terminated),                         
		.s0_awbar    (2'b00),                                                  // (terminated),                         
		.s0_awunique (1'b0),                                                   // (terminated),                         
		.m0_wid      (),                                                       // (terminated),                         
		.m0_ardomain (),                                                       // (terminated),                         
		.m0_arsnoop  (),                                                       // (terminated),                         
		.m0_arbar    (),                                                       // (terminated),                         
		.m0_awdomain (),                                                       // (terminated),                         
		.m0_awsnoop  (),                                                       // (terminated),                         
		.m0_awbar    (),                                                       // (terminated),                         
		.m0_awunique ()                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) phy_interlaken_1_phy_data_ctrl_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                                                 //   input,   width = 1,                       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1,                     reset.reset
		.uav_address            (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (phy_interlaken_1_phy_data_ctrl_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (phy_interlaken_1_phy_data_ctrl_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (phy_interlaken_1_phy_data_ctrl_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (phy_interlaken_1_phy_data_ctrl_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (phy_interlaken_1_phy_data_ctrl_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (phy_interlaken_1_phy_data_ctrl_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (phy_interlaken_1_phy_data_ctrl_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                                 // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                              // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                 // (terminated),                                        
		.av_lock                (1'b0),                                                                                 // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                                 // (terminated),                                        
		.uav_clken              (),                                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                                // (terminated),                                        
		.av_response            (),                                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                      // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) phy_interlaken_0_phy_data_ctrl_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                                                 //   input,   width = 1,                       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1,                     reset.reset
		.uav_address            (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (phy_interlaken_0_phy_data_ctrl_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (phy_interlaken_0_phy_data_ctrl_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (phy_interlaken_0_phy_data_ctrl_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (phy_interlaken_0_phy_data_ctrl_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (phy_interlaken_0_phy_data_ctrl_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (phy_interlaken_0_phy_data_ctrl_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (phy_interlaken_0_phy_data_ctrl_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                                 // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                              // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                 // (terminated),                                        
		.av_lock                (1'b0),                                                                                 // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                                 // (terminated),                                        
		.uav_clken              (),                                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                                // (terminated),                                        
		.av_response            (),                                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                      // (terminated),                                        
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                 //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                     // (terminated),                                       
		.av_beginbursttransfer  (),                                                     // (terminated),                                       
		.av_burstcount          (),                                                     // (terminated),                                       
		.av_byteenable          (),                                                     // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                 // (terminated),                                       
		.av_writebyteenable     (),                                                     // (terminated),                                       
		.av_lock                (),                                                     // (terminated),                                       
		.av_clken               (),                                                     // (terminated),                                       
		.uav_clken              (1'b0),                                                 // (terminated),                                       
		.av_debugaccess         (),                                                     // (terminated),                                       
		.av_outputenable        (),                                                     // (terminated),                                       
		.uav_response           (),                                                     // (terminated),                                       
		.av_response            (2'b00),                                                // (terminated),                                       
		.uav_writeresponsevalid (),                                                     // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                  // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) i2c_csr_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (i2c_csr_agent_m0_address),                              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (i2c_csr_agent_m0_burstcount),                           //   input,   width = 3,                         .burstcount
		.uav_read               (i2c_csr_agent_m0_read),                                 //   input,   width = 1,                         .read
		.uav_write              (i2c_csr_agent_m0_write),                                //   input,   width = 1,                         .write
		.uav_waitrequest        (i2c_csr_agent_m0_waitrequest),                          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (i2c_csr_agent_m0_readdatavalid),                        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (i2c_csr_agent_m0_byteenable),                           //   input,   width = 4,                         .byteenable
		.uav_readdata           (i2c_csr_agent_m0_readdata),                             //  output,  width = 32,                         .readdata
		.uav_writedata          (i2c_csr_agent_m0_writedata),                            //   input,  width = 32,                         .writedata
		.uav_lock               (i2c_csr_agent_m0_lock),                                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (i2c_csr_agent_m0_debugaccess),                          //   input,   width = 1,                         .debugaccess
		.av_address             (i2c_csr_address),                                       //  output,   width = 4,      avalon_anti_slave_0.address
		.av_write               (i2c_csr_write),                                         //  output,   width = 1,                         .write
		.av_read                (i2c_csr_read),                                          //  output,   width = 1,                         .read
		.av_readdata            (i2c_csr_readdata),                                      //   input,  width = 32,                         .readdata
		.av_writedata           (i2c_csr_writedata),                                     //  output,  width = 32,                         .writedata
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mcu_subsystem_cpu_0_debug_mem_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                       //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mcu_subsystem_cpu_0_debug_mem_slave_address),                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (mcu_subsystem_cpu_0_debug_mem_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (mcu_subsystem_cpu_0_debug_mem_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mcu_subsystem_cpu_0_debug_mem_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mcu_subsystem_cpu_0_debug_mem_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (mcu_subsystem_cpu_0_debug_mem_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (mcu_subsystem_cpu_0_debug_mem_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (mcu_subsystem_cpu_0_debug_mem_slave_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                           // (terminated),                                       
		.av_beginbursttransfer  (),                                                           // (terminated),                                       
		.av_burstcount          (),                                                           // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                           // (terminated),                                       
		.av_lock                (),                                                           // (terminated),                                       
		.av_chipselect          (),                                                           // (terminated),                                       
		.av_clken               (),                                                           // (terminated),                                       
		.uav_clken              (1'b0),                                                       // (terminated),                                       
		.av_outputenable        (),                                                           // (terminated),                                       
		.uav_response           (),                                                           // (terminated),                                       
		.av_response            (2'b00),                                                      // (terminated),                                       
		.uav_writeresponsevalid (),                                                           // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                        // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_lane_pll_reconfig_translator (
		.clk                    (clock_in_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_lane_pll_reconfig_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_lane_pll_reconfig_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_lane_pll_reconfig_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_lane_pll_reconfig_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_lane_pll_reconfig_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_lane_pll_reconfig_write),                  //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_lane_pll_reconfig_read),                   //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_lane_pll_reconfig_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_lane_pll_reconfig_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_lane_pll_reconfig_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_byteenable          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_link_pll_reconfig_translator (
		.clk                    (clock_in_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_link_pll_reconfig_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_link_pll_reconfig_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_link_pll_reconfig_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_link_pll_reconfig_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_link_pll_reconfig_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_link_pll_reconfig_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_link_pll_reconfig_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_link_pll_reconfig_write),                  //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_link_pll_reconfig_read),                   //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_link_pll_reconfig_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_link_pll_reconfig_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_link_pll_reconfig_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_byteenable          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9680_jesd204_link_pll_reconfig_translator (
		.clk                    (clock_in_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,                    reset.reset
		.uav_address            (ad9680_jesd204_link_pll_reconfig_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (ad9680_jesd204_link_pll_reconfig_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (ad9680_jesd204_link_pll_reconfig_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9680_jesd204_link_pll_reconfig_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9680_jesd204_link_pll_reconfig_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (ad9680_jesd204_link_pll_reconfig_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (ad9680_jesd204_link_pll_reconfig_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_link_pll_reconfig_write),                  //  output,   width = 1,                         .write
		.av_read                (ad9680_jesd204_link_pll_reconfig_read),                   //  output,   width = 1,                         .read
		.av_readdata            (ad9680_jesd204_link_pll_reconfig_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (ad9680_jesd204_link_pll_reconfig_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9680_jesd204_link_pll_reconfig_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                        // (terminated),                                       
		.av_beginbursttransfer  (),                                                        // (terminated),                                       
		.av_burstcount          (),                                                        // (terminated),                                       
		.av_byteenable          (),                                                        // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                    // (terminated),                                       
		.av_writebyteenable     (),                                                        // (terminated),                                       
		.av_lock                (),                                                        // (terminated),                                       
		.av_chipselect          (),                                                        // (terminated),                                       
		.av_clken               (),                                                        // (terminated),                                       
		.uav_clken              (1'b0),                                                    // (terminated),                                       
		.av_debugaccess         (),                                                        // (terminated),                                       
		.av_outputenable        (),                                                        // (terminated),                                       
		.uav_response           (),                                                        // (terminated),                                       
		.av_response            (2'b00),                                                   // (terminated),                                       
		.uav_writeresponsevalid (),                                                        // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                     // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) phy_interlaken_0_phy_data_ctrl_csr_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,                    reset.reset
		.uav_address            (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (phy_interlaken_0_phy_data_ctrl_csr_s0_address),                //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write               (phy_interlaken_0_phy_data_ctrl_csr_s0_write),                  //  output,   width = 1,                         .write
		.av_read                (phy_interlaken_0_phy_data_ctrl_csr_s0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (phy_interlaken_0_phy_data_ctrl_csr_s0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (phy_interlaken_0_phy_data_ctrl_csr_s0_writedata),              //  output,  width = 32,                         .writedata
		.av_readdatavalid       (phy_interlaken_0_phy_data_ctrl_csr_s0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (phy_interlaken_0_phy_data_ctrl_csr_s0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_burstcount          (),                                                             // (terminated),                                       
		.av_byteenable          (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_lock                (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_debugaccess         (),                                                             // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) phy_interlaken_1_phy_data_ctrl_csr_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                         //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,                    reset.reset
		.uav_address            (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (phy_interlaken_1_phy_data_ctrl_csr_s0_address),                //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write               (phy_interlaken_1_phy_data_ctrl_csr_s0_write),                  //  output,   width = 1,                         .write
		.av_read                (phy_interlaken_1_phy_data_ctrl_csr_s0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (phy_interlaken_1_phy_data_ctrl_csr_s0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (phy_interlaken_1_phy_data_ctrl_csr_s0_writedata),              //  output,  width = 32,                         .writedata
		.av_readdatavalid       (phy_interlaken_1_phy_data_ctrl_csr_s0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (phy_interlaken_1_phy_data_ctrl_csr_s0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                                             // (terminated),                                       
		.av_burstcount          (),                                                             // (terminated),                                       
		.av_byteenable          (),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                             // (terminated),                                       
		.av_lock                (),                                                             // (terminated),                                       
		.av_chipselect          (),                                                             // (terminated),                                       
		.av_clken               (),                                                             // (terminated),                                       
		.uav_clken              (1'b0),                                                         // (terminated),                                       
		.av_debugaccess         (),                                                             // (terminated),                                       
		.av_outputenable        (),                                                             // (terminated),                                       
		.uav_response           (),                                                             // (terminated),                                       
		.av_response            (2'b00),                                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                          // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_phy_reconfig_0_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_phy_reconfig_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_phy_reconfig_0_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_phy_reconfig_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_phy_reconfig_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_phy_reconfig_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_phy_reconfig_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_phy_reconfig_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_phy_reconfig_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_phy_reconfig_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_phy_reconfig_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_phy_reconfig_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_phy_reconfig_0_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_phy_reconfig_0_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_phy_reconfig_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_phy_reconfig_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_phy_reconfig_0_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_phy_reconfig_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9680_jesd204_phy_reconfig_0_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9680_jesd204_phy_reconfig_0_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_phy_reconfig_0_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9680_jesd204_phy_reconfig_0_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9680_jesd204_phy_reconfig_0_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9680_jesd204_phy_reconfig_0_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_phy_reconfig_0_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_phy_reconfig_0_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9680_jesd204_phy_reconfig_0_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9680_jesd204_phy_reconfig_0_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9680_jesd204_phy_reconfig_0_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9680_jesd204_phy_reconfig_0_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9680_jesd204_phy_reconfig_0_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_phy_reconfig_0_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9680_jesd204_phy_reconfig_0_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9680_jesd204_phy_reconfig_0_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9680_jesd204_phy_reconfig_0_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9680_jesd204_phy_reconfig_0_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_phy_reconfig_1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_phy_reconfig_1_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_phy_reconfig_1_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_phy_reconfig_1_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_phy_reconfig_1_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_phy_reconfig_1_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_phy_reconfig_1_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_phy_reconfig_1_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_phy_reconfig_1_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_phy_reconfig_1_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_phy_reconfig_1_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_phy_reconfig_1_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_phy_reconfig_1_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_phy_reconfig_1_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_phy_reconfig_1_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_phy_reconfig_1_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_phy_reconfig_1_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_phy_reconfig_1_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9680_jesd204_phy_reconfig_1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9680_jesd204_phy_reconfig_1_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_phy_reconfig_1_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9680_jesd204_phy_reconfig_1_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9680_jesd204_phy_reconfig_1_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9680_jesd204_phy_reconfig_1_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_phy_reconfig_1_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_phy_reconfig_1_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9680_jesd204_phy_reconfig_1_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9680_jesd204_phy_reconfig_1_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9680_jesd204_phy_reconfig_1_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9680_jesd204_phy_reconfig_1_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9680_jesd204_phy_reconfig_1_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_phy_reconfig_1_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9680_jesd204_phy_reconfig_1_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9680_jesd204_phy_reconfig_1_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9680_jesd204_phy_reconfig_1_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9680_jesd204_phy_reconfig_1_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_phy_reconfig_2_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_phy_reconfig_2_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_phy_reconfig_2_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_phy_reconfig_2_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_phy_reconfig_2_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_phy_reconfig_2_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_phy_reconfig_2_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_phy_reconfig_2_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_phy_reconfig_2_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_phy_reconfig_2_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_phy_reconfig_2_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_phy_reconfig_2_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_phy_reconfig_2_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_phy_reconfig_2_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_phy_reconfig_2_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_phy_reconfig_2_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_phy_reconfig_2_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_phy_reconfig_2_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9680_jesd204_phy_reconfig_2_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9680_jesd204_phy_reconfig_2_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_phy_reconfig_2_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9680_jesd204_phy_reconfig_2_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9680_jesd204_phy_reconfig_2_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9680_jesd204_phy_reconfig_2_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_phy_reconfig_2_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_phy_reconfig_2_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9680_jesd204_phy_reconfig_2_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9680_jesd204_phy_reconfig_2_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9680_jesd204_phy_reconfig_2_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9680_jesd204_phy_reconfig_2_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9680_jesd204_phy_reconfig_2_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_phy_reconfig_2_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9680_jesd204_phy_reconfig_2_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9680_jesd204_phy_reconfig_2_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9680_jesd204_phy_reconfig_2_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9680_jesd204_phy_reconfig_2_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9144_jesd204_phy_reconfig_3_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9144_jesd204_phy_reconfig_3_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9144_jesd204_phy_reconfig_3_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9144_jesd204_phy_reconfig_3_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9144_jesd204_phy_reconfig_3_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9144_jesd204_phy_reconfig_3_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9144_jesd204_phy_reconfig_3_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9144_jesd204_phy_reconfig_3_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9144_jesd204_phy_reconfig_3_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9144_jesd204_phy_reconfig_3_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9144_jesd204_phy_reconfig_3_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9144_jesd204_phy_reconfig_3_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9144_jesd204_phy_reconfig_3_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9144_jesd204_phy_reconfig_3_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9144_jesd204_phy_reconfig_3_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9144_jesd204_phy_reconfig_3_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9144_jesd204_phy_reconfig_3_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9144_jesd204_phy_reconfig_3_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ad9680_jesd204_phy_reconfig_3_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ad9680_jesd204_phy_reconfig_3_agent_m0_address),        //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ad9680_jesd204_phy_reconfig_3_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (ad9680_jesd204_phy_reconfig_3_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (ad9680_jesd204_phy_reconfig_3_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (ad9680_jesd204_phy_reconfig_3_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ad9680_jesd204_phy_reconfig_3_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ad9680_jesd204_phy_reconfig_3_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ad9680_jesd204_phy_reconfig_3_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (ad9680_jesd204_phy_reconfig_3_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (ad9680_jesd204_phy_reconfig_3_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ad9680_jesd204_phy_reconfig_3_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (ad9680_jesd204_phy_reconfig_3_address),                 //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ad9680_jesd204_phy_reconfig_3_write),                   //  output,   width = 1,                         .write
		.av_read                (ad9680_jesd204_phy_reconfig_3_read),                    //  output,   width = 1,                         .read
		.av_readdata            (ad9680_jesd204_phy_reconfig_3_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (ad9680_jesd204_phy_reconfig_3_writedata),               //  output,  width = 32,                         .writedata
		.av_waitrequest         (ad9680_jesd204_phy_reconfig_3_waitrequest),             //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) bridge_3_s0_translator (
		.clk                    (ddr3_emif_usr_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bridge_3_s0_agent_m0_address),                  //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (bridge_3_s0_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (bridge_3_s0_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (bridge_3_s0_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (bridge_3_s0_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bridge_3_s0_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bridge_3_s0_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (bridge_3_s0_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (bridge_3_s0_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (bridge_3_s0_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (bridge_3_s0_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (bridge_3_s0_address),                           //  output,  width = 27,      avalon_anti_slave_0.address
		.av_write               (bridge_3_s0_write),                             //  output,   width = 1,                         .write
		.av_read                (bridge_3_s0_read),                              //  output,   width = 1,                         .read
		.av_readdata            (bridge_3_s0_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (bridge_3_s0_writedata),                         //  output,  width = 32,                         .writedata
		.av_burstcount          (bridge_3_s0_burstcount),                        //  output,   width = 1,                         .burstcount
		.av_byteenable          (bridge_3_s0_byteenable),                        //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (bridge_3_s0_readdatavalid),                     //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bridge_3_s0_waitrequest),                       //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (bridge_3_s0_debugaccess),                       //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_chipselect          (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) bridge_2_s0_translator (
		.clk                    (iopll_0_outclk0_clk),                           //   input,   width = 1,                      clk.clk
		.reset                  (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bridge_2_s0_agent_m0_address),                  //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (bridge_2_s0_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (bridge_2_s0_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (bridge_2_s0_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (bridge_2_s0_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bridge_2_s0_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bridge_2_s0_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (bridge_2_s0_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (bridge_2_s0_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (bridge_2_s0_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (bridge_2_s0_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (bridge_2_s0_address),                           //  output,   width = 6,      avalon_anti_slave_0.address
		.av_write               (bridge_2_s0_write),                             //  output,   width = 1,                         .write
		.av_read                (bridge_2_s0_read),                              //  output,   width = 1,                         .read
		.av_readdata            (bridge_2_s0_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (bridge_2_s0_writedata),                         //  output,  width = 32,                         .writedata
		.av_burstcount          (bridge_2_s0_burstcount),                        //  output,   width = 1,                         .burstcount
		.av_byteenable          (bridge_2_s0_byteenable),                        //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (bridge_2_s0_readdatavalid),                     //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bridge_2_s0_waitrequest),                       //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (bridge_2_s0_debugaccess),                       //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_chipselect          (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) bridge_1_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bridge_1_s0_agent_m0_address),                          //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (bridge_1_s0_agent_m0_burstcount),                       //   input,   width = 5,                         .burstcount
		.uav_read               (bridge_1_s0_agent_m0_read),                             //   input,   width = 1,                         .read
		.uav_write              (bridge_1_s0_agent_m0_write),                            //   input,   width = 1,                         .write
		.uav_waitrequest        (bridge_1_s0_agent_m0_waitrequest),                      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bridge_1_s0_agent_m0_readdatavalid),                    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bridge_1_s0_agent_m0_byteenable),                       //   input,   width = 4,                         .byteenable
		.uav_readdata           (bridge_1_s0_agent_m0_readdata),                         //  output,  width = 32,                         .readdata
		.uav_writedata          (bridge_1_s0_agent_m0_writedata),                        //   input,  width = 32,                         .writedata
		.uav_lock               (bridge_1_s0_agent_m0_lock),                             //   input,   width = 1,                         .lock
		.uav_debugaccess        (bridge_1_s0_agent_m0_debugaccess),                      //   input,   width = 1,                         .debugaccess
		.av_address             (bridge_1_s0_address),                                   //  output,  width = 12,      avalon_anti_slave_0.address
		.av_write               (bridge_1_s0_write),                                     //  output,   width = 1,                         .write
		.av_read                (bridge_1_s0_read),                                      //  output,   width = 1,                         .read
		.av_readdata            (bridge_1_s0_readdata),                                  //   input,  width = 32,                         .readdata
		.av_writedata           (bridge_1_s0_writedata),                                 //  output,  width = 32,                         .writedata
		.av_burstcount          (bridge_1_s0_burstcount),                                //  output,   width = 3,                         .burstcount
		.av_byteenable          (bridge_1_s0_byteenable),                                //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (bridge_1_s0_readdatavalid),                             //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bridge_1_s0_waitrequest),                               //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (bridge_1_s0_debugaccess),                               //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) bridge_0_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bridge_0_s0_agent_m0_address),                          //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (bridge_0_s0_agent_m0_burstcount),                       //   input,  width = 10,                         .burstcount
		.uav_read               (bridge_0_s0_agent_m0_read),                             //   input,   width = 1,                         .read
		.uav_write              (bridge_0_s0_agent_m0_write),                            //   input,   width = 1,                         .write
		.uav_waitrequest        (bridge_0_s0_agent_m0_waitrequest),                      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bridge_0_s0_agent_m0_readdatavalid),                    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bridge_0_s0_agent_m0_byteenable),                       //   input,   width = 4,                         .byteenable
		.uav_readdata           (bridge_0_s0_agent_m0_readdata),                         //  output,  width = 32,                         .readdata
		.uav_writedata          (bridge_0_s0_agent_m0_writedata),                        //   input,  width = 32,                         .writedata
		.uav_lock               (bridge_0_s0_agent_m0_lock),                             //   input,   width = 1,                         .lock
		.uav_debugaccess        (bridge_0_s0_agent_m0_debugaccess),                      //   input,   width = 1,                         .debugaccess
		.av_address             (bridge_0_s0_address),                                   //  output,  width = 31,      avalon_anti_slave_0.address
		.av_write               (bridge_0_s0_write),                                     //  output,   width = 1,                         .write
		.av_read                (bridge_0_s0_read),                                      //  output,   width = 1,                         .read
		.av_readdata            (bridge_0_s0_readdata),                                  //   input,  width = 32,                         .readdata
		.av_writedata           (bridge_0_s0_writedata),                                 //  output,  width = 32,                         .writedata
		.av_burstcount          (bridge_0_s0_burstcount),                                //  output,   width = 8,                         .burstcount
		.av_byteenable          (bridge_0_s0_byteenable),                                //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (bridge_0_s0_readdatavalid),                             //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bridge_0_s0_waitrequest),                               //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (bridge_0_s0_debugaccess),                               //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mcu_subsystem_ram_0_s1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mcu_subsystem_ram_0_s1_agent_m0_address),               //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mcu_subsystem_ram_0_s1_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (mcu_subsystem_ram_0_s1_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (mcu_subsystem_ram_0_s1_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (mcu_subsystem_ram_0_s1_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mcu_subsystem_ram_0_s1_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mcu_subsystem_ram_0_s1_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (mcu_subsystem_ram_0_s1_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (mcu_subsystem_ram_0_s1_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (mcu_subsystem_ram_0_s1_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (mcu_subsystem_ram_0_s1_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (mcu_subsystem_ram_0_s1_address),                        //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (mcu_subsystem_ram_0_s1_write),                          //  output,   width = 1,                         .write
		.av_readdata            (mcu_subsystem_ram_0_s1_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (mcu_subsystem_ram_0_s1_writedata),                      //  output,  width = 32,                         .writedata
		.av_byteenable          (mcu_subsystem_ram_0_s1_byteenable),                     //  output,   width = 4,                         .byteenable
		.av_chipselect          (mcu_subsystem_ram_0_s1_chipselect),                     //  output,   width = 1,                         .chipselect
		.av_clken               (mcu_subsystem_ram_0_s1_clken),                          //  output,   width = 1,                         .clken
		.av_read                (),                                                      // (terminated),                                       
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) timer_1_s1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (timer_1_s1_agent_m0_address),                           //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (timer_1_s1_agent_m0_burstcount),                        //   input,   width = 3,                         .burstcount
		.uav_read               (timer_1_s1_agent_m0_read),                              //   input,   width = 1,                         .read
		.uav_write              (timer_1_s1_agent_m0_write),                             //   input,   width = 1,                         .write
		.uav_waitrequest        (timer_1_s1_agent_m0_waitrequest),                       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (timer_1_s1_agent_m0_readdatavalid),                     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (timer_1_s1_agent_m0_byteenable),                        //   input,   width = 4,                         .byteenable
		.uav_readdata           (timer_1_s1_agent_m0_readdata),                          //  output,  width = 32,                         .readdata
		.uav_writedata          (timer_1_s1_agent_m0_writedata),                         //   input,  width = 32,                         .writedata
		.uav_lock               (timer_1_s1_agent_m0_lock),                              //   input,   width = 1,                         .lock
		.uav_debugaccess        (timer_1_s1_agent_m0_debugaccess),                       //   input,   width = 1,                         .debugaccess
		.av_address             (timer_1_s1_address),                                    //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (timer_1_s1_write),                                      //  output,   width = 1,                         .write
		.av_readdata            (timer_1_s1_readdata),                                   //   input,  width = 16,                         .readdata
		.av_writedata           (timer_1_s1_writedata),                                  //  output,  width = 16,                         .writedata
		.av_chipselect          (timer_1_s1_chipselect),                                 //  output,   width = 1,                         .chipselect
		.av_read                (),                                                      // (terminated),                                       
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) timer_0_s1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                           //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                        //   input,   width = 3,                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                              //   input,   width = 1,                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                             //   input,   width = 1,                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                        //   input,   width = 4,                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                          //  output,  width = 32,                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                         //   input,  width = 32,                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                              //   input,   width = 1,                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                       //   input,   width = 1,                         .debugaccess
		.av_address             (timer_0_s1_address),                                    //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                      //  output,   width = 1,                         .write
		.av_readdata            (timer_0_s1_readdata),                                   //   input,  width = 16,                         .readdata
		.av_writedata           (timer_0_s1_writedata),                                  //  output,  width = 16,                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                                 //  output,   width = 1,                         .chipselect
		.av_read                (),                                                      // (terminated),                                       
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) gpio_s1_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (gpio_s1_agent_m0_address),                              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (gpio_s1_agent_m0_burstcount),                           //   input,   width = 3,                         .burstcount
		.uav_read               (gpio_s1_agent_m0_read),                                 //   input,   width = 1,                         .read
		.uav_write              (gpio_s1_agent_m0_write),                                //   input,   width = 1,                         .write
		.uav_waitrequest        (gpio_s1_agent_m0_waitrequest),                          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (gpio_s1_agent_m0_readdatavalid),                        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (gpio_s1_agent_m0_byteenable),                           //   input,   width = 4,                         .byteenable
		.uav_readdata           (gpio_s1_agent_m0_readdata),                             //  output,  width = 32,                         .readdata
		.uav_writedata          (gpio_s1_agent_m0_writedata),                            //   input,  width = 32,                         .writedata
		.uav_lock               (gpio_s1_agent_m0_lock),                                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (gpio_s1_agent_m0_debugaccess),                          //   input,   width = 1,                         .debugaccess
		.av_address             (gpio_s1_address),                                       //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (gpio_s1_write),                                         //  output,   width = 1,                         .write
		.av_readdata            (gpio_s1_readdata),                                      //   input,  width = 32,                         .readdata
		.av_writedata           (gpio_s1_writedata),                                     //  output,  width = 32,                         .writedata
		.av_chipselect          (gpio_s1_chipselect),                                    //  output,   width = 1,                         .chipselect
		.av_read                (),                                                      // (terminated),                                       
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) phy_interlaken_0_serial_clock_reconfig_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                             //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,   width = 1,                    reset.reset
		.uav_address            (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (phy_interlaken_0_serial_clock_reconfig_s0_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (phy_interlaken_0_serial_clock_reconfig_s0_write),                  //  output,   width = 1,                         .write
		.av_read                (phy_interlaken_0_serial_clock_reconfig_s0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (phy_interlaken_0_serial_clock_reconfig_s0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (phy_interlaken_0_serial_clock_reconfig_s0_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (phy_interlaken_0_serial_clock_reconfig_s0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                                 // (terminated),                                       
		.av_burstcount          (),                                                                 // (terminated),                                       
		.av_byteenable          (),                                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                                 // (terminated),                                       
		.av_lock                (),                                                                 // (terminated),                                       
		.av_chipselect          (),                                                                 // (terminated),                                       
		.av_clken               (),                                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                                             // (terminated),                                       
		.av_debugaccess         (),                                                                 // (terminated),                                       
		.av_outputenable        (),                                                                 // (terminated),                                       
		.uav_response           (),                                                                 // (terminated),                                       
		.av_response            (2'b00),                                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                              // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) phy_interlaken_1_serial_clock_reconfig_s0_translator (
		.clk                    (clock_in_out_clk_clk),                                             //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,   width = 1,                    reset.reset
		.uav_address            (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (phy_interlaken_1_serial_clock_reconfig_s0_address),                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (phy_interlaken_1_serial_clock_reconfig_s0_write),                  //  output,   width = 1,                         .write
		.av_read                (phy_interlaken_1_serial_clock_reconfig_s0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (phy_interlaken_1_serial_clock_reconfig_s0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (phy_interlaken_1_serial_clock_reconfig_s0_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (phy_interlaken_1_serial_clock_reconfig_s0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                                 // (terminated),                                       
		.av_burstcount          (),                                                                 // (terminated),                                       
		.av_byteenable          (),                                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                                 // (terminated),                                       
		.av_lock                (),                                                                 // (terminated),                                       
		.av_chipselect          (),                                                                 // (terminated),                                       
		.av_clken               (),                                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                                             // (terminated),                                       
		.av_debugaccess         (),                                                                 // (terminated),                                       
		.av_outputenable        (),                                                                 // (terminated),                                       
		.uav_response           (),                                                                 // (terminated),                                       
		.av_response            (2'b00),                                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                              // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) spi_spi_control_port_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (spi_spi_control_port_agent_m0_address),                 //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (spi_spi_control_port_agent_m0_burstcount),              //   input,   width = 3,                         .burstcount
		.uav_read               (spi_spi_control_port_agent_m0_read),                    //   input,   width = 1,                         .read
		.uav_write              (spi_spi_control_port_agent_m0_write),                   //   input,   width = 1,                         .write
		.uav_waitrequest        (spi_spi_control_port_agent_m0_waitrequest),             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (spi_spi_control_port_agent_m0_readdatavalid),           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (spi_spi_control_port_agent_m0_byteenable),              //   input,   width = 4,                         .byteenable
		.uav_readdata           (spi_spi_control_port_agent_m0_readdata),                //  output,  width = 32,                         .readdata
		.uav_writedata          (spi_spi_control_port_agent_m0_writedata),               //   input,  width = 32,                         .writedata
		.uav_lock               (spi_spi_control_port_agent_m0_lock),                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (spi_spi_control_port_agent_m0_debugaccess),             //   input,   width = 1,                         .debugaccess
		.av_address             (spi_spi_control_port_address),                          //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (spi_spi_control_port_write),                            //  output,   width = 1,                         .write
		.av_read                (spi_spi_control_port_read),                             //  output,   width = 1,                         .read
		.av_readdata            (spi_spi_control_port_readdata),                         //   input,  width = 16,                         .readdata
		.av_writedata           (spi_spi_control_port_writedata),                        //  output,  width = 16,                         .writedata
		.av_chipselect          (spi_spi_control_port_chipselect),                       //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (141),
		.PKT_DOMAIN_H              (140),
		.PKT_DOMAIN_L              (139),
		.PKT_SNOOP_H               (138),
		.PKT_SNOOP_L               (135),
		.PKT_BARRIER_H             (134),
		.PKT_BARRIER_L             (133),
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (120),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) mcu_subsystem_cpu_0_data_master_agent (
		.clk                   (clock_in_out_clk_clk),                                                               //   input,    width = 1,       clk.clk
		.reset                 (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.av_address            (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mcu_subsystem_cpu_0_data_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mcu_subsystem_cpu_0_data_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mcu_subsystem_cpu_0_data_master_agent_cp_data),                                      //  output,  width = 142,          .data
		.cp_startofpacket      (mcu_subsystem_cpu_0_data_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mcu_subsystem_cpu_0_data_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mcu_subsystem_cpu_0_data_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_data),                               //   input,  width = 142,          .data
		.rp_channel            (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_channel),                            //   input,   width = 43,          .channel
		.rp_startofpacket      (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                                    // (terminated),                         
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (141),
		.PKT_DOMAIN_H              (140),
		.PKT_DOMAIN_L              (139),
		.PKT_SNOOP_H               (138),
		.PKT_SNOOP_L               (135),
		.PKT_BARRIER_H             (134),
		.PKT_BARRIER_L             (133),
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (120),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) mcu_subsystem_cpu_0_instruction_master_agent (
		.clk                   (clock_in_out_clk_clk),                                                                      //   input,    width = 1,       clk.clk
		.reset                 (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.av_address            (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (mcu_subsystem_cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (mcu_subsystem_cpu_0_instruction_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (mcu_subsystem_cpu_0_instruction_master_agent_cp_data),                                      //  output,  width = 142,          .data
		.cp_startofpacket      (mcu_subsystem_cpu_0_instruction_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (mcu_subsystem_cpu_0_instruction_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (mcu_subsystem_cpu_0_instruction_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_data),                               //   input,  width = 142,          .data
		.rp_channel            (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_channel),                            //   input,   width = 43,          .channel
		.rp_startofpacket      (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                                           // (terminated),                         
	);

	mcu_subsystem_altera_merlin_axi_master_ni_181_dp4ifgy #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (235),
		.PKT_CACHE_L               (232),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (209),
		.PKT_PROTECTION_H          (231),
		.PKT_PROTECTION_L          (229),
		.PKT_BURST_SIZE_H          (206),
		.PKT_BURST_SIZE_L          (204),
		.PKT_BURST_TYPE_H          (208),
		.PKT_BURST_TYPE_L          (207),
		.PKT_RESPONSE_STATUS_L     (236),
		.PKT_RESPONSE_STATUS_H     (237),
		.PKT_BURSTWRAP_H           (203),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (221),
		.PKT_SRC_ID_L              (216),
		.PKT_DEST_ID_H             (227),
		.PKT_DEST_ID_L             (222),
		.PKT_THREAD_ID_H           (228),
		.PKT_THREAD_ID_L           (228),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (215),
		.PKT_ORI_BURST_SIZE_L      (238),
		.PKT_ORI_BURST_SIZE_H      (240),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.PKT_DOMAIN_H              (248),
		.PKT_DOMAIN_L              (247),
		.PKT_SNOOP_H               (246),
		.PKT_SNOOP_L               (243),
		.PKT_BARRIER_H             (242),
		.PKT_BARRIER_L             (241),
		.PKT_WUNIQUE               (249),
		.ST_DATA_W                 (250),
		.ST_CHANNEL_W              (43),
		.ID                        (1),
		.SYNC_RESET                (0)
	) ad9680_dma_m_dest_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                         //   input,    width = 1,              clk.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (ad9680_dma_m_dest_axi_agent_write_cp_valid),                   //  output,    width = 1,         write_cp.valid
		.write_cp_data          (ad9680_dma_m_dest_axi_agent_write_cp_data),                    //  output,  width = 250,                 .data
		.write_cp_startofpacket (ad9680_dma_m_dest_axi_agent_write_cp_startofpacket),           //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (ad9680_dma_m_dest_axi_agent_write_cp_endofpacket),             //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (ad9680_dma_m_dest_axi_agent_write_cp_ready),                   //   input,    width = 1,                 .ready
		.write_rp_valid         (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data),          //   input,  width = 250,                 .data
		.write_rp_channel       (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel),       //   input,   width = 43,                 .channel
		.write_rp_startofpacket (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (ad9680_dma_m_dest_axi_agent_read_cp_valid),                    //  output,    width = 1,          read_cp.valid
		.read_cp_data           (ad9680_dma_m_dest_axi_agent_read_cp_data),                     //  output,  width = 250,                 .data
		.read_cp_startofpacket  (ad9680_dma_m_dest_axi_agent_read_cp_startofpacket),            //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (ad9680_dma_m_dest_axi_agent_read_cp_endofpacket),              //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (ad9680_dma_m_dest_axi_agent_read_cp_ready),                    //   input,    width = 1,                 .ready
		.read_rp_valid          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data),          //   input,  width = 250,                 .data
		.read_rp_channel        (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel),       //   input,   width = 43,                 .channel
		.read_rp_startofpacket  (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (ad9680_dma_m_dest_axi_translator_m0_awid),                     //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (ad9680_dma_m_dest_axi_translator_m0_awaddr),                   //   input,   width = 32,                 .awaddr
		.awlen                  (ad9680_dma_m_dest_axi_translator_m0_awlen),                    //   input,    width = 8,                 .awlen
		.awsize                 (ad9680_dma_m_dest_axi_translator_m0_awsize),                   //   input,    width = 3,                 .awsize
		.awburst                (ad9680_dma_m_dest_axi_translator_m0_awburst),                  //   input,    width = 2,                 .awburst
		.awlock                 (ad9680_dma_m_dest_axi_translator_m0_awlock),                   //   input,    width = 1,                 .awlock
		.awcache                (ad9680_dma_m_dest_axi_translator_m0_awcache),                  //   input,    width = 4,                 .awcache
		.awprot                 (ad9680_dma_m_dest_axi_translator_m0_awprot),                   //   input,    width = 3,                 .awprot
		.awuser                 (ad9680_dma_m_dest_axi_translator_m0_awuser),                   //   input,    width = 1,                 .awuser
		.awqos                  (ad9680_dma_m_dest_axi_translator_m0_awqos),                    //   input,    width = 4,                 .awqos
		.awregion               (ad9680_dma_m_dest_axi_translator_m0_awregion),                 //   input,    width = 4,                 .awregion
		.awvalid                (ad9680_dma_m_dest_axi_translator_m0_awvalid),                  //   input,    width = 1,                 .awvalid
		.awready                (ad9680_dma_m_dest_axi_translator_m0_awready),                  //  output,    width = 1,                 .awready
		.wdata                  (ad9680_dma_m_dest_axi_translator_m0_wdata),                    //   input,  width = 128,                 .wdata
		.wstrb                  (ad9680_dma_m_dest_axi_translator_m0_wstrb),                    //   input,   width = 16,                 .wstrb
		.wlast                  (ad9680_dma_m_dest_axi_translator_m0_wlast),                    //   input,    width = 1,                 .wlast
		.wvalid                 (ad9680_dma_m_dest_axi_translator_m0_wvalid),                   //   input,    width = 1,                 .wvalid
		.wuser                  (ad9680_dma_m_dest_axi_translator_m0_wuser),                    //   input,    width = 1,                 .wuser
		.wready                 (ad9680_dma_m_dest_axi_translator_m0_wready),                   //  output,    width = 1,                 .wready
		.bid                    (ad9680_dma_m_dest_axi_translator_m0_bid),                      //  output,    width = 1,                 .bid
		.bresp                  (ad9680_dma_m_dest_axi_translator_m0_bresp),                    //  output,    width = 2,                 .bresp
		.buser                  (ad9680_dma_m_dest_axi_translator_m0_buser),                    //  output,    width = 1,                 .buser
		.bvalid                 (ad9680_dma_m_dest_axi_translator_m0_bvalid),                   //  output,    width = 1,                 .bvalid
		.bready                 (ad9680_dma_m_dest_axi_translator_m0_bready),                   //   input,    width = 1,                 .bready
		.arid                   (ad9680_dma_m_dest_axi_translator_m0_arid),                     //   input,    width = 1,                 .arid
		.araddr                 (ad9680_dma_m_dest_axi_translator_m0_araddr),                   //   input,   width = 32,                 .araddr
		.arlen                  (ad9680_dma_m_dest_axi_translator_m0_arlen),                    //   input,    width = 8,                 .arlen
		.arsize                 (ad9680_dma_m_dest_axi_translator_m0_arsize),                   //   input,    width = 3,                 .arsize
		.arburst                (ad9680_dma_m_dest_axi_translator_m0_arburst),                  //   input,    width = 2,                 .arburst
		.arlock                 (ad9680_dma_m_dest_axi_translator_m0_arlock),                   //   input,    width = 1,                 .arlock
		.arcache                (ad9680_dma_m_dest_axi_translator_m0_arcache),                  //   input,    width = 4,                 .arcache
		.arprot                 (ad9680_dma_m_dest_axi_translator_m0_arprot),                   //   input,    width = 3,                 .arprot
		.aruser                 (ad9680_dma_m_dest_axi_translator_m0_aruser),                   //   input,    width = 1,                 .aruser
		.arqos                  (ad9680_dma_m_dest_axi_translator_m0_arqos),                    //   input,    width = 4,                 .arqos
		.arregion               (ad9680_dma_m_dest_axi_translator_m0_arregion),                 //   input,    width = 4,                 .arregion
		.arvalid                (ad9680_dma_m_dest_axi_translator_m0_arvalid),                  //   input,    width = 1,                 .arvalid
		.arready                (ad9680_dma_m_dest_axi_translator_m0_arready),                  //  output,    width = 1,                 .arready
		.rid                    (ad9680_dma_m_dest_axi_translator_m0_rid),                      //  output,    width = 1,                 .rid
		.rdata                  (ad9680_dma_m_dest_axi_translator_m0_rdata),                    //  output,  width = 128,                 .rdata
		.rresp                  (ad9680_dma_m_dest_axi_translator_m0_rresp),                    //  output,    width = 2,                 .rresp
		.rlast                  (ad9680_dma_m_dest_axi_translator_m0_rlast),                    //  output,    width = 1,                 .rlast
		.rvalid                 (ad9680_dma_m_dest_axi_translator_m0_rvalid),                   //  output,    width = 1,                 .rvalid
		.rready                 (ad9680_dma_m_dest_axi_translator_m0_rready),                   //   input,    width = 1,                 .rready
		.ruser                  (ad9680_dma_m_dest_axi_translator_m0_ruser),                    //  output,    width = 1,                 .ruser
		.wid                    (1'b0)                                                          // (terminated),                                
	);

	mcu_subsystem_altera_merlin_axi_master_ni_181_dp4ifgy #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (235),
		.PKT_CACHE_L               (232),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (209),
		.PKT_PROTECTION_H          (231),
		.PKT_PROTECTION_L          (229),
		.PKT_BURST_SIZE_H          (206),
		.PKT_BURST_SIZE_L          (204),
		.PKT_BURST_TYPE_H          (208),
		.PKT_BURST_TYPE_L          (207),
		.PKT_RESPONSE_STATUS_L     (236),
		.PKT_RESPONSE_STATUS_H     (237),
		.PKT_BURSTWRAP_H           (203),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (221),
		.PKT_SRC_ID_L              (216),
		.PKT_DEST_ID_H             (227),
		.PKT_DEST_ID_L             (222),
		.PKT_THREAD_ID_H           (228),
		.PKT_THREAD_ID_L           (228),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (215),
		.PKT_ORI_BURST_SIZE_L      (238),
		.PKT_ORI_BURST_SIZE_H      (240),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.PKT_DOMAIN_H              (248),
		.PKT_DOMAIN_L              (247),
		.PKT_SNOOP_H               (246),
		.PKT_SNOOP_L               (243),
		.PKT_BARRIER_H             (242),
		.PKT_BARRIER_L             (241),
		.PKT_WUNIQUE               (249),
		.ST_DATA_W                 (250),
		.ST_CHANNEL_W              (43),
		.ID                        (0),
		.SYNC_RESET                (0)
	) ad9144_dma_m_src_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                        //   input,    width = 1,              clk.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (ad9144_dma_m_src_axi_agent_write_cp_valid),                   //  output,    width = 1,         write_cp.valid
		.write_cp_data          (ad9144_dma_m_src_axi_agent_write_cp_data),                    //  output,  width = 250,                 .data
		.write_cp_startofpacket (ad9144_dma_m_src_axi_agent_write_cp_startofpacket),           //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (ad9144_dma_m_src_axi_agent_write_cp_endofpacket),             //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (ad9144_dma_m_src_axi_agent_write_cp_ready),                   //   input,    width = 1,                 .ready
		.write_rp_valid         (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data),          //   input,  width = 250,                 .data
		.write_rp_channel       (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel),       //   input,   width = 43,                 .channel
		.write_rp_startofpacket (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (ad9144_dma_m_src_axi_agent_read_cp_valid),                    //  output,    width = 1,          read_cp.valid
		.read_cp_data           (ad9144_dma_m_src_axi_agent_read_cp_data),                     //  output,  width = 250,                 .data
		.read_cp_startofpacket  (ad9144_dma_m_src_axi_agent_read_cp_startofpacket),            //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (ad9144_dma_m_src_axi_agent_read_cp_endofpacket),              //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (ad9144_dma_m_src_axi_agent_read_cp_ready),                    //   input,    width = 1,                 .ready
		.read_rp_valid          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data),          //   input,  width = 250,                 .data
		.read_rp_channel        (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel),       //   input,   width = 43,                 .channel
		.read_rp_startofpacket  (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (ad9144_dma_m_src_axi_translator_m0_awid),                     //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (ad9144_dma_m_src_axi_translator_m0_awaddr),                   //   input,   width = 32,                 .awaddr
		.awlen                  (ad9144_dma_m_src_axi_translator_m0_awlen),                    //   input,    width = 8,                 .awlen
		.awsize                 (ad9144_dma_m_src_axi_translator_m0_awsize),                   //   input,    width = 3,                 .awsize
		.awburst                (ad9144_dma_m_src_axi_translator_m0_awburst),                  //   input,    width = 2,                 .awburst
		.awlock                 (ad9144_dma_m_src_axi_translator_m0_awlock),                   //   input,    width = 1,                 .awlock
		.awcache                (ad9144_dma_m_src_axi_translator_m0_awcache),                  //   input,    width = 4,                 .awcache
		.awprot                 (ad9144_dma_m_src_axi_translator_m0_awprot),                   //   input,    width = 3,                 .awprot
		.awuser                 (ad9144_dma_m_src_axi_translator_m0_awuser),                   //   input,    width = 1,                 .awuser
		.awqos                  (ad9144_dma_m_src_axi_translator_m0_awqos),                    //   input,    width = 4,                 .awqos
		.awregion               (ad9144_dma_m_src_axi_translator_m0_awregion),                 //   input,    width = 4,                 .awregion
		.awvalid                (ad9144_dma_m_src_axi_translator_m0_awvalid),                  //   input,    width = 1,                 .awvalid
		.awready                (ad9144_dma_m_src_axi_translator_m0_awready),                  //  output,    width = 1,                 .awready
		.wdata                  (ad9144_dma_m_src_axi_translator_m0_wdata),                    //   input,  width = 128,                 .wdata
		.wstrb                  (ad9144_dma_m_src_axi_translator_m0_wstrb),                    //   input,   width = 16,                 .wstrb
		.wlast                  (ad9144_dma_m_src_axi_translator_m0_wlast),                    //   input,    width = 1,                 .wlast
		.wvalid                 (ad9144_dma_m_src_axi_translator_m0_wvalid),                   //   input,    width = 1,                 .wvalid
		.wuser                  (ad9144_dma_m_src_axi_translator_m0_wuser),                    //   input,    width = 1,                 .wuser
		.wready                 (ad9144_dma_m_src_axi_translator_m0_wready),                   //  output,    width = 1,                 .wready
		.bid                    (ad9144_dma_m_src_axi_translator_m0_bid),                      //  output,    width = 1,                 .bid
		.bresp                  (ad9144_dma_m_src_axi_translator_m0_bresp),                    //  output,    width = 2,                 .bresp
		.buser                  (ad9144_dma_m_src_axi_translator_m0_buser),                    //  output,    width = 1,                 .buser
		.bvalid                 (ad9144_dma_m_src_axi_translator_m0_bvalid),                   //  output,    width = 1,                 .bvalid
		.bready                 (ad9144_dma_m_src_axi_translator_m0_bready),                   //   input,    width = 1,                 .bready
		.arid                   (ad9144_dma_m_src_axi_translator_m0_arid),                     //   input,    width = 1,                 .arid
		.araddr                 (ad9144_dma_m_src_axi_translator_m0_araddr),                   //   input,   width = 32,                 .araddr
		.arlen                  (ad9144_dma_m_src_axi_translator_m0_arlen),                    //   input,    width = 8,                 .arlen
		.arsize                 (ad9144_dma_m_src_axi_translator_m0_arsize),                   //   input,    width = 3,                 .arsize
		.arburst                (ad9144_dma_m_src_axi_translator_m0_arburst),                  //   input,    width = 2,                 .arburst
		.arlock                 (ad9144_dma_m_src_axi_translator_m0_arlock),                   //   input,    width = 1,                 .arlock
		.arcache                (ad9144_dma_m_src_axi_translator_m0_arcache),                  //   input,    width = 4,                 .arcache
		.arprot                 (ad9144_dma_m_src_axi_translator_m0_arprot),                   //   input,    width = 3,                 .arprot
		.aruser                 (ad9144_dma_m_src_axi_translator_m0_aruser),                   //   input,    width = 1,                 .aruser
		.arqos                  (ad9144_dma_m_src_axi_translator_m0_arqos),                    //   input,    width = 4,                 .arqos
		.arregion               (ad9144_dma_m_src_axi_translator_m0_arregion),                 //   input,    width = 4,                 .arregion
		.arvalid                (ad9144_dma_m_src_axi_translator_m0_arvalid),                  //   input,    width = 1,                 .arvalid
		.arready                (ad9144_dma_m_src_axi_translator_m0_arready),                  //  output,    width = 1,                 .arready
		.rid                    (ad9144_dma_m_src_axi_translator_m0_rid),                      //  output,    width = 1,                 .rid
		.rdata                  (ad9144_dma_m_src_axi_translator_m0_rdata),                    //  output,  width = 128,                 .rdata
		.rresp                  (ad9144_dma_m_src_axi_translator_m0_rresp),                    //  output,    width = 2,                 .rresp
		.rlast                  (ad9144_dma_m_src_axi_translator_m0_rlast),                    //  output,    width = 1,                 .rlast
		.rvalid                 (ad9144_dma_m_src_axi_translator_m0_rvalid),                   //  output,    width = 1,                 .rvalid
		.rready                 (ad9144_dma_m_src_axi_translator_m0_rready),                   //   input,    width = 1,                 .rready
		.ruser                  (ad9144_dma_m_src_axi_translator_m0_ruser),                    //  output,    width = 1,                 .ruser
		.wid                    (1'b0)                                                         // (terminated),                                
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (141),
		.PKT_DOMAIN_H              (140),
		.PKT_DOMAIN_L              (139),
		.PKT_SNOOP_H               (138),
		.PKT_SNOOP_L               (135),
		.PKT_BARRIER_H             (134),
		.PKT_BARRIER_L             (133),
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (120),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) phy_interlaken_1_phy_data_ctrl_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                                                 //   input,    width = 1,       clk.clk
		.reset                 (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.av_address            (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (phy_interlaken_1_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_data),                                      //  output,  width = 142,          .data
		.cp_startofpacket      (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                                //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                                 //   input,  width = 142,          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                              //   input,   width = 43,          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                                //  output,    width = 1,          .ready
		.av_response           (),                                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                                      // (terminated),                         
	);

	mcu_subsystem_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (141),
		.PKT_DOMAIN_H              (140),
		.PKT_DOMAIN_L              (139),
		.PKT_SNOOP_H               (138),
		.PKT_SNOOP_L               (135),
		.PKT_BARRIER_H             (134),
		.PKT_BARRIER_L             (133),
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (127),
		.PKT_CACHE_L               (124),
		.PKT_THREAD_ID_H           (120),
		.PKT_THREAD_ID_L           (120),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) phy_interlaken_0_phy_data_ctrl_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                                                 //   input,    width = 1,       clk.clk
		.reset                 (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.av_address            (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (phy_interlaken_0_phy_data_ctrl_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_data),                                      //  output,  width = 142,          .data
		.cp_startofpacket      (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                                //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                                 //   input,  width = 142,          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                              //   input,   width = 43,          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                        //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                          //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                                //  output,    width = 1,          .ready
		.av_response           (),                                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                                      // (terminated),                         
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_fyo6d7i #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9144_jesd204_link_management_agent (
		.aclk                   (clock_in_out_clk_clk),                                        //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                       //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                       //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                        //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                     //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                               //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                 //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                           //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                           //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                            //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                         //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                   //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                     //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9144_jesd204_link_management_agent_read_rp_ready),          //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9144_jesd204_link_management_agent_read_rp_valid),          //  output,    width = 1,                  .valid
		.read_rp_data           (ad9144_jesd204_link_management_agent_read_rp_data),           //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9144_jesd204_link_management_agent_read_rp_startofpacket),  //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9144_jesd204_link_management_agent_read_rp_endofpacket),    //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9144_jesd204_link_management_agent_write_rp_ready),         //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9144_jesd204_link_management_agent_write_rp_valid),         //  output,    width = 1,                  .valid
		.write_rp_data          (ad9144_jesd204_link_management_agent_write_rp_data),          //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9144_jesd204_link_management_agent_write_rp_startofpacket), //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9144_jesd204_link_management_agent_write_rp_endofpacket),   //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9144_jesd204_link_management_awaddr),                       //  output,   width = 12, altera_axi_master.awaddr
		.awprot                 (ad9144_jesd204_link_management_awprot),                       //  output,    width = 3,                  .awprot
		.awvalid                (ad9144_jesd204_link_management_awvalid),                      //  output,    width = 1,                  .awvalid
		.awready                (ad9144_jesd204_link_management_awready),                      //   input,    width = 1,                  .awready
		.wdata                  (ad9144_jesd204_link_management_wdata),                        //  output,   width = 32,                  .wdata
		.wstrb                  (ad9144_jesd204_link_management_wstrb),                        //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9144_jesd204_link_management_wvalid),                       //  output,    width = 1,                  .wvalid
		.wready                 (ad9144_jesd204_link_management_wready),                       //   input,    width = 1,                  .wready
		.bresp                  (ad9144_jesd204_link_management_bresp),                        //   input,    width = 2,                  .bresp
		.bvalid                 (ad9144_jesd204_link_management_bvalid),                       //   input,    width = 1,                  .bvalid
		.bready                 (ad9144_jesd204_link_management_bready),                       //  output,    width = 1,                  .bready
		.araddr                 (ad9144_jesd204_link_management_araddr),                       //  output,   width = 12,                  .araddr
		.arprot                 (ad9144_jesd204_link_management_arprot),                       //  output,    width = 3,                  .arprot
		.arvalid                (ad9144_jesd204_link_management_arvalid),                      //  output,    width = 1,                  .arvalid
		.arready                (ad9144_jesd204_link_management_arready),                      //   input,    width = 1,                  .arready
		.rdata                  (ad9144_jesd204_link_management_rdata),                        //   input,   width = 32,                  .rdata
		.rresp                  (ad9144_jesd204_link_management_rresp),                        //   input,    width = 2,                  .rresp
		.rvalid                 (ad9144_jesd204_link_management_rvalid),                       //   input,    width = 1,                  .rvalid
		.rready                 (ad9144_jesd204_link_management_rready)                        //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_7lka3aa #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9680_jesd204_link_management_agent (
		.aclk                   (clock_in_out_clk_clk),                                        //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_003_src_valid),                                       //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_003_src_ready),                                       //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_003_src_data),                                        //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_003_src_channel),                                     //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_003_src_startofpacket),                               //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_003_src_endofpacket),                                 //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_002_src_ready),                                       //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_002_src_valid),                                       //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_002_src_data),                                        //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_002_src_channel),                                     //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_002_src_startofpacket),                               //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_002_src_endofpacket),                                 //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9680_jesd204_link_management_agent_read_rp_ready),          //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9680_jesd204_link_management_agent_read_rp_valid),          //  output,    width = 1,                  .valid
		.read_rp_data           (ad9680_jesd204_link_management_agent_read_rp_data),           //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9680_jesd204_link_management_agent_read_rp_startofpacket),  //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9680_jesd204_link_management_agent_read_rp_endofpacket),    //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9680_jesd204_link_management_agent_write_rp_ready),         //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9680_jesd204_link_management_agent_write_rp_valid),         //  output,    width = 1,                  .valid
		.write_rp_data          (ad9680_jesd204_link_management_agent_write_rp_data),          //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9680_jesd204_link_management_agent_write_rp_startofpacket), //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9680_jesd204_link_management_agent_write_rp_endofpacket),   //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9680_jesd204_link_management_awaddr),                       //  output,   width = 12, altera_axi_master.awaddr
		.awprot                 (ad9680_jesd204_link_management_awprot),                       //  output,    width = 3,                  .awprot
		.awvalid                (ad9680_jesd204_link_management_awvalid),                      //  output,    width = 1,                  .awvalid
		.awready                (ad9680_jesd204_link_management_awready),                      //   input,    width = 1,                  .awready
		.wdata                  (ad9680_jesd204_link_management_wdata),                        //  output,   width = 32,                  .wdata
		.wstrb                  (ad9680_jesd204_link_management_wstrb),                        //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9680_jesd204_link_management_wvalid),                       //  output,    width = 1,                  .wvalid
		.wready                 (ad9680_jesd204_link_management_wready),                       //   input,    width = 1,                  .wready
		.bresp                  (ad9680_jesd204_link_management_bresp),                        //   input,    width = 2,                  .bresp
		.bvalid                 (ad9680_jesd204_link_management_bvalid),                       //   input,    width = 1,                  .bvalid
		.bready                 (ad9680_jesd204_link_management_bready),                       //  output,    width = 1,                  .bready
		.araddr                 (ad9680_jesd204_link_management_araddr),                       //  output,   width = 12,                  .araddr
		.arprot                 (ad9680_jesd204_link_management_arprot),                       //  output,    width = 3,                  .arprot
		.arvalid                (ad9680_jesd204_link_management_arvalid),                      //  output,    width = 1,                  .arvalid
		.arready                (ad9680_jesd204_link_management_arready),                      //   input,    width = 1,                  .arready
		.rdata                  (ad9680_jesd204_link_management_rdata),                        //   input,   width = 32,                  .rdata
		.rresp                  (ad9680_jesd204_link_management_rresp),                        //   input,    width = 2,                  .rresp
		.rvalid                 (ad9680_jesd204_link_management_rvalid),                       //   input,    width = 1,                  .rvalid
		.rready                 (ad9680_jesd204_link_management_rready)                        //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_tlwagwa #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9144_jesd204_link_reconfig_agent (
		.aclk                   (clock_in_out_clk_clk),                                      //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_005_src_valid),                                     //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_005_src_ready),                                     //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_005_src_data),                                      //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_005_src_channel),                                   //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_005_src_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_005_src_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_004_src_ready),                                     //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_004_src_valid),                                     //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_004_src_data),                                      //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_004_src_channel),                                   //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_004_src_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_004_src_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9144_jesd204_link_reconfig_agent_read_rp_ready),          //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9144_jesd204_link_reconfig_agent_read_rp_valid),          //  output,    width = 1,                  .valid
		.read_rp_data           (ad9144_jesd204_link_reconfig_agent_read_rp_data),           //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket),  //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket),    //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9144_jesd204_link_reconfig_agent_write_rp_ready),         //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9144_jesd204_link_reconfig_agent_write_rp_valid),         //  output,    width = 1,                  .valid
		.write_rp_data          (ad9144_jesd204_link_reconfig_agent_write_rp_data),          //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket), //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket),   //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9144_jesd204_link_reconfig_awaddr),                       //  output,   width = 14, altera_axi_master.awaddr
		.awprot                 (ad9144_jesd204_link_reconfig_awprot),                       //  output,    width = 3,                  .awprot
		.awvalid                (ad9144_jesd204_link_reconfig_awvalid),                      //  output,    width = 1,                  .awvalid
		.awready                (ad9144_jesd204_link_reconfig_awready),                      //   input,    width = 1,                  .awready
		.wdata                  (ad9144_jesd204_link_reconfig_wdata),                        //  output,   width = 32,                  .wdata
		.wstrb                  (ad9144_jesd204_link_reconfig_wstrb),                        //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9144_jesd204_link_reconfig_wvalid),                       //  output,    width = 1,                  .wvalid
		.wready                 (ad9144_jesd204_link_reconfig_wready),                       //   input,    width = 1,                  .wready
		.bresp                  (ad9144_jesd204_link_reconfig_bresp),                        //   input,    width = 2,                  .bresp
		.bvalid                 (ad9144_jesd204_link_reconfig_bvalid),                       //   input,    width = 1,                  .bvalid
		.bready                 (ad9144_jesd204_link_reconfig_bready),                       //  output,    width = 1,                  .bready
		.araddr                 (ad9144_jesd204_link_reconfig_araddr),                       //  output,   width = 14,                  .araddr
		.arprot                 (ad9144_jesd204_link_reconfig_arprot),                       //  output,    width = 3,                  .arprot
		.arvalid                (ad9144_jesd204_link_reconfig_arvalid),                      //  output,    width = 1,                  .arvalid
		.arready                (ad9144_jesd204_link_reconfig_arready),                      //   input,    width = 1,                  .arready
		.rdata                  (ad9144_jesd204_link_reconfig_rdata),                        //   input,   width = 32,                  .rdata
		.rresp                  (ad9144_jesd204_link_reconfig_rresp),                        //   input,    width = 2,                  .rresp
		.rvalid                 (ad9144_jesd204_link_reconfig_rvalid),                       //   input,    width = 1,                  .rvalid
		.rready                 (ad9144_jesd204_link_reconfig_rready)                        //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_v67ngsq #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (14),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9680_jesd204_link_reconfig_agent (
		.aclk                   (clock_in_out_clk_clk),                                      //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_007_src_valid),                                     //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_007_src_ready),                                     //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_007_src_data),                                      //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_007_src_channel),                                   //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_007_src_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_007_src_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_006_src_ready),                                     //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_006_src_valid),                                     //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_006_src_data),                                      //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_006_src_channel),                                   //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_006_src_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_006_src_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9680_jesd204_link_reconfig_agent_read_rp_ready),          //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9680_jesd204_link_reconfig_agent_read_rp_valid),          //  output,    width = 1,                  .valid
		.read_rp_data           (ad9680_jesd204_link_reconfig_agent_read_rp_data),           //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket),  //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket),    //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9680_jesd204_link_reconfig_agent_write_rp_ready),         //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9680_jesd204_link_reconfig_agent_write_rp_valid),         //  output,    width = 1,                  .valid
		.write_rp_data          (ad9680_jesd204_link_reconfig_agent_write_rp_data),          //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket), //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket),   //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9680_jesd204_link_reconfig_awaddr),                       //  output,   width = 14, altera_axi_master.awaddr
		.awprot                 (ad9680_jesd204_link_reconfig_awprot),                       //  output,    width = 3,                  .awprot
		.awvalid                (ad9680_jesd204_link_reconfig_awvalid),                      //  output,    width = 1,                  .awvalid
		.awready                (ad9680_jesd204_link_reconfig_awready),                      //   input,    width = 1,                  .awready
		.wdata                  (ad9680_jesd204_link_reconfig_wdata),                        //  output,   width = 32,                  .wdata
		.wstrb                  (ad9680_jesd204_link_reconfig_wstrb),                        //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9680_jesd204_link_reconfig_wvalid),                       //  output,    width = 1,                  .wvalid
		.wready                 (ad9680_jesd204_link_reconfig_wready),                       //   input,    width = 1,                  .wready
		.bresp                  (ad9680_jesd204_link_reconfig_bresp),                        //   input,    width = 2,                  .bresp
		.bvalid                 (ad9680_jesd204_link_reconfig_bvalid),                       //   input,    width = 1,                  .bvalid
		.bready                 (ad9680_jesd204_link_reconfig_bready),                       //  output,    width = 1,                  .bready
		.araddr                 (ad9680_jesd204_link_reconfig_araddr),                       //  output,   width = 14,                  .araddr
		.arprot                 (ad9680_jesd204_link_reconfig_arprot),                       //  output,    width = 3,                  .arprot
		.arvalid                (ad9680_jesd204_link_reconfig_arvalid),                      //  output,    width = 1,                  .arvalid
		.arready                (ad9680_jesd204_link_reconfig_arready),                      //   input,    width = 1,                  .arready
		.rdata                  (ad9680_jesd204_link_reconfig_rdata),                        //   input,   width = 32,                  .rdata
		.rresp                  (ad9680_jesd204_link_reconfig_rresp),                        //   input,    width = 2,                  .rresp
		.rvalid                 (ad9680_jesd204_link_reconfig_rvalid),                       //   input,    width = 1,                  .rvalid
		.rready                 (ad9680_jesd204_link_reconfig_rready)                        //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_mk2vf4y #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9144_core_s_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_009_src_valid),                                  //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_009_src_ready),                                  //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_009_src_data),                                   //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_009_src_channel),                                //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_009_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_009_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_008_src_ready),                                  //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_008_src_valid),                                  //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_008_src_data),                                   //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_008_src_channel),                                //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_008_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_008_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9144_core_s_axi_agent_read_rp_ready),                  //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9144_core_s_axi_agent_read_rp_valid),                  //  output,    width = 1,                  .valid
		.read_rp_data           (ad9144_core_s_axi_agent_read_rp_data),                   //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9144_core_s_axi_agent_read_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9144_core_s_axi_agent_read_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9144_core_s_axi_agent_write_rp_ready),                 //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9144_core_s_axi_agent_write_rp_valid),                 //  output,    width = 1,                  .valid
		.write_rp_data          (ad9144_core_s_axi_agent_write_rp_data),                  //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9144_core_s_axi_agent_write_rp_startofpacket),         //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9144_core_s_axi_agent_write_rp_endofpacket),           //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9144_core_s_axi_awaddr),                               //  output,   width = 16, altera_axi_master.awaddr
		.awprot                 (ad9144_core_s_axi_awprot),                               //  output,    width = 3,                  .awprot
		.awvalid                (ad9144_core_s_axi_awvalid),                              //  output,    width = 1,                  .awvalid
		.awready                (ad9144_core_s_axi_awready),                              //   input,    width = 1,                  .awready
		.wdata                  (ad9144_core_s_axi_wdata),                                //  output,   width = 32,                  .wdata
		.wstrb                  (ad9144_core_s_axi_wstrb),                                //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9144_core_s_axi_wvalid),                               //  output,    width = 1,                  .wvalid
		.wready                 (ad9144_core_s_axi_wready),                               //   input,    width = 1,                  .wready
		.bresp                  (ad9144_core_s_axi_bresp),                                //   input,    width = 2,                  .bresp
		.bvalid                 (ad9144_core_s_axi_bvalid),                               //   input,    width = 1,                  .bvalid
		.bready                 (ad9144_core_s_axi_bready),                               //  output,    width = 1,                  .bready
		.araddr                 (ad9144_core_s_axi_araddr),                               //  output,   width = 16,                  .araddr
		.arprot                 (ad9144_core_s_axi_arprot),                               //  output,    width = 3,                  .arprot
		.arvalid                (ad9144_core_s_axi_arvalid),                              //  output,    width = 1,                  .arvalid
		.arready                (ad9144_core_s_axi_arready),                              //   input,    width = 1,                  .arready
		.rdata                  (ad9144_core_s_axi_rdata),                                //   input,   width = 32,                  .rdata
		.rresp                  (ad9144_core_s_axi_rresp),                                //   input,    width = 2,                  .rresp
		.rvalid                 (ad9144_core_s_axi_rvalid),                               //   input,    width = 1,                  .rvalid
		.rready                 (ad9144_core_s_axi_rready)                                //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_p3ywq7i #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9144_dma_s_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_011_src_valid),                                  //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_011_src_ready),                                  //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_011_src_data),                                   //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_011_src_channel),                                //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_011_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_011_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_010_src_ready),                                  //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_010_src_valid),                                  //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_010_src_data),                                   //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_010_src_channel),                                //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_010_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_010_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9144_dma_s_axi_agent_read_rp_ready),                   //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9144_dma_s_axi_agent_read_rp_valid),                   //  output,    width = 1,                  .valid
		.read_rp_data           (ad9144_dma_s_axi_agent_read_rp_data),                    //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9144_dma_s_axi_agent_read_rp_startofpacket),           //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9144_dma_s_axi_agent_read_rp_endofpacket),             //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9144_dma_s_axi_agent_write_rp_ready),                  //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9144_dma_s_axi_agent_write_rp_valid),                  //  output,    width = 1,                  .valid
		.write_rp_data          (ad9144_dma_s_axi_agent_write_rp_data),                   //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9144_dma_s_axi_agent_write_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9144_dma_s_axi_agent_write_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9144_dma_s_axi_awaddr),                                //  output,   width = 12, altera_axi_master.awaddr
		.awprot                 (ad9144_dma_s_axi_awprot),                                //  output,    width = 3,                  .awprot
		.awvalid                (ad9144_dma_s_axi_awvalid),                               //  output,    width = 1,                  .awvalid
		.awready                (ad9144_dma_s_axi_awready),                               //   input,    width = 1,                  .awready
		.wdata                  (ad9144_dma_s_axi_wdata),                                 //  output,   width = 32,                  .wdata
		.wstrb                  (ad9144_dma_s_axi_wstrb),                                 //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9144_dma_s_axi_wvalid),                                //  output,    width = 1,                  .wvalid
		.wready                 (ad9144_dma_s_axi_wready),                                //   input,    width = 1,                  .wready
		.bresp                  (ad9144_dma_s_axi_bresp),                                 //   input,    width = 2,                  .bresp
		.bvalid                 (ad9144_dma_s_axi_bvalid),                                //   input,    width = 1,                  .bvalid
		.bready                 (ad9144_dma_s_axi_bready),                                //  output,    width = 1,                  .bready
		.araddr                 (ad9144_dma_s_axi_araddr),                                //  output,   width = 12,                  .araddr
		.arprot                 (ad9144_dma_s_axi_arprot),                                //  output,    width = 3,                  .arprot
		.arvalid                (ad9144_dma_s_axi_arvalid),                               //  output,    width = 1,                  .arvalid
		.arready                (ad9144_dma_s_axi_arready),                               //   input,    width = 1,                  .arready
		.rdata                  (ad9144_dma_s_axi_rdata),                                 //   input,   width = 32,                  .rdata
		.rresp                  (ad9144_dma_s_axi_rresp),                                 //   input,    width = 2,                  .rresp
		.rvalid                 (ad9144_dma_s_axi_rvalid),                                //   input,    width = 1,                  .rvalid
		.rready                 (ad9144_dma_s_axi_rready)                                 //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_4ujcyeq #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (12),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9680_dma_s_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_013_src_valid),                                  //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_013_src_ready),                                  //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_013_src_data),                                   //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_013_src_channel),                                //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_013_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_013_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_012_src_ready),                                  //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_012_src_valid),                                  //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_012_src_data),                                   //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_012_src_channel),                                //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_012_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_012_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9680_dma_s_axi_agent_read_rp_ready),                   //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9680_dma_s_axi_agent_read_rp_valid),                   //  output,    width = 1,                  .valid
		.read_rp_data           (ad9680_dma_s_axi_agent_read_rp_data),                    //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9680_dma_s_axi_agent_read_rp_startofpacket),           //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9680_dma_s_axi_agent_read_rp_endofpacket),             //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9680_dma_s_axi_agent_write_rp_ready),                  //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9680_dma_s_axi_agent_write_rp_valid),                  //  output,    width = 1,                  .valid
		.write_rp_data          (ad9680_dma_s_axi_agent_write_rp_data),                   //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9680_dma_s_axi_agent_write_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9680_dma_s_axi_agent_write_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9680_dma_s_axi_awaddr),                                //  output,   width = 12, altera_axi_master.awaddr
		.awprot                 (ad9680_dma_s_axi_awprot),                                //  output,    width = 3,                  .awprot
		.awvalid                (ad9680_dma_s_axi_awvalid),                               //  output,    width = 1,                  .awvalid
		.awready                (ad9680_dma_s_axi_awready),                               //   input,    width = 1,                  .awready
		.wdata                  (ad9680_dma_s_axi_wdata),                                 //  output,   width = 32,                  .wdata
		.wstrb                  (ad9680_dma_s_axi_wstrb),                                 //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9680_dma_s_axi_wvalid),                                //  output,    width = 1,                  .wvalid
		.wready                 (ad9680_dma_s_axi_wready),                                //   input,    width = 1,                  .wready
		.bresp                  (ad9680_dma_s_axi_bresp),                                 //   input,    width = 2,                  .bresp
		.bvalid                 (ad9680_dma_s_axi_bvalid),                                //   input,    width = 1,                  .bvalid
		.bready                 (ad9680_dma_s_axi_bready),                                //  output,    width = 1,                  .bready
		.araddr                 (ad9680_dma_s_axi_araddr),                                //  output,   width = 12,                  .araddr
		.arprot                 (ad9680_dma_s_axi_arprot),                                //  output,    width = 3,                  .arprot
		.arvalid                (ad9680_dma_s_axi_arvalid),                               //  output,    width = 1,                  .arvalid
		.arready                (ad9680_dma_s_axi_arready),                               //   input,    width = 1,                  .arready
		.rdata                  (ad9680_dma_s_axi_rdata),                                 //   input,   width = 32,                  .rdata
		.rresp                  (ad9680_dma_s_axi_rresp),                                 //   input,    width = 2,                  .rresp
		.rvalid                 (ad9680_dma_s_axi_rvalid),                                //   input,    width = 1,                  .rvalid
		.rready                 (ad9680_dma_s_axi_rready)                                 //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_axi_slave_ni_181_ajixmti #(
		.PKT_QOS_H                   (107),
		.PKT_QOS_L                   (104),
		.PKT_THREAD_ID_H             (120),
		.PKT_THREAD_ID_L             (120),
		.PKT_RESPONSE_STATUS_H       (129),
		.PKT_RESPONSE_STATUS_L       (128),
		.PKT_BEGIN_BURST             (103),
		.PKT_CACHE_H                 (127),
		.PKT_CACHE_L                 (124),
		.PKT_DATA_SIDEBAND_H         (102),
		.PKT_DATA_SIDEBAND_L         (102),
		.PKT_ADDR_SIDEBAND_H         (101),
		.PKT_ADDR_SIDEBAND_L         (101),
		.PKT_BURST_TYPE_H            (100),
		.PKT_BURST_TYPE_L            (99),
		.PKT_PROTECTION_H            (123),
		.PKT_PROTECTION_L            (121),
		.PKT_BURST_SIZE_H            (98),
		.PKT_BURST_SIZE_L            (96),
		.PKT_BURSTWRAP_H             (95),
		.PKT_BURSTWRAP_L             (87),
		.PKT_BYTE_CNT_H              (86),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (113),
		.PKT_SRC_ID_L                (108),
		.PKT_DEST_ID_H               (119),
		.PKT_DEST_ID_L               (114),
		.PKT_ORI_BURST_SIZE_L        (130),
		.PKT_ORI_BURST_SIZE_H        (132),
		.PKT_DOMAIN_L                (139),
		.PKT_DOMAIN_H                (140),
		.PKT_SNOOP_L                 (135),
		.PKT_SNOOP_H                 (138),
		.PKT_BARRIER_L               (133),
		.PKT_BARRIER_H               (134),
		.PKT_WUNIQUE                 (141),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (142),
		.ADDR_WIDTH                  (16),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (43),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (0)
	) ad9680_core_s_axi_agent (
		.aclk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,        clock_sink.clk
		.aresetn                (~mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_015_src_valid),                                  //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_015_src_ready),                                  //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_015_src_data),                                   //   input,  width = 142,                  .data
		.read_cp_channel        (cmd_mux_015_src_channel),                                //   input,   width = 43,                  .channel
		.read_cp_startofpacket  (cmd_mux_015_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_015_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_014_src_ready),                                  //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_014_src_valid),                                  //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_014_src_data),                                   //   input,  width = 142,                  .data
		.write_cp_channel       (cmd_mux_014_src_channel),                                //   input,   width = 43,                  .channel
		.write_cp_startofpacket (cmd_mux_014_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_014_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ad9680_core_s_axi_agent_read_rp_ready),                  //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ad9680_core_s_axi_agent_read_rp_valid),                  //  output,    width = 1,                  .valid
		.read_rp_data           (ad9680_core_s_axi_agent_read_rp_data),                   //  output,  width = 142,                  .data
		.read_rp_startofpacket  (ad9680_core_s_axi_agent_read_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ad9680_core_s_axi_agent_read_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ad9680_core_s_axi_agent_write_rp_ready),                 //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ad9680_core_s_axi_agent_write_rp_valid),                 //  output,    width = 1,                  .valid
		.write_rp_data          (ad9680_core_s_axi_agent_write_rp_data),                  //  output,  width = 142,                  .data
		.write_rp_startofpacket (ad9680_core_s_axi_agent_write_rp_startofpacket),         //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ad9680_core_s_axi_agent_write_rp_endofpacket),           //  output,    width = 1,                  .endofpacket
		.awaddr                 (ad9680_core_s_axi_awaddr),                               //  output,   width = 16, altera_axi_master.awaddr
		.awprot                 (ad9680_core_s_axi_awprot),                               //  output,    width = 3,                  .awprot
		.awvalid                (ad9680_core_s_axi_awvalid),                              //  output,    width = 1,                  .awvalid
		.awready                (ad9680_core_s_axi_awready),                              //   input,    width = 1,                  .awready
		.wdata                  (ad9680_core_s_axi_wdata),                                //  output,   width = 32,                  .wdata
		.wstrb                  (ad9680_core_s_axi_wstrb),                                //  output,    width = 4,                  .wstrb
		.wvalid                 (ad9680_core_s_axi_wvalid),                               //  output,    width = 1,                  .wvalid
		.wready                 (ad9680_core_s_axi_wready),                               //   input,    width = 1,                  .wready
		.bresp                  (ad9680_core_s_axi_bresp),                                //   input,    width = 2,                  .bresp
		.bvalid                 (ad9680_core_s_axi_bvalid),                               //   input,    width = 1,                  .bvalid
		.bready                 (ad9680_core_s_axi_bready),                               //  output,    width = 1,                  .bready
		.araddr                 (ad9680_core_s_axi_araddr),                               //  output,   width = 16,                  .araddr
		.arprot                 (ad9680_core_s_axi_arprot),                               //  output,    width = 3,                  .arprot
		.arvalid                (ad9680_core_s_axi_arvalid),                              //  output,    width = 1,                  .arvalid
		.arready                (ad9680_core_s_axi_arready),                              //   input,    width = 1,                  .arready
		.rdata                  (ad9680_core_s_axi_rdata),                                //   input,   width = 32,                  .rdata
		.rresp                  (ad9680_core_s_axi_rresp),                                //   input,    width = 2,                  .rresp
		.rvalid                 (ad9680_core_s_axi_rvalid),                               //   input,    width = 1,                  .rvalid
		.rready                 (ad9680_core_s_axi_rready)                                //  output,    width = 1,                  .rready
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_016_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),            //   input,   width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) i2c_csr_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (i2c_csr_agent_m0_address),                              //  output,   width = 32,              m0.address
		.m0_burstcount           (i2c_csr_agent_m0_burstcount),                           //  output,    width = 3,                .burstcount
		.m0_byteenable           (i2c_csr_agent_m0_byteenable),                           //  output,    width = 4,                .byteenable
		.m0_debugaccess          (i2c_csr_agent_m0_debugaccess),                          //  output,    width = 1,                .debugaccess
		.m0_lock                 (i2c_csr_agent_m0_lock),                                 //  output,    width = 1,                .lock
		.m0_readdata             (i2c_csr_agent_m0_readdata),                             //   input,   width = 32,                .readdata
		.m0_readdatavalid        (i2c_csr_agent_m0_readdatavalid),                        //   input,    width = 1,                .readdatavalid
		.m0_read                 (i2c_csr_agent_m0_read),                                 //  output,    width = 1,                .read
		.m0_waitrequest          (i2c_csr_agent_m0_waitrequest),                          //   input,    width = 1,                .waitrequest
		.m0_writedata            (i2c_csr_agent_m0_writedata),                            //  output,   width = 32,                .writedata
		.m0_write                (i2c_csr_agent_m0_write),                                //  output,    width = 1,                .write
		.rp_endofpacket          (i2c_csr_agent_rp_endofpacket),                          //  output,    width = 1,              rp.endofpacket
		.rp_ready                (i2c_csr_agent_rp_ready),                                //   input,    width = 1,                .ready
		.rp_valid                (i2c_csr_agent_rp_valid),                                //  output,    width = 1,                .valid
		.rp_data                 (i2c_csr_agent_rp_data),                                 //  output,  width = 142,                .data
		.rp_startofpacket        (i2c_csr_agent_rp_startofpacket),                        //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_017_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (i2c_csr_agent_rsp_fifo_out_ready),                      //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (i2c_csr_agent_rsp_fifo_out_valid),                      //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (i2c_csr_agent_rsp_fifo_out_startofpacket),              //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (i2c_csr_agent_rsp_fifo_out_endofpacket),                //   input,    width = 1,                .endofpacket
		.rf_sink_data            (i2c_csr_agent_rsp_fifo_out_data),                       //   input,  width = 143,                .data
		.rf_source_ready         (i2c_csr_agent_rf_source_ready),                         //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (i2c_csr_agent_rf_source_valid),                         //  output,    width = 1,                .valid
		.rf_source_startofpacket (i2c_csr_agent_rf_source_startofpacket),                 //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (i2c_csr_agent_rf_source_endofpacket),                   //  output,    width = 1,                .endofpacket
		.rf_source_data          (i2c_csr_agent_rf_source_data),                          //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (i2c_csr_agent_rdata_fifo_out_ready),                    //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (i2c_csr_agent_rdata_fifo_out_valid),                    //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (i2c_csr_agent_rdata_fifo_out_data),                     //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (i2c_csr_agent_rdata_fifo_src_ready),                    //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_csr_agent_rdata_fifo_src_valid),                    //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (i2c_csr_agent_rdata_fifo_src_data),                     //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) i2c_csr_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (i2c_csr_agent_rf_source_data),                          //   input,  width = 143,        in.data
		.in_valid          (i2c_csr_agent_rf_source_valid),                         //   input,    width = 1,          .valid
		.in_ready          (i2c_csr_agent_rf_source_ready),                         //  output,    width = 1,          .ready
		.in_startofpacket  (i2c_csr_agent_rf_source_startofpacket),                 //   input,    width = 1,          .startofpacket
		.in_endofpacket    (i2c_csr_agent_rf_source_endofpacket),                   //   input,    width = 1,          .endofpacket
		.out_data          (i2c_csr_agent_rsp_fifo_out_data),                       //  output,  width = 143,       out.data
		.out_valid         (i2c_csr_agent_rsp_fifo_out_valid),                      //  output,    width = 1,          .valid
		.out_ready         (i2c_csr_agent_rsp_fifo_out_ready),                      //   input,    width = 1,          .ready
		.out_startofpacket (i2c_csr_agent_rsp_fifo_out_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (i2c_csr_agent_rsp_fifo_out_endofpacket),                //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) i2c_csr_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (i2c_csr_agent_rdata_fifo_src_data),                     //   input,  width = 34,        in.data
		.in_valid          (i2c_csr_agent_rdata_fifo_src_valid),                    //   input,   width = 1,          .valid
		.in_ready          (i2c_csr_agent_rdata_fifo_src_ready),                    //  output,   width = 1,          .ready
		.out_data          (i2c_csr_agent_rdata_fifo_out_data),                     //  output,  width = 34,       out.data
		.out_valid         (i2c_csr_agent_rdata_fifo_out_valid),                    //  output,   width = 1,          .valid
		.out_ready         (i2c_csr_agent_rdata_fifo_out_ready),                    //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mcu_subsystem_cpu_0_debug_mem_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                                 //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (mcu_subsystem_cpu_0_debug_mem_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                                //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                                //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_018_src_data),                                                 //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                        //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                          //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                              //   input,   width = 43,                .channel
		.rf_sink_ready           (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                  // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mcu_subsystem_cpu_0_debug_mem_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated),                         
		.csr_read          (1'b0),                                                                 // (terminated),                         
		.csr_write         (1'b0),                                                                 // (terminated),                         
		.csr_readdata      (),                                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated),                         
		.almost_full_data  (),                                                                     // (terminated),                         
		.almost_empty_data (),                                                                     // (terminated),                         
		.in_empty          (1'b0),                                                                 // (terminated),                         
		.out_empty         (),                                                                     // (terminated),                         
		.in_error          (1'b0),                                                                 // (terminated),                         
		.out_error         (),                                                                     // (terminated),                         
		.in_channel        (1'b0),                                                                 // (terminated),                         
		.out_channel       ()                                                                      // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,   width = 1, clk_reset.reset
		.in_data           (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                          // (terminated),                        
		.csr_read          (1'b0),                                                           // (terminated),                        
		.csr_write         (1'b0),                                                           // (terminated),                        
		.csr_readdata      (),                                                               // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                        
		.almost_full_data  (),                                                               // (terminated),                        
		.almost_empty_data (),                                                               // (terminated),                        
		.in_startofpacket  (1'b0),                                                           // (terminated),                        
		.in_endofpacket    (1'b0),                                                           // (terminated),                        
		.out_startofpacket (),                                                               // (terminated),                        
		.out_endofpacket   (),                                                               // (terminated),                        
		.in_empty          (1'b0),                                                           // (terminated),                        
		.out_empty         (),                                                               // (terminated),                        
		.in_error          (1'b0),                                                           // (terminated),                        
		.out_error         (),                                                               // (terminated),                        
		.in_channel        (1'b0),                                                           // (terminated),                        
		.out_channel       ()                                                                // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_lane_pll_reconfig_agent (
		.clk                     (clock_in_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_lane_pll_reconfig_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_lane_pll_reconfig_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_lane_pll_reconfig_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_lane_pll_reconfig_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_lane_pll_reconfig_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_lane_pll_reconfig_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_lane_pll_reconfig_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_lane_pll_reconfig_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_lane_pll_reconfig_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_lane_pll_reconfig_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_lane_pll_reconfig_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_lane_pll_reconfig_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_lane_pll_reconfig_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_019_src_data),                                              //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                           //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_lane_pll_reconfig_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                       // (terminated),                        
		.csr_read          (1'b0),                                                        // (terminated),                        
		.csr_write         (1'b0),                                                        // (terminated),                        
		.csr_readdata      (),                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                        
		.almost_full_data  (),                                                            // (terminated),                        
		.almost_empty_data (),                                                            // (terminated),                        
		.in_startofpacket  (1'b0),                                                        // (terminated),                        
		.in_endofpacket    (1'b0),                                                        // (terminated),                        
		.out_startofpacket (),                                                            // (terminated),                        
		.out_endofpacket   (),                                                            // (terminated),                        
		.in_empty          (1'b0),                                                        // (terminated),                        
		.out_empty         (),                                                            // (terminated),                        
		.in_error          (1'b0),                                                        // (terminated),                        
		.out_error         (),                                                            // (terminated),                        
		.in_channel        (1'b0),                                                        // (terminated),                        
		.out_channel       ()                                                             // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_link_pll_reconfig_agent (
		.clk                     (clock_in_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_link_pll_reconfig_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_link_pll_reconfig_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_link_pll_reconfig_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_link_pll_reconfig_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_link_pll_reconfig_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_link_pll_reconfig_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_link_pll_reconfig_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_link_pll_reconfig_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_link_pll_reconfig_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_link_pll_reconfig_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_link_pll_reconfig_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_link_pll_reconfig_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_link_pll_reconfig_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_link_pll_reconfig_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_020_src_data),                                              //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                           //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_link_pll_reconfig_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_link_pll_reconfig_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                       // (terminated),                        
		.csr_read          (1'b0),                                                        // (terminated),                        
		.csr_write         (1'b0),                                                        // (terminated),                        
		.csr_readdata      (),                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                        
		.almost_full_data  (),                                                            // (terminated),                        
		.almost_empty_data (),                                                            // (terminated),                        
		.in_startofpacket  (1'b0),                                                        // (terminated),                        
		.in_endofpacket    (1'b0),                                                        // (terminated),                        
		.out_startofpacket (),                                                            // (terminated),                        
		.out_endofpacket   (),                                                            // (terminated),                        
		.in_empty          (1'b0),                                                        // (terminated),                        
		.out_empty         (),                                                            // (terminated),                        
		.in_error          (1'b0),                                                        // (terminated),                        
		.out_error         (),                                                            // (terminated),                        
		.in_channel        (1'b0),                                                        // (terminated),                        
		.out_channel       ()                                                             // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9680_jesd204_link_pll_reconfig_agent (
		.clk                     (clock_in_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9680_jesd204_link_pll_reconfig_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9680_jesd204_link_pll_reconfig_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9680_jesd204_link_pll_reconfig_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9680_jesd204_link_pll_reconfig_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9680_jesd204_link_pll_reconfig_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9680_jesd204_link_pll_reconfig_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9680_jesd204_link_pll_reconfig_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9680_jesd204_link_pll_reconfig_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9680_jesd204_link_pll_reconfig_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9680_jesd204_link_pll_reconfig_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9680_jesd204_link_pll_reconfig_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9680_jesd204_link_pll_reconfig_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9680_jesd204_link_pll_reconfig_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9680_jesd204_link_pll_reconfig_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                             //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                             //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_021_src_data),                                              //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                                     //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                       //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                           //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_link_pll_reconfig_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9680_jesd204_link_pll_reconfig_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9680_jesd204_link_pll_reconfig_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9680_jesd204_link_pll_reconfig_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9680_jesd204_link_pll_reconfig_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                       // (terminated),                        
		.csr_read          (1'b0),                                                        // (terminated),                        
		.csr_write         (1'b0),                                                        // (terminated),                        
		.csr_readdata      (),                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                        
		.almost_full_data  (),                                                            // (terminated),                        
		.almost_empty_data (),                                                            // (terminated),                        
		.in_startofpacket  (1'b0),                                                        // (terminated),                        
		.in_endofpacket    (1'b0),                                                        // (terminated),                        
		.out_startofpacket (),                                                            // (terminated),                        
		.out_endofpacket   (),                                                            // (terminated),                        
		.in_empty          (1'b0),                                                        // (terminated),                        
		.out_empty         (),                                                            // (terminated),                        
		.in_error          (1'b0),                                                        // (terminated),                        
		.out_error         (),                                                            // (terminated),                        
		.in_channel        (1'b0),                                                        // (terminated),                        
		.out_channel       ()                                                             // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) phy_interlaken_0_phy_data_ctrl_csr_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                                  //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                                  //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_022_src_data),                                                   //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                            //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                                //   input,   width = 43,                .channel
		.rf_sink_ready           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                    // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                             //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,   width = 1, clk_reset.reset
		.in_data           (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) phy_interlaken_1_phy_data_ctrl_csr_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                                   //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                                  //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                                  //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_023_src_data),                                                   //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                                            //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                                                //   input,   width = 43,                .channel
		.rf_sink_ready           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                    // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated),                         
		.csr_read          (1'b0),                                                                   // (terminated),                         
		.csr_write         (1'b0),                                                                   // (terminated),                         
		.csr_readdata      (),                                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated),                         
		.almost_full_data  (),                                                                       // (terminated),                         
		.almost_empty_data (),                                                                       // (terminated),                         
		.in_empty          (1'b0),                                                                   // (terminated),                         
		.out_empty         (),                                                                       // (terminated),                         
		.in_error          (1'b0),                                                                   // (terminated),                         
		.out_error         (),                                                                       // (terminated),                         
		.in_channel        (1'b0),                                                                   // (terminated),                         
		.out_channel       ()                                                                        // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                             //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,   width = 1, clk_reset.reset
		.in_data           (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                            // (terminated),                        
		.csr_read          (1'b0),                                                             // (terminated),                        
		.csr_write         (1'b0),                                                             // (terminated),                        
		.csr_readdata      (),                                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                        
		.almost_full_data  (),                                                                 // (terminated),                        
		.almost_empty_data (),                                                                 // (terminated),                        
		.in_startofpacket  (1'b0),                                                             // (terminated),                        
		.in_endofpacket    (1'b0),                                                             // (terminated),                        
		.out_startofpacket (),                                                                 // (terminated),                        
		.out_endofpacket   (),                                                                 // (terminated),                        
		.in_empty          (1'b0),                                                             // (terminated),                        
		.out_empty         (),                                                                 // (terminated),                        
		.in_error          (1'b0),                                                             // (terminated),                        
		.out_error         (),                                                                 // (terminated),                        
		.in_channel        (1'b0),                                                             // (terminated),                        
		.out_channel       ()                                                                  // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_phy_reconfig_0_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_phy_reconfig_0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_phy_reconfig_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_phy_reconfig_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_phy_reconfig_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_phy_reconfig_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_phy_reconfig_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_phy_reconfig_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_phy_reconfig_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_phy_reconfig_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_phy_reconfig_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_phy_reconfig_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_phy_reconfig_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_phy_reconfig_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_phy_reconfig_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_phy_reconfig_0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_phy_reconfig_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_024_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_phy_reconfig_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_phy_reconfig_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_phy_reconfig_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_phy_reconfig_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_phy_reconfig_0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_phy_reconfig_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_phy_reconfig_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9680_jesd204_phy_reconfig_0_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9680_jesd204_phy_reconfig_0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9680_jesd204_phy_reconfig_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9680_jesd204_phy_reconfig_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9680_jesd204_phy_reconfig_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9680_jesd204_phy_reconfig_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9680_jesd204_phy_reconfig_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9680_jesd204_phy_reconfig_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9680_jesd204_phy_reconfig_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9680_jesd204_phy_reconfig_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9680_jesd204_phy_reconfig_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9680_jesd204_phy_reconfig_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9680_jesd204_phy_reconfig_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9680_jesd204_phy_reconfig_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9680_jesd204_phy_reconfig_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9680_jesd204_phy_reconfig_0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9680_jesd204_phy_reconfig_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_025_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9680_jesd204_phy_reconfig_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_phy_reconfig_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9680_jesd204_phy_reconfig_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_phy_reconfig_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9680_jesd204_phy_reconfig_0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9680_jesd204_phy_reconfig_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9680_jesd204_phy_reconfig_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9680_jesd204_phy_reconfig_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_phy_reconfig_1_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_phy_reconfig_1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_phy_reconfig_1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_phy_reconfig_1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_phy_reconfig_1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_phy_reconfig_1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_phy_reconfig_1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_phy_reconfig_1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_phy_reconfig_1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_phy_reconfig_1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_phy_reconfig_1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_phy_reconfig_1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_phy_reconfig_1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_phy_reconfig_1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_phy_reconfig_1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_phy_reconfig_1_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_phy_reconfig_1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_026_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_phy_reconfig_1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_phy_reconfig_1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_phy_reconfig_1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_phy_reconfig_1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_phy_reconfig_1_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_1_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_phy_reconfig_1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_phy_reconfig_1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9680_jesd204_phy_reconfig_1_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9680_jesd204_phy_reconfig_1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9680_jesd204_phy_reconfig_1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9680_jesd204_phy_reconfig_1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9680_jesd204_phy_reconfig_1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9680_jesd204_phy_reconfig_1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9680_jesd204_phy_reconfig_1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9680_jesd204_phy_reconfig_1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9680_jesd204_phy_reconfig_1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9680_jesd204_phy_reconfig_1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9680_jesd204_phy_reconfig_1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9680_jesd204_phy_reconfig_1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9680_jesd204_phy_reconfig_1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9680_jesd204_phy_reconfig_1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9680_jesd204_phy_reconfig_1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9680_jesd204_phy_reconfig_1_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9680_jesd204_phy_reconfig_1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_027_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9680_jesd204_phy_reconfig_1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_phy_reconfig_1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9680_jesd204_phy_reconfig_1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_phy_reconfig_1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9680_jesd204_phy_reconfig_1_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_1_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9680_jesd204_phy_reconfig_1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9680_jesd204_phy_reconfig_1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9680_jesd204_phy_reconfig_1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_1_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_phy_reconfig_2_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_phy_reconfig_2_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_phy_reconfig_2_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_phy_reconfig_2_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_phy_reconfig_2_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_phy_reconfig_2_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_phy_reconfig_2_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_phy_reconfig_2_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_phy_reconfig_2_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_phy_reconfig_2_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_phy_reconfig_2_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_phy_reconfig_2_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_phy_reconfig_2_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_phy_reconfig_2_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_phy_reconfig_2_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_phy_reconfig_2_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_phy_reconfig_2_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_028_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_phy_reconfig_2_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_phy_reconfig_2_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_phy_reconfig_2_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_phy_reconfig_2_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_phy_reconfig_2_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_2_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_2_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_2_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_phy_reconfig_2_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_phy_reconfig_2_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9680_jesd204_phy_reconfig_2_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9680_jesd204_phy_reconfig_2_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9680_jesd204_phy_reconfig_2_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9680_jesd204_phy_reconfig_2_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9680_jesd204_phy_reconfig_2_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9680_jesd204_phy_reconfig_2_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9680_jesd204_phy_reconfig_2_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9680_jesd204_phy_reconfig_2_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9680_jesd204_phy_reconfig_2_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9680_jesd204_phy_reconfig_2_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9680_jesd204_phy_reconfig_2_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9680_jesd204_phy_reconfig_2_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9680_jesd204_phy_reconfig_2_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9680_jesd204_phy_reconfig_2_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9680_jesd204_phy_reconfig_2_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9680_jesd204_phy_reconfig_2_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9680_jesd204_phy_reconfig_2_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_029_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9680_jesd204_phy_reconfig_2_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_phy_reconfig_2_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9680_jesd204_phy_reconfig_2_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_phy_reconfig_2_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9680_jesd204_phy_reconfig_2_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_2_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_2_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_2_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9680_jesd204_phy_reconfig_2_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9680_jesd204_phy_reconfig_2_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9680_jesd204_phy_reconfig_2_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_2_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9144_jesd204_phy_reconfig_3_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9144_jesd204_phy_reconfig_3_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9144_jesd204_phy_reconfig_3_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9144_jesd204_phy_reconfig_3_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9144_jesd204_phy_reconfig_3_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9144_jesd204_phy_reconfig_3_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9144_jesd204_phy_reconfig_3_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9144_jesd204_phy_reconfig_3_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9144_jesd204_phy_reconfig_3_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9144_jesd204_phy_reconfig_3_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9144_jesd204_phy_reconfig_3_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9144_jesd204_phy_reconfig_3_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9144_jesd204_phy_reconfig_3_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9144_jesd204_phy_reconfig_3_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9144_jesd204_phy_reconfig_3_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9144_jesd204_phy_reconfig_3_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9144_jesd204_phy_reconfig_3_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_030_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_030_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_030_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_030_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_030_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_030_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9144_jesd204_phy_reconfig_3_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9144_jesd204_phy_reconfig_3_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9144_jesd204_phy_reconfig_3_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9144_jesd204_phy_reconfig_3_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9144_jesd204_phy_reconfig_3_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_3_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_3_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_3_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9144_jesd204_phy_reconfig_3_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9144_jesd204_phy_reconfig_3_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9144_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9144_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ad9680_jesd204_phy_reconfig_3_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1,       clk_reset.reset
		.m0_address              (ad9680_jesd204_phy_reconfig_3_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (ad9680_jesd204_phy_reconfig_3_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (ad9680_jesd204_phy_reconfig_3_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ad9680_jesd204_phy_reconfig_3_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ad9680_jesd204_phy_reconfig_3_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ad9680_jesd204_phy_reconfig_3_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ad9680_jesd204_phy_reconfig_3_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ad9680_jesd204_phy_reconfig_3_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ad9680_jesd204_phy_reconfig_3_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ad9680_jesd204_phy_reconfig_3_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (ad9680_jesd204_phy_reconfig_3_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ad9680_jesd204_phy_reconfig_3_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ad9680_jesd204_phy_reconfig_3_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ad9680_jesd204_phy_reconfig_3_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ad9680_jesd204_phy_reconfig_3_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (ad9680_jesd204_phy_reconfig_3_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_031_src_data),                                           //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                                        //   input,   width = 43,                .channel
		.rf_sink_ready           (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (ad9680_jesd204_phy_reconfig_3_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ad9680_jesd204_phy_reconfig_3_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ad9680_jesd204_phy_reconfig_3_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ad9680_jesd204_phy_reconfig_3_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ad9680_jesd204_phy_reconfig_3_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_3_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_3_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_3_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ad9680_jesd204_phy_reconfig_3_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ad9680_jesd204_phy_reconfig_3_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ad9680_jesd204_phy_reconfig_3_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (ad9680_jesd204_phy_reconfig_3_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) bridge_3_s0_agent (
		.clk                     (ddr3_emif_usr_clk_clk),                         //   input,    width = 1,             clk.clk
		.reset                   (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bridge_3_s0_agent_m0_address),                  //  output,   width = 32,              m0.address
		.m0_burstcount           (bridge_3_s0_agent_m0_burstcount),               //  output,    width = 3,                .burstcount
		.m0_byteenable           (bridge_3_s0_agent_m0_byteenable),               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (bridge_3_s0_agent_m0_debugaccess),              //  output,    width = 1,                .debugaccess
		.m0_lock                 (bridge_3_s0_agent_m0_lock),                     //  output,    width = 1,                .lock
		.m0_readdata             (bridge_3_s0_agent_m0_readdata),                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (bridge_3_s0_agent_m0_readdatavalid),            //   input,    width = 1,                .readdatavalid
		.m0_read                 (bridge_3_s0_agent_m0_read),                     //  output,    width = 1,                .read
		.m0_waitrequest          (bridge_3_s0_agent_m0_waitrequest),              //   input,    width = 1,                .waitrequest
		.m0_writedata            (bridge_3_s0_agent_m0_writedata),                //  output,   width = 32,                .writedata
		.m0_write                (bridge_3_s0_agent_m0_write),                    //  output,    width = 1,                .write
		.rp_endofpacket          (bridge_3_s0_agent_rp_endofpacket),              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bridge_3_s0_agent_rp_ready),                    //   input,    width = 1,                .ready
		.rp_valid                (bridge_3_s0_agent_rp_valid),                    //  output,    width = 1,                .valid
		.rp_data                 (bridge_3_s0_agent_rp_data),                     //  output,  width = 142,                .data
		.rp_startofpacket        (bridge_3_s0_agent_rp_startofpacket),            //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_032_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_032_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_032_src_data),                          //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_032_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_032_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_032_src_channel),                       //   input,   width = 43,                .channel
		.rf_sink_ready           (bridge_3_s0_agent_rsp_fifo_out_ready),          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bridge_3_s0_agent_rsp_fifo_out_valid),          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bridge_3_s0_agent_rsp_fifo_out_startofpacket),  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bridge_3_s0_agent_rsp_fifo_out_endofpacket),    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bridge_3_s0_agent_rsp_fifo_out_data),           //   input,  width = 143,                .data
		.rf_source_ready         (bridge_3_s0_agent_rf_source_ready),             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bridge_3_s0_agent_rf_source_valid),             //  output,    width = 1,                .valid
		.rf_source_startofpacket (bridge_3_s0_agent_rf_source_startofpacket),     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bridge_3_s0_agent_rf_source_endofpacket),       //  output,    width = 1,                .endofpacket
		.rf_source_data          (bridge_3_s0_agent_rf_source_data),              //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (bridge_3_s0_agent_rdata_fifo_out_ready),        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bridge_3_s0_agent_rdata_fifo_out_valid),        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bridge_3_s0_agent_rdata_fifo_out_data),         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (bridge_3_s0_agent_rdata_fifo_src_ready),        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_3_s0_agent_rdata_fifo_src_valid),        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bridge_3_s0_agent_rdata_fifo_src_data),         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_3_s0_agent_rsp_fifo (
		.clk               (ddr3_emif_usr_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (bridge_3_s0_agent_rf_source_data),              //   input,  width = 143,        in.data
		.in_valid          (bridge_3_s0_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (bridge_3_s0_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (bridge_3_s0_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bridge_3_s0_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (bridge_3_s0_agent_rsp_fifo_out_data),           //  output,  width = 143,       out.data
		.out_valid         (bridge_3_s0_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (bridge_3_s0_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (bridge_3_s0_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bridge_3_s0_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (16),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_3_s0_agent_rdata_fifo (
		.clk               (ddr3_emif_usr_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset             (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (bridge_3_s0_agent_rdata_fifo_src_data),         //   input,  width = 34,        in.data
		.in_valid          (bridge_3_s0_agent_rdata_fifo_src_valid),        //   input,   width = 1,          .valid
		.in_ready          (bridge_3_s0_agent_rdata_fifo_src_ready),        //  output,   width = 1,          .ready
		.out_data          (bridge_3_s0_agent_rdata_fifo_out_data),         //  output,  width = 34,       out.data
		.out_valid         (bridge_3_s0_agent_rdata_fifo_out_valid),        //  output,   width = 1,          .valid
		.out_ready         (bridge_3_s0_agent_rdata_fifo_out_ready),        //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                         // (terminated),                        
		.csr_read          (1'b0),                                          // (terminated),                        
		.csr_write         (1'b0),                                          // (terminated),                        
		.csr_readdata      (),                                              // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                        
		.almost_full_data  (),                                              // (terminated),                        
		.almost_empty_data (),                                              // (terminated),                        
		.in_startofpacket  (1'b0),                                          // (terminated),                        
		.in_endofpacket    (1'b0),                                          // (terminated),                        
		.out_startofpacket (),                                              // (terminated),                        
		.out_endofpacket   (),                                              // (terminated),                        
		.in_empty          (1'b0),                                          // (terminated),                        
		.out_empty         (),                                              // (terminated),                        
		.in_error          (1'b0),                                          // (terminated),                        
		.out_error         (),                                              // (terminated),                        
		.in_channel        (1'b0),                                          // (terminated),                        
		.out_channel       ()                                               // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) bridge_2_s0_agent (
		.clk                     (iopll_0_outclk0_clk),                           //   input,    width = 1,             clk.clk
		.reset                   (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bridge_2_s0_agent_m0_address),                  //  output,   width = 32,              m0.address
		.m0_burstcount           (bridge_2_s0_agent_m0_burstcount),               //  output,    width = 3,                .burstcount
		.m0_byteenable           (bridge_2_s0_agent_m0_byteenable),               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (bridge_2_s0_agent_m0_debugaccess),              //  output,    width = 1,                .debugaccess
		.m0_lock                 (bridge_2_s0_agent_m0_lock),                     //  output,    width = 1,                .lock
		.m0_readdata             (bridge_2_s0_agent_m0_readdata),                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (bridge_2_s0_agent_m0_readdatavalid),            //   input,    width = 1,                .readdatavalid
		.m0_read                 (bridge_2_s0_agent_m0_read),                     //  output,    width = 1,                .read
		.m0_waitrequest          (bridge_2_s0_agent_m0_waitrequest),              //   input,    width = 1,                .waitrequest
		.m0_writedata            (bridge_2_s0_agent_m0_writedata),                //  output,   width = 32,                .writedata
		.m0_write                (bridge_2_s0_agent_m0_write),                    //  output,    width = 1,                .write
		.rp_endofpacket          (bridge_2_s0_agent_rp_endofpacket),              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bridge_2_s0_agent_rp_ready),                    //   input,    width = 1,                .ready
		.rp_valid                (bridge_2_s0_agent_rp_valid),                    //  output,    width = 1,                .valid
		.rp_data                 (bridge_2_s0_agent_rp_data),                     //  output,  width = 142,                .data
		.rp_startofpacket        (bridge_2_s0_agent_rp_startofpacket),            //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_033_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_033_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_033_src_data),                          //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_033_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_033_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_033_src_channel),                       //   input,   width = 43,                .channel
		.rf_sink_ready           (bridge_2_s0_agent_rsp_fifo_out_ready),          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bridge_2_s0_agent_rsp_fifo_out_valid),          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bridge_2_s0_agent_rsp_fifo_out_startofpacket),  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bridge_2_s0_agent_rsp_fifo_out_endofpacket),    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bridge_2_s0_agent_rsp_fifo_out_data),           //   input,  width = 143,                .data
		.rf_source_ready         (bridge_2_s0_agent_rf_source_ready),             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bridge_2_s0_agent_rf_source_valid),             //  output,    width = 1,                .valid
		.rf_source_startofpacket (bridge_2_s0_agent_rf_source_startofpacket),     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bridge_2_s0_agent_rf_source_endofpacket),       //  output,    width = 1,                .endofpacket
		.rf_source_data          (bridge_2_s0_agent_rf_source_data),              //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (bridge_2_s0_agent_rdata_fifo_out_ready),        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bridge_2_s0_agent_rdata_fifo_out_valid),        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bridge_2_s0_agent_rdata_fifo_out_data),         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (bridge_2_s0_agent_rdata_fifo_src_ready),        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_2_s0_agent_rdata_fifo_src_valid),        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bridge_2_s0_agent_rdata_fifo_src_data),         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_2_s0_agent_rsp_fifo (
		.clk               (iopll_0_outclk0_clk),                           //   input,    width = 1,       clk.clk
		.reset             (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (bridge_2_s0_agent_rf_source_data),              //   input,  width = 143,        in.data
		.in_valid          (bridge_2_s0_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (bridge_2_s0_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (bridge_2_s0_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bridge_2_s0_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (bridge_2_s0_agent_rsp_fifo_out_data),           //  output,  width = 143,       out.data
		.out_valid         (bridge_2_s0_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (bridge_2_s0_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (bridge_2_s0_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bridge_2_s0_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (16),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_2_s0_agent_rdata_fifo (
		.clk               (iopll_0_outclk0_clk),                           //   input,   width = 1,       clk.clk
		.reset             (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (bridge_2_s0_agent_rdata_fifo_src_data),         //   input,  width = 34,        in.data
		.in_valid          (bridge_2_s0_agent_rdata_fifo_src_valid),        //   input,   width = 1,          .valid
		.in_ready          (bridge_2_s0_agent_rdata_fifo_src_ready),        //  output,   width = 1,          .ready
		.out_data          (bridge_2_s0_agent_rdata_fifo_out_data),         //  output,  width = 34,       out.data
		.out_valid         (bridge_2_s0_agent_rdata_fifo_out_valid),        //  output,   width = 1,          .valid
		.out_ready         (bridge_2_s0_agent_rdata_fifo_out_ready),        //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                         // (terminated),                        
		.csr_read          (1'b0),                                          // (terminated),                        
		.csr_write         (1'b0),                                          // (terminated),                        
		.csr_readdata      (),                                              // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                        
		.almost_full_data  (),                                              // (terminated),                        
		.almost_empty_data (),                                              // (terminated),                        
		.in_startofpacket  (1'b0),                                          // (terminated),                        
		.in_endofpacket    (1'b0),                                          // (terminated),                        
		.out_startofpacket (),                                              // (terminated),                        
		.out_endofpacket   (),                                              // (terminated),                        
		.in_empty          (1'b0),                                          // (terminated),                        
		.out_empty         (),                                              // (terminated),                        
		.in_error          (1'b0),                                          // (terminated),                        
		.out_error         (),                                              // (terminated),                        
		.in_channel        (1'b0),                                          // (terminated),                        
		.out_channel       ()                                               // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) bridge_1_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bridge_1_s0_agent_m0_address),                          //  output,   width = 32,              m0.address
		.m0_burstcount           (bridge_1_s0_agent_m0_burstcount),                       //  output,    width = 5,                .burstcount
		.m0_byteenable           (bridge_1_s0_agent_m0_byteenable),                       //  output,    width = 4,                .byteenable
		.m0_debugaccess          (bridge_1_s0_agent_m0_debugaccess),                      //  output,    width = 1,                .debugaccess
		.m0_lock                 (bridge_1_s0_agent_m0_lock),                             //  output,    width = 1,                .lock
		.m0_readdata             (bridge_1_s0_agent_m0_readdata),                         //   input,   width = 32,                .readdata
		.m0_readdatavalid        (bridge_1_s0_agent_m0_readdatavalid),                    //   input,    width = 1,                .readdatavalid
		.m0_read                 (bridge_1_s0_agent_m0_read),                             //  output,    width = 1,                .read
		.m0_waitrequest          (bridge_1_s0_agent_m0_waitrequest),                      //   input,    width = 1,                .waitrequest
		.m0_writedata            (bridge_1_s0_agent_m0_writedata),                        //  output,   width = 32,                .writedata
		.m0_write                (bridge_1_s0_agent_m0_write),                            //  output,    width = 1,                .write
		.rp_endofpacket          (bridge_1_s0_agent_rp_endofpacket),                      //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bridge_1_s0_agent_rp_ready),                            //   input,    width = 1,                .ready
		.rp_valid                (bridge_1_s0_agent_rp_valid),                            //  output,    width = 1,                .valid
		.rp_data                 (bridge_1_s0_agent_rp_data),                             //  output,  width = 142,                .data
		.rp_startofpacket        (bridge_1_s0_agent_rp_startofpacket),                    //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_034_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_034_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_034_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_034_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_034_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_034_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (bridge_1_s0_agent_rsp_fifo_out_ready),                  //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bridge_1_s0_agent_rsp_fifo_out_valid),                  //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bridge_1_s0_agent_rsp_fifo_out_startofpacket),          //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bridge_1_s0_agent_rsp_fifo_out_endofpacket),            //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bridge_1_s0_agent_rsp_fifo_out_data),                   //   input,  width = 143,                .data
		.rf_source_ready         (bridge_1_s0_agent_rf_source_ready),                     //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bridge_1_s0_agent_rf_source_valid),                     //  output,    width = 1,                .valid
		.rf_source_startofpacket (bridge_1_s0_agent_rf_source_startofpacket),             //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bridge_1_s0_agent_rf_source_endofpacket),               //  output,    width = 1,                .endofpacket
		.rf_source_data          (bridge_1_s0_agent_rf_source_data),                      //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (bridge_1_s0_agent_rdata_fifo_out_ready),                //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bridge_1_s0_agent_rdata_fifo_out_valid),                //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bridge_1_s0_agent_rdata_fifo_out_data),                 //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (bridge_1_s0_agent_rdata_fifo_src_ready),                //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_1_s0_agent_rdata_fifo_src_valid),                //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bridge_1_s0_agent_rdata_fifo_src_data),                 //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_1_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (bridge_1_s0_agent_rf_source_data),                      //   input,  width = 143,        in.data
		.in_valid          (bridge_1_s0_agent_rf_source_valid),                     //   input,    width = 1,          .valid
		.in_ready          (bridge_1_s0_agent_rf_source_ready),                     //  output,    width = 1,          .ready
		.in_startofpacket  (bridge_1_s0_agent_rf_source_startofpacket),             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bridge_1_s0_agent_rf_source_endofpacket),               //   input,    width = 1,          .endofpacket
		.out_data          (bridge_1_s0_agent_rsp_fifo_out_data),                   //  output,  width = 143,       out.data
		.out_valid         (bridge_1_s0_agent_rsp_fifo_out_valid),                  //  output,    width = 1,          .valid
		.out_ready         (bridge_1_s0_agent_rsp_fifo_out_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket (bridge_1_s0_agent_rsp_fifo_out_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bridge_1_s0_agent_rsp_fifo_out_endofpacket),            //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_1_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (bridge_1_s0_agent_rdata_fifo_src_data),                 //   input,  width = 34,        in.data
		.in_valid          (bridge_1_s0_agent_rdata_fifo_src_valid),                //   input,   width = 1,          .valid
		.in_ready          (bridge_1_s0_agent_rdata_fifo_src_ready),                //  output,   width = 1,          .ready
		.out_data          (bridge_1_s0_agent_rdata_fifo_out_data),                 //  output,  width = 34,       out.data
		.out_valid         (bridge_1_s0_agent_rdata_fifo_out_valid),                //  output,   width = 1,          .valid
		.out_ready         (bridge_1_s0_agent_rdata_fifo_out_ready),                //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) bridge_0_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bridge_0_s0_agent_m0_address),                          //  output,   width = 32,              m0.address
		.m0_burstcount           (bridge_0_s0_agent_m0_burstcount),                       //  output,   width = 10,                .burstcount
		.m0_byteenable           (bridge_0_s0_agent_m0_byteenable),                       //  output,    width = 4,                .byteenable
		.m0_debugaccess          (bridge_0_s0_agent_m0_debugaccess),                      //  output,    width = 1,                .debugaccess
		.m0_lock                 (bridge_0_s0_agent_m0_lock),                             //  output,    width = 1,                .lock
		.m0_readdata             (bridge_0_s0_agent_m0_readdata),                         //   input,   width = 32,                .readdata
		.m0_readdatavalid        (bridge_0_s0_agent_m0_readdatavalid),                    //   input,    width = 1,                .readdatavalid
		.m0_read                 (bridge_0_s0_agent_m0_read),                             //  output,    width = 1,                .read
		.m0_waitrequest          (bridge_0_s0_agent_m0_waitrequest),                      //   input,    width = 1,                .waitrequest
		.m0_writedata            (bridge_0_s0_agent_m0_writedata),                        //  output,   width = 32,                .writedata
		.m0_write                (bridge_0_s0_agent_m0_write),                            //  output,    width = 1,                .write
		.rp_endofpacket          (bridge_0_s0_agent_rp_endofpacket),                      //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bridge_0_s0_agent_rp_ready),                            //   input,    width = 1,                .ready
		.rp_valid                (bridge_0_s0_agent_rp_valid),                            //  output,    width = 1,                .valid
		.rp_data                 (bridge_0_s0_agent_rp_data),                             //  output,  width = 142,                .data
		.rp_startofpacket        (bridge_0_s0_agent_rp_startofpacket),                    //  output,    width = 1,                .startofpacket
		.cp_ready                (bridge_0_s0_burst_adapter_source0_ready),               //  output,    width = 1,              cp.ready
		.cp_valid                (bridge_0_s0_burst_adapter_source0_valid),               //   input,    width = 1,                .valid
		.cp_data                 (bridge_0_s0_burst_adapter_source0_data),                //   input,  width = 142,                .data
		.cp_startofpacket        (bridge_0_s0_burst_adapter_source0_startofpacket),       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (bridge_0_s0_burst_adapter_source0_endofpacket),         //   input,    width = 1,                .endofpacket
		.cp_channel              (bridge_0_s0_burst_adapter_source0_channel),             //   input,   width = 43,                .channel
		.rf_sink_ready           (bridge_0_s0_agent_rsp_fifo_out_ready),                  //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bridge_0_s0_agent_rsp_fifo_out_valid),                  //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bridge_0_s0_agent_rsp_fifo_out_startofpacket),          //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bridge_0_s0_agent_rsp_fifo_out_endofpacket),            //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bridge_0_s0_agent_rsp_fifo_out_data),                   //   input,  width = 143,                .data
		.rf_source_ready         (bridge_0_s0_agent_rf_source_ready),                     //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bridge_0_s0_agent_rf_source_valid),                     //  output,    width = 1,                .valid
		.rf_source_startofpacket (bridge_0_s0_agent_rf_source_startofpacket),             //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bridge_0_s0_agent_rf_source_endofpacket),               //  output,    width = 1,                .endofpacket
		.rf_source_data          (bridge_0_s0_agent_rf_source_data),                      //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (bridge_0_s0_agent_rdata_fifo_out_ready),                //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bridge_0_s0_agent_rdata_fifo_out_valid),                //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bridge_0_s0_agent_rdata_fifo_out_data),                 //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (bridge_0_s0_agent_rdata_fifo_src_ready),                //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bridge_0_s0_agent_rdata_fifo_src_valid),                //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bridge_0_s0_agent_rdata_fifo_src_data),                 //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_0_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (bridge_0_s0_agent_rf_source_data),                      //   input,  width = 143,        in.data
		.in_valid          (bridge_0_s0_agent_rf_source_valid),                     //   input,    width = 1,          .valid
		.in_ready          (bridge_0_s0_agent_rf_source_ready),                     //  output,    width = 1,          .ready
		.in_startofpacket  (bridge_0_s0_agent_rf_source_startofpacket),             //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bridge_0_s0_agent_rf_source_endofpacket),               //   input,    width = 1,          .endofpacket
		.out_data          (bridge_0_s0_agent_rsp_fifo_out_data),                   //  output,  width = 143,       out.data
		.out_valid         (bridge_0_s0_agent_rsp_fifo_out_valid),                  //  output,    width = 1,          .valid
		.out_ready         (bridge_0_s0_agent_rsp_fifo_out_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket (bridge_0_s0_agent_rsp_fifo_out_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bridge_0_s0_agent_rsp_fifo_out_endofpacket),            //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (32768),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) bridge_0_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (bridge_0_s0_agent_rdata_fifo_src_data),                 //   input,  width = 34,        in.data
		.in_valid          (bridge_0_s0_agent_rdata_fifo_src_valid),                //   input,   width = 1,          .valid
		.in_ready          (bridge_0_s0_agent_rdata_fifo_src_ready),                //  output,   width = 1,          .ready
		.out_data          (bridge_0_s0_agent_rdata_fifo_out_data),                 //  output,  width = 34,       out.data
		.out_valid         (bridge_0_s0_agent_rdata_fifo_out_valid),                //  output,   width = 1,          .valid
		.out_ready         (bridge_0_s0_agent_rdata_fifo_out_ready),                //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mcu_subsystem_ram_0_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (mcu_subsystem_ram_0_s1_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (mcu_subsystem_ram_0_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (mcu_subsystem_ram_0_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mcu_subsystem_ram_0_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (mcu_subsystem_ram_0_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (mcu_subsystem_ram_0_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mcu_subsystem_ram_0_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (mcu_subsystem_ram_0_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (mcu_subsystem_ram_0_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (mcu_subsystem_ram_0_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (mcu_subsystem_ram_0_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (mcu_subsystem_ram_0_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mcu_subsystem_ram_0_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (mcu_subsystem_ram_0_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (mcu_subsystem_ram_0_s1_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (mcu_subsystem_ram_0_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_036_src_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_036_src_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_036_src_data),                                    //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_036_src_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_036_src_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_036_src_channel),                                 //   input,   width = 43,                .channel
		.rf_sink_ready           (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (mcu_subsystem_ram_0_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mcu_subsystem_ram_0_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (mcu_subsystem_ram_0_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mcu_subsystem_ram_0_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (mcu_subsystem_ram_0_s1_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) mcu_subsystem_ram_0_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (mcu_subsystem_ram_0_s1_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (mcu_subsystem_ram_0_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mcu_subsystem_ram_0_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mcu_subsystem_ram_0_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mcu_subsystem_ram_0_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mcu_subsystem_ram_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated),                         
		.csr_read          (1'b0),                                                    // (terminated),                         
		.csr_write         (1'b0),                                                    // (terminated),                         
		.csr_readdata      (),                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                         
		.almost_full_data  (),                                                        // (terminated),                         
		.almost_empty_data (),                                                        // (terminated),                         
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.in_error          (1'b0),                                                    // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_channel        (1'b0),                                                    // (terminated),                         
		.out_channel       ()                                                         // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) mcu_subsystem_ram_0_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (mcu_subsystem_ram_0_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (mcu_subsystem_ram_0_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) timer_1_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (timer_1_s1_agent_m0_address),                           //  output,   width = 32,              m0.address
		.m0_burstcount           (timer_1_s1_agent_m0_burstcount),                        //  output,    width = 3,                .burstcount
		.m0_byteenable           (timer_1_s1_agent_m0_byteenable),                        //  output,    width = 4,                .byteenable
		.m0_debugaccess          (timer_1_s1_agent_m0_debugaccess),                       //  output,    width = 1,                .debugaccess
		.m0_lock                 (timer_1_s1_agent_m0_lock),                              //  output,    width = 1,                .lock
		.m0_readdata             (timer_1_s1_agent_m0_readdata),                          //   input,   width = 32,                .readdata
		.m0_readdatavalid        (timer_1_s1_agent_m0_readdatavalid),                     //   input,    width = 1,                .readdatavalid
		.m0_read                 (timer_1_s1_agent_m0_read),                              //  output,    width = 1,                .read
		.m0_waitrequest          (timer_1_s1_agent_m0_waitrequest),                       //   input,    width = 1,                .waitrequest
		.m0_writedata            (timer_1_s1_agent_m0_writedata),                         //  output,   width = 32,                .writedata
		.m0_write                (timer_1_s1_agent_m0_write),                             //  output,    width = 1,                .write
		.rp_endofpacket          (timer_1_s1_agent_rp_endofpacket),                       //  output,    width = 1,              rp.endofpacket
		.rp_ready                (timer_1_s1_agent_rp_ready),                             //   input,    width = 1,                .ready
		.rp_valid                (timer_1_s1_agent_rp_valid),                             //  output,    width = 1,                .valid
		.rp_data                 (timer_1_s1_agent_rp_data),                              //  output,  width = 142,                .data
		.rp_startofpacket        (timer_1_s1_agent_rp_startofpacket),                     //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_037_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_037_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_037_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_037_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_037_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_037_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (timer_1_s1_agent_rsp_fifo_out_ready),                   //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (timer_1_s1_agent_rsp_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (timer_1_s1_agent_rsp_fifo_out_startofpacket),           //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (timer_1_s1_agent_rsp_fifo_out_endofpacket),             //   input,    width = 1,                .endofpacket
		.rf_sink_data            (timer_1_s1_agent_rsp_fifo_out_data),                    //   input,  width = 143,                .data
		.rf_source_ready         (timer_1_s1_agent_rf_source_ready),                      //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (timer_1_s1_agent_rf_source_valid),                      //  output,    width = 1,                .valid
		.rf_source_startofpacket (timer_1_s1_agent_rf_source_startofpacket),              //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (timer_1_s1_agent_rf_source_endofpacket),                //  output,    width = 1,                .endofpacket
		.rf_source_data          (timer_1_s1_agent_rf_source_data),                       //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (timer_1_s1_agent_rdata_fifo_out_ready),                 //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (timer_1_s1_agent_rdata_fifo_out_valid),                 //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (timer_1_s1_agent_rdata_fifo_out_data),                  //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (timer_1_s1_agent_rdata_fifo_src_ready),                 //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1_s1_agent_rdata_fifo_src_valid),                 //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (timer_1_s1_agent_rdata_fifo_src_data),                  //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) timer_1_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (timer_1_s1_agent_rf_source_data),                       //   input,  width = 143,        in.data
		.in_valid          (timer_1_s1_agent_rf_source_valid),                      //   input,    width = 1,          .valid
		.in_ready          (timer_1_s1_agent_rf_source_ready),                      //  output,    width = 1,          .ready
		.in_startofpacket  (timer_1_s1_agent_rf_source_startofpacket),              //   input,    width = 1,          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rf_source_endofpacket),                //   input,    width = 1,          .endofpacket
		.out_data          (timer_1_s1_agent_rsp_fifo_out_data),                    //  output,  width = 143,       out.data
		.out_valid         (timer_1_s1_agent_rsp_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (timer_1_s1_agent_rsp_fifo_out_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket (timer_1_s1_agent_rsp_fifo_out_startofpacket),           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (timer_1_s1_agent_rsp_fifo_out_endofpacket),             //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) timer_1_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (timer_1_s1_agent_rdata_fifo_src_data),                  //   input,  width = 34,        in.data
		.in_valid          (timer_1_s1_agent_rdata_fifo_src_valid),                 //   input,   width = 1,          .valid
		.in_ready          (timer_1_s1_agent_rdata_fifo_src_ready),                 //  output,   width = 1,          .ready
		.out_data          (timer_1_s1_agent_rdata_fifo_out_data),                  //  output,  width = 34,       out.data
		.out_valid         (timer_1_s1_agent_rdata_fifo_out_valid),                 //  output,   width = 1,          .valid
		.out_ready         (timer_1_s1_agent_rdata_fifo_out_ready),                 //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) timer_0_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                           //  output,   width = 32,              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                        //  output,    width = 3,                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                        //  output,    width = 4,                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                       //  output,    width = 1,                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                              //  output,    width = 1,                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                          //   input,   width = 32,                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                     //   input,    width = 1,                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                              //  output,    width = 1,                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                       //   input,    width = 1,                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                         //  output,   width = 32,                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                             //  output,    width = 1,                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                       //  output,    width = 1,              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                             //   input,    width = 1,                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                             //  output,    width = 1,                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                              //  output,  width = 142,                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                     //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_038_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_038_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_038_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_038_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_038_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_038_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),                   //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),           //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),             //   input,    width = 1,                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),                    //   input,  width = 143,                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                      //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                      //  output,    width = 1,                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),              //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),                //  output,    width = 1,                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                       //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (timer_0_s1_agent_rdata_fifo_out_ready),                 //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (timer_0_s1_agent_rdata_fifo_out_valid),                 //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (timer_0_s1_agent_rdata_fifo_out_data),                  //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),                 //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),                 //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),                  //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                       //   input,  width = 143,        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                      //   input,    width = 1,          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                      //  output,    width = 1,          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),              //   input,    width = 1,          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),                //   input,    width = 1,          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),                    //  output,  width = 143,       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),                   //   input,    width = 1,          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),           //  output,    width = 1,          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),             //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),                  //   input,  width = 34,        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),                 //   input,   width = 1,          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),                 //  output,   width = 1,          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),                  //  output,  width = 34,       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),                 //  output,   width = 1,          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),                 //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) gpio_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (gpio_s1_agent_m0_address),                              //  output,   width = 32,              m0.address
		.m0_burstcount           (gpio_s1_agent_m0_burstcount),                           //  output,    width = 3,                .burstcount
		.m0_byteenable           (gpio_s1_agent_m0_byteenable),                           //  output,    width = 4,                .byteenable
		.m0_debugaccess          (gpio_s1_agent_m0_debugaccess),                          //  output,    width = 1,                .debugaccess
		.m0_lock                 (gpio_s1_agent_m0_lock),                                 //  output,    width = 1,                .lock
		.m0_readdata             (gpio_s1_agent_m0_readdata),                             //   input,   width = 32,                .readdata
		.m0_readdatavalid        (gpio_s1_agent_m0_readdatavalid),                        //   input,    width = 1,                .readdatavalid
		.m0_read                 (gpio_s1_agent_m0_read),                                 //  output,    width = 1,                .read
		.m0_waitrequest          (gpio_s1_agent_m0_waitrequest),                          //   input,    width = 1,                .waitrequest
		.m0_writedata            (gpio_s1_agent_m0_writedata),                            //  output,   width = 32,                .writedata
		.m0_write                (gpio_s1_agent_m0_write),                                //  output,    width = 1,                .write
		.rp_endofpacket          (gpio_s1_agent_rp_endofpacket),                          //  output,    width = 1,              rp.endofpacket
		.rp_ready                (gpio_s1_agent_rp_ready),                                //   input,    width = 1,                .ready
		.rp_valid                (gpio_s1_agent_rp_valid),                                //  output,    width = 1,                .valid
		.rp_data                 (gpio_s1_agent_rp_data),                                 //  output,  width = 142,                .data
		.rp_startofpacket        (gpio_s1_agent_rp_startofpacket),                        //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_039_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_039_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_039_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_039_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_039_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_039_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (gpio_s1_agent_rsp_fifo_out_ready),                      //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (gpio_s1_agent_rsp_fifo_out_valid),                      //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (gpio_s1_agent_rsp_fifo_out_startofpacket),              //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (gpio_s1_agent_rsp_fifo_out_endofpacket),                //   input,    width = 1,                .endofpacket
		.rf_sink_data            (gpio_s1_agent_rsp_fifo_out_data),                       //   input,  width = 143,                .data
		.rf_source_ready         (gpio_s1_agent_rf_source_ready),                         //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (gpio_s1_agent_rf_source_valid),                         //  output,    width = 1,                .valid
		.rf_source_startofpacket (gpio_s1_agent_rf_source_startofpacket),                 //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (gpio_s1_agent_rf_source_endofpacket),                   //  output,    width = 1,                .endofpacket
		.rf_source_data          (gpio_s1_agent_rf_source_data),                          //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (gpio_s1_agent_rdata_fifo_out_ready),                    //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (gpio_s1_agent_rdata_fifo_out_valid),                    //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (gpio_s1_agent_rdata_fifo_out_data),                     //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (gpio_s1_agent_rdata_fifo_src_ready),                    //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_s1_agent_rdata_fifo_src_valid),                    //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (gpio_s1_agent_rdata_fifo_src_data),                     //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) gpio_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (gpio_s1_agent_rf_source_data),                          //   input,  width = 143,        in.data
		.in_valid          (gpio_s1_agent_rf_source_valid),                         //   input,    width = 1,          .valid
		.in_ready          (gpio_s1_agent_rf_source_ready),                         //  output,    width = 1,          .ready
		.in_startofpacket  (gpio_s1_agent_rf_source_startofpacket),                 //   input,    width = 1,          .startofpacket
		.in_endofpacket    (gpio_s1_agent_rf_source_endofpacket),                   //   input,    width = 1,          .endofpacket
		.out_data          (gpio_s1_agent_rsp_fifo_out_data),                       //  output,  width = 143,       out.data
		.out_valid         (gpio_s1_agent_rsp_fifo_out_valid),                      //  output,    width = 1,          .valid
		.out_ready         (gpio_s1_agent_rsp_fifo_out_ready),                      //   input,    width = 1,          .ready
		.out_startofpacket (gpio_s1_agent_rsp_fifo_out_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (gpio_s1_agent_rsp_fifo_out_endofpacket),                //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) gpio_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (gpio_s1_agent_rdata_fifo_src_data),                     //   input,  width = 34,        in.data
		.in_valid          (gpio_s1_agent_rdata_fifo_src_valid),                    //   input,   width = 1,          .valid
		.in_ready          (gpio_s1_agent_rdata_fifo_src_ready),                    //  output,   width = 1,          .ready
		.out_data          (gpio_s1_agent_rdata_fifo_out_data),                     //  output,  width = 34,       out.data
		.out_valid         (gpio_s1_agent_rdata_fifo_out_valid),                    //  output,   width = 1,          .valid
		.out_ready         (gpio_s1_agent_rdata_fifo_out_ready),                    //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) phy_interlaken_0_serial_clock_reconfig_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                                       //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1,       clk_reset.reset
		.m0_address              (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (phy_interlaken_0_serial_clock_reconfig_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_040_src_ready),                                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_040_src_valid),                                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_040_src_data),                                                       //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_040_src_startofpacket),                                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_040_src_endofpacket),                                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_040_src_channel),                                                    //   input,   width = 43,                .channel
		.rf_sink_ready           (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_data           (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (phy_interlaken_0_serial_clock_reconfig_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated),                         
		.csr_read          (1'b0),                                                                       // (terminated),                         
		.csr_write         (1'b0),                                                                       // (terminated),                         
		.csr_readdata      (),                                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated),                         
		.almost_full_data  (),                                                                           // (terminated),                         
		.almost_empty_data (),                                                                           // (terminated),                         
		.in_empty          (1'b0),                                                                       // (terminated),                         
		.out_empty         (),                                                                           // (terminated),                         
		.in_error          (1'b0),                                                                       // (terminated),                         
		.out_error         (),                                                                           // (terminated),                         
		.in_channel        (1'b0),                                                                       // (terminated),                         
		.out_channel       ()                                                                            // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                                 //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                // (terminated),                        
		.csr_read          (1'b0),                                                                 // (terminated),                        
		.csr_write         (1'b0),                                                                 // (terminated),                        
		.csr_readdata      (),                                                                     // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated),                        
		.almost_full_data  (),                                                                     // (terminated),                        
		.almost_empty_data (),                                                                     // (terminated),                        
		.in_startofpacket  (1'b0),                                                                 // (terminated),                        
		.in_endofpacket    (1'b0),                                                                 // (terminated),                        
		.out_startofpacket (),                                                                     // (terminated),                        
		.out_endofpacket   (),                                                                     // (terminated),                        
		.in_empty          (1'b0),                                                                 // (terminated),                        
		.out_empty         (),                                                                     // (terminated),                        
		.in_error          (1'b0),                                                                 // (terminated),                        
		.out_error         (),                                                                     // (terminated),                        
		.in_channel        (1'b0),                                                                 // (terminated),                        
		.out_channel       ()                                                                      // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) phy_interlaken_1_serial_clock_reconfig_s0_agent (
		.clk                     (clock_in_out_clk_clk),                                                       //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1,       clk_reset.reset
		.m0_address              (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (phy_interlaken_1_serial_clock_reconfig_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_041_src_ready),                                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_041_src_valid),                                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_041_src_data),                                                       //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_041_src_startofpacket),                                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_041_src_endofpacket),                                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_041_src_channel),                                                    //   input,   width = 43,                .channel
		.rf_sink_ready           (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.in_data           (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (phy_interlaken_1_serial_clock_reconfig_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated),                         
		.csr_read          (1'b0),                                                                       // (terminated),                         
		.csr_write         (1'b0),                                                                       // (terminated),                         
		.csr_readdata      (),                                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated),                         
		.almost_full_data  (),                                                                           // (terminated),                         
		.almost_empty_data (),                                                                           // (terminated),                         
		.in_empty          (1'b0),                                                                       // (terminated),                         
		.out_empty         (),                                                                           // (terminated),                         
		.in_error          (1'b0),                                                                       // (terminated),                         
		.out_error         (),                                                                           // (terminated),                         
		.in_channel        (1'b0),                                                                       // (terminated),                         
		.out_channel       ()                                                                            // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                                 //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                // (terminated),                        
		.csr_read          (1'b0),                                                                 // (terminated),                        
		.csr_write         (1'b0),                                                                 // (terminated),                        
		.csr_readdata      (),                                                                     // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated),                        
		.almost_full_data  (),                                                                     // (terminated),                        
		.almost_empty_data (),                                                                     // (terminated),                        
		.in_startofpacket  (1'b0),                                                                 // (terminated),                        
		.in_endofpacket    (1'b0),                                                                 // (terminated),                        
		.out_startofpacket (),                                                                     // (terminated),                        
		.out_endofpacket   (),                                                                     // (terminated),                        
		.in_empty          (1'b0),                                                                 // (terminated),                        
		.out_empty         (),                                                                     // (terminated),                        
		.in_error          (1'b0),                                                                 // (terminated),                        
		.out_error         (),                                                                     // (terminated),                        
		.in_channel        (1'b0),                                                                 // (terminated),                        
		.out_channel       ()                                                                      // (terminated),                        
	);

	mcu_subsystem_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (132),
		.PKT_ORI_BURST_SIZE_L      (130),
		.PKT_RESPONSE_STATUS_H     (129),
		.PKT_RESPONSE_STATUS_L     (128),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (123),
		.PKT_PROTECTION_L          (121),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (43),
		.ST_DATA_W                 (142),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) spi_spi_control_port_agent (
		.clk                     (clock_in_out_clk_clk),                                  //   input,    width = 1,             clk.clk
		.reset                   (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (spi_spi_control_port_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (spi_spi_control_port_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (spi_spi_control_port_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (spi_spi_control_port_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (spi_spi_control_port_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (spi_spi_control_port_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (spi_spi_control_port_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (spi_spi_control_port_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (spi_spi_control_port_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (spi_spi_control_port_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (spi_spi_control_port_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (spi_spi_control_port_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (spi_spi_control_port_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (spi_spi_control_port_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (spi_spi_control_port_agent_rp_data),                    //  output,  width = 142,                .data
		.rp_startofpacket        (spi_spi_control_port_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_042_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_042_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_042_src_data),                                  //   input,  width = 142,                .data
		.cp_startofpacket        (cmd_mux_042_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_042_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_042_src_channel),                               //   input,   width = 43,                .channel
		.rf_sink_ready           (spi_spi_control_port_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (spi_spi_control_port_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (spi_spi_control_port_agent_rsp_fifo_out_data),          //   input,  width = 143,                .data
		.rf_source_ready         (spi_spi_control_port_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (spi_spi_control_port_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (spi_spi_control_port_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (spi_spi_control_port_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (spi_spi_control_port_agent_rf_source_data),             //  output,  width = 143,                .data
		.rdata_fifo_sink_ready   (spi_spi_control_port_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (spi_spi_control_port_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (spi_spi_control_port_agent_rdata_fifo_out_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (spi_spi_control_port_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_spi_control_port_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (spi_spi_control_port_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (143),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) spi_spi_control_port_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (spi_spi_control_port_agent_rf_source_data),             //   input,  width = 143,        in.data
		.in_valid          (spi_spi_control_port_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (spi_spi_control_port_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (spi_spi_control_port_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (spi_spi_control_port_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (spi_spi_control_port_agent_rsp_fifo_out_data),          //  output,  width = 143,       out.data
		.out_valid         (spi_spi_control_port_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (spi_spi_control_port_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) spi_spi_control_port_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (spi_spi_control_port_agent_rdata_fifo_src_data),        //   input,  width = 34,        in.data
		.in_valid          (spi_spi_control_port_agent_rdata_fifo_src_valid),       //   input,   width = 1,          .valid
		.in_ready          (spi_spi_control_port_agent_rdata_fifo_src_ready),       //  output,   width = 1,          .ready
		.out_data          (spi_spi_control_port_agent_rdata_fifo_out_data),        //  output,  width = 34,       out.data
		.out_valid         (spi_spi_control_port_agent_rdata_fifo_out_valid),       //  output,   width = 1,          .valid
		.out_ready         (spi_spi_control_port_agent_rdata_fifo_out_ready),       //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	mcu_subsystem_altera_merlin_router_181_ncbzlda router (
		.sink_ready         (mcu_subsystem_cpu_0_data_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mcu_subsystem_cpu_0_data_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mcu_subsystem_cpu_0_data_master_agent_cp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (mcu_subsystem_cpu_0_data_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mcu_subsystem_cpu_0_data_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                        //  output,  width = 142,          .data
		.src_channel        (router_src_channel),                                     //  output,   width = 43,          .channel
		.src_startofpacket  (router_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_mkupsqy router_001 (
		.sink_ready         (mcu_subsystem_cpu_0_instruction_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mcu_subsystem_cpu_0_instruction_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mcu_subsystem_cpu_0_instruction_master_agent_cp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (mcu_subsystem_cpu_0_instruction_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mcu_subsystem_cpu_0_instruction_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                           //  output,  width = 142,          .data
		.src_channel        (router_001_src_channel),                                        //  output,   width = 43,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4ghvjiq router_002 (
		.sink_ready         (ad9680_dma_m_dest_axi_agent_write_cp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_m_dest_axi_agent_write_cp_valid),            //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_m_dest_axi_agent_write_cp_data),             //   input,  width = 250,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_agent_write_cp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_agent_write_cp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                   //  output,  width = 250,          .data
		.src_channel        (router_002_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4ghvjiq router_003 (
		.sink_ready         (ad9680_dma_m_dest_axi_agent_read_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_m_dest_axi_agent_read_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_m_dest_axi_agent_read_cp_data),              //   input,  width = 250,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_agent_read_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_agent_read_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                   //  output,  width = 250,          .data
		.src_channel        (router_003_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4ghvjiq router_004 (
		.sink_ready         (ad9144_dma_m_src_axi_agent_write_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_m_src_axi_agent_write_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_m_src_axi_agent_write_cp_data),              //   input,  width = 250,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_agent_write_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_agent_write_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                   //  output,  width = 250,          .data
		.src_channel        (router_004_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4ghvjiq router_005 (
		.sink_ready         (ad9144_dma_m_src_axi_agent_read_cp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_m_src_axi_agent_read_cp_valid),              //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_m_src_axi_agent_read_cp_data),               //   input,  width = 250,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_agent_read_cp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_agent_read_cp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                   //  output,  width = 250,          .data
		.src_channel        (router_005_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4nul6ty router_006 (
		.sink_ready         (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_1_phy_data_ctrl_m0_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                      //  output,  width = 142,          .data
		.src_channel        (router_006_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_4nul6ty router_007 (
		.sink_ready         (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_0_phy_data_ctrl_m0_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                      //  output,  width = 142,          .data
		.src_channel        (router_007_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_008 (
		.sink_ready         (ad9144_jesd204_link_management_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_link_management_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_link_management_agent_write_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_link_management_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_link_management_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                         //  output,  width = 142,          .data
		.src_channel        (router_008_src_channel),                                      //  output,   width = 43,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_009 (
		.sink_ready         (ad9144_jesd204_link_management_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_link_management_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_link_management_agent_read_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_link_management_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_link_management_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                                        //  output,  width = 142,          .data
		.src_channel        (router_009_src_channel),                                     //  output,   width = 43,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_010 (
		.sink_ready         (ad9680_jesd204_link_management_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_link_management_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_link_management_agent_write_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_link_management_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_link_management_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                                         //  output,  width = 142,          .data
		.src_channel        (router_010_src_channel),                                      //  output,   width = 43,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_011 (
		.sink_ready         (ad9680_jesd204_link_management_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_link_management_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_link_management_agent_read_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_link_management_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_link_management_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                                        //  output,  width = 142,          .data
		.src_channel        (router_011_src_channel),                                     //  output,   width = 43,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_012 (
		.sink_ready         (ad9144_jesd204_link_reconfig_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_link_reconfig_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_link_reconfig_agent_write_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_link_reconfig_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_link_reconfig_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_012_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid          (router_012_src_valid),                                      //  output,    width = 1,          .valid
		.src_data           (router_012_src_data),                                       //  output,  width = 142,          .data
		.src_channel        (router_012_src_channel),                                    //  output,   width = 43,          .channel
		.src_startofpacket  (router_012_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_013 (
		.sink_ready         (ad9144_jesd204_link_reconfig_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_link_reconfig_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_link_reconfig_agent_read_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_link_reconfig_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_link_reconfig_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_013_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_013_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_013_src_data),                                      //  output,  width = 142,          .data
		.src_channel        (router_013_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket  (router_013_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_014 (
		.sink_ready         (ad9680_jesd204_link_reconfig_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_link_reconfig_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_link_reconfig_agent_write_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_link_reconfig_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_link_reconfig_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_014_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid          (router_014_src_valid),                                      //  output,    width = 1,          .valid
		.src_data           (router_014_src_data),                                       //  output,  width = 142,          .data
		.src_channel        (router_014_src_channel),                                    //  output,   width = 43,          .channel
		.src_startofpacket  (router_014_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_015 (
		.sink_ready         (ad9680_jesd204_link_reconfig_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_link_reconfig_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_link_reconfig_agent_read_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_link_reconfig_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_link_reconfig_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_015_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_015_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_015_src_data),                                      //  output,  width = 142,          .data
		.src_channel        (router_015_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket  (router_015_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_016 (
		.sink_ready         (ad9144_core_s_axi_agent_write_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_core_s_axi_agent_write_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (ad9144_core_s_axi_agent_write_rp_data),                 //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_core_s_axi_agent_write_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_core_s_axi_agent_write_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_016_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_016_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_016_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_016_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_016_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_017 (
		.sink_ready         (ad9144_core_s_axi_agent_read_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_core_s_axi_agent_read_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ad9144_core_s_axi_agent_read_rp_data),                  //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_core_s_axi_agent_read_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_core_s_axi_agent_read_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_017_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_017_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_017_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_017_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_017_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_018 (
		.sink_ready         (ad9144_dma_s_axi_agent_write_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_s_axi_agent_write_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_s_axi_agent_write_rp_data),                  //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_dma_s_axi_agent_write_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_s_axi_agent_write_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_018_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_018_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_018_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_018_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_018_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_019 (
		.sink_ready         (ad9144_dma_s_axi_agent_read_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_dma_s_axi_agent_read_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (ad9144_dma_s_axi_agent_read_rp_data),                   //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_dma_s_axi_agent_read_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_s_axi_agent_read_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_019_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_019_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_019_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_019_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_019_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_020 (
		.sink_ready         (ad9680_dma_s_axi_agent_write_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_s_axi_agent_write_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_s_axi_agent_write_rp_data),                  //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_dma_s_axi_agent_write_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_s_axi_agent_write_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_020_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_020_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_020_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_020_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_020_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_021 (
		.sink_ready         (ad9680_dma_s_axi_agent_read_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_dma_s_axi_agent_read_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (ad9680_dma_s_axi_agent_read_rp_data),                   //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_dma_s_axi_agent_read_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_s_axi_agent_read_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_021_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_021_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_021_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_021_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_021_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_022 (
		.sink_ready         (ad9680_core_s_axi_agent_write_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_core_s_axi_agent_write_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (ad9680_core_s_axi_agent_write_rp_data),                 //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_core_s_axi_agent_write_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_core_s_axi_agent_write_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_022_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_022_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_022_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_022_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_022_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_023 (
		.sink_ready         (ad9680_core_s_axi_agent_read_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_core_s_axi_agent_read_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ad9680_core_s_axi_agent_read_rp_data),                  //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_core_s_axi_agent_read_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_core_s_axi_agent_read_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_023_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_023_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_023_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_023_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_023_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_024 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_024_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_024_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_024_src_data),                                  //  output,  width = 142,          .data
		.src_channel        (router_024_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket  (router_024_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_025 (
		.sink_ready         (i2c_csr_agent_rp_ready),                                //  output,    width = 1,      sink.ready
		.sink_valid         (i2c_csr_agent_rp_valid),                                //   input,    width = 1,          .valid
		.sink_data          (i2c_csr_agent_rp_data),                                 //   input,  width = 142,          .data
		.sink_startofpacket (i2c_csr_agent_rp_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (i2c_csr_agent_rp_endofpacket),                          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_025_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_025_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_025_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_025_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_025_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_qwy7jki router_026 (
		.sink_ready         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mcu_subsystem_cpu_0_debug_mem_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_026_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_026_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_026_src_data),                                        //  output,  width = 142,          .data
		.src_channel        (router_026_src_channel),                                     //  output,   width = 43,          .channel
		.src_startofpacket  (router_026_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_027 (
		.sink_ready         (ad9144_jesd204_lane_pll_reconfig_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_lane_pll_reconfig_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_lane_pll_reconfig_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_lane_pll_reconfig_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_lane_pll_reconfig_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_027_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_027_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_027_src_data),                                     //  output,  width = 142,          .data
		.src_channel        (router_027_src_channel),                                  //  output,   width = 43,          .channel
		.src_startofpacket  (router_027_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_028 (
		.sink_ready         (ad9144_jesd204_link_pll_reconfig_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_link_pll_reconfig_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_link_pll_reconfig_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_link_pll_reconfig_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_link_pll_reconfig_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_028_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_028_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_028_src_data),                                     //  output,  width = 142,          .data
		.src_channel        (router_028_src_channel),                                  //  output,   width = 43,          .channel
		.src_startofpacket  (router_028_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_029 (
		.sink_ready         (ad9680_jesd204_link_pll_reconfig_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_link_pll_reconfig_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_link_pll_reconfig_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_link_pll_reconfig_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_link_pll_reconfig_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_029_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid          (router_029_src_valid),                                    //  output,    width = 1,          .valid
		.src_data           (router_029_src_data),                                     //  output,  width = 142,          .data
		.src_channel        (router_029_src_channel),                                  //  output,   width = 43,          .channel
		.src_startofpacket  (router_029_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_030 (
		.sink_ready         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_0_phy_data_ctrl_csr_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_030_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_030_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_030_src_data),                                          //  output,  width = 142,          .data
		.src_channel        (router_030_src_channel),                                       //  output,   width = 43,          .channel
		.src_startofpacket  (router_030_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_031 (
		.sink_ready         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_1_phy_data_ctrl_csr_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_031_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_031_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_031_src_data),                                          //  output,  width = 142,          .data
		.src_channel        (router_031_src_channel),                                       //  output,   width = 43,          .channel
		.src_startofpacket  (router_031_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_032 (
		.sink_ready         (ad9144_jesd204_phy_reconfig_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_phy_reconfig_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_phy_reconfig_0_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_phy_reconfig_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_phy_reconfig_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_032_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_032_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_032_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_032_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_032_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_033 (
		.sink_ready         (ad9680_jesd204_phy_reconfig_0_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_phy_reconfig_0_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_phy_reconfig_0_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_phy_reconfig_0_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_phy_reconfig_0_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_033_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_033_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_033_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_033_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_033_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_034 (
		.sink_ready         (ad9144_jesd204_phy_reconfig_1_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_phy_reconfig_1_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_phy_reconfig_1_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_phy_reconfig_1_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_phy_reconfig_1_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_034_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_034_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_034_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_034_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_034_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_035 (
		.sink_ready         (ad9680_jesd204_phy_reconfig_1_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_phy_reconfig_1_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_phy_reconfig_1_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_phy_reconfig_1_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_phy_reconfig_1_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_035_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_035_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_035_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_035_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_035_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_036 (
		.sink_ready         (ad9144_jesd204_phy_reconfig_2_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_phy_reconfig_2_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_phy_reconfig_2_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_phy_reconfig_2_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_phy_reconfig_2_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_036_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_036_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_036_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_036_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_036_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_037 (
		.sink_ready         (ad9680_jesd204_phy_reconfig_2_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_phy_reconfig_2_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_phy_reconfig_2_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_phy_reconfig_2_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_phy_reconfig_2_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_037_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_037_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_037_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_037_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_037_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_038 (
		.sink_ready         (ad9144_jesd204_phy_reconfig_3_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9144_jesd204_phy_reconfig_3_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9144_jesd204_phy_reconfig_3_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_jesd204_phy_reconfig_3_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_jesd204_phy_reconfig_3_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_038_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_038_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_038_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_038_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_038_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_039 (
		.sink_ready         (ad9680_jesd204_phy_reconfig_3_agent_rp_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (ad9680_jesd204_phy_reconfig_3_agent_rp_valid),          //   input,    width = 1,          .valid
		.sink_data          (ad9680_jesd204_phy_reconfig_3_agent_rp_data),           //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_jesd204_phy_reconfig_3_agent_rp_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_jesd204_phy_reconfig_3_agent_rp_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_039_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_039_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_039_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_039_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_039_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_qwy7jki router_040 (
		.sink_ready         (bridge_3_s0_agent_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_3_s0_agent_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (bridge_3_s0_agent_rp_data),                     //   input,  width = 142,          .data
		.sink_startofpacket (bridge_3_s0_agent_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_3_s0_agent_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (ddr3_emif_usr_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_040_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_040_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_040_src_data),                           //  output,  width = 142,          .data
		.src_channel        (router_040_src_channel),                        //  output,   width = 43,          .channel
		.src_startofpacket  (router_040_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_041 (
		.sink_ready         (bridge_2_s0_agent_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_2_s0_agent_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (bridge_2_s0_agent_rp_data),                     //   input,  width = 142,          .data
		.sink_startofpacket (bridge_2_s0_agent_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_2_s0_agent_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (iopll_0_outclk0_clk),                           //   input,    width = 1,       clk.clk
		.reset              (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_041_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_041_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_041_src_data),                           //  output,  width = 142,          .data
		.src_channel        (router_041_src_channel),                        //  output,   width = 43,          .channel
		.src_startofpacket  (router_041_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_epc23ri router_042 (
		.sink_ready         (bridge_1_s0_agent_rp_ready),                            //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_1_s0_agent_rp_valid),                            //   input,    width = 1,          .valid
		.sink_data          (bridge_1_s0_agent_rp_data),                             //   input,  width = 142,          .data
		.sink_startofpacket (bridge_1_s0_agent_rp_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_1_s0_agent_rp_endofpacket),                      //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_042_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_042_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_042_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_042_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_042_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_xbxlrmy router_043 (
		.sink_ready         (bridge_0_s0_agent_rp_ready),                            //  output,    width = 1,      sink.ready
		.sink_valid         (bridge_0_s0_agent_rp_valid),                            //   input,    width = 1,          .valid
		.sink_data          (bridge_0_s0_agent_rp_data),                             //   input,  width = 142,          .data
		.sink_startofpacket (bridge_0_s0_agent_rp_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bridge_0_s0_agent_rp_endofpacket),                      //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_043_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_043_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_043_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_043_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_043_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_qwy7jki router_044 (
		.sink_ready         (mcu_subsystem_ram_0_s1_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (mcu_subsystem_ram_0_s1_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (mcu_subsystem_ram_0_s1_agent_rp_data),                  //   input,  width = 142,          .data
		.sink_startofpacket (mcu_subsystem_ram_0_s1_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mcu_subsystem_ram_0_s1_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_044_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_044_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_044_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_044_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_044_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_045 (
		.sink_ready         (timer_1_s1_agent_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (timer_1_s1_agent_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (timer_1_s1_agent_rp_data),                              //   input,  width = 142,          .data
		.sink_startofpacket (timer_1_s1_agent_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (timer_1_s1_agent_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_045_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_045_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_045_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_045_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_045_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_046 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                              //   input,  width = 142,          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_046_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_046_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_046_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_046_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_046_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_047 (
		.sink_ready         (gpio_s1_agent_rp_ready),                                //  output,    width = 1,      sink.ready
		.sink_valid         (gpio_s1_agent_rp_valid),                                //   input,    width = 1,          .valid
		.sink_data          (gpio_s1_agent_rp_data),                                 //   input,  width = 142,          .data
		.sink_startofpacket (gpio_s1_agent_rp_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (gpio_s1_agent_rp_endofpacket),                          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_047_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_047_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_047_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_047_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_047_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_048 (
		.sink_ready         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_0_serial_clock_reconfig_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.src_ready          (router_048_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_048_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_048_src_data),                                              //  output,  width = 142,          .data
		.src_channel        (router_048_src_channel),                                           //  output,   width = 43,          .channel
		.src_startofpacket  (router_048_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_049 (
		.sink_ready         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_data),          //   input,  width = 142,          .data
		.sink_startofpacket (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (phy_interlaken_1_serial_clock_reconfig_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.src_ready          (router_049_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_049_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_049_src_data),                                              //  output,  width = 142,          .data
		.src_channel        (router_049_src_channel),                                           //  output,   width = 43,          .channel
		.src_startofpacket  (router_049_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_router_181_omm52sq router_050 (
		.sink_ready         (spi_spi_control_port_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (spi_spi_control_port_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (spi_spi_control_port_agent_rp_data),                    //   input,  width = 142,          .data
		.sink_startofpacket (spi_spi_control_port_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (spi_spi_control_port_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_050_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_050_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_050_src_data),                                   //  output,  width = 142,          .data
		.src_channel        (router_050_src_channel),                                //  output,   width = 43,          .channel
		.src_startofpacket  (router_050_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (131),
		.PIPELINED                 (0),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.VALID_WIDTH               (43),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mcu_subsystem_cpu_0_data_master_limiter (
		.clk                    (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                              //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                              //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                               //   input,  width = 142,          .data
		.cmd_sink_channel       (router_src_channel),                                            //   input,   width = 43,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_data),          //  output,  width = 142,          .data
		.cmd_src_channel        (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_channel),       //  output,   width = 43,          .channel
		.cmd_src_startofpacket  (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                             //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                             //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                           //   input,   width = 43,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                              //   input,  width = 142,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_data),          //  output,  width = 142,          .data
		.rsp_src_channel        (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_channel),       //  output,   width = 43,          .channel
		.rsp_src_startofpacket  (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mcu_subsystem_cpu_0_data_master_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mcu_subsystem_cpu_0_data_master_limiter_cmd_valid_data)         //  output,   width = 43, cmd_valid.data
	);

	mcu_subsystem_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (119),
		.PKT_DEST_ID_L             (114),
		.PKT_SRC_ID_H              (113),
		.PKT_SRC_ID_L              (108),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (131),
		.PIPELINED                 (0),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.VALID_WIDTH               (43),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mcu_subsystem_cpu_0_instruction_master_limiter (
		.clk                    (clock_in_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                  (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                 //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                 //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                                  //   input,  width = 142,          .data
		.cmd_sink_channel       (router_001_src_channel),                                               //   input,   width = 43,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_data),          //  output,  width = 142,          .data
		.cmd_src_channel        (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_channel),       //  output,   width = 43,          .channel
		.cmd_src_startofpacket  (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                              //   input,   width = 43,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                 //   input,  width = 142,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_data),          //  output,  width = 142,          .data
		.rsp_src_channel        (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_channel),       //  output,   width = 43,          .channel
		.rsp_src_startofpacket  (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (mcu_subsystem_cpu_0_instruction_master_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_valid_data)         //  output,   width = 43, cmd_valid.data
	);

	mcu_subsystem_altera_merlin_burst_adapter_181_ycwtsua #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (103),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (43),
		.OUT_BYTE_CNT_H            (83),
		.OUT_BURSTWRAP_H           (95),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) bridge_0_s0_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                  //   input,    width = 1,       cr0.clk
		.reset                 (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_035_src_valid),                                 //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_035_src_data),                                  //   input,  width = 142,          .data
		.sink0_channel         (cmd_mux_035_src_channel),                               //   input,   width = 43,          .channel
		.sink0_startofpacket   (cmd_mux_035_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_035_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_035_src_ready),                                 //  output,    width = 1,          .ready
		.source0_valid         (bridge_0_s0_burst_adapter_source0_valid),               //  output,    width = 1,   source0.valid
		.source0_data          (bridge_0_s0_burst_adapter_source0_data),                //  output,  width = 142,          .data
		.source0_channel       (bridge_0_s0_burst_adapter_source0_channel),             //  output,   width = 43,          .channel
		.source0_startofpacket (bridge_0_s0_burst_adapter_source0_startofpacket),       //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (bridge_0_s0_burst_adapter_source0_endofpacket),         //  output,    width = 1,          .endofpacket
		.source0_ready         (bridge_0_s0_burst_adapter_source0_ready)                //   input,    width = 1,          .ready
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_pjbwj5i cmd_demux (
		.clk                 (clock_in_out_clk_clk),                                          //   input,    width = 1,        clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,  clk_reset.reset
		.sink_ready          (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel        (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_channel),       //   input,   width = 43,           .channel
		.sink_data           (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_data),          //   input,  width = 142,           .data
		.sink_startofpacket  (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket    (mcu_subsystem_cpu_0_data_master_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid          (mcu_subsystem_cpu_0_data_master_limiter_cmd_valid_data),        //   input,   width = 43, sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                          //   input,    width = 1,       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                          //  output,    width = 1,           .valid
		.src0_data           (cmd_demux_src0_data),                                           //  output,  width = 142,           .data
		.src0_channel        (cmd_demux_src0_channel),                                        //  output,   width = 43,           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                          //   input,    width = 1,       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                          //  output,    width = 1,           .valid
		.src1_data           (cmd_demux_src1_data),                                           //  output,  width = 142,           .data
		.src1_channel        (cmd_demux_src1_channel),                                        //  output,   width = 43,           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                          //   input,    width = 1,       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                          //  output,    width = 1,           .valid
		.src2_data           (cmd_demux_src2_data),                                           //  output,  width = 142,           .data
		.src2_channel        (cmd_demux_src2_channel),                                        //  output,   width = 43,           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                          //   input,    width = 1,       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                          //  output,    width = 1,           .valid
		.src3_data           (cmd_demux_src3_data),                                           //  output,  width = 142,           .data
		.src3_channel        (cmd_demux_src3_channel),                                        //  output,   width = 43,           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                          //   input,    width = 1,       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                          //  output,    width = 1,           .valid
		.src4_data           (cmd_demux_src4_data),                                           //  output,  width = 142,           .data
		.src4_channel        (cmd_demux_src4_channel),                                        //  output,   width = 43,           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                          //   input,    width = 1,       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                          //  output,    width = 1,           .valid
		.src5_data           (cmd_demux_src5_data),                                           //  output,  width = 142,           .data
		.src5_channel        (cmd_demux_src5_channel),                                        //  output,   width = 43,           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                          //   input,    width = 1,       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                          //  output,    width = 1,           .valid
		.src6_data           (cmd_demux_src6_data),                                           //  output,  width = 142,           .data
		.src6_channel        (cmd_demux_src6_channel),                                        //  output,   width = 43,           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                          //   input,    width = 1,       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                          //  output,    width = 1,           .valid
		.src7_data           (cmd_demux_src7_data),                                           //  output,  width = 142,           .data
		.src7_channel        (cmd_demux_src7_channel),                                        //  output,   width = 43,           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                          //   input,    width = 1,       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                          //  output,    width = 1,           .valid
		.src8_data           (cmd_demux_src8_data),                                           //  output,  width = 142,           .data
		.src8_channel        (cmd_demux_src8_channel),                                        //  output,   width = 43,           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                          //   input,    width = 1,       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                          //  output,    width = 1,           .valid
		.src9_data           (cmd_demux_src9_data),                                           //  output,  width = 142,           .data
		.src9_channel        (cmd_demux_src9_channel),                                        //  output,   width = 43,           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                  //  output,    width = 1,           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                    //  output,    width = 1,           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                         //   input,    width = 1,      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                         //  output,    width = 1,           .valid
		.src10_data          (cmd_demux_src10_data),                                          //  output,  width = 142,           .data
		.src10_channel       (cmd_demux_src10_channel),                                       //  output,   width = 43,           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                         //   input,    width = 1,      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                         //  output,    width = 1,           .valid
		.src11_data          (cmd_demux_src11_data),                                          //  output,  width = 142,           .data
		.src11_channel       (cmd_demux_src11_channel),                                       //  output,   width = 43,           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                         //   input,    width = 1,      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                         //  output,    width = 1,           .valid
		.src12_data          (cmd_demux_src12_data),                                          //  output,  width = 142,           .data
		.src12_channel       (cmd_demux_src12_channel),                                       //  output,   width = 43,           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                         //   input,    width = 1,      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                         //  output,    width = 1,           .valid
		.src13_data          (cmd_demux_src13_data),                                          //  output,  width = 142,           .data
		.src13_channel       (cmd_demux_src13_channel),                                       //  output,   width = 43,           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                         //   input,    width = 1,      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                         //  output,    width = 1,           .valid
		.src14_data          (cmd_demux_src14_data),                                          //  output,  width = 142,           .data
		.src14_channel       (cmd_demux_src14_channel),                                       //  output,   width = 43,           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                         //   input,    width = 1,      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                         //  output,    width = 1,           .valid
		.src15_data          (cmd_demux_src15_data),                                          //  output,  width = 142,           .data
		.src15_channel       (cmd_demux_src15_channel),                                       //  output,   width = 43,           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                         //   input,    width = 1,      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                         //  output,    width = 1,           .valid
		.src16_data          (cmd_demux_src16_data),                                          //  output,  width = 142,           .data
		.src16_channel       (cmd_demux_src16_channel),                                       //  output,   width = 43,           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                         //   input,    width = 1,      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                         //  output,    width = 1,           .valid
		.src17_data          (cmd_demux_src17_data),                                          //  output,  width = 142,           .data
		.src17_channel       (cmd_demux_src17_channel),                                       //  output,   width = 43,           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                         //   input,    width = 1,      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                         //  output,    width = 1,           .valid
		.src18_data          (cmd_demux_src18_data),                                          //  output,  width = 142,           .data
		.src18_channel       (cmd_demux_src18_channel),                                       //  output,   width = 43,           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                         //   input,    width = 1,      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                         //  output,    width = 1,           .valid
		.src19_data          (cmd_demux_src19_data),                                          //  output,  width = 142,           .data
		.src19_channel       (cmd_demux_src19_channel),                                       //  output,   width = 43,           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                         //   input,    width = 1,      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                         //  output,    width = 1,           .valid
		.src20_data          (cmd_demux_src20_data),                                          //  output,  width = 142,           .data
		.src20_channel       (cmd_demux_src20_channel),                                       //  output,   width = 43,           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                         //   input,    width = 1,      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                         //  output,    width = 1,           .valid
		.src21_data          (cmd_demux_src21_data),                                          //  output,  width = 142,           .data
		.src21_channel       (cmd_demux_src21_channel),                                       //  output,   width = 43,           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                         //   input,    width = 1,      src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                         //  output,    width = 1,           .valid
		.src22_data          (cmd_demux_src22_data),                                          //  output,  width = 142,           .data
		.src22_channel       (cmd_demux_src22_channel),                                       //  output,   width = 43,           .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                                         //   input,    width = 1,      src23.ready
		.src23_valid         (cmd_demux_src23_valid),                                         //  output,    width = 1,           .valid
		.src23_data          (cmd_demux_src23_data),                                          //  output,  width = 142,           .data
		.src23_channel       (cmd_demux_src23_channel),                                       //  output,   width = 43,           .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                                         //   input,    width = 1,      src24.ready
		.src24_valid         (cmd_demux_src24_valid),                                         //  output,    width = 1,           .valid
		.src24_data          (cmd_demux_src24_data),                                          //  output,  width = 142,           .data
		.src24_channel       (cmd_demux_src24_channel),                                       //  output,   width = 43,           .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                                         //   input,    width = 1,      src25.ready
		.src25_valid         (cmd_demux_src25_valid),                                         //  output,    width = 1,           .valid
		.src25_data          (cmd_demux_src25_data),                                          //  output,  width = 142,           .data
		.src25_channel       (cmd_demux_src25_channel),                                       //  output,   width = 43,           .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                                         //   input,    width = 1,      src26.ready
		.src26_valid         (cmd_demux_src26_valid),                                         //  output,    width = 1,           .valid
		.src26_data          (cmd_demux_src26_data),                                          //  output,  width = 142,           .data
		.src26_channel       (cmd_demux_src26_channel),                                       //  output,   width = 43,           .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                                         //   input,    width = 1,      src27.ready
		.src27_valid         (cmd_demux_src27_valid),                                         //  output,    width = 1,           .valid
		.src27_data          (cmd_demux_src27_data),                                          //  output,  width = 142,           .data
		.src27_channel       (cmd_demux_src27_channel),                                       //  output,   width = 43,           .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                                         //   input,    width = 1,      src28.ready
		.src28_valid         (cmd_demux_src28_valid),                                         //  output,    width = 1,           .valid
		.src28_data          (cmd_demux_src28_data),                                          //  output,  width = 142,           .data
		.src28_channel       (cmd_demux_src28_channel),                                       //  output,   width = 43,           .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                                         //   input,    width = 1,      src29.ready
		.src29_valid         (cmd_demux_src29_valid),                                         //  output,    width = 1,           .valid
		.src29_data          (cmd_demux_src29_data),                                          //  output,  width = 142,           .data
		.src29_channel       (cmd_demux_src29_channel),                                       //  output,   width = 43,           .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                                         //   input,    width = 1,      src30.ready
		.src30_valid         (cmd_demux_src30_valid),                                         //  output,    width = 1,           .valid
		.src30_data          (cmd_demux_src30_data),                                          //  output,  width = 142,           .data
		.src30_channel       (cmd_demux_src30_channel),                                       //  output,   width = 43,           .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                                         //   input,    width = 1,      src31.ready
		.src31_valid         (cmd_demux_src31_valid),                                         //  output,    width = 1,           .valid
		.src31_data          (cmd_demux_src31_data),                                          //  output,  width = 142,           .data
		.src31_channel       (cmd_demux_src31_channel),                                       //  output,   width = 43,           .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src32_ready         (cmd_demux_src32_ready),                                         //   input,    width = 1,      src32.ready
		.src32_valid         (cmd_demux_src32_valid),                                         //  output,    width = 1,           .valid
		.src32_data          (cmd_demux_src32_data),                                          //  output,  width = 142,           .data
		.src32_channel       (cmd_demux_src32_channel),                                       //  output,   width = 43,           .channel
		.src32_startofpacket (cmd_demux_src32_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src32_endofpacket   (cmd_demux_src32_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src33_ready         (cmd_demux_src33_ready),                                         //   input,    width = 1,      src33.ready
		.src33_valid         (cmd_demux_src33_valid),                                         //  output,    width = 1,           .valid
		.src33_data          (cmd_demux_src33_data),                                          //  output,  width = 142,           .data
		.src33_channel       (cmd_demux_src33_channel),                                       //  output,   width = 43,           .channel
		.src33_startofpacket (cmd_demux_src33_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src33_endofpacket   (cmd_demux_src33_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src34_ready         (cmd_demux_src34_ready),                                         //   input,    width = 1,      src34.ready
		.src34_valid         (cmd_demux_src34_valid),                                         //  output,    width = 1,           .valid
		.src34_data          (cmd_demux_src34_data),                                          //  output,  width = 142,           .data
		.src34_channel       (cmd_demux_src34_channel),                                       //  output,   width = 43,           .channel
		.src34_startofpacket (cmd_demux_src34_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src34_endofpacket   (cmd_demux_src34_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src35_ready         (cmd_demux_src35_ready),                                         //   input,    width = 1,      src35.ready
		.src35_valid         (cmd_demux_src35_valid),                                         //  output,    width = 1,           .valid
		.src35_data          (cmd_demux_src35_data),                                          //  output,  width = 142,           .data
		.src35_channel       (cmd_demux_src35_channel),                                       //  output,   width = 43,           .channel
		.src35_startofpacket (cmd_demux_src35_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src35_endofpacket   (cmd_demux_src35_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src36_ready         (cmd_demux_src36_ready),                                         //   input,    width = 1,      src36.ready
		.src36_valid         (cmd_demux_src36_valid),                                         //  output,    width = 1,           .valid
		.src36_data          (cmd_demux_src36_data),                                          //  output,  width = 142,           .data
		.src36_channel       (cmd_demux_src36_channel),                                       //  output,   width = 43,           .channel
		.src36_startofpacket (cmd_demux_src36_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src36_endofpacket   (cmd_demux_src36_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src37_ready         (cmd_demux_src37_ready),                                         //   input,    width = 1,      src37.ready
		.src37_valid         (cmd_demux_src37_valid),                                         //  output,    width = 1,           .valid
		.src37_data          (cmd_demux_src37_data),                                          //  output,  width = 142,           .data
		.src37_channel       (cmd_demux_src37_channel),                                       //  output,   width = 43,           .channel
		.src37_startofpacket (cmd_demux_src37_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src37_endofpacket   (cmd_demux_src37_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src38_ready         (cmd_demux_src38_ready),                                         //   input,    width = 1,      src38.ready
		.src38_valid         (cmd_demux_src38_valid),                                         //  output,    width = 1,           .valid
		.src38_data          (cmd_demux_src38_data),                                          //  output,  width = 142,           .data
		.src38_channel       (cmd_demux_src38_channel),                                       //  output,   width = 43,           .channel
		.src38_startofpacket (cmd_demux_src38_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src38_endofpacket   (cmd_demux_src38_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src39_ready         (cmd_demux_src39_ready),                                         //   input,    width = 1,      src39.ready
		.src39_valid         (cmd_demux_src39_valid),                                         //  output,    width = 1,           .valid
		.src39_data          (cmd_demux_src39_data),                                          //  output,  width = 142,           .data
		.src39_channel       (cmd_demux_src39_channel),                                       //  output,   width = 43,           .channel
		.src39_startofpacket (cmd_demux_src39_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src39_endofpacket   (cmd_demux_src39_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src40_ready         (cmd_demux_src40_ready),                                         //   input,    width = 1,      src40.ready
		.src40_valid         (cmd_demux_src40_valid),                                         //  output,    width = 1,           .valid
		.src40_data          (cmd_demux_src40_data),                                          //  output,  width = 142,           .data
		.src40_channel       (cmd_demux_src40_channel),                                       //  output,   width = 43,           .channel
		.src40_startofpacket (cmd_demux_src40_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src40_endofpacket   (cmd_demux_src40_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src41_ready         (cmd_demux_src41_ready),                                         //   input,    width = 1,      src41.ready
		.src41_valid         (cmd_demux_src41_valid),                                         //  output,    width = 1,           .valid
		.src41_data          (cmd_demux_src41_data),                                          //  output,  width = 142,           .data
		.src41_channel       (cmd_demux_src41_channel),                                       //  output,   width = 43,           .channel
		.src41_startofpacket (cmd_demux_src41_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src41_endofpacket   (cmd_demux_src41_endofpacket),                                   //  output,    width = 1,           .endofpacket
		.src42_ready         (cmd_demux_src42_ready),                                         //   input,    width = 1,      src42.ready
		.src42_valid         (cmd_demux_src42_valid),                                         //  output,    width = 1,           .valid
		.src42_data          (cmd_demux_src42_data),                                          //  output,  width = 142,           .data
		.src42_channel       (cmd_demux_src42_channel),                                       //  output,   width = 43,           .channel
		.src42_startofpacket (cmd_demux_src42_startofpacket),                                 //  output,    width = 1,           .startofpacket
		.src42_endofpacket   (cmd_demux_src42_endofpacket)                                    //  output,    width = 1,           .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_ouexq2i cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                                                 //   input,    width = 1,        clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,  clk_reset.reset
		.sink_ready         (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_channel),       //   input,   width = 43,           .channel
		.sink_data          (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_data),          //   input,  width = 142,           .data
		.sink_startofpacket (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (mcu_subsystem_cpu_0_instruction_master_limiter_cmd_valid_data),        //   input,   width = 43, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                             //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                             //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                                              //  output,  width = 142,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                           //  output,   width = 43,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                             //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                             //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                                              //  output,  width = 142,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                           //  output,   width = 43,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                             //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                             //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_001_src2_data),                                              //  output,  width = 142,           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                           //  output,   width = 43,           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                             //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                             //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_001_src3_data),                                              //  output,  width = 142,           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                           //  output,   width = 43,           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                             //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                             //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_001_src4_data),                                              //  output,  width = 142,           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                           //  output,   width = 43,           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                                        //  output,    width = 1,           .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_002 (
		.clk                (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel),       //   input,   width = 43,          .channel
		.sink_data          (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_002_src0_data),                                      //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                   //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_003 (
		.clk                (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel),       //   input,   width = 43,          .channel
		.sink_data          (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                                      //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                   //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_004 (
		.clk                (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel),       //   input,   width = 43,          .channel
		.sink_data          (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_004_src0_data),                                     //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                  //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_005 (
		.clk                (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.sink_ready         (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel),       //   input,   width = 43,          .channel
		.sink_data          (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data),          //   input,  width = 142,          .data
		.sink_startofpacket (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_005_src0_data),                                     //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_005_src0_channel),                                  //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                               //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_006 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_006_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_006_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_006_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_006_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq cmd_demux_007 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_007_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_007_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_007_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (cmd_demux_007_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                      //  output,  width = 142,          .data
		.src_channel         (cmd_mux_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src0_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_001_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_002 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_002_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_003 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_003_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src3_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_004 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_004_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src4_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_005 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_005_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src5_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_006 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_006_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src6_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_007 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_007_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src7_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_008 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_008_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src8_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_009 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_009_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_009_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src9_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                             //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_010 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_010_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_010_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src10_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src10_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_011 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_011_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_011_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src11_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src11_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_012 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_012_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_012_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src12_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src12_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_013 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_013_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_013_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src13_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src13_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_014 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_014_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_014_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src14_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src14_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_015 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_015_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_015_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src15_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src15_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_016 (
		.clk                 (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_016_src_data),                          //  output,  width = 142,          .data
		.src_channel         (cmd_mux_016_src_channel),                       //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src16_data),                          //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_017 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_017_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_017_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src17_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src17_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_yu4q5ca cmd_mux_018 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_018_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_018_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src18_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src18_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                            //   input,   width = 43,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                               //   input,  width = 142,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_019 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_019_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_019_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src19_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src19_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_020 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_020_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_020_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src20_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src20_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_021 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_021_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_021_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src21_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src21_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_022 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_022_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_022_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src22_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src22_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_023 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_023_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_023_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src23_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src23_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_024 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_024_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_024_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src24_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src24_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_025 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_025_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_025_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src25_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src25_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_026 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_026_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_026_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src26_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src26_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_027 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_027_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_027_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src27_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src27_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_028 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_028_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_028_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_028_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src28_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src28_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src28_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src28_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src28_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src28_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_029 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_029_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_029_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src29_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src29_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src29_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src29_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src29_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src29_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_030 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_030_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_030_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src30_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src30_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src30_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src30_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src30_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src30_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_031 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_031_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_031_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_031_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src31_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src31_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_yu4q5ca cmd_mux_032 (
		.clk                 (ddr3_emif_usr_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset               (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_032_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_032_src_data),                          //  output,  width = 142,          .data
		.src_channel         (cmd_mux_032_src_channel),                       //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                           //   input,   width = 43,          .channel
		.sink0_data          (crosser_out_data),                              //   input,  width = 142,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                         //   input,    width = 1,          .valid
		.sink1_channel       (crosser_002_out_channel),                       //   input,   width = 43,          .channel
		.sink1_data          (crosser_002_out_data),                          //   input,  width = 142,          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_033 (
		.clk                 (iopll_0_outclk0_clk),                           //   input,    width = 1,       clk.clk
		.reset               (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_033_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_033_src_data),                          //  output,  width = 142,          .data
		.src_channel         (cmd_mux_033_src_channel),                       //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                       //   input,   width = 43,          .channel
		.sink0_data          (crosser_001_out_data),                          //   input,  width = 142,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_vvwquki cmd_mux_034 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_034_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_034_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_034_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src34_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src34_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src34_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src34_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src34_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src34_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                            //   input,   width = 43,          .channel
		.sink1_data          (cmd_demux_001_src2_data),                               //   input,  width = 142,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_006_src0_ready),                              //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_006_src0_valid),                              //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_006_src0_channel),                            //   input,   width = 43,          .channel
		.sink2_data          (cmd_demux_006_src0_data),                               //   input,  width = 142,          .data
		.sink2_startofpacket (cmd_demux_006_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_006_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_007_src0_ready),                              //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_007_src0_valid),                              //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_007_src0_channel),                            //   input,   width = 43,          .channel
		.sink3_data          (cmd_demux_007_src0_data),                               //   input,  width = 142,          .data
		.sink3_startofpacket (cmd_demux_007_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_007_src0_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_cjob5eq cmd_mux_035 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_035_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_035_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_035_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src35_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src35_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src35_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src35_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src35_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src35_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                            //   input,   width = 43,          .channel
		.sink1_data          (cmd_demux_001_src3_data),                               //   input,  width = 142,          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                              //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                              //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                            //   input,   width = 43,          .channel
		.sink2_data          (cmd_demux_002_src0_data),                               //   input,  width = 142,          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                              //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                              //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                            //   input,   width = 43,          .channel
		.sink3_data          (cmd_demux_003_src0_data),                               //   input,  width = 142,          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                              //  output,    width = 1,     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                              //   input,    width = 1,          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                            //   input,   width = 43,          .channel
		.sink4_data          (cmd_demux_004_src0_data),                               //   input,  width = 142,          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink5_ready         (cmd_demux_005_src0_ready),                              //  output,    width = 1,     sink5.ready
		.sink5_valid         (cmd_demux_005_src0_valid),                              //   input,    width = 1,          .valid
		.sink5_channel       (cmd_demux_005_src0_channel),                            //   input,   width = 43,          .channel
		.sink5_data          (cmd_demux_005_src0_data),                               //   input,  width = 142,          .data
		.sink5_startofpacket (cmd_demux_005_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (cmd_demux_005_src0_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_yu4q5ca cmd_mux_036 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_036_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_036_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_036_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src36_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src36_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src36_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src36_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src36_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src36_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                            //   input,   width = 43,          .channel
		.sink1_data          (cmd_demux_001_src4_data),                               //   input,  width = 142,          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_037 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_037_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_037_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_037_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src37_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src37_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src37_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src37_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src37_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src37_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_038 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_038_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_038_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_038_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src38_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src38_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src38_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src38_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src38_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src38_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_039 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_039_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_039_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_039_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src39_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src39_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src39_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src39_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src39_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src39_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_040 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_040_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_040_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_040_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src40_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src40_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src40_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src40_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src40_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src40_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_041 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_041_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_041_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_041_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src41_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src41_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src41_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src41_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src41_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src41_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_ldnld3y cmd_mux_042 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_042_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_042_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (cmd_mux_042_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src42_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src42_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src42_channel),                               //   input,   width = 43,          .channel
		.sink0_data          (cmd_demux_src42_data),                                  //   input,  width = 142,          .data
		.sink0_startofpacket (cmd_demux_src42_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src42_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_008_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_008_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                   //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_src0_channel),                                //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_009_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_009_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_002 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_010_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_010_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_003 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_011_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_011_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_004 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_012_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_012_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_012_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_012_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_012_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_005 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_013_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_013_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_013_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_013_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_013_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_006 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_014_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_014_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_014_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_014_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_014_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_007 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_015_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_015_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_015_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_015_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_015_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_008 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_016_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_016_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_016_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_016_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_016_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_009 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_017_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_017_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_017_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_017_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_017_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_010 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_018_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_018_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_018_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_018_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_018_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_011 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_019_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_019_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_019_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_019_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_019_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_011_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_011_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_012 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_020_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_020_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_020_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_020_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_020_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_012_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_012_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_013 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_021_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_021_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_021_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_021_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_021_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_013_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_013_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_014 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_022_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_022_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_022_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_022_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_022_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_014_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_014_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_015 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_023_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_023_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_023_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_023_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_023_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_015_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_015_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_016 (
		.clk                (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_024_src_channel),                        //   input,   width = 43,          .channel
		.sink_data          (router_024_src_data),                           //   input,  width = 142,          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_024_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_017 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_025_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_025_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_025_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_025_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_025_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_017_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_017_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_hcqx5qi rsp_demux_018 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_026_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_026_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_026_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_026_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_026_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_018_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_018_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_018_src1_data),                               //  output,  width = 142,          .data
		.src1_channel       (rsp_demux_018_src1_channel),                            //  output,   width = 43,          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_019 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_027_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_027_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_027_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_027_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_027_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_019_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_019_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_020 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_028_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_028_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_028_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_028_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_028_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_020_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_020_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_021 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_029_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_029_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_029_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_029_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_029_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_021_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_021_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_022 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_030_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_030_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_030_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_030_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_030_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_022_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_022_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_023 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_031_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_031_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_031_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_031_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_031_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_023_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_023_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_024 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_032_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_032_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_032_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_032_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_032_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_024_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_024_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_025 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_033_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_033_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_033_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_033_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_033_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_025_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_025_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_026 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_034_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_034_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_034_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_034_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_034_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_026_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_026_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_027 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_035_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_035_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_035_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_035_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_035_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_027_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_027_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_028 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_036_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_036_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_036_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_036_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_036_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_028_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_028_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_029 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_037_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_037_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_037_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_037_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_037_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_029_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_029_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_030 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_038_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_038_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_038_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_038_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_038_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_030_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_030_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_031 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_039_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_039_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_039_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_039_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_039_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_031_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_031_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_hcqx5qi rsp_demux_032 (
		.clk                (ddr3_emif_usr_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (bridge_3_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_040_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_040_src_channel),                        //   input,   width = 43,          .channel
		.sink_data          (router_040_src_data),                           //   input,  width = 142,          .data
		.sink_startofpacket (router_040_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_040_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_032_src0_data),                       //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_032_src0_channel),                    //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket),                //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_032_src1_ready),                      //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_032_src1_valid),                      //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_032_src1_data),                       //  output,  width = 142,          .data
		.src1_channel       (rsp_demux_032_src1_channel),                    //  output,   width = 43,          .channel
		.src1_startofpacket (rsp_demux_032_src1_startofpacket),              //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_032_src1_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_033 (
		.clk                (iopll_0_outclk0_clk),                           //   input,    width = 1,       clk.clk
		.reset              (bridge_2_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_041_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_041_src_channel),                        //   input,   width = 43,          .channel
		.sink_data          (router_041_src_data),                           //   input,  width = 142,          .data
		.sink_startofpacket (router_041_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_041_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_033_src0_data),                       //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_033_src0_channel),                    //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_fjdamea rsp_demux_034 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_042_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_042_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_042_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_042_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_042_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_034_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_034_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_034_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_034_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_034_src1_data),                               //  output,  width = 142,          .data
		.src1_channel       (rsp_demux_034_src1_channel),                            //  output,   width = 43,          .channel
		.src1_startofpacket (rsp_demux_034_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_034_src1_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_034_src2_ready),                              //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_034_src2_valid),                              //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_034_src2_data),                               //  output,  width = 142,          .data
		.src2_channel       (rsp_demux_034_src2_channel),                            //  output,   width = 43,          .channel
		.src2_startofpacket (rsp_demux_034_src2_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_034_src2_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_034_src3_ready),                              //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_034_src3_valid),                              //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_034_src3_data),                               //  output,  width = 142,          .data
		.src3_channel       (rsp_demux_034_src3_channel),                            //  output,   width = 43,          .channel
		.src3_startofpacket (rsp_demux_034_src3_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_034_src3_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_tlalgpq rsp_demux_035 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_043_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_043_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_043_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_043_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_043_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_035_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_035_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_035_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_035_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_035_src1_data),                               //  output,  width = 142,          .data
		.src1_channel       (rsp_demux_035_src1_channel),                            //  output,   width = 43,          .channel
		.src1_startofpacket (rsp_demux_035_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_035_src1_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_035_src2_ready),                              //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_035_src2_valid),                              //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_035_src2_data),                               //  output,  width = 142,          .data
		.src2_channel       (rsp_demux_035_src2_channel),                            //  output,   width = 43,          .channel
		.src2_startofpacket (rsp_demux_035_src2_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_035_src2_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_035_src3_ready),                              //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_035_src3_valid),                              //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_035_src3_data),                               //  output,  width = 142,          .data
		.src3_channel       (rsp_demux_035_src3_channel),                            //  output,   width = 43,          .channel
		.src3_startofpacket (rsp_demux_035_src3_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_035_src3_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src4_ready         (rsp_demux_035_src4_ready),                              //   input,    width = 1,      src4.ready
		.src4_valid         (rsp_demux_035_src4_valid),                              //  output,    width = 1,          .valid
		.src4_data          (rsp_demux_035_src4_data),                               //  output,  width = 142,          .data
		.src4_channel       (rsp_demux_035_src4_channel),                            //  output,   width = 43,          .channel
		.src4_startofpacket (rsp_demux_035_src4_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (rsp_demux_035_src4_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src5_ready         (rsp_demux_035_src5_ready),                              //   input,    width = 1,      src5.ready
		.src5_valid         (rsp_demux_035_src5_valid),                              //  output,    width = 1,          .valid
		.src5_data          (rsp_demux_035_src5_data),                               //  output,  width = 142,          .data
		.src5_channel       (rsp_demux_035_src5_channel),                            //  output,   width = 43,          .channel
		.src5_startofpacket (rsp_demux_035_src5_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src5_endofpacket   (rsp_demux_035_src5_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_hcqx5qi rsp_demux_036 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_044_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_044_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_044_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_044_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_044_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_036_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_036_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_036_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_036_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_036_src1_data),                               //  output,  width = 142,          .data
		.src1_channel       (rsp_demux_036_src1_channel),                            //  output,   width = 43,          .channel
		.src1_startofpacket (rsp_demux_036_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_036_src1_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_037 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_045_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_045_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_045_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_045_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_045_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_037_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_037_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_038 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_046_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_046_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_046_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_046_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_046_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_038_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_038_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_039 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_047_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_047_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_047_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_047_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_047_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_039_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_039_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_040 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_048_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_048_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_048_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_048_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_048_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_040_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_040_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_041 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_049_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_049_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_049_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_049_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_049_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_041_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_041_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_demultiplexer_181_b4cu2fq rsp_demux_042 (
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_050_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_050_src_channel),                                //   input,   width = 43,          .channel
		.sink_data          (router_050_src_data),                                   //   input,  width = 142,          .data
		.sink_startofpacket (router_050_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_050_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_042_src0_data),                               //  output,  width = 142,          .data
		.src0_channel       (rsp_demux_042_src0_channel),                            //  output,   width = 43,          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_i6g3gcq rsp_mux (
		.clk                  (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_src_valid),                                     //  output,    width = 1,          .valid
		.src_data             (rsp_mux_src_data),                                      //  output,  width = 142,          .data
		.src_channel          (rsp_mux_src_channel),                                   //  output,   width = 43,          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                               //  output,    width = 1,          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                  //  output,    width = 1,     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                  //   input,    width = 1,          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                //   input,   width = 43,          .channel
		.sink0_data           (rsp_demux_src0_data),                                   //   input,  width = 142,          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                              //  output,    width = 1,     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                              //   input,    width = 1,          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                            //   input,   width = 43,          .channel
		.sink1_data           (rsp_demux_001_src0_data),                               //   input,  width = 142,          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                              //  output,    width = 1,     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                              //   input,    width = 1,          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                            //   input,   width = 43,          .channel
		.sink2_data           (rsp_demux_002_src0_data),                               //   input,  width = 142,          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                              //  output,    width = 1,     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                              //   input,    width = 1,          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                            //   input,   width = 43,          .channel
		.sink3_data           (rsp_demux_003_src0_data),                               //   input,  width = 142,          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                              //  output,    width = 1,     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                              //   input,    width = 1,          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                            //   input,   width = 43,          .channel
		.sink4_data           (rsp_demux_004_src0_data),                               //   input,  width = 142,          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                              //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                              //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                            //   input,   width = 43,          .channel
		.sink5_data           (rsp_demux_005_src0_data),                               //   input,  width = 142,          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                              //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                              //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                            //   input,   width = 43,          .channel
		.sink6_data           (rsp_demux_006_src0_data),                               //   input,  width = 142,          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                              //  output,    width = 1,     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                              //   input,    width = 1,          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                            //   input,   width = 43,          .channel
		.sink7_data           (rsp_demux_007_src0_data),                               //   input,  width = 142,          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                              //  output,    width = 1,     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                              //   input,    width = 1,          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                            //   input,   width = 43,          .channel
		.sink8_data           (rsp_demux_008_src0_data),                               //   input,  width = 142,          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                              //  output,    width = 1,     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                              //   input,    width = 1,          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                            //   input,   width = 43,          .channel
		.sink9_data           (rsp_demux_009_src0_data),                               //   input,  width = 142,          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                              //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                              //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                            //   input,   width = 43,          .channel
		.sink10_data          (rsp_demux_010_src0_data),                               //   input,  width = 142,          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                              //  output,    width = 1,    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                              //   input,    width = 1,          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                            //   input,   width = 43,          .channel
		.sink11_data          (rsp_demux_011_src0_data),                               //   input,  width = 142,          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                              //  output,    width = 1,    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                              //   input,    width = 1,          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                            //   input,   width = 43,          .channel
		.sink12_data          (rsp_demux_012_src0_data),                               //   input,  width = 142,          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                              //  output,    width = 1,    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                              //   input,    width = 1,          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                            //   input,   width = 43,          .channel
		.sink13_data          (rsp_demux_013_src0_data),                               //   input,  width = 142,          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                              //  output,    width = 1,    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                              //   input,    width = 1,          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                            //   input,   width = 43,          .channel
		.sink14_data          (rsp_demux_014_src0_data),                               //   input,  width = 142,          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                              //  output,    width = 1,    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                              //   input,    width = 1,          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                            //   input,   width = 43,          .channel
		.sink15_data          (rsp_demux_015_src0_data),                               //   input,  width = 142,          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                              //  output,    width = 1,    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                              //   input,    width = 1,          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                            //   input,   width = 43,          .channel
		.sink16_data          (rsp_demux_016_src0_data),                               //   input,  width = 142,          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                              //  output,    width = 1,    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                              //   input,    width = 1,          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                            //   input,   width = 43,          .channel
		.sink17_data          (rsp_demux_017_src0_data),                               //   input,  width = 142,          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                              //  output,    width = 1,    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                              //   input,    width = 1,          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                            //   input,   width = 43,          .channel
		.sink18_data          (rsp_demux_018_src0_data),                               //   input,  width = 142,          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                              //  output,    width = 1,    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                              //   input,    width = 1,          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                            //   input,   width = 43,          .channel
		.sink19_data          (rsp_demux_019_src0_data),                               //   input,  width = 142,          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                              //  output,    width = 1,    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                              //   input,    width = 1,          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                            //   input,   width = 43,          .channel
		.sink20_data          (rsp_demux_020_src0_data),                               //   input,  width = 142,          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                              //  output,    width = 1,    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                              //   input,    width = 1,          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                            //   input,   width = 43,          .channel
		.sink21_data          (rsp_demux_021_src0_data),                               //   input,  width = 142,          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                              //  output,    width = 1,    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                              //   input,    width = 1,          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                            //   input,   width = 43,          .channel
		.sink22_data          (rsp_demux_022_src0_data),                               //   input,  width = 142,          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                              //  output,    width = 1,    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                              //   input,    width = 1,          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                            //   input,   width = 43,          .channel
		.sink23_data          (rsp_demux_023_src0_data),                               //   input,  width = 142,          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                              //  output,    width = 1,    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                              //   input,    width = 1,          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                            //   input,   width = 43,          .channel
		.sink24_data          (rsp_demux_024_src0_data),                               //   input,  width = 142,          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                              //  output,    width = 1,    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                              //   input,    width = 1,          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                            //   input,   width = 43,          .channel
		.sink25_data          (rsp_demux_025_src0_data),                               //   input,  width = 142,          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                              //  output,    width = 1,    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                              //   input,    width = 1,          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                            //   input,   width = 43,          .channel
		.sink26_data          (rsp_demux_026_src0_data),                               //   input,  width = 142,          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                              //  output,    width = 1,    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                              //   input,    width = 1,          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                            //   input,   width = 43,          .channel
		.sink27_data          (rsp_demux_027_src0_data),                               //   input,  width = 142,          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),                              //  output,    width = 1,    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),                              //   input,    width = 1,          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),                            //   input,   width = 43,          .channel
		.sink28_data          (rsp_demux_028_src0_data),                               //   input,  width = 142,          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),                              //  output,    width = 1,    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),                              //   input,    width = 1,          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),                            //   input,   width = 43,          .channel
		.sink29_data          (rsp_demux_029_src0_data),                               //   input,  width = 142,          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                              //  output,    width = 1,    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                              //   input,    width = 1,          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                            //   input,   width = 43,          .channel
		.sink30_data          (rsp_demux_030_src0_data),                               //   input,  width = 142,          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                              //  output,    width = 1,    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                              //   input,    width = 1,          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                            //   input,   width = 43,          .channel
		.sink31_data          (rsp_demux_031_src0_data),                               //   input,  width = 142,          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink32_ready         (crosser_003_out_ready),                                 //  output,    width = 1,    sink32.ready
		.sink32_valid         (crosser_003_out_valid),                                 //   input,    width = 1,          .valid
		.sink32_channel       (crosser_003_out_channel),                               //   input,   width = 43,          .channel
		.sink32_data          (crosser_003_out_data),                                  //   input,  width = 142,          .data
		.sink32_startofpacket (crosser_003_out_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink32_endofpacket   (crosser_003_out_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink33_ready         (crosser_005_out_ready),                                 //  output,    width = 1,    sink33.ready
		.sink33_valid         (crosser_005_out_valid),                                 //   input,    width = 1,          .valid
		.sink33_channel       (crosser_005_out_channel),                               //   input,   width = 43,          .channel
		.sink33_data          (crosser_005_out_data),                                  //   input,  width = 142,          .data
		.sink33_startofpacket (crosser_005_out_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink33_endofpacket   (crosser_005_out_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink34_ready         (rsp_demux_034_src0_ready),                              //  output,    width = 1,    sink34.ready
		.sink34_valid         (rsp_demux_034_src0_valid),                              //   input,    width = 1,          .valid
		.sink34_channel       (rsp_demux_034_src0_channel),                            //   input,   width = 43,          .channel
		.sink34_data          (rsp_demux_034_src0_data),                               //   input,  width = 142,          .data
		.sink34_startofpacket (rsp_demux_034_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink34_endofpacket   (rsp_demux_034_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink35_ready         (rsp_demux_035_src0_ready),                              //  output,    width = 1,    sink35.ready
		.sink35_valid         (rsp_demux_035_src0_valid),                              //   input,    width = 1,          .valid
		.sink35_channel       (rsp_demux_035_src0_channel),                            //   input,   width = 43,          .channel
		.sink35_data          (rsp_demux_035_src0_data),                               //   input,  width = 142,          .data
		.sink35_startofpacket (rsp_demux_035_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink35_endofpacket   (rsp_demux_035_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink36_ready         (rsp_demux_036_src0_ready),                              //  output,    width = 1,    sink36.ready
		.sink36_valid         (rsp_demux_036_src0_valid),                              //   input,    width = 1,          .valid
		.sink36_channel       (rsp_demux_036_src0_channel),                            //   input,   width = 43,          .channel
		.sink36_data          (rsp_demux_036_src0_data),                               //   input,  width = 142,          .data
		.sink36_startofpacket (rsp_demux_036_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink36_endofpacket   (rsp_demux_036_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink37_ready         (rsp_demux_037_src0_ready),                              //  output,    width = 1,    sink37.ready
		.sink37_valid         (rsp_demux_037_src0_valid),                              //   input,    width = 1,          .valid
		.sink37_channel       (rsp_demux_037_src0_channel),                            //   input,   width = 43,          .channel
		.sink37_data          (rsp_demux_037_src0_data),                               //   input,  width = 142,          .data
		.sink37_startofpacket (rsp_demux_037_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink37_endofpacket   (rsp_demux_037_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink38_ready         (rsp_demux_038_src0_ready),                              //  output,    width = 1,    sink38.ready
		.sink38_valid         (rsp_demux_038_src0_valid),                              //   input,    width = 1,          .valid
		.sink38_channel       (rsp_demux_038_src0_channel),                            //   input,   width = 43,          .channel
		.sink38_data          (rsp_demux_038_src0_data),                               //   input,  width = 142,          .data
		.sink38_startofpacket (rsp_demux_038_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink38_endofpacket   (rsp_demux_038_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink39_ready         (rsp_demux_039_src0_ready),                              //  output,    width = 1,    sink39.ready
		.sink39_valid         (rsp_demux_039_src0_valid),                              //   input,    width = 1,          .valid
		.sink39_channel       (rsp_demux_039_src0_channel),                            //   input,   width = 43,          .channel
		.sink39_data          (rsp_demux_039_src0_data),                               //   input,  width = 142,          .data
		.sink39_startofpacket (rsp_demux_039_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink39_endofpacket   (rsp_demux_039_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink40_ready         (rsp_demux_040_src0_ready),                              //  output,    width = 1,    sink40.ready
		.sink40_valid         (rsp_demux_040_src0_valid),                              //   input,    width = 1,          .valid
		.sink40_channel       (rsp_demux_040_src0_channel),                            //   input,   width = 43,          .channel
		.sink40_data          (rsp_demux_040_src0_data),                               //   input,  width = 142,          .data
		.sink40_startofpacket (rsp_demux_040_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink40_endofpacket   (rsp_demux_040_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink41_ready         (rsp_demux_041_src0_ready),                              //  output,    width = 1,    sink41.ready
		.sink41_valid         (rsp_demux_041_src0_valid),                              //   input,    width = 1,          .valid
		.sink41_channel       (rsp_demux_041_src0_channel),                            //   input,   width = 43,          .channel
		.sink41_data          (rsp_demux_041_src0_data),                               //   input,  width = 142,          .data
		.sink41_startofpacket (rsp_demux_041_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink41_endofpacket   (rsp_demux_041_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink42_ready         (rsp_demux_042_src0_ready),                              //  output,    width = 1,    sink42.ready
		.sink42_valid         (rsp_demux_042_src0_valid),                              //   input,    width = 1,          .valid
		.sink42_channel       (rsp_demux_042_src0_channel),                            //   input,   width = 43,          .channel
		.sink42_data          (rsp_demux_042_src0_data),                               //   input,  width = 142,          .data
		.sink42_startofpacket (rsp_demux_042_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink42_endofpacket   (rsp_demux_042_src0_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_l2pj6yy rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_001_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_018_src1_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_018_src1_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_018_src1_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_018_src1_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_018_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_018_src1_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                                 //   input,    width = 1,          .valid
		.sink1_channel       (crosser_004_out_channel),                               //   input,   width = 43,          .channel
		.sink1_data          (crosser_004_out_data),                                  //   input,  width = 142,          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_034_src1_ready),                              //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_034_src1_valid),                              //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_034_src1_channel),                            //   input,   width = 43,          .channel
		.sink2_data          (rsp_demux_034_src1_data),                               //   input,  width = 142,          .data
		.sink2_startofpacket (rsp_demux_034_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_034_src1_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_035_src1_ready),                              //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_035_src1_valid),                              //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_035_src1_channel),                            //   input,   width = 43,          .channel
		.sink3_data          (rsp_demux_035_src1_data),                               //   input,  width = 142,          .data
		.sink3_startofpacket (rsp_demux_035_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_035_src1_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_036_src1_ready),                              //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_036_src1_valid),                              //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_036_src1_channel),                            //   input,   width = 43,          .channel
		.sink4_data          (rsp_demux_036_src1_data),                               //   input,  width = 142,          .data
		.sink4_startofpacket (rsp_demux_036_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_036_src1_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_002 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_002_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_035_src2_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_035_src2_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_035_src2_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_035_src2_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_035_src2_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_035_src2_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_003 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_003_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_035_src3_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_035_src3_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_035_src3_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_035_src3_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_035_src3_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_035_src3_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_004 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_004_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_004_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_035_src4_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_035_src4_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_035_src4_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_035_src4_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_035_src4_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_035_src4_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_005 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_005_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_005_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_035_src5_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_035_src5_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_035_src5_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_035_src5_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_035_src5_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_035_src5_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_006 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_006_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_006_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_034_src2_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_034_src2_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_034_src2_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_034_src2_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_034_src2_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_034_src2_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_multiplexer_181_xmsm5ty rsp_mux_007 (
		.clk                 (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset               (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_007_src_data),                                  //  output,  width = 142,          .data
		.src_channel         (rsp_mux_007_src_channel),                               //  output,   width = 43,          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_034_src3_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_034_src3_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_034_src3_channel),                            //   input,   width = 43,          .channel
		.sink0_data          (rsp_demux_034_src3_data),                               //   input,  width = 142,          .data
		.sink0_startofpacket (rsp_demux_034_src3_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_034_src3_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	mcu_subsystem_altera_merlin_width_adapter_181_fah3coa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (142),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (250),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_wr_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                      //   input,   width = 43,          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (rsp_mux_002_src_data),                                         //   input,  width = 142,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_data),          //  output,  width = 250,          .data
		.out_channel          (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_fah3coa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (142),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (250),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_rd_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_003_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_003_src_channel),                                      //   input,   width = 43,          .channel
		.in_startofpacket     (rsp_mux_003_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_003_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_003_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (rsp_mux_003_src_data),                                         //   input,  width = 142,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_data),          //  output,  width = 250,          .data
		.out_channel          (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_fah3coa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (142),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (250),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_wr_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_004_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_004_src_channel),                                     //   input,   width = 43,          .channel
		.in_startofpacket     (rsp_mux_004_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_004_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_004_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (rsp_mux_004_src_data),                                        //   input,  width = 142,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_data),          //  output,  width = 250,          .data
		.out_channel          (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_fah3coa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (129),
		.IN_PKT_RESPONSE_STATUS_L      (128),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (130),
		.IN_PKT_ORI_BURST_SIZE_H       (132),
		.IN_ST_DATA_W                  (142),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (237),
		.OUT_PKT_RESPONSE_STATUS_L     (236),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (238),
		.OUT_PKT_ORI_BURST_SIZE_H      (240),
		.OUT_ST_DATA_W                 (250),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_rd_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_005_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_005_src_channel),                                     //   input,   width = 43,          .channel
		.in_startofpacket     (rsp_mux_005_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_005_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_005_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (rsp_mux_005_src_data),                                        //   input,  width = 142,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_data),          //  output,  width = 250,          .data
		.out_channel          (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_2pbsqei #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (250),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (142),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_wr_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                       //   input,   width = 43,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                          //   input,  width = 250,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_data),          //  output,  width = 142,          .data
		.out_channel          (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_2pbsqei #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (250),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (142),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9680_dma_m_dest_axi_rd_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                       //   input,   width = 43,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                          //   input,  width = 250,          .data
		.out_endofpacket      (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_data),          //  output,  width = 142,          .data
		.out_channel          (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9680_dma_m_dest_axi_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_2pbsqei #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (250),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (142),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_wr_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_valid             (router_004_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_004_src_channel),                                      //   input,   width = 43,          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_004_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_004_src_data),                                         //   input,  width = 250,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_data),          //  output,  width = 142,          .data
		.out_channel          (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_merlin_width_adapter_181_2pbsqei #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (237),
		.IN_PKT_RESPONSE_STATUS_L      (236),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (238),
		.IN_PKT_ORI_BURST_SIZE_H       (240),
		.IN_ST_DATA_W                  (250),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (129),
		.OUT_PKT_RESPONSE_STATUS_L     (128),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (130),
		.OUT_PKT_ORI_BURST_SIZE_H      (132),
		.OUT_ST_DATA_W                 (142),
		.ST_CHANNEL_W                  (43),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (0)
	) ad9144_dma_m_src_axi_rd_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_valid             (router_005_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_005_src_channel),                                      //   input,   width = 43,          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_005_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_005_src_data),                                         //   input,  width = 250,          .data
		.out_endofpacket      (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_data),          //  output,  width = 142,          .data
		.out_channel          (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_channel),       //  output,   width = 43,          .channel
		.out_valid            (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ad9144_dma_m_src_axi_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clock_in_out_clk_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (ddr3_emif_usr_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_3_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src32_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src32_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src32_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src32_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src32_channel),                               //   input,   width = 43,              .channel
		.in_data           (cmd_demux_src32_data),                                  //   input,  width = 142,              .data
		.out_ready         (crosser_out_ready),                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                   //  output,   width = 43,              .channel
		.out_data          (crosser_out_data),                                      //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (clock_in_out_clk_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk0_clk),                                   //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_2_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src33_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src33_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src33_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src33_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src33_channel),                               //   input,   width = 43,              .channel
		.in_data           (cmd_demux_src33_data),                                  //   input,  width = 142,              .data
		.out_ready         (crosser_001_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                               //  output,   width = 43,              .channel
		.out_data          (crosser_001_out_data),                                  //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (clock_in_out_clk_clk),                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (ddr3_emif_usr_clk_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (bridge_3_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                            //   input,   width = 43,              .channel
		.in_data           (cmd_demux_001_src1_data),                               //   input,  width = 142,              .data
		.out_ready         (crosser_002_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                               //  output,   width = 43,              .channel
		.out_data          (crosser_002_out_data),                                  //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (ddr3_emif_usr_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_3_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_032_src0_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_032_src0_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_032_src0_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_032_src0_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_032_src0_channel),                            //   input,   width = 43,              .channel
		.in_data           (rsp_demux_032_src0_data),                               //   input,  width = 142,              .data
		.out_ready         (crosser_003_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                               //  output,   width = 43,              .channel
		.out_data          (crosser_003_out_data),                                  //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_004 (
		.in_clk            (ddr3_emif_usr_clk_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_3_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_032_src1_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_032_src1_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_032_src1_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_032_src1_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_032_src1_channel),                            //   input,   width = 43,              .channel
		.in_data           (rsp_demux_032_src1_data),                               //   input,  width = 142,              .data
		.out_ready         (crosser_004_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                               //  output,   width = 43,              .channel
		.out_data          (crosser_004_out_data),                                  //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

	mcu_subsystem_altera_avalon_st_handshake_clock_crosser_181_v2cf3ea #(
		.DATA_WIDTH          (142),
		.BITS_PER_SYMBOL     (142),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (43),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_005 (
		.in_clk            (iopll_0_outclk0_clk),                                   //   input,    width = 1,        in_clk.clk
		.in_reset          (bridge_2_s0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clock_in_out_clk_clk),                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (mcu_subsystem_cpu_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_033_src0_ready),                              //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_033_src0_valid),                              //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_033_src0_startofpacket),                      //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_033_src0_endofpacket),                        //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_033_src0_channel),                            //   input,   width = 43,              .channel
		.in_data           (rsp_demux_033_src0_data),                               //   input,  width = 142,              .data
		.out_ready         (crosser_005_out_ready),                                 //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                 //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                         //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                           //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                               //  output,   width = 43,              .channel
		.out_data          (crosser_005_out_data),                                  //  output,  width = 142,              .data
		.in_empty          (1'b0),                                                  // (terminated),                             
		.in_error          (1'b0),                                                  // (terminated),                             
		.out_empty         (),                                                      // (terminated),                             
		.out_error         ()                                                       // (terminated),                             
	);

endmodule
