// ethernet_altera_mm_interconnect_181_bojlpna.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module ethernet_altera_mm_interconnect_181_bojlpna (
		input  wire [31:0]  dma_tx_mm_read_address,                       //                         dma_tx_mm_read.address
		output wire         dma_tx_mm_read_waitrequest,                   //                                       .waitrequest
		input  wire [10:0]  dma_tx_mm_read_burstcount,                    //                                       .burstcount
		input  wire [31:0]  dma_tx_mm_read_byteenable,                    //                                       .byteenable
		input  wire         dma_tx_mm_read_read,                          //                                       .read
		output wire [255:0] dma_tx_mm_read_readdata,                      //                                       .readdata
		output wire         dma_tx_mm_read_readdatavalid,                 //                                       .readdatavalid
		input  wire [31:0]  dma_rx_mm_write_address,                      //                        dma_rx_mm_write.address
		output wire         dma_rx_mm_write_waitrequest,                  //                                       .waitrequest
		input  wire [7:0]   dma_rx_mm_write_burstcount,                   //                                       .burstcount
		input  wire [31:0]  dma_rx_mm_write_byteenable,                   //                                       .byteenable
		input  wire         dma_rx_mm_write_write,                        //                                       .write
		input  wire [255:0] dma_rx_mm_write_writedata,                    //                                       .writedata
		output wire [30:0]  dma_bridge_s0_address,                        //                          dma_bridge_s0.address
		output wire         dma_bridge_s0_write,                          //                                       .write
		output wire         dma_bridge_s0_read,                           //                                       .read
		input  wire [31:0]  dma_bridge_s0_readdata,                       //                                       .readdata
		output wire [31:0]  dma_bridge_s0_writedata,                      //                                       .writedata
		output wire [10:0]  dma_bridge_s0_burstcount,                     //                                       .burstcount
		output wire [3:0]   dma_bridge_s0_byteenable,                     //                                       .byteenable
		input  wire         dma_bridge_s0_readdatavalid,                  //                                       .readdatavalid
		input  wire         dma_bridge_s0_waitrequest,                    //                                       .waitrequest
		output wire         dma_bridge_s0_debugaccess,                    //                                       .debugaccess
		input  wire         dma_bridge_reset_reset_bridge_in_reset_reset, // dma_bridge_reset_reset_bridge_in_reset.reset
		input  wire         clock_out_clk_clk                             //                          clock_out_clk.clk
	);

	wire          dma_tx_mm_read_translator_avalon_universal_master_0_waitrequest;    // dma_tx_mm_read_agent:av_waitrequest -> dma_tx_mm_read_translator:uav_waitrequest
	wire  [255:0] dma_tx_mm_read_translator_avalon_universal_master_0_readdata;       // dma_tx_mm_read_agent:av_readdata -> dma_tx_mm_read_translator:uav_readdata
	wire          dma_tx_mm_read_translator_avalon_universal_master_0_debugaccess;    // dma_tx_mm_read_translator:uav_debugaccess -> dma_tx_mm_read_agent:av_debugaccess
	wire   [31:0] dma_tx_mm_read_translator_avalon_universal_master_0_address;        // dma_tx_mm_read_translator:uav_address -> dma_tx_mm_read_agent:av_address
	wire          dma_tx_mm_read_translator_avalon_universal_master_0_read;           // dma_tx_mm_read_translator:uav_read -> dma_tx_mm_read_agent:av_read
	wire   [31:0] dma_tx_mm_read_translator_avalon_universal_master_0_byteenable;     // dma_tx_mm_read_translator:uav_byteenable -> dma_tx_mm_read_agent:av_byteenable
	wire          dma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid;  // dma_tx_mm_read_agent:av_readdatavalid -> dma_tx_mm_read_translator:uav_readdatavalid
	wire          dma_tx_mm_read_translator_avalon_universal_master_0_lock;           // dma_tx_mm_read_translator:uav_lock -> dma_tx_mm_read_agent:av_lock
	wire          dma_tx_mm_read_translator_avalon_universal_master_0_write;          // dma_tx_mm_read_translator:uav_write -> dma_tx_mm_read_agent:av_write
	wire  [255:0] dma_tx_mm_read_translator_avalon_universal_master_0_writedata;      // dma_tx_mm_read_translator:uav_writedata -> dma_tx_mm_read_agent:av_writedata
	wire   [15:0] dma_tx_mm_read_translator_avalon_universal_master_0_burstcount;     // dma_tx_mm_read_translator:uav_burstcount -> dma_tx_mm_read_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> dma_tx_mm_read_agent:rp_valid
	wire  [375:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> dma_tx_mm_read_agent:rp_data
	wire          rsp_mux_src_ready;                                                  // dma_tx_mm_read_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> dma_tx_mm_read_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> dma_tx_mm_read_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> dma_tx_mm_read_agent:rp_endofpacket
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_waitrequest;   // dma_rx_mm_write_agent:av_waitrequest -> dma_rx_mm_write_translator:uav_waitrequest
	wire  [255:0] dma_rx_mm_write_translator_avalon_universal_master_0_readdata;      // dma_rx_mm_write_agent:av_readdata -> dma_rx_mm_write_translator:uav_readdata
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_debugaccess;   // dma_rx_mm_write_translator:uav_debugaccess -> dma_rx_mm_write_agent:av_debugaccess
	wire   [31:0] dma_rx_mm_write_translator_avalon_universal_master_0_address;       // dma_rx_mm_write_translator:uav_address -> dma_rx_mm_write_agent:av_address
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_read;          // dma_rx_mm_write_translator:uav_read -> dma_rx_mm_write_agent:av_read
	wire   [31:0] dma_rx_mm_write_translator_avalon_universal_master_0_byteenable;    // dma_rx_mm_write_translator:uav_byteenable -> dma_rx_mm_write_agent:av_byteenable
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid; // dma_rx_mm_write_agent:av_readdatavalid -> dma_rx_mm_write_translator:uav_readdatavalid
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_lock;          // dma_rx_mm_write_translator:uav_lock -> dma_rx_mm_write_agent:av_lock
	wire          dma_rx_mm_write_translator_avalon_universal_master_0_write;         // dma_rx_mm_write_translator:uav_write -> dma_rx_mm_write_agent:av_write
	wire  [255:0] dma_rx_mm_write_translator_avalon_universal_master_0_writedata;     // dma_rx_mm_write_translator:uav_writedata -> dma_rx_mm_write_agent:av_writedata
	wire   [12:0] dma_rx_mm_write_translator_avalon_universal_master_0_burstcount;    // dma_rx_mm_write_translator:uav_burstcount -> dma_rx_mm_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> dma_rx_mm_write_agent:rp_valid
	wire  [375:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> dma_rx_mm_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                              // dma_rx_mm_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> dma_rx_mm_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> dma_rx_mm_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> dma_rx_mm_write_agent:rp_endofpacket
	wire   [31:0] dma_bridge_s0_agent_m0_readdata;                                    // dma_bridge_s0_translator:uav_readdata -> dma_bridge_s0_agent:m0_readdata
	wire          dma_bridge_s0_agent_m0_waitrequest;                                 // dma_bridge_s0_translator:uav_waitrequest -> dma_bridge_s0_agent:m0_waitrequest
	wire          dma_bridge_s0_agent_m0_debugaccess;                                 // dma_bridge_s0_agent:m0_debugaccess -> dma_bridge_s0_translator:uav_debugaccess
	wire   [31:0] dma_bridge_s0_agent_m0_address;                                     // dma_bridge_s0_agent:m0_address -> dma_bridge_s0_translator:uav_address
	wire    [3:0] dma_bridge_s0_agent_m0_byteenable;                                  // dma_bridge_s0_agent:m0_byteenable -> dma_bridge_s0_translator:uav_byteenable
	wire          dma_bridge_s0_agent_m0_read;                                        // dma_bridge_s0_agent:m0_read -> dma_bridge_s0_translator:uav_read
	wire          dma_bridge_s0_agent_m0_readdatavalid;                               // dma_bridge_s0_translator:uav_readdatavalid -> dma_bridge_s0_agent:m0_readdatavalid
	wire          dma_bridge_s0_agent_m0_lock;                                        // dma_bridge_s0_agent:m0_lock -> dma_bridge_s0_translator:uav_lock
	wire   [31:0] dma_bridge_s0_agent_m0_writedata;                                   // dma_bridge_s0_agent:m0_writedata -> dma_bridge_s0_translator:uav_writedata
	wire          dma_bridge_s0_agent_m0_write;                                       // dma_bridge_s0_agent:m0_write -> dma_bridge_s0_translator:uav_write
	wire   [12:0] dma_bridge_s0_agent_m0_burstcount;                                  // dma_bridge_s0_agent:m0_burstcount -> dma_bridge_s0_translator:uav_burstcount
	wire          dma_bridge_s0_agent_rf_source_valid;                                // dma_bridge_s0_agent:rf_source_valid -> dma_bridge_s0_agent_rsp_fifo:in_valid
	wire  [124:0] dma_bridge_s0_agent_rf_source_data;                                 // dma_bridge_s0_agent:rf_source_data -> dma_bridge_s0_agent_rsp_fifo:in_data
	wire          dma_bridge_s0_agent_rf_source_ready;                                // dma_bridge_s0_agent_rsp_fifo:in_ready -> dma_bridge_s0_agent:rf_source_ready
	wire          dma_bridge_s0_agent_rf_source_startofpacket;                        // dma_bridge_s0_agent:rf_source_startofpacket -> dma_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          dma_bridge_s0_agent_rf_source_endofpacket;                          // dma_bridge_s0_agent:rf_source_endofpacket -> dma_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          dma_bridge_s0_agent_rsp_fifo_out_valid;                             // dma_bridge_s0_agent_rsp_fifo:out_valid -> dma_bridge_s0_agent:rf_sink_valid
	wire  [124:0] dma_bridge_s0_agent_rsp_fifo_out_data;                              // dma_bridge_s0_agent_rsp_fifo:out_data -> dma_bridge_s0_agent:rf_sink_data
	wire          dma_bridge_s0_agent_rsp_fifo_out_ready;                             // dma_bridge_s0_agent:rf_sink_ready -> dma_bridge_s0_agent_rsp_fifo:out_ready
	wire          dma_bridge_s0_agent_rsp_fifo_out_startofpacket;                     // dma_bridge_s0_agent_rsp_fifo:out_startofpacket -> dma_bridge_s0_agent:rf_sink_startofpacket
	wire          dma_bridge_s0_agent_rsp_fifo_out_endofpacket;                       // dma_bridge_s0_agent_rsp_fifo:out_endofpacket -> dma_bridge_s0_agent:rf_sink_endofpacket
	wire          dma_bridge_s0_agent_rdata_fifo_src_valid;                           // dma_bridge_s0_agent:rdata_fifo_src_valid -> dma_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] dma_bridge_s0_agent_rdata_fifo_src_data;                            // dma_bridge_s0_agent:rdata_fifo_src_data -> dma_bridge_s0_agent_rdata_fifo:in_data
	wire          dma_bridge_s0_agent_rdata_fifo_src_ready;                           // dma_bridge_s0_agent_rdata_fifo:in_ready -> dma_bridge_s0_agent:rdata_fifo_src_ready
	wire          dma_bridge_s0_agent_rdata_fifo_out_valid;                           // dma_bridge_s0_agent_rdata_fifo:out_valid -> dma_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] dma_bridge_s0_agent_rdata_fifo_out_data;                            // dma_bridge_s0_agent_rdata_fifo:out_data -> dma_bridge_s0_agent:rdata_fifo_sink_data
	wire          dma_bridge_s0_agent_rdata_fifo_out_ready;                           // dma_bridge_s0_agent:rdata_fifo_sink_ready -> dma_bridge_s0_agent_rdata_fifo:out_ready
	wire          dma_tx_mm_read_agent_cp_valid;                                      // dma_tx_mm_read_agent:cp_valid -> router:sink_valid
	wire  [375:0] dma_tx_mm_read_agent_cp_data;                                       // dma_tx_mm_read_agent:cp_data -> router:sink_data
	wire          dma_tx_mm_read_agent_cp_ready;                                      // router:sink_ready -> dma_tx_mm_read_agent:cp_ready
	wire          dma_tx_mm_read_agent_cp_startofpacket;                              // dma_tx_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_tx_mm_read_agent_cp_endofpacket;                                // dma_tx_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [375:0] router_src_data;                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                   // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          dma_rx_mm_write_agent_cp_valid;                                     // dma_rx_mm_write_agent:cp_valid -> router_001:sink_valid
	wire  [375:0] dma_rx_mm_write_agent_cp_data;                                      // dma_rx_mm_write_agent:cp_data -> router_001:sink_data
	wire          dma_rx_mm_write_agent_cp_ready;                                     // router_001:sink_ready -> dma_rx_mm_write_agent:cp_ready
	wire          dma_rx_mm_write_agent_cp_startofpacket;                             // dma_rx_mm_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          dma_rx_mm_write_agent_cp_endofpacket;                               // dma_rx_mm_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [375:0] router_001_src_data;                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          dma_bridge_s0_agent_rp_valid;                                       // dma_bridge_s0_agent:rp_valid -> router_002:sink_valid
	wire  [123:0] dma_bridge_s0_agent_rp_data;                                        // dma_bridge_s0_agent:rp_data -> router_002:sink_data
	wire          dma_bridge_s0_agent_rp_ready;                                       // router_002:sink_ready -> dma_bridge_s0_agent:rp_ready
	wire          dma_bridge_s0_agent_rp_startofpacket;                               // dma_bridge_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          dma_bridge_s0_agent_rp_endofpacket;                                 // dma_bridge_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          dma_bridge_s0_burst_adapter_source0_valid;                          // dma_bridge_s0_burst_adapter:source0_valid -> dma_bridge_s0_agent:cp_valid
	wire  [123:0] dma_bridge_s0_burst_adapter_source0_data;                           // dma_bridge_s0_burst_adapter:source0_data -> dma_bridge_s0_agent:cp_data
	wire          dma_bridge_s0_burst_adapter_source0_ready;                          // dma_bridge_s0_agent:cp_ready -> dma_bridge_s0_burst_adapter:source0_ready
	wire    [1:0] dma_bridge_s0_burst_adapter_source0_channel;                        // dma_bridge_s0_burst_adapter:source0_channel -> dma_bridge_s0_agent:cp_channel
	wire          dma_bridge_s0_burst_adapter_source0_startofpacket;                  // dma_bridge_s0_burst_adapter:source0_startofpacket -> dma_bridge_s0_agent:cp_startofpacket
	wire          dma_bridge_s0_burst_adapter_source0_endofpacket;                    // dma_bridge_s0_burst_adapter:source0_endofpacket -> dma_bridge_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [375:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [375:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [375:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [375:0] rsp_demux_src1_data;                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> dma_bridge_s0_rsp_width_adapter:in_valid
	wire  [123:0] router_002_src_data;                                                // router_002:src_data -> dma_bridge_s0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                               // dma_bridge_s0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                             // router_002:src_channel -> dma_bridge_s0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> dma_bridge_s0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> dma_bridge_s0_rsp_width_adapter:in_endofpacket
	wire          dma_bridge_s0_rsp_width_adapter_src_valid;                          // dma_bridge_s0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [375:0] dma_bridge_s0_rsp_width_adapter_src_data;                           // dma_bridge_s0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          dma_bridge_s0_rsp_width_adapter_src_ready;                          // rsp_demux:sink_ready -> dma_bridge_s0_rsp_width_adapter:out_ready
	wire    [1:0] dma_bridge_s0_rsp_width_adapter_src_channel;                        // dma_bridge_s0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          dma_bridge_s0_rsp_width_adapter_src_startofpacket;                  // dma_bridge_s0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          dma_bridge_s0_rsp_width_adapter_src_endofpacket;                    // dma_bridge_s0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> dma_bridge_s0_cmd_width_adapter:in_valid
	wire  [375:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> dma_bridge_s0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                  // dma_bridge_s0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> dma_bridge_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> dma_bridge_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> dma_bridge_s0_cmd_width_adapter:in_endofpacket
	wire          dma_bridge_s0_cmd_width_adapter_src_valid;                          // dma_bridge_s0_cmd_width_adapter:out_valid -> dma_bridge_s0_burst_adapter:sink0_valid
	wire  [123:0] dma_bridge_s0_cmd_width_adapter_src_data;                           // dma_bridge_s0_cmd_width_adapter:out_data -> dma_bridge_s0_burst_adapter:sink0_data
	wire          dma_bridge_s0_cmd_width_adapter_src_ready;                          // dma_bridge_s0_burst_adapter:sink0_ready -> dma_bridge_s0_cmd_width_adapter:out_ready
	wire    [1:0] dma_bridge_s0_cmd_width_adapter_src_channel;                        // dma_bridge_s0_cmd_width_adapter:out_channel -> dma_bridge_s0_burst_adapter:sink0_channel
	wire          dma_bridge_s0_cmd_width_adapter_src_startofpacket;                  // dma_bridge_s0_cmd_width_adapter:out_startofpacket -> dma_bridge_s0_burst_adapter:sink0_startofpacket
	wire          dma_bridge_s0_cmd_width_adapter_src_endofpacket;                    // dma_bridge_s0_cmd_width_adapter:out_endofpacket -> dma_bridge_s0_burst_adapter:sink0_endofpacket

	ethernet_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (11),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (16),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) dma_tx_mm_read_translator (
		.clk                    (clock_out_clk_clk),                                                                                                                                                                                                                                                     //   input,    width = 1,                       clk.clk
		.reset                  (dma_bridge_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                          //   input,    width = 1,                     reset.reset
		.uav_address            (dma_tx_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                                           //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (dma_tx_mm_read_translator_avalon_universal_master_0_burstcount),                                                                                                                                                                                                        //  output,   width = 16,                          .burstcount
		.uav_read               (dma_tx_mm_read_translator_avalon_universal_master_0_read),                                                                                                                                                                                                              //  output,    width = 1,                          .read
		.uav_write              (dma_tx_mm_read_translator_avalon_universal_master_0_write),                                                                                                                                                                                                             //  output,    width = 1,                          .write
		.uav_waitrequest        (dma_tx_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                                                                                                                                                       //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                                                                                                                                                     //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dma_tx_mm_read_translator_avalon_universal_master_0_byteenable),                                                                                                                                                                                                        //  output,   width = 32,                          .byteenable
		.uav_readdata           (dma_tx_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                                          //   input,  width = 256,                          .readdata
		.uav_writedata          (dma_tx_mm_read_translator_avalon_universal_master_0_writedata),                                                                                                                                                                                                         //  output,  width = 256,                          .writedata
		.uav_lock               (dma_tx_mm_read_translator_avalon_universal_master_0_lock),                                                                                                                                                                                                              //  output,    width = 1,                          .lock
		.uav_debugaccess        (dma_tx_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                                                                                                                                                       //  output,    width = 1,                          .debugaccess
		.av_address             (dma_tx_mm_read_address),                                                                                                                                                                                                                                                //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (dma_tx_mm_read_waitrequest),                                                                                                                                                                                                                                            //  output,    width = 1,                          .waitrequest
		.av_burstcount          (dma_tx_mm_read_burstcount),                                                                                                                                                                                                                                             //   input,   width = 11,                          .burstcount
		.av_byteenable          (dma_tx_mm_read_byteenable),                                                                                                                                                                                                                                             //   input,   width = 32,                          .byteenable
		.av_read                (dma_tx_mm_read_read),                                                                                                                                                                                                                                                   //   input,    width = 1,                          .read
		.av_readdata            (dma_tx_mm_read_readdata),                                                                                                                                                                                                                                               //  output,  width = 256,                          .readdata
		.av_readdatavalid       (dma_tx_mm_read_readdatavalid),                                                                                                                                                                                                                                          //  output,    width = 1,                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_write               (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writedata           (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                         
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                         
		.av_response            (),                                                                                                                                                                                                                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                                                                                                                                                                                                                       // (terminated),                                         
	);

	ethernet_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (13),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) dma_rx_mm_write_translator (
		.clk                    (clock_out_clk_clk),                                                  //   input,    width = 1,                       clk.clk
		.reset                  (dma_bridge_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1,                     reset.reset
		.uav_address            (dma_rx_mm_write_translator_avalon_universal_master_0_address),       //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (dma_rx_mm_write_translator_avalon_universal_master_0_burstcount),    //  output,   width = 13,                          .burstcount
		.uav_read               (dma_rx_mm_write_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (dma_rx_mm_write_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (dma_rx_mm_write_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dma_rx_mm_write_translator_avalon_universal_master_0_byteenable),    //  output,   width = 32,                          .byteenable
		.uav_readdata           (dma_rx_mm_write_translator_avalon_universal_master_0_readdata),      //   input,  width = 256,                          .readdata
		.uav_writedata          (dma_rx_mm_write_translator_avalon_universal_master_0_writedata),     //  output,  width = 256,                          .writedata
		.uav_lock               (dma_rx_mm_write_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (dma_rx_mm_write_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (dma_rx_mm_write_address),                                            //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (dma_rx_mm_write_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (dma_rx_mm_write_burstcount),                                         //   input,    width = 8,                          .burstcount
		.av_byteenable          (dma_rx_mm_write_byteenable),                                         //   input,   width = 32,                          .byteenable
		.av_write               (dma_rx_mm_write_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (dma_rx_mm_write_writedata),                                          //   input,  width = 256,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                         
		.av_begintransfer       (1'b0),                                                               // (terminated),                                         
		.av_chipselect          (1'b0),                                                               // (terminated),                                         
		.av_read                (1'b0),                                                               // (terminated),                                         
		.av_readdata            (),                                                                   // (terminated),                                         
		.av_readdatavalid       (),                                                                   // (terminated),                                         
		.av_lock                (1'b0),                                                               // (terminated),                                         
		.av_debugaccess         (1'b0),                                                               // (terminated),                                         
		.uav_clken              (),                                                                   // (terminated),                                         
		.av_clken               (1'b1),                                                               // (terminated),                                         
		.uav_response           (2'b00),                                                              // (terminated),                                         
		.av_response            (),                                                                   // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                         
		.av_writeresponsevalid  ()                                                                    // (terminated),                                         
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (31),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (11),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_bridge_s0_translator (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dma_bridge_s0_agent_m0_address),               //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (dma_bridge_s0_agent_m0_burstcount),            //   input,  width = 13,                         .burstcount
		.uav_read               (dma_bridge_s0_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (dma_bridge_s0_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (dma_bridge_s0_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_bridge_s0_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dma_bridge_s0_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (dma_bridge_s0_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (dma_bridge_s0_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (dma_bridge_s0_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (dma_bridge_s0_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (dma_bridge_s0_address),                        //  output,  width = 31,      avalon_anti_slave_0.address
		.av_write               (dma_bridge_s0_write),                          //  output,   width = 1,                         .write
		.av_read                (dma_bridge_s0_read),                           //  output,   width = 1,                         .read
		.av_readdata            (dma_bridge_s0_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (dma_bridge_s0_writedata),                      //  output,  width = 32,                         .writedata
		.av_burstcount          (dma_bridge_s0_burstcount),                     //  output,  width = 11,                         .burstcount
		.av_byteenable          (dma_bridge_s0_byteenable),                     //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (dma_bridge_s0_readdatavalid),                  //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (dma_bridge_s0_waitrequest),                    //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (dma_bridge_s0_debugaccess),                    //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	ethernet_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (375),
		.PKT_DOMAIN_H              (374),
		.PKT_DOMAIN_L              (373),
		.PKT_SNOOP_H               (372),
		.PKT_SNOOP_L               (369),
		.PKT_BARRIER_H             (368),
		.PKT_BARRIER_L             (367),
		.PKT_ORI_BURST_SIZE_H      (366),
		.PKT_ORI_BURST_SIZE_L      (364),
		.PKT_RESPONSE_STATUS_H     (363),
		.PKT_RESPONSE_STATUS_L     (362),
		.PKT_QOS_H                 (351),
		.PKT_QOS_L                 (351),
		.PKT_DATA_SIDEBAND_H       (349),
		.PKT_DATA_SIDEBAND_L       (349),
		.PKT_ADDR_SIDEBAND_H       (348),
		.PKT_ADDR_SIDEBAND_L       (348),
		.PKT_BURST_TYPE_H          (347),
		.PKT_BURST_TYPE_L          (346),
		.PKT_CACHE_H               (361),
		.PKT_CACHE_L               (358),
		.PKT_THREAD_ID_H           (354),
		.PKT_THREAD_ID_L           (354),
		.PKT_BURST_SIZE_H          (345),
		.PKT_BURST_SIZE_L          (343),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (350),
		.PKT_PROTECTION_H          (357),
		.PKT_PROTECTION_L          (355),
		.PKT_BURSTWRAP_H           (342),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (352),
		.PKT_SRC_ID_L              (352),
		.PKT_DEST_ID_H             (353),
		.PKT_DEST_ID_L             (353),
		.ST_DATA_W                 (376),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (16),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) dma_tx_mm_read_agent (
		.clk                   (clock_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                 (dma_bridge_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.av_address            (dma_tx_mm_read_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (dma_tx_mm_read_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dma_tx_mm_read_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dma_tx_mm_read_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dma_tx_mm_read_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dma_tx_mm_read_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dma_tx_mm_read_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dma_tx_mm_read_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dma_tx_mm_read_translator_avalon_universal_master_0_burstcount),    //   input,   width = 16,          .burstcount
		.av_debugaccess        (dma_tx_mm_read_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dma_tx_mm_read_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dma_tx_mm_read_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dma_tx_mm_read_agent_cp_data),                                      //  output,  width = 376,          .data
		.cp_startofpacket      (dma_tx_mm_read_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dma_tx_mm_read_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dma_tx_mm_read_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                 //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                  //   input,  width = 376,          .data
		.rp_channel            (rsp_mux_src_channel),                                               //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                 //  output,    width = 1,          .ready
		.av_response           (),                                                                  // (terminated),                         
		.av_writeresponsevalid ()                                                                   // (terminated),                         
	);

	ethernet_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (375),
		.PKT_DOMAIN_H              (374),
		.PKT_DOMAIN_L              (373),
		.PKT_SNOOP_H               (372),
		.PKT_SNOOP_L               (369),
		.PKT_BARRIER_H             (368),
		.PKT_BARRIER_L             (367),
		.PKT_ORI_BURST_SIZE_H      (366),
		.PKT_ORI_BURST_SIZE_L      (364),
		.PKT_RESPONSE_STATUS_H     (363),
		.PKT_RESPONSE_STATUS_L     (362),
		.PKT_QOS_H                 (351),
		.PKT_QOS_L                 (351),
		.PKT_DATA_SIDEBAND_H       (349),
		.PKT_DATA_SIDEBAND_L       (349),
		.PKT_ADDR_SIDEBAND_H       (348),
		.PKT_ADDR_SIDEBAND_L       (348),
		.PKT_BURST_TYPE_H          (347),
		.PKT_BURST_TYPE_L          (346),
		.PKT_CACHE_H               (361),
		.PKT_CACHE_L               (358),
		.PKT_THREAD_ID_H           (354),
		.PKT_THREAD_ID_L           (354),
		.PKT_BURST_SIZE_H          (345),
		.PKT_BURST_SIZE_L          (343),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (350),
		.PKT_PROTECTION_H          (357),
		.PKT_PROTECTION_L          (355),
		.PKT_BURSTWRAP_H           (342),
		.PKT_BURSTWRAP_L           (342),
		.PKT_BYTE_CNT_H            (341),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (352),
		.PKT_SRC_ID_L              (352),
		.PKT_DEST_ID_H             (353),
		.PKT_DEST_ID_L             (353),
		.ST_DATA_W                 (376),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (13),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) dma_rx_mm_write_agent (
		.clk                   (clock_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (dma_bridge_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1, clk_reset.reset
		.av_address            (dma_rx_mm_write_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (dma_rx_mm_write_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dma_rx_mm_write_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dma_rx_mm_write_translator_avalon_universal_master_0_writedata),     //   input,  width = 256,          .writedata
		.av_readdata           (dma_rx_mm_write_translator_avalon_universal_master_0_readdata),      //  output,  width = 256,          .readdata
		.av_waitrequest        (dma_rx_mm_write_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dma_rx_mm_write_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dma_rx_mm_write_translator_avalon_universal_master_0_byteenable),    //   input,   width = 32,          .byteenable
		.av_burstcount         (dma_rx_mm_write_translator_avalon_universal_master_0_burstcount),    //   input,   width = 13,          .burstcount
		.av_debugaccess        (dma_rx_mm_write_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dma_rx_mm_write_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dma_rx_mm_write_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dma_rx_mm_write_agent_cp_data),                                      //  output,  width = 376,          .data
		.cp_startofpacket      (dma_rx_mm_write_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dma_rx_mm_write_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dma_rx_mm_write_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                              //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                               //   input,  width = 376,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                            //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                              //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (114),
		.PKT_ORI_BURST_SIZE_L      (112),
		.PKT_RESPONSE_STATUS_H     (111),
		.PKT_RESPONSE_STATUS_L     (110),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (98),
		.PKT_PROTECTION_H          (105),
		.PKT_PROTECTION_L          (103),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (90),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (100),
		.PKT_DEST_ID_H             (101),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_bridge_s0_agent (
		.clk                     (clock_out_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (dma_bridge_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (dma_bridge_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (dma_bridge_s0_agent_m0_burstcount),                 //  output,   width = 13,                .burstcount
		.m0_byteenable           (dma_bridge_s0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (dma_bridge_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (dma_bridge_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (dma_bridge_s0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (dma_bridge_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (dma_bridge_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (dma_bridge_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (dma_bridge_s0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (dma_bridge_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (dma_bridge_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dma_bridge_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (dma_bridge_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (dma_bridge_s0_agent_rp_data),                       //  output,  width = 124,                .data
		.rp_startofpacket        (dma_bridge_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (dma_bridge_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (dma_bridge_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (dma_bridge_s0_burst_adapter_source0_data),          //   input,  width = 124,                .data
		.cp_startofpacket        (dma_bridge_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (dma_bridge_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (dma_bridge_s0_burst_adapter_source0_channel),       //   input,    width = 2,                .channel
		.rf_sink_ready           (dma_bridge_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_bridge_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dma_bridge_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_bridge_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dma_bridge_s0_agent_rsp_fifo_out_data),             //   input,  width = 125,                .data
		.rf_source_ready         (dma_bridge_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dma_bridge_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (dma_bridge_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_bridge_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (dma_bridge_s0_agent_rf_source_data),                //  output,  width = 125,                .data
		.rdata_fifo_sink_ready   (dma_bridge_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_bridge_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dma_bridge_s0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (dma_bridge_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_bridge_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dma_bridge_s0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                               // (terminated),                               
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_bridge_s0_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset             (dma_bridge_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (dma_bridge_s0_agent_rf_source_data),             //   input,  width = 125,        in.data
		.in_valid          (dma_bridge_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dma_bridge_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dma_bridge_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dma_bridge_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dma_bridge_s0_agent_rsp_fifo_out_data),          //  output,  width = 125,       out.data
		.out_valid         (dma_bridge_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dma_bridge_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dma_bridge_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dma_bridge_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_bridge_s0_agent_rdata_fifo (
		.clk               (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset             (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (dma_bridge_s0_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (dma_bridge_s0_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (dma_bridge_s0_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (dma_bridge_s0_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (dma_bridge_s0_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (dma_bridge_s0_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                        // (terminated),                        
		.csr_read          (1'b0),                                         // (terminated),                        
		.csr_write         (1'b0),                                         // (terminated),                        
		.csr_readdata      (),                                             // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated),                        
		.almost_full_data  (),                                             // (terminated),                        
		.almost_empty_data (),                                             // (terminated),                        
		.in_startofpacket  (1'b0),                                         // (terminated),                        
		.in_endofpacket    (1'b0),                                         // (terminated),                        
		.out_startofpacket (),                                             // (terminated),                        
		.out_endofpacket   (),                                             // (terminated),                        
		.in_empty          (1'b0),                                         // (terminated),                        
		.out_empty         (),                                             // (terminated),                        
		.in_error          (1'b0),                                         // (terminated),                        
		.out_error         (),                                             // (terminated),                        
		.in_channel        (1'b0),                                         // (terminated),                        
		.out_channel       ()                                              // (terminated),                        
	);

	ethernet_altera_merlin_router_181_tiz4wla router (
		.sink_ready         (dma_tx_mm_read_agent_cp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (dma_tx_mm_read_agent_cp_valid),                //   input,    width = 1,          .valid
		.sink_data          (dma_tx_mm_read_agent_cp_data),                 //   input,  width = 376,          .data
		.sink_startofpacket (dma_tx_mm_read_agent_cp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_tx_mm_read_agent_cp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_src_data),                              //  output,  width = 376,          .data
		.src_channel        (router_src_channel),                           //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_tiz4wla router_001 (
		.sink_ready         (dma_rx_mm_write_agent_cp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (dma_rx_mm_write_agent_cp_valid),               //   input,    width = 1,          .valid
		.sink_data          (dma_rx_mm_write_agent_cp_data),                //   input,  width = 376,          .data
		.sink_startofpacket (dma_rx_mm_write_agent_cp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_rx_mm_write_agent_cp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                          //  output,  width = 376,          .data
		.src_channel        (router_001_src_channel),                       //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_4vjfevy router_002 (
		.sink_ready         (dma_bridge_s0_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (dma_bridge_s0_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (dma_bridge_s0_agent_rp_data),                  //   input,  width = 124,          .data
		.sink_startofpacket (dma_bridge_s0_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_bridge_s0_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                          //  output,  width = 124,          .data
		.src_channel        (router_002_src_channel),                       //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_burst_adapter_181_25jky2a #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (98),
		.PKT_BYTE_CNT_H            (89),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (90),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (86),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_bridge_s0_burst_adapter (
		.clk                   (clock_out_clk_clk),                                 //   input,    width = 1,       cr0.clk
		.reset                 (dma_bridge_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (dma_bridge_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (dma_bridge_s0_cmd_width_adapter_src_data),          //   input,  width = 124,          .data
		.sink0_channel         (dma_bridge_s0_cmd_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink0_startofpacket   (dma_bridge_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (dma_bridge_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (dma_bridge_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (dma_bridge_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (dma_bridge_s0_burst_adapter_source0_data),          //  output,  width = 124,          .data
		.source0_channel       (dma_bridge_s0_burst_adapter_source0_channel),       //  output,    width = 2,          .channel
		.source0_startofpacket (dma_bridge_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (dma_bridge_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (dma_bridge_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ethernet_altera_merlin_demultiplexer_181_rjblapi cmd_demux (
		.clk                (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                           //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                              //   input,  width = 376,          .data
		.sink_startofpacket (router_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                          //  output,  width = 376,          .data
		.src0_channel       (cmd_demux_src0_channel),                       //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_rjblapi cmd_demux_001 (
		.clk                (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                       //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                          //   input,  width = 376,          .data
		.sink_startofpacket (router_001_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                      //  output,  width = 376,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                   //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_lsgunpy cmd_mux (
		.clk                 (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset               (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                             //  output,  width = 376,          .data
		.src_channel         (cmd_mux_src_channel),                          //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                          //   input,  width = 376,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //   input,  width = 376,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_2vo2s3a rsp_demux (
		.clk                (clock_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (dma_bridge_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.sink_ready         (dma_bridge_s0_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (dma_bridge_s0_rsp_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink_data          (dma_bridge_s0_rsp_width_adapter_src_data),          //   input,  width = 376,          .data
		.sink_startofpacket (dma_bridge_s0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_bridge_s0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (dma_bridge_s0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                               //  output,  width = 376,          .data
		.src0_channel       (rsp_demux_src0_channel),                            //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                               //  output,  width = 376,          .data
		.src1_channel       (rsp_demux_src1_channel),                            //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_uwbxjty rsp_mux (
		.clk                 (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset               (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                             //  output,  width = 376,          .data
		.src_channel         (rsp_mux_src_channel),                          //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                          //   input,  width = 376,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_uwbxjty rsp_mux_001 (
		.clk                 (clock_out_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset               (dma_bridge_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                         //  output,  width = 376,          .data
		.src_channel         (rsp_mux_001_src_channel),                      //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                       //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                          //   input,  width = 376,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_width_adapter_181_a6nwici #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (89),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (90),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (111),
		.IN_PKT_RESPONSE_STATUS_L      (110),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (112),
		.IN_PKT_ORI_BURST_SIZE_H       (114),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (341),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (345),
		.OUT_PKT_BURST_SIZE_L          (343),
		.OUT_PKT_RESPONSE_STATUS_H     (363),
		.OUT_PKT_RESPONSE_STATUS_L     (362),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (347),
		.OUT_PKT_BURST_TYPE_L          (346),
		.OUT_PKT_ORI_BURST_SIZE_L      (364),
		.OUT_PKT_ORI_BURST_SIZE_H      (366),
		.OUT_ST_DATA_W                 (376),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_bridge_s0_rsp_width_adapter (
		.clk                  (clock_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (dma_bridge_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                              //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                            //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                              //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                               //   input,  width = 124,          .data
		.out_endofpacket      (dma_bridge_s0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_bridge_s0_rsp_width_adapter_src_data),          //  output,  width = 376,          .data
		.out_channel          (dma_bridge_s0_rsp_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (dma_bridge_s0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_bridge_s0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_bridge_s0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated),                         
	);

	ethernet_altera_merlin_width_adapter_181_bkyxkea #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (341),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (342),
		.IN_PKT_BURSTWRAP_L            (342),
		.IN_PKT_BURST_SIZE_H           (345),
		.IN_PKT_BURST_SIZE_L           (343),
		.IN_PKT_RESPONSE_STATUS_H      (363),
		.IN_PKT_RESPONSE_STATUS_L      (362),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (347),
		.IN_PKT_BURST_TYPE_L           (346),
		.IN_PKT_ORI_BURST_SIZE_L       (364),
		.IN_PKT_ORI_BURST_SIZE_H       (366),
		.IN_ST_DATA_W                  (376),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (89),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (111),
		.OUT_PKT_RESPONSE_STATUS_L     (110),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (112),
		.OUT_PKT_ORI_BURST_SIZE_H      (114),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_bridge_s0_cmd_width_adapter (
		.clk                  (clock_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (dma_bridge_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                               //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                 //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                  //   input,  width = 376,          .data
		.out_endofpacket      (dma_bridge_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_bridge_s0_cmd_width_adapter_src_data),          //  output,  width = 124,          .data
		.out_channel          (dma_bridge_s0_cmd_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (dma_bridge_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_bridge_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_bridge_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated),                         
	);

endmodule
