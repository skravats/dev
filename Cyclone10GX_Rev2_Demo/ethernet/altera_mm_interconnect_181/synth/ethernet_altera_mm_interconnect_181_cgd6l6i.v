// ethernet_altera_mm_interconnect_181_cgd6l6i.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module ethernet_altera_mm_interconnect_181_cgd6l6i (
		input  wire [10:0]  mem_bridge_m0_address,                        //                          mem_bridge_m0.address
		output wire         mem_bridge_m0_waitrequest,                    //                                       .waitrequest
		input  wire [4:0]   mem_bridge_m0_burstcount,                     //                                       .burstcount
		input  wire [3:0]   mem_bridge_m0_byteenable,                     //                                       .byteenable
		input  wire         mem_bridge_m0_read,                           //                                       .read
		output wire [31:0]  mem_bridge_m0_readdata,                       //                                       .readdata
		output wire         mem_bridge_m0_readdatavalid,                  //                                       .readdatavalid
		input  wire         mem_bridge_m0_write,                          //                                       .write
		input  wire [31:0]  mem_bridge_m0_writedata,                      //                                       .writedata
		input  wire         mem_bridge_m0_debugaccess,                    //                                       .debugaccess
		output wire [7:0]   mac_control_port_address,                     //                       mac_control_port.address
		output wire         mac_control_port_write,                       //                                       .write
		output wire         mac_control_port_read,                        //                                       .read
		input  wire [31:0]  mac_control_port_readdata,                    //                                       .readdata
		output wire [31:0]  mac_control_port_writedata,                   //                                       .writedata
		input  wire         mac_control_port_waitrequest,                 //                                       .waitrequest
		output wire [2:0]   dma_rx_csr_address,                           //                             dma_rx_csr.address
		output wire         dma_rx_csr_write,                             //                                       .write
		output wire         dma_rx_csr_read,                              //                                       .read
		input  wire [31:0]  dma_rx_csr_readdata,                          //                                       .readdata
		output wire [31:0]  dma_rx_csr_writedata,                         //                                       .writedata
		output wire [3:0]   dma_rx_csr_byteenable,                        //                                       .byteenable
		output wire [2:0]   dma_tx_csr_address,                           //                             dma_tx_csr.address
		output wire         dma_tx_csr_write,                             //                                       .write
		output wire         dma_tx_csr_read,                              //                                       .read
		input  wire [31:0]  dma_tx_csr_readdata,                          //                                       .readdata
		output wire [31:0]  dma_tx_csr_writedata,                         //                                       .writedata
		output wire [3:0]   dma_tx_csr_byteenable,                        //                                       .byteenable
		output wire         dma_rx_descriptor_slave_write,                //                dma_rx_descriptor_slave.write
		output wire [255:0] dma_rx_descriptor_slave_writedata,            //                                       .writedata
		output wire [31:0]  dma_rx_descriptor_slave_byteenable,           //                                       .byteenable
		input  wire         dma_rx_descriptor_slave_waitrequest,          //                                       .waitrequest
		output wire         dma_tx_descriptor_slave_write,                //                dma_tx_descriptor_slave.write
		output wire [255:0] dma_tx_descriptor_slave_writedata,            //                                       .writedata
		output wire [31:0]  dma_tx_descriptor_slave_byteenable,           //                                       .byteenable
		input  wire         dma_tx_descriptor_slave_waitrequest,          //                                       .waitrequest
		output wire [0:0]   dma_rx_response_address,                      //                        dma_rx_response.address
		output wire         dma_rx_response_read,                         //                                       .read
		input  wire [31:0]  dma_rx_response_readdata,                     //                                       .readdata
		output wire [3:0]   dma_rx_response_byteenable,                   //                                       .byteenable
		input  wire         dma_rx_response_waitrequest,                  //                                       .waitrequest
		input  wire         mem_bridge_reset_reset_bridge_in_reset_reset, // mem_bridge_reset_reset_bridge_in_reset.reset
		input  wire         clock_out_clk_clk                             //                          clock_out_clk.clk
	);

	wire          mem_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // mem_bridge_m0_agent:av_waitrequest -> mem_bridge_m0_translator:uav_waitrequest
	wire   [31:0] mem_bridge_m0_translator_avalon_universal_master_0_readdata;      // mem_bridge_m0_agent:av_readdata -> mem_bridge_m0_translator:uav_readdata
	wire          mem_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // mem_bridge_m0_translator:uav_debugaccess -> mem_bridge_m0_agent:av_debugaccess
	wire   [10:0] mem_bridge_m0_translator_avalon_universal_master_0_address;       // mem_bridge_m0_translator:uav_address -> mem_bridge_m0_agent:av_address
	wire          mem_bridge_m0_translator_avalon_universal_master_0_read;          // mem_bridge_m0_translator:uav_read -> mem_bridge_m0_agent:av_read
	wire    [3:0] mem_bridge_m0_translator_avalon_universal_master_0_byteenable;    // mem_bridge_m0_translator:uav_byteenable -> mem_bridge_m0_agent:av_byteenable
	wire          mem_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // mem_bridge_m0_agent:av_readdatavalid -> mem_bridge_m0_translator:uav_readdatavalid
	wire          mem_bridge_m0_translator_avalon_universal_master_0_lock;          // mem_bridge_m0_translator:uav_lock -> mem_bridge_m0_agent:av_lock
	wire          mem_bridge_m0_translator_avalon_universal_master_0_write;         // mem_bridge_m0_translator:uav_write -> mem_bridge_m0_agent:av_write
	wire   [31:0] mem_bridge_m0_translator_avalon_universal_master_0_writedata;     // mem_bridge_m0_translator:uav_writedata -> mem_bridge_m0_agent:av_writedata
	wire    [6:0] mem_bridge_m0_translator_avalon_universal_master_0_burstcount;    // mem_bridge_m0_translator:uav_burstcount -> mem_bridge_m0_agent:av_burstcount
	wire   [31:0] mac_control_port_agent_m0_readdata;                               // mac_control_port_translator:uav_readdata -> mac_control_port_agent:m0_readdata
	wire          mac_control_port_agent_m0_waitrequest;                            // mac_control_port_translator:uav_waitrequest -> mac_control_port_agent:m0_waitrequest
	wire          mac_control_port_agent_m0_debugaccess;                            // mac_control_port_agent:m0_debugaccess -> mac_control_port_translator:uav_debugaccess
	wire   [10:0] mac_control_port_agent_m0_address;                                // mac_control_port_agent:m0_address -> mac_control_port_translator:uav_address
	wire    [3:0] mac_control_port_agent_m0_byteenable;                             // mac_control_port_agent:m0_byteenable -> mac_control_port_translator:uav_byteenable
	wire          mac_control_port_agent_m0_read;                                   // mac_control_port_agent:m0_read -> mac_control_port_translator:uav_read
	wire          mac_control_port_agent_m0_readdatavalid;                          // mac_control_port_translator:uav_readdatavalid -> mac_control_port_agent:m0_readdatavalid
	wire          mac_control_port_agent_m0_lock;                                   // mac_control_port_agent:m0_lock -> mac_control_port_translator:uav_lock
	wire   [31:0] mac_control_port_agent_m0_writedata;                              // mac_control_port_agent:m0_writedata -> mac_control_port_translator:uav_writedata
	wire          mac_control_port_agent_m0_write;                                  // mac_control_port_agent:m0_write -> mac_control_port_translator:uav_write
	wire    [2:0] mac_control_port_agent_m0_burstcount;                             // mac_control_port_agent:m0_burstcount -> mac_control_port_translator:uav_burstcount
	wire          mac_control_port_agent_rf_source_valid;                           // mac_control_port_agent:rf_source_valid -> mac_control_port_agent_rsp_fifo:in_valid
	wire   [98:0] mac_control_port_agent_rf_source_data;                            // mac_control_port_agent:rf_source_data -> mac_control_port_agent_rsp_fifo:in_data
	wire          mac_control_port_agent_rf_source_ready;                           // mac_control_port_agent_rsp_fifo:in_ready -> mac_control_port_agent:rf_source_ready
	wire          mac_control_port_agent_rf_source_startofpacket;                   // mac_control_port_agent:rf_source_startofpacket -> mac_control_port_agent_rsp_fifo:in_startofpacket
	wire          mac_control_port_agent_rf_source_endofpacket;                     // mac_control_port_agent:rf_source_endofpacket -> mac_control_port_agent_rsp_fifo:in_endofpacket
	wire          mac_control_port_agent_rsp_fifo_out_valid;                        // mac_control_port_agent_rsp_fifo:out_valid -> mac_control_port_agent:rf_sink_valid
	wire   [98:0] mac_control_port_agent_rsp_fifo_out_data;                         // mac_control_port_agent_rsp_fifo:out_data -> mac_control_port_agent:rf_sink_data
	wire          mac_control_port_agent_rsp_fifo_out_ready;                        // mac_control_port_agent:rf_sink_ready -> mac_control_port_agent_rsp_fifo:out_ready
	wire          mac_control_port_agent_rsp_fifo_out_startofpacket;                // mac_control_port_agent_rsp_fifo:out_startofpacket -> mac_control_port_agent:rf_sink_startofpacket
	wire          mac_control_port_agent_rsp_fifo_out_endofpacket;                  // mac_control_port_agent_rsp_fifo:out_endofpacket -> mac_control_port_agent:rf_sink_endofpacket
	wire          mac_control_port_agent_rdata_fifo_src_valid;                      // mac_control_port_agent:rdata_fifo_src_valid -> mac_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] mac_control_port_agent_rdata_fifo_src_data;                       // mac_control_port_agent:rdata_fifo_src_data -> mac_control_port_agent:rdata_fifo_sink_data
	wire          mac_control_port_agent_rdata_fifo_src_ready;                      // mac_control_port_agent:rdata_fifo_sink_ready -> mac_control_port_agent:rdata_fifo_src_ready
	wire   [31:0] dma_rx_csr_agent_m0_readdata;                                     // dma_rx_csr_translator:uav_readdata -> dma_rx_csr_agent:m0_readdata
	wire          dma_rx_csr_agent_m0_waitrequest;                                  // dma_rx_csr_translator:uav_waitrequest -> dma_rx_csr_agent:m0_waitrequest
	wire          dma_rx_csr_agent_m0_debugaccess;                                  // dma_rx_csr_agent:m0_debugaccess -> dma_rx_csr_translator:uav_debugaccess
	wire   [10:0] dma_rx_csr_agent_m0_address;                                      // dma_rx_csr_agent:m0_address -> dma_rx_csr_translator:uav_address
	wire    [3:0] dma_rx_csr_agent_m0_byteenable;                                   // dma_rx_csr_agent:m0_byteenable -> dma_rx_csr_translator:uav_byteenable
	wire          dma_rx_csr_agent_m0_read;                                         // dma_rx_csr_agent:m0_read -> dma_rx_csr_translator:uav_read
	wire          dma_rx_csr_agent_m0_readdatavalid;                                // dma_rx_csr_translator:uav_readdatavalid -> dma_rx_csr_agent:m0_readdatavalid
	wire          dma_rx_csr_agent_m0_lock;                                         // dma_rx_csr_agent:m0_lock -> dma_rx_csr_translator:uav_lock
	wire   [31:0] dma_rx_csr_agent_m0_writedata;                                    // dma_rx_csr_agent:m0_writedata -> dma_rx_csr_translator:uav_writedata
	wire          dma_rx_csr_agent_m0_write;                                        // dma_rx_csr_agent:m0_write -> dma_rx_csr_translator:uav_write
	wire    [2:0] dma_rx_csr_agent_m0_burstcount;                                   // dma_rx_csr_agent:m0_burstcount -> dma_rx_csr_translator:uav_burstcount
	wire          dma_rx_csr_agent_rf_source_valid;                                 // dma_rx_csr_agent:rf_source_valid -> dma_rx_csr_agent_rsp_fifo:in_valid
	wire   [98:0] dma_rx_csr_agent_rf_source_data;                                  // dma_rx_csr_agent:rf_source_data -> dma_rx_csr_agent_rsp_fifo:in_data
	wire          dma_rx_csr_agent_rf_source_ready;                                 // dma_rx_csr_agent_rsp_fifo:in_ready -> dma_rx_csr_agent:rf_source_ready
	wire          dma_rx_csr_agent_rf_source_startofpacket;                         // dma_rx_csr_agent:rf_source_startofpacket -> dma_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_rx_csr_agent_rf_source_endofpacket;                           // dma_rx_csr_agent:rf_source_endofpacket -> dma_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_rx_csr_agent_rsp_fifo_out_valid;                              // dma_rx_csr_agent_rsp_fifo:out_valid -> dma_rx_csr_agent:rf_sink_valid
	wire   [98:0] dma_rx_csr_agent_rsp_fifo_out_data;                               // dma_rx_csr_agent_rsp_fifo:out_data -> dma_rx_csr_agent:rf_sink_data
	wire          dma_rx_csr_agent_rsp_fifo_out_ready;                              // dma_rx_csr_agent:rf_sink_ready -> dma_rx_csr_agent_rsp_fifo:out_ready
	wire          dma_rx_csr_agent_rsp_fifo_out_startofpacket;                      // dma_rx_csr_agent_rsp_fifo:out_startofpacket -> dma_rx_csr_agent:rf_sink_startofpacket
	wire          dma_rx_csr_agent_rsp_fifo_out_endofpacket;                        // dma_rx_csr_agent_rsp_fifo:out_endofpacket -> dma_rx_csr_agent:rf_sink_endofpacket
	wire          dma_rx_csr_agent_rdata_fifo_src_valid;                            // dma_rx_csr_agent:rdata_fifo_src_valid -> dma_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] dma_rx_csr_agent_rdata_fifo_src_data;                             // dma_rx_csr_agent:rdata_fifo_src_data -> dma_rx_csr_agent:rdata_fifo_sink_data
	wire          dma_rx_csr_agent_rdata_fifo_src_ready;                            // dma_rx_csr_agent:rdata_fifo_sink_ready -> dma_rx_csr_agent:rdata_fifo_src_ready
	wire   [31:0] dma_tx_csr_agent_m0_readdata;                                     // dma_tx_csr_translator:uav_readdata -> dma_tx_csr_agent:m0_readdata
	wire          dma_tx_csr_agent_m0_waitrequest;                                  // dma_tx_csr_translator:uav_waitrequest -> dma_tx_csr_agent:m0_waitrequest
	wire          dma_tx_csr_agent_m0_debugaccess;                                  // dma_tx_csr_agent:m0_debugaccess -> dma_tx_csr_translator:uav_debugaccess
	wire   [10:0] dma_tx_csr_agent_m0_address;                                      // dma_tx_csr_agent:m0_address -> dma_tx_csr_translator:uav_address
	wire    [3:0] dma_tx_csr_agent_m0_byteenable;                                   // dma_tx_csr_agent:m0_byteenable -> dma_tx_csr_translator:uav_byteenable
	wire          dma_tx_csr_agent_m0_read;                                         // dma_tx_csr_agent:m0_read -> dma_tx_csr_translator:uav_read
	wire          dma_tx_csr_agent_m0_readdatavalid;                                // dma_tx_csr_translator:uav_readdatavalid -> dma_tx_csr_agent:m0_readdatavalid
	wire          dma_tx_csr_agent_m0_lock;                                         // dma_tx_csr_agent:m0_lock -> dma_tx_csr_translator:uav_lock
	wire   [31:0] dma_tx_csr_agent_m0_writedata;                                    // dma_tx_csr_agent:m0_writedata -> dma_tx_csr_translator:uav_writedata
	wire          dma_tx_csr_agent_m0_write;                                        // dma_tx_csr_agent:m0_write -> dma_tx_csr_translator:uav_write
	wire    [2:0] dma_tx_csr_agent_m0_burstcount;                                   // dma_tx_csr_agent:m0_burstcount -> dma_tx_csr_translator:uav_burstcount
	wire          dma_tx_csr_agent_rf_source_valid;                                 // dma_tx_csr_agent:rf_source_valid -> dma_tx_csr_agent_rsp_fifo:in_valid
	wire   [98:0] dma_tx_csr_agent_rf_source_data;                                  // dma_tx_csr_agent:rf_source_data -> dma_tx_csr_agent_rsp_fifo:in_data
	wire          dma_tx_csr_agent_rf_source_ready;                                 // dma_tx_csr_agent_rsp_fifo:in_ready -> dma_tx_csr_agent:rf_source_ready
	wire          dma_tx_csr_agent_rf_source_startofpacket;                         // dma_tx_csr_agent:rf_source_startofpacket -> dma_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          dma_tx_csr_agent_rf_source_endofpacket;                           // dma_tx_csr_agent:rf_source_endofpacket -> dma_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          dma_tx_csr_agent_rsp_fifo_out_valid;                              // dma_tx_csr_agent_rsp_fifo:out_valid -> dma_tx_csr_agent:rf_sink_valid
	wire   [98:0] dma_tx_csr_agent_rsp_fifo_out_data;                               // dma_tx_csr_agent_rsp_fifo:out_data -> dma_tx_csr_agent:rf_sink_data
	wire          dma_tx_csr_agent_rsp_fifo_out_ready;                              // dma_tx_csr_agent:rf_sink_ready -> dma_tx_csr_agent_rsp_fifo:out_ready
	wire          dma_tx_csr_agent_rsp_fifo_out_startofpacket;                      // dma_tx_csr_agent_rsp_fifo:out_startofpacket -> dma_tx_csr_agent:rf_sink_startofpacket
	wire          dma_tx_csr_agent_rsp_fifo_out_endofpacket;                        // dma_tx_csr_agent_rsp_fifo:out_endofpacket -> dma_tx_csr_agent:rf_sink_endofpacket
	wire          dma_tx_csr_agent_rdata_fifo_src_valid;                            // dma_tx_csr_agent:rdata_fifo_src_valid -> dma_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] dma_tx_csr_agent_rdata_fifo_src_data;                             // dma_tx_csr_agent:rdata_fifo_src_data -> dma_tx_csr_agent:rdata_fifo_sink_data
	wire          dma_tx_csr_agent_rdata_fifo_src_ready;                            // dma_tx_csr_agent:rdata_fifo_sink_ready -> dma_tx_csr_agent:rdata_fifo_src_ready
	wire  [255:0] dma_rx_descriptor_slave_agent_m0_readdata;                        // dma_rx_descriptor_slave_translator:uav_readdata -> dma_rx_descriptor_slave_agent:m0_readdata
	wire          dma_rx_descriptor_slave_agent_m0_waitrequest;                     // dma_rx_descriptor_slave_translator:uav_waitrequest -> dma_rx_descriptor_slave_agent:m0_waitrequest
	wire          dma_rx_descriptor_slave_agent_m0_debugaccess;                     // dma_rx_descriptor_slave_agent:m0_debugaccess -> dma_rx_descriptor_slave_translator:uav_debugaccess
	wire   [10:0] dma_rx_descriptor_slave_agent_m0_address;                         // dma_rx_descriptor_slave_agent:m0_address -> dma_rx_descriptor_slave_translator:uav_address
	wire   [31:0] dma_rx_descriptor_slave_agent_m0_byteenable;                      // dma_rx_descriptor_slave_agent:m0_byteenable -> dma_rx_descriptor_slave_translator:uav_byteenable
	wire          dma_rx_descriptor_slave_agent_m0_read;                            // dma_rx_descriptor_slave_agent:m0_read -> dma_rx_descriptor_slave_translator:uav_read
	wire          dma_rx_descriptor_slave_agent_m0_readdatavalid;                   // dma_rx_descriptor_slave_translator:uav_readdatavalid -> dma_rx_descriptor_slave_agent:m0_readdatavalid
	wire          dma_rx_descriptor_slave_agent_m0_lock;                            // dma_rx_descriptor_slave_agent:m0_lock -> dma_rx_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_rx_descriptor_slave_agent_m0_writedata;                       // dma_rx_descriptor_slave_agent:m0_writedata -> dma_rx_descriptor_slave_translator:uav_writedata
	wire          dma_rx_descriptor_slave_agent_m0_write;                           // dma_rx_descriptor_slave_agent:m0_write -> dma_rx_descriptor_slave_translator:uav_write
	wire    [5:0] dma_rx_descriptor_slave_agent_m0_burstcount;                      // dma_rx_descriptor_slave_agent:m0_burstcount -> dma_rx_descriptor_slave_translator:uav_burstcount
	wire          dma_rx_descriptor_slave_agent_rf_source_valid;                    // dma_rx_descriptor_slave_agent:rf_source_valid -> dma_rx_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [350:0] dma_rx_descriptor_slave_agent_rf_source_data;                     // dma_rx_descriptor_slave_agent:rf_source_data -> dma_rx_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_rx_descriptor_slave_agent_rf_source_ready;                    // dma_rx_descriptor_slave_agent_rsp_fifo:in_ready -> dma_rx_descriptor_slave_agent:rf_source_ready
	wire          dma_rx_descriptor_slave_agent_rf_source_startofpacket;            // dma_rx_descriptor_slave_agent:rf_source_startofpacket -> dma_rx_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_rx_descriptor_slave_agent_rf_source_endofpacket;              // dma_rx_descriptor_slave_agent:rf_source_endofpacket -> dma_rx_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_rx_descriptor_slave_agent_rsp_fifo_out_valid;                 // dma_rx_descriptor_slave_agent_rsp_fifo:out_valid -> dma_rx_descriptor_slave_agent:rf_sink_valid
	wire  [350:0] dma_rx_descriptor_slave_agent_rsp_fifo_out_data;                  // dma_rx_descriptor_slave_agent_rsp_fifo:out_data -> dma_rx_descriptor_slave_agent:rf_sink_data
	wire          dma_rx_descriptor_slave_agent_rsp_fifo_out_ready;                 // dma_rx_descriptor_slave_agent:rf_sink_ready -> dma_rx_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_rx_descriptor_slave_agent_rsp_fifo_out_startofpacket;         // dma_rx_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_rx_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_rx_descriptor_slave_agent_rsp_fifo_out_endofpacket;           // dma_rx_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_rx_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_rx_descriptor_slave_agent_rdata_fifo_src_valid;               // dma_rx_descriptor_slave_agent:rdata_fifo_src_valid -> dma_rx_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_rx_descriptor_slave_agent_rdata_fifo_src_data;                // dma_rx_descriptor_slave_agent:rdata_fifo_src_data -> dma_rx_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_rx_descriptor_slave_agent_rdata_fifo_src_ready;               // dma_rx_descriptor_slave_agent_rdata_fifo:in_ready -> dma_rx_descriptor_slave_agent:rdata_fifo_src_ready
	wire          dma_rx_descriptor_slave_agent_rdata_fifo_out_valid;               // dma_rx_descriptor_slave_agent_rdata_fifo:out_valid -> dma_rx_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] dma_rx_descriptor_slave_agent_rdata_fifo_out_data;                // dma_rx_descriptor_slave_agent_rdata_fifo:out_data -> dma_rx_descriptor_slave_agent:rdata_fifo_sink_data
	wire          dma_rx_descriptor_slave_agent_rdata_fifo_out_ready;               // dma_rx_descriptor_slave_agent:rdata_fifo_sink_ready -> dma_rx_descriptor_slave_agent_rdata_fifo:out_ready
	wire  [255:0] dma_tx_descriptor_slave_agent_m0_readdata;                        // dma_tx_descriptor_slave_translator:uav_readdata -> dma_tx_descriptor_slave_agent:m0_readdata
	wire          dma_tx_descriptor_slave_agent_m0_waitrequest;                     // dma_tx_descriptor_slave_translator:uav_waitrequest -> dma_tx_descriptor_slave_agent:m0_waitrequest
	wire          dma_tx_descriptor_slave_agent_m0_debugaccess;                     // dma_tx_descriptor_slave_agent:m0_debugaccess -> dma_tx_descriptor_slave_translator:uav_debugaccess
	wire   [10:0] dma_tx_descriptor_slave_agent_m0_address;                         // dma_tx_descriptor_slave_agent:m0_address -> dma_tx_descriptor_slave_translator:uav_address
	wire   [31:0] dma_tx_descriptor_slave_agent_m0_byteenable;                      // dma_tx_descriptor_slave_agent:m0_byteenable -> dma_tx_descriptor_slave_translator:uav_byteenable
	wire          dma_tx_descriptor_slave_agent_m0_read;                            // dma_tx_descriptor_slave_agent:m0_read -> dma_tx_descriptor_slave_translator:uav_read
	wire          dma_tx_descriptor_slave_agent_m0_readdatavalid;                   // dma_tx_descriptor_slave_translator:uav_readdatavalid -> dma_tx_descriptor_slave_agent:m0_readdatavalid
	wire          dma_tx_descriptor_slave_agent_m0_lock;                            // dma_tx_descriptor_slave_agent:m0_lock -> dma_tx_descriptor_slave_translator:uav_lock
	wire  [255:0] dma_tx_descriptor_slave_agent_m0_writedata;                       // dma_tx_descriptor_slave_agent:m0_writedata -> dma_tx_descriptor_slave_translator:uav_writedata
	wire          dma_tx_descriptor_slave_agent_m0_write;                           // dma_tx_descriptor_slave_agent:m0_write -> dma_tx_descriptor_slave_translator:uav_write
	wire    [5:0] dma_tx_descriptor_slave_agent_m0_burstcount;                      // dma_tx_descriptor_slave_agent:m0_burstcount -> dma_tx_descriptor_slave_translator:uav_burstcount
	wire          dma_tx_descriptor_slave_agent_rf_source_valid;                    // dma_tx_descriptor_slave_agent:rf_source_valid -> dma_tx_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [350:0] dma_tx_descriptor_slave_agent_rf_source_data;                     // dma_tx_descriptor_slave_agent:rf_source_data -> dma_tx_descriptor_slave_agent_rsp_fifo:in_data
	wire          dma_tx_descriptor_slave_agent_rf_source_ready;                    // dma_tx_descriptor_slave_agent_rsp_fifo:in_ready -> dma_tx_descriptor_slave_agent:rf_source_ready
	wire          dma_tx_descriptor_slave_agent_rf_source_startofpacket;            // dma_tx_descriptor_slave_agent:rf_source_startofpacket -> dma_tx_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_tx_descriptor_slave_agent_rf_source_endofpacket;              // dma_tx_descriptor_slave_agent:rf_source_endofpacket -> dma_tx_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_tx_descriptor_slave_agent_rsp_fifo_out_valid;                 // dma_tx_descriptor_slave_agent_rsp_fifo:out_valid -> dma_tx_descriptor_slave_agent:rf_sink_valid
	wire  [350:0] dma_tx_descriptor_slave_agent_rsp_fifo_out_data;                  // dma_tx_descriptor_slave_agent_rsp_fifo:out_data -> dma_tx_descriptor_slave_agent:rf_sink_data
	wire          dma_tx_descriptor_slave_agent_rsp_fifo_out_ready;                 // dma_tx_descriptor_slave_agent:rf_sink_ready -> dma_tx_descriptor_slave_agent_rsp_fifo:out_ready
	wire          dma_tx_descriptor_slave_agent_rsp_fifo_out_startofpacket;         // dma_tx_descriptor_slave_agent_rsp_fifo:out_startofpacket -> dma_tx_descriptor_slave_agent:rf_sink_startofpacket
	wire          dma_tx_descriptor_slave_agent_rsp_fifo_out_endofpacket;           // dma_tx_descriptor_slave_agent_rsp_fifo:out_endofpacket -> dma_tx_descriptor_slave_agent:rf_sink_endofpacket
	wire          dma_tx_descriptor_slave_agent_rdata_fifo_src_valid;               // dma_tx_descriptor_slave_agent:rdata_fifo_src_valid -> dma_tx_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [257:0] dma_tx_descriptor_slave_agent_rdata_fifo_src_data;                // dma_tx_descriptor_slave_agent:rdata_fifo_src_data -> dma_tx_descriptor_slave_agent_rdata_fifo:in_data
	wire          dma_tx_descriptor_slave_agent_rdata_fifo_src_ready;               // dma_tx_descriptor_slave_agent_rdata_fifo:in_ready -> dma_tx_descriptor_slave_agent:rdata_fifo_src_ready
	wire          dma_tx_descriptor_slave_agent_rdata_fifo_out_valid;               // dma_tx_descriptor_slave_agent_rdata_fifo:out_valid -> dma_tx_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] dma_tx_descriptor_slave_agent_rdata_fifo_out_data;                // dma_tx_descriptor_slave_agent_rdata_fifo:out_data -> dma_tx_descriptor_slave_agent:rdata_fifo_sink_data
	wire          dma_tx_descriptor_slave_agent_rdata_fifo_out_ready;               // dma_tx_descriptor_slave_agent:rdata_fifo_sink_ready -> dma_tx_descriptor_slave_agent_rdata_fifo:out_ready
	wire   [31:0] dma_rx_response_agent_m0_readdata;                                // dma_rx_response_translator:uav_readdata -> dma_rx_response_agent:m0_readdata
	wire          dma_rx_response_agent_m0_waitrequest;                             // dma_rx_response_translator:uav_waitrequest -> dma_rx_response_agent:m0_waitrequest
	wire          dma_rx_response_agent_m0_debugaccess;                             // dma_rx_response_agent:m0_debugaccess -> dma_rx_response_translator:uav_debugaccess
	wire   [10:0] dma_rx_response_agent_m0_address;                                 // dma_rx_response_agent:m0_address -> dma_rx_response_translator:uav_address
	wire    [3:0] dma_rx_response_agent_m0_byteenable;                              // dma_rx_response_agent:m0_byteenable -> dma_rx_response_translator:uav_byteenable
	wire          dma_rx_response_agent_m0_read;                                    // dma_rx_response_agent:m0_read -> dma_rx_response_translator:uav_read
	wire          dma_rx_response_agent_m0_readdatavalid;                           // dma_rx_response_translator:uav_readdatavalid -> dma_rx_response_agent:m0_readdatavalid
	wire          dma_rx_response_agent_m0_lock;                                    // dma_rx_response_agent:m0_lock -> dma_rx_response_translator:uav_lock
	wire   [31:0] dma_rx_response_agent_m0_writedata;                               // dma_rx_response_agent:m0_writedata -> dma_rx_response_translator:uav_writedata
	wire          dma_rx_response_agent_m0_write;                                   // dma_rx_response_agent:m0_write -> dma_rx_response_translator:uav_write
	wire    [2:0] dma_rx_response_agent_m0_burstcount;                              // dma_rx_response_agent:m0_burstcount -> dma_rx_response_translator:uav_burstcount
	wire          dma_rx_response_agent_rf_source_valid;                            // dma_rx_response_agent:rf_source_valid -> dma_rx_response_agent_rsp_fifo:in_valid
	wire   [98:0] dma_rx_response_agent_rf_source_data;                             // dma_rx_response_agent:rf_source_data -> dma_rx_response_agent_rsp_fifo:in_data
	wire          dma_rx_response_agent_rf_source_ready;                            // dma_rx_response_agent_rsp_fifo:in_ready -> dma_rx_response_agent:rf_source_ready
	wire          dma_rx_response_agent_rf_source_startofpacket;                    // dma_rx_response_agent:rf_source_startofpacket -> dma_rx_response_agent_rsp_fifo:in_startofpacket
	wire          dma_rx_response_agent_rf_source_endofpacket;                      // dma_rx_response_agent:rf_source_endofpacket -> dma_rx_response_agent_rsp_fifo:in_endofpacket
	wire          dma_rx_response_agent_rsp_fifo_out_valid;                         // dma_rx_response_agent_rsp_fifo:out_valid -> dma_rx_response_agent:rf_sink_valid
	wire   [98:0] dma_rx_response_agent_rsp_fifo_out_data;                          // dma_rx_response_agent_rsp_fifo:out_data -> dma_rx_response_agent:rf_sink_data
	wire          dma_rx_response_agent_rsp_fifo_out_ready;                         // dma_rx_response_agent:rf_sink_ready -> dma_rx_response_agent_rsp_fifo:out_ready
	wire          dma_rx_response_agent_rsp_fifo_out_startofpacket;                 // dma_rx_response_agent_rsp_fifo:out_startofpacket -> dma_rx_response_agent:rf_sink_startofpacket
	wire          dma_rx_response_agent_rsp_fifo_out_endofpacket;                   // dma_rx_response_agent_rsp_fifo:out_endofpacket -> dma_rx_response_agent:rf_sink_endofpacket
	wire          dma_rx_response_agent_rdata_fifo_src_valid;                       // dma_rx_response_agent:rdata_fifo_src_valid -> dma_rx_response_agent:rdata_fifo_sink_valid
	wire   [33:0] dma_rx_response_agent_rdata_fifo_src_data;                        // dma_rx_response_agent:rdata_fifo_src_data -> dma_rx_response_agent:rdata_fifo_sink_data
	wire          dma_rx_response_agent_rdata_fifo_src_ready;                       // dma_rx_response_agent:rdata_fifo_sink_ready -> dma_rx_response_agent:rdata_fifo_src_ready
	wire          mem_bridge_m0_agent_cp_valid;                                     // mem_bridge_m0_agent:cp_valid -> router:sink_valid
	wire   [97:0] mem_bridge_m0_agent_cp_data;                                      // mem_bridge_m0_agent:cp_data -> router:sink_data
	wire          mem_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> mem_bridge_m0_agent:cp_ready
	wire          mem_bridge_m0_agent_cp_startofpacket;                             // mem_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mem_bridge_m0_agent_cp_endofpacket;                               // mem_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mac_control_port_agent_rp_valid;                                  // mac_control_port_agent:rp_valid -> router_001:sink_valid
	wire   [97:0] mac_control_port_agent_rp_data;                                   // mac_control_port_agent:rp_data -> router_001:sink_data
	wire          mac_control_port_agent_rp_ready;                                  // router_001:sink_ready -> mac_control_port_agent:rp_ready
	wire          mac_control_port_agent_rp_startofpacket;                          // mac_control_port_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          mac_control_port_agent_rp_endofpacket;                            // mac_control_port_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> rsp_demux:sink_valid
	wire   [97:0] router_001_src_data;                                              // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                             // rsp_demux:sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                           // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dma_rx_csr_agent_rp_valid;                                        // dma_rx_csr_agent:rp_valid -> router_002:sink_valid
	wire   [97:0] dma_rx_csr_agent_rp_data;                                         // dma_rx_csr_agent:rp_data -> router_002:sink_data
	wire          dma_rx_csr_agent_rp_ready;                                        // router_002:sink_ready -> dma_rx_csr_agent:rp_ready
	wire          dma_rx_csr_agent_rp_startofpacket;                                // dma_rx_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          dma_rx_csr_agent_rp_endofpacket;                                  // dma_rx_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> rsp_demux_001:sink_valid
	wire   [97:0] router_002_src_data;                                              // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                             // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                           // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          dma_tx_csr_agent_rp_valid;                                        // dma_tx_csr_agent:rp_valid -> router_003:sink_valid
	wire   [97:0] dma_tx_csr_agent_rp_data;                                         // dma_tx_csr_agent:rp_data -> router_003:sink_data
	wire          dma_tx_csr_agent_rp_ready;                                        // router_003:sink_ready -> dma_tx_csr_agent:rp_ready
	wire          dma_tx_csr_agent_rp_startofpacket;                                // dma_tx_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          dma_tx_csr_agent_rp_endofpacket;                                  // dma_tx_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> rsp_demux_002:sink_valid
	wire   [97:0] router_003_src_data;                                              // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                             // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                           // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          dma_rx_descriptor_slave_agent_rp_valid;                           // dma_rx_descriptor_slave_agent:rp_valid -> router_004:sink_valid
	wire  [349:0] dma_rx_descriptor_slave_agent_rp_data;                            // dma_rx_descriptor_slave_agent:rp_data -> router_004:sink_data
	wire          dma_rx_descriptor_slave_agent_rp_ready;                           // router_004:sink_ready -> dma_rx_descriptor_slave_agent:rp_ready
	wire          dma_rx_descriptor_slave_agent_rp_startofpacket;                   // dma_rx_descriptor_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dma_rx_descriptor_slave_agent_rp_endofpacket;                     // dma_rx_descriptor_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          dma_tx_descriptor_slave_agent_rp_valid;                           // dma_tx_descriptor_slave_agent:rp_valid -> router_005:sink_valid
	wire  [349:0] dma_tx_descriptor_slave_agent_rp_data;                            // dma_tx_descriptor_slave_agent:rp_data -> router_005:sink_data
	wire          dma_tx_descriptor_slave_agent_rp_ready;                           // router_005:sink_ready -> dma_tx_descriptor_slave_agent:rp_ready
	wire          dma_tx_descriptor_slave_agent_rp_startofpacket;                   // dma_tx_descriptor_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          dma_tx_descriptor_slave_agent_rp_endofpacket;                     // dma_tx_descriptor_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          dma_rx_response_agent_rp_valid;                                   // dma_rx_response_agent:rp_valid -> router_006:sink_valid
	wire   [97:0] dma_rx_response_agent_rp_data;                                    // dma_rx_response_agent:rp_data -> router_006:sink_data
	wire          dma_rx_response_agent_rp_ready;                                   // router_006:sink_ready -> dma_rx_response_agent:rp_ready
	wire          dma_rx_response_agent_rp_startofpacket;                           // dma_rx_response_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          dma_rx_response_agent_rp_endofpacket;                             // dma_rx_response_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> rsp_demux_005:sink_valid
	wire   [97:0] router_006_src_data;                                              // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                             // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                           // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> mem_bridge_m0_limiter:cmd_sink_valid
	wire   [97:0] router_src_data;                                                  // router:src_data -> mem_bridge_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                 // mem_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                               // router:src_channel -> mem_bridge_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> mem_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> mem_bridge_m0_limiter:cmd_sink_endofpacket
	wire   [97:0] mem_bridge_m0_limiter_cmd_src_data;                               // mem_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mem_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mem_bridge_m0_limiter:cmd_src_ready
	wire    [5:0] mem_bridge_m0_limiter_cmd_src_channel;                            // mem_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mem_bridge_m0_limiter_cmd_src_startofpacket;                      // mem_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mem_bridge_m0_limiter_cmd_src_endofpacket;                        // mem_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> mem_bridge_m0_limiter:rsp_sink_valid
	wire   [97:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> mem_bridge_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                // mem_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> mem_bridge_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> mem_bridge_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> mem_bridge_m0_limiter:rsp_sink_endofpacket
	wire          mem_bridge_m0_limiter_rsp_src_valid;                              // mem_bridge_m0_limiter:rsp_src_valid -> mem_bridge_m0_agent:rp_valid
	wire   [97:0] mem_bridge_m0_limiter_rsp_src_data;                               // mem_bridge_m0_limiter:rsp_src_data -> mem_bridge_m0_agent:rp_data
	wire          mem_bridge_m0_limiter_rsp_src_ready;                              // mem_bridge_m0_agent:rp_ready -> mem_bridge_m0_limiter:rsp_src_ready
	wire    [5:0] mem_bridge_m0_limiter_rsp_src_channel;                            // mem_bridge_m0_limiter:rsp_src_channel -> mem_bridge_m0_agent:rp_channel
	wire          mem_bridge_m0_limiter_rsp_src_startofpacket;                      // mem_bridge_m0_limiter:rsp_src_startofpacket -> mem_bridge_m0_agent:rp_startofpacket
	wire          mem_bridge_m0_limiter_rsp_src_endofpacket;                        // mem_bridge_m0_limiter:rsp_src_endofpacket -> mem_bridge_m0_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> mac_control_port_burst_adapter:sink0_valid
	wire   [97:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> mac_control_port_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                // mac_control_port_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> mac_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> mac_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> mac_control_port_burst_adapter:sink0_endofpacket
	wire          mac_control_port_burst_adapter_source0_valid;                     // mac_control_port_burst_adapter:source0_valid -> mac_control_port_agent:cp_valid
	wire   [97:0] mac_control_port_burst_adapter_source0_data;                      // mac_control_port_burst_adapter:source0_data -> mac_control_port_agent:cp_data
	wire          mac_control_port_burst_adapter_source0_ready;                     // mac_control_port_agent:cp_ready -> mac_control_port_burst_adapter:source0_ready
	wire    [5:0] mac_control_port_burst_adapter_source0_channel;                   // mac_control_port_burst_adapter:source0_channel -> mac_control_port_agent:cp_channel
	wire          mac_control_port_burst_adapter_source0_startofpacket;             // mac_control_port_burst_adapter:source0_startofpacket -> mac_control_port_agent:cp_startofpacket
	wire          mac_control_port_burst_adapter_source0_endofpacket;               // mac_control_port_burst_adapter:source0_endofpacket -> mac_control_port_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> dma_rx_csr_burst_adapter:sink0_valid
	wire   [97:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> dma_rx_csr_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                            // dma_rx_csr_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> dma_rx_csr_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> dma_rx_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> dma_rx_csr_burst_adapter:sink0_endofpacket
	wire          dma_rx_csr_burst_adapter_source0_valid;                           // dma_rx_csr_burst_adapter:source0_valid -> dma_rx_csr_agent:cp_valid
	wire   [97:0] dma_rx_csr_burst_adapter_source0_data;                            // dma_rx_csr_burst_adapter:source0_data -> dma_rx_csr_agent:cp_data
	wire          dma_rx_csr_burst_adapter_source0_ready;                           // dma_rx_csr_agent:cp_ready -> dma_rx_csr_burst_adapter:source0_ready
	wire    [5:0] dma_rx_csr_burst_adapter_source0_channel;                         // dma_rx_csr_burst_adapter:source0_channel -> dma_rx_csr_agent:cp_channel
	wire          dma_rx_csr_burst_adapter_source0_startofpacket;                   // dma_rx_csr_burst_adapter:source0_startofpacket -> dma_rx_csr_agent:cp_startofpacket
	wire          dma_rx_csr_burst_adapter_source0_endofpacket;                     // dma_rx_csr_burst_adapter:source0_endofpacket -> dma_rx_csr_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> dma_tx_csr_burst_adapter:sink0_valid
	wire   [97:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> dma_tx_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                            // dma_tx_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> dma_tx_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> dma_tx_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> dma_tx_csr_burst_adapter:sink0_endofpacket
	wire          dma_tx_csr_burst_adapter_source0_valid;                           // dma_tx_csr_burst_adapter:source0_valid -> dma_tx_csr_agent:cp_valid
	wire   [97:0] dma_tx_csr_burst_adapter_source0_data;                            // dma_tx_csr_burst_adapter:source0_data -> dma_tx_csr_agent:cp_data
	wire          dma_tx_csr_burst_adapter_source0_ready;                           // dma_tx_csr_agent:cp_ready -> dma_tx_csr_burst_adapter:source0_ready
	wire    [5:0] dma_tx_csr_burst_adapter_source0_channel;                         // dma_tx_csr_burst_adapter:source0_channel -> dma_tx_csr_agent:cp_channel
	wire          dma_tx_csr_burst_adapter_source0_startofpacket;                   // dma_tx_csr_burst_adapter:source0_startofpacket -> dma_tx_csr_agent:cp_startofpacket
	wire          dma_tx_csr_burst_adapter_source0_endofpacket;                     // dma_tx_csr_burst_adapter:source0_endofpacket -> dma_tx_csr_agent:cp_endofpacket
	wire          dma_rx_descriptor_slave_burst_adapter_source0_valid;              // dma_rx_descriptor_slave_burst_adapter:source0_valid -> dma_rx_descriptor_slave_agent:cp_valid
	wire  [349:0] dma_rx_descriptor_slave_burst_adapter_source0_data;               // dma_rx_descriptor_slave_burst_adapter:source0_data -> dma_rx_descriptor_slave_agent:cp_data
	wire          dma_rx_descriptor_slave_burst_adapter_source0_ready;              // dma_rx_descriptor_slave_agent:cp_ready -> dma_rx_descriptor_slave_burst_adapter:source0_ready
	wire    [5:0] dma_rx_descriptor_slave_burst_adapter_source0_channel;            // dma_rx_descriptor_slave_burst_adapter:source0_channel -> dma_rx_descriptor_slave_agent:cp_channel
	wire          dma_rx_descriptor_slave_burst_adapter_source0_startofpacket;      // dma_rx_descriptor_slave_burst_adapter:source0_startofpacket -> dma_rx_descriptor_slave_agent:cp_startofpacket
	wire          dma_rx_descriptor_slave_burst_adapter_source0_endofpacket;        // dma_rx_descriptor_slave_burst_adapter:source0_endofpacket -> dma_rx_descriptor_slave_agent:cp_endofpacket
	wire          dma_tx_descriptor_slave_burst_adapter_source0_valid;              // dma_tx_descriptor_slave_burst_adapter:source0_valid -> dma_tx_descriptor_slave_agent:cp_valid
	wire  [349:0] dma_tx_descriptor_slave_burst_adapter_source0_data;               // dma_tx_descriptor_slave_burst_adapter:source0_data -> dma_tx_descriptor_slave_agent:cp_data
	wire          dma_tx_descriptor_slave_burst_adapter_source0_ready;              // dma_tx_descriptor_slave_agent:cp_ready -> dma_tx_descriptor_slave_burst_adapter:source0_ready
	wire    [5:0] dma_tx_descriptor_slave_burst_adapter_source0_channel;            // dma_tx_descriptor_slave_burst_adapter:source0_channel -> dma_tx_descriptor_slave_agent:cp_channel
	wire          dma_tx_descriptor_slave_burst_adapter_source0_startofpacket;      // dma_tx_descriptor_slave_burst_adapter:source0_startofpacket -> dma_tx_descriptor_slave_agent:cp_startofpacket
	wire          dma_tx_descriptor_slave_burst_adapter_source0_endofpacket;        // dma_tx_descriptor_slave_burst_adapter:source0_endofpacket -> dma_tx_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                            // cmd_mux_005:src_valid -> dma_rx_response_burst_adapter:sink0_valid
	wire   [97:0] cmd_mux_005_src_data;                                             // cmd_mux_005:src_data -> dma_rx_response_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                            // dma_rx_response_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                          // cmd_mux_005:src_channel -> dma_rx_response_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                    // cmd_mux_005:src_startofpacket -> dma_rx_response_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                      // cmd_mux_005:src_endofpacket -> dma_rx_response_burst_adapter:sink0_endofpacket
	wire          dma_rx_response_burst_adapter_source0_valid;                      // dma_rx_response_burst_adapter:source0_valid -> dma_rx_response_agent:cp_valid
	wire   [97:0] dma_rx_response_burst_adapter_source0_data;                       // dma_rx_response_burst_adapter:source0_data -> dma_rx_response_agent:cp_data
	wire          dma_rx_response_burst_adapter_source0_ready;                      // dma_rx_response_agent:cp_ready -> dma_rx_response_burst_adapter:source0_ready
	wire    [5:0] dma_rx_response_burst_adapter_source0_channel;                    // dma_rx_response_burst_adapter:source0_channel -> dma_rx_response_agent:cp_channel
	wire          dma_rx_response_burst_adapter_source0_startofpacket;              // dma_rx_response_burst_adapter:source0_startofpacket -> dma_rx_response_agent:cp_startofpacket
	wire          dma_rx_response_burst_adapter_source0_endofpacket;                // dma_rx_response_burst_adapter:source0_endofpacket -> dma_rx_response_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [97:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire   [97:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire   [97:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire   [97:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire   [97:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire   [97:0] cmd_demux_src5_data;                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [97:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire   [97:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire   [97:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire   [97:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire   [97:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire   [97:0] rsp_demux_005_src0_data;                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> dma_rx_descriptor_slave_rsp_width_adapter:in_valid
	wire  [349:0] router_004_src_data;                                              // router_004:src_data -> dma_rx_descriptor_slave_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                             // dma_rx_descriptor_slave_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                           // router_004:src_channel -> dma_rx_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> dma_rx_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> dma_rx_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_rx_descriptor_slave_rsp_width_adapter_src_valid;              // dma_rx_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire   [97:0] dma_rx_descriptor_slave_rsp_width_adapter_src_data;               // dma_rx_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          dma_rx_descriptor_slave_rsp_width_adapter_src_ready;              // rsp_demux_003:sink_ready -> dma_rx_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] dma_rx_descriptor_slave_rsp_width_adapter_src_channel;            // dma_rx_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          dma_rx_descriptor_slave_rsp_width_adapter_src_startofpacket;      // dma_rx_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          dma_rx_descriptor_slave_rsp_width_adapter_src_endofpacket;        // dma_rx_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> dma_tx_descriptor_slave_rsp_width_adapter:in_valid
	wire  [349:0] router_005_src_data;                                              // router_005:src_data -> dma_tx_descriptor_slave_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                             // dma_tx_descriptor_slave_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                           // router_005:src_channel -> dma_tx_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> dma_tx_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> dma_tx_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          dma_tx_descriptor_slave_rsp_width_adapter_src_valid;              // dma_tx_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire   [97:0] dma_tx_descriptor_slave_rsp_width_adapter_src_data;               // dma_tx_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          dma_tx_descriptor_slave_rsp_width_adapter_src_ready;              // rsp_demux_004:sink_ready -> dma_tx_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] dma_tx_descriptor_slave_rsp_width_adapter_src_channel;            // dma_tx_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          dma_tx_descriptor_slave_rsp_width_adapter_src_startofpacket;      // dma_tx_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          dma_tx_descriptor_slave_rsp_width_adapter_src_endofpacket;        // dma_tx_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> dma_rx_descriptor_slave_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> dma_rx_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                            // dma_rx_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> dma_rx_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> dma_rx_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> dma_rx_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_rx_descriptor_slave_cmd_width_adapter_src_valid;              // dma_rx_descriptor_slave_cmd_width_adapter:out_valid -> dma_rx_descriptor_slave_burst_adapter:sink0_valid
	wire  [349:0] dma_rx_descriptor_slave_cmd_width_adapter_src_data;               // dma_rx_descriptor_slave_cmd_width_adapter:out_data -> dma_rx_descriptor_slave_burst_adapter:sink0_data
	wire          dma_rx_descriptor_slave_cmd_width_adapter_src_ready;              // dma_rx_descriptor_slave_burst_adapter:sink0_ready -> dma_rx_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] dma_rx_descriptor_slave_cmd_width_adapter_src_channel;            // dma_rx_descriptor_slave_cmd_width_adapter:out_channel -> dma_rx_descriptor_slave_burst_adapter:sink0_channel
	wire          dma_rx_descriptor_slave_cmd_width_adapter_src_startofpacket;      // dma_rx_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_rx_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          dma_rx_descriptor_slave_cmd_width_adapter_src_endofpacket;        // dma_rx_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_rx_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> dma_tx_descriptor_slave_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> dma_tx_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                            // dma_tx_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> dma_tx_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> dma_tx_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> dma_tx_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          dma_tx_descriptor_slave_cmd_width_adapter_src_valid;              // dma_tx_descriptor_slave_cmd_width_adapter:out_valid -> dma_tx_descriptor_slave_burst_adapter:sink0_valid
	wire  [349:0] dma_tx_descriptor_slave_cmd_width_adapter_src_data;               // dma_tx_descriptor_slave_cmd_width_adapter:out_data -> dma_tx_descriptor_slave_burst_adapter:sink0_data
	wire          dma_tx_descriptor_slave_cmd_width_adapter_src_ready;              // dma_tx_descriptor_slave_burst_adapter:sink0_ready -> dma_tx_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] dma_tx_descriptor_slave_cmd_width_adapter_src_channel;            // dma_tx_descriptor_slave_cmd_width_adapter:out_channel -> dma_tx_descriptor_slave_burst_adapter:sink0_channel
	wire          dma_tx_descriptor_slave_cmd_width_adapter_src_startofpacket;      // dma_tx_descriptor_slave_cmd_width_adapter:out_startofpacket -> dma_tx_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          dma_tx_descriptor_slave_cmd_width_adapter_src_endofpacket;        // dma_tx_descriptor_slave_cmd_width_adapter:out_endofpacket -> dma_tx_descriptor_slave_burst_adapter:sink0_endofpacket
	wire    [5:0] mem_bridge_m0_limiter_cmd_valid_data;                             // mem_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ethernet_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) mem_bridge_m0_translator (
		.clk                    (clock_out_clk_clk),                                                //   input,   width = 1,                       clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (mem_bridge_m0_translator_avalon_universal_master_0_address),       //  output,  width = 11, avalon_universal_master_0.address
		.uav_burstcount         (mem_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 7,                          .burstcount
		.uav_read               (mem_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (mem_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (mem_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (mem_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (mem_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (mem_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (mem_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (mem_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (mem_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (mem_bridge_m0_address),                                            //   input,  width = 11,      avalon_anti_master_0.address
		.av_waitrequest         (mem_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (mem_bridge_m0_burstcount),                                         //   input,   width = 5,                          .burstcount
		.av_byteenable          (mem_bridge_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (mem_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (mem_bridge_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (mem_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (mem_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (mem_bridge_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (mem_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                             // (terminated),                                        
		.av_begintransfer       (1'b0),                                                             // (terminated),                                        
		.av_chipselect          (1'b0),                                                             // (terminated),                                        
		.av_lock                (1'b0),                                                             // (terminated),                                        
		.uav_clken              (),                                                                 // (terminated),                                        
		.av_clken               (1'b1),                                                             // (terminated),                                        
		.uav_response           (2'b00),                                                            // (terminated),                                        
		.av_response            (),                                                                 // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                             // (terminated),                                        
		.av_writeresponsevalid  ()                                                                  // (terminated),                                        
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mac_control_port_translator (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mac_control_port_agent_m0_address),            //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (mac_control_port_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (mac_control_port_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (mac_control_port_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (mac_control_port_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mac_control_port_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mac_control_port_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (mac_control_port_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (mac_control_port_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (mac_control_port_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (mac_control_port_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (mac_control_port_address),                     //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write               (mac_control_port_write),                       //  output,   width = 1,                         .write
		.av_read                (mac_control_port_read),                        //  output,   width = 1,                         .read
		.av_readdata            (mac_control_port_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (mac_control_port_writedata),                   //  output,  width = 32,                         .writedata
		.av_waitrequest         (mac_control_port_waitrequest),                 //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_byteenable          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_rx_csr_translator (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dma_rx_csr_agent_m0_address),                  //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (dma_rx_csr_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (dma_rx_csr_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (dma_rx_csr_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (dma_rx_csr_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_rx_csr_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dma_rx_csr_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (dma_rx_csr_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (dma_rx_csr_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (dma_rx_csr_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (dma_rx_csr_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (dma_rx_csr_address),                           //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (dma_rx_csr_write),                             //  output,   width = 1,                         .write
		.av_read                (dma_rx_csr_read),                              //  output,   width = 1,                         .read
		.av_readdata            (dma_rx_csr_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (dma_rx_csr_writedata),                         //  output,  width = 32,                         .writedata
		.av_byteenable          (dma_rx_csr_byteenable),                        //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_tx_csr_translator (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dma_tx_csr_agent_m0_address),                  //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (dma_tx_csr_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (dma_tx_csr_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (dma_tx_csr_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (dma_tx_csr_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_tx_csr_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dma_tx_csr_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (dma_tx_csr_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (dma_tx_csr_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (dma_tx_csr_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (dma_tx_csr_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (dma_tx_csr_address),                           //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (dma_tx_csr_write),                             //  output,   width = 1,                         .write
		.av_read                (dma_tx_csr_read),                              //  output,   width = 1,                         .read
		.av_readdata            (dma_tx_csr_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (dma_tx_csr_writedata),                         //  output,  width = 32,                         .writedata
		.av_byteenable          (dma_tx_csr_byteenable),                        //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_waitrequest         (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_rx_descriptor_slave_translator (
		.clk                    (clock_out_clk_clk),                                                                                                                                                                                                                                                     //   input,    width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                          //   input,    width = 1,                    reset.reset
		.uav_address            (dma_rx_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                              //   input,   width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (dma_rx_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                           //   input,    width = 6,                         .burstcount
		.uav_read               (dma_rx_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                                 //   input,    width = 1,                         .read
		.uav_write              (dma_rx_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                                //   input,    width = 1,                         .write
		.uav_waitrequest        (dma_rx_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                          //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_rx_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                        //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dma_rx_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                           //   input,   width = 32,                         .byteenable
		.uav_readdata           (dma_rx_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                             //  output,  width = 256,                         .readdata
		.uav_writedata          (dma_rx_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                            //   input,  width = 256,                         .writedata
		.uav_lock               (dma_rx_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                                 //   input,    width = 1,                         .lock
		.uav_debugaccess        (dma_rx_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                          //   input,    width = 1,                         .debugaccess
		.av_write               (dma_rx_descriptor_slave_write),                                                                                                                                                                                                                                         //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (dma_rx_descriptor_slave_writedata),                                                                                                                                                                                                                                     //  output,  width = 256,                         .writedata
		.av_byteenable          (dma_rx_descriptor_slave_byteenable),                                                                                                                                                                                                                                    //  output,   width = 32,                         .byteenable
		.av_waitrequest         (dma_rx_descriptor_slave_waitrequest),                                                                                                                                                                                                                                   //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_tx_descriptor_slave_translator (
		.clk                    (clock_out_clk_clk),                                                                                                                                                                                                                                                     //   input,    width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                          //   input,    width = 1,                    reset.reset
		.uav_address            (dma_tx_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                              //   input,   width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (dma_tx_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                           //   input,    width = 6,                         .burstcount
		.uav_read               (dma_tx_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                                 //   input,    width = 1,                         .read
		.uav_write              (dma_tx_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                                //   input,    width = 1,                         .write
		.uav_waitrequest        (dma_tx_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                          //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_tx_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                        //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (dma_tx_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                           //   input,   width = 32,                         .byteenable
		.uav_readdata           (dma_tx_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                             //  output,  width = 256,                         .readdata
		.uav_writedata          (dma_tx_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                            //   input,  width = 256,                         .writedata
		.uav_lock               (dma_tx_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                                 //   input,    width = 1,                         .lock
		.uav_debugaccess        (dma_tx_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                          //   input,    width = 1,                         .debugaccess
		.av_write               (dma_tx_descriptor_slave_write),                                                                                                                                                                                                                                         //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (dma_tx_descriptor_slave_writedata),                                                                                                                                                                                                                                     //  output,  width = 256,                         .writedata
		.av_byteenable          (dma_tx_descriptor_slave_byteenable),                                                                                                                                                                                                                                    //  output,   width = 32,                         .byteenable
		.av_waitrequest         (dma_tx_descriptor_slave_waitrequest),                                                                                                                                                                                                                                   //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	ethernet_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) dma_rx_response_translator (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dma_rx_response_agent_m0_address),             //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (dma_rx_response_agent_m0_burstcount),          //   input,   width = 3,                         .burstcount
		.uav_read               (dma_rx_response_agent_m0_read),                //   input,   width = 1,                         .read
		.uav_write              (dma_rx_response_agent_m0_write),               //   input,   width = 1,                         .write
		.uav_waitrequest        (dma_rx_response_agent_m0_waitrequest),         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dma_rx_response_agent_m0_readdatavalid),       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dma_rx_response_agent_m0_byteenable),          //   input,   width = 4,                         .byteenable
		.uav_readdata           (dma_rx_response_agent_m0_readdata),            //  output,  width = 32,                         .readdata
		.uav_writedata          (dma_rx_response_agent_m0_writedata),           //   input,  width = 32,                         .writedata
		.uav_lock               (dma_rx_response_agent_m0_lock),                //   input,   width = 1,                         .lock
		.uav_debugaccess        (dma_rx_response_agent_m0_debugaccess),         //   input,   width = 1,                         .debugaccess
		.av_address             (dma_rx_response_address),                      //  output,   width = 1,      avalon_anti_slave_0.address
		.av_read                (dma_rx_response_read),                         //  output,   width = 1,                         .read
		.av_readdata            (dma_rx_response_readdata),                     //   input,  width = 32,                         .readdata
		.av_byteenable          (dma_rx_response_byteenable),                   //  output,   width = 4,                         .byteenable
		.av_waitrequest         (dma_rx_response_waitrequest),                  //   input,   width = 1,                         .waitrequest
		.av_write               (),                                             // (terminated),                                       
		.av_writedata           (),                                             // (terminated),                                       
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_burstcount          (),                                             // (terminated),                                       
		.av_readdatavalid       (1'b0),                                         // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_debugaccess         (),                                             // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	ethernet_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (97),
		.PKT_DOMAIN_H              (96),
		.PKT_DOMAIN_L              (95),
		.PKT_SNOOP_H               (94),
		.PKT_SNOOP_L               (91),
		.PKT_BARRIER_H             (90),
		.PKT_BARRIER_L             (89),
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (52),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) mem_bridge_m0_agent (
		.clk                   (clock_out_clk_clk),                                                //   input,   width = 1,       clk.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (mem_bridge_m0_translator_avalon_universal_master_0_address),       //   input,  width = 11,        av.address
		.av_write              (mem_bridge_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (mem_bridge_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (mem_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (mem_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (mem_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (mem_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (mem_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (mem_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 7,          .burstcount
		.av_debugaccess        (mem_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (mem_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (mem_bridge_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (mem_bridge_m0_agent_cp_data),                                      //  output,  width = 98,          .data
		.cp_startofpacket      (mem_bridge_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (mem_bridge_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (mem_bridge_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (mem_bridge_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (mem_bridge_m0_limiter_rsp_src_data),                               //   input,  width = 98,          .data
		.rp_channel            (mem_bridge_m0_limiter_rsp_src_channel),                            //   input,   width = 6,          .channel
		.rp_startofpacket      (mem_bridge_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (mem_bridge_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (mem_bridge_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                 // (terminated),                        
		.av_writeresponsevalid ()                                                                  // (terminated),                        
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mac_control_port_agent (
		.clk                     (clock_out_clk_clk),                                    //   input,   width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),         //   input,   width = 1,       clk_reset.reset
		.m0_address              (mac_control_port_agent_m0_address),                    //  output,  width = 11,              m0.address
		.m0_burstcount           (mac_control_port_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (mac_control_port_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (mac_control_port_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (mac_control_port_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (mac_control_port_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (mac_control_port_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (mac_control_port_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (mac_control_port_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (mac_control_port_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (mac_control_port_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (mac_control_port_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (mac_control_port_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (mac_control_port_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (mac_control_port_agent_rp_data),                       //  output,  width = 98,                .data
		.rp_startofpacket        (mac_control_port_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (mac_control_port_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (mac_control_port_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (mac_control_port_burst_adapter_source0_data),          //   input,  width = 98,                .data
		.cp_startofpacket        (mac_control_port_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (mac_control_port_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (mac_control_port_burst_adapter_source0_channel),       //   input,   width = 6,                .channel
		.rf_sink_ready           (mac_control_port_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (mac_control_port_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (mac_control_port_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (mac_control_port_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (mac_control_port_agent_rsp_fifo_out_data),             //   input,  width = 99,                .data
		.rf_source_ready         (mac_control_port_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (mac_control_port_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (mac_control_port_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (mac_control_port_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (mac_control_port_agent_rf_source_data),                //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (mac_control_port_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mac_control_port_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (mac_control_port_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (mac_control_port_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mac_control_port_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (mac_control_port_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                              
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) mac_control_port_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.in_data           (mac_control_port_agent_rf_source_data),             //   input,  width = 99,        in.data
		.in_valid          (mac_control_port_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (mac_control_port_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (mac_control_port_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (mac_control_port_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (mac_control_port_agent_rsp_fifo_out_data),          //  output,  width = 99,       out.data
		.out_valid         (mac_control_port_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (mac_control_port_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (mac_control_port_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (mac_control_port_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                        
		.csr_read          (1'b0),                                              // (terminated),                        
		.csr_write         (1'b0),                                              // (terminated),                        
		.csr_readdata      (),                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                        
		.almost_full_data  (),                                                  // (terminated),                        
		.almost_empty_data (),                                                  // (terminated),                        
		.in_empty          (1'b0),                                              // (terminated),                        
		.out_empty         (),                                                  // (terminated),                        
		.in_error          (1'b0),                                              // (terminated),                        
		.out_error         (),                                                  // (terminated),                        
		.in_channel        (1'b0),                                              // (terminated),                        
		.out_channel       ()                                                   // (terminated),                        
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_rx_csr_agent (
		.clk                     (clock_out_clk_clk),                              //   input,   width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,       clk_reset.reset
		.m0_address              (dma_rx_csr_agent_m0_address),                    //  output,  width = 11,              m0.address
		.m0_burstcount           (dma_rx_csr_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (dma_rx_csr_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (dma_rx_csr_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (dma_rx_csr_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (dma_rx_csr_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (dma_rx_csr_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (dma_rx_csr_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (dma_rx_csr_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (dma_rx_csr_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (dma_rx_csr_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (dma_rx_csr_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (dma_rx_csr_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (dma_rx_csr_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (dma_rx_csr_agent_rp_data),                       //  output,  width = 98,                .data
		.rp_startofpacket        (dma_rx_csr_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (dma_rx_csr_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (dma_rx_csr_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (dma_rx_csr_burst_adapter_source0_data),          //   input,  width = 98,                .data
		.cp_startofpacket        (dma_rx_csr_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (dma_rx_csr_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (dma_rx_csr_burst_adapter_source0_channel),       //   input,   width = 6,                .channel
		.rf_sink_ready           (dma_rx_csr_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_rx_csr_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (dma_rx_csr_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_rx_csr_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (dma_rx_csr_agent_rsp_fifo_out_data),             //   input,  width = 99,                .data
		.rf_source_ready         (dma_rx_csr_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (dma_rx_csr_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (dma_rx_csr_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_rx_csr_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (dma_rx_csr_agent_rf_source_data),                //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (dma_rx_csr_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_rx_csr_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (dma_rx_csr_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (dma_rx_csr_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_rx_csr_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (dma_rx_csr_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                          // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                              
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_rx_csr_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (dma_rx_csr_agent_rf_source_data),              //   input,  width = 99,        in.data
		.in_valid          (dma_rx_csr_agent_rf_source_valid),             //   input,   width = 1,          .valid
		.in_ready          (dma_rx_csr_agent_rf_source_ready),             //  output,   width = 1,          .ready
		.in_startofpacket  (dma_rx_csr_agent_rf_source_startofpacket),     //   input,   width = 1,          .startofpacket
		.in_endofpacket    (dma_rx_csr_agent_rf_source_endofpacket),       //   input,   width = 1,          .endofpacket
		.out_data          (dma_rx_csr_agent_rsp_fifo_out_data),           //  output,  width = 99,       out.data
		.out_valid         (dma_rx_csr_agent_rsp_fifo_out_valid),          //  output,   width = 1,          .valid
		.out_ready         (dma_rx_csr_agent_rsp_fifo_out_ready),          //   input,   width = 1,          .ready
		.out_startofpacket (dma_rx_csr_agent_rsp_fifo_out_startofpacket),  //  output,   width = 1,          .startofpacket
		.out_endofpacket   (dma_rx_csr_agent_rsp_fifo_out_endofpacket),    //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                        // (terminated),                        
		.csr_read          (1'b0),                                         // (terminated),                        
		.csr_write         (1'b0),                                         // (terminated),                        
		.csr_readdata      (),                                             // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated),                        
		.almost_full_data  (),                                             // (terminated),                        
		.almost_empty_data (),                                             // (terminated),                        
		.in_empty          (1'b0),                                         // (terminated),                        
		.out_empty         (),                                             // (terminated),                        
		.in_error          (1'b0),                                         // (terminated),                        
		.out_error         (),                                             // (terminated),                        
		.in_channel        (1'b0),                                         // (terminated),                        
		.out_channel       ()                                              // (terminated),                        
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_tx_csr_agent (
		.clk                     (clock_out_clk_clk),                              //   input,   width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,       clk_reset.reset
		.m0_address              (dma_tx_csr_agent_m0_address),                    //  output,  width = 11,              m0.address
		.m0_burstcount           (dma_tx_csr_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (dma_tx_csr_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (dma_tx_csr_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (dma_tx_csr_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (dma_tx_csr_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (dma_tx_csr_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (dma_tx_csr_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (dma_tx_csr_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (dma_tx_csr_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (dma_tx_csr_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (dma_tx_csr_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (dma_tx_csr_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (dma_tx_csr_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (dma_tx_csr_agent_rp_data),                       //  output,  width = 98,                .data
		.rp_startofpacket        (dma_tx_csr_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (dma_tx_csr_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (dma_tx_csr_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (dma_tx_csr_burst_adapter_source0_data),          //   input,  width = 98,                .data
		.cp_startofpacket        (dma_tx_csr_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (dma_tx_csr_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (dma_tx_csr_burst_adapter_source0_channel),       //   input,   width = 6,                .channel
		.rf_sink_ready           (dma_tx_csr_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_tx_csr_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (dma_tx_csr_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_tx_csr_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (dma_tx_csr_agent_rsp_fifo_out_data),             //   input,  width = 99,                .data
		.rf_source_ready         (dma_tx_csr_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (dma_tx_csr_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (dma_tx_csr_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_tx_csr_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (dma_tx_csr_agent_rf_source_data),                //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (dma_tx_csr_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_tx_csr_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (dma_tx_csr_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (dma_tx_csr_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_tx_csr_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (dma_tx_csr_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                          // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                              
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_tx_csr_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (dma_tx_csr_agent_rf_source_data),              //   input,  width = 99,        in.data
		.in_valid          (dma_tx_csr_agent_rf_source_valid),             //   input,   width = 1,          .valid
		.in_ready          (dma_tx_csr_agent_rf_source_ready),             //  output,   width = 1,          .ready
		.in_startofpacket  (dma_tx_csr_agent_rf_source_startofpacket),     //   input,   width = 1,          .startofpacket
		.in_endofpacket    (dma_tx_csr_agent_rf_source_endofpacket),       //   input,   width = 1,          .endofpacket
		.out_data          (dma_tx_csr_agent_rsp_fifo_out_data),           //  output,  width = 99,       out.data
		.out_valid         (dma_tx_csr_agent_rsp_fifo_out_valid),          //  output,   width = 1,          .valid
		.out_ready         (dma_tx_csr_agent_rsp_fifo_out_ready),          //   input,   width = 1,          .ready
		.out_startofpacket (dma_tx_csr_agent_rsp_fifo_out_startofpacket),  //  output,   width = 1,          .startofpacket
		.out_endofpacket   (dma_tx_csr_agent_rsp_fifo_out_endofpacket),    //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                        // (terminated),                        
		.csr_read          (1'b0),                                         // (terminated),                        
		.csr_write         (1'b0),                                         // (terminated),                        
		.csr_readdata      (),                                             // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated),                        
		.almost_full_data  (),                                             // (terminated),                        
		.almost_empty_data (),                                             // (terminated),                        
		.in_empty          (1'b0),                                         // (terminated),                        
		.out_empty         (),                                             // (terminated),                        
		.in_error          (1'b0),                                         // (terminated),                        
		.out_error         (),                                             // (terminated),                        
		.in_channel        (1'b0),                                         // (terminated),                        
		.out_channel       ()                                              // (terminated),                        
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (340),
		.PKT_ORI_BURST_SIZE_L      (338),
		.PKT_RESPONSE_STATUS_H     (337),
		.PKT_RESPONSE_STATUS_L     (336),
		.PKT_BURST_SIZE_H          (315),
		.PKT_BURST_SIZE_L          (313),
		.PKT_TRANS_LOCK            (303),
		.PKT_BEGIN_BURST           (320),
		.PKT_PROTECTION_H          (331),
		.PKT_PROTECTION_L          (329),
		.PKT_BURSTWRAP_H           (312),
		.PKT_BURSTWRAP_L           (312),
		.PKT_BYTE_CNT_H            (311),
		.PKT_BYTE_CNT_L            (305),
		.PKT_ADDR_H                (298),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (299),
		.PKT_TRANS_POSTED          (300),
		.PKT_TRANS_WRITE           (301),
		.PKT_TRANS_READ            (302),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (324),
		.PKT_SRC_ID_L              (322),
		.PKT_DEST_ID_H             (327),
		.PKT_DEST_ID_L             (325),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (350),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_rx_descriptor_slave_agent (
		.clk                     (clock_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (dma_rx_descriptor_slave_agent_m0_address),                    //  output,   width = 11,              m0.address
		.m0_burstcount           (dma_rx_descriptor_slave_agent_m0_burstcount),                 //  output,    width = 6,                .burstcount
		.m0_byteenable           (dma_rx_descriptor_slave_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dma_rx_descriptor_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (dma_rx_descriptor_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (dma_rx_descriptor_slave_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dma_rx_descriptor_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (dma_rx_descriptor_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (dma_rx_descriptor_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (dma_rx_descriptor_slave_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (dma_rx_descriptor_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (dma_rx_descriptor_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dma_rx_descriptor_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (dma_rx_descriptor_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (dma_rx_descriptor_slave_agent_rp_data),                       //  output,  width = 350,                .data
		.rp_startofpacket        (dma_rx_descriptor_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (dma_rx_descriptor_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (dma_rx_descriptor_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (dma_rx_descriptor_slave_burst_adapter_source0_data),          //   input,  width = 350,                .data
		.cp_startofpacket        (dma_rx_descriptor_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (dma_rx_descriptor_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (dma_rx_descriptor_slave_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (dma_rx_descriptor_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_rx_descriptor_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dma_rx_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_rx_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dma_rx_descriptor_slave_agent_rsp_fifo_out_data),             //   input,  width = 351,                .data
		.rf_source_ready         (dma_rx_descriptor_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dma_rx_descriptor_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (dma_rx_descriptor_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_rx_descriptor_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (dma_rx_descriptor_slave_agent_rf_source_data),                //  output,  width = 351,                .data
		.rdata_fifo_sink_ready   (dma_rx_descriptor_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_rx_descriptor_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dma_rx_descriptor_slave_agent_rdata_fifo_out_data),           //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (dma_rx_descriptor_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_rx_descriptor_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dma_rx_descriptor_slave_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (351),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_rx_descriptor_slave_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (dma_rx_descriptor_slave_agent_rf_source_data),             //   input,  width = 351,        in.data
		.in_valid          (dma_rx_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dma_rx_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dma_rx_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dma_rx_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dma_rx_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 351,       out.data
		.out_valid         (dma_rx_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dma_rx_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dma_rx_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dma_rx_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated),                         
		.csr_read          (1'b0),                                                     // (terminated),                         
		.csr_write         (1'b0),                                                     // (terminated),                         
		.csr_readdata      (),                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                         
		.almost_full_data  (),                                                         // (terminated),                         
		.almost_empty_data (),                                                         // (terminated),                         
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_channel        (1'b0),                                                     // (terminated),                         
		.out_channel       ()                                                          // (terminated),                         
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_rx_descriptor_slave_agent_rdata_fifo (
		.clk               (clock_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_data           (dma_rx_descriptor_slave_agent_rdata_fifo_src_data),  //   input,  width = 258,        in.data
		.in_valid          (dma_rx_descriptor_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,          .valid
		.in_ready          (dma_rx_descriptor_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,          .ready
		.out_data          (dma_rx_descriptor_slave_agent_rdata_fifo_out_data),  //  output,  width = 258,       out.data
		.out_valid         (dma_rx_descriptor_slave_agent_rdata_fifo_out_valid), //  output,    width = 1,          .valid
		.out_ready         (dma_rx_descriptor_slave_agent_rdata_fifo_out_ready), //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_startofpacket  (1'b0),                                               // (terminated),                         
		.in_endofpacket    (1'b0),                                               // (terminated),                         
		.out_startofpacket (),                                                   // (terminated),                         
		.out_endofpacket   (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (340),
		.PKT_ORI_BURST_SIZE_L      (338),
		.PKT_RESPONSE_STATUS_H     (337),
		.PKT_RESPONSE_STATUS_L     (336),
		.PKT_BURST_SIZE_H          (315),
		.PKT_BURST_SIZE_L          (313),
		.PKT_TRANS_LOCK            (303),
		.PKT_BEGIN_BURST           (320),
		.PKT_PROTECTION_H          (331),
		.PKT_PROTECTION_L          (329),
		.PKT_BURSTWRAP_H           (312),
		.PKT_BURSTWRAP_L           (312),
		.PKT_BYTE_CNT_H            (311),
		.PKT_BYTE_CNT_L            (305),
		.PKT_ADDR_H                (298),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (299),
		.PKT_TRANS_POSTED          (300),
		.PKT_TRANS_WRITE           (301),
		.PKT_TRANS_READ            (302),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (324),
		.PKT_SRC_ID_L              (322),
		.PKT_DEST_ID_H             (327),
		.PKT_DEST_ID_L             (325),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (350),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_tx_descriptor_slave_agent (
		.clk                     (clock_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (dma_tx_descriptor_slave_agent_m0_address),                    //  output,   width = 11,              m0.address
		.m0_burstcount           (dma_tx_descriptor_slave_agent_m0_burstcount),                 //  output,    width = 6,                .burstcount
		.m0_byteenable           (dma_tx_descriptor_slave_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (dma_tx_descriptor_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (dma_tx_descriptor_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (dma_tx_descriptor_slave_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (dma_tx_descriptor_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (dma_tx_descriptor_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (dma_tx_descriptor_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (dma_tx_descriptor_slave_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (dma_tx_descriptor_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (dma_tx_descriptor_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dma_tx_descriptor_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (dma_tx_descriptor_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (dma_tx_descriptor_slave_agent_rp_data),                       //  output,  width = 350,                .data
		.rp_startofpacket        (dma_tx_descriptor_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (dma_tx_descriptor_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (dma_tx_descriptor_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (dma_tx_descriptor_slave_burst_adapter_source0_data),          //   input,  width = 350,                .data
		.cp_startofpacket        (dma_tx_descriptor_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (dma_tx_descriptor_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (dma_tx_descriptor_slave_burst_adapter_source0_channel),       //   input,    width = 6,                .channel
		.rf_sink_ready           (dma_tx_descriptor_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_tx_descriptor_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dma_tx_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_tx_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dma_tx_descriptor_slave_agent_rsp_fifo_out_data),             //   input,  width = 351,                .data
		.rf_source_ready         (dma_tx_descriptor_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dma_tx_descriptor_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (dma_tx_descriptor_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_tx_descriptor_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (dma_tx_descriptor_slave_agent_rf_source_data),                //  output,  width = 351,                .data
		.rdata_fifo_sink_ready   (dma_tx_descriptor_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_tx_descriptor_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dma_tx_descriptor_slave_agent_rdata_fifo_out_data),           //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (dma_tx_descriptor_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_tx_descriptor_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dma_tx_descriptor_slave_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (351),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_tx_descriptor_slave_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (dma_tx_descriptor_slave_agent_rf_source_data),             //   input,  width = 351,        in.data
		.in_valid          (dma_tx_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dma_tx_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dma_tx_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dma_tx_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dma_tx_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 351,       out.data
		.out_valid         (dma_tx_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dma_tx_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dma_tx_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dma_tx_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated),                         
		.csr_read          (1'b0),                                                     // (terminated),                         
		.csr_write         (1'b0),                                                     // (terminated),                         
		.csr_readdata      (),                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                         
		.almost_full_data  (),                                                         // (terminated),                         
		.almost_empty_data (),                                                         // (terminated),                         
		.in_empty          (1'b0),                                                     // (terminated),                         
		.out_empty         (),                                                         // (terminated),                         
		.in_error          (1'b0),                                                     // (terminated),                         
		.out_error         (),                                                         // (terminated),                         
		.in_channel        (1'b0),                                                     // (terminated),                         
		.out_channel       ()                                                          // (terminated),                         
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_tx_descriptor_slave_agent_rdata_fifo (
		.clk               (clock_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_data           (dma_tx_descriptor_slave_agent_rdata_fifo_src_data),  //   input,  width = 258,        in.data
		.in_valid          (dma_tx_descriptor_slave_agent_rdata_fifo_src_valid), //   input,    width = 1,          .valid
		.in_ready          (dma_tx_descriptor_slave_agent_rdata_fifo_src_ready), //  output,    width = 1,          .ready
		.out_data          (dma_tx_descriptor_slave_agent_rdata_fifo_out_data),  //  output,  width = 258,       out.data
		.out_valid         (dma_tx_descriptor_slave_agent_rdata_fifo_out_valid), //  output,    width = 1,          .valid
		.out_ready         (dma_tx_descriptor_slave_agent_rdata_fifo_out_ready), //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_startofpacket  (1'b0),                                               // (terminated),                         
		.in_endofpacket    (1'b0),                                               // (terminated),                         
		.out_startofpacket (),                                                   // (terminated),                         
		.out_endofpacket   (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	ethernet_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) dma_rx_response_agent (
		.clk                     (clock_out_clk_clk),                                   //   input,   width = 1,             clk.clk
		.reset                   (mem_bridge_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,       clk_reset.reset
		.m0_address              (dma_rx_response_agent_m0_address),                    //  output,  width = 11,              m0.address
		.m0_burstcount           (dma_rx_response_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (dma_rx_response_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (dma_rx_response_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (dma_rx_response_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (dma_rx_response_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (dma_rx_response_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (dma_rx_response_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (dma_rx_response_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (dma_rx_response_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (dma_rx_response_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (dma_rx_response_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (dma_rx_response_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (dma_rx_response_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (dma_rx_response_agent_rp_data),                       //  output,  width = 98,                .data
		.rp_startofpacket        (dma_rx_response_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (dma_rx_response_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (dma_rx_response_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (dma_rx_response_burst_adapter_source0_data),          //   input,  width = 98,                .data
		.cp_startofpacket        (dma_rx_response_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (dma_rx_response_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (dma_rx_response_burst_adapter_source0_channel),       //   input,   width = 6,                .channel
		.rf_sink_ready           (dma_rx_response_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (dma_rx_response_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (dma_rx_response_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (dma_rx_response_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (dma_rx_response_agent_rsp_fifo_out_data),             //   input,  width = 99,                .data
		.rf_source_ready         (dma_rx_response_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (dma_rx_response_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (dma_rx_response_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (dma_rx_response_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (dma_rx_response_agent_rf_source_data),                //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (dma_rx_response_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dma_rx_response_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (dma_rx_response_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (dma_rx_response_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_rx_response_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (dma_rx_response_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                               // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                              
	);

	ethernet_altera_avalon_sc_fifo_181_oywqgnq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.SYNC_RESET          (0)
	) dma_rx_response_agent_rsp_fifo (
		.clk               (clock_out_clk_clk),                                //   input,   width = 1,       clk.clk
		.reset             (mem_bridge_reset_reset_bridge_in_reset_reset),     //   input,   width = 1, clk_reset.reset
		.in_data           (dma_rx_response_agent_rf_source_data),             //   input,  width = 99,        in.data
		.in_valid          (dma_rx_response_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (dma_rx_response_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (dma_rx_response_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (dma_rx_response_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (dma_rx_response_agent_rsp_fifo_out_data),          //  output,  width = 99,       out.data
		.out_valid         (dma_rx_response_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (dma_rx_response_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (dma_rx_response_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (dma_rx_response_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                            // (terminated),                        
		.csr_read          (1'b0),                                             // (terminated),                        
		.csr_write         (1'b0),                                             // (terminated),                        
		.csr_readdata      (),                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated),                        
		.almost_full_data  (),                                                 // (terminated),                        
		.almost_empty_data (),                                                 // (terminated),                        
		.in_empty          (1'b0),                                             // (terminated),                        
		.out_empty         (),                                                 // (terminated),                        
		.in_error          (1'b0),                                             // (terminated),                        
		.out_error         (),                                                 // (terminated),                        
		.in_channel        (1'b0),                                             // (terminated),                        
		.out_channel       ()                                                  // (terminated),                        
	);

	ethernet_altera_merlin_router_181_sfibayi router (
		.sink_ready         (mem_bridge_m0_agent_cp_ready),                 //  output,   width = 1,      sink.ready
		.sink_valid         (mem_bridge_m0_agent_cp_valid),                 //   input,   width = 1,          .valid
		.sink_data          (mem_bridge_m0_agent_cp_data),                  //   input,  width = 98,          .data
		.sink_startofpacket (mem_bridge_m0_agent_cp_startofpacket),         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (mem_bridge_m0_agent_cp_endofpacket),           //   input,   width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                             //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                             //  output,   width = 1,          .valid
		.src_data           (router_src_data),                              //  output,  width = 98,          .data
		.src_channel        (router_src_channel),                           //  output,   width = 6,          .channel
		.src_startofpacket  (router_src_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_p4nyq3i router_001 (
		.sink_ready         (mac_control_port_agent_rp_ready),              //  output,   width = 1,      sink.ready
		.sink_valid         (mac_control_port_agent_rp_valid),              //   input,   width = 1,          .valid
		.sink_data          (mac_control_port_agent_rp_data),               //   input,  width = 98,          .data
		.sink_startofpacket (mac_control_port_agent_rp_startofpacket),      //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (mac_control_port_agent_rp_endofpacket),        //   input,   width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                         //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                         //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                          //  output,  width = 98,          .data
		.src_channel        (router_001_src_channel),                       //  output,   width = 6,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_p4nyq3i router_002 (
		.sink_ready         (dma_rx_csr_agent_rp_ready),                    //  output,   width = 1,      sink.ready
		.sink_valid         (dma_rx_csr_agent_rp_valid),                    //   input,   width = 1,          .valid
		.sink_data          (dma_rx_csr_agent_rp_data),                     //   input,  width = 98,          .data
		.sink_startofpacket (dma_rx_csr_agent_rp_startofpacket),            //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (dma_rx_csr_agent_rp_endofpacket),              //   input,   width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                         //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                         //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                          //  output,  width = 98,          .data
		.src_channel        (router_002_src_channel),                       //  output,   width = 6,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_p4nyq3i router_003 (
		.sink_ready         (dma_tx_csr_agent_rp_ready),                    //  output,   width = 1,      sink.ready
		.sink_valid         (dma_tx_csr_agent_rp_valid),                    //   input,   width = 1,          .valid
		.sink_data          (dma_tx_csr_agent_rp_data),                     //   input,  width = 98,          .data
		.sink_startofpacket (dma_tx_csr_agent_rp_startofpacket),            //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (dma_tx_csr_agent_rp_endofpacket),              //   input,   width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                         //   input,   width = 1,       src.ready
		.src_valid          (router_003_src_valid),                         //  output,   width = 1,          .valid
		.src_data           (router_003_src_data),                          //  output,  width = 98,          .data
		.src_channel        (router_003_src_channel),                       //  output,   width = 6,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_4dkolai router_004 (
		.sink_ready         (dma_rx_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (dma_rx_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (dma_rx_descriptor_slave_agent_rp_data),          //   input,  width = 350,          .data
		.sink_startofpacket (dma_rx_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_rx_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                            //  output,  width = 350,          .data
		.src_channel        (router_004_src_channel),                         //  output,    width = 6,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_4dkolai router_005 (
		.sink_ready         (dma_tx_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (dma_tx_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (dma_tx_descriptor_slave_agent_rp_data),          //   input,  width = 350,          .data
		.sink_startofpacket (dma_tx_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_tx_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                            //  output,  width = 350,          .data
		.src_channel        (router_005_src_channel),                         //  output,    width = 6,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	ethernet_altera_merlin_router_181_p4nyq3i router_006 (
		.sink_ready         (dma_rx_response_agent_rp_ready),               //  output,   width = 1,      sink.ready
		.sink_valid         (dma_rx_response_agent_rp_valid),               //   input,   width = 1,          .valid
		.sink_data          (dma_rx_response_agent_rp_data),                //   input,  width = 98,          .data
		.sink_startofpacket (dma_rx_response_agent_rp_startofpacket),       //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (dma_rx_response_agent_rp_endofpacket),         //   input,   width = 1,          .endofpacket
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                         //   input,   width = 1,       src.ready
		.src_valid          (router_006_src_valid),                         //  output,   width = 1,          .valid
		.src_data           (router_006_src_data),                          //  output,  width = 98,          .data
		.src_channel        (router_006_src_channel),                       //  output,   width = 6,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_traffic_limiter_181_reppfiq #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mem_bridge_m0_limiter (
		.clk                    (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset                  (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                             //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                             //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                              //   input,  width = 98,          .data
		.cmd_sink_channel       (router_src_channel),                           //   input,   width = 6,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                     //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                       //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (mem_bridge_m0_limiter_cmd_src_ready),          //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (mem_bridge_m0_limiter_cmd_src_data),           //  output,  width = 98,          .data
		.cmd_src_channel        (mem_bridge_m0_limiter_cmd_src_channel),        //  output,   width = 6,          .channel
		.cmd_src_startofpacket  (mem_bridge_m0_limiter_cmd_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (mem_bridge_m0_limiter_cmd_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                            //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                            //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                          //   input,   width = 6,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                             //   input,  width = 98,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                    //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                      //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (mem_bridge_m0_limiter_rsp_src_ready),          //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (mem_bridge_m0_limiter_rsp_src_valid),          //  output,   width = 1,          .valid
		.rsp_src_data           (mem_bridge_m0_limiter_rsp_src_data),           //  output,  width = 98,          .data
		.rsp_src_channel        (mem_bridge_m0_limiter_rsp_src_channel),        //  output,   width = 6,          .channel
		.rsp_src_startofpacket  (mem_bridge_m0_limiter_rsp_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (mem_bridge_m0_limiter_rsp_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (mem_bridge_m0_limiter_cmd_valid_data)          //  output,   width = 6, cmd_valid.data
	);

	ethernet_altera_merlin_burst_adapter_181_vqipsrq #(
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (68),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (60),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) mac_control_port_burst_adapter (
		.clk                   (clock_out_clk_clk),                                    //   input,   width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                    //   input,   width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                     //   input,  width = 98,          .data
		.sink0_channel         (cmd_mux_src_channel),                                  //   input,   width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                            //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                              //   input,   width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                    //  output,   width = 1,          .ready
		.source0_valid         (mac_control_port_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (mac_control_port_burst_adapter_source0_data),          //  output,  width = 98,          .data
		.source0_channel       (mac_control_port_burst_adapter_source0_channel),       //  output,   width = 6,          .channel
		.source0_startofpacket (mac_control_port_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (mac_control_port_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (mac_control_port_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	ethernet_altera_merlin_burst_adapter_181_vqipsrq #(
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (68),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (60),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_rx_csr_burst_adapter (
		.clk                   (clock_out_clk_clk),                              //   input,   width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                          //   input,   width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                           //   input,  width = 98,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                        //   input,   width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                          //  output,   width = 1,          .ready
		.source0_valid         (dma_rx_csr_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (dma_rx_csr_burst_adapter_source0_data),          //  output,  width = 98,          .data
		.source0_channel       (dma_rx_csr_burst_adapter_source0_channel),       //  output,   width = 6,          .channel
		.source0_startofpacket (dma_rx_csr_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (dma_rx_csr_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (dma_rx_csr_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	ethernet_altera_merlin_burst_adapter_181_vqipsrq #(
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (68),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (60),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_tx_csr_burst_adapter (
		.clk                   (clock_out_clk_clk),                              //   input,   width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),   //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                          //   input,   width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                           //   input,  width = 98,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                        //   input,   width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                  //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                    //   input,   width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                          //  output,   width = 1,          .ready
		.source0_valid         (dma_tx_csr_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (dma_tx_csr_burst_adapter_source0_data),          //  output,  width = 98,          .data
		.source0_channel       (dma_tx_csr_burst_adapter_source0_channel),       //  output,   width = 6,          .channel
		.source0_startofpacket (dma_tx_csr_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (dma_tx_csr_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (dma_tx_csr_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	ethernet_altera_merlin_burst_adapter_181_6qoyp7y #(
		.PKT_ADDR_H                (298),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (320),
		.PKT_BYTE_CNT_H            (311),
		.PKT_BYTE_CNT_L            (305),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (315),
		.PKT_BURST_SIZE_L          (313),
		.PKT_BURST_TYPE_H          (317),
		.PKT_BURST_TYPE_L          (316),
		.PKT_BURSTWRAP_H           (312),
		.PKT_BURSTWRAP_L           (312),
		.PKT_TRANS_COMPRESSED_READ (299),
		.PKT_TRANS_WRITE           (301),
		.PKT_TRANS_READ            (302),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (350),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (310),
		.OUT_BURSTWRAP_H           (312),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_rx_descriptor_slave_burst_adapter (
		.clk                   (clock_out_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (dma_rx_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (dma_rx_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 350,          .data
		.sink0_channel         (dma_rx_descriptor_slave_cmd_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink0_startofpacket   (dma_rx_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (dma_rx_descriptor_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (dma_rx_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (dma_rx_descriptor_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (dma_rx_descriptor_slave_burst_adapter_source0_data),          //  output,  width = 350,          .data
		.source0_channel       (dma_rx_descriptor_slave_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (dma_rx_descriptor_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (dma_rx_descriptor_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (dma_rx_descriptor_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ethernet_altera_merlin_burst_adapter_181_6qoyp7y #(
		.PKT_ADDR_H                (298),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (320),
		.PKT_BYTE_CNT_H            (311),
		.PKT_BYTE_CNT_L            (305),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (315),
		.PKT_BURST_SIZE_L          (313),
		.PKT_BURST_TYPE_H          (317),
		.PKT_BURST_TYPE_L          (316),
		.PKT_BURSTWRAP_H           (312),
		.PKT_BURSTWRAP_L           (312),
		.PKT_TRANS_COMPRESSED_READ (299),
		.PKT_TRANS_WRITE           (301),
		.PKT_TRANS_READ            (302),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (350),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (310),
		.OUT_BURSTWRAP_H           (312),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_tx_descriptor_slave_burst_adapter (
		.clk                   (clock_out_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (dma_tx_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (dma_tx_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 350,          .data
		.sink0_channel         (dma_tx_descriptor_slave_cmd_width_adapter_src_channel),       //   input,    width = 6,          .channel
		.sink0_startofpacket   (dma_tx_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (dma_tx_descriptor_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (dma_tx_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (dma_tx_descriptor_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (dma_tx_descriptor_slave_burst_adapter_source0_data),          //  output,  width = 350,          .data
		.source0_channel       (dma_tx_descriptor_slave_burst_adapter_source0_channel),       //  output,    width = 6,          .channel
		.source0_startofpacket (dma_tx_descriptor_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (dma_tx_descriptor_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (dma_tx_descriptor_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ethernet_altera_merlin_burst_adapter_181_vqipsrq #(
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (68),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (60),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) dma_rx_response_burst_adapter (
		.clk                   (clock_out_clk_clk),                                   //   input,   width = 1,       cr0.clk
		.reset                 (mem_bridge_reset_reset_bridge_in_reset_reset),        //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                               //   input,   width = 1,     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                //   input,  width = 98,          .data
		.sink0_channel         (cmd_mux_005_src_channel),                             //   input,   width = 6,          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                       //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                         //   input,   width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                               //  output,   width = 1,          .ready
		.source0_valid         (dma_rx_response_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (dma_rx_response_burst_adapter_source0_data),          //  output,  width = 98,          .data
		.source0_channel       (dma_rx_response_burst_adapter_source0_channel),       //  output,   width = 6,          .channel
		.source0_startofpacket (dma_rx_response_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (dma_rx_response_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (dma_rx_response_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	ethernet_altera_merlin_demultiplexer_181_cidtaty cmd_demux (
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,        clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  clk_reset.reset
		.sink_ready         (mem_bridge_m0_limiter_cmd_src_ready),          //  output,   width = 1,       sink.ready
		.sink_channel       (mem_bridge_m0_limiter_cmd_src_channel),        //   input,   width = 6,           .channel
		.sink_data          (mem_bridge_m0_limiter_cmd_src_data),           //   input,  width = 98,           .data
		.sink_startofpacket (mem_bridge_m0_limiter_cmd_src_startofpacket),  //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (mem_bridge_m0_limiter_cmd_src_endofpacket),    //   input,   width = 1,           .endofpacket
		.sink_valid         (mem_bridge_m0_limiter_cmd_valid_data),         //   input,   width = 6, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                         //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                          //  output,  width = 98,           .data
		.src0_channel       (cmd_demux_src0_channel),                       //  output,   width = 6,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                   //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                         //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                         //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                          //  output,  width = 98,           .data
		.src1_channel       (cmd_demux_src1_channel),                       //  output,   width = 6,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                   //  output,   width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                         //   input,   width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                         //  output,   width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                          //  output,  width = 98,           .data
		.src2_channel       (cmd_demux_src2_channel),                       //  output,   width = 6,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                   //  output,   width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                         //   input,   width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                         //  output,   width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                          //  output,  width = 98,           .data
		.src3_channel       (cmd_demux_src3_channel),                       //  output,   width = 6,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                   //  output,   width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                         //   input,   width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                         //  output,   width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                          //  output,  width = 98,           .data
		.src4_channel       (cmd_demux_src4_channel),                       //  output,   width = 6,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                   //  output,   width = 1,           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                         //   input,   width = 1,       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                         //  output,   width = 1,           .valid
		.src5_data          (cmd_demux_src5_data),                          //  output,  width = 98,           .data
		.src5_channel       (cmd_demux_src5_channel),                       //  output,   width = 6,           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                 //  output,   width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                    //  output,   width = 1,           .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                            //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                             //  output,  width = 98,          .data
		.src_channel         (cmd_mux_src_channel),                          //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src0_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux_001 (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                         //  output,  width = 98,          .data
		.src_channel         (cmd_mux_001_src_channel),                      //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src1_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux_002 (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //  output,   width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                         //  output,  width = 98,          .data
		.src_channel         (cmd_mux_002_src_channel),                      //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src2_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux_003 (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //  output,   width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                         //  output,  width = 98,          .data
		.src_channel         (cmd_mux_003_src_channel),                      //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src3_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux_004 (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //  output,   width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                         //  output,  width = 98,          .data
		.src_channel         (cmd_mux_004_src_channel),                      //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src4_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_2frp45y cmd_mux_005 (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //  output,   width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                         //  output,  width = 98,          .data
		.src_channel         (cmd_mux_005_src_channel),                      //  output,   width = 6,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (cmd_demux_src5_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                    //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux (
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                         //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                       //   input,   width = 6,          .channel
		.sink_data          (router_001_src_data),                          //   input,  width = 98,          .data
		.sink_startofpacket (router_001_src_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                   //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                          //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_src0_channel),                       //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux_001 (
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                       //   input,   width = 6,          .channel
		.sink_data          (router_002_src_data),                          //   input,  width = 98,          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux_002 (
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //  output,   width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                       //   input,   width = 6,          .channel
		.sink_data          (router_003_src_data),                          //   input,  width = 98,          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //   input,   width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux_003 (
		.clk                (clock_out_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.sink_ready         (dma_rx_descriptor_slave_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (dma_rx_descriptor_slave_rsp_width_adapter_src_channel),       //   input,   width = 6,          .channel
		.sink_data          (dma_rx_descriptor_slave_rsp_width_adapter_src_data),          //   input,  width = 98,          .data
		.sink_startofpacket (dma_rx_descriptor_slave_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (dma_rx_descriptor_slave_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (dma_rx_descriptor_slave_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                    //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                    //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                     //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                  //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                            //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                               //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux_004 (
		.clk                (clock_out_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.sink_ready         (dma_tx_descriptor_slave_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (dma_tx_descriptor_slave_rsp_width_adapter_src_channel),       //   input,   width = 6,          .channel
		.sink_data          (dma_tx_descriptor_slave_rsp_width_adapter_src_data),          //   input,  width = 98,          .data
		.sink_startofpacket (dma_tx_descriptor_slave_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (dma_tx_descriptor_slave_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (dma_tx_descriptor_slave_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                    //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                    //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                     //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                  //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                            //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                               //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_demultiplexer_181_v27smiy rsp_demux_005 (
		.clk                (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset              (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //  output,   width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                       //   input,   width = 6,          .channel
		.sink_data          (router_006_src_data),                          //   input,  width = 98,          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //   input,   width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //  output,   width = 6,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                //  output,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_multiplexer_181_4vfw7ri rsp_mux (
		.clk                 (clock_out_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset               (mem_bridge_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                            //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                             //  output,  width = 98,          .data
		.src_channel         (rsp_mux_src_channel),                          //  output,   width = 6,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //   input,   width = 6,          .channel
		.sink0_data          (rsp_demux_src0_data),                          //   input,  width = 98,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                   //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                     //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                     //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                   //   input,   width = 6,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                      //   input,  width = 98,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),               //   input,   width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                     //  output,   width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                     //   input,   width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                   //   input,   width = 6,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                      //   input,  width = 98,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),               //   input,   width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                     //  output,   width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                     //   input,   width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                   //   input,   width = 6,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                      //   input,  width = 98,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),               //   input,   width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                     //  output,   width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                     //   input,   width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                   //   input,   width = 6,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                      //   input,  width = 98,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),               //   input,   width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                     //  output,   width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                     //   input,   width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                   //   input,   width = 6,          .channel
		.sink5_data          (rsp_demux_005_src0_data),                      //   input,  width = 98,          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                //   input,   width = 1,          .endofpacket
	);

	ethernet_altera_merlin_width_adapter_181_puzc3kq #(
		.IN_PKT_ADDR_H                 (298),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (311),
		.IN_PKT_BYTE_CNT_L             (305),
		.IN_PKT_TRANS_COMPRESSED_READ  (299),
		.IN_PKT_TRANS_WRITE            (301),
		.IN_PKT_BURSTWRAP_H            (312),
		.IN_PKT_BURSTWRAP_L            (312),
		.IN_PKT_BURST_SIZE_H           (315),
		.IN_PKT_BURST_SIZE_L           (313),
		.IN_PKT_RESPONSE_STATUS_H      (337),
		.IN_PKT_RESPONSE_STATUS_L      (336),
		.IN_PKT_TRANS_EXCLUSIVE        (304),
		.IN_PKT_BURST_TYPE_H           (317),
		.IN_PKT_BURST_TYPE_L           (316),
		.IN_PKT_ORI_BURST_SIZE_L       (338),
		.IN_PKT_ORI_BURST_SIZE_H       (340),
		.IN_ST_DATA_W                  (350),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_rx_descriptor_slave_rsp_width_adapter (
		.clk                  (clock_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (router_004_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_004_src_channel),                                      //   input,    width = 6,          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_004_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_004_src_data),                                         //   input,  width = 350,          .data
		.out_endofpacket      (dma_rx_descriptor_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_rx_descriptor_slave_rsp_width_adapter_src_data),          //  output,   width = 98,          .data
		.out_channel          (dma_rx_descriptor_slave_rsp_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (dma_rx_descriptor_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_rx_descriptor_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_rx_descriptor_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	ethernet_altera_merlin_width_adapter_181_puzc3kq #(
		.IN_PKT_ADDR_H                 (298),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (311),
		.IN_PKT_BYTE_CNT_L             (305),
		.IN_PKT_TRANS_COMPRESSED_READ  (299),
		.IN_PKT_TRANS_WRITE            (301),
		.IN_PKT_BURSTWRAP_H            (312),
		.IN_PKT_BURSTWRAP_L            (312),
		.IN_PKT_BURST_SIZE_H           (315),
		.IN_PKT_BURST_SIZE_L           (313),
		.IN_PKT_RESPONSE_STATUS_H      (337),
		.IN_PKT_RESPONSE_STATUS_L      (336),
		.IN_PKT_TRANS_EXCLUSIVE        (304),
		.IN_PKT_BURST_TYPE_H           (317),
		.IN_PKT_BURST_TYPE_L           (316),
		.IN_PKT_ORI_BURST_SIZE_L       (338),
		.IN_PKT_ORI_BURST_SIZE_H       (340),
		.IN_ST_DATA_W                  (350),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_tx_descriptor_slave_rsp_width_adapter (
		.clk                  (clock_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (router_005_src_valid),                                        //   input,    width = 1,      sink.valid
		.in_channel           (router_005_src_channel),                                      //   input,    width = 6,          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.in_ready             (router_005_src_ready),                                        //  output,    width = 1,          .ready
		.in_data              (router_005_src_data),                                         //   input,  width = 350,          .data
		.out_endofpacket      (dma_tx_descriptor_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_tx_descriptor_slave_rsp_width_adapter_src_data),          //  output,   width = 98,          .data
		.out_channel          (dma_tx_descriptor_slave_rsp_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (dma_tx_descriptor_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_tx_descriptor_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_tx_descriptor_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	ethernet_altera_merlin_width_adapter_181_hotgygq #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (298),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (311),
		.OUT_PKT_BYTE_CNT_L            (305),
		.OUT_PKT_TRANS_COMPRESSED_READ (299),
		.OUT_PKT_BURST_SIZE_H          (315),
		.OUT_PKT_BURST_SIZE_L          (313),
		.OUT_PKT_RESPONSE_STATUS_H     (337),
		.OUT_PKT_RESPONSE_STATUS_L     (336),
		.OUT_PKT_TRANS_EXCLUSIVE       (304),
		.OUT_PKT_BURST_TYPE_H          (317),
		.OUT_PKT_BURST_TYPE_L          (316),
		.OUT_PKT_ORI_BURST_SIZE_L      (338),
		.OUT_PKT_ORI_BURST_SIZE_H      (340),
		.OUT_ST_DATA_W                 (350),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_rx_descriptor_slave_cmd_width_adapter (
		.clk                  (clock_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                     //   input,    width = 6,          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (cmd_mux_003_src_data),                                        //   input,   width = 98,          .data
		.out_endofpacket      (dma_rx_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_rx_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 350,          .data
		.out_channel          (dma_rx_descriptor_slave_cmd_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (dma_rx_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_rx_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_rx_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

	ethernet_altera_merlin_width_adapter_181_hotgygq #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (298),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (311),
		.OUT_PKT_BYTE_CNT_L            (305),
		.OUT_PKT_TRANS_COMPRESSED_READ (299),
		.OUT_PKT_BURST_SIZE_H          (315),
		.OUT_PKT_BURST_SIZE_L          (313),
		.OUT_PKT_RESPONSE_STATUS_H     (337),
		.OUT_PKT_RESPONSE_STATUS_L     (336),
		.OUT_PKT_TRANS_EXCLUSIVE       (304),
		.OUT_PKT_BURST_TYPE_H          (317),
		.OUT_PKT_BURST_TYPE_L          (316),
		.OUT_PKT_ORI_BURST_SIZE_L      (338),
		.OUT_PKT_ORI_BURST_SIZE_H      (340),
		.OUT_ST_DATA_W                 (350),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) dma_tx_descriptor_slave_cmd_width_adapter (
		.clk                  (clock_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (mem_bridge_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                     //   input,    width = 6,          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                       //  output,    width = 1,          .ready
		.in_data              (cmd_mux_004_src_data),                                        //   input,   width = 98,          .data
		.out_endofpacket      (dma_tx_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (dma_tx_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 350,          .data
		.out_channel          (dma_tx_descriptor_slave_cmd_width_adapter_src_channel),       //  output,    width = 6,          .channel
		.out_valid            (dma_tx_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (dma_tx_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (dma_tx_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                       // (terminated),                         
	);

endmodule
