// ethernet.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module ethernet (
		input  wire         clk_in_clk,         //     clk_in.clk
		input  wire         avm_waitrequest,    //        avm.waitrequest
		input  wire [255:0] avm_readdata,       //           .readdata
		input  wire         avm_readdatavalid,  //           .readdatavalid
		input  wire [1:0]   avm_response,       //           .response
		output wire [7:0]   avm_burstcount,     //           .burstcount
		output wire [255:0] avm_writedata,      //           .writedata
		output wire [30:0]  avm_address,        //           .address
		output wire         avm_write,          //           .write
		output wire         avm_read,           //           .read
		output wire [31:0]  avm_byteenable,     //           .byteenable
		output wire         avm_debugaccess,    //           .debugaccess
		output wire         dma_rx_irq_irq,     // dma_rx_irq.irq
		output wire         dma_tx_irq_irq,     // dma_tx_irq.irq
		input  wire         tx_clock_clk,       //   tx_clock.clk
		input  wire         misc_xon_gen,       //       misc.xon_gen
		input  wire         misc_xoff_gen,      //           .xoff_gen
		output wire         misc_magic_wakeup,  //           .magic_wakeup
		input  wire         misc_magic_sleep_n, //           .magic_sleep_n
		input  wire         misc_ff_tx_crc_fwd, //           .ff_tx_crc_fwd
		output wire         misc_ff_tx_septy,   //           .ff_tx_septy
		output wire         misc_tx_ff_uflow,   //           .tx_ff_uflow
		output wire         misc_ff_tx_a_full,  //           .ff_tx_a_full
		output wire         misc_ff_tx_a_empty, //           .ff_tx_a_empty
		output wire [17:0]  misc_rx_err_stat,   //           .rx_err_stat
		output wire [3:0]   misc_rx_frm_type,   //           .rx_frm_type
		output wire         misc_ff_rx_dsav,    //           .ff_rx_dsav
		output wire         misc_ff_rx_a_full,  //           .ff_rx_a_full
		output wire         misc_ff_rx_a_empty, //           .ff_rx_a_empty
		output wire         mdio_mdc,           //       mdio.mdc
		input  wire         mdio_mdio_in,       //           .mdio_in
		output wire         mdio_mdio_out,      //           .mdio_out
		output wire         mdio_mdio_oen,      //           .mdio_oen
		input  wire [7:0]   gmii_gmii_rx_d,     //       gmii.gmii_rx_d
		input  wire         gmii_gmii_rx_dv,    //           .gmii_rx_dv
		input  wire         gmii_gmii_rx_err,   //           .gmii_rx_err
		output wire [7:0]   gmii_gmii_tx_d,     //           .gmii_tx_d
		output wire         gmii_gmii_tx_en,    //           .gmii_tx_en
		output wire         gmii_gmii_tx_err,   //           .gmii_tx_err
		input  wire [3:0]   mii_mii_rx_d,       //        mii.mii_rx_d
		input  wire         mii_mii_rx_dv,      //           .mii_rx_dv
		input  wire         mii_mii_rx_err,     //           .mii_rx_err
		output wire [3:0]   mii_mii_tx_d,       //           .mii_tx_d
		output wire         mii_mii_tx_en,      //           .mii_tx_en
		output wire         mii_mii_tx_err,     //           .mii_tx_err
		input  wire         status_set_10,      //     status.set_10
		input  wire         status_set_1000,    //           .set_1000
		output wire         status_eth_mode,    //           .eth_mode
		output wire         status_ena_10,      //           .ena_10
		input  wire         rx_clock_clk,       //   rx_clock.clk
		output wire         avs_waitrequest,    //        avs.waitrequest
		output wire [31:0]  avs_readdata,       //           .readdata
		output wire         avs_readdatavalid,  //           .readdatavalid
		input  wire [4:0]   avs_burstcount,     //           .burstcount
		input  wire [31:0]  avs_writedata,      //           .writedata
		input  wire [10:0]  avs_address,        //           .address
		input  wire         avs_write,          //           .write
		input  wire         avs_read,           //           .read
		input  wire [3:0]   avs_byteenable,     //           .byteenable
		input  wire         avs_debugaccess,    //           .debugaccess
		input  wire         rst_in_reset_n      //     rst_in.reset_n
	);

	wire          clock_out_clk_clk;                                     // clock:out_clk -> [avalon_st_adapter:in_clk_0_clk, avalon_st_adapter_001:in_clk_0_clk, dma_bridge:clk, dma_rx:clock_clk, dma_tx:clock_clk, mac:clk, mac:ff_rx_clk, mac:ff_tx_clk, mem_bridge:clk, mm_interconnect_0:clock_out_clk_clk, mm_interconnect_1:clock_out_clk_clk, rst_controller:clk, rst_controller_001:clk]
	wire          ethernet_iopll_outclk0_clk;                            // ethernet_iopll:outclk_0 -> mac:tx_clk
	wire          reset_out_reset_reset;                                 // reset:out_reset_n -> [ethernet_iopll:rst, rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire          mem_bridge_m0_waitrequest;                             // mm_interconnect_0:mem_bridge_m0_waitrequest -> mem_bridge:m0_waitrequest
	wire   [31:0] mem_bridge_m0_readdata;                                // mm_interconnect_0:mem_bridge_m0_readdata -> mem_bridge:m0_readdata
	wire          mem_bridge_m0_debugaccess;                             // mem_bridge:m0_debugaccess -> mm_interconnect_0:mem_bridge_m0_debugaccess
	wire   [10:0] mem_bridge_m0_address;                                 // mem_bridge:m0_address -> mm_interconnect_0:mem_bridge_m0_address
	wire          mem_bridge_m0_read;                                    // mem_bridge:m0_read -> mm_interconnect_0:mem_bridge_m0_read
	wire    [3:0] mem_bridge_m0_byteenable;                              // mem_bridge:m0_byteenable -> mm_interconnect_0:mem_bridge_m0_byteenable
	wire          mem_bridge_m0_readdatavalid;                           // mm_interconnect_0:mem_bridge_m0_readdatavalid -> mem_bridge:m0_readdatavalid
	wire   [31:0] mem_bridge_m0_writedata;                               // mem_bridge:m0_writedata -> mm_interconnect_0:mem_bridge_m0_writedata
	wire          mem_bridge_m0_write;                                   // mem_bridge:m0_write -> mm_interconnect_0:mem_bridge_m0_write
	wire    [4:0] mem_bridge_m0_burstcount;                              // mem_bridge:m0_burstcount -> mm_interconnect_0:mem_bridge_m0_burstcount
	wire   [31:0] mm_interconnect_0_mac_control_port_readdata;           // mac:reg_data_out -> mm_interconnect_0:mac_control_port_readdata
	wire          mm_interconnect_0_mac_control_port_waitrequest;        // mac:reg_busy -> mm_interconnect_0:mac_control_port_waitrequest
	wire    [7:0] mm_interconnect_0_mac_control_port_address;            // mm_interconnect_0:mac_control_port_address -> mac:reg_addr
	wire          mm_interconnect_0_mac_control_port_read;               // mm_interconnect_0:mac_control_port_read -> mac:reg_rd
	wire          mm_interconnect_0_mac_control_port_write;              // mm_interconnect_0:mac_control_port_write -> mac:reg_wr
	wire   [31:0] mm_interconnect_0_mac_control_port_writedata;          // mm_interconnect_0:mac_control_port_writedata -> mac:reg_data_in
	wire   [31:0] mm_interconnect_0_dma_rx_csr_readdata;                 // dma_rx:csr_readdata -> mm_interconnect_0:dma_rx_csr_readdata
	wire    [2:0] mm_interconnect_0_dma_rx_csr_address;                  // mm_interconnect_0:dma_rx_csr_address -> dma_rx:csr_address
	wire          mm_interconnect_0_dma_rx_csr_read;                     // mm_interconnect_0:dma_rx_csr_read -> dma_rx:csr_read
	wire    [3:0] mm_interconnect_0_dma_rx_csr_byteenable;               // mm_interconnect_0:dma_rx_csr_byteenable -> dma_rx:csr_byteenable
	wire          mm_interconnect_0_dma_rx_csr_write;                    // mm_interconnect_0:dma_rx_csr_write -> dma_rx:csr_write
	wire   [31:0] mm_interconnect_0_dma_rx_csr_writedata;                // mm_interconnect_0:dma_rx_csr_writedata -> dma_rx:csr_writedata
	wire   [31:0] mm_interconnect_0_dma_tx_csr_readdata;                 // dma_tx:csr_readdata -> mm_interconnect_0:dma_tx_csr_readdata
	wire    [2:0] mm_interconnect_0_dma_tx_csr_address;                  // mm_interconnect_0:dma_tx_csr_address -> dma_tx:csr_address
	wire          mm_interconnect_0_dma_tx_csr_read;                     // mm_interconnect_0:dma_tx_csr_read -> dma_tx:csr_read
	wire    [3:0] mm_interconnect_0_dma_tx_csr_byteenable;               // mm_interconnect_0:dma_tx_csr_byteenable -> dma_tx:csr_byteenable
	wire          mm_interconnect_0_dma_tx_csr_write;                    // mm_interconnect_0:dma_tx_csr_write -> dma_tx:csr_write
	wire   [31:0] mm_interconnect_0_dma_tx_csr_writedata;                // mm_interconnect_0:dma_tx_csr_writedata -> dma_tx:csr_writedata
	wire          mm_interconnect_0_dma_rx_descriptor_slave_waitrequest; // dma_rx:descriptor_slave_waitrequest -> mm_interconnect_0:dma_rx_descriptor_slave_waitrequest
	wire   [31:0] mm_interconnect_0_dma_rx_descriptor_slave_byteenable;  // mm_interconnect_0:dma_rx_descriptor_slave_byteenable -> dma_rx:descriptor_slave_byteenable
	wire          mm_interconnect_0_dma_rx_descriptor_slave_write;       // mm_interconnect_0:dma_rx_descriptor_slave_write -> dma_rx:descriptor_slave_write
	wire  [255:0] mm_interconnect_0_dma_rx_descriptor_slave_writedata;   // mm_interconnect_0:dma_rx_descriptor_slave_writedata -> dma_rx:descriptor_slave_writedata
	wire          mm_interconnect_0_dma_tx_descriptor_slave_waitrequest; // dma_tx:descriptor_slave_waitrequest -> mm_interconnect_0:dma_tx_descriptor_slave_waitrequest
	wire   [31:0] mm_interconnect_0_dma_tx_descriptor_slave_byteenable;  // mm_interconnect_0:dma_tx_descriptor_slave_byteenable -> dma_tx:descriptor_slave_byteenable
	wire          mm_interconnect_0_dma_tx_descriptor_slave_write;       // mm_interconnect_0:dma_tx_descriptor_slave_write -> dma_tx:descriptor_slave_write
	wire  [255:0] mm_interconnect_0_dma_tx_descriptor_slave_writedata;   // mm_interconnect_0:dma_tx_descriptor_slave_writedata -> dma_tx:descriptor_slave_writedata
	wire   [31:0] mm_interconnect_0_dma_rx_response_readdata;            // dma_rx:response_readdata -> mm_interconnect_0:dma_rx_response_readdata
	wire          mm_interconnect_0_dma_rx_response_waitrequest;         // dma_rx:response_waitrequest -> mm_interconnect_0:dma_rx_response_waitrequest
	wire    [0:0] mm_interconnect_0_dma_rx_response_address;             // mm_interconnect_0:dma_rx_response_address -> dma_rx:response_address
	wire          mm_interconnect_0_dma_rx_response_read;                // mm_interconnect_0:dma_rx_response_read -> dma_rx:response_read
	wire    [3:0] mm_interconnect_0_dma_rx_response_byteenable;          // mm_interconnect_0:dma_rx_response_byteenable -> dma_rx:response_byteenable
	wire  [255:0] dma_tx_mm_read_readdata;                               // mm_interconnect_1:dma_tx_mm_read_readdata -> dma_tx:mm_read_readdata
	wire          dma_tx_mm_read_waitrequest;                            // mm_interconnect_1:dma_tx_mm_read_waitrequest -> dma_tx:mm_read_waitrequest
	wire   [31:0] dma_tx_mm_read_address;                                // dma_tx:mm_read_address -> mm_interconnect_1:dma_tx_mm_read_address
	wire          dma_tx_mm_read_read;                                   // dma_tx:mm_read_read -> mm_interconnect_1:dma_tx_mm_read_read
	wire   [31:0] dma_tx_mm_read_byteenable;                             // dma_tx:mm_read_byteenable -> mm_interconnect_1:dma_tx_mm_read_byteenable
	wire          dma_tx_mm_read_readdatavalid;                          // mm_interconnect_1:dma_tx_mm_read_readdatavalid -> dma_tx:mm_read_readdatavalid
	wire   [10:0] dma_tx_mm_read_burstcount;                             // dma_tx:mm_read_burstcount -> mm_interconnect_1:dma_tx_mm_read_burstcount
	wire          dma_rx_mm_write_waitrequest;                           // mm_interconnect_1:dma_rx_mm_write_waitrequest -> dma_rx:mm_write_waitrequest
	wire   [31:0] dma_rx_mm_write_address;                               // dma_rx:mm_write_address -> mm_interconnect_1:dma_rx_mm_write_address
	wire   [31:0] dma_rx_mm_write_byteenable;                            // dma_rx:mm_write_byteenable -> mm_interconnect_1:dma_rx_mm_write_byteenable
	wire          dma_rx_mm_write_write;                                 // dma_rx:mm_write_write -> mm_interconnect_1:dma_rx_mm_write_write
	wire  [255:0] dma_rx_mm_write_writedata;                             // dma_rx:mm_write_writedata -> mm_interconnect_1:dma_rx_mm_write_writedata
	wire    [7:0] dma_rx_mm_write_burstcount;                            // dma_rx:mm_write_burstcount -> mm_interconnect_1:dma_rx_mm_write_burstcount
	wire  [255:0] mm_interconnect_1_dma_bridge_s0_readdata;              // dma_bridge:s0_readdata -> mm_interconnect_1:dma_bridge_s0_readdata
	wire          mm_interconnect_1_dma_bridge_s0_waitrequest;           // dma_bridge:s0_waitrequest -> mm_interconnect_1:dma_bridge_s0_waitrequest
	wire          mm_interconnect_1_dma_bridge_s0_debugaccess;           // mm_interconnect_1:dma_bridge_s0_debugaccess -> dma_bridge:s0_debugaccess
	wire   [30:0] mm_interconnect_1_dma_bridge_s0_address;               // mm_interconnect_1:dma_bridge_s0_address -> dma_bridge:s0_address
	wire          mm_interconnect_1_dma_bridge_s0_read;                  // mm_interconnect_1:dma_bridge_s0_read -> dma_bridge:s0_read
	wire   [31:0] mm_interconnect_1_dma_bridge_s0_byteenable;            // mm_interconnect_1:dma_bridge_s0_byteenable -> dma_bridge:s0_byteenable
	wire          mm_interconnect_1_dma_bridge_s0_readdatavalid;         // dma_bridge:s0_readdatavalid -> mm_interconnect_1:dma_bridge_s0_readdatavalid
	wire    [1:0] mm_interconnect_1_dma_bridge_s0_response;              // dma_bridge:s0_response -> mm_interconnect_1:dma_bridge_s0_response
	wire          mm_interconnect_1_dma_bridge_s0_write;                 // mm_interconnect_1:dma_bridge_s0_write -> dma_bridge:s0_write
	wire  [255:0] mm_interconnect_1_dma_bridge_s0_writedata;             // mm_interconnect_1:dma_bridge_s0_writedata -> dma_bridge:s0_writedata
	wire    [7:0] mm_interconnect_1_dma_bridge_s0_burstcount;            // mm_interconnect_1:dma_bridge_s0_burstcount -> dma_bridge:s0_burstcount
	wire          mac_receive_valid;                                     // mac:ff_rx_dval -> avalon_st_adapter:in_0_valid
	wire   [31:0] mac_receive_data;                                      // mac:ff_rx_data -> avalon_st_adapter:in_0_data
	wire          mac_receive_ready;                                     // avalon_st_adapter:in_0_ready -> mac:ff_rx_rdy
	wire          mac_receive_startofpacket;                             // mac:ff_rx_sop -> avalon_st_adapter:in_0_startofpacket
	wire          mac_receive_endofpacket;                               // mac:ff_rx_eop -> avalon_st_adapter:in_0_endofpacket
	wire    [5:0] mac_receive_error;                                     // mac:rx_err -> avalon_st_adapter:in_0_error
	wire    [1:0] mac_receive_empty;                                     // mac:ff_rx_mod -> avalon_st_adapter:in_0_empty
	wire          avalon_st_adapter_out_0_valid;                         // avalon_st_adapter:out_0_valid -> dma_rx:st_sink_valid
	wire  [255:0] avalon_st_adapter_out_0_data;                          // avalon_st_adapter:out_0_data -> dma_rx:st_sink_data
	wire          avalon_st_adapter_out_0_ready;                         // dma_rx:st_sink_ready -> avalon_st_adapter:out_0_ready
	wire          avalon_st_adapter_out_0_startofpacket;                 // avalon_st_adapter:out_0_startofpacket -> dma_rx:st_sink_startofpacket
	wire          avalon_st_adapter_out_0_endofpacket;                   // avalon_st_adapter:out_0_endofpacket -> dma_rx:st_sink_endofpacket
	wire    [7:0] avalon_st_adapter_out_0_error;                         // avalon_st_adapter:out_0_error -> dma_rx:st_sink_error
	wire    [4:0] avalon_st_adapter_out_0_empty;                         // avalon_st_adapter:out_0_empty -> dma_rx:st_sink_empty
	wire          dma_tx_st_source_valid;                                // dma_tx:st_source_valid -> avalon_st_adapter_001:in_0_valid
	wire  [255:0] dma_tx_st_source_data;                                 // dma_tx:st_source_data -> avalon_st_adapter_001:in_0_data
	wire          dma_tx_st_source_ready;                                // avalon_st_adapter_001:in_0_ready -> dma_tx:st_source_ready
	wire    [7:0] dma_tx_st_source_channel;                              // dma_tx:st_source_channel -> avalon_st_adapter_001:in_0_channel
	wire          dma_tx_st_source_startofpacket;                        // dma_tx:st_source_startofpacket -> avalon_st_adapter_001:in_0_startofpacket
	wire          dma_tx_st_source_endofpacket;                          // dma_tx:st_source_endofpacket -> avalon_st_adapter_001:in_0_endofpacket
	wire    [7:0] dma_tx_st_source_error;                                // dma_tx:st_source_error -> avalon_st_adapter_001:in_0_error
	wire    [4:0] dma_tx_st_source_empty;                                // dma_tx:st_source_empty -> avalon_st_adapter_001:in_0_empty
	wire          avalon_st_adapter_001_out_0_valid;                     // avalon_st_adapter_001:out_0_valid -> mac:ff_tx_wren
	wire   [31:0] avalon_st_adapter_001_out_0_data;                      // avalon_st_adapter_001:out_0_data -> mac:ff_tx_data
	wire          avalon_st_adapter_001_out_0_ready;                     // mac:ff_tx_rdy -> avalon_st_adapter_001:out_0_ready
	wire          avalon_st_adapter_001_out_0_startofpacket;             // avalon_st_adapter_001:out_0_startofpacket -> mac:ff_tx_sop
	wire          avalon_st_adapter_001_out_0_endofpacket;               // avalon_st_adapter_001:out_0_endofpacket -> mac:ff_tx_eop
	wire    [0:0] avalon_st_adapter_001_out_0_error;                     // avalon_st_adapter_001:out_0_error -> mac:ff_tx_err
	wire    [1:0] avalon_st_adapter_001_out_0_empty;                     // avalon_st_adapter_001:out_0_empty -> mac:ff_tx_mod
	wire          rst_controller_reset_out_reset;                        // rst_controller:reset_out -> [avalon_st_adapter:in_rst_0_reset, avalon_st_adapter_001:in_rst_0_reset, dma_bridge:reset, mac:reset, mem_bridge:reset, mm_interconnect_0:mem_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_1:dma_bridge_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_001_reset_out_reset;                    // rst_controller_001:reset_out -> [dma_rx:reset_n_reset_n, dma_tx:reset_n_reset_n]

	clock clock (
		.in_clk  (clk_in_clk),        //   input,  width = 1,  in_clk.clk
		.out_clk (clock_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	dma_bridge dma_bridge (
		.clk              (clock_out_clk_clk),                             //   input,    width = 1,   clk.clk
		.reset            (rst_controller_reset_out_reset),                //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_1_dma_bridge_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_1_dma_bridge_s0_readdata),      //  output,  width = 256,      .readdata
		.s0_readdatavalid (mm_interconnect_1_dma_bridge_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_response      (mm_interconnect_1_dma_bridge_s0_response),      //  output,    width = 2,      .response
		.s0_burstcount    (mm_interconnect_1_dma_bridge_s0_burstcount),    //   input,    width = 8,      .burstcount
		.s0_writedata     (mm_interconnect_1_dma_bridge_s0_writedata),     //   input,  width = 256,      .writedata
		.s0_address       (mm_interconnect_1_dma_bridge_s0_address),       //   input,   width = 31,      .address
		.s0_write         (mm_interconnect_1_dma_bridge_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_1_dma_bridge_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_1_dma_bridge_s0_byteenable),    //   input,   width = 32,      .byteenable
		.s0_debugaccess   (mm_interconnect_1_dma_bridge_s0_debugaccess),   //   input,    width = 1,      .debugaccess
		.m0_waitrequest   (avm_waitrequest),                               //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (avm_readdata),                                  //   input,  width = 256,      .readdata
		.m0_readdatavalid (avm_readdatavalid),                             //   input,    width = 1,      .readdatavalid
		.m0_response      (avm_response),                                  //   input,    width = 2,      .response
		.m0_burstcount    (avm_burstcount),                                //  output,    width = 8,      .burstcount
		.m0_writedata     (avm_writedata),                                 //  output,  width = 256,      .writedata
		.m0_address       (avm_address),                                   //  output,   width = 31,      .address
		.m0_write         (avm_write),                                     //  output,    width = 1,      .write
		.m0_read          (avm_read),                                      //  output,    width = 1,      .read
		.m0_byteenable    (avm_byteenable),                                //  output,   width = 32,      .byteenable
		.m0_debugaccess   (avm_debugaccess)                                //  output,    width = 1,      .debugaccess
	);

	dma_rx dma_rx (
		.clock_clk                    (clock_out_clk_clk),                                     //   input,    width = 1,            clock.clk
		.reset_n_reset_n              (~rst_controller_001_reset_out_reset),                   //   input,    width = 1,          reset_n.reset_n
		.csr_writedata                (mm_interconnect_0_dma_rx_csr_writedata),                //   input,   width = 32,              csr.writedata
		.csr_write                    (mm_interconnect_0_dma_rx_csr_write),                    //   input,    width = 1,                 .write
		.csr_byteenable               (mm_interconnect_0_dma_rx_csr_byteenable),               //   input,    width = 4,                 .byteenable
		.csr_readdata                 (mm_interconnect_0_dma_rx_csr_readdata),                 //  output,   width = 32,                 .readdata
		.csr_read                     (mm_interconnect_0_dma_rx_csr_read),                     //   input,    width = 1,                 .read
		.csr_address                  (mm_interconnect_0_dma_rx_csr_address),                  //   input,    width = 3,                 .address
		.descriptor_slave_write       (mm_interconnect_0_dma_rx_descriptor_slave_write),       //   input,    width = 1, descriptor_slave.write
		.descriptor_slave_waitrequest (mm_interconnect_0_dma_rx_descriptor_slave_waitrequest), //  output,    width = 1,                 .waitrequest
		.descriptor_slave_writedata   (mm_interconnect_0_dma_rx_descriptor_slave_writedata),   //   input,  width = 256,                 .writedata
		.descriptor_slave_byteenable  (mm_interconnect_0_dma_rx_descriptor_slave_byteenable),  //   input,   width = 32,                 .byteenable
		.response_waitrequest         (mm_interconnect_0_dma_rx_response_waitrequest),         //  output,    width = 1,         response.waitrequest
		.response_byteenable          (mm_interconnect_0_dma_rx_response_byteenable),          //   input,    width = 4,                 .byteenable
		.response_address             (mm_interconnect_0_dma_rx_response_address),             //   input,    width = 1,                 .address
		.response_readdata            (mm_interconnect_0_dma_rx_response_readdata),            //  output,   width = 32,                 .readdata
		.response_read                (mm_interconnect_0_dma_rx_response_read),                //   input,    width = 1,                 .read
		.csr_irq_irq                  (dma_rx_irq_irq),                                        //  output,    width = 1,          csr_irq.irq
		.mm_write_address             (dma_rx_mm_write_address),                               //  output,   width = 32,         mm_write.address
		.mm_write_write               (dma_rx_mm_write_write),                                 //  output,    width = 1,                 .write
		.mm_write_byteenable          (dma_rx_mm_write_byteenable),                            //  output,   width = 32,                 .byteenable
		.mm_write_writedata           (dma_rx_mm_write_writedata),                             //  output,  width = 256,                 .writedata
		.mm_write_waitrequest         (dma_rx_mm_write_waitrequest),                           //   input,    width = 1,                 .waitrequest
		.mm_write_burstcount          (dma_rx_mm_write_burstcount),                            //  output,    width = 8,                 .burstcount
		.st_sink_data                 (avalon_st_adapter_out_0_data),                          //   input,  width = 256,          st_sink.data
		.st_sink_valid                (avalon_st_adapter_out_0_valid),                         //   input,    width = 1,                 .valid
		.st_sink_ready                (avalon_st_adapter_out_0_ready),                         //  output,    width = 1,                 .ready
		.st_sink_startofpacket        (avalon_st_adapter_out_0_startofpacket),                 //   input,    width = 1,                 .startofpacket
		.st_sink_endofpacket          (avalon_st_adapter_out_0_endofpacket),                   //   input,    width = 1,                 .endofpacket
		.st_sink_empty                (avalon_st_adapter_out_0_empty),                         //   input,    width = 5,                 .empty
		.st_sink_error                (avalon_st_adapter_out_0_error)                          //   input,    width = 8,                 .error
	);

	dma_tx dma_tx (
		.clock_clk                    (clock_out_clk_clk),                                     //   input,    width = 1,            clock.clk
		.reset_n_reset_n              (~rst_controller_001_reset_out_reset),                   //   input,    width = 1,          reset_n.reset_n
		.csr_writedata                (mm_interconnect_0_dma_tx_csr_writedata),                //   input,   width = 32,              csr.writedata
		.csr_write                    (mm_interconnect_0_dma_tx_csr_write),                    //   input,    width = 1,                 .write
		.csr_byteenable               (mm_interconnect_0_dma_tx_csr_byteenable),               //   input,    width = 4,                 .byteenable
		.csr_readdata                 (mm_interconnect_0_dma_tx_csr_readdata),                 //  output,   width = 32,                 .readdata
		.csr_read                     (mm_interconnect_0_dma_tx_csr_read),                     //   input,    width = 1,                 .read
		.csr_address                  (mm_interconnect_0_dma_tx_csr_address),                  //   input,    width = 3,                 .address
		.descriptor_slave_write       (mm_interconnect_0_dma_tx_descriptor_slave_write),       //   input,    width = 1, descriptor_slave.write
		.descriptor_slave_waitrequest (mm_interconnect_0_dma_tx_descriptor_slave_waitrequest), //  output,    width = 1,                 .waitrequest
		.descriptor_slave_writedata   (mm_interconnect_0_dma_tx_descriptor_slave_writedata),   //   input,  width = 256,                 .writedata
		.descriptor_slave_byteenable  (mm_interconnect_0_dma_tx_descriptor_slave_byteenable),  //   input,   width = 32,                 .byteenable
		.csr_irq_irq                  (dma_tx_irq_irq),                                        //  output,    width = 1,          csr_irq.irq
		.mm_read_address              (dma_tx_mm_read_address),                                //  output,   width = 32,          mm_read.address
		.mm_read_read                 (dma_tx_mm_read_read),                                   //  output,    width = 1,                 .read
		.mm_read_byteenable           (dma_tx_mm_read_byteenable),                             //  output,   width = 32,                 .byteenable
		.mm_read_readdata             (dma_tx_mm_read_readdata),                               //   input,  width = 256,                 .readdata
		.mm_read_waitrequest          (dma_tx_mm_read_waitrequest),                            //   input,    width = 1,                 .waitrequest
		.mm_read_readdatavalid        (dma_tx_mm_read_readdatavalid),                          //   input,    width = 1,                 .readdatavalid
		.mm_read_burstcount           (dma_tx_mm_read_burstcount),                             //  output,   width = 11,                 .burstcount
		.st_source_data               (dma_tx_st_source_data),                                 //  output,  width = 256,        st_source.data
		.st_source_valid              (dma_tx_st_source_valid),                                //  output,    width = 1,                 .valid
		.st_source_ready              (dma_tx_st_source_ready),                                //   input,    width = 1,                 .ready
		.st_source_startofpacket      (dma_tx_st_source_startofpacket),                        //  output,    width = 1,                 .startofpacket
		.st_source_endofpacket        (dma_tx_st_source_endofpacket),                          //  output,    width = 1,                 .endofpacket
		.st_source_empty              (dma_tx_st_source_empty),                                //  output,    width = 5,                 .empty
		.st_source_error              (dma_tx_st_source_error),                                //  output,    width = 8,                 .error
		.st_source_channel            (dma_tx_st_source_channel)                               //  output,    width = 8,                 .channel
	);

	ethernet_iopll ethernet_iopll (
		.rst      (~reset_out_reset_reset),     //   input,  width = 1,   reset.reset
		.refclk   (tx_clock_clk),               //   input,  width = 1,  refclk.clk
		.outclk_0 (ethernet_iopll_outclk0_clk)  //  output,  width = 1, outclk0.clk
	);

	mac mac (
		.clk           (clock_out_clk_clk),                              //   input,   width = 1, control_port_clock_connection.clk
		.reset         (rst_controller_reset_out_reset),                 //   input,   width = 1,              reset_connection.reset
		.reg_addr      (mm_interconnect_0_mac_control_port_address),     //   input,   width = 8,                  control_port.address
		.reg_data_out  (mm_interconnect_0_mac_control_port_readdata),    //  output,  width = 32,                              .readdata
		.reg_rd        (mm_interconnect_0_mac_control_port_read),        //   input,   width = 1,                              .read
		.reg_data_in   (mm_interconnect_0_mac_control_port_writedata),   //   input,  width = 32,                              .writedata
		.reg_wr        (mm_interconnect_0_mac_control_port_write),       //   input,   width = 1,                              .write
		.reg_busy      (mm_interconnect_0_mac_control_port_waitrequest), //  output,   width = 1,                              .waitrequest
		.ff_tx_clk     (clock_out_clk_clk),                              //   input,   width = 1,     transmit_clock_connection.clk
		.ff_rx_clk     (clock_out_clk_clk),                              //   input,   width = 1,      receive_clock_connection.clk
		.ff_rx_data    (mac_receive_data),                               //  output,  width = 32,                       receive.data
		.ff_rx_eop     (mac_receive_endofpacket),                        //  output,   width = 1,                              .endofpacket
		.rx_err        (mac_receive_error),                              //  output,   width = 6,                              .error
		.ff_rx_mod     (mac_receive_empty),                              //  output,   width = 2,                              .empty
		.ff_rx_rdy     (mac_receive_ready),                              //   input,   width = 1,                              .ready
		.ff_rx_sop     (mac_receive_startofpacket),                      //  output,   width = 1,                              .startofpacket
		.ff_rx_dval    (mac_receive_valid),                              //  output,   width = 1,                              .valid
		.ff_tx_data    (avalon_st_adapter_001_out_0_data),               //   input,  width = 32,                      transmit.data
		.ff_tx_eop     (avalon_st_adapter_001_out_0_endofpacket),        //   input,   width = 1,                              .endofpacket
		.ff_tx_err     (avalon_st_adapter_001_out_0_error),              //   input,   width = 1,                              .error
		.ff_tx_mod     (avalon_st_adapter_001_out_0_empty),              //   input,   width = 2,                              .empty
		.ff_tx_rdy     (avalon_st_adapter_001_out_0_ready),              //  output,   width = 1,                              .ready
		.ff_tx_sop     (avalon_st_adapter_001_out_0_startofpacket),      //   input,   width = 1,                              .startofpacket
		.ff_tx_wren    (avalon_st_adapter_001_out_0_valid),              //   input,   width = 1,                              .valid
		.xon_gen       (misc_xon_gen),                                   //   input,   width = 1,           mac_misc_connection.xon_gen
		.xoff_gen      (misc_xoff_gen),                                  //   input,   width = 1,                              .xoff_gen
		.magic_wakeup  (misc_magic_wakeup),                              //  output,   width = 1,                              .magic_wakeup
		.magic_sleep_n (misc_magic_sleep_n),                             //   input,   width = 1,                              .magic_sleep_n
		.ff_tx_crc_fwd (misc_ff_tx_crc_fwd),                             //   input,   width = 1,                              .ff_tx_crc_fwd
		.ff_tx_septy   (misc_ff_tx_septy),                               //  output,   width = 1,                              .ff_tx_septy
		.tx_ff_uflow   (misc_tx_ff_uflow),                               //  output,   width = 1,                              .tx_ff_uflow
		.ff_tx_a_full  (misc_ff_tx_a_full),                              //  output,   width = 1,                              .ff_tx_a_full
		.ff_tx_a_empty (misc_ff_tx_a_empty),                             //  output,   width = 1,                              .ff_tx_a_empty
		.rx_err_stat   (misc_rx_err_stat),                               //  output,  width = 18,                              .rx_err_stat
		.rx_frm_type   (misc_rx_frm_type),                               //  output,   width = 4,                              .rx_frm_type
		.ff_rx_dsav    (misc_ff_rx_dsav),                                //  output,   width = 1,                              .ff_rx_dsav
		.ff_rx_a_full  (misc_ff_rx_a_full),                              //  output,   width = 1,                              .ff_rx_a_full
		.ff_rx_a_empty (misc_ff_rx_a_empty),                             //  output,   width = 1,                              .ff_rx_a_empty
		.mdc           (mdio_mdc),                                       //  output,   width = 1,           mac_mdio_connection.mdc
		.mdio_in       (mdio_mdio_in),                                   //   input,   width = 1,                              .mdio_in
		.mdio_out      (mdio_mdio_out),                                  //  output,   width = 1,                              .mdio_out
		.mdio_oen      (mdio_mdio_oen),                                  //  output,   width = 1,                              .mdio_oen
		.gm_rx_d       (gmii_gmii_rx_d),                                 //   input,   width = 8,           mac_gmii_connection.gmii_rx_d
		.gm_rx_dv      (gmii_gmii_rx_dv),                                //   input,   width = 1,                              .gmii_rx_dv
		.gm_rx_err     (gmii_gmii_rx_err),                               //   input,   width = 1,                              .gmii_rx_err
		.gm_tx_d       (gmii_gmii_tx_d),                                 //  output,   width = 8,                              .gmii_tx_d
		.gm_tx_en      (gmii_gmii_tx_en),                                //  output,   width = 1,                              .gmii_tx_en
		.gm_tx_err     (gmii_gmii_tx_err),                               //  output,   width = 1,                              .gmii_tx_err
		.m_rx_d        (mii_mii_rx_d),                                   //   input,   width = 4,            mac_mii_connection.mii_rx_d
		.m_rx_en       (mii_mii_rx_dv),                                  //   input,   width = 1,                              .mii_rx_dv
		.m_rx_err      (mii_mii_rx_err),                                 //   input,   width = 1,                              .mii_rx_err
		.m_tx_d        (mii_mii_tx_d),                                   //  output,   width = 4,                              .mii_tx_d
		.m_tx_en       (mii_mii_tx_en),                                  //  output,   width = 1,                              .mii_tx_en
		.m_tx_err      (mii_mii_tx_err),                                 //  output,   width = 1,                              .mii_tx_err
		.set_10        (status_set_10),                                  //   input,   width = 1,         mac_status_connection.set_10
		.set_1000      (status_set_1000),                                //   input,   width = 1,                              .set_1000
		.eth_mode      (status_eth_mode),                                //  output,   width = 1,                              .eth_mode
		.ena_10        (status_ena_10),                                  //  output,   width = 1,                              .ena_10
		.tx_clk        (ethernet_iopll_outclk0_clk),                     //   input,   width = 1,   pcs_mac_tx_clock_connection.clk
		.rx_clk        (rx_clock_clk)                                    //   input,   width = 1,   pcs_mac_rx_clock_connection.clk
	);

	mem_bridge mem_bridge (
		.clk              (clock_out_clk_clk),              //   input,   width = 1,   clk.clk
		.reset            (rst_controller_reset_out_reset), //   input,   width = 1, reset.reset
		.s0_waitrequest   (avs_waitrequest),                //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (avs_readdata),                   //  output,  width = 32,      .readdata
		.s0_readdatavalid (avs_readdatavalid),              //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (avs_burstcount),                 //   input,   width = 5,      .burstcount
		.s0_writedata     (avs_writedata),                  //   input,  width = 32,      .writedata
		.s0_address       (avs_address),                    //   input,  width = 11,      .address
		.s0_write         (avs_write),                      //   input,   width = 1,      .write
		.s0_read          (avs_read),                       //   input,   width = 1,      .read
		.s0_byteenable    (avs_byteenable),                 //   input,   width = 4,      .byteenable
		.s0_debugaccess   (avs_debugaccess),                //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (mem_bridge_m0_waitrequest),      //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (mem_bridge_m0_readdata),         //   input,  width = 32,      .readdata
		.m0_readdatavalid (mem_bridge_m0_readdatavalid),    //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (mem_bridge_m0_burstcount),       //  output,   width = 5,      .burstcount
		.m0_writedata     (mem_bridge_m0_writedata),        //  output,  width = 32,      .writedata
		.m0_address       (mem_bridge_m0_address),          //  output,  width = 11,      .address
		.m0_write         (mem_bridge_m0_write),            //  output,   width = 1,      .write
		.m0_read          (mem_bridge_m0_read),             //  output,   width = 1,      .read
		.m0_byteenable    (mem_bridge_m0_byteenable),       //  output,   width = 4,      .byteenable
		.m0_debugaccess   (mem_bridge_m0_debugaccess)       //  output,   width = 1,      .debugaccess
	);

	reset reset (
		.in_reset_n  (rst_in_reset_n),        //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	ethernet_altera_mm_interconnect_181_cgd6l6i mm_interconnect_0 (
		.mem_bridge_m0_address                        (mem_bridge_m0_address),                                 //   input,   width = 11,                          mem_bridge_m0.address
		.mem_bridge_m0_waitrequest                    (mem_bridge_m0_waitrequest),                             //  output,    width = 1,                                       .waitrequest
		.mem_bridge_m0_burstcount                     (mem_bridge_m0_burstcount),                              //   input,    width = 5,                                       .burstcount
		.mem_bridge_m0_byteenable                     (mem_bridge_m0_byteenable),                              //   input,    width = 4,                                       .byteenable
		.mem_bridge_m0_read                           (mem_bridge_m0_read),                                    //   input,    width = 1,                                       .read
		.mem_bridge_m0_readdata                       (mem_bridge_m0_readdata),                                //  output,   width = 32,                                       .readdata
		.mem_bridge_m0_readdatavalid                  (mem_bridge_m0_readdatavalid),                           //  output,    width = 1,                                       .readdatavalid
		.mem_bridge_m0_write                          (mem_bridge_m0_write),                                   //   input,    width = 1,                                       .write
		.mem_bridge_m0_writedata                      (mem_bridge_m0_writedata),                               //   input,   width = 32,                                       .writedata
		.mem_bridge_m0_debugaccess                    (mem_bridge_m0_debugaccess),                             //   input,    width = 1,                                       .debugaccess
		.mac_control_port_address                     (mm_interconnect_0_mac_control_port_address),            //  output,    width = 8,                       mac_control_port.address
		.mac_control_port_write                       (mm_interconnect_0_mac_control_port_write),              //  output,    width = 1,                                       .write
		.mac_control_port_read                        (mm_interconnect_0_mac_control_port_read),               //  output,    width = 1,                                       .read
		.mac_control_port_readdata                    (mm_interconnect_0_mac_control_port_readdata),           //   input,   width = 32,                                       .readdata
		.mac_control_port_writedata                   (mm_interconnect_0_mac_control_port_writedata),          //  output,   width = 32,                                       .writedata
		.mac_control_port_waitrequest                 (mm_interconnect_0_mac_control_port_waitrequest),        //   input,    width = 1,                                       .waitrequest
		.dma_rx_csr_address                           (mm_interconnect_0_dma_rx_csr_address),                  //  output,    width = 3,                             dma_rx_csr.address
		.dma_rx_csr_write                             (mm_interconnect_0_dma_rx_csr_write),                    //  output,    width = 1,                                       .write
		.dma_rx_csr_read                              (mm_interconnect_0_dma_rx_csr_read),                     //  output,    width = 1,                                       .read
		.dma_rx_csr_readdata                          (mm_interconnect_0_dma_rx_csr_readdata),                 //   input,   width = 32,                                       .readdata
		.dma_rx_csr_writedata                         (mm_interconnect_0_dma_rx_csr_writedata),                //  output,   width = 32,                                       .writedata
		.dma_rx_csr_byteenable                        (mm_interconnect_0_dma_rx_csr_byteenable),               //  output,    width = 4,                                       .byteenable
		.dma_tx_csr_address                           (mm_interconnect_0_dma_tx_csr_address),                  //  output,    width = 3,                             dma_tx_csr.address
		.dma_tx_csr_write                             (mm_interconnect_0_dma_tx_csr_write),                    //  output,    width = 1,                                       .write
		.dma_tx_csr_read                              (mm_interconnect_0_dma_tx_csr_read),                     //  output,    width = 1,                                       .read
		.dma_tx_csr_readdata                          (mm_interconnect_0_dma_tx_csr_readdata),                 //   input,   width = 32,                                       .readdata
		.dma_tx_csr_writedata                         (mm_interconnect_0_dma_tx_csr_writedata),                //  output,   width = 32,                                       .writedata
		.dma_tx_csr_byteenable                        (mm_interconnect_0_dma_tx_csr_byteenable),               //  output,    width = 4,                                       .byteenable
		.dma_rx_descriptor_slave_write                (mm_interconnect_0_dma_rx_descriptor_slave_write),       //  output,    width = 1,                dma_rx_descriptor_slave.write
		.dma_rx_descriptor_slave_writedata            (mm_interconnect_0_dma_rx_descriptor_slave_writedata),   //  output,  width = 256,                                       .writedata
		.dma_rx_descriptor_slave_byteenable           (mm_interconnect_0_dma_rx_descriptor_slave_byteenable),  //  output,   width = 32,                                       .byteenable
		.dma_rx_descriptor_slave_waitrequest          (mm_interconnect_0_dma_rx_descriptor_slave_waitrequest), //   input,    width = 1,                                       .waitrequest
		.dma_tx_descriptor_slave_write                (mm_interconnect_0_dma_tx_descriptor_slave_write),       //  output,    width = 1,                dma_tx_descriptor_slave.write
		.dma_tx_descriptor_slave_writedata            (mm_interconnect_0_dma_tx_descriptor_slave_writedata),   //  output,  width = 256,                                       .writedata
		.dma_tx_descriptor_slave_byteenable           (mm_interconnect_0_dma_tx_descriptor_slave_byteenable),  //  output,   width = 32,                                       .byteenable
		.dma_tx_descriptor_slave_waitrequest          (mm_interconnect_0_dma_tx_descriptor_slave_waitrequest), //   input,    width = 1,                                       .waitrequest
		.dma_rx_response_address                      (mm_interconnect_0_dma_rx_response_address),             //  output,    width = 1,                        dma_rx_response.address
		.dma_rx_response_read                         (mm_interconnect_0_dma_rx_response_read),                //  output,    width = 1,                                       .read
		.dma_rx_response_readdata                     (mm_interconnect_0_dma_rx_response_readdata),            //   input,   width = 32,                                       .readdata
		.dma_rx_response_byteenable                   (mm_interconnect_0_dma_rx_response_byteenable),          //  output,    width = 4,                                       .byteenable
		.dma_rx_response_waitrequest                  (mm_interconnect_0_dma_rx_response_waitrequest),         //   input,    width = 1,                                       .waitrequest
		.mem_bridge_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                        //   input,    width = 1, mem_bridge_reset_reset_bridge_in_reset.reset
		.clock_out_clk_clk                            (clock_out_clk_clk)                                      //   input,    width = 1,                          clock_out_clk.clk
	);

	ethernet_altera_mm_interconnect_181_n7fyt6a mm_interconnect_1 (
		.dma_tx_mm_read_address                       (dma_tx_mm_read_address),                        //   input,   width = 32,                         dma_tx_mm_read.address
		.dma_tx_mm_read_waitrequest                   (dma_tx_mm_read_waitrequest),                    //  output,    width = 1,                                       .waitrequest
		.dma_tx_mm_read_burstcount                    (dma_tx_mm_read_burstcount),                     //   input,   width = 11,                                       .burstcount
		.dma_tx_mm_read_byteenable                    (dma_tx_mm_read_byteenable),                     //   input,   width = 32,                                       .byteenable
		.dma_tx_mm_read_read                          (dma_tx_mm_read_read),                           //   input,    width = 1,                                       .read
		.dma_tx_mm_read_readdata                      (dma_tx_mm_read_readdata),                       //  output,  width = 256,                                       .readdata
		.dma_tx_mm_read_readdatavalid                 (dma_tx_mm_read_readdatavalid),                  //  output,    width = 1,                                       .readdatavalid
		.dma_rx_mm_write_address                      (dma_rx_mm_write_address),                       //   input,   width = 32,                        dma_rx_mm_write.address
		.dma_rx_mm_write_waitrequest                  (dma_rx_mm_write_waitrequest),                   //  output,    width = 1,                                       .waitrequest
		.dma_rx_mm_write_burstcount                   (dma_rx_mm_write_burstcount),                    //   input,    width = 8,                                       .burstcount
		.dma_rx_mm_write_byteenable                   (dma_rx_mm_write_byteenable),                    //   input,   width = 32,                                       .byteenable
		.dma_rx_mm_write_write                        (dma_rx_mm_write_write),                         //   input,    width = 1,                                       .write
		.dma_rx_mm_write_writedata                    (dma_rx_mm_write_writedata),                     //   input,  width = 256,                                       .writedata
		.dma_bridge_s0_address                        (mm_interconnect_1_dma_bridge_s0_address),       //  output,   width = 31,                          dma_bridge_s0.address
		.dma_bridge_s0_write                          (mm_interconnect_1_dma_bridge_s0_write),         //  output,    width = 1,                                       .write
		.dma_bridge_s0_read                           (mm_interconnect_1_dma_bridge_s0_read),          //  output,    width = 1,                                       .read
		.dma_bridge_s0_readdata                       (mm_interconnect_1_dma_bridge_s0_readdata),      //   input,  width = 256,                                       .readdata
		.dma_bridge_s0_writedata                      (mm_interconnect_1_dma_bridge_s0_writedata),     //  output,  width = 256,                                       .writedata
		.dma_bridge_s0_burstcount                     (mm_interconnect_1_dma_bridge_s0_burstcount),    //  output,    width = 8,                                       .burstcount
		.dma_bridge_s0_byteenable                     (mm_interconnect_1_dma_bridge_s0_byteenable),    //  output,   width = 32,                                       .byteenable
		.dma_bridge_s0_readdatavalid                  (mm_interconnect_1_dma_bridge_s0_readdatavalid), //   input,    width = 1,                                       .readdatavalid
		.dma_bridge_s0_waitrequest                    (mm_interconnect_1_dma_bridge_s0_waitrequest),   //   input,    width = 1,                                       .waitrequest
		.dma_bridge_s0_debugaccess                    (mm_interconnect_1_dma_bridge_s0_debugaccess),   //  output,    width = 1,                                       .debugaccess
		.dma_bridge_s0_response                       (mm_interconnect_1_dma_bridge_s0_response),      //   input,    width = 2,                                       .response
		.dma_bridge_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                //   input,    width = 1, dma_bridge_reset_reset_bridge_in_reset.reset
		.clock_out_clk_clk                            (clock_out_clk_clk)                              //   input,    width = 1,                          clock_out_clk.clk
	);

	ethernet_altera_avalon_st_adapter_181_bmfedey #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (32),
		.inChannelWidth  (0),
		.inErrorWidth    (6),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (2),
		.outDataWidth    (256),
		.outChannelWidth (0),
		.outErrorWidth   (8),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (clock_out_clk_clk),                     //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),        //   input,    width = 1, in_rst_0.reset
		.out_0_data          (avalon_st_adapter_out_0_data),          //  output,  width = 256,    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),         //  output,    width = 1,         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),         //   input,    width = 1,         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket), //  output,    width = 1,         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),   //  output,    width = 1,         .endofpacket
		.out_0_empty         (avalon_st_adapter_out_0_empty),         //  output,    width = 5,         .empty
		.out_0_error         (avalon_st_adapter_out_0_error),         //  output,    width = 8,         .error
		.in_0_data           (mac_receive_data),                      //   input,   width = 32,     in_0.data
		.in_0_valid          (mac_receive_valid),                     //   input,    width = 1,         .valid
		.in_0_ready          (mac_receive_ready),                     //  output,    width = 1,         .ready
		.in_0_startofpacket  (mac_receive_startofpacket),             //   input,    width = 1,         .startofpacket
		.in_0_endofpacket    (mac_receive_endofpacket),               //   input,    width = 1,         .endofpacket
		.in_0_empty          (mac_receive_empty),                     //   input,    width = 2,         .empty
		.in_0_error          (mac_receive_error)                      //   input,    width = 6,         .error
	);

	ethernet_altera_avalon_st_adapter_181_zifr75q #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (256),
		.inChannelWidth  (8),
		.inErrorWidth    (8),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk        (clock_out_clk_clk),                         //   input,    width = 1, in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),            //   input,    width = 1, in_rst_0.reset
		.in_0_data           (dma_tx_st_source_data),                     //   input,  width = 256,     in_0.data
		.in_0_valid          (dma_tx_st_source_valid),                    //   input,    width = 1,         .valid
		.in_0_ready          (dma_tx_st_source_ready),                    //  output,    width = 1,         .ready
		.in_0_startofpacket  (dma_tx_st_source_startofpacket),            //   input,    width = 1,         .startofpacket
		.in_0_endofpacket    (dma_tx_st_source_endofpacket),              //   input,    width = 1,         .endofpacket
		.in_0_empty          (dma_tx_st_source_empty),                    //   input,    width = 5,         .empty
		.in_0_error          (dma_tx_st_source_error),                    //   input,    width = 8,         .error
		.in_0_channel        (dma_tx_st_source_channel),                  //   input,    width = 8,         .channel
		.out_0_data          (avalon_st_adapter_001_out_0_data),          //  output,   width = 32,    out_0.data
		.out_0_valid         (avalon_st_adapter_001_out_0_valid),         //  output,    width = 1,         .valid
		.out_0_ready         (avalon_st_adapter_001_out_0_ready),         //   input,    width = 1,         .ready
		.out_0_startofpacket (avalon_st_adapter_001_out_0_startofpacket), //  output,    width = 1,         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_001_out_0_endofpacket),   //  output,    width = 1,         .endofpacket
		.out_0_empty         (avalon_st_adapter_001_out_0_empty),         //  output,    width = 2,         .empty
		.out_0_error         (avalon_st_adapter_001_out_0_error)          //  output,    width = 1,         .error
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_out_reset_reset),         //   input,  width = 1, reset_in0.reset
		.clk            (clock_out_clk_clk),              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_out_reset_reset),             //   input,  width = 1, reset_in0.reset
		.clk            (clock_out_clk_clk),                  //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
